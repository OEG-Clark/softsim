{"home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.AverageMeter.__init__": [[24, 26], ["train_emb.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.AverageMeter.reset": [[27, 32], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.AverageMeter.update": [[33, 38], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.PairSelector.__init__": [[47, 49], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.PairSelector.get_pairs": [[50, 52], ["None"], "methods", ["None"], ["", "def", "get_pairs", "(", "self", ",", "embeddings", ",", "labels", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.HardNegativePairSelector.__init__": [[61, 64], ["train_emb.PairSelector.__init__"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["def", "__init__", "(", "self", ",", "cpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "HardNegativePairSelector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cpu", "=", "cpu", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.HardNegativePairSelector.get_pairs": [[65, 86], ["train_emb.pdist", "labels.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "numpy.array", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "negative_distances.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "embeddings.cpu.cpu.cpu", "list", "numpy.argpartition", "itertools.combinations", "len", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "labels.cpu().data.numpy.cpu().data.numpy.cpu", "range", "negative_distances.cpu().data.numpy.cpu().data.numpy.cpu", "len"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.pdist", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu"], ["", "def", "get_pairs", "(", "self", ",", "embeddings", ",", "labels", ")", ":", "\n", "        ", "if", "self", ".", "cpu", ":", "\n", "            ", "embeddings", "=", "embeddings", ".", "cpu", "(", ")", "\n", "", "distance_matrix", "=", "pdist", "(", "embeddings", ")", "\n", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "all_pairs", "=", "np", ".", "array", "(", "list", "(", "combinations", "(", "range", "(", "len", "(", "labels", ")", ")", ",", "2", ")", ")", ")", "\n", "all_pairs", "=", "torch", ".", "LongTensor", "(", "all_pairs", ")", "\n", "positive_pairs", "=", "all_pairs", "[", "(", "\n", "labels", "[", "all_pairs", "[", ":", ",", "0", "]", "]", "==", "labels", "[", "all_pairs", "[", ":", ",", "1", "]", "]", ")", ".", "nonzero", "(", ")", "]", "\n", "negative_pairs", "=", "all_pairs", "[", "(", "\n", "labels", "[", "all_pairs", "[", ":", ",", "0", "]", "]", "!=", "labels", "[", "all_pairs", "[", ":", ",", "1", "]", "]", ")", ".", "nonzero", "(", ")", "]", "\n", "\n", "negative_distances", "=", "distance_matrix", "[", "negative_pairs", "[", ":", ",", "\n", "0", "]", ",", "negative_pairs", "[", ":", ",", "1", "]", "]", "\n", "negative_distances", "=", "negative_distances", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "top_negatives", "=", "np", ".", "argpartition", "(", "negative_distances", ",", "len", "(", "positive_pairs", ")", ")", "[", "\n", ":", "len", "(", "positive_pairs", ")", "]", "\n", "top_negative_pairs", "=", "negative_pairs", "[", "torch", ".", "LongTensor", "(", "top_negatives", ")", "]", "\n", "\n", "return", "positive_pairs", ",", "top_negative_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.OnlineContrastiveLoss.__init__": [[97, 105], ["torch.Module.__init__", "mean_distance[].cuda"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda"], ["def", "__init__", "(", "self", ",", "margin", ",", "pair_selector", ",", "mean_distance", "=", "None", ")", ":", "\n", "        ", "super", "(", "OnlineContrastiveLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "pair_selector", "=", "pair_selector", "\n", "if", "mean_distance", "is", "not", "None", ":", "\n", "            ", "self", ".", "mean_distance", "=", "mean_distance", "[", "0", "]", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean_distance", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.OnlineContrastiveLoss.forward": [[106, 129], ["train_emb.OnlineContrastiveLoss.pair_selector.get_pairs", "tuple", "tuple", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "positive_pairs.cuda.cuda.cuda", "negative_pairs.cuda.cuda.cuda", "target[].tolist", "target[].tolist", "torch.relu().pow", "torch.relu().pow", "torch.relu().pow", "torch.relu().pow", "torch.relu().pow", "torch.relu().pow", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.HardNegativePairSelector.get_pairs", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu"], ["", "", "def", "forward", "(", "self", ",", "embeddings", ",", "target", ")", ":", "\n", "        ", "positive_pairs", ",", "negative_pairs", "=", "self", ".", "pair_selector", ".", "get_pairs", "(", "\n", "embeddings", ",", "target", ")", "\n", "if", "embeddings", ".", "is_cuda", ":", "\n", "            ", "positive_pairs", "=", "positive_pairs", ".", "cuda", "(", ")", "\n", "negative_pairs", "=", "negative_pairs", ".", "cuda", "(", ")", "\n", "", "positive_loss", "=", "(", "embeddings", "[", "positive_pairs", "[", ":", ",", "0", "]", "]", "-", "\n", "embeddings", "[", "positive_pairs", "[", ":", ",", "1", "]", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "\n", "labels_1", "=", "tuple", "(", "target", "[", "negative_pairs", "[", ":", ",", "0", "]", "]", ".", "tolist", "(", ")", ")", "\n", "labels_2", "=", "tuple", "(", "target", "[", "negative_pairs", "[", ":", ",", "1", "]", "]", ".", "tolist", "(", ")", ")", "\n", "label_pair", "=", "(", "labels_1", ",", "labels_2", ")", "\n", "\n", "if", "self", ".", "mean_distance", "is", "not", "None", ":", "\n", "            ", "negative_loss", "=", "F", ".", "relu", "(", "\n", "self", ".", "mean_distance", "[", "label_pair", "]", "-", "(", "(", "embeddings", "[", "negative_pairs", "[", ":", ",", "0", "]", "]", "-", "embeddings", "[", "negative_pairs", "[", ":", ",", "1", "]", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "\n", "1", ")", "+", "1e-6", ")", ".", "sqrt", "(", ")", ")", ".", "pow", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "negative_loss", "=", "F", ".", "relu", "(", "\n", "self", ".", "margin", "-", "(", "(", "embeddings", "[", "negative_pairs", "[", ":", ",", "0", "]", "]", "-", "embeddings", "[", "negative_pairs", "[", ":", ",", "1", "]", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "\n", "1", ")", "+", "1e-6", ")", ".", "sqrt", "(", ")", ")", ".", "pow", "(", "2", ")", "\n", "", "loss", "=", "torch", ".", "cat", "(", "[", "positive_loss", ",", "negative_loss", "]", ",", "dim", "=", "0", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.pdist": [[14, 18], ["vectors.pow().sum().view", "vectors.pow().sum().view", "vectors.mm", "vectors.pow().sum", "torch.t", "torch.t", "torch.t", "vectors.pow().sum", "vectors.pow", "vectors.pow"], "function", ["None"], ["def", "pdist", "(", "vectors", ")", ":", "\n", "    ", "distance_matrix", "=", "-", "2", "*", "vectors", ".", "mm", "(", "torch", ".", "t", "(", "vectors", ")", ")", "+", "vectors", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "+", "vectors", ".", "pow", "(", "2", ")", ".", "sum", "(", "\n", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "distance_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.main": [[131, 190], ["hydra.main", "logging.getLogger", "datasets.kpnet.KeypointDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.pointnet.PointNetDenseCls().cuda", "logging.getLogger.info", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "train_emb.OnlineContrastiveLoss", "train_emb.AverageMeter", "range", "PointNetDenseCls().cuda.parameters", "train_emb.HardNegativePairSelector", "tqdm.tqdm", "train_emb.AverageMeter.reset", "PointNetDenseCls().cuda.train", "enumerate", "logging.getLogger.info", "torch.save", "torch.save", "torch.save", "models.pointnet.PointNetDenseCls", "PointNetDenseCls().cuda.", "range", "torch.stack", "torch.stack", "torch.stack", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "OnlineContrastiveLoss.", "torch.optim.Adam.zero_grad", "criterion.backward", "torch.optim.Adam.step", "tqdm.tqdm.set_postfix", "train_emb.AverageMeter.update", "PointNetDenseCls().cuda.state_dict", "pc.cuda", "kp_idxs.cuda", "pc.transpose", "range", "criterion.item", "len", "torch.stack.append", "torch.tensor().cuda.append", "torch.tensor", "torch.tensor", "torch.tensor", "criterion.item"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.main", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.train_emb.AverageMeter.reset", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.train", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.Progbar.update", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda"], ["", "", "@", "hydra", ".", "main", "(", "config_path", "=", "'config'", ",", "config_name", "=", "'config'", ")", "\n", "def", "main", "(", "cfg", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "train_dataset", "=", "kpnet", ".", "KeypointDataset", "(", "cfg", ")", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "cfg", ".", "num_workers", ",", "drop_last", "=", "True", ")", "\n", "\n", "model", "=", "PointNetDenseCls", "(", "feature_transform", "=", "True", ",", "cfg", "=", "cfg", ")", ".", "cuda", "(", ")", "\n", "\n", "logger", ".", "info", "(", "'Start training on 3D embeddings'", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "1e-3", "\n", ")", "\n", "criterion", "=", "OnlineContrastiveLoss", "(", "1.", ",", "HardNegativePairSelector", "(", ")", ")", "\n", "\n", "meter", "=", "AverageMeter", "(", ")", "\n", "for", "epoch", "in", "range", "(", "cfg", ".", "max_epoch", "+", "1", ")", ":", "\n", "        ", "train_iter", "=", "tqdm", "(", "train_dataloader", ")", "\n", "\n", "# Training", "\n", "meter", ".", "reset", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "i", ",", "(", "pc", ",", "kp_idxs", ")", "in", "enumerate", "(", "train_iter", ")", ":", "\n", "            ", "pc", ",", "kp_idxs", "=", "pc", ".", "cuda", "(", ")", ",", "kp_idxs", ".", "cuda", "(", ")", "\n", "outputs", "=", "model", "(", "pc", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "embeddings", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "batch_size", ")", ":", "\n", "                ", "embedding_model", "=", "outputs", "[", "i", "]", "\n", "keypoints", "=", "kp_idxs", "[", "i", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "keypoints", ")", ")", ":", "\n", "                    ", "kp_idx", "=", "keypoints", "[", "idx", "]", "\n", "if", "kp_idx", "<", "0", ":", "\n", "                        ", "continue", "\n", "\n", "", "embedding_kp", "=", "embedding_model", "[", "kp_idx", "]", "\n", "embeddings", ".", "append", "(", "embedding_kp", ")", "\n", "labels", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "embeddings", "=", "torch", ".", "stack", "(", "embeddings", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "labels", ")", ".", "cuda", "(", ")", "\n", "\n", "loss", "=", "criterion", "(", "embeddings", ",", "labels", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_iter", ".", "set_postfix", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "meter", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\n", "f'Epoch: {epoch}, Average Train loss: {meter.avg}'", "\n", ")", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "f'epoch{epoch}.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.demo.real2prob": [[29, 50], ["numpy.zeros", "math.floor", "demo.real2prob"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.real2prob"], ["def", "real2prob", "(", "val", ",", "max_val", ",", "num_bins", ",", "circular", "=", "False", ")", ":", "\n", "    ", "res", "=", "np", ".", "zeros", "(", "(", "num_bins", ",", ")", ")", "\n", "if", "val", ">=", "max_val", ":", "\n", "        ", "val", "-=", "1e-7", "\n", "assert", "val", "<", "max_val", "\n", "", "if", "not", "circular", ":", "\n", "        ", "interval", "=", "max_val", "/", "(", "num_bins", "-", "1", ")", "\n", "low", "=", "math", ".", "floor", "(", "val", "/", "interval", ")", "\n", "high", "=", "low", "+", "1", "\n", "assert", "low", ">=", "0", "and", "high", "<", "num_bins", "\n", "res", "[", "low", "]", "=", "1.", "-", "(", "val", "/", "interval", "-", "low", ")", "\n", "res", "[", "high", "]", "=", "1.", "-", "res", "[", "low", "]", "\n", "assert", "0", "<=", "res", "[", "low", "]", "<=", "1.", "\n", "return", "res", "\n", "", "else", ":", "\n", "        ", "interval", "=", "max_val", "/", "num_bins", "\n", "if", "val", "<", "interval", "/", "2", ":", "\n", "            ", "val", "+=", "max_val", "\n", "", "res", "=", "real2prob", "(", "val", "-", "interval", "/", "2", ",", "max_val", ",", "num_bins", "+", "1", ")", "\n", "res", "[", "0", "]", "+=", "res", "[", "-", "1", "]", "\n", "return", "res", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.demo.prob2real": [[51, 62], ["numpy.sum", "numpy.stack", "numpy.sum", "numpy.arctan2", "numpy.cos", "numpy.sin", "numpy.expand_dims", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.np.pi"], "function", ["None"], ["", "", "def", "prob2real", "(", "prob", ",", "max_val", ",", "num_bins", ",", "circular", "=", "False", ")", ":", "\n", "    ", "if", "not", "circular", ":", "\n", "        ", "return", "np", ".", "sum", "(", "prob", "*", "np", ".", "arange", "(", "num_bins", ")", "*", "max_val", "/", "(", "num_bins", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "interval", "=", "max_val", "/", "num_bins", "\n", "vecs", "=", "np", ".", "stack", "(", "[", "np", ".", "cos", "(", "np", ".", "arange", "(", "num_bins", ")", "*", "interval", "+", "interval", "/", "2", ")", ",", "np", ".", "sin", "(", "np", ".", "arange", "(", "num_bins", ")", "*", "interval", "+", "interval", "/", "2", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "res", "=", "np", ".", "sum", "(", "np", ".", "expand_dims", "(", "prob", ",", "axis", "=", "-", "1", ")", "*", "vecs", ",", "axis", "=", "0", ")", "\n", "res", "=", "np", ".", "arctan2", "(", "res", "[", "1", "]", ",", "res", "[", "0", "]", ")", "\n", "if", "res", "<", "0", ":", "\n", "            ", "res", "+=", "2", "*", "np", ".", "pi", "# remap to [0, 2pi]", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.demo.vol2obj": [[64, 74], ["skimage.measure.marching_cubes_lewiner", "numpy.array", "numpy.min", "numpy.max"], "function", ["None"], ["", "", "def", "vol2obj", "(", "df", ",", "th", "=", "0.25", ")", ":", "\n", "    ", "if", "th", "<", "np", ".", "min", "(", "df", ")", ":", "\n", "        ", "df", "[", "0", ",", "0", ",", "0", "]", "=", "th", "-", "1", "\n", "", "if", "th", ">", "np", ".", "max", "(", "df", ")", ":", "\n", "        ", "df", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "=", "th", "+", "1", "\n", "", "spacing", "=", "(", "1", "/", "128", ",", "1", "/", "128", ",", "1", "/", "128", ")", "\n", "verts", ",", "faces", ",", "_", ",", "_", "=", "measure", ".", "marching_cubes_lewiner", "(", "\n", "df", ",", "th", ",", "spacing", "=", "spacing", ")", "\n", "verts", "-=", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "return", "verts", ",", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.demo.project": [[75, 86], ["numpy.array", "numpy.append", "numpy.array", "numpy.dot", "numpy.resize", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.resize"], ["", "def", "project", "(", "data", ",", "x", ",", "y", ",", "z", ")", ":", "\n", "    ", "p_3d", "=", "np", ".", "array", "(", "[", "[", "x", "]", ",", "[", "y", "]", ",", "[", "z", "]", ",", "[", "1.", "]", "]", ")", "\n", "RT", "=", "np", ".", "append", "(", "data", "[", "'rot_mat'", "]", ",", "np", ".", "resize", "(", "data", "[", "'trans_mat'", "]", ",", "[", "3", ",", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "# Here we convert focal length in mm into focal length in pixels.", "\n", "f_pix", "=", "data", "[", "'focal_length'", "]", "/", "32.", "*", "data", "[", "'img_size'", "]", "[", "0", "]", "\n", "K", "=", "np", ".", "array", "(", "[", "[", "f_pix", ",", "0.", ",", "data", "[", "'img_size'", "]", "[", "0", "]", "/", "2.", "]", ",", "[", "0", ",", "f_pix", ",", "data", "[", "'img_size'", "]", "[", "1", "]", "/", "2.", "]", ",", "[", "0.", ",", "0.", ",", "1.", "]", "]", ")", "\n", "p_2d", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "K", ",", "RT", ")", ",", "p_3d", ")", "\n", "p_2d", "=", "p_2d", "/", "p_2d", "[", "2", "]", "\n", "# Convert u, v into conventional image coordinates (from +u: leftward, +v: upward to +u: rightward, +v: downward).", "\n", "p_2d", "=", "data", "[", "'img_size'", "]", "-", "p_2d", "[", ":", "2", ",", "0", "]", "\n", "return", "p_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.demo.softmax": [[88, 90], ["numpy.exp", "numpy.sum", "numpy.exp"], "function", ["None"], ["", "def", "softmax", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "exp", "(", "x", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.demo.main": [[91, 279], ["hydra.main", "hydra.main", "hydra.utils.get_original_cwd", "hydra.utils.get_original_cwd", "loggers.ComposeLogger", "models.shapehd.Model_test", "shapehd.Model_test.cuda", "shapehd.Model_test.eval", "models.viewpoint.Model", "viewpoint.Model.load_state_dict", "viewpoint.Model.cuda", "viewpoint.Model.eval", "models.dense_embedding.Model().cuda", "dense_embedding.Model().cuda.load_state_dict", "dense_embedding.Model().cuda.eval", "datasets.Dataset", "torch.utils.data.DataLoader", "pickle.load", "neural_renderer.Renderer", "loggers.TerminateOnNaN", "os.path.join", "open", "shapehd.Model_test.marrnet1.predict", "cv2.imread().astype", "cv2.resize", "viewpoint.Model.predict", "demo.prob2real", "demo.prob2real", "shapehd.Model_test.predict", "np.flip.cpu().numpy", "numpy.transpose", "numpy.flip", "demo.vol2obj", "demo.main.to_obj_str"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.main", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.main", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.eval", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_state_dict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.eval", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_state_dict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.eval", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.resize", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.prob2real", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.prob2real", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.demo.vol2obj"], ["", "@", "hydra", ".", "main", "(", "config_path", "=", "'config/config.yaml'", ",", "strict", "=", "False", ")", "\n", "def", "main", "(", "opt", ")", ":", "\n", "    ", "work_dir", "=", "hydra", ".", "utils", ".", "get_original_cwd", "(", ")", "\n", "logger_list", "=", "[", "\n", "loggers", ".", "TerminateOnNaN", "(", ")", ",", "\n", "]", "\n", "logger", "=", "loggers", ".", "ComposeLogger", "(", "logger_list", ")", "\n", "\n", "model", "=", "shapehd", ".", "Model_test", "(", "opt", ",", "logger", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "net_aziele", "=", "viewpoint", ".", "Model", "(", "opt", ",", "logger", ")", "\n", "net_aziele", ".", "load_state_dict", "(", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'weights/best.pt'", ")", ")", "\n", "\n", "net_aziele", ".", "cuda", "(", ")", "\n", "net_aziele", ".", "eval", "(", ")", "\n", "\n", "# pointnet", "\n", "predictor", "=", "dense_embedding", ".", "Model", "(", ")", ".", "cuda", "(", ")", "\n", "predictor", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'weights/embeddings_norm.pt'", ")", ")", "[", "'state_dict'", "]", ")", "\n", "\n", "predictor", ".", "eval", "(", ")", "\n", "\n", "dataset", "=", "Dataset", "(", "opt", ",", "model", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "\n", "shuffle", "=", "False", "\n", ")", "\n", "\n", "embeddings", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "work_dir", ",", "'data/embeddings_kpnet_norm.pkl'", ")", ",", "'rb'", ")", ")", "\n", "\n", "renderer", "=", "nr", ".", "Renderer", "(", "camera_mode", "=", "'look_at'", ",", "viewing_angle", "=", "45", ")", "\n", "for", "batch", "in", "dataloader", ":", "\n", "# Forward MarrNet-1", "\n", "        ", "pred1", "=", "model", ".", "marrnet1", ".", "predict", "(", "batch", ",", "load_gt", "=", "False", ",", "no_grad", "=", "True", ")", "\n", "\n", "pred_normal", "=", "pred1", "[", "'normal'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "pred_depth", "=", "pred1", "[", "'depth'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "pred_silhou", "=", "model", ".", "postprocess", "(", "pred1", "[", "'silhou'", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "pred_silhou", "[", "pred_silhou", ">=", "model", ".", "pred_silhou_thres", "]", "=", "1", "\n", "pred_silhou", "[", "pred_silhou", "<", "model", ".", "pred_silhou_thres", "]", "=", "0", "\n", "\n", "gt_silhou", "=", "cv2", ".", "imread", "(", "batch", "[", "'mask_fn'", "]", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "gt_silhou", "=", "cv2", ".", "resize", "(", "gt_silhou", ",", "(", "256", ",", "256", ")", ")", "\n", "gt_silhou", "/=", "255.", "\n", "\n", "pred_normal", "=", "MinMaxScaler", "(", ")", ".", "fit_transform", "(", "pred_normal", ".", "reshape", "(", "-", "1", ",", "3", ")", ")", ".", "reshape", "(", "256", ",", "256", ",", "3", ")", "*", "255.", "\n", "pred_depth", "=", "MinMaxScaler", "(", ")", ".", "fit_transform", "(", "pred_depth", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "reshape", "(", "256", ",", "256", ",", "1", ")", "*", "255.", "\n", "\n", "pred", "=", "net_aziele", ".", "predict", "(", "batch", ",", "load_gt", "=", "False", ",", "no_grad", "=", "True", ")", "\n", "azimuth", "=", "prob2real", "(", "softmax", "(", "pred", "[", "'azimuth'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "2", "*", "np", ".", "pi", ",", "24", ",", "True", ")", "\n", "elevation", "=", "prob2real", "(", "softmax", "(", "pred", "[", "'elevation'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "np", ".", "pi", ",", "12", ",", "False", ")", "\n", "\n", "# Forward MarrNet-2", "\n", "for", "net_name", "in", "(", "'marrnet2'", ",", "'marrnet2_noft'", ")", ":", "\n", "            ", "net", "=", "getattr", "(", "model", ".", "net", ",", "net_name", ")", "\n", "net", ".", "silhou_thres", "=", "model", ".", "pred_silhou_thres", "*", "model", ".", "scale_25d", "\n", "\n", "", "model", ".", "input_names", "=", "[", "'depth'", ",", "'normal'", ",", "'silhou'", "]", "\n", "pred2", "=", "model", ".", "predict", "(", "pred1", ",", "load_gt", "=", "False", ",", "no_grad", "=", "True", ")", "\n", "voxel", "=", "pred2", "[", "'voxel'", "]", "\n", "voxel", "=", "1", "/", "(", "1", "+", "torch", ".", "exp", "(", "-", "voxel", ")", ")", "[", "0", ",", "0", "]", "\n", "voxel", "=", "voxel", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "voxel", "=", "np", ".", "transpose", "(", "voxel", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "voxel", "=", "np", ".", "flip", "(", "voxel", ",", "2", ")", "\n", "\n", "verts", ",", "faces", "=", "vol2obj", "(", "voxel", ",", "th", "=", "0.1", ")", "# fine tune threshold?", "\n", "\n", "def", "to_obj_str", "(", "verts", ",", "faces", ")", ":", "\n", "            ", "text", "=", "\"\"", "\n", "for", "p", "in", "verts", ":", "\n", "                ", "text", "+=", "\"v \"", "\n", "for", "x", "in", "p", ":", "\n", "                    ", "text", "+=", "\"{} \"", ".", "format", "(", "x", ")", "\n", "", "text", "+=", "\"\\n\"", "\n", "", "for", "f", "in", "faces", ":", "\n", "                ", "text", "+=", "\"f \"", "\n", "for", "x", "in", "f", ":", "\n", "                    ", "text", "+=", "\"{} \"", ".", "format", "(", "x", "+", "1", ")", "\n", "", "text", "+=", "\"\\n\"", "\n", "", "return", "text", "\n", "\n", "", "obj_str", "=", "to_obj_str", "(", "verts", ",", "faces", ")", "\n", "with", "open", "(", "'output.obj'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "obj_str", ")", "\n", "\n", "", "pcd", ",", "_", ",", "_", ",", "_", "=", "sample_vertex_from_mesh", "(", "verts", ",", "faces", ",", "num_samples", "=", "2048", ")", "# in shapenet coordinates", "\n", "\n", "verts", "=", "torch", ".", "from_numpy", "(", "verts", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "faces", "=", "torch", ".", "from_numpy", "(", "faces", ".", "copy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "verts", "=", "verts", "[", "None", "]", "\n", "faces", "=", "faces", "[", "None", "]", "\n", "\n", "textures", "=", "torch", ".", "ones", "(", "1", ",", "faces", ".", "shape", "[", "1", "]", ",", "2", ",", "2", ",", "2", ",", "3", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "\n", "dist", "=", "opt", ".", "init_dist", "\n", "\n", "imgsize", "=", "480", "\n", "K", "=", "np", ".", "array", "(", "[", "[", "imgsize", "/", "2", ",", "0", ",", "imgsize", "/", "2", "-", "0.5", "]", ",", "\n", "[", "0", ",", "imgsize", "/", "2", ",", "imgsize", "/", "2", "-", "0.5", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "eye_y", "=", "dist", "*", "np", ".", "cos", "(", "elevation", ")", "\n", "eye_x", "=", "dist", "*", "np", ".", "sin", "(", "elevation", ")", "*", "np", ".", "sin", "(", "azimuth", ")", "\n", "eye_z", "=", "dist", "*", "np", ".", "sin", "(", "elevation", ")", "*", "np", ".", "cos", "(", "azimuth", ")", "\n", "\n", "R", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "R", "[", ":", ",", "1", "]", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", "\n", "R", "[", ":", ",", "2", "]", "=", "-", "np", ".", "array", "(", "[", "eye_x", ",", "eye_y", ",", "eye_z", "]", ")", "\n", "R", "[", ":", ",", "2", "]", "/=", "np", ".", "linalg", ".", "norm", "(", "R", "[", ":", ",", "2", "]", ")", "\n", "R", "[", ":", ",", "0", "]", "=", "np", ".", "cross", "(", "R", "[", ":", ",", "1", "]", ",", "R", "[", ":", ",", "2", "]", ")", "\n", "R", "[", ":", ",", "0", "]", "/=", "np", ".", "linalg", ".", "norm", "(", "R", "[", ":", ",", "0", "]", ")", "\n", "R", "[", ":", ",", "1", "]", "=", "np", ".", "cross", "(", "R", "[", ":", ",", "2", "]", ",", "R", "[", ":", ",", "0", "]", ")", "\n", "R", "[", ":", ",", "1", "]", "/=", "np", ".", "linalg", ".", "norm", "(", "R", "[", ":", ",", "1", "]", ")", "# left hand coord", "\n", "\n", "scale", "=", "torch", ".", "tensor", "(", "1.", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "True", ",", "device", "=", "'cuda'", ")", "\n", "renderer", ".", "eye", "=", "torch", ".", "tensor", "(", "[", "eye_x", ",", "eye_y", ",", "eye_z", "]", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ",", "device", "=", "'cuda'", ")", "*", "scale", "\n", "\n", "if", "opt", ".", "post_opt", ":", "\n", "            ", "print", "(", "'fine-tuning view points...'", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "scale", "]", ",", "lr", "=", "0.01", ")", "\n", "\n", "pred_silhou", "=", "model", ".", "postprocess", "(", "pred1", "[", "'silhou'", "]", ".", "detach", "(", ")", ".", "cuda", "(", ")", ")", "\n", "pred_silhou", "=", "torch", ".", "clamp", "(", "pred_silhou", ",", "0", ",", "1", ")", "# 1 x 1 x 256 x 256", "\n", "\n", "pred_silhou", "[", "pred_silhou", ">", "model", ".", "pred_silhou_thres", "]", "=", "1", "\n", "pred_silhou", "[", "pred_silhou", "<=", "model", ".", "pred_silhou_thres", "]", "=", "0", "\n", "writer", "=", "imageio", ".", "get_writer", "(", "os", ".", "path", ".", "join", "(", "'opt.gif'", ")", ",", "mode", "=", "'I'", ")", "\n", "for", "k", "in", "tqdm", "(", "range", "(", "30", ")", ")", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "renderer", ".", "eye", "=", "torch", ".", "tensor", "(", "[", "eye_x", ",", "eye_y", ",", "eye_z", "]", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ",", "device", "=", "'cuda'", ")", "*", "scale", "\n", "image", "=", "renderer", "(", "verts", ",", "faces", ",", "textures", ",", "mode", "=", "'silhouettes'", ")", "# 1 x 256 x 256", "\n", "\n", "image", "=", "torch", ".", "flip", "(", "image", ",", "[", "2", "]", ")", "\n", "\n", "loss", "=", "torch", ".", "mean", "(", "(", "image", "-", "pred_silhou", "[", "0", "]", ")", "**", "2", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "writer", ".", "append_data", "(", "(", "255", "*", "image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n", "eye_x", "=", "renderer", ".", "eye", "[", "0", "]", ".", "item", "(", ")", "\n", "eye_y", "=", "renderer", ".", "eye", "[", "1", "]", ".", "item", "(", ")", "\n", "eye_z", "=", "renderer", ".", "eye", "[", "2", "]", ".", "item", "(", ")", "\n", "\n", "", "extrinsic", "=", "np", ".", "concatenate", "(", "[", "R", ".", "T", ",", "-", "R", ".", "T", "@", "np", ".", "array", "(", "[", "eye_x", ",", "eye_y", ",", "eye_z", "]", ")", "[", ":", ",", "None", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# pass through embedding network", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pcd_embeddings", "=", "predictor", "(", "torch", ".", "from_numpy", "(", "pcd", "[", "None", "]", ")", ".", "float", "(", ")", ")", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# pretrained model is unnormalized", "\n", "\n", "", "target_embeddings", "=", "np", ".", "array", "(", "[", "embeddings", "[", "i", "]", "for", "i", "in", "range", "(", "21", ")", "]", ")", "\n", "\n", "dists", "=", "np", ".", "linalg", ".", "norm", "(", "target_embeddings", "[", ":", ",", "None", ",", ":", "]", "-", "pcd_embeddings", "[", "None", "]", ",", "axis", "=", "-", "1", ")", "\n", "kps_pred", "=", "pcd", "[", "np", ".", "argmin", "(", "dists", ",", "axis", "=", "1", ")", "]", "\n", "\n", "kps_projection", "=", "(", "K", "@", "extrinsic", "@", "np", ".", "concatenate", "(", "[", "kps_pred", ",", "np", ".", "ones", "(", "[", "kps_pred", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ",", "axis", "=", "1", ")", ".", "T", ")", ".", "T", "\n", "kps_projection", "[", ":", ",", "0", "]", "=", "kps_projection", "[", ":", ",", "0", "]", "/", "kps_projection", "[", ":", ",", "2", "]", "\n", "kps_projection", "[", ":", ",", "1", "]", "=", "kps_projection", "[", ":", ",", "1", "]", "/", "kps_projection", "[", ":", ",", "2", "]", "\n", "kps_projection", "[", ":", ",", "0", "]", "=", "imgsize", "-", "1", "-", "kps_projection", "[", ":", ",", "0", "]", "\n", "kps_projection", "[", ":", ",", "1", "]", "=", "imgsize", "-", "1", "-", "kps_projection", "[", ":", ",", "1", "]", "\n", "\n", "\n", "################################################### visualize", "\n", "image", ",", "_", ",", "_", "=", "renderer", "(", "verts", ",", "faces", ",", "textures", ")", "\n", "image", "=", "image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "imgsize", ",", "imgsize", ")", ")", "\n", "image", "=", "np", ".", "flip", "(", "image", ",", "1", ")", "\n", "rgb", "=", "batch", "[", "'rgb_crop'", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mask", "=", "np", ".", "tile", "(", "(", "image", ".", "sum", "(", "-", "1", ")", "==", "0", ")", "[", "...", ",", "None", "]", ",", "(", "1", ",", "1", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "toshow", "=", "rgb", "*", "mask", "+", "image", "*", "(", "1", "-", "mask", ")", "\n", "\n", "palette", "=", "sns", ".", "color_palette", "(", "\"hls\"", ",", "kps_pred", ".", "shape", "[", "0", "]", ")", "\n", "for", "j", ",", "proj", "in", "enumerate", "(", "kps_projection", ")", ":", "\n", "            ", "if", "0", "<=", "int", "(", "proj", "[", "1", "]", ")", "<", "imgsize", "and", "0", "<=", "int", "(", "proj", "[", "0", "]", ")", "<", "imgsize", ":", "\n", "# hack: demo png does not have chair arms", "\n", "                ", "if", "j", "in", "[", "6", ",", "7", ",", "8", ",", "9", ",", "14", "]", ":", "\n", "                    ", "continue", "\n", "", "color", "=", "tuple", "(", "[", "c", "for", "c", "in", "palette", "[", "j", "]", "]", ")", "\n", "cv2", ".", "circle", "(", "toshow", ",", "(", "int", "(", "proj", "[", "0", "]", ")", ",", "int", "(", "proj", "[", "1", "]", ")", ")", ",", "9", ",", "color", "=", "color", ",", "thickness", "=", "-", "1", ")", "\n", "", "", "cv2", ".", "imshow", "(", "'result'", ",", "toshow", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "waitKey", "(", ")", "\n", "###################################################", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.Progbar.__init__": [[19, 32], ["time.time"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "target", ",", "width", "=", "30", ",", "verbose", "=", "1", ",", "interval", "=", "0.05", ")", ":", "\n", "        ", "self", ".", "width", "=", "width", "\n", "if", "target", "is", "None", ":", "\n", "            ", "target", "=", "-", "1", "\n", "", "self", ".", "target", "=", "target", "\n", "self", ".", "sum_values", "=", "{", "}", "\n", "self", ".", "unique_values", "=", "[", "]", "\n", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "last_update", "=", "0", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "total_width", "=", "0", "\n", "self", ".", "seen_so_far", "=", "0", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.Progbar.update": [[33, 122], ["time.time", "sys.stdout.write", "sys.stdout.write", "len", "sys.stdout.write", "sys.stdout.flush", "loggers.Progbar.unique_values.append", "int", "sys.stdout.write", "len", "isinstance", "sys.stdout.write", "sys.stdout.write", "int", "float", "numpy.mean", "numpy.mean", "numpy.floor", "abs", "numpy.log10", "max", "max"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "current", ",", "values", "=", "None", ",", "force", "=", "False", ")", ":", "\n", "        ", "\"\"\"Updates the progress bar.\n        # Arguments\n            current: Index of current step.\n            values: List of tuples (name, value_for_last_step).\n                The progress bar will display averages for these values.\n            force: Whether to force visual progress update.\n        \"\"\"", "\n", "values", "=", "values", "or", "[", "]", "\n", "for", "k", ",", "v", "in", "values", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "sum_values", ":", "\n", "                ", "self", ".", "sum_values", "[", "k", "]", "=", "[", "v", "*", "(", "current", "-", "self", ".", "seen_so_far", ")", ",", "\n", "current", "-", "self", ".", "seen_so_far", "]", "\n", "self", ".", "unique_values", ".", "append", "(", "k", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "sum_values", "[", "k", "]", "[", "0", "]", "+=", "v", "*", "(", "current", "-", "self", ".", "seen_so_far", ")", "\n", "self", ".", "sum_values", "[", "k", "]", "[", "1", "]", "+=", "(", "current", "-", "self", ".", "seen_so_far", ")", "\n", "", "", "self", ".", "seen_so_far", "=", "current", "\n", "\n", "now", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "verbose", "==", "1", ":", "\n", "            ", "if", "not", "force", "and", "(", "now", "-", "self", ".", "last_update", ")", "<", "self", ".", "interval", ":", "\n", "                ", "return", "\n", "\n", "", "prev_total_width", "=", "self", ".", "total_width", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\b'", "*", "prev_total_width", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "\n", "if", "self", ".", "target", "is", "not", "-", "1", ":", "\n", "                ", "numdigits", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "log10", "(", "self", ".", "target", ")", ")", ")", "+", "1", "\n", "barstr", "=", "'%%%dd/%%%dd ['", "%", "(", "numdigits", ",", "numdigits", ")", "\n", "bar", "=", "barstr", "%", "(", "current", ",", "self", ".", "target", ")", "\n", "prog", "=", "float", "(", "current", ")", "/", "self", ".", "target", "\n", "prog_width", "=", "int", "(", "self", ".", "width", "*", "prog", ")", "\n", "if", "prog_width", ">", "0", ":", "\n", "                    ", "bar", "+=", "(", "'='", "*", "(", "prog_width", "-", "1", ")", ")", "\n", "if", "current", "<", "self", ".", "target", ":", "\n", "                        ", "bar", "+=", "'>'", "\n", "", "else", ":", "\n", "                        ", "bar", "+=", "'='", "\n", "", "", "bar", "+=", "(", "'.'", "*", "(", "self", ".", "width", "-", "prog_width", ")", ")", "\n", "bar", "+=", "']'", "\n", "sys", ".", "stdout", ".", "write", "(", "bar", ")", "\n", "self", ".", "total_width", "=", "len", "(", "bar", ")", "\n", "\n", "", "if", "current", ":", "\n", "                ", "time_per_unit", "=", "(", "now", "-", "self", ".", "start", ")", "/", "current", "\n", "", "else", ":", "\n", "                ", "time_per_unit", "=", "0", "\n", "", "eta", "=", "time_per_unit", "*", "(", "self", ".", "target", "-", "current", ")", "\n", "info", "=", "''", "\n", "if", "current", "<", "self", ".", "target", "and", "self", ".", "target", "is", "not", "-", "1", ":", "\n", "                ", "info", "+=", "' - ETA: %ds'", "%", "eta", "\n", "", "else", ":", "\n", "                ", "info", "+=", "' - %ds'", "%", "(", "now", "-", "self", ".", "start", ")", "\n", "", "for", "k", "in", "self", ".", "unique_values", ":", "\n", "                ", "info", "+=", "' - %s:'", "%", "k", "\n", "if", "isinstance", "(", "self", ".", "sum_values", "[", "k", "]", ",", "list", ")", ":", "\n", "                    ", "avg", "=", "np", ".", "mean", "(", "self", ".", "sum_values", "[", "k", "]", "[", "0", "]", "/", "max", "(", "1", ",", "self", ".", "sum_values", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "if", "abs", "(", "avg", ")", ">", "1e-3", ":", "\n", "                        ", "info", "+=", "' %.4f'", "%", "avg", "\n", "", "else", ":", "\n", "                        ", "info", "+=", "' %.4e'", "%", "avg", "\n", "", "", "else", ":", "\n", "                    ", "info", "+=", "' %s'", "%", "self", ".", "sum_values", "[", "k", "]", "\n", "\n", "", "", "self", ".", "total_width", "+=", "len", "(", "info", ")", "\n", "if", "prev_total_width", ">", "self", ".", "total_width", ":", "\n", "                ", "info", "+=", "(", "(", "prev_total_width", "-", "self", ".", "total_width", ")", "*", "' '", ")", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "info", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "if", "current", ">=", "self", ".", "target", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "if", "self", ".", "verbose", "==", "2", ":", "\n", "            ", "if", "current", ">=", "self", ".", "target", ":", "\n", "                ", "info", "=", "'%ds'", "%", "(", "now", "-", "self", ".", "start", ")", "\n", "for", "k", "in", "self", ".", "unique_values", ":", "\n", "                    ", "info", "+=", "' - %s:'", "%", "k", "\n", "avg", "=", "np", ".", "mean", "(", "self", ".", "sum_values", "[", "k", "]", "[", "0", "]", "/", "max", "(", "1", ",", "self", ".", "sum_values", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "if", "avg", ">", "1e-3", ":", "\n", "                        ", "info", "+=", "' %.4f'", "%", "avg", "\n", "", "else", ":", "\n", "                        ", "info", "+=", "' %.4e'", "%", "avg", "\n", "", "", "sys", ".", "stdout", ".", "write", "(", "info", "+", "\"\\n\"", ")", "\n", "\n", "", "", "self", ".", "last_update", "=", "now", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.Progbar.add": [[123, 125], ["loggers.Progbar.update"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.Progbar.update"], ["", "def", "add", "(", "self", ",", "n", ",", "values", "=", "None", ")", ":", "\n", "        ", "self", ".", "update", "(", "self", ".", "seen_so_far", "+", "n", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger.__init__": [[137, 139], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger.on_train_begin": [[140, 142], ["None"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger.on_train_end": [[143, 145], ["None"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger.on_epoch_begin": [[146, 148], ["None"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger.on_epoch_end": [[149, 151], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "epoch_log", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger.on_batch_begin": [[152, 154], ["None"], "methods", ["None"], ["", "def", "on_batch_begin", "(", "self", ",", "batch", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger.on_batch_end": [[155, 157], ["None"], "methods", ["None"], ["", "def", "on_batch_end", "(", "self", ",", "batch", ",", "batch_log", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger.set_params": [[158, 160], ["None"], "methods", ["None"], ["", "def", "set_params", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger.set_model": [[161, 163], ["None"], "methods", ["None"], ["", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger.train": [[164, 166], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "training", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger.eval": [[167, 169], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "training", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger._set_unused_metric_mode": [[170, 182], ["None"], "methods", ["None"], ["", "def", "_set_unused_metric_mode", "(", "self", ",", "mode", "=", "'none'", ")", ":", "\n", "        ", "if", "mode", "in", "(", "'all'", ",", "'always'", ",", "'both'", ")", ":", "\n", "            ", "mode", "=", "'all'", "\n", "", "elif", "mode", "in", "(", "'none'", ",", "'neither'", ",", "'never'", ")", ":", "\n", "            ", "mode", "=", "'none'", "\n", "", "assert", "mode", "in", "(", "'none'", ",", "'train'", ",", "'test'", ",", "'all'", ")", "\n", "self", ".", "_allow_unused_metric_training", "=", "False", "\n", "self", ".", "_allow_unused_metric_testing", "=", "False", "\n", "if", "mode", "in", "(", "'train'", ",", "'all'", ")", ":", "\n", "            ", "self", ".", "_allow_unused_metric_training", "=", "True", "\n", "", "if", "mode", "in", "(", "'test'", ",", "'all'", ")", ":", "\n", "            ", "self", ".", "_allow_unused_metric_testing", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger._allow_unused": [[183, 185], ["None"], "methods", ["None"], ["", "", "def", "_allow_unused", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_allow_unused_metric_training", "if", "self", ".", "training", "else", "self", ".", "_allow_unused_metric_testing", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers._LogCumulator.__init__": [[192, 194], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers._LogCumulator.on_epoch_begin": [[195, 199], ["collections.defaultdict", "list"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "log_values", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "sizes", "=", "list", "(", ")", "\n", "self", ".", "epoch_log", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers._LogCumulator.on_batch_end": [[200, 204], ["batch_log.items", "loggers._LogCumulator.sizes.append", "loggers._LogCumulator.log_values[].append"], "methods", ["None"], ["", "def", "on_batch_end", "(", "self", ",", "batch", ",", "batch_log", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "batch_log", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "log_values", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "self", ".", "sizes", ".", "append", "(", "batch_log", "[", "'size'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers._LogCumulator.get_epoch_log": [[205, 211], ["dict", "numpy.array().sum", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "get_epoch_log", "(", "self", ")", ":", "\n", "        ", "epoch_log", "=", "dict", "(", ")", "\n", "for", "k", "in", "self", ".", "log_values", ":", "\n", "            ", "epoch_log", "[", "k", "]", "=", "(", "np", ".", "array", "(", "self", ".", "log_values", "[", "k", "]", ")", "*", "\n", "np", ".", "array", "(", "self", ".", "sizes", ")", ")", ".", "sum", "(", ")", "/", "np", ".", "array", "(", "self", ".", "sizes", ")", ".", "sum", "(", ")", "\n", "", "return", "epoch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ProgbarLogger.__init__": [[216, 224], ["loggers.ProgbarLogger._set_unused_metric_mode", "ValueError", "str"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger._set_unused_metric_mode"], ["def", "__init__", "(", "self", ",", "count_mode", "=", "'samples'", ",", "allow_unused_fields", "=", "'none'", ")", ":", "\n", "        ", "if", "count_mode", "==", "'samples'", ":", "\n", "            ", "self", ".", "use_steps", "=", "False", "\n", "", "elif", "count_mode", "==", "'steps'", ":", "\n", "            ", "self", ".", "use_steps", "=", "True", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown `count_mode`: '", "+", "str", "(", "count_mode", ")", ")", "\n", "", "self", ".", "_set_unused_metric_mode", "(", "allow_unused_fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ProgbarLogger.on_train_begin": [[225, 228], ["None"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "self", ".", "verbose", "=", "self", ".", "params", "[", "'verbose'", "]", "\n", "self", ".", "epochs", "=", "self", ".", "params", "[", "'epochs'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ProgbarLogger.on_epoch_begin": [[229, 252], ["print", "loggers.Progbar", "print", "loggers.Progbar"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "desc", "=", "'Epoch %d/%d'", "%", "(", "epoch", ",", "self", ".", "epochs", ")", "\n", "print", "(", "desc", ")", "\n", "if", "self", ".", "use_steps", ":", "\n", "                    ", "target", "=", "self", ".", "params", "[", "'steps'", "]", "\n", "", "else", ":", "\n", "                    ", "target", "=", "self", ".", "params", "[", "'samples'", "]", "\n", "", "self", ".", "target", "=", "target", "\n", "self", ".", "progbar", "=", "Progbar", "(", "target", "=", "self", ".", "target", ",", "\n", "verbose", "=", "self", ".", "verbose", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Eval %d/%d'", "%", "(", "epoch", ",", "self", ".", "epochs", ")", ")", "\n", "if", "self", ".", "use_steps", ":", "\n", "                    ", "target", "=", "self", ".", "params", "[", "'steps_eval'", "]", "\n", "", "else", ":", "\n", "                    ", "target", "=", "self", ".", "params", "[", "'samples_eval'", "]", "\n", "", "self", ".", "target", "=", "target", "\n", "self", ".", "progbar", "=", "Progbar", "(", "target", "=", "self", ".", "target", ",", "\n", "verbose", "=", "self", ".", "verbose", ")", "\n", "\n", "", "", "self", ".", "seen", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ProgbarLogger.on_batch_begin": [[253, 256], ["None"], "methods", ["None"], ["", "def", "on_batch_begin", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "self", ".", "seen", "<", "self", ".", "target", ":", "\n", "            ", "self", ".", "log_values", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ProgbarLogger.on_batch_end": [[257, 270], ["loggers.ProgbarLogger.log_values.append", "loggers.ProgbarLogger.progbar.update", "loggers.ProgbarLogger._allow_unused"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.Progbar.update", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger._allow_unused"], ["", "", "def", "on_batch_end", "(", "self", ",", "batch", ",", "batch_log", ")", ":", "\n", "        ", "if", "self", ".", "use_steps", ":", "\n", "            ", "self", ".", "seen", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "seen", "+=", "batch_log", "[", "'size'", "]", "\n", "\n", "", "for", "k", "in", "self", ".", "params", "[", "'metrics'", "]", ":", "\n", "            ", "if", "self", ".", "_allow_unused", "(", ")", "and", "(", "k", "not", "in", "batch_log", ")", ":", "\n", "                ", "continue", "\n", "", "self", ".", "log_values", ".", "append", "(", "(", "k", ",", "batch_log", "[", "k", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "verbose", "and", "self", ".", "seen", "<", "self", ".", "target", ":", "\n", "            ", "self", ".", "progbar", ".", "update", "(", "self", ".", "seen", ",", "self", ".", "log_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ProgbarLogger.on_epoch_end": [[271, 275], ["loggers.ProgbarLogger.progbar.update"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.Progbar.update"], ["", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "epoch_log", ")", ":", "\n", "# Note: epoch_log not used", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "self", ".", "progbar", ".", "update", "(", "self", ".", "seen", ",", "self", ".", "log_values", ",", "force", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.CsvLogger.__init__": [[280, 284], ["loggers.CsvLogger._set_unused_metric_mode"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger._set_unused_metric_mode"], ["def", "__init__", "(", "self", ",", "filename", ",", "allow_unused_fields", "=", "'none'", ")", ":", "\n", "        ", "self", ".", "sep", "=", "','", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "_set_unused_metric_mode", "(", "allow_unused_fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.CsvLogger.on_train_begin": [[285, 300], ["open", "csv.DictWriter", "os.path.isfile", "os.path.isdir", "os.system", "loggers.CsvLogger.writer.writeheader", "loggers.CsvLogger.csv_file.flush", "os.path.dirname", "os.path.dirname"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "filename", ")", ":", "\n", "            ", "newfile", "=", "True", "\n", "", "else", ":", "\n", "            ", "newfile", "=", "False", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "filename", ")", ")", ":", "\n", "            ", "os", ".", "system", "(", "'mkdir -p '", "+", "os", ".", "path", ".", "dirname", "(", "self", ".", "filename", ")", ")", "\n", "", "self", ".", "metrics", "=", "self", ".", "params", "[", "'metrics'", "]", "\n", "\n", "self", ".", "csv_file", "=", "open", "(", "self", ".", "filename", ",", "'a+'", ")", "\n", "self", ".", "writer", "=", "csv", ".", "DictWriter", "(", "self", ".", "csv_file", ",", "fieldnames", "=", "[", "\n", "'epoch'", ",", "'mode'", "]", "+", "self", ".", "metrics", ")", "\n", "if", "newfile", ":", "\n", "            ", "self", ".", "writer", ".", "writeheader", "(", ")", "\n", "self", ".", "csv_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.CsvLogger.on_epoch_end": [[301, 310], ["collections.OrderedDict", "loggers.CsvLogger.writer.writerow", "loggers.CsvLogger.csv_file.flush", "loggers.CsvLogger._allow_unused"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger._allow_unused"], ["", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "epoch_log", ")", ":", "\n", "        ", "row_dict", "=", "OrderedDict", "(", "\n", "{", "'epoch'", ":", "epoch", ",", "'mode'", ":", "'train'", "if", "self", ".", "training", "else", "' eval'", "}", ")", "\n", "for", "k", "in", "self", ".", "metrics", ":", "\n", "            ", "if", "self", ".", "_allow_unused", "(", ")", "and", "(", "k", "not", "in", "epoch_log", ")", ":", "\n", "                ", "continue", "\n", "", "row_dict", "[", "k", "]", "=", "epoch_log", "[", "k", "]", "\n", "", "self", ".", "writer", ".", "writerow", "(", "row_dict", ")", "\n", "self", ".", "csv_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.CsvLogger.on_train_end": [[311, 314], ["loggers.CsvLogger.csv_file.close"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ")", ":", "\n", "        ", "self", ".", "csv_file", ".", "close", "(", ")", "\n", "self", ".", "writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BatchCsvLogger.__init__": [[319, 323], ["loggers.BatchCsvLogger._set_unused_metric_mode"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger._set_unused_metric_mode"], ["def", "__init__", "(", "self", ",", "filename", ",", "allow_unused_fields", "=", "'none'", ")", ":", "\n", "        ", "self", ".", "sep", "=", "','", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "_set_unused_metric_mode", "(", "allow_unused_fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BatchCsvLogger.on_train_begin": [[324, 339], ["open", "csv.DictWriter", "os.path.isfile", "os.path.isdir", "os.system", "loggers.BatchCsvLogger.writer.writeheader", "loggers.BatchCsvLogger.csv_file.flush", "os.path.dirname", "os.path.dirname"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "filename", ")", ":", "\n", "            ", "newfile", "=", "True", "\n", "", "else", ":", "\n", "            ", "newfile", "=", "False", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "filename", ")", ")", ":", "\n", "            ", "os", ".", "system", "(", "'mkdir -p '", "+", "os", ".", "path", ".", "dirname", "(", "self", ".", "filename", ")", ")", "\n", "", "self", ".", "metrics", "=", "self", ".", "params", "[", "'metrics'", "]", "\n", "\n", "self", ".", "csv_file", "=", "open", "(", "self", ".", "filename", ",", "'a+'", ")", "\n", "self", ".", "writer", "=", "csv", ".", "DictWriter", "(", "self", ".", "csv_file", ",", "fieldnames", "=", "[", "\n", "'epoch'", ",", "'mode'", "]", "+", "self", ".", "metrics", ")", "\n", "if", "newfile", ":", "\n", "            ", "self", ".", "writer", ".", "writeheader", "(", ")", "\n", "self", ".", "csv_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BatchCsvLogger.on_batch_end": [[340, 349], ["collections.OrderedDict", "loggers.BatchCsvLogger.writer.writerow", "loggers.BatchCsvLogger.csv_file.flush", "loggers.BatchCsvLogger._allow_unused"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger._allow_unused"], ["", "", "def", "on_batch_end", "(", "self", ",", "batch", ",", "batch_log", "=", "None", ")", ":", "\n", "        ", "row_dict", "=", "OrderedDict", "(", "\n", "{", "'epoch'", ":", "batch_log", "[", "'epoch'", "]", ",", "'mode'", ":", "'train'", "if", "self", ".", "training", "else", "' eval'", "}", ")", "\n", "for", "k", "in", "self", ".", "metrics", ":", "\n", "            ", "if", "self", ".", "_allow_unused", "(", ")", "and", "(", "k", "not", "in", "batch_log", ")", ":", "\n", "                ", "continue", "\n", "", "row_dict", "[", "k", "]", "=", "batch_log", "[", "k", "]", "\n", "", "self", ".", "writer", ".", "writerow", "(", "row_dict", ")", "\n", "self", ".", "csv_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BatchCsvLogger.on_train_end": [[350, 353], ["loggers.BatchCsvLogger.csv_file.close"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ")", ":", "\n", "        ", "self", ".", "csv_file", ".", "close", "(", ")", "\n", "self", ".", "writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ModelSaveLogger.__init__": [[361, 384], ["print"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "filepath", ",", "period", "=", "1", ",", "save_optimizer", "=", "False", ",", "save_best", "=", "False", ",", "prev_best", "=", "None", ")", ":", "\n", "        ", "self", ".", "filepath", "=", "filepath", "\n", "self", ".", "period", "=", "period", "\n", "self", ".", "save_optimizer", "=", "save_optimizer", "\n", "self", ".", "save_best", "=", "save_best", "\n", "self", ".", "loss_name", "=", "'loss'", "\n", "self", ".", "current_best_eval", "=", "prev_best", "\n", "self", ".", "current_best_epoch", "=", "None", "\n", "\n", "# search for previous best", "\n", "if", "self", ".", "save_best", "and", "prev_best", "is", "None", ":", "\n", "# try:", "\n", "#     # parse epoch_loss. overwrite previous best if fail", "\n", "#     if os.path.isfile(filepath):", "\n", "#         prev_loss = pd.read_csv(os.path.join(os.path.dirname(filepath), 'epoch_loss.csv'))", "\n", "#         prev_eval_loss = prev_loss[prev_loss['mode'] == 'eval']", "\n", "#         if prev_eval_loss.size == 0:", "\n", "#             raise ValueError('loaded epoch loss file has no eval loss')", "\n", "#         self.current_best_eval = prev_eval_loss[self.loss_name].min()", "\n", "#         self.current_best_epoch = prev_eval_loss[prev_eval_loss[self.loss_name] == self.current_best_eval]['epoch'].iloc[0]", "\n", "# except: # (IOError, pd.errors.ParserError, KeyError):", "\n", "            ", "print", "(", "\n", "str_warning", ",", "'Previous best eval loss not given. Best validation model WILL be overwritten.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ModelSaveLogger.on_train_begin": [[385, 389], ["os.path.isdir", "os.system", "os.path.dirname"], "methods", ["None"], ["", "", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "filepath", ")", ":", "\n", "            ", "os", ".", "system", "(", "'mkdir -p '", "+", "os", ".", "path", ".", "dirname", "(", "self", ".", "filepath", ")", ")", "\n", "", "self", ".", "epochs_since_last_save", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ModelSaveLogger.on_epoch_end": [[390, 414], ["loggers.ModelSaveLogger.filepath.format", "loggers.ModelSaveLogger.model.save_state_dict", "print", "loggers.ModelSaveLogger.filepath.format", "loggers.ModelSaveLogger.model.save_state_dict"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.save_state_dict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.save_state_dict"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "epoch_log", ")", ":", "\n", "# avoid saving twice (once after training, once after eval)", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "save_best", ":", "# save_best mode is not used right after training", "\n", "                ", "return", "\n", "", "self", ".", "epochs_since_last_save", "+=", "1", "\n", "if", "self", ".", "epochs_since_last_save", ">=", "self", ".", "period", ":", "\n", "                ", "filepath", "=", "self", ".", "filepath", ".", "format", "(", "epoch", "=", "epoch", ")", "\n", "self", ".", "model", ".", "save_state_dict", "(", "\n", "filepath", ",", "save_optimizer", "=", "self", ".", "save_optimizer", ",", "additional_values", "=", "{", "'epoch'", ":", "epoch", "}", ")", "\n", "self", ".", "epochs_since_last_save", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "save_best", ":", "\n", "                ", "if", "self", ".", "loss_name", "not", "in", "epoch_log", ":", "\n", "                    ", "print", "(", "\n", "str_warning", ",", "'Loss name %s not found in batch_log. \"Best model saving\" is turned off\"'", "%", "self", ".", "loss_name", ")", "\n", "", "else", ":", "\n", "                    ", "current_eval", "=", "epoch_log", "[", "'loss'", "]", "\n", "if", "self", ".", "current_best_eval", "is", "None", "or", "current_eval", "<", "self", ".", "current_best_eval", ":", "\n", "                        ", "self", ".", "current_best_eval", "=", "current_eval", "\n", "self", ".", "current_best_epoch", "=", "epoch", "\n", "filepath", "=", "self", ".", "filepath", ".", "format", "(", "epoch", "=", "epoch", ")", "\n", "self", ".", "model", ".", "save_state_dict", "(", "filepath", ",", "save_optimizer", "=", "self", ".", "save_optimizer", ",", "additional_values", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "'loss_eval'", ":", "self", ".", "current_best_eval", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.TerminateOnNaN.__init__": [[417, 419], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_training", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.TerminateOnNaN.on_batch_begin": [[420, 423], ["ValueError"], "methods", ["None"], ["", "def", "on_batch_begin", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "not", "self", ".", "_training", ":", "\n", "            ", "raise", "ValueError", "(", "str_error", ",", "'inf/nan found'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.TerminateOnNaN.on_batch_end": [[424, 430], ["batch_log.items", "numpy.isnan"], "methods", ["None"], ["", "", "def", "on_batch_end", "(", "self", ",", "batch", ",", "batch_log", ")", ":", "\n", "        ", "if", "batch_log", ":", "\n", "            ", "for", "k", ",", "v", "in", "batch_log", ".", "items", "(", ")", ":", "\n", "                ", "if", "np", ".", "isnan", "(", "v", ")", ":", "# or np.isinf(v):", "\n", "                    ", "self", ".", "_training", "=", "False", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.TensorBoardLogger.__init__": [[433, 442], ["loggers.TensorBoardLogger._set_unused_metric_mode", "print", "str"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger._set_unused_metric_mode"], ["    ", "def", "__init__", "(", "self", ",", "filepath", ",", "allow_unused_fields", "=", "'none'", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "tensorflow", "as", "tf", "\n", "self", ".", "tf", "=", "tf", "\n", "", "except", "Exception", "as", "err", ":", "\n", "            ", "print", "(", "str_warning", ",", "\"TensorBoard logger disabled due to an error while importing tensorflow: \\n%s\"", "%", "str", "(", "err", ")", ")", "\n", "self", ".", "tf", "=", "None", "\n", "", "self", ".", "filepath", "=", "filepath", "\n", "self", ".", "_set_unused_metric_mode", "(", "allow_unused_fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.TensorBoardLogger.on_train_begin": [[443, 451], ["os.path.isdir", "os.system"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "tf", ":", "\n", "            ", "return", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "(", "self", ".", "filepath", ")", ")", ":", "\n", "            ", "os", ".", "system", "(", "'mkdir -p '", "+", "(", "self", ".", "filepath", ")", ")", "\n", "", "self", ".", "metrics", "=", "self", ".", "params", "[", "'metrics'", "]", "\n", "self", ".", "writer_train", "=", "None", "\n", "self", ".", "writer_test", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.TensorBoardLogger.on_epoch_end": [[452, 475], ["dict", "tf.Summary", "writer.add_summary", "writer.flush", "tf.summary.FileWriter", "tf.summary.FileWriter", "loggers.TensorBoardLogger._allow_unused", "os.path.join", "os.path.join", "tf.Summary.Value", "dict.items"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.BaseLogger._allow_unused"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "epoch_log", ")", ":", "\n", "        ", "if", "not", "self", ".", "tf", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "tf", "=", "self", ".", "tf", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "if", "not", "self", ".", "writer_train", ":", "\n", "                ", "self", ".", "writer_train", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "filepath", ",", "'train'", ")", ")", "\n", "", "writer", "=", "self", ".", "writer_train", "\n", "", "else", ":", "\n", "            ", "if", "not", "self", ".", "writer_test", ":", "\n", "                ", "self", ".", "writer_test", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "filepath", ",", "'eval'", ")", ")", "\n", "", "writer", "=", "self", ".", "writer_test", "\n", "\n", "", "row_dict", "=", "dict", "(", ")", "\n", "for", "k", "in", "self", ".", "metrics", ":", "\n", "            ", "if", "self", ".", "_allow_unused", "(", ")", "and", "(", "k", "not", "in", "epoch_log", ")", ":", "\n", "                ", "continue", "\n", "", "row_dict", "[", "k", "]", "=", "epoch_log", "[", "k", "]", "\n", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "k", ",", "simple_value", "=", "v", ")", "for", "k", ",", "v", "in", "row_dict", ".", "items", "(", ")", "]", ")", "\n", "writer", ".", "add_summary", "(", "summary", ",", "epoch", ")", "\n", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.TensorBoardLogger.on_train_end": [[476, 485], ["loggers.TensorBoardLogger.writer_train.flush", "loggers.TensorBoardLogger.writer_test.flush"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "tf", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "writer_train", ":", "\n", "            ", "self", ".", "writer_train", ".", "flush", "(", ")", "\n", "self", ".", "writer_train", "=", "None", "\n", "", "if", "self", ".", "writer_test", ":", "\n", "            ", "self", ".", "writer_test", ".", "flush", "(", ")", "\n", "self", ".", "writer_test", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.__init__": [[490, 495], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "loggers", ")", ":", "\n", "        ", "self", ".", "loggers", "=", "loggers", "\n", "self", ".", "params", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "_in_training", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.add_logger": [[496, 500], ["loggers.ComposeLogger.loggers.append"], "methods", ["None"], ["", "def", "add_logger", "(", "self", ",", "logger", ")", ":", "\n", "        ", "assert", "not", "self", ".", "_in_training", ",", "str_error", "+", "' Unsafe to add logger during training'", "\n", "self", ".", "loggers", ".", "append", "(", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_train_begin": [[501, 505], ["logger.on_train_begin"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_train_begin"], ["", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "self", ".", "_in_training", "=", "True", "\n", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "logger", ".", "on_train_begin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_train_end": [[506, 510], ["logger.on_train_end"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_train_end"], ["", "", "def", "on_train_end", "(", "self", ")", ":", "\n", "        ", "self", ".", "_in_training", "=", "False", "\n", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "logger", ".", "on_train_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_epoch_begin": [[511, 514], ["logger.on_epoch_begin"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_epoch_begin"], ["", "", "def", "on_epoch_begin", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "logger", ".", "on_epoch_begin", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_epoch_end": [[515, 518], ["logger.on_epoch_end"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_epoch_end"], ["", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "epoch_log", ")", ":", "\n", "        ", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "logger", ".", "on_epoch_end", "(", "epoch", ",", "epoch_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_batch_begin": [[519, 522], ["logger.on_batch_begin"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_batch_begin"], ["", "", "def", "on_batch_begin", "(", "self", ",", "batch", ")", ":", "\n", "        ", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "logger", ".", "on_batch_begin", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_batch_end": [[523, 526], ["logger.on_batch_end"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_batch_end"], ["", "", "def", "on_batch_end", "(", "self", ",", "batch", ",", "batch_log", ")", ":", "\n", "        ", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "logger", ".", "on_batch_end", "(", "batch", ",", "batch_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.set_params": [[527, 531], ["logger.set_params"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.set_params"], ["", "", "def", "set_params", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "logger", ".", "set_params", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.set_model": [[532, 536], ["logger.set_model"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.set_model"], ["", "", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "logger", ".", "set_model", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.train": [[537, 541], ["logger.train"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.train"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "training", "=", "True", "\n", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "logger", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.eval": [[542, 546], ["logger.eval"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.eval"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "training", "=", "False", "\n", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "logger", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.preprocess.find_env_maps": [[12, 28], ["pathlib.Path().glob", "set", "list", "list.sort", "xml.parse", "ET.parse.getroot", "doc.getroot.find", "root.find.find", "open", "f.writelines", "pathlib.Path", "str", "fn.find", "list.add", "fn.split"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.options.options_train.parse", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.Progbar.add"], ["def", "find_env_maps", "(", "rootdir", ")", ":", "\n", "    ", "pathlist", "=", "Path", "(", "rootdir", ")", ".", "glob", "(", "'*/*.xml'", ")", "\n", "env_maps", "=", "set", "(", ")", "\n", "for", "path", "in", "pathlist", ":", "\n", "        ", "doc", "=", "ET", ".", "parse", "(", "str", "(", "path", ")", ")", "\n", "root", "=", "doc", ".", "getroot", "(", ")", "\n", "emitter", "=", "root", ".", "find", "(", "'emitter'", ")", "\n", "elem", "=", "emitter", ".", "find", "(", "'string'", ")", "\n", "if", "elem", "is", "not", "None", ":", "\n", "            ", "fn", "=", "elem", ".", "attrib", "[", "'value'", "]", "\n", "if", "fn", ".", "find", "(", "'envmap'", ")", ">=", "0", ":", "\n", "                ", "env_maps", ".", "add", "(", "fn", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "", "", "", "env_maps", "=", "list", "(", "env_maps", ")", "\n", "env_maps", ".", "sort", "(", ")", "\n", "with", "open", "(", "'hdrs.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "'\\n'", ".", "join", "(", "env_maps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.preprocess.gen_azimuth_elevation": [[30, 47], ["pathlib.Path().glob", "tqdm.tqdm", "xml.parse", "ET.parse.getroot", "doc.getroot.find", "root.find.find().find", "pathlib.Path", "str", "numpy.arccos", "numpy.arctan2", "numpy.save", "numpy.save", "root.find.find", "float", "os.path.join", "os.path.join", "origin.split", "[].replace", "[].replace", "str().split", "str().split", "str", "str"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.options.options_train.parse"], ["", "", "def", "gen_azimuth_elevation", "(", "rootdir", ")", ":", "\n", "    ", "pathlist", "=", "Path", "(", "rootdir", ")", ".", "glob", "(", "'*/*.xml'", ")", "\n", "for", "path", "in", "tqdm", "(", "pathlist", ")", ":", "\n", "        ", "doc", "=", "ET", ".", "parse", "(", "str", "(", "path", ")", ")", "\n", "root", "=", "doc", ".", "getroot", "(", ")", "\n", "sensor", "=", "root", ".", "find", "(", "'sensor'", ")", "\n", "elem", "=", "sensor", ".", "find", "(", "'transform'", ")", ".", "find", "(", "'lookAt'", ")", "\n", "assert", "(", "elem", "is", "not", "None", ")", "\n", "if", "elem", "is", "not", "None", ":", "\n", "            ", "origin", "=", "elem", ".", "attrib", "[", "'origin'", "]", "\n", "origin", "=", "[", "float", "(", "v", ")", "for", "v", "in", "origin", ".", "split", "(", "','", ")", "]", "\n", "elevation", "=", "np", ".", "arccos", "(", "origin", "[", "1", "]", "/", "2.2", ")", "\n", "azimuth", "=", "np", ".", "arctan2", "(", "origin", "[", "0", "]", ",", "origin", "[", "2", "]", ")", "\n", "if", "azimuth", "<", "0", ":", "\n", "                ", "azimuth", "+=", "2", "*", "np", ".", "pi", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "'/home/neil/disk/shapenet20views'", ",", "str", "(", "path", ")", ".", "split", "(", "'genre-xml_v2/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'.xml'", ",", "'_azimuth.npy'", ")", ")", ",", "azimuth", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "'/home/neil/disk/shapenet20views'", ",", "str", "(", "path", ")", ".", "split", "(", "'genre-xml_v2/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'.xml'", ",", "'_elevation.npy'", ")", ")", ",", "elevation", ")", "\n", "# print(os.path.join('/data/shapenet20views', str(path).split('genre-xml_v2/')[-1].replace('.xml', '_azimuth.npy')))", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.preprocess.clear": [[50, 58], ["pathlib.Path().glob", "tqdm.tqdm", "os.path.exists", "pathlib.Path", "print", "os.remove", "print"], "function", ["None"], ["", "", "", "def", "clear", "(", "rootdir", ")", ":", "\n", "    ", "pathlist", "=", "Path", "(", "rootdir", ")", ".", "glob", "(", "'*/*_voxel2renderer.npy'", ")", "\n", "for", "path", "in", "tqdm", "(", "pathlist", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "print", "(", "\"removed\"", ")", "\n", "os", ".", "remove", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"The file does not exist\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.preprocess.gen_transform_matrix": [[59, 87], ["pathlib.Path().glob", "tqdm.tqdm", "pymesh.load_mesh", "numpy.array", "np.array.copy", "numpy.array", "numpy.max", "numpy.array", "numpy.save", "numpy.save", "pathlib.Path", "str().split", "str().split", "v2[].max", "v2[].min", "v2[].max", "v2[].min", "v2[].max", "v2[].min", "numpy.array", "str().replace", "str().replace", "numpy.linalg.inv", "numpy.array", "str", "str", "numpy.array", "numpy.array", "str", "str"], "function", ["None"], ["", "", "", "def", "gen_transform_matrix", "(", "rootdir", ")", ":", "\n", "    ", "pathlist", "=", "Path", "(", "rootdir", ")", ".", "glob", "(", "'*/*_voxel_normalized_128.mat'", ")", "\n", "for", "path", "in", "tqdm", "(", "pathlist", ")", ":", "\n", "        ", "cls_name", "=", "str", "(", "path", ")", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "model_name", "=", "str", "(", "path", ")", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "mesh", "=", "pymesh", ".", "load_mesh", "(", "'/home/neil/disk/ShapeNetCore.v2/{}/{}/models/model_normalized.obj'", ".", "format", "(", "cls_name", ",", "model_name", ")", ")", "\n", "vertices", "=", "np", ".", "array", "(", "mesh", ".", "vertices", ")", "\n", "\n", "v2", "=", "vertices", ".", "copy", "(", ")", "\n", "v2", "[", ":", ",", "2", "]", "=", "vertices", "[", ":", ",", "1", "]", "\n", "v2", "[", ":", ",", "1", "]", "=", "-", "vertices", "[", ":", ",", "2", "]", "\n", "\n", "xmax", ",", "xmin", "=", "v2", "[", ":", ",", "0", "]", ".", "max", "(", ")", ",", "v2", "[", ":", ",", "0", "]", ".", "min", "(", ")", "\n", "ymax", ",", "ymin", "=", "v2", "[", ":", ",", "1", "]", ".", "max", "(", ")", ",", "v2", "[", ":", ",", "1", "]", ".", "min", "(", ")", "\n", "zmax", ",", "zmin", "=", "v2", "[", ":", ",", "2", "]", ".", "max", "(", ")", ",", "v2", "[", ":", ",", "2", "]", ".", "min", "(", ")", "\n", "\n", "center", "=", "np", ".", "array", "(", "[", "(", "xmax", "+", "xmin", ")", "/", "2", ",", "(", "ymax", "+", "ymin", ")", "/", "2", ",", "(", "zmax", "+", "zmin", ")", "/", "2", "]", ")", "\n", "scale", "=", "np", ".", "max", "(", "[", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ",", "zmax", "-", "zmin", "]", ")", "\n", "\n", "shape2voxel", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0.5", "]", ",", "[", "0", ",", "1", ",", "0", ",", "0.5", "]", ",", "[", "0", ",", "0", ",", "1", ",", "0.5", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "@", "np", ".", "array", "(", "[", "[", "1.", "/", "scale", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1.", "/", "scale", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1.", "/", "scale", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "@", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "-", "center", "[", "0", "]", "]", ",", "[", "0", ",", "1", ",", "0", ",", "-", "center", "[", "1", "]", "]", ",", "[", "0", ",", "0", ",", "1", ",", "-", "center", "[", "2", "]", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "@", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "-", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "renderer2shape", "=", "np", ".", "array", "(", "[", "[", "-", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "renderer2voxel", "=", "shape2voxel", "@", "renderer2shape", "\n", "\n", "np", ".", "save", "(", "str", "(", "path", ")", ".", "replace", "(", "'_voxel_normalized_128.mat'", ",", "'_renderer2voxel.npy'", ")", ",", "renderer2voxel", ")", "\n", "np", ".", "save", "(", "str", "(", "path", ")", ".", "replace", "(", "'_voxel_normalized_128.mat'", ",", "'_voxel2renderer.npy'", ")", ",", "np", ".", "linalg", ".", "inv", "(", "renderer2voxel", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.preprocess.readexr": [[89, 95], ["OpenEXR.InputFile", "OpenEXR.InputFile.channels", "OpenEXR.InputFile.channels", "OpenEXR.InputFile.channels"], "function", ["None"], ["", "", "def", "readexr", "(", "fn", ")", ":", "\n", "    ", "img", "=", "OpenEXR", ".", "InputFile", "(", "fn", ")", "\n", "# print(img.header())", "\n", "return", "img", ".", "channels", "(", "[", "\"color.R\"", ",", "\"color.G\"", ",", "\"color.B\"", "]", ")", ",", "img", ".", "channels", "(", "[", "\"normal.R\"", ",", "\"normal.G\"", ",", "\"normal.B\"", "]", ")", ",", "img", ".", "channels", "(", "[", "\"depth.R\"", ",", "\"depth.G\"", ",", "\"depth.B\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.preprocess.bytes2np": [[96, 98], ["numpy.stack().reshape().astype", "numpy.stack().reshape", "numpy.stack", "numpy.frombuffer", "range"], "function", ["None"], ["", "def", "bytes2np", "(", "bytes", ",", "width", "=", "480", ",", "height", "=", "480", ")", ":", "\n", "    ", "return", "np", ".", "stack", "(", "[", "np", ".", "frombuffer", "(", "bytes", "[", "i", "]", ",", "dtype", "=", "np", ".", "float16", ")", "for", "i", "in", "range", "(", "3", ")", "]", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "height", ",", "width", ",", "3", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.preprocess.real2prob": [[100, 121], ["numpy.zeros", "math.floor", "preprocess.real2prob"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.real2prob"], ["", "def", "real2prob", "(", "val", ",", "max_val", ",", "num_bins", ",", "circular", "=", "False", ")", ":", "\n", "    ", "res", "=", "np", ".", "zeros", "(", "(", "num_bins", ",", ")", ")", "\n", "if", "val", ">=", "max_val", ":", "\n", "        ", "val", "-=", "1e-7", "\n", "assert", "val", "<", "max_val", "\n", "", "if", "not", "circular", ":", "\n", "        ", "interval", "=", "max_val", "/", "(", "num_bins", "-", "1", ")", "\n", "low", "=", "math", ".", "floor", "(", "val", "/", "interval", ")", "\n", "high", "=", "low", "+", "1", "\n", "assert", "low", ">=", "0", "and", "high", "<", "num_bins", "\n", "res", "[", "low", "]", "=", "1.", "-", "(", "val", "/", "interval", "-", "low", ")", "\n", "res", "[", "high", "]", "=", "1.", "-", "res", "[", "low", "]", "\n", "assert", "0", "<=", "res", "[", "low", "]", "<=", "1.", "\n", "return", "res", "\n", "", "else", ":", "\n", "        ", "interval", "=", "max_val", "/", "num_bins", "\n", "if", "val", "<", "interval", "/", "2", ":", "\n", "            ", "val", "+=", "max_val", "\n", "", "res", "=", "real2prob", "(", "val", "-", "interval", "/", "2", ",", "max_val", ",", "num_bins", "+", "1", ")", "\n", "res", "[", "0", "]", "+=", "res", "[", "-", "1", "]", "\n", "return", "res", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.preprocess.prob2real": [[122, 133], ["numpy.sum", "numpy.stack", "numpy.sum", "numpy.arctan2", "numpy.cos", "numpy.sin", "numpy.expand_dims", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "", "def", "prob2real", "(", "prob", ",", "max_val", ",", "num_bins", ",", "circular", "=", "False", ")", ":", "\n", "    ", "if", "not", "circular", ":", "\n", "        ", "return", "np", ".", "sum", "(", "prob", "*", "np", ".", "arange", "(", "num_bins", ")", "*", "max_val", "/", "(", "num_bins", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "interval", "=", "max_val", "/", "num_bins", "\n", "vecs", "=", "np", ".", "stack", "(", "[", "np", ".", "cos", "(", "np", ".", "arange", "(", "num_bins", ")", "*", "interval", "+", "interval", "/", "2", ")", ",", "np", ".", "sin", "(", "np", ".", "arange", "(", "num_bins", ")", "*", "interval", "+", "interval", "/", "2", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "res", "=", "np", ".", "sum", "(", "np", ".", "expand_dims", "(", "prob", ",", "axis", "=", "-", "1", ")", "*", "vecs", ",", "axis", "=", "0", ")", "\n", "res", "=", "np", ".", "arctan2", "(", "res", "[", "1", "]", ",", "res", "[", "0", "]", ")", "\n", "if", "res", "<", "0", ":", "\n", "            ", "res", "+=", "2", "*", "np", ".", "pi", "# remap to [0, 2pi]", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.imwrite_wrapper": [[23, 52], ["input_channel_order.lower.lower", "list", "tuple", "cv2.imwrite"], "function", ["None"], ["def", "imwrite_wrapper", "(", "*", "args", ",", "input_channel_order", "=", "'RGB'", ")", ":", "\n", "    ", "\"\"\"\n    Convinience wrapper for cv2.imwrite() that can write RGB image correctly\n\n    Args:\n        *args: Positional parameters that imwrite() takes\n            See documentation for cv2.imwrite()\n        input_channel_order: Whether the input is in RGB or BGR orders; has effects\n            only when number of channels is three or four (fourth being alpha)\n            'RGB' or 'BGR' (case-insensitive)\n            Optional; defaults to 'RGB'\n    \"\"\"", "\n", "input_channel_order", "=", "input_channel_order", ".", "lower", "(", ")", "\n", "assert", "(", "(", "input_channel_order", "==", "'rgb'", ")", "or", "(", "input_channel_order", "==", "'bgr'", ")", ")", ",", "\"'input_channel_order' has to be either 'RGB' or 'BGR' (case-insensitive)\"", "\n", "\n", "im", "=", "args", "[", "1", "]", "\n", "\n", "if", "(", "im", ".", "ndim", "==", "3", ")", "and", "(", "input_channel_order", "==", "'rgb'", ")", ":", "\n", "        ", "if", "im", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "elif", "im", ".", "shape", "[", "2", "]", "==", "4", ":", "# with alpha", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", ",", "3", "]", "]", "\n", "\n", "", "", "args_list", "=", "list", "(", "args", ")", "\n", "args_list", "[", "1", "]", "=", "im", "\n", "args_tuple", "=", "tuple", "(", "args_list", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "*", "args_tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.resize": [[54, 99], ["cv2.resize", "NotImplementedError", "ValueError"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.resize"], ["", "def", "resize", "(", "im", ",", "target_size", ",", "which_dim", ",", "interpolation", "=", "'bicubic'", ",", "clamp", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Resize one dimension of the image to a certain size while maintaining the aspect ratio\n\n    Args:\n        im: Image to resize\n            Any type that cv2.resize() accepts\n        target_size: Target horizontal or vertical dimension\n            Integer\n        which_dim: Which dimension to match target_size\n            'horizontal' or 'vertical'\n        interpolation: Interpolation method\n            'bicubic'\n            Optional; defaults to 'bicubic'\n        clamp: Clamp the resized image with minimum and maximum values\n            Array_likes of one smaller float and another larger float\n            Optional; defaults to None (no clamping)\n\n    Returns:\n        im_resized: Resized image\n            Numpy array with new horizontal and vertical dimensions\n    \"\"\"", "\n", "h", ",", "w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "interpolation", "==", "'bicubic'", ":", "\n", "        ", "interpolation", "=", "cv2", ".", "INTER_CUBIC", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "interpolation", ")", "\n", "\n", "", "if", "which_dim", "==", "'horizontal'", ":", "\n", "        ", "scale_factor", "=", "target_size", "/", "w", "\n", "", "elif", "which_dim", "==", "'vertical'", ":", "\n", "        ", "scale_factor", "=", "target_size", "/", "h", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "which_dim", ")", "\n", "\n", "", "im_resized", "=", "cv2", ".", "resize", "(", "im", ",", "None", ",", "fx", "=", "scale_factor", ",", "fy", "=", "scale_factor", ",", "\n", "interpolation", "=", "interpolation", ")", "\n", "\n", "if", "clamp", "is", "not", "None", ":", "\n", "        ", "min_val", ",", "max_val", "=", "clamp", "\n", "im_resized", "[", "im_resized", "<", "min_val", "]", "=", "min_val", "\n", "im_resized", "[", "im_resized", ">", "max_val", "]", "=", "max_val", "\n", "\n", "", "return", "im_resized", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.alpha_blend": [[101, 118], ["None"], "function", ["None"], ["", "def", "alpha_blend", "(", "im1", ",", "im2", ",", "alpha", ")", ":", "\n", "    ", "\"\"\"\n    Alpha blending of two images or one image and a scalar\n\n    Args:\n        im1, im2: Image or scalar\n            Numpy array and a scalar or two numpy arrays of the same shape\n        alpha: Weight of im1\n            Float ranging usually from 0 to 1\n\n    Returns:\n        im_blend: Blended image -- alpha * im1 + (1 - alpha) * im2\n            Numpy array of the same shape as input image\n    \"\"\"", "\n", "im_blend", "=", "alpha", "*", "im1", "+", "(", "1", "-", "alpha", ")", "*", "im2", "\n", "\n", "return", "im_blend", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.rgb2gray": [[120, 139], ["numpy.dstack"], "function", ["None"], ["", "def", "rgb2gray", "(", "rgb", ")", ":", "\n", "    ", "\"\"\"\n    Convert a RGB image to a grayscale image\n        Differences from cv2.cvtColor():\n            1. Input image can be float\n            2. Output image has three repeated channels, other than a single channel\n\n    Args:\n        rgb: Image in RGB format\n            Numpy array of shape (h, w, 3)\n\n    Returns:\n        gs: Grayscale image\n            Numpy array of the same shape as input; the three channels are the same\n    \"\"\"", "\n", "ch", "=", "0.299", "*", "rgb", "[", ":", ",", ":", ",", "0", "]", "+", "0.587", "*", "rgb", "[", ":", ",", ":", ",", "1", "]", "+", "0.114", "*", "rgb", "[", ":", ",", ":", ",", "2", "]", "\n", "gs", "=", "np", ".", "dstack", "(", "(", "ch", ",", "ch", ",", "ch", ")", ")", "\n", "\n", "return", "gs", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.adjust_image_attribute": [[141, 180], ["utils.rgb2gray", "utils.alpha_blend", "numpy.random.uniform", "numpy.mean", "utils.alpha_blend", "utils.alpha_blend", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.rgb2gray", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.alpha_blend", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.alpha_blend", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.alpha_blend"], ["", "def", "adjust_image_attribute", "(", "rgb", ",", "attr", ",", "d", ",", "random", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Adjust or randomize the specified attribute of the image\n\n    Args:\n        rgb: Image in RGB format\n            Numpy array of shape (h, w, 3)\n        attr: Image attribute to adjust or randomize\n            'brightness', 'saturation', or 'contrast'\n        d: If random, d must be positive, and alpha for blending is randomly drawn from\n            [1 - d, 1 + d]; else, alpha will be just 1 + d\n            Float\n        random: Whether to set or randomize the attribute\n            Boolean\n            Optional; defaults to False\n\n    Returns:\n        rgb_out: Output image in RGB format\n            Numpy array of the same shape as input\n    \"\"\"", "\n", "gs", "=", "rgb2gray", "(", "rgb", ")", "\n", "\n", "if", "random", ":", "\n", "        ", "assert", "(", "\n", "d", ">", "0", ")", ",", "\"'d' must be positive for range [1 - d, 1 + d] to be valid\"", "\n", "alpha", "=", "1", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "d", ",", "high", "=", "d", ")", "\n", "", "else", ":", "\n", "        ", "alpha", "=", "1", "+", "d", "\n", "\n", "", "if", "attr", "==", "'contrast'", ":", "\n", "        ", "rgb_out", "=", "alpha_blend", "(", "rgb", ",", "np", ".", "mean", "(", "gs", "[", ":", ",", ":", ",", "0", "]", ")", ",", "alpha", ")", "\n", "", "elif", "attr", "==", "'saturation'", ":", "\n", "        ", "rgb_out", "=", "alpha_blend", "(", "rgb", ",", "gs", ",", "alpha", ")", "\n", "", "elif", "attr", "==", "'brightness'", ":", "\n", "        ", "rgb_out", "=", "alpha_blend", "(", "rgb", ",", "0", ",", "alpha", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "attr", ")", "\n", "\n", "", "return", "rgb_out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.jitter_colors": [[182, 210], ["numpy.array", "numpy.random.shuffle", "copy.deepcopy", "range", "utils.adjust_image_attribute", "len"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.adjust_image_attribute"], ["", "def", "jitter_colors", "(", "rgb", ",", "d_brightness", "=", "0", ",", "d_contrast", "=", "0", ",", "d_saturation", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Color jittering by randomizing brightness, contrast and saturation, in random order\n\n    Args:\n        rgb: Image in RGB format\n            Numpy array of shape (h, w, 3)\n        d_brightness, d_contrast, d_saturation: Alpha for blending drawn from [1 - d, 1 + d]\n            Nonnegative float\n            Optional; defaults to 0, i.e., no randomization\n\n    Returns:\n        rgb_out: Color-jittered image in RGB format\n            Numpy array of the same shape as input\n    \"\"\"", "\n", "attrs", "=", "[", "'brightness'", ",", "'contrast'", ",", "'saturation'", "]", "\n", "ds", "=", "[", "d_brightness", ",", "d_contrast", ",", "d_saturation", "]", "\n", "\n", "# In random order", "\n", "ind", "=", "np", ".", "array", "(", "range", "(", "len", "(", "attrs", ")", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "ind", ")", "# in-place", "\n", "\n", "rgb_out", "=", "deepcopy", "(", "rgb", ")", "\n", "for", "idx", "in", "ind", ":", "\n", "        ", "rgb_out", "=", "adjust_image_attribute", "(", "\n", "rgb_out", ",", "attrs", "[", "idx", "]", ",", "ds", "[", "idx", "]", ",", "random", "=", "True", ")", "\n", "\n", "", "return", "rgb_out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.add_lighting_noise": [[212, 260], ["numpy.array", "numpy.array", "numpy.random.normal", "numpy.sum", "copy.deepcopy", "range", "numpy.multiply", "numpy.multiply", "numpy.tile", "numpy.tile"], "function", ["None"], ["", "def", "add_lighting_noise", "(", "rgb_0to1", ",", "\n", "alpha_std", ",", "\n", "eigvals", "=", "(", "0.2175", ",", "0.0188", ",", "0.0045", ")", ",", "\n", "eigvecs", "=", "(", "(", "-", "0.5675", ",", "0.7192", ",", "0.4009", ")", ",", "\n", "(", "-", "0.5808", ",", "-", "0.0045", ",", "-", "0.8140", ")", ",", "\n", "(", "-", "0.5836", ",", "-", "0.6948", ",", "0.4203", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    Add AlexNet-style PCA-based noise\n\n    Args:\n        rgb_0to1: Image in RGB format, normalized within [0, 1]; values can fall outside [0, 1] due to\n            some preceding processing, but eigenvalues/vectors should match the magnitude order\n            Numpy array of shape (h, w, 3)\n        alpha_std: Standard deviation of the Gaussian from which alpha is drawn\n            Positive float\n        eigvals, eigvecs: Eigenvalues and their eigenvectors\n            Array_likes of length 3 and shape (3, 3), respectively\n            Optional; default to results from AlexNet\n\n    Returns:\n        rgb_0to1_out: Output image in RGB format, with lighting noise added\n            Numpy array of the same shape as input\n    \"\"\"", "\n", "assert", "(", "rgb_0to1", ".", "dtype", ".", "name", "==", "\n", "'float64'", ")", ",", "\"Input image must be normalized and hence be float\"", "\n", "assert", "(", "alpha_std", ">", "0", ")", ",", "\"Standard deviation must be positive\"", "\n", "\n", "eigvals", "=", "np", ".", "array", "(", "eigvals", ")", "\n", "eigvecs", "=", "np", ".", "array", "(", "eigvecs", ")", "\n", "\n", "alpha", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "alpha_std", ",", "size", "=", "3", ")", "\n", "noise_rgb", "=", "np", ".", "sum", "(", "\n", "np", ".", "multiply", "(", "\n", "np", ".", "multiply", "(", "\n", "eigvecs", ",", "\n", "np", ".", "tile", "(", "alpha", ",", "(", "3", ",", "1", ")", ")", "\n", ")", ",", "\n", "np", ".", "tile", "(", "eigvals", ",", "(", "3", ",", "1", ")", ")", "\n", ")", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "\n", "rgb_0to1_out", "=", "deepcopy", "(", "rgb_0to1", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "rgb_0to1_out", "[", ":", ",", ":", ",", "i", "]", "+=", "noise_rgb", "[", "i", "]", "\n", "\n", "", "return", "rgb_0to1_out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.normalize_colors": [[262, 287], ["copy.deepcopy", "range"], "function", ["None"], ["", "def", "normalize_colors", "(", "rgb_0to1", ",", "mean_rgb", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std_rgb", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "    ", "\"\"\"\n    Normalize colors\n\n    Args:\n        rgb_0to1: Image in RGB format, normalized within [0, 1]; values can fall outside [0, 1] due to\n            some preceding processing, but mean and standard deviation should match the magnitude order\n            Numpy array of shape (h, w, 3)\n        mean_rgb, std_rgb: Mean and standard deviation for RGB channels\n            Array_likes of length 3\n            Optional; default to results computed from a random subset of ImageNet training images\n\n    Returns:\n        rgb_0to1_out: Output image in RGB format, with channels normalized\n            Numpy array of the same shape as input\n    \"\"\"", "\n", "assert", "(", "'float'", "in", "rgb_0to1", ".", "dtype", ".", "name", ")", ",", "\"Input image must be normalized and hence be float\"", "\n", "assert", "rgb_0to1", ".", "ndim", "==", "3", ",", "\"Nx3xHxW? This function was written for HxWx3\"", "\n", "\n", "rgb_0to1_out", "=", "deepcopy", "(", "rgb_0to1", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "rgb_0to1_out", "[", ":", ",", ":", ",", "i", "]", "=", "(", "\n", "rgb_0to1_out", "[", ":", ",", ":", ",", "i", "]", "-", "mean_rgb", "[", "i", "]", ")", "/", "std_rgb", "[", "i", "]", "\n", "\n", "", "return", "rgb_0to1_out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.denormalize_colors": [[289, 318], ["range", "range", "NotImplementedError"], "function", ["None"], ["", "def", "denormalize_colors", "(", "rgb_norm", ",", "mean_rgb", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std_rgb", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "    ", "\"\"\"\n    Denormalize colors\n\n    Args:\n        rgb_norm: Image in RGB format, normalized by normalize_colors()\n            Numpy array of shape (h, w, 3)\n        mean_rgb, std_rgb: Mean and standard deviation for RGB channels used\n            Array_likes of length 3\n            Optional; default to results computed from a random subset of ImageNet training images\n\n    Returns:\n        rgb_0to1_out: Output image in RGB format, with channels normalized\n            Numpy array of the same shape as input\n    \"\"\"", "\n", "assert", "(", "'float'", "in", "rgb_norm", ".", "dtype", ".", "name", ")", ",", "\"Input image must be color-normalized and hence be float\"", "\n", "\n", "if", "rgb_norm", ".", "ndim", "==", "3", ":", "\n", "# HxWx3", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "rgb_norm", "[", ":", ",", ":", ",", "i", "]", "=", "rgb_norm", "[", ":", ",", ":", ",", "i", "]", "*", "std_rgb", "[", "i", "]", "+", "mean_rgb", "[", "i", "]", "\n", "", "", "elif", "rgb_norm", ".", "ndim", "==", "4", ":", "\n", "# Nx3xHxW", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "rgb_norm", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "rgb_norm", "[", ":", ",", "i", ",", ":", ",", ":", "]", "*", "std_rgb", "[", "i", "]", "+", "mean_rgb", "[", "i", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "rgb_norm", ".", "ndim", ")", "\n", "\n", "", "return", "rgb_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.binarize": [[320, 349], ["numpy.logical_not", "copy.deepcopy"], "function", ["None"], ["", "def", "binarize", "(", "im", ",", "thres", ",", "gt_is_1", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Binarize image\n\n    Args:\n        im: Image to binarize\n            Numpy array\n        thres: Threshold\n            Float\n        gt_is_1: Whether 1 is for \"greater than\" or \"less than or equal to\"\n            Boolean\n            Optional; defaults to True\n\n    Returns:\n        im_bin: Binarized image consisting of only 0's and 1's\n            Numpy array of the same shape as input\n    \"\"\"", "\n", "if", "gt_is_1", ":", "\n", "        ", "ind_for_1", "=", "im", ">", "thres", "\n", "", "else", ":", "\n", "        ", "ind_for_1", "=", "im", "<=", "thres", "\n", "\n", "", "ind_for_0", "=", "np", ".", "logical_not", "(", "ind_for_1", ")", "\n", "\n", "im_bin", "=", "deepcopy", "(", "im", ")", "\n", "im_bin", "[", "ind_for_1", "]", "=", "1", "\n", "im_bin", "[", "ind_for_0", "]", "=", "0", "\n", "\n", "return", "im_bin", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.get_bbox": [[351, 358], ["numpy.where", "numpy.min", "numpy.min", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "get_bbox", "(", "mask_0to1", ",", "th", "=", "0.95", ")", ":", "\n", "    ", "indh", ",", "indw", "=", "np", ".", "where", "(", "mask_0to1", ">", "th", ")", "\n", "tl_h", "=", "np", ".", "min", "(", "indh", ")", "\n", "tl_w", "=", "np", ".", "min", "(", "indw", ")", "\n", "br_h", "=", "np", ".", "max", "(", "indh", ")", "\n", "br_w", "=", "np", ".", "max", "(", "indw", ")", "\n", "return", "[", "tl_w", ",", "tl_h", ",", "br_w", ",", "br_h", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.crop": [[360, 411], ["int", "int", "int", "int", "cv2.resize", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.pad", "numpy.pad", "max"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.resize"], ["", "def", "crop", "(", "img", ",", "img_bbox", ",", "out_size", ",", "pad", ",", "pad_zero", "=", "True", ",", "kps", "=", "None", ")", ":", "\n", "    ", "y1", ",", "x1", ",", "y2", ",", "x2", "=", "img_bbox", "\n", "w", ",", "h", "=", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", "\n", "x_mid", "=", "(", "x1", "+", "x2", ")", "/", "2.", "\n", "y_mid", "=", "(", "y1", "+", "y2", ")", "/", "2.", "\n", "l", "=", "max", "(", "x2", "-", "x1", ",", "y2", "-", "y1", ")", "*", "out_size", "/", "(", "out_size", "-", "2.", "*", "pad", ")", "\n", "x1", "=", "int", "(", "np", ".", "round", "(", "x_mid", "-", "l", "/", "2.", ")", ")", "\n", "x2", "=", "int", "(", "np", ".", "round", "(", "x_mid", "+", "l", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "np", ".", "round", "(", "y_mid", "-", "l", "/", "2.", ")", ")", "\n", "y2", "=", "int", "(", "np", ".", "round", "(", "y_mid", "+", "l", "/", "2.", ")", ")", "\n", "if", "kps", "is", "not", "None", ":", "\n", "        ", "kps", "[", ":", ",", "0", "]", "=", "kps", "[", ":", ",", "0", "]", "-", "(", "y_mid", "-", "l", "/", "2.", ")", "\n", "kps", "[", ":", ",", "1", "]", "=", "kps", "[", ":", ",", "1", "]", "-", "(", "x_mid", "-", "l", "/", "2.", ")", "\n", "", "b_x", "=", "0", "\n", "if", "x1", "<", "0", ":", "\n", "        ", "b_x", "=", "-", "x1", "\n", "x1", "=", "0", "\n", "", "b_y", "=", "0", "\n", "if", "y1", "<", "0", ":", "\n", "        ", "b_y", "=", "-", "y1", "\n", "y1", "=", "0", "\n", "", "a_x", "=", "0", "\n", "if", "x2", ">=", "h", ":", "\n", "        ", "a_x", "=", "x2", "-", "(", "h", "-", "1", ")", "\n", "x2", "=", "h", "-", "1", "\n", "", "a_y", "=", "0", "\n", "if", "y2", ">=", "w", ":", "\n", "        ", "a_y", "=", "y2", "-", "(", "w", "-", "1", ")", "\n", "y2", "=", "w", "-", "1", "\n", "", "pad_style", "=", "{", "\n", "'mode'", ":", "'constant'", ",", "\n", "'constant_values'", ":", "0", "\n", "}", "if", "pad_zero", "else", "{", "\n", "'mode'", ":", "'edge'", "\n", "}", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img_crop", "=", "np", ".", "pad", "(", "\n", "img", "[", "x1", ":", "(", "x2", "+", "1", ")", ",", "y1", ":", "(", "y2", "+", "1", ")", "]", ",", "\n", "(", "(", "b_x", ",", "a_x", ")", ",", "(", "b_y", ",", "a_y", ")", ")", ",", "\n", "**", "pad_style", "\n", ")", "\n", "", "else", ":", "\n", "        ", "img_crop", "=", "np", ".", "pad", "(", "\n", "img", "[", "x1", ":", "(", "x2", "+", "1", ")", ",", "y1", ":", "(", "y2", "+", "1", ")", "]", ",", "\n", "(", "(", "b_x", ",", "a_x", ")", ",", "(", "b_y", ",", "a_y", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "**", "pad_style", "\n", ")", "\n", "", "if", "kps", "is", "not", "None", ":", "\n", "        ", "kps", "[", ":", ",", "0", "]", "=", "kps", "[", ":", ",", "0", "]", "*", "out_size", "/", "l", "\n", "kps", "[", ":", ",", "1", "]", "=", "kps", "[", ":", ",", "1", "]", "*", "out_size", "/", "l", "\n", "", "return", "cv2", ".", "resize", "(", "img_crop", ",", "(", "out_size", ",", "out_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.utils.sample_vertex_from_mesh": [[413, 438], ["numpy.take", "numpy.linalg.norm", "numpy.sum", "numpy.random.choice", "numpy.random.rand", "numpy.random.rand", "numpy.cross", "numpy.arange"], "function", ["None"], ["", "def", "sample_vertex_from_mesh", "(", "vertex", ",", "facet", ",", "rnd_idxs", "=", "None", ",", "u", "=", "None", ",", "v", "=", "None", ",", "num_samples", "=", "2048", ")", ":", "\n", "# mean = np.mean(vertex, axis=0, keepdims=True)", "\n", "# norm = np.max(np.linalg.norm(vertex - mean, axis=1))", "\n", "\n", "    ", "triangles", "=", "np", ".", "take", "(", "vertex", ",", "facet", ",", "axis", "=", "0", ")", "\n", "vx", ",", "vy", ",", "vz", "=", "triangles", "[", ":", ",", "0", ",", ":", "]", ",", "triangles", "[", ":", ",", "1", ",", ":", "]", ",", "triangles", "[", ":", ",", "2", ",", ":", "]", "\n", "triangle_areas", "=", "0.5", "*", "np", ".", "linalg", ".", "norm", "(", "np", ".", "cross", "(", "vy", "-", "vx", ",", "vz", "-", "vx", ")", ",", "axis", "=", "1", ")", "\n", "probs", "=", "triangle_areas", "/", "np", ".", "sum", "(", "triangle_areas", ")", "\n", "\n", "if", "rnd_idxs", "is", "None", ":", "\n", "        ", "rnd_idxs", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "probs", ".", "shape", "[", "0", "]", ")", ",", "size", "=", "num_samples", ",", "p", "=", "probs", ")", "\n", "", "vx", ",", "vy", ",", "vz", "=", "vx", "[", "rnd_idxs", "]", ",", "vy", "[", "rnd_idxs", "]", ",", "vz", "[", "rnd_idxs", "]", "\n", "if", "u", "is", "None", ":", "\n", "        ", "u", "=", "np", ".", "random", ".", "rand", "(", "vx", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "", "if", "v", "is", "None", ":", "\n", "        ", "v", "=", "np", ".", "random", ".", "rand", "(", "vx", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "", "mask", "=", "u", "+", "v", ">", "1", "\n", "u", "[", "mask", "]", "=", "1", "-", "u", "[", "mask", "]", "\n", "v", "[", "mask", "]", "=", "1", "-", "v", "[", "mask", "]", "\n", "w", "=", "1", "-", "(", "u", "+", "v", ")", "\n", "pts", "=", "(", "vx", "*", "u", "+", "vy", "*", "v", "+", "vz", "*", "w", ")", "\n", "\n", "# pts = pts - mean", "\n", "# pts = pts / norm", "\n", "return", "pts", ",", "rnd_idxs", ",", "u", ",", "v", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.datasets.Dataset.add_arguments": [[41, 44], ["set"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "add_arguments", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "return", "parser", ",", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.datasets.Dataset.__init__": [[45, 75], ["type2filename.items", "range", "getattr", "sorted", "len", "len", "type2files.items", "samples.append", "glob.glob.glob", "type2files.values", "set", "os.path.join", "hydra.utils.get_original_cwd"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "model", ")", ":", "\n", "# Get required keys and preprocessing from the model", "\n", "        ", "required", "=", "model", ".", "requires", "\n", "self", ".", "preproc", "=", "model", ".", "preprocess_wrapper", "\n", "# Wrapper usually crops and resizes the input image (so that it's just", "\n", "# like our renders) before sending it to the actual preprocessing", "\n", "\n", "# Associate each data type required by the model with input paths", "\n", "type2filename", "=", "{", "}", "\n", "for", "k", "in", "required", ":", "\n", "            ", "type2filename", "[", "k", "]", "=", "getattr", "(", "opt", ",", "'input_'", "+", "k", ")", "\n", "\n", "# Generate a sorted filelist for each data type", "\n", "", "type2files", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "type2filename", ".", "items", "(", ")", ":", "\n", "            ", "type2files", "[", "k", "]", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "hydra", ".", "utils", ".", "get_original_cwd", "(", ")", ",", "v", ")", ")", ")", "\n", "", "ns", "=", "[", "len", "(", "x", ")", "for", "x", "in", "type2files", ".", "values", "(", ")", "]", "\n", "assert", "len", "(", "set", "(", "ns", ")", ")", "==", "1", ",", "(", "\"Filelists for different types must be of the same length \"", "\n", "\"(1-to-1 correspondance)\"", ")", "\n", "self", ".", "length", "=", "ns", "[", "0", "]", "\n", "\n", "samples", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "length", ")", ":", "\n", "            ", "sample", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "type2files", ".", "items", "(", ")", ":", "\n", "                ", "sample", "[", "k", "+", "'_path'", "]", "=", "v", "[", "i", "]", "\n", "", "samples", ".", "append", "(", "sample", ")", "\n", "", "self", ".", "samples", "=", "samples", "\n", "self", ".", "type2files", "=", "type2files", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.datasets.Dataset.__len__": [[76, 78], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.datasets.Dataset.__getitem__": [[79, 109], ["sample.items", "datasets.Dataset.preproc", "datasets.Dataset.convert_to_float32", "datasets.imread_wrapper", "imread_wrapper.astype", "float", "datasets.imread_wrapper", "NotImplementedError", "imread_wrapper.astype", "float", "numpy.iinfo", "numpy.iinfo"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.Dataset.convert_to_float32", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.imread_wrapper", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.imread_wrapper"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "sample", "=", "self", ".", "samples", "[", "i", "]", "\n", "\n", "# print(sample)", "\n", "# Actually loading the item", "\n", "sample_loaded", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "sample", ".", "items", "(", ")", ":", "\n", "            ", "sample_loaded", "[", "k", "]", "=", "v", "# as-is", "\n", "if", "k", "==", "'rgb_path'", ":", "\n", "                ", "im", "=", "imread_wrapper", "(", "\n", "v", ",", "cv2", ".", "IMREAD_COLOR", ",", "output_channel_order", "=", "'RGB'", ")", "\n", "# Normalize to [0, 1] floats", "\n", "im", "=", "im", ".", "astype", "(", "float", ")", "/", "float", "(", "np", ".", "iinfo", "(", "im", ".", "dtype", ")", ".", "max", ")", "\n", "sample_loaded", "[", "'rgb'", "]", "=", "im", "\n", "", "elif", "k", "==", "'mask_path'", ":", "\n", "                ", "im", "=", "imread_wrapper", "(", "\n", "v", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "# Normalize to [0, 1] floats", "\n", "im", "=", "im", ".", "astype", "(", "float", ")", "/", "float", "(", "np", ".", "iinfo", "(", "im", ".", "dtype", ")", ".", "max", ")", "\n", "sample_loaded", "[", "'silhou'", "]", "=", "im", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "v", ")", "\n", "\n", "# Preprocessing specified by the model", "\n", "", "", "sample_loaded", "=", "self", ".", "preproc", "(", "sample_loaded", ")", "\n", "sample_loaded", "[", "'rgb_fn'", "]", "=", "self", ".", "type2files", "[", "'rgb'", "]", "[", "i", "]", "\n", "sample_loaded", "[", "'mask_fn'", "]", "=", "self", ".", "type2files", "[", "'mask'", "]", "[", "i", "]", "\n", "# Convert all types to float32 for faster copying", "\n", "self", ".", "convert_to_float32", "(", "sample_loaded", ")", "\n", "return", "sample_loaded", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.datasets.Dataset.convert_to_float32": [[110, 116], ["sample_loaded.items", "isinstance", "v.astype"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "convert_to_float32", "(", "sample_loaded", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "sample_loaded", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "if", "v", ".", "dtype", "!=", "np", ".", "float32", ":", "\n", "                    ", "sample_loaded", "[", "k", "]", "=", "v", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.datasets.imread_wrapper": [[9, 38], ["output_channel_order.lower.lower", "cv2.imread", "cv2.IMREAD_COLOR", "cv2.IMREAD_GRAYSCALE"], "function", ["None"], ["def", "imread_wrapper", "(", "*", "args", ",", "output_channel_order", "=", "'RGB'", ")", ":", "\n", "    ", "\"\"\"\n    Convinience wrapper for cv2.imread() that can return result in RGB order\n\n    Args:\n        *args: Positional parameters that imread() takes\n            See documentation for cv2.imread()\n        output_channel_order: Whether to output RGB or BGR orders; has effects only when\n            number of channels is three or four (fourth being alpha)\n            'RGB' or 'BGR' (case-insensitive)\n            Optional; defaults to 'RGB'\n\n    Returns:\n        im: Loaded image\n            Numpy array of shape (m, n) or (m, n, c)\n    \"\"\"", "\n", "output_channel_order", "=", "output_channel_order", ".", "lower", "(", ")", "\n", "assert", "(", "(", "output_channel_order", "==", "'rgb'", ")", "or", "(", "output_channel_order", "==", "'bgr'", ")", ")", ",", "\"'output_channel_order' has to be either 'RGB' or 'BGR' (case-insensitive)\"", "\n", "\n", "im", "=", "cv2", ".", "imread", "(", "*", "args", ")", "\n", "assert", "(", "im", "is", "not", "None", ")", ",", "\"%s not existent\"", "%", "args", "[", "0", "]", "\n", "\n", "if", "(", "im", ".", "ndim", "==", "3", ")", "and", "(", "output_channel_order", "==", "'rgb'", ")", ":", "\n", "        ", "if", "im", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "elif", "im", ".", "shape", "[", "2", "]", "==", "4", ":", "# with alpha", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", ",", "3", "]", "]", "\n", "", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.kpnet.KeypointDataset.__init__": [[59, 82], ["super().__init__", "json.load", "dict", "glob.glob.glob", "open", "max", "os.path.join", "enumerate", "kpnet.KeypointDataset.keypoints.append", "kpnet.KeypointDataset.pcds.append", "kpnet.KeypointDataset.mesh_names.append", "hydra.utils.to_absolute_path", "hydra.utils.to_absolute_path", "os.path.basename().split", "numpy.ones", "max", "kpnet.naive_read_pcd", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.kpnet.naive_read_pcd"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "catg", "=", "cfg", ".", "class_name", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n", "annots", "=", "json", ".", "load", "(", "open", "(", "hydra", ".", "utils", ".", "to_absolute_path", "(", "cfg", ".", "data", ".", "annot_path", ")", ")", ")", "\n", "annots", "=", "[", "annot", "for", "annot", "in", "annots", "if", "annot", "[", "'class_id'", "]", "==", "NAMES2ID", "[", "cfg", ".", "class_name", "]", "]", "\n", "keypoints", "=", "dict", "(", "[", "(", "annot", "[", "'model_id'", "]", ",", "[", "(", "kp_info", "[", "'pcd_info'", "]", "[", "'point_index'", "]", ",", "kp_info", "[", "'semantic_id'", "]", ")", "for", "kp_info", "in", "annot", "[", "'keypoints'", "]", "]", ")", "for", "annot", "in", "annots", "]", ")", "\n", "\n", "self", ".", "nclasses", "=", "max", "(", "[", "max", "(", "[", "kp_info", "[", "'semantic_id'", "]", "for", "kp_info", "in", "annot", "[", "'keypoints'", "]", "]", ")", "for", "annot", "in", "annots", "]", ")", "+", "1", "\n", "\n", "self", ".", "pcds", "=", "[", "]", "\n", "self", ".", "keypoints", "=", "[", "]", "\n", "self", ".", "mesh_names", "=", "[", "]", "\n", "for", "fn", "in", "glob", "(", "os", ".", "path", ".", "join", "(", "hydra", ".", "utils", ".", "to_absolute_path", "(", "cfg", ".", "data", ".", "pcd_root", ")", ",", "NAMES2ID", "[", "cfg", ".", "class_name", "]", ",", "'*.pcd'", ")", ")", ":", "\n", "            ", "model_id", "=", "os", ".", "path", ".", "basename", "(", "fn", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "curr_keypoints", "=", "-", "np", ".", "ones", "(", "(", "self", ".", "nclasses", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "i", ",", "kp", "in", "enumerate", "(", "keypoints", "[", "model_id", "]", ")", ":", "\n", "                ", "curr_keypoints", "[", "kp", "[", "1", "]", "]", "=", "kp", "[", "0", "]", "\n", "", "self", ".", "keypoints", ".", "append", "(", "curr_keypoints", ")", "\n", "self", ".", "pcds", ".", "append", "(", "naive_read_pcd", "(", "fn", ")", "[", "0", "]", ")", "\n", "self", ".", "mesh_names", ".", "append", "(", "model_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.kpnet.KeypointDataset.__getitem__": [[83, 90], ["kpnet.normalize_pc", "pc.astype", "label.astype"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.kpnet.normalize_pc"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pc", "=", "self", ".", "pcds", "[", "idx", "]", "\n", "label", "=", "self", ".", "keypoints", "[", "idx", "]", "\n", "\n", "pc", ",", "center", ",", "scale", "=", "normalize_pc", "(", "pc", ")", "\n", "\n", "return", "pc", ".", "astype", "(", "np", ".", "float32", ")", ",", "label", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.kpnet.KeypointDataset.__len__": [[91, 93], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "pcds", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.kpnet.naive_read_pcd": [[30, 44], ["open().readlines", "enumerate", "numpy.asarray", "numpy.array", "numpy.array", "numpy.stack", "line.startswith", "line.rstrip().split", "open", "line.rstrip"], "function", ["None"], ["def", "naive_read_pcd", "(", "path", ")", ":", "\n", "    ", "lines", "=", "open", "(", "path", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "idx", "=", "-", "1", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "'DATA ascii'", ")", ":", "\n", "            ", "idx", "=", "i", "+", "1", "\n", "break", "\n", "", "", "lines", "=", "lines", "[", "idx", ":", "]", "\n", "lines", "=", "[", "line", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", "for", "line", "in", "lines", "]", "\n", "data", "=", "np", ".", "asarray", "(", "lines", ")", "\n", "pc", "=", "np", ".", "array", "(", "data", "[", ":", ",", ":", "3", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "colors", "=", "np", ".", "array", "(", "data", "[", ":", ",", "-", "1", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "colors", "=", "np", ".", "stack", "(", "[", "(", "colors", ">>", "16", ")", "&", "255", ",", "(", "colors", ">>", "8", ")", "&", "255", ",", "colors", "&", "255", "]", ",", "-", "1", ")", "\n", "return", "pc", ",", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.kpnet.add_noise": [[46, 49], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "add_noise", "(", "x", ",", "sigma", "=", "0.015", ",", "clip", "=", "0.05", ")", ":", "\n", "    ", "noise", "=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "*", "x", ".", "shape", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "return", "x", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.kpnet.normalize_pc": [[51, 56], ["numpy.stack", "numpy.max", "numpy.min", "numpy.max"], "function", ["None"], ["", "def", "normalize_pc", "(", "pc", ")", ":", "\n", "    ", "bounds", "=", "np", ".", "stack", "(", "[", "np", ".", "min", "(", "pc", ",", "0", ")", ",", "np", ".", "max", "(", "pc", ",", "0", ")", "]", ",", "0", ")", "\n", "center", ",", "scale", "=", "(", "bounds", "[", "1", "]", "+", "bounds", "[", "0", "]", ")", "/", "2", ",", "np", ".", "max", "(", "bounds", "[", "1", "]", "-", "bounds", "[", "0", "]", ")", "\n", "pc", "=", "(", "pc", "-", "center", ")", "/", "scale", "\n", "return", "pc", ",", "center", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.Dataset.add_arguments": [[141, 144], ["set"], "methods", ["None"], ["@", "classmethod", "\n", "def", "add_arguments", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "return", "parser", ",", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.Dataset.read_bool_status": [[145, 150], ["open", "f.read", "os.path.join", "f.read.split"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "read_bool_status", "(", "cls", ",", "status_file", ")", ":", "\n", "        ", "with", "open", "(", "join", "(", "cls", ".", "list_root", ",", "status_file", ")", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", "\n", "", "return", "[", "x", "==", "'True'", "for", "x", "in", "lines", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.Dataset.__init__": [[151, 225], ["opt.classes.split", "sorted", "shapenet.Dataset.read_bool_status", "enumerate", "list", "open", "f.read", "f.read.split", "len", "len", "shapenet.Dataset.read_bool_status", "random.Random().shuffle", "shapenet.Dataset.class_aliases[].split", "c.split", "set", "os.path.join", "shapenet.Dataset.status_and_suffix.keys", "len", "len", "item.split", "os.path.join", "sample_dict.values", "samples.append", "random.Random", "os.path.join", "os.path.join", "os.path.exists", "item.split"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.Dataset.read_bool_status", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.Dataset.read_bool_status"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "mode", "=", "'train'", ",", "model", "=", "None", ")", ":", "\n", "        ", "assert", "mode", "in", "(", "'train'", ",", "'vali'", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "model", "is", "None", ":", "\n", "            ", "required", "=", "[", "'rgb'", "]", "\n", "self", ".", "preproc", "=", "None", "\n", "", "else", ":", "\n", "            ", "required", "=", "model", ".", "requires", "\n", "self", ".", "preproc", "=", "model", ".", "preprocess", "\n", "# import pdb; pdb.set_trace()", "\n", "# Parse classes", "\n", "", "classes", "=", "[", "]", "# alias to real for locating data", "\n", "class_str", "=", "''", "# real to alias for logging", "\n", "for", "c", "in", "opt", ".", "classes", ".", "split", "(", "'+'", ")", ":", "\n", "            ", "class_str", "+=", "c", "+", "'+'", "\n", "if", "c", "in", "self", ".", "class_aliases", ":", "# nickname given", "\n", "                ", "classes", "+=", "self", ".", "class_aliases", "[", "c", "]", ".", "split", "(", "'+'", ")", "\n", "", "else", ":", "\n", "                ", "classes", "=", "c", ".", "split", "(", "'+'", ")", "\n", "", "", "class_str", "=", "class_str", "[", ":", "-", "1", "]", "# removes the final +", "\n", "classes", "=", "sorted", "(", "list", "(", "set", "(", "classes", ")", ")", ")", "\n", "\n", "# Load items and train-test split", "\n", "with", "open", "(", "join", "(", "self", ".", "list_root", ",", "'items_all.txt'", ")", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "read", "(", ")", "\n", "", "item_list", "=", "lines", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", "\n", "is_train", "=", "self", ".", "read_bool_status", "(", "'is_train.txt'", ")", "\n", "assert", "len", "(", "item_list", ")", "==", "len", "(", "is_train", ")", "\n", "\n", "# Load status the network requires", "\n", "has", "=", "{", "}", "\n", "for", "data_type", "in", "required", ":", "\n", "            ", "assert", "data_type", "in", "self", ".", "status_and_suffix", ".", "keys", "(", ")", ",", "\"%s required, but unspecified in status_and_suffix\"", "%", "data_type", "\n", "has", "[", "data_type", "]", "=", "self", ".", "read_bool_status", "(", "\n", "self", ".", "status_and_suffix", "[", "data_type", "]", "[", "'status'", "]", "\n", ")", "\n", "assert", "len", "(", "has", "[", "data_type", "]", ")", "==", "len", "(", "item_list", ")", "\n", "\n", "# Pack paths into a dict", "\n", "", "samples", "=", "[", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "item_list", ")", ":", "\n", "            ", "class_id", ",", "_", "=", "item", ".", "split", "(", "'/'", ")", "[", ":", "2", "]", "\n", "item_in_split", "=", "(", "(", "self", ".", "mode", "==", "'train'", ")", "==", "is_train", "[", "i", "]", ")", "\n", "if", "item_in_split", "and", "class_id", "in", "classes", ":", "\n", "# Look up subclass_id for this item", "\n", "                ", "sample_dict", "=", "{", "'item'", ":", "join", "(", "self", ".", "data_root", ",", "item", ")", "}", "\n", "# As long as a type is required, it appears as a key", "\n", "# If it doens't exist, its value will be None", "\n", "for", "data_type", "in", "required", ":", "\n", "                    ", "suffix", "=", "self", ".", "status_and_suffix", "[", "data_type", "]", "[", "'suffix'", "]", "\n", "k", "=", "data_type", "+", "'_path'", "\n", "if", "data_type", "==", "'voxel_canon'", "or", "data_type", "==", "'renderer2voxel'", "or", "data_type", "==", "'voxel2renderer'", ":", "\n", "# All different views share the same canonical voxel", "\n", "                        ", "sample_dict", "[", "k", "]", "=", "join", "(", "self", ".", "data_root", ",", "item", ".", "split", "(", "'_view'", ")", "[", "0", "]", "+", "suffix", ")", "if", "has", "[", "data_type", "]", "[", "i", "]", "else", "None", "\n", "", "else", ":", "\n", "                        ", "sample_dict", "[", "k", "]", "=", "join", "(", "self", ".", "data_root", ",", "item", "+", "suffix", ")", "if", "has", "[", "data_type", "]", "[", "i", "]", "else", "None", "\n", "", "if", "sample_dict", "[", "k", "]", "is", "not", "None", "and", "not", "os", ".", "path", ".", "exists", "(", "sample_dict", "[", "k", "]", ")", ":", "\n", "                        ", "sample_dict", "[", "k", "]", "=", "None", "\n", "", "", "if", "None", "not", "in", "sample_dict", ".", "values", "(", ")", ":", "\n", "# All that are required exist", "\n", "                    ", "samples", ".", "append", "(", "sample_dict", ")", "\n", "\n", "# If validation, dataloader shuffle will be off, so need to DETERMINISTICALLY", "\n", "# shuffle here to have a bit of every class", "\n", "", "", "", "if", "self", ".", "mode", "==", "'vali'", ":", "\n", "            ", "if", "opt", ".", "manual_seed", ":", "\n", "                ", "seed", "=", "opt", ".", "manual_seed", "\n", "", "else", ":", "\n", "                ", "seed", "=", "0", "\n", "", "random", ".", "Random", "(", "seed", ")", ".", "shuffle", "(", "samples", ")", "\n", "", "self", ".", "samples", "=", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.Dataset.__getitem__": [[226, 269], ["shapenet.Dataset.samples[].items", "shapenet.Dataset.convert_to_float32", "k.endswith", "shapenet.Dataset.preproc", "v.endswith", "util.util_img.imread_wrapper", "v.endswith", "util.util_img.imread_wrapper.astype", "float", "v.endswith", "v.endswith", "shapenet.real2prob", "v.endswith", "v.endswith", "numpy.iinfo", "numpy.load", "shapenet.real2prob", "v.endswith", "numpy.load", "v.endswith", "numpy.load", "numpy.load", "v.endswith", "numpy.load", "NotImplementedError", "numpy.load", "v.endswith", "numpy.load", "numpy.load", "scipy.io.loadmat"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.Dataset.convert_to_float32", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.imread_wrapper", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.real2prob", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.real2prob"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "sample_loaded", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "samples", "[", "i", "]", ".", "items", "(", ")", ":", "\n", "            ", "sample_loaded", "[", "k", "]", "=", "v", "# as-is", "\n", "if", "k", ".", "endswith", "(", "'_path'", ")", ":", "\n", "                ", "if", "v", ".", "endswith", "(", "'.png'", ")", ":", "\n", "                    ", "im", "=", "util", ".", "util_img", ".", "imread_wrapper", "(", "\n", "v", ",", "util", ".", "util_img", ".", "IMREAD_UNCHANGED", ",", "\n", "output_channel_order", "=", "'RGB'", ")", "\n", "# Normalize to [0, 1] floats", "\n", "im", "=", "im", ".", "astype", "(", "float", ")", "/", "float", "(", "np", ".", "iinfo", "(", "im", ".", "dtype", ")", ".", "max", ")", "\n", "sample_loaded", "[", "k", "[", ":", "-", "5", "]", "]", "=", "im", "\n", "", "elif", "v", ".", "endswith", "(", "'.npy'", ")", ":", "\n", "                    ", "if", "v", ".", "endswith", "(", "'_azimuth.npy'", ")", ":", "\n", "                        ", "sample_loaded", "[", "'azimuth'", "]", "=", "real2prob", "(", "np", ".", "load", "(", "v", ")", ",", "2", "*", "np", ".", "pi", ",", "24", ",", "True", ")", "\n", "", "elif", "v", ".", "endswith", "(", "'_elevation.npy'", ")", ":", "\n", "                        ", "sample_loaded", "[", "'elevation'", "]", "=", "real2prob", "(", "np", ".", "load", "(", "v", ")", ",", "np", ".", "pi", ",", "12", ",", "False", ")", "\n", "", "elif", "v", ".", "endswith", "(", "'_voxel2renderer.npy'", ")", ":", "\n", "                        ", "sample_loaded", "[", "'voxel2renderer'", "]", "=", "np", ".", "load", "(", "v", ")", "\n", "", "elif", "v", ".", "endswith", "(", "'_renderer2voxel.npy'", ")", ":", "\n", "                        ", "sample_loaded", "[", "'renderer2voxel'", "]", "=", "np", ".", "load", "(", "v", ")", "\n", "", "elif", "v", ".", "endswith", "(", "'_kp.npy'", ")", ":", "\n", "                        ", "sample_loaded", "[", "'kp'", "]", "=", "np", ".", "load", "(", "v", ")", "\n", "", "else", ":", "\n", "# Right now .npy must be depth_minmax", "\n", "                        ", "sample_loaded", "[", "'depth_minmax'", "]", "=", "np", ".", "load", "(", "v", ")", "\n", "", "", "elif", "v", ".", "endswith", "(", "'_128.npz'", ")", ":", "\n", "                    ", "sample_loaded", "[", "'voxel'", "]", "=", "np", ".", "load", "(", "v", ")", "[", "'voxel'", "]", "[", "None", ",", "...", "]", "\n", "", "elif", "v", ".", "endswith", "(", "'_spherical.npz'", ")", ":", "\n", "                    ", "spherical_data", "=", "np", ".", "load", "(", "v", ")", "\n", "sample_loaded", "[", "'spherical_object'", "]", "=", "spherical_data", "[", "'obj_spherical'", "]", "[", "None", ",", "...", "]", "\n", "sample_loaded", "[", "'spherical_depth'", "]", "=", "spherical_data", "[", "'depth_spherical'", "]", "[", "None", ",", "...", "]", "\n", "", "elif", "v", ".", "endswith", "(", "'.mat'", ")", ":", "\n", "# Right now .mat must be voxel_canon", "\n", "                    ", "sample_loaded", "[", "'voxel_canon'", "]", "=", "loadmat", "(", "v", ")", "[", "'voxel'", "]", "[", "None", ",", "...", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "v", ")", "\n", "# Three identical channels for grayscale images", "\n", "", "", "", "if", "self", ".", "preproc", "is", "not", "None", ":", "\n", "            ", "sample_loaded", "=", "self", ".", "preproc", "(", "sample_loaded", ",", "mode", "=", "self", ".", "mode", ")", "\n", "# convert all types to float32 for better copy speed", "\n", "", "self", ".", "convert_to_float32", "(", "sample_loaded", ")", "\n", "return", "sample_loaded", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.Dataset.convert_to_float32": [[270, 276], ["sample_loaded.items", "isinstance", "v.astype"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "convert_to_float32", "(", "sample_loaded", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "sample_loaded", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "if", "v", ".", "dtype", "!=", "np", ".", "float32", ":", "\n", "                    ", "sample_loaded", "[", "k", "]", "=", "v", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.Dataset.__len__": [[277, 279], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.Dataset.get_classes": [[280, 282], ["None"], "methods", ["None"], ["", "def", "get_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_class_str", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.DatasetKp.__init__": [[285, 290], ["shapenet.Dataset.__init__", "os.path.exists", "s[].split"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "model_id", "=", "kwargs", "[", "'model_id'", "]", "\n", "del", "kwargs", "[", "'model_id'", "]", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "samples", "=", "[", "s", "for", "s", "in", "self", ".", "samples", "if", "os", ".", "path", ".", "exists", "(", "'/home/neil/disk/shapenet20views/03001627/{}/{}_kp.npy'", ".", "format", "(", "s", "[", "'item'", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ",", "s", "[", "'item'", "]", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.DatasetDemo.__init__": [[293, 298], ["shapenet.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "model_id", "=", "kwargs", "[", "'model_id'", "]", "\n", "del", "kwargs", "[", "'model_id'", "]", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "samples", "=", "[", "s", "for", "s", "in", "self", ".", "samples", "if", "model_id", "in", "s", "[", "'item'", "]", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.real2prob": [[11, 32], ["numpy.zeros", "math.floor", "shapenet.real2prob", "numpy.np.pi"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.real2prob"], ["def", "real2prob", "(", "val", ",", "max_val", ",", "num_bins", ",", "circular", "=", "False", ")", ":", "\n", "    ", "res", "=", "np", ".", "zeros", "(", "(", "num_bins", ",", ")", ")", "\n", "if", "val", ">=", "max_val", ":", "\n", "        ", "val", "-=", "1e-7", "\n", "assert", "val", "<", "max_val", "\n", "", "if", "not", "circular", ":", "\n", "        ", "interval", "=", "max_val", "/", "(", "num_bins", "-", "1", ")", "\n", "low", "=", "math", ".", "floor", "(", "val", "/", "interval", ")", "\n", "high", "=", "low", "+", "1", "\n", "assert", "low", ">=", "0", "and", "high", "<", "num_bins", "\n", "res", "[", "low", "]", "=", "1.", "-", "(", "val", "/", "interval", "-", "low", ")", "\n", "res", "[", "high", "]", "=", "1.", "-", "res", "[", "low", "]", "\n", "assert", "0", "<=", "res", "[", "low", "]", "<=", "1.", "\n", "return", "res", "\n", "", "else", ":", "\n", "        ", "interval", "=", "max_val", "/", "num_bins", "\n", "if", "val", "<", "interval", "/", "2", ":", "\n", "            ", "val", "+=", "max_val", "\n", "", "res", "=", "real2prob", "(", "val", "-", "interval", "/", "2", ",", "max_val", ",", "num_bins", "+", "1", ")", "\n", "res", "[", "0", "]", "+=", "res", "[", "-", "1", "]", "\n", "return", "res", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.shapenet.prob2real": [[33, 44], ["numpy.sum", "numpy.stack", "numpy.sum", "numpy.arctan2", "numpy.cos", "numpy.sin", "numpy.expand_dims", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "", "def", "prob2real", "(", "prob", ",", "max_val", ",", "num_bins", ",", "circular", "=", "False", ")", ":", "\n", "    ", "if", "not", "circular", ":", "\n", "        ", "return", "np", ".", "sum", "(", "prob", "*", "np", ".", "arange", "(", "num_bins", ")", "*", "max_val", "/", "(", "num_bins", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "interval", "=", "max_val", "/", "num_bins", "\n", "vecs", "=", "np", ".", "stack", "(", "[", "np", ".", "cos", "(", "np", ".", "arange", "(", "num_bins", ")", "*", "interval", "+", "interval", "/", "2", ")", ",", "np", ".", "sin", "(", "np", ".", "arange", "(", "num_bins", ")", "*", "interval", "+", "interval", "/", "2", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "res", "=", "np", ".", "sum", "(", "np", ".", "expand_dims", "(", "prob", ",", "axis", "=", "-", "1", ")", "*", "vecs", ",", "axis", "=", "0", ")", "\n", "res", "=", "np", ".", "arctan2", "(", "res", "[", "1", "]", ",", "res", "[", "0", "]", ")", "\n", "if", "res", "<", "0", ":", "\n", "            ", "res", "+=", "2", "*", "np", ".", "pi", "# remap to [0, 2pi]", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.__init__.get_dataset": [[4, 7], ["importlib.import_module", "alias.lower"], "function", ["None"], ["def", "get_dataset", "(", "alias", ")", ":", "\n", "    ", "dataset_module", "=", "importlib", ".", "import_module", "(", "'datasets.'", "+", "alias", ".", "lower", "(", ")", ")", "\n", "return", "dataset_module", ".", "Dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_loadlib.set_gpu": [[5, 15], ["util_loadlib._check_gpu", "util_loadlib._check_gpu_setting_in_use", "print"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_loadlib._check_gpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_loadlib._check_gpu_setting_in_use"], ["def", "set_gpu", "(", "gpu", ",", "check", "=", "True", ")", ":", "\n", "    ", "import", "os", "\n", "_check_gpu", "(", "gpu", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpu", "\n", "import", "torch", "\n", "import", "torch", ".", "backends", ".", "cudnn", "as", "cudnn", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "if", "check", ":", "\n", "        ", "if", "not", "_check_gpu_setting_in_use", "(", "gpu", ")", ":", "\n", "            ", "print", "(", "'[Warning] gpu setting overwritten. torch.cuda may be initialized before running this function.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_loadlib._check_gpu_setting_in_use": [[17, 27], ["subprocess.check_output", "output.decode().strip.decode().strip", "torch.cuda.device_count", "int", "output.decode().strip.decode"], "function", ["None"], ["", "", "", "def", "_check_gpu_setting_in_use", "(", "gpu", ")", ":", "\n", "    ", "'''\n    check that CUDA_VISIBLE_DEVICES is actually working\n    by starting a clean thread with the same CUDA_VISIBLE_DEVICES\n    '''", "\n", "import", "subprocess", "\n", "output", "=", "subprocess", ".", "check_output", "(", "'CUDA_VISIBLE_DEVICES=%s python -c \"import torch; print(torch.cuda.device_count())\"'", "%", "gpu", ",", "shell", "=", "True", ")", "\n", "output", "=", "output", ".", "decode", "(", ")", ".", "strip", "(", ")", "\n", "import", "torch", "\n", "return", "torch", ".", "cuda", ".", "device_count", "(", ")", "==", "int", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_loadlib._check_gpu": [[29, 45], ["subprocess.check_output", "msg.decode.decode", "msg.decode.split", "int", "int", "print", "x.strip", "print", "line.split"], "function", ["None"], ["", "def", "_check_gpu", "(", "gpu", ")", ":", "\n", "    ", "msg", "=", "subprocess", ".", "check_output", "(", "'nvidia-smi --query-gpu=index,utilization.gpu,memory.used --format=csv,nounits,noheader -i %s'", "%", "(", "gpu", ",", ")", ",", "shell", "=", "True", ")", "\n", "msg", "=", "msg", ".", "decode", "(", "'utf-8'", ")", "\n", "all_ok", "=", "True", "\n", "for", "line", "in", "msg", ".", "split", "(", "'\\n'", ")", ":", "\n", "        ", "if", "line", "==", "''", ":", "\n", "            ", "break", "\n", "", "stats", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "line", ".", "split", "(", "','", ")", "]", "\n", "gpu", "=", "stats", "[", "0", "]", "\n", "util", "=", "int", "(", "stats", "[", "1", "]", ")", "\n", "mem_used", "=", "int", "(", "stats", "[", "2", "]", ")", "\n", "if", "util", ">", "10", "or", "mem_used", ">", "1000", ":", "# util in percentage and mem_used in MiB", "\n", "            ", "print", "(", "str_warning", ",", "'Designated GPU in use: id=%s, util=%d%%, memory in use: %d MiB'", "%", "(", "gpu", ",", "util", ",", "mem_used", ")", ")", "\n", "all_ok", "=", "False", "\n", "", "", "if", "all_ok", ":", "\n", "        ", "print", "(", "str_verbose", ",", "'All designated GPU(s) free to use. '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_loadlib.set_manual_seed": [[47, 61], ["random.seed", "np.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "print", "print"], "function", ["None"], ["", "", "def", "set_manual_seed", "(", "seed", ")", ":", "\n", "    ", "import", "random", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "", "except", "ImportError", "as", "err", ":", "\n", "        ", "print", "(", "'Numpy not found. Random seed for numpy not set. '", ")", "\n", "", "try", ":", "\n", "        ", "import", "torch", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "", "except", "ImportError", "as", "err", ":", "\n", "        ", "print", "(", "'Pytorch not found. Random seed for pytorch not set. '", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.imread_wrapper": [[22, 51], ["output_channel_order.lower.lower", "cv2.imread"], "function", ["None"], ["def", "imread_wrapper", "(", "*", "args", ",", "output_channel_order", "=", "'RGB'", ")", ":", "\n", "    ", "\"\"\"\n    Convinience wrapper for cv2.imread() that can return result in RGB order\n\n    Args:\n        *args: Positional parameters that imread() takes\n            See documentation for cv2.imread()\n        output_channel_order: Whether to output RGB or BGR orders; has effects only when\n            number of channels is three or four (fourth being alpha)\n            'RGB' or 'BGR' (case-insensitive)\n            Optional; defaults to 'RGB'\n\n    Returns:\n        im: Loaded image\n            Numpy array of shape (m, n) or (m, n, c)\n    \"\"\"", "\n", "output_channel_order", "=", "output_channel_order", ".", "lower", "(", ")", "\n", "assert", "(", "(", "output_channel_order", "==", "'rgb'", ")", "or", "(", "output_channel_order", "==", "'bgr'", ")", ")", ",", "\"'output_channel_order' has to be either 'RGB' or 'BGR' (case-insensitive)\"", "\n", "\n", "im", "=", "cv2", ".", "imread", "(", "*", "args", ")", "\n", "assert", "(", "im", "is", "not", "None", ")", ",", "\"%s not existent\"", "%", "args", "[", "0", "]", "\n", "\n", "if", "(", "im", ".", "ndim", "==", "3", ")", "and", "(", "output_channel_order", "==", "'rgb'", ")", ":", "\n", "        ", "if", "im", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "elif", "im", ".", "shape", "[", "2", "]", "==", "4", ":", "# with alpha", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", ",", "3", "]", "]", "\n", "", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.depth_to_mesh_df": [[53, 91], ["numpy.where", "tsdf_renderer", "numpy.array", "numpy.array", "numpy.array", "tsdf_renderer.back_project_ptcloud", "numpy.zeros", "numpy.min", "numpy.max", "numpy.array", "numpy.ones", "numpy.floor().astype", "numpy.any", "numpy.floor", "numpy.abs", "numpy.random.rand"], "function", ["None"], ["", "def", "depth_to_mesh_df", "(", "depth_im", ",", "th", ",", "jitter", ",", "upsample", "=", "0.6", ",", "cam_dist", "=", "2.0", ")", ":", "\n", "    ", "from", "util", ".", "util_camera", "import", "tsdf_renderer", "\n", "depth", "=", "depth_im", "[", ":", ",", ":", ",", "0", "]", "\n", "mask", "=", "np", ".", "where", "(", "depth", "==", "0", ",", "-", "1.0", ",", "1.0", ")", "\n", "depth", "=", "1", "-", "depth", "\n", "t", "=", "tsdf_renderer", "(", ")", "\n", "thl", "=", "th", "[", "0", "]", "\n", "thh", "=", "th", "[", "1", "]", "\n", "if", "jitter", ":", "\n", "        ", "th", "=", "th", "+", "(", "np", ".", "random", ".", "rand", "(", "2", ")", "-", "0.5", ")", "*", "0.1", "\n", "thl", "=", "np", ".", "min", "(", "th", ")", "\n", "thh", "=", "np", ".", "max", "(", "th", ")", "\n", "", "scale", "=", "thh", "-", "thl", "\n", "depth", "=", "depth", "*", "scale", "\n", "t", ".", "depth", "=", "(", "depth", "+", "thl", ")", "*", "mask", "\n", "t", ".", "camera", ".", "focal_length", "=", "0.05", "\n", "t", ".", "camera", ".", "sensor_width", "=", "0.03059411708155671", "\n", "t", ".", "camera", ".", "position", "=", "np", ".", "array", "(", "[", "-", "cam_dist", ",", "0", ",", "0", "]", ")", "\n", "t", ".", "camera", ".", "res", "=", "[", "480", ",", "480", "]", "\n", "t", ".", "camera", ".", "rx", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "t", ".", "camera", ".", "ry", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", "\n", "t", ".", "camera", ".", "rz", "=", "-", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "t", ".", "back_project_ptcloud", "(", "upsample", "=", "upsample", ")", "\n", "tdf", "=", "np", ".", "ones", "(", "[", "128", ",", "128", ",", "128", "]", ")", "/", "128", "\n", "cnt", "=", "np", ".", "zeros", "(", "[", "128", ",", "128", ",", "128", "]", ")", "\n", "for", "pts", "in", "t", ".", "ptcld", ":", "\n", "        ", "pt", "=", "pts", "# np.array([-pts[2], -pts[0], pts[1]])", "\n", "ids", "=", "np", ".", "floor", "(", "(", "pt", "+", "0.5", ")", "*", "128", ")", ".", "astype", "(", "int", ")", "\n", "if", "np", ".", "any", "(", "np", ".", "abs", "(", "pt", ")", ">=", "0.5", ")", ":", "\n", "            ", "continue", "\n", "", "center", "=", "(", "(", "ids", "+", "0.5", ")", "*", "1", "/", "128", ")", "-", "0.5", "\n", "dist", "=", "(", "(", "center", "[", "0", "]", "-", "pt", "[", "0", "]", ")", "**", "2", "+", "(", "center", "[", "1", "]", "-", "pt", "[", "1", "]", ")", "\n", "**", "2", "+", "(", "center", "[", "2", "]", "-", "pt", "[", "2", "]", ")", "**", "2", ")", "**", "0.5", "\n", "n", "=", "cnt", "[", "ids", "[", "0", "]", ",", "ids", "[", "1", "]", ",", "ids", "[", "2", "]", "]", "\n", "tdf", "[", "ids", "[", "0", "]", ",", "ids", "[", "1", "]", ",", "ids", "[", "2", "]", "]", "=", "(", "\n", "tdf", "[", "ids", "[", "0", "]", ",", "ids", "[", "1", "]", ",", "ids", "[", "2", "]", "]", "*", "n", "+", "dist", ")", "/", "(", "n", "+", "1", ")", "\n", "cnt", "[", "ids", "[", "0", "]", ",", "ids", "[", "1", "]", ",", "ids", "[", "2", "]", "]", "+=", "1", "\n", "", "return", "tdf", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.imwrite_wrapper": [[93, 122], ["input_channel_order.lower.lower", "list", "tuple", "cv2.imwrite"], "function", ["None"], ["", "def", "imwrite_wrapper", "(", "*", "args", ",", "input_channel_order", "=", "'RGB'", ")", ":", "\n", "    ", "\"\"\"\n    Convinience wrapper for cv2.imwrite() that can write RGB image correctly\n\n    Args:\n        *args: Positional parameters that imwrite() takes\n            See documentation for cv2.imwrite()\n        input_channel_order: Whether the input is in RGB or BGR orders; has effects\n            only when number of channels is three or four (fourth being alpha)\n            'RGB' or 'BGR' (case-insensitive)\n            Optional; defaults to 'RGB'\n    \"\"\"", "\n", "input_channel_order", "=", "input_channel_order", ".", "lower", "(", ")", "\n", "assert", "(", "(", "input_channel_order", "==", "'rgb'", ")", "or", "(", "input_channel_order", "==", "'bgr'", ")", ")", ",", "\"'input_channel_order' has to be either 'RGB' or 'BGR' (case-insensitive)\"", "\n", "\n", "im", "=", "args", "[", "1", "]", "\n", "\n", "if", "(", "im", ".", "ndim", "==", "3", ")", "and", "(", "input_channel_order", "==", "'rgb'", ")", ":", "\n", "        ", "if", "im", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "elif", "im", ".", "shape", "[", "2", "]", "==", "4", ":", "# with alpha", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", ",", "3", "]", "]", "\n", "\n", "", "", "args_list", "=", "list", "(", "args", ")", "\n", "args_list", "[", "1", "]", "=", "im", "\n", "args_tuple", "=", "tuple", "(", "args_list", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "*", "args_tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.resize": [[124, 169], ["cv2.resize", "NotImplementedError", "ValueError"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.resize"], ["", "def", "resize", "(", "im", ",", "target_size", ",", "which_dim", ",", "interpolation", "=", "'bicubic'", ",", "clamp", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Resize one dimension of the image to a certain size while maintaining the aspect ratio\n\n    Args:\n        im: Image to resize\n            Any type that cv2.resize() accepts\n        target_size: Target horizontal or vertical dimension\n            Integer\n        which_dim: Which dimension to match target_size\n            'horizontal' or 'vertical'\n        interpolation: Interpolation method\n            'bicubic'\n            Optional; defaults to 'bicubic'\n        clamp: Clamp the resized image with minimum and maximum values\n            Array_likes of one smaller float and another larger float\n            Optional; defaults to None (no clamping)\n\n    Returns:\n        im_resized: Resized image\n            Numpy array with new horizontal and vertical dimensions\n    \"\"\"", "\n", "h", ",", "w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "interpolation", "==", "'bicubic'", ":", "\n", "        ", "interpolation", "=", "cv2", ".", "INTER_CUBIC", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "interpolation", ")", "\n", "\n", "", "if", "which_dim", "==", "'horizontal'", ":", "\n", "        ", "scale_factor", "=", "target_size", "/", "w", "\n", "", "elif", "which_dim", "==", "'vertical'", ":", "\n", "        ", "scale_factor", "=", "target_size", "/", "h", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "which_dim", ")", "\n", "\n", "", "im_resized", "=", "cv2", ".", "resize", "(", "im", ",", "None", ",", "fx", "=", "scale_factor", ",", "fy", "=", "scale_factor", ",", "\n", "interpolation", "=", "interpolation", ")", "\n", "\n", "if", "clamp", "is", "not", "None", ":", "\n", "        ", "min_val", ",", "max_val", "=", "clamp", "\n", "im_resized", "[", "im_resized", "<", "min_val", "]", "=", "min_val", "\n", "im_resized", "[", "im_resized", ">", "max_val", "]", "=", "max_val", "\n", "\n", "", "return", "im_resized", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.alpha_blend": [[171, 188], ["None"], "function", ["None"], ["", "def", "alpha_blend", "(", "im1", ",", "im2", ",", "alpha", ")", ":", "\n", "    ", "\"\"\"\n    Alpha blending of two images or one image and a scalar\n\n    Args:\n        im1, im2: Image or scalar\n            Numpy array and a scalar or two numpy arrays of the same shape\n        alpha: Weight of im1\n            Float ranging usually from 0 to 1\n\n    Returns:\n        im_blend: Blended image -- alpha * im1 + (1 - alpha) * im2\n            Numpy array of the same shape as input image\n    \"\"\"", "\n", "im_blend", "=", "alpha", "*", "im1", "+", "(", "1", "-", "alpha", ")", "*", "im2", "\n", "\n", "return", "im_blend", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.rgb2gray": [[190, 209], ["numpy.dstack"], "function", ["None"], ["", "def", "rgb2gray", "(", "rgb", ")", ":", "\n", "    ", "\"\"\"\n    Convert a RGB image to a grayscale image\n        Differences from cv2.cvtColor():\n            1. Input image can be float\n            2. Output image has three repeated channels, other than a single channel\n\n    Args:\n        rgb: Image in RGB format\n            Numpy array of shape (h, w, 3)\n\n    Returns:\n        gs: Grayscale image\n            Numpy array of the same shape as input; the three channels are the same\n    \"\"\"", "\n", "ch", "=", "0.299", "*", "rgb", "[", ":", ",", ":", ",", "0", "]", "+", "0.587", "*", "rgb", "[", ":", ",", ":", ",", "1", "]", "+", "0.114", "*", "rgb", "[", ":", ",", ":", ",", "2", "]", "\n", "gs", "=", "np", ".", "dstack", "(", "(", "ch", ",", "ch", ",", "ch", ")", ")", "\n", "\n", "return", "gs", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.adjust_image_attribute": [[211, 250], ["util_img.rgb2gray", "util_img.alpha_blend", "numpy.random.uniform", "numpy.mean", "util_img.alpha_blend", "util_img.alpha_blend", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.rgb2gray", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.alpha_blend", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.alpha_blend", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.alpha_blend"], ["", "def", "adjust_image_attribute", "(", "rgb", ",", "attr", ",", "d", ",", "random", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Adjust or randomize the specified attribute of the image\n\n    Args:\n        rgb: Image in RGB format\n            Numpy array of shape (h, w, 3)\n        attr: Image attribute to adjust or randomize\n            'brightness', 'saturation', or 'contrast'\n        d: If random, d must be positive, and alpha for blending is randomly drawn from\n            [1 - d, 1 + d]; else, alpha will be just 1 + d\n            Float\n        random: Whether to set or randomize the attribute\n            Boolean\n            Optional; defaults to False\n\n    Returns:\n        rgb_out: Output image in RGB format\n            Numpy array of the same shape as input\n    \"\"\"", "\n", "gs", "=", "rgb2gray", "(", "rgb", ")", "\n", "\n", "if", "random", ":", "\n", "        ", "assert", "(", "\n", "d", ">", "0", ")", ",", "\"'d' must be positive for range [1 - d, 1 + d] to be valid\"", "\n", "alpha", "=", "1", "+", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "d", ",", "high", "=", "d", ")", "\n", "", "else", ":", "\n", "        ", "alpha", "=", "1", "+", "d", "\n", "\n", "", "if", "attr", "==", "'contrast'", ":", "\n", "        ", "rgb_out", "=", "alpha_blend", "(", "rgb", ",", "np", ".", "mean", "(", "gs", "[", ":", ",", ":", ",", "0", "]", ")", ",", "alpha", ")", "\n", "", "elif", "attr", "==", "'saturation'", ":", "\n", "        ", "rgb_out", "=", "alpha_blend", "(", "rgb", ",", "gs", ",", "alpha", ")", "\n", "", "elif", "attr", "==", "'brightness'", ":", "\n", "        ", "rgb_out", "=", "alpha_blend", "(", "rgb", ",", "0", ",", "alpha", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "attr", ")", "\n", "\n", "", "return", "rgb_out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.jitter_colors": [[252, 280], ["numpy.array", "numpy.random.shuffle", "copy.deepcopy", "range", "util_img.adjust_image_attribute", "len"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.adjust_image_attribute"], ["", "def", "jitter_colors", "(", "rgb", ",", "d_brightness", "=", "0", ",", "d_contrast", "=", "0", ",", "d_saturation", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Color jittering by randomizing brightness, contrast and saturation, in random order\n\n    Args:\n        rgb: Image in RGB format\n            Numpy array of shape (h, w, 3)\n        d_brightness, d_contrast, d_saturation: Alpha for blending drawn from [1 - d, 1 + d]\n            Nonnegative float\n            Optional; defaults to 0, i.e., no randomization\n\n    Returns:\n        rgb_out: Color-jittered image in RGB format\n            Numpy array of the same shape as input\n    \"\"\"", "\n", "attrs", "=", "[", "'brightness'", ",", "'contrast'", ",", "'saturation'", "]", "\n", "ds", "=", "[", "d_brightness", ",", "d_contrast", ",", "d_saturation", "]", "\n", "\n", "# In random order", "\n", "ind", "=", "np", ".", "array", "(", "range", "(", "len", "(", "attrs", ")", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "ind", ")", "# in-place", "\n", "\n", "rgb_out", "=", "deepcopy", "(", "rgb", ")", "\n", "for", "idx", "in", "ind", ":", "\n", "        ", "rgb_out", "=", "adjust_image_attribute", "(", "\n", "rgb_out", ",", "attrs", "[", "idx", "]", ",", "ds", "[", "idx", "]", ",", "random", "=", "True", ")", "\n", "\n", "", "return", "rgb_out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.add_lighting_noise": [[282, 330], ["numpy.array", "numpy.array", "numpy.random.normal", "numpy.sum", "copy.deepcopy", "range", "numpy.multiply", "numpy.multiply", "numpy.tile", "numpy.tile"], "function", ["None"], ["", "def", "add_lighting_noise", "(", "rgb_0to1", ",", "\n", "alpha_std", ",", "\n", "eigvals", "=", "(", "0.2175", ",", "0.0188", ",", "0.0045", ")", ",", "\n", "eigvecs", "=", "(", "(", "-", "0.5675", ",", "0.7192", ",", "0.4009", ")", ",", "\n", "(", "-", "0.5808", ",", "-", "0.0045", ",", "-", "0.8140", ")", ",", "\n", "(", "-", "0.5836", ",", "-", "0.6948", ",", "0.4203", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    Add AlexNet-style PCA-based noise\n\n    Args:\n        rgb_0to1: Image in RGB format, normalized within [0, 1]; values can fall outside [0, 1] due to\n            some preceding processing, but eigenvalues/vectors should match the magnitude order\n            Numpy array of shape (h, w, 3)\n        alpha_std: Standard deviation of the Gaussian from which alpha is drawn\n            Positive float\n        eigvals, eigvecs: Eigenvalues and their eigenvectors\n            Array_likes of length 3 and shape (3, 3), respectively\n            Optional; default to results from AlexNet\n\n    Returns:\n        rgb_0to1_out: Output image in RGB format, with lighting noise added\n            Numpy array of the same shape as input\n    \"\"\"", "\n", "assert", "(", "rgb_0to1", ".", "dtype", ".", "name", "==", "\n", "'float64'", ")", ",", "\"Input image must be normalized and hence be float\"", "\n", "assert", "(", "alpha_std", ">", "0", ")", ",", "\"Standard deviation must be positive\"", "\n", "\n", "eigvals", "=", "np", ".", "array", "(", "eigvals", ")", "\n", "eigvecs", "=", "np", ".", "array", "(", "eigvecs", ")", "\n", "\n", "alpha", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0", ",", "scale", "=", "alpha_std", ",", "size", "=", "3", ")", "\n", "noise_rgb", "=", "np", ".", "sum", "(", "\n", "np", ".", "multiply", "(", "\n", "np", ".", "multiply", "(", "\n", "eigvecs", ",", "\n", "np", ".", "tile", "(", "alpha", ",", "(", "3", ",", "1", ")", ")", "\n", ")", ",", "\n", "np", ".", "tile", "(", "eigvals", ",", "(", "3", ",", "1", ")", ")", "\n", ")", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "\n", "rgb_0to1_out", "=", "deepcopy", "(", "rgb_0to1", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "rgb_0to1_out", "[", ":", ",", ":", ",", "i", "]", "+=", "noise_rgb", "[", "i", "]", "\n", "\n", "", "return", "rgb_0to1_out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.normalize_colors": [[332, 357], ["copy.deepcopy", "range"], "function", ["None"], ["", "def", "normalize_colors", "(", "rgb_0to1", ",", "mean_rgb", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std_rgb", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "    ", "\"\"\"\n    Normalize colors\n\n    Args:\n        rgb_0to1: Image in RGB format, normalized within [0, 1]; values can fall outside [0, 1] due to\n            some preceding processing, but mean and standard deviation should match the magnitude order\n            Numpy array of shape (h, w, 3)\n        mean_rgb, std_rgb: Mean and standard deviation for RGB channels\n            Array_likes of length 3\n            Optional; default to results computed from a random subset of ImageNet training images\n\n    Returns:\n        rgb_0to1_out: Output image in RGB format, with channels normalized\n            Numpy array of the same shape as input\n    \"\"\"", "\n", "assert", "(", "'float'", "in", "rgb_0to1", ".", "dtype", ".", "name", ")", ",", "\"Input image must be normalized and hence be float\"", "\n", "assert", "rgb_0to1", ".", "ndim", "==", "3", ",", "\"Nx3xHxW? This function was written for HxWx3\"", "\n", "\n", "rgb_0to1_out", "=", "deepcopy", "(", "rgb_0to1", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "rgb_0to1_out", "[", ":", ",", ":", ",", "i", "]", "=", "(", "\n", "rgb_0to1_out", "[", ":", ",", ":", ",", "i", "]", "-", "mean_rgb", "[", "i", "]", ")", "/", "std_rgb", "[", "i", "]", "\n", "\n", "", "return", "rgb_0to1_out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.denormalize_colors": [[359, 388], ["range", "range", "NotImplementedError"], "function", ["None"], ["", "def", "denormalize_colors", "(", "rgb_norm", ",", "mean_rgb", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std_rgb", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "    ", "\"\"\"\n    Denormalize colors\n\n    Args:\n        rgb_norm: Image in RGB format, normalized by normalize_colors()\n            Numpy array of shape (h, w, 3)\n        mean_rgb, std_rgb: Mean and standard deviation for RGB channels used\n            Array_likes of length 3\n            Optional; default to results computed from a random subset of ImageNet training images\n\n    Returns:\n        rgb_0to1_out: Output image in RGB format, with channels normalized\n            Numpy array of the same shape as input\n    \"\"\"", "\n", "assert", "(", "'float'", "in", "rgb_norm", ".", "dtype", ".", "name", ")", ",", "\"Input image must be color-normalized and hence be float\"", "\n", "\n", "if", "rgb_norm", ".", "ndim", "==", "3", ":", "\n", "# HxWx3", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "rgb_norm", "[", ":", ",", ":", ",", "i", "]", "=", "rgb_norm", "[", ":", ",", ":", ",", "i", "]", "*", "std_rgb", "[", "i", "]", "+", "mean_rgb", "[", "i", "]", "\n", "", "", "elif", "rgb_norm", ".", "ndim", "==", "4", ":", "\n", "# Nx3xHxW", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "rgb_norm", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "rgb_norm", "[", ":", ",", "i", ",", ":", ",", ":", "]", "*", "std_rgb", "[", "i", "]", "+", "mean_rgb", "[", "i", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "rgb_norm", ".", "ndim", ")", "\n", "\n", "", "return", "rgb_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.binarize": [[390, 419], ["numpy.logical_not", "copy.deepcopy"], "function", ["None"], ["", "def", "binarize", "(", "im", ",", "thres", ",", "gt_is_1", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Binarize image\n\n    Args:\n        im: Image to binarize\n            Numpy array\n        thres: Threshold\n            Float\n        gt_is_1: Whether 1 is for \"greater than\" or \"less than or equal to\"\n            Boolean\n            Optional; defaults to True\n\n    Returns:\n        im_bin: Binarized image consisting of only 0's and 1's\n            Numpy array of the same shape as input\n    \"\"\"", "\n", "if", "gt_is_1", ":", "\n", "        ", "ind_for_1", "=", "im", ">", "thres", "\n", "", "else", ":", "\n", "        ", "ind_for_1", "=", "im", "<=", "thres", "\n", "\n", "", "ind_for_0", "=", "np", ".", "logical_not", "(", "ind_for_1", ")", "\n", "\n", "im_bin", "=", "deepcopy", "(", "im", ")", "\n", "im_bin", "[", "ind_for_1", "]", "=", "1", "\n", "im_bin", "[", "ind_for_0", "]", "=", "0", "\n", "\n", "return", "im_bin", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.get_bbox": [[421, 428], ["numpy.where", "numpy.min", "numpy.min", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "get_bbox", "(", "mask_0to1", ",", "th", "=", "0.95", ")", ":", "\n", "    ", "indh", ",", "indw", "=", "np", ".", "where", "(", "mask_0to1", ">", "th", ")", "\n", "tl_h", "=", "np", ".", "min", "(", "indh", ")", "\n", "tl_w", "=", "np", ".", "min", "(", "indw", ")", "\n", "br_h", "=", "np", ".", "max", "(", "indh", ")", "\n", "br_w", "=", "np", ".", "max", "(", "indw", ")", "\n", "return", "[", "tl_w", ",", "tl_h", ",", "br_w", ",", "br_h", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.crop": [[430, 481], ["int", "int", "int", "int", "cv2.resize", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.pad", "numpy.pad", "max"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.resize"], ["", "def", "crop", "(", "img", ",", "img_bbox", ",", "out_size", ",", "pad", ",", "pad_zero", "=", "True", ",", "kps", "=", "None", ")", ":", "\n", "    ", "y1", ",", "x1", ",", "y2", ",", "x2", "=", "img_bbox", "\n", "w", ",", "h", "=", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", "\n", "x_mid", "=", "(", "x1", "+", "x2", ")", "/", "2.", "\n", "y_mid", "=", "(", "y1", "+", "y2", ")", "/", "2.", "\n", "l", "=", "max", "(", "x2", "-", "x1", ",", "y2", "-", "y1", ")", "*", "out_size", "/", "(", "out_size", "-", "2.", "*", "pad", ")", "\n", "x1", "=", "int", "(", "np", ".", "round", "(", "x_mid", "-", "l", "/", "2.", ")", ")", "\n", "x2", "=", "int", "(", "np", ".", "round", "(", "x_mid", "+", "l", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "np", ".", "round", "(", "y_mid", "-", "l", "/", "2.", ")", ")", "\n", "y2", "=", "int", "(", "np", ".", "round", "(", "y_mid", "+", "l", "/", "2.", ")", ")", "\n", "if", "kps", "is", "not", "None", ":", "\n", "        ", "kps", "[", ":", ",", "0", "]", "=", "kps", "[", ":", ",", "0", "]", "-", "(", "y_mid", "-", "l", "/", "2.", ")", "\n", "kps", "[", ":", ",", "1", "]", "=", "kps", "[", ":", ",", "1", "]", "-", "(", "x_mid", "-", "l", "/", "2.", ")", "\n", "", "b_x", "=", "0", "\n", "if", "x1", "<", "0", ":", "\n", "        ", "b_x", "=", "-", "x1", "\n", "x1", "=", "0", "\n", "", "b_y", "=", "0", "\n", "if", "y1", "<", "0", ":", "\n", "        ", "b_y", "=", "-", "y1", "\n", "y1", "=", "0", "\n", "", "a_x", "=", "0", "\n", "if", "x2", ">=", "h", ":", "\n", "        ", "a_x", "=", "x2", "-", "(", "h", "-", "1", ")", "\n", "x2", "=", "h", "-", "1", "\n", "", "a_y", "=", "0", "\n", "if", "y2", ">=", "w", ":", "\n", "        ", "a_y", "=", "y2", "-", "(", "w", "-", "1", ")", "\n", "y2", "=", "w", "-", "1", "\n", "", "pad_style", "=", "{", "\n", "'mode'", ":", "'constant'", ",", "\n", "'constant_values'", ":", "0", "\n", "}", "if", "pad_zero", "else", "{", "\n", "'mode'", ":", "'edge'", "\n", "}", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img_crop", "=", "np", ".", "pad", "(", "\n", "img", "[", "x1", ":", "(", "x2", "+", "1", ")", ",", "y1", ":", "(", "y2", "+", "1", ")", "]", ",", "\n", "(", "(", "b_x", ",", "a_x", ")", ",", "(", "b_y", ",", "a_y", ")", ")", ",", "\n", "**", "pad_style", "\n", ")", "\n", "", "else", ":", "\n", "        ", "img_crop", "=", "np", ".", "pad", "(", "\n", "img", "[", "x1", ":", "(", "x2", "+", "1", ")", ",", "y1", ":", "(", "y2", "+", "1", ")", "]", ",", "\n", "(", "(", "b_x", ",", "a_x", ")", ",", "(", "b_y", ",", "a_y", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "**", "pad_style", "\n", ")", "\n", "", "if", "kps", "is", "not", "None", ":", "\n", "        ", "kps", "[", ":", ",", "0", "]", "=", "kps", "[", ":", ",", "0", "]", "*", "out_size", "/", "l", "\n", "kps", "[", ":", ",", "1", "]", "=", "kps", "[", ":", ",", "1", "]", "*", "out_size", "/", "l", "\n", "", "return", "cv2", ".", "resize", "(", "img_crop", ",", "(", "out_size", ",", "out_size", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_weight": [[38, 64], ["net.apply", "netinterface.NetInterface.net.apply", "hasattr", "torch.nn.init.normal_", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "methods", ["None"], ["def", "init_weight", "(", "self", ",", "net", "=", "None", ",", "init_type", "=", "'kaiming'", ",", "init_param", "=", "0.02", ")", ":", "\n", "        ", "\"\"\"\n        This is borrowed from Junyan\n        \"\"\"", "\n", "def", "init_func", "(", "m", ",", "init_type", "=", "init_type", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "                ", "if", "init_type", "==", "'normal'", ":", "\n", "                    ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "init_param", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                    ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_param", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                    ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orth'", ":", "\n", "                    ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_param", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "init_param", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "if", "net", "is", "not", "None", ":", "\n", "            ", "net", ".", "apply", "(", "init_func", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.add_arguments": [[65, 69], ["set"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "add_arguments", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "unique_params", "=", "set", "(", ")", "\n", "return", "parser", ",", "unique_params", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.__init__": [[70, 94], ["loggers._LogCumulator", "logger.add_logger", "netinterface.NetInterface.dict_grad_hook_factory", "x.mean", "x.std"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.add_logger", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.dict_grad_hook_factory"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ")", ":", "\n", "        ", "self", ".", "_internal_logger", "=", "_LogCumulator", "(", ")", "\n", "logger", ".", "add_logger", "(", "self", ".", "_internal_logger", ")", "\n", "assert", "opt", ".", "optim", "==", "'adam'", ",", "\"All projects here used adam\"", "\n", "self", ".", "adam", "=", "optim", ".", "Adam", "\n", "self", ".", "_logger", "=", "logger", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "full_logdir", "=", "opt", ".", "full_logdir", "\n", "self", ".", "grad_hook_gen", ",", "self", ".", "grad_stats", "=", "self", ".", "dict_grad_hook_factory", "(", "\n", "add_func", "=", "lambda", "x", ":", "{", "\n", "'mean'", ":", "x", ".", "mean", "(", ")", ",", "\n", "'std'", ":", "x", ".", "std", "(", ")", "\n", "}", "\n", ")", "\n", "self", ".", "_nets", "=", "[", "]", "\n", "self", ".", "_moveable_vars", "=", "[", "]", "\n", "self", ".", "_optimizers", "=", "[", "]", "\n", "self", ".", "batches_to_vis", "=", "{", "}", "\n", "self", ".", "input_names", "=", "[", "]", "\n", "self", ".", "_input", "=", "lambda", ":", "None", "\n", "self", ".", "gt_names", "=", "[", "]", "\n", "self", ".", "_gt", "=", "lambda", ":", "None", "\n", "self", ".", "aux_names", "=", "[", "]", "\n", "self", ".", "_aux", "=", "lambda", ":", "None", "# auxiliary tensors that need moving to GPU", "\n", "# Use cases include the one for D in WGAN", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_vars": [[96, 120], ["netinterface.NetInterface._moveable_vars.append", "setattr", "netinterface.NetInterface._moveable_vars.append", "setattr", "netinterface.NetInterface._moveable_vars.append", "netinterface.NetInterface._moveable_vars.append", "torch.FloatTensor", "torch.FloatTensor", "setattr", "torch.FloatTensor", "torch.FloatTensor", "setattr", "setattr", "torch.tensor().float", "torch.tensor().float", "setattr", "setattr", "torch.tensor().float", "torch.tensor().float", "torch.FloatTensor", "torch.FloatTensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "init_vars", "(", "self", ",", "add_path", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Also add stuff to movable_vars\n        \"\"\"", "\n", "for", "net", "in", "self", ".", "_nets", ":", "\n", "            ", "self", ".", "_moveable_vars", ".", "append", "(", "net", ")", "\n", "", "for", "name", "in", "self", ".", "input_names", ":", "\n", "            ", "setattr", "(", "self", ".", "_input", ",", "name", ",", "FloatTensor", "(", ")", ")", "\n", "self", ".", "_moveable_vars", ".", "append", "(", "'_input.'", "+", "name", ")", "\n", "if", "add_path", ":", "\n", "                ", "setattr", "(", "self", ".", "_input", ",", "name", "+", "'_path'", ",", "None", ")", "\n", "", "", "for", "name", "in", "self", ".", "gt_names", ":", "\n", "            ", "setattr", "(", "self", ".", "_gt", ",", "name", ",", "FloatTensor", "(", ")", ")", "\n", "self", ".", "_moveable_vars", ".", "append", "(", "'_gt.'", "+", "name", ")", "\n", "if", "add_path", ":", "\n", "                ", "setattr", "(", "self", ".", "_gt", ",", "name", "+", "'_path'", ",", "None", ")", "\n", "", "", "for", "name", "in", "self", ".", "aux_names", ":", "\n", "            ", "if", "name", "==", "'one'", ":", "\n", "                ", "setattr", "(", "self", ".", "_aux", ",", "name", ",", "tensor", "(", "1", ")", ".", "float", "(", ")", ")", "\n", "", "elif", "name", "==", "'neg_one'", ":", "\n", "                ", "setattr", "(", "self", ".", "_aux", ",", "name", ",", "tensor", "(", "-", "1", ")", ".", "float", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ".", "_aux", ",", "name", ",", "FloatTensor", "(", "[", "]", ")", ")", "\n", "", "self", ".", "_moveable_vars", ".", "append", "(", "'_aux.'", "+", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_batch": [[121, 141], ["batch.keys", "getattr", "getattr.copy_", "setattr", "batch.keys", "setattr", "getattr.resize_", "batch.keys", "getattr", "getattr.copy_", "setattr", "batch.keys", "setattr", "getattr.resize_"], "methods", ["None"], ["", "", "def", "load_batch", "(", "self", ",", "batch", ",", "include_gt", "=", "True", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "input_names", ":", "\n", "            ", "if", "name", "in", "batch", ".", "keys", "(", ")", ":", "\n", "                ", "var", "=", "getattr", "(", "self", ".", "_input", ",", "name", ")", "\n", "if", "var", ".", "shape", "!=", "batch", "[", "name", "]", ".", "shape", ":", "\n", "                    ", "var", ".", "resize_", "(", "batch", "[", "name", "]", ".", "shape", ")", "\n", "", "var", ".", "copy_", "(", "batch", "[", "name", "]", ")", "\n", "setattr", "(", "self", ".", "_input", ",", "name", ",", "var", ")", "\n", "", "if", "name", "+", "'_path'", "in", "batch", ".", "keys", "(", ")", ":", "\n", "                ", "setattr", "(", "self", ".", "_input", ",", "name", "+", "'_path'", ",", "batch", "[", "name", "+", "'_path'", "]", ")", "\n", "", "", "if", "include_gt", ":", "\n", "            ", "for", "name", "in", "self", ".", "gt_names", ":", "\n", "                ", "if", "name", "in", "batch", ".", "keys", "(", ")", ":", "\n", "                    ", "var", "=", "getattr", "(", "self", ".", "_gt", ",", "name", ")", "\n", "if", "var", ".", "shape", "!=", "batch", "[", "name", "]", ".", "shape", ":", "\n", "                        ", "var", ".", "resize_", "(", "batch", "[", "name", "]", ".", "shape", ")", "\n", "", "var", ".", "copy_", "(", "batch", "[", "name", "]", ")", "\n", "setattr", "(", "self", ".", "_gt", ",", "name", ",", "var", ")", "\n", "", "if", "name", "+", "'_path'", "in", "batch", ".", "keys", "(", ")", ":", "\n", "                    ", "setattr", "(", "self", ".", "_gt", ",", "name", "+", "'_path'", ",", "batch", "[", "name", "+", "'_path'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface._train_on_batch": [[142, 145], ["None"], "methods", ["None"], ["", "", "", "", "def", "_train_on_batch", "(", "self", ",", "epoch", ",", "batch_ind", ",", "dataloader_out", ")", ":", "\n", "        ", "\"\"\" function that trains the model over one batch and return batch_log (including size and loss) \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface._vali_on_batch": [[146, 149], ["None"], "methods", ["None"], ["", "def", "_vali_on_batch", "(", "self", ",", "epoch", ",", "batch_ind", ",", "dataloader_out", ")", ":", "\n", "        ", "\"\"\" function that trains the model over one batch and return batch_log (including size and loss) \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.test_on_batch": [[150, 152], ["None"], "methods", ["None"], ["", "def", "test_on_batch", "(", "self", ",", "batch_ind", ",", "dataloader_out", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.train_epoch": [[153, 285], ["len", "netinterface._get_num_samples", "logger.set_params", "logger.set_model", "logger.on_train_begin", "range", "logger.on_train_end", "min", "min", "len", "netinterface._get_num_samples", "netinterface.NetInterface.train", "logger.train", "iter", "logger.on_epoch_begin", "range", "netinterface.NetInterface._internal_logger.get_epoch_log", "logger.on_epoch_end", "netinterface.NetInterface.eval", "logger.eval", "iter", "logger.on_epoch_begin", "range", "netinterface.NetInterface._internal_logger.get_epoch_log", "logger.on_epoch_end", "netinterface.NetInterface.train_epoch._eval"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface._get_num_samples", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.set_params", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.set_model", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_train_begin", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_train_end", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface._get_num_samples", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.train", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.train", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_epoch_begin", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers._LogCumulator.get_epoch_log", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_epoch_end", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.eval", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.eval", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_epoch_begin", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers._LogCumulator.get_epoch_log", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.loggers.ComposeLogger.on_epoch_end"], ["", "def", "train_epoch", "(", "\n", "self", ",", "\n", "dataloader", ",", "\n", "*", ",", "\n", "dataloader_eval", "=", "None", ",", "\n", "max_batches_per_train", "=", "None", ",", "\n", "max_batches_per_eval", "=", "None", ",", "\n", "epochs", "=", "1", ",", "\n", "initial_epoch", "=", "1", ",", "\n", "verbose", "=", "1", ",", "\n", "reset_dataset", "=", "None", ",", "\n", "eval_at_start", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Train the model with given dataloader and run evaluation with the given dataloader_eval\n        max_batches_per_train: limit the number of batches for each epoch\n        reset_dataset: if the dataset needs to be reset for each training epoch,\n            define a reset() method in the dataset and provide it as this argument.\n            reset() will be called at the beginning of each epoch, and the procedure will\n            check for dataset size change and change accordingly.\n        \"\"\"", "\n", "logger", "=", "self", ".", "_logger", "\n", "# set logger params and number of batches in an epoch", "\n", "steps_per_epoch", "=", "len", "(", "dataloader", ")", "\n", "samples_per_epoch", "=", "_get_num_samples", "(", "dataloader", ")", "\n", "if", "max_batches_per_train", "is", "not", "None", ":", "\n", "            ", "steps_per_epoch", "=", "min", "(", "max_batches_per_train", ",", "steps_per_epoch", ")", "\n", "samples_per_epoch", "=", "min", "(", "samples_per_epoch", ",", "steps_per_epoch", "*", "dataloader", ".", "batch_sampler", ".", "batch_size", ")", "\n", "", "if", "dataloader_eval", "is", "not", "None", ":", "\n", "            ", "steps_per_eval", "=", "len", "(", "dataloader_eval", ")", "\n", "samples_per_eval", "=", "_get_num_samples", "(", "dataloader_eval", ")", "\n", "if", "max_batches_per_eval", "is", "not", "None", ":", "\n", "                ", "steps_per_eval", "=", "min", "(", "steps_per_eval", ",", "max_batches_per_eval", ")", "\n", "samples_per_eval", "=", "min", "(", "samples_per_eval", ",", "steps_per_eval", "*", "dataloader", ".", "batch_sampler", ".", "batch_size", ")", "\n", "", "", "else", ":", "\n", "            ", "steps_per_eval", "=", "0", "\n", "samples_per_eval", "=", "0", "\n", "", "logger", ".", "set_params", "(", "{", "\n", "'epochs'", ":", "epochs", "+", "initial_epoch", "-", "1", ",", "\n", "'steps'", ":", "steps_per_epoch", ",", "\n", "'steps_eval'", ":", "steps_per_eval", ",", "\n", "'samples'", ":", "samples_per_epoch", ",", "\n", "'samples_eval'", ":", "samples_per_eval", ",", "\n", "'verbose'", ":", "1", ",", "\n", "'metrics'", ":", "self", ".", "_metrics", ",", "\n", "}", ")", "\n", "logger", ".", "set_model", "(", "self", ")", "\n", "logger", ".", "on_train_begin", "(", ")", "\n", "dataset_size", "=", "0", "# monitor if dataset size change due to reset_dataset.reset(). update steps_per_epoch if needed", "\n", "\n", "# define train closure", "\n", "def", "_train", "(", "epoch", ")", ":", "\n", "            ", "nonlocal", "dataset_size", "\n", "nonlocal", "steps_per_epoch", "\n", "nonlocal", "samples_per_epoch", "\n", "nonlocal", "steps_per_eval", "\n", "nonlocal", "samples_per_eval", "\n", "self", ".", "train", "(", ")", "\n", "logger", ".", "train", "(", ")", "\n", "if", "reset_dataset", "is", "not", "None", ":", "\n", "                ", "reset_dataset", ".", "reset", "(", ")", "\n", "# reset steps if necessary", "\n", "if", "dataset_size", "!=", "len", "(", "reset_dataset", ")", ":", "\n", "                    ", "steps_per_epoch", "=", "len", "(", "dataloader", ")", "\n", "samples_per_epoch", "=", "_get_num_samples", "(", "dataloader", ")", "\n", "if", "max_batches_per_train", "is", "not", "None", ":", "\n", "                        ", "steps_per_epoch", "=", "min", "(", "max_batches_per_train", ",", "steps_per_epoch", ")", "\n", "samples_per_epoch", "=", "min", "(", "samples_per_epoch", ",", "steps_per_epoch", "*", "dataloader", ".", "batch_sampler", ".", "batch_size", ")", "\n", "", "if", "dataloader_eval", "is", "not", "None", ":", "\n", "                        ", "steps_per_eval", "=", "len", "(", "dataloader_eval", ")", "\n", "samples_per_eval", "=", "_get_num_samples", "(", "dataloader_eval", ")", "\n", "if", "max_batches_per_eval", "is", "not", "None", ":", "\n", "                            ", "steps_per_eval", "=", "min", "(", "steps_per_eval", ",", "max_batches_per_eval", ")", "\n", "samples_per_eval", "=", "min", "(", "samples_per_eval", ",", "steps_per_eval", "*", "dataloader", ".", "batch_sampler", ".", "batch_size", ")", "\n", "", "", "logger", ".", "set_params", "(", "{", "\n", "'epochs'", ":", "epochs", "+", "initial_epoch", "-", "1", ",", "\n", "'steps'", ":", "steps_per_epoch", ",", "\n", "'steps_eval'", ":", "steps_per_eval", ",", "\n", "'samples'", ":", "samples_per_epoch", ",", "\n", "'samples_eval'", ":", "samples_per_eval", ",", "\n", "'verbose'", ":", "1", ",", "\n", "'metrics'", ":", "self", ".", "_metrics", ",", "\n", "}", ")", "\n", "dataset_size", "=", "len", "(", "reset_dataset", ")", "\n", "\n", "", "", "dataiter", "=", "iter", "(", "dataloader", ")", "\n", "logger", ".", "on_epoch_begin", "(", "epoch", ")", "\n", "for", "i", "in", "range", "(", "steps_per_epoch", ")", ":", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "data", "=", "next", "(", "dataiter", ")", "\n", "data_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logger", ".", "on_batch_begin", "(", "i", ")", "\n", "batch_log", "=", "self", ".", "_train_on_batch", "(", "epoch", ",", "i", ",", "data", ")", "\n", "batch_log", "[", "'batch'", "]", "=", "i", "\n", "batch_log", "[", "'epoch'", "]", "=", "epoch", "\n", "batch_log", "[", "'data_time'", "]", "=", "data_time", "\n", "batch_log", "[", "'batch_time'", "]", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logger", ".", "on_batch_end", "(", "i", ",", "batch_log", ")", "\n", "", "epoch_log", "=", "self", ".", "_internal_logger", ".", "get_epoch_log", "(", ")", "\n", "logger", ".", "on_epoch_end", "(", "epoch", ",", "epoch_log", ")", "\n", "\n", "# define eval closure", "\n", "", "def", "_eval", "(", "epoch", ")", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "logger", ".", "eval", "(", ")", "\n", "dataiter", "=", "iter", "(", "dataloader_eval", ")", "\n", "logger", ".", "on_epoch_begin", "(", "epoch", ")", "\n", "for", "i", "in", "range", "(", "steps_per_eval", ")", ":", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "data", "=", "next", "(", "dataiter", ")", "\n", "data_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logger", ".", "on_batch_begin", "(", "i", ")", "\n", "batch_log", "=", "self", ".", "_vali_on_batch", "(", "epoch", ",", "i", ",", "data", ")", "\n", "batch_log", "[", "'batch'", "]", "=", "i", "\n", "batch_log", "[", "'epoch'", "]", "=", "epoch", "\n", "batch_log", "[", "'data_time'", "]", "=", "data_time", "\n", "batch_log", "[", "'batch_time'", "]", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logger", ".", "on_batch_end", "(", "i", ",", "batch_log", ")", "\n", "", "epoch_log", "=", "self", ".", "_internal_logger", ".", "get_epoch_log", "(", ")", "\n", "logger", ".", "on_epoch_end", "(", "epoch", ",", "epoch_log", ")", "\n", "\n", "# run actual training", "\n", "", "if", "eval_at_start", ":", "\n", "            ", "if", "dataloader_eval", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'eval_at_beginning is set to True but no eval data is given.'", ")", "\n", "", "_eval", "(", "initial_epoch", "-", "1", ")", "\n", "", "for", "epoch", "in", "range", "(", "initial_epoch", ",", "initial_epoch", "+", "epochs", ")", ":", "\n", "            ", "_train", "(", "epoch", ")", "\n", "if", "dataloader_eval", "is", "not", "None", ":", "\n", "                ", "_eval", "(", "epoch", ")", "\n", "", "gc", ".", "collect", "(", ")", "\n", "\n", "", "logger", ".", "on_train_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.circular_grad_hook_factory": [[286, 324], ["CircularList", "add_func", "CircularList.append", "iter", "str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "circular_grad_hook_factory", "(", "num_to_keep", ",", "add_func", "=", "lambda", "x", ":", "x", ")", ":", "\n", "        ", "class", "CircularList", "(", "object", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "num", ")", ":", "\n", "                ", "self", ".", "vals", "=", "[", "None", "]", "*", "num", "\n", "self", ".", "ncyc", "=", "0", "\n", "self", ".", "c", "=", "0", "\n", "self", ".", "n", "=", "num", "\n", "\n", "", "def", "append", "(", "self", ",", "value", ")", ":", "\n", "                ", "self", ".", "vals", "[", "self", ".", "c", "]", "=", "value", "\n", "self", ".", "c", "+=", "1", "\n", "if", "self", ".", "c", "==", "self", ".", "n", ":", "\n", "                    ", "self", ".", "c", "=", "0", "\n", "self", ".", "ncyc", "+=", "1", "\n", "\n", "", "", "def", "full", "(", "self", ")", ":", "\n", "                ", "return", "self", ".", "c", "==", "0", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "                ", "return", "iter", "(", "self", ".", "vals", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "                ", "return", "self", ".", "n", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "                ", "assert", "index", "<", "self", ".", "n", "\n", "return", "self", ".", "vals", "[", "index", "]", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "                ", "return", "str", "(", "self", ".", "vals", ")", "\n", "\n", "", "", "saved_grads", "=", "CircularList", "(", "num_to_keep", ")", "\n", "\n", "def", "grad_hook", "(", "grad", ")", ":", "\n", "            ", "saved_tensor", "=", "add_func", "(", "grad", ")", "\n", "saved_grads", ".", "append", "(", "saved_tensor", ")", "\n", "", "return", "grad_hook", ",", "saved_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.dict_grad_hook_factory": [[325, 336], ["dict", "add_func"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "dict_grad_hook_factory", "(", "add_func", "=", "lambda", "x", ":", "x", ")", ":", "\n", "        ", "saved_dict", "=", "dict", "(", ")", "\n", "\n", "def", "hook_gen", "(", "name", ")", ":", "\n", "            ", "def", "grad_hook", "(", "grad", ")", ":", "\n", "                ", "saved_vals", "=", "add_func", "(", "grad", ")", "\n", "saved_dict", "[", "name", "]", "=", "saved_vals", "\n", "", "return", "grad_hook", "\n", "\n", "", "return", "hook_gen", ",", "saved_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict": [[337, 348], ["getattr", "netinterface.NetInterface.load_batch", "getattr.", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "getattr."], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_batch"], ["", "def", "predict", "(", "self", ",", "batch", ",", "net", "=", "'net'", ",", "load_gt", "=", "True", ",", "no_grad", "=", "False", ")", ":", "\n", "        ", "net", "=", "getattr", "(", "self", ",", "net", ")", "\n", "self", ".", "load_batch", "(", "batch", ",", "include_gt", "=", "load_gt", ")", "\n", "if", "no_grad", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "net", "(", "self", ".", "_input", ")", "# a structure", "\n", "# How to extract data and then forward them", "\n", "# should be dealt with in model file", "\n", "", "", "else", ":", "\n", "            ", "pred", "=", "net", "(", "self", ".", "_input", ")", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.train": [[349, 352], ["m.train"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.train"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "_nets", ":", "\n", "            ", "m", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.eval": [[353, 356], ["m.eval"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.eval"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "_nets", ":", "\n", "            ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.num_parameters": [[357, 365], ["list", "sum", "list", "list.append", "net.parameters", "sum", "x.numel"], "methods", ["None"], ["", "", "def", "num_parameters", "(", "self", ",", "return_list", "=", "False", ")", ":", "\n", "        ", "nparams_list", "=", "list", "(", ")", "\n", "for", "net", "in", "self", ".", "_nets", ":", "\n", "            ", "parameters", "=", "list", "(", "net", ".", "parameters", "(", ")", ")", "\n", "nparams_list", ".", "append", "(", "sum", "(", "[", "x", ".", "numel", "(", ")", "for", "x", "in", "parameters", "]", ")", ")", "\n", "", "if", "return_list", ":", "\n", "            ", "return", "nparams_list", "\n", "", "return", "sum", "(", "nparams_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda": [[366, 377], ["isinstance", "v.cuda", "v.split", "getattr", "setattr", "setattr", "getattr", "getattr", "getattr.cuda", "getattr().cuda", "getattr"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "for", "v", "in", "self", ".", "_moveable_vars", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                ", "if", "'.'", "in", "v", ":", "\n", "                    ", "var_type", ",", "var_name", "=", "v", ".", "split", "(", "'.'", ")", "\n", "var", "=", "getattr", "(", "getattr", "(", "self", ",", "var_type", ")", ",", "var_name", ")", "\n", "setattr", "(", "getattr", "(", "self", ",", "var_type", ")", ",", "var_name", ",", "var", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "setattr", "(", "self", ",", "v", ",", "getattr", "(", "self", ",", "v", ")", ".", "cuda", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "v", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu": [[378, 389], ["isinstance", "v.cpu", "v.split", "getattr", "setattr", "setattr", "getattr", "getattr", "getattr.cpu", "getattr().cpu", "getattr"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu"], ["", "", "", "def", "cpu", "(", "self", ")", ":", "\n", "        ", "for", "v", "in", "self", ".", "_moveable_vars", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                ", "if", "'.'", "in", "v", ":", "\n", "                    ", "var_type", ",", "var_name", "=", "v", ".", "split", "(", "'.'", ")", "\n", "var", "=", "getattr", "(", "getattr", "(", "self", ",", "var_type", ")", ",", "var_name", ")", "\n", "setattr", "(", "getattr", "(", "self", ",", "var_type", ")", ",", "var_name", ",", "var", ".", "cpu", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "setattr", "(", "self", ",", "v", ",", "getattr", "(", "self", ",", "v", ")", ".", "cpu", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "v", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.to": [[390, 401], ["isinstance", "v.to", "v.split", "getattr", "setattr", "setattr", "getattr", "getattr", "getattr.to", "getattr().to", "getattr"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.to", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.to", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.to"], ["", "", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "v", "in", "self", ".", "_moveable_vars", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                ", "if", "'.'", "in", "v", ":", "\n", "                    ", "var_type", ",", "var_name", "=", "v", ".", "split", "(", "'.'", ")", "\n", "var", "=", "getattr", "(", "getattr", "(", "self", ",", "var_type", ")", ",", "var_name", ")", "\n", "setattr", "(", "getattr", "(", "self", ",", "var_type", ")", ",", "var_name", ",", "var", ".", "to", "(", "device", ")", ")", "\n", "", "else", ":", "\n", "                    ", "setattr", "(", "self", ",", "v", ",", "getattr", "(", "self", ",", "v", ")", ".", "to", "(", "device", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "v", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.save_state_dict": [[402, 410], ["dict", "additional_values.items", "torch.save", "torch.save", "torch.save", "torch.save", "net.state_dict", "optimizer.state_dict"], "methods", ["None"], ["", "", "", "def", "save_state_dict", "(", "self", ",", "filepath", ",", "*", ",", "save_optimizer", "=", "False", ",", "additional_values", "=", "{", "}", ")", ":", "\n", "        ", "state_dicts", "=", "dict", "(", ")", "\n", "state_dicts", "[", "'nets'", "]", "=", "[", "net", ".", "state_dict", "(", ")", "for", "net", "in", "self", ".", "_nets", "]", "\n", "if", "save_optimizer", ":", "\n", "            ", "state_dicts", "[", "'optimizers'", "]", "=", "[", "optimizer", ".", "state_dict", "(", ")", "for", "optimizer", "in", "self", ".", "_optimizers", "]", "\n", "", "for", "k", ",", "v", "in", "additional_values", ".", "items", "(", ")", ":", "\n", "            ", "state_dicts", "[", "k", "]", "=", "v", "\n", "", "torch", ".", "save", "(", "state_dicts", ",", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_state_dict": [[411, 434], ["torch.load", "torch.load", "torch.load", "torch.load", "range", "len", "len", "len", "netinterface.NetInterface._nets[].load_state_dict", "range", "print", "len", "len", "len", "netinterface.optimizer_load_state_dict", "torch.load.items", "torch.load.items"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_state_dict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.optimizer_load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "filepath", ",", "*", ",", "load_optimizer", "=", "'auto'", ")", ":", "\n", "        ", "state_dicts", "=", "torch", ".", "load", "(", "filepath", ")", "\n", "\n", "if", "load_optimizer", "==", "'auto'", ":", "\n", "            ", "load_optimizer", "=", "(", "'optimizers'", "in", "state_dicts", ")", "\n", "if", "not", "load_optimizer", ":", "\n", "                ", "print", "(", "str_warning", ",", "'Model loaded without optimizer states. '", ")", "\n", "\n", "", "", "assert", "len", "(", "self", ".", "_nets", ")", "==", "len", "(", "state_dicts", "[", "'nets'", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_nets", ")", ")", ":", "\n", "            ", "self", ".", "_nets", "[", "i", "]", ".", "load_state_dict", "(", "state_dicts", "[", "'nets'", "]", "[", "i", "]", ")", "\n", "\n", "", "if", "load_optimizer", ":", "\n", "            ", "assert", "len", "(", "self", ".", "_optimizers", ")", "==", "len", "(", "state_dicts", "[", "'optimizers'", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_optimizers", ")", ")", ":", "\n", "                ", "optimizer", "=", "self", ".", "_optimizers", "[", "i", "]", "\n", "state", "=", "state_dicts", "[", "'optimizers'", "]", "[", "i", "]", "\n", "\n", "# load optimizer state without overwriting training hyper-parameters, e.g. lr", "\n", "optimizer_load_state_dict", "(", "optimizer", ",", "state", ",", "keep_training_params", "=", "True", ")", "\n", "\n", "", "", "additional_values", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dicts", ".", "items", "(", ")", "if", "k", "not", "in", "(", "'optimizers'", ",", "'nets'", ")", "}", "\n", "return", "additional_values", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface._get_num_samples": [[12, 19], ["len", "len"], "function", ["None"], ["def", "_get_num_samples", "(", "dataloader", ")", ":", "\n", "# import torch.utils.data.sampler as samplers", "\n", "    ", "batch_sampler", "=", "dataloader", ".", "batch_sampler", "\n", "if", "batch_sampler", ".", "drop_last", ":", "\n", "        ", "return", "len", "(", "batch_sampler", ".", "sampler", ")", "//", "batch_sampler", ".", "batch_size", "*", "batch_sampler", ".", "batch_size", "\n", "", "return", "len", "(", "batch_sampler", ".", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.optimizer_load_state_dict": [[436, 446], ["optimizer.load_state_dict", "optimizer.state_dict", "zip", "len", "len", "oldg.items"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_state_dict"], ["", "", "def", "optimizer_load_state_dict", "(", "optimizer", ",", "state", ",", "keep_training_params", "=", "False", ")", ":", "\n", "    ", "if", "keep_training_params", ":", "\n", "        ", "oldstate", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "assert", "len", "(", "oldstate", "[", "'param_groups'", "]", ")", "==", "len", "(", "state", "[", "'param_groups'", "]", ")", "\n", "# use oldstate to override this state", "\n", "for", "oldg", ",", "g", "in", "zip", "(", "oldstate", "[", "'param_groups'", "]", ",", "state", "[", "'param_groups'", "]", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "oldg", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "!=", "'params'", ":", "# parameter id not overwriten", "\n", "                    ", "g", "[", "k", "]", "=", "v", "\n", "", "", "", "", "optimizer", ".", "load_state_dict", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.top_n_err": [[448, 456], ["output.detach().cpu().numpy.detach().cpu().numpy", "label.detach().cpu().numpy().reshape.detach().cpu().numpy().reshape", "output.detach().cpu().numpy.argsort", "list", "list.append", "output.detach().cpu().numpy.detach().cpu", "label.detach().cpu().numpy().reshape.detach().cpu().numpy", "output.detach().cpu().numpy.detach", "label.detach().cpu().numpy().reshape.detach().cpu", "label.detach().cpu().numpy().reshape.detach"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu"], ["", "def", "top_n_err", "(", "output", ",", "label", ",", "nlist", ")", ":", "\n", "    ", "output", "=", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label", "=", "label", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "idx_sort", "=", "output", ".", "argsort", "(", ")", "\n", "errlist", "=", "list", "(", ")", "\n", "for", "n", "in", "nlist", ":", "\n", "        ", "errlist", ".", "append", "(", "1", "-", "(", "idx_sort", "[", ":", ",", "-", "n", ":", "]", "-", "label", "==", "0", ")", ".", "any", "(", "1", ")", ".", "mean", "(", ")", ")", "\n", "", "return", "errlist", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.parse_optimizer_specific_params": [[458, 467], ["dict"], "function", ["None"], ["", "def", "parse_optimizer_specific_params", "(", "optimizer_name", ",", "opt", ")", ":", "\n", "    ", "optim_params", "=", "dict", "(", ")", "\n", "if", "optimizer_name", "==", "'adam'", ":", "\n", "        ", "optim_params", "[", "'betas'", "]", "=", "(", "opt", ".", "adam_beta1", ",", "opt", ".", "adam_beta2", ")", "\n", "", "elif", "optimizer_name", "==", "'sgd'", ":", "\n", "        ", "optim_params", "[", "'momentum'", "]", "=", "opt", ".", "sgd_momentum", "\n", "optim_params", "[", "'dampening'", "]", "=", "opt", ".", "sgd_dampening", "\n", "optim_params", "[", "'weight_decay'", "]", "=", "opt", ".", "sgd_wdecay", "\n", "", "return", "optim_params", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.data_parallel_decorator": [[469, 513], ["hasattr", "netinterface.._forward_worker", "torch.cuda.device_count", "torch.cuda.device_count", "hasattr", "ValueError", "list", "scatter_kwargs", "replicate", "parallel_apply", "gather", "range", "len"], "function", ["None"], ["", "def", "data_parallel_decorator", "(", "ModuleClass", ")", ":", "\n", "    ", "\"\"\"\n    A decorator for forward function to use multiGPU training\n    while maintaining network layout (and thus saved parameter\n    names).\n\n    Note: the way pytorch replicate a module only guarantees\n    that pytorch internal parameters, buffers and modules are\n    properly copied and set over devices. Any other class attributes\n    are copied in a shallow copy manner - any list, dictionary, etc.\n    that uses class attributes may not be set properly, and\n    will point to the original copy instead of the copied one\n    on the new GPU.\n    \"\"\"", "\n", "from", "torch", ".", "nn", ".", "parallel", ".", "scatter_gather", "import", "scatter_kwargs", ",", "gather", "\n", "from", "torch", ".", "nn", ".", "parallel", ".", "replicate", "import", "replicate", "\n", "from", "torch", ".", "nn", ".", "parallel", ".", "parallel_apply", "import", "parallel_apply", "\n", "assert", "not", "hasattr", "(", "ModuleClass", ",", "'_forward_worker'", ")", ",", "'data_parallel_decorator cannot be used on a class twice'", "\n", "ModuleClass", ".", "_forward_worker", "=", "ModuleClass", ".", "forward", "\n", "\n", "def", "wrapped", "(", "self", ",", "*", "inputs", ",", "**", "module_kwargs", ")", ":", "\n", "        ", "if", "(", "not", "hasattr", "(", "self", ",", "'_is_replica'", ")", ")", "and", "inputs", "[", "0", "]", ".", "is_cuda", ":", "\n", "            ", "device_count", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "inputs", "[", "0", "]", ".", "shape", "[", "0", "]", "%", "device_count", "!=", "0", ":", "\n", "                ", "import", "os", "\n", "cuda_visible_devices", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", "else", "''", "\n", "raise", "ValueError", "(", "'batch size (%d) must be divisible by the number of GPUs (%d) used\\n CUDA_VISIBLE_DEVICES: %s'", "%", "(", "inputs", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "device_count", ",", "cuda_visible_devices", ")", ")", "\n", "", "if", "device_count", ">", "1", ":", "\n", "# modified from pytorch (torch.nn.parallel.DataParallel)", "\n", "                ", "device_ids", "=", "list", "(", "range", "(", "device_count", ")", ")", "\n", "output_device", "=", "device_ids", "[", "0", "]", "\n", "inputs", ",", "kwargs", "=", "scatter_kwargs", "(", "inputs", ",", "module_kwargs", ",", "device_ids", ")", "\n", "replicas", "=", "replicate", "(", "self", ",", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "\n", "# add a _is_replica flag to avoid infinite loop", "\n", "# from recursively calling parallel_apply", "\n", "for", "replica", "in", "replicas", ":", "\n", "                    ", "replica", ".", "_is_replica", "=", "True", "\n", "", "outputs", "=", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ")", "\n", "return", "gather", "(", "outputs", ",", "output_device", ")", "\n", "\n", "", "", "return", "self", ".", "_forward_worker", "(", "*", "inputs", ",", "**", "module_kwargs", ")", "\n", "", "ModuleClass", ".", "forward", "=", "wrapped", "\n", "return", "ModuleClass", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.print_grad_stats": [[515, 518], ["grad.detach", "print", "grad.detach.min().item", "grad.detach.max().item", "grad.detach.mean().item", "grad.detach.std().item", "grad.detach.min", "grad.detach.max", "grad.detach.mean", "grad.detach.std"], "function", ["None"], ["", "def", "print_grad_stats", "(", "grad", ")", ":", "\n", "    ", "grad_", "=", "grad", ".", "detach", "(", ")", "\n", "print", "(", "'\\nmin, max, mean, std: %e, %e, %e, %e'", "%", "(", "grad_", ".", "min", "(", ")", ".", "item", "(", ")", ",", "grad_", ".", "max", "(", ")", ".", "item", "(", ")", ",", "grad_", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "grad_", ".", "std", "(", ")", ".", "item", "(", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.viewpoint.Model.add_arguments": [[15, 23], ["parser.add_argument", "set"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "add_arguments", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "'--pred_depth_minmax'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Also predicts depth minmax (for GenRe)\"", ",", "\n", ")", "\n", "return", "parser", ",", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.viewpoint.Model.__init__": [[24, 52], ["marrnetbase.MarrnetBaseModel.__init__", "viewpoint.Net", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "viewpoint.Model.adam", "viewpoint.Model._optimizers.append", "viewpoint.Model.init_vars", "viewpoint.Model.init_weight", "viewpoint.Model.requires.append", "viewpoint.Model.net.parameters", "viewpoint.Model.gt_names.append", "viewpoint.Model._metrics.append"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_vars", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_weight"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", "opt", ",", "logger", ")", "\n", "self", ".", "requires", "=", "[", "'rgb'", ",", "'depth'", ",", "'silhou'", ",", "'normal'", ",", "'azimuth'", ",", "'elevation'", "]", "\n", "if", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "self", ".", "requires", ".", "append", "(", "'depth_minmax'", ")", "\n", "", "self", ".", "net", "=", "Net", "(", "\n", "[", "3", ",", "1", ",", "1", "]", ",", "\n", "[", "'normal'", ",", "'depth'", ",", "'silhou'", "]", ",", "\n", "pred_depth_minmax", "=", "opt", ".", "pred_depth_minmax", ",", "\n", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "functional", ".", "mse_loss", "\n", "self", ".", "kldiv", "=", "nn", ".", "KLDivLoss", "(", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "adam", "(", "\n", "self", ".", "net", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "\n", "**", "self", ".", "optim_params", "\n", ")", "\n", "self", ".", "_nets", "=", "[", "self", ".", "net", "]", "\n", "self", ".", "_optimizers", ".", "append", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "input_names", "=", "[", "'rgb'", "]", "\n", "self", ".", "gt_names", "=", "[", "'depth'", ",", "'silhou'", ",", "'normal'", ",", "'azimuth'", ",", "'elevation'", "]", "\n", "if", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "self", ".", "gt_names", ".", "append", "(", "'depth_minmax'", ")", "\n", "", "self", ".", "init_vars", "(", "add_path", "=", "True", ")", "\n", "self", ".", "_metrics", "=", "[", "'loss'", ",", "'depth'", ",", "'silhou'", ",", "'normal'", ",", "'azimuth'", ",", "'elevation'", "]", "\n", "if", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "self", ".", "_metrics", ".", "append", "(", "'depth_minmax'", ")", "\n", "", "self", ".", "init_weight", "(", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.viewpoint.Model.__str__": [[53, 55], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"MarrNet-3 predicting 2.5D sketches and azimuth/elevation\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.viewpoint.Model._train_on_batch": [[56, 65], ["viewpoint.Model.net.zero_grad", "viewpoint.Model.predict", "viewpoint.Model.compute_loss", "loss.backward", "viewpoint.Model.optimizer.step", "len"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.compute_loss"], ["", "def", "_train_on_batch", "(", "self", ",", "epoch", ",", "batch_idx", ",", "batch", ")", ":", "\n", "        ", "self", ".", "net", ".", "zero_grad", "(", ")", "\n", "pred", "=", "self", ".", "predict", "(", "batch", ")", "\n", "loss", ",", "loss_data", "=", "self", ".", "compute_loss", "(", "pred", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "batch_size", "=", "len", "(", "batch", "[", "'rgb_path'", "]", ")", "\n", "batch_log", "=", "{", "'size'", ":", "batch_size", ",", "**", "loss_data", "}", "\n", "return", "batch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.viewpoint.Model._vali_on_batch": [[66, 79], ["viewpoint.Model.predict", "viewpoint.Model.compute_loss", "len", "numpy.mod", "os.path.join", "os.makedirs", "viewpoint.Model.pack_output", "viewpoint.Model.visualizer.visualize"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.compute_loss", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.pack_output"], ["", "def", "_vali_on_batch", "(", "self", ",", "epoch", ",", "batch_idx", ",", "batch", ")", ":", "\n", "        ", "pred", "=", "self", ".", "predict", "(", "batch", ",", "no_grad", "=", "True", ")", "\n", "_", ",", "loss_data", "=", "self", ".", "compute_loss", "(", "pred", ")", "\n", "if", "np", ".", "mod", "(", "epoch", ",", "self", ".", "opt", ".", "vis_every_vali", ")", "==", "0", ":", "\n", "            ", "if", "batch_idx", "<", "self", ".", "opt", ".", "vis_batches_vali", ":", "\n", "                ", "outdir", "=", "join", "(", "self", ".", "full_logdir", ",", "'epoch%04d_vali'", "%", "epoch", ")", "\n", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "output", "=", "self", ".", "pack_output", "(", "pred", ",", "batch", ")", "\n", "self", ".", "visualizer", ".", "visualize", "(", "output", ",", "batch_idx", ",", "outdir", ")", "\n", "# np.savez(join(outdir, 'batch%04d' % batch_idx), **output)", "\n", "", "", "batch_size", "=", "len", "(", "batch", "[", "'rgb_path'", "]", ")", "\n", "batch_log", "=", "{", "'size'", ":", "batch_size", ",", "**", "loss_data", "}", "\n", "return", "batch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.viewpoint.Model.pack_output": [[80, 113], ["pred[].detach().cpu", "pred[].detach().cpu", "pred[].detach().cpu", "pred[].detach().cpu", "pred[].detach().cpu", "viewpoint.Model.postprocess", "viewpoint.Model.postprocess().numpy", "viewpoint.Model.postprocess().numpy", "viewpoint.Model.postprocess", "viewpoint.Model.numpy", "pred[].detach", "viewpoint.Model.to_abs_depth", "viewpoint.Model.proj_depth().cpu().numpy", "pred[].detach.cpu().numpy", "pred[].detach().cpu.numpy", "pred[].detach().cpu.numpy", "pred[].detach", "pred[].detach", "pred[].detach", "pred[].detach", "pred[].detach", "viewpoint.Model.postprocess", "viewpoint.Model.postprocess", "batch[].numpy", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "viewpoint.Model.proj_depth().cpu", "pred[].detach.cpu", "viewpoint.Model.proj_depth"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.to_abs_depth", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu"], ["", "def", "pack_output", "(", "self", ",", "pred", ",", "batch", ",", "add_gt", "=", "True", ")", ":", "\n", "        ", "pred_normal", "=", "pred", "[", "'normal'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "pred_silhou", "=", "pred", "[", "'silhou'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "pred_depth", "=", "pred", "[", "'depth'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "pred_azimuth", "=", "pred", "[", "'azimuth'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "pred_elevation", "=", "pred", "[", "'elevation'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "gt_silhou", "=", "self", ".", "postprocess", "(", "batch", "[", "'silhou'", "]", ")", "\n", "out", "=", "{", "}", "\n", "out", "[", "'rgb_path'", "]", "=", "batch", "[", "'rgb_path'", "]", "\n", "out", "[", "'pred_normal'", "]", "=", "self", ".", "postprocess", "(", "pred_normal", ",", "bg", "=", "1.0", ",", "input_mask", "=", "gt_silhou", ")", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_silhou'", "]", "=", "self", ".", "postprocess", "(", "pred_silhou", ")", ".", "numpy", "(", ")", "\n", "pred_depth", "=", "self", ".", "postprocess", "(", "pred_depth", ",", "bg", "=", "0.0", ",", "input_mask", "=", "gt_silhou", ")", "\n", "out", "[", "'pred_depth'", "]", "=", "pred_depth", ".", "numpy", "(", ")", "\n", "if", "self", ".", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "pred_depth_minmax", "=", "pred", "[", "'depth_minmax'", "]", ".", "detach", "(", ")", "\n", "pred_abs_depth", "=", "self", ".", "to_abs_depth", "(", "\n", "(", "1", "-", "pred_depth", ")", ".", "to", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", ",", "\n", "pred_depth_minmax", "\n", ")", "# background is max now", "\n", "pred_abs_depth", "[", "gt_silhou", "<", "1", "]", "=", "0", "# set background to 0", "\n", "out", "[", "'proj_depth'", "]", "=", "self", ".", "proj_depth", "(", "pred_abs_depth", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_depth_minmax'", "]", "=", "pred_depth_minmax", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_azimuth'", "]", "=", "pred_azimuth", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_elevation'", "]", "=", "pred_elevation", ".", "numpy", "(", ")", "\n", "", "if", "add_gt", ":", "\n", "            ", "out", "[", "'normal_path'", "]", "=", "batch", "[", "'normal_path'", "]", "\n", "out", "[", "'silhou_path'", "]", "=", "batch", "[", "'silhou_path'", "]", "\n", "out", "[", "'depth_path'", "]", "=", "batch", "[", "'depth_path'", "]", "\n", "out", "[", "'azimuth_path'", "]", "=", "batch", "[", "'azimuth_path'", "]", "\n", "out", "[", "'elevation_path'", "]", "=", "batch", "[", "'elevation_path'", "]", "\n", "if", "self", ".", "opt", ".", "pred_depth_minmax", ":", "\n", "                ", "out", "[", "'gt_depth_minmax'", "]", "=", "batch", "[", "'depth_minmax'", "]", ".", "numpy", "(", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.viewpoint.Model.compute_loss": [[114, 150], ["is_fg.expand_as", "viewpoint.Model.criterion", "viewpoint.Model.criterion", "viewpoint.Model.criterion", "loss.mean().item", "viewpoint.Model.mean().item", "viewpoint.Model.mean().item", "viewpoint.Model.mean().item", "loss_azimuth.mean().item", "loss_elevation.mean().item", "viewpoint.Model.kldiv", "viewpoint.Model.kldiv", "loss_depth_minmax.mean().item", "loss.mean", "viewpoint.Model.mean", "viewpoint.Model.mean", "viewpoint.Model.mean", "loss_azimuth.mean", "loss_elevation.mean", "viewpoint.Model.criterion", "loss_depth_minmax.mean"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "pred", ")", ":", "\n", "        ", "pred_normal", "=", "pred", "[", "'normal'", "]", "\n", "pred_depth", "=", "pred", "[", "'depth'", "]", "\n", "pred_silhou", "=", "pred", "[", "'silhou'", "]", "\n", "is_fg", "=", "self", ".", "_gt", ".", "silhou", "!=", "0", "# excludes background", "\n", "is_fg_full", "=", "is_fg", ".", "expand_as", "(", "pred_normal", ")", "\n", "loss_normal", "=", "self", ".", "criterion", "(", "\n", "pred_normal", "[", "is_fg_full", "]", ",", "self", ".", "_gt", ".", "normal", "[", "is_fg_full", "]", "\n", ")", "\n", "loss_depth", "=", "self", ".", "criterion", "(", "\n", "pred_depth", "[", "is_fg", "]", ",", "self", ".", "_gt", ".", "depth", "[", "is_fg", "]", "\n", ")", "\n", "loss_silhou", "=", "self", ".", "criterion", "(", "pred_silhou", ",", "self", ".", "_gt", ".", "silhou", ")", "\n", "\n", "w", "=", "(", "256", "**", "2", ")", "/", "2", "\n", "loss_azimuth", "=", "w", "*", "self", ".", "kldiv", "(", "pred", "[", "'azimuth'", "]", ",", "self", ".", "_gt", ".", "azimuth", ")", "\n", "loss_elevation", "=", "w", "*", "self", ".", "kldiv", "(", "pred", "[", "'elevation'", "]", ",", "self", ".", "_gt", ".", "elevation", ")", "\n", "# pdb.set_trace()", "\n", "loss", "=", "loss_normal", "+", "loss_depth", "+", "loss_silhou", "+", "loss_azimuth", "+", "loss_elevation", "\n", "loss_data", "=", "{", "}", "\n", "loss_data", "[", "'loss'", "]", "=", "loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'normal'", "]", "=", "loss_normal", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'depth'", "]", "=", "loss_depth", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'silhou'", "]", "=", "loss_silhou", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'azimuth'", "]", "=", "loss_azimuth", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'elevation'", "]", "=", "loss_elevation", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "self", ".", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "w_minmax", "=", "(", "256", "**", "2", ")", "/", "2", "# matching scale of pixel predictions very roughly", "\n", "loss_depth_minmax", "=", "w_minmax", "*", "self", ".", "criterion", "(", "\n", "pred", "[", "'depth_minmax'", "]", ",", "\n", "self", ".", "_gt", ".", "depth_minmax", "\n", ")", "\n", "loss", "+=", "loss_depth_minmax", "\n", "loss_data", "[", "'depth_minmax'", "]", "=", "loss_depth_minmax", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "return", "loss", ",", "loss_data", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.viewpoint.Net.__init__": [[153, 180], ["networks.uresnet.Net.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.networks.ViewAsLinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.networks.ViewAsLinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "pred_depth_minmax", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "pred_depth_minmax", "=", "pred_depth_minmax", "\n", "if", "self", ".", "pred_depth_minmax", ":", "\n", "            ", "self", ".", "decoder_minmax", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "4", ",", "stride", "=", "1", ")", ",", "\n", "ViewAsLinear", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "128", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", ")", "\n", "", "self", ".", "decoder_azimuth_elevation", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "4", ",", "stride", "=", "1", ")", ",", "\n", "ViewAsLinear", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "128", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "24", "+", "12", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.viewpoint.Net.forward": [[182, 191], ["super().forward", "viewpoint.Net.decoder_azimuth_elevation", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "viewpoint.Net.decoder_minmax"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.forward"], ["", "def", "forward", "(", "self", ",", "input_struct", ")", ":", "\n", "        ", "x", "=", "input_struct", ".", "rgb", "\n", "out_dict", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "out", "=", "self", ".", "decoder_azimuth_elevation", "(", "self", ".", "encoder_out", ")", "\n", "out_dict", "[", "'azimuth'", "]", "=", "F", ".", "log_softmax", "(", "out", "[", "...", ",", ":", "24", "]", ",", "dim", "=", "-", "1", ")", "\n", "out_dict", "[", "'elevation'", "]", "=", "F", ".", "log_softmax", "(", "out", "[", "...", ",", "24", ":", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "pred_depth_minmax", ":", "\n", "            ", "out_dict", "[", "'depth_minmax'", "]", "=", "self", ".", "decoder_minmax", "(", "self", ".", "encoder_out", ")", "\n", "", "return", "out_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.dense_embedding.STN3d.__init__": [[11, 26], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STN3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "9", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.dense_embedding.STN3d.forward": [[28, 46], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dense_embedding.STN3d.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "dense_embedding.STN3d.bn1", "dense_embedding.STN3d.bn2", "dense_embedding.STN3d.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "dense_embedding.STN3d.bn4", "dense_embedding.STN3d.bn5", "iden.cuda.cuda.cuda", "dense_embedding.STN3d.conv1", "dense_embedding.STN3d.conv2", "dense_embedding.STN3d.conv3", "dense_embedding.STN3d.fc1", "dense_embedding.STN3d.fc2", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array().astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "view", "(", "1", ",", "9", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.dense_embedding.STNkd.__init__": [[49, 66], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "64", ")", ":", "\n", "        ", "super", "(", "STNkd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "k", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "k", "*", "k", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.dense_embedding.STNkd.forward": [[67, 85], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dense_embedding.STNkd.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "dense_embedding.STNkd.bn1", "dense_embedding.STNkd.bn2", "dense_embedding.STNkd.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "dense_embedding.STNkd.bn4", "dense_embedding.STNkd.bn5", "iden.cuda.cuda.cuda", "dense_embedding.STNkd.conv1", "dense_embedding.STNkd.conv2", "dense_embedding.STNkd.conv3", "dense_embedding.STNkd.fc1", "dense_embedding.STNkd.fc2", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.eye().flatten().astype", "numpy.eye().flatten", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "eye", "(", "self", ".", "k", ")", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "view", "(", "1", ",", "self", ".", "k", "*", "self", ".", "k", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "k", ",", "self", ".", "k", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.dense_embedding.PointNetfeat.__init__": [[89, 102], ["torch.Module.__init__", "dense_embedding.STN3d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "dense_embedding.STNkd"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_feat", "=", "True", ",", "feature_transform", "=", "False", ")", ":", "\n", "        ", "super", "(", "PointNetfeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stn", "=", "STN3d", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "global_feat", "=", "global_feat", "\n", "self", ".", "feature_transform", "=", "feature_transform", "\n", "if", "self", ".", "feature_transform", ":", "\n", "            ", "self", ".", "fstn", "=", "STNkd", "(", "k", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.dense_embedding.PointNetfeat.forward": [[103, 129], ["dense_embedding.PointNetfeat.stn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dense_embedding.PointNetfeat.bn3", "x.view().repeat.view().repeat.view", "x.view().repeat.view().repeat.size", "dense_embedding.PointNetfeat.bn1", "dense_embedding.PointNetfeat.fstn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "dense_embedding.PointNetfeat.bn2", "dense_embedding.PointNetfeat.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view().repeat.view().repeat.view().repeat", "dense_embedding.PointNetfeat.conv1", "dense_embedding.PointNetfeat.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.view"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "trans", "=", "self", ".", "stn", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "trans", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "if", "self", ".", "feature_transform", ":", "\n", "            ", "trans_feat", "=", "self", ".", "fstn", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "trans_feat", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "trans_feat", "=", "None", "\n", "\n", "", "pointfeat", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "if", "self", ".", "global_feat", ":", "\n", "            ", "return", "x", ",", "trans", ",", "trans_feat", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "n_pts", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "pointfeat", "]", ",", "1", ")", ",", "trans", ",", "trans_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.dense_embedding.PointNetDenseCls.__init__": [[132, 144], ["torch.Module.__init__", "dense_embedding.PointNetfeat", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "3", ",", "feature_transform", "=", "False", ")", ":", "\n", "        ", "super", "(", "PointNetDenseCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "feature_transform", "=", "feature_transform", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "False", ",", "feature_transform", "=", "feature_transform", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1088", ",", "512", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "256", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "64", ",", "1", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "self", ".", "k", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.dense_embedding.PointNetDenseCls.forward": [[145, 158], ["dense_embedding.PointNetDenseCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dense_embedding.PointNetDenseCls.bn3", "x.reshape.reshape.clone().transpose", "dense_embedding.PointNetDenseCls.conv4", "x.reshape.reshape.transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "x.reshape.reshape.reshape", "x.reshape.reshape.size", "x.reshape.reshape.size", "dense_embedding.PointNetDenseCls.bn1", "dense_embedding.PointNetDenseCls.bn2", "dense_embedding.PointNetDenseCls.conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.reshape.reshape.reshape", "dense_embedding.PointNetDenseCls.conv1", "dense_embedding.PointNetDenseCls.conv2", "x.reshape.reshape.clone"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.demo.softmax", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.demo.softmax", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.demo.softmax", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.demo.softmax", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.None.demo.softmax", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "x", ",", "trans", ",", "trans_feat", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "embedding", "=", "x", ".", "clone", "(", ")", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "self", ".", "conv4", "(", "F", ".", "relu", "(", "x", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "F", ".", "softmax", "(", "x", ".", "reshape", "(", "-", "1", ",", "self", ".", "k", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", ".", "reshape", "(", "batchsize", ",", "n_pts", ",", "self", ".", "k", ")", "\n", "return", "x", ",", "embedding", "#, trans, trans_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.dense_embedding.Model.__init__": [[160, 163], ["super().__init__", "dense_embedding.PointNetDenseCls"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "PointNetDenseCls", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.dense_embedding.Model.forward": [[164, 167], ["dense_embedding.Model.backbone", "pcd.cuda().transpose", "pcd.cuda"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda"], ["", "def", "forward", "(", "self", ",", "pcd", ")", ":", "\n", "        ", "out", ",", "embedding", "=", "self", ".", "backbone", "(", "pcd", ".", "cuda", "(", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "return", "embedding", "", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet1.Model.add_arguments": [[12, 20], ["parser.add_argument", "set"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "add_arguments", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "'--pred_depth_minmax'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Also predicts depth minmax (for GenRe)\"", ",", "\n", ")", "\n", "return", "parser", ",", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet1.Model.__init__": [[21, 48], ["marrnetbase.MarrnetBaseModel.__init__", "marrnet1.Net", "marrnet1.Model.adam", "marrnet1.Model._optimizers.append", "marrnet1.Model.init_vars", "marrnet1.Model.init_weight", "marrnet1.Model.requires.append", "marrnet1.Model.net.parameters", "marrnet1.Model.gt_names.append", "marrnet1.Model._metrics.append"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_vars", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_weight"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", "opt", ",", "logger", ")", "\n", "self", ".", "requires", "=", "[", "'rgb'", ",", "'depth'", ",", "'silhou'", ",", "'normal'", "]", "\n", "if", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "self", ".", "requires", ".", "append", "(", "'depth_minmax'", ")", "\n", "", "self", ".", "net", "=", "Net", "(", "\n", "[", "3", ",", "1", ",", "1", "]", ",", "\n", "[", "'normal'", ",", "'depth'", ",", "'silhou'", "]", ",", "\n", "pred_depth_minmax", "=", "opt", ".", "pred_depth_minmax", ",", "\n", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "functional", ".", "mse_loss", "\n", "self", ".", "optimizer", "=", "self", ".", "adam", "(", "\n", "self", ".", "net", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "\n", "**", "self", ".", "optim_params", "\n", ")", "\n", "self", ".", "_nets", "=", "[", "self", ".", "net", "]", "\n", "self", ".", "_optimizers", ".", "append", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "input_names", "=", "[", "'rgb'", "]", "\n", "self", ".", "gt_names", "=", "[", "'depth'", ",", "'silhou'", ",", "'normal'", "]", "\n", "if", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "self", ".", "gt_names", ".", "append", "(", "'depth_minmax'", ")", "\n", "", "self", ".", "init_vars", "(", "add_path", "=", "True", ")", "\n", "self", ".", "_metrics", "=", "[", "'loss'", ",", "'depth'", ",", "'silhou'", ",", "'normal'", "]", "\n", "if", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "self", ".", "_metrics", ".", "append", "(", "'depth_minmax'", ")", "\n", "", "self", ".", "init_weight", "(", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet1.Model.__str__": [[49, 51], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"MarrNet-1 predicting 2.5D sketches\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet1.Model._train_on_batch": [[52, 61], ["marrnet1.Model.net.zero_grad", "marrnet1.Model.predict", "marrnet1.Model.compute_loss", "loss.backward", "marrnet1.Model.optimizer.step", "len"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.compute_loss"], ["", "def", "_train_on_batch", "(", "self", ",", "epoch", ",", "batch_idx", ",", "batch", ")", ":", "\n", "        ", "self", ".", "net", ".", "zero_grad", "(", ")", "\n", "pred", "=", "self", ".", "predict", "(", "batch", ")", "\n", "loss", ",", "loss_data", "=", "self", ".", "compute_loss", "(", "pred", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "batch_size", "=", "len", "(", "batch", "[", "'rgb_path'", "]", ")", "\n", "batch_log", "=", "{", "'size'", ":", "batch_size", ",", "**", "loss_data", "}", "\n", "return", "batch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet1.Model._vali_on_batch": [[62, 75], ["marrnet1.Model.predict", "marrnet1.Model.compute_loss", "len", "numpy.mod", "os.path.join", "os.makedirs", "marrnet1.Model.pack_output", "marrnet1.Model.visualizer.visualize", "numpy.savez", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.compute_loss", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.pack_output"], ["", "def", "_vali_on_batch", "(", "self", ",", "epoch", ",", "batch_idx", ",", "batch", ")", ":", "\n", "        ", "pred", "=", "self", ".", "predict", "(", "batch", ",", "no_grad", "=", "True", ")", "\n", "_", ",", "loss_data", "=", "self", ".", "compute_loss", "(", "pred", ")", "\n", "if", "np", ".", "mod", "(", "epoch", ",", "self", ".", "opt", ".", "vis_every_vali", ")", "==", "0", ":", "\n", "            ", "if", "batch_idx", "<", "self", ".", "opt", ".", "vis_batches_vali", ":", "\n", "                ", "outdir", "=", "join", "(", "self", ".", "full_logdir", ",", "'epoch%04d_vali'", "%", "epoch", ")", "\n", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "output", "=", "self", ".", "pack_output", "(", "pred", ",", "batch", ")", "\n", "self", ".", "visualizer", ".", "visualize", "(", "output", ",", "batch_idx", ",", "outdir", ")", "\n", "np", ".", "savez", "(", "join", "(", "outdir", ",", "'batch%04d'", "%", "batch_idx", ")", ",", "**", "output", ")", "\n", "", "", "batch_size", "=", "len", "(", "batch", "[", "'rgb_path'", "]", ")", "\n", "batch_log", "=", "{", "'size'", ":", "batch_size", ",", "**", "loss_data", "}", "\n", "return", "batch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet1.Model.pack_output": [[76, 103], ["pred[].detach().cpu", "pred[].detach().cpu", "pred[].detach().cpu", "marrnet1.Model.postprocess", "marrnet1.Model.postprocess().numpy", "marrnet1.Model.postprocess().numpy", "marrnet1.Model.postprocess", "marrnet1.Model.numpy", "pred[].detach", "marrnet1.Model.to_abs_depth", "marrnet1.Model.proj_depth().cpu().numpy", "pred[].detach.cpu().numpy", "pred[].detach", "pred[].detach", "pred[].detach", "marrnet1.Model.postprocess", "marrnet1.Model.postprocess", "batch[].numpy", "torch.device", "torch.device", "torch.device", "torch.device", "marrnet1.Model.proj_depth().cpu", "pred[].detach.cpu", "marrnet1.Model.proj_depth"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.to_abs_depth", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu"], ["", "def", "pack_output", "(", "self", ",", "pred", ",", "batch", ",", "add_gt", "=", "True", ")", ":", "\n", "        ", "pred_normal", "=", "pred", "[", "'normal'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "pred_silhou", "=", "pred", "[", "'silhou'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "pred_depth", "=", "pred", "[", "'depth'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "gt_silhou", "=", "self", ".", "postprocess", "(", "batch", "[", "'silhou'", "]", ")", "\n", "out", "=", "{", "}", "\n", "out", "[", "'rgb_path'", "]", "=", "batch", "[", "'rgb_path'", "]", "\n", "out", "[", "'pred_normal'", "]", "=", "self", ".", "postprocess", "(", "pred_normal", ",", "bg", "=", "1.0", ",", "input_mask", "=", "gt_silhou", ")", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_silhou'", "]", "=", "self", ".", "postprocess", "(", "pred_silhou", ")", ".", "numpy", "(", ")", "\n", "pred_depth", "=", "self", ".", "postprocess", "(", "pred_depth", ",", "bg", "=", "0.0", ",", "input_mask", "=", "gt_silhou", ")", "\n", "out", "[", "'pred_depth'", "]", "=", "pred_depth", ".", "numpy", "(", ")", "\n", "if", "self", ".", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "pred_depth_minmax", "=", "pred", "[", "'depth_minmax'", "]", ".", "detach", "(", ")", "\n", "pred_abs_depth", "=", "self", ".", "to_abs_depth", "(", "\n", "(", "1", "-", "pred_depth", ")", ".", "to", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", ",", "\n", "pred_depth_minmax", "\n", ")", "# background is max now", "\n", "pred_abs_depth", "[", "gt_silhou", "<", "1", "]", "=", "0", "# set background to 0", "\n", "out", "[", "'proj_depth'", "]", "=", "self", ".", "proj_depth", "(", "pred_abs_depth", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_depth_minmax'", "]", "=", "pred_depth_minmax", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "add_gt", ":", "\n", "            ", "out", "[", "'normal_path'", "]", "=", "batch", "[", "'normal_path'", "]", "\n", "out", "[", "'silhou_path'", "]", "=", "batch", "[", "'silhou_path'", "]", "\n", "out", "[", "'depth_path'", "]", "=", "batch", "[", "'depth_path'", "]", "\n", "if", "self", ".", "opt", ".", "pred_depth_minmax", ":", "\n", "                ", "out", "[", "'gt_depth_minmax'", "]", "=", "batch", "[", "'depth_minmax'", "]", ".", "numpy", "(", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet1.Model.compute_loss": [[104, 135], ["is_fg.expand_as", "marrnet1.Model.criterion", "marrnet1.Model.criterion", "marrnet1.Model.criterion", "loss.mean().item", "marrnet1.Model.mean().item", "marrnet1.Model.mean().item", "marrnet1.Model.mean().item", "loss_depth_minmax.mean().item", "loss.mean", "marrnet1.Model.mean", "marrnet1.Model.mean", "marrnet1.Model.mean", "marrnet1.Model.criterion", "loss_depth_minmax.mean"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "pred", ")", ":", "\n", "        ", "\"\"\"\n        TODO: we should add normal and depth consistency loss here in the future.\n        \"\"\"", "\n", "pred_normal", "=", "pred", "[", "'normal'", "]", "\n", "pred_depth", "=", "pred", "[", "'depth'", "]", "\n", "pred_silhou", "=", "pred", "[", "'silhou'", "]", "\n", "is_fg", "=", "self", ".", "_gt", ".", "silhou", "!=", "0", "# excludes background", "\n", "is_fg_full", "=", "is_fg", ".", "expand_as", "(", "pred_normal", ")", "\n", "loss_normal", "=", "self", ".", "criterion", "(", "\n", "pred_normal", "[", "is_fg_full", "]", ",", "self", ".", "_gt", ".", "normal", "[", "is_fg_full", "]", "\n", ")", "\n", "loss_depth", "=", "self", ".", "criterion", "(", "\n", "pred_depth", "[", "is_fg", "]", ",", "self", ".", "_gt", ".", "depth", "[", "is_fg", "]", "\n", ")", "\n", "loss_silhou", "=", "self", ".", "criterion", "(", "pred_silhou", ",", "self", ".", "_gt", ".", "silhou", ")", "\n", "loss", "=", "loss_normal", "+", "loss_depth", "+", "loss_silhou", "\n", "loss_data", "=", "{", "}", "\n", "loss_data", "[", "'loss'", "]", "=", "loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'normal'", "]", "=", "loss_normal", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'depth'", "]", "=", "loss_depth", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'silhou'", "]", "=", "loss_silhou", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "if", "self", ".", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "w_minmax", "=", "(", "256", "**", "2", ")", "/", "2", "# matching scale of pixel predictions very roughly", "\n", "loss_depth_minmax", "=", "w_minmax", "*", "self", ".", "criterion", "(", "\n", "pred", "[", "'depth_minmax'", "]", ",", "\n", "self", ".", "_gt", ".", "depth_minmax", "\n", ")", "\n", "loss", "+=", "loss_depth_minmax", "\n", "loss_data", "[", "'depth_minmax'", "]", "=", "loss_depth_minmax", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "return", "loss", ",", "loss_data", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet1.Net.__init__": [[138, 155], ["networks.uresnet.Net.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.networks.ViewAsLinear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "pred_depth_minmax", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "pred_depth_minmax", "=", "pred_depth_minmax", "\n", "if", "self", ".", "pred_depth_minmax", ":", "\n", "            ", "module_list", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "4", ",", "stride", "=", "1", ")", ",", "\n", "ViewAsLinear", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "128", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", ")", "\n", "self", ".", "decoder_minmax", "=", "module_list", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet1.Net.forward": [[156, 162], ["super().forward", "marrnet1.Net.decoder_minmax"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.forward"], ["", "", "def", "forward", "(", "self", ",", "input_struct", ")", ":", "\n", "        ", "x", "=", "input_struct", ".", "rgb", "\n", "out_dict", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "pred_depth_minmax", ":", "\n", "            ", "out_dict", "[", "'depth_minmax'", "]", "=", "self", ".", "decoder_minmax", "(", "self", ".", "encoder_out", ")", "\n", "", "return", "out_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet2.Model.add_arguments": [[11, 19], ["parser.add_argument", "set"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "add_arguments", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "'--canon_sup'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Use canonical-pose voxels as supervision\"", "\n", ")", "\n", "return", "parser", ",", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet2.Model.__init__": [[20, 42], ["marrnetbase.MarrnetBaseModel.__init__", "marrnet2.Net", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "marrnet2.Model.adam", "marrnet2.Model._optimizers.append", "marrnet2.Model.init_vars", "marrnet2.Model.init_weight", "marrnet2.Model.net.parameters"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_vars", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_weight"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", "opt", ",", "logger", ")", "\n", "if", "opt", ".", "canon_sup", ":", "\n", "            ", "voxel_key", "=", "'voxel_canon'", "\n", "", "else", ":", "\n", "            ", "voxel_key", "=", "'voxel'", "\n", "", "self", ".", "voxel_key", "=", "voxel_key", "\n", "self", ".", "requires", "=", "[", "'rgb'", ",", "'depth'", ",", "'normal'", ",", "'silhou'", ",", "voxel_key", "]", "\n", "self", ".", "net", "=", "Net", "(", "4", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'elementwise_mean'", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "adam", "(", "\n", "self", ".", "net", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "\n", "**", "self", ".", "optim_params", "\n", ")", "\n", "self", ".", "_nets", "=", "[", "self", ".", "net", "]", "\n", "self", ".", "_optimizers", ".", "append", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "input_names", "=", "[", "'depth'", ",", "'normal'", ",", "'silhou'", "]", "\n", "self", ".", "gt_names", "=", "[", "voxel_key", "]", "\n", "self", ".", "init_vars", "(", "add_path", "=", "True", ")", "\n", "self", ".", "_metrics", "=", "[", "'loss'", "]", "\n", "self", ".", "init_weight", "(", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet2.Model.__str__": [[43, 45], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"MarrNet-2 predicting voxels from 2.5D sketches\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet2.Model._train_on_batch": [[46, 55], ["marrnet2.Model.net.zero_grad", "marrnet2.Model.predict", "marrnet2.Model.compute_loss", "loss.backward", "marrnet2.Model.optimizer.step", "len"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.compute_loss"], ["", "def", "_train_on_batch", "(", "self", ",", "epoch", ",", "batch_idx", ",", "batch", ")", ":", "\n", "        ", "self", ".", "net", ".", "zero_grad", "(", ")", "\n", "pred", "=", "self", ".", "predict", "(", "batch", ")", "\n", "loss", ",", "loss_data", "=", "self", ".", "compute_loss", "(", "pred", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "batch_size", "=", "len", "(", "batch", "[", "'rgb_path'", "]", ")", "\n", "batch_log", "=", "{", "'size'", ":", "batch_size", ",", "**", "loss_data", "}", "\n", "return", "batch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet2.Model._vali_on_batch": [[56, 69], ["marrnet2.Model.predict", "marrnet2.Model.compute_loss", "len", "numpy.mod", "os.path.join", "os.makedirs", "marrnet2.Model.pack_output", "marrnet2.Model.visualizer.visualize", "numpy.savez", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.compute_loss", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.pack_output"], ["", "def", "_vali_on_batch", "(", "self", ",", "epoch", ",", "batch_idx", ",", "batch", ")", ":", "\n", "        ", "pred", "=", "self", ".", "predict", "(", "batch", ",", "no_grad", "=", "True", ")", "\n", "_", ",", "loss_data", "=", "self", ".", "compute_loss", "(", "pred", ")", "\n", "if", "np", ".", "mod", "(", "epoch", ",", "self", ".", "opt", ".", "vis_every_vali", ")", "==", "0", ":", "\n", "            ", "if", "batch_idx", "<", "self", ".", "opt", ".", "vis_batches_vali", ":", "\n", "                ", "outdir", "=", "join", "(", "self", ".", "full_logdir", ",", "'epoch%04d_vali'", "%", "epoch", ")", "\n", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "output", "=", "self", ".", "pack_output", "(", "pred", ",", "batch", ")", "\n", "self", ".", "visualizer", ".", "visualize", "(", "output", ",", "batch_idx", ",", "outdir", ")", "\n", "np", ".", "savez", "(", "join", "(", "outdir", ",", "'batch%04d'", "%", "batch_idx", ")", ",", "**", "output", ")", "\n", "", "", "batch_size", "=", "len", "(", "batch", "[", "'rgb_path'", "]", ")", "\n", "batch_log", "=", "{", "'size'", ":", "batch_size", ",", "**", "loss_data", "}", "\n", "return", "batch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet2.Model.pack_output": [[70, 80], ["pred.detach().cpu().numpy", "batch[].numpy", "pred.detach().cpu", "pred.detach"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu"], ["", "def", "pack_output", "(", "self", ",", "pred", ",", "batch", ",", "add_gt", "=", "True", ")", ":", "\n", "        ", "out", "=", "{", "}", "\n", "out", "[", "'rgb_path'", "]", "=", "batch", "[", "'rgb_path'", "]", "\n", "out", "[", "'pred_voxel'", "]", "=", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "add_gt", ":", "\n", "            ", "out", "[", "'gt_voxel'", "]", "=", "batch", "[", "self", ".", "voxel_key", "]", ".", "numpy", "(", ")", "\n", "out", "[", "'normal_path'", "]", "=", "batch", "[", "'normal_path'", "]", "\n", "out", "[", "'depth_path'", "]", "=", "batch", "[", "'depth_path'", "]", "\n", "out", "[", "'silhou_path'", "]", "=", "batch", "[", "'silhou_path'", "]", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet2.Model.compute_loss": [[81, 86], ["marrnet2.Model.criterion", "marrnet2.Model.mean().item", "getattr", "marrnet2.Model.mean"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "pred", ")", ":", "\n", "        ", "loss", "=", "self", ".", "criterion", "(", "pred", ",", "getattr", "(", "self", ".", "_gt", ",", "self", ".", "voxel_key", ")", ")", "\n", "loss_data", "=", "{", "}", "\n", "loss_data", "[", "'loss'", "]", "=", "loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "return", "loss", ",", "loss_data", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet2.Net.__init__": [[93, 98], ["torch.Module.__init__", "networks.networks.ImageEncoder", "networks.networks.VoxelDecoder"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "encode_dims", "=", "200", ",", "silhou_thres", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "ImageEncoder", "(", "in_planes", ",", "encode_dims", "=", "encode_dims", ")", "\n", "self", ".", "decoder", "=", "VoxelDecoder", "(", "n_dims", "=", "encode_dims", ",", "nf", "=", "512", ")", "\n", "self", ".", "silhou_thres", "=", "silhou_thres", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnet2.Net.forward": [[99, 112], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "marrnet2.Net.encoder", "marrnet2.Net.decoder", "is_bg.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_struct", ")", ":", "\n", "        ", "depth", "=", "input_struct", ".", "depth", "\n", "normal", "=", "input_struct", ".", "normal", "\n", "silhou", "=", "input_struct", ".", "silhou", "\n", "# Mask", "\n", "is_bg", "=", "silhou", "<=", "self", ".", "silhou_thres", "\n", "depth", "[", "is_bg", "]", "=", "0", "\n", "normal", "[", "is_bg", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "]", "=", "0", "# NOTE: if old net2, set to white (100),", "\n", "x", "=", "torch", ".", "cat", "(", "(", "depth", ",", "normal", ")", ",", "1", ")", "# and swap depth and normal", "\n", "# Forward", "\n", "latent_vec", "=", "self", ".", "encoder", "(", "x", ")", "\n", "vox", "=", "self", ".", "decoder", "(", "latent_vec", ")", "\n", "return", "vox", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.pointnet.STN3d.__init__": [[11, 26], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STN3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "9", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.pointnet.STN3d.forward": [[28, 46], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.STN3d.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "pointnet.STN3d.bn1", "pointnet.STN3d.bn2", "pointnet.STN3d.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pointnet.STN3d.bn4", "pointnet.STN3d.bn5", "iden.cuda.cuda.cuda", "pointnet.STN3d.conv1", "pointnet.STN3d.conv2", "pointnet.STN3d.conv3", "pointnet.STN3d.fc1", "pointnet.STN3d.fc2", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array().astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "view", "(", "1", ",", "9", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.pointnet.STNkd.__init__": [[49, 66], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "64", ")", ":", "\n", "        ", "super", "(", "STNkd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "k", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "k", "*", "k", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.pointnet.STNkd.forward": [[67, 85], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.STNkd.fc3", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "torch.autograd.Variable().view().repeat", "x.view.view.view", "x.view.view.size", "pointnet.STNkd.bn1", "pointnet.STNkd.bn2", "pointnet.STNkd.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pointnet.STNkd.bn4", "pointnet.STNkd.bn5", "iden.cuda.cuda.cuda", "pointnet.STNkd.conv1", "pointnet.STNkd.conv2", "pointnet.STNkd.conv3", "pointnet.STNkd.fc1", "pointnet.STNkd.fc2", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.eye().flatten().astype", "numpy.eye().flatten", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "eye", "(", "self", ".", "k", ")", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "view", "(", "1", ",", "self", ".", "k", "*", "self", ".", "k", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "k", ",", "self", ".", "k", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.pointnet.PointNetfeat.__init__": [[88, 101], ["torch.Module.__init__", "pointnet.STN3d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "pointnet.STNkd"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "global_feat", "=", "True", ",", "feature_transform", "=", "False", ")", ":", "\n", "        ", "super", "(", "PointNetfeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stn", "=", "STN3d", "(", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "global_feat", "=", "global_feat", "\n", "self", ".", "feature_transform", "=", "feature_transform", "\n", "if", "self", ".", "feature_transform", ":", "\n", "            ", "self", ".", "fstn", "=", "STNkd", "(", "k", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.pointnet.PointNetfeat.forward": [[102, 128], ["pointnet.PointNetfeat.stn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.PointNetfeat.bn3", "x.view().repeat.view().repeat.view", "x.view().repeat.view().repeat.size", "pointnet.PointNetfeat.bn1", "pointnet.PointNetfeat.fstn", "x.view().repeat.view().repeat.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.view().repeat.view().repeat.transpose", "pointnet.PointNetfeat.bn2", "pointnet.PointNetfeat.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.view().repeat.view().repeat.view().repeat", "pointnet.PointNetfeat.conv1", "pointnet.PointNetfeat.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view().repeat.view().repeat.view"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n_pts", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "trans", "=", "self", ".", "stn", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "trans", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "if", "self", ".", "feature_transform", ":", "\n", "            ", "trans_feat", "=", "self", ".", "fstn", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "trans_feat", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "trans_feat", "=", "None", "\n", "\n", "", "pointfeat", "=", "x", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "if", "self", ".", "global_feat", ":", "\n", "            ", "return", "x", ",", "trans", ",", "trans_feat", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "n_pts", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "pointfeat", "]", ",", "1", ")", ",", "trans", ",", "trans_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.pointnet.PointNetCls.__init__": [[131, 144], ["torch.Module.__init__", "pointnet.PointNetfeat", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "2", ",", "feature_transform", "=", "False", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "PointNetCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "feature_transform", "=", "feature_transform", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "True", ",", "feature_transform", "=", "feature_transform", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "k", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.3", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.pointnet.PointNetCls.forward": [[145, 152], ["pointnet.PointNetCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.PointNetCls.fc3().reshape", "pointnet.PointNetCls.bn1", "pointnet.PointNetCls.bn2", "int", "pointnet.PointNetCls.fc1", "pointnet.PointNetCls.dropout", "pointnet.PointNetCls.fc3", "pointnet.PointNetCls.fc2"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.dropout"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "trans", ",", "trans_feat", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "dropout", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", ".", "reshape", "(", "-", "1", ",", "int", "(", "self", ".", "cfg", "[", "'num_cls'", "]", ")", ",", "3", ")", "\n", "# return F.log_softmax(x, dim=1), trans, trans_feat", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.pointnet.PointNetDenseCls.__init__": [[155, 165], ["torch.Module.__init__", "pointnet.PointNetfeat", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_transform", "=", "False", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "PointNetDenseCls", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_transform", "=", "feature_transform", "\n", "self", ".", "feat", "=", "PointNetfeat", "(", "global_feat", "=", "False", ",", "feature_transform", "=", "feature_transform", ")", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1088", ",", "512", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "256", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "256", ",", "cfg", "[", "'emb_dims'", "]", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "cfg", "[", "'emb_dims'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.pointnet.PointNetDenseCls.forward": [[166, 172], ["pointnet.PointNetDenseCls.feat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "pointnet.PointNetDenseCls.bn3", "pointnet.PointNetDenseCls.transpose", "pointnet.PointNetDenseCls.bn1", "pointnet.PointNetDenseCls.bn2", "pointnet.PointNetDenseCls.conv3", "pointnet.PointNetDenseCls.conv1", "pointnet.PointNetDenseCls.conv2"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "trans", ",", "trans_feat", "=", "self", ".", "feat", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.pointnet.feature_transform_reguliarzer": [[174, 182], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "trans.size", "trans.size", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "I.cuda.cuda", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "trans.transpose"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda"], ["", "", "def", "feature_transform_reguliarzer", "(", "trans", ")", ":", "\n", "    ", "d", "=", "trans", ".", "size", "(", ")", "[", "1", "]", "\n", "batchsize", "=", "trans", ".", "size", "(", ")", "[", "0", "]", "\n", "I", "=", "torch", ".", "eye", "(", "d", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "if", "trans", ".", "is_cuda", ":", "\n", "        ", "I", "=", "I", ".", "cuda", "(", ")", "\n", "", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "torch", ".", "bmm", "(", "trans", ",", "trans", ".", "transpose", "(", "2", ",", "1", ")", "-", "I", ")", ",", "dim", "=", "(", "1", ",", "2", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.__init__.get_model": [[4, 9], ["importlib.import_module"], "function", ["None"], ["def", "get_dataset", "(", "alias", ")", ":", "\n", "    ", "dataset_module", "=", "importlib", ".", "import_module", "(", "'datasets.'", "+", "alias", ".", "lower", "(", ")", ")", "\n", "return", "dataset_module", ".", "Dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.vpnet.Model.add_arguments": [[14, 22], ["parser.add_argument", "set"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "add_arguments", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "'--pred_depth_minmax'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Also predicts depth minmax (for GenRe)\"", ",", "\n", ")", "\n", "return", "parser", ",", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.vpnet.Model.__init__": [[23, 51], ["marrnetbase.MarrnetBaseModel.__init__", "vpnet.Net", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "vpnet.Model.adam", "vpnet.Model._optimizers.append", "vpnet.Model.init_vars", "vpnet.Model.init_weight", "vpnet.Model.requires.append", "vpnet.Model.net.parameters", "vpnet.Model.gt_names.append", "vpnet.Model._metrics.append"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_vars", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_weight"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", "opt", ",", "logger", ")", "\n", "self", ".", "requires", "=", "[", "'rgb'", ",", "'depth'", ",", "'silhou'", ",", "'normal'", ",", "'azimuth'", ",", "'elevation'", "]", "\n", "if", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "self", ".", "requires", ".", "append", "(", "'depth_minmax'", ")", "\n", "", "self", ".", "net", "=", "Net", "(", "\n", "[", "3", ",", "1", ",", "1", "]", ",", "\n", "[", "'normal'", ",", "'depth'", ",", "'silhou'", "]", ",", "\n", "pred_depth_minmax", "=", "opt", ".", "pred_depth_minmax", ",", "\n", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "functional", ".", "mse_loss", "\n", "self", ".", "kldiv", "=", "nn", ".", "KLDivLoss", "(", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "adam", "(", "\n", "self", ".", "net", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "\n", "**", "self", ".", "optim_params", "\n", ")", "\n", "self", ".", "_nets", "=", "[", "self", ".", "net", "]", "\n", "self", ".", "_optimizers", ".", "append", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "input_names", "=", "[", "'rgb'", "]", "\n", "self", ".", "gt_names", "=", "[", "'depth'", ",", "'silhou'", ",", "'normal'", ",", "'azimuth'", ",", "'elevation'", "]", "\n", "if", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "self", ".", "gt_names", ".", "append", "(", "'depth_minmax'", ")", "\n", "", "self", ".", "init_vars", "(", "add_path", "=", "True", ")", "\n", "self", ".", "_metrics", "=", "[", "'loss'", ",", "'depth'", ",", "'silhou'", ",", "'normal'", ",", "'azimuth'", ",", "'elevation'", "]", "\n", "if", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "self", ".", "_metrics", ".", "append", "(", "'depth_minmax'", ")", "\n", "", "self", ".", "init_weight", "(", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.vpnet.Model.__str__": [[52, 54], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"MarrNet-3 predicting 2.5D sketches and azimuth/elevation\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.vpnet.Model._train_on_batch": [[55, 64], ["vpnet.Model.net.zero_grad", "vpnet.Model.predict", "vpnet.Model.compute_loss", "loss.backward", "vpnet.Model.optimizer.step", "len"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.compute_loss"], ["", "def", "_train_on_batch", "(", "self", ",", "epoch", ",", "batch_idx", ",", "batch", ")", ":", "\n", "        ", "self", ".", "net", ".", "zero_grad", "(", ")", "\n", "pred", "=", "self", ".", "predict", "(", "batch", ")", "\n", "loss", ",", "loss_data", "=", "self", ".", "compute_loss", "(", "pred", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "batch_size", "=", "len", "(", "batch", "[", "'rgb_path'", "]", ")", "\n", "batch_log", "=", "{", "'size'", ":", "batch_size", ",", "**", "loss_data", "}", "\n", "return", "batch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.vpnet.Model._vali_on_batch": [[65, 78], ["vpnet.Model.predict", "vpnet.Model.compute_loss", "len", "numpy.mod", "os.path.join", "os.makedirs", "vpnet.Model.pack_output", "vpnet.Model.visualizer.visualize"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.compute_loss", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.pack_output"], ["", "def", "_vali_on_batch", "(", "self", ",", "epoch", ",", "batch_idx", ",", "batch", ")", ":", "\n", "        ", "pred", "=", "self", ".", "predict", "(", "batch", ",", "no_grad", "=", "True", ")", "\n", "_", ",", "loss_data", "=", "self", ".", "compute_loss", "(", "pred", ")", "\n", "if", "np", ".", "mod", "(", "epoch", ",", "self", ".", "opt", ".", "vis_every_vali", ")", "==", "0", ":", "\n", "            ", "if", "batch_idx", "<", "self", ".", "opt", ".", "vis_batches_vali", ":", "\n", "                ", "outdir", "=", "join", "(", "self", ".", "full_logdir", ",", "'epoch%04d_vali'", "%", "epoch", ")", "\n", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "output", "=", "self", ".", "pack_output", "(", "pred", ",", "batch", ")", "\n", "self", ".", "visualizer", ".", "visualize", "(", "output", ",", "batch_idx", ",", "outdir", ")", "\n", "# np.savez(join(outdir, 'batch%04d' % batch_idx), **output)", "\n", "", "", "batch_size", "=", "len", "(", "batch", "[", "'rgb_path'", "]", ")", "\n", "batch_log", "=", "{", "'size'", ":", "batch_size", ",", "**", "loss_data", "}", "\n", "return", "batch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.vpnet.Model.pack_output": [[79, 112], ["pred[].detach().cpu", "pred[].detach().cpu", "pred[].detach().cpu", "pred[].detach().cpu", "pred[].detach().cpu", "vpnet.Model.postprocess", "vpnet.Model.postprocess().numpy", "vpnet.Model.postprocess().numpy", "vpnet.Model.postprocess", "vpnet.Model.numpy", "pred[].detach", "vpnet.Model.to_abs_depth", "vpnet.Model.proj_depth().cpu().numpy", "pred[].detach.cpu().numpy", "pred[].detach().cpu.numpy", "pred[].detach().cpu.numpy", "pred[].detach", "pred[].detach", "pred[].detach", "pred[].detach", "pred[].detach", "vpnet.Model.postprocess", "vpnet.Model.postprocess", "batch[].numpy", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "vpnet.Model.proj_depth().cpu", "pred[].detach.cpu", "vpnet.Model.proj_depth"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.to_abs_depth", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu"], ["", "def", "pack_output", "(", "self", ",", "pred", ",", "batch", ",", "add_gt", "=", "True", ")", ":", "\n", "        ", "pred_normal", "=", "pred", "[", "'normal'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "pred_silhou", "=", "pred", "[", "'silhou'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "pred_depth", "=", "pred", "[", "'depth'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "pred_azimuth", "=", "pred", "[", "'azimuth'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "pred_elevation", "=", "pred", "[", "'elevation'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "gt_silhou", "=", "self", ".", "postprocess", "(", "batch", "[", "'silhou'", "]", ")", "\n", "out", "=", "{", "}", "\n", "out", "[", "'rgb_path'", "]", "=", "batch", "[", "'rgb_path'", "]", "\n", "out", "[", "'pred_normal'", "]", "=", "self", ".", "postprocess", "(", "pred_normal", ",", "bg", "=", "1.0", ",", "input_mask", "=", "gt_silhou", ")", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_silhou'", "]", "=", "self", ".", "postprocess", "(", "pred_silhou", ")", ".", "numpy", "(", ")", "\n", "pred_depth", "=", "self", ".", "postprocess", "(", "pred_depth", ",", "bg", "=", "0.0", ",", "input_mask", "=", "gt_silhou", ")", "\n", "out", "[", "'pred_depth'", "]", "=", "pred_depth", ".", "numpy", "(", ")", "\n", "if", "self", ".", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "pred_depth_minmax", "=", "pred", "[", "'depth_minmax'", "]", ".", "detach", "(", ")", "\n", "pred_abs_depth", "=", "self", ".", "to_abs_depth", "(", "\n", "(", "1", "-", "pred_depth", ")", ".", "to", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", ",", "\n", "pred_depth_minmax", "\n", ")", "# background is max now", "\n", "pred_abs_depth", "[", "gt_silhou", "<", "1", "]", "=", "0", "# set background to 0", "\n", "out", "[", "'proj_depth'", "]", "=", "self", ".", "proj_depth", "(", "pred_abs_depth", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_depth_minmax'", "]", "=", "pred_depth_minmax", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_azimuth'", "]", "=", "pred_azimuth", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_elevation'", "]", "=", "pred_elevation", ".", "numpy", "(", ")", "\n", "", "if", "add_gt", ":", "\n", "            ", "out", "[", "'normal_path'", "]", "=", "batch", "[", "'normal_path'", "]", "\n", "out", "[", "'silhou_path'", "]", "=", "batch", "[", "'silhou_path'", "]", "\n", "out", "[", "'depth_path'", "]", "=", "batch", "[", "'depth_path'", "]", "\n", "out", "[", "'azimuth_path'", "]", "=", "batch", "[", "'azimuth_path'", "]", "\n", "out", "[", "'elevation_path'", "]", "=", "batch", "[", "'elevation_path'", "]", "\n", "if", "self", ".", "opt", ".", "pred_depth_minmax", ":", "\n", "                ", "out", "[", "'gt_depth_minmax'", "]", "=", "batch", "[", "'depth_minmax'", "]", ".", "numpy", "(", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.vpnet.Model.compute_loss": [[113, 152], ["is_fg.expand_as", "vpnet.Model.criterion", "vpnet.Model.criterion", "vpnet.Model.criterion", "loss.mean().item", "vpnet.Model.mean().item", "vpnet.Model.mean().item", "vpnet.Model.mean().item", "loss_azimuth.mean().item", "loss_elevation.mean().item", "vpnet.Model.kldiv", "vpnet.Model.kldiv", "loss_depth_minmax.mean().item", "loss.mean", "vpnet.Model.mean", "vpnet.Model.mean", "vpnet.Model.mean", "loss_azimuth.mean", "loss_elevation.mean", "vpnet.Model.criterion", "loss_depth_minmax.mean"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "pred", ")", ":", "\n", "        ", "\"\"\"\n        TODO: we should add normal and depth consistency loss here in the future.\n        \"\"\"", "\n", "pred_normal", "=", "pred", "[", "'normal'", "]", "\n", "pred_depth", "=", "pred", "[", "'depth'", "]", "\n", "pred_silhou", "=", "pred", "[", "'silhou'", "]", "\n", "is_fg", "=", "self", ".", "_gt", ".", "silhou", "!=", "0", "# excludes background", "\n", "is_fg_full", "=", "is_fg", ".", "expand_as", "(", "pred_normal", ")", "\n", "loss_normal", "=", "self", ".", "criterion", "(", "\n", "pred_normal", "[", "is_fg_full", "]", ",", "self", ".", "_gt", ".", "normal", "[", "is_fg_full", "]", "\n", ")", "\n", "loss_depth", "=", "self", ".", "criterion", "(", "\n", "pred_depth", "[", "is_fg", "]", ",", "self", ".", "_gt", ".", "depth", "[", "is_fg", "]", "\n", ")", "\n", "loss_silhou", "=", "self", ".", "criterion", "(", "pred_silhou", ",", "self", ".", "_gt", ".", "silhou", ")", "\n", "\n", "w", "=", "(", "256", "**", "2", ")", "/", "2", "\n", "loss_azimuth", "=", "w", "*", "self", ".", "kldiv", "(", "pred", "[", "'azimuth'", "]", ",", "self", ".", "_gt", ".", "azimuth", ")", "\n", "loss_elevation", "=", "w", "*", "self", ".", "kldiv", "(", "pred", "[", "'elevation'", "]", ",", "self", ".", "_gt", ".", "elevation", ")", "\n", "# pdb.set_trace()", "\n", "loss", "=", "loss_normal", "+", "loss_depth", "+", "loss_silhou", "+", "loss_azimuth", "+", "loss_elevation", "\n", "loss_data", "=", "{", "}", "\n", "loss_data", "[", "'loss'", "]", "=", "loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'normal'", "]", "=", "loss_normal", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'depth'", "]", "=", "loss_depth", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'silhou'", "]", "=", "loss_silhou", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'azimuth'", "]", "=", "loss_azimuth", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "loss_data", "[", "'elevation'", "]", "=", "loss_elevation", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "self", ".", "opt", ".", "pred_depth_minmax", ":", "\n", "            ", "w_minmax", "=", "(", "256", "**", "2", ")", "/", "2", "# matching scale of pixel predictions very roughly", "\n", "loss_depth_minmax", "=", "w_minmax", "*", "self", ".", "criterion", "(", "\n", "pred", "[", "'depth_minmax'", "]", ",", "\n", "self", ".", "_gt", ".", "depth_minmax", "\n", ")", "\n", "loss", "+=", "loss_depth_minmax", "\n", "loss_data", "[", "'depth_minmax'", "]", "=", "loss_depth_minmax", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "return", "loss", ",", "loss_data", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.vpnet.Net.__init__": [[155, 182], ["networks.uresnet.Net.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.networks.ViewAsLinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.networks.ViewAsLinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "pred_depth_minmax", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ")", "\n", "self", ".", "pred_depth_minmax", "=", "pred_depth_minmax", "\n", "if", "self", ".", "pred_depth_minmax", ":", "\n", "            ", "self", ".", "decoder_minmax", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "4", ",", "stride", "=", "1", ")", ",", "\n", "ViewAsLinear", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "128", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", ")", "\n", "", "self", ".", "decoder_azimuth_elevation", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "4", ",", "stride", "=", "1", ")", ",", "\n", "ViewAsLinear", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "128", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "24", "+", "12", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.vpnet.Net.forward": [[184, 193], ["super().forward", "vpnet.Net.decoder_azimuth_elevation", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "vpnet.Net.decoder_minmax"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.forward"], ["", "def", "forward", "(", "self", ",", "input_struct", ")", ":", "\n", "        ", "x", "=", "input_struct", ".", "rgb", "\n", "out_dict", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "out", "=", "self", ".", "decoder_azimuth_elevation", "(", "self", ".", "encoder_out", ")", "\n", "out_dict", "[", "'azimuth'", "]", "=", "F", ".", "log_softmax", "(", "out", "[", "...", ",", ":", "24", "]", ",", "dim", "=", "-", "1", ")", "\n", "out_dict", "[", "'elevation'", "]", "=", "F", ".", "log_softmax", "(", "out", "[", "...", ",", "24", ":", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "pred_depth_minmax", ":", "\n", "            ", "out_dict", "[", "'depth_minmax'", "]", "=", "self", ".", "decoder_minmax", "(", "self", ".", "encoder_out", ")", "\n", "", "return", "out_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.wgangp.Model.add_arguments": [[11, 37], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "set"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "add_arguments", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "'--canon_voxel'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Generate/discriminate canonical-pose voxels\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--wgangp_lambda'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "\"WGANGP gradient penalty coefficient\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--wgangp_norm'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"WGANGP gradient penalty norm\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gan_d_iter'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "\"# iterations D is trained per G's iteration\"", "\n", ")", "\n", "return", "parser", ",", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.wgangp.Model.__init__": [[38, 72], ["netinterface.NetInterface.__init__", "wgangp.G", "wgangp.D", "dict", "wgangp.Model.adam", "wgangp.Model.adam", "wgangp.Model.init_vars", "wgangp.Model.init_weight", "wgangp.Model.init_weight", "wgangp.Model.net_g.parameters", "wgangp.Model.net_d.parameters"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_vars", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_weight", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_weight"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opt", ",", "logger", ")", "\n", "assert", "opt", ".", "canon_voxel", ",", "\"GAN requires canonical-pose voxels to work\"", "\n", "self", ".", "requires", "=", "[", "'voxel_canon'", "]", "\n", "self", ".", "nz", "=", "200", "\n", "self", ".", "net_g", "=", "G", "(", "self", ".", "nz", ")", "\n", "self", ".", "net_d", "=", "D", "(", ")", "\n", "self", ".", "_nets", "=", "[", "self", ".", "net_g", ",", "self", ".", "net_d", "]", "\n", "# Optimizers", "\n", "self", ".", "optim_params", "=", "dict", "(", ")", "\n", "self", ".", "optim_params", "[", "'betas'", "]", "=", "(", "opt", ".", "adam_beta1", ",", "opt", ".", "adam_beta2", ")", "\n", "self", ".", "optimizer_g", "=", "self", ".", "adam", "(", "\n", "self", ".", "net_g", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "\n", "**", "self", ".", "optim_params", "\n", ")", "\n", "self", ".", "optimizer_d", "=", "self", ".", "adam", "(", "\n", "self", ".", "net_d", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "\n", "**", "self", ".", "optim_params", "\n", ")", "\n", "self", ".", "_optimizers", "=", "[", "self", ".", "optimizer_g", ",", "self", ".", "optimizer_d", "]", "\n", "#", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "preprocess", "=", "None", "\n", "self", ".", "_metrics", "=", "[", "'err_d_real'", ",", "'err_d_fake'", ",", "'err_d_gp'", ",", "'err_d'", ",", "'err_g'", ",", "'loss'", "]", "\n", "if", "opt", ".", "log_time", ":", "\n", "            ", "self", ".", "_metrics", "+=", "[", "'t_d_real'", ",", "'t_d_fake'", ",", "'t_d_grad'", ",", "'t_g'", "]", "\n", "", "self", ".", "input_names", "=", "[", "'voxel_canon'", "]", "\n", "self", ".", "aux_names", "=", "[", "'one'", ",", "'neg_one'", "]", "\n", "self", ".", "init_vars", "(", "add_path", "=", "True", ")", "\n", "self", ".", "init_weight", "(", "self", ".", "net_d", ")", "\n", "self", ".", "init_weight", "(", "self", ".", "net_g", ")", "\n", "self", ".", "_last_err_g", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.wgangp.Model.__str__": [[73, 76], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "\"3D-WGANGP\"", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.wgangp.Model._train_on_batch": [[77, 143], ["batch[].cuda", "net_d.zero_grad", "net_d.parameters", "net_g.parameters", "time.time.time", "wgangp.Model.net_d().mean", "wgangp.Model.backward", "time.time.time", "wgangp.Model.net_d().mean", "wgangp.Model.backward", "wgangp.Model.item", "time.time.time", "opt_d.step", "time.time.time", "net_d.parameters", "net_g.parameters", "net_g.zero_grad", "wgangp.Model.item", "time.time.time", "torch.no_grad", "wgangp.Model.net_g", "time.time.time", "wgangp.Model.calc_grad_penalty", "wgangp.Model.backward", "wgangp.Model.item", "time.time.time", "wgangp.Model.net_g", "wgangp.Model.net_d().mean", "wgangp.Model.backward", "opt_g.step", "time.time.time", "wgangp.Model.net_d", "wgangp.Model.net_d", "wgangp.Model.item", "wgangp.Model.net_d"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.wgangp.Model.calc_grad_penalty"], ["", "def", "_train_on_batch", "(", "self", ",", "epoch", ",", "batch_idx", ",", "batch", ")", ":", "\n", "        ", "net_d", ",", "net_g", "=", "self", ".", "net_d", ",", "self", ".", "net_g", "\n", "opt_d", ",", "opt_g", "=", "self", ".", "optimizer_d", ",", "self", ".", "optimizer_g", "\n", "one", "=", "self", ".", "_aux", ".", "one", "\n", "neg_one", "=", "self", ".", "_aux", ".", "neg_one", "\n", "real", "=", "batch", "[", "'voxel_canon'", "]", ".", "cuda", "(", ")", "\n", "batch_size", "=", "real", ".", "shape", "[", "0", "]", "\n", "batch_log", "=", "{", "'size'", ":", "batch_size", "}", "\n", "\n", "# Train D ...", "\n", "net_d", ".", "zero_grad", "(", ")", "\n", "for", "p", "in", "net_d", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "True", "\n", "", "for", "p", "in", "net_g", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "# with real", "\n", "", "t0", "=", "time", "(", ")", "\n", "err_d_real", "=", "self", ".", "net_d", "(", "real", ")", ".", "mean", "(", ")", "\n", "err_d_real", ".", "backward", "(", "neg_one", ")", "\n", "batch_log", "[", "'err_d_real'", "]", "=", "-", "err_d_real", ".", "item", "(", ")", "\n", "d_real_t", "=", "time", "(", ")", "-", "t0", "\n", "# with fake", "\n", "t0", "=", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "fake", "=", "self", ".", "net_g", "(", "batch_size", ")", "\n", "", "err_d_fake", "=", "self", ".", "net_d", "(", "fake", ")", ".", "mean", "(", ")", "\n", "err_d_fake", ".", "backward", "(", "one", ")", "\n", "batch_log", "[", "'err_d_fake'", "]", "=", "err_d_fake", ".", "item", "(", ")", "\n", "d_fake_t", "=", "time", "(", ")", "-", "t0", "\n", "# with grad penalty", "\n", "t0", "=", "time", "(", ")", "\n", "if", "self", ".", "opt", ".", "wgangp_lambda", ">", "0", ":", "\n", "            ", "grad_penalty", "=", "self", ".", "calc_grad_penalty", "(", "real", ",", "fake", ")", "\n", "grad_penalty", ".", "backward", "(", ")", "\n", "batch_log", "[", "'err_d_gp'", "]", "=", "grad_penalty", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "batch_log", "[", "'err_d_gp'", "]", "=", "0", "\n", "", "batch_log", "[", "'err_d'", "]", "=", "batch_log", "[", "'err_d_fake'", "]", "+", "batch_log", "[", "'err_d_real'", "]", "+", "batch_log", "[", "'err_d_gp'", "]", "\n", "d_grad_t", "=", "time", "(", ")", "-", "t0", "\n", "opt_d", ".", "step", "(", ")", "\n", "\n", "# Train G", "\n", "t0", "=", "time", "(", ")", "\n", "for", "p", "in", "net_d", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "net_g", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "True", "\n", "", "net_g", ".", "zero_grad", "(", ")", "\n", "if", "batch_idx", "%", "self", ".", "opt", ".", "gan_d_iter", "==", "0", ":", "\n", "            ", "_", ",", "gen", "=", "self", ".", "net_g", "(", "batch_size", ")", "\n", "err_g", "=", "self", ".", "net_d", "(", "gen", ")", ".", "mean", "(", ")", "\n", "err_g", ".", "backward", "(", "neg_one", ")", "\n", "opt_g", ".", "step", "(", ")", "\n", "batch_log", "[", "'err_g'", "]", "=", "-", "err_g", ".", "item", "(", ")", "\n", "self", ".", "_last_err_g", "=", "batch_log", "[", "'err_g'", "]", "\n", "", "else", ":", "\n", "            ", "batch_log", "[", "'err_g'", "]", "=", "self", ".", "_last_err_g", "\n", "", "g_t", "=", "time", "(", ")", "-", "t0", "\n", "\n", "if", "self", ".", "opt", ".", "log_time", ":", "\n", "            ", "batch_log", "[", "'t_d_real'", "]", "=", "d_real_t", "\n", "batch_log", "[", "'t_d_fake'", "]", "=", "d_fake_t", "\n", "batch_log", "[", "'t_d_grad'", "]", "=", "d_grad_t", "\n", "batch_log", "[", "'t_g'", "]", "=", "g_t", "\n", "", "return", "batch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.wgangp.Model.calc_grad_penalty": [[144, 165], ["torch.rand", "alpha.expand().contiguous().view().cuda.expand().contiguous().view().cuda.expand().contiguous().view().cuda", "wgangp.Model.net_d", "grads.view.view.view", "torch.autograd.grad", "grads.view.view.size", "alpha.expand().contiguous().view().cuda.expand().contiguous().view().cuda.expand().contiguous().view", "torch.ones().cuda", "alpha.expand().contiguous().view().cuda.expand().contiguous().view().cuda.expand().contiguous", "torch.ones", "alpha.expand().contiguous().view().cuda.expand().contiguous().view().cuda.expand", "wgangp.Model.size", "real.nelement"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda"], ["", "def", "calc_grad_penalty", "(", "self", ",", "real", ",", "fake", ")", ":", "\n", "        ", "alpha", "=", "torch", ".", "rand", "(", "real", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "\n", "real", ".", "shape", "[", "0", "]", ",", "real", ".", "nelement", "(", ")", "//", "real", ".", "shape", "[", "0", "]", "\n", ")", ".", "contiguous", "(", ")", ".", "view", "(", "*", "real", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "inter", "=", "alpha", "*", "real", "+", "(", "1", "-", "alpha", ")", "*", "fake", "\n", "inter", ".", "requires_grad", "=", "True", "\n", "err_d_inter", "=", "self", ".", "net_d", "(", "inter", ")", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "err_d_inter", ",", "\n", "inputs", "=", "inter", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "err_d_inter", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "\n", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", "\n", ")", "[", "0", "]", "\n", "grads", "=", "grads", ".", "view", "(", "grads", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "grad_penalty", "=", "(", "\n", "(", "(", "grads", "+", "1e-16", ")", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "self", ".", "opt", ".", "wgangp_norm", ")", "**", "2", "\n", ")", ".", "mean", "(", ")", "*", "self", ".", "opt", ".", "wgangp_lambda", "\n", "return", "grad_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.wgangp.Model._vali_on_batch": [[166, 182], ["torch.no_grad", "wgangp.Model.net_g", "wgangp.Model.net_d", "wgangp.Model.mean().item", "numpy.mod", "os.path.join", "os.makedirs", "wgangp.Model.pack_output", "wgangp.Model.visualizer.visualize", "numpy.savez", "wgangp.Model.mean", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.pack_output"], ["", "def", "_vali_on_batch", "(", "self", ",", "epoch", ",", "batch_idx", ",", "batch", ")", ":", "\n", "        ", "batch_size", "=", "batch", "[", "'voxel_canon'", "]", ".", "shape", "[", "0", "]", "\n", "batch_log", "=", "{", "'size'", ":", "batch_size", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "noise", ",", "gen", "=", "self", ".", "net_g", "(", "batch_size", ")", "\n", "disc", "=", "self", ".", "net_d", "(", "gen", ")", "\n", "", "batch_log", "[", "'loss'", "]", "=", "-", "disc", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "# Save and visualize", "\n", "if", "np", ".", "mod", "(", "epoch", ",", "self", ".", "opt", ".", "vis_every_train", ")", "==", "0", ":", "\n", "            ", "if", "batch_idx", "<", "self", ".", "opt", ".", "vis_batches_train", ":", "\n", "                ", "outdir", "=", "join", "(", "self", ".", "full_logdir", ",", "'epoch%04d_vali'", "%", "epoch", ")", "\n", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "output", "=", "self", ".", "pack_output", "(", "noise", ",", "gen", ",", "disc", ")", "\n", "self", ".", "visualizer", ".", "visualize", "(", "output", ",", "batch_idx", ",", "outdir", ")", "\n", "np", ".", "savez", "(", "join", "(", "outdir", ",", "'batch%04d'", "%", "batch_idx", ")", ",", "**", "output", ")", "\n", "", "", "return", "batch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.wgangp.Model.pack_output": [[183, 191], ["noise.cpu().numpy", "gen.cpu().numpy", "disc.cpu().numpy", "noise.cpu", "gen.cpu", "disc.cpu"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu"], ["", "@", "staticmethod", "\n", "def", "pack_output", "(", "noise", ",", "gen", ",", "disc", ")", ":", "\n", "        ", "out", "=", "{", "\n", "'noise'", ":", "noise", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'gen_voxel'", ":", "gen", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'disc'", ":", "disc", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.wgangp.G.__init__": [[194, 198], ["networks.networks.VoxelGenerator.__init__", "torch.FloatTensor().cuda", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cuda"], ["    ", "def", "__init__", "(", "self", ",", "nz", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "nz", "=", "nz", ",", "nf", "=", "64", ",", "bias", "=", "False", ",", "res", "=", "128", ")", "\n", "self", ".", "nz", "=", "nz", "\n", "self", ".", "noise", "=", "torch", ".", "FloatTensor", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.wgangp.G.forward": [[199, 204], ["x.resize_().normal_", "super().forward", "x.resize_"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.forward"], ["", "def", "forward", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "x", "=", "self", ".", "noise", "\n", "x", ".", "resize_", "(", "batch_size", ",", "self", ".", "nz", ",", "1", ",", "1", ",", "1", ")", ".", "normal_", "(", "0", ",", "1", ")", "\n", "y", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.wgangp.D.__init__": [[207, 209], ["networks.networks.VoxelDiscriminator.__init__"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "nf", "=", "64", ",", "bias", "=", "False", ",", "res", "=", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.wgangp.D.forward": [[210, 215], ["super().forward", "x.dim", "x.unsqueeze_"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "x", ".", "unsqueeze_", "(", "1", ")", "\n", "", "y", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.__init__": [[15, 29], ["marrnet2.Model.__init__", "shapehd.Net", "shapehd.Model.adam", "shapehd.Model.init_vars", "shapehd.Model.net.marrnet2.parameters"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_vars"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "opt", ",", "logger", ")", "\n", "assert", "opt", ".", "canon_sup", ",", "\"ShapeHD uses canonical-pose voxels\"", "\n", "self", ".", "net", "=", "Net", "(", "opt", ".", "marrnet2", ",", "opt", ".", "gan", ")", "\n", "self", ".", "_nets", "=", "[", "self", ".", "net", "]", "\n", "self", ".", "optimizer", "=", "self", ".", "adam", "(", "\n", "self", ".", "net", ".", "marrnet2", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "\n", "**", "self", ".", "optim_params", "\n", ")", "# just finetune MarrNet-2", "\n", "self", ".", "_optimizers", "[", "-", "1", "]", "=", "self", ".", "optimizer", "\n", "self", ".", "_metrics", "+=", "[", "'sup'", ",", "'gan'", "]", "\n", "self", ".", "init_vars", "(", "add_path", "=", "True", ")", "\n", "assert", "opt", ".", "w_gan_loss", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.__str__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Finetuning 3D estimator of ShapeHD with GAN loss\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.pack_output": [[33, 44], ["pred[].detach().cpu().numpy", "pred[].detach().cpu().numpy", "batch[].numpy", "pred[].detach().cpu", "pred[].detach().cpu", "pred[].detach", "pred[].detach"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu"], ["", "def", "pack_output", "(", "self", ",", "pred", ",", "batch", ",", "add_gt", "=", "True", ")", ":", "\n", "        ", "out", "=", "{", "}", "\n", "out", "[", "'rgb_path'", "]", "=", "batch", "[", "'rgb_path'", "]", "\n", "out", "[", "'pred_voxel_noft'", "]", "=", "pred", "[", "'voxel_noft'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_voxel'", "]", "=", "pred", "[", "'voxel'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "add_gt", ":", "\n", "            ", "out", "[", "'gt_voxel'", "]", "=", "batch", "[", "self", ".", "voxel_key", "]", ".", "numpy", "(", ")", "\n", "out", "[", "'normal_path'", "]", "=", "batch", "[", "'normal_path'", "]", "\n", "out", "[", "'depth_path'", "]", "=", "batch", "[", "'depth_path'", "]", "\n", "out", "[", "'silhou_path'", "]", "=", "batch", "[", "'silhou_path'", "]", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.compute_loss": [[45, 58], ["shapehd.Model.criterion", "shapehd.Model.item", "loss_gan.item", "loss.item", "getattr", "pred[].mean"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "pred", ")", ":", "\n", "        ", "loss_sup", "=", "self", ".", "criterion", "(", "\n", "pred", "[", "'voxel'", "]", ",", "# will be sigmoid'ed", "\n", "getattr", "(", "self", ".", "_gt", ",", "self", ".", "voxel_key", ")", "\n", ")", "\n", "loss_gan", "=", "-", "pred", "[", "'is_real'", "]", ".", "mean", "(", ")", "# negate to maximize", "\n", "loss_gan", "*=", "self", ".", "opt", ".", "w_gan_loss", "\n", "loss", "=", "loss_sup", "+", "loss_gan", "\n", "loss_data", "=", "{", "}", "\n", "loss_data", "[", "'sup'", "]", "=", "loss_sup", ".", "item", "(", ")", "\n", "loss_data", "[", "'gan'", "]", "=", "loss_gan", ".", "item", "(", ")", "\n", "loss_data", "[", "'loss'", "]", "=", "loss", ".", "item", "(", ")", "\n", "return", "loss", ",", "loss_data", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Net.__init__": [[67, 90], ["torch.Module.__init__", "marrnet2.Net", "marrnet2.Net", "wgangp.D", "shapehd.Net.d.parameters", "shapehd.Net.marrnet2_noft.parameters", "shapehd.Net.marrnet2.parameters", "torch.Sigmoid", "torch.Sigmoid", "torch.load", "torch.load", "torch.load", "torch.load", "shapehd.Net.marrnet2.load_state_dict", "shapehd.Net.marrnet2_noft.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "shapehd.Net.d.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_state_dict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_state_dict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_state_dict"], ["def", "__init__", "(", "self", ",", "marrnet2_path", "=", "None", ",", "gan_path", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Init MarrNet-2 and load weights", "\n", "self", ".", "marrnet2", "=", "Marrnet2", "(", "4", ")", "\n", "self", ".", "marrnet2_noft", "=", "Marrnet2", "(", "4", ")", "\n", "if", "marrnet2_path", ":", "\n", "            ", "state_dicts", "=", "torch", ".", "load", "(", "marrnet2_path", ")", "\n", "state_dict", "=", "state_dicts", "[", "'nets'", "]", "[", "0", "]", "\n", "self", ".", "marrnet2", ".", "load_state_dict", "(", "state_dict", ")", "\n", "self", ".", "marrnet2_noft", ".", "load_state_dict", "(", "state_dict", ")", "\n", "# Init discriminator and load weights", "\n", "", "self", ".", "d", "=", "D", "(", ")", "\n", "if", "gan_path", ":", "\n", "            ", "state_dicts", "=", "torch", ".", "load", "(", "gan_path", ")", "\n", "self", ".", "d", ".", "load_state_dict", "(", "state_dicts", "[", "'nets'", "]", "[", "1", "]", ")", "\n", "# Fix D, but finetune MarrNet-2", "\n", "", "for", "p", "in", "self", ".", "d", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "self", ".", "marrnet2_noft", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "self", ".", "marrnet2", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "True", "\n", "", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Net.forward": [[91, 97], ["shapehd.Net.marrnet2_noft", "shapehd.Net.marrnet2", "shapehd.Net.d", "shapehd.Net.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_struct", ")", ":", "\n", "        ", "pred", "=", "{", "}", "\n", "pred", "[", "'voxel_noft'", "]", "=", "self", ".", "marrnet2_noft", "(", "input_struct", ")", "# unfinetuned", "\n", "pred", "[", "'voxel'", "]", "=", "self", ".", "marrnet2", "(", "input_struct", ")", "\n", "pred", "[", "'is_real'", "]", "=", "self", ".", "d", "(", "self", ".", "sigmoid", "(", "pred", "[", "'voxel'", "]", ")", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_shapenet.add_arguments": [[100, 109], ["marrnet2.Model.add_arguments", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.add_arguments"], ["    ", "@", "classmethod", "\n", "def", "add_arguments", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "parser", ",", "unique_params", "=", "Model", ".", "add_arguments", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--marrnet1_file'", ",", "\n", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Path to pretrained MarrNet-1\"", "\n", ")", "\n", "return", "parser", ",", "unique_params", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_shapenet.__init__": [[110, 120], ["shapehd.Model.__init__", "shapehd.Model_shapenet.load_state_dict", "marrnet1.Model", "shapehd.Model_shapenet.marrnet1.load_state_dict", "shapehd.Model_shapenet._nets.append"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_state_dict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_state_dict"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ")", ":", "\n", "        ", "opt", ".", "canon_sup", "=", "True", "# dummy, for network init only", "\n", "super", "(", ")", ".", "__init__", "(", "opt", ",", "logger", ")", "\n", "# Load MarrNet-2 and D (though unused at test time)", "\n", "self", ".", "load_state_dict", "(", "opt", ".", "net_file", ",", "load_optimizer", "=", "'auto'", ")", "\n", "# Load MarrNet-1 whose outputs are inputs to D-tuned MarrNet-2", "\n", "opt", ".", "pred_depth_minmax", "=", "True", "# dummy", "\n", "self", ".", "marrnet1", "=", "Marrnet1_model", "(", "opt", ",", "logger", ")", "\n", "self", ".", "marrnet1", ".", "load_state_dict", "(", "opt", ".", "marrnet1_file", ")", "\n", "self", ".", "_nets", ".", "append", "(", "self", ".", "marrnet1", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.add_arguments": [[123, 132], ["marrnet2.Model.add_arguments", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.add_arguments"], ["    ", "@", "classmethod", "\n", "def", "add_arguments", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "parser", ",", "unique_params", "=", "Model", ".", "add_arguments", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--marrnet1_file'", ",", "\n", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Path to pretrained MarrNet-1\"", "\n", ")", "\n", "return", "parser", ",", "unique_params", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.__init__": [[133, 147], ["shapehd.Model.__init__", "shapehd.Model_test.init_vars", "shapehd.Model_test.load_state_dict", "marrnet1.Model", "shapehd.Model_test.marrnet1.load_state_dict", "shapehd.Model_test._nets.append", "os.path.join", "os.path.join", "hydra.utils.get_original_cwd", "hydra.utils.get_original_cwd"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.init_vars", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_state_dict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.load_state_dict"], ["", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ")", ":", "\n", "        ", "opt", ".", "canon_sup", "=", "True", "# dummy, for network init only", "\n", "super", "(", ")", ".", "__init__", "(", "opt", ",", "logger", ")", "\n", "self", ".", "requires", "=", "[", "'rgb'", ",", "'mask'", "]", "# mask for bbox cropping only", "\n", "self", ".", "input_names", "=", "[", "'rgb'", "]", "\n", "self", ".", "init_vars", "(", "add_path", "=", "True", ")", "\n", "self", ".", "output_dir", "=", "opt", ".", "output_dir", "\n", "# Load MarrNet-2 and D (though unused at test time)", "\n", "self", ".", "load_state_dict", "(", "os", ".", "path", ".", "join", "(", "hydra", ".", "utils", ".", "get_original_cwd", "(", ")", ",", "opt", ".", "net_file", ")", ",", "load_optimizer", "=", "'auto'", ")", "\n", "# Load MarrNet-1 whose outputs are inputs to D-tuned MarrNet-2", "\n", "opt", ".", "pred_depth_minmax", "=", "True", "# dummy", "\n", "self", ".", "marrnet1", "=", "Marrnet1_model", "(", "opt", ",", "logger", ")", "\n", "self", ".", "marrnet1", ".", "load_state_dict", "(", "os", ".", "path", ".", "join", "(", "hydra", ".", "utils", ".", "get_original_cwd", "(", ")", ",", "opt", ".", "marrnet1_file", ")", ")", "\n", "self", ".", "_nets", ".", "append", "(", "self", ".", "marrnet1", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.__str__": [[148, 150], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Testing ShapeHD\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.preprocess_wrapper": [[151, 166], ["get_bbox", "crop", "cls.preprocess"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.get_bbox", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.crop", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.preprocess"], ["", "@", "classmethod", "\n", "def", "preprocess_wrapper", "(", "cls", ",", "in_dict", ")", ":", "\n", "        ", "silhou_thres", "=", "0.95", "\n", "in_size", "=", "480", "\n", "pad", "=", "85", "\n", "im", "=", "in_dict", "[", "'rgb'", "]", "\n", "mask", "=", "in_dict", "[", "'silhou'", "]", "\n", "bbox", "=", "get_bbox", "(", "mask", ",", "th", "=", "silhou_thres", ")", "\n", "im_crop", "=", "crop", "(", "im", ",", "bbox", ",", "in_size", ",", "pad", ",", "pad_zero", "=", "False", ")", "\n", "in_dict", "[", "'rgb'", "]", "=", "im_crop", "\n", "del", "in_dict", "[", "'silhou'", "]", "# just for cropping -- done its job", "\n", "# Now the image is just like those we rendered", "\n", "out_dict", "=", "cls", ".", "preprocess", "(", "in_dict", ",", "mode", "=", "'test'", ")", "\n", "out_dict", "[", "'rgb_crop'", "]", "=", "im_crop", "\n", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.test_on_batch": [[167, 182], ["os.path.join", "os.makedirs", "shapehd.Model_test.marrnet1.predict", "shapehd.Model_test.predict", "shapehd.Model_test.pack_output", "shapehd.Model_test.visualizer.visualize", "numpy.savez", "getattr"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.pack_output"], ["", "def", "test_on_batch", "(", "self", ",", "batch_i", ",", "batch", ")", ":", "\n", "        ", "outdir", "=", "join", "(", "self", ".", "output_dir", ",", "'batch%04d'", "%", "batch_i", ")", "\n", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "# Forward MarrNet-1", "\n", "pred1", "=", "self", ".", "marrnet1", ".", "predict", "(", "batch", ",", "load_gt", "=", "False", ",", "no_grad", "=", "True", ")", "\n", "# Forward MarrNet-2", "\n", "for", "net_name", "in", "(", "'marrnet2'", ",", "'marrnet2_noft'", ")", ":", "\n", "            ", "net", "=", "getattr", "(", "self", ".", "net", ",", "net_name", ")", "\n", "net", ".", "silhou_thres", "=", "self", ".", "pred_silhou_thres", "*", "self", ".", "scale_25d", "\n", "", "self", ".", "input_names", "=", "[", "'depth'", ",", "'normal'", ",", "'silhou'", "]", "\n", "pred2", "=", "self", ".", "predict", "(", "pred1", ",", "load_gt", "=", "False", ",", "no_grad", "=", "True", ")", "\n", "# Pack, visualize, and save outputs", "\n", "output", "=", "self", ".", "pack_output", "(", "pred1", ",", "pred2", ",", "batch", ")", "\n", "self", ".", "visualizer", ".", "visualize", "(", "output", ",", "batch_i", ",", "outdir", ")", "\n", "np", ".", "savez", "(", "outdir", "+", "'.npz'", ",", "**", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.pack_output": [[183, 205], ["pred1[].detach().cpu", "pred1[].detach().cpu", "pred1[].detach().cpu", "denormalize_colors", "shapehd.Model_test.postprocess", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.numpy", "torch.clamp.numpy", "shapehd.Model_test.postprocess().numpy", "shapehd.Model_test.postprocess().numpy", "pred2[].detach().cpu().numpy", "pred2[].detach().cpu().numpy", "batch[].detach().numpy", "pred1[].detach", "pred1[].detach", "pred1[].detach", "shapehd.Model_test.postprocess", "shapehd.Model_test.postprocess", "pred2[].detach().cpu", "pred2[].detach().cpu", "batch[].detach", "pred2[].detach", "pred2[].detach"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.denormalize_colors", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.cpu"], ["", "def", "pack_output", "(", "self", ",", "pred1", ",", "pred2", ",", "batch", ")", ":", "\n", "        ", "out", "=", "{", "}", "\n", "# MarrNet-1 outputs", "\n", "pred_normal", "=", "pred1", "[", "'normal'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "pred_silhou", "=", "pred1", "[", "'silhou'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "pred_depth", "=", "pred1", "[", "'depth'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "out", "[", "'rgb_path'", "]", "=", "batch", "[", "'rgb_path'", "]", "\n", "out", "[", "'rgb'", "]", "=", "denormalize_colors", "(", "batch", "[", "'rgb'", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pred_silhou", "=", "self", ".", "postprocess", "(", "pred_silhou", ")", "\n", "pred_silhou", "=", "torch", ".", "clamp", "(", "pred_silhou", ",", "0", ",", "1", ")", "\n", "pred_silhou", "[", "pred_silhou", "<", "0", "]", "=", "0", "\n", "out", "[", "'pred_silhou'", "]", "=", "pred_silhou", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_normal'", "]", "=", "self", ".", "postprocess", "(", "\n", "pred_normal", ",", "bg", "=", "1.0", ",", "input_mask", "=", "pred_silhou", "\n", ")", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_depth'", "]", "=", "self", ".", "postprocess", "(", "\n", "pred_depth", ",", "bg", "=", "0.0", ",", "input_mask", "=", "pred_silhou", "\n", ")", ".", "numpy", "(", ")", "\n", "# D-tuned MarrNet-2 outputs", "\n", "out", "[", "'pred_voxel'", "]", "=", "pred2", "[", "'voxel'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "out", "[", "'pred_voxel_noft'", "]", "=", "pred2", "[", "'voxel_noft'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.__init__": [[19, 44], ["models.netinterface.NetInterface.__init__", "dict", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["def", "__init__", "(", "self", ",", "opt", ",", "logger", ")", ":", "\n", "        ", "super", "(", "MarrnetBaseModel", ",", "self", ")", ".", "__init__", "(", "opt", ",", "logger", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "n_batches_per_epoch", "=", "opt", ".", "epoch_batches", "\n", "self", ".", "n_batches_to_vis_train", "=", "opt", ".", "vis_batches_train", "\n", "self", ".", "n_batches_to_vis_vali", "=", "opt", ".", "vis_batches_vali", "\n", "self", ".", "full_logdir", "=", "opt", ".", "full_logdir", "\n", "self", ".", "_metrics", "=", "[", "]", "\n", "self", ".", "batches_to_vis", "=", "{", "}", "\n", "self", ".", "dataset", "=", "opt", ".", "dataset", "\n", "self", ".", "_nets", "=", "[", "]", "\n", "self", ".", "_optimizers", "=", "[", "]", "\n", "self", ".", "_moveable_vars", "=", "[", "]", "\n", "if", "opt", ".", "log_time", ":", "\n", "            ", "self", ".", "_metrics", "+=", "[", "'batch_time'", ",", "'data_time'", "]", "\n", "# Parameters for different optimization methods", "\n", "", "self", ".", "optim_params", "=", "dict", "(", ")", "\n", "if", "opt", ".", "optim", "==", "'adam'", ":", "\n", "            ", "self", ".", "optim_params", "[", "'betas'", "]", "=", "(", "opt", ".", "adam_beta1", ",", "opt", ".", "adam_beta2", ")", "\n", "", "elif", "opt", ".", "optim", "==", "'sgd'", ":", "\n", "            ", "self", ".", "optim_params", "[", "'momentum'", "]", "=", "opt", ".", "sgd_momentum", "\n", "self", ".", "optim_params", "[", "'dampening'", "]", "=", "opt", ".", "sgd_dampening", "\n", "self", ".", "optim_params", "[", "'weight_decay'", "]", "=", "opt", ".", "sgd_wdecay", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "opt", ".", "optim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel._train_on_batch": [[45, 55], ["marrnetbase.MarrnetBaseModel.net.zero_grad", "marrnetbase.MarrnetBaseModel.predict", "marrnetbase.MarrnetBaseModel.compute_loss", "loss.backward", "marrnetbase.MarrnetBaseModel.optimizer.step", "len", "marrnetbase.MarrnetBaseModel.record_batch"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.compute_loss"], ["", "", "def", "_train_on_batch", "(", "self", ",", "batch_idx", ",", "batch", ")", ":", "\n", "        ", "self", ".", "net", ".", "zero_grad", "(", ")", "\n", "pred", "=", "self", ".", "predict", "(", "batch", ")", "\n", "loss", ",", "loss_data", "=", "self", ".", "compute_loss", "(", "pred", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "batch_size", "=", "len", "(", "batch", "[", "'rgb_path'", "]", ")", "\n", "batch_log", "=", "{", "'size'", ":", "batch_size", ",", "**", "loss_data", "}", "\n", "self", ".", "record_batch", "(", "batch_idx", ",", "batch", ")", "\n", "return", "batch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel._vali_on_batch": [[56, 69], ["marrnetbase.MarrnetBaseModel.predict", "marrnetbase.MarrnetBaseModel.compute_loss", "len", "numpy.mod", "os.path.join", "os.makedirs", "marrnetbase.MarrnetBaseModel.pack_output", "marrnetbase.MarrnetBaseModel.visualizer.visualize", "numpy.savez", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.netinterface.NetInterface.predict", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model.compute_loss", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.pack_output"], ["", "def", "_vali_on_batch", "(", "self", ",", "epoch", ",", "batch_idx", ",", "batch", ")", ":", "\n", "        ", "pred", "=", "self", ".", "predict", "(", "batch", ",", "no_grad", "=", "True", ")", "\n", "_", ",", "loss_data", "=", "self", ".", "compute_loss", "(", "pred", ")", "\n", "if", "np", ".", "mod", "(", "epoch", ",", "self", ".", "opt", ".", "vis_every_vali", ")", "==", "0", ":", "\n", "            ", "if", "batch_idx", "<", "self", ".", "opt", ".", "vis_batches_vali", ":", "\n", "                ", "outdir", "=", "join", "(", "self", ".", "full_logdir", ",", "'epoch%04d_vali'", "%", "epoch", ")", "\n", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "output", "=", "self", ".", "pack_output", "(", "pred", ",", "batch", ")", "\n", "self", ".", "visualizer", ".", "visualize", "(", "output", ",", "batch_idx", ",", "outdir", ")", "\n", "np", ".", "savez", "(", "join", "(", "outdir", ",", "'batch%04d'", "%", "batch_idx", ")", ",", "**", "output", ")", "\n", "", "", "batch_size", "=", "len", "(", "batch", "[", "'rgb_path'", "]", ")", "\n", "batch_log", "=", "{", "'size'", ":", "batch_size", ",", "**", "loss_data", "}", "\n", "return", "batch_log", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.preprocess": [[70, 135], ["data.items", "resize", "normalize_colors", "resize.transpose", "jitter_colors", "add_lighting_noise", "resize", "resize", "binarize", "scipy.ndimage.morphology.binary_erosion().astype", "resize", "resize.transpose", "resize.min", "resize.max", "numpy.isnan", "numpy.clip.astype", "numpy.clip", "resize.min", "resize.max", "scipy.ndimage.morphology.binary_erosion", "resize.min", "resize.max", "numpy.any"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.resize", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.normalize_colors", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.jitter_colors", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.add_lighting_noise", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.resize", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.resize", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.binarize", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.util.util_img.resize"], ["", "@", "classmethod", "\n", "def", "preprocess", "(", "cls", ",", "data", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "\"\"\"\n        This function should be applied to [0, 1] floats, except absolute depth\n        \"\"\"", "\n", "data_proc", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "==", "'rgb'", ":", "\n", "                ", "im", "=", "val", "\n", "# H x W x 3", "\n", "im", "=", "resize", "(", "im", ",", "cls", ".", "im_size", ",", "'horizontal'", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "                    ", "im", "=", "jitter_colors", "(", "\n", "im", ",", "\n", "d_brightness", "=", "cls", ".", "rgb_jitter_d", ",", "\n", "d_contrast", "=", "cls", ".", "rgb_jitter_d", ",", "\n", "d_saturation", "=", "cls", ".", "rgb_jitter_d", "\n", ")", "\n", "im", "=", "add_lighting_noise", "(", "\n", "im", ",", "cls", ".", "rgb_light_noise", ")", "\n", "", "im", "=", "normalize_colors", "(", "im", ")", "\n", "val", "=", "im", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "elif", "key", "==", "'depth'", ":", "\n", "                ", "im", "=", "val", "\n", "if", "im", ".", "ndim", "==", "3", ":", "\n", "                    ", "im", "=", "im", "[", ":", ",", ":", ",", "0", "]", "\n", "", "im", "=", "resize", "(", "\n", "im", ",", "cls", ".", "im_size", ",", "'horizontal'", ",", "clamp", "=", "(", "im", ".", "min", "(", ")", ",", "im", ".", "max", "(", ")", ")", ")", "\n", "im", "*=", "cls", ".", "scale_25d", "\n", "val", "=", "im", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "# 1 x H x W, scaled", "\n", "\n", "", "elif", "key", "==", "'silhou'", ":", "\n", "                ", "im", "=", "val", "\n", "if", "im", ".", "ndim", "==", "3", ":", "\n", "                    ", "im", "=", "im", "[", ":", ",", ":", ",", "0", "]", "\n", "", "im", "=", "resize", "(", "\n", "im", ",", "cls", ".", "im_size", ",", "'horizontal'", ",", "clamp", "=", "(", "im", ".", "min", "(", ")", ",", "im", ".", "max", "(", ")", ")", ")", "\n", "im", "=", "binarize", "(", "\n", "im", ",", "cls", ".", "silhou_thres", ",", "gt_is_1", "=", "True", ")", "\n", "data_proc", "[", "'contour'", "]", "=", "im", "-", "binary_erosion", "(", "im", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "im", "*=", "cls", ".", "scale_25d", "\n", "val", "=", "im", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "# 1 x H x W, binarized, scaled", "\n", "\n", "", "elif", "key", "==", "'normal'", ":", "\n", "# H x W x 3", "\n", "                ", "im", "=", "val", "\n", "im", "=", "resize", "(", "\n", "im", ",", "cls", ".", "im_size", ",", "'horizontal'", ",", "clamp", "=", "(", "im", ".", "min", "(", ")", ",", "im", ".", "max", "(", ")", ")", ")", "\n", "im", "*=", "cls", ".", "scale_25d", "\n", "val", "=", "im", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "# 3 x H x W, scaled", "\n", "", "elif", "key", "==", "'kp'", ":", "\n", "                ", "kp", "=", "val", "\n", "mask", "=", "np", ".", "isnan", "(", "kp", ")", "\n", "kp", "*=", "cls", ".", "im_size", "/", "data", "[", "'rgb'", "]", ".", "shape", "[", "1", "]", "\n", "kp", "=", "kp", ".", "astype", "(", "np", ".", "int", ")", "\n", "kp", "=", "np", ".", "clip", "(", "kp", ",", "0", ",", "cls", ".", "im_size", "-", "1", ")", "\n", "val", "=", "kp", "[", ":", ",", "1", "]", "*", "cls", ".", "im_size", "+", "kp", "[", ":", ",", "0", "]", "\n", "val", "[", "np", ".", "any", "(", "mask", ",", "-", "1", ")", "]", "=", "-", "1", "\n", "\n", "", "data_proc", "[", "key", "]", "=", "val", "\n", "", "return", "data_proc", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.mask": [[136, 144], ["isinstance", "input_mask.expand_as.expand_as.expand_as", "input_image.new_ones", "input_image.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "mask", "(", "input_image", ",", "input_mask", ",", "bg", "=", "1.0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "bg", ",", "(", "int", ",", "float", ")", ")", "\n", "assert", "(", "input_mask", ">=", "0", ")", ".", "all", "(", ")", "and", "(", "input_mask", "<=", "1", ")", ".", "all", "(", ")", "\n", "input_mask", "=", "input_mask", ".", "expand_as", "(", "input_image", ")", "\n", "bg", "=", "bg", "*", "input_image", ".", "new_ones", "(", "input_image", ".", "size", "(", ")", ")", "\n", "output", "=", "input_mask", "*", "input_image", "+", "(", "1", "-", "input_mask", ")", "*", "bg", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.postprocess": [[145, 151], ["cls.mask"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.mask"], ["", "@", "classmethod", "\n", "def", "postprocess", "(", "cls", ",", "tensor", ",", "bg", "=", "1.0", ",", "input_mask", "=", "None", ")", ":", "\n", "        ", "scaled", "=", "tensor", "/", "cls", ".", "scale_25d", "\n", "if", "input_mask", "is", "not", "None", ":", "\n", "            ", "return", "cls", ".", "mask", "(", "scaled", ",", "input_mask", ",", "bg", "=", "bg", ")", "\n", "", "return", "scaled", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.marrnetbase.MarrnetBaseModel.to_abs_depth": [[152, 160], ["bmin.view", "bmax.view"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "to_abs_depth", "(", "rel_depth", ",", "depth_minmax", ")", ":", "\n", "        ", "bmin", "=", "depth_minmax", "[", ":", ",", "0", "]", "\n", "bmax", "=", "depth_minmax", "[", ":", ",", "1", "]", "\n", "depth_min", "=", "bmin", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "depth_max", "=", "bmax", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "abs_depth", "=", "rel_depth", "*", "(", "depth_max", "-", "depth_min", "+", "1e-4", ")", "+", "depth_min", "\n", "return", "abs_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.ImageEncoder.__init__": [[11, 20], ["torch.Module.__init__", "revresnet.resnet18", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "encode_dims", "=", "200", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "resnet_m", "=", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "resnet_m", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "input_nc", ",", "64", ",", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "resnet_m", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "resnet_m", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "encode_dims", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "resnet_m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.ImageEncoder.forward": [[21, 23], ["networks.ImageEncoder.main"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.AziElePredictor.__init__": [[26, 44], ["torch.Module.__init__", "torch.Sequential", "networks.fc", "networks.fc", "networks.fc", "networks.batchnorm1d", "networks.relu", "networks.fc", "networks.batchnorm1d", "networks.relu", "networks.fc", "networks.batchnorm1d", "networks.relu"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.fc", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.fc", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.fc", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm1d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.fc", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm1d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.fc", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm1d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu"], ["    ", "def", "__init__", "(", "self", ",", "n_dims", "=", "200", ",", "n_azi", "=", "24", ",", "n_ele", "=", "12", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# volconv1", "\n", "fc", "(", "n_dims", ",", "800", ")", ",", "\n", "batchnorm1d", "(", "800", ")", ",", "\n", "relu", "(", ")", ",", "\n", "# volconv2", "\n", "fc", "(", "800", ",", "400", ")", ",", "\n", "batchnorm1d", "(", "400", ")", ",", "\n", "relu", "(", ")", ",", "\n", "# volconv3", "\n", "fc", "(", "400", ",", "200", ")", ",", "\n", "batchnorm1d", "(", "200", ")", ",", "\n", "relu", "(", ")", "\n", ")", "\n", "self", ".", "azi", "=", "fc", "(", "200", ",", "n_azi", ")", "\n", "self", ".", "ele", "=", "fc", "(", "200", ",", "n_ele", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.AziElePredictor.forward": [[45, 48], ["networks.AziElePredictor.main", "x.view", "networks.AziElePredictor.azi", "networks.AziElePredictor.ele", "x.size"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "main", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "self", ".", "azi", "(", "out", ")", ",", "self", ".", "ele", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.VoxelDecoder.__init__": [[54, 81], ["torch.Module.__init__", "torch.Sequential", "networks.deconv3d_add3", "networks.batchnorm3d", "networks.relu", "networks.deconv3d_2x", "networks.batchnorm3d", "networks.relu", "torch.Sequential", "torch.Sequential", "networks.deconv3d_2x", "networks.batchnorm3d", "networks.relu", "networks.deconv3d_2x", "networks.batchnorm3d", "networks.relu", "networks.deconv3d_2x", "networks.batchnorm3d", "networks.relu", "networks.deconv3d_2x"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_add3", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm3d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_2x", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm3d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_2x", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm3d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_2x", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm3d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_2x", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm3d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_2x"], ["def", "__init__", "(", "self", ",", "n_dims", "=", "200", ",", "nf", "=", "512", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# volconv1", "\n", "deconv3d_add3", "(", "n_dims", ",", "nf", ",", "True", ")", ",", "\n", "batchnorm3d", "(", "nf", ")", ",", "\n", "relu", "(", ")", ",", "\n", "# volconv2", "\n", "deconv3d_2x", "(", "nf", ",", "nf", "//", "2", ",", "True", ")", ",", "\n", "batchnorm3d", "(", "nf", "//", "2", ")", ",", "\n", "relu", "(", ")", ",", "\n", "# volconv3", "\n", "nn", ".", "Sequential", "(", ")", ",", "# NOTE: no-op for backward compatibility; consider removing", "\n", "nn", ".", "Sequential", "(", ")", ",", "# NOTE", "\n", "deconv3d_2x", "(", "nf", "//", "2", ",", "nf", "//", "4", ",", "True", ")", ",", "\n", "batchnorm3d", "(", "nf", "//", "4", ")", ",", "\n", "relu", "(", ")", ",", "\n", "# volconv4", "\n", "deconv3d_2x", "(", "nf", "//", "4", ",", "nf", "//", "8", ",", "True", ")", ",", "\n", "batchnorm3d", "(", "nf", "//", "8", ")", ",", "\n", "relu", "(", ")", ",", "\n", "# volconv5", "\n", "deconv3d_2x", "(", "nf", "//", "8", ",", "nf", "//", "16", ",", "True", ")", ",", "\n", "batchnorm3d", "(", "nf", "//", "16", ")", ",", "\n", "relu", "(", ")", ",", "\n", "# volconv6", "\n", "deconv3d_2x", "(", "nf", "//", "16", ",", "1", ",", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.VoxelDecoder.forward": [[83, 86], ["x.view", "networks.VoxelDecoder.main", "x.size"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_vox", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "self", ".", "main", "(", "x_vox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.VoxelGenerator.__init__": [[89, 126], ["torch.Module.__init__", "layers.append", "torch.Sequential", "networks.deconv3d_add3", "networks.batchnorm3d", "networks.relu", "networks.deconv3d_2x", "networks.batchnorm3d", "networks.relu", "networks.deconv3d_2x", "networks.batchnorm3d", "networks.relu", "networks.deconv3d_2x", "networks.batchnorm3d", "networks.relu", "layers.append", "torch.Sigmoid", "networks.deconv3d_2x", "NotImplementedError", "networks.deconv3d_2x", "networks.batchnorm3d", "networks.relu", "networks.deconv3d_2x"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_add3", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm3d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_2x", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm3d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_2x", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm3d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_2x", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm3d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_2x", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_2x", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm3d", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_2x"], ["    ", "def", "__init__", "(", "self", ",", "nz", "=", "200", ",", "nf", "=", "64", ",", "bias", "=", "False", ",", "res", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "\n", "# nzx1x1x1", "\n", "deconv3d_add3", "(", "nz", ",", "nf", "*", "8", ",", "bias", ")", ",", "\n", "batchnorm3d", "(", "nf", "*", "8", ")", ",", "\n", "relu", "(", ")", ",", "\n", "# (nf*8)x4x4x4", "\n", "deconv3d_2x", "(", "nf", "*", "8", ",", "nf", "*", "4", ",", "bias", ")", ",", "\n", "batchnorm3d", "(", "nf", "*", "4", ")", ",", "\n", "relu", "(", ")", ",", "\n", "# (nf*4)x8x8x8", "\n", "deconv3d_2x", "(", "nf", "*", "4", ",", "nf", "*", "2", ",", "bias", ")", ",", "\n", "batchnorm3d", "(", "nf", "*", "2", ")", ",", "\n", "relu", "(", ")", ",", "\n", "# (nf*2)x16x16x16", "\n", "deconv3d_2x", "(", "nf", "*", "2", ",", "nf", ",", "bias", ")", ",", "\n", "batchnorm3d", "(", "nf", ")", ",", "\n", "relu", "(", ")", ",", "\n", "# nfx32x32x32", "\n", "]", "\n", "if", "res", "==", "64", ":", "\n", "            ", "layers", ".", "append", "(", "deconv3d_2x", "(", "nf", ",", "1", ",", "bias", ")", ")", "\n", "# 1x64x64x64", "\n", "", "elif", "res", "==", "128", ":", "\n", "            ", "layers", "+=", "[", "\n", "deconv3d_2x", "(", "nf", ",", "nf", ",", "bias", ")", ",", "\n", "batchnorm3d", "(", "nf", ")", ",", "\n", "relu", "(", ")", ",", "\n", "# nfx64x64x64", "\n", "deconv3d_2x", "(", "nf", ",", "1", ",", "bias", ")", ",", "\n", "# 1x128x128x128", "\n", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "res", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.VoxelGenerator.forward": [[127, 129], ["networks.VoxelGenerator.main"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.VoxelDiscriminator.__init__": [[132, 165], ["torch.Module.__init__", "torch.Sequential", "networks.conv3d_half", "networks.relu_leaky", "networks.conv3d_half", "networks.relu_leaky", "networks.conv3d_half", "networks.relu_leaky", "networks.conv3d_half", "networks.relu_leaky", "networks.conv3d_minus3", "NotImplementedError", "networks.conv3d_half", "networks.relu_leaky"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.conv3d_half", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu_leaky", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.conv3d_half", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu_leaky", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.conv3d_half", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu_leaky", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.conv3d_half", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu_leaky", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.conv3d_minus3", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.conv3d_half", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu_leaky"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "bias", "=", "False", ",", "res", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "\n", "# 1x64x64x64", "\n", "conv3d_half", "(", "1", ",", "nf", ",", "bias", ")", ",", "\n", "relu_leaky", "(", ")", ",", "\n", "# nfx32x32x32", "\n", "conv3d_half", "(", "nf", ",", "nf", "*", "2", ",", "bias", ")", ",", "\n", "# batchnorm3d(nf * 2),", "\n", "relu_leaky", "(", ")", ",", "\n", "# (nf*2)x16x16x16", "\n", "conv3d_half", "(", "nf", "*", "2", ",", "nf", "*", "4", ",", "bias", ")", ",", "\n", "# batchnorm3d(nf * 4),", "\n", "relu_leaky", "(", ")", ",", "\n", "# (nf*4)x8x8x8", "\n", "conv3d_half", "(", "nf", "*", "4", ",", "nf", "*", "8", ",", "bias", ")", ",", "\n", "# batchnorm3d(nf * 8),", "\n", "relu_leaky", "(", ")", ",", "\n", "# (nf*8)x4x4", "\n", "conv3d_minus3", "(", "nf", "*", "8", ",", "1", ",", "bias", ")", ",", "\n", "# 1x1x1", "\n", "]", "\n", "if", "res", "==", "64", ":", "\n", "            ", "pass", "\n", "", "elif", "res", "==", "128", ":", "\n", "            ", "extra_layers", "=", "[", "\n", "conv3d_half", "(", "nf", ",", "nf", ",", "bias", ")", ",", "\n", "relu_leaky", "(", ")", ",", "\n", "]", "\n", "layers", "=", "layers", "[", ":", "2", "]", "+", "extra_layers", "+", "layers", "[", "2", ":", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "res", ")", "\n", "", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.VoxelDiscriminator.forward": [[166, 169], ["networks.VoxelDiscriminator.main", "networks.VoxelDiscriminator.view().squeeze", "networks.VoxelDiscriminator.view"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "main", "(", "x", ")", "\n", "return", "y", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.Unet_3D.__init__": [[172, 193], ["torch.Module.__init__", "networks.Conv3d_block", "networks.Conv3d_block", "networks.Conv3d_block", "networks.Conv3d_block", "networks.Conv3d_block", "networks.Conv3d_block", "torch.Sequential", "networks.Deconv3d_skip", "networks.Deconv3d_skip", "networks.Deconv3d_skip", "networks.Deconv3d_skip", "networks.Deconv3d_skip", "networks.Deconv3d_skip", "torch.Linear", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "20", ",", "in_channel", "=", "2", ",", "no_linear", "=", "False", ")", ":", "\n", "        ", "super", "(", "Unet_3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nf", "=", "nf", "\n", "self", ".", "enc1", "=", "Conv3d_block", "(", "in_channel", ",", "nf", ",", "8", ",", "2", ",", "3", ")", "# =>64", "\n", "self", ".", "enc2", "=", "Conv3d_block", "(", "nf", ",", "2", "*", "nf", ",", "4", ",", "2", ",", "1", ")", "# =>32", "\n", "self", ".", "enc3", "=", "Conv3d_block", "(", "2", "*", "nf", ",", "4", "*", "nf", ",", "4", ",", "2", ",", "1", ")", "# =>16", "\n", "self", ".", "enc4", "=", "Conv3d_block", "(", "4", "*", "nf", ",", "8", "*", "nf", ",", "4", ",", "2", ",", "1", ")", "# =>8", "\n", "self", ".", "enc5", "=", "Conv3d_block", "(", "8", "*", "nf", ",", "16", "*", "nf", ",", "4", ",", "2", ",", "1", ")", "# =>4", "\n", "self", ".", "enc6", "=", "Conv3d_block", "(", "16", "*", "nf", ",", "32", "*", "nf", ",", "4", ",", "1", ",", "0", ")", "# =>1", "\n", "self", ".", "full_conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "32", "*", "nf", ",", "32", "*", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "dec1", "=", "Deconv3d_skip", "(", "32", "*", "2", "*", "nf", ",", "16", "*", "nf", ",", "4", ",", "1", ",", "0", ",", "0", ")", "# =>4", "\n", "self", ".", "dec2", "=", "Deconv3d_skip", "(", "16", "*", "2", "*", "nf", ",", "8", "*", "nf", ",", "4", ",", "2", ",", "1", ",", "0", ")", "# =>8", "\n", "self", ".", "dec3", "=", "Deconv3d_skip", "(", "8", "*", "2", "*", "nf", ",", "4", "*", "nf", ",", "4", ",", "2", ",", "1", ",", "0", ")", "# =>16", "\n", "self", ".", "dec4", "=", "Deconv3d_skip", "(", "4", "*", "2", "*", "nf", ",", "2", "*", "nf", ",", "4", ",", "2", ",", "1", ",", "0", ")", "# =>32", "\n", "self", ".", "dec5", "=", "Deconv3d_skip", "(", "4", "*", "nf", ",", "nf", ",", "8", ",", "2", ",", "3", ",", "0", ")", "# =>64", "\n", "self", ".", "dec6", "=", "Deconv3d_skip", "(", "\n", "2", "*", "nf", ",", "1", ",", "4", ",", "2", ",", "1", ",", "0", ",", "is_activate", "=", "False", ")", "# =>128", "\n", "self", ".", "no_linear", "=", "no_linear", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.Unet_3D.forward": [[194, 215], ["networks.Unet_3D.enc1", "networks.Unet_3D.enc2", "networks.Unet_3D.enc3", "networks.Unet_3D.enc4", "networks.Unet_3D.enc5", "networks.Unet_3D.enc6", "networks.Unet_3D.dec2", "networks.Unet_3D.dec3", "networks.Unet_3D.dec4", "networks.Unet_3D.dec5", "networks.Unet_3D.dec6", "networks.Unet_3D.view", "networks.Unet_3D.full_conv_block", "bottleneck.view.view.view", "networks.Unet_3D.dec1", "networks.Unet_3D.dec1", "networks.Unet_3D.size", "networks.Unet_3D.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc1", "=", "self", ".", "enc1", "(", "x", ")", "\n", "enc2", "=", "self", ".", "enc2", "(", "enc1", ")", "\n", "enc3", "=", "self", ".", "enc3", "(", "enc2", ")", "\n", "enc4", "=", "self", ".", "enc4", "(", "enc3", ")", "\n", "enc5", "=", "self", ".", "enc5", "(", "enc4", ")", "\n", "enc6", "=", "self", ".", "enc6", "(", "enc5", ")", "\n", "# print(enc6.size())", "\n", "if", "not", "self", ".", "no_linear", ":", "\n", "            ", "flatten", "=", "enc6", ".", "view", "(", "enc6", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "nf", "*", "32", ")", "\n", "bottleneck", "=", "self", ".", "full_conv_block", "(", "flatten", ")", "\n", "bottleneck", "=", "bottleneck", ".", "view", "(", "enc6", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "nf", "*", "32", ",", "1", ",", "1", ",", "1", ")", "\n", "dec1", "=", "self", ".", "dec1", "(", "bottleneck", ",", "enc6", ")", "\n", "", "else", ":", "\n", "            ", "dec1", "=", "self", ".", "dec1", "(", "enc6", ",", "enc6", ")", "\n", "", "dec2", "=", "self", ".", "dec2", "(", "dec1", ",", "enc5", ")", "\n", "dec3", "=", "self", ".", "dec3", "(", "dec2", ",", "enc4", ")", "\n", "dec4", "=", "self", ".", "dec4", "(", "dec3", ",", "enc3", ")", "\n", "dec5", "=", "self", ".", "dec5", "(", "dec4", ",", "enc2", ")", "\n", "out", "=", "self", ".", "dec6", "(", "dec5", ",", "enc1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.Conv3d_block.__init__": [[218, 224], ["torch.Module.__init__", "torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ncin", ",", "ncout", ",", "kernel_size", ",", "stride", ",", "pad", ",", "dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "ncin", ",", "ncout", ",", "kernel_size", ",", "stride", ",", "pad", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "ncout", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.Conv3d_block.forward": [[226, 228], ["networks.Conv3d_block.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.Deconv3d_skip.__init__": [[231, 243], ["torch.Module.__init__", "torch.Sequential", "torch.ConvTranspose3d", "torch.ConvTranspose3d", "torch.BatchNorm3d", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ncin", ",", "ncout", ",", "kernel_size", ",", "stride", ",", "pad", ",", "extra", "=", "0", ",", "is_activate", "=", "True", ")", ":", "\n", "        ", "super", "(", "Deconv3d_skip", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "is_activate", ":", "\n", "            ", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose3d", "(", "ncin", ",", "ncout", ",", "kernel_size", ",", "\n", "stride", ",", "pad", ",", "extra", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "ncout", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net", "=", "nn", ".", "ConvTranspose3d", "(", "\n", "ncin", ",", "ncout", ",", "kernel_size", ",", "stride", ",", "pad", ",", "extra", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.Deconv3d_skip.forward": [[244, 247], ["torch.cat", "networks.Deconv3d_skip.net"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "skip_in", ")", ":", "\n", "        ", "y", "=", "cat", "(", "(", "x", ",", "skip_in", ")", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "net", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.ViewAsLinear.forward": [[250, 253], ["x.view"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu": [[255, 257], ["torch.ReLU"], "function", ["None"], ["", "", "def", "relu", "(", ")", ":", "\n", "    ", "return", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu_leaky": [[259, 261], ["torch.LeakyReLU"], "function", ["None"], ["", "def", "relu_leaky", "(", ")", ":", "\n", "    ", "return", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.maxpool": [[263, 265], ["torch.MaxPool2d"], "function", ["None"], ["", "def", "maxpool", "(", ")", ":", "\n", "    ", "return", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.dropout": [[267, 269], ["torch.Dropout"], "function", ["None"], ["", "def", "dropout", "(", ")", ":", "\n", "    ", "return", "nn", ".", "Dropout", "(", "p", "=", "0.5", ",", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.conv3d_half": [[271, 274], ["torch.Conv3d"], "function", ["None"], ["", "def", "conv3d_half", "(", "n_ch_in", ",", "n_ch_out", ",", "bias", ")", ":", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "n_ch_in", ",", "n_ch_out", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_2x": [[277, 280], ["torch.ConvTranspose3d"], "function", ["None"], ["", "def", "deconv3d_2x", "(", "n_ch_in", ",", "n_ch_out", ",", "bias", ")", ":", "\n", "    ", "return", "nn", ".", "ConvTranspose3d", "(", "\n", "n_ch_in", ",", "n_ch_out", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.conv3d_minus3": [[283, 286], ["torch.Conv3d"], "function", ["None"], ["", "def", "conv3d_minus3", "(", "n_ch_in", ",", "n_ch_out", ",", "bias", ")", ":", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "n_ch_in", ",", "n_ch_out", ",", "4", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.deconv3d_add3": [[289, 292], ["torch.ConvTranspose3d"], "function", ["None"], ["", "def", "deconv3d_add3", "(", "n_ch_in", ",", "n_ch_out", ",", "bias", ")", ":", "\n", "    ", "return", "nn", ".", "ConvTranspose3d", "(", "\n", "n_ch_in", ",", "n_ch_out", ",", "4", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm1d": [[295, 297], ["torch.BatchNorm1d"], "function", ["None"], ["", "def", "batchnorm1d", "(", "n_feat", ")", ":", "\n", "    ", "return", "nn", ".", "BatchNorm1d", "(", "n_feat", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm": [[299, 301], ["torch.BatchNorm2d"], "function", ["None"], ["", "def", "batchnorm", "(", "n_feat", ")", ":", "\n", "    ", "return", "nn", ".", "BatchNorm2d", "(", "n_feat", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.batchnorm3d": [[303, 305], ["torch.BatchNorm3d"], "function", ["None"], ["", "def", "batchnorm3d", "(", "n_feat", ")", ":", "\n", "    ", "return", "nn", ".", "BatchNorm3d", "(", "n_feat", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.fc": [[307, 309], ["torch.Linear"], "function", ["None"], ["", "def", "fc", "(", "n_in", ",", "n_out", ")", ":", "\n", "    ", "return", "nn", ".", "Linear", "(", "n_in", ",", "n_out", ",", "bias", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.uresnet.Net.__init__": [[11, 54], ["torch.nn.Module.__init__", "list", "networks.revresnet.resnet18", "torch.nn.Conv2d", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList", "zip", "torch.nn.Sequential", "list", "networks.revresnet.revuresnet18", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList", "setattr", "torch.nn.Sequential"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.revuresnet18"], ["def", "__init__", "(", "self", ",", "out_planes", ",", "layer_names", ",", "input_planes", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "module_list", "=", "list", "(", ")", "\n", "resnet", "=", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "in_conv", "=", "nn", ".", "Conv2d", "(", "input_planes", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "module_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "resnet", ".", "conv1", "if", "input_planes", "==", "3", "else", "in_conv", ",", "\n", "resnet", ".", "bn1", ",", "\n", "resnet", ".", "relu", ",", "\n", "resnet", ".", "maxpool", "\n", ")", "\n", ")", "\n", "module_list", ".", "append", "(", "resnet", ".", "layer1", ")", "\n", "module_list", ".", "append", "(", "resnet", ".", "layer2", ")", "\n", "module_list", ".", "append", "(", "resnet", ".", "layer3", ")", "\n", "module_list", ".", "append", "(", "resnet", ".", "layer4", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "ModuleList", "(", "module_list", ")", "\n", "self", ".", "encoder_out", "=", "None", "\n", "\n", "# Decoder", "\n", "self", ".", "decoders", "=", "{", "}", "\n", "for", "out_plane", ",", "layer_name", "in", "zip", "(", "out_planes", ",", "layer_names", ")", ":", "\n", "            ", "module_list", "=", "list", "(", ")", "\n", "revresnet", "=", "revuresnet18", "(", "out_planes", "=", "out_plane", ")", "\n", "module_list", ".", "append", "(", "revresnet", ".", "layer1", ")", "\n", "module_list", ".", "append", "(", "revresnet", ".", "layer2", ")", "\n", "module_list", ".", "append", "(", "revresnet", ".", "layer3", ")", "\n", "module_list", ".", "append", "(", "revresnet", ".", "layer4", ")", "\n", "module_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "revresnet", ".", "deconv1", ",", "\n", "revresnet", ".", "bn1", ",", "\n", "revresnet", ".", "relu", ",", "\n", "revresnet", ".", "deconv2", "\n", ")", "\n", ")", "\n", "module_list", "=", "nn", ".", "ModuleList", "(", "module_list", ")", "\n", "setattr", "(", "self", ",", "'decoder_'", "+", "layer_name", ",", "module_list", ")", "\n", "self", ".", "decoders", "[", "layer_name", "]", "=", "module_list", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.uresnet.Net.forward": [[55, 75], ["list", "uresnet.Net.decoders.items", "f", "list.append", "enumerate", "f", "torch.cat", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "im", ")", ":", "\n", "# Encode", "\n", "        ", "feat", "=", "im", "\n", "feat_maps", "=", "list", "(", ")", "\n", "for", "f", "in", "self", ".", "encoder", ":", "\n", "            ", "feat", "=", "f", "(", "feat", ")", "\n", "feat_maps", ".", "append", "(", "feat", ")", "\n", "", "self", ".", "encoder_out", "=", "feat_maps", "[", "-", "1", "]", "\n", "# Decode", "\n", "outputs", "=", "{", "}", "\n", "for", "layer_name", ",", "decoder", "in", "self", ".", "decoders", ".", "items", "(", ")", ":", "\n", "            ", "x", "=", "feat_maps", "[", "-", "1", "]", "\n", "for", "idx", ",", "f", "in", "enumerate", "(", "decoder", ")", ":", "\n", "                ", "x", "=", "f", "(", "x", ")", "\n", "if", "idx", "<", "len", "(", "decoder", ")", "-", "1", ":", "\n", "                    ", "feat_map", "=", "feat_maps", "[", "-", "(", "idx", "+", "2", ")", "]", "\n", "assert", "feat_map", ".", "shape", "[", "2", ":", "4", "]", "==", "x", ".", "shape", "[", "2", ":", "4", "]", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "", "outputs", "[", "layer_name", "]", "=", "x", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.uresnet.Net_inpaint.__init__": [[82, 125], ["torch.nn.Module.__init__", "list", "networks.revresnet.resnet18", "torch.nn.Conv2d", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList", "torch.nn.ConvTranspose2d", "zip", "torch.nn.Sequential", "list", "networks.revresnet.revuresnet18", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList.append", "torch.nn.ModuleList", "setattr", "torch.nn.Sequential"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.revuresnet18"], ["def", "__init__", "(", "self", ",", "out_planes", ",", "layer_names", ",", "input_planes", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Encoder", "\n", "module_list", "=", "list", "(", ")", "\n", "resnet", "=", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "in_conv", "=", "nn", ".", "Conv2d", "(", "input_planes", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "module_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "resnet", ".", "conv1", "if", "input_planes", "==", "3", "else", "in_conv", ",", "\n", "resnet", ".", "bn1", ",", "\n", "resnet", ".", "relu", ",", "\n", "resnet", ".", "maxpool", "\n", ")", "\n", ")", "\n", "module_list", ".", "append", "(", "resnet", ".", "layer1", ")", "\n", "module_list", ".", "append", "(", "resnet", ".", "layer2", ")", "\n", "module_list", ".", "append", "(", "resnet", ".", "layer3", ")", "\n", "module_list", ".", "append", "(", "resnet", ".", "layer4", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "ModuleList", "(", "module_list", ")", "\n", "self", ".", "encoder_out", "=", "None", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "1", ",", "kernel_size", "=", "8", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ",", "output_padding", "=", "0", ")", "\n", "# Decoder", "\n", "self", ".", "decoders", "=", "{", "}", "\n", "for", "out_plane", ",", "layer_name", "in", "zip", "(", "out_planes", ",", "layer_names", ")", ":", "\n", "            ", "module_list", "=", "list", "(", ")", "\n", "revresnet", "=", "revuresnet18", "(", "out_planes", "=", "out_plane", ")", "\n", "module_list", ".", "append", "(", "revresnet", ".", "layer1", ")", "\n", "module_list", ".", "append", "(", "revresnet", ".", "layer2", ")", "\n", "module_list", ".", "append", "(", "revresnet", ".", "layer3", ")", "\n", "module_list", ".", "append", "(", "revresnet", ".", "layer4", ")", "\n", "module_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "revresnet", ".", "deconv1", ",", "\n", "revresnet", ".", "bn1", ",", "\n", "revresnet", ".", "relu", ",", "\n", "self", ".", "deconv2", "\n", ")", "\n", ")", "\n", "module_list", "=", "nn", ".", "ModuleList", "(", "module_list", ")", "\n", "setattr", "(", "self", ",", "'decoder_'", "+", "layer_name", ",", "module_list", ")", "\n", "self", ".", "decoders", "[", "layer_name", "]", "=", "module_list", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.uresnet.Net_inpaint.forward": [[126, 146], ["list", "uresnet.Net_inpaint.decoders.items", "f", "list.append", "enumerate", "f", "torch.cat", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "im", ")", ":", "\n", "# Encode", "\n", "        ", "feat", "=", "im", "\n", "feat_maps", "=", "list", "(", ")", "\n", "for", "f", "in", "self", ".", "encoder", ":", "\n", "            ", "feat", "=", "f", "(", "feat", ")", "\n", "feat_maps", ".", "append", "(", "feat", ")", "\n", "", "self", ".", "encoder_out", "=", "feat_maps", "[", "-", "1", "]", "\n", "# Decode", "\n", "outputs", "=", "{", "}", "\n", "for", "layer_name", ",", "decoder", "in", "self", ".", "decoders", ".", "items", "(", ")", ":", "\n", "            ", "x", "=", "feat_maps", "[", "-", "1", "]", "\n", "for", "idx", ",", "f", "in", "enumerate", "(", "decoder", ")", ":", "\n", "                ", "x", "=", "f", "(", "x", ")", "\n", "if", "idx", "<", "len", "(", "decoder", ")", "-", "1", ":", "\n", "                    ", "feat_map", "=", "feat_maps", "[", "-", "(", "idx", "+", "2", ")", "]", "\n", "assert", "feat_map", ".", "shape", "[", "2", ":", "4", "]", "==", "x", ".", "shape", "[", "2", ":", "4", "]", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "feat_map", ")", ",", "dim", "=", "1", ")", "\n", "", "", "outputs", "[", "layer_name", "]", "=", "x", "\n", "", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevBasicBlock.__init__": [[24, 36], ["torch.nn.Module.__init__", "revresnet.deconv3x3", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "revresnet.deconv3x3", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.deconv3x3", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.deconv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "upsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "RevBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "deconv1", "=", "deconv3x3", "(", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", "\n", "# Note that in ResNet, the stride is on the second layer", "\n", "# Here we put it on the first layer as the mirrored block", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "deconv2", "=", "deconv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "stride", ",", "\n", "output_padding", "=", "1", "if", "stride", ">", "1", "else", "0", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevBasicBlock.forward": [[37, 49], ["revresnet.RevBasicBlock.deconv1", "revresnet.RevBasicBlock.bn1", "revresnet.RevBasicBlock.relu", "revresnet.RevBasicBlock.deconv2", "revresnet.RevBasicBlock.bn2", "revresnet.RevBasicBlock.relu", "revresnet.RevBasicBlock.upsample"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "deconv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "deconv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "upsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "upsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevBottleneck.__init__": [[54, 86], ["torch.nn.Module.__init__", "int", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "upsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "RevBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bottleneck_planes", "=", "int", "(", "inplanes", "/", "4", ")", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "inplanes", ",", "\n", "bottleneck_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "stride", "=", "1", "\n", ")", "# conv and deconv are the same when kernel size is 1", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "bottleneck_planes", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "bottleneck_planes", ",", "\n", "bottleneck_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "bottleneck_planes", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "bottleneck_planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "stride", "=", "stride", ",", "\n", "output_padding", "=", "1", "if", "stride", ">", "0", "else", "0", "\n", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevBottleneck.forward": [[87, 102], ["revresnet.RevBottleneck.deconv1", "revresnet.RevBottleneck.bn1", "revresnet.RevBottleneck.relu", "revresnet.RevBottleneck.deconv2", "revresnet.RevBottleneck.bn2", "revresnet.RevBottleneck.relu", "revresnet.RevBottleneck.deconv3", "revresnet.RevBottleneck.bn3", "revresnet.RevBottleneck.relu", "revresnet.RevBottleneck.upsample"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "deconv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "deconv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "deconv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "upsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "upsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__": [[105, 145], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "revresnet.RevResNet._make_layer", "revresnet.RevResNet._make_layer", "revresnet.RevResNet._make_layer", "revresnet.RevResNet._make_layer", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.__init__", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet._make_layer", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet._make_layer", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet._make_layer", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "planes", ",", "inplanes", "=", "None", ",", "out_planes", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        planes: # output channels for each block\n        inplanes: # input channels for the input at each layer\n            If missing, it will be inferred.\n        \"\"\"", "\n", "if", "inplanes", "is", "None", ":", "\n", "            ", "inplanes", "=", "[", "512", "]", "\n", "", "self", ".", "inplanes", "=", "inplanes", "[", "0", "]", "\n", "super", "(", "RevResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inplanes_after_blocks", "=", "inplanes", "[", "4", "]", "if", "len", "(", "inplanes", ")", ">", "4", "else", "planes", "[", "3", "]", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "inplanes_after_blocks", ",", "\n", "planes", "[", "3", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "output_padding", "=", "1", "\n", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "planes", "[", "3", "]", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", "output_padding", "=", "1", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "planes", "[", "0", "]", ",", "layers", "[", "0", "]", ",", "stride", "=", "2", ")", "\n", "if", "len", "(", "inplanes", ")", ">", "1", ":", "\n", "            ", "self", ".", "inplanes", "=", "inplanes", "[", "1", "]", "\n", "", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "planes", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "if", "len", "(", "inplanes", ")", ">", "2", ":", "\n", "            ", "self", ".", "inplanes", "=", "inplanes", "[", "2", "]", "\n", "", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "planes", "[", "2", "]", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "if", "len", "(", "inplanes", ")", ">", "3", ":", "\n", "            ", "self", ".", "inplanes", "=", "inplanes", "[", "3", "]", "\n", "", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "planes", "[", "3", "]", ",", "layers", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet._make_layer": [[146, 166], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "upsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", ":", "\n", "            ", "upsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "output_padding", "=", "1", "if", "stride", ">", "1", "else", "0", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ",", "\n", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "upsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.RevResNet.forward": [[167, 177], ["revresnet.RevResNet.layer1", "revresnet.RevResNet.layer2", "revresnet.RevResNet.layer3", "revresnet.RevResNet.layer4", "revresnet.RevResNet.deconv1", "revresnet.RevResNet.bn1", "revresnet.RevResNet.relu", "revresnet.RevResNet.deconv2"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.networks.relu"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "deconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "deconv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.deconv3x3": [[9, 18], ["torch.nn.ConvTranspose2d"], "function", ["None"], ["def", "deconv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "output_padding", "=", "0", ")", ":", "\n", "    ", "return", "nn", ".", "ConvTranspose2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "output_padding", "=", "output_padding", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.revresnet18": [[179, 187], ["revresnet.RevResNet"], "function", ["None"], ["", "", "def", "revresnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "RevResNet", "(", "\n", "RevBasicBlock", ",", "\n", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "512", ",", "256", ",", "128", ",", "64", "]", ",", "\n", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.revuresnet18": [[189, 201], ["revresnet.RevResNet"], "function", ["None"], ["", "def", "revuresnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Reverse ResNet-18 compatible with the U-Net setting\n    \"\"\"", "\n", "model", "=", "RevResNet", "(", "\n", "RevBasicBlock", ",", "\n", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "[", "256", ",", "128", ",", "64", ",", "64", "]", ",", "\n", "inplanes", "=", "[", "512", ",", "512", ",", "256", ",", "128", ",", "128", "]", ",", "\n", "**", "kwargs", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet._num_parameters": [[203, 206], ["sum", "x.numel", "list", "net.parameters"], "function", ["None"], ["", "def", "_num_parameters", "(", "net", ")", ":", "\n", "    ", "return", "sum", "(", "[", "\n", "x", ".", "numel", "(", ")", "for", "x", "in", "list", "(", "net", ".", "parameters", "(", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.main": [[209, 233], ["torchvision.models.resnet18", "revresnet.revresnet18", "torch.nn.AvgPool2d", "torchvision.models.resnet18.named_children", "revresnet18.named_children", "print", "torchvision.models.resnet18.", "print", "print", "revresnet18.", "print", "revresnet.RevResNet", "print", "mod.register_forward_hook", "mod.register_forward_hook", "revresnet._num_parameters", "torch.zeros", "revresnet._num_parameters", "torch.zeros", "revresnet._num_parameters", "print", "print"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet.revresnet18", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet._num_parameters", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet._num_parameters", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.networks.revresnet._num_parameters"], ["", "def", "main", "(", ")", ":", "\n", "    ", "net", "=", "resnet18", "(", ")", "\n", "revnet", "=", "revresnet18", "(", ")", "\n", "net", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "8", ")", "\n", "for", "name", ",", "mod", "in", "net", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "__name", "=", "name", "\n", "mod", ".", "register_forward_hook", "(", "\n", "lambda", "mod", ",", "input", ",", "output", ":", "print", "(", "mod", ".", "__name", ",", "output", ".", "shape", ")", "\n", ")", "\n", "", "for", "name", ",", "mod", "in", "revnet", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "__name", "=", "name", "\n", "mod", ".", "register_forward_hook", "(", "\n", "lambda", "mod", ",", "input", ",", "output", ":", "print", "(", "mod", ".", "__name", ",", "output", ".", "shape", ")", "\n", ")", "\n", "# print(net)", "\n", "", "print", "(", "'resnet'", ",", "_num_parameters", "(", "net", ")", ")", "\n", "net", "(", "torch", ".", "zeros", "(", "2", ",", "3", ",", "256", ",", "256", ")", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'revresnet'", ",", "_num_parameters", "(", "revnet", ")", ")", "\n", "# print(revnet)", "\n", "revnet", "(", "torch", ".", "zeros", "(", "2", ",", "512", ",", "8", ",", "8", ")", ")", "\n", "print", "(", "''", ")", "\n", "revunet", "=", "RevResNet", "(", "RevBasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "[", "512", ",", "512", ",", "256", ",", "128", "]", ")", "\n", "print", "(", "'revunet'", ",", "_num_parameters", "(", "revunet", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.options.options_train.add_general_arguments": [[9, 89], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "add_general_arguments", "(", "parser", ")", ":", "\n", "# Parameters that will NOT be overwritten when resuming", "\n", "    ", "unique_params", "=", "{", "'gpu'", ",", "'resume'", ",", "'epoch'", ",", "'workers'", ",", "'batch_size'", ",", "'save_net'", ",", "'epoch_batches'", ",", "'logdir'", "}", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "'0'", ",", "type", "=", "str", ",", "\n", "help", "=", "'gpu to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--manual_seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'manual seed for randomness'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'resume training by loading checkpoint.pt or best.pt. Use 0 for training from scratch, -1 for last and -2 for previous best. Use positive number for a specific epoch. \\\n                            Most options will be overwritten to resume training with exactly same environment'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--suffix'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Suffix for `logdir` that will be formatted with `opt`, e.g., '{classes}_lr{lr}'\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'number of epochs to train'", ")", "\n", "\n", "# Dataset IO", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'dataset to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'number of data loading workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--classes'", ",", "default", "=", "'chair'", ",", "type", "=", "str", ",", "\n", "help", "=", "'class to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'training batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_batches'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "'number of batches used per epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_batches'", ",", "default", "=", "None", ",", "\n", "type", "=", "int", ",", "help", "=", "'max number of batches used for evaluation per epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_at_start'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'run evaluation before starting to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_time'", ",", "action", "=", "'store_true'", ",", "help", "=", "'adding time log'", ")", "\n", "\n", "# Network name", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'network type to use'", ")", "\n", "\n", "# Optimizer", "\n", "parser", ".", "add_argument", "(", "'--optim'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ",", "\n", "help", "=", "'optimizer to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam_beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'beta1 of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam_beta2'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'beta2 of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--sgd_momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "\"momentum factor of SGD\"", ")", "\n", "parser", ".", "add_argument", "(", "'--sgd_dampening'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "\"dampening for momentum of SGD\"", ")", "\n", "parser", ".", "add_argument", "(", "'--wdecay'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "\n", "# Logging and visualization", "\n", "parser", ".", "add_argument", "(", "'--logdir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Root directory for logging. Actual dir is [logdir]/[net_classes_dataset]/[expr_id]'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_batch'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Log batch loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--expr_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Experiment index. non-positive ones are overwritten by default. Use 0 for code test. '", ")", "\n", "parser", ".", "add_argument", "(", "'--save_net'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Period of saving network weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_net_opt'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Save optimizer state in regular network saving'", ")", "\n", "parser", ".", "add_argument", "(", "'--vis_every_vali'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Visualize every N epochs during validation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--vis_every_train'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Visualize every N epochs during training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--vis_batches_vali'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "\"# batches to visualize during validation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--vis_batches_train'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "\"# batches to visualize during training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use tensorboard for logging. If enabled, the output log will be at [logdir]/[tensorboard]/[net_classes_dataset]/[expr_id]'", ")", "\n", "parser", ".", "add_argument", "(", "'--vis_workers'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "\"# workers for the visualizer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--vis_param_f'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Parameter file read by the visualizer on every batch; defaults to 'visualize/config.json'\"", ")", "\n", "\n", "return", "parser", ",", "unique_params", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.options.options_train.overwrite": [[91, 104], ["vars", "torch.load", "torch.load.items", "argparse.Namespace", "print", "print", "str", "str"], "function", ["None"], ["", "def", "overwrite", "(", "opt", ",", "opt_f_old", ",", "unique_params", ")", ":", "\n", "    ", "opt_dict", "=", "vars", "(", "opt", ")", "\n", "opt_dict_old", "=", "torch", ".", "load", "(", "opt_f_old", ")", "\n", "for", "k", ",", "v", "in", "opt_dict_old", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "opt_dict", ":", "\n", "            ", "if", "(", "k", "not", "in", "unique_params", ")", "and", "(", "opt_dict", "[", "k", "]", "!=", "v", ")", ":", "\n", "                ", "print", "(", "str_warning", ",", "\"Overwriting %s for resuming training: %s -> %s\"", "\n", "%", "(", "k", ",", "str", "(", "opt_dict", "[", "k", "]", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "opt_dict", "[", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "str_warning", ",", "\"Ignoring %s, an old option that no longer exists\"", "%", "k", ")", "\n", "", "", "opt", "=", "argparse", ".", "Namespace", "(", "**", "opt_dict", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.options.options_train.parse": [[106, 128], ["argparse.ArgumentParser", "options_train.add_general_arguments", "argparse.ArgumentParser.parse_known_args", "datasets.get_dataset().add_arguments", "models.get_model().add_arguments", "argparse.ArgumentParser.parse_args", "unique_params.union.union", "unique_params.union.union", "add_additional_arguments", "unique_params.union.union", "sys.argv.append", "datasets.get_dataset", "models.get_model"], "function", ["home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.options.options_train.add_general_arguments", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.add_arguments", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.shapehd.Model_test.add_arguments", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.qq456cvb_SemanticTransfer.models.__init__.get_model"], ["", "def", "parse", "(", "add_additional_arguments", "=", "None", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ",", "unique_params", "=", "add_general_arguments", "(", "parser", ")", "\n", "if", "add_additional_arguments", "is", "not", "None", ":", "\n", "        ", "parser", ",", "unique_params_additional", "=", "add_additional_arguments", "(", "parser", ")", "\n", "unique_params", "=", "unique_params", ".", "union", "(", "unique_params_additional", ")", "\n", "", "opt_general", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "dataset_name", ",", "net_name", "=", "opt_general", ".", "dataset", ",", "opt_general", ".", "net", "\n", "del", "opt_general", "\n", "\n", "# Add parsers depending on dataset and models", "\n", "parser", ",", "unique_params_dataset", "=", "get_dataset", "(", "dataset_name", ")", ".", "add_arguments", "(", "parser", ")", "\n", "parser", ",", "unique_params_model", "=", "get_model", "(", "net_name", ")", ".", "add_arguments", "(", "parser", ")", "\n", "\n", "# Manually add '-h' after adding all parser arguments", "\n", "if", "'--printhelp'", "in", "sys", ".", "argv", ":", "\n", "        ", "sys", ".", "argv", ".", "append", "(", "'-h'", ")", "\n", "\n", "", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "unique_params", "=", "unique_params", ".", "union", "(", "unique_params_dataset", ")", "\n", "unique_params", "=", "unique_params", ".", "union", "(", "unique_params_model", ")", "\n", "return", "opt", ",", "unique_params", "\n", "", ""]]}