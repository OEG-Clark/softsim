{"home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.None.main.save_results": [[20, 59], ["id.replace.replace", "time.strftime", "os.path.join", "os.mkdir", "open", "open.writelines", "open.close", "time.gmtime", "os.path.join", "json.dumps", "open", "open.close", "open", "open.writelines", "open.close", "os.path.join", "open.write", "os.path.join", "str", "str"], "function", ["None"], ["def", "save_results", "(", "experiment_definition", ",", "labels", ",", "accuracy", ",", "logs", ")", ":", "\n", "    ", "\"\"\"\n    Saves the results in the ./experiment_results directory in a folder named <acc>_<experiment>_<timestamp>.\n    Saves 3 files: \n        1) experiment.json, which contains all the hyperparameters used for the experiment\n        2) labels.lst, which contains all the predicted labels on the dev set\n        3) log.txt, which contains any log entries that the experiment may have returned\n    \"\"\"", "\n", "\n", "# create folder for results", "\n", "id", "=", "experiment_definition", "[", "'experiment_id'", "]", "\n", "hp", "=", "experiment_definition", "[", "'hyperparameters'", "]", "\n", "model_checkpoint", "=", "hp", "[", "'model_checkpoint'", "]", "if", "'model_checkpoint'", "in", "hp", "else", "\"\"", "\n", "id", "=", "model_checkpoint", "+", "\"_\"", "+", "id", "if", "model_checkpoint", "else", "id", "\n", "id", "=", "id", ".", "replace", "(", "'/'", ",", "'_'", ")", "\n", "timestamp", "=", "time", ".", "strftime", "(", "\"%m_%d__%H_%M_%S\"", ",", "time", ".", "gmtime", "(", ")", ")", "\n", "base_path", "=", "os", ".", "path", ".", "join", "(", "'experiment_results'", ",", "str", "(", "accuracy", ")", "+", "\"_\"", "+", "id", "+", "'_'", "+", "timestamp", ")", "\n", "os", ".", "mkdir", "(", "base_path", ")", "\n", "\n", "# save hyperparameters", "\n", "file_name", "=", "\"experiment.json\"", "\n", "file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "file_name", ")", ",", "\"w\"", ")", "\n", "file", ".", "writelines", "(", "json", ".", "dumps", "(", "experiment_definition", ",", "indent", "=", "4", ")", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n", "# save labels", "\n", "if", "labels", ":", "\n", "        ", "file_name", "=", "\"labels.lst\"", "\n", "file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "file_name", ")", ",", "\"w\"", ")", "\n", "for", "l", "in", "labels", ":", "\n", "            ", "file", ".", "write", "(", "str", "(", "l", ")", "+", "'\\n'", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "\n", "# save logs, if any were returned", "\n", "", "if", "logs", ":", "\n", "        ", "file_name", "=", "\"log.txt\"", "\n", "file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "file_name", ")", ",", "\"w\"", ")", "\n", "file", ".", "writelines", "(", "logs", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.None.main.product_dict": [[60, 71], ["kwargs.keys", "kwargs.values", "itertools.product", "dict", "zip"], "function", ["None"], ["", "", "def", "product_dict", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Given a dictionary such as {a: [1,2,3], b: [4,5,6]}\n    Iterates through all possbiel combinations: [{a: 1, b: 4}, {a: 1, b: 5}, {a: 1, b: 6}, ....]\n\n    Code taken from: https://stackoverflow.com/questions/5228158/cartesian-product-of-a-dictionary-of-lists\n    \"\"\"", "\n", "keys", "=", "kwargs", ".", "keys", "(", ")", "\n", "vals", "=", "kwargs", ".", "values", "(", ")", "\n", "for", "instance", "in", "product", "(", "*", "vals", ")", ":", "\n", "        ", "yield", "dict", "(", "zip", "(", "keys", ",", "instance", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.None.main.expand_experiments": [[73, 100], ["main.product_dict", "expanded_experiments.append", "column_names.append", "experiment_definition.copy", "experiment_definition[].copy", "experiment_definition.copy.pop", "combination.items", "expanded_experiments.append"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.None.main.product_dict"], ["", "", "def", "expand_experiments", "(", "experiments", ")", ":", "\n", "    ", "\"\"\"\n    For every experiment that has 'try_combinations': [column_a, column_b, ...] defined, \n    expands it into multiple separate experiments, trying all possible combinations of the values given in column_a, column_b, ....\n    \"\"\"", "\n", "expanded_experiments", "=", "[", "]", "\n", "for", "experiment_definition", "in", "experiments", ":", "\n", "        ", "if", "'try_combinations'", "in", "experiment_definition", ":", "\n", "            ", "column_names", "=", "experiment_definition", "[", "'try_combinations'", "]", "\n", "if", "'use_first_value_that_works'", "in", "experiment_definition", ":", "\n", "                ", "column_names", ".", "append", "(", "experiment_definition", "[", "'use_first_value_that_works'", "]", ")", "\n", "", "all_possible_values", "=", "{", "column_name", ":", "experiment_definition", "[", "'hyperparameters'", "]", "[", "column_name", "]", "for", "column_name", "in", "column_names", "}", "\n", "all_possible_value_combinations", "=", "product_dict", "(", "**", "all_possible_values", ")", "\n", "\n", "# create a new experiment definition for each combination", "\n", "for", "combination", "in", "all_possible_value_combinations", ":", "\n", "                ", "new_experiment_definition", "=", "experiment_definition", ".", "copy", "(", ")", "\n", "new_experiment_definition", "[", "'hyperparameters'", "]", "=", "experiment_definition", "[", "'hyperparameters'", "]", ".", "copy", "(", ")", "\n", "\n", "new_experiment_definition", ".", "pop", "(", "'try_combinations'", ")", "\n", "# change the value of each hyperparameter that are being varied", "\n", "for", "key", ",", "value", "in", "combination", ".", "items", "(", ")", ":", "\n", "                    ", "new_experiment_definition", "[", "'hyperparameters'", "]", "[", "key", "]", "=", "value", "\n", "", "expanded_experiments", ".", "append", "(", "new_experiment_definition", ")", "\n", "", "", "else", ":", "\n", "            ", "expanded_experiments", ".", "append", "(", "experiment_definition", ")", "\n", "", "", "return", "expanded_experiments", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.word_incidence_features.features1": [[6, 23], ["list", "len", "vectorizer.sparse_incidence_vector", "zip"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.sparse_incidence_vector"], ["def", "features1", "(", "rows", ",", "word_to_index", ")", ":", "\n", "    ", "\"\"\"\n    Features: is the word present in any of the two observations or hypothesis\n    \"\"\"", "\n", "# make training instances with the first hypothesis", "\n", "instances", "=", "[", "(", "row", "[", "1", "]", "+", "\" \"", "+", "row", "[", "2", "]", "+", "\" \"", "+", "row", "[", "3", "]", ",", "1", "if", "row", "[", "5", "]", "==", "'1'", "else", "0", ")", "for", "row", "in", "rows", "]", "\n", "\n", "# add training instances with the second hypothesis", "\n", "instances", "+=", "[", "(", "row", "[", "1", "]", "+", "\" \"", "+", "row", "[", "2", "]", "+", "\" \"", "+", "row", "[", "4", "]", ",", "1", "if", "row", "[", "5", "]", "==", "'2'", "else", "0", ")", "for", "row", "in", "rows", "]", "\n", "\n", "# change the text into sparse incidence vectors", "\n", "vectorized_instances", "=", "[", "(", "vectorizer", ".", "sparse_incidence_vector", "(", "text", ",", "word_to_index", ")", ",", "label", ")", "for", "(", "text", ",", "label", ")", "in", "instances", "]", "\n", "\n", "# convert from list of (vector, label) tuples into two separate lists", "\n", "[", "x", ",", "y", "]", "=", "[", "list", "(", "t", ")", "for", "t", "in", "zip", "(", "*", "vectorized_instances", ")", "]", "\n", "\n", "return", "x", ",", "y", ",", "len", "(", "word_to_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.word_incidence_features.features2": [[24, 41], ["list", "len", "vectorizer.sparse_incidence_vector().intersection", "zip", "vectorizer.sparse_incidence_vector", "vectorizer.sparse_incidence_vector"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.sparse_incidence_vector", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.sparse_incidence_vector"], ["", "def", "features2", "(", "rows", ",", "word_to_index", ")", ":", "\n", "    ", "\"\"\"\n    Features: is the word present in both the hypothesis and either of the observations\n    \"\"\"", "\n", "# make training instances with the first hypothesis", "\n", "instances", "=", "[", "(", "row", "[", "1", "]", "+", "\" \"", "+", "row", "[", "2", "]", ",", "row", "[", "3", "]", ",", "1", "if", "row", "[", "5", "]", "==", "'1'", "else", "0", ")", "for", "row", "in", "rows", "]", "\n", "\n", "# add training instances with the second hypothesis", "\n", "instances", "+=", "[", "(", "row", "[", "1", "]", "+", "\" \"", "+", "row", "[", "2", "]", ",", "row", "[", "4", "]", ",", "1", "if", "row", "[", "5", "]", "==", "'2'", "else", "0", ")", "for", "row", "in", "rows", "]", "\n", "\n", "# change the text into sparse incidence vectors", "\n", "vectorized_instances", "=", "[", "(", "vectorizer", ".", "sparse_incidence_vector", "(", "observations", ",", "word_to_index", ")", ".", "intersection", "(", "vectorizer", ".", "sparse_incidence_vector", "(", "hypothesis", ",", "word_to_index", ")", ")", ",", "label", ")", "for", "(", "observations", ",", "hypothesis", ",", "label", ")", "in", "instances", "]", "\n", "\n", "# convert from list of (vector, label) tuples into two separate lists", "\n", "[", "x", ",", "y", "]", "=", "[", "list", "(", "t", ")", "for", "t", "in", "zip", "(", "*", "vectorized_instances", ")", "]", "\n", "\n", "return", "x", ",", "y", ",", "len", "(", "word_to_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.word_incidence_features.features3": [[42, 63], ["vectorizer.sparse_incidence_vector", "vectorizer.sparse_incidence_vector", "vectorized_instances.append", "list", "zip", "len", "len"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.sparse_incidence_vector", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.sparse_incidence_vector"], ["", "def", "features3", "(", "rows", ",", "word_to_index", ")", ":", "\n", "    ", "\"\"\"\n    Features: two separate features for each word - is it present in either of the observations, is it present in the hypothesis\n    \"\"\"", "\n", "# make training instances with the first hypothesis", "\n", "instances", "=", "[", "(", "row", "[", "1", "]", "+", "\" \"", "+", "row", "[", "2", "]", ",", "row", "[", "3", "]", ",", "1", "if", "row", "[", "5", "]", "==", "'1'", "else", "0", ")", "for", "row", "in", "rows", "]", "\n", "\n", "# add training instances with the second hypothesis", "\n", "instances", "+=", "[", "(", "row", "[", "1", "]", "+", "\" \"", "+", "row", "[", "2", "]", ",", "row", "[", "4", "]", ",", "1", "if", "row", "[", "5", "]", "==", "'2'", "else", "0", ")", "for", "row", "in", "rows", "]", "\n", "\n", "# change the text into sparse incidence vectors", "\n", "vectorized_instances", "=", "[", "]", "\n", "for", "(", "observations", ",", "hypothesis", ",", "label", ")", "in", "instances", ":", "\n", "        ", "obs", "=", "vectorizer", ".", "sparse_incidence_vector", "(", "observations", ",", "word_to_index", ")", "\n", "hyp", "=", "vectorizer", ".", "sparse_incidence_vector", "(", "hypothesis", ",", "word_to_index", ")", "\n", "vectorized_instances", ".", "append", "(", "(", "obs", "|", "{", "f", "+", "len", "(", "word_to_index", ")", "for", "f", "in", "hyp", "}", ",", "label", ")", ")", "\n", "\n", "# convert from list of (vector, label) tuples into two separate lists", "\n", "", "[", "x", ",", "y", "]", "=", "[", "list", "(", "t", ")", "for", "t", "in", "zip", "(", "*", "vectorized_instances", ")", "]", "\n", "\n", "return", "x", ",", "y", ",", "len", "(", "word_to_index", ")", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.word_incidence_features.prune_rare_features": [[66, 86], ["enumerate"], "function", ["None"], ["", "def", "prune_rare_features", "(", "x", ",", "y", ",", "total_feature_amount", ",", "threshold", "=", "1", ",", "x_dev", "=", "None", ",", "y_dev", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Removes all the features that appear less than threshold times in x.\n    If a separate dev set is passed in x_dev/y_dev arguments, the same features that were removed from x and y will also be removed from these.\n    Note that since features are stored densely with just their index, there's no point in trying to reindex the other features,\n    since that wouldn't free up any space.\n    \"\"\"", "\n", "feature_counts", "=", "[", "0", "]", "*", "total_feature_amount", "\n", "for", "instance", "in", "x", ":", "\n", "        ", "for", "f", "in", "instance", ":", "\n", "            ", "feature_counts", "[", "f", "]", "+=", "1", "\n", "\n", "", "", "features_to_remove", "=", "{", "i", "for", "i", ",", "count", "in", "enumerate", "(", "feature_counts", ")", "if", "count", "<", "threshold", "}", "\n", "\n", "x", "=", "[", "features", "-", "features_to_remove", "for", "features", "in", "x", "]", "\n", "if", "x_dev", "is", "not", "None", "and", "y_dev", "is", "not", "None", ":", "\n", "        ", "x_dev", "=", "[", "features", "-", "features_to_remove", "for", "features", "in", "x_dev", "]", "\n", "return", "x", ",", "y", ",", "x_dev", ",", "y_dev", "\n", "\n", "", "return", "x", ",", "y", "", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.word_embeddings.EmbeddingProxy.__init__": [[18, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wv", ")", ":", "\n", "        ", "self", ".", "wv", "=", "wv", "\n", "self", ".", "vector_size", "=", "wv", ".", "vector_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.word_embeddings.train_embedding_model": [[5, 12], ["gensim.models.Word2Vec", "gensim.models.FastText"], "function", ["None"], ["def", "train_embedding_model", "(", "documents", ",", "type", "=", "\"word2vec\"", ",", "vector_size", "=", "300", ",", "min_count", "=", "100", ",", "skipgram", "=", "0", ")", ":", "\n", "    ", "if", "type", "==", "\"word2vec\"", ":", "\n", "        ", "return", "gensim", ".", "models", ".", "Word2Vec", "(", "sentences", "=", "documents", ",", "vector_size", "=", "vector_size", ",", "min_count", "=", "min_count", ",", "sg", "=", "skipgram", ")", "\n", "", "elif", "type", "==", "\"fasttext\"", ":", "\n", "        ", "return", "gensim", ".", "models", ".", "FastText", "(", "sentences", "=", "documents", ",", "vector_size", "=", "vector_size", ",", "min_count", "=", "min_count", ",", "sg", "=", "skipgram", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.word_embeddings.get_pretrained_embeddings": [[13, 15], ["word_embeddings.EmbeddingProxy", "gensim.downloader.load"], "function", ["None"], ["", "", "def", "get_pretrained_embeddings", "(", "type", ")", ":", "\n", "    ", "return", "EmbeddingProxy", "(", "gensim", ".", "downloader", ".", "load", "(", "type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.return_len_and_vocabulary": [[7, 15], ["set", "vectorizer.preprocess_sentence", "list", "len"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.preprocess_sentence"], ["def", "return_len_and_vocabulary", "(", "list_of_rows", ")", ":", "\n", "#clean the corpus.", "\n", "    ", "vocab", "=", "set", "(", ")", "\n", "for", "sent", "in", "list_of_rows", ":", "\n", "        ", "new_sent", "=", "sent", "[", "1", "]", "+", "\" \"", "+", "sent", "[", "2", "]", "+", "\" \"", "+", "sent", "[", "3", "]", "+", "\" \"", "+", "sent", "[", "4", "]", "\n", "sentence", "=", "preprocess_sentence", "(", "new_sent", ")", "\n", "vocab", "|=", "{", "word", "for", "word", "in", "sentence", "}", "\n", "", "return", "list", "(", "vocab", ")", ",", "len", "(", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.create_token_index": [[16, 23], ["None"], "function", ["None"], ["", "def", "create_token_index", "(", "vocab", ")", ":", "\n", "    ", "index_word", "=", "{", "}", "\n", "i", "=", "0", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "index_word", "[", "word", "]", "=", "i", "\n", "i", "+=", "1", "\n", "", "return", "index_word", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.return_count_vector": [[24, 35], ["collections.defaultdict", "numpy.zeros", "collections.defaultdict.items"], "function", ["None"], ["", "def", "return_count_vector", "(", "sent", ",", "index_word", ",", "len_vector", ")", ":", "\n", "    ", "count_dict", "=", "defaultdict", "(", "int", ")", "\n", "vec", "=", "np", ".", "zeros", "(", "len_vector", ")", "\n", "for", "item", "in", "sent", ":", "\n", "        ", "count_dict", "[", "item", "]", "+=", "1", "\n", "for", "key", ",", "item", "in", "count_dict", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "vec", "[", "index_word", "[", "key", "]", "]", "=", "item", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "", "", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.sparse_incidence_vector": [[36, 42], ["vectorizer.preprocess_sentence"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.preprocess_sentence"], ["", "def", "sparse_incidence_vector", "(", "sentence", ",", "word_to_index", ")", ":", "\n", "    ", "\"\"\"\n    Given a string and a dictionary that maps words to their index in the vocabulary, \n    returns a set containing all the indexes of the words that the sentence contains.\n    \"\"\"", "\n", "return", "{", "word_to_index", "[", "w", "]", "for", "w", "in", "preprocess_sentence", "(", "sentence", ")", "if", "w", "in", "word_to_index", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.preprocess_sentence": [[43, 45], ["w.lower", "sent.split", "w.isalpha"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTreeNode.split"], ["", "def", "preprocess_sentence", "(", "sent", ")", ":", "\n", "    ", "return", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "sent", ".", "split", "(", "\" \"", ")", "if", "w", ".", "isalpha", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.fit_tfidf_vectorizer": [[46, 50], ["sklearn.feature_extraction.text.TfidfVectorizer", "sklearn.feature_extraction.text.TfidfVectorizer.fit"], "function", ["None"], ["", "def", "fit_tfidf_vectorizer", "(", "corpus", ")", ":", "\n", "    ", "vectorizer", "=", "TfidfVectorizer", "(", "min_df", "=", "3", ",", "max_features", "=", "None", ",", "strip_accents", "=", "'unicode'", ",", "analyzer", "=", "'word'", ",", "token_pattern", "=", "r'\\w{1,}'", ",", "ngram_range", "=", "(", "1", ",", "2", ")", ",", "use_idf", "=", "1", ",", "smooth_idf", "=", "1", ",", "sublinear_tf", "=", "1", ",", "stop_words", "=", "'english'", ")", "\n", "vect", "=", "vectorizer", ".", "fit", "(", "corpus", ")", "\n", "return", "vect", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.transform_tfidf_vectorizer": [[51, 53], ["vect.transform"], "function", ["None"], ["", "def", "transform_tfidf_vectorizer", "(", "vect", ",", "sent", ")", ":", "\n", "    ", "return", "vect", ".", "transform", "(", "sent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.create_tfidf_corpus": [[54, 60], ["corpus.append"], "function", ["None"], ["", "def", "create_tfidf_corpus", "(", "list_of_rows", ")", ":", "\n", "    ", "corpus", "=", "[", "]", "\n", "for", "row", "in", "list_of_rows", ":", "\n", "        ", "sent", "=", "row", "[", "1", "]", "+", "\" \"", "+", "row", "[", "2", "]", "+", "\" \"", "+", "row", "[", "3", "]", "+", "\" \"", "+", "row", "[", "4", "]", "\n", "corpus", ".", "append", "(", "sent", ")", "\n", "", "return", "corpus", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.return_tfidf_row_lists": [[61, 74], ["obs1.append", "obs2.append", "hyp1.append", "hyp2.append"], "function", ["None"], ["", "def", "return_tfidf_row_lists", "(", "list_of_rows", ")", ":", "\n", "    ", "obs1", "=", "[", "]", "\n", "obs2", "=", "[", "]", "\n", "hyp1", "=", "[", "]", "\n", "hyp2", "=", "[", "]", "\n", "\n", "for", "row", "in", "list_of_rows", ":", "\n", "        ", "obs1", ".", "append", "(", "row", "[", "1", "]", ")", "\n", "obs2", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "hyp1", ".", "append", "(", "row", "[", "3", "]", ")", "\n", "hyp2", ".", "append", "(", "row", "[", "4", "]", ")", "\n", "\n", "", "return", "obs1", ",", "obs2", ",", "hyp1", ",", "hyp2", "\n", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.tf_idf.train_tf_idf_model": [[3, 7], ["gensim.corpora.Dictionary", "gensim.models.TfidfModel", "gensim.corpora.Dictionary.doc2bow"], "function", ["None"], ["def", "train_tf_idf_model", "(", "texts", ")", ":", "\n", "    ", "dictionary", "=", "gensim", ".", "corpora", ".", "Dictionary", "(", "texts", ")", "\n", "tfidf_model", "=", "gensim", ".", "models", ".", "TfidfModel", "(", "[", "dictionary", ".", "doc2bow", "(", "text", ")", "for", "text", "in", "texts", "]", ")", "\n", "return", "tfidf_model", ",", "dictionary", "\n", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.document_embeddings.train_embedding_model": [[5, 11], ["gensim.models.doc2vec.Doc2Vec", "gensim.models.doc2vec.TaggedDocument", "enumerate"], "function", ["None"], ["def", "train_embedding_model", "(", "documents", ",", "embedding_type", ",", "vector_size", "=", "300", ",", "min_count", "=", "10", ")", ":", "\n", "    ", "if", "embedding_type", "==", "'doc2vec'", ":", "\n", "        ", "documents", "=", "[", "TaggedDocument", "(", "doc", ",", "[", "i", "]", ")", "for", "i", ",", "doc", "in", "enumerate", "(", "documents", ")", "]", "\n", "return", "Doc2Vec", "(", "documents", ",", "vector_size", "=", "vector_size", ",", "min_count", "=", "min_count", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.document_embeddings.get_pretrained_embeddings": [[12, 14], ["sentence_transformers.SentenceTransformer"], "function", ["None"], ["", "", "def", "get_pretrained_embeddings", "(", "embedding_type", ")", ":", "\n", "    ", "return", "SentenceTransformer", "(", "embedding_type", ")", "# pre-trained models from here https://www.sbert.net/docs/pretrained_models.html", "\n", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification.DataFrameDataset.__init__": [[72, 79], ["torchtext.legacy.data.Dataset.__init__", "torchtext.legacy.data.Example.fromlist", "list", "df.iterrows"], "methods", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.similarity.vector_mixture_models.TfIdfWeightedVectorMixtureModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "df", ":", "pd", ".", "DataFrame", ",", "fields", ":", "list", ")", ":", "\n", "        ", "super", "(", "DataFrameDataset", ",", "self", ")", ".", "__init__", "(", "\n", "[", "\n", "Example", ".", "fromlist", "(", "list", "(", "r", ")", ",", "fields", ")", "\n", "for", "i", ",", "r", "in", "df", ".", "iterrows", "(", ")", "\n", "]", ",", "\n", "fields", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification.load_data": [[20, 47], ["data.data_loader.parse_and_return_rows", "pandas.DataFrame", "list", "combined_observation.append", "hypothesis.append", "label.append", "combined_observation.append", "hypothesis.append", "label.append", "zip", "combined_observation.append", "hypothesis.append", "label.append", "combined_observation.append", "hypothesis.append", "label.append"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows"], ["def", "load_data", "(", ")", ":", "\n", "    ", "list_of_rows", "=", "data_loader", ".", "parse_and_return_rows", "(", "\"./data/processed_data/train.csv\"", ")", "\n", "\n", "combined_observation", "=", "[", "]", "\n", "hypothesis", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "for", "entry", "in", "list_of_rows", ":", "\n", "        ", "if", "entry", "[", "5", "]", "==", "\"1\"", ":", "\n", "            ", "combined_observation", ".", "append", "(", "entry", "[", "1", "]", "+", "\" \"", "+", "entry", "[", "2", "]", ")", "\n", "hypothesis", ".", "append", "(", "entry", "[", "3", "]", ")", "\n", "label", ".", "append", "(", "(", "0", ",", "1", ")", ")", "\n", "combined_observation", ".", "append", "(", "entry", "[", "1", "]", "+", "\" \"", "+", "entry", "[", "2", "]", ")", "\n", "hypothesis", ".", "append", "(", "entry", "[", "4", "]", ")", "\n", "label", ".", "append", "(", "(", "1", ",", "0", ")", ")", "\n", "", "elif", "entry", "[", "5", "]", "==", "\"2\"", ":", "\n", "            ", "combined_observation", ".", "append", "(", "entry", "[", "1", "]", "+", "\" \"", "+", "entry", "[", "2", "]", ")", "\n", "hypothesis", ".", "append", "(", "entry", "[", "4", "]", ")", "\n", "label", ".", "append", "(", "(", "0", ",", "1", ")", ")", "\n", "combined_observation", ".", "append", "(", "entry", "[", "1", "]", "+", "\" \"", "+", "entry", "[", "2", "]", ")", "\n", "hypothesis", ".", "append", "(", "entry", "[", "3", "]", ")", "\n", "label", ".", "append", "(", "(", "1", ",", "0", ")", ")", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "list", "(", "zip", "(", "combined_observation", ",", "hypothesis", ",", "label", ")", ")", ",", "\n", "columns", "=", "[", "\"observations\"", ",", "\"hypothesis\"", ",", "\"label\"", "]", ")", "\n", "\n", "df", "[", "\"text\"", "]", "=", "df", "[", "\"observations\"", "]", "+", "\" \"", "+", "df", "[", "\"hypothesis\"", "]", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification.create_input_fields": [[48, 70], ["torchtext.legacy.data.Field", "torchtext.legacy.data.Field", "df[].apply", "torchtext.legacy.data.Field.build_vocab", "torchtext.legacy.data.Field.preprocess"], "function", ["None"], ["", "def", "create_input_fields", "(", "df", ",", "embedding_type", ")", ":", "\n", "    ", "text_field", "=", "Field", "(", "\n", "sequential", "=", "True", ",", "\n", "tokenize", "=", "'basic_english'", ",", "\n", "fix_length", "=", "5", ",", "\n", "lower", "=", "True", ",", "\n", "include_lengths", "=", "True", "\n", ")", "\n", "label_field", "=", "Field", "(", "sequential", "=", "False", ",", "use_vocab", "=", "False", ")", "\n", "# sadly have to apply preprocess manually", "\n", "preprocessed_text", "=", "df", "[", "'text'", "]", ".", "apply", "(", "\n", "lambda", "x", ":", "text_field", ".", "preprocess", "(", "x", ")", "\n", ")", "\n", "\n", "# load fastext simple embedding with 300d", "\n", "text_field", ".", "build_vocab", "(", "\n", "preprocessed_text", ",", "\n", "vectors", "=", "embedding_type", ",", "\n", "unk_init", "=", "torch", ".", "Tensor", ".", "zero_", "\n", ")", "\n", "\n", "return", "text_field", ",", "label_field", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification.create_model": [[81, 117], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "models.classifiers.lstm.LSTM_net", "models.classifiers.lstm.LSTM_net.embedding.weight.data.copy_", "torch.zeros", "torch.zeros", "models.classifiers.lstm.LSTM_net.to", "torch.device", "torch.device"], "function", ["None"], ["", "", "def", "create_model", "(", "df", ",", "text_field", ",", "embedding_dim", ",", "hidden_dim", ",", "num_layers", ",", "bidirectional", ",", "dropout", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "dev", "=", "\"cuda:0\"", "\n", "", "else", ":", "\n", "        ", "dev", "=", "\"cpu\"", "\n", "device", "=", "torch", ".", "device", "(", "dev", ")", "\n", "\n", "# Hyperparameters    ", "\n", "", "input_dim", "=", "len", "(", "text_field", ".", "vocab", ")", "\n", "output_dim", "=", "2", "\n", "pad_idx", "=", "text_field", ".", "vocab", ".", "stoi", "[", "text_field", ".", "pad_token", "]", "# padding", "\n", "\n", "#creating instance of our LSTM_net class", "\n", "model", "=", "LSTM_net", "(", "input_dim", ",", "\n", "embedding_dim", ",", "\n", "hidden_dim", ",", "\n", "output_dim", ",", "\n", "num_layers", ",", "\n", "bidirectional", ",", "\n", "dropout", ",", "\n", "pad_idx", ")", "\n", "\n", "\n", "pretrained_embeddings", "=", "text_field", ".", "vocab", ".", "vectors", "\n", "\n", "model", ".", "embedding", ".", "weight", ".", "data", ".", "copy_", "(", "pretrained_embeddings", ")", "\n", "\n", "#  to initiaise padded to zeros", "\n", "model", ".", "embedding", ".", "weight", ".", "data", "[", "pad_idx", "]", "=", "torch", ".", "zeros", "(", "embedding_dim", ")", "\n", "\n", "\n", "model", ".", "to", "(", "device", ")", "#CNN to GPU", "\n", "\n", "return", "model", ",", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification.train": [[119, 150], ["torch.HingeEmbeddingLoss", "torch.optim.Adam", "torch.optim.Adam", "model.train", "model.parameters", "torch.optim.Adam.zero_grad", "model().squeeze", "torch.softmax", "torch.softmax", "nn.HingeEmbeddingLoss.", "print", "torchmetrics.functional.accuracy", "criterion.backward", "torch.optim.Adam.step", "criterion.item", "torchmetrics.functional.accuracy.item", "torch.softmax.type", "batch.label.type", "len", "len", "model"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.train"], ["", "def", "train", "(", "model", ",", "iterator", ",", "learning_rate", ")", ":", "\n", "\n", "# Loss and optimizer", "\n", "    ", "criterion", "=", "nn", ".", "HingeEmbeddingLoss", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ")", "\n", "\n", "epoch_loss", "=", "0", "\n", "epoch_acc", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "batch", "in", "iterator", ":", "\n", "        ", "text", ",", "text_lengths", "=", "batch", ".", "text", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "predictions", "=", "model", "(", "text", ",", "text_lengths", ")", ".", "squeeze", "(", "1", ")", "\n", "labels_pred", "=", "torch", ".", "softmax", "(", "predictions", ",", "dim", "=", "0", ")", "\n", "\n", "loss", "=", "criterion", "(", "labels_pred", ".", "type", "(", "\"torch.FloatTensor\"", ")", ",", "batch", ".", "label", ".", "type", "(", "\"torch.FloatTensor\"", ")", ")", "\n", "print", "(", "loss", ")", "\n", "\n", "acc", "=", "torchmetrics", ".", "functional", ".", "accuracy", "(", "labels_pred", ",", "batch", ".", "label", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "epoch_acc", "+=", "acc", ".", "item", "(", ")", "\n", "\n", "", "return", "epoch_loss", "/", "len", "(", "iterator", ")", ",", "epoch_acc", "/", "len", "(", "iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification.evaluate": [[152, 166], ["model.eval", "torch.no_grad", "torch.no_grad", "len", "model().squeeze", "torch.argmax", "torch.argmax", "torchmetrics.functional.accuracy", "torchmetrics.functional.accuracy.item", "model"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.argmax", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.argmax"], ["", "def", "evaluate", "(", "model", ",", "iterator", ")", ":", "\n", "    ", "epoch_acc", "=", "0", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "iterator", ":", "\n", "            ", "text", ",", "text_lengths", "=", "batch", ".", "text", "\n", "predictions", "=", "model", "(", "text", ",", "text_lengths", ")", ".", "squeeze", "(", "1", ")", "\n", "labels_pred", "=", "torch", ".", "argmax", "(", "predictions", ",", "dim", "=", "1", ")", "\n", "acc", "=", "torchmetrics", ".", "functional", ".", "accuracy", "(", "labels_pred", ",", "batch", ".", "label", ")", "\n", "\n", "epoch_acc", "+=", "acc", ".", "item", "(", ")", "\n", "\n", "", "", "return", "epoch_acc", "/", "len", "(", "iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification._run_lstm_classification_experiment": [[169, 211], ["time.time", "LSTM_classification.load_data", "LSTM_classification.create_input_fields", "LSTM_classification.create_datasets", "LSTM_classification.create_model", "torchtext.legacy.data.BucketIterator.splits", "range", "print", "LSTM_classification.train", "LSTM_classification.evaluate", "print", "print", "loss.append", "acc.append", "val_acc.append", "time.time"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data_loaders.dev_data_loader.load_data", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification.create_input_fields", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification.create_datasets", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification.create_model", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.train", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification.evaluate"], ["", "def", "_run_lstm_classification_experiment", "(", "\n", "num_epochs", ",", "\n", "learning_rate", ",", "\n", "batch_size", ",", "\n", "embedding_type", ",", "\n", "embedding_dim", ",", "\n", "hidden_dim", ",", "\n", "num_layers", ",", "\n", "bidirectional", ",", "\n", "dropout", "\n", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "loss", "=", "[", "]", "\n", "acc", "=", "[", "]", "\n", "val_acc", "=", "[", "]", "\n", "\n", "df", "=", "load_data", "(", ")", "\n", "text_field", ",", "label_field", "=", "create_input_fields", "(", "df", ",", "embedding_type", ")", "\n", "train_dataset", ",", "test_dataset", "=", "create_datasets", "(", "df", ",", "text_field", ",", "label_field", ")", "\n", "model", ",", "device", "=", "create_model", "(", "df", ",", "text_field", ",", "embedding_dim", ",", "hidden_dim", ",", "num_layers", ",", "bidirectional", ",", "dropout", ")", "\n", "\n", "train_iter", ",", "test_iter", "=", "BucketIterator", ".", "splits", "(", "\n", "datasets", "=", "(", "train_dataset", ",", "test_dataset", ")", ",", "\n", "batch_sizes", "=", "(", "batch_size", ",", "batch_size", ")", ",", "\n", "sort", "=", "False", ",", "\n", "device", "=", "device", "\n", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "train_loss", ",", "train_acc", "=", "train", "(", "model", ",", "train_iter", ",", "learning_rate", ")", "\n", "valid_acc", "=", "evaluate", "(", "model", ",", "test_iter", ")", "\n", "\n", "print", "(", "f'\\tTrain Loss: {train_loss:.3f} | Train Acc: {train_acc*100:.2f}%'", ")", "\n", "print", "(", "f'\\t Val. Acc: {valid_acc*100:.2f}%'", ")", "\n", "\n", "loss", ".", "append", "(", "train_loss", ")", "\n", "acc", ".", "append", "(", "train_acc", ")", "\n", "val_acc", ".", "append", "(", "valid_acc", ")", "\n", "\n", "", "print", "(", "f'time:{time.time()-t:.3f}'", ")", "\n", "\n", "return", "None", ",", "val_acc", "[", "-", "1", "]", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification.create_datasets": [[212, 218], ["Dataset.split", "LSTM_classification.DataFrameDataset"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTreeNode.split"], ["", "def", "create_datasets", "(", "df", ",", "text_field", ",", "label_field", ")", ":", "\n", "    ", "return", "DataFrameDataset", "(", "\n", "df", "=", "df", "[", "[", "\"text\"", ",", "\"label\"", "]", "]", ",", "\n", "fields", "=", "(", "\n", "(", "'text'", ",", "text_field", ")", ",", "\n", "(", "'label'", ",", "label_field", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification.run": [[221, 233], ["LSTM_classification._run_lstm_classification_experiment", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.LSTM_classification._run_lstm_classification_experiment", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param"], ["", "def", "run", "(", "ex", ")", ":", "\n", "    ", "hp", "=", "ex", "[", "\"hyperparameters\"", "]", "\n", "return", "_run_lstm_classification_experiment", "(", "\n", "num_epochs", "=", "get_param", "(", "hp", ",", "\"num_epochs\"", ",", "1", ")", ",", "\n", "learning_rate", "=", "get_param", "(", "hp", ",", "\"learning_rate\"", ",", "0.001", ")", ",", "\n", "batch_size", "=", "get_param", "(", "hp", ",", "\"batch_size\"", ",", "64", ")", ",", "\n", "embedding_type", "=", "get_param", "(", "hp", ",", "\"embedding_type\"", ",", "\"glove.6B.200d\"", ")", ",", "\n", "embedding_dim", "=", "get_param", "(", "hp", ",", "\"embedding_dim\"", ",", "200", ")", ",", "\n", "hidden_dim", "=", "get_param", "(", "hp", ",", "\"hidden_dim\"", ",", "256", ")", ",", "\n", "num_layers", "=", "get_param", "(", "hp", ",", "\"num_layers\"", ",", "2", ")", ",", "\n", "bidirectional", "=", "get_param", "(", "hp", ",", "\"bidirectional\"", ",", "True", ")", ",", "\n", "dropout", "=", "get_param", "(", "hp", ",", "\"dropout\"", ",", "0.2", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.cosine_similarity_baseline._run_cosine_similarity_exp": [[21, 48], ["data.data_loader.parse_and_return_rows", "data.data_loader.parse_and_return_rows", "feature_engineering.vectorizer.return_len_and_vocabulary", "feature_engineering.vectorizer.create_token_index", "feature_engineering.vectorizer.preprocess_sentence", "feature_engineering.vectorizer.return_count_vector", "feature_engineering.vectorizer.preprocess_sentence", "feature_engineering.vectorizer.return_count_vector", "feature_engineering.vectorizer.preprocess_sentence", "feature_engineering.vectorizer.return_count_vector", "feature_engineering.vectorizer.preprocess_sentence", "feature_engineering.vectorizer.return_count_vector", "hyp1_sim.append", "hyp2_sim.append", "models.similarity.cosine_similarity.cosine_similarity", "models.similarity.cosine_similarity.cosine_similarity"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.return_len_and_vocabulary", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.create_token_index", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.preprocess_sentence", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.return_count_vector", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.preprocess_sentence", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.return_count_vector", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.preprocess_sentence", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.return_count_vector", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.preprocess_sentence", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.return_count_vector", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.similarity.cosine_similarity.cosine_similarity", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.similarity.cosine_similarity.cosine_similarity"], ["def", "_run_cosine_similarity_exp", "(", "train_file_path", ",", "test_file_path", ",", ")", ":", "\n", "    ", "train_list_of_rows", "=", "data_loader", ".", "parse_and_return_rows", "(", "train_file_path", ")", "\n", "test_list_of_rows", "=", "data_loader", ".", "parse_and_return_rows", "(", "test_file_path", ")", "\n", "train_vocab", ",", "train_len_vocab", "=", "vectorizer", ".", "return_len_and_vocabulary", "(", "train_list_of_rows", ")", "\n", "index_word", "=", "vectorizer", ".", "create_token_index", "(", "train_vocab", ")", "\n", "hyp1_sim", "=", "[", "]", "\n", "hyp2_sim", "=", "[", "]", "\n", "count", "=", "0", "\n", "\n", "for", "row", "in", "test_list_of_rows", ":", "\n", "        ", "obs1", "=", "vectorizer", ".", "preprocess_sentence", "(", "row", "[", "1", "]", ")", "\n", "obs1_vec", "=", "vectorizer", ".", "return_count_vector", "(", "obs1", ",", "index_word", ",", "train_len_vocab", ")", "\n", "obs2", "=", "vectorizer", ".", "preprocess_sentence", "(", "row", "[", "2", "]", ")", "\n", "obs2_vec", "=", "vectorizer", ".", "return_count_vector", "(", "obs2", ",", "index_word", ",", "train_len_vocab", ")", "\n", "hyp1", "=", "vectorizer", ".", "preprocess_sentence", "(", "row", "[", "3", "]", ")", "\n", "hyp1_vec", "=", "vectorizer", ".", "return_count_vector", "(", "hyp1", ",", "index_word", ",", "train_len_vocab", ")", "\n", "hyp2", "=", "vectorizer", ".", "preprocess_sentence", "(", "row", "[", "4", "]", ")", "\n", "hyp2_vec", "=", "vectorizer", ".", "return_count_vector", "(", "hyp2", ",", "index_word", ",", "train_len_vocab", ")", "\n", "\n", "avg_obs_vec", "=", "(", "obs1_vec", "+", "obs2_vec", ")", "/", "2", "\n", "\n", "hyp1_sim", ".", "append", "(", "cosine_similarity", "(", "avg_obs_vec", ",", "hyp1_vec", ")", ")", "\n", "hyp2_sim", ".", "append", "(", "cosine_similarity", "(", "avg_obs_vec", ",", "hyp2_vec", ")", ")", "\n", "\n", "count", "+=", "1", "\n", "\n", "", "return", "hyp1_sim", ",", "hyp2_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.cosine_similarity_baseline._calc_test_similarity_accuracy": [[49, 69], ["range", "data.data_loader.parse_and_return_rows", "models.evaluation.calculate_accuracy", "len", "orig_list.append", "pred_list.append", "str", "pred_list.append", "random.choice", "pred_list.append"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.models.evaluation.calculate_accuracy"], ["", "def", "_calc_test_similarity_accuracy", "(", "test_file_path", ",", "hyp1_sim", ",", "hyp2_sim", ")", ":", "\n", "\n", "    ", "pred_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "hyp1_sim", ")", ")", ":", "\n", "        ", "if", "hyp1_sim", "[", "i", "]", ">", "hyp2_sim", "[", "i", "]", ":", "\n", "            ", "pred_list", ".", "append", "(", "\"1\"", ")", "\n", "", "elif", "hyp1_sim", "[", "i", "]", "<", "hyp2_sim", "[", "i", "]", ":", "\n", "            ", "pred_list", ".", "append", "(", "\"2\"", ")", "\n", "", "elif", "hyp1_sim", "[", "i", "]", "==", "hyp2_sim", "[", "i", "]", ":", "\n", "            ", "rand_choice", "=", "random", ".", "choice", "(", "[", "\"1\"", ",", "\"2\"", "]", ")", "\n", "pred_list", ".", "append", "(", "rand_choice", ")", "\n", "\n", "", "", "test_list_of_rows", "=", "data_loader", ".", "parse_and_return_rows", "(", "test_file_path", ")", "\n", "orig_list", "=", "[", "]", "\n", "for", "row", "in", "test_list_of_rows", ":", "\n", "        ", "orig_list", ".", "append", "(", "str", "(", "row", "[", "5", "]", ")", ")", "\n", "\n", "", "accuracy", "=", "evaluation", ".", "calculate_accuracy", "(", "pred_list", ",", "orig_list", ")", "\n", "return", "accuracy", ",", "pred_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.cosine_similarity_baseline._run_cosine_similarity_baseline": [[70, 76], ["cosine_similarity_baseline._run_cosine_similarity_exp", "cosine_similarity_baseline._calc_test_similarity_accuracy"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.cosine_similarity_baseline._run_cosine_similarity_exp", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.cosine_similarity_baseline._calc_test_similarity_accuracy"], ["", "def", "_run_cosine_similarity_baseline", "(", "train_file_path", ",", "test_file_path", ")", ":", "\n", "\n", "    ", "hyp1_sim", ",", "hyp2_sim", "=", "_run_cosine_similarity_exp", "(", "train_file_path", ",", "test_file_path", ")", "\n", "accuracy", ",", "pred_list", "=", "_calc_test_similarity_accuracy", "(", "test_file_path", ",", "hyp1_sim", ",", "hyp2_sim", ")", "\n", "\n", "return", "pred_list", ",", "accuracy", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.cosine_similarity_baseline.run": [[77, 82], ["cosine_similarity_baseline._run_cosine_similarity_baseline", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.cosine_similarity_baseline._run_cosine_similarity_baseline", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param"], ["", "def", "run", "(", "ex", ")", ":", "\n", "    ", "hp", "=", "ex", "[", "\"hyperparameters\"", "]", "\n", "\n", "return", "_run_cosine_similarity_baseline", "(", "train_file_path", "=", "get_param", "(", "hp", ",", "\"train_file_path\"", ",", "None", ")", ",", "\n", "test_file_path", "=", "get_param", "(", "hp", ",", "\"test_file_path\"", ",", "None", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.unweighted_vector_mixture_model._run_vector_mixture_experiment": [[9, 48], ["experiments.experiment_utilities.printt", "experiments.experiment_utilities.load_data", "models.similarity.vector_mixture_models.UnweightedVectorMixtureModel", "experiments.experiment_utilities.printt", "experiments.experiment_utilities.predict_labels_cosine", "models.calculate_accuracy", "experiments.experiment_utilities.printt", "logs.append", "experiments.experiment_utilities.printt", "feature_engineering.get_pretrained_embeddings", "experiments.experiment_utilities.printt", "feature_engineering.train_embedding_model", "str", "str"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data_loaders.dev_data_loader.load_data", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.predict_labels_cosine", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.models.evaluation.calculate_accuracy", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.document_embeddings.get_pretrained_embeddings", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.document_embeddings.train_embedding_model"], ["def", "_run_vector_mixture_experiment", "(", "\n", "use_pre_trained_embeddings", ",", "\n", "embedding_type", ",", "\n", "vector_size", ",", "\n", "min_count", ",", "\n", "skipgram", ",", "\n", "dev_data_loader_name", ",", "\n", "embedding_training_data_loader_name", ")", ":", "\n", "\n", "    ", "logs", "=", "[", "]", "\n", "\n", "printt", "(", "\"Loading data...\"", ")", "\n", "dev_documents", ",", "embedding_training_corpus", "=", "load_data", "(", "dev_data_loader_name", ",", "embedding_training_data_loader_name", ")", "\n", "\n", "if", "use_pre_trained_embeddings", ":", "\n", "        ", "printt", "(", "\"Using pretrained embedding model %s ...\"", "%", "embedding_type", ")", "\n", "embedding_model", "=", "word_embeddings", ".", "get_pretrained_embeddings", "(", "embedding_type", ")", "\n", "", "else", ":", "\n", "        ", "printt", "(", "\"Training %s embedding model...\"", "%", "embedding_type", ")", "\n", "embedding_model", "=", "word_embeddings", ".", "train_embedding_model", "(", "\n", "embedding_training_corpus", ",", "\n", "type", "=", "embedding_type", ",", "\n", "vector_size", "=", "vector_size", ",", "\n", "min_count", "=", "min_count", ",", "\n", "skipgram", "=", "skipgram", "\n", ")", "\n", "\n", "", "model", "=", "UnweightedVectorMixtureModel", "(", "embedding_model", ")", "\n", "\n", "printt", "(", "\"Predicting labels on devset...\"", ")", "\n", "predicted_labels", "=", "predict_labels_cosine", "(", "model", ",", "dev_documents", ")", "\n", "real_labels", "=", "[", "x", "[", "4", "]", "for", "x", "in", "dev_documents", "]", "\n", "\n", "acc", "=", "evaluation", ".", "calculate_accuracy", "(", "predicted_labels", ",", "real_labels", ")", "\n", "\n", "printt", "(", "\"Accuracy: \"", "+", "str", "(", "acc", ")", ")", "\n", "logs", ".", "append", "(", "\"Accuracy: \"", "+", "str", "(", "acc", ")", ")", "\n", "\n", "return", "predicted_labels", ",", "acc", ",", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.unweighted_vector_mixture_model.run": [[50, 78], ["experiments.experiment_utilities.set_trace", "unweighted_vector_mixture_model._run_vector_mixture_experiment", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.set_trace", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.tf_idf_weighted_vector_mixture_model._run_vector_mixture_experiment", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param"], ["", "def", "run", "(", "ex", ")", ":", "\n", "    ", "\"\"\"\n    Unweighted vector mixture experiments.\n    Takes in a dictionary with all the hyperparameters, for example:\n        {\n            \"trace\": true,     \n            \"hyperparameters\" : {\n                \"dev_data_loader_name\": \"data_loaders.dev_data_loader\",\n                \"pre_trained_embeddings\":false,\n                \"embedding_type\":\"word2vec\",\n                \"embedding_training_data_loader_name\": \"data_loaders.ROC_data_loader\",\n                \"skipgram\":true\n            }\n        }\n    \n    Returns: predicted labels, logs\n    \"\"\"", "\n", "set_trace", "(", "get_param", "(", "ex", ",", "\"trace\"", ",", "True", ")", ")", "\n", "\n", "hp", "=", "ex", "[", "\"hyperparameters\"", "]", "\n", "return", "_run_vector_mixture_experiment", "(", "\n", "use_pre_trained_embeddings", "=", "get_param", "(", "hp", ",", "\"pre_trained_embeddings\"", ",", "False", ")", ",", "\n", "embedding_type", "=", "get_param", "(", "hp", ",", "\"embedding_type\"", ",", "\"word2vec\"", ")", ",", "\n", "vector_size", "=", "get_param", "(", "hp", ",", "\"vector_size\"", ",", "100", ")", ",", "\n", "min_count", "=", "get_param", "(", "hp", ",", "\"min_count\"", ",", "10", ")", ",", "\n", "skipgram", "=", "get_param", "(", "hp", ",", "\"skipgram\"", ",", "False", ")", ",", "\n", "dev_data_loader_name", "=", "get_param", "(", "hp", ",", "\"dev_data_loader_name\"", ",", "None", ")", ",", "\n", "embedding_training_data_loader_name", "=", "get_param", "(", "hp", ",", "\"embedding_training_data_loader_name\"", ",", "\"word2vec\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.wmd_similarity._run_wmd_similarity_experiment": [[10, 45], ["experiments.experiment_utilities.printt", "experiments.experiment_utilities.load_data", "experiments.experiment_utilities.printt", "experiments.experiment_utilities.predict_labels_wmd", "models.calculate_accuracy", "experiments.experiment_utilities.printt", "logs.append", "experiments.experiment_utilities.printt", "feature_engineering.get_pretrained_embeddings", "experiments.experiment_utilities.printt", "feature_engineering.train_embedding_model", "str", "str"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data_loaders.dev_data_loader.load_data", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.predict_labels_wmd", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.models.evaluation.calculate_accuracy", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.document_embeddings.get_pretrained_embeddings", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.document_embeddings.train_embedding_model"], ["def", "_run_wmd_similarity_experiment", "(", "\n", "use_pre_trained_embeddings", ",", "\n", "embedding_type", ",", "\n", "vector_size", ",", "\n", "min_count", ",", "\n", "skipgram", ",", "\n", "dev_data_loader_name", ",", "\n", "embedding_training_data_loader_name", ")", ":", "\n", "\n", "    ", "logs", "=", "[", "]", "\n", "\n", "printt", "(", "\"Loading data...\"", ")", "\n", "dev_documents", ",", "embedding_training_corpus", "=", "load_data", "(", "dev_data_loader_name", ",", "embedding_training_data_loader_name", ")", "\n", "if", "use_pre_trained_embeddings", ":", "\n", "        ", "printt", "(", "\"Using pretrained embedding model %s ...\"", "%", "embedding_type", ")", "\n", "embedding_model", "=", "word_embeddings", ".", "get_pretrained_embeddings", "(", "embedding_type", ")", "\n", "", "else", ":", "\n", "        ", "printt", "(", "\"Training %s embedding model...\"", "%", "embedding_type", ")", "\n", "embedding_model", "=", "word_embeddings", ".", "train_embedding_model", "(", "\n", "embedding_training_corpus", ",", "\n", "type", "=", "embedding_type", ",", "\n", "vector_size", "=", "vector_size", ",", "\n", "min_count", "=", "min_count", ",", "\n", "skipgram", "=", "skipgram", "\n", ")", "\n", "\n", "", "printt", "(", "\"Predicting labels on devset...\"", ")", "\n", "predicted_labels", "=", "predict_labels_wmd", "(", "embedding_model", ",", "dev_documents", ")", "\n", "real_labels", "=", "[", "x", "[", "4", "]", "for", "x", "in", "dev_documents", "]", "\n", "acc", "=", "evaluation", ".", "calculate_accuracy", "(", "predicted_labels", ",", "real_labels", ")", "\n", "\n", "printt", "(", "\"Accuracy: \"", "+", "str", "(", "acc", ")", ")", "\n", "logs", ".", "append", "(", "\"Accuracy: \"", "+", "str", "(", "acc", ")", ")", "\n", "\n", "return", "predicted_labels", ",", "acc", ",", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.wmd_similarity.run": [[47, 76], ["experiments.experiment_utilities.set_trace", "wmd_similarity._run_wmd_similarity_experiment", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.set_trace", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.wmd_similarity._run_wmd_similarity_experiment", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param"], ["", "def", "run", "(", "ex", ")", ":", "\n", "    ", "\"\"\"\n    Unweighted vector mixture experiments.\n    Takes in a dictionary with all the hyperparameters, for example:\n        {\n            \"trace\": true,     \n\n            \"hyperparameters\" : {\n                \"pre_trained_embeddings\":false,\n                \"embedding_type\":\"word2vec\",\n                \"dev_data_loader_name\": \"data_loaders.dev_data_loader\",\n                \"embedding_training_data_loader_name\": \"data_loaders.ROC_data_loader\",\n                \"skipgram\":false\n            }\n        }\n    \n    Returns: predicted labels, logs\n    \"\"\"", "\n", "set_trace", "(", "get_param", "(", "ex", ",", "\"trace\"", ",", "True", ")", ")", "\n", "\n", "hp", "=", "ex", "[", "\"hyperparameters\"", "]", "\n", "return", "_run_wmd_similarity_experiment", "(", "\n", "use_pre_trained_embeddings", "=", "get_param", "(", "hp", ",", "\"pre_trained_embeddings\"", ",", "False", ")", ",", "\n", "embedding_type", "=", "get_param", "(", "hp", ",", "\"embedding_type\"", ",", "\"word2vec\"", ")", ",", "\n", "skipgram", "=", "get_param", "(", "hp", ",", "\"skipgram\"", ",", "False", ")", ",", "\n", "vector_size", "=", "get_param", "(", "hp", ",", "\"vector_size\"", ",", "100", ")", ",", "\n", "min_count", "=", "get_param", "(", "hp", ",", "\"min_count\"", ",", "10", ")", ",", "\n", "dev_data_loader_name", "=", "get_param", "(", "hp", ",", "\"dev_data_loader_name\"", ",", "None", ")", ",", "\n", "embedding_training_data_loader_name", "=", "get_param", "(", "hp", ",", "\"embedding_training_data_loader_name\"", ",", "\"\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.tf_idf_weighted_vector_mixture_model._run_vector_mixture_experiment": [[10, 48], ["experiments.experiment_utilities.printt", "experiments.experiment_utilities.load_data", "feature_engineering.train_tf_idf_model", "models.similarity.vector_mixture_models.TfIdfWeightedVectorMixtureModel", "experiments.experiment_utilities.printt", "experiments.experiment_utilities.predict_labels_cosine", "models.calculate_accuracy", "experiments.experiment_utilities.printt", "logs.append", "experiments.experiment_utilities.printt", "feature_engineering.get_pretrained_embeddings", "experiments.experiment_utilities.printt", "feature_engineering.train_embedding_model", "str", "str"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data_loaders.dev_data_loader.load_data", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.tf_idf.train_tf_idf_model", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.predict_labels_cosine", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.models.evaluation.calculate_accuracy", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.document_embeddings.get_pretrained_embeddings", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.document_embeddings.train_embedding_model"], ["def", "_run_vector_mixture_experiment", "(", "\n", "use_pre_trained_embeddings", ",", "\n", "embedding_type", ",", "\n", "skipgram", ",", "\n", "vector_size", ",", "\n", "min_count", ",", "\n", "dev_data_loader_name", ",", "\n", "embedding_training_data_loader_name", ")", ":", "\n", "\n", "    ", "logs", "=", "[", "]", "\n", "\n", "printt", "(", "\"Loading data...\"", ")", "\n", "dev_documents", ",", "embedding_training_corpus", "=", "load_data", "(", "dev_data_loader_name", ",", "embedding_training_data_loader_name", ")", "\n", "if", "use_pre_trained_embeddings", ":", "\n", "        ", "printt", "(", "\"Using pretrained embedding model %s ...\"", "%", "embedding_type", ")", "\n", "embedding_model", "=", "word_embeddings", ".", "get_pretrained_embeddings", "(", "embedding_type", ")", "\n", "", "else", ":", "\n", "        ", "printt", "(", "\"Training %s embedding model...\"", "%", "embedding_type", ")", "\n", "embedding_model", "=", "word_embeddings", ".", "train_embedding_model", "(", "\n", "embedding_training_corpus", ",", "\n", "type", "=", "embedding_type", ",", "\n", "vector_size", "=", "vector_size", ",", "\n", "min_count", "=", "min_count", ",", "\n", "skipgram", "=", "skipgram", "\n", ")", "\n", "\n", "", "tfidf_model", ",", "dictionary", "=", "tf_idf", ".", "train_tf_idf_model", "(", "embedding_training_corpus", ")", "\n", "model", "=", "TfIdfWeightedVectorMixtureModel", "(", "embedding_model", ",", "tfidf_model", ",", "dictionary", ")", "\n", "\n", "printt", "(", "\"Predicting labels on devset...\"", ")", "\n", "predicted_labels", "=", "predict_labels_cosine", "(", "model", ",", "dev_documents", ")", "\n", "real_labels", "=", "[", "x", "[", "4", "]", "for", "x", "in", "dev_documents", "]", "\n", "acc", "=", "evaluation", ".", "calculate_accuracy", "(", "predicted_labels", ",", "real_labels", ")", "\n", "\n", "printt", "(", "\"Accuracy: \"", "+", "str", "(", "acc", ")", ")", "\n", "logs", ".", "append", "(", "\"Accuracy: \"", "+", "str", "(", "acc", ")", ")", "\n", "\n", "return", "predicted_labels", ",", "acc", ",", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.tf_idf_weighted_vector_mixture_model.run": [[50, 79], ["experiments.experiment_utilities.set_trace", "tf_idf_weighted_vector_mixture_model._run_vector_mixture_experiment", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.set_trace", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.tf_idf_weighted_vector_mixture_model._run_vector_mixture_experiment", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param"], ["", "def", "run", "(", "ex", ")", ":", "\n", "    ", "\"\"\"\n    Vector mixture experiments where each word's embedding is weighted by it's tf-idf value\n    Takes in a dictionary with all the hyperparameters, for example:\n        {\n            \"trace\": true,     \n\n            \"hyperparameters\" : {\n                \"dev_data_loader_name\": \"data_loaders.dev_data_loader\",\n                \"pre_trained_embeddings\":false,\n                \"embedding_type\":\"fasttext\",\n                \"embedding_training_data_loader_name\": \"data_loaders.ROC_data_loader\",\n                \"skipgram\":true\n            }\n        }\n    \n    Returns: predicted labels, logs\n    \"\"\"", "\n", "set_trace", "(", "get_param", "(", "ex", ",", "\"trace\"", ",", "True", ")", ")", "\n", "\n", "hp", "=", "ex", "[", "\"hyperparameters\"", "]", "\n", "return", "_run_vector_mixture_experiment", "(", "\n", "use_pre_trained_embeddings", "=", "get_param", "(", "hp", ",", "\"pre_trained_embeddings\"", ",", "False", ")", ",", "\n", "embedding_type", "=", "get_param", "(", "hp", ",", "\"embedding_type\"", ",", "\"word2vec\"", ")", ",", "\n", "dev_data_loader_name", "=", "get_param", "(", "hp", ",", "\"dev_data_loader_name\"", ",", "None", ")", ",", "\n", "embedding_training_data_loader_name", "=", "get_param", "(", "hp", ",", "\"embedding_training_data_loader_name\"", ",", "\"word2vec\"", ")", ",", "\n", "skipgram", "=", "get_param", "(", "hp", ",", "\"skipgram\"", ",", "False", ")", ",", "\n", "vector_size", "=", "get_param", "(", "hp", ",", "\"vector_size\"", ",", "100", ")", ",", "\n", "min_count", "=", "get_param", "(", "hp", ",", "\"min_count\"", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.human_baseline.get_answer": [[9, 14], ["msvcrt.getch", "msvcrt.getch"], "function", ["None"], ["def", "get_answer", "(", ")", ":", "\n", "    ", "answer", "=", "msvcrt", ".", "getch", "(", ")", "\n", "while", "answer", "not", "in", "[", "b'1'", ",", "b'2'", "]", ":", "\n", "        ", "answer", "=", "msvcrt", ".", "getch", "(", ")", "\n", "", "return", "answer", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.human_baseline.choose_best_hypothesis": [[15, 42], ["data.data_loader.parse_and_return_rows", "random.sample", "enumerate", "models.evaluation.calculate_accuracy", "print", "range", "os.system", "print", "print", "print", "print", "print", "print", "human_baseline.get_answer", "len", "predictions.append", "predictions.append"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.models.evaluation.calculate_accuracy", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.human_baseline.get_answer"], ["", "def", "choose_best_hypothesis", "(", "num_rows_to_look_at", ")", ":", "# Emils accuracy: 88%", "\n", "    ", "rows", "=", "data_loader", ".", "parse_and_return_rows", "(", "'data/processed_data/dev.csv'", ")", "\n", "choices", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "rows", ")", ")", ",", "k", "=", "num_rows_to_look_at", ")", "\n", "\n", "x", "=", "[", "(", "rows", "[", "i", "]", "[", "1", "]", ",", "rows", "[", "i", "]", "[", "2", "]", ",", "rows", "[", "i", "]", "[", "3", "]", ",", "rows", "[", "i", "]", "[", "4", "]", ")", "for", "i", "in", "choices", "]", "\n", "y", "=", "[", "0", "if", "rows", "[", "i", "]", "[", "5", "]", "==", "'1'", "else", "1", "for", "i", "in", "choices", "]", "\n", "\n", "predictions", "=", "[", "]", "\n", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "os", ".", "system", "(", "'cls'", ")", "\n", "print", "(", "i", ",", "\"/\"", ",", "num_rows_to_look_at", ")", "\n", "print", "(", "instance", "[", "0", "]", ")", "\n", "print", "(", "instance", "[", "1", "]", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"1: \"", ",", "instance", "[", "2", "]", ")", "\n", "print", "(", "\"2: \"", ",", "instance", "[", "3", "]", ")", "\n", "\n", "answer", "=", "get_answer", "(", ")", "\n", "\n", "if", "answer", "==", "b'1'", ":", "\n", "            ", "predictions", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "predictions", ".", "append", "(", "1", ")", "\n", "\n", "", "", "accuracy", "=", "evaluation", ".", "calculate_accuracy", "(", "predictions", ",", "y", ")", "\n", "print", "(", "\"Achieved an accuracy of \"", ",", "accuracy", ",", "\"%\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.human_baseline.judge_single_hypothesis": [[43, 71], ["data.data_loader.parse_and_return_rows", "random.sample", "enumerate", "models.evaluation.calculate_accuracy", "print", "range", "os.system", "print", "print", "print", "print", "print", "print", "print", "human_baseline.get_answer", "len", "predictions.append", "predictions.append"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.models.evaluation.calculate_accuracy", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.human_baseline.get_answer"], ["", "def", "judge_single_hypothesis", "(", "num_rows_to_look_at", ")", ":", "# Emil's accuracy: 83%", "\n", "    ", "rows", "=", "data_loader", ".", "parse_and_return_rows", "(", "'data/processed_data/dev.csv'", ")", "\n", "choices", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "rows", ")", ")", ",", "k", "=", "num_rows_to_look_at", ")", "\n", "\n", "x", "=", "[", "(", "rows", "[", "i", "]", "[", "1", "]", ",", "rows", "[", "i", "]", "[", "2", "]", ",", "rows", "[", "i", "]", "[", "3", "]", ")", "for", "i", "in", "choices", "]", "\n", "y", "=", "[", "1", "if", "rows", "[", "i", "]", "[", "5", "]", "==", "'1'", "else", "0", "for", "i", "in", "choices", "]", "\n", "\n", "predictions", "=", "[", "]", "\n", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "os", ".", "system", "(", "'cls'", ")", "\n", "print", "(", "i", "+", "1", ",", "\"/\"", ",", "num_rows_to_look_at", ")", "\n", "print", "(", "instance", "[", "0", "]", ")", "\n", "print", "(", "\"?  \"", ",", "instance", "[", "2", "]", ")", "\n", "print", "(", "instance", "[", "1", "]", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"1: y\"", ")", "\n", "print", "(", "\"2: n\"", ")", "\n", "\n", "answer", "=", "get_answer", "(", ")", "\n", "\n", "if", "answer", "==", "b'1'", ":", "\n", "            ", "predictions", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "predictions", ".", "append", "(", "0", ")", "\n", "\n", "", "", "accuracy", "=", "evaluation", ".", "calculate_accuracy", "(", "predictions", ",", "y", ")", "\n", "print", "(", "\"Achieved an accuracy of \"", ",", "accuracy", ",", "\"%\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.human_baseline.run_human_baseline_experiment": [[73, 83], ["os.system", "print", "print", "print", "human_baseline.get_answer", "human_baseline.choose_best_hypothesis", "human_baseline.judge_single_hypothesis"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.human_baseline.get_answer", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.human_baseline.choose_best_hypothesis", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.human_baseline.judge_single_hypothesis"], ["", "def", "run_human_baseline_experiment", "(", "num_rows_to_look_at", "=", "100", ")", ":", "\n", "    ", "os", ".", "system", "(", "'cls'", ")", "\n", "print", "(", "\"You will be shown \"", ",", "num_rows_to_look_at", ",", "\" examples to judge.\"", ")", "\n", "print", "(", "\"1: choose between two hypotheses\"", ")", "\n", "print", "(", "\"2: judge just one of the hypotheses\"", ")", "\n", "answer", "=", "get_answer", "(", ")", "\n", "if", "answer", "==", "b'1'", ":", "\n", "        ", "choose_best_hypothesis", "(", "num_rows_to_look_at", ")", "\n", "", "elif", "answer", "==", "b'2'", ":", "\n", "        ", "judge_single_hypothesis", "(", "num_rows_to_look_at", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformer_similarity._load_data": [[11, 18], ["importlib.import_module", "importlib.import_module.load_data_raw"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data_loaders.dev_data_loader.load_data_raw"], ["def", "_load_data", "(", "dev_data_loader_name", ")", ":", "\n", "    ", "\"\"\"\n    Dynamically load python file with the given name and call load_data_raw() on it.\n    \"\"\"", "\n", "\n", "dev_data_loader", "=", "importlib", ".", "import_module", "(", "\"experiments.\"", "+", "dev_data_loader_name", ")", "\n", "return", "dev_data_loader", ".", "load_data_raw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformer_similarity._predict_labels_cosine": [[19, 40], ["model.encode", "model.encode", "model.encode", "enumerate", "scipy.distance.cosine", "scipy.distance.cosine", "labels.append", "labels.append"], "function", ["None"], ["", "def", "_predict_labels_cosine", "(", "model", ",", "data", ")", ":", "\n", "    ", "\"\"\"\n    Use cosine similarity to make label predictions for each data point.\n    Model needs to have an .encode() method that takes a list of non-tokenized texts.\n    \"\"\"", "\n", "obs_embeddings", "=", "model", ".", "encode", "(", "[", "obs", "for", "obs", ",", "hyp1", ",", "hyp2", ",", "label", "in", "data", "]", ")", "\n", "hyp1_embeddings", "=", "model", ".", "encode", "(", "[", "hyp1", "for", "obs", ",", "hyp1", ",", "hyp2", ",", "label", "in", "data", "]", ")", "\n", "hyp2_embeddings", "=", "model", ".", "encode", "(", "[", "hyp2", "for", "obs", ",", "hyp1", ",", "hyp2", ",", "label", "in", "data", "]", ")", "\n", "\n", "labels", "=", "[", "]", "\n", "for", "i", ",", "obs_embedding", "in", "enumerate", "(", "obs_embeddings", ")", ":", "\n", "        ", "hyp1_embedding", "=", "hyp1_embeddings", "[", "i", "]", "\n", "hyp2_embedding", "=", "hyp2_embeddings", "[", "i", "]", "\n", "s1", "=", "spatial", ".", "distance", ".", "cosine", "(", "obs_embedding", ",", "hyp1_embedding", ")", "\n", "s2", "=", "spatial", ".", "distance", ".", "cosine", "(", "obs_embedding", ",", "hyp2_embedding", ")", "\n", "if", "s1", "<", "s2", ":", "\n", "            ", "labels", ".", "append", "(", "'1'", ")", "\n", "", "else", ":", "\n", "            ", "labels", ".", "append", "(", "'2'", ")", "\n", "\n", "", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformer_similarity._run_transformer_similarity_experiment": [[41, 65], ["experiments.experiment_utilities.printt", "experiments.experiment_utilities.printt", "transformer_similarity._load_data", "feature_engineering.get_pretrained_embeddings", "experiments.experiment_utilities.printt", "time.time", "transformer_similarity._predict_labels_cosine", "models.calculate_accuracy", "time.time", "experiments.experiment_utilities.printt", "experiments.experiment_utilities.printt", "logs.append", "logs.append", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._load_data", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.document_embeddings.get_pretrained_embeddings", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformer_similarity._predict_labels_cosine", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.models.evaluation.calculate_accuracy", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt"], ["", "def", "_run_transformer_similarity_experiment", "(", "\n", "embedding_type", ",", "\n", "dev_data_loader_name", ")", ":", "\n", "\n", "    ", "logs", "=", "[", "]", "\n", "printt", "(", "\"Starting similarity experiment for \"", "+", "embedding_type", "+", "\"...\"", ")", "\n", "printt", "(", "\"Loading data...\"", ")", "\n", "dev_documents", "=", "_load_data", "(", "dev_data_loader_name", ")", "\n", "\n", "transformer_model", "=", "document_embeddings", ".", "get_pretrained_embeddings", "(", "embedding_type", ")", "\n", "\n", "printt", "(", "\"Predicting labels on devset...\"", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "predicted_labels", "=", "_predict_labels_cosine", "(", "transformer_model", ",", "dev_documents", ")", "\n", "real_labels", "=", "[", "x", "[", "3", "]", "for", "x", "in", "dev_documents", "]", "\n", "acc", "=", "evaluation", ".", "calculate_accuracy", "(", "predicted_labels", ",", "real_labels", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "time_taken", "=", "end", "-", "start", "\n", "printt", "(", "\"Accuracy: \"", "+", "str", "(", "acc", ")", ")", "\n", "printt", "(", "\"Time taken: \"", "+", "str", "(", "time_taken", ")", ")", "\n", "logs", ".", "append", "(", "\"Accuracy: \"", "+", "str", "(", "acc", ")", ")", "\n", "logs", ".", "append", "(", "\"Time taken: \"", "+", "str", "(", "time_taken", ")", ")", "\n", "\n", "return", "predicted_labels", ",", "acc", ",", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformer_similarity.run": [[67, 88], ["experiments.experiment_utilities.set_trace", "transformer_similarity._run_transformer_similarity_experiment", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.set_trace", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformer_similarity._run_transformer_similarity_experiment", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param"], ["", "def", "run", "(", "ex", ")", ":", "\n", "    ", "\"\"\"\n    Transformer sentence embeddings, compared using cosine similarity.\n    Takes in a dictionary with all the hyperparameters, for example:\n        {\n            \"trace\": true,     \n\n            \"hyperparameters\" : {\n                \"model_checkpoint\":\"bert-base-uncased\",\n                \"dev_data_loader_name\": \"data_loaders.dev_data_loader\"\n            }\n        }\n    \n    Returns: predicted labels, logs\n    \"\"\"", "\n", "set_trace", "(", "get_param", "(", "ex", ",", "\"trace\"", ",", "True", ")", ")", "\n", "\n", "hp", "=", "ex", "[", "\"hyperparameters\"", "]", "\n", "return", "_run_transformer_similarity_experiment", "(", "\n", "embedding_type", "=", "get_param", "(", "hp", ",", "\"model_checkpoint\"", ",", "\"word2vec\"", ")", ",", "\n", "dev_data_loader_name", "=", "get_param", "(", "hp", ",", "\"dev_data_loader_name\"", ",", "None", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._load_data": [[13, 30], ["data.data_loader.parse_and_return_rows", "data.data_loader.parse_and_return_rows", "data.data_loader.resample_dataset", "feature_engineering.vectorizer.return_len_and_vocabulary", "feature_engineering.vectorizer.create_token_index", "feature_engineering.word_incidence_features.features3", "feature_engineering.word_incidence_features.features3", "feature_engineering.word_incidence_features.prune_rare_features", "print", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.resample_dataset", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.return_len_and_vocabulary", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.vectorizer.create_token_index", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.word_incidence_features.features3", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.word_incidence_features.features3", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.word_incidence_features.prune_rare_features"], ["def", "_load_data", "(", "feature_removal_threshold", "=", "None", ",", "print_logs", "=", "True", ")", ":", "\n", "    ", "rows", "=", "data_loader", ".", "parse_and_return_rows", "(", "'./data/processed_data/train.csv'", ")", "\n", "dev_rows", "=", "data_loader", ".", "parse_and_return_rows", "(", "'./data/processed_data/dev.csv'", ")", "\n", "rows", ",", "dev_rows", "=", "data_loader", ".", "resample_dataset", "(", "rows", ",", "dev_rows", ")", "\n", "vocabulary", ",", "vocabulary_length", "=", "vectorizer", ".", "return_len_and_vocabulary", "(", "rows", ")", "\n", "word_to_index", "=", "vectorizer", ".", "create_token_index", "(", "vocabulary", ")", "\n", "x", ",", "y", ",", "total_feature_amount", "=", "word_incidence_features", ".", "features3", "(", "rows", ",", "word_to_index", ")", "\n", "x_dev", ",", "y_dev", ",", "_", "=", "word_incidence_features", ".", "features3", "(", "dev_rows", ",", "word_to_index", ")", "\n", "\n", "if", "feature_removal_threshold", "is", "not", "None", ":", "\n", "        ", "x", ",", "y", ",", "x_dev", ",", "y_dev", "=", "word_incidence_features", ".", "prune_rare_features", "(", "x", ",", "y", ",", "total_feature_amount", ",", "feature_removal_threshold", ",", "x_dev", "=", "x_dev", ",", "y_dev", "=", "y_dev", ")", "\n", "\n", "", "if", "print_logs", ":", "\n", "        ", "print", "(", "len", "(", "x", ")", ",", "\" instances, \"", ",", "total_feature_amount", ",", "\" features\"", ")", "\n", "print", "(", "len", "(", "x_dev", ")", ",", "\" test instances\"", ")", "\n", "\n", "", "return", "x", ",", "y", ",", "x_dev", ",", "y_dev", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._train_tree": [[31, 75], ["time.time", "models.classifiers.decision_tree.BinaryDecisionTree", "models.classifiers.decision_tree.BinaryDecisionTree.initialize_training", "time.time", "models.classifiers.decision_tree.BinaryDecisionTree.expand_tree", "time.time", "logs.append", "print", "print", "print", "decision_tree_baseline._calculate_accuracy", "decision_tree_baseline._calculate_accuracy"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.initialize_training", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.expand_tree", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._calculate_accuracy", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._calculate_accuracy"], ["", "def", "_train_tree", "(", "\n", "x", ",", "y", ",", "x_dev", ",", "y_dev", ",", "\n", "max_depth", ",", "\n", "subset_size", ",", "\n", "training_instance_threshold", ",", "\n", "num_threads", "=", "1", ",", "\n", "print_logs", "=", "True", ",", "\n", "accuracy_print_frequency", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Performs training of the decision tree one step at a time, while recording various statistics about the process.\n    \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "decision_tree", "=", "BinaryDecisionTree", "(", ")", "\n", "decision_tree", ".", "initialize_training", "(", "x", ",", "y", ")", "\n", "\n", "logs", "=", "[", "]", "\n", "can_keep_expanding", "=", "True", "\n", "\n", "while", "can_keep_expanding", ":", "\n", "        ", "if", "max_depth", "is", "not", "None", "and", "decision_tree", ".", "current_depth", ">=", "max_depth", ":", "\n", "            ", "return", "logs", ",", "decision_tree", "# max depth reached, stop training early", "\n", "\n", "", "one_layer_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# expand the next depth layer of the tree", "\n", "can_keep_expanding", "=", "decision_tree", ".", "expand_tree", "(", "subset_size", ",", "training_instance_threshold", ",", "num_threads", ")", "\n", "\n", "one_layer_end", "=", "time", ".", "time", "(", ")", "\n", "\n", "layer_time", "=", "one_layer_end", "-", "one_layer_start", "\n", "total_time", "=", "one_layer_end", "-", "start", "\n", "\n", "if", "print_logs", ":", "\n", "            ", "print", "(", "\"Depth: \"", ",", "decision_tree", ".", "current_depth", ",", "\"Total nodes: \"", ",", "decision_tree", ".", "total_nodes", ",", "\"Time taken on layer: \"", ",", "layer_time", ",", "\"Total time taken: \"", ",", "total_time", ")", "\n", "", "logs", ".", "append", "(", "(", "decision_tree", ".", "current_depth", ",", "decision_tree", ".", "total_nodes", ",", "layer_time", ",", "total_time", ")", ")", "\n", "\n", "# Calculating accuracy (especially on the training set) is a bit expensive, so we're not doing it every step.", "\n", "# This is only meant to check up on the progress, since the final accuracy will be calcuated at all depths simultaneously after training is done.", "\n", "if", "print_logs", "and", "decision_tree", ".", "current_depth", "%", "accuracy_print_frequency", "==", "0", ":", "\n", "            ", "print", "(", "\"dev: \"", ",", "_calculate_accuracy", "(", "decision_tree", ",", "x_dev", ",", "y_dev", ")", ")", "\n", "print", "(", "\"train: \"", ",", "_calculate_accuracy", "(", "decision_tree", ",", "x", ",", "y", ")", ")", "\n", "\n", "", "", "return", "logs", ",", "decision_tree", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._calculate_accuracy": [[76, 84], ["models.evaluation.calculate_accuracy", "predictions.append", "decision_tree.predict_class"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.models.evaluation.calculate_accuracy", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTreeNode.predict_class"], ["", "def", "_calculate_accuracy", "(", "decision_tree", ",", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Make a prediction on each instance in x with the given decision_tree, then calculate accuracy by comparing predictions to the labels in y.\n    \"\"\"", "\n", "predictions", "=", "[", "]", "\n", "for", "instance", "in", "x", ":", "\n", "        ", "predictions", ".", "append", "(", "decision_tree", ".", "predict_class", "(", "instance", ")", ")", "\n", "", "return", "evaluation", ".", "calculate_accuracy", "(", "predictions", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._calculate_accuracy_at_all_depths": [[85, 104], ["decision_tree.predict_classes_at_all_depths", "list", "map", "models.evaluation.calculate_accuracy", "accuracies.append", "zip"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.predict_classes_at_all_depths", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.models.evaluation.calculate_accuracy"], ["", "def", "_calculate_accuracy_at_all_depths", "(", "decision_tree", ",", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Make predictions on all instances in x with the given decision_tree at each depth.\n    Returns a list of accuracies, where accuracies[i] is the accuracy that would be obtained if traversing the tree was stopped when it reached a depth of i.\n    \"\"\"", "\n", "accuracies", "=", "[", "]", "\n", "\n", "# make predictions on each instance of x. We get a list of lists of size len(x) * depth", "\n", "predictions_at_all_depths", "=", "decision_tree", ".", "predict_classes_at_all_depths", "(", "x", ")", "\n", "\n", "# calculate transpose of predictions, so that it becomes depth * len(x)", "\n", "predictions_at_all_depths", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "predictions_at_all_depths", ")", ")", ")", "\n", "\n", "# now when iterating through the predictions each row is a list of predicted classes for all instances in x", "\n", "for", "predictions_at_depth", "in", "predictions_at_all_depths", ":", "\n", "        ", "accuracy", "=", "evaluation", ".", "calculate_accuracy", "(", "predictions_at_depth", ",", "y", ")", "\n", "accuracies", ".", "append", "(", "accuracy", ")", "\n", "\n", "", "return", "accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._save_results": [[105, 115], ["open", "open.write", "enumerate", "open.close", "open.write"], "function", ["None"], ["", "def", "_save_results", "(", "logs", ",", "train_accuracies", ",", "dev_accuracies", ",", "file_name", ")", ":", "\n", "    ", "\"\"\"\n    Saves training statistics in a file with the given name.\n    \"\"\"", "\n", "file", "=", "open", "(", "file_name", ",", "\"w\"", ")", "\n", "file", ".", "write", "(", "\"acc_train,acc_dev,depth,nodes,time_for_layer,total_time\\n\"", ")", "\n", "for", "i", ",", "log", "in", "enumerate", "(", "logs", ")", ":", "\n", "        ", "message", "=", "\"%s,%s,%s,%s,%s,%s\\n\"", "%", "(", "train_accuracies", "[", "i", "]", ",", "dev_accuracies", "[", "i", "]", ",", "log", "[", "0", "]", ",", "log", "[", "1", "]", ",", "log", "[", "2", "]", ",", "log", "[", "3", "]", ")", "\n", "file", ".", "write", "(", "message", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._run_decision_tree_experiment": [[116, 159], ["decision_tree_baseline._load_data", "decision_tree_baseline._train_tree", "time.time", "decision_tree_baseline._calculate_accuracy_at_all_depths", "decision_tree_baseline._calculate_accuracy_at_all_depths", "time.time", "decision_tree_baseline._save_results", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._load_data", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._train_tree", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._calculate_accuracy_at_all_depths", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._calculate_accuracy_at_all_depths", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._save_results"], ["", "def", "_run_decision_tree_experiment", "(", "\n", "max_depth", ",", "\n", "subset_size", ",", "\n", "feature_removal_threshold", ",", "\n", "training_instance_threshold", ",", "\n", "result_file_name", ",", "\n", "num_threads", "=", "1", ",", "\n", "print_logs", "=", "True", ",", "\n", "accuracy_print_frequency", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Combines all the previous functions in a self contained test. Trains decision tree, calculates accuracies and saves the results.\n\n    max_depth: when the tree reaches this depth, training will be stopped\n    subset_size: how many training instances to look at when calculating information depth. Using only a subset speeds up training at the cost of accuracy.\n    training_instance_threshold: normalizing measure. Don't split leaf nodes that have less than this amount of training instances associated with them.\n    result_file_name: file name in which to store results\n    num_threads: how many processes to use when calculating information gain. 5 works well on my computer, but will depend on hardware.\n    accuracy_print_frequency: how often to calculate the accuracy and print it out. Only used for checking on the progress of the tree, full accuracy will be                                 calculated at the end anyway.\n    tree, logs: in case the training is stopped before it's finished, if you passed your own tree/logs instances here, you'll still be able to access them \n                so the training progress won't be lost.\n    \"\"\"", "\n", "x", ",", "y", ",", "x_dev", ",", "y_dev", "=", "_load_data", "(", "feature_removal_threshold", ",", "print_logs", ")", "\n", "logs", ",", "tree", "=", "_train_tree", "(", "\n", "x", ",", "y", ",", "x_dev", ",", "y_dev", ",", "\n", "max_depth", ",", "\n", "subset_size", ",", "\n", "training_instance_threshold", ",", "\n", "num_threads", ",", "\n", "print_logs", ",", "\n", "accuracy_print_frequency", ")", "\n", "\n", "if", "print_logs", ":", "\n", "        ", "print", "(", "\"Calculating accuracy at all depths...\"", ")", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "train_accuracies", "=", "_calculate_accuracy_at_all_depths", "(", "tree", ",", "x", ",", "y", ")", "\n", "dev_accuracies", "=", "_calculate_accuracy_at_all_depths", "(", "tree", ",", "x_dev", ",", "y_dev", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "print_logs", ":", "\n", "        ", "print", "(", "\"Time taken: \"", ",", "end", "-", "start", ")", "\n", "print", "(", "\"Final train accuracy: \"", ",", "train_accuracies", "[", "-", "1", "]", ")", "\n", "print", "(", "\"Final dev accuracy: \"", ",", "dev_accuracies", "[", "-", "1", "]", ")", "\n", "", "_save_results", "(", "logs", ",", "train_accuracies", ",", "dev_accuracies", ",", "result_file_name", ")", "\n", "return", "logs", ",", "tree", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._get_param": [[160, 165], ["None"], "function", ["None"], ["", "def", "_get_param", "(", "dict", ",", "key", ",", "fallback_value", ")", ":", "\n", "    ", "if", "key", "in", "dict", ":", "\n", "        ", "return", "dict", "[", "key", "]", "\n", "", "else", ":", "\n", "        ", "return", "fallback_value", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline.run": [[166, 180], ["decision_tree_baseline._run_decision_tree_experiment", "decision_tree_baseline._get_param", "decision_tree_baseline._get_param", "decision_tree_baseline._get_param", "decision_tree_baseline._get_param", "decision_tree_baseline._get_param", "decision_tree_baseline._get_param", "decision_tree_baseline._get_param", "decision_tree_baseline._get_param"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._run_decision_tree_experiment", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.decision_tree_baseline._get_param"], ["", "", "def", "run", "(", "ex", ")", ":", "\n", "    ", "hp", "=", "ex", "[", "\"hyperparameters\"", "]", "\n", "_run_decision_tree_experiment", "(", "\n", "max_depth", "=", "_get_param", "(", "hp", ",", "\"max_depth\"", ",", "100", ")", ",", "\n", "subset_size", "=", "_get_param", "(", "hp", ",", "\"subset_size\"", ",", "3000", ")", ",", "\n", "feature_removal_threshold", "=", "_get_param", "(", "hp", ",", "\"feature_removal_threshold\"", ",", "100", ")", ",", "\n", "training_instance_threshold", "=", "_get_param", "(", "hp", ",", "\"training_instance_threshold\"", ",", "100", ")", ",", "\n", "result_file_name", "=", "_get_param", "(", "ex", ",", "\"result_file_name\"", ",", "'result.txt'", ")", ",", "\n", "num_threads", "=", "_get_param", "(", "ex", ",", "\"num_threads\"", ",", "5", ")", ",", "\n", "print_logs", "=", "_get_param", "(", "ex", ",", "\"trace\"", ",", "True", ")", ",", "\n", "accuracy_print_frequency", "=", "_get_param", "(", "ex", ",", "\"accuracy_print_frequency\"", ",", "10", ")", ",", "\n", ")", "\n", "\n", "return", "None", ",", "None", ",", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.doc2vec_similarity._predict_labels": [[9, 23], ["model.infer_vector", "model.infer_vector", "model.infer_vector", "scipy.distance.cosine", "scipy.distance.cosine", "labels.append", "labels.append"], "function", ["None"], ["def", "_predict_labels", "(", "model", ",", "data", ")", ":", "\n", "    ", "labels", "=", "[", "]", "\n", "for", "instance", "in", "data", ":", "\n", "        ", "obs", "=", "model", ".", "infer_vector", "(", "instance", "[", "0", "]", "+", "instance", "[", "1", "]", ")", "\n", "hyp1", "=", "model", ".", "infer_vector", "(", "instance", "[", "2", "]", ")", "\n", "hyp2", "=", "model", ".", "infer_vector", "(", "instance", "[", "3", "]", ")", "\n", "\n", "s1", "=", "spatial", ".", "distance", ".", "cosine", "(", "obs", ",", "hyp1", ")", "\n", "s2", "=", "spatial", ".", "distance", ".", "cosine", "(", "obs", ",", "hyp2", ")", "\n", "if", "s1", "<", "s2", ":", "\n", "            ", "labels", ".", "append", "(", "'1'", ")", "\n", "", "else", ":", "\n", "            ", "labels", ".", "append", "(", "'2'", ")", "\n", "", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.doc2vec_similarity._run_doc2vec_experiment": [[24, 52], ["experiments.experiment_utilities.printt", "experiments.experiment_utilities.load_data", "experiments.experiment_utilities.printt", "doc2vec_similarity._predict_labels", "models.calculate_accuracy", "experiments.experiment_utilities.printt", "logs.append", "experiments.experiment_utilities.printt", "feature_engineering.get_pretrained_embeddings", "experiments.experiment_utilities.printt", "feature_engineering.train_embedding_model", "str", "str"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data_loaders.dev_data_loader.load_data", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.doc2vec_similarity._predict_labels", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.models.evaluation.calculate_accuracy", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.document_embeddings.get_pretrained_embeddings", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.feature_engineering.document_embeddings.train_embedding_model"], ["", "def", "_run_doc2vec_experiment", "(", "\n", "use_pre_trained_embeddings", ",", "\n", "embedding_type", ",", "\n", "dev_data_loader_name", ",", "\n", "embedding_training_data_loader_name", ",", "\n", "vector_size", ",", "\n", "min_count", ")", ":", "\n", "\n", "    ", "logs", "=", "[", "]", "\n", "\n", "printt", "(", "\"Loading data...\"", ")", "\n", "dev_documents", ",", "embedding_training_corpus", "=", "load_data", "(", "dev_data_loader_name", ",", "embedding_training_data_loader_name", ")", "\n", "if", "use_pre_trained_embeddings", ":", "\n", "        ", "printt", "(", "\"Using pretrained embedding model %s ...\"", "%", "embedding_type", ")", "\n", "embedding_model", "=", "document_embeddings", ".", "get_pretrained_embeddings", "(", "embedding_type", ")", "\n", "", "else", ":", "\n", "        ", "printt", "(", "\"Training %s embedding model...\"", "%", "embedding_type", ")", "\n", "embedding_model", "=", "document_embeddings", ".", "train_embedding_model", "(", "embedding_training_corpus", ",", "embedding_type", ",", "vector_size", ",", "min_count", ")", "\n", "\n", "", "printt", "(", "\"Predicting labels on devset...\"", ")", "\n", "predicted_labels", "=", "_predict_labels", "(", "embedding_model", ",", "dev_documents", ")", "\n", "real_labels", "=", "[", "x", "[", "4", "]", "for", "x", "in", "dev_documents", "]", "\n", "acc", "=", "evaluation", ".", "calculate_accuracy", "(", "predicted_labels", ",", "real_labels", ")", "\n", "\n", "printt", "(", "\"Accuracy: \"", "+", "str", "(", "acc", ")", ")", "\n", "logs", ".", "append", "(", "\"Accuracy: \"", "+", "str", "(", "acc", ")", ")", "\n", "\n", "return", "predicted_labels", ",", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.doc2vec_similarity.run": [[54, 82], ["experiments.experiment_utilities.set_trace", "doc2vec_similarity._run_doc2vec_experiment", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.set_trace", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.doc2vec_similarity._run_doc2vec_experiment", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param"], ["", "def", "run", "(", "ex", ")", ":", "\n", "    ", "\"\"\"\n    Doc2vec experiment with cosine similarity.\n    Takes in a dictionary with all the hyperparameters, for example:\n        {\n            \"trace\": true,     \n\n            \"hyperparameters\" : {\n                \"dev_data_loader_name\": \"data_loaders.dev_data_loader\",\n                \"pre_trained_embeddings\":false,\n                \"embedding_type\":\"word2vec\",\n                \"embedding_training_data_loader_name\": \"data_loaders.ROC_data_loader\",\n                \"vector_size\":100,\n                \"min_count\":10\n            }\n        }\n    \n    Returns: predicted labels, logs\n    \"\"\"", "\n", "hp", "=", "ex", "[", "\"hyperparameters\"", "]", "\n", "set_trace", "(", "get_param", "(", "ex", ",", "\"trace\"", ",", "True", ")", ")", "\n", "return", "_run_doc2vec_experiment", "(", "\n", "use_pre_trained_embeddings", "=", "get_param", "(", "hp", ",", "\"pre_trained_embeddings\"", ",", "False", ")", ",", "\n", "embedding_type", "=", "get_param", "(", "hp", ",", "\"embedding_type\"", ",", "\"doc2vec\"", ")", ",", "\n", "dev_data_loader_name", "=", "get_param", "(", "hp", ",", "\"dev_data_loader_name\"", ",", "None", ")", ",", "\n", "embedding_training_data_loader_name", "=", "get_param", "(", "hp", ",", "\"embedding_training_data_loader_name\"", ",", "\"word2vec\"", ")", ",", "\n", "vector_size", "=", "get_param", "(", "hp", ",", "\"vector_size\"", ",", "100", ")", ",", "\n", "min_count", "=", "get_param", "(", "hp", ",", "\"min_count\"", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.printt": [[5, 9], ["print"], "function", ["None"], ["def", "printt", "(", "text", ")", ":", "\n", "    ", "global", "g_trace", "\n", "if", "g_trace", ":", "\n", "        ", "print", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.set_trace": [[10, 13], ["None"], "function", ["None"], ["", "", "def", "set_trace", "(", "trace_value", ")", ":", "\n", "    ", "global", "g_trace", "\n", "g_trace", "=", "trace_value", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param": [[14, 22], ["None"], "function", ["None"], ["", "def", "get_param", "(", "dict", ",", "key", ",", "fallback_value", ")", ":", "\n", "    ", "\"\"\"\n    Get parameter with the provided key from the dictionary. If it doesn't exist, use fallback_value.\n    \"\"\"", "\n", "if", "key", "in", "dict", ":", "\n", "        ", "return", "dict", "[", "key", "]", "\n", "", "else", ":", "\n", "        ", "return", "fallback_value", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.load_data": [[24, 42], ["importlib.import_module", "importlib.import_module.load_data", "importlib.import_module", "importlib.import_module.load_data"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data_loaders.dev_data_loader.load_data", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data_loaders.dev_data_loader.load_data"], ["", "", "def", "load_data", "(", "dev_data_loader_name", ",", "embedding_data_loader_name", ")", ":", "\n", "    ", "\"\"\"\n    Dynamically load python files with the given names and call load_data() on them.\n    These data loaders take care of finding the data and tokenizing.\n    \"\"\"", "\n", "embedding_training_corpus", "=", "None", "\n", "dev_documents", "=", "None", "\n", "\n", "# load dev data", "\n", "dev_data_loader", "=", "importlib", ".", "import_module", "(", "\"experiments.\"", "+", "dev_data_loader_name", ")", "\n", "dev_documents", ",", "_", "=", "dev_data_loader", ".", "load_data", "(", ")", "\n", "\n", "# if data loader for training data is given, load it. This is not needed for pre-trained embeddings", "\n", "if", "embedding_data_loader_name", ":", "\n", "        ", "embedding_data_loader", "=", "importlib", ".", "import_module", "(", "\"experiments.\"", "+", "embedding_data_loader_name", ")", "\n", "_", ",", "embedding_training_corpus", "=", "embedding_data_loader", ".", "load_data", "(", ")", "\n", "\n", "", "return", "dev_documents", ",", "embedding_training_corpus", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.predict_labels_cosine": [[43, 62], ["scipy.distance.cosine", "scipy.distance.cosine", "labels.append", "labels.append"], "function", ["None"], ["", "def", "predict_labels_cosine", "(", "model", ",", "data", ")", ":", "\n", "    ", "\"\"\"\n    Use cosine similarity to make label predictions for each data point.\n    Model must override __getitem__ to take in a text and return the vector representation of the whole text. \n    \"\"\"", "\n", "labels", "=", "[", "]", "\n", "for", "instance", "in", "data", ":", "\n", "# combine observations", "\n", "        ", "obs", "=", "model", "[", "instance", "[", "0", "]", "+", "instance", "[", "1", "]", "]", "\n", "hyp1", "=", "model", "[", "instance", "[", "2", "]", "]", "\n", "hyp2", "=", "model", "[", "instance", "[", "3", "]", "]", "\n", "\n", "s1", "=", "spatial", ".", "distance", ".", "cosine", "(", "obs", ",", "hyp1", ")", "\n", "s2", "=", "spatial", ".", "distance", ".", "cosine", "(", "obs", ",", "hyp2", ")", "\n", "if", "s1", "<", "s2", ":", "\n", "            ", "labels", ".", "append", "(", "'1'", ")", "\n", "", "else", ":", "\n", "            ", "labels", ".", "append", "(", "'2'", ")", "\n", "", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.predict_labels_wmd": [[63, 77], ["model.wv.wmdistance", "model.wv.wmdistance", "labels.append", "labels.append"], "function", ["None"], ["", "def", "predict_labels_wmd", "(", "model", ",", "data", ")", ":", "\n", "    ", "labels", "=", "[", "]", "\n", "for", "instance", "in", "data", ":", "\n", "        ", "obs", "=", "instance", "[", "0", "]", "+", "instance", "[", "1", "]", "\n", "hyp1", "=", "instance", "[", "2", "]", "\n", "hyp2", "=", "instance", "[", "3", "]", "\n", "\n", "s1", "=", "model", ".", "wv", ".", "wmdistance", "(", "obs", ",", "hyp1", ")", "\n", "s2", "=", "model", ".", "wv", ".", "wmdistance", "(", "obs", ",", "hyp2", ")", "\n", "if", "s1", "<", "s2", ":", "\n", "            ", "labels", ".", "append", "(", "'1'", ")", "\n", "", "else", ":", "\n", "            ", "labels", ".", "append", "(", "'2'", ")", "\n", "", "", "return", "labels", "", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformers_classification.DataCollatorForMultipleChoice.__call__": [[84, 105], ["len", "len", "sum", "transformers_classification.DataCollatorForMultipleChoice.tokenizer.pad", "torch.tensor", "feature.pop", "v.view", "features[].keys", "transformers_classification.DataCollatorForMultipleChoice.items", "range", "feature.items"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "features", ")", ":", "\n", "        ", "label_name", "=", "\"label\"", "if", "\"label\"", "in", "features", "[", "0", "]", ".", "keys", "(", ")", "else", "\"labels\"", "\n", "labels", "=", "[", "feature", ".", "pop", "(", "label_name", ")", "for", "feature", "in", "features", "]", "\n", "batch_size", "=", "len", "(", "features", ")", "\n", "num_choices", "=", "len", "(", "features", "[", "0", "]", "[", "\"input_ids\"", "]", ")", "\n", "flattened_features", "=", "[", "[", "{", "k", ":", "v", "[", "i", "]", "for", "k", ",", "v", "in", "feature", ".", "items", "(", ")", "}", "for", "i", "in", "range", "(", "num_choices", ")", "]", "for", "feature", "in", "features", "]", "\n", "flattened_features", "=", "sum", "(", "flattened_features", ",", "[", "]", ")", "\n", "\n", "batch", "=", "self", ".", "tokenizer", ".", "pad", "(", "\n", "flattened_features", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "max_length", "=", "self", ".", "max_length", ",", "\n", "pad_to_multiple_of", "=", "self", ".", "pad_to_multiple_of", ",", "\n", "return_tensors", "=", "\"pt\"", ",", "\n", ")", "\n", "\n", "# Un-flatten", "\n", "batch", "=", "{", "k", ":", "v", ".", "view", "(", "batch_size", ",", "num_choices", ",", "-", "1", ")", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", "}", "\n", "# Add back labels", "\n", "batch", "[", "\"labels\"", "]", "=", "torch", ".", "tensor", "(", "labels", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformers_classification.parse_and_return_rows": [[29, 36], ["open", "csv.reader", "list"], "function", ["None"], ["def", "parse_and_return_rows", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "read_obj", ":", "\n", "# pass the file object to reader() to get the reader object", "\n", "        ", "csv_reader", "=", "reader", "(", "read_obj", ")", "\n", "# Pass reader object to list() to get a list of lists", "\n", "list_of_rows", "=", "list", "(", "csv_reader", ")", "\n", "", "return", "list_of_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformers_classification.create_csv": [[37, 44], ["zip", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerow"], "function", ["None"], ["", "def", "create_csv", "(", "combined_observation", ",", "hypothesis", ",", "label", ",", "file_path", ")", ":", "\n", "    ", "rows", "=", "zip", "(", "combined_observation", ",", "hypothesis", ",", "label", ")", "\n", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "[", "\"observation\"", ",", "\"hypothesis\"", ",", "\"label\"", "]", ")", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "writer", ".", "writerow", "(", "row", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformers_classification.parse_dataloader": [[45, 55], ["processed_dataloader.append", "int"], "function", ["None"], ["", "", "", "def", "parse_dataloader", "(", "dataloader", ")", ":", "\n", "    ", "processed_dataloader", "=", "[", "]", "\n", "for", "entry", "in", "dataloader", ":", "\n", "        ", "data_dict", "=", "{", "}", "\n", "data_dict", "[", "\"observation\"", "]", "=", "entry", "[", "1", "]", "+", "\" \"", "+", "entry", "[", "2", "]", "\n", "data_dict", "[", "\"hypothesis0\"", "]", "=", "entry", "[", "3", "]", "\n", "data_dict", "[", "\"hypothesis1\"", "]", "=", "entry", "[", "4", "]", "\n", "data_dict", "[", "\"label\"", "]", "=", "int", "(", "entry", "[", "5", "]", ")", "-", "1", "\n", "processed_dataloader", ".", "append", "(", "data_dict", ")", "\n", "", "return", "processed_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformers_classification.preprocess_function": [[56, 72], ["sum", "sum", "tokenizer", "list", "zip", "tokenizer.items", "range", "len"], "function", ["None"], ["", "def", "preprocess_function", "(", "examples", ",", "tokenizer", ")", ":", "\n", "# Repeat each first sentence four times to go with the four possibilities of second sentences.", "\n", "    ", "ending_names", "=", "[", "\"hypothesis0\"", ",", "\"hypothesis1\"", "]", "\n", "first_sentences", "=", "[", "[", "context", "]", "*", "2", "for", "context", "in", "examples", "[", "\"observation\"", "]", "]", "\n", "# Grab all second sentences possible for each context.", "\n", "second_sentences", "=", "[", "examples", "[", "end", "]", "for", "end", "in", "ending_names", "]", "\n", "second_sentences", "=", "[", "list", "(", "a", ")", "for", "a", "in", "zip", "(", "*", "second_sentences", ")", "]", "\n", "\n", "# Flatten everything", "\n", "first_sentences", "=", "sum", "(", "first_sentences", ",", "[", "]", ")", "\n", "second_sentences", "=", "sum", "(", "second_sentences", ",", "[", "]", ")", "\n", "\n", "# Tokenize", "\n", "tokenized_examples", "=", "tokenizer", "(", "first_sentences", ",", "second_sentences", ",", "truncation", "=", "True", ")", "\n", "# Un-flatten", "\n", "return", "{", "k", ":", "[", "v", "[", "i", ":", "i", "+", "2", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "v", ")", ",", "2", ")", "]", "for", "k", ",", "v", "in", "tokenized_examples", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformers_classification.compute_metrics": [[106, 110], ["numpy.argmax"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.argmax"], ["", "", "def", "compute_metrics", "(", "eval_predictions", ")", ":", "\n", "    ", "predictions", ",", "label_ids", "=", "eval_predictions", "\n", "preds", "=", "np", ".", "argmax", "(", "predictions", ",", "axis", "=", "1", ")", "\n", "return", "{", "\"accuracy\"", ":", "(", "preds", "==", "label_ids", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformers_classification._run_transformer_classification": [[111, 161], ["transformers.AutoModelForMultipleChoice.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "transformers_classification.parse_and_return_rows", "transformers_classification.parse_and_return_rows", "transformers_classification.parse_dataloader", "transformers_classification.parse_dataloader", "pandas.DataFrame().to_csv", "pandas.DataFrame().to_csv", "datasets.load_dataset", "datasets.load_dataset.map", "time.strftime", "os.path.join", "transformers.TrainingArguments", "transformers.Trainer", "transformers.Trainer.train", "transformers.Trainer.predict", "predictions[].tolist", "str", "time.gmtime", "shutil.rmtree", "pandas.DataFrame", "pandas.DataFrame", "transformers_classification.DataCollatorForMultipleChoice"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformers_classification.parse_dataloader", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformers_classification.parse_dataloader", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.train"], ["", "def", "_run_transformer_classification", "(", "batch_size", ",", "folder_name", ",", "lr", ",", "train_epochs", ",", "wgt_decay", ",", "model_checkpoint", ",", "train_file_path", ",", "val_file_path", ",", "delete_checkpoints", ")", ":", "\n", "\n", "    ", "model", "=", "AutoModelForMultipleChoice", ".", "from_pretrained", "(", "model_checkpoint", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_checkpoint", ",", "use_fast", "=", "True", ")", "\n", "train_list_of_rows", "=", "parse_and_return_rows", "(", "train_file_path", ")", "\n", "dev_list_of_rows", "=", "parse_and_return_rows", "(", "val_file_path", ")", "\n", "train", "=", "parse_dataloader", "(", "train_list_of_rows", ")", "\n", "val", "=", "parse_dataloader", "(", "dev_list_of_rows", ")", "\n", "\n", "pd", ".", "DataFrame", "(", "train", ")", ".", "to_csv", "(", "\"train_processed.csv\"", ",", "index", "=", "False", ")", "\n", "pd", ".", "DataFrame", "(", "val", ")", ".", "to_csv", "(", "\"val_processed.csv\"", ",", "index", "=", "False", ")", "\n", "\n", "datasets", "=", "load_dataset", "(", "'csv'", ",", "data_files", "=", "{", "'train'", ":", "'train_processed.csv'", ",", "\n", "'validation'", ":", "'val_processed.csv'", "}", ")", "\n", "\n", "encoded_datasets", "=", "datasets", ".", "map", "(", "preprocess_function", ",", "fn_kwargs", "=", "{", "\"tokenizer\"", ":", "tokenizer", "}", ",", "load_from_cache_file", "=", "False", ",", "batched", "=", "True", ")", "\n", "\n", "timestamp", "=", "time", ".", "strftime", "(", "\"%m_%d__%H_%M_%S\"", ",", "time", ".", "gmtime", "(", ")", ")", "\n", "checkpoint_folder", "=", "os", ".", "path", ".", "join", "(", "folder_name", ",", "model_checkpoint", "+", "\"_\"", "+", "timestamp", ")", "\n", "\n", "args", "=", "TrainingArguments", "(", "\n", "checkpoint_folder", ",", "\n", "evaluation_strategy", "=", "\"epoch\"", ",", "\n", "learning_rate", "=", "lr", ",", "\n", "per_device_train_batch_size", "=", "batch_size", ",", "\n", "per_device_eval_batch_size", "=", "batch_size", ",", "\n", "num_train_epochs", "=", "train_epochs", ",", "\n", "weight_decay", "=", "wgt_decay", ",", "\n", "save_strategy", "=", "\"epoch\"", "\n", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "\n", "model", ",", "\n", "args", ",", "\n", "train_dataset", "=", "encoded_datasets", "[", "\"train\"", "]", ",", "\n", "eval_dataset", "=", "encoded_datasets", "[", "\"validation\"", "]", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "data_collator", "=", "DataCollatorForMultipleChoice", "(", "tokenizer", ")", ",", "\n", "compute_metrics", "=", "compute_metrics", ",", "\n", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "\n", "if", "delete_checkpoints", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "checkpoint_folder", ")", "\n", "\n", "", "predictions", "=", "trainer", ".", "predict", "(", "encoded_datasets", "[", "\"validation\"", "]", ")", "\n", "labels", "=", "predictions", "[", "1", "]", ".", "tolist", "(", ")", "\n", "acc", "=", "predictions", "[", "2", "]", "[", "\"test_accuracy\"", "]", "\n", "logs", "=", "str", "(", "trainer", ".", "state", ".", "log_history", ")", "\n", "return", "labels", ",", "acc", ",", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformers_classification.run": [[162, 175], ["transformers_classification._run_transformer_classification", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param", "experiments.experiment_utilities.get_param"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.transformers_classification._run_transformer_classification", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.experiments.experiment_utilities.get_param"], ["", "def", "run", "(", "ex", ")", ":", "\n", "    ", "hp", "=", "ex", "[", "\"hyperparameters\"", "]", "\n", "\n", "return", "_run_transformer_classification", "(", "\n", "batch_size", "=", "get_param", "(", "hp", ",", "\"batch_size\"", ",", "None", ")", ",", "\n", "folder_name", "=", "get_param", "(", "hp", ",", "\"folder_name\"", ",", "None", ")", ",", "\n", "lr", "=", "get_param", "(", "hp", ",", "\"lr\"", ",", "None", ")", ",", "\n", "train_epochs", "=", "get_param", "(", "hp", ",", "\"train_epochs\"", ",", "None", ")", ",", "\n", "wgt_decay", "=", "get_param", "(", "hp", ",", "\"wgt_decay\"", ",", "None", ")", ",", "\n", "model_checkpoint", "=", "get_param", "(", "hp", ",", "\"model_checkpoint\"", ",", "None", ")", ",", "\n", "train_file_path", "=", "get_param", "(", "hp", ",", "\"train_file_path\"", ",", "None", ")", ",", "\n", "val_file_path", "=", "get_param", "(", "hp", ",", "\"val_file_path\"", ",", "None", ")", ",", "\n", "delete_checkpoints", "=", "get_param", "(", "hp", ",", "\"delete_checkpoints\"", ",", "True", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data_loaders.train_data_loader.load_data": [[4, 19], ["data.parse_and_return_rows", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "row[].lower", "row[].lower", "row[].lower", "row[].lower"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows"], ["def", "load_data", "(", ")", ":", "\n", "    ", "rows", "=", "data_loader", ".", "parse_and_return_rows", "(", "\"data/processed_data/train.csv\"", ")", "\n", "\n", "# tokenize texts", "\n", "documents", "=", "[", "(", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "1", "]", ".", "lower", "(", ")", ")", ",", "\n", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "2", "]", ".", "lower", "(", ")", ")", ",", "\n", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "3", "]", ".", "lower", "(", ")", ")", ",", "\n", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "4", "]", ".", "lower", "(", ")", ")", ",", "\n", "row", "[", "5", "]", ")", "for", "row", "in", "rows", "]", "\n", "\n", "# split each document into separate documents, containing just one sentence each.", "\n", "corpus", "=", "[", "[", "doc", "[", "0", "]", ",", "doc", "[", "1", "]", ",", "doc", "[", "2", "]", ",", "doc", "[", "3", "]", "]", "for", "doc", "in", "documents", "]", "\n", "corpus", "=", "[", "item", "for", "sublist", "in", "corpus", "for", "item", "in", "sublist", "]", "\n", "\n", "return", "documents", ",", "corpus", "\n", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data_loaders.ROC_data_loader.load_data": [[4, 22], ["data.parse_and_return_rows", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "row[].lower", "row[].lower", "row[].lower", "row[].lower", "row[].lower"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows"], ["def", "load_data", "(", ")", ":", "\n", "    ", "rows", "=", "data_loader", ".", "parse_and_return_rows", "(", "\"data/ROCStories/ROCStories_winter2017 - ROCStories_winter2017.csv\"", ")", "\n", "\n", "# remove row that contains the header", "\n", "rows", "=", "rows", "[", "1", ":", "]", "\n", "\n", "# tokenize texts", "\n", "documents", "=", "[", "(", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "2", "]", ".", "lower", "(", ")", ")", ",", "\n", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "3", "]", ".", "lower", "(", ")", ")", ",", "\n", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "4", "]", ".", "lower", "(", ")", ")", ",", "\n", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "5", "]", ".", "lower", "(", ")", ")", ",", "\n", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "6", "]", ".", "lower", "(", ")", ")", ")", "for", "row", "in", "rows", "]", "\n", "\n", "# split each document into separate documents, containing just one sentence each.", "\n", "corpus", "=", "[", "[", "doc", "[", "0", "]", ",", "doc", "[", "1", "]", ",", "doc", "[", "2", "]", ",", "doc", "[", "3", "]", ",", "doc", "[", "4", "]", "]", "for", "doc", "in", "documents", "]", "\n", "corpus", "=", "[", "item", "for", "sublist", "in", "corpus", "for", "item", "in", "sublist", "]", "\n", "\n", "return", "documents", ",", "corpus", "", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data_loaders.dev_data_loader.load_data": [[4, 17], ["data.parse_and_return_rows", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "row[].lower", "row[].lower", "row[].lower", "row[].lower"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows"], ["def", "load_data", "(", ")", ":", "\n", "    ", "rows", "=", "data_loader", ".", "parse_and_return_rows", "(", "\"data/processed_data/dev.csv\"", ")", "\n", "\n", "# tokenize texts", "\n", "documents", "=", "[", "(", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "1", "]", ".", "lower", "(", ")", ")", ",", "\n", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "2", "]", ".", "lower", "(", ")", ")", ",", "\n", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "3", "]", ".", "lower", "(", ")", ")", ",", "\n", "nltk", ".", "tokenize", ".", "word_tokenize", "(", "row", "[", "4", "]", ".", "lower", "(", ")", ")", ",", "\n", "row", "[", "5", "]", ")", "for", "row", "in", "rows", "]", "\n", "\n", "corpus", "=", "[", "row", "[", "0", "]", "+", "row", "[", "1", "]", "+", "row", "[", "2", "]", "+", "row", "[", "3", "]", "for", "row", "in", "documents", "]", "\n", "\n", "return", "documents", ",", "corpus", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data_loaders.dev_data_loader.load_data_raw": [[19, 25], ["data.parse_and_return_rows"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows"], ["", "def", "load_data_raw", "(", ")", ":", "\n", "    ", "rows", "=", "data_loader", ".", "parse_and_return_rows", "(", "\"data/processed_data/dev.csv\"", ")", "\n", "\n", "documents", "=", "[", "(", "row", "[", "1", "]", "+", "\" \"", "+", "row", "[", "2", "]", ",", "row", "[", "3", "]", ",", "row", "[", "4", "]", ",", "row", "[", "5", "]", ")", "for", "row", "in", "rows", "]", "\n", "\n", "return", "documents", "\n", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.models.evaluation.calculate_accuracy": [[1, 10], ["range", "len"], "function", ["None"], ["def", "calculate_accuracy", "(", "pred_values", ",", "actual_values", ")", ":", "\n", "    ", "total_count", "=", "0.0", "\n", "correct_values", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "actual_values", ")", ")", ":", "\n", "        ", "total_count", "+=", "1", "\n", "if", "pred_values", "[", "i", "]", "==", "actual_values", "[", "i", "]", ":", "\n", "            ", "correct_values", "+=", "1", "\n", "", "", "accuracy", "=", "(", "correct_values", "/", "total_count", ")", "*", "100", "\n", "return", "accuracy", "\n", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.__init__": [[15, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", "=", "None", "\n", "self", ".", "total_nodes", "=", "0", "\n", "self", ".", "current_depth", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.initialize_training": [[20, 28], ["decision_tree.BinaryDecisionTreeNode"], "methods", ["None"], ["", "def", "initialize_training", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Prepare the tree to start training it \n        \"\"\"", "\n", "self", ".", "root", "=", "BinaryDecisionTreeNode", "(", "x", ",", "y", ")", "\n", "self", ".", "leaf_nodes_to_split", "=", "[", "self", ".", "root", "]", "\n", "self", ".", "new_leaf_nodes", "=", "[", "]", "\n", "self", ".", "total_nodes", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.expand_tree": [[29, 51], ["len", "decision_tree.BinaryDecisionTree.leaf_nodes_to_split.pop", "decision_tree.BinaryDecisionTree.split", "decision_tree.BinaryDecisionTree.children.values", "len", "decision_tree.BinaryDecisionTree.new_leaf_nodes.append", "len"], "methods", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTreeNode.split"], ["", "def", "expand_tree", "(", "self", ",", "subset_for_information_gain_calculation", "=", "None", ",", "training_instance_threshold", "=", "None", ",", "num_threads", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Perform expansion of all nodes in self.leaf_nodes_to_split - all nodes in a single layer.\n        Returns true if further expansion is possible, false if not.\n        \"\"\"", "\n", "while", "len", "(", "self", ".", "leaf_nodes_to_split", ")", ">", "0", ":", "\n", "            ", "node", "=", "self", ".", "leaf_nodes_to_split", ".", "pop", "(", ")", "\n", "if", "training_instance_threshold", "is", "not", "None", "and", "len", "(", "node", ".", "x", ")", "<", "training_instance_threshold", ":", "\n", "                ", "continue", "\n", "", "node", ".", "split", "(", "subset_for_information_gain_calculation", ",", "num_threads", ")", "\n", "for", "child", "in", "node", ".", "children", ".", "values", "(", ")", ":", "\n", "                ", "self", ".", "new_leaf_nodes", ".", "append", "(", "child", ")", "\n", "self", ".", "total_nodes", "+=", "1", "\n", "\n", "# no new nodes were added, so we return false and stop", "\n", "", "", "if", "len", "(", "self", ".", "new_leaf_nodes", ")", "==", "0", ":", "\n", "            ", "return", "False", "\n", "\n", "", "self", ".", "leaf_nodes_to_split", "=", "self", ".", "new_leaf_nodes", "\n", "self", ".", "new_leaf_nodes", "=", "[", "]", "\n", "self", ".", "current_depth", "+=", "1", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.train": [[52, 61], ["decision_tree.BinaryDecisionTree.expand_tree"], "methods", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.expand_tree"], ["", "def", "train", "(", "self", ",", "max_depth", "=", "None", ",", "subset_for_information_gain_calculation", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Keep expanding tree until either no more nodes can be expanded or given max_depth is reached.\n        \"\"\"", "\n", "can_keep_expanding", "=", "True", "\n", "while", "can_keep_expanding", ":", "\n", "            ", "if", "max_depth", "is", "not", "None", "and", "self", ".", "current_depth", ">=", "max_depth", ":", "\n", "                ", "return", "\n", "", "can_keep_expanding", "=", "self", ".", "expand_tree", "(", "subset_for_information_gain_calculation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.predict_class": [[62, 67], ["decision_tree.BinaryDecisionTree.root.predict_class"], "methods", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTreeNode.predict_class"], ["", "", "def", "predict_class", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Make prediction on a single instance.\n        \"\"\"", "\n", "return", "self", ".", "root", ".", "predict_class", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTree.predict_classes_at_all_depths": [[68, 99], ["enumerate", "predictions_for_all_instances.append", "predictions.append", "len"], "methods", ["None"], ["", "def", "predict_classes_at_all_depths", "(", "self", ",", "instances", ")", ":", "\n", "        ", "\"\"\"\n        Dynamically predict the class of the tree on the given instances at every depth.\n        Returns a (len(instances) x max_depth) array with the predicted classes. \n        \"\"\"", "\n", "predictions_for_all_instances", "=", "[", "]", "\n", "\n", "# calculate class at each depth for every instance x", "\n", "for", "x", "in", "instances", ":", "\n", "# start at the root", "\n", "            ", "current_node", "=", "self", ".", "root", "\n", "\n", "# prediction at depth 0 is just the most common classes in the training data", "\n", "predictions", "=", "[", "current_node", ".", "most_common_class", "]", "\n", "\n", "# traverse the tree until a leaf is hit, saving the most_common_class at every step", "\n", "while", "not", "current_node", ".", "is_leaf", ":", "\n", "                ", "feature_value", "=", "1", "if", "current_node", ".", "split_feature_index", "in", "x", "else", "0", "\n", "current_node", "=", "current_node", ".", "children", "[", "feature_value", "]", "\n", "predictions", ".", "append", "(", "current_node", ".", "most_common_class", ")", "\n", "\n", "# store predictions for this x in the ", "\n", "", "predictions_for_all_instances", ".", "append", "(", "predictions", ")", "\n", "\n", "# extend all the arrays for the predictions that terminated before reaching max depth, ", "\n", "# so that each test instance has exactly max_depth predictions", "\n", "", "for", "i", ",", "prediction", "in", "enumerate", "(", "predictions_for_all_instances", ")", ":", "\n", "            ", "prediction", "+=", "[", "prediction", "[", "-", "1", "]", "]", "*", "(", "self", ".", "current_depth", "+", "1", "-", "len", "(", "prediction", ")", ")", "\n", "predictions_for_all_instances", "[", "i", "]", "=", "prediction", "\n", "\n", "", "return", "predictions_for_all_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTreeNode.__init__": [[104, 117], ["len", "decision_tree.entropy", "collections.Counter().most_common", "collections.Counter"], "methods", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.entropy"], ["def", "__init__", "(", "self", ",", "x", ",", "y", ",", "already_used_features", "=", "[", "]", ",", "most_common_class_of_parent", "=", "None", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "already_used_features", "=", "already_used_features", "# indexes of all the features that have already been used to split the tree", "\n", "self", ".", "is_leaf", "=", "True", "\n", "if", "len", "(", "y", ")", "==", "0", ":", "\n", "            ", "self", ".", "entropy", "=", "0", "\n", "self", ".", "most_common_class", "=", "most_common_class_of_parent", "\n", "", "else", ":", "\n", "            ", "self", ".", "entropy", "=", "entropy", "(", "self", ".", "y", ")", "\n", "self", ".", "most_common_class", "=", "Counter", "(", "self", ".", "y", ")", ".", "most_common", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "", "self", ".", "split_feature_index", "=", "None", "# the index of the feature that this node splits on", "\n", "self", ".", "children", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTreeNode.split": [[119, 133], ["decision_tree.information_gain", "decision_tree.dictionary_argmax", "decision_tree.split_on_binary_feature", "decision_tree.BinaryDecisionTreeNode", "decision_tree.BinaryDecisionTreeNode", "len", "max", "information_gain.values"], "methods", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.information_gain", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.dictionary_argmax", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.split_on_binary_feature"], ["", "def", "split", "(", "self", ",", "subset_for_information_gain_calculation", "=", "None", ",", "num_threads", "=", "1", ")", ":", "\n", "        ", "\"\"\"Split this into two on the feature that would lead to the biggest information gain\"\"\"", "\n", "info_gain_for_all_features", "=", "information_gain", "(", "self", ".", "x", ",", "self", ".", "y", ",", "feature_mask", "=", "self", ".", "already_used_features", ",", "subset_for_information_gain_calculation", "=", "subset_for_information_gain_calculation", ",", "num_threads", "=", "num_threads", ")", "\n", "# if no possible split leads to an information gain, don't split", "\n", "if", "len", "(", "info_gain_for_all_features", ")", "==", "0", "or", "max", "(", "info_gain_for_all_features", ".", "values", "(", ")", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "is_leaf", "=", "False", "\n", "self", ".", "split_feature_index", "=", "dictionary_argmax", "(", "info_gain_for_all_features", ")", "# split on the feature that leads to the most information gain", "\n", "good_x", ",", "bad_x", ",", "good_y", ",", "bad_y", "=", "split_on_binary_feature", "(", "self", ".", "x", ",", "self", ".", "y", ",", "self", ".", "split_feature_index", ")", "\n", "\n", "new_used_features", "=", "self", ".", "already_used_features", "+", "[", "self", ".", "split_feature_index", "]", "\n", "self", ".", "children", "[", "0", "]", "=", "BinaryDecisionTreeNode", "(", "bad_x", ",", "bad_y", ",", "new_used_features", ",", "self", ".", "most_common_class", ")", "\n", "self", ".", "children", "[", "1", "]", "=", "BinaryDecisionTreeNode", "(", "good_x", ",", "good_y", ",", "new_used_features", ",", "self", ".", "most_common_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTreeNode.split_recursively": [[134, 147], ["decision_tree.BinaryDecisionTreeNode.split", "decision_tree.BinaryDecisionTreeNode.children.items", "child.split_recursively"], "methods", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTreeNode.split", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTreeNode.split_recursively"], ["", "def", "split_recursively", "(", "self", ",", "depth", "=", "0", ",", "max_depth", "=", "None", ")", ":", "\n", "        ", "\"\"\"Keep splitting recursively from this node\"\"\"", "\n", "# Entropy == 0 when all the instances in this node have the same class as there is no uncertainty anymore", "\n", "if", "self", ".", "entropy", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "max_depth", "is", "not", "None", "and", "depth", ">", "max_depth", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "split", "(", ")", "\n", "\n", "for", "_", ",", "child", "in", "self", ".", "children", ".", "items", "(", ")", ":", "\n", "            ", "child", ".", "split_recursively", "(", "depth", "=", "depth", "+", "1", ",", "max_depth", "=", "max_depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTreeNode.predict_class": [[148, 155], ["decision_tree.BinaryDecisionTreeNode.children[].predict_class"], "methods", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.BinaryDecisionTreeNode.predict_class"], ["", "", "def", "predict_class", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Recursively make a prediction about an unseen instance\"\"\"", "\n", "if", "self", ".", "is_leaf", ":", "\n", "            ", "return", "self", ".", "most_common_class", "\n", "", "else", ":", "\n", "            ", "feature_value", "=", "1", "if", "self", ".", "split_feature_index", "in", "x", "else", "0", "\n", "return", "self", ".", "children", "[", "feature_value", "]", ".", "predict_class", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.argmax": [[156, 158], ["array.index", "max"], "function", ["None"], ["", "", "", "def", "argmax", "(", "array", ")", ":", "\n", "      ", "return", "array", ".", "index", "(", "max", "(", "array", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.dictionary_argmax": [[159, 161], ["max", "dictionary.items", "operator.itemgetter"], "function", ["None"], ["", "def", "dictionary_argmax", "(", "dictionary", ")", ":", "\n", "    ", "return", "max", "(", "dictionary", ".", "items", "(", ")", ",", "key", "=", "itemgetter", "(", "1", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.entropy": [[162, 170], ["collections.Counter", "len", "math.log2"], "function", ["None"], ["", "def", "entropy", "(", "y", ")", ":", "\n", "    ", "\"\"\"Calculate entropy from list of labels in the dataset\"\"\"", "\n", "class_counter", "=", "Counter", "(", "y", ")", "\n", "entropy", "=", "0", "\n", "for", "c", "in", "class_counter", ":", "\n", "        ", "probability", "=", "class_counter", "[", "c", "]", "/", "len", "(", "y", ")", "\n", "entropy", "+=", "-", "probability", "*", "math", ".", "log2", "(", "probability", ")", "\n", "", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.split_on_binary_feature": [[171, 179], ["enumerate", "good_x.append", "bad_x.append", "good_y.append", "bad_y.append"], "function", ["None"], ["", "def", "split_on_binary_feature", "(", "x", ",", "y", ",", "feature_index", ")", ":", "\n", "    ", "\"\"\"Split instances x and labels y into two sets based on whether the feature at feature_index is 1 or 0\"\"\"", "\n", "good_x", ",", "bad_x", ",", "good_y", ",", "bad_y", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "instance_index", ",", "instance", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "good_x", ".", "append", "(", "instance", ")", "if", "feature_index", "in", "instance", "else", "bad_x", ".", "append", "(", "instance", ")", "\n", "good_y", ".", "append", "(", "y", "[", "instance_index", "]", ")", "if", "feature_index", "in", "instance", "else", "bad_y", ".", "append", "(", "y", "[", "instance_index", "]", ")", "\n", "\n", "", "return", "good_x", ",", "bad_x", ",", "good_y", ",", "bad_y", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.information_gain_for_subset_of_features": [[180, 197], ["decision_tree.split_on_binary_feature", "decision_tree.entropy", "decision_tree.entropy", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.split_on_binary_feature", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.entropy", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.entropy"], ["", "def", "information_gain_for_subset_of_features", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Calculates information gain for a subset of features. Used in the multiprocess implementation\n    to speed up the calculation.\n    \"\"\"", "\n", "start_entropy", ",", "x", ",", "y", ",", "features", ",", "feature_mask", "=", "args", "\n", "thread_result", "=", "{", "}", "\n", "for", "feature", "in", "features", ":", "\n", "        ", "if", "feature", "in", "feature_mask", ":", "\n", "            ", "continue", "\n", "", "good_x", ",", "bad_x", ",", "good_y", ",", "bad_y", "=", "split_on_binary_feature", "(", "x", ",", "y", ",", "feature", ")", "\n", "\n", "s", "=", "(", "len", "(", "good_x", ")", "/", "len", "(", "x", ")", ")", "*", "entropy", "(", "good_y", ")", "\n", "s", "+=", "(", "len", "(", "bad_x", ")", "/", "len", "(", "x", ")", ")", "*", "entropy", "(", "bad_y", ")", "\n", "\n", "thread_result", "[", "feature", "]", "=", "start_entropy", "-", "s", "\n", "", "return", "thread_result", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.information_gain": [[198, 228], ["decision_tree.entropy", "set", "decision_tree.partition_set", "multiprocessing.Pool.map", "decision_tree.get_random_subset", "multiprocessing.Pool"], "function", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.entropy", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.partition_set", "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.get_random_subset"], ["", "def", "information_gain", "(", "x", ",", "y", ",", "feature_mask", "=", "[", "]", ",", "subset_for_information_gain_calculation", "=", "None", ",", "num_threads", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the information gain for each feature in x and returns them as a dictionary mapping from index feature to the information gain.\n    Ignores the features in feature_mask (since they can't be used for splitting again)\n    \"\"\"", "\n", "global", "pool", "\n", "result", "=", "{", "}", "\n", "start_entropy", "=", "entropy", "(", "y", ")", "\n", "all_features_in_x", "=", "set", "(", ")", "\n", "for", "instance", "in", "x", ":", "\n", "        ", "all_features_in_x", "|=", "instance", "\n", "\n", "", "if", "subset_for_information_gain_calculation", "is", "not", "None", ":", "\n", "# only calculate information gain for a random subset of the training examples", "\n", "        ", "x", ",", "y", "=", "get_random_subset", "(", "x", ",", "y", ",", "subset_for_information_gain_calculation", ")", "\n", "\n", "# prepare data to delegate calculation to multiple processes", "\n", "", "partitions", "=", "partition_set", "(", "all_features_in_x", ",", "num_threads", ")", "\n", "params", "=", "[", "(", "start_entropy", ",", "x", ",", "y", ",", "partition", ",", "feature_mask", ")", "for", "partition", "in", "partitions", "]", "\n", "\n", "if", "pool", "==", "None", ":", "\n", "        ", "pool", "=", "Pool", "(", "processes", "=", "num_threads", ")", "\n", "\n", "# calculate information gain for each set of parameters ", "\n", "", "results", "=", "pool", ".", "map", "(", "information_gain_for_subset_of_features", ",", "params", ")", "\n", "\n", "# combine the results of each separate process", "\n", "for", "r", "in", "results", ":", "\n", "        ", "result", "|=", "r", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.partition_set": [[229, 239], ["enumerate", "set", "partitions[].add", "range"], "function", ["None"], ["", "def", "partition_set", "(", "set_to_partition", ",", "num_of_partitions", ")", ":", "\n", "    ", "\"\"\"\n    Partitions given set into a number of equally sized sets.\n    \"\"\"", "\n", "partitions", "=", "[", "set", "(", ")", "for", "i", "in", "range", "(", "num_of_partitions", ")", "]", "\n", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "set_to_partition", ")", ":", "\n", "        ", "partitions", "[", "i", "%", "num_of_partitions", "]", ".", "add", "(", "x", ")", "\n", "\n", "", "return", "partitions", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.decision_tree.get_random_subset": [[240, 249], ["random.sample", "len", "range", "new_x.append", "new_y.append", "len"], "function", ["None"], ["", "def", "get_random_subset", "(", "x", ",", "y", ",", "size", ")", ":", "\n", "    ", "if", "size", ">", "len", "(", "x", ")", ":", "\n", "        ", "return", "x", ",", "y", "\n", "", "sample", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "x", ")", ")", ",", "k", "=", "size", ")", "\n", "new_x", ",", "new_y", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "sample", ":", "\n", "        ", "new_x", ".", "append", "(", "x", "[", "i", "]", ")", "\n", "new_y", ".", "append", "(", "y", "[", "i", "]", ")", "\n", "", "return", "new_x", ",", "new_y", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.lstm.LSTM_net.__init__": [[5, 23], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.similarity.vector_mixture_models.TfIdfWeightedVectorMixtureModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "hidden_dim", ",", "output_dim", ",", "n_layers", ",", "\n", "bidirectional", ",", "dropout", ",", "pad_idx", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embedding_dim", ",", "padding_idx", "=", "pad_idx", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "embedding_dim", ",", "\n", "hidden_dim", ",", "\n", "num_layers", "=", "n_layers", ",", "\n", "bidirectional", "=", "bidirectional", ",", "\n", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "hidden_dim", "*", "2", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "2", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.classifiers.lstm.LSTM_net.forward": [[24, 56], ["lstm.LSTM_net.embedding", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "lstm.LSTM_net.rnn", "lstm.LSTM_net.dropout", "lstm.LSTM_net.fc1", "lstm.LSTM_net.dropout", "text_lengths.cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lstm.LSTM_net.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "text", ",", "text_lengths", ")", ":", "\n", "\n", "# text = [sent len, batch size]", "\n", "\n", "        ", "embedded", "=", "self", ".", "embedding", "(", "text", ")", "\n", "\n", "# embedded = [sent len, batch size, emb dim]", "\n", "\n", "#pack sequence", "\n", "packed_embedded", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "embedded", ",", "text_lengths", ".", "cpu", "(", ")", ")", "\n", "\n", "packed_output", ",", "(", "hidden", ",", "cell", ")", "=", "self", ".", "rnn", "(", "packed_embedded", ")", "\n", "\n", "#unpack sequence", "\n", "# output, output_lengths = nn.utils.rnn.pad_packed_sequence(packed_output)", "\n", "\n", "# output = [sent len, batch size, hid dim * num directions]", "\n", "# output over padding tokens are zero tensors", "\n", "\n", "# hidden = [num layers * num directions, batch size, hid dim]", "\n", "# cell = [num layers * num directions, batch size, hid dim]", "\n", "\n", "# concat the final forward (hidden[-2,:,:]) and backward (hidden[-1,:,:]) hidden layers", "\n", "# and apply dropout", "\n", "\n", "hidden", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "hidden", "[", "-", "2", ",", ":", ",", ":", "]", ",", "hidden", "[", "-", "1", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "output", "=", "self", ".", "fc1", "(", "hidden", ")", "\n", "output", "=", "self", ".", "dropout", "(", "self", ".", "fc2", "(", "output", ")", ")", "\n", "\n", "#hidden = [batch size, hid dim * num directions]", "\n", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.similarity.vector_mixture_models.UnweightedVectorMixtureModel.__init__": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "embedding_model", ")", ":", "\n", "        ", "self", ".", "embedding_model", "=", "embedding_model", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.similarity.vector_mixture_models.UnweightedVectorMixtureModel.__getitem__": [[7, 16], ["numpy.zeros"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "text", ")", ":", "\n", "        ", "n", "=", "0", "\n", "result", "=", "np", ".", "zeros", "(", "self", ".", "embedding_model", ".", "vector_size", ")", "\n", "for", "word", "in", "text", ":", "\n", "            ", "if", "word", "in", "self", ".", "embedding_model", ".", "wv", ":", "\n", "                ", "result", "+=", "self", ".", "embedding_model", ".", "wv", "[", "word", "]", "\n", "n", "+=", "1", "\n", "\n", "", "", "return", "result", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.similarity.vector_mixture_models.TfIdfWeightedVectorMixtureModel.__init__": [[19, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "embedding_model", ",", "tfidf_model", ",", "dictionary", ")", ":", "\n", "        ", "self", ".", "embedding_model", "=", "embedding_model", "\n", "self", ".", "tfidf_model", "=", "tfidf_model", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.similarity.vector_mixture_models.TfIdfWeightedVectorMixtureModel.__getitem__": [[24, 39], ["numpy.zeros", "dict", "vector_mixture_models.TfIdfWeightedVectorMixtureModel.dictionary.doc2bow"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "text", ")", ":", "\n", "        ", "n", "=", "0", "\n", "result", "=", "np", ".", "zeros", "(", "self", ".", "embedding_model", ".", "vector_size", ")", "\n", "weights", "=", "self", ".", "tfidf_model", "[", "self", ".", "dictionary", ".", "doc2bow", "(", "text", ")", "]", "\n", "weights", "=", "dict", "(", "weights", ")", "\n", "for", "word", "in", "text", ":", "\n", "            ", "if", "word", "in", "self", ".", "embedding_model", ".", "wv", ":", "\n", "                ", "if", "word", "in", "self", ".", "dictionary", ".", "token2id", ":", "\n", "                    ", "weight", "=", "weights", "[", "self", ".", "dictionary", ".", "token2id", "[", "word", "]", "]", "\n", "", "else", ":", "\n", "                    ", "weight", "=", "1", "\n", "", "result", "+=", "weight", "*", "self", ".", "embedding_model", ".", "wv", "[", "word", "]", "\n", "n", "+=", "weight", "\n", "\n", "", "", "return", "result", "/", "n", "", "", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.similarity.cosine_similarity.cosine_similarity": [[3, 11], ["range", "len", "math.sqrt"], "function", ["None"], ["def", "cosine_similarity", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "sumxx", ",", "sumxy", ",", "sumyy", "=", "0", ",", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "v1", ")", ")", ":", "\n", "        ", "x", "=", "v1", "[", "i", "]", ";", "y", "=", "v2", "[", "i", "]", "\n", "sumxx", "+=", "x", "*", "x", "\n", "sumyy", "+=", "y", "*", "y", "\n", "sumxy", "+=", "x", "*", "y", "\n", "", "return", "sumxy", "/", "math", ".", "sqrt", "(", "sumxx", "*", "sumyy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.parse_and_return_rows": [[4, 11], ["open", "csv.reader", "list"], "function", ["None"], ["def", "parse_and_return_rows", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "read_obj", ":", "\n", "# pass the file object to reader() to get the reader object", "\n", "        ", "csv_reader", "=", "reader", "(", "read_obj", ")", "\n", "# Pass reader object to list() to get a list of lists", "\n", "list_of_rows", "=", "list", "(", "csv_reader", ")", "\n", "", "return", "list_of_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_loader.resample_dataset": [[14, 46], ["random.sample", "new_dev_rows.append", "new_train_rows.append"], "function", ["None"], ["", "def", "resample_dataset", "(", "train_rows", ",", "dev_rows", ",", "test_story_amount", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Resamples the training and dev sets based on their story_id fields, so that each story id appears only once among both sets.\n    Then samples a given amount of stories as the new dev set.\n\n    Duplicate stories from the training data (that had the same observations, but different hypothesis) are removed, to make sure that \n    the training set has none of the stories that are in the dev set.\n    \"\"\"", "\n", "\n", "# get all unique story ids from both given data sets", "\n", "stories", "=", "{", "instance", "[", "0", "]", "for", "instance", "in", "train_rows", "}", "\n", "test_stories", "=", "{", "instance", "[", "0", "]", "for", "instance", "in", "dev_rows", "}", "\n", "all_stories", "=", "stories", "|", "test_stories", "\n", "\n", "# randomly sample new train/dev split among the story ids", "\n", "test_stories", "=", "random", ".", "sample", "(", "all_stories", ",", "k", "=", "test_story_amount", ")", "\n", "test_stories", "=", "{", "story_id", "for", "story_id", "in", "test_stories", "}", "\n", "train_stories", "=", "all_stories", "-", "test_stories", "\n", "\n", "new_dev_rows", "=", "[", "]", "\n", "new_train_rows", "=", "[", "]", "\n", "\n", "# divide all the data rows between dev and train sets, making sure to only take one row for each unique story_id", "\n", "for", "row", "in", "train_rows", "+", "dev_rows", ":", "\n", "        ", "if", "row", "[", "0", "]", "in", "test_stories", ":", "\n", "            ", "new_dev_rows", ".", "append", "(", "row", ")", "\n", "test_stories", "-=", "{", "row", "[", "0", "]", "}", "\n", "", "elif", "row", "[", "0", "]", "in", "train_stories", ":", "\n", "            ", "new_train_rows", ".", "append", "(", "row", ")", "\n", "train_stories", "-=", "{", "row", "[", "0", "]", "}", "\n", "\n", "", "", "return", "new_train_rows", ",", "new_dev_rows", "", "", ""]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_prep.process_jsonl": [[4, 21], ["open", "json.loads", "story_id.append", "obs1.append", "obs2.append", "hyp1.append", "hyp2.append"], "function", ["None"], ["def", "process_jsonl", "(", "file_path", ")", ":", "\n", "    ", "story_id", "=", "[", "]", "\n", "obs1", "=", "[", "]", "\n", "obs2", "=", "[", "]", "\n", "hyp1", "=", "[", "]", "\n", "hyp2", "=", "[", "]", "\n", "\n", "with", "open", "(", "file_path", ")", "as", "json_file", ":", "\n", "        ", "for", "line", "in", "json_file", ":", "\n", "            ", "dict_line", "=", "json", ".", "loads", "(", "line", ")", "\n", "story_id", ".", "append", "(", "dict_line", "[", "\"story_id\"", "]", ")", "\n", "obs1", ".", "append", "(", "dict_line", "[", "\"obs1\"", "]", ")", "\n", "obs2", ".", "append", "(", "dict_line", "[", "\"obs2\"", "]", ")", "\n", "hyp1", ".", "append", "(", "dict_line", "[", "\"hyp1\"", "]", ")", "\n", "hyp2", ".", "append", "(", "dict_line", "[", "\"hyp2\"", "]", ")", "\n", "\n", "", "", "return", "story_id", ",", "obs1", ",", "obs2", ",", "hyp1", ",", "hyp2", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_prep.process_labels": [[22, 29], ["open", "labels.append", "line.replace"], "function", ["None"], ["", "def", "process_labels", "(", "file_path", ")", ":", "\n", "    ", "labels", "=", "[", "]", "\n", "with", "open", "(", "file_path", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "if", "line", "!=", "\" \"", ":", "\n", "                ", "labels", ".", "append", "(", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ")", "\n", "", "", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Vaibhavs10_anli-performance-prediction.data.data_prep.create_csv": [[30, 36], ["zip", "open", "csv.writer", "csv.writer.writerow"], "function", ["None"], ["", "def", "create_csv", "(", "story_id", ",", "obs1", ",", "obs2", ",", "hyp1", ",", "hyp2", ",", "labels", ",", "file_path", ")", ":", "\n", "    ", "rows", "=", "zip", "(", "story_id", ",", "obs1", ",", "obs2", ",", "hyp1", ",", "hyp2", ",", "labels", ")", "\n", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "writer", ".", "writerow", "(", "row", ")", "\n", "", "", "", ""]]}