{"home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.None.net_train.EvalMethod.__init__": [[35, 39], ["simnet.lib.net.post_processing.eval3d.Eval3d", "simnet.lib.camera.FMKCamera"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "    ", "self", ".", "eval_3d", "=", "Eval3d", "(", ")", "\n", "self", ".", "camera_model", "=", "camera", ".", "FMKCamera", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.None.net_train.EvalMethod.process_sample": [[40, 48], ["pose_outputs.get_detections", "net_train.EvalMethod.eval_3d.process_sample", "simnet.lib.net.post_processing.eval3d.extract_objects_from_detections"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.OBBOutput.get_detections", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.process_sample", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.extract_objects_from_detections"], ["", "def", "process_sample", "(", "self", ",", "pose_outputs", ",", "box_outputs", ",", "seg_outputs", ",", "detections_gt", ",", "scene_name", ")", ":", "\n", "    ", "detections", "=", "pose_outputs", ".", "get_detections", "(", "self", ".", "camera_model", ")", "\n", "if", "scene_name", "!=", "'sim'", ":", "\n", "      ", "table_detection", ",", "detections_gt", ",", "detections", "=", "extract_objects_from_detections", "(", "\n", "detections_gt", ",", "detections", "\n", ")", "\n", "", "self", ".", "eval_3d", ".", "process_sample", "(", "detections", ",", "detections_gt", ",", "scene_name", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.None.net_train.EvalMethod.process_all_dataset": [[49, 51], ["net_train.EvalMethod.eval_3d.process_all_3D_dataset"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.Eval3d.process_all_3D_dataset"], ["", "def", "process_all_dataset", "(", "self", ",", "log", ")", ":", "\n", "    ", "log", "[", "'all 3Dmap'", "]", "=", "self", ".", "eval_3d", ".", "process_all_3D_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.None.net_train.EvalMethod.draw_detections": [[52, 61], ["pose_outputs.get_visualization_img", "wandb.Image", "seg_outputs.get_visualization_img", "wandb.Image", "numpy.copy", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.get_visualization_img", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.get_visualization_img"], ["", "def", "draw_detections", "(", "\n", "self", ",", "pose_outputs", ",", "box_outputs", ",", "seg_outputs", ",", "keypoint_outputs", ",", "left_image_np", ",", "llog", ",", "prefix", "\n", ")", ":", "\n", "    ", "pose_vis", "=", "pose_outputs", ".", "get_visualization_img", "(", "\n", "np", ".", "copy", "(", "left_image_np", ")", ",", "camera_model", "=", "self", ".", "camera_model", "\n", ")", "\n", "llog", "[", "f'{prefix}/pose'", "]", "=", "wandb", ".", "Image", "(", "pose_vis", ",", "caption", "=", "prefix", ")", "\n", "seg_vis", "=", "seg_outputs", ".", "get_visualization_img", "(", "np", ".", "copy", "(", "left_image_np", ")", ")", "\n", "llog", "[", "f'{prefix}/seg'", "]", "=", "wandb", ".", "Image", "(", "seg_vis", ",", "caption", "=", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.None.net_train.EvalMethod.reset": [[62, 64], ["simnet.lib.net.post_processing.eval3d.Eval3d"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "eval_3d", "=", "Eval3d", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera.__init__": [[12, 54], ["numpy.deg2rad", "numpy.deg2rad", "camera.FMKCamera._set_intrinsics", "simnet.lib.transform.Transform.from_aa", "camera.FMKCamera._set_intrinsics", "numpy.tan", "numpy.tan", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera._set_intrinsics", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.Transform.from_aa", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera._set_intrinsics"], ["  ", "def", "__init__", "(", "\n", "self", ",", "\n", "hfov_deg", "=", "100.", ",", "\n", "vfov_deg", "=", "80.", ",", "\n", "height", "=", "2048", ",", "\n", "width", "=", "2560", ",", "\n", "stereo_baseline", "=", "0.10", ",", "\n", "enable_noise", "=", "False", ",", "\n", "override_intrinsics", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\" The default camera model to match the Basler's rectified implementation at TOT \"\"\"", "\n", "\n", "# This is to go from mmt to pyrender frame", "\n", "self", ".", "RT_matrix", "=", "transform", ".", "Transform", ".", "from_aa", "(", "axis", "=", "transform", ".", "X_AXIS", ",", "angle_deg", "=", "180.0", ")", ".", "matrix", "\n", "if", "override_intrinsics", "is", "not", "None", ":", "\n", "      ", "self", ".", "_set_intrinsics", "(", "override_intrinsics", ")", "\n", "return", "\n", "", "height", "=", "height", "//", "SCALE_FACTOR", "\n", "width", "=", "width", "//", "SCALE_FACTOR", "\n", "assert", "height", "%", "64", "==", "0", "\n", "assert", "width", "%", "64", "==", "0", "\n", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "\n", "self", ".", "stereo_baseline", "=", "stereo_baseline", "\n", "self", ".", "is_left", "=", "True", "\n", "\n", "hfov", "=", "np", ".", "deg2rad", "(", "hfov_deg", ")", "\n", "vfov", "=", "np", ".", "deg2rad", "(", "vfov_deg", ")", "\n", "focal_length_x", "=", "0.5", "*", "width", "/", "np", ".", "tan", "(", "0.5", "*", "hfov", ")", "\n", "focal_length_y", "=", "0.5", "*", "height", "/", "np", ".", "tan", "(", "0.5", "*", "vfov", ")", "\n", "\n", "focal_length", "=", "focal_length_x", "\n", "focal_length_ar", "=", "focal_length_y", "/", "focal_length_x", "\n", "\n", "self", ".", "_set_intrinsics", "(", "\n", "np", ".", "array", "(", "[", "\n", "[", "focal_length", ",", "0.", ",", "width", "/", "2.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "focal_length", "*", "focal_length_ar", ",", "height", "/", "2.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "1.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera.add_camera_noise": [[57, 59], ["camera_noise.add"], "methods", ["None"], ["", "def", "add_camera_noise", "(", "self", ",", "img", ")", ":", "\n", "    ", "return", "camera_noise", ".", "add", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera.make_datapoint": [[60, 69], ["datapoint.CameraDataPoint", "datapoint.StereoCameraDataPoint"], "methods", ["None"], ["", "def", "make_datapoint", "(", "self", ")", ":", "\n", "    ", "k_matrix", "=", "self", ".", "K_matrix", "[", ":", "3", ",", ":", "3", "]", "\n", "if", "params", ".", "ENABLE_STEREO", ":", "\n", "      ", "assert", "self", ".", "stereo_baseline", "is", "not", "None", "\n", "return", "datapoint", ".", "StereoCameraDataPoint", "(", "\n", "k_matrix", "=", "k_matrix", ",", "\n", "baseline", "=", "self", ".", "stereo_baseline", ",", "\n", ")", "\n", "", "return", "datapoint", ".", "CameraDataPoint", "(", "k_matrix", "=", "k_matrix", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera._set_intrinsics": [[70, 76], ["None"], "methods", ["None"], ["", "def", "_set_intrinsics", "(", "self", ",", "intrinsics_matrix", ")", ":", "\n", "    ", "assert", "intrinsics_matrix", ".", "shape", "[", "0", "]", "==", "4", "\n", "assert", "intrinsics_matrix", ".", "shape", "[", "1", "]", "==", "4", "\n", "\n", "self", ".", "K_matrix", "=", "intrinsics_matrix", "\n", "self", ".", "proj_matrix", "=", "self", ".", "K_matrix", "@", "self", ".", "RT_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera.project": [[77, 82], ["len"], "methods", ["None"], ["", "def", "project", "(", "self", ",", "points", ")", ":", "\n", "    ", "\"\"\"Project 4d homogenous points (4xN) to 4d homogenous pixels (4xN)\"\"\"", "\n", "assert", "len", "(", "points", ".", "shape", ")", "==", "2", "\n", "assert", "points", ".", "shape", "[", "0", "]", "==", "4", "\n", "return", "self", ".", "proj_matrix", "@", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera.deproject": [[83, 88], ["len", "numpy.linalg.inv"], "methods", ["None"], ["", "def", "deproject", "(", "self", ",", "pixels", ")", ":", "\n", "    ", "\"\"\"Deproject 4d homogenous pixels (4xN) to 4d homogenous points (4xN)\"\"\"", "\n", "assert", "len", "(", "pixels", ".", "shape", ")", "==", "2", "\n", "assert", "pixels", ".", "shape", "[", "0", "]", "==", "4", "\n", "return", "np", ".", "linalg", ".", "inv", "(", "self", ".", "proj_matrix", ")", "@", "pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera.splat_points": [[89, 101], ["camera.FMKCamera.project", "camera.convert_homopixels_to_pixels", "numpy.zeros", "numpy.clip", "numpy.clip", "len", "camera.convert_homopoints_to_points", "numpy.round().astype", "numpy.round().astype", "numpy.round", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera.project", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_homopixels_to_pixels", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_homopoints_to_points"], ["", "def", "splat_points", "(", "self", ",", "hpoints_camera", ")", ":", "\n", "    ", "\"\"\"Project 4d homogenous points (4xN) to 4d homogenous points (4xN)\"\"\"", "\n", "assert", "len", "(", "hpoints_camera", ".", "shape", ")", "==", "2", "\n", "assert", "hpoints_camera", ".", "shape", "[", "0", "]", "==", "4", "\n", "hpixels", "=", "self", ".", "project", "(", "hpoints_camera", ")", "\n", "pixels", "=", "convert_homopixels_to_pixels", "(", "hpixels", ")", "\n", "depths_camera", "=", "convert_homopoints_to_points", "(", "hpoints_camera", ")", "[", "2", ",", ":", "]", "\n", "image", "=", "np", ".", "zeros", "(", "(", "self", ".", "height", ",", "self", ".", "width", ")", ")", "\n", "pixel_cols", "=", "np", ".", "clip", "(", "np", ".", "round", "(", "pixels", "[", "0", ",", ":", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "0", ",", "self", ".", "width", "-", "1", ")", "\n", "pixel_rows", "=", "np", ".", "clip", "(", "np", ".", "round", "(", "pixels", "[", "1", ",", ":", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "0", ",", "self", ".", "height", "-", "1", ")", "\n", "image", "[", "pixel_rows", ",", "pixel_cols", "]", "=", "depths_camera", "<", "CLIPPING_PLANE_NEAR", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera.deproject_depth_image": [[102, 110], ["numpy.indices().astype", "depth_image.reshape", "numpy.stack", "camera.convert_pixels_to_homopixels", "camera.FMKCamera.deproject", "numpy.indices", "u.flatten", "v.flatten"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_pixels_to_homopixels", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera.deproject"], ["", "def", "deproject_depth_image", "(", "self", ",", "depth_image", ")", ":", "\n", "    ", "assert", "depth_image", ".", "shape", "==", "(", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "v", ",", "u", "=", "np", ".", "indices", "(", "depth_image", ".", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "z", "=", "depth_image", ".", "reshape", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "pixels", "=", "np", ".", "stack", "(", "[", "u", ".", "flatten", "(", ")", ",", "v", ".", "flatten", "(", ")", "]", ",", "axis", "=", "0", ")", "\n", "hpixels", "=", "convert_pixels_to_homopixels", "(", "pixels", ",", "z", ")", "\n", "hpoints", "=", "self", ".", "deproject", "(", "hpixels", ")", "\n", "return", "hpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_homopixels_to_pixels": [[112, 121], ["len"], "function", ["None"], ["", "", "def", "convert_homopixels_to_pixels", "(", "pixels", ")", ":", "\n", "  ", "\"\"\"Project 4d homogenous pixels (4xN) to 2d pixels (2xN)\"\"\"", "\n", "assert", "len", "(", "pixels", ".", "shape", ")", "==", "2", "\n", "assert", "pixels", ".", "shape", "[", "0", "]", "==", "4", "\n", "pixels_3d", "=", "pixels", "[", ":", "3", ",", ":", "]", "/", "pixels", "[", "3", ":", "4", ",", ":", "]", "\n", "pixels_2d", "=", "pixels_3d", "[", ":", "2", ",", ":", "]", "/", "pixels_3d", "[", "2", ":", "3", ",", ":", "]", "\n", "assert", "pixels_2d", ".", "shape", "[", "1", "]", "==", "pixels", ".", "shape", "[", "1", "]", "\n", "assert", "pixels_2d", ".", "shape", "[", "0", "]", "==", "2", "\n", "return", "pixels_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_pixels_to_homopixels": [[123, 138], ["numpy.concatenate", "len", "len", "numpy.ones_like"], "function", ["None"], ["", "def", "convert_pixels_to_homopixels", "(", "pixels", ",", "depths", ")", ":", "\n", "  ", "\"\"\"Project 2d pixels (2xN) and depths (meters, 1xN) to 4d pixels (4xN)\"\"\"", "\n", "assert", "len", "(", "pixels", ".", "shape", ")", "==", "2", "\n", "assert", "pixels", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "len", "(", "depths", ".", "shape", ")", "==", "2", "\n", "assert", "depths", ".", "shape", "[", "1", "]", "==", "pixels", ".", "shape", "[", "1", "]", "\n", "assert", "depths", ".", "shape", "[", "0", "]", "==", "1", "\n", "pixels_4d", "=", "np", ".", "concatenate", "(", "[", "\n", "depths", "*", "pixels", ",", "\n", "depths", ",", "\n", "np", ".", "ones_like", "(", "depths", ")", ",", "\n", "]", ",", "axis", "=", "0", ")", "\n", "assert", "pixels_4d", ".", "shape", "[", "0", "]", "==", "4", "\n", "assert", "pixels_4d", ".", "shape", "[", "1", "]", "==", "pixels", ".", "shape", "[", "1", "]", "\n", "return", "pixels_4d", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_points_to_homopoints": [[140, 151], ["numpy.concatenate", "len", "numpy.ones"], "function", ["None"], ["", "def", "convert_points_to_homopoints", "(", "points", ")", ":", "\n", "  ", "\"\"\"Project 3d points (3xN) to 4d homogenous points (4xN)\"\"\"", "\n", "assert", "len", "(", "points", ".", "shape", ")", "==", "2", "\n", "assert", "points", ".", "shape", "[", "0", "]", "==", "3", "\n", "points_4d", "=", "np", ".", "concatenate", "(", "[", "\n", "points", ",", "\n", "np", ".", "ones", "(", "(", "1", ",", "points", ".", "shape", "[", "1", "]", ")", ")", ",", "\n", "]", ",", "axis", "=", "0", ")", "\n", "assert", "points_4d", ".", "shape", "[", "1", "]", "==", "points", ".", "shape", "[", "1", "]", "\n", "assert", "points_4d", ".", "shape", "[", "0", "]", "==", "4", "\n", "return", "points_4d", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_homopoints_to_points": [[153, 161], ["len"], "function", ["None"], ["", "def", "convert_homopoints_to_points", "(", "points_4d", ")", ":", "\n", "  ", "\"\"\"Project 4d homogenous points (4xN) to 3d points (3xN)\"\"\"", "\n", "assert", "len", "(", "points_4d", ".", "shape", ")", "==", "2", "\n", "assert", "points_4d", ".", "shape", "[", "0", "]", "==", "4", "\n", "points_3d", "=", "points_4d", "[", ":", "3", ",", ":", "]", "/", "points_4d", "[", "3", ":", "4", ",", ":", "]", "\n", "assert", "points_3d", ".", "shape", "[", "1", "]", "==", "points_3d", ".", "shape", "[", "1", "]", "\n", "assert", "points_3d", ".", "shape", "[", "0", "]", "==", "3", "\n", "return", "points_3d", "\n", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.color_stuff.get_colors": [[5, 12], ["list", "colour.Color().range_to", "numpy.array", "a.astype", "colour.Color", "colour.Color", "numpy.array", "a.get_rgb"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalDataset.list"], ["def", "get_colors", "(", "num_colors", ")", ":", "\n", "  ", "assert", "num_colors", ">", "0", "\n", "\n", "colors", "=", "list", "(", "colour", ".", "Color", "(", "\"purple\"", ")", ".", "range_to", "(", "colour", ".", "Color", "(", "\"green\"", ")", ",", "num_colors", ")", ")", "\n", "color_rgb", "=", "255", "*", "np", ".", "array", "(", "[", "np", ".", "array", "(", "a", ".", "get_rgb", "(", ")", ")", "for", "a", "in", "colors", "]", ")", "\n", "color_rgb", "=", "[", "a", ".", "astype", "(", "np", ".", "int", ")", "for", "a", "in", "color_rgb", "]", "\n", "return", "color_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.color_stuff.get_panoptic_colors": [[14, 25], ["colour.Color", "colour.Color", "colour.Color", "colour.Color", "colour.Color", "numpy.array", "a.astype", "numpy.array", "a.get_rgb"], "function", ["None"], ["", "def", "get_panoptic_colors", "(", ")", ":", "\n", "  ", "colors", "=", "[", "\n", "colour", ".", "Color", "(", "\"yellow\"", ")", ",", "\n", "colour", ".", "Color", "(", "\"blue\"", ")", ",", "\n", "colour", ".", "Color", "(", "\"green\"", ")", ",", "\n", "colour", ".", "Color", "(", "\"red\"", ")", ",", "\n", "colour", ".", "Color", "(", "\"purple\"", ")", "\n", "]", "\n", "color_rgb", "=", "255", "*", "np", ".", "array", "(", "[", "np", ".", "array", "(", "a", ".", "get_rgb", "(", ")", ")", "for", "a", "in", "colors", "]", ")", "\n", "color_rgb", "=", "[", "a", ".", "astype", "(", "np", ".", "int", ")", "for", "a", "in", "color_rgb", "]", "\n", "return", "color_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.color_stuff.get_unique_colors": [[27, 41], ["color_stuff.get_colors", "len", "ValueError", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.color_stuff.get_colors"], ["", "def", "get_unique_colors", "(", "num_colors", ")", ":", "\n", "  ", "'''\n  Gives a the specified number of unique colors\n  Args:\n     num_colors: an int specifying the number of colors\n  Returs:\n     A list of  rgb colors in the range of (0,255)\n  '''", "\n", "color_rgb", "=", "get_colors", "(", "num_colors", ")", "\n", "\n", "if", "(", "num_colors", "!=", "len", "(", "np", ".", "unique", "(", "color_rgb", ",", "axis", "=", "0", ")", ")", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'Colors returned are not unique.'", ")", "\n", "\n", "", "return", "color_rgb", "\n", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.occlusions.object_is_outside_image": [[8, 18], ["simnet.lib.net.post_processing.epnp.get_2d_bbox_of_9D_box"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.get_2d_bbox_of_9D_box"], ["def", "object_is_outside_image", "(", "detection", ",", "camera_model", ")", ":", "\n", "  ", "bbox", "=", "epnp", ".", "get_2d_bbox_of_9D_box", "(", "detection", ".", "camera_T_object", ",", "detection", ".", "scale_matrix", ",", "camera_model", ")", "\n", "width", "=", "camera_model", ".", "width", "\n", "height", "=", "camera_model", ".", "height", "\n", "\n", "if", "bbox", "[", "0", "]", "[", "0", "]", "<", "0", "or", "bbox", "[", "0", "]", "[", "0", "]", "<", "0", ":", "\n", "    ", "return", "True", "\n", "", "if", "bbox", "[", "1", "]", "[", "0", "]", ">", "width", "or", "bbox", "[", "1", "]", "[", "1", "]", ">", "height", ":", "\n", "    ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.occlusions.get_bbox_image": [[20, 27], ["simnet.lib.net.post_processing.epnp.get_2d_bbox_of_9D_box", "numpy.zeros", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.get_2d_bbox_of_9D_box"], ["", "def", "get_bbox_image", "(", "detection", ",", "camera_model", ")", ":", "\n", "  ", "bbox", "=", "epnp", ".", "get_2d_bbox_of_9D_box", "(", "detection", ".", "camera_T_object", ",", "detection", ".", "scale_matrix", ",", "camera_model", ")", "\n", "width", "=", "camera_model", ".", "width", "\n", "height", "=", "camera_model", ".", "height", "\n", "img", "=", "np", ".", "zeros", "(", "[", "height", ",", "width", "]", ")", "\n", "img", "[", "int", "(", "bbox", "[", "0", "]", "[", "1", "]", ")", ":", "int", "(", "bbox", "[", "1", "]", "[", "1", "]", ")", ",", "int", "(", "bbox", "[", "0", "]", "[", "0", "]", ")", ":", "int", "(", "bbox", "[", "1", "]", "[", "0", "]", ")", "]", "=", "1.0", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.occlusions.mark_occlusions_in_detections": [[29, 51], ["range", "simnet.lib.camera.FMKCamera", "len", "occlusions.object_is_outside_image", "occlusions.get_bbox_image", "numpy.copy", "numpy.copy", "occlusions.get_bbox_image", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.occlusions.object_is_outside_image", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.occlusions.get_bbox_image", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.occlusions.get_bbox_image"], ["", "def", "mark_occlusions_in_detections", "(", "\n", "detections", ",", "occlusion_score", "=", "0.5", ",", "camera_model", "=", "None", ",", "allow_outside_of_image", "=", "False", "\n", ")", ":", "\n", "  ", "if", "camera_model", "is", "None", ":", "\n", "    ", "camera_model", "=", "camera", ".", "FMKCamera", "(", ")", "\n", "", "for", "ii", "in", "range", "(", "len", "(", "detections", ")", ")", ":", "\n", "    ", "if", "object_is_outside_image", "(", "detections", "[", "ii", "]", ",", "camera_model", ")", ":", "\n", "      ", "detections", "[", "ii", "]", ".", "ignore", "=", "True", "\n", "continue", "\n", "", "bbox_unocc", "=", "get_bbox_image", "(", "detections", "[", "ii", "]", ",", "camera_model", ")", "\n", "bbox_occ", "=", "np", ".", "copy", "(", "bbox_unocc", ")", "\n", "bbox_prop", "=", "np", ".", "copy", "(", "bbox_occ", ")", "\n", "for", "detection_proposal", "in", "detections", ":", "\n", "# Check if the object is behind the target object.", "\n", "      ", "if", "detection_proposal", ".", "camera_T_object", "[", "2", ",", "3", "]", ">=", "detections", "[", "ii", "]", ".", "camera_T_object", "[", "2", ",", "3", "]", ":", "\n", "        ", "continue", "\n", "", "bbox_proposal", "=", "get_bbox_image", "(", "detection_proposal", ",", "camera_model", ")", "\n", "bbox_occ", "=", "bbox_occ", "-", "bbox_proposal", "\n", "bbox_prop", "=", "bbox_prop", "+", "bbox_proposal", "\n", "", "occlusion_level", "=", "np", ".", "sum", "(", "bbox_occ", ">", "0", ")", "/", "np", ".", "sum", "(", "bbox_unocc", ">", "0", ")", "\n", "if", "occlusion_level", "<", "occlusion_score", ":", "\n", "      ", "detections", "[", "ii", "]", ".", "ignore", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.Transform.__init__": [[18, 24], ["numpy.eye"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "matrix", "=", "None", ")", ":", "\n", "    ", "if", "matrix", "is", "None", ":", "\n", "      ", "self", ".", "matrix", "=", "np", ".", "eye", "(", "4", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "matrix", "=", "matrix", "\n", "", "self", ".", "is_concrete", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.Transform.apply_transform": [[25, 29], ["isinstance"], "methods", ["None"], ["", "def", "apply_transform", "(", "self", ",", "transform", ")", ":", "\n", "    ", "assert", "self", ".", "is_concrete", "\n", "assert", "isinstance", "(", "transform", ",", "Transform", ")", "\n", "self", ".", "matrix", "=", "self", ".", "matrix", "@", "transform", ".", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.Transform.inverse": [[30, 33], ["transform.Transform", "numpy.linalg.inv"], "methods", ["None"], ["", "def", "inverse", "(", "self", ")", ":", "\n", "    ", "assert", "self", ".", "is_concrete", "\n", "return", "Transform", "(", "matrix", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "matrix", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.Transform.__repr__": [[34, 40], ["transform.Transform.is_SE3"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.Transform.is_SE3"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "assert", "self", ".", "matrix", ".", "shape", "==", "(", "4", ",", "4", ")", "\n", "if", "self", ".", "is_SE3", "(", ")", ":", "\n", "      ", "return", "f'Transform(translate={self.translation})'", "\n", "", "else", ":", "\n", "      ", "return", "f'Transform(IS_NOT_SE3,matrix={self.matrix})'", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.Transform.is_SE3": [[41, 43], ["transform.matrixIsSE3"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.matrixIsSE3"], ["", "", "def", "is_SE3", "(", "self", ")", ":", "\n", "    ", "return", "matrixIsSE3", "(", "self", ".", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.Transform.translation": [[48, 52], ["None"], "methods", ["None"], ["", "@", "translation", ".", "setter", "\n", "def", "translation", "(", "self", ",", "value", ")", ":", "\n", "    ", "assert", "value", ".", "shape", "==", "(", "3", ",", ")", "\n", "self", ".", "matrix", "[", ":", "3", ",", "3", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.Transform.rotation": [[57, 61], ["None"], "methods", ["None"], ["", "@", "rotation", ".", "setter", "\n", "def", "rotation", "(", "self", ",", "value", ")", ":", "\n", "    ", "assert", "value", ".", "shape", "==", "(", "3", ",", "3", ")", "\n", "self", ".", "matrix", "[", ":", "3", ",", ":", "3", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.Transform.from_aa": [[62, 73], ["numpy.eye", "cls", "transform.axis_angle_to_rotation_matrix", "numpy.array", "numpy.deg2rad"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.axis_angle_to_rotation_matrix"], ["", "@", "classmethod", "\n", "def", "from_aa", "(", "cls", ",", "axis", "=", "X_AXIS", ",", "angle_deg", "=", "0.", ",", "translation", "=", "None", ")", ":", "\n", "    ", "assert", "axis", ".", "shape", "==", "(", "3", ",", ")", "\n", "matrix", "=", "np", ".", "eye", "(", "4", ")", "\n", "if", "angle_deg", "!=", "0.", ":", "\n", "      ", "matrix", "[", ":", "3", ",", ":", "3", "]", "=", "axis_angle_to_rotation_matrix", "(", "axis", ",", "np", ".", "deg2rad", "(", "angle_deg", ")", ")", "\n", "", "if", "translation", "is", "not", "None", ":", "\n", "      ", "translation", "=", "np", ".", "array", "(", "translation", ")", "\n", "assert", "translation", ".", "shape", "==", "(", "3", ",", ")", "\n", "matrix", "[", ":", "3", ",", "3", "]", "=", "translation", "\n", "", "return", "cls", "(", "matrix", "=", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.matrixIsSE3": [[75, 84], ["numpy.allclose", "numpy.allclose", "numpy.isclose", "numpy.array", "numpy.eye", "numpy.linalg.det"], "function", ["None"], ["", "", "def", "matrixIsSE3", "(", "matrix", ")", ":", "\n", "  ", "if", "not", "np", ".", "allclose", "(", "matrix", "[", "3", ",", ":", "]", ",", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", ")", ")", ":", "\n", "    ", "return", "False", "\n", "", "rot", "=", "matrix", "[", ":", "3", ",", ":", "3", "]", "\n", "if", "not", "np", ".", "allclose", "(", "rot", "@", "rot", ".", "T", ",", "np", ".", "eye", "(", "3", ")", ")", ":", "\n", "    ", "return", "False", "\n", "", "if", "not", "np", ".", "isclose", "(", "np", ".", "linalg", ".", "det", "(", "rot", ")", ",", "1.", ")", ":", "\n", "    ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.find_closest_SE3": [[86, 94], ["numpy.copy", "numpy.allclose", "numpy.linalg.svd", "transform.matrixIsSE3", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.matrixIsSE3"], ["", "def", "find_closest_SE3", "(", "matrix", ")", ":", "\n", "  ", "matrix", "=", "np", ".", "copy", "(", "matrix", ")", "\n", "assert", "np", ".", "allclose", "(", "matrix", "[", "3", ",", ":", "]", ",", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", ")", ")", "\n", "rotation", "=", "matrix", "[", ":", "3", ",", ":", "3", "]", "\n", "u", ",", "s", ",", "vh", "=", "np", ".", "linalg", ".", "svd", "(", "rotation", ")", "\n", "matrix", "[", ":", "3", ",", ":", "3", "]", "=", "u", "@", "vh", "\n", "assert", "matrixIsSE3", "(", "matrix", ")", "\n", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.axis_angle_to_rotation_matrix": [[96, 115], ["numpy.asarray", "numpy.cos", "numpy.array", "numpy.sqrt", "numpy.sin", "numpy.dot"], "function", ["None"], ["", "def", "axis_angle_to_rotation_matrix", "(", "axis", ",", "theta", ")", ":", "\n", "  ", "\"\"\"Return the rotation matrix associated with counterclockwise rotation about\n  the given axis by theta radians.\n\n  Args:\n      axis: a list which specifies a unit axis\n      theta: an angle in radians, for which to rotate around by\n  Returns:\n      A 3x3 rotation matrix\n  \"\"\"", "\n", "axis", "=", "np", ".", "asarray", "(", "axis", ")", "\n", "axis", "=", "axis", "/", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "axis", ",", "axis", ")", ")", "\n", "a", "=", "np", ".", "cos", "(", "theta", "/", "2.0", ")", "\n", "b", ",", "c", ",", "d", "=", "-", "axis", "*", "np", ".", "sin", "(", "theta", "/", "2.0", ")", "\n", "aa", ",", "bb", ",", "cc", ",", "dd", "=", "a", "*", "a", ",", "b", "*", "b", ",", "c", "*", "c", ",", "d", "*", "d", "\n", "bc", ",", "ad", ",", "ac", ",", "ab", ",", "bd", ",", "cd", "=", "b", "*", "c", ",", "a", "*", "d", ",", "a", "*", "c", ",", "a", "*", "b", ",", "b", "*", "d", ",", "c", "*", "d", "\n", "return", "np", ".", "array", "(", "[", "[", "aa", "+", "bb", "-", "cc", "-", "dd", ",", "2", "*", "(", "bc", "+", "ad", ")", ",", "2", "*", "(", "bd", "-", "ac", ")", "]", ",", "\n", "[", "2", "*", "(", "bc", "-", "ad", ")", ",", "aa", "+", "cc", "-", "bb", "-", "dd", ",", "2", "*", "(", "cd", "+", "ab", ")", "]", ",", "\n", "[", "2", "*", "(", "bd", "+", "ac", ")", ",", "2", "*", "(", "cd", "-", "ab", ")", ",", "aa", "+", "dd", "-", "bb", "-", "cc", "]", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.OBB.compress": [[47, 61], ["cv2.resize().astype", "datapoint.OBB.vertex_target.transpose().astype", "cv2.resize", "datapoint.OBB.vertex_target.transpose"], "methods", ["None"], ["def", "compress", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "compressed", ":", "\n", "      ", "return", "\n", "# Heat map scale by 4x and quantize", "\n", "", "height", ",", "width", "=", "self", ".", "heat_map", ".", "shape", "\n", "self", ".", "heat_map", "=", "cv2", ".", "resize", "(", "\n", "self", ".", "heat_map", ",", "(", "width", "//", "4", ",", "height", "//", "4", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", "\n", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "\n", "# Vertex field, quantize and transpose to make vertex field smooth in memory order (makes", "\n", "# downstream compression 50x more effective)", "\n", "self", ".", "vertex_target", "=", "self", ".", "vertex_target", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "\n", "self", ".", "compressed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.OBB.decompress": [[62, 88], ["cv2.resize", "datapoint.OBB.vertex_target.astype().transpose", "datapoint.OBB.heat_map.astype", "datapoint.OBB.vertex_target.astype"], "methods", ["None"], ["", "def", "decompress", "(", "self", ")", ":", "\n", "    ", "if", "not", "self", ".", "compressed", ":", "\n", "      ", "return", "\n", "\n", "#print('OBB.decompress')", "\n", "#def _debug(name, x):", "\n", "#  print(name, x.dtype, x.shape, x.min(), x.max())", "\n", "#_debug('OBB.decompress.heat_map', self.heat_map)", "\n", "#_debug('OBB.decompress.z_centroid', self.z_centroid)", "\n", "#_debug('OBB.decompress.vertex_target', self.vertex_target)", "\n", "#_debug('OBB.decompress.cov_matrices', self.cov_matrices)", "\n", "#print('----------------------------------------------------')", "\n", "\n", "# Heat map scale by 4x and quantize", "\n", "", "height", ",", "width", "=", "self", ".", "heat_map", ".", "shape", "\n", "self", ".", "heat_map", "=", "cv2", ".", "resize", "(", "\n", "self", ".", "heat_map", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "width", "*", "4", ",", "height", "*", "4", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", "\n", ")", "\n", "#print('heat_map:', self.heat_map.dtype, self.heat_map.shape)", "\n", "\n", "# Vertex field, quantize and transpose to make vertex field smooth in memory order (makes", "\n", "# downstream compression 50x more effective)", "\n", "self", ".", "vertex_target", "=", "self", ".", "vertex_target", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "#print('vertex_target:', self.vertex_target.dtype, self.vertex_target.shape)", "\n", "\n", "self", ".", "compressed", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.Stereo.compress": [[110, 116], ["datapoint.compress_color_image", "datapoint.compress_color_image"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.compress_color_image", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.compress_color_image"], ["def", "compress", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "compressed", ":", "\n", "      ", "return", "\n", "", "self", ".", "left_color", "=", "compress_color_image", "(", "self", ".", "left_color", ")", "\n", "self", ".", "right_color", "=", "compress_color_image", "(", "self", ".", "right_color", ")", "\n", "self", ".", "compressed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.Stereo.decompress": [[117, 125], ["datapoint.decompress_color_image", "datapoint.decompress_color_image"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.decompress_color_image", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.decompress_color_image"], ["", "def", "decompress", "(", "self", ")", ":", "\n", "    ", "if", "not", "self", ".", "compressed", ":", "\n", "      ", "return", "\n", "#print('Stereo.decompress')", "\n", "\n", "", "self", ".", "left_color", "=", "decompress_color_image", "(", "self", ".", "left_color", ")", "\n", "self", ".", "right_color", "=", "decompress_color_image", "(", "self", ".", "right_color", ")", "\n", "self", ".", "compressed", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.Panoptic.compress": [[142, 156], ["datapoint.Panoptic.stereo.compress", "cv2.resize().astype", "object_pose.compress", "cv2.resize"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.Panoptic.compress", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.Panoptic.compress"], ["def", "compress", "(", "self", ")", ":", "\n", "    ", "self", ".", "stereo", ".", "compress", "(", ")", "\n", "for", "object_pose", "in", "self", ".", "object_poses", ":", "\n", "      ", "object_pose", ".", "compress", "(", ")", "\n", "\n", "", "if", "self", ".", "compressed", ":", "\n", "      ", "return", "\n", "\n", "# Depth scale by 4x and quantize", "\n", "", "height", ",", "width", "=", "self", ".", "depth", ".", "shape", "\n", "self", ".", "depth", "=", "cv2", ".", "resize", "(", "self", ".", "depth", ",", "(", "width", "//", "4", ",", "height", "//", "4", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "\n", "self", ".", "compressed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.Panoptic.decompress": [[157, 173], ["datapoint.Panoptic.stereo.decompress", "cv2.resize", "object_pose.decompress", "datapoint.Panoptic.depth.astype"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.Panoptic.decompress", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.Panoptic.decompress"], ["", "def", "decompress", "(", "self", ")", ":", "\n", "    ", "self", ".", "stereo", ".", "decompress", "(", ")", "\n", "for", "object_pose", "in", "self", ".", "object_poses", ":", "\n", "      ", "object_pose", ".", "decompress", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "compressed", ":", "\n", "      ", "return", "\n", "#print('Panoptic.decompress')", "\n", "\n", "# Depth scale by 4x and quantize", "\n", "", "height", ",", "width", "=", "self", ".", "depth", ".", "shape", "\n", "self", ".", "depth", "=", "cv2", ".", "resize", "(", "\n", "self", ".", "depth", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "width", "*", "4", ",", "height", "*", "4", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", "\n", ")", "\n", "\n", "self", ".", "compressed", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.FilterDataset.__init__": [[249, 258], ["int", "ValueError"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "dataset", ",", "params", ")", ":", "\n", "    ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "samples", "=", "None", "\n", "for", "key", "in", "params", ":", "\n", "      ", "if", "key", "==", "'samples'", ":", "\n", "        ", "self", ".", "samples", "=", "int", "(", "params", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown param in dataset args: {key}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.FilterDataset.list": [[259, 265], ["datapoint.FilterDataset.dataset.list", "len"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalDataset.list"], ["", "", "", "def", "list", "(", "self", ")", ":", "\n", "    ", "handles", "=", "self", ".", "dataset", ".", "list", "(", ")", "\n", "if", "self", ".", "samples", "is", "not", "None", ":", "\n", "      ", "handles", "=", "handles", "*", "(", "self", ".", "samples", "//", "len", "(", "handles", ")", "+", "1", ")", "\n", "handles", "=", "handles", "[", ":", "self", ".", "samples", "]", "\n", "", "return", "handles", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.FilterDataset.write": [[266, 268], ["ValueError"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "datapoint", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'Cannot write to concat dataset'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.ConcatDataset.__init__": [[272, 274], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "    ", "self", ".", "datasets", "=", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.ConcatDataset.list": [[275, 280], ["handles.extend", "dataset.list"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalDataset.list"], ["", "def", "list", "(", "self", ")", ":", "\n", "    ", "handles", "=", "[", "]", "\n", "for", "dataset", "in", "self", ".", "datasets", ":", "\n", "      ", "handles", ".", "extend", "(", "dataset", ".", "list", "(", ")", ")", "\n", "", "return", "handles", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.ConcatDataset.write": [[281, 283], ["ValueError"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "datapoint", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'Cannot write to concat dataset'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.RemoteDataset.__init__": [[317, 323], ["boto3.resource", "path.endswith"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "bucket", ",", "path", ")", ":", "\n", "    ", "self", ".", "s3", "=", "boto3", ".", "resource", "(", "'s3'", ")", "\n", "self", ".", "bucket", "=", "bucket", "\n", "self", ".", "dataset_path", "=", "path", "\n", "assert", "not", "path", ".", "endswith", "(", "'/'", ")", "\n", "self", ".", "_cache_list", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.RemoteDataset.list": [[324, 338], ["datapoint.RemoteDataset.s3.Bucket", "datapoint.RemoteDataset.objects.filter", "sorted", "handles.append", "path.endswith", "[].partition", "datapoint.RemoteReadHandle", "operator.attrgetter", "path.rpartition"], "methods", ["None"], ["", "def", "list", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_cache_list", "is", "not", "None", ":", "\n", "      ", "return", "self", ".", "_cache_list", "\n", "", "bucket", "=", "self", ".", "s3", ".", "Bucket", "(", "self", ".", "bucket", ")", "\n", "handles", "=", "[", "]", "\n", "for", "obj", "in", "bucket", ".", "objects", ".", "filter", "(", "Prefix", "=", "self", ".", "dataset_path", "+", "'/'", ")", ":", "\n", "      ", "path", "=", "obj", ".", "key", "\n", "if", "not", "path", ".", "endswith", "(", "'.pickle.zstd'", ")", ":", "\n", "        ", "continue", "\n", "", "uid", "=", "path", ".", "rpartition", "(", "'/'", ")", "[", "2", "]", ".", "partition", "(", "'.pickle.zstd'", ")", "[", "0", "]", "\n", "handles", ".", "append", "(", "RemoteReadHandle", "(", "self", ".", "bucket", ",", "self", ".", "dataset_path", ",", "uid", ")", ")", "\n", "", "x", "=", "sorted", "(", "handles", ",", "key", "=", "operator", ".", "attrgetter", "(", "'uid'", ")", ")", "\n", "self", ".", "_cache_list", "=", "x", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.RemoteDataset.write": [[339, 343], ["datapoint.compress_datapoint", "datapoint._datapoint_path", "datapoint.RemoteDataset.s3.Bucket().put_object", "datapoint.RemoteDataset.s3.Bucket"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.compress_datapoint", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint._datapoint_path"], ["", "def", "write", "(", "self", ",", "datapoint", ")", ":", "\n", "    ", "buf", "=", "compress_datapoint", "(", "datapoint", ")", "\n", "path", "=", "_datapoint_path", "(", "self", ".", "dataset_path", ",", "datapoint", ".", "uid", ")", "\n", "self", ".", "s3", ".", "Bucket", "(", "self", ".", "bucket", ")", ".", "put_object", "(", "Key", "=", "path", ",", "Body", "=", "buf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.RemoteReadHandle.__init__": [[347, 351], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "bucket", ",", "dataset_path", ",", "uid", ")", ":", "\n", "    ", "self", ".", "bucket", "=", "bucket", "\n", "self", ".", "dataset_path", "=", "dataset_path", "\n", "self", ".", "uid", "=", "uid", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.RemoteReadHandle.read": [[352, 387], ["datapoint.decompress_datapoint", "hasattr", "datapoint._datapoint_path", "boto3.resource.Object().get", "rsp[].read", "boto3.session.Session", "boto3.session.Session.resource", "boto3.resource", "print", "datapoint.retry_delay", "print", "time.sleep", "print", "datapoint.retry_delay", "print", "time.sleep", "boto3.resource.Object"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.decompress_datapoint", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint._datapoint_path", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalReadHandle.read", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.retry_delay", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.retry_delay"], ["", "def", "read", "(", "self", ",", "disable_final_decompression", "=", "False", ")", ":", "\n", "# Lazily initialize s3 resource due to pytorch data loaders", "\n", "    ", "attempt", "=", "0", "\n", "while", "True", ":", "\n", "      ", "success", "=", "False", "\n", "try", ":", "\n", "        ", "if", "False", ":", "\n", "          ", "session", "=", "boto3", ".", "session", ".", "Session", "(", ")", "\n", "s3", "=", "session", ".", "resource", "(", "'s3'", ")", "\n", "", "else", ":", "\n", "          ", "s3", "=", "boto3", ".", "resource", "(", "'s3'", ")", "\n", "", "path", "=", "_datapoint_path", "(", "self", ".", "dataset_path", ",", "self", ".", "uid", ")", "\n", "rsp", "=", "s3", ".", "Object", "(", "self", ".", "bucket", ",", "path", ")", ".", "get", "(", ")", "\n", "buf", "=", "rsp", "[", "'Body'", "]", ".", "read", "(", ")", "\n", "success", "=", "True", "\n", "", "except", "urllib3", ".", "exceptions", ".", "ProtocolError", "as", "exc", ":", "\n", "        ", "print", "(", "'RETRY: urllib3.exceptions.ProtocolError, attempt:'", ",", "attempt", ")", "\n", "attempt", "+=", "1", "\n", "delay", "=", "retry_delay", "(", "attempt", ")", "\n", "print", "(", "'Sleeping before retry:'", ",", "delay", ")", "\n", "time", ".", "sleep", "(", "delay", ")", "\n", "", "except", "KeyError", "as", "exc", ":", "\n", "        ", "print", "(", "'RETRY: KeyError, attempt:'", ",", "attempt", ")", "\n", "attempt", "+=", "1", "\n", "delay", "=", "retry_delay", "(", "attempt", ")", "\n", "print", "(", "'Sleeping before retry:'", ",", "delay", ")", "\n", "time", ".", "sleep", "(", "delay", ")", "\n", "", "if", "success", ":", "\n", "        ", "break", "\n", "", "", "dp", "=", "decompress_datapoint", "(", "buf", ",", "disable_final_decompression", "=", "disable_final_decompression", ")", "\n", "# TODO: remove this, once old datasets without UID are out of use", "\n", "if", "not", "hasattr", "(", "dp", ",", "'uid'", ")", ":", "\n", "      ", "dp", ".", "uid", "=", "self", ".", "uid", "\n", "", "assert", "dp", ".", "uid", "==", "self", ".", "uid", "\n", "return", "dp", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalDataset.__init__": [[399, 405], ["dataset_path.is_dir", "dataset_path.exists", "print", "dataset_path.mkdir"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "dataset_path", ")", ":", "\n", "    ", "if", "not", "dataset_path", ".", "exists", "(", ")", ":", "\n", "      ", "print", "(", "'New dataset directory:'", ",", "dataset_path", ")", "\n", "dataset_path", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "", "assert", "dataset_path", ".", "is_dir", "(", ")", "\n", "self", ".", "dataset_path", "=", "dataset_path", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalDataset.list": [[406, 412], ["datapoint.LocalDataset.dataset_path.glob", "sorted", "handles.append", "path.name.partition", "datapoint.LocalReadHandle", "operator.attrgetter"], "methods", ["None"], ["", "def", "list", "(", "self", ")", ":", "\n", "    ", "handles", "=", "[", "]", "\n", "for", "path", "in", "self", ".", "dataset_path", ".", "glob", "(", "'*.pickle.zstd'", ")", ":", "\n", "      ", "uid", "=", "path", ".", "name", ".", "partition", "(", "'.'", ")", "[", "0", "]", "\n", "handles", ".", "append", "(", "LocalReadHandle", "(", "self", ".", "dataset_path", ",", "uid", ")", ")", "\n", "", "return", "sorted", "(", "handles", ",", "key", "=", "operator", ".", "attrgetter", "(", "'uid'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalDataset.write": [[413, 418], ["datapoint._datapoint_path", "datapoint.compress_datapoint", "open", "fh.write"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint._datapoint_path", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.compress_datapoint", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalDataset.write"], ["", "def", "write", "(", "self", ",", "datapoint", ")", ":", "\n", "    ", "path", "=", "_datapoint_path", "(", "self", ".", "dataset_path", ",", "datapoint", ".", "uid", ")", "\n", "buf", "=", "compress_datapoint", "(", "datapoint", ")", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "fh", ":", "\n", "      ", "fh", ".", "write", "(", "buf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalReadHandle.__init__": [[422, 425], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "dataset_path", ",", "uid", ")", ":", "\n", "    ", "self", ".", "dataset_path", "=", "dataset_path", "\n", "self", ".", "uid", "=", "uid", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalReadHandle.read": [[426, 435], ["datapoint._datapoint_path", "open", "datapoint.decompress_datapoint", "hasattr", "fh.read"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint._datapoint_path", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.decompress_datapoint", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalReadHandle.read"], ["", "def", "read", "(", "self", ",", "disable_final_decompression", "=", "False", ")", ":", "\n", "    ", "path", "=", "_datapoint_path", "(", "self", ".", "dataset_path", ",", "self", ".", "uid", ")", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "fh", ":", "\n", "      ", "dp", "=", "decompress_datapoint", "(", "fh", ".", "read", "(", ")", ",", "disable_final_decompression", "=", "disable_final_decompression", ")", "\n", "# TODO: remove this, once old datasets without UID are out of use", "\n", "", "if", "not", "hasattr", "(", "dp", ",", "'uid'", ")", ":", "\n", "      ", "dp", ".", "uid", "=", "self", ".", "uid", "\n", "", "assert", "dp", ".", "uid", "==", "self", ".", "uid", "\n", "return", "dp", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.get_uid": [[20, 22], ["shortuuid.uuid"], "function", ["None"], ["def", "get_uid", "(", ")", ":", "\n", "  ", "return", "shortuuid", ".", "uuid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.compress_color_image": [[90, 95], ["io.BytesIO", "PIL.Image.fromarray", "Image.fromarray.save", "buf.getvalue"], "function", ["None"], ["", "", "def", "compress_color_image", "(", "img", ",", "quality", "=", "90", ")", ":", "\n", "  ", "with", "io", ".", "BytesIO", "(", ")", "as", "buf", ":", "\n", "    ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", ".", "save", "(", "buf", ",", "format", "=", "'jpeg'", ",", "quality", "=", "quality", ")", "\n", "return", "buf", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.decompress_color_image": [[97, 101], ["io.BytesIO", "PIL.Image.open", "numpy.array"], "function", ["None"], ["", "", "def", "decompress_color_image", "(", "img_bytes", ")", ":", "\n", "  ", "with", "io", ".", "BytesIO", "(", "img_bytes", ")", "as", "buf", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "buf", ")", "\n", "return", "np", ".", "array", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.compress_datapoint": [[185, 192], ["copy.deepcopy", "copy.deepcopy.compress", "pickle.dumps", "zstandard.ZstdCompressor", "zstd.ZstdCompressor.compress"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.Panoptic.compress", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.Panoptic.compress"], ["", "def", "compress_datapoint", "(", "x", ")", ":", "\n", "  ", "x", "=", "copy", ".", "deepcopy", "(", "x", ")", "\n", "x", ".", "compress", "(", ")", "\n", "buf", "=", "pickle", ".", "dumps", "(", "x", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "cctx", "=", "zstd", ".", "ZstdCompressor", "(", ")", "\n", "cbuf", "=", "cctx", ".", "compress", "(", "buf", ")", "\n", "return", "cbuf", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.decompress_datapoint": [[194, 201], ["zstandard.ZstdDecompressor", "zstd.ZstdDecompressor.decompress", "pickle.loads", "pickle.loads.decompress"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.Panoptic.decompress", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.Panoptic.decompress"], ["", "def", "decompress_datapoint", "(", "cbuf", ",", "disable_final_decompression", "=", "False", ")", ":", "\n", "  ", "cctx", "=", "zstd", ".", "ZstdDecompressor", "(", ")", "\n", "buf", "=", "cctx", ".", "decompress", "(", "cbuf", ")", "\n", "x", "=", "pickle", ".", "loads", "(", "buf", ")", "\n", "if", "not", "disable_final_decompression", ":", "\n", "    ", "x", ".", "decompress", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.make_dataset": [[203, 210], ["datapoint.make_one_dataset", "uri.split", "datapoint.ConcatDataset", "datasets.append", "datapoint.make_one_dataset"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.make_one_dataset", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.make_one_dataset"], ["", "def", "make_dataset", "(", "uri", ")", ":", "\n", "  ", "if", "','", "in", "uri", ":", "\n", "    ", "datasets", "=", "[", "]", "\n", "for", "uri", "in", "uri", ".", "split", "(", "','", ")", ":", "\n", "      ", "datasets", ".", "append", "(", "make_one_dataset", "(", "uri", ")", ")", "\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n", "", "return", "make_one_dataset", "(", "uri", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.make_one_dataset": [[212, 227], ["uri.partition", "datapoint.make_one_simple_dataset", "raw_params.split", "datapoint.FilterDataset", "raw_param.partition"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.make_one_simple_dataset"], ["", "def", "make_one_dataset", "(", "uri", ")", ":", "\n", "# parse parameters", "\n", "  ", "uri", ",", "_", ",", "raw_params", "=", "uri", ".", "partition", "(", "'?'", ")", "\n", "dataset", "=", "make_one_simple_dataset", "(", "uri", ")", "\n", "if", "not", "raw_params", ":", "\n", "    ", "return", "dataset", "\n", "\n", "", "params", "=", "{", "}", "\n", "for", "raw_param", "in", "raw_params", ".", "split", "(", "'&'", ")", ":", "\n", "    ", "k", ",", "_", ",", "v", "=", "raw_param", ".", "partition", "(", "'='", ")", "\n", "assert", "k", "and", "v", "\n", "assert", "k", "not", "in", "params", "\n", "params", "[", "k", "]", "=", "v", "\n", "\n", "", "return", "FilterDataset", "(", "dataset", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.make_one_simple_dataset": [[229, 241], ["uri.startswith", "uri.startswith", "ValueError", "path.partition", "datapoint.RemoteDataset", "pathlib.Path", "datapoint.LocalDataset", "uri.partition", "uri.partition"], "function", ["None"], ["", "def", "make_one_simple_dataset", "(", "uri", ")", ":", "\n", "  ", "if", "uri", ".", "startswith", "(", "'s3://'", ")", ":", "\n", "    ", "path", "=", "uri", ".", "partition", "(", "'s3://'", ")", "[", "2", "]", "\n", "bucket", ",", "_", ",", "dataset_path", "=", "path", ".", "partition", "(", "'/'", ")", "\n", "return", "RemoteDataset", "(", "bucket", ",", "dataset_path", ")", "\n", "\n", "", "if", "uri", ".", "startswith", "(", "'file://'", ")", ":", "\n", "    ", "path", "=", "uri", ".", "partition", "(", "'file://'", ")", "[", "2", "]", "\n", "dataset_path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "return", "LocalDataset", "(", "dataset_path", ")", "\n", "\n", "", "raise", "ValueError", "(", "f'uri must start with `s3://` or `file://`. uri={uri}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint._datapoint_path": [[243, 245], ["None"], "function", ["None"], ["", "def", "_datapoint_path", "(", "dataset_path", ",", "uid", ")", ":", "\n", "  ", "return", "f'{dataset_path}/{uid}.pickle.zstd'", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.retry_delay": [[389, 395], ["min", "numpy.random.uniform"], "function", ["None"], ["", "", "def", "retry_delay", "(", "attempt", ")", ":", "\n", "  ", "\"\"\"Exponential backoff with maximum delay and partial jitter.\"\"\"", "\n", "delay", "=", "100e-3", "*", "(", "2.", "**", "attempt", ")", "# exponential back off", "\n", "delay", "=", "min", "(", "10.0", ",", "delay", ")", "# with maximum", "\n", "delay", "=", "delay", "*", "np", ".", "random", ".", "uniform", "(", "0.5", ",", "1", ")", "# partial jitter", "\n", "return", "delay", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.panoptic_trainer.PanopticModel.__init__": [[29, 41], ["pytorch_lightning.LightningModule.__init__", "simnet.lib.net.common.get_model"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.get_model"], ["  ", "def", "__init__", "(", "\n", "self", ",", "hparams", ",", "epochs", "=", "None", ",", "train_dataset", "=", "None", ",", "eval_metric", "=", "None", ",", "preprocess_func", "=", "None", "\n", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "train_dataset", "=", "train_dataset", "\n", "\n", "self", ".", "model", "=", "common", ".", "get_model", "(", "hparams", ")", "\n", "self", ".", "eval_metrics", "=", "eval_metric", "\n", "self", ".", "preprocess_func", "=", "preprocess_func", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.panoptic_trainer.PanopticModel.forward": [[42, 47], ["panoptic_trainer.PanopticModel.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "    ", "seg_output", ",", "depth_output", ",", "small_depth_output", ",", "pose_output", ",", "box_output", ",", "keypoint_output", "=", "self", ".", "model", "(", "\n", "image", ",", "self", ".", "global_step", "\n", ")", "\n", "return", "seg_output", ",", "depth_output", ",", "small_depth_output", ",", "pose_output", ",", "box_output", ",", "keypoint_output", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.panoptic_trainer.PanopticModel.optimizer_step": [[48, 56], ["super().optimizer_step", "panoptic_trainer.PanopticModel.logger.experiment.log"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.panoptic_trainer.PanopticModel.optimizer_step"], ["", "def", "optimizer_step", "(", "self", ",", "epoch_nb", ",", "batch_nb", ",", "optimizer", ",", "optimizer_i", ",", "second_order_closure", "=", "None", ")", ":", "\n", "    ", "super", "(", ")", ".", "optimizer_step", "(", "epoch_nb", ",", "batch_nb", ",", "optimizer", ",", "optimizer_i", ",", "second_order_closure", ")", "\n", "\n", "learning_rate", "=", "0.0", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "      ", "learning_rate", "=", "param_group", "[", "'lr'", "]", "\n", "break", "\n", "", "self", ".", "logger", ".", "experiment", ".", "log", "(", "{", "'learning_rate'", ":", "learning_rate", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.panoptic_trainer.PanopticModel.training_step": [[57, 106], ["panoptic_trainer.PanopticModel.forward", "depth_output.compute_loss", "copy.deepcopy", "seg_output.compute_loss", "keypoint_outputs.compute_loss", "small_depth_output.compute_loss", "pose_outputs.compute_loss", "box_outputs.compute_loss", "torch.no_grad", "simnet.lib.net.dataset.extract_left_numpy_img", "seg_output.get_visualization_img", "wandb.Image", "depth_output.get_visualization_img", "wandb.Image", "small_depth_output.get_visualization_img", "wandb.Image", "logger.log", "numpy.copy", "pose_outputs.get_visualization_img", "wandb.Image", "box_outputs.get_visualization_img", "wandb.Image", "keypoint_outputs.get_visualization_img", "keypoint_outputs.get_detections", "enumerate", "wandb.Image", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "wandb.Image"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.compute_loss", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.compute_loss", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.compute_loss", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.compute_loss", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.compute_loss", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.compute_loss", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.dataset.extract_left_numpy_img", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.get_visualization_img", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.get_visualization_img", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.get_visualization_img", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.get_visualization_img", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.get_visualization_img", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.get_visualization_img", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.OBBOutput.get_detections"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "    ", "image", ",", "seg_target", ",", "depth_target", ",", "pose_targets", ",", "box_targets", ",", "keypoint_targets", ",", "_", ",", "_", "=", "batch", "\n", "seg_output", ",", "depth_output", ",", "small_depth_output", ",", "pose_outputs", ",", "box_outputs", ",", "keypoint_outputs", "=", "self", ".", "forward", "(", "\n", "image", "\n", ")", "\n", "\n", "log", "=", "{", "}", "\n", "loss", "=", "depth_output", ".", "compute_loss", "(", "copy", ".", "deepcopy", "(", "depth_target", ")", ",", "log", ",", "'refined_disp'", ")", "\n", "if", "self", ".", "hparams", ".", "frozen_stereo_checkpoint", "is", "None", ":", "\n", "      ", "loss", "=", "loss", "+", "small_depth_output", ".", "compute_loss", "(", "depth_target", ",", "log", ",", "'cost_volume_disp'", ")", "\n", "", "else", ":", "\n", "      ", "assert", "False", "\n", "", "loss", "=", "loss", "+", "seg_output", ".", "compute_loss", "(", "seg_target", ",", "log", ")", "\n", "if", "pose_targets", "[", "0", "]", "is", "not", "None", ":", "\n", "      ", "loss", "=", "loss", "+", "pose_outputs", ".", "compute_loss", "(", "pose_targets", ",", "log", ")", "\n", "", "if", "box_targets", "[", "0", "]", "is", "not", "None", ":", "\n", "      ", "loss", "=", "loss", "+", "box_outputs", ".", "compute_loss", "(", "box_targets", ",", "log", ")", "\n", "", "if", "keypoint_targets", "[", "0", "]", "is", "not", "None", ":", "\n", "      ", "loss", "+=", "keypoint_outputs", ".", "compute_loss", "(", "keypoint_targets", ",", "log", ")", "\n", "", "log", "[", "'train/loss/total'", "]", "=", "loss", "\n", "\n", "if", "(", "batch_idx", "%", "500", ")", "==", "0", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "llog", "=", "{", "}", "\n", "prefix", "=", "'train'", "\n", "left_image_np", "=", "extract_left_numpy_img", "(", "image", "[", "0", "]", ")", "\n", "logger", "=", "self", ".", "logger", ".", "experiment", "\n", "seg_pred_vis", "=", "seg_output", ".", "get_visualization_img", "(", "np", ".", "copy", "(", "left_image_np", ")", ")", "\n", "llog", "[", "f'{prefix}/seg'", "]", "=", "wandb", ".", "Image", "(", "seg_pred_vis", ",", "caption", "=", "prefix", ")", "\n", "if", "pose_targets", "[", "0", "]", "is", "not", "None", ":", "\n", "          ", "pose_vis", "=", "pose_outputs", ".", "get_visualization_img", "(", "\n", "np", ".", "copy", "(", "left_image_np", ")", ",", "camera_model", "=", "self", ".", "eval_metrics", ".", "camera_model", "\n", ")", "\n", "llog", "[", "f'{prefix}/pose'", "]", "=", "wandb", ".", "Image", "(", "pose_vis", ",", "caption", "=", "prefix", ")", "\n", "", "if", "box_targets", "[", "0", "]", "is", "not", "None", ":", "\n", "          ", "box_vis", "=", "box_outputs", ".", "get_visualization_img", "(", "np", ".", "copy", "(", "left_image_np", ")", ")", "\n", "llog", "[", "f'{prefix}/box'", "]", "=", "wandb", ".", "Image", "(", "box_vis", ",", "caption", "=", "prefix", ")", "\n", "", "if", "keypoint_targets", "[", "0", "]", "is", "not", "None", ":", "\n", "          ", "kp_vis", "=", "keypoint_outputs", ".", "get_visualization_img", "(", "np", ".", "copy", "(", "left_image_np", ")", ")", "\n", "kp_pred_vis", "=", "keypoint_outputs", ".", "get_detections", "(", "np", ".", "copy", "(", "left_image_np", ")", ")", "\n", "for", "idx", ",", "kp_vis_img", "in", "enumerate", "(", "kp_vis", ")", ":", "\n", "            ", "llog", "[", "f'{prefix}/keypoints_{idx}'", "]", "=", "wandb", ".", "Image", "(", "kp_vis_img", ",", "caption", "=", "prefix", ")", "\n", "", "llog", "[", "f'{prefix}/keypoints_pred'", "]", "=", "wandb", ".", "Image", "(", "kp_pred_vis", ",", "caption", "=", "prefix", ")", "\n", "", "depth_vis", "=", "depth_output", ".", "get_visualization_img", "(", "np", ".", "copy", "(", "left_image_np", ")", ")", "\n", "llog", "[", "f'{prefix}/disparity'", "]", "=", "wandb", ".", "Image", "(", "depth_vis", ",", "caption", "=", "prefix", ")", "\n", "small_depth_vis", "=", "small_depth_output", ".", "get_visualization_img", "(", "np", ".", "copy", "(", "left_image_np", ")", ")", "\n", "llog", "[", "f'{prefix}/small_disparity'", "]", "=", "wandb", ".", "Image", "(", "small_depth_vis", ",", "caption", "=", "prefix", ")", "\n", "logger", ".", "log", "(", "llog", ")", "\n", "", "", "return", "{", "'loss'", ":", "loss", ",", "'log'", ":", "log", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.panoptic_trainer.PanopticModel.validation_step": [[107, 141], ["panoptic_trainer.PanopticModel.forward", "torch.no_grad", "panoptic_trainer.PanopticModel.eval_metrics.process_sample", "simnet.lib.net.dataset.extract_left_numpy_img", "depth_output.get_visualization_img", "wandb.Image", "small_depth_output.get_visualization_img", "wandb.Image", "panoptic_trainer.PanopticModel.eval_metrics.draw_detections", "logger.log", "numpy.copy", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.process_sample", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.dataset.extract_left_numpy_img", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.get_visualization_img", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.get_visualization_img", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.None.net_train.EvalMethod.draw_detections"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "#if corl.sim_on_sim_overfit:", "\n", "#  # If we are overfitting on sim data set batch size to 1 and enable batch norm for val to make", "\n", "#  # it match train. this doesn't make sense unless trying to get val and train to match", "\n", "#  # perfectly on a single sample for an overfit test", "\n", "#  self.model.train()", "\n", "\n", "    ", "image", ",", "seg_target", ",", "depth_target", ",", "pose_targets", ",", "box_targets", ",", "keypoint_targets", ",", "detections_gt", ",", "scene_name", "=", "batch", "\n", "seg_output", ",", "depth_output", ",", "small_depth_output", ",", "pose_outputs", ",", "box_outputs", ",", "keypoint_outputs", "=", "self", ".", "forward", "(", "\n", "image", "\n", ")", "\n", "log", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Compute mAP score", "\n", "      ", "if", "scene_name", "[", "0", "]", "!=", "'fmk'", ":", "\n", "        ", "self", ".", "eval_metrics", ".", "process_sample", "(", "\n", "pose_outputs", ",", "box_outputs", ",", "seg_output", ",", "detections_gt", "[", "0", "]", ",", "scene_name", "[", "0", "]", "\n", ")", "\n", "", "logger", "=", "self", ".", "logger", ".", "experiment", "\n", "if", "batch_idx", "<", "5", "or", "scene_name", "[", "0", "]", "==", "'fmk'", ":", "\n", "        ", "llog", "=", "{", "}", "\n", "left_image_np", "=", "extract_left_numpy_img", "(", "image", "[", "0", "]", ")", "\n", "prefix", "=", "f'val/{batch_idx}'", "\n", "logger", "=", "self", ".", "logger", ".", "experiment", "\n", "depth_vis", "=", "depth_output", ".", "get_visualization_img", "(", "np", ".", "copy", "(", "left_image_np", ")", ")", "\n", "llog", "[", "f'{prefix}/disparity'", "]", "=", "wandb", ".", "Image", "(", "depth_vis", ",", "caption", "=", "prefix", ")", "\n", "small_depth_vis", "=", "small_depth_output", ".", "get_visualization_img", "(", "np", ".", "copy", "(", "left_image_np", ")", ")", "\n", "llog", "[", "f'{prefix}/small_disparity'", "]", "=", "wandb", ".", "Image", "(", "small_depth_vis", ",", "caption", "=", "prefix", ")", "\n", "self", ".", "eval_metrics", ".", "draw_detections", "(", "\n", "pose_outputs", ",", "box_outputs", ",", "seg_output", ",", "keypoint_outputs", ",", "left_image_np", ",", "llog", ",", "prefix", "\n", ")", "\n", "\n", "logger", ".", "log", "(", "llog", ")", "\n", "", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.panoptic_trainer.PanopticModel.validation_epoch_end": [[142, 148], ["panoptic_trainer.PanopticModel.eval_metrics.process_all_dataset", "panoptic_trainer.PanopticModel.eval_metrics.reset"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.None.net_train.EvalMethod.process_all_dataset", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.None.net_train.EvalMethod.reset"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "    ", "self", ".", "trainer", ".", "checkpoint_callback", ".", "save_best_only", "=", "False", "\n", "log", "=", "{", "}", "\n", "self", ".", "eval_metrics", ".", "process_all_dataset", "(", "log", ")", "\n", "self", ".", "eval_metrics", ".", "reset", "(", ")", "\n", "return", "{", "'log'", ":", "log", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.panoptic_trainer.PanopticModel.train_dataloader": [[149, 156], ["simnet.lib.net.common.get_loader"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.get_loader"], ["", "@", "pl", ".", "data_loader", "\n", "def", "train_dataloader", "(", "self", ")", ":", "\n", "    ", "return", "common", ".", "get_loader", "(", "\n", "self", ".", "hparams", ",", "\n", "\"train\"", ",", "\n", "preprocess_func", "=", "self", ".", "preprocess_func", ",", "\n", "datapoint_dataset", "=", "self", ".", "train_dataset", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.panoptic_trainer.PanopticModel.val_dataloader": [[158, 161], ["simnet.lib.net.common.get_loader"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.get_loader"], ["", "@", "pl", ".", "data_loader", "\n", "def", "val_dataloader", "(", "self", ")", ":", "\n", "    ", "return", "common", ".", "get_loader", "(", "self", ".", "hparams", ",", "\"val\"", ",", "preprocess_func", "=", "self", ".", "preprocess_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.panoptic_trainer.PanopticModel.configure_optimizers": [[162, 169], ["torch.optim.Adam", "simnet.lib.net.functions.learning_rate.lambda_learning_rate_poly", "torch.optim.lr_scheduler.LambdaLR", "panoptic_trainer.PanopticModel.parameters", "simnet.lib.net.functions.learning_rate.lambda_warmup"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.functions.learning_rate.lambda_learning_rate_poly", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.functions.learning_rate.lambda_warmup"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "hparams", ".", "optim_learning_rate", ")", "\n", "lr_lambda", "=", "lambda_learning_rate_poly", "(", "self", ".", "epochs", ",", "self", ".", "hparams", ".", "optim_poly_exp", ")", "\n", "if", "self", ".", "hparams", ".", "optim_warmup_epochs", "is", "not", "None", "and", "self", ".", "hparams", ".", "optim_warmup_epochs", ">", "0", ":", "\n", "      ", "lr_lambda", "=", "lambda_warmup", "(", "self", ".", "hparams", ".", "optim_warmup_epochs", ",", "0.2", ",", "lr_lambda", ")", "\n", "", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lr_lambda", ")", "\n", "return", "[", "optimizer", "]", ",", "[", "scheduler", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.add_dataset_args": [[10, 16], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["def", "add_dataset_args", "(", "parser", ",", "prefix", ")", ":", "\n", "  ", "group", "=", "parser", ".", "add_argument_group", "(", "\"{}_dataset\"", ".", "format", "(", "prefix", ")", ")", "\n", "group", ".", "add_argument", "(", "\"--{}_path\"", ".", "format", "(", "prefix", ")", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "#group.add_argument(\"--{}_fraction\".format(prefix), type=str, default=None)", "\n", "group", ".", "add_argument", "(", "\"--{}_batch_size\"", ".", "format", "(", "prefix", ")", ",", "default", "=", "16", ",", "type", "=", "int", ")", "\n", "group", ".", "add_argument", "(", "\"--{}_num_workers\"", ".", "format", "(", "prefix", ")", ",", "default", "=", "7", ",", "type", "=", "int", ")", "\n", "#group.add_argument(\"--{}_random_crop\".format(prefix), default=None, type=int, nargs=2)", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.add_train_args": [[19, 78], ["parser.add_argument", "parser.add_argument", "common.add_dataset_args", "common.add_dataset_args", "parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.add_dataset_args", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.add_dataset_args"], ["", "def", "add_train_args", "(", "parser", ")", ":", "\n", "  ", "parser", ".", "add_argument", "(", "\"--max_steps\"", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--output\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "\n", "add_dataset_args", "(", "parser", ",", "\"train\"", ")", "\n", "add_dataset_args", "(", "parser", ",", "\"val\"", ")", "\n", "\n", "optim_group", "=", "parser", ".", "add_argument_group", "(", "\"optim\"", ")", "\n", "optim_group", ".", "add_argument", "(", "\"--optim_type\"", ",", "default", "=", "'sgd'", ",", "type", "=", "str", ")", "\n", "optim_group", ".", "add_argument", "(", "\"--optim_learning_rate\"", ",", "default", "=", "0.02", ",", "type", "=", "float", ")", "\n", "optim_group", ".", "add_argument", "(", "\"--optim_momentum\"", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "\n", "optim_group", ".", "add_argument", "(", "\"--optim_weight_decay\"", ",", "default", "=", "1e-4", ",", "type", "=", "float", ")", "\n", "optim_group", ".", "add_argument", "(", "\"--optim_poly_exp\"", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "\n", "optim_group", ".", "add_argument", "(", "\"--optim_warmup_epochs\"", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_file\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_name\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--wandb_name\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "# Ignore Mask Search.", "\n", "parser", ".", "add_argument", "(", "\"--min_height\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--min_occlusion\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--min_truncation\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "# Backbone configs", "\n", "parser", ".", "add_argument", "(", "\"--model_norm\"", ",", "default", "=", "'BN'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_filters_scale\"", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "\n", "# Loss weights", "\n", "parser", ".", "add_argument", "(", "\"--frozen_stereo_checkpoint\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_seg_mult\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_depth_mult\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_depth_refine_mult\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_heatmap_mult\"", ",", "default", "=", "100.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_vertex_mult\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_z_centroid_mult\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_rotation_mult\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--loss_keypoint_mult\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "# Stereo Stem Args", "\n", "parser", ".", "add_argument", "(", "\n", "\"--loss_disparity_stdmean_scaled\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"If true, the loss will be scaled based on the standard deviation and mean of the \"", "\n", "\"ground truth disparities\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--cost_volume_downsample_factor\"", ",", "default", "=", "4", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_disparity\"", ",", "default", "=", "90", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--fe_features\"", ",", "\n", "default", "=", "16", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of output features in feature extraction stage\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--fe_internal_features\"", ",", "\n", "default", "=", "32", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Number of features in the first block of the feature extraction\"", "\n", ")", "\n", "# keypoint head args", "\n", "parser", ".", "add_argument", "(", "\"--num_keypoints\"", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.get_config_value": [[80, 86], ["hasattr", "getattr"], "function", ["None"], ["", "def", "get_config_value", "(", "hparams", ",", "prefix", ",", "key", ")", ":", "\n", "  ", "full_key", "=", "\"{}_{}\"", ".", "format", "(", "prefix", ",", "key", ")", "\n", "if", "hasattr", "(", "hparams", ",", "full_key", ")", ":", "\n", "    ", "return", "getattr", "(", "hparams", ",", "full_key", ")", "\n", "", "else", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.get_loader": [[88, 106], ["common.get_config_value", "datasets.append", "common.get_config_value", "torch.utils.data.DataLoader", "simnet.lib.net.dataset.Dataset", "torch.utils.data.ConcatDataset", "common.get_config_value"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.get_config_value", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.get_config_value", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.get_config_value"], ["", "", "def", "get_loader", "(", "hparams", ",", "prefix", ",", "preprocess_func", "=", "None", ",", "datapoint_dataset", "=", "None", ")", ":", "\n", "  ", "datasets", "=", "[", "]", "\n", "path", "=", "get_config_value", "(", "hparams", ",", "prefix", ",", "'path'", ")", "\n", "datasets", ".", "append", "(", "\n", "Dataset", "(", "\n", "path", ",", "hparams", ",", "preprocess_image_func", "=", "preprocess_func", ",", "datapoint_dataset", "=", "datapoint_dataset", "\n", ")", "\n", ")", "\n", "batch_size", "=", "get_config_value", "(", "hparams", ",", "prefix", ",", "\"batch_size\"", ")", "\n", "\n", "collate_fn", "=", "simnet_collate", "\n", "return", "DataLoader", "(", "\n", "ConcatDataset", "(", "datasets", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", "num_workers", "=", "get_config_value", "(", "hparams", ",", "prefix", ",", "\"num_workers\"", ")", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.simnet_collate": [[109, 120], ["range", "torch.stack", "len", "targets.append"], "function", ["None"], ["", "def", "simnet_collate", "(", "batch", ")", ":", "\n", "# list of elements per patch", "\n", "# Each element is a tuple of (stereo,imgs)", "\n", "  ", "targets", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "len", "(", "batch", "[", "0", "]", ")", ")", ":", "\n", "    ", "targets", ".", "append", "(", "[", "batch_element", "[", "ii", "]", "for", "batch_element", "in", "batch", "]", ")", "\n", "\n", "", "stacked_images", "=", "torch", ".", "stack", "(", "targets", "[", "0", "]", ")", "\n", "\n", "return", "stacked_images", ",", "targets", "[", "1", "]", ",", "targets", "[", "2", "]", ",", "targets", "[", "3", "]", ",", "targets", "[", "4", "]", ",", "targets", "[", "5", "]", ",", "targets", "[", "\n", "6", "]", ",", "targets", "[", "7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.prune_state_dict": [[122, 126], ["list", "state_dict.keys", "state_dict.pop"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalDataset.list"], ["", "def", "prune_state_dict", "(", "state_dict", ")", ":", "\n", "  ", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "    ", "state_dict", "[", "key", "[", "6", ":", "]", "]", "=", "state_dict", ".", "pop", "(", "key", ")", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.keep_only_stereo_weights": [[128, 134], ["list", "state_dict.keys"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalDataset.list"], ["", "def", "keep_only_stereo_weights", "(", "state_dict", ")", ":", "\n", "  ", "pruned_state_dict", "=", "{", "}", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "    ", "if", "'stereo'", "in", "key", ":", "\n", "      ", "pruned_state_dict", "[", "key", "]", "=", "state_dict", "[", "key", "]", "\n", "", "", "return", "pruned_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.get_model": [[136, 168], ["print", "importlib.machinery.SourceFileLoader().load_module", "getattr", "getattr.", "net_attr.apply", "net_attr.load_imagenet_weights", "print", "common.prune_state_dict", "common.keep_only_stereo_weights", "net_attr.load_state_dict", "print", "common.prune_state_dict", "net_attr.load_state_dict", "importlib.machinery.SourceFileLoader", "torch.load", "torch.load", "str", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.prune_state_dict", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.keep_only_stereo_weights", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.common.prune_state_dict"], ["", "def", "get_model", "(", "hparams", ")", ":", "\n", "  ", "model_path", "=", "(", "pathlib", ".", "Path", "(", "__file__", ")", ".", "parent", "/", "hparams", ".", "model_file", ")", ".", "resolve", "(", ")", "\n", "print", "(", "'Using model class from:'", ",", "model_path", ")", "\n", "net_module", "=", "SourceFileLoader", "(", "hparams", ".", "model_name", ",", "str", "(", "model_path", ")", ")", ".", "load_module", "(", ")", "\n", "net_attr", "=", "getattr", "(", "net_module", ",", "hparams", ".", "model_name", ")", "\n", "model", "=", "net_attr", "(", "hparams", ")", "\n", "model", ".", "apply", "(", "default_init", ")", "\n", "\n", "# For large models use imagenet weights.", "\n", "# This speeds up training and can give a +2 mAP score on car detections", "\n", "if", "hparams", ".", "num_filters_scale", "==", "1", ":", "\n", "    ", "model", ".", "load_imagenet_weights", "(", ")", "\n", "# If we are exporting to the robot, using a TensorRT compatible version of the net.", "\n", "# Note only nets trained for the robot use batch norm, so we use that.", "\n", "#if hparams.model_norm == 'BN':", "\n", "#  from simnet.lib.onnx_plugins import fix_module_train", "\n", "#  fix_module_train(model)", "\n", "\n", "", "if", "hparams", ".", "frozen_stereo_checkpoint", "is", "not", "None", ":", "\n", "    ", "print", "(", "'Restoring stereo weights from checkpoint:'", ",", "hparams", ".", "frozen_stereo_checkpoint", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "hparams", ".", "frozen_stereo_checkpoint", ",", "map_location", "=", "'cpu'", ")", "[", "'state_dict'", "]", "\n", "state_dict", "=", "prune_state_dict", "(", "state_dict", ")", "\n", "state_dict", "=", "keep_only_stereo_weights", "(", "state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "if", "hparams", ".", "checkpoint", "is", "not", "None", ":", "\n", "    ", "print", "(", "'Restoring from checkpoint:'", ",", "hparams", ".", "checkpoint", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "hparams", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "[", "'state_dict'", "]", "\n", "state_dict", "=", "prune_state_dict", "(", "state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.dataset.Dataset.__init__": [[40, 54], ["dataset.Dataset.__init__", "simnet.lib.datapoint.make_dataset.list", "simnet.lib.datapoint.make_dataset"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalDataset.list", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.make_dataset"], ["  ", "def", "__init__", "(", "self", ",", "dataset_uri", ",", "hparams", ",", "preprocess_image_func", "=", "None", ",", "datapoint_dataset", "=", "None", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "datapoint_dataset", "is", "None", ":", "\n", "      ", "datapoint_dataset", "=", "datapoint", ".", "make_dataset", "(", "dataset_uri", ")", "\n", "", "self", ".", "datapoint_handles", "=", "datapoint_dataset", ".", "list", "(", ")", "\n", "# No need to shuffle, already shufled based on random uids", "\n", "self", ".", "hparams", "=", "hparams", "\n", "\n", "if", "preprocess_image_func", "is", "None", ":", "\n", "      ", "self", ".", "preprocces_image_func", "=", "create_anaglyph", "\n", "", "else", ":", "\n", "      ", "assert", "False", "\n", "self", ".", "preprocces_image_func", "=", "preprocess_image_func", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.dataset.Dataset.__len__": [[55, 57], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "datapoint_handles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.dataset.Dataset.__getitem__": [[58, 82], ["dataset.Dataset.datapoint_handles[].read", "dataset.Dataset.preprocces_image_func", "simnet.lib.net.post_processing.segmentation_outputs.SegmentationOutput", "simnet.lib.net.post_processing.segmentation_outputs.SegmentationOutput.convert_to_torch_from_numpy", "simnet.lib.net.post_processing.depth_outputs.DepthOutput", "simnet.lib.net.post_processing.depth_outputs.DepthOutput.convert_to_torch_from_numpy", "simnet.lib.net.post_processing.obb_outputs.OBBOutput", "simnet.lib.net.post_processing.obb_outputs.OBBOutput.convert_to_torch_from_numpy"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalReadHandle.read", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.convert_to_torch_from_numpy", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.convert_to_torch_from_numpy", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.convert_to_torch_from_numpy"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "    ", "dp", "=", "self", ".", "datapoint_handles", "[", "idx", "]", ".", "read", "(", ")", "\n", "\n", "anaglyph", "=", "self", ".", "preprocces_image_func", "(", "dp", ".", "stereo", ")", "\n", "\n", "segmentation_target", "=", "segmentation_outputs", ".", "SegmentationOutput", "(", "dp", ".", "segmentation", ",", "self", ".", "hparams", ")", "\n", "segmentation_target", ".", "convert_to_torch_from_numpy", "(", ")", "\n", "depth_target", "=", "depth_outputs", ".", "DepthOutput", "(", "dp", ".", "depth", ",", "self", ".", "hparams", ")", "\n", "depth_target", ".", "convert_to_torch_from_numpy", "(", ")", "\n", "pose_target", "=", "None", "\n", "for", "pose_dp", "in", "dp", ".", "object_poses", ":", "\n", "      ", "pose_target", "=", "obb_outputs", ".", "OBBOutput", "(", "\n", "pose_dp", ".", "heat_map", ",", "pose_dp", ".", "vertex_target", ",", "pose_dp", ".", "z_centroid", ",", "pose_dp", ".", "cov_matrices", ",", "\n", "self", ".", "hparams", "\n", ")", "\n", "pose_target", ".", "convert_to_torch_from_numpy", "(", ")", "\n", "\n", "# TODO(kevin): remove these unused outputs", "\n", "", "box_target", "=", "None", "\n", "kp_target", "=", "None", "\n", "\n", "scene_name", "=", "dp", ".", "scene_name", "\n", "\n", "return", "anaglyph", ",", "segmentation_target", ",", "depth_target", ",", "pose_target", ",", "box_target", ",", "kp_target", ",", "dp", ".", "detections", ",", "scene_name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.dataset.extract_left_numpy_img": [[12, 17], ["numpy.ascontiguousarray", "anaglyph_np.transpose.transpose", "anaglyph.cpu().numpy", "anaglyph.cpu"], "function", ["None"], ["def", "extract_left_numpy_img", "(", "anaglyph", ")", ":", "\n", "  ", "anaglyph_np", "=", "np", ".", "ascontiguousarray", "(", "anaglyph", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "anaglyph_np", "=", "anaglyph_np", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "left_img", "=", "anaglyph_np", "[", "...", ",", "0", ":", "3", "]", "*", "255.0", "\n", "return", "left_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.dataset.extract_right_numpy_img": [[19, 24], ["numpy.ascontiguousarray", "anaglyph_np.transpose.transpose", "anaglyph.cpu().numpy", "anaglyph.cpu"], "function", ["None"], ["", "def", "extract_right_numpy_img", "(", "anaglyph", ")", ":", "\n", "  ", "anaglyph_np", "=", "np", ".", "ascontiguousarray", "(", "anaglyph", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "anaglyph_np", "=", "anaglyph_np", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "left_img", "=", "anaglyph_np", "[", "...", ",", "3", ":", "6", "]", "*", "255.0", "\n", "return", "left_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.dataset.create_anaglyph": [[26, 36], ["numpy.zeros", "cv2.normalize", "cv2.normalize", "image.transpose.transpose", "torch.from_numpy().float", "torch.from_numpy", "numpy.ascontiguousarray"], "function", ["None"], ["", "def", "create_anaglyph", "(", "stereo_dp", ")", ":", "\n", "  ", "height", ",", "width", ",", "_", "=", "stereo_dp", ".", "left_color", ".", "shape", "\n", "image", "=", "np", ".", "zeros", "(", "[", "height", ",", "width", ",", "6", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cv2", ".", "normalize", "(", "stereo_dp", ".", "left_color", ",", "stereo_dp", ".", "left_color", ",", "0", ",", "255", ",", "cv2", ".", "NORM_MINMAX", ")", "\n", "cv2", ".", "normalize", "(", "stereo_dp", ".", "right_color", ",", "stereo_dp", ".", "right_color", ",", "0", ",", "255", ",", "cv2", ".", "NORM_MINMAX", ")", "\n", "image", "[", "...", ",", "0", ":", "3", "]", "=", "stereo_dp", ".", "left_color", "\n", "image", "[", "...", ",", "3", ":", "6", "]", "=", "stereo_dp", ".", "right_color", "\n", "image", "=", "image", "*", "1.", "/", "255.0", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "image", ")", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.losses.MaskedL1Loss.__init__": [[9, 14], ["torch.Module.__init__", "torch.L1Loss", "torch.L1Loss"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "centroid_threshold", "=", "0.3", ",", "downscale_factor", "=", "8", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "nn", ".", "L1Loss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "centroid_threshold", "=", "centroid_threshold", "\n", "self", ".", "downscale_factor", "=", "downscale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.losses.MaskedL1Loss.forward": [[15, 32], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "losses.MaskedL1Loss.loss", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ",", "valid_mask", ")", ":", "\n", "    ", "'''\n        output: [N,16,H,W]\n        target: [N,16,H,W]\n        valid_mask: [N,H,W]\n        '''", "\n", "valid_count", "=", "torch", ".", "sum", "(", "\n", "valid_mask", "[", ":", ",", ":", ":", "self", ".", "downscale_factor", ",", ":", ":", "self", ".", "downscale_factor", "]", ">", "self", ".", "centroid_threshold", "\n", ")", "\n", "loss", "=", "self", ".", "loss", "(", "output", ",", "target", ")", "\n", "if", "len", "(", "output", ".", "shape", ")", "==", "4", ":", "\n", "      ", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "1", ")", "\n", "", "loss", "[", "valid_mask", "[", ":", ",", ":", ":", "self", ".", "downscale_factor", ",", ":", ":", "self", ".", "downscale_factor", "]", "<", "self", ".", "centroid_threshold", "\n", "]", "=", "0.0", "\n", "if", "valid_count", "==", "0", ":", "\n", "      ", "return", "torch", ".", "sum", "(", "loss", ")", "\n", "", "return", "torch", ".", "sum", "(", "loss", ")", "/", "valid_count", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.losses.MSELoss.__init__": [[36, 39], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.losses.MSELoss.forward": [[40, 48], ["losses.MSELoss.loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "    ", "'''\n        output: [N,H,W]\n        target: [N,H,W]\n        ignore_mask: [N,H,W]\n        '''", "\n", "loss", "=", "self", ".", "loss", "(", "output", ",", "target", ")", "\n", "return", "torch", ".", "mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.losses.MaskedMSELoss.__init__": [[52, 55], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.net.losses.MaskedMSELoss.forward": [[56, 66], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "losses.MaskedMSELoss.loss", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.logical_not", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ",", "ignore_mask", ")", ":", "\n", "    ", "'''\n        output: [N,H,W]\n        target: [N,H,W]\n        ignore_mask: [N,H,W]\n        '''", "\n", "valid_sum", "=", "torch", ".", "sum", "(", "torch", ".", "logical_not", "(", "ignore_mask", ")", ")", "\n", "loss", "=", "self", ".", "loss", "(", "output", ",", "target", ")", "\n", "loss", "[", "ignore_mask", ">", "0", "]", "=", "0.0", "\n", "return", "torch", ".", "sum", "(", "loss", ")", "/", "valid_sum", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.functions.learning_rate.lambda_learning_rate_poly": [[7, 18], ["pow"], "function", ["None"], ["def", "lambda_learning_rate_poly", "(", "max_epochs", ",", "exponent", ")", ":", "\n", "  ", "\"\"\"Make a function for computing learning rate by \"poly\" policy.\n\n    This policy does a polynomial decay of the learning rate over the epochs\n    of training.\n\n    Args:\n        max_epochs (int): max numbers of epochs\n        exponent (float): exponent value\n    \"\"\"", "\n", "return", "lambda", "epoch", ":", "pow", "(", "(", "1.0", "-", "epoch", "/", "max_epochs", ")", ",", "exponent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.functions.learning_rate.lambda_warmup": [[20, 29], ["learning_rate.lambda_warmup.warmup"], "function", ["None"], ["", "def", "lambda_warmup", "(", "warmup_period", ",", "warmup_factor", ",", "wrapped_lambda", ")", ":", "\n", "\n", "  ", "def", "warmup", "(", "epoch", ",", "warmup_period", ",", "warmup_factor", ")", ":", "\n", "    ", "if", "epoch", ">", "warmup_period", ":", "\n", "      ", "return", "1.0", "\n", "", "else", ":", "\n", "      ", "return", "warmup_factor", "+", "(", "1.0", "-", "warmup_factor", ")", "*", "(", "epoch", "/", "warmup_period", ")", "\n", "\n", "", "", "return", "lambda", "epoch", ":", "warmup", "(", "epoch", ",", "warmup_period", ",", "warmup_factor", ")", "*", "wrapped_lambda", "(", "epoch", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.nms.run": [[4, 35], ["nms.prune_by_min_height", "nms.create_order_by_lower_y", "len", "zip", "pruned_detections.append", "indices_to_suppress.append", "numpy.delete", "nms.create_order_by_score", "len", "range", "overlap_function", "indices_to_suppress.append"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.nms.prune_by_min_height", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.nms.create_order_by_lower_y", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.nms.create_order_by_score"], ["def", "run", "(", "detections", ",", "overlap_thresh", "=", "0.75", ",", "order_mode", "=", "'confidence'", ")", ":", "\n", "# initialize the list of picked detections", "\n", "  ", "pruned_detections", "=", "[", "]", "\n", "\n", "# sort the indexes", "\n", "if", "order_mode", "==", "'lower_y'", ":", "\n", "    ", "idxs", "=", "create_order_by_lower_y", "(", "detections", ")", "\n", "", "elif", "order_mode", "==", "'confidence'", ":", "\n", "    ", "idxs", "=", "create_order_by_score", "(", "detections", ")", "\n", "\n", "", "overlap_function", "=", "get_2d_one_way_iou", "\n", "\n", "# keep looping while some indexes still remain in the indexes list", "\n", "while", "len", "(", "idxs", ")", ">", "0", ":", "\n", "# grab the last index in the indexes list and add the index value", "\n", "# to the list of picked indexes", "\n", "    ", "last", "=", "len", "(", "idxs", ")", "-", "1", "\n", "ii", "=", "idxs", "[", "last", "]", "\n", "indices_to_suppress", "=", "[", "]", "\n", "for", "index", ",", "index_of_index", "in", "zip", "(", "idxs", "[", ":", "last", "]", ",", "range", "(", "last", ")", ")", ":", "\n", "      ", "detection_proposal", "=", "detections", "[", "index", "]", "\n", "overlap", "=", "overlap_function", "(", "detections", "[", "ii", "]", ",", "detection_proposal", ")", "\n", "if", "overlap", ">", "overlap_thresh", ":", "\n", "        ", "indices_to_suppress", ".", "append", "(", "index_of_index", ")", "\n", "# Add the the pruned_detections.", "\n", "", "", "pruned_detections", ".", "append", "(", "detections", "[", "ii", "]", ")", "\n", "indices_to_suppress", ".", "append", "(", "last", ")", "\n", "idxs", "=", "np", ".", "delete", "(", "idxs", ",", "indices_to_suppress", ")", "\n", "\n", "# return only the bounding boxes that were picked", "\n", "", "return", "prune_by_min_height", "(", "pruned_detections", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.nms.prune_by_min_height": [[37, 44], ["pruned_detections.append"], "function", ["None"], ["", "def", "prune_by_min_height", "(", "detections", ")", ":", "\n", "  ", "pruned_detections", "=", "[", "]", "\n", "for", "detection", "in", "detections", ":", "\n", "    ", "if", "detection", ".", "bbox", "[", "1", "]", "[", "0", "]", "-", "detection", ".", "bbox", "[", "0", "]", "[", "0", "]", "<", "12", ":", "\n", "      ", "continue", "\n", "", "pruned_detections", ".", "append", "(", "detection", ")", "\n", "", "return", "pruned_detections", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.nms.create_order_by_lower_y": [[46, 52], ["numpy.argsort", "np.argsort.append"], "function", ["None"], ["", "def", "create_order_by_lower_y", "(", "detections", ")", ":", "\n", "  ", "idxs", "=", "[", "]", "\n", "for", "detection", "in", "detections", ":", "\n", "    ", "idxs", ".", "append", "(", "detection", ".", "bbox", "[", "1", "]", "[", "1", "]", ")", "\n", "", "idxs", "=", "np", ".", "argsort", "(", "idxs", ")", "\n", "return", "idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.nms.create_order_by_score": [[54, 60], ["numpy.argsort", "np.argsort.append"], "function", ["None"], ["", "def", "create_order_by_score", "(", "detections", ")", ":", "\n", "  ", "idxs", "=", "[", "]", "\n", "for", "detection", "in", "detections", ":", "\n", "    ", "idxs", ".", "append", "(", "detection", ".", "score", ")", "\n", "", "idxs", "=", "np", ".", "argsort", "(", "idxs", ")", "\n", "return", "idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.nms.get_2d_one_way_iou": [[62, 88], ["numpy.array", "numpy.array", "max", "max", "min", "min", "max", "max", "float", "float"], "function", ["None"], ["", "def", "get_2d_one_way_iou", "(", "detection_one", ",", "detection_two", ")", ":", "\n", "  ", "box_one", "=", "np", ".", "array", "(", "[", "\n", "detection_one", ".", "bbox", "[", "0", "]", "[", "0", "]", ",", "detection_one", ".", "bbox", "[", "0", "]", "[", "1", "]", ",", "detection_one", ".", "bbox", "[", "1", "]", "[", "0", "]", ",", "\n", "detection_one", ".", "bbox", "[", "1", "]", "[", "1", "]", "\n", "]", ")", "\n", "box_two", "=", "np", ".", "array", "(", "[", "\n", "detection_two", ".", "bbox", "[", "0", "]", "[", "0", "]", ",", "detection_two", ".", "bbox", "[", "0", "]", "[", "1", "]", ",", "detection_two", ".", "bbox", "[", "1", "]", "[", "0", "]", ",", "\n", "detection_two", ".", "bbox", "[", "1", "]", "[", "1", "]", "\n", "]", ")", "\n", "# determine the (x, y)-coordinates of the intersection rectangle", "\n", "xA", "=", "max", "(", "box_one", "[", "0", "]", ",", "box_two", "[", "0", "]", ")", "\n", "yA", "=", "max", "(", "box_one", "[", "1", "]", ",", "box_two", "[", "1", "]", ")", "\n", "xB", "=", "min", "(", "box_one", "[", "2", "]", ",", "box_two", "[", "2", "]", ")", "\n", "yB", "=", "min", "(", "box_one", "[", "3", "]", ",", "box_two", "[", "3", "]", ")", "\n", "# compute the area of intersection rectangle", "\n", "inter_area", "=", "max", "(", "0", ",", "xB", "-", "xA", "+", "1", ")", "*", "max", "(", "0", ",", "yB", "-", "yA", "+", "1", ")", "\n", "# compute the area of both the prediction and ground-truth", "\n", "# rectangles", "\n", "box_one_area", "=", "(", "box_one", "[", "2", "]", "-", "box_one", "[", "0", "]", "+", "1", ")", "*", "(", "box_one", "[", "3", "]", "-", "box_one", "[", "1", "]", "+", "1", ")", "\n", "box_two_area", "=", "(", "box_two", "[", "2", "]", "-", "box_two", "[", "0", "]", "+", "1", ")", "*", "(", "box_two", "[", "3", "]", "-", "box_two", "[", "1", "]", "+", "1", ")", "\n", "# compute the intersection over union by taking the intersection", "\n", "# area and dividing it by the sum of prediction + ground-truth", "\n", "# areas - the interesection area", "\n", "if", "float", "(", "box_one_area", ")", "==", "0.0", ":", "\n", "    ", "return", "0", "\n", "", "return", "inter_area", "/", "float", "(", "box_one_area", "+", "box_two_area", "-", "inter_area", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.get_2d_bbox_of_9D_box": [[23, 34], ["simnet.lib.camera.convert_points_to_homopoints", "simnet.lib.camera.convert_homopixels_to_pixels", "numpy.array", "numpy.array", "numpy.min", "numpy.min", "numpy.max", "numpy.max"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_points_to_homopoints", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_homopixels_to_pixels"], ["def", "get_2d_bbox_of_9D_box", "(", "camera_T_object", ",", "scale_matrix", ",", "camera_model", ")", ":", "\n", "  ", "unit_box_homopoints", "=", "camera", ".", "convert_points_to_homopoints", "(", "_WORLD_T_POINTS", ".", "T", ")", "\n", "morphed_homopoints", "=", "camera_T_object", "@", "(", "scale_matrix", "@", "unit_box_homopoints", ")", "\n", "morphed_pixels", "=", "camera", ".", "convert_homopixels_to_pixels", "(", "camera_model", ".", "K_matrix", "@", "morphed_homopoints", ")", ".", "T", "\n", "bbox", "=", "[", "\n", "np", ".", "array", "(", "[", "np", ".", "min", "(", "morphed_pixels", "[", ":", ",", "0", "]", ")", ",", "\n", "np", ".", "min", "(", "morphed_pixels", "[", ":", ",", "1", "]", ")", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "np", ".", "max", "(", "morphed_pixels", "[", ":", ",", "0", "]", ")", ",", "\n", "np", ".", "max", "(", "morphed_pixels", "[", ":", ",", "1", "]", ")", "]", ")", "\n", "]", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.project_pose_onto_image": [[36, 42], ["simnet.lib.camera.convert_points_to_homopoints", "simnet.lib.camera.convert_homopixels_to_pixels", "camera_model.project"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_points_to_homopoints", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_homopixels_to_pixels", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera.project"], ["", "def", "project_pose_onto_image", "(", "pose", ",", "camera_model", ")", ":", "\n", "  ", "unit_box_homopoints", "=", "camera", ".", "convert_points_to_homopoints", "(", "_WORLD_T_POINTS", ".", "T", ")", "\n", "morphed_homopoints", "=", "pose", ".", "camera_T_object", "@", "(", "pose", ".", "scale_matrix", "@", "unit_box_homopoints", ")", "\n", "morphed_pixels", "=", "camera", ".", "convert_homopixels_to_pixels", "(", "camera_model", ".", "project", "(", "morphed_homopoints", ")", ")", ".", "T", "\n", "morphed_pixels", "=", "morphed_pixels", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "morphed_pixels", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.get_2d_bbox_of_projection": [[44, 50], ["numpy.array", "numpy.array", "numpy.min", "numpy.min", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "get_2d_bbox_of_projection", "(", "bbox_ext", ")", ":", "\n", "  ", "bbox", "=", "[", "\n", "np", ".", "array", "(", "[", "np", ".", "min", "(", "bbox_ext", "[", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "bbox_ext", "[", ":", ",", "1", "]", ")", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "np", ".", "max", "(", "bbox_ext", "[", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "bbox_ext", "[", ":", ",", "1", "]", ")", "]", ")", "\n", "]", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.define_control_points": [[52, 54], ["numpy.array"], "function", ["None"], ["", "def", "define_control_points", "(", ")", ":", "\n", "  ", "return", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.compute_alphas": [[56, 62], ["numpy.concatenate", "numpy.concatenate", "numpy.matmul", "numpy.linalg.inv", "numpy.array", "numpy.array", "numpy.ones", "numpy.ones"], "function", ["None"], ["", "def", "compute_alphas", "(", "Xw", ",", "Cw", ")", ":", "\n", "  ", "X", "=", "np", ".", "concatenate", "(", "(", "Xw", ",", "np", ".", "array", "(", "[", "np", ".", "ones", "(", "(", "8", ")", ")", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "C", "=", "Cw", ".", "T", "\n", "C", "=", "np", ".", "concatenate", "(", "(", "C", ",", "np", ".", "array", "(", "[", "np", ".", "ones", "(", "(", "4", ")", ")", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "Alpha", "=", "np", ".", "matmul", "(", "np", ".", "linalg", ".", "inv", "(", "C", ")", ",", "X", ")", "\n", "return", "Alpha", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.construct_M_matrix": [[64, 80], ["numpy.zeros", "range", "range"], "function", ["None"], ["", "def", "construct_M_matrix", "(", "bbox_pixels", ",", "alphas", ",", "K_matrix", ")", ":", "\n", "  ", "M", "=", "np", ".", "zeros", "(", "[", "16", ",", "12", "]", ")", "\n", "f_x", "=", "K_matrix", "[", "0", ",", "0", "]", "\n", "f_y", "=", "K_matrix", "[", "1", ",", "1", "]", "\n", "c_x", "=", "K_matrix", "[", "0", ",", "2", "]", "\n", "c_y", "=", "K_matrix", "[", "1", ",", "2", "]", "\n", "for", "ii", "in", "range", "(", "8", ")", ":", "\n", "    ", "u", "=", "bbox_pixels", "[", "0", ",", "ii", "]", "\n", "v", "=", "bbox_pixels", "[", "1", ",", "ii", "]", "\n", "for", "jj", "in", "range", "(", "4", ")", ":", "\n", "      ", "alpha", "=", "alphas", "[", "ii", ",", "jj", "]", "\n", "M", "[", "ii", "*", "2", ",", "jj", "*", "3", "]", "=", "f_x", "*", "alpha", "\n", "M", "[", "ii", "*", "2", ",", "jj", "*", "3", "+", "2", "]", "=", "(", "c_x", "-", "u", ")", "*", "alpha", "\n", "M", "[", "ii", "*", "2", "+", "1", ",", "jj", "*", "3", "+", "1", "]", "=", "f_y", "*", "alpha", "\n", "M", "[", "ii", "*", "2", "+", "1", ",", "jj", "*", "3", "+", "2", "]", "=", "(", "c_y", "-", "v", ")", "*", "alpha", "\n", "", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.convert_control_to_box_vertices": [[82, 90], ["numpy.zeros", "range", "range"], "function", ["None"], ["", "def", "convert_control_to_box_vertices", "(", "control_points", ",", "alphas", ")", ":", "\n", "  ", "bbox_vertices", "=", "np", ".", "zeros", "(", "[", "8", ",", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "      ", "alpha", "=", "alphas", "[", "i", ",", "j", "]", "\n", "bbox_vertices", "[", "i", "]", "=", "bbox_vertices", "[", "i", "]", "+", "alpha", "*", "control_points", "[", "j", "]", "\n", "\n", "", "", "return", "bbox_vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.solve_for_control_points": [[92, 97], ["numpy.linalg.eig", "control_points.reshape.reshape", "numpy.argmin"], "function", ["None"], ["", "def", "solve_for_control_points", "(", "M", ")", ":", "\n", "  ", "e_vals", ",", "e_vecs", "=", "np", ".", "linalg", ".", "eig", "(", "M", ".", "T", "@", "M", ")", "\n", "control_points", "=", "e_vecs", "[", ":", ",", "np", ".", "argmin", "(", "e_vals", ")", "]", "\n", "control_points", "=", "control_points", ".", "reshape", "(", "[", "4", ",", "3", "]", ")", "\n", "return", "control_points", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.compute_homopoints_from_control_points": [[99, 104], ["epnp.convert_control_to_box_vertices", "simnet.lib.camera.convert_points_to_homopoints", "simnet.lib.camera.convert_points_to_homopoints"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.convert_control_to_box_vertices", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_points_to_homopoints", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_points_to_homopoints"], ["", "def", "compute_homopoints_from_control_points", "(", "camera_control_points", ",", "alphas", ",", "K_matrix", ")", ":", "\n", "  ", "camera_points", "=", "convert_control_to_box_vertices", "(", "camera_control_points", ",", "alphas", ")", "\n", "camera_homopoints", "=", "camera", ".", "convert_points_to_homopoints", "(", "camera_points", ".", "T", ")", "\n", "return", "camera_homopoints", "\n", "unit_box_homopoints", "=", "camera", ".", "convert_points_to_homopoints", "(", "_WORLD_T_POINTS", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.optimize_for_9D": [[106, 141], ["epnp.define_control_points", "epnp.compute_alphas", "epnp.construct_M_matrix", "epnp.solve_for_control_points", "epnp.convert_control_to_box_vertices", "simnet.lib.camera.convert_points_to_homopoints", "numpy.copy", "simnet.lib.camera.convert_points_to_homopoints", "epnp.estimateSimilarityUmeyama", "epnp.compute_homopoints_from_control_points", "epnp.estimateSimilarityUmeyama", "epnp.points_to_camera", "numpy.linalg.norm", "simnet.lib.camera.convert_homopixels_to_pixels"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.define_control_points", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.compute_alphas", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.construct_M_matrix", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.solve_for_control_points", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.convert_control_to_box_vertices", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_points_to_homopoints", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_points_to_homopoints", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.estimateSimilarityUmeyama", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.compute_homopoints_from_control_points", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.estimateSimilarityUmeyama", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.points_to_camera", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_homopixels_to_pixels"], ["", "def", "optimize_for_9D", "(", "bbox_pixels", ",", "camera_model", ",", "solve_for_transforms", "=", "False", ")", ":", "\n", "  ", "K_matrix", "=", "camera_model", ".", "K_matrix", "\n", "Cw", "=", "define_control_points", "(", ")", "\n", "Xw", "=", "_WORLD_T_POINTS", "\n", "alphas", "=", "compute_alphas", "(", "Xw", ".", "T", ",", "Cw", ")", "\n", "M", "=", "construct_M_matrix", "(", "bbox_pixels", ",", "alphas", ",", "np", ".", "copy", "(", "K_matrix", ")", ")", "\n", "camera_control_points", "=", "solve_for_control_points", "(", "M", ")", "\n", "camera_points", "=", "convert_control_to_box_vertices", "(", "camera_control_points", ",", "alphas", ")", "\n", "camera_homopoints", "=", "camera", ".", "convert_points_to_homopoints", "(", "camera_points", ".", "T", ")", "\n", "if", "solve_for_transforms", ":", "\n", "    ", "unit_box_homopoints", "=", "camera", ".", "convert_points_to_homopoints", "(", "_WORLD_T_POINTS", ".", "T", ")", "\n", "# Test both the negative and positive solutions of the control points and pick the best one. Taken from the Google MediaPipe Code base.", "\n", "error_one", ",", "camera_T_object_one", ",", "scale_matrix_one", "=", "estimateSimilarityUmeyama", "(", "\n", "unit_box_homopoints", ",", "camera_homopoints", "\n", ")", "\n", "camera_homopoints", "=", "compute_homopoints_from_control_points", "(", "\n", "-", "1", "*", "camera_control_points", ",", "alphas", ",", "K_matrix", "\n", ")", "\n", "error_two", ",", "camera_T_object_two", ",", "scale_matrix_two", "=", "estimateSimilarityUmeyama", "(", "\n", "unit_box_homopoints", ",", "camera_homopoints", "\n", ")", "\n", "if", "error_one", "<", "error_two", ":", "\n", "      ", "camera_T_object", "=", "camera_T_object_one", "\n", "scale_matrix", "=", "scale_matrix_one", "\n", "", "else", ":", "\n", "      ", "camera_T_object", "=", "camera_T_object_two", "\n", "scale_matrix", "=", "scale_matrix_two", "\n", "\n", "# Compute Fit to original pixles:", "\n", "", "morphed_points", "=", "camera_T_object", "@", "(", "scale_matrix", "@", "unit_box_homopoints", ")", "\n", "morphed_pixels", "=", "points_to_camera", "(", "morphed_points", ",", "K_matrix", ")", "\n", "confidence", "=", "np", ".", "linalg", ".", "norm", "(", "bbox_pixels", "-", "morphed_pixels", ")", "\n", "return", "confidence", ",", "camera_T_object", ",", "scale_matrix", "\n", "", "camera_homopixels", "=", "K_matrix", "@", "camera_homopoints", "\n", "return", "camera", ".", "convert_homopixels_to_pixels", "(", "camera_homopixels", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.estimateSimilarityUmeyama": [[143, 186], ["numpy.mean", "numpy.mean", "numpy.isnan().any", "numpy.linalg.svd", "numpy.matmul", "numpy.std", "numpy.std", "numpy.diag", "numpy.identity", "numpy.eye", "numpy.linalg.norm", "numpy.tile().transpose", "numpy.tile().transpose", "numpy.matmul", "print", "print", "print", "RuntimeError", "TargetHom[].mean", "source_hom[].mean().dot", "numpy.transpose", "numpy.isnan", "numpy.linalg.det", "numpy.linalg.det", "numpy.linalg.inv", "numpy.tile", "numpy.tile", "source_hom[].mean"], "function", ["None"], ["", "def", "estimateSimilarityUmeyama", "(", "source_hom", ",", "TargetHom", ")", ":", "\n", "# Copy of original paper is at: http://web.stanford.edu/class/cs273/refs/umeyama.pdf", "\n", "  ", "assert", "source_hom", ".", "shape", "[", "0", "]", "==", "4", "\n", "assert", "TargetHom", ".", "shape", "[", "0", "]", "==", "4", "\n", "SourceCentroid", "=", "np", ".", "mean", "(", "source_hom", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "TargetCentroid", "=", "np", ".", "mean", "(", "TargetHom", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "nPoints", "=", "source_hom", ".", "shape", "[", "1", "]", "\n", "\n", "CenteredSource", "=", "source_hom", "[", ":", "3", ",", ":", "]", "-", "np", ".", "tile", "(", "SourceCentroid", ",", "(", "nPoints", ",", "1", ")", ")", ".", "transpose", "(", ")", "\n", "CenteredTarget", "=", "TargetHom", "[", ":", "3", ",", ":", "]", "-", "np", ".", "tile", "(", "TargetCentroid", ",", "(", "nPoints", ",", "1", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "CovMatrix", "=", "np", ".", "matmul", "(", "CenteredTarget", ",", "np", ".", "transpose", "(", "CenteredSource", ")", ")", "/", "nPoints", "\n", "\n", "if", "np", ".", "isnan", "(", "CovMatrix", ")", ".", "any", "(", ")", ":", "\n", "    ", "print", "(", "'nPoints:'", ",", "nPoints", ")", "\n", "print", "(", "'source_hom'", ",", "source_hom", ".", "shape", ")", "\n", "print", "(", "'TargetHom'", ",", "TargetHom", ".", "shape", ")", "\n", "raise", "RuntimeError", "(", "'There are NANs in the input.'", ")", "\n", "\n", "", "U", ",", "D", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "CovMatrix", ",", "full_matrices", "=", "True", ")", "\n", "d", "=", "(", "np", ".", "linalg", ".", "det", "(", "U", ")", "*", "np", ".", "linalg", ".", "det", "(", "Vh", ")", ")", "<", "0.0", "\n", "if", "d", ":", "\n", "    ", "D", "[", "-", "1", "]", "=", "-", "D", "[", "-", "1", "]", "\n", "U", "[", ":", ",", "-", "1", "]", "=", "-", "U", "[", ":", ",", "-", "1", "]", "\n", "\n", "", "Rotation", "=", "np", ".", "matmul", "(", "U", ",", "Vh", ")", "\n", "var_source", "=", "np", ".", "std", "(", "CenteredSource", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "var_target_aligned", "=", "np", ".", "std", "(", "np", ".", "linalg", ".", "inv", "(", "Rotation", ")", "@", "CenteredTarget", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "ScaleMatrix", "=", "np", ".", "diag", "(", "var_target_aligned", "/", "var_source", ")", "\n", "\n", "Translation", "=", "TargetHom", "[", ":", "3", ",", ":", "]", ".", "mean", "(", "axis", "=", "1", ")", "-", "source_hom", "[", ":", "3", ",", ":", "]", ".", "mean", "(", "axis", "=", "1", ")", ".", "dot", "(", "\n", "ScaleMatrix", "@", "Rotation", ".", "T", "\n", ")", "\n", "\n", "source_T_target", "=", "np", ".", "identity", "(", "4", ")", "\n", "source_T_target", "[", ":", "3", ",", ":", "3", "]", "=", "Rotation", "\n", "source_T_target", "[", ":", "3", ",", "3", "]", "=", "Translation", "\n", "scale_matrix", "=", "np", ".", "eye", "(", "4", ")", "\n", "scale_matrix", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "ScaleMatrix", "\n", "# Measure error fit", "\n", "morphed_points", "=", "source_T_target", "@", "(", "scale_matrix", "@", "source_hom", ")", "\n", "error", "=", "np", ".", "linalg", ".", "norm", "(", "morphed_points", "-", "TargetHom", ")", "\n", "return", "error", ",", "source_T_target", ",", "scale_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.points_to_camera": [[188, 191], ["simnet.lib.camera.convert_homopixels_to_pixels"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_homopixels_to_pixels"], ["", "def", "points_to_camera", "(", "world_T_homopoints", ",", "K_matrix", ")", ":", "\n", "  ", "homopixels", "=", "K_matrix", "@", "world_T_homopoints", "\n", "return", "camera", ".", "convert_homopixels_to_pixels", "(", "homopixels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.find_absolute_scale": [[193, 201], ["numpy.copy", "numpy.eye"], "function", ["None"], ["", "def", "find_absolute_scale", "(", "new_z", ",", "camera_T_object", ",", "object_scale", ",", "debug", "=", "True", ")", ":", "\n", "  ", "old_z", "=", "camera_T_object", "[", "2", ",", "3", "]", "\n", "abs_camera_T_object", "=", "np", ".", "copy", "(", "camera_T_object", ")", "\n", "abs_camera_T_object", "[", "0", ":", "3", ",", "3", "]", "=", "(", "new_z", "/", "old_z", ")", "*", "abs_camera_T_object", "[", "0", ":", "3", ",", "3", "]", "\n", "abs_object_scale", "=", "np", ".", "eye", "(", "4", ")", "\n", "abs_object_scale", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "(", "new_z", "/", "old_z", ")", "*", "object_scale", "[", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "\n", "return", "abs_camera_T_object", ",", "abs_object_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.test_pose_solver": [[203, 260], ["numpy.copy", "simnet.lib.camera.convert_points_to_homopoints", "numpy.eye", "euler_to_rotation_matrix", "numpy.eye", "numpy.array", "numpy.array", "simnet.lib.camera.convert_homopixels_to_pixels", "numpy.array", "epnp.optimize_for_9D", "numpy.eye", "print", "numpy.eye", "numpy.copy", "epnp.find_absolute_scale", "print", "print", "print", "print", "print", "print", "print", "epnp.optimize_for_9D", "print", "print", "print", "print", "numpy.linalg.inv", "simnet.lib.camera.FMKCamera().project", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "simnet.lib.camera.FMKCamera", "simnet.lib.camera.FMKCamera", "simnet.lib.camera.convert_homopixels_to_pixels"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_points_to_homopoints", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_homopixels_to_pixels", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.optimize_for_9D", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.find_absolute_scale", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.optimize_for_9D", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.FMKCamera.project", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_homopixels_to_pixels"], ["", "def", "test_pose_solver", "(", ")", ":", "\n", "  ", "world_t_points", "=", "np", ".", "copy", "(", "_WORLD_T_POINTS", ")", "\n", "world_t_points", "=", "camera", ".", "convert_points_to_homopoints", "(", "world_t_points", ".", "T", ")", "\n", "R_t", "=", "np", ".", "eye", "(", "4", ")", "\n", "R_t", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "euler_to_rotation_matrix", "(", "[", "1.7", ",", "3.8", ",", "5.2", "]", ")", "\n", "R_t", "[", "2", ",", "3", "]", "=", "-", "0.01", "\n", "R_t", "[", "1", ",", "3", "]", "=", "-", "0.00001", "\n", "S", "=", "np", ".", "eye", "(", "4", ")", "\n", "S", "[", "0", ",", "0", "]", "=", "0.5", "\n", "S", "[", "1", ",", "1", "]", "=", "0.05", "\n", "S", "[", "2", ",", "2", "]", "=", "0.5", "\n", "target_t_points", "=", "R_t", "@", "(", "S", "@", "world_t_points", ")", "\n", "target_t_points", "=", "np", ".", "array", "(", "[", "[", "\n", "0.61674494", ",", "0.61674494", ",", "0.61674494", ",", "0.61674494", ",", "1.93547767", ",", "1.93547767", ",", "1.93547767", ",", "1.93547767", "\n", "]", ",", "[", "\n", "0.40753347", ",", "0.40753347", ",", "0.42753347", ",", "0.42753347", ",", "0.40753347", ",", "0.40753347", ",", "0.42753347", ",", "0.42753347", "\n", "]", ",", "[", "\n", "2.56231278", ",", "3.84837313", ",", "2.56231278", ",", "3.84837313", ",", "2.56231278", ",", "3.84837313", ",", "2.56231278", ",", "3.84837313", "\n", "]", ",", "[", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", ",", "1.", "]", "]", ")", "\n", "world_T_camera", "=", "np", ".", "array", "(", "[", "[", "0.99376416", ",", "-", "0.05495078", ",", "0.0970217", ",", "1.43237753", "]", ",", "\n", "[", "0.00736171", ",", "0.90056662", ",", "0.43465568", ",", "0.72350959", "]", ",", "\n", "[", "-", "0.11125918", ",", "-", "0.43123099", ",", "0.89535536", ",", "3.94788388", "]", ",", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", "]", ")", "\n", "target_t_points", "=", "np", ".", "linalg", ".", "inv", "(", "world_T_camera", ")", "@", "target_t_points", "\n", "pixels_target", "=", "camera", ".", "convert_homopixels_to_pixels", "(", "camera", ".", "FMKCamera", "(", ")", ".", "project", "(", "target_t_points", ")", ")", "\n", "pixels_target_gt", "=", "np", ".", "array", "(", "[", "[", "198.60924037", ",", "181.08880028", "]", ",", "[", "-", "384.55689665", ",", "452.51438988", "]", ",", "\n", "[", "197.90794419", ",", "176.84519486", "]", ",", "[", "-", "405.05431808", ",", "439.75925094", "]", ",", "\n", "[", "451.6781963", ",", "190.51153042", "]", ",", "[", "1088.99607868", ",", "718.53052576", "]", ",", "\n", "[", "452.57505678", ",", "185.91876331", "]", ",", "[", "1128.80169693", ",", "709.80385466", "]", "]", ")", "\n", "#target_t_points = camera.FMKCamera().RT_matrix @ target_t_points", "\n", "#pixels_target = points_to_camera(target_t_points)", "\n", "#print(\"Custom projection \",np.round(pixels_target,3))", "\n", "_", ",", "camera_T_object", ",", "scale_matrix", "=", "optimize_for_9D", "(", "pixels_target", ",", "solve_for_transforms", "=", "True", ")", "\n", "\n", "camera_T_object", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "eye", "(", "3", ")", "\n", "#camera_T_object[0:2,3] = 0.0", "\n", "#camera_T_object[0,3] = 0.1", "\n", "print", "(", "camera_T_object", ")", "\n", "scale_matrix", "=", "np", ".", "eye", "(", "4", ")", "\n", "abs_camera_T_object", "=", "np", ".", "copy", "(", "camera_T_object", ")", "\n", "abs_camera_T_object", "[", "2", ",", "3", "]", "=", "1.0", "\n", "find_absolute_scale", "(", "1.0", ",", "camera_T_object", ",", "scale_matrix", ")", "\n", "assert", "False", "\n", "#camera_T_object,scale_matrix = estimateSimilarityUmeyama(world_t_points,target_t_points)", "\n", "print", "(", "\"Found matrices\"", ")", "\n", "print", "(", "np", ".", "round", "(", "camera_T_object", ",", "3", ")", ")", "\n", "print", "(", "np", ".", "round", "(", "scale_matrix", ",", "3", ")", ")", "\n", "print", "(", "\"Gt matrices\"", ")", "\n", "print", "(", "np", ".", "round", "(", "S", ",", "3", ")", ")", "\n", "print", "(", "np", ".", "round", "(", "R_t", ",", "3", ")", ")", "\n", "print", "(", "\"Pixel Projections\"", ")", "\n", "pixels_found", "=", "optimize_for_9D", "(", "pixels_target", ")", "\n", "print", "(", "np", ".", "round", "(", "pixels_target", ".", "T", ",", "3", ")", ")", "\n", "print", "(", "np", ".", "round", "(", "pixels_found", ",", "3", ")", ")", "\n", "print", "(", "\"Checking transform projections\"", ")", "\n", "target_t_points", "=", "camera_T_object", "@", "(", "scale_matrix", "@", "world_t_points", ")", "\n", "camera_homopixels", "=", "camera", ".", "FMKCamera", "(", ")", ".", "K_matrix", "@", "target_t_points", "\n", "print", "(", "np", ".", "round", "(", "camera", ".", "convert_homopixels_to_pixels", "(", "camera_homopixels", ")", ".", "T", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.PoseOutput.__init__": [[22, 28], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "heatmap", ",", "vertex_field", ",", "z_centroid_field", ",", "hparams", ")", ":", "\n", "    ", "self", ".", "heatmap", "=", "heatmap", "\n", "self", ".", "vertex_field", "=", "vertex_field", "\n", "self", ".", "z_centroid_field", "=", "z_centroid_field", "\n", "self", ".", "is_numpy", "=", "False", "\n", "self", ".", "hparams", "=", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.PoseOutput.convert_to_numpy_from_torch": [[30, 38], ["numpy.ascontiguousarray", "numpy.ascontiguousarray", "pose_outputs.PoseOutput.vertex_field.transpose", "numpy.ascontiguousarray", "pose_outputs.PoseOutput.heatmap.cpu().numpy", "pose_outputs.PoseOutput.vertex_field.cpu().numpy", "pose_outputs.PoseOutput.z_centroid_field.cpu().numpy", "pose_outputs.PoseOutput.heatmap.cpu", "pose_outputs.PoseOutput.vertex_field.cpu", "pose_outputs.PoseOutput.z_centroid_field.cpu"], "methods", ["None"], ["", "def", "convert_to_numpy_from_torch", "(", "self", ")", ":", "\n", "    ", "self", ".", "heatmap", "=", "np", ".", "ascontiguousarray", "(", "self", ".", "heatmap", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "vertex_field", "=", "np", ".", "ascontiguousarray", "(", "self", ".", "vertex_field", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "vertex_field", "=", "self", ".", "vertex_field", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "self", ".", "vertex_field", "=", "self", ".", "vertex_field", "/", "100.0", "\n", "self", ".", "z_centroid_field", "=", "np", ".", "ascontiguousarray", "(", "self", ".", "z_centroid_field", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "z_centroid_field", "=", "self", ".", "z_centroid_field", "/", "100.0", "+", "1.0", "\n", "self", ".", "is_numpy", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.PoseOutput.convert_to_torch_from_numpy": [[39, 48], ["pose_outputs.PoseOutput.vertex_field.transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray"], "methods", ["None"], ["", "def", "convert_to_torch_from_numpy", "(", "self", ")", ":", "\n", "    ", "self", ".", "vertex_field", "=", "self", ".", "vertex_field", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "vertex_field", "=", "100.0", "*", "self", ".", "vertex_field", "\n", "self", ".", "vertex_field", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "self", ".", "vertex_field", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "heatmap", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "self", ".", "heatmap", ")", ")", ".", "float", "(", ")", "\n", "# Normalize z_centroid by 1.", "\n", "self", ".", "z_centroid_field", "=", "100.0", "*", "(", "self", ".", "z_centroid_field", "-", "1.0", ")", "\n", "self", ".", "z_centroid_field", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "self", ".", "z_centroid_field", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "is_numpy", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.PoseOutput.get_detections": [[49, 72], ["pose_outputs.compute_9D_poses", "zip", "simnet.lib.net.post_processing.nms.run", "pose_outputs.PoseOutput.convert_to_numpy_from_torch", "numpy.copy", "numpy.copy", "numpy.copy", "simnet.lib.net.post_processing.epnp.get_2d_bbox_of_9D_box", "simnet.lib.net.post_processing.nms.run.append", "simnet.lib.net.post_processing.eval3d.Detection"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.compute_9D_poses", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.nms.run", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.convert_to_numpy_from_torch", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.get_2d_bbox_of_9D_box"], ["", "def", "get_detections", "(", "self", ")", ":", "\n", "    ", "if", "not", "self", ".", "is_numpy", ":", "\n", "      ", "self", ".", "convert_to_numpy_from_torch", "(", ")", "\n", "\n", "", "poses", ",", "scores", "=", "compute_9D_poses", "(", "\n", "np", ".", "copy", "(", "self", ".", "heatmap", "[", "0", "]", ")", ",", "np", ".", "copy", "(", "self", ".", "vertex_field", "[", "0", "]", ")", ",", "np", ".", "copy", "(", "self", ".", "z_centroid_field", "[", "0", "]", ")", "\n", ")", "\n", "\n", "detections", "=", "[", "]", "\n", "for", "pose", ",", "score", "in", "zip", "(", "poses", ",", "scores", ")", ":", "\n", "      ", "bbox", "=", "epnp", ".", "get_2d_bbox_of_9D_box", "(", "pose", ".", "camera_T_object", ",", "pose", ".", "scale_matrix", ")", "\n", "detections", ".", "append", "(", "\n", "eval3d", ".", "Detection", "(", "\n", "camera_T_object", "=", "pose", ".", "camera_T_object", ",", "\n", "bbox", "=", "bbox", ",", "\n", "score", "=", "score", ",", "\n", "scale_matrix", "=", "pose", ".", "scale_matrix", "\n", ")", "\n", ")", "\n", "\n", "", "detections", "=", "nms", ".", "run", "(", "detections", ")", "\n", "\n", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.PoseOutput.get_visualization_img": [[73, 82], ["pose_outputs.draw_pose_from_outputs", "pose_outputs.PoseOutput.convert_to_numpy_from_torch"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.draw_pose_from_outputs", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.convert_to_numpy_from_torch"], ["", "def", "get_visualization_img", "(", "self", ",", "left_img", ")", ":", "\n", "    ", "if", "not", "self", ".", "is_numpy", ":", "\n", "      ", "self", ".", "convert_to_numpy_from_torch", "(", ")", "\n", "", "return", "draw_pose_from_outputs", "(", "\n", "self", ".", "heatmap", "[", "0", "]", ",", "\n", "self", ".", "vertex_field", "[", "0", "]", ",", "\n", "self", ".", "z_centroid_field", "[", "0", "]", ",", "\n", "left_img", ",", "\n", "max_detections", "=", "100", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.PoseOutput.compute_loss": [[84, 105], ["torch.stack", "torch.stack", "torch.stack", "heatmap_target.to.to.to", "vertex_target.to.to.to", "z_centroid_field_target.to.to.to", "_mask_l1_loss", "_mask_l1_loss", "_mse_loss", "ValueError", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "pose_targets", ",", "log", ")", ":", "\n", "    ", "if", "self", ".", "is_numpy", ":", "\n", "      ", "raise", "ValueError", "(", "\"Output is not in torch mode\"", ")", "\n", "", "vertex_target", "=", "torch", ".", "stack", "(", "[", "pose_target", ".", "vertex_field", "for", "pose_target", "in", "pose_targets", "]", ")", "\n", "z_centroid_field_target", "=", "torch", ".", "stack", "(", "[", "\n", "pose_target", ".", "z_centroid_field", "for", "pose_target", "in", "pose_targets", "\n", "]", ")", "\n", "heatmap_target", "=", "torch", ".", "stack", "(", "[", "pose_target", ".", "heatmap", "for", "pose_target", "in", "pose_targets", "]", ")", "\n", "# Move to GPU", "\n", "heatmap_target", "=", "heatmap_target", ".", "to", "(", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "vertex_target", "=", "vertex_target", ".", "to", "(", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "z_centroid_field_target", "=", "z_centroid_field_target", ".", "to", "(", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "\n", "vertex_loss", "=", "_mask_l1_loss", "(", "vertex_target", ",", "self", ".", "vertex_field", ",", "heatmap_target", ")", "\n", "log", "[", "'vertex_loss'", "]", "=", "vertex_loss", "\n", "z_centroid_loss", "=", "_mask_l1_loss", "(", "z_centroid_field_target", ",", "self", ".", "z_centroid_field", ",", "heatmap_target", ")", "\n", "log", "[", "'z_centroid'", "]", "=", "z_centroid_loss", "\n", "\n", "heatmap_loss", "=", "_mse_loss", "(", "heatmap_target", ",", "self", ".", "heatmap", ")", "\n", "log", "[", "'heatmap'", "]", "=", "heatmap_loss", "\n", "return", "self", ".", "hparams", ".", "loss_vertex_mult", "*", "vertex_loss", "+", "self", ".", "hparams", ".", "loss_heatmap_mult", "*", "heatmap_loss", "+", "self", ".", "hparams", ".", "loss_z_centroid_mult", "*", "z_centroid_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.extract_peaks_from_centroid": [[107, 121], ["skimage.feature.peak_local_max", "skimage.feature.peak_local_max"], "function", ["None"], ["", "", "def", "extract_peaks_from_centroid", "(", "\n", "centroid_heatmap", ",", "min_distance", "=", "5", ",", "min_confidence", "=", "0.3", ",", "max_peaks", "=", "np", ".", "inf", "\n", ")", ":", "\n", "  ", "peaks", "=", "peak_local_max", "(", "\n", "centroid_heatmap", ",", "\n", "min_distance", "=", "min_distance", ",", "\n", "threshold_abs", "=", "min_confidence", ",", "\n", "num_peaks", "=", "max_peaks", "\n", ")", "\n", "peaks_old", "=", "peak_local_max", "(", "\n", "centroid_heatmap", ",", "min_distance", "=", "min_distance", ",", "threshold_abs", "=", "min_confidence", "\n", ")", "\n", "\n", "return", "peaks", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.extract_vertices_from_peaks": [[123, 135], ["range", "pose_outputs.get_bbox_from_vertex", "bboxes.append"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.get_bbox_from_vertex"], ["", "def", "extract_vertices_from_peaks", "(", "peaks", ",", "vertex_fields", ",", "c_img", ",", "scale_factor", "=", "8", ")", ":", "\n", "  ", "assert", "peaks", ".", "shape", "[", "1", "]", "==", "2", "\n", "assert", "vertex_fields", ".", "shape", "[", "2", "]", "==", "16", "\n", "height", ",", "width", "=", "c_img", ".", "shape", "[", "0", ":", "2", "]", "\n", "vertex_fields", "=", "vertex_fields", "\n", "vertex_fields", "[", ":", ",", ":", ",", ":", ":", "2", "]", "=", "(", "1.0", "-", "vertex_fields", "[", ":", ",", ":", ",", ":", ":", "2", "]", ")", "*", "(", "2", "*", "height", ")", "-", "height", "\n", "vertex_fields", "[", ":", ",", ":", ",", "1", ":", ":", "2", "]", "=", "(", "1.0", "-", "vertex_fields", "[", ":", ",", ":", ",", "1", ":", ":", "2", "]", ")", "*", "(", "2", "*", "width", ")", "-", "width", "\n", "bboxes", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "peaks", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "bbox", "=", "get_bbox_from_vertex", "(", "vertex_fields", ",", "peaks", "[", "ii", ",", ":", "]", ",", "scale_factor", "=", "scale_factor", ")", "\n", "bboxes", ".", "append", "(", "bbox", ")", "\n", "", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.extract_z_centroid_from_peaks": [[137, 147], ["range", "numpy.zeros", "int", "int", "index.astype.astype", "z_centroids.append"], "function", ["None"], ["", "def", "extract_z_centroid_from_peaks", "(", "peaks", ",", "z_centroid_output", ",", "scale_factor", "=", "8", ")", ":", "\n", "  ", "assert", "peaks", ".", "shape", "[", "1", "]", "==", "2", "\n", "z_centroids", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "peaks", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "index", "=", "np", ".", "zeros", "(", "[", "2", "]", ")", "\n", "index", "[", "0", "]", "=", "int", "(", "peaks", "[", "ii", ",", "0", "]", "/", "scale_factor", ")", "\n", "index", "[", "1", "]", "=", "int", "(", "peaks", "[", "ii", ",", "1", "]", "/", "scale_factor", ")", "\n", "index", "=", "index", ".", "astype", "(", "np", ".", "int", ")", "\n", "z_centroids", ".", "append", "(", "z_centroid_output", "[", "index", "[", "0", "]", ",", "index", "[", "1", "]", "]", ")", "\n", "", "return", "z_centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.extract_cov_matrices_from_peaks": [[149, 163], ["range", "numpy.zeros", "int", "int", "index.astype.astype", "numpy.array", "cov_matrices.append"], "function", ["None"], ["", "def", "extract_cov_matrices_from_peaks", "(", "peaks", ",", "cov_matrices_output", ",", "scale_factor", "=", "8", ")", ":", "\n", "  ", "assert", "peaks", ".", "shape", "[", "1", "]", "==", "2", "\n", "cov_matrices", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "peaks", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "index", "=", "np", ".", "zeros", "(", "[", "2", "]", ")", "\n", "index", "[", "0", "]", "=", "int", "(", "peaks", "[", "ii", ",", "0", "]", "/", "scale_factor", ")", "\n", "index", "[", "1", "]", "=", "int", "(", "peaks", "[", "ii", ",", "1", "]", "/", "scale_factor", ")", "\n", "index", "=", "index", ".", "astype", "(", "np", ".", "int", ")", "\n", "cov_mat_values", "=", "cov_matrices_output", "[", "index", "[", "0", "]", ",", "index", "[", "1", "]", ",", ":", "]", "\n", "cov_matrix", "=", "np", ".", "array", "(", "[", "[", "cov_mat_values", "[", "0", "]", ",", "cov_mat_values", "[", "3", "]", ",", "cov_mat_values", "[", "4", "]", "]", ",", "\n", "[", "cov_mat_values", "[", "3", "]", ",", "cov_mat_values", "[", "1", "]", ",", "cov_mat_values", "[", "5", "]", "]", ",", "\n", "[", "cov_mat_values", "[", "4", "]", ",", "cov_mat_values", "[", "5", "]", ",", "cov_mat_values", "[", "2", "]", "]", "]", ")", "\n", "cov_matrices", ".", "append", "(", "cov_matrix", ")", "\n", "", "return", "cov_matrices", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.get_bbox_from_vertex": [[165, 173], ["int", "int", "bbox.reshape.reshape"], "function", ["None"], ["", "def", "get_bbox_from_vertex", "(", "vertex_fields", ",", "index", ",", "scale_factor", "=", "8", ")", ":", "\n", "  ", "assert", "index", ".", "shape", "[", "0", "]", "==", "2", "\n", "index", "[", "0", "]", "=", "int", "(", "index", "[", "0", "]", "/", "scale_factor", ")", "\n", "index", "[", "1", "]", "=", "int", "(", "index", "[", "1", "]", "/", "scale_factor", ")", "\n", "bbox", "=", "vertex_fields", "[", "index", "[", "0", "]", ",", "index", "[", "1", "]", ",", ":", "]", "\n", "bbox", "=", "bbox", ".", "reshape", "(", "[", "8", ",", "2", "]", ")", "\n", "bbox", "=", "scale_factor", "*", "(", "index", ")", "-", "bbox", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.draw_peaks": [[175, 186], ["numpy.zeros", "range", "cv2.resize", "numpy.clip", "cv2.circle", "int", "int"], "function", ["None"], ["", "def", "draw_peaks", "(", "centroid_target", ",", "peaks", ")", ":", "\n", "  ", "centroid_target", "=", "np", ".", "clip", "(", "centroid_target", ",", "0.0", ",", "1.0", ")", "*", "255.0", "\n", "color", "=", "(", "0", ",", "0", ",", "255", ")", "\n", "height", ",", "width", "=", "centroid_target", ".", "shape", "\n", "# Make a 3 Channel image.", "\n", "c_img", "=", "np", ".", "zeros", "(", "[", "centroid_target", ".", "shape", "[", "0", "]", ",", "centroid_target", ".", "shape", "[", "1", "]", ",", "3", "]", ")", "\n", "c_img", "[", ":", ",", ":", ",", "1", "]", "=", "centroid_target", "\n", "for", "ii", "in", "range", "(", "peaks", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "point", "=", "(", "int", "(", "peaks", "[", "ii", ",", "1", "]", ")", ",", "int", "(", "peaks", "[", "ii", ",", "0", "]", ")", ")", "\n", "c_img", "=", "cv2", ".", "circle", "(", "c_img", ",", "point", ",", "8", ",", "color", ",", "-", "1", ")", "\n", "", "return", "cv2", ".", "resize", "(", "c_img", ",", "(", "width", ",", "height", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.draw_pose_from_outputs": [[188, 198], ["pose_outputs.compute_9D_poses", "pose_outputs.draw_9dof_cv2_boxes", "numpy.copy", "numpy.copy", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.compute_9D_poses", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.draw_9dof_cv2_boxes"], ["", "def", "draw_pose_from_outputs", "(", "\n", "heatmap_output", ",", "vertex_output", ",", "z_centroid_output", ",", "c_img", ",", "max_detections", "=", "np", ".", "inf", "\n", ")", ":", "\n", "  ", "poses", ",", "_", "=", "compute_9D_poses", "(", "\n", "np", ".", "copy", "(", "heatmap_output", ")", ",", "\n", "np", ".", "copy", "(", "vertex_output", ")", ",", "\n", "np", ".", "copy", "(", "z_centroid_output", ")", ",", "\n", "max_detections", "=", "max_detections", ",", "\n", ")", "\n", "return", "draw_9dof_cv2_boxes", "(", "c_img", ",", "poses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.draw_pose_9D_from_detections": [[200, 211], ["pose_outputs.draw_9dof_cv2_boxes", "poses.append", "successes.append", "simnet.lib.transform.Pose"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.draw_9dof_cv2_boxes"], ["", "def", "draw_pose_9D_from_detections", "(", "detections", ",", "c_img", ")", ":", "\n", "  ", "successes", "=", "[", "]", "\n", "poses", "=", "[", "]", "\n", "for", "detection", "in", "detections", ":", "\n", "    ", "poses", ".", "append", "(", "\n", "transform", ".", "Pose", "(", "\n", "camera_T_object", "=", "detection", ".", "camera_T_object", ",", "scale_matrix", "=", "detection", ".", "scale_matrix", "\n", ")", "\n", ")", "\n", "successes", ".", "append", "(", "detection", ".", "success", ")", "\n", "", "return", "draw_9dof_cv2_boxes", "(", "c_img", ",", "poses", ",", "successes", "=", "successes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.solve_for_rotation_from_cov_matrix": [[213, 225], ["numpy.linalg.svd", "numpy.eye", "numpy.linalg.det", "numpy.linalg.det"], "function", ["None"], ["", "def", "solve_for_rotation_from_cov_matrix", "(", "cov_matrix", ")", ":", "\n", "  ", "assert", "cov_matrix", ".", "shape", "[", "0", "]", "==", "3", "\n", "assert", "cov_matrix", ".", "shape", "[", "1", "]", "==", "3", "\n", "U", ",", "D", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "cov_matrix", ",", "full_matrices", "=", "True", ")", "\n", "d", "=", "(", "np", ".", "linalg", ".", "det", "(", "U", ")", "*", "np", ".", "linalg", ".", "det", "(", "Vh", ")", ")", "<", "0.0", "\n", "if", "d", ":", "\n", "    ", "D", "[", "-", "1", "]", "=", "-", "D", "[", "-", "1", "]", "\n", "U", "[", ":", ",", "-", "1", "]", "=", "-", "U", "[", ":", ",", "-", "1", "]", "\n", "# Rotation from world to points.", "\n", "", "rotation", "=", "np", ".", "eye", "(", "4", ")", "\n", "rotation", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "U", "\n", "return", "rotation", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.compute_9D_poses": [[227, 248], ["pose_outputs.extract_peaks_from_centroid", "pose_outputs.extract_vertices_from_peaks", "pose_outputs.extract_z_centroid_from_peaks", "zip", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "simnet.lib.net.post_processing.epnp.optimize_for_9D", "simnet.lib.net.post_processing.epnp.find_absolute_scale", "poses.append", "scores.append", "simnet.lib.transform.Pose"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.extract_peaks_from_centroid", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.extract_vertices_from_peaks", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.extract_z_centroid_from_peaks", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.optimize_for_9D", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.find_absolute_scale"], ["", "def", "compute_9D_poses", "(", "heatmap_output", ",", "vertex_output", ",", "z_centroid_output", ",", "max_detections", "=", "np", ".", "inf", ")", ":", "\n", "  ", "peaks", "=", "extract_peaks_from_centroid", "(", "np", ".", "copy", "(", "heatmap_output", ")", ",", "max_peaks", "=", "max_detections", ")", "\n", "bboxes_ext", "=", "extract_vertices_from_peaks", "(", "\n", "np", ".", "copy", "(", "peaks", ")", ",", "np", ".", "copy", "(", "vertex_output", ")", ",", "np", ".", "copy", "(", "heatmap_output", ")", "\n", ")", "\n", "z_centroids", "=", "extract_z_centroid_from_peaks", "(", "np", ".", "copy", "(", "peaks", ")", ",", "np", ".", "copy", "(", "z_centroid_output", ")", ")", "\n", "poses", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "for", "bbox_ext", ",", "z_centroid", ",", "peak", "in", "zip", "(", "bboxes_ext", ",", "z_centroids", ",", "peaks", ")", ":", "\n", "    ", "bbox_ext_flipped", "=", "bbox_ext", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "# Solve for pose up to a scale factor", "\n", "error", ",", "camera_T_object", ",", "scale_matrix", "=", "optimize_for_9D", "(", "\n", "bbox_ext_flipped", ".", "T", ",", "solve_for_transforms", "=", "True", "\n", ")", "\n", "# Assign correct depth factor", "\n", "abs_camera_T_object", ",", "abs_scale_matrix", "=", "epnp", ".", "find_absolute_scale", "(", "\n", "z_centroid", ",", "camera_T_object", ",", "scale_matrix", "\n", ")", "\n", "poses", ".", "append", "(", "transform", ".", "Pose", "(", "camera_T_object", "=", "abs_camera_T_object", ",", "scale_matrix", "=", "abs_scale_matrix", ")", ")", "\n", "scores", ".", "append", "(", "heatmap_output", "[", "peak", "[", "0", "]", ",", "peak", "[", "1", "]", "]", ")", "\n", "", "return", "poses", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.draw_9dof_cv2_boxes": [[250, 265], ["pose_outputs.draw_9dof_box", "simnet.lib.camera.convert_points_to_homopoints", "boxes.append", "simnet.lib.camera.HSRCamera", "simnet.lib.camera.convert_homopixels_to_pixels"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.draw_9dof_box", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_points_to_homopoints", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.camera.convert_homopixels_to_pixels"], ["", "def", "draw_9dof_cv2_boxes", "(", "c_img", ",", "poses", ",", "camera_model", "=", "None", ",", "successes", "=", "None", ")", ":", "\n", "  ", "boxes", "=", "[", "]", "\n", "for", "pose", "in", "poses", ":", "\n", "# Compute the bounds of the boxes current size and location", "\n", "    ", "unit_box_homopoints", "=", "camera", ".", "convert_points_to_homopoints", "(", "epnp", ".", "_WORLD_T_POINTS", ".", "T", ")", "\n", "morphed_homopoints", "=", "pose", ".", "camera_T_object", "@", "(", "pose", ".", "scale_matrix", "@", "unit_box_homopoints", ")", "\n", "if", "camera_model", "==", "None", ":", "\n", "      ", "camera_model", "=", "camera", ".", "HSRCamera", "(", ")", "\n", "", "else", ":", "\n", "      ", "camera_model", "=", "camera_model", "\n", "", "morphed_pixels", "=", "camera", ".", "convert_homopixels_to_pixels", "(", "\n", "camera_model", ".", "K_matrix", "@", "morphed_homopoints", "\n", ")", ".", "T", "\n", "boxes", ".", "append", "(", "morphed_pixels", "[", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "", "return", "draw_9dof_box", "(", "c_img", ",", "boxes", ",", "successes", "=", "successes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.draw_9dof_box": [[267, 311], ["cv2.cvtColor", "zip", "len", "simnet.lib.color_stuff.get_colors", "numpy.array", "vertices.astype.astype", "simnet.lib.color_stuff.get_colors", "zip", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "len", "int", "int", "int", "range", "cv2.circle", "points.append", "color_stuff.get_colors.append", "int", "int", "numpy.array().astype", "color_stuff.get_colors.append", "numpy.array().astype", "color_stuff.get_colors.append", "color_stuff.get_colors.append", "numpy.array", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.color_stuff.get_colors", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.color_stuff.get_colors"], ["", "def", "draw_9dof_box", "(", "c_img", ",", "boxes", ",", "successes", "=", "None", ")", ":", "\n", "  ", "if", "len", "(", "boxes", ")", "==", "0", ":", "\n", "    ", "return", "c_img", "\n", "", "if", "successes", "is", "None", ":", "\n", "    ", "colors", "=", "color_stuff", ".", "get_colors", "(", "len", "(", "boxes", ")", ")", "\n", "", "else", ":", "\n", "    ", "colors", "=", "[", "]", "\n", "for", "success", "in", "successes", ":", "\n", "#TODO(michael.laskey): Move to Enum Structure", "\n", "      ", "if", "success", "==", "1", ":", "\n", "        ", "colors", ".", "append", "(", "np", ".", "array", "(", "[", "0", ",", "255", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "elif", "success", "==", "-", "1", ":", "\n", "        ", "colors", ".", "append", "(", "np", ".", "array", "(", "[", "255", ",", "255", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "elif", "success", "==", "-", "2", ":", "\n", "        ", "colors", ".", "append", "(", "np", ".", "array", "(", "[", "0", ",", "0", ",", "255", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "else", ":", "\n", "        ", "colors", ".", "append", "(", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "", "", "c_img", "=", "cv2", ".", "cvtColor", "(", "np", ".", "array", "(", "c_img", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "for", "vertices", ",", "color", "in", "zip", "(", "boxes", ",", "colors", ")", ":", "\n", "    ", "vertices", "=", "vertices", ".", "astype", "(", "np", ".", "int", ")", "\n", "points", "=", "[", "]", "\n", "vertex_colors", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "line_color", "=", "(", "int", "(", "color", "[", "0", "]", ")", ",", "int", "(", "color", "[", "1", "]", ")", ",", "int", "(", "color", "[", "2", "]", ")", ")", "\n", "circle_colors", "=", "color_stuff", ".", "get_colors", "(", "8", ")", "\n", "for", "i", ",", "circle_color", "in", "zip", "(", "range", "(", "vertices", ".", "shape", "[", "0", "]", ")", ",", "circle_colors", ")", ":", "\n", "      ", "color", "=", "vertex_colors", "\n", "point", "=", "(", "int", "(", "vertices", "[", "i", ",", "1", "]", ")", ",", "int", "(", "vertices", "[", "i", ",", "0", "]", ")", ")", "\n", "c_img", "=", "cv2", ".", "circle", "(", "c_img", ",", "point", ",", "1", ",", "(", "0", ",", "255", ",", "0", ")", ",", "-", "1", ")", "\n", "points", ".", "append", "(", "point", ")", "\n", "# Draw the lines", "\n", "", "thickness", "=", "1", "\n", "c_img", "=", "cv2", ".", "line", "(", "c_img", ",", "points", "[", "0", "]", ",", "points", "[", "1", "]", ",", "line_color", ",", "thickness", ")", "\n", "c_img", "=", "cv2", ".", "line", "(", "c_img", ",", "points", "[", "0", "]", ",", "points", "[", "2", "]", ",", "line_color", ",", "thickness", ")", "\n", "c_img", "=", "cv2", ".", "line", "(", "c_img", ",", "points", "[", "0", "]", ",", "points", "[", "4", "]", ",", "line_color", ",", "thickness", ")", "\n", "c_img", "=", "cv2", ".", "line", "(", "c_img", ",", "points", "[", "3", "]", ",", "points", "[", "1", "]", ",", "line_color", ",", "thickness", ")", "\n", "c_img", "=", "cv2", ".", "line", "(", "c_img", ",", "points", "[", "3", "]", ",", "points", "[", "2", "]", ",", "line_color", ",", "thickness", ")", "\n", "c_img", "=", "cv2", ".", "line", "(", "c_img", ",", "points", "[", "3", "]", ",", "points", "[", "7", "]", ",", "line_color", ",", "thickness", ")", "#6", "\n", "c_img", "=", "cv2", ".", "line", "(", "c_img", ",", "points", "[", "5", "]", ",", "points", "[", "1", "]", ",", "line_color", ",", "thickness", ")", "\n", "c_img", "=", "cv2", ".", "line", "(", "c_img", ",", "points", "[", "5", "]", ",", "points", "[", "4", "]", ",", "line_color", ",", "thickness", ")", "\n", "c_img", "=", "cv2", ".", "line", "(", "c_img", ",", "points", "[", "5", "]", ",", "points", "[", "7", "]", ",", "line_color", ",", "thickness", ")", "#9", "\n", "c_img", "=", "cv2", ".", "line", "(", "c_img", ",", "points", "[", "6", "]", ",", "points", "[", "7", "]", ",", "line_color", ",", "thickness", ")", "\n", "c_img", "=", "cv2", ".", "line", "(", "c_img", ",", "points", "[", "6", "]", ",", "points", "[", "4", "]", ",", "line_color", ",", "thickness", ")", "\n", "c_img", "=", "cv2", ".", "line", "(", "c_img", ",", "points", "[", "6", "]", ",", "points", "[", "2", "]", ",", "line_color", ",", "thickness", ")", "#12", "\n", "", "return", "c_img", "\n", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.OBBOutput.__init__": [[18, 25], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "heatmap", ",", "vertex_field", ",", "z_centroid_field", ",", "cov_field", ",", "hparams", ")", ":", "\n", "    ", "self", ".", "heatmap", "=", "heatmap", "\n", "self", ".", "vertex_field", "=", "vertex_field", "\n", "self", ".", "z_centroid_field", "=", "z_centroid_field", "\n", "self", ".", "cov_field", "=", "cov_field", "\n", "self", ".", "is_numpy", "=", "False", "\n", "self", ".", "hparams", "=", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.OBBOutput.convert_to_numpy_from_torch": [[35, 46], ["numpy.ascontiguousarray", "numpy.ascontiguousarray", "obb_outputs.OBBOutput.vertex_field.transpose", "numpy.ascontiguousarray", "obb_outputs.OBBOutput.cov_field.transpose", "numpy.ascontiguousarray", "obb_outputs.OBBOutput.heatmap.cpu().numpy", "obb_outputs.OBBOutput.vertex_field.cpu().numpy", "obb_outputs.OBBOutput.cov_field.cpu().numpy", "obb_outputs.OBBOutput.z_centroid_field.cpu().numpy", "obb_outputs.OBBOutput.heatmap.cpu", "obb_outputs.OBBOutput.vertex_field.cpu", "obb_outputs.OBBOutput.cov_field.cpu", "obb_outputs.OBBOutput.z_centroid_field.cpu"], "methods", ["None"], ["", "def", "convert_to_numpy_from_torch", "(", "self", ")", ":", "\n", "    ", "self", ".", "heatmap", "=", "np", ".", "ascontiguousarray", "(", "self", ".", "heatmap", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "vertex_field", "=", "np", ".", "ascontiguousarray", "(", "self", ".", "vertex_field", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "vertex_field", "=", "self", ".", "vertex_field", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "self", ".", "vertex_field", "=", "self", ".", "vertex_field", "/", "100.0", "\n", "self", ".", "cov_field", "=", "np", ".", "ascontiguousarray", "(", "self", ".", "cov_field", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "cov_field", "=", "self", ".", "cov_field", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "self", ".", "cov_field", "=", "self", ".", "cov_field", "/", "1000.0", "\n", "self", ".", "z_centroid_field", "=", "np", ".", "ascontiguousarray", "(", "self", ".", "z_centroid_field", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "z_centroid_field", "=", "self", ".", "z_centroid_field", "/", "100.0", "+", "1.0", "\n", "self", ".", "is_numpy", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.OBBOutput.convert_to_torch_from_numpy": [[47, 59], ["obb_outputs.OBBOutput.vertex_field.transpose", "torch.from_numpy().float", "obb_outputs.OBBOutput.cov_field.transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray"], "methods", ["None"], ["", "def", "convert_to_torch_from_numpy", "(", "self", ")", ":", "\n", "    ", "self", ".", "vertex_field", "=", "self", ".", "vertex_field", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "vertex_field", "=", "100.0", "*", "self", ".", "vertex_field", "\n", "self", ".", "vertex_field", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "self", ".", "vertex_field", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "cov_field", "=", "self", ".", "cov_field", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "self", ".", "cov_field", "=", "1000.0", "*", "self", ".", "cov_field", "\n", "self", ".", "cov_field", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "self", ".", "cov_field", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "heatmap", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "self", ".", "heatmap", ")", ")", ".", "float", "(", ")", "\n", "# Normalize z_centroid by 1.", "\n", "self", ".", "z_centroid_field", "=", "100.0", "*", "(", "self", ".", "z_centroid_field", "-", "1.0", ")", "\n", "self", ".", "z_centroid_field", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "self", ".", "z_centroid_field", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "is_numpy", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.OBBOutput.get_detections": [[60, 84], ["obb_outputs.compute_oriented_bounding_boxes", "zip", "simnet.lib.net.post_processing.nms.run", "obb_outputs.OBBOutput.convert_to_numpy_from_torch", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "simnet.lib.net.post_processing.epnp.get_2d_bbox_of_9D_box", "simnet.lib.net.post_processing.nms.run.append", "simnet.lib.net.post_processing.eval3d.Detection"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.compute_oriented_bounding_boxes", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.nms.run", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.convert_to_numpy_from_torch", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.get_2d_bbox_of_9D_box"], ["", "def", "get_detections", "(", "self", ",", "camera_model", ")", ":", "\n", "    ", "if", "not", "self", ".", "is_numpy", ":", "\n", "      ", "self", ".", "convert_to_numpy_from_torch", "(", ")", "\n", "\n", "", "poses", ",", "scores", "=", "compute_oriented_bounding_boxes", "(", "\n", "np", ".", "copy", "(", "self", ".", "heatmap", "[", "0", "]", ")", ",", "\n", "np", ".", "copy", "(", "self", ".", "vertex_field", "[", "0", "]", ")", ",", "\n", "np", ".", "copy", "(", "self", ".", "z_centroid_field", "[", "0", "]", ")", ",", "\n", "np", ".", "copy", "(", "self", ".", "cov_field", "[", "0", "]", ")", ",", "\n", "camera_model", "=", "camera_model", "\n", ")", "\n", "detections", "=", "[", "]", "\n", "for", "pose", ",", "score", "in", "zip", "(", "poses", ",", "scores", ")", ":", "\n", "      ", "bbox", "=", "epnp", ".", "get_2d_bbox_of_9D_box", "(", "pose", ".", "camera_T_object", ",", "pose", ".", "scale_matrix", ",", "camera_model", ")", "\n", "detections", ".", "append", "(", "\n", "eval3d", ".", "Detection", "(", "\n", "camera_T_object", "=", "pose", ".", "camera_T_object", ",", "\n", "bbox", "=", "bbox", ",", "\n", "score", "=", "score", ",", "\n", "scale_matrix", "=", "pose", ".", "scale_matrix", "\n", ")", "\n", ")", "\n", "", "detections", "=", "nms", ".", "run", "(", "detections", ")", "\n", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.OBBOutput.get_visualization_img": [[85, 95], ["obb_outputs.draw_oriented_bounding_box_from_outputs", "obb_outputs.OBBOutput.convert_to_numpy_from_torch"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.draw_oriented_bounding_box_from_outputs", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.convert_to_numpy_from_torch"], ["", "def", "get_visualization_img", "(", "self", ",", "left_img", ",", "camera_model", "=", "None", ")", ":", "\n", "    ", "if", "not", "self", ".", "is_numpy", ":", "\n", "      ", "self", ".", "convert_to_numpy_from_torch", "(", ")", "\n", "", "return", "draw_oriented_bounding_box_from_outputs", "(", "\n", "self", ".", "heatmap", "[", "0", "]", ",", "\n", "self", ".", "vertex_field", "[", "0", "]", ",", "\n", "self", ".", "cov_field", "[", "0", "]", ",", "\n", "self", ".", "z_centroid_field", "[", "0", "]", ",", "\n", "left_img", ",", "\n", "camera_model", "=", "camera_model", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.OBBOutput.compute_loss": [[97, 123], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "heatmap_target.to.to.to", "vertex_target.to.to.to", "z_centroid_field_target.to.to.to", "cov_target.to.to.to", "_mask_l1_loss", "_mask_l1_loss", "_mask_l1_loss", "_mse_loss", "ValueError", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "obb_targets", ",", "log", ")", ":", "\n", "    ", "if", "self", ".", "is_numpy", ":", "\n", "      ", "raise", "ValueError", "(", "\"Output is not in torch mode\"", ")", "\n", "", "vertex_target", "=", "torch", ".", "stack", "(", "[", "obb_target", ".", "vertex_field", "for", "obb_target", "in", "obb_targets", "]", ")", "\n", "z_centroid_field_target", "=", "torch", ".", "stack", "(", "[", "\n", "obb_target", ".", "z_centroid_field", "for", "obb_target", "in", "obb_targets", "\n", "]", ")", "\n", "heatmap_target", "=", "torch", ".", "stack", "(", "[", "obb_target", ".", "heatmap", "for", "obb_target", "in", "obb_targets", "]", ")", "\n", "cov_target", "=", "torch", ".", "stack", "(", "[", "obb_target", ".", "cov_field", "for", "obb_target", "in", "obb_targets", "]", ")", "\n", "\n", "# Move to GPU", "\n", "heatmap_target", "=", "heatmap_target", ".", "to", "(", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "vertex_target", "=", "vertex_target", ".", "to", "(", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "z_centroid_field_target", "=", "z_centroid_field_target", ".", "to", "(", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "cov_target", "=", "cov_target", ".", "to", "(", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "\n", "cov_loss", "=", "_mask_l1_loss", "(", "cov_target", ",", "self", ".", "cov_field", ",", "heatmap_target", ")", "\n", "log", "[", "'cov_loss'", "]", "=", "cov_loss", "\n", "vertex_loss", "=", "_mask_l1_loss", "(", "vertex_target", ",", "self", ".", "vertex_field", ",", "heatmap_target", ")", "\n", "log", "[", "'vertex_loss'", "]", "=", "vertex_loss", "\n", "z_centroid_loss", "=", "_mask_l1_loss", "(", "z_centroid_field_target", ",", "self", ".", "z_centroid_field", ",", "heatmap_target", ")", "\n", "log", "[", "'z_centroid'", "]", "=", "z_centroid_loss", "\n", "\n", "heatmap_loss", "=", "_mse_loss", "(", "heatmap_target", ",", "self", ".", "heatmap", ")", "\n", "log", "[", "'heatmap'", "]", "=", "heatmap_loss", "\n", "return", "self", ".", "hparams", ".", "loss_vertex_mult", "*", "vertex_loss", "+", "self", ".", "hparams", ".", "loss_heatmap_mult", "*", "heatmap_loss", "+", "self", ".", "hparams", ".", "loss_z_centroid_mult", "*", "z_centroid_loss", "+", "self", ".", "hparams", ".", "loss_rotation_mult", "*", "cov_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.extract_cov_matrices_from_peaks": [[125, 139], ["range", "numpy.zeros", "int", "int", "index.astype.astype", "numpy.array", "cov_matrices.append"], "function", ["None"], ["", "", "def", "extract_cov_matrices_from_peaks", "(", "peaks", ",", "cov_matrices_output", ",", "scale_factor", "=", "8", ")", ":", "\n", "  ", "assert", "peaks", ".", "shape", "[", "1", "]", "==", "2", "\n", "cov_matrices", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "peaks", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "index", "=", "np", ".", "zeros", "(", "[", "2", "]", ")", "\n", "index", "[", "0", "]", "=", "int", "(", "peaks", "[", "ii", ",", "0", "]", "/", "scale_factor", ")", "\n", "index", "[", "1", "]", "=", "int", "(", "peaks", "[", "ii", ",", "1", "]", "/", "scale_factor", ")", "\n", "index", "=", "index", ".", "astype", "(", "np", ".", "int", ")", "\n", "cov_mat_values", "=", "cov_matrices_output", "[", "index", "[", "0", "]", ",", "index", "[", "1", "]", ",", ":", "]", "\n", "cov_matrix", "=", "np", ".", "array", "(", "[", "[", "cov_mat_values", "[", "0", "]", ",", "cov_mat_values", "[", "3", "]", ",", "cov_mat_values", "[", "4", "]", "]", ",", "\n", "[", "cov_mat_values", "[", "3", "]", ",", "cov_mat_values", "[", "1", "]", ",", "cov_mat_values", "[", "5", "]", "]", ",", "\n", "[", "cov_mat_values", "[", "4", "]", ",", "cov_mat_values", "[", "5", "]", ",", "cov_mat_values", "[", "2", "]", "]", "]", ")", "\n", "cov_matrices", ".", "append", "(", "cov_matrix", ")", "\n", "", "return", "cov_matrices", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.draw_oriented_bounding_box_from_outputs": [[141, 153], ["obb_outputs.compute_oriented_bounding_boxes", "simnet.lib.net.post_processing.pose_outputs.draw_9dof_cv2_boxes", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.compute_oriented_bounding_boxes", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.draw_9dof_cv2_boxes"], ["", "def", "draw_oriented_bounding_box_from_outputs", "(", "\n", "heatmap_output", ",", "vertex_output", ",", "rotation_output", ",", "z_centroid_output", ",", "c_img", ",", "camera_model", "=", "None", "\n", ")", ":", "\n", "  ", "poses", ",", "_", "=", "compute_oriented_bounding_boxes", "(", "\n", "np", ".", "copy", "(", "heatmap_output", ")", ",", "\n", "np", ".", "copy", "(", "vertex_output", ")", ",", "\n", "np", ".", "copy", "(", "z_centroid_output", ")", ",", "\n", "np", ".", "copy", "(", "rotation_output", ")", ",", "\n", "camera_model", "=", "camera_model", ",", "\n", "max_detections", "=", "100", ",", "\n", ")", "\n", "return", "pose_outputs", ".", "draw_9dof_cv2_boxes", "(", "c_img", ",", "poses", ",", "camera_model", "=", "camera_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.solve_for_rotation_from_cov_matrix": [[155, 167], ["numpy.linalg.svd", "numpy.eye", "numpy.linalg.det", "numpy.linalg.det"], "function", ["None"], ["", "def", "solve_for_rotation_from_cov_matrix", "(", "cov_matrix", ")", ":", "\n", "  ", "assert", "cov_matrix", ".", "shape", "[", "0", "]", "==", "3", "\n", "assert", "cov_matrix", ".", "shape", "[", "1", "]", "==", "3", "\n", "U", ",", "D", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "cov_matrix", ",", "full_matrices", "=", "True", ")", "\n", "d", "=", "(", "np", ".", "linalg", ".", "det", "(", "U", ")", "*", "np", ".", "linalg", ".", "det", "(", "Vh", ")", ")", "<", "0.0", "\n", "if", "d", ":", "\n", "    ", "D", "[", "-", "1", "]", "=", "-", "D", "[", "-", "1", "]", "\n", "U", "[", ":", ",", "-", "1", "]", "=", "-", "U", "[", ":", ",", "-", "1", "]", "\n", "# Rotation from world to points.", "\n", "", "rotation", "=", "np", ".", "eye", "(", "4", ")", "\n", "rotation", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "U", "\n", "return", "rotation", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.compute_oriented_bounding_boxes": [[169, 210], ["simnet.lib.net.post_processing.pose_outputs.extract_peaks_from_centroid", "simnet.lib.net.post_processing.pose_outputs.extract_vertices_from_peaks", "simnet.lib.net.post_processing.pose_outputs.extract_z_centroid_from_peaks", "simnet.lib.net.post_processing.pose_outputs.extract_cov_matrices_from_peaks", "zip", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "simnet.lib.net.post_processing.epnp.optimize_for_9D", "simnet.lib.net.post_processing.epnp.find_absolute_scale", "poses.append", "scores.append", "obb_outputs.solve_for_rotation_from_cov_matrix", "simnet.lib.transform.Pose", "simnet.lib.transform.Transform.from_aa"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.extract_peaks_from_centroid", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.extract_vertices_from_peaks", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.pose_outputs.extract_z_centroid_from_peaks", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.extract_cov_matrices_from_peaks", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.optimize_for_9D", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.find_absolute_scale", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.obb_outputs.solve_for_rotation_from_cov_matrix", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.transform.Transform.from_aa"], ["", "def", "compute_oriented_bounding_boxes", "(", "\n", "heatmap_output", ",", "\n", "vertex_output", ",", "\n", "z_centroid_output", ",", "\n", "cov_matrices", ",", "\n", "camera_model", ",", "\n", "ground_truth_peaks", "=", "None", ",", "\n", "max_detections", "=", "np", ".", "inf", ",", "\n", ")", ":", "\n", "  ", "peaks", "=", "pose_outputs", ".", "extract_peaks_from_centroid", "(", "\n", "np", ".", "copy", "(", "heatmap_output", ")", ",", "max_peaks", "=", "max_detections", "\n", ")", "\n", "bboxes_ext", "=", "pose_outputs", ".", "extract_vertices_from_peaks", "(", "\n", "np", ".", "copy", "(", "peaks", ")", ",", "np", ".", "copy", "(", "vertex_output", ")", ",", "np", ".", "copy", "(", "heatmap_output", ")", "\n", ")", "\n", "z_centroids", "=", "pose_outputs", ".", "extract_z_centroid_from_peaks", "(", "\n", "np", ".", "copy", "(", "peaks", ")", ",", "np", ".", "copy", "(", "z_centroid_output", ")", "\n", ")", "\n", "cov_matrices", "=", "pose_outputs", ".", "extract_cov_matrices_from_peaks", "(", "np", ".", "copy", "(", "peaks", ")", ",", "np", ".", "copy", "(", "cov_matrices", ")", ")", "\n", "poses", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "for", "bbox_ext", ",", "z_centroid", ",", "cov_matrix", ",", "peak", "in", "zip", "(", "bboxes_ext", ",", "z_centroids", ",", "cov_matrices", ",", "peaks", ")", ":", "\n", "    ", "bbox_ext_flipped", "=", "bbox_ext", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "# Solve for pose up to a scale factor", "\n", "error", ",", "camera_T_object", ",", "scale_matrix", "=", "optimize_for_9D", "(", "\n", "bbox_ext_flipped", ".", "T", ",", "camera_model", ",", "solve_for_transforms", "=", "True", "\n", ")", "\n", "# Revert back to original pose.", "\n", "camera_T_object", "=", "camera_T_object", "@", "transform", ".", "Transform", ".", "from_aa", "(", "\n", "axis", "=", "transform", ".", "X_AXIS", ",", "angle_deg", "=", "-", "45.0", "\n", ")", ".", "matrix", "\n", "# Add rotation solution to pose.", "\n", "camera_T_object", "=", "camera_T_object", "@", "solve_for_rotation_from_cov_matrix", "(", "cov_matrix", ")", "\n", "# Assign correct depth factor", "\n", "abs_camera_T_object", ",", "abs_object_scale", "=", "epnp", ".", "find_absolute_scale", "(", "\n", "-", "1.0", "*", "z_centroid", ",", "camera_T_object", ",", "scale_matrix", "\n", ")", "\n", "poses", ".", "append", "(", "transform", ".", "Pose", "(", "camera_T_object", "=", "abs_camera_T_object", ",", "scale_matrix", "=", "abs_object_scale", ")", ")", "\n", "scores", ".", "append", "(", "heatmap_output", "[", "peak", "[", "0", "]", ",", "peak", "[", "1", "]", "]", ")", "\n", "\n", "", "return", "poses", ",", "scores", "\n", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.segmentation_outputs.SegmentationOutput.__init__": [[13, 17], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "seg_pred", ",", "hparams", ")", ":", "\n", "    ", "self", ".", "seg_pred", "=", "seg_pred", "\n", "self", ".", "is_numpy", "=", "False", "\n", "self", ".", "hparams", "=", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.segmentation_outputs.SegmentationOutput.convert_to_numpy_from_torch": [[19, 22], ["numpy.ascontiguousarray", "segmentation_outputs.SegmentationOutput.seg_pred.cpu().numpy", "segmentation_outputs.SegmentationOutput.seg_pred.cpu"], "methods", ["None"], ["", "def", "convert_to_numpy_from_torch", "(", "self", ")", ":", "\n", "    ", "self", ".", "seg_pred", "=", "np", ".", "ascontiguousarray", "(", "self", ".", "seg_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "is_numpy", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.segmentation_outputs.SegmentationOutput.convert_to_torch_from_numpy": [[23, 26], ["torch.from_numpy().long", "torch.from_numpy", "numpy.ascontiguousarray"], "methods", ["None"], ["", "def", "convert_to_torch_from_numpy", "(", "self", ")", ":", "\n", "    ", "self", ".", "seg_pred", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "self", ".", "seg_pred", ")", ")", ".", "long", "(", ")", "\n", "self", ".", "is_numpy", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.segmentation_outputs.SegmentationOutput.get_visualization_img": [[27, 31], ["segmentation_outputs.draw_segmentation_mask", "segmentation_outputs.SegmentationOutput.convert_to_numpy_from_torch"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.segmentation_outputs.draw_segmentation_mask", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.convert_to_numpy_from_torch"], ["", "def", "get_visualization_img", "(", "self", ",", "left_image", ")", ":", "\n", "    ", "if", "not", "self", ".", "is_numpy", ":", "\n", "      ", "self", ".", "convert_to_numpy_from_torch", "(", ")", "\n", "", "return", "draw_segmentation_mask", "(", "left_image", ",", "self", ".", "seg_pred", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.segmentation_outputs.SegmentationOutput.get_prediction": [[32, 36], ["segmentation_outputs.SegmentationOutput.convert_to_numpy_from_torch"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.convert_to_numpy_from_torch"], ["", "def", "get_prediction", "(", "self", ")", ":", "\n", "    ", "if", "not", "self", ".", "is_numpy", ":", "\n", "      ", "self", ".", "convert_to_numpy_from_torch", "(", ")", "\n", "", "return", "self", ".", "seg_pred", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.segmentation_outputs.SegmentationOutput.compute_loss": [[37, 48], ["torch.stack", "seg_target_batch.to.to.to", "torch.nn.functional.cross_entropy", "ValueError", "seg_target_stacked.append", "torch.device"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "seg_targets", ",", "log", ")", ":", "\n", "    ", "if", "self", ".", "is_numpy", ":", "\n", "      ", "raise", "ValueError", "(", "\"Output is not in torch mode\"", ")", "\n", "", "seg_target_stacked", "=", "[", "]", "\n", "for", "seg_target", "in", "seg_targets", ":", "\n", "      ", "seg_target_stacked", ".", "append", "(", "seg_target", ".", "seg_pred", ")", "\n", "", "seg_target_batch", "=", "torch", ".", "stack", "(", "seg_target_stacked", ")", "\n", "seg_target_batch", "=", "seg_target_batch", ".", "to", "(", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "seg_loss", "=", "F", ".", "cross_entropy", "(", "self", ".", "seg_pred", ",", "seg_target_batch", ",", "reduction", "=", "\"mean\"", ",", "ignore_index", "=", "-", "100", ")", "\n", "log", "[", "'segmentation'", "]", "=", "seg_loss", "\n", "return", "self", ".", "hparams", ".", "loss_seg_mult", "*", "seg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.segmentation_outputs.draw_segmentation_mask_gt": [[50, 62], ["seg_mask.astype.astype", "simnet.lib.color_stuff.get_panoptic_colors", "segmentation_outputs.color_img_to_gray", "zip", "cv2.cvtColor", "len", "range", "numpy.zeros", "cv2.addWeighted", "cv2.addWeighted.astype", "np.zeros.astype"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.color_stuff.get_panoptic_colors", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.segmentation_outputs.color_img_to_gray"], ["", "", "def", "draw_segmentation_mask_gt", "(", "color_img", ",", "seg_mask", ",", "num_classes", "=", "5", ")", ":", "\n", "  ", "assert", "len", "(", "seg_mask", ".", "shape", ")", "==", "2", "\n", "seg_mask", "=", "seg_mask", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "colors", "=", "color_stuff", ".", "get_panoptic_colors", "(", ")", "\n", "color_img", "=", "color_img_to_gray", "(", "color_img", ")", "\n", "for", "ii", ",", "color", "in", "zip", "(", "range", "(", "num_classes", ")", ",", "colors", ")", ":", "\n", "    ", "colored_mask", "=", "np", ".", "zeros", "(", "[", "seg_mask", ".", "shape", "[", "0", "]", ",", "seg_mask", ".", "shape", "[", "1", "]", ",", "3", "]", ")", "\n", "colored_mask", "[", "seg_mask", "==", "ii", ",", ":", "]", "=", "color", "\n", "color_img", "=", "cv2", ".", "addWeighted", "(", "\n", "color_img", ".", "astype", "(", "np", ".", "uint8", ")", ",", "0.9", ",", "colored_mask", ".", "astype", "(", "np", ".", "uint8", ")", ",", "0.4", ",", "0", "\n", ")", "\n", "", "return", "cv2", ".", "cvtColor", "(", "color_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.segmentation_outputs.color_img_to_gray": [[64, 71], ["numpy.zeros", "cv2.cvtColor", "range"], "function", ["None"], ["", "def", "color_img_to_gray", "(", "image", ")", ":", "\n", "  ", "gray_scale_img", "=", "np", ".", "zeros", "(", "image", ".", "shape", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "    ", "gray_scale_img", "[", ":", ",", ":", ",", "i", "]", "=", "img", "\n", "", "gray_scale_img", "[", ":", ",", ":", ",", "i", "]", "=", "img", "\n", "return", "gray_scale_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.segmentation_outputs.draw_segmentation_mask": [[73, 79], ["numpy.argmax", "segmentation_outputs.draw_segmentation_mask_gt", "len"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.segmentation_outputs.draw_segmentation_mask_gt"], ["", "def", "draw_segmentation_mask", "(", "color_img", ",", "seg_mask", ")", ":", "\n", "  ", "assert", "len", "(", "seg_mask", ".", "shape", ")", "==", "3", "\n", "num_classes", "=", "seg_mask", ".", "shape", "[", "0", "]", "\n", "# Convert to predictions", "\n", "seg_mask_predictions", "=", "np", ".", "argmax", "(", "seg_mask", ",", "axis", "=", "0", ")", "\n", "return", "draw_segmentation_mask_gt", "(", "color_img", ",", "seg_mask_predictions", ",", "num_classes", "=", "num_classes", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.Eval3d.__init__": [[262, 268], ["eval3d.EvalMetrics"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "n", "=", "0", "\n", "self", ".", "metrics_by_size", "=", "{", "cn", ":", "EvalMetrics", "(", ")", "for", "cn", "in", "_SIZES", "}", "\n", "self", ".", "all_3d_metrics_by_scene", "=", "{", "}", "\n", "self", ".", "all_3d_known_depth_metrics_by_scene", "=", "{", "}", "\n", "self", ".", "all_3d_known_rotation_metrics_by_scene", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.Eval3d.process_sample": [[269, 322], ["simnet.lib.occlusions.mark_occlusions_in_detections", "eval3d.assign_size_labels", "eval3d.measure_3d_iou", "eval3d.measure_3d_iou", "eval3d.Eval3d.all_3d_known_depth_metrics_by_scene[].process_sample", "eval3d.measure_3d_iou", "eval3d.Eval3d.all_3d_metrics_by_scene[].process_sample", "eval3d.measure_3d_iou", "eval3d.Eval3d.all_3d_known_rotation_metrics_by_scene[].process_sample", "eval3d.EvalMetrics", "eval3d.EvalMetrics", "eval3d.EvalMetrics", "copy.deepcopy", "copy.deepcopy", "eval3d.get_size_predictions", "eval3d.Eval3d.metrics_by_size[].process_sample", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.occlusions.mark_occlusions_in_detections", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.assign_size_labels", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.measure_3d_iou", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.measure_3d_iou", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.process_sample", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.measure_3d_iou", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.process_sample", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.measure_3d_iou", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.process_sample", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.get_size_predictions", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.process_sample"], ["", "def", "process_sample", "(", "self", ",", "detections", ",", "gt_detections", ",", "scene_name", ")", ":", "\n", "# Mark occlusions and size labels.", "\n", "    ", "occlusions", ".", "mark_occlusions_in_detections", "(", "gt_detections", ")", "\n", "assign_size_labels", "(", "gt_detections", ")", "\n", "\n", "if", "scene_name", "not", "in", "self", ".", "all_3d_metrics_by_scene", ":", "\n", "      ", "self", ".", "all_3d_metrics_by_scene", "[", "scene_name", "]", "=", "EvalMetrics", "(", ")", "\n", "self", ".", "all_3d_known_depth_metrics_by_scene", "[", "scene_name", "]", "=", "EvalMetrics", "(", ")", "\n", "self", ".", "all_3d_known_rotation_metrics_by_scene", "[", "scene_name", "]", "=", "EvalMetrics", "(", ")", "\n", "\n", "# Process True Positive Rate per object size", "\n", "", "true_matches", ",", "pred_matches", ",", "pred_scores", ",", "size_labels", ",", "_", ",", "_", "=", "measure_3d_iou", "(", "\n", "copy", ".", "deepcopy", "(", "detections", ")", ",", "copy", ".", "deepcopy", "(", "gt_detections", ")", ",", "known_depth", "=", "True", "\n", ")", "\n", "for", "size_name", "in", "_SIZES", ":", "\n", "      ", "true_matches_per_class", ",", "pred_matches_per_class", ",", "pred_scores_per_class", "=", "get_size_predictions", "(", "\n", "copy", ".", "deepcopy", "(", "pred_matches", ")", ",", "copy", ".", "deepcopy", "(", "true_matches", ")", ",", "copy", ".", "deepcopy", "(", "pred_scores", ")", ",", "\n", "copy", ".", "deepcopy", "(", "size_labels", ")", ",", "size_name", "\n", ")", "\n", "self", ".", "metrics_by_size", "[", "size_name", "]", ".", "process_sample", "(", "\n", "true_matches", "=", "true_matches_per_class", ",", "\n", "pred_matches", "=", "pred_matches_per_class", ",", "\n", "pred_scores", "=", "pred_scores_per_class", "\n", ")", "\n", "\n", "# Process 3D mAp for all classes with known depth.", "\n", "", "true_matches", ",", "pred_matches", ",", "pred_scores", ",", "class_labels", ",", "ignore_labels", ",", "sorted_detections", "=", "measure_3d_iou", "(", "\n", "copy", ".", "deepcopy", "(", "detections", ")", ",", "copy", ".", "deepcopy", "(", "gt_detections", ")", ",", "known_depth", "=", "True", "\n", ")", "\n", "self", ".", "all_3d_known_depth_metrics_by_scene", "[", "scene_name", "]", ".", "process_sample", "(", "\n", "true_matches", "=", "true_matches", ",", "pred_matches", "=", "pred_matches", ",", "pred_scores", "=", "pred_scores", "\n", ")", "\n", "\n", "# Process 3D mAp for all classes.", "\n", "true_matches", ",", "pred_matches", ",", "pred_scores", ",", "class_labels", ",", "_", ",", "_", "=", "measure_3d_iou", "(", "\n", "copy", ".", "deepcopy", "(", "detections", ")", ",", "copy", ".", "deepcopy", "(", "gt_detections", ")", "\n", ")", "\n", "self", ".", "all_3d_metrics_by_scene", "[", "scene_name", "]", ".", "process_sample", "(", "\n", "true_matches", "=", "true_matches", ",", "pred_matches", "=", "pred_matches", ",", "pred_scores", "=", "pred_scores", "\n", ")", "\n", "\n", "# Process 3D mAp for all classes with known depth and rotatoins.", "\n", "true_matches", ",", "pred_matches", ",", "pred_scores", ",", "class_labels", ",", "ignore_labels", ",", "_", "=", "measure_3d_iou", "(", "\n", "copy", ".", "deepcopy", "(", "detections", ")", ",", "\n", "copy", ".", "deepcopy", "(", "gt_detections", ")", ",", "\n", "known_depth", "=", "True", ",", "\n", "known_rotation", "=", "True", "\n", ")", "\n", "self", ".", "all_3d_known_rotation_metrics_by_scene", "[", "scene_name", "]", ".", "process_sample", "(", "\n", "true_matches", "=", "true_matches", ",", "pred_matches", "=", "pred_matches", ",", "pred_scores", "=", "pred_scores", "\n", ")", "\n", "\n", "return", "sorted_detections", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.Eval3d.process_dataset": [[323, 363], ["enumerate", "print", "plotter.draw_standard_bar_plot", "plotter.draw_standard_bar_plot", "results_fh.write", "ap_values.append", "ap_values.append", "scene_names.append", "eval3d.Eval3d.all_3d_known_depth_metrics_by_scene[].get_pr_curve", "plotter.draw_precision_recall_curve", "eval3d.Eval3d.metrics_by_size[].process_dataset", "eval3d.Eval3d.all_3d_known_depth_metrics_by_scene[].process_dataset"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.lib.datapoint.LocalDataset.write", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.get_pr_curve", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.process_dataset", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.process_dataset"], ["", "def", "process_dataset", "(", "self", ",", "results_path", ")", ":", "\n", "\n", "    ", "def", "_print", "(", "name", ",", "x", ",", "iou", ")", ":", "\n", "      ", "if", "final", ":", "\n", "        ", "prefix", "=", "'[step {self.n: 6d}] (FINAL)'", "\n", "", "else", ":", "\n", "        ", "prefix", "=", "'(incomplete)'", "\n", "", "if", "not", "final", "and", "name", "!=", "'MEAN'", ":", "\n", "        ", "return", "\n", "", "out", "=", "f'{prefix} AP@{iou:.02f}[{name}] = {x}'", "\n", "print", "(", "out", ")", "\n", "if", "results_fh", "is", "not", "None", ":", "\n", "        ", "results_fh", ".", "write", "(", "out", "+", "'\\n'", ")", "\n", "\n", "", "", "for", "idx", ",", "iou", "in", "enumerate", "(", "EVAL_IOUS", ")", ":", "\n", "# Plot 3d metrics", "\n", "      ", "ap_values", "=", "[", "]", "\n", "for", "size_name", "in", "_SIZES", ":", "\n", "        ", "ap_values", ".", "append", "(", "self", ".", "metrics_by_size", "[", "size_name", "]", ".", "process_dataset", "(", ")", "[", "idx", "]", ")", "\n", "# Draw the bar plot.", "\n", "", "graph_name", "=", "f'3D_ATP@{iou:.02f}'", "\n", "plotter", ".", "draw_standard_bar_plot", "(", "_SIZES", ",", "ap_values", ",", "results_path", ",", "y_label", "=", "graph_name", ")", "\n", "\n", "# Plot mAP per scene", "\n", "ap_values", "=", "[", "]", "\n", "scene_names", "=", "[", "]", "\n", "for", "scene_name", "in", "self", ".", "all_3d_known_depth_metrics_by_scene", ":", "\n", "        ", "ap_values", ".", "append", "(", "\n", "self", ".", "all_3d_known_depth_metrics_by_scene", "[", "scene_name", "]", ".", "process_dataset", "(", ")", "[", "idx", "]", "\n", ")", "\n", "scene_names", ".", "append", "(", "scene_name", ")", "\n", "# Draw the bar plot.", "\n", "", "graph_name", "=", "f'3D_mAP@{iou:.02f}'", "\n", "plotter", ".", "draw_standard_bar_plot", "(", "scene_names", ",", "ap_values", ",", "results_path", ",", "y_label", "=", "graph_name", ")", "\n", "\n", "# Plot AP curve for known depth per scene", "\n", "for", "scene_name", "in", "self", ".", "all_3d_known_depth_metrics_by_scene", ":", "\n", "        ", "precisions", ",", "recalls", "=", "self", ".", "all_3d_known_depth_metrics_by_scene", "[", "scene_name", "]", ".", "get_pr_curve", "(", ")", "\n", "plotter", ".", "draw_precision_recall_curve", "(", "\n", "precisions", ",", "recalls", ",", "results_path", ",", "name", "=", "scene_name", "+", "'_pr_curve'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.Eval3d.process_all_3D_dataset": [[365, 370], ["numpy.average", "ap_values.append", "eval3d.Eval3d.all_3d_metrics_by_scene[].process_dataset"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.process_dataset"], ["", "", "", "def", "process_all_3D_dataset", "(", "self", ")", ":", "\n", "    ", "ap_values", "=", "[", "]", "\n", "for", "scene_name", "in", "self", ".", "all_3d_metrics_by_scene", ":", "\n", "      ", "ap_values", ".", "append", "(", "self", ".", "all_3d_metrics_by_scene", "[", "scene_name", "]", ".", "process_dataset", "(", ")", "[", "0", "]", ")", "\n", "", "return", "np", ".", "average", "(", "ap_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.__init__": [[374, 378], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "true_matches", "=", "[", "]", "\n", "self", ".", "pred_matches", "=", "[", "]", "\n", "self", ".", "pred_scores", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.process_sample": [[379, 383], ["eval3d.EvalMetrics.true_matches.append", "eval3d.EvalMetrics.pred_matches.append", "eval3d.EvalMetrics.pred_scores.append"], "methods", ["None"], ["", "def", "process_sample", "(", "self", ",", "true_matches", ",", "pred_matches", ",", "pred_scores", ")", ":", "\n", "    ", "self", ".", "true_matches", ".", "append", "(", "true_matches", ")", "\n", "self", ".", "pred_matches", ".", "append", "(", "pred_matches", ")", "\n", "self", ".", "pred_scores", ".", "append", "(", "pred_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.process_dataset": [[384, 396], ["numpy.copy", "numpy.copy", "numpy.copy", "range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "ap_per_iou.append", "eval3d.compute_ap_from_matches_scores"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.compute_ap_from_matches_scores"], ["", "def", "process_dataset", "(", "self", ")", ":", "\n", "    ", "true_matches", "=", "np", ".", "copy", "(", "np", ".", "concatenate", "(", "self", ".", "true_matches", ",", "axis", "=", "1", ")", ")", "\n", "pred_matches", "=", "np", ".", "copy", "(", "np", ".", "concatenate", "(", "self", ".", "pred_matches", ",", "axis", "=", "1", ")", ")", "\n", "pred_scores", "=", "np", ".", "copy", "(", "np", ".", "concatenate", "(", "self", ".", "pred_scores", ",", "axis", "=", "0", ")", ")", "\n", "assert", "true_matches", ".", "shape", "[", "0", "]", "==", "pred_matches", ".", "shape", "[", "0", "]", "\n", "num_ious", "=", "true_matches", ".", "shape", "[", "0", "]", "\n", "ap_per_iou", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_ious", ")", ":", "\n", "      ", "ap_per_iou", ".", "append", "(", "\n", "compute_ap_from_matches_scores", "(", "pred_matches", "[", "i", ",", ":", "]", ",", "pred_scores", ",", "true_matches", "[", "i", ",", ":", "]", ")", "\n", ")", "\n", "", "return", "ap_per_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.EvalMetrics.get_pr_curve": [[397, 405], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "eval3d.compute_pr_curve_from_matches_scores"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.compute_pr_curve_from_matches_scores"], ["", "def", "get_pr_curve", "(", "self", ")", ":", "\n", "    ", "true_matches", "=", "np", ".", "concatenate", "(", "self", ".", "true_matches", ",", "axis", "=", "1", ")", "\n", "pred_matches", "=", "np", ".", "concatenate", "(", "self", ".", "pred_matches", ",", "axis", "=", "1", ")", "\n", "pred_scores", "=", "np", ".", "concatenate", "(", "self", ".", "pred_scores", ",", "axis", "=", "0", ")", "\n", "assert", "true_matches", ".", "shape", "[", "0", "]", "==", "pred_matches", ".", "shape", "[", "0", "]", "\n", "num_ious", "=", "true_matches", ".", "shape", "[", "0", "]", "\n", "ap_per_iou", "=", "[", "]", "\n", "return", "compute_pr_curve_from_matches_scores", "(", "pred_matches", "[", "0", ",", ":", "]", ",", "pred_scores", ",", "true_matches", "[", "0", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.extract_objects_from_detections": [[31, 36], ["eval3d.prune_detections_2d_not_one_table"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.prune_detections_2d_not_one_table"], ["", "def", "extract_objects_from_detections", "(", "detections_gt", ",", "detections", ")", ":", "\n", "  ", "table_detection", "=", "detections_gt", "[", "0", "]", "\n", "detections_gt", "=", "detections_gt", "[", "1", ":", "]", "\n", "detections", "=", "prune_detections_2d_not_one_table", "(", "table_detection", ",", "detections", ")", "\n", "return", "table_detection", ",", "detections_gt", ",", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.is_point_in_detection_box": [[38, 48], ["None"], "function", ["None"], ["", "def", "is_point_in_detection_box", "(", "point", ",", "bbox", ")", ":", "\n", "  ", "if", "bbox", "[", "0", "]", "[", "0", "]", ">", "point", "[", "0", "]", ":", "\n", "    ", "return", "False", "\n", "", "if", "bbox", "[", "0", "]", "[", "1", "]", ">", "point", "[", "1", "]", ":", "\n", "    ", "return", "False", "\n", "", "if", "bbox", "[", "1", "]", "[", "0", "]", "<", "point", "[", "0", "]", ":", "\n", "    ", "return", "False", "\n", "", "if", "bbox", "[", "1", "]", "[", "1", "]", "<", "point", "[", "1", "]", ":", "\n", "    ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.prune_detections_2d_not_one_table": [[50, 60], ["eval3d.is_point_in_detection_box", "pruned_detections.append", "eval3d.is_point_in_detection_box", "pruned_detections.append"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.is_point_in_detection_box", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.is_point_in_detection_box"], ["", "def", "prune_detections_2d_not_one_table", "(", "table_detection", ",", "detections", ")", ":", "\n", "  ", "pruned_detections", "=", "[", "]", "\n", "for", "detection", "in", "detections", ":", "\n", "    ", "if", "is_point_in_detection_box", "(", "detection", ".", "bbox", "[", "0", "]", ",", "table_detection", ".", "bbox", ")", ":", "\n", "      ", "pruned_detections", ".", "append", "(", "detection", ")", "\n", "", "elif", "is_point_in_detection_box", "(", "detection", ".", "bbox", "[", "1", "]", ",", "table_detection", ".", "bbox", ")", ":", "\n", "      ", "pruned_detections", ".", "append", "(", "detection", ")", "\n", "", "else", ":", "\n", "      ", "continue", "\n", "", "", "return", "pruned_detections", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.get_size_predictions": [[62, 97], ["range", "range", "np.zeros.append", "np.zeros.append", "pruned_pred_scores.append", "len", "numpy.zeros", "len", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "int"], "function", ["None"], ["", "def", "get_size_predictions", "(", "pred_matches", ",", "true_matches", ",", "pred_scores", ",", "size_labels", ",", "size_name", ")", ":", "\n", "\n", "  ", "pruned_true_matches", "=", "[", "]", "\n", "pruned_pred_matches", "=", "[", "]", "\n", "pruned_pred_scores", "=", "[", "]", "\n", "\n", "# Prune ground truth to only contain easy samples.", "\n", "for", "ii", "in", "range", "(", "true_matches", ".", "shape", "[", "1", "]", ")", ":", "\n", "    ", "if", "size_labels", "[", "ii", "]", "!=", "size_name", ":", "\n", "      ", "continue", "\n", "", "pruned_true_matches", ".", "append", "(", "true_matches", "[", ":", ",", "ii", "]", ")", "\n", "# Prune any predictions that intersect with an ignore class.", "\n", "", "for", "ii", "in", "range", "(", "pred_matches", ".", "shape", "[", "1", "]", ")", ":", "\n", "    ", "gt_match", "=", "pred_matches", "[", "0", ",", "ii", "]", "\n", "# Check if there was a match at all", "\n", "if", "gt_match", "!=", "-", "1", ":", "\n", "# Check if it fired on an unkown class.", "\n", "      ", "if", "size_labels", "[", "int", "(", "gt_match", ")", "]", "!=", "size_name", ":", "\n", "        ", "continue", "\n", "# Remove all non-object predictions", "\n", "", "", "if", "gt_match", "==", "-", "1", ":", "\n", "      ", "continue", "\n", "", "pruned_pred_matches", ".", "append", "(", "pred_matches", "[", ":", ",", "ii", "]", ")", "\n", "pruned_pred_scores", ".", "append", "(", "pred_scores", "[", "ii", "]", ")", "\n", "\n", "", "if", "len", "(", "pruned_true_matches", ")", "==", "0", ":", "\n", "    ", "pruned_true_matches", "=", "np", ".", "zeros", "(", "[", "1", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "    ", "pruned_true_matches", "=", "np", ".", "array", "(", "pruned_true_matches", ")", ".", "T", "\n", "", "if", "len", "(", "pruned_pred_matches", ")", "==", "0", ":", "\n", "    ", "pruned_pred_matches", "=", "np", ".", "zeros", "(", "[", "1", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "    ", "pruned_pred_matches", "=", "np", ".", "array", "(", "pruned_pred_matches", ")", ".", "T", "\n", "", "pred_scores", "=", "np", ".", "array", "(", "pruned_pred_scores", ")", ".", "T", "\n", "return", "pruned_true_matches", ",", "pruned_pred_matches", ",", "pruned_pred_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.remove_ignore_class": [[99, 133], ["range", "range", "np.zeros.append", "np.zeros.append", "pruned_pred_scores.append", "pruned_detections_indices.append", "len", "numpy.zeros", "len", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "int"], "function", ["None"], ["", "def", "remove_ignore_class", "(", "pred_matches", ",", "true_matches", ",", "pred_scores", ",", "ignore_labels", ")", ":", "\n", "\n", "  ", "pruned_true_matches", "=", "[", "]", "\n", "pruned_pred_matches", "=", "[", "]", "\n", "pruned_pred_scores", "=", "[", "]", "\n", "pruned_detections_indices", "=", "[", "]", "\n", "\n", "# Prune ground truth for ignore classes.", "\n", "for", "ii", "in", "range", "(", "true_matches", ".", "shape", "[", "1", "]", ")", ":", "\n", "    ", "if", "ignore_labels", "[", "ii", "]", ":", "\n", "      ", "continue", "\n", "", "pruned_true_matches", ".", "append", "(", "true_matches", "[", ":", ",", "ii", "]", ")", "\n", "# Prune any predictions that intersect with an ignore class.", "\n", "", "for", "ii", "in", "range", "(", "pred_matches", ".", "shape", "[", "1", "]", ")", ":", "\n", "    ", "gt_match", "=", "pred_matches", "[", "0", ",", "ii", "]", "\n", "# Check if there was a match at all", "\n", "if", "gt_match", "!=", "-", "1", ":", "\n", "# Check if it fired on an unkown class.", "\n", "      ", "if", "ignore_labels", "[", "int", "(", "gt_match", ")", "]", ":", "\n", "        ", "continue", "\n", "", "", "pruned_pred_matches", ".", "append", "(", "pred_matches", "[", ":", ",", "ii", "]", ")", "\n", "pruned_pred_scores", ".", "append", "(", "pred_scores", "[", "ii", "]", ")", "\n", "pruned_detections_indices", ".", "append", "(", "ii", ")", "\n", "\n", "", "if", "len", "(", "pruned_true_matches", ")", "==", "0", ":", "\n", "    ", "pruned_true_matches", "=", "np", ".", "zeros", "(", "[", "1", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "    ", "pruned_true_matches", "=", "np", ".", "array", "(", "pruned_true_matches", ")", ".", "T", "\n", "", "if", "len", "(", "pruned_pred_matches", ")", "==", "0", ":", "\n", "    ", "pruned_pred_matches", "=", "np", ".", "zeros", "(", "[", "1", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "    ", "pruned_pred_matches", "=", "np", ".", "array", "(", "pruned_pred_matches", ")", ".", "T", "\n", "", "pred_scores", "=", "np", ".", "array", "(", "pruned_pred_scores", ")", ".", "T", "\n", "return", "pruned_true_matches", ",", "pruned_pred_matches", ",", "pruned_pred_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.assign_known_depth": [[135, 155], ["new_detections.append", "simnet.lib.net.post_processing.nms.get_2d_one_way_iou", "simnet.lib.net.post_processing.epnp.find_absolute_scale"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.nms.get_2d_one_way_iou", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.find_absolute_scale"], ["", "def", "assign_known_depth", "(", "detections", ",", "gt_detections", ")", ":", "\n", "  ", "new_detections", "=", "[", "]", "\n", "for", "detection", "in", "detections", ":", "\n", "    ", "best_overlap_score", "=", "0.0", "\n", "best_gt_match", "=", "None", "\n", "for", "gt_detection", "in", "gt_detections", ":", "\n", "      ", "overlap_score", "=", "nms", ".", "get_2d_one_way_iou", "(", "gt_detection", ",", "detection", ")", "\n", "if", "overlap_score", ">", "best_overlap_score", ":", "\n", "        ", "best_gt_match", "=", "gt_detection", "\n", "best_overlap_score", "=", "overlap_score", "\n", "", "", "if", "best_gt_match", "is", "not", "None", ":", "\n", "      ", "new_z", "=", "best_gt_match", ".", "camera_T_object", "[", "2", ",", "3", "]", "\n", "camera_T_object", ",", "scale_matrix", "=", "epnp", ".", "find_absolute_scale", "(", "\n", "new_z", ",", "detection", ".", "camera_T_object", ",", "detection", ".", "scale_matrix", "\n", ")", "\n", "detection", ".", "camera_T_object", "=", "camera_T_object", "\n", "detection", ".", "scale_matrix", "=", "scale_matrix", "\n", "", "new_detections", ".", "append", "(", "detection", ")", "\n", "\n", "", "return", "new_detections", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.assign_rotation_value": [[157, 174], ["numpy.eye", "numpy.eye", "range", "indices.remove", "numpy.abs", "numpy.abs"], "function", ["None"], ["", "def", "assign_rotation_value", "(", "detection", ",", "gt_detection", ")", ":", "\n", "  ", "detection", ".", "camera_T_object", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "eye", "(", "3", ")", "\n", "gt_scale_matrix", "=", "gt_detection", ".", "scale_matrix", "\n", "scale_matrix", "=", "detection", ".", "scale_matrix", "\n", "new_scale_matrix", "=", "np", ".", "eye", "(", "4", ")", "\n", "indices", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "for", "ii", "in", "range", "(", "3", ")", ":", "\n", "    ", "scale_value", "=", "scale_matrix", "[", "ii", ",", "ii", "]", "\n", "best_scale_index", "=", "0", "\n", "best_match", "=", "np", ".", "inf", "\n", "for", "jj", "in", "indices", ":", "\n", "      ", "if", "np", ".", "abs", "(", "scale_value", "-", "gt_scale_matrix", "[", "jj", ",", "jj", "]", ")", "<", "best_match", ":", "\n", "        ", "best_scale_index", "=", "jj", "\n", "best_match", "=", "np", ".", "abs", "(", "scale_value", "-", "gt_scale_matrix", "[", "jj", ",", "jj", "]", ")", "\n", "", "", "new_scale_matrix", "[", "best_scale_index", ",", "best_scale_index", "]", "=", "scale_value", "\n", "indices", ".", "remove", "(", "best_scale_index", ")", "\n", "", "detection", ".", "scale_matrix", "=", "new_scale_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.assign_known_rotation": [[176, 195], ["range", "len", "numpy.eye", "new_detections.append", "simnet.lib.net.post_processing.nms.get_2d_one_way_iou", "eval3d.assign_rotation_value"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.nms.get_2d_one_way_iou", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.assign_rotation_value"], ["", "def", "assign_known_rotation", "(", "detections", ",", "gt_detections", ")", ":", "\n", "  ", "new_detections", "=", "[", "]", "\n", "#Remove rotation from ground truth.", "\n", "for", "ii", "in", "range", "(", "len", "(", "gt_detections", ")", ")", ":", "\n", "    ", "gt_detections", "[", "ii", "]", ".", "camera_T_object", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "eye", "(", "3", ")", "\n", "", "for", "detection", "in", "detections", ":", "\n", "    ", "best_overlap_score", "=", "0.0", "\n", "best_gt_match", "=", "None", "\n", "for", "gt_detection", "in", "gt_detections", ":", "\n", "      ", "overlap_score", "=", "nms", ".", "get_2d_one_way_iou", "(", "gt_detection", ",", "detection", ")", "\n", "if", "overlap_score", ">", "best_overlap_score", ":", "\n", "        ", "best_gt_match", "=", "gt_detection", "\n", "best_overlap_score", "=", "overlap_score", "\n", "", "", "if", "best_gt_match", "is", "not", "None", ":", "\n", "      ", "new_z", "=", "best_gt_match", ".", "camera_T_object", "[", "2", ",", "3", "]", "\n", "assign_rotation_value", "(", "detection", ",", "best_gt_match", ")", "\n", "", "new_detections", ".", "append", "(", "detection", ")", "\n", "\n", "", "return", "new_detections", ",", "gt_detections", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.assign_size_labels": [[197, 204], ["range", "len", "numpy.prod", "numpy.diag"], "function", ["None"], ["", "def", "assign_size_labels", "(", "gt_detections", ",", "size_threshold", "=", "0.08", ")", ":", "\n", "  ", "for", "ii", "in", "range", "(", "len", "(", "gt_detections", ")", ")", ":", "\n", "    ", "scale_matrix", "=", "gt_detections", "[", "ii", "]", ".", "scale_matrix", "\n", "if", "np", ".", "prod", "(", "np", ".", "diag", "(", "scale_matrix", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", ")", "<", "size_threshold", "**", "3", ":", "\n", "      ", "gt_detections", "[", "ii", "]", ".", "size_label", "=", "'small'", "\n", "", "else", ":", "\n", "      ", "gt_detections", "[", "ii", "]", ".", "size_label", "=", "'large'", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.measure_3d_iou": [[206, 258], ["eval3d.compute_3d_matches", "range", "eval3d.remove_ignore_class", "eval3d.assign_known_depth", "eval3d.assign_known_rotation", "pred_RTs.append", "pred_scales.append", "pred_scores.append", "gt_RTs.append", "gt_scales.append", "size_labels.append", "ignore_labels.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "int", "sorted_detections.append", "sorted_pred_scores.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "numpy.diag", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.compute_3d_matches", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.remove_ignore_class", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.assign_known_depth", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.assign_known_rotation"], ["", "", "", "def", "measure_3d_iou", "(", "detections", ",", "gt_detections", ",", "known_depth", "=", "False", ",", "known_rotation", "=", "False", ")", ":", "\n", "  ", "gt_RTs", "=", "[", "]", "\n", "gt_scales", "=", "[", "]", "\n", "pred_RTs", "=", "[", "]", "\n", "pred_scales", "=", "[", "]", "\n", "pred_scores", "=", "[", "]", "\n", "size_labels", "=", "[", "]", "\n", "ignore_labels", "=", "[", "]", "\n", "if", "known_depth", ":", "\n", "    ", "detections", "=", "assign_known_depth", "(", "detections", ",", "gt_detections", ")", "\n", "", "if", "known_rotation", ":", "\n", "    ", "detections", ",", "gt_detections", "=", "assign_known_rotation", "(", "detections", ",", "gt_detections", ")", "\n", "", "for", "detection", "in", "detections", ":", "\n", "    ", "pred_RTs", ".", "append", "(", "detection", ".", "camera_T_object", ")", "\n", "pred_scales", ".", "append", "(", "np", ".", "diag", "(", "detection", ".", "scale_matrix", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", ")", "\n", "pred_scores", ".", "append", "(", "detection", ".", "score", ")", "\n", "\n", "", "for", "detection", "in", "gt_detections", ":", "\n", "    ", "gt_RTs", ".", "append", "(", "detection", ".", "camera_T_object", ")", "\n", "gt_scales", ".", "append", "(", "np", ".", "diag", "(", "detection", ".", "scale_matrix", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", ")", "\n", "size_labels", ".", "append", "(", "detection", ".", "size_label", ")", "\n", "ignore_labels", ".", "append", "(", "detection", ".", "ignore", ")", "\n", "\n", "", "true_matches", ",", "pred_matches", ",", "_", ",", "indices", "=", "compute_3d_matches", "(", "\n", "'single_class'", ",", "\n", "np", ".", "array", "(", "gt_RTs", ")", ",", "\n", "np", ".", "array", "(", "gt_scales", ")", ",", "\n", "np", ".", "array", "(", "pred_scores", ")", ",", "\n", "np", ".", "array", "(", "pred_RTs", ")", ",", "\n", "np", ".", "array", "(", "pred_scales", ")", ",", "\n", "EVAL_IOUS", ",", "\n", "known_depth", "=", "known_depth", "\n", ")", "\n", "# Resort pred scores and class labels", "\n", "sorted_pred_scores", "=", "[", "]", "\n", "sorted_class_labels", "=", "[", "]", "\n", "sorted_detections", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "pred_matches", ".", "shape", "[", "1", "]", ")", ":", "\n", "    ", "detections", "[", "indices", "[", "ii", "]", "]", ".", "success", "=", "int", "(", "pred_matches", "[", "0", ",", "ii", "]", ">", "-", "1", ")", "\n", "sorted_detections", ".", "append", "(", "detections", "[", "ii", "]", ")", "\n", "sorted_pred_scores", ".", "append", "(", "pred_scores", "[", "ii", "]", ")", "\n", "", "for", "detection", "in", "gt_detections", ":", "\n", "    ", "detection", ".", "success", "=", "-", "1", "\n", "if", "detection", ".", "ignore", ":", "\n", "      ", "detection", ".", "success", "=", "-", "2", "\n", "#sorted_detections.append(detection)", "\n", "# Apply ignore predictions.", "\n", "", "", "true_matches", ",", "pred_matches", ",", "sorted_pred_scores", "=", "remove_ignore_class", "(", "\n", "copy", ".", "deepcopy", "(", "pred_matches", ")", ",", "copy", ".", "deepcopy", "(", "true_matches", ")", ",", "copy", ".", "deepcopy", "(", "sorted_pred_scores", ")", ",", "\n", "ignore_labels", "\n", ")", "\n", "return", "true_matches", ",", "pred_matches", ",", "sorted_pred_scores", ",", "size_labels", ",", "ignore_labels", ",", "sorted_detections", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.compute_3d_iou_new": [[407, 469], ["eval3d.compute_3d_iou_new.asymmetric_3d_iou"], "function", ["None"], ["", "", "def", "compute_3d_iou_new", "(", "RT_1", ",", "RT_2", ",", "scales_1", ",", "scales_2", ",", "debug", "=", "False", ",", "known_depth", "=", "True", ")", ":", "\n", "  ", "'''Computes IoU overlaps between two 3d bboxes.\n     bbox_3d_1, bbox_3d_1: [3, 8]\n  '''", "\n", "\n", "# flatten masks", "\n", "def", "asymmetric_3d_iou", "(", "RT_1", ",", "RT_2", ",", "scales_1", ",", "scales_2", ")", ":", "\n", "    ", "assert", "RT_1", ".", "shape", "==", "(", "4", ",", "4", ")", "\n", "assert", "RT_2", ".", "shape", "==", "(", "4", ",", "4", ")", "\n", "assert", "scales_1", ".", "shape", "==", "(", "3", ",", ")", "\n", "assert", "scales_2", ".", "shape", "==", "(", "3", ",", ")", "\n", "noc_cube_1", "=", "get_3d_bbox", "(", "scales_1", ",", "0", ")", "\n", "bbox_3d_1", "=", "transform_coordinates_3d", "(", "noc_cube_1", ",", "RT_1", ")", "\n", "assert", "bbox_3d_1", ".", "shape", "==", "(", "3", ",", "8", ")", "\n", "\n", "noc_cube_2", "=", "get_3d_bbox", "(", "scales_2", ",", "0", ")", "\n", "bbox_3d_2", "=", "transform_coordinates_3d", "(", "noc_cube_2", ",", "RT_2", ")", "\n", "assert", "bbox_3d_2", ".", "shape", "==", "(", "3", ",", "8", ")", "\n", "\n", "bbox_1_max", "=", "np", ".", "amax", "(", "bbox_3d_1", ",", "axis", "=", "1", ")", "\n", "bbox_1_min", "=", "np", ".", "amin", "(", "bbox_3d_1", ",", "axis", "=", "1", ")", "\n", "bbox_2_max", "=", "np", ".", "amax", "(", "bbox_3d_2", ",", "axis", "=", "1", ")", "\n", "bbox_2_min", "=", "np", ".", "amin", "(", "bbox_3d_2", ",", "axis", "=", "1", ")", "\n", "\n", "assert", "bbox_1_min", ".", "shape", "==", "(", "3", ",", ")", "\n", "assert", "bbox_1_max", ".", "shape", "==", "(", "3", ",", ")", "\n", "assert", "bbox_2_min", ".", "shape", "==", "(", "3", ",", ")", "\n", "assert", "bbox_2_max", ".", "shape", "==", "(", "3", ",", ")", "\n", "\n", "overlap_min", "=", "np", ".", "maximum", "(", "bbox_1_min", ",", "bbox_2_min", ")", "\n", "overlap_max", "=", "np", ".", "minimum", "(", "bbox_1_max", ",", "bbox_2_max", ")", "\n", "\n", "# intersections and union", "\n", "if", "np", ".", "amin", "(", "overlap_max", "-", "overlap_min", ")", "<", "0", ":", "\n", "      ", "intersections", "=", "0", "\n", "", "else", ":", "\n", "      ", "intersections", "=", "np", ".", "prod", "(", "overlap_max", "-", "overlap_min", ")", "\n", "", "union", "=", "np", ".", "prod", "(", "bbox_1_max", "-", "bbox_1_min", ")", "+", "np", ".", "prod", "(", "bbox_2_max", "-", "bbox_2_min", ")", "-", "intersections", "\n", "overlaps", "=", "intersections", "/", "union", "\n", "\n", "if", "False", ":", "\n", "      ", "print", "(", "'bbox_3d_1:'", ",", "bbox_3d_1", ")", "\n", "print", "(", "'bbox_3d_2:'", ",", "bbox_3d_2", ")", "\n", "print", "(", "'bbox_1_min:'", ",", "bbox_1_min", ")", "\n", "print", "(", "'bbox_1_max:'", ",", "bbox_1_max", ")", "\n", "print", "(", "'bbox_2_min:'", ",", "bbox_2_min", ")", "\n", "print", "(", "'bbox_2_max:'", ",", "bbox_2_max", ")", "\n", "print", "(", "'overlap_min'", ",", "overlap_min", ")", "\n", "print", "(", "'overlap_max'", ",", "overlap_max", ")", "\n", "print", "(", "'intersections:'", ",", "intersections", ")", "\n", "print", "(", "'union:'", ",", "union", ")", "\n", "print", "(", "'overlaps:'", ",", "overlaps", ")", "\n", "\n", "", "assert", "not", "np", ".", "isnan", "(", "overlaps", ")", "\n", "return", "overlaps", "\n", "\n", "", "if", "RT_1", "is", "None", "or", "RT_2", "is", "None", ":", "\n", "    ", "return", "-", "1", "\n", "\n", "", "max_iou", "=", "asymmetric_3d_iou", "(", "RT_1", ",", "RT_2", ",", "scales_1", ",", "scales_2", ")", "\n", "\n", "return", "max_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.get_3d_bbox": [[471, 489], ["bbox_3d.transpose.transpose", "numpy.array"], "function", ["None"], ["", "def", "get_3d_bbox", "(", "scale", ",", "shift", "=", "0", ")", ":", "\n", "  ", "\"\"\"\n  Input: \n    scale: [3] or scalar\n    shift: [3] or scalar\n  Return \n    bbox_3d: [3, N]\n\n  \"\"\"", "\n", "bbox_3d", "=", "np", ".", "array", "(", "\n", "[", "[", "scale", "[", "0", "]", "/", "2", ",", "+", "scale", "[", "1", "]", "/", "2", ",", "scale", "[", "2", "]", "/", "2", "]", ",", "[", "scale", "[", "0", "]", "/", "2", ",", "+", "scale", "[", "1", "]", "/", "2", ",", "-", "scale", "[", "2", "]", "/", "2", "]", ",", "\n", "[", "-", "scale", "[", "0", "]", "/", "2", ",", "+", "scale", "[", "1", "]", "/", "2", ",", "scale", "[", "2", "]", "/", "2", "]", ",", "[", "-", "scale", "[", "0", "]", "/", "2", ",", "+", "scale", "[", "1", "]", "/", "2", ",", "-", "scale", "[", "2", "]", "/", "2", "]", ",", "\n", "[", "+", "scale", "[", "0", "]", "/", "2", ",", "-", "scale", "[", "1", "]", "/", "2", ",", "scale", "[", "2", "]", "/", "2", "]", ",", "[", "+", "scale", "[", "0", "]", "/", "2", ",", "-", "scale", "[", "1", "]", "/", "2", ",", "-", "scale", "[", "2", "]", "/", "2", "]", ",", "\n", "[", "-", "scale", "[", "0", "]", "/", "2", ",", "-", "scale", "[", "1", "]", "/", "2", ",", "scale", "[", "2", "]", "/", "2", "]", ",", "[", "-", "scale", "[", "0", "]", "/", "2", ",", "-", "scale", "[", "1", "]", "/", "2", ",", "-", "scale", "[", "2", "]", "/", "2", "]", "]", "\n", ")", "+", "shift", "\n", "\n", "bbox_3d", "=", "bbox_3d", ".", "transpose", "(", ")", "\n", "return", "bbox_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.transform_coordinates_3d": [[491, 508], ["numpy.vstack", "len", "numpy.ones"], "function", ["None"], ["", "def", "transform_coordinates_3d", "(", "coordinates", ",", "RT", ")", ":", "\n", "  ", "\"\"\"\n  Input: \n    coordinates: [3, N]\n    RT: [4, 4]\n  Return \n    new_coordinates: [3, N]\n\n  \"\"\"", "\n", "assert", "RT", ".", "shape", "==", "(", "4", ",", "4", ")", "\n", "assert", "len", "(", "coordinates", ".", "shape", ")", "==", "2", "\n", "assert", "coordinates", ".", "shape", "[", "0", "]", "==", "3", "\n", "coordinates", "=", "np", ".", "vstack", "(", "[", "coordinates", ",", "np", ".", "ones", "(", "(", "1", ",", "coordinates", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "]", ")", "\n", "new_coordinates", "=", "RT", "@", "coordinates", "\n", "new_coordinates", "=", "new_coordinates", "[", ":", "3", ",", ":", "]", "/", "new_coordinates", "[", "3", ",", ":", "]", "\n", "assert", "new_coordinates", ".", "shape", "[", "0", "]", "==", "3", "\n", "return", "new_coordinates", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.resolve_z_ambiguity": [[510, 516], ["numpy.eye", "numpy.diag", "simnet.lib.net.post_processing.epnp.find_absolute_scale", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.epnp.find_absolute_scale"], ["", "def", "resolve_z_ambiguity", "(", "RT", ",", "scale", ",", "gt_RT", ")", ":", "\n", "  ", "new_z", "=", "gt_RT", "[", "2", ",", "3", "]", "\n", "object_scale", "=", "np", ".", "eye", "(", "4", ")", "\n", "object_scale", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "diag", "(", "scale", ")", "\n", "scaled_RT", ",", "scaled_object_scale", "=", "epnp", ".", "find_absolute_scale", "(", "new_z", ",", "RT", ",", "object_scale", ")", "\n", "return", "scaled_RT", ",", "np", ".", "diag", "(", "scaled_object_scale", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.compute_3d_matches": [[518, 595], ["numpy.zeros", "numpy.zeros", "range", "len", "enumerate", "pred_scores[].copy", "pred_scales[].copy", "pred_RTs[].copy", "range", "numpy.ones", "numpy.ones", "range", "IPython.embed", "numpy.argsort", "eval3d.compute_3d_iou_new", "numpy.argsort", "numpy.where"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.compute_3d_iou_new"], ["", "def", "compute_3d_matches", "(", "\n", "class_name", ",", "\n", "gt_RTs", ",", "\n", "gt_scales", ",", "\n", "pred_scores", ",", "\n", "pred_RTs", ",", "\n", "pred_scales", ",", "\n", "iou_3d_thresholds", ",", "\n", "score_threshold", "=", "0", ",", "\n", "known_depth", "=", "False", ",", "\n", "debug", "=", "False", "\n", ")", ":", "\n", "  ", "\"\"\"Finds matches between prediction and ground truth instances.\n  Returns:\n    gt_matches: 2-D array. For each GT box it has the index of the matched\n          predicted box.\n    pred_matches: 2-D array. For each predicted box, it has the index of\n          the matched ground truth box.\n    overlaps: [pred_boxes, gt_boxes] IoU overlaps.\n  \"\"\"", "\n", "#assert gt_scales.shape[1] == 3", "\n", "#assert pred_scales.shape[1] == 3", "\n", "\n", "num_pred", "=", "pred_scales", ".", "shape", "[", "0", "]", "\n", "num_gt", "=", "gt_scales", ".", "shape", "[", "0", "]", "\n", "indices", "=", "np", ".", "zeros", "(", "0", ")", "\n", "\n", "if", "num_pred", ":", "\n", "# Sort predictions by score from high to low", "\n", "    ", "indices", "=", "np", ".", "argsort", "(", "pred_scores", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "pred_scores", "=", "pred_scores", "[", "indices", "]", ".", "copy", "(", ")", "\n", "pred_scales", "=", "pred_scales", "[", "indices", ",", ":", "]", ".", "copy", "(", ")", "\n", "pred_RTs", "=", "pred_RTs", "[", "indices", ",", ":", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n", "# Compute IoU overlaps [pred_bboxs gt_bboxs]", "\n", "", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_pred", ",", "num_gt", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_pred", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "num_gt", ")", ":", "\n", "      ", "overlaps", "[", "i", ",", "j", "]", "=", "compute_3d_iou_new", "(", "\n", "pred_RTs", "[", "i", ",", ":", ",", ":", "]", ",", "gt_RTs", "[", "j", ",", ":", ",", ":", "]", ",", "pred_scales", "[", "i", ",", ":", "]", ",", "gt_scales", "[", "j", ",", ":", "]", ",", "class_name", "\n", ")", "\n", "# Loop through predictions and find matching ground truth boxes", "\n", "", "", "num_iou_3d_thres", "=", "len", "(", "iou_3d_thresholds", ")", "\n", "pred_matches", "=", "-", "1", "*", "np", ".", "ones", "(", "[", "num_iou_3d_thres", ",", "num_pred", "]", ")", "\n", "gt_matches", "=", "-", "1", "*", "np", ".", "ones", "(", "[", "num_iou_3d_thres", ",", "num_gt", "]", ")", "\n", "\n", "for", "s", ",", "iou_thres", "in", "enumerate", "(", "iou_3d_thresholds", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "num_pred", ")", ":", "\n", "# Find best matching ground truth box", "\n", "# 1. Sort matches by score", "\n", "      ", "sorted_ixs", "=", "np", ".", "argsort", "(", "overlaps", "[", "i", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "# 2. Remove low scores", "\n", "low_score_idx", "=", "np", ".", "where", "(", "overlaps", "[", "i", ",", "sorted_ixs", "]", "<", "score_threshold", ")", "[", "0", "]", "\n", "if", "low_score_idx", ".", "size", ">", "0", ":", "\n", "        ", "sorted_ixs", "=", "sorted_ixs", "[", ":", "low_score_idx", "[", "0", "]", "]", "\n", "# 3. Find the match", "\n", "", "for", "j", "in", "sorted_ixs", ":", "\n", "# If ground truth box is already matched, go to next one", "\n", "#print('gt_match: ', gt_match[j])", "\n", "        ", "if", "gt_matches", "[", "s", ",", "j", "]", ">", "-", "1", ":", "\n", "          ", "continue", "\n", "# If we reach IoU smaller than the threshold, end the loop", "\n", "", "iou", "=", "overlaps", "[", "i", ",", "j", "]", "\n", "#print('iou: ', iou)", "\n", "if", "iou", "<", "iou_thres", ":", "\n", "          ", "break", "\n", "\n", "", "if", "iou", ">", "iou_thres", ":", "\n", "          ", "gt_matches", "[", "s", ",", "j", "]", "=", "i", "\n", "pred_matches", "[", "s", ",", "i", "]", "=", "j", "\n", "break", "\n", "\n", "", "", "", "", "if", "debug", ":", "\n", "    ", "IPython", ".", "embed", "(", ")", "\n", "\n", "", "return", "gt_matches", ",", "pred_matches", ",", "overlaps", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.compute_ap_from_matches_scores": [[597, 634], ["numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "len", "len", "numpy.argsort", "numpy.cumsum", "numpy.cumsum().astype", "len", "numpy.maximum", "IPython.embed", "numpy.arange", "len", "numpy.where", "len", "numpy.cumsum"], "function", ["None"], ["", "def", "compute_ap_from_matches_scores", "(", "pred_match", ",", "pred_scores", ",", "gt_match", ",", "debug", "=", "False", ")", ":", "\n", "# sort the scores from high to low", "\n", "# print(pred_match.shape, pred_scores.shape)", "\n", "  ", "assert", "len", "(", "pred_match", ".", "shape", ")", "==", "1", "\n", "assert", "len", "(", "gt_match", ".", "shape", ")", "==", "1", "\n", "assert", "pred_match", ".", "shape", "[", "0", "]", "==", "pred_scores", ".", "shape", "[", "0", "]", "\n", "\n", "if", "gt_match", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "    ", "return", "0.", "\n", "\n", "", "score_indices", "=", "np", ".", "argsort", "(", "pred_scores", ")", "[", ":", ":", "-", "1", "]", "\n", "pred_scores", "=", "pred_scores", "[", "score_indices", "]", "\n", "pred_match", "=", "pred_match", "[", "score_indices", "]", "\n", "\n", "precisions", "=", "np", ".", "cumsum", "(", "pred_match", ">", "-", "1", ")", "/", "(", "np", ".", "arange", "(", "len", "(", "pred_match", ")", ")", "+", "1", ")", "\n", "recalls", "=", "np", ".", "cumsum", "(", "pred_match", ">", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "len", "(", "gt_match", ")", "\n", "\n", "# Pad with start and end values to simplify the math", "\n", "precisions", "=", "np", ".", "concatenate", "(", "[", "[", "0", "]", ",", "precisions", ",", "[", "0", "]", "]", ")", "\n", "recalls", "=", "np", ".", "concatenate", "(", "[", "[", "0", "]", ",", "recalls", ",", "[", "1", "]", "]", ")", "\n", "\n", "# Ensure precision values decrease but don't increase. This way, the", "\n", "# precision value at each recall threshold is the maximum it can be", "\n", "# for all following recall thresholds, as specified by the VOC paper.", "\n", "#precisions2 = precisions", "\n", "for", "i", "in", "range", "(", "len", "(", "precisions", ")", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "    ", "precisions", "[", "i", "]", "=", "np", ".", "maximum", "(", "precisions", "[", "i", "]", ",", "precisions", "[", "i", "+", "1", "]", ")", "\n", "\n", "# Compute mean AP over recall range", "\n", "", "indices", "=", "np", ".", "where", "(", "recalls", "[", ":", "-", "1", "]", "!=", "recalls", "[", "1", ":", "]", ")", "[", "0", "]", "+", "1", "\n", "ap", "=", "np", ".", "sum", "(", "(", "recalls", "[", "indices", "]", "-", "recalls", "[", "indices", "-", "1", "]", ")", "*", "precisions", "[", "indices", "]", ")", "\n", "#assert 0 <= ap <= 1.", "\n", "\n", "if", "debug", ":", "\n", "    ", "IPython", ".", "embed", "(", ")", "\n", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.eval3d.compute_pr_curve_from_matches_scores": [[636, 653], ["len", "len", "numpy.argsort", "numpy.cumsum", "numpy.cumsum().astype", "len", "numpy.arange", "len", "numpy.cumsum"], "function", ["None"], ["", "def", "compute_pr_curve_from_matches_scores", "(", "pred_match", ",", "pred_scores", ",", "gt_match", ",", "debug", "=", "False", ")", ":", "\n", "# sort the scores from high to low", "\n", "# print(pred_match.shape, pred_scores.shape)", "\n", "  ", "assert", "len", "(", "pred_match", ".", "shape", ")", "==", "1", "\n", "assert", "len", "(", "gt_match", ".", "shape", ")", "==", "1", "\n", "assert", "pred_match", ".", "shape", "[", "0", "]", "==", "pred_scores", ".", "shape", "[", "0", "]", "\n", "\n", "if", "gt_match", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "    ", "return", "0.", "\n", "\n", "", "score_indices", "=", "np", ".", "argsort", "(", "pred_scores", ")", "[", ":", ":", "-", "1", "]", "\n", "pred_scores", "=", "pred_scores", "[", "score_indices", "]", "\n", "pred_match", "=", "pred_match", "[", "score_indices", "]", "\n", "precisions", "=", "np", ".", "cumsum", "(", "pred_match", ">", "-", "1", ")", "/", "(", "np", ".", "arange", "(", "len", "(", "pred_match", ")", ")", "+", "1", ")", "\n", "recalls", "=", "np", ".", "cumsum", "(", "pred_match", ">", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "len", "(", "gt_match", ")", "\n", "\n", "return", "precisions", ",", "recalls", "\n", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.__init__": [[15, 21], ["torch.SmoothL1Loss", "torch.SmoothL1Loss"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "depth_pred", ",", "loss_multiplier", ")", ":", "\n", "    ", "self", ".", "depth_pred", "=", "depth_pred", "\n", "self", ".", "is_numpy", "=", "False", "\n", "self", ".", "loss", "=", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "#self.loss = nn.MSELoss()", "\n", "self", ".", "loss_multiplier", "=", "loss_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.convert_to_numpy_from_torch": [[23, 26], ["numpy.ascontiguousarray", "depth_outputs.DepthOutput.depth_pred.cpu().numpy", "depth_outputs.DepthOutput.depth_pred.cpu"], "methods", ["None"], ["", "def", "convert_to_numpy_from_torch", "(", "self", ")", ":", "\n", "    ", "self", ".", "depth_pred", "=", "np", ".", "ascontiguousarray", "(", "self", ".", "depth_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "is_numpy", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.convert_to_torch_from_numpy": [[27, 31], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.ascontiguousarray"], "methods", ["None"], ["", "def", "convert_to_torch_from_numpy", "(", "self", ")", ":", "\n", "    ", "self", ".", "depth_pred", "[", "self", ".", "depth_pred", ">", "_MAX_DISP", "]", "=", "_MAX_DISP", "-", "1", "\n", "self", ".", "depth_pred", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "self", ".", "depth_pred", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "is_numpy", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.get_visualization_img": [[32, 42], ["depth_outputs.disp_map_visualize", "depth_outputs.DepthOutput.convert_to_numpy_from_torch", "depth_outputs.disp_map_visualize"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.disp_map_visualize", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.convert_to_numpy_from_torch", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.disp_map_visualize"], ["", "def", "get_visualization_img", "(", "self", ",", "left_img_np", ",", "corner_scale", "=", "1", ",", "raw_disp", "=", "True", ")", ":", "\n", "    ", "if", "not", "self", ".", "is_numpy", ":", "\n", "      ", "self", ".", "convert_to_numpy_from_torch", "(", ")", "\n", "", "disp", "=", "self", ".", "depth_pred", "[", "0", "]", "\n", "\n", "if", "raw_disp", ":", "\n", "      ", "return", "disp_map_visualize", "(", "disp", ")", "\n", "", "disp_scaled", "=", "disp", "[", ":", ":", "corner_scale", ",", ":", ":", "corner_scale", "]", "\n", "left_img_np", "[", ":", "disp_scaled", ".", "shape", "[", "0", "]", ",", "-", "disp_scaled", ".", "shape", "[", "1", "]", ":", "]", "=", "disp_map_visualize", "(", "disp_scaled", ")", "\n", "return", "left_img_np", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.DepthOutput.compute_loss": [[43, 61], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "depth_target_batch.to.to.to", "ValueError", "depth_target_stacked.append", "torch.device", "torch.device", "torch.device", "torch.device", "depth_outputs.DepthOutput.loss", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "depth_targets", ",", "log", ",", "name", ")", ":", "\n", "    ", "if", "self", ".", "is_numpy", ":", "\n", "      ", "raise", "ValueError", "(", "\"Output is not in torch mode\"", ")", "\n", "", "depth_target_stacked", "=", "[", "]", "\n", "for", "depth_target", "in", "depth_targets", ":", "\n", "      ", "depth_target_stacked", ".", "append", "(", "depth_target", ".", "depth_pred", ")", "\n", "", "depth_target_batch", "=", "torch", ".", "stack", "(", "depth_target_stacked", ")", "\n", "depth_target_batch", "=", "depth_target_batch", ".", "to", "(", "torch", ".", "device", "(", "'cuda:0'", ")", ")", "\n", "scale_factor", "=", "self", ".", "depth_pred", ".", "shape", "[", "2", "]", "/", "depth_target_batch", ".", "shape", "[", "2", "]", "\n", "if", "scale_factor", "!=", "1.0", ":", "\n", "      ", "depth_target_batch", "=", "F", ".", "interpolate", "(", "\n", "depth_target_batch", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "scale_factor", "=", "scale_factor", "\n", ")", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "# scale down disparity by same factor as spatial resize", "\n", "depth_target_batch", "=", "depth_target_batch", "*", "scale_factor", "\n", "", "depth_loss", "=", "self", ".", "loss", "(", "self", ".", "depth_pred", ",", "depth_target_batch", ")", "/", "scale_factor", "\n", "log", "[", "name", "]", "=", "depth_loss", "\n", "return", "self", ".", "loss_multiplier", "*", "depth_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.turbo_vis": [[63, 83], ["x.clip.clip", "len", "heatmap.astype.astype", "numpy.min", "numpy.max", "numpy.array", "numpy.np.float64"], "function", ["None"], ["", "", "def", "turbo_vis", "(", "heatmap", ",", "normalize", "=", "False", ",", "uint8_output", "=", "False", ")", ":", "\n", "  ", "assert", "len", "(", "heatmap", ".", "shape", ")", "==", "2", "\n", "if", "normalize", ":", "\n", "    ", "heatmap", "=", "heatmap", ".", "astype", "(", "np", ".", "float32", ")", "\n", "heatmap", "-=", "np", ".", "min", "(", "heatmap", ")", "\n", "heatmap", "/=", "np", ".", "max", "(", "heatmap", ")", "\n", "", "assert", "heatmap", ".", "dtype", "!=", "np", ".", "uint8", "\n", "\n", "x", "=", "heatmap", "\n", "x", "=", "x", ".", "clip", "(", "0", ",", "1", ")", "\n", "a", "=", "(", "x", "*", "255", ")", ".", "astype", "(", "int", ")", "\n", "b", "=", "(", "a", "+", "1", ")", ".", "clip", "(", "max", "=", "255", ")", "\n", "f", "=", "x", "*", "255.0", "-", "a", "\n", "turbo_map", "=", "np", ".", "array", "(", "cm", ".", "turbo", ".", "colors", ")", "[", ":", ":", "-", "1", "]", "\n", "pseudo_color", "=", "(", "turbo_map", "[", "a", "]", "+", "(", "turbo_map", "[", "b", "]", "-", "turbo_map", "[", "a", "]", ")", "*", "f", "[", "...", ",", "np", ".", "newaxis", "]", ")", "\n", "pseudo_color", "[", "heatmap", "<", "0.0", "]", "=", "0.0", "\n", "pseudo_color", "[", "heatmap", ">", "1.0", "]", "=", "1.0", "\n", "if", "uint8_output", ":", "\n", "    ", "pseudo_color", "=", "(", "pseudo_color", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "return", "pseudo_color", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.disp_map_visualize": [[85, 98], ["turbo_vis.astype", "numpy.min", "numpy.max", "depth_outputs.turbo_vis", "len", "numpy.isfinite", "valid.sum", "numpy.zeros_like().astype", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.post_processing.depth_outputs.turbo_vis"], ["", "def", "disp_map_visualize", "(", "x", ",", "max_disp", "=", "_MAX_DISP", ")", ":", "\n", "  ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "x", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "valid", "=", "(", "(", "x", "<", "max_disp", ")", "&", "np", ".", "isfinite", "(", "x", ")", ")", "\n", "if", "valid", ".", "sum", "(", ")", "==", "0", ":", "\n", "    ", "return", "np", ".", "zeros_like", "(", "x", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "x", "-=", "np", ".", "min", "(", "x", "[", "valid", "]", ")", "\n", "x", "/=", "np", ".", "max", "(", "x", "[", "valid", "]", ")", "\n", "x", "=", "1.", "-", "x", "\n", "x", "[", "~", "valid", "]", "=", "0.", "\n", "x", "=", "turbo_vis", "(", "x", ")", "\n", "x", "=", "(", "x", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "x", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.init.default_init.default_init": [[4, 26], ["isinstance", "torch.init.kaiming_normal_", "isinstance", "module.bias.data.zero_", "torch.init.kaiming_normal_", "isinstance", "module.bias.data.zero_", "module.weight.data.fill_", "module.bias.data.zero_", "isinstance", "module.weight.data.fill_", "module.bias.data.zero_"], "function", ["None"], ["def", "default_init", "(", "module", ")", ":", "\n", "  ", "\"\"\"Initialize parameters of the module.\n\n    For convolution, weights are initialized by Kaiming method and\n    biases are initialized to zero.\n    For batch normalization, scales and biases are set to 1 and 0,\n    respectively.\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ".", "data", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "      ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Conv3d", ")", ":", "\n", "    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ".", "data", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "      ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "    ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.Node.__hash__": [[16, 18], ["hash"], "methods", ["None"], ["def", "__hash__", "(", "self", ")", ":", "\n", "    ", "return", "hash", "(", "self", ".", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.__init__": [[22, 27], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "self", ".", "skips", "=", "{", "}", "\n", "self", ".", "tags", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.tag": [[28, 30], ["None"], "methods", ["None"], ["", "def", "tag", "(", "self", ",", "node", ",", "name", ")", ":", "\n", "    ", "self", ".", "tags", "[", "node", "]", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.input": [[31, 36], ["simplenet.Node", "simplenet.NetFactory.nodes.append"], "methods", ["None"], ["", "def", "input", "(", "self", ",", "in_dim", "=", "3", ",", "stride", "=", "1", ",", "activated", "=", "True", ")", ":", "\n", "    ", "assert", "not", "self", ".", "nodes", "\n", "n", "=", "Node", "(", "inp", "=", "None", ",", "module", "=", "None", ",", "activated", "=", "activated", ",", "stride", "=", "stride", ",", "dim", "=", "in_dim", ")", "\n", "self", ".", "nodes", ".", "append", "(", "n", ")", "\n", "return", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._add": [[37, 40], ["simplenet.NetFactory.nodes.append"], "methods", ["None"], ["", "def", "_add", "(", "self", ",", "node", ")", ":", "\n", "    ", "self", ".", "nodes", ".", "append", "(", "node", ")", "\n", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._activate": [[41, 50], ["simplenet.NetFactory._add", "dataclasses.replace", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._add"], ["", "def", "_activate", "(", "self", ",", "node", ")", ":", "\n", "    ", "if", "node", ".", "activated", ":", "\n", "      ", "return", "node", "\n", "", "return", "self", ".", "_add", "(", "\n", "dataclasses", ".", "replace", "(", "\n", "node", ",", "\n", "inp", "=", "node", ",", "\n", "module", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "node", ".", "dim", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ")", ",", "\n", "activated", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._conv": [[53, 68], ["simplenet.NetFactory._activate", "simplenet.NetFactory._add", "dataclasses.replace", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._activate", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._add"], ["", "def", "_conv", "(", "self", ",", "node", ",", "out_dim", "=", "None", ",", "stride", "=", "1", ",", "rate", "=", "1", ",", "kernel", "=", "3", ")", ":", "\n", "    ", "node", "=", "self", ".", "_activate", "(", "node", ")", "\n", "if", "out_dim", "is", "None", ":", "\n", "      ", "out_dim", "=", "node", ".", "dim", "\n", "", "padding", "=", "(", "kernel", "-", "1", ")", "//", "2", "*", "rate", "\n", "return", "self", ".", "_add", "(", "\n", "dataclasses", ".", "replace", "(", "\n", "node", ",", "\n", "inp", "=", "node", ",", "\n", "module", "=", "nn", ".", "Conv2d", "(", "\n", "node", ".", "dim", ",", "out_dim", ",", "kernel", ",", "stride", "=", "stride", ",", "dilation", "=", "rate", ",", "padding", "=", "padding", "\n", ")", ",", "\n", "activated", "=", "False", ",", "\n", "dim", "=", "out_dim", ",", "\n", "stride", "=", "node", ".", "stride", "*", "stride", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._interp": [[71, 78], ["simplenet.NetFactory._add", "dataclasses.replace", "torch.Upsample", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._add"], ["", "def", "_interp", "(", "self", ",", "node", ")", ":", "\n", "    ", "return", "self", ".", "_add", "(", "\n", "dataclasses", ".", "replace", "(", "\n", "node", ",", "\n", "inp", "=", "node", ",", "\n", "module", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "\n", "stride", "=", "node", ".", "stride", "//", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._lateral": [[81, 87], ["simplenet.NetFactory._conv"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._conv"], ["", "def", "_lateral", "(", "self", ",", "node", ",", "out_dim", "=", "None", ")", ":", "\n", "    ", "if", "out_dim", "is", "None", ":", "\n", "      ", "out_dim", "=", "node", ".", "dim", "\n", "", "if", "out_dim", "==", "node", ".", "dim", ":", "\n", "      ", "return", "node", "\n", "", "return", "self", ".", "_conv", "(", "node", ",", "out_dim", "=", "out_dim", ",", "kernel", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.output": [[88, 90], ["simplenet.NetFactory._conv"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._conv"], ["", "def", "output", "(", "self", ",", "node", ",", "out_dim", ")", ":", "\n", "    ", "return", "self", ".", "_conv", "(", "node", ",", "out_dim", "=", "out_dim", ",", "kernel", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.downscale": [[91, 93], ["simplenet.NetFactory._conv"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._conv"], ["", "def", "downscale", "(", "self", ",", "node", ",", "out_dim", ")", ":", "\n", "    ", "return", "self", ".", "_conv", "(", "node", ",", "out_dim", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.upsample": [[94, 100], ["simplenet.NetFactory._lateral", "simplenet.NetFactory._lateral", "simplenet.NetFactory._interp"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._lateral", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._lateral", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._interp"], ["", "def", "upsample", "(", "self", ",", "node", ",", "skip", ",", "out_dim", ")", ":", "\n", "    ", "skip", "=", "self", ".", "_lateral", "(", "skip", ",", "out_dim", "=", "out_dim", ")", "\n", "node", "=", "self", ".", "_lateral", "(", "node", ",", "out_dim", "=", "out_dim", ")", "\n", "node", "=", "self", ".", "_interp", "(", "node", ")", "\n", "self", ".", "skips", "[", "node", "]", "=", "skip", "\n", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.layer": [[101, 109], ["simplenet.NetFactory._lateral", "simplenet.NetFactory._conv", "simplenet.NetFactory._conv"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._lateral", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._conv", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory._conv"], ["", "def", "layer", "(", "self", ",", "node", ",", "out_dim", "=", "None", ",", "rate", "=", "1", ")", ":", "\n", "    ", "if", "out_dim", "is", "None", ":", "\n", "      ", "out_dim", "=", "node", ".", "dim", "\n", "", "skip", "=", "self", ".", "_lateral", "(", "node", ",", "out_dim", "=", "out_dim", ")", "\n", "node", "=", "self", ".", "_conv", "(", "node", ",", "rate", "=", "rate", ")", "\n", "node", "=", "self", ".", "_conv", "(", "node", ",", "rate", "=", "rate", ")", "\n", "self", ".", "skips", "[", "node", "]", "=", "skip", "\n", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.block": [[110, 114], ["int", "simplenet.NetFactory.layer"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.layer"], ["", "def", "block", "(", "self", ",", "node", ",", "rates", ")", ":", "\n", "    ", "for", "r", "in", "[", "int", "(", "r", ")", "for", "r", "in", "rates", "]", ":", "\n", "      ", "node", "=", "self", ".", "layer", "(", "node", ",", "rate", "=", "r", ")", "\n", "", "return", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.bake": [[115, 118], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList"], "methods", ["None"], ["", "def", "bake", "(", "self", ")", ":", "\n", "    ", "self", ".", "modules", "=", "nn", ".", "ModuleList", "(", "n", ".", "module", "for", "n", "in", "self", ".", "nodes", "if", "n", ".", "module", "is", "not", "None", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.forward": [[119, 137], ["node.module", "node.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "outputs", "=", "{", "}", "\n", "tag_outputs", "=", "{", "}", "\n", "for", "node", "in", "self", ".", "nodes", ":", "\n", "      ", "if", "node", ".", "module", "is", "None", ":", "# initial input", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "if", "node", "in", "self", ".", "skips", ":", "\n", "          ", "x", "=", "outputs", "[", "self", ".", "skips", "[", "node", "]", "]", "+", "node", ".", "module", "(", "outputs", "[", "node", ".", "inp", "]", ")", "\n", "", "else", ":", "\n", "          ", "x", "=", "node", ".", "module", "(", "outputs", "[", "node", ".", "inp", "]", ")", "\n", "", "", "outputs", "[", "node", "]", "=", "x", "\n", "last", "=", "x", "\n", "if", "node", "in", "self", ".", "tags", ":", "\n", "        ", "tag_outputs", "[", "self", ".", "tags", "[", "node", "]", "]", "=", "x", "\n", "", "", "if", "tag_outputs", ":", "\n", "      ", "return", "tag_outputs", "\n", "", "return", "last", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.HdrnAlphaStereo.__init__": [[164, 177], ["torch.Module.__init__", "simplenet.hdrn_alpha_base", "simplenet.DotProductCostVolume", "simplenet.make_process_cost_volume", "simplenet.SoftArgmin"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.hdrn_alpha_base", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.make_process_cost_volume"], ["  ", "def", "__init__", "(", "self", ",", "hparams", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_disparities", "=", "hparams", ".", "max_disparity", "\n", "self", ".", "internal_scale", "=", "hparams", ".", "cost_volume_downsample_factor", "\n", "self", ".", "internal_num_disparities", "=", "self", ".", "num_disparities", "//", "self", ".", "internal_scale", "\n", "assert", "self", ".", "internal_scale", "in", "[", "4", ",", "8", ",", "16", "]", "\n", "\n", "self", ".", "feature_extractor", "=", "hdrn_alpha_base", "(", "hparams", ".", "fe_internal_features", ")", "\n", "self", ".", "cost_volume", "=", "DotProductCostVolume", "(", "self", ".", "internal_num_disparities", ")", "\n", "self", ".", "process_cost_volume", "=", "make_process_cost_volume", "(", "self", ".", "internal_num_disparities", ")", "\n", "\n", "self", ".", "soft_argmin", "=", "SoftArgmin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.HdrnAlphaStereo.forward": [[178, 188], ["simplenet.HdrnAlphaStereo.feature_extractor", "simplenet.HdrnAlphaStereo.feature_extractor", "simplenet.HdrnAlphaStereo.cost_volume", "simplenet.HdrnAlphaStereo.process_cost_volume", "simplenet.HdrnAlphaStereo.soft_argmin"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.cost_volume", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.soft_argmin"], ["", "def", "forward", "(", "self", ",", "left_image", ",", "right_image", ")", ":", "\n", "    ", "left_score", "=", "self", ".", "feature_extractor", "(", "left_image", ")", "\n", "right_score", "=", "self", ".", "feature_extractor", "(", "right_image", ")", "\n", "\n", "cost_volume", "=", "self", ".", "cost_volume", "(", "left_score", ",", "right_score", ")", "\n", "cost_volume", "=", "self", ".", "process_cost_volume", "(", "cost_volume", ")", "\n", "\n", "disparity_small", "=", "self", ".", "soft_argmin", "(", "cost_volume", ")", "\n", "\n", "return", "disparity_small", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.StereoBackbone.__init__": [[192, 229], ["torch.Module.__init__", "simplenet.StereoBackbone.__init__.make_rgb_stem"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "hparams", ",", "in_channels", "=", "3", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "make_rgb_stem", "(", ")", ":", "\n", "      ", "net", "=", "NetFactory", "(", ")", "\n", "x", "=", "net", ".", "input", "(", "in_dim", "=", "3", ",", "stride", "=", "1", ",", "activated", "=", "True", ")", "\n", "x", "=", "net", ".", "downscale", "(", "x", ",", "32", ")", "\n", "x", "=", "net", ".", "downscale", "(", "x", ",", "32", ")", "\n", "return", "net", ".", "bake", "(", ")", "\n", "\n", "", "def", "make_disp_features", "(", ")", ":", "\n", "      ", "net", "=", "NetFactory", "(", ")", "\n", "x", "=", "net", ".", "input", "(", "in_dim", "=", "1", ",", "stride", "=", "1", ",", "activated", "=", "False", ")", "\n", "x", "=", "net", ".", "layer", "(", "x", ",", "32", ",", "rate", "=", "5", ")", "\n", "return", "net", ".", "bake", "(", ")", "\n", "\n", "", "self", ".", "rgb_stem", "=", "make_rgb_stem", "(", ")", "\n", "self", ".", "stereo_stem", "=", "HdrnAlphaStereo", "(", "hparams", ")", "\n", "self", ".", "disp_features", "=", "make_disp_features", "(", ")", "\n", "\n", "def", "make_rgbd_backbone", "(", "num_channels", "=", "64", ",", "out_dim", "=", "64", ")", ":", "\n", "      ", "net", "=", "NetFactory", "(", ")", "\n", "x", "=", "net", ".", "input", "(", "in_dim", "=", "64", ",", "activated", "=", "True", ",", "stride", "=", "4", ")", "\n", "x", "=", "net", ".", "_lateral", "(", "x", ",", "out_dim", "=", "num_channels", ")", "\n", "x4", "=", "x", "=", "net", ".", "block", "(", "x", ",", "'111'", ")", "\n", "x", "=", "net", ".", "downscale", "(", "x", ",", "num_channels", "*", "2", ")", "\n", "x8", "=", "x", "=", "net", ".", "block", "(", "x", ",", "'1111'", ")", "\n", "x", "=", "net", ".", "downscale", "(", "x", ",", "num_channels", "*", "4", ")", "\n", "x", "=", "net", ".", "block", "(", "x", ",", "'12591259'", ")", "\n", "net", ".", "tag", "(", "net", ".", "output", "(", "x", ",", "out_dim", ")", ",", "'p4'", ")", "\n", "x", "=", "net", ".", "upsample", "(", "x", ",", "x8", ",", "out_dim", ")", "\n", "net", ".", "tag", "(", "x", ",", "'p3'", ")", "\n", "x", "=", "net", ".", "upsample", "(", "x", ",", "x4", ",", "out_dim", ")", "\n", "net", ".", "tag", "(", "x", ",", "'p2'", ")", "\n", "return", "net", ".", "bake", "(", ")", "\n", "\n", "", "self", ".", "rgbd_backbone", "=", "make_rgbd_backbone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.StereoBackbone.forward": [[230, 238], ["simplenet.StereoBackbone.stereo_stem.forward", "simplenet.StereoBackbone.rgb_stem.forward", "simplenet.StereoBackbone.disp_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "simplenet.StereoBackbone.rgbd_backbone.forward"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward"], ["", "def", "forward", "(", "self", ",", "stacked_img", ",", "step", ",", "robot_joint_angles", "=", "None", ")", ":", "\n", "    ", "small_disp", "=", "self", ".", "stereo_stem", ".", "forward", "(", "stacked_img", "[", ":", ",", "0", ":", "3", "]", ",", "stacked_img", "[", ":", ",", "3", ":", "6", "]", ")", "\n", "left_rgb_features", "=", "self", ".", "rgb_stem", ".", "forward", "(", "stacked_img", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "disp_features", "=", "self", ".", "disp_features", "(", "small_disp", ")", "\n", "rgbd_features", "=", "torch", ".", "cat", "(", "(", "disp_features", ",", "left_rgb_features", ")", ",", "axis", "=", "1", ")", "\n", "outputs", "=", "self", ".", "rgbd_backbone", ".", "forward", "(", "rgbd_features", ")", "\n", "outputs", "[", "'small_disp'", "]", "=", "small_disp", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.StereoBackbone.out_channels": [[239, 242], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "out_channels", "(", "self", ")", ":", "\n", "    ", "return", "32", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.StereoBackbone.stride": [[243, 246], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "stride", "(", "self", ")", ":", "\n", "    ", "return", "4", "# = stride 2 conv -> stride 2 max pool", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.CostVolume.__init__": [[268, 272], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["def", "__init__", "(", "self", ",", "num_disparities", ",", "is_right", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_disparities", "=", "num_disparities", "\n", "self", ".", "is_right", "=", "is_right", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.CostVolume.forward": [[273, 278], ["torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "simplenet.cost_volume", "simplenet.CostVolume.forward_with_amp"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.cost_volume", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.Matchability.forward_with_amp"], ["", "def", "forward", "(", "self", ",", "left", ",", "right", ")", ":", "\n", "    ", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "      ", "return", "cost_volume", "(", "left", ",", "right", ",", "self", ".", "num_disparities", ",", "self", ".", "is_right", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "forward_with_amp", "(", "left", ",", "right", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.CostVolume.forward_with_amp": [[279, 288], ["torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "left.to.to.to", "right.to.to.to", "simplenet.cost_volume", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.cost_volume"], ["", "", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "forward_with_amp", "(", "self", ",", "left", ",", "right", ")", ":", "\n", "    ", "\"\"\"This operation is unstable at float16, so compute at float32 even when using mixed precision\"\"\"", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "False", ")", ":", "\n", "      ", "left", "=", "left", ".", "to", "(", "torch", ".", "float32", ")", "\n", "right", "=", "right", ".", "to", "(", "torch", ".", "float32", ")", "\n", "output", "=", "cost_volume", "(", "left", ",", "right", ",", "self", ".", "num_disparities", ",", "self", ".", "is_right", ")", "\n", "output", "=", "torch", ".", "clamp", "(", "output", ",", "-", "1e3", ",", "1e3", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.DotProductCostVolume.__init__": [[310, 314], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["def", "__init__", "(", "self", ",", "num_disparities", ",", "is_right", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_disparities", "=", "num_disparities", "\n", "self", ".", "is_right", "=", "is_right", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.DotProductCostVolume.forward": [[315, 317], ["simplenet.dot_product_cost_volume"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.dot_product_cost_volume"], ["", "def", "forward", "(", "self", ",", "left", ",", "right", ")", ":", "\n", "    ", "return", "dot_product_cost_volume", "(", "left", ",", "right", ",", "self", ".", "num_disparities", ",", "self", ".", "is_right", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.DotProductCostVolume.forward_with_amp": [[318, 327], ["torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "left.to.to.to", "right.to.to.to", "simplenet.dot_product_cost_volume", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.dot_product_cost_volume"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "forward_with_amp", "(", "self", ",", "left", ",", "right", ")", ":", "\n", "    ", "\"\"\"This operation is unstable at float16, so compute at float32 even when using mixed precision\"\"\"", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "False", ")", ":", "\n", "      ", "left", "=", "left", ".", "to", "(", "torch", ".", "float32", ")", "\n", "right", "=", "right", ".", "to", "(", "torch", ".", "float32", ")", "\n", "output", "=", "dot_product_cost_volume", "(", "left", ",", "right", ",", "self", ".", "num_disparities", ",", "self", ".", "is_right", ")", "\n", "output", "=", "torch", ".", "clamp", "(", "output", ",", "-", "1e3", ",", "1e3", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.SoftArgmin.forward": [[343, 345], ["simplenet.soft_argmin"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.soft_argmin"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "return", "soft_argmin", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.Matchability.forward": [[358, 364], ["torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "simplenet.matchability", "simplenet.Matchability.forward_with_amp"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.matchability", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.Matchability.forward_with_amp"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "# Torchscript generation can't handle mixed precision, so always compute at float32.", "\n", "      ", "return", "matchability", "(", "input", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "forward_with_amp", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.Matchability.forward_with_amp": [[365, 371], ["torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "input.to.to.to", "simplenet.matchability"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.matchability"], ["", "", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "forward_with_amp", "(", "self", ",", "input", ")", ":", "\n", "    ", "\"\"\"This operation is unstable at float16, so compute at float32 even when using mixed precision\"\"\"", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "False", ")", ":", "\n", "      ", "input", "=", "input", ".", "to", "(", "torch", ".", "float32", ")", "\n", "return", "matchability", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.hdrn_alpha_base": [[139, 152], ["simplenet.NetFactory", "simplenet.NetFactory.input", "simplenet.NetFactory.downscale", "simplenet.NetFactory.downscale", "simplenet.NetFactory.block", "simplenet.NetFactory.downscale", "simplenet.NetFactory.block", "simplenet.NetFactory.downscale", "simplenet.NetFactory.block", "simplenet.NetFactory.upsample", "simplenet.NetFactory.upsample", "simplenet.NetFactory.bake"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.input", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.downscale", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.downscale", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.block", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.downscale", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.block", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.downscale", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.block", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.upsample", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.upsample", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.bake"], ["", "", "def", "hdrn_alpha_base", "(", "num_channels", ")", ":", "\n", "  ", "net", "=", "NetFactory", "(", ")", "\n", "x", "=", "net", ".", "input", "(", ")", "\n", "x", "=", "net", ".", "downscale", "(", "x", ",", "num_channels", ")", "\n", "x", "=", "net", ".", "downscale", "(", "x", ",", "num_channels", ")", "\n", "x4", "=", "x", "=", "net", ".", "block", "(", "x", ",", "'111'", ")", "\n", "x", "=", "net", ".", "downscale", "(", "x", ",", "num_channels", "*", "2", ")", "\n", "x8", "=", "x", "=", "net", ".", "block", "(", "x", ",", "'1111'", ")", "\n", "x", "=", "net", ".", "downscale", "(", "x", ",", "num_channels", "*", "4", ")", "\n", "x", "=", "net", ".", "block", "(", "x", ",", "'12591259'", ")", "\n", "x", "=", "net", ".", "upsample", "(", "x", ",", "x8", ",", "num_channels", "//", "2", ")", "\n", "x", "=", "net", ".", "upsample", "(", "x", ",", "x4", ",", "num_channels", "//", "2", ")", "\n", "return", "net", ".", "bake", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.make_process_cost_volume": [[154, 160], ["simplenet.NetFactory", "simplenet.NetFactory.input", "simplenet.NetFactory.block", "simplenet.NetFactory.output", "simplenet.NetFactory.bake"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.input", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.block", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.output", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.bake"], ["", "def", "make_process_cost_volume", "(", "num_disparities", ")", ":", "\n", "  ", "net", "=", "NetFactory", "(", ")", "\n", "x", "=", "net", ".", "input", "(", "in_dim", "=", "num_disparities", ",", "stride", "=", "4", ",", "activated", "=", "True", ")", "\n", "x", "=", "net", ".", "block", "(", "x", ",", "'1259'", ")", "\n", "x", "=", "net", ".", "output", "(", "x", ",", "out_dim", "=", "num_disparities", ")", "\n", "return", "net", ".", "bake", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.cost_volume": [[248, 263], ["torch.zeros", "torch.zeros", "torch.zeros", "range"], "function", ["None"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "cost_volume", "(", "left", ",", "right", ",", "num_disparities", ":", "int", ",", "is_right", ":", "bool", ")", ":", "\n", "  ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "left", ".", "shape", "\n", "\n", "output", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "channels", ",", "num_disparities", ",", "height", ",", "width", ")", ",", "\n", "dtype", "=", "left", ".", "dtype", ",", "\n", "device", "=", "left", ".", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_disparities", ")", ":", "\n", "    ", "if", "not", "is_right", ":", "\n", "      ", "output", "[", ":", ",", ":", ",", "i", ",", ":", ",", "i", ":", "]", "=", "left", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "*", "right", "[", ":", ",", ":", ",", ":", ",", ":", "width", "-", "i", "]", "\n", "", "else", ":", "\n", "      ", "output", "[", ":", ",", ":", ",", "i", ",", ":", ",", ":", "width", "-", "i", "]", "=", "left", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "*", "right", "[", ":", ",", ":", ",", ":", ",", ":", "width", "-", "i", "]", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.dot_product_cost_volume": [[290, 305], ["torch.zeros", "torch.zeros", "torch.zeros", "range"], "function", ["None"], ["", "", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "dot_product_cost_volume", "(", "left", ",", "right", ",", "num_disparities", ":", "int", ",", "is_right", ":", "bool", ")", ":", "\n", "  ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "left", ".", "shape", "\n", "\n", "output", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "num_disparities", ",", "height", ",", "width", ")", ",", "\n", "dtype", "=", "left", ".", "dtype", ",", "\n", "device", "=", "left", ".", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_disparities", ")", ":", "\n", "    ", "if", "not", "is_right", ":", "\n", "      ", "output", "[", ":", ",", "i", ",", ":", ",", "i", ":", "]", "=", "(", "left", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "*", "right", "[", ":", ",", ":", ",", ":", ",", ":", "width", "-", "i", "]", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "output", "[", ":", ",", "i", ",", ":", ",", "width", "-", "i", "]", "=", "(", "left", "[", ":", ",", ":", ",", ":", ",", "i", ":", "]", "*", "right", "[", ":", ",", ":", ",", ":", ",", ":", "width", "-", "i", "]", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.soft_argmin": [[329, 338], ["torch.softmin", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "soft_argmin", "(", "input", ")", ":", "\n", "  ", "_", ",", "channels", ",", "_", ",", "_", "=", "input", ".", "shape", "\n", "\n", "softmin", "=", "F", ".", "softmin", "(", "input", ",", "dim", "=", "1", ")", "\n", "index_tensor", "=", "torch", ".", "arange", "(", "0", ",", "channels", ",", "dtype", "=", "softmin", ".", "dtype", ",", "\n", "device", "=", "softmin", ".", "device", ")", ".", "view", "(", "1", ",", "channels", ",", "1", ",", "1", ")", "\n", "output", "=", "torch", ".", "sum", "(", "softmin", "*", "index_tensor", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.matchability": [[347, 353], ["torch.softmin", "torch.log_softmax", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "matchability", "(", "input", ")", ":", "\n", "  ", "softmin", "=", "F", ".", "softmin", "(", "input", ",", "dim", "=", "1", ")", "\n", "log_softmin", "=", "F", ".", "log_softmax", "(", "-", "input", ",", "dim", "=", "1", ")", "\n", "output", "=", "torch", ".", "sum", "(", "softmin", "*", "log_softmin", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.main": [[373, 405], ["simplenet.NetFactory", "simplenet.NetFactory.input", "simplenet.NetFactory.downscale", "simplenet.NetFactory.downscale", "simplenet.NetFactory.block", "simplenet.NetFactory.downscale", "simplenet.NetFactory.block", "simplenet.NetFactory.downscale", "simplenet.NetFactory.block", "simplenet.NetFactory.upsample", "simplenet.NetFactory.upsample", "simplenet.NetFactory.bake", "torch.randn", "torch.randn", "torch.randn", "NetFactory.", "torch.onnx.export", "torch.onnx.export", "torch.onnx.export", "onnx.save", "shape_inference.infer_shapes", "onnx.load"], "function", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.input", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.downscale", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.downscale", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.block", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.downscale", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.block", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.downscale", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.block", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.upsample", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.upsample", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.simplenet.NetFactory.bake"], ["", "", "", "def", "main", "(", ")", ":", "\n", "  ", "num_channels", "=", "32", "\n", "net", "=", "NetFactory", "(", ")", "\n", "x", "=", "net", ".", "input", "(", ")", "\n", "x", "=", "net", ".", "downscale", "(", "x", ",", "num_channels", ")", "\n", "x", "=", "net", ".", "downscale", "(", "x", ",", "num_channels", ")", "\n", "x4", "=", "x", "=", "net", ".", "block", "(", "x", ",", "'111'", ")", "\n", "x", "=", "net", ".", "downscale", "(", "x", ",", "num_channels", "*", "2", ")", "\n", "x8", "=", "x", "=", "net", ".", "block", "(", "x", ",", "'1111'", ")", "\n", "x", "=", "net", ".", "downscale", "(", "x", ",", "num_channels", "*", "4", ")", "\n", "x", "=", "net", ".", "block", "(", "x", ",", "'12591259'", ")", "\n", "x", "=", "net", ".", "upsample", "(", "x", ",", "x8", ",", "num_channels", "//", "2", ")", "\n", "x", "=", "net", ".", "upsample", "(", "x", ",", "x4", ",", "num_channels", "//", "2", ")", "\n", "net", ".", "bake", "(", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "5", ",", "3", ",", "512", ",", "640", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "\n", "import", "torch", ".", "_C", "as", "_C", "\n", "TrainingMode", "=", "_C", ".", "_onnx", ".", "TrainingMode", "\n", "torch", ".", "onnx", ".", "export", "(", "\n", "net", ",", "\n", "x", ",", "\n", "\"test_net.onnx\"", ",", "\n", "do_constant_folding", "=", "False", ",", "\n", "verbose", "=", "True", ",", "\n", "training", "=", "TrainingMode", ".", "TRAINING", ",", "\n", "opset_version", "=", "13", "\n", ")", "\n", "import", "onnx", "\n", "from", "onnx", "import", "shape_inference", "\n", "onnx", ".", "save", "(", "shape_inference", ".", "infer_shapes", "(", "onnx", ".", "load", "(", "'test_net.onnx'", ")", ")", ",", "'test_net_shapes.onnx'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.Conv2d.__init__": [[39, 55], ["kwargs.pop", "kwargs.pop", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Extra keyword arguments supported in addition to those in `torch.nn.Conv2d`:\n\n    Args:\n      norm (nn.Module, optional): a normalization layer\n      activation (callable(Tensor) -> Tensor): a callable activation function\n\n    It assumes that norm layer is used before activation.\n    \"\"\"", "\n", "norm", "=", "kwargs", ".", "pop", "(", "\"norm\"", ",", "None", ")", "\n", "activation", "=", "kwargs", ".", "pop", "(", "\"activation\"", ",", "None", ")", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.Conv2d.forward": [[56, 89], ["super().forward", "_NewEmptyTensorOp.apply", "panoptic_net.Conv2d.norm", "panoptic_net.Conv2d.activation", "panoptic_net.Conv2d.numel", "isinstance", "panoptic_net.Conv2d.numel", "isinstance", "zip", "sum", "panoptic_net.Conv2d.view", "panoptic_net.Conv2d.parameters"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "numel", "(", ")", "==", "0", "and", "self", ".", "training", ":", "\n", "# https://github.com/pytorch/pytorch/issues/12013", "\n", "      ", "assert", "not", "isinstance", "(", "\n", "self", ".", "norm", ",", "torch", ".", "nn", ".", "SyncBatchNorm", "\n", ")", ",", "\"SyncBatchNorm does not support empty inputs!\"", "\n", "\n", "", "if", "x", ".", "numel", "(", ")", "==", "0", "and", "TORCH_VERSION", "<=", "(", "1", ",", "4", ")", ":", "\n", "      ", "assert", "not", "isinstance", "(", "\n", "self", ".", "norm", ",", "torch", ".", "nn", ".", "GroupNorm", "\n", ")", ",", "\"GroupNorm does not support empty inputs in PyTorch <=1.4!\"", "\n", "# When input is empty, we want to return a empty tensor with \"correct\" shape,", "\n", "# So that the following operations will not panic", "\n", "# if they check for the shape of the tensor.", "\n", "# This computes the height and width of the output tensor", "\n", "output_shape", "=", "[", "(", "i", "+", "2", "*", "p", "-", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", ")", "//", "s", "+", "1", "for", "i", ",", "p", ",", "di", ",", "k", ",", "s", "in", "\n", "zip", "(", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ")", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "weight", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "empty", "=", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "if", "self", ".", "training", ":", "\n", "# This is to make DDP happy.", "\n", "# DDP expects all workers to have gradient w.r.t the same set of parameters.", "\n", "        ", "_dummy", "=", "sum", "(", "x", ".", "view", "(", "-", "1", ")", "[", "0", "]", "for", "x", "in", "self", ".", "parameters", "(", ")", ")", "*", "0.0", "\n", "return", "empty", "+", "_dummy", "\n", "", "else", ":", "\n", "        ", "return", "empty", "\n", "\n", "", "", "x", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "      ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "      ", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.SemSegFPNHead.__init__": [[125, 165], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "panoptic_net.Conv2d", "panoptic_net.c2_msra_fill", "max", "range", "panoptic_net.SemSegFPNHead.scale_heads.append", "panoptic_net.SemSegFPNHead.add_module", "input_shape.items", "input_shape.items", "int", "panoptic_net.get_norm", "panoptic_net.Conv2d", "panoptic_net.c2_msra_fill", "head_ops.append", "torch.Sequential", "torch.Sequential", "head_ops.append", "numpy.log2", "numpy.log2", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.c2_msra_fill", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.get_norm", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.c2_msra_fill"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "model_norm", "=", "'BN'", ",", "num_filters_scale", "=", "4", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "MODEL_SEM_SEG_HEAD_NORM", "=", "model_norm", "\n", "MODEL_SEM_SEG_HEAD_CONVS_DIM", "=", "128", "//", "num_filters_scale", "\n", "\n", "self", ".", "in_features", "=", "MODEL_SEM_SEG_HEAD_IN_FEATURES", "\n", "feature_strides", "=", "{", "k", ":", "v", ".", "stride", "for", "k", ",", "v", "in", "input_shape", ".", "items", "(", ")", "}", "\n", "feature_channels", "=", "{", "k", ":", "v", ".", "channels", "for", "k", ",", "v", "in", "input_shape", ".", "items", "(", ")", "}", "\n", "self_ignore_value", "=", "MODEL_SEM_SEG_HEAD_IGNORE_VALUE", "\n", "conv_dims", "=", "MODEL_SEM_SEG_HEAD_CONVS_DIM", "\n", "self", ".", "common_stride", "=", "MODEL_SEM_SEG_HEAD_COMMON_STRIDE", "\n", "norm", "=", "MODEL_SEM_SEG_HEAD_NORM", "\n", "self", ".", "bilinear_upsample", "=", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "self", ".", "common_stride", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", "\n", ")", "\n", "\n", "self", ".", "scale_heads", "=", "[", "]", "\n", "for", "in_feature", "in", "self", ".", "in_features", ":", "\n", "      ", "head_ops", "=", "[", "]", "\n", "head_length", "=", "max", "(", "1", ",", "int", "(", "np", ".", "log2", "(", "feature_strides", "[", "in_feature", "]", ")", "-", "np", ".", "log2", "(", "self", ".", "common_stride", ")", ")", ")", "\n", "for", "k", "in", "range", "(", "head_length", ")", ":", "\n", "        ", "norm_module", "=", "get_norm", "(", "norm", ",", "conv_dims", ")", "\n", "conv", "=", "Conv2d", "(", "\n", "feature_channels", "[", "in_feature", "]", "if", "k", "==", "0", "else", "conv_dims", ",", "\n", "conv_dims", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "not", "norm", ",", "\n", "norm", "=", "norm_module", ",", "\n", "activation", "=", "F", ".", "relu", ",", "\n", ")", "\n", "c2_msra_fill", "(", "conv", ")", "\n", "head_ops", ".", "append", "(", "conv", ")", "\n", "if", "feature_strides", "[", "in_feature", "]", "!=", "self", ".", "common_stride", ":", "\n", "          ", "head_ops", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ")", "\n", "", "", "self", ".", "scale_heads", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "head_ops", ")", ")", "\n", "self", ".", "add_module", "(", "in_feature", ",", "self", ".", "scale_heads", "[", "-", "1", "]", ")", "\n", "", "self", ".", "predictor", "=", "Conv2d", "(", "conv_dims", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "c2_msra_fill", "(", "self", ".", "predictor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.SemSegFPNHead.forward": [[166, 175], ["panoptic_net.SemSegFPNHead.layers", "panoptic_net.SemSegFPNHead.bilinear_upsample"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PoseFPNHead.layers"], ["", "def", "forward", "(", "self", ",", "features", ",", "targets", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n      Returns:\n        In training, returns (None, dict of losses)\n        In inference, returns (predictions, {})\n      \"\"\"", "\n", "x", "=", "self", ".", "layers", "(", "features", ")", "\n", "x", "=", "self", ".", "bilinear_upsample", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.SemSegFPNHead.layers": [[176, 184], ["enumerate", "panoptic_net.SemSegFPNHead.predictor", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu"], "methods", ["None"], ["", "def", "layers", "(", "self", ",", "features", ")", ":", "\n", "    ", "for", "i", ",", "f", "in", "enumerate", "(", "self", ".", "in_features", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "x", "=", "self", ".", "scale_heads", "[", "i", "]", "(", "F", ".", "relu", "(", "features", "[", "f", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "x", "-", "-", "self", ".", "scale_heads", "[", "i", "]", "(", "F", ".", "relu", "(", "features", "[", "f", "]", ")", ")", "\n", "", "", "x", "=", "self", ".", "predictor", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.SemSegFPNHead.losses": [[185, 191], ["torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy"], "methods", ["None"], ["", "def", "losses", "(", "self", ",", "predictions", ",", "targets", ")", ":", "\n", "    ", "predictions", "=", "F", ".", "interpolate", "(", "\n", "predictions", ",", "scale_factor", "=", "self", ".", "common_stride", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", "\n", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predictions", ",", "targets", ",", "reduction", "=", "\"mean\"", ",", "ignore_index", "=", "self", ".", "ignore_value", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PoseFPNHead.__init__": [[200, 236], ["torch.Module.__init__", "panoptic_net.Conv2d", "panoptic_net.c2_msra_fill", "max", "range", "panoptic_net.PoseFPNHead.scale_heads.append", "panoptic_net.PoseFPNHead.add_module", "input_shape.items", "input_shape.items", "int", "panoptic_net.get_norm", "panoptic_net.Conv2d", "panoptic_net.c2_msra_fill", "head_ops.append", "torch.Sequential", "torch.Sequential", "head_ops.append", "numpy.log2", "numpy.log2", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.c2_msra_fill", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.get_norm", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.c2_msra_fill"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "model_norm", "=", "'BN'", ",", "num_filters_scale", "=", "4", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "MODEL_SEM_SEG_HEAD_NORM", "=", "model_norm", "\n", "MODEL_SEM_SEG_HEAD_CONVS_DIM", "=", "128", "//", "num_filters_scale", "\n", "self", ".", "in_features", "=", "MODEL_POSE_HEAD_IN_FEATURES", "\n", "feature_strides", "=", "{", "k", ":", "v", ".", "stride", "for", "k", ",", "v", "in", "input_shape", ".", "items", "(", ")", "}", "\n", "feature_channels", "=", "{", "k", ":", "v", ".", "channels", "for", "k", ",", "v", "in", "input_shape", ".", "items", "(", ")", "}", "\n", "self_ignore_value", "=", "MODEL_SEM_SEG_HEAD_IGNORE_VALUE", "\n", "conv_dims", "=", "MODEL_SEM_SEG_HEAD_CONVS_DIM", "\n", "self", ".", "common_stride", "=", "MODEL_POSE_HEAD_COMMON_STRIDE", "\n", "norm", "=", "MODEL_SEM_SEG_HEAD_NORM", "\n", "\n", "self", ".", "scale_heads", "=", "[", "]", "\n", "for", "in_feature", "in", "self", ".", "in_features", ":", "\n", "      ", "head_ops", "=", "[", "]", "\n", "head_length", "=", "max", "(", "1", ",", "int", "(", "np", ".", "log2", "(", "feature_strides", "[", "in_feature", "]", ")", "-", "np", ".", "log2", "(", "self", ".", "common_stride", ")", ")", ")", "\n", "for", "k", "in", "range", "(", "head_length", ")", ":", "\n", "        ", "norm_module", "=", "get_norm", "(", "norm", ",", "conv_dims", ")", "\n", "conv", "=", "Conv2d", "(", "\n", "feature_channels", "[", "in_feature", "]", "if", "k", "==", "0", "else", "conv_dims", ",", "\n", "conv_dims", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "not", "norm", ",", "\n", "norm", "=", "norm_module", ",", "\n", "activation", "=", "F", ".", "relu", ",", "\n", ")", "\n", "c2_msra_fill", "(", "conv", ")", "\n", "head_ops", ".", "append", "(", "conv", ")", "\n", "if", "feature_strides", "[", "in_feature", "]", "!=", "self", ".", "common_stride", ":", "\n", "          ", "head_ops", ".", "append", "(", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ")", "\n", "", "", "self", ".", "scale_heads", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "head_ops", ")", ")", "\n", "self", ".", "add_module", "(", "in_feature", ",", "self", ".", "scale_heads", "[", "-", "1", "]", ")", "\n", "", "self", ".", "predictor", "=", "Conv2d", "(", "conv_dims", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "c2_msra_fill", "(", "self", ".", "predictor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PoseFPNHead.forward": [[237, 245], ["panoptic_net.PoseFPNHead.layers"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PoseFPNHead.layers"], ["", "def", "forward", "(", "self", ",", "features", ",", "targets", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n      Returns:\n        In training, returns (None, dict of losses)\n        In inference, returns (predictions, {})\n      \"\"\"", "\n", "x", "=", "self", ".", "layers", "(", "features", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PoseFPNHead.layers": [[246, 254], ["enumerate", "panoptic_net.PoseFPNHead.predictor", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu"], "methods", ["None"], ["", "def", "layers", "(", "self", ",", "features", ")", ":", "\n", "    ", "for", "i", ",", "f", "in", "enumerate", "(", "self", ".", "in_features", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "x", "=", "self", ".", "scale_heads", "[", "i", "]", "(", "F", ".", "relu", "(", "features", "[", "f", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "x", "-", "-", "self", ".", "scale_heads", "[", "i", "]", "(", "F", ".", "relu", "(", "features", "[", "f", "]", ")", ")", "\n", "", "", "x", "=", "self", ".", "predictor", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.ShapeSpec.__new__": [[269, 271], ["super().__new__"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.ShapeSpec.__new__"], ["def", "__new__", "(", "cls", ",", "*", ",", "channels", "=", "None", ",", "height", "=", "None", ",", "width", "=", "None", ",", "stride", "=", "None", ")", ":", "\n", "    ", "return", "super", "(", ")", ".", "__new__", "(", "cls", ",", "channels", ",", "height", ",", "width", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.DepthHead.__init__": [[279, 288], ["torch.Module.__init__", "panoptic_net.SemSegFPNHead"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "backbone_output_shape_4x", ",", "backbone_output_shape_8x", ",", "hparams", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "head", "=", "SemSegFPNHead", "(", "\n", "backbone_output_shape_4x", ",", "\n", "num_classes", "=", "1", ",", "\n", "model_norm", "=", "hparams", ".", "model_norm", ",", "\n", "num_filters_scale", "=", "hparams", ".", "num_filters_scale", "\n", ")", "\n", "self", ".", "hparams", "=", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.DepthHead.forward": [[289, 293], ["panoptic_net.DepthHead.head.forward", "depth_pred.squeeze.squeeze.squeeze", "simnet.lib.net.post_processing.depth_outputs.DepthOutput"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "    ", "depth_pred", "=", "self", ".", "head", ".", "forward", "(", "features", ")", "\n", "depth_pred", "=", "depth_pred", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "return", "depth_outputs", ".", "DepthOutput", "(", "depth_pred", ",", "self", ".", "hparams", ".", "loss_depth_refine_mult", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.SegmentationHead.__init__": [[297, 306], ["torch.Module.__init__", "panoptic_net.SemSegFPNHead"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "backbone_output_shape_4x", ",", "backbone_output_shape_8x", ",", "num_classes", ",", "hparams", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "head", "=", "SemSegFPNHead", "(", "\n", "backbone_output_shape_4x", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "model_norm", "=", "hparams", ".", "model_norm", ",", "\n", "num_filters_scale", "=", "hparams", ".", "num_filters_scale", "\n", ")", "\n", "self", ".", "hparams", "=", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.SegmentationHead.forward": [[307, 310], ["panoptic_net.SegmentationHead.head.forward", "simnet.lib.net.post_processing.segmentation_outputs.SegmentationOutput"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "    ", "pred", "=", "self", ".", "head", ".", "forward", "(", "features", ")", "\n", "return", "segmentation_outputs", ".", "SegmentationOutput", "(", "pred", ",", "self", ".", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PoseHead.__init__": [[314, 334], ["torch.Module.__init__", "panoptic_net.SemSegFPNHead", "panoptic_net.PoseFPNHead", "panoptic_net.PoseFPNHead"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "backbone_output_shape_4x", ",", "backbone_output_shape_8x", ",", "hparams", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "heatmap_head", "=", "SemSegFPNHead", "(", "\n", "backbone_output_shape_4x", ",", "\n", "num_classes", "=", "1", ",", "\n", "model_norm", "=", "hparams", ".", "model_norm", ",", "\n", "num_filters_scale", "=", "hparams", ".", "num_filters_scale", "\n", ")", "\n", "self", ".", "vertex_head", "=", "PoseFPNHead", "(", "\n", "backbone_output_shape_8x", ",", "\n", "num_classes", "=", "16", ",", "\n", "model_norm", "=", "hparams", ".", "model_norm", ",", "\n", "num_filters_scale", "=", "hparams", ".", "num_filters_scale", "\n", ")", "\n", "self", ".", "z_centroid_head", "=", "PoseFPNHead", "(", "\n", "backbone_output_shape_8x", ",", "\n", "num_classes", "=", "1", ",", "\n", "model_norm", "=", "hparams", ".", "model_norm", ",", "\n", "num_filters_scale", "=", "hparams", ".", "num_filters_scale", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PoseHead.forward": [[336, 341], ["panoptic_net.PoseHead.z_centroid_head.forward().squeeze", "panoptic_net.PoseHead.heatmap_head.forward().squeeze", "panoptic_net.PoseHead.vertex_head.forward", "simnet.lib.net.post_processing.pose_outputs.PoseOutput", "panoptic_net.PoseHead.z_centroid_head.forward", "panoptic_net.PoseHead.heatmap_head.forward"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "    ", "z_centroid_output", "=", "self", ".", "z_centroid_head", ".", "forward", "(", "features", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "heatmap_output", "=", "self", ".", "heatmap_head", ".", "forward", "(", "features", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "vertex_output", "=", "self", ".", "vertex_head", ".", "forward", "(", "features", ")", "\n", "return", "pose_outputs", ".", "PoseOutput", "(", "heatmap_output", ",", "vertex_output", ",", "z_centroid_output", ",", "self", ".", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.OBBHead.__init__": [[345, 374], ["torch.Module.__init__", "panoptic_net.SemSegFPNHead", "panoptic_net.PoseFPNHead", "panoptic_net.PoseFPNHead", "panoptic_net.PoseFPNHead"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "backbone_output_shape_4x", ",", "backbone_output_shape_8x", ",", "hparams", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "heatmap_head", "=", "SemSegFPNHead", "(", "\n", "backbone_output_shape_4x", ",", "\n", "num_classes", "=", "1", ",", "\n", "model_norm", "=", "hparams", ".", "model_norm", ",", "\n", "num_filters_scale", "=", "hparams", ".", "num_filters_scale", "\n", ")", "\n", "\n", "self", ".", "vertex_head", "=", "PoseFPNHead", "(", "\n", "backbone_output_shape_8x", ",", "\n", "num_classes", "=", "16", ",", "\n", "model_norm", "=", "hparams", ".", "model_norm", ",", "\n", "num_filters_scale", "=", "hparams", ".", "num_filters_scale", "\n", ")", "\n", "\n", "self", ".", "z_centroid_head", "=", "PoseFPNHead", "(", "\n", "backbone_output_shape_8x", ",", "\n", "num_classes", "=", "1", ",", "\n", "model_norm", "=", "hparams", ".", "model_norm", ",", "\n", "num_filters_scale", "=", "hparams", ".", "num_filters_scale", "\n", ")", "\n", "\n", "self", ".", "rotation_head", "=", "PoseFPNHead", "(", "\n", "backbone_output_shape_8x", ",", "\n", "num_classes", "=", "6", ",", "\n", "model_norm", "=", "hparams", ".", "model_norm", ",", "\n", "num_filters_scale", "=", "hparams", ".", "num_filters_scale", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.OBBHead.forward": [[376, 383], ["panoptic_net.OBBHead.z_centroid_head.forward().squeeze", "panoptic_net.OBBHead.heatmap_head.forward().squeeze", "panoptic_net.OBBHead.vertex_head.forward", "panoptic_net.OBBHead.rotation_head.forward", "simnet.lib.net.post_processing.obb_outputs.OBBOutput", "panoptic_net.OBBHead.z_centroid_head.forward", "panoptic_net.OBBHead.heatmap_head.forward"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "    ", "z_centroid_output", "=", "self", ".", "z_centroid_head", ".", "forward", "(", "features", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "heatmap_output", "=", "self", ".", "heatmap_head", ".", "forward", "(", "features", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "vertex_output", "=", "self", ".", "vertex_head", ".", "forward", "(", "features", ")", "\n", "rotation_output", "=", "self", ".", "rotation_head", ".", "forward", "(", "features", ")", "\n", "return", "obb_outputs", ".", "OBBOutput", "(", "\n", "heatmap_output", ",", "vertex_output", ",", "z_centroid_output", ",", "rotation_output", ",", "self", ".", "hparams", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__": [[388, 418], ["torch.Module.__init__", "simnet.lib.net.models.simplenet.StereoBackbone", "panoptic_net.DepthHead", "panoptic_net.SegmentationHead", "panoptic_net.OBBHead", "panoptic_net.ShapeSpec", "panoptic_net.ShapeSpec", "panoptic_net.ShapeSpec", "panoptic_net.ShapeSpec", "panoptic_net.ShapeSpec"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "hparams", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "backbone", "=", "simplenet", ".", "StereoBackbone", "(", "hparams", ")", "\n", "# ResFPN used p2,p3,p4,p5 (64 channels)", "\n", "# DRN uses only p2,p3,p4 (no need for p5 since dilation increases striding naturally)", "\n", "backbone_output_shape_4x", "=", "{", "\n", "#'p0': ShapeSpec(channels=64, height=None, width=None, stride=1),", "\n", "#'p1': ShapeSpec(channels=64, height=None, width=None, stride=2),", "\n", "'p2'", ":", "ShapeSpec", "(", "channels", "=", "64", ",", "height", "=", "None", ",", "width", "=", "None", ",", "stride", "=", "4", ")", ",", "\n", "'p3'", ":", "ShapeSpec", "(", "channels", "=", "64", ",", "height", "=", "None", ",", "width", "=", "None", ",", "stride", "=", "8", ")", ",", "\n", "'p4'", ":", "ShapeSpec", "(", "channels", "=", "64", ",", "height", "=", "None", ",", "width", "=", "None", ",", "stride", "=", "16", ")", ",", "\n", "#'p5': ShapeSpec(channels=64, height=None, width=None, stride=32),", "\n", "}", "\n", "\n", "backbone_output_shape_8x", "=", "{", "\n", "#'p0': ShapeSpec(channels=64, height=None, width=None, stride=1),", "\n", "#'p1': ShapeSpec(channels=64, height=None, width=None, stride=2),", "\n", "#'p2': ShapeSpec(channels=64, height=None, width=None, stride=4),", "\n", "'p3'", ":", "ShapeSpec", "(", "channels", "=", "64", ",", "height", "=", "None", ",", "width", "=", "None", ",", "stride", "=", "8", ")", ",", "\n", "'p4'", ":", "ShapeSpec", "(", "channels", "=", "64", ",", "height", "=", "None", ",", "width", "=", "None", ",", "stride", "=", "16", ")", ",", "\n", "#'p5': ShapeSpec(channels=64, height=None, width=None, stride=32),", "\n", "}", "\n", "\n", "# Add depth head.", "\n", "self", ".", "depth_head", "=", "DepthHead", "(", "backbone_output_shape_4x", ",", "backbone_output_shape_8x", ",", "hparams", ")", "\n", "# Add segmentation head.", "\n", "self", ".", "seg_head", "=", "SegmentationHead", "(", "backbone_output_shape_4x", ",", "backbone_output_shape_8x", ",", "5", ",", "hparams", ")", "\n", "# Add pose heads.", "\n", "self", ".", "pose_head", "=", "OBBHead", "(", "backbone_output_shape_4x", ",", "backbone_output_shape_8x", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward": [[419, 434], ["panoptic_net.PanopticNet.backbone.forward", "small_disp_output.detach.detach.squeeze", "simnet.lib.net.post_processing.depth_outputs.DepthOutput", "panoptic_net.PanopticNet.seg_head.forward", "panoptic_net.PanopticNet.depth_head.forward", "panoptic_net.PanopticNet.pose_head.forward", "small_disp_output.detach.detach.detach"], "methods", ["home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward", "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.PanopticNet.forward"], ["", "def", "forward", "(", "self", ",", "image", ",", "step", ")", ":", "\n", "    ", "features", "=", "self", ".", "backbone", ".", "forward", "(", "image", ",", "step", ")", "\n", "small_disp_output", "=", "features", "[", "'small_disp'", "]", "\n", "small_disp_output", "=", "small_disp_output", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "if", "self", ".", "hparams", ".", "frozen_stereo_checkpoint", "is", "not", "None", ":", "\n", "      ", "small_disp_output", "=", "small_disp_output", ".", "detach", "(", ")", "\n", "assert", "False", "\n", "", "small_depth_output", "=", "depth_outputs", ".", "DepthOutput", "(", "small_disp_output", ",", "self", ".", "hparams", ".", "loss_depth_mult", ")", "\n", "seg_output", "=", "self", ".", "seg_head", ".", "forward", "(", "features", ")", "\n", "depth_output", "=", "self", ".", "depth_head", ".", "forward", "(", "features", ")", "\n", "pose_output", "=", "self", ".", "pose_head", ".", "forward", "(", "features", ")", "\n", "# TODO(kevin): Remove unused output heads", "\n", "box_output", "=", "None", "\n", "keypoint_output", "=", "None", "\n", "return", "seg_output", ",", "depth_output", ",", "small_depth_output", ",", "pose_output", ",", "box_output", ",", "keypoint_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.c2_msra_fill": [[20, 32], ["torch.init.kaiming_normal_", "torch.init.constant_"], "function", ["None"], ["def", "c2_msra_fill", "(", "module", ":", "nn", ".", "Module", ")", "->", "None", ":", "\n", "  ", "\"\"\"\n    Initialize `module.weight` using the \"MSRAFill\" implemented in Caffe2.\n    Also initializes `module.bias` to 0.\n    Args:\n        module (torch.nn.Module): module to initialize.\n    \"\"\"", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "# pyre-fixme[6]: Expected `Tensor` for 1st param but got `Union[nn.Module,", "\n", "#  torch.Tensor]`.", "\n", "    ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.get_norm": [[91, 116], ["isinstance", "norm", "len", "torch.GroupNorm"], "function", ["None"], ["", "", "def", "get_norm", "(", "norm", ",", "out_channels", ")", ":", "\n", "  ", "\"\"\"\n  Args:\n    norm (str or callable): either one of BN, SyncBN, FrozenBN, GN;\n      or a callable that takes a channel number and returns\n      the normalization layer as a nn.Module.\n\n  Returns:\n    nn.Module or None: the normalization layer\n  \"\"\"", "\n", "if", "out_channels", "==", "32", ":", "\n", "    ", "N", "=", "16", "\n", "", "else", ":", "\n", "    ", "N", "=", "32", "\n", "", "if", "isinstance", "(", "norm", ",", "str", ")", ":", "\n", "    ", "if", "len", "(", "norm", ")", "==", "0", ":", "\n", "      ", "return", "None", "\n", "", "norm", "=", "{", "\n", "\"BN\"", ":", "torch", ".", "nn", ".", "BatchNorm2d", ",", "\n", "#\"SyncBN\": NaiveSyncBatchNorm,", "\n", "#\"FrozenBN\": FrozenBatchNorm2d,", "\n", "\"GN\"", ":", "lambda", "channels", ":", "nn", ".", "GroupNorm", "(", "N", ",", "channels", ")", ",", "\n", "#\"nnSyncBN\": nn.SyncBatchNorm,  # keep for debugging", "\n", "}", "[", "norm", "]", "\n", "", "return", "norm", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ToyotaResearchInstitute_simnet.models.panoptic_net.res_fpn": [[273, 275], ["panoptic_net.PanopticNet"], "function", ["None"], ["", "", "def", "res_fpn", "(", "hparams", ")", ":", "\n", "  ", "return", "PanopticNet", "(", "hparams", ")", "\n", "\n"]]}