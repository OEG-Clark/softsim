{"home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_nosave.DataTransform.__init__": [[24, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "resolution", ")", ":", "\n", "        ", "self", ".", "resolution", "=", "resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_nosave.DataTransform.__call__": [[27, 44], ["data.transforms.to_tensor", "data.transforms.ifft2_regular", "data.transforms.complex_center_crop", "data.transforms.normalize_instance", "data.transforms.to_tensor", "data.transforms.normalize_instance", "attrs[].astype", "attrs[].astype"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.to_tensor", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifft2_regular", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.to_tensor", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.normalize_instance"], ["", "def", "__call__", "(", "self", ",", "kspace", ",", "target", ",", "attrs", ",", "fname", ",", "slice", ")", ":", "\n", "        ", "kspace", "=", "transforms", ".", "to_tensor", "(", "kspace", ")", "\n", "image", "=", "transforms", ".", "ifft2_regular", "(", "kspace", ")", "\n", "image", "=", "transforms", ".", "complex_center_crop", "(", "image", ",", "(", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ")", "\n", "# image = transforms.complex_abs(image)", "\n", "image", ",", "mean", ",", "std", "=", "transforms", ".", "normalize_instance", "(", "image", ",", "eps", "=", "1e-11", ")", "\n", "# image, mean, std = transforms.normalize_instance_per_channel(image, eps=1e-11)", "\n", "# image = image.clamp(-6, 6)", "\n", "# kspace = transforms.fft2(image)", "\n", "\n", "target", "=", "transforms", ".", "to_tensor", "(", "target", ")", "\n", "target", ",", "mean", ",", "std", "=", "transforms", ".", "normalize_instance", "(", "target", ",", "eps", "=", "1e-11", ")", "\n", "# # target = transforms.normalize(target, mean, std)", "\n", "# target = target.clamp(-6, 6)", "\n", "mean", "=", "std", "=", "0", "\n", "return", "image", ",", "target", ",", "mean", ",", "std", ",", "attrs", "[", "'norm'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "image", ",", "target", ",", "mean", ",", "std", ",", "attrs", "[", "'norm'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_nosave.create_data_loaders": [[45, 58], ["data.mri_data.SliceData", "torch.utils.data.DataLoader", "reconstructe_nosave.DataTransform"], "function", ["None"], ["", "", "def", "create_data_loaders", "(", "args", ")", ":", "\n", "    ", "data", "=", "SliceData", "(", "\n", "root", "=", "args", ".", "data_path", "/", "f'multicoil_{args.data_split}'", ",", "\n", "transform", "=", "DataTransform", "(", "args", ".", "resolution", ")", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", "\n", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_nosave.load_model": [[59, 81], ["torch.load", "models.subsampling_model.Subsampling_Model().to", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel", "models.subsampling_model.Subsampling_Model"], "function", ["None"], ["", "def", "load_model", "(", "checkpoint_file", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_file", ")", "\n", "args", "=", "checkpoint", "[", "'args'", "]", "\n", "args", ".", "interp_gap", "=", "1", "\n", "model", "=", "Subsampling_Model", "(", "\n", "in_chans", "=", "1", ",", "\n", "out_chans", "=", "1", ",", "\n", "chans", "=", "args", ".", "num_chans", ",", "\n", "num_pool_layers", "=", "args", ".", "num_pools", ",", "\n", "drop_prob", "=", "args", ".", "drop_prob", ",", "\n", "decimation_rate", "=", "args", ".", "decimation_rate", ",", "\n", "res", "=", "args", ".", "resolution", ",", "\n", "trajectory_learning", "=", "args", ".", "trajectory_learning", ",", "\n", "initialization", "=", "args", ".", "initialization", ",", "\n", "SNR", "=", "args", ".", "SNR", ",", "\n", "n_shots", "=", "args", ".", "n_shots", ",", "\n", "interp_gap", "=", "args", ".", "interp_gap", "\n", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "args", ".", "data_parallel", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_nosave.eval": [[82, 99], ["model.eval", "print", "torch.no_grad", "input.to.to", "model().to().squeeze", "recons.squeeze.squeeze", "target.to.to", "psnr_l.append", "ssim_l.append", "common.evaluate.psnr", "common.evaluate.ssim", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "model().to", "target.to.numpy", "recons.squeeze.numpy", "target.to.numpy", "recons.squeeze.numpy", "model"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.eval", "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.psnr", "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.ssim"], ["", "def", "eval", "(", "args", ",", "model", ",", "data_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "psnr_l", "=", "[", "]", "\n", "ssim_l", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "input", ",", "target", ",", "mean", ",", "std", ",", "norm", ")", "in", "data_loader", ":", "\n", "            ", "input", "=", "input", ".", "to", "(", "args", ".", "device", ")", "\n", "recons", "=", "model", "(", "input", ")", ".", "to", "(", "'cpu'", ")", ".", "squeeze", "(", "1", ")", "\n", "# recons = transforms.complex_abs(recons)  # complex to real", "\n", "recons", "=", "recons", ".", "squeeze", "(", ")", "\n", "target", "=", "target", ".", "to", "(", "'cpu'", ")", "\n", "\n", "psnr_l", ".", "append", "(", "psnr", "(", "target", ".", "numpy", "(", ")", ",", "recons", ".", "numpy", "(", ")", ")", ")", "\n", "ssim_l", ".", "append", "(", "ssim", "(", "target", ".", "numpy", "(", ")", ",", "recons", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "", "", "print", "(", "f'PSNR: {np.mean(psnr_l):.2f} +- {np.std(psnr_l):.2f}, SSIM: {np.mean(ssim_l):.4f} +- {np.std(ssim_l):.4f}'", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_nosave.reconstructe": [[100, 110], ["create_arg_parser().parse_args", "print", "reconstructe_nosave.create_data_loaders", "reconstructe_nosave.load_model", "reconstructe_nosave.eval", "reconstructe_nosave.create_arg_parser"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.create_data_loaders", "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.load_model", "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.eval", "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.create_arg_parser"], ["", "def", "reconstructe", "(", ")", ":", "\n", "    ", "args", "=", "create_arg_parser", "(", ")", ".", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "args", ".", "checkpoint", "=", "f'summary/{args.test_name}/best_model.pt'", "\n", "# args.checkpoint = f'summary/{args.test_name}/model.pt'", "\n", "args", ".", "out_dir", "=", "f'summary/{args.test_name}/rec'", "\n", "print", "(", "f'summary/{args.test_name}'", ")", "\n", "\n", "data_loader", "=", "create_data_loaders", "(", "args", ")", "\n", "model", "=", "load_model", "(", "args", ".", "checkpoint", ")", "\n", "eval", "(", "args", ",", "model", ",", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_nosave.create_arg_parser": [[111, 126], ["common.args.Args", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument"], "function", ["None"], ["", "def", "create_arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "Args", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--test-name'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'name for the output dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-split'", ",", "choices", "=", "[", "'val'", ",", "'test'", "]", ",", "default", "=", "'val'", ",", "\n", "help", "=", "'Which data partition to run on: \"val\" or \"test\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "pathlib", ".", "Path", ",", "default", "=", "'summary/test/checkpoint/best_model.pt'", ",", "\n", "help", "=", "'Path to the U-Net model'", ")", "\n", "parser", ".", "add_argument", "(", "'--out-dir'", ",", "type", "=", "pathlib", ".", "Path", ",", "default", "=", "'summary/test/rec'", ",", "\n", "help", "=", "'Path to save the reconstructions to'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "18", ",", "type", "=", "int", ",", "help", "=", "'Mini-batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda'", ",", "help", "=", "'Which device to run on'", ")", "\n", "parser", ".", "add_argument", "(", "'--SNR'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'add SNR decay'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.DataTransform.__init__": [[37, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "resolution", ")", ":", "\n", "        ", "self", ".", "resolution", "=", "resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.DataTransform.__call__": [[40, 56], ["data.transforms.to_tensor", "data.transforms.ifft2_regular", "data.transforms.complex_center_crop", "data.transforms.normalize_instance", "data.transforms.to_tensor", "data.transforms.normalize_instance", "attrs[].astype"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.to_tensor", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifft2_regular", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.to_tensor", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.normalize_instance"], ["", "def", "__call__", "(", "self", ",", "kspace", ",", "target", ",", "attrs", ",", "fname", ",", "slice", ")", ":", "\n", "        ", "kspace", "=", "transforms", ".", "to_tensor", "(", "kspace", ")", "\n", "image", "=", "transforms", ".", "ifft2_regular", "(", "kspace", ")", "\n", "image", "=", "transforms", ".", "complex_center_crop", "(", "image", ",", "(", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ")", "\n", "# image = transforms.complex_abs(image)", "\n", "image", ",", "mean", ",", "std", "=", "transforms", ".", "normalize_instance", "(", "image", ",", "eps", "=", "1e-11", ")", "\n", "# image, mean, std = transforms.normalize_instance_per_channel(image, eps=1e-11)", "\n", "# image = image.clamp(-6, 6)", "\n", "# kspace = transforms.fft2(image)", "\n", "\n", "target", "=", "transforms", ".", "to_tensor", "(", "target", ")", "\n", "target", ",", "mean", ",", "std", "=", "transforms", ".", "normalize_instance", "(", "target", ",", "eps", "=", "1e-11", ")", "\n", "# # target = transforms.normalize(target, mean, std)", "\n", "# target = target.clamp(-6, 6)", "\n", "mean", "=", "std", "=", "0", "\n", "return", "image", ",", "target", ",", "mean", ",", "std", ",", "attrs", "[", "'norm'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.create_datasets": [[58, 70], ["data.mri_data.SliceData", "data.mri_data.SliceData", "train.DataTransform", "train.DataTransform"], "function", ["None"], ["", "", "def", "create_datasets", "(", "args", ")", ":", "\n", "    ", "train_data", "=", "SliceData", "(", "\n", "root", "=", "args", ".", "data_path", "/", "'multicoil_train'", ",", "\n", "transform", "=", "DataTransform", "(", "args", ".", "resolution", ")", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", "\n", ")", "\n", "dev_data", "=", "SliceData", "(", "\n", "root", "=", "args", ".", "data_path", "/", "'multicoil_val'", ",", "\n", "transform", "=", "DataTransform", "(", "args", ".", "resolution", ")", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", "\n", ")", "\n", "return", "dev_data", ",", "train_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.create_data_loaders": [[72, 96], ["train.create_datasets", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.None.train.create_datasets"], ["", "def", "create_data_loaders", "(", "args", ")", ":", "\n", "    ", "dev_data", ",", "train_data", "=", "create_datasets", "(", "args", ")", "\n", "display_data", "=", "[", "dev_data", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "dev_data", ")", ",", "len", "(", "dev_data", ")", "//", "16", ")", "]", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "train_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "20", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "dev_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "dev_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "20", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "display_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "display_data", ",", "\n", "batch_size", "=", "16", ",", "\n", "num_workers", "=", "20", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "return", "train_loader", ",", "dev_loader", ",", "display_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.tsp_solver": [[98, 103], ["scipy.spatial.distance_matrix", "tsp_solver.greedy.solve_tsp"], "function", ["None"], ["", "def", "tsp_solver", "(", "x", ")", ":", "\n", "# reorder the trajectory according to the TSP solution", "\n", "    ", "d", "=", "distance_matrix", "(", "x", ",", "x", ")", "\n", "t", "=", "solve_tsp", "(", "d", ")", "\n", "return", "x", "[", "t", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.train_epoch": [[105, 236], ["model.train", "time.perf_counter", "print", "enumerate", "model.module.get_trajectory", "model.module.get_trajectory.detach().cpu().numpy", "range", "common.utils.get_vel_acc", "writer.add_figure", "writer.add_figure", "writer.add_figure", "numpy.save", "optimizer.zero_grad", "input.to.to", "target.to.to", "model", "output.squeeze.squeeze", "model.module.get_trajectory", "common.utils.get_vel_acc", "torch.sqrt", "torch.sqrt", "torch.nn.functional.l1_loss", "loss.backward", "optimizer.step", "time.perf_counter", "train.tsp_solver", "train.plot_trajectory", "train.plot_acc", "train.plot_acc", "torch.no_grad", "torch.tensor", "torch.sum", "torch.sum", "loss.item", "logging.info", "time.perf_counter", "model.module.get_trajectory.detach().cpu", "torch.pow", "torch.pow", "loss.item", "model.module.get_trajectory.detach", "torch.nn.functional.softshrink().abs", "torch.nn.functional.softshrink().abs", "len", "loss.item", "torch.nn.functional.softshrink", "torch.nn.functional.softshrink"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.None.train.train", "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Model.get_trajectory", "home.repos.pwc.inspect_result.tomer196_PILOT.common.utils.get_vel_acc", "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Model.get_trajectory", "home.repos.pwc.inspect_result.tomer196_PILOT.common.utils.get_vel_acc", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.tsp_solver", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.plot_trajectory", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.plot_acc", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.plot_acc"], ["", "def", "train_epoch", "(", "args", ",", "epoch", ",", "model", ",", "data_loader", ",", "optimizer", ",", "writer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "avg_loss", "=", "0.", "\n", "if", "epoch", "==", "args", ".", "TSP_epoch", "and", "args", ".", "TSP", ":", "\n", "        ", "x", "=", "model", ".", "module", ".", "get_trajectory", "(", ")", "\n", "x", "=", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "shot", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "x", "[", "shot", ",", ":", ",", ":", "]", "=", "tsp_solver", "(", "x", "[", "shot", ",", ":", ",", ":", "]", ")", "\n", "", "v", ",", "a", "=", "get_vel_acc", "(", "x", ")", "\n", "writer", ".", "add_figure", "(", "'TSP_Trajectory'", ",", "plot_trajectory", "(", "x", ")", ",", "epoch", ")", "\n", "writer", ".", "add_figure", "(", "'TSP_Acc'", ",", "plot_acc", "(", "a", ",", "args", ".", "a_max", ")", ",", "epoch", ")", "\n", "writer", ".", "add_figure", "(", "'TSP_Vel'", ",", "plot_acc", "(", "v", ",", "args", ".", "v_max", ")", ",", "epoch", ")", "\n", "np", ".", "save", "(", "'trajTSP'", ",", "x", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "x", ".", "data", "=", "torch", ".", "tensor", "(", "x", ",", "device", "=", "'cuda'", ")", "\n", "", "args", ".", "a_max", "*=", "2", "\n", "args", ".", "v_max", "*=", "2", "\n", "args", ".", "vel_weight", "=", "1e-3", "\n", "args", ".", "acc_weight", "=", "1e-3", "\n", "\n", "# if epoch == 30:", "\n", "#     v0 = args.gamma * args.G_max * args.FOV * args.dt", "\n", "#     a0 = args.gamma * args.S_max * args.FOV * args.dt ** 2 * 1e3", "\n", "#     args.a_max = a0 *1.5", "\n", "#     args.v_max = v0 *1.5", "\n", "\n", "# if args.TSP and epoch > args.TSP_epoch and epoch<=args.TSP_epoch*2:", "\n", "#     v0 = args.gamma * args.G_max * args.FOV * args.dt", "\n", "#     a0 = args.gamma * args.S_max * args.FOV * args.dt ** 2 * 1e3", "\n", "#     args.a_max -= a0/args.TSP_epoch", "\n", "#     args.v_max -= v0/args.TSP_epoch", "\n", "#", "\n", "# if args.TSP and epoch==args.TSP_epoch*2:", "\n", "#     v0 = args.gamma * args.G_max * args.FOV * args.dt", "\n", "#     a0 = args.gamma * args.S_max * args.FOV * args.dt ** 2 * 1e3", "\n", "#     args.a_max = a0", "\n", "#     args.v_max = v0", "\n", "#     args.vel_weight *= 10", "\n", "#     args.acc_weight *= 10", "\n", "# if args.TSP and epoch==args.TSP_epoch*2+10:", "\n", "#     args.vel_weight *= 10", "\n", "#     args.acc_weight *= 10", "\n", "# if args.TSP and epoch==args.TSP_epoch*2+20:", "\n", "#     args.vel_weight *= 10", "\n", "#     args.acc_weight *= 10", "\n", "", "if", "args", ".", "TSP", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "TSP_epoch", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "1", "\n", "", "elif", "epoch", "<", "10", "+", "args", ".", "TSP_epoch", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "10", "\n", "v0", "=", "args", ".", "gamma", "*", "args", ".", "G_max", "*", "args", ".", "FOV", "*", "args", ".", "dt", "\n", "a0", "=", "args", ".", "gamma", "*", "args", ".", "S_max", "*", "args", ".", "FOV", "*", "args", ".", "dt", "**", "2", "*", "1e3", "\n", "args", ".", "a_max", "-=", "a0", "/", "args", ".", "TSP_epoch", "\n", "args", ".", "v_max", "-=", "v0", "/", "args", ".", "TSP_epoch", "\n", "", "elif", "epoch", "==", "10", "+", "args", ".", "TSP_epoch", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "10", "\n", "v0", "=", "args", ".", "gamma", "*", "args", ".", "G_max", "*", "args", ".", "FOV", "*", "args", ".", "dt", "\n", "a0", "=", "args", ".", "gamma", "*", "args", ".", "S_max", "*", "args", ".", "FOV", "*", "args", ".", "dt", "**", "2", "*", "1e3", "\n", "args", ".", "a_max", "-=", "a0", "/", "args", ".", "TSP_epoch", "\n", "args", ".", "v_max", "-=", "v0", "/", "args", ".", "TSP_epoch", "\n", "", "elif", "epoch", "==", "15", "+", "args", ".", "TSP_epoch", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "10", "\n", "v0", "=", "args", ".", "gamma", "*", "args", ".", "G_max", "*", "args", ".", "FOV", "*", "args", ".", "dt", "\n", "a0", "=", "args", ".", "gamma", "*", "args", ".", "S_max", "*", "args", ".", "FOV", "*", "args", ".", "dt", "**", "2", "*", "1e3", "\n", "args", ".", "a_max", "-=", "a0", "/", "args", ".", "TSP_epoch", "\n", "args", ".", "v_max", "-=", "v0", "/", "args", ".", "TSP_epoch", "\n", "", "elif", "epoch", "==", "20", "+", "args", ".", "TSP_epoch", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "10", "\n", "args", ".", "vel_weight", "*=", "10", "\n", "args", ".", "acc_weight", "*=", "10", "\n", "", "elif", "epoch", "==", "23", "+", "args", ".", "TSP_epoch", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "5", "\n", "args", ".", "vel_weight", "*=", "10", "\n", "args", ".", "acc_weight", "*=", "10", "\n", "", "elif", "epoch", "==", "25", "+", "args", ".", "TSP_epoch", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "1", "\n", "args", ".", "vel_weight", "*=", "10", "\n", "args", ".", "acc_weight", "*=", "10", "\n", "", "", "else", ":", "\n", "        ", "if", "epoch", "<", "10", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "50", "\n", "", "elif", "epoch", "==", "10", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "30", "\n", "", "elif", "epoch", "==", "15", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "20", "\n", "", "elif", "epoch", "==", "20", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "10", "\n", "", "elif", "epoch", "==", "23", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "5", "\n", "", "elif", "epoch", "==", "25", ":", "\n", "            ", "model", ".", "module", ".", "subsampling", ".", "interp_gap", "=", "1", "\n", "\n", "", "", "start_epoch", "=", "start_iter", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "f'a_max={args.a_max}, v_max={args.v_max}'", ")", "\n", "for", "iter", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "input", ",", "target", ",", "mean", ",", "std", ",", "norm", "=", "data", "\n", "input", "=", "input", ".", "to", "(", "args", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "output", "=", "model", "(", "input", ")", "\n", "# output = transforms.complex_abs(output)  # complex to real", "\n", "# output = transforms.root_sum_of_squares(output, dim=1)", "\n", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "\n", "x", "=", "model", ".", "module", ".", "get_trajectory", "(", ")", "\n", "v", ",", "a", "=", "get_vel_acc", "(", "x", ")", "\n", "acc_loss", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "F", ".", "softshrink", "(", "a", ",", "args", ".", "a_max", ")", ".", "abs", "(", ")", "+", "1e-8", ",", "2", ")", ")", ")", "\n", "vel_loss", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "F", ".", "softshrink", "(", "v", ",", "args", ".", "v_max", ")", ".", "abs", "(", ")", "+", "1e-8", ",", "2", ")", ")", ")", "\n", "\n", "rec_loss", "=", "F", ".", "l1_loss", "(", "output", ",", "target", ")", "\n", "if", "args", ".", "TSP", "and", "epoch", "<", "args", ".", "TSP_epoch", ":", "\n", "            ", "loss", "=", "args", ".", "rec_weight", "*", "rec_loss", "\n", "", "else", ":", "\n", "            ", "loss", "=", "args", ".", "rec_weight", "*", "rec_loss", "+", "args", ".", "vel_weight", "*", "vel_loss", "+", "args", ".", "acc_weight", "*", "acc_loss", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "avg_loss", "=", "0.99", "*", "avg_loss", "+", "0.01", "*", "loss", ".", "item", "(", ")", "if", "iter", ">", "0", "else", "loss", ".", "item", "(", ")", "\n", "# writer.add_scalar('TrainLoss', loss.item(), global_step + iter)", "\n", "\n", "if", "iter", "%", "args", ".", "report_interval", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "f'Epoch = [{epoch:3d}/{args.num_epochs:3d}] '", "\n", "f'Iter = [{iter:4d}/{len(data_loader):4d}] '", "\n", "f'Loss = {loss.item():.4g} Avg Loss = {avg_loss:.4g} '", "\n", "f'rec_loss: {rec_loss:.4g}, vel_loss: {vel_loss:.4g}, acc_loss: {acc_loss:.4g}'", "\n", ")", "\n", "", "start_iter", "=", "time", ".", "perf_counter", "(", ")", "\n", "", "return", "avg_loss", ",", "time", ".", "perf_counter", "(", ")", "-", "start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.evaluate": [[238, 283], ["model.eval", "time.perf_counter", "torch.no_grad", "model.module.get_trajectory", "common.utils.get_vel_acc", "writer.add_figure", "writer.add_figure", "writer.add_text", "enumerate", "model.module.get_trajectory", "common.utils.get_vel_acc", "torch.sqrt", "torch.sqrt", "numpy.mean", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_figure", "writer.add_figure", "writer.add_figure", "train.plot_acc", "train.plot_acc", "str().replace", "numpy.mean", "input.to.to", "target.to.to", "model", "output.squeeze.squeeze", "torch.nn.functional.l1_loss", "losses.append", "torch.sum", "torch.sum", "torch.sqrt.detach().cpu().numpy", "torch.sqrt.detach().cpu().numpy", "train.plot_scatter", "train.plot_trajectory", "train.plot_scatter", "a.cpu().numpy", "v.cpu().numpy", "time.perf_counter", "time.perf_counter", "F.l1_loss.item", "torch.pow", "torch.pow", "torch.sqrt.detach().cpu().numpy", "model.module.get_trajectory.detach().cpu().numpy", "model.module.get_trajectory.detach().cpu().numpy", "model.module.get_trajectory.detach().cpu().numpy", "str", "torch.nn.functional.softshrink", "torch.nn.functional.softshrink", "torch.sqrt.detach().cpu", "torch.sqrt.detach().cpu", "torch.sqrt.detach().cpu().numpy", "a.cpu", "v.cpu", "model.module.get_trajectory.detach().cpu().numpy", "torch.sqrt.detach().cpu", "model.module.get_trajectory.detach().cpu", "model.module.get_trajectory.detach().cpu", "model.module.get_trajectory.detach().cpu", "torch.sqrt.detach", "torch.sqrt.detach", "torch.sqrt.detach().cpu", "model.module.get_trajectory.detach().cpu", "torch.sqrt.detach", "model.module.get_trajectory.detach", "model.module.get_trajectory.detach", "model.module.get_trajectory.detach", "torch.sqrt.detach", "model.module.get_trajectory.detach"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.eval", "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Model.get_trajectory", "home.repos.pwc.inspect_result.tomer196_PILOT.common.utils.get_vel_acc", "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Model.get_trajectory", "home.repos.pwc.inspect_result.tomer196_PILOT.common.utils.get_vel_acc", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.plot_acc", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.plot_acc", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.plot_scatter", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.plot_trajectory", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.plot_scatter"], ["", "def", "evaluate", "(", "args", ",", "epoch", ",", "model", ",", "data_loader", ",", "writer", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "losses", "=", "[", "]", "\n", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "epoch", "!=", "0", ":", "\n", "            ", "for", "iter", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "input", ",", "target", ",", "mean", ",", "std", ",", "norm", "=", "data", "\n", "input", "=", "input", ".", "to", "(", "args", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "output", "=", "model", "(", "input", ")", "\n", "# output = transforms.complex_abs(output)  # complex to real", "\n", "# output = transforms.root_sum_of_squares(output, dim=1)", "\n", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "\n", "loss", "=", "F", ".", "l1_loss", "(", "output", ",", "target", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "x", "=", "model", ".", "module", ".", "get_trajectory", "(", ")", "\n", "v", ",", "a", "=", "get_vel_acc", "(", "x", ")", "\n", "acc_loss", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "F", ".", "softshrink", "(", "a", ",", "args", ".", "a_max", ")", ",", "2", ")", ")", ")", "\n", "vel_loss", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "F", ".", "softshrink", "(", "v", ",", "args", ".", "v_max", ")", ",", "2", ")", ")", ")", "\n", "rec_loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'Rec_Loss'", ",", "rec_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Acc_Loss'", ",", "acc_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Vel_Loss'", ",", "vel_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Total_Loss'", ",", "\n", "rec_loss", "+", "acc_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "vel_loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "epoch", ")", "\n", "\n", "", "x", "=", "model", ".", "module", ".", "get_trajectory", "(", ")", "\n", "v", ",", "a", "=", "get_vel_acc", "(", "x", ")", "\n", "if", "args", ".", "TSP", "and", "epoch", "<", "args", ".", "TSP_epoch", ":", "\n", "            ", "writer", ".", "add_figure", "(", "'Scatter'", ",", "plot_scatter", "(", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "writer", ".", "add_figure", "(", "'Trajectory'", ",", "plot_trajectory", "(", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "epoch", ")", "\n", "writer", ".", "add_figure", "(", "'Scatter'", ",", "plot_scatter", "(", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "epoch", ")", "\n", "", "writer", ".", "add_figure", "(", "'Accelerations_plot'", ",", "plot_acc", "(", "a", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "args", ".", "a_max", ")", ",", "epoch", ")", "\n", "writer", ".", "add_figure", "(", "'Velocity_plot'", ",", "plot_acc", "(", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "args", ".", "v_max", ")", ",", "epoch", ")", "\n", "writer", ".", "add_text", "(", "'Coordinates'", ",", "str", "(", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "replace", "(", "' '", ",", "','", ")", ",", "epoch", ")", "\n", "", "if", "epoch", "==", "0", ":", "\n", "        ", "return", "None", ",", "time", ".", "perf_counter", "(", ")", "-", "start", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "losses", ")", ",", "time", ".", "perf_counter", "(", ")", "-", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.plot_scatter": [[285, 292], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.axis", "range", "fig.add_subplot.plot"], "function", ["None"], ["", "", "def", "plot_scatter", "(", "x", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "[", "10", ",", "10", "]", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "ax", ".", "axis", "(", "[", "-", "165", ",", "165", ",", "-", "165", ",", "165", "]", ")", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "x", "[", "i", ",", ":", ",", "0", "]", ",", "x", "[", "i", ",", ":", ",", "1", "]", ",", "'.'", ")", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.plot_trajectory": [[294, 301], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.axis", "range", "fig.add_subplot.plot"], "function", ["None"], ["", "def", "plot_trajectory", "(", "x", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "[", "10", ",", "10", "]", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "ax", ".", "axis", "(", "[", "-", "165", ",", "165", ",", "-", "165", ",", "165", "]", ")", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "x", "[", "i", ",", ":", ",", "0", "]", ",", "x", "[", "i", ",", ":", ",", "1", "]", ")", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.plot_acc": [[303, 315], ["matplotlib.subplots", "range", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].plot", "numpy.ones"], "function", ["None"], ["", "def", "plot_acc", "(", "a", ",", "a_max", "=", "None", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "sharex", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "a", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ax", "[", "0", "]", ".", "plot", "(", "a", "[", "i", ",", ":", ",", "0", "]", ")", "\n", "ax", "[", "1", "]", ".", "plot", "(", "a", "[", "i", ",", ":", ",", "1", "]", ")", "\n", "", "if", "a_max", "is", "not", "None", ":", "\n", "        ", "limit", "=", "np", ".", "ones", "(", "a", ".", "shape", "[", "1", "]", ")", "*", "a_max", "\n", "ax", "[", "1", "]", ".", "plot", "(", "limit", ",", "color", "=", "'red'", ")", "\n", "ax", "[", "1", "]", ".", "plot", "(", "-", "limit", ",", "color", "=", "'red'", ")", "\n", "ax", "[", "0", "]", ".", "plot", "(", "limit", ",", "color", "=", "'red'", ")", "\n", "ax", "[", "0", "]", ".", "plot", "(", "-", "limit", ",", "color", "=", "'red'", ")", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.visualize": [[317, 347], ["model.eval", "image.min", "image.max", "torchvision.utils.make_grid", "writer.add_image", "torch.no_grad", "enumerate", "input.to.to", "target.unsqueeze().to.unsqueeze().to", "train.visualize.save_image"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.eval"], ["", "def", "visualize", "(", "args", ",", "epoch", ",", "model", ",", "data_loader", ",", "writer", ")", ":", "\n", "    ", "def", "save_image", "(", "image", ",", "tag", ")", ":", "\n", "        ", "image", "-=", "image", ".", "min", "(", ")", "\n", "image", "/=", "image", ".", "max", "(", ")", "\n", "grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "image", ",", "nrow", "=", "4", ",", "pad_value", "=", "1", ")", "\n", "writer", ".", "add_image", "(", "tag", ",", "grid", ",", "epoch", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "iter", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "input", ",", "target", ",", "mean", ",", "std", ",", "norm", "=", "data", "\n", "input", "=", "input", ".", "to", "(", "args", ".", "device", ")", "\n", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "save_image", "(", "target", ",", "'Target'", ")", "\n", "if", "epoch", "!=", "0", ":", "\n", "                ", "output", "=", "model", "(", "input", ".", "clone", "(", ")", ")", "\n", "# output = transforms.complex_abs(output)  # complex to real", "\n", "# output = transforms.root_sum_of_squares(output, dim=1).unsqueeze(1)", "\n", "\n", "corrupted", "=", "model", ".", "module", ".", "subsampling", "(", "input", ")", "\n", "corrupted", "=", "corrupted", "[", "...", ",", "0", "]", "# complex to real", "\n", "cor_all", "=", "transforms", ".", "root_sum_of_squares", "(", "corrupted", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "save_image", "(", "output", ",", "'Reconstruction'", ")", "\n", "save_image", "(", "corrupted", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "'Corrupted0'", ")", "\n", "save_image", "(", "corrupted", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", ",", "'Corrupted1'", ")", "\n", "save_image", "(", "cor_all", ",", "'Corrupted'", ")", "\n", "save_image", "(", "torch", ".", "abs", "(", "target", "-", "output", ")", ",", "'Error'", ")", "\n", "", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.save_model": [[349, 363], ["torch.save", "shutil.copyfile", "model.state_dict", "optimizer.state_dict"], "function", ["None"], ["", "", "", "def", "save_model", "(", "args", ",", "exp_dir", ",", "epoch", ",", "model", ",", "optimizer", ",", "best_dev_loss", ",", "is_new_best", ")", ":", "\n", "    ", "torch", ".", "save", "(", "\n", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'args'", ":", "args", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_dev_loss'", ":", "best_dev_loss", ",", "\n", "'exp_dir'", ":", "exp_dir", "\n", "}", ",", "\n", "f", "=", "exp_dir", "+", "'/model.pt'", "\n", ")", "\n", "if", "is_new_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "exp_dir", "+", "'/model.pt'", ",", "exp_dir", "+", "'/best_model.pt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.build_model": [[365, 381], ["models.subsampling_model.Subsampling_Model().to", "models.subsampling_model.Subsampling_Model"], "function", ["None"], ["", "", "def", "build_model", "(", "args", ")", ":", "\n", "    ", "model", "=", "Subsampling_Model", "(", "\n", "in_chans", "=", "1", ",", "\n", "out_chans", "=", "1", ",", "\n", "chans", "=", "args", ".", "num_chans", ",", "\n", "num_pool_layers", "=", "args", ".", "num_pools", ",", "\n", "drop_prob", "=", "args", ".", "drop_prob", ",", "\n", "decimation_rate", "=", "args", ".", "decimation_rate", ",", "\n", "res", "=", "args", ".", "resolution", ",", "\n", "trajectory_learning", "=", "args", ".", "trajectory_learning", ",", "\n", "initialization", "=", "args", ".", "initialization", ",", "\n", "SNR", "=", "args", ".", "SNR", ",", "\n", "n_shots", "=", "args", ".", "n_shots", ",", "\n", "interp_gap", "=", "args", ".", "interp_gap", "\n", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.load_model": [[383, 394], ["torch.load", "train.build_model", "torch.nn.DataParallel.load_state_dict", "train.build_optim", "build_optim.load_state_dict", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.None.train.build_model", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.build_optim"], ["", "def", "load_model", "(", "checkpoint_file", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_file", ")", "\n", "args", "=", "checkpoint", "[", "'args'", "]", "\n", "model", "=", "build_model", "(", "args", ")", "\n", "if", "args", ".", "data_parallel", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "\n", "optimizer", "=", "build_optim", "(", "args", ",", "model", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "return", "checkpoint", ",", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.build_optim": [[396, 400], ["torch.optim.Adam", "model.module.subsampling.parameters", "model.module.reconstruction_model.parameters"], "function", ["None"], ["", "def", "build_optim", "(", "args", ",", "model", ")", ":", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "model", ".", "module", ".", "subsampling", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "sub_lr", "}", ",", "\n", "{", "'params'", ":", "model", ".", "module", ".", "reconstruction_model", ".", "parameters", "(", ")", "}", "]", ",", "args", ".", "lr", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.train": [[402, 464], ["create_arg_parser().parse_args", "random.seed", "numpy.random.seed", "torch.manual_seed", "pathlib.Path().mkdir", "tensorboardX.SummaryWriter", "logging.info", "train.create_data_loaders", "torch.optim.lr_scheduler.StepLR", "train.evaluate", "train.visualize", "range", "print", "print", "tensorboardX.SummaryWriter.close", "open", "print", "train.load_model", "train.build_model", "train.build_optim", "train.train_epoch", "train.evaluate", "train.visualize", "train.save_model", "logging.info", "train.create_arg_parser", "pathlib.Path", "vars", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.create_data_loaders", "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.evaluate", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.visualize", "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.load_model", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.build_model", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.build_optim", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.train_epoch", "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.evaluate", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.visualize", "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.save_model", "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.create_arg_parser"], ["", "def", "train", "(", ")", ":", "\n", "    ", "args", "=", "create_arg_parser", "(", ")", ".", "parse_args", "(", ")", "\n", "args", ".", "v_max", "=", "args", ".", "gamma", "*", "args", ".", "G_max", "*", "args", ".", "FOV", "*", "args", ".", "dt", "\n", "args", ".", "a_max", "=", "args", ".", "gamma", "*", "args", ".", "S_max", "*", "args", ".", "FOV", "*", "args", ".", "dt", "**", "2", "*", "1e3", "\n", "# print(args.v_max)", "\n", "# print(args.a_max)", "\n", "args", ".", "exp_dir", "=", "f'summary/{args.test_name}'", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "pathlib", ".", "Path", "(", "args", ".", "exp_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "exp_dir", ")", "\n", "with", "open", "(", "args", ".", "exp_dir", "+", "'/args.txt'", ",", "\"w\"", ")", "as", "text_file", ":", "\n", "        ", "print", "(", "vars", "(", "args", ")", ",", "file", "=", "text_file", ")", "\n", "\n", "", "args", ".", "checkpoint", "=", "f'summary/{args.test_name}/model.pt'", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "checkpoint", ",", "model", ",", "optimizer", "=", "load_model", "(", "args", ".", "checkpoint", ")", "\n", "# args = checkpoint['args']", "\n", "best_dev_loss", "=", "checkpoint", "[", "'best_dev_loss'", "]", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "del", "checkpoint", "\n", "", "else", ":", "\n", "        ", "model", "=", "build_model", "(", "args", ")", "\n", "if", "args", ".", "data_parallel", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "optimizer", "=", "build_optim", "(", "args", ",", "model", ")", "\n", "best_dev_loss", "=", "1e9", "\n", "start_epoch", "=", "0", "\n", "", "logging", ".", "info", "(", "args", ")", "\n", "# logging.info(model)", "\n", "\n", "train_loader", ",", "dev_loader", ",", "display_loader", "=", "create_data_loaders", "(", "args", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "args", ".", "lr_step_size", ",", "args", ".", "lr_gamma", ")", "\n", "dev_loss", ",", "dev_time", "=", "evaluate", "(", "args", ",", "0", ",", "model", ",", "dev_loader", ",", "writer", ")", "\n", "visualize", "(", "args", ",", "0", ",", "model", ",", "display_loader", ",", "writer", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "num_epochs", ")", ":", "\n", "# scheduler.step(epoch)", "\n", "# if epoch>=args.TSP_epoch:", "\n", "#     optimizer.param_groups[0]['lr']=0.001", "\n", "#     optimizer.param_groups[1]['lr'] = 0.001", "\n", "        ", "train_loss", ",", "train_time", "=", "train_epoch", "(", "args", ",", "epoch", ",", "model", ",", "train_loader", ",", "optimizer", ",", "writer", ")", "\n", "dev_loss", ",", "dev_time", "=", "evaluate", "(", "args", ",", "epoch", "+", "1", ",", "model", ",", "dev_loader", ",", "writer", ")", "\n", "visualize", "(", "args", ",", "epoch", "+", "1", ",", "model", ",", "display_loader", ",", "writer", ")", "\n", "\n", "if", "epoch", "==", "args", ".", "TSP_epoch", ":", "\n", "            ", "best_dev_loss", "=", "1e9", "\n", "", "if", "dev_loss", "<", "best_dev_loss", ":", "\n", "            ", "is_new_best", "=", "True", "\n", "best_dev_loss", "=", "dev_loss", "\n", "best_epoch", "=", "epoch", "+", "1", "\n", "", "else", ":", "\n", "            ", "is_new_best", "=", "False", "\n", "", "save_model", "(", "args", ",", "args", ".", "exp_dir", ",", "epoch", ",", "model", ",", "optimizer", ",", "best_dev_loss", ",", "is_new_best", ")", "\n", "logging", ".", "info", "(", "\n", "f'Epoch = [{epoch:4d}/{args.num_epochs:4d}] TrainLoss = {train_loss:.4g} '", "\n", "f'DevLoss = {dev_loss:.4g} TrainTime = {train_time:.4f}s DevTime = {dev_time:.4f}s'", ",", "\n", ")", "\n", "", "print", "(", "args", ".", "test_name", ")", "\n", "print", "(", "f'Training done, best epoch: {best_epoch}'", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.train.create_arg_parser": [[466, 527], ["common.args.Args", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument"], "function", ["None"], ["", "def", "create_arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "Args", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--test-name'", ",", "type", "=", "str", ",", "default", "=", "'gaussiantsp-d24-a1e-3-v1e-3'", ",", "help", "=", "'name for the output dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp-dir'", ",", "type", "=", "pathlib", ".", "Path", ",", "default", "=", "'summary/testepi'", ",", "\n", "help", "=", "'Path where model and results should be saved'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If set, resume the training from a previous model checkpoint. '", "\n", "'\"--checkpoint\" should be set with this'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "str", ",", "default", "=", "'summary/test/model.pt'", ",", "\n", "help", "=", "'Path to an existing checkpoint. Used along with \"--resume\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--report-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Period of loss reporting'", ")", "\n", "\n", "# model parameters", "\n", "parser", ".", "add_argument", "(", "'--num-pools'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'Number of U-Net pooling layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop-prob'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'Dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-chans'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'Number of U-Net channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-parallel'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'If set, use multiple GPUs using data parallelism'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda'", ",", "\n", "help", "=", "'Which device to train on. Set to \"cuda\" to use the GPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--decimation-rate'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "help", "=", "'Ratio of k-space columns to be sampled. If multiple values are '", "\n", "'provided, then one of those is chosen uniformly at random for each volume.'", ")", "\n", "\n", "# optimization parameters", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "9", ",", "type", "=", "int", ",", "help", "=", "'Mini batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-epochs'", ",", "type", "=", "int", ",", "default", "=", "40", ",", "help", "=", "'Number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'Learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-step-size'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "\n", "help", "=", "'Period of learning rate decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-gamma'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'Multiplicative factor of learning rate decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "0.", ",", "\n", "help", "=", "'Strength of weight decay regularization'", ")", "\n", "parser", ".", "add_argument", "(", "'--sub-lr'", ",", "type", "=", "float", ",", "default", "=", "1e-1", ",", "help", "=", "'lerning rate of the sub-samping layel'", ")", "\n", "\n", "# trajectory learning parameters", "\n", "parser", ".", "add_argument", "(", "'--trajectory-learning'", ",", "default", "=", "True", ",", "\n", "help", "=", "'trajectory_learning, if set to False, fixed trajectory, only reconstruction learning.'", ")", "\n", "parser", ".", "add_argument", "(", "'--acc-weight'", ",", "type", "=", "float", ",", "default", "=", "1e-2", ",", "help", "=", "'weight of the acceleration loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--vel-weight'", ",", "type", "=", "float", ",", "default", "=", "1e-1", ",", "help", "=", "'weight of the velocity loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--rec-weight'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'weight of the reconstruction loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "42576", ",", "help", "=", "'gyro magnetic ratio - kHz/T'", ")", "\n", "parser", ".", "add_argument", "(", "'--G-max'", ",", "type", "=", "float", ",", "default", "=", "40", ",", "help", "=", "'maximum gradient (peak current) - mT/m'", ")", "\n", "parser", ".", "add_argument", "(", "'--S-max'", ",", "type", "=", "float", ",", "default", "=", "200", ",", "help", "=", "'maximum slew-rate - T/m/s'", ")", "\n", "parser", ".", "add_argument", "(", "'--FOV'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'Field Of View - in m'", ")", "\n", "parser", ".", "add_argument", "(", "'--dt'", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "help", "=", "'sampling time - sec'", ")", "\n", "parser", ".", "add_argument", "(", "'--a-max'", ",", "type", "=", "float", ",", "default", "=", "0.17", ",", "help", "=", "'maximum acceleration'", ")", "\n", "parser", ".", "add_argument", "(", "'--v-max'", ",", "type", "=", "float", ",", "default", "=", "3.4", ",", "help", "=", "'maximum velocity'", ")", "\n", "parser", ".", "add_argument", "(", "'--TSP'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Using the PILOT-TSP algorithm,if False using PILOT.'", ")", "\n", "parser", ".", "add_argument", "(", "'--TSP-epoch'", ",", "default", "=", "20", ",", "type", "=", "int", ",", "help", "=", "'Epoch to preform the TSP reorder at'", ")", "\n", "parser", ".", "add_argument", "(", "'--initialization'", ",", "type", "=", "str", ",", "default", "=", "'spiral'", ",", "\n", "help", "=", "'Trajectory initialization when using PILOT (spiral, EPI, rosette, uniform, gaussian).'", ")", "\n", "parser", ".", "add_argument", "(", "'--SNR'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'add SNR decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--n-shots'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'Number of shots'", ")", "\n", "parser", ".", "add_argument", "(", "'--interp_gap'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'number of interpolated points between 2 parameter points in the trajectory'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_sub.DataTransform.__init__": [[18, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "resolution", ")", ":", "\n", "        ", "self", ".", "resolution", "=", "resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_sub.DataTransform.__call__": [[21, 36], ["data.transforms.to_tensor", "data.transforms.ifft2_regular", "data.transforms.complex_center_crop", "data.transforms.normalize_instance", "data.transforms.to_tensor", "data.transforms.normalize_instance", "attrs[].astype"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.to_tensor", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifft2_regular", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.to_tensor", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.normalize_instance"], ["", "def", "__call__", "(", "self", ",", "kspace", ",", "target", ",", "attrs", ",", "fname", ",", "slice", ")", ":", "\n", "        ", "kspace", "=", "transforms", ".", "to_tensor", "(", "kspace", ")", "\n", "image", "=", "transforms", ".", "ifft2_regular", "(", "kspace", ")", "\n", "image", "=", "transforms", ".", "complex_center_crop", "(", "image", ",", "(", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ")", "\n", "# image = transforms.complex_abs(image)", "\n", "image", ",", "mean", ",", "std", "=", "transforms", ".", "normalize_instance", "(", "image", ",", "eps", "=", "1e-11", ")", "\n", "# image, mean, std = transforms.normalize_instance_per_channel(image, eps=1e-11)", "\n", "# image = image.clamp(-6, 6)", "\n", "# kspace = transforms.fft2(image)", "\n", "\n", "target", "=", "transforms", ".", "to_tensor", "(", "target", ")", "\n", "target", ",", "mean", ",", "std", "=", "transforms", ".", "normalize_instance", "(", "target", ",", "eps", "=", "1e-11", ")", "\n", "# # target = transforms.normalize(target, mean, std)", "\n", "# target = target.clamp(-6, 6)", "\n", "return", "image", ",", "target", ",", "mean", ",", "std", ",", "attrs", "[", "'norm'", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "fname", ",", "slice", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_sub.create_data_loaders": [[37, 50], ["data.mri_data.SliceData", "torch.utils.data.DataLoader", "reconstructe_sub.DataTransform"], "function", ["None"], ["", "", "def", "create_data_loaders", "(", "args", ")", ":", "\n", "    ", "data", "=", "SliceData", "(", "\n", "root", "=", "args", ".", "data_path", "/", "f'multicoil_{args.data_split}'", ",", "\n", "transform", "=", "DataTransform", "(", "args", ".", "resolution", ")", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", "\n", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_sub.load_model": [[51, 72], ["torch.load", "models.subsampling_model.Subsampling_Model().to", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel", "models.subsampling_model.Subsampling_Model"], "function", ["None"], ["", "def", "load_model", "(", "checkpoint_file", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_file", ")", "\n", "args", "=", "checkpoint", "[", "'args'", "]", "\n", "model", "=", "Subsampling_Model", "(", "\n", "in_chans", "=", "1", ",", "\n", "out_chans", "=", "1", ",", "\n", "chans", "=", "args", ".", "num_chans", ",", "\n", "num_pool_layers", "=", "args", ".", "num_pools", ",", "\n", "drop_prob", "=", "args", ".", "drop_prob", ",", "\n", "decimation_rate", "=", "args", ".", "decimation_rate", ",", "\n", "res", "=", "args", ".", "resolution", ",", "\n", "trajectory_learning", "=", "args", ".", "trajectory_learning", ",", "\n", "initialization", "=", "args", ".", "initialization", ",", "\n", "SNR", "=", "args", ".", "SNR", ",", "\n", "n_shots", "=", "args", ".", "n_shots", ",", "\n", "interp_gap", "=", "1", "\n", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "args", ".", "data_parallel", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_sub.eval": [[73, 96], ["model.eval", "collections.defaultdict", "torch.no_grad", "numpy.stack", "input.to.to", "model.module.subsampling().to", "data.transforms.root_sum_of_squares", "range", "collections.defaultdict.items", "reconstructions[].append", "model.module.subsampling", "sorted", "slices[].numpy", "cor_all[].numpy"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.eval", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.root_sum_of_squares"], ["", "def", "eval", "(", "args", ",", "model", ",", "data_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "reconstructions", "=", "defaultdict", "(", "list", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "input", ",", "target", ",", "mean", ",", "std", ",", "norm", ",", "fnames", ",", "slices", ")", "in", "data_loader", ":", "\n", "            ", "input", "=", "input", ".", "to", "(", "args", ".", "device", ")", "\n", "# recons = model(input).to('cpu').squeeze(1)", "\n", "\n", "corrupted", "=", "model", ".", "module", ".", "subsampling", "(", "input", ")", ".", "to", "(", "'cpu'", ")", "\n", "corrupted", "=", "corrupted", "[", "...", ",", "0", "]", "# complex to real", "\n", "cor_all", "=", "transforms", ".", "root_sum_of_squares", "(", "corrupted", ",", "dim", "=", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "cor_all", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "cor_all", "[", "i", "]", "=", "cor_all", "[", "i", "]", "*", "std", "[", "i", "]", "+", "mean", "[", "i", "]", "\n", "reconstructions", "[", "fnames", "[", "i", "]", "]", ".", "append", "(", "(", "slices", "[", "i", "]", ".", "numpy", "(", ")", ",", "cor_all", "[", "i", "]", ".", "numpy", "(", ")", ")", ")", "\n", "# for i in range(corrupted.shape[0]):", "\n", "#     reconstructions[fnames[i]].append((slices[i].numpy(), corrupted[i].numpy()))", "\n", "\n", "", "", "", "reconstructions", "=", "{", "\n", "fname", ":", "np", ".", "stack", "(", "[", "pred", "for", "_", ",", "pred", "in", "sorted", "(", "slice_preds", ")", "]", ")", "\n", "for", "fname", ",", "slice_preds", "in", "reconstructions", ".", "items", "(", ")", "\n", "}", "\n", "return", "reconstructions", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_sub.reconstructe": [[98, 108], ["create_arg_parser().parse_args", "reconstructe_sub.create_data_loaders", "reconstructe_sub.load_model", "reconstructe_sub.eval", "common.utils.save_reconstructions", "reconstructe_sub.create_arg_parser"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.create_data_loaders", "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.load_model", "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.eval", "home.repos.pwc.inspect_result.tomer196_PILOT.common.utils.save_reconstructions", "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.create_arg_parser"], ["", "def", "reconstructe", "(", ")", ":", "\n", "    ", "args", "=", "create_arg_parser", "(", ")", ".", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "args", ".", "checkpoint", "=", "f'summary/{args.test_name}/best_model.pt'", "# problamtic when using TSP", "\n", "# args.checkpoint = f'summary/{args.test_name}/model.pt'", "\n", "args", ".", "out_dir", "=", "f'summary/{args.test_name}/rec_sub'", "\n", "\n", "data_loader", "=", "create_data_loaders", "(", "args", ")", "\n", "model", "=", "load_model", "(", "args", ".", "checkpoint", ")", "\n", "reconstructions", "=", "eval", "(", "args", ",", "model", ",", "data_loader", ")", "\n", "save_reconstructions", "(", "reconstructions", ",", "args", ".", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe_sub.create_arg_parser": [[110, 125], ["common.args.Args", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument"], "function", ["None"], ["", "def", "create_arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "Args", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--test-name'", ",", "type", "=", "str", ",", "default", "=", "'32/radial_0.01_0.1_0.1_multiscale'", ",", "help", "=", "'name for the output dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-split'", ",", "choices", "=", "[", "'val'", ",", "'test'", "]", ",", "default", "=", "'val'", ",", "\n", "help", "=", "'Which data partition to run on: \"val\" or \"test\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "pathlib", ".", "Path", ",", "default", "=", "'summary/test/checkpoint/best_model.pt'", ",", "\n", "help", "=", "'Path to the U-Net model'", ")", "\n", "parser", ".", "add_argument", "(", "'--out-dir'", ",", "type", "=", "pathlib", ".", "Path", ",", "default", "=", "'summary/test/rec'", ",", "\n", "help", "=", "'Path to save the reconstructions to'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "30", ",", "type", "=", "int", ",", "help", "=", "'Mini-batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda'", ",", "help", "=", "'Which device to run on'", ")", "\n", "parser", ".", "add_argument", "(", "'--SNR'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'add SNR decay'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.DataTransform.__init__": [[18, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "resolution", ")", ":", "\n", "        ", "self", ".", "resolution", "=", "resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.DataTransform.__call__": [[21, 31], ["data.transforms.to_tensor", "data.transforms.ifft2_regular", "data.transforms.complex_center_crop", "data.transforms.normalize_instance", "image.clamp.clamp.clamp", "data.transforms.fft2"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.to_tensor", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifft2_regular", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.complex_center_crop", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.normalize_instance", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.fft2"], ["", "def", "__call__", "(", "self", ",", "kspace", ",", "target", ",", "attrs", ",", "fname", ",", "slice", ")", ":", "\n", "        ", "kspace", "=", "transforms", ".", "to_tensor", "(", "kspace", ")", "\n", "image", "=", "transforms", ".", "ifft2_regular", "(", "kspace", ")", "\n", "image", "=", "transforms", ".", "complex_center_crop", "(", "image", ",", "(", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ")", "\n", "# image = transforms.complex_abs(image)", "\n", "image", ",", "mean", ",", "std", "=", "transforms", ".", "normalize_instance", "(", "image", ",", "eps", "=", "1e-11", ")", "\n", "image", "=", "image", ".", "clamp", "(", "-", "6", ",", "6", ")", "\n", "kspace", "=", "transforms", ".", "fft2", "(", "image", ")", "\n", "\n", "return", "image", ",", "mean", ",", "std", ",", "fname", ",", "slice", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.create_data_loaders": [[32, 45], ["data.mri_data.SliceData", "torch.utils.data.DataLoader", "reconstructe.DataTransform"], "function", ["None"], ["", "", "def", "create_data_loaders", "(", "args", ")", ":", "\n", "    ", "data", "=", "SliceData", "(", "\n", "root", "=", "args", ".", "data_path", "/", "f'multicoil_{args.data_split}'", ",", "\n", "transform", "=", "DataTransform", "(", "args", ".", "resolution", ")", ",", "\n", "sample_rate", "=", "args", ".", "sample_rate", "\n", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "data", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.load_model": [[46, 65], ["torch.load", "models.subsampling_model.Subsampling_Model().to", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel", "models.subsampling_model.Subsampling_Model"], "function", ["None"], ["", "def", "load_model", "(", "checkpoint", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint", ")", "\n", "args", "=", "checkpoint", "[", "'args'", "]", "\n", "model", "=", "Subsampling_Model", "(", "\n", "in_chans", "=", "15", ",", "\n", "out_chans", "=", "1", ",", "\n", "chans", "=", "args", ".", "num_chans", ",", "\n", "num_pool_layers", "=", "args", ".", "num_pools", ",", "\n", "drop_prob", "=", "args", ".", "drop_prob", ",", "\n", "decimation_rate", "=", "args", ".", "decimation_rate", ",", "\n", "res", "=", "args", ".", "resolution", ",", "\n", "trajectory_learning", "=", "args", ".", "trajectory_learning", ",", "\n", "initialization", "=", "args", ".", "initialization", ",", "\n", "SNR", "=", "args", ".", "SNR", "\n", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "args", ".", "data_parallel", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.eval": [[66, 84], ["model.eval", "collections.defaultdict", "torch.no_grad", "numpy.stack", "input.to.to", "model().to().squeeze", "data.transforms.complex_abs", "range", "collections.defaultdict.items", "reconstructions[].append", "model().to", "sorted", "slices[].numpy", "recons[].numpy", "model"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.eval", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.complex_abs"], ["", "def", "eval", "(", "args", ",", "model", ",", "data_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "reconstructions", "=", "defaultdict", "(", "list", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "input", ",", "mean", ",", "std", ",", "fnames", ",", "slices", ")", "in", "data_loader", ":", "\n", "            ", "input", "=", "input", ".", "to", "(", "args", ".", "device", ")", "\n", "recons", "=", "model", "(", "input", ")", ".", "to", "(", "'cpu'", ")", ".", "squeeze", "(", "1", ")", "\n", "recons", "=", "transforms", ".", "complex_abs", "(", "recons", ")", "# complex to real", "\n", "\n", "for", "i", "in", "range", "(", "recons", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "recons", "[", "i", "]", "=", "recons", "[", "i", "]", "*", "std", "[", "i", "]", "+", "mean", "[", "i", "]", "\n", "reconstructions", "[", "fnames", "[", "i", "]", "]", ".", "append", "(", "(", "slices", "[", "i", "]", ".", "numpy", "(", ")", ",", "recons", "[", "i", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "", "", "", "reconstructions", "=", "{", "\n", "fname", ":", "np", ".", "stack", "(", "[", "pred", "for", "_", ",", "pred", "in", "sorted", "(", "slice_preds", ")", "]", ")", "\n", "for", "fname", ",", "slice_preds", "in", "reconstructions", ".", "items", "(", ")", "\n", "}", "\n", "return", "reconstructions", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.reconstructe": [[86, 96], ["create_arg_parser().parse_args", "reconstructe.create_data_loaders", "reconstructe.load_model", "reconstructe.eval", "common.utils.save_reconstructions", "reconstructe.create_arg_parser"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.create_data_loaders", "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.load_model", "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.eval", "home.repos.pwc.inspect_result.tomer196_PILOT.common.utils.save_reconstructions", "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.create_arg_parser"], ["", "def", "reconstructe", "(", ")", ":", "\n", "    ", "args", "=", "create_arg_parser", "(", ")", ".", "parse_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "# args.checkpoint = f'summary/{args.test_name}/best_model.pt' # problamtic when using TSP", "\n", "args", ".", "checkpoint", "=", "f'summary/{args.test_name}/best_model.pt'", "\n", "args", ".", "out_dir", "=", "f'summary/{args.test_name}/rec'", "\n", "\n", "data_loader", "=", "create_data_loaders", "(", "args", ")", "\n", "model", "=", "load_model", "(", "args", ".", "checkpoint", ")", "\n", "reconstructions", "=", "eval", "(", "args", ",", "model", ",", "data_loader", ")", "\n", "save_reconstructions", "(", "reconstructions", ",", "args", ".", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.None.reconstructe.create_arg_parser": [[98, 113], ["common.args.Args", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument", "common.args.Args.add_argument"], "function", ["None"], ["", "def", "create_arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "Args", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--test-name'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'name for the output dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-split'", ",", "choices", "=", "[", "'val'", ",", "'test'", "]", ",", "default", "=", "'val'", ",", "\n", "help", "=", "'Which data partition to run on: \"val\" or \"test\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "pathlib", ".", "Path", ",", "default", "=", "'summary/test/checkpoint/best_model.pt'", ",", "\n", "help", "=", "'Path to the U-Net model'", ")", "\n", "parser", ".", "add_argument", "(", "'--out-dir'", ",", "type", "=", "pathlib", ".", "Path", ",", "default", "=", "'summary/test/rec'", ",", "\n", "help", "=", "'Path to save the reconstructions to'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "24", ",", "type", "=", "int", ",", "help", "=", "'Mini-batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda'", ",", "help", "=", "'Which device to run on'", ")", "\n", "parser", ".", "add_argument", "(", "'--SNR'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'add SNR decay'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.interpolate": [[6, 22], ["pytorch_nufft.util.prod", "pytorch_nufft.util.prod", "input.reshape.reshape", "coord.reshape.reshape", "torch.zeros", "interp._interpolate2", "_interpolate2.reshape", "list"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util.prod", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util.prod", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp._interpolate2"], ["def", "interpolate", "(", "input", ",", "width", ",", "kernel", ",", "coord", ",", "device", ")", ":", "\n", "    ", "ndim", "=", "coord", ".", "shape", "[", "-", "1", "]", "\n", "\n", "batch_shape", "=", "input", ".", "shape", "[", ":", "-", "ndim", "]", "\n", "batch_size", "=", "util", ".", "prod", "(", "batch_shape", ")", "\n", "\n", "pts_shape", "=", "coord", ".", "shape", "[", ":", "-", "1", "]", "\n", "npts", "=", "util", ".", "prod", "(", "pts_shape", ")", "\n", "\n", "input", "=", "input", ".", "reshape", "(", "[", "batch_size", "]", "+", "list", "(", "input", ".", "shape", "[", "-", "ndim", ":", "]", ")", ")", "\n", "coord", "=", "coord", ".", "reshape", "(", "[", "npts", ",", "ndim", "]", ")", "\n", "output", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "npts", "]", ",", "dtype", "=", "input", ".", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "output", "=", "_interpolate2", "(", "output", ",", "input", ",", "width", ",", "kernel", ",", "coord", ")", "\n", "\n", "return", "output", ".", "reshape", "(", "batch_shape", "+", "pts_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.bilinear_interpolate_torch_gridsample": [[24, 32], ["coord.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "torch.zeros_like", "tmp.expand.expand", "torch.nn.functional.grid_sample().squeeze", "coord.unsqueeze().unsqueeze.unsqueeze", "torch.nn.functional.grid_sample"], "function", ["None"], ["", "def", "bilinear_interpolate_torch_gridsample", "(", "input", ",", "coord", ")", ":", "\n", "    ", "coord", "=", "coord", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "tmp", "=", "torch", ".", "zeros_like", "(", "coord", ")", "\n", "tmp", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "(", "(", "coord", "[", ":", ",", ":", ",", ":", ",", "1", "]", "+", "input", ".", "shape", "[", "2", "]", "/", "2", ")", "/", "(", "input", ".", "shape", "[", "2", "]", "-", "1", ")", ")", "# normalize to between  -1 and 1", "\n", "tmp", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "(", "(", "coord", "[", ":", ",", ":", ",", ":", ",", "0", "]", "+", "input", ".", "shape", "[", "2", "]", "/", "2", ")", "/", "(", "input", ".", "shape", "[", "2", "]", "-", "1", ")", ")", "# normalize to between  -1 and 1", "\n", "tmp", "=", "tmp", "*", "2", "-", "1", "# normalize to between -1 and 1", "\n", "tmp", "=", "tmp", ".", "expand", "(", "input", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "input", ",", "tmp", ")", ".", "squeeze", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.lin_interpolate": [[33, 46], ["torch.lt().float", "len", "torch.floor", "torch.ne().float", "x.clone", "torch.floor.clone", "torch.lt", "torch.floor.long", "torch.ne", "torch.floor.long"], "function", ["None"], ["", "def", "lin_interpolate", "(", "kernel", ",", "x", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "lt", "(", "x", ",", "1", ")", ".", "float", "(", ")", "\n", "x", "=", "x", ".", "clone", "(", ")", "*", "mask", "\n", "n", "=", "len", "(", "kernel", ")", "\n", "idx", "=", "torch", ".", "floor", "(", "x", "*", "n", ")", "\n", "frac", "=", "x", "*", "n", "-", "idx", "\n", "\n", "left", "=", "kernel", "[", "idx", ".", "long", "(", ")", "]", "\n", "mask2", "=", "torch", ".", "ne", "(", "idx", ",", "n", "-", "1", ")", ".", "float", "(", ")", "\n", "idx", "=", "idx", ".", "clone", "(", ")", "*", "mask2", "\n", "right", "=", "kernel", "[", "idx", ".", "long", "(", ")", "+", "1", "]", "\n", "output", "=", "(", "1.0", "-", "frac", ")", "*", "left", "+", "frac", "*", "right", "\n", "return", "output", "*", "mask", "*", "mask2", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp._interpolate2": [[48, 66], ["range", "torch.ceil", "torch.ceil", "interp.lin_interpolate", "range", "int", "torch.fmod().long", "torch.fmod().long", "torch.abs", "int", "interp.lin_interpolate", "output[].clone", "torch.fmod", "torch.fmod", "torch.abs"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.lin_interpolate", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.lin_interpolate"], ["", "def", "_interpolate2", "(", "output", ",", "input", ",", "width", ",", "kernel", ",", "coord", ")", ":", "\n", "    ", "batch_size", ",", "ny", ",", "nx", "=", "input", ".", "shape", "\n", "\n", "kx", ",", "ky", "=", "coord", "[", ":", ",", "-", "1", "]", ",", "coord", "[", ":", ",", "-", "2", "]", "\n", "x0", ",", "y0", "=", "(", "torch", ".", "ceil", "(", "kx", "-", "width", "/", "2", ")", ",", "\n", "torch", ".", "ceil", "(", "ky", "-", "width", "/", "2", ")", ")", "\n", "\n", "for", "y", "in", "range", "(", "int", "(", "width", ")", "+", "1", ")", ":", "\n", "        ", "wy", "=", "lin_interpolate", "(", "kernel", ",", "torch", ".", "abs", "(", "y0", "+", "y", "-", "ky", ")", "/", "(", "width", "/", "2", ")", ")", "\n", "\n", "for", "x", "in", "range", "(", "int", "(", "width", ")", "+", "1", ")", ":", "\n", "            ", "w", "=", "wy", "*", "lin_interpolate", "(", "kernel", ",", "torch", ".", "abs", "(", "x0", "+", "x", "-", "kx", ")", "/", "(", "width", "/", "2", ")", ")", "\n", "\n", "yy", "=", "torch", ".", "fmod", "(", "y0", "+", "y", ",", "ny", ")", ".", "long", "(", ")", "\n", "xx", "=", "torch", ".", "fmod", "(", "x0", "+", "x", ",", "nx", ")", ".", "long", "(", ")", "\n", "output", "[", ":", ",", ":", "]", "=", "output", "[", ":", ",", ":", "]", ".", "clone", "(", ")", "+", "w", "*", "input", "[", ":", ",", "yy", ",", "xx", "]", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.gridding": [[67, 83], ["pytorch_nufft.util.prod", "pytorch_nufft.util.prod", "input.reshape.reshape", "coord.reshape.reshape", "torch.zeros", "interp._gridding2", "_gridding2.reshape", "list"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util.prod", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util.prod", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp._gridding2"], ["", "def", "gridding", "(", "input", ",", "shape", ",", "width", ",", "kernel", ",", "coord", ",", "device", ")", ":", "\n", "    ", "ndim", "=", "coord", ".", "shape", "[", "-", "1", "]", "\n", "\n", "batch_shape", "=", "shape", "[", ":", "-", "ndim", "]", "\n", "batch_size", "=", "util", ".", "prod", "(", "batch_shape", ")", "\n", "\n", "pts_shape", "=", "coord", ".", "shape", "[", ":", "-", "1", "]", "\n", "npts", "=", "util", ".", "prod", "(", "pts_shape", ")", "\n", "\n", "input", "=", "input", ".", "reshape", "(", "[", "batch_size", ",", "npts", "]", ")", "\n", "coord", "=", "coord", ".", "reshape", "(", "[", "npts", ",", "ndim", "]", ")", "\n", "output", "=", "torch", ".", "zeros", "(", "[", "batch_size", "]", "+", "list", "(", "shape", "[", "-", "ndim", ":", "]", ")", ",", "dtype", "=", "input", ".", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "output", "=", "_gridding2", "(", "output", ",", "input", ",", "width", ",", "kernel", ",", "coord", ")", "\n", "\n", "return", "output", ".", "reshape", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp._gridding2": [[84, 106], ["range", "torch.ceil", "torch.ceil", "interp.lin_interpolate", "range", "int", "torch.fmod().long", "torch.fmod().long", "torch.zeros_like", "torch.abs", "int", "interp.lin_interpolate", "torch.fmod", "torch.fmod", "torch.abs"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.lin_interpolate", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.lin_interpolate"], ["", "def", "_gridding2", "(", "output", ",", "input", ",", "width", ",", "kernel", ",", "coord", ")", ":", "\n", "    ", "batch_size", ",", "ny", ",", "nx", "=", "output", ".", "shape", "\n", "\n", "kx", ",", "ky", "=", "coord", "[", ":", ",", "-", "1", "]", ",", "coord", "[", ":", ",", "-", "2", "]", "\n", "\n", "x0", ",", "y0", "=", "(", "torch", ".", "ceil", "(", "kx", "-", "width", "/", "2", ")", ",", "\n", "torch", ".", "ceil", "(", "ky", "-", "width", "/", "2", ")", ")", "\n", "\n", "for", "y", "in", "range", "(", "int", "(", "width", ")", "+", "1", ")", ":", "\n", "        ", "wy", "=", "lin_interpolate", "(", "kernel", ",", "torch", ".", "abs", "(", "y0", "+", "y", "-", "ky", ")", "/", "(", "width", "/", "2", ")", ")", "\n", "\n", "for", "x", "in", "range", "(", "int", "(", "width", ")", "+", "1", ")", ":", "\n", "            ", "w", "=", "wy", "*", "lin_interpolate", "(", "kernel", ",", "torch", ".", "abs", "(", "x0", "+", "x", "-", "kx", ")", "/", "(", "width", "/", "2", ")", ")", "\n", "\n", "yy", "=", "torch", ".", "fmod", "(", "y0", "+", "y", ",", "ny", ")", ".", "long", "(", ")", "\n", "xx", "=", "torch", ".", "fmod", "(", "x0", "+", "x", ",", "nx", ")", ".", "long", "(", ")", "\n", "# output[:, yy, xx] = output[:, yy, xx] + w * input[:, :]", "\n", "update", "=", "torch", ".", "zeros_like", "(", "output", ")", "\n", "update", "[", ":", ",", "yy", ",", "xx", "]", "=", "w", "*", "input", "[", ":", ",", ":", "]", "\n", "output", "=", "output", "+", "update", "\n", "\n", "", "", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft.nufft": [[8, 33], ["nufft._get_oversamp_shape", "input.clone", "nufft._apodize", "pytorch_nufft.util.resize", "interp.interpolate.permute", "data.transforms.fft2", "interp.interpolate.permute", "nufft._scale_coord", "nufft._get_kaiser_bessel_kernel", "pytorch_nufft.interpolate", "pytorch_nufft.util.prod"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._get_oversamp_shape", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._apodize", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util.resize", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.fft2", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._scale_coord", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._get_kaiser_bessel_kernel", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.interpolate", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util.prod"], ["def", "nufft", "(", "input", ",", "coord", ",", "oversamp", "=", "1.25", ",", "width", "=", "4.0", ",", "n", "=", "128", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "ndim", "=", "coord", ".", "shape", "[", "-", "1", "]", "\n", "beta", "=", "numpy", ".", "pi", "*", "(", "(", "(", "width", "/", "oversamp", ")", "*", "(", "oversamp", "-", "0.5", ")", ")", "**", "2", "-", "0.8", ")", "**", "0.5", "\n", "os_shape", "=", "_get_oversamp_shape", "(", "input", ".", "shape", ",", "ndim", ",", "oversamp", ")", "\n", "\n", "output", "=", "input", ".", "clone", "(", ")", "\n", "\n", "# Apodize", "\n", "output", "=", "_apodize", "(", "output", ",", "ndim", ",", "oversamp", ",", "width", ",", "beta", ",", "device", ")", "\n", "\n", "# Zero-pad", "\n", "output", "=", "output", "/", "util", ".", "prod", "(", "input", ".", "shape", "[", "-", "ndim", ":", "]", ")", "**", "0.5", "\n", "output", "=", "util", ".", "resize", "(", "output", ",", "os_shape", ",", "device", "=", "device", ")", "\n", "\n", "# FFT", "\n", "output", "=", "output", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "output", "=", "transforms", ".", "fft2", "(", "output", ")", "\n", "output", "=", "output", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", "\n", "\n", "# Interpolate", "\n", "coord", "=", "_scale_coord", "(", "coord", ",", "input", ".", "shape", ",", "oversamp", ",", "device", ")", "\n", "kernel", "=", "_get_kaiser_bessel_kernel", "(", "n", ",", "width", ",", "beta", ",", "coord", ".", "dtype", ",", "device", ")", "\n", "output", "=", "interp", ".", "interpolate", "(", "output", ",", "width", ",", "kernel", ",", "coord", ",", "device", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft.nufft_adjoint": [[35, 63], ["list", "nufft._get_oversamp_shape", "list.copy", "_get_oversamp_shape.copy", "nufft._scale_coord", "nufft._get_kaiser_bessel_kernel", "pytorch_nufft.gridding", "_apodize.permute", "data.transforms.ifft2_regular", "_apodize.permute", "pytorch_nufft.util.resize", "nufft._apodize", "pytorch_nufft.util.prod", "pytorch_nufft.util.prod"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._get_oversamp_shape", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._scale_coord", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._get_kaiser_bessel_kernel", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.gridding", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifft2_regular", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util.resize", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._apodize", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util.prod", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util.prod"], ["", "def", "nufft_adjoint", "(", "input", ",", "coord", ",", "out_shape", ",", "oversamp", "=", "1.25", ",", "width", "=", "4.0", ",", "n", "=", "128", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "ndim", "=", "coord", ".", "shape", "[", "-", "1", "]", "\n", "beta", "=", "numpy", ".", "pi", "*", "(", "(", "(", "width", "/", "oversamp", ")", "*", "(", "oversamp", "-", "0.5", ")", ")", "**", "2", "-", "0.8", ")", "**", "0.5", "\n", "out_shape", "=", "list", "(", "out_shape", ")", "\n", "\n", "os_shape", "=", "_get_oversamp_shape", "(", "out_shape", ",", "ndim", ",", "oversamp", ")", "\n", "\n", "# Gridding", "\n", "out_shape2", "=", "out_shape", ".", "copy", "(", ")", "\n", "os_shape2", "=", "os_shape", ".", "copy", "(", ")", "\n", "coord", "=", "_scale_coord", "(", "coord", ",", "out_shape2", ",", "oversamp", ",", "device", ")", "\n", "kernel", "=", "_get_kaiser_bessel_kernel", "(", "n", ",", "width", ",", "beta", ",", "coord", ".", "dtype", ",", "device", ")", "\n", "output", "=", "interp", ".", "gridding", "(", "input", ",", "os_shape2", ",", "width", ",", "kernel", ",", "coord", ",", "device", ")", "\n", "\n", "# IFFT", "\n", "output", "=", "output", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "output", "=", "transforms", ".", "ifft2_regular", "(", "output", ")", "\n", "output", "=", "output", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", "\n", "\n", "# Crop", "\n", "output", "=", "util", ".", "resize", "(", "output", ",", "out_shape2", ",", "device", "=", "device", ")", "\n", "a", "=", "util", ".", "prod", "(", "os_shape2", "[", "-", "ndim", ":", "]", ")", "/", "util", ".", "prod", "(", "out_shape2", "[", "-", "ndim", ":", "]", ")", "**", "0.5", "\n", "output", "=", "output", "*", "a", "\n", "\n", "# Apodize", "\n", "output", "=", "_apodize", "(", "output", ",", "ndim", ",", "oversamp", ",", "width", ",", "beta", ",", "device", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._get_kaiser_bessel_kernel": [[65, 69], ["kernel.to", "torch.arange", "torch.tensor", "numpy.i0"], "function", ["None"], ["", "def", "_get_kaiser_bessel_kernel", "(", "n", ",", "width", ",", "beta", ",", "dtype", ",", "device", ")", ":", "\n", "    ", "x", "=", "torch", ".", "arange", "(", "n", ",", "dtype", "=", "dtype", ")", "/", "n", "\n", "kernel", "=", "1", "/", "width", "*", "torch", ".", "tensor", "(", "numpy", ".", "i0", "(", "beta", "*", "(", "1", "-", "x", "**", "2", ")", "**", "0.5", ")", ",", "dtype", "=", "dtype", ")", "\n", "return", "kernel", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._scale_coord": [[71, 81], ["torch.tensor", "torch.tensor", "nufft._get_ugly_number", "nufft._get_ugly_number"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._get_ugly_number", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._get_ugly_number"], ["", "def", "_scale_coord", "(", "coord", ",", "shape", ",", "oversamp", ",", "device", ")", ":", "\n", "    ", "ndim", "=", "coord", ".", "shape", "[", "-", "1", "]", "\n", "scale", "=", "torch", ".", "tensor", "(", "\n", "[", "_get_ugly_number", "(", "oversamp", "*", "i", ")", "/", "i", "for", "i", "in", "shape", "[", "-", "ndim", ":", "]", "]", ",", "device", "=", "device", ")", "\n", "shift", "=", "torch", ".", "tensor", "(", "\n", "[", "_get_ugly_number", "(", "oversamp", "*", "i", ")", "//", "2", "for", "i", "in", "shape", "[", "-", "ndim", ":", "]", "]", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "coord", "=", "scale", "*", "coord", "+", "shift", "\n", "\n", "return", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._get_ugly_number": [[83, 105], ["min", "ugly_nums.append"], "function", ["None"], ["", "def", "_get_ugly_number", "(", "n", ")", ":", "\n", "    ", "if", "n", "<=", "1", ":", "\n", "        ", "return", "n", "\n", "\n", "", "ugly_nums", "=", "[", "1", "]", "\n", "i2", ",", "i3", ",", "i5", "=", "0", ",", "0", ",", "0", "\n", "while", "(", "True", ")", ":", "\n", "\n", "        ", "ugly_num", "=", "min", "(", "ugly_nums", "[", "i2", "]", "*", "2", ",", "\n", "ugly_nums", "[", "i3", "]", "*", "3", ",", "\n", "ugly_nums", "[", "i5", "]", "*", "5", ")", "\n", "\n", "if", "ugly_num", ">=", "n", ":", "\n", "            ", "return", "ugly_num", "\n", "\n", "", "ugly_nums", ".", "append", "(", "ugly_num", ")", "\n", "if", "ugly_num", "==", "ugly_nums", "[", "i2", "]", "*", "2", ":", "\n", "            ", "i2", "+=", "1", "\n", "", "elif", "ugly_num", "==", "ugly_nums", "[", "i3", "]", "*", "3", ":", "\n", "            ", "i3", "+=", "1", "\n", "", "elif", "ugly_num", "==", "ugly_nums", "[", "i5", "]", "*", "5", ":", "\n", "            ", "i5", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._get_oversamp_shape": [[107, 110], ["list", "nufft._get_ugly_number"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._get_ugly_number"], ["", "", "", "def", "_get_oversamp_shape", "(", "shape", ",", "ndim", ",", "oversamp", ")", ":", "\n", "    ", "return", "list", "(", "shape", ")", "[", ":", "-", "ndim", "]", "+", "[", "_get_ugly_number", "(", "oversamp", "*", "i", ")", "\n", "for", "i", "in", "shape", "[", "-", "ndim", ":", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._apodize": [[112, 125], ["range", "nufft._get_ugly_number", "torch.arange", "torch.sinh", "apod.reshape"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft._get_ugly_number"], ["", "def", "_apodize", "(", "input", ",", "ndim", ",", "oversamp", ",", "width", ",", "beta", ",", "device", ")", ":", "\n", "    ", "output", "=", "input", "\n", "for", "a", "in", "range", "(", "-", "ndim", ",", "0", ")", ":", "\n", "        ", "i", "=", "output", ".", "shape", "[", "a", "]", "\n", "os_i", "=", "_get_ugly_number", "(", "oversamp", "*", "i", ")", "\n", "idx", "=", "torch", ".", "arange", "(", "i", ",", "dtype", "=", "output", ".", "dtype", ",", "device", "=", "device", ")", "\n", "\n", "# Calculate apodization", "\n", "apod", "=", "(", "beta", "**", "2", "-", "(", "numpy", ".", "pi", "*", "width", "*", "(", "idx", "-", "i", "//", "2", ")", "/", "os_i", ")", "**", "2", ")", "**", "0.5", "\n", "apod", "=", "apod", "/", "torch", ".", "sinh", "(", "apod", ")", "\n", "output", "=", "output", "*", "apod", ".", "reshape", "(", "[", "i", "]", "+", "[", "1", "]", "*", "(", "-", "a", "-", "1", ")", ")", "\n", "\n", "", "return", "output", "", "", ""]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util.prod": [[5, 13], ["numpy.prod"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util.prod"], ["def", "prod", "(", "shape", ")", ":", "\n", "    ", "\"\"\"Computes product of shape.\n    Args:\n        shape (tuple or list): shape.\n    Returns:\n        Product.\n    \"\"\"", "\n", "return", "numpy", ".", "prod", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util._expand_shapes": [[14, 22], ["max", "tuple", "list", "len", "len"], "function", ["None"], ["", "def", "_expand_shapes", "(", "*", "shapes", ")", ":", "\n", "\n", "    ", "shapes", "=", "[", "list", "(", "shape", ")", "for", "shape", "in", "shapes", "]", "\n", "max_ndim", "=", "max", "(", "len", "(", "shape", ")", "for", "shape", "in", "shapes", ")", "\n", "shapes_exp", "=", "[", "[", "1", "]", "*", "(", "max_ndim", "-", "len", "(", "shape", ")", ")", "+", "shape", "\n", "for", "shape", "in", "shapes", "]", "\n", "\n", "return", "tuple", "(", "shapes_exp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util.resize": [[23, 47], ["util._expand_shapes", "tuple", "tuple", "torch.zeros", "input.reshape.reshape", "torch.zeros.reshape", "input.reshape.reshape", "min", "max", "max", "zip", "slice", "slice", "zip", "zip", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.util._expand_shapes"], ["", "def", "resize", "(", "input", ",", "oshape", ",", "ishift", "=", "None", ",", "oshift", "=", "None", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "ishape_exp", ",", "oshape_exp", "=", "_expand_shapes", "(", "input", ".", "shape", ",", "oshape", ")", "\n", "\n", "if", "ishape_exp", "==", "oshape_exp", ":", "\n", "        ", "return", "input", ".", "reshape", "(", "oshape", ")", "\n", "\n", "", "if", "ishift", "is", "None", ":", "\n", "        ", "ishift", "=", "[", "max", "(", "i", "//", "2", "-", "o", "//", "2", ",", "0", ")", "\n", "for", "i", ",", "o", "in", "zip", "(", "ishape_exp", ",", "oshape_exp", ")", "]", "\n", "\n", "", "if", "oshift", "is", "None", ":", "\n", "        ", "oshift", "=", "[", "max", "(", "o", "//", "2", "-", "i", "//", "2", ",", "0", ")", "\n", "for", "i", ",", "o", "in", "zip", "(", "ishape_exp", ",", "oshape_exp", ")", "]", "\n", "\n", "", "copy_shape", "=", "[", "min", "(", "i", "-", "si", ",", "o", "-", "so", ")", "for", "i", ",", "si", ",", "o", ",", "\n", "so", "in", "zip", "(", "ishape_exp", ",", "ishift", ",", "oshape_exp", ",", "oshift", ")", "]", "\n", "islice", "=", "tuple", "(", "[", "slice", "(", "si", ",", "si", "+", "c", ")", "for", "si", ",", "c", "in", "zip", "(", "ishift", ",", "copy_shape", ")", "]", ")", "\n", "oslice", "=", "tuple", "(", "[", "slice", "(", "so", ",", "so", "+", "c", ")", "for", "so", ",", "c", "in", "zip", "(", "oshift", ",", "copy_shape", ")", "]", ")", "\n", "\n", "output", "=", "torch", ".", "zeros", "(", "oshape_exp", ",", "dtype", "=", "input", ".", "dtype", ",", "device", "=", "device", ")", "\n", "input", "=", "input", ".", "reshape", "(", "ishape_exp", ")", "\n", "output", "[", "oslice", "]", "=", "input", "[", "islice", "]", "\n", "\n", "return", "output", ".", "reshape", "(", "oshape", ")", "", "", ""]], "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Layer.initilaize_trajectory": [[13, 46], ["torch.nn.Parameter", "numpy.load", "torch.tensor().float", "torch.tensor().float", "bool", "torch.tensor", "numpy.load", "torch.zeros", "range", "int", "torch.tensor", "range", "torch.zeros", "range", "torch.arange().float", "numpy.cos", "numpy.sin", "print", "torch.arange", "torch.rand", "torch.randn"], "methods", ["None"], ["    ", "def", "initilaize_trajectory", "(", "self", ",", "trajectory_learning", ",", "initialization", ",", "n_shots", ")", ":", "\n", "# x = torch.zeros(self.num_measurements, 2)", "\n", "        ", "sampel_per_shot", "=", "3001", "\n", "if", "initialization", "==", "'spiral'", ":", "\n", "            ", "x", "=", "np", ".", "load", "(", "f'spiral/{n_shots}int_spiral_low.npy'", ")", "\n", "x", "=", "torch", ".", "tensor", "(", "x", "[", ":", ",", ":", "sampel_per_shot", ",", ":", "]", ")", ".", "float", "(", ")", "\n", "", "elif", "initialization", "==", "'spiral_high'", ":", "\n", "            ", "x", "=", "np", ".", "load", "(", "f'spiral/{n_shots}int_spiral.npy'", ")", "*", "10", "\n", "x", "=", "torch", ".", "tensor", "(", "x", "[", ":", ",", ":", "sampel_per_shot", ",", ":", "]", ")", ".", "float", "(", ")", "\n", "", "elif", "initialization", "==", "'EPI'", ":", "\n", "            ", "x", "=", "torch", ".", "zeros", "(", "n_shots", ",", "sampel_per_shot", ",", "2", ")", "\n", "v_space", "=", "self", ".", "res", "//", "n_shots", "\n", "for", "i", "in", "range", "(", "n_shots", ")", ":", "\n", "                ", "index", "=", "0", "\n", "for", "j", "in", "range", "(", "sampel_per_shot", ")", ":", "\n", "                    ", "x", "[", "i", ",", "index", ",", "1", "]", "=", "(", "i", "+", "0.5", ")", "*", "v_space", "-", "160", "\n", "x", "[", "i", ",", "index", ",", "0", "]", "=", "j", "*", "320", "/", "sampel_per_shot", "-", "160", "\n", "index", "+=", "1", "\n", "", "", "", "elif", "initialization", "==", "'radial'", ":", "\n", "            ", "x", "=", "torch", ".", "zeros", "(", "n_shots", ",", "sampel_per_shot", ",", "2", ")", "\n", "theta", "=", "np", ".", "pi", "/", "n_shots", "\n", "for", "i", "in", "range", "(", "n_shots", ")", ":", "\n", "                ", "L", "=", "torch", ".", "arange", "(", "-", "160", ",", "160", ",", "320", "/", "sampel_per_shot", ")", ".", "float", "(", ")", "\n", "x", "[", "i", ",", ":", ",", "0", "]", "=", "L", "*", "np", ".", "cos", "(", "theta", "*", "i", ")", "\n", "x", "[", "i", ",", ":", ",", "1", "]", "=", "L", "*", "np", ".", "sin", "(", "theta", "*", "i", ")", "\n", "", "", "elif", "initialization", "==", "'uniform'", ":", "\n", "            ", "x", "=", "(", "torch", ".", "rand", "(", "n_shots", ",", "sampel_per_shot", ",", "2", ")", "-", "0.5", ")", "*", "self", ".", "res", "\n", "", "elif", "initialization", "==", "'gaussian'", ":", "\n", "            ", "x", "=", "torch", ".", "randn", "(", "n_shots", ",", "sampel_per_shot", ",", "2", ")", "*", "self", ".", "res", "/", "6", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Wrong initialization'", ")", "\n", "", "self", ".", "x", "=", "torch", ".", "nn", ".", "Parameter", "(", "x", ",", "requires_grad", "=", "bool", "(", "int", "(", "trajectory_learning", ")", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Layer.__init__": [[47, 56], ["torch.nn.Module.__init__", "subsampling_model.Subsampling_Layer.initilaize_trajectory"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.args.Args.__init__", "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Layer.initilaize_trajectory"], ["", "def", "__init__", "(", "self", ",", "decimation_rate", ",", "res", ",", "trajectory_learning", ",", "initialization", ",", "n_shots", ",", "interp_gap", ",", "SNR", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "decimation_rate", "=", "decimation_rate", "\n", "self", ".", "res", "=", "res", "\n", "self", ".", "num_measurements", "=", "res", "**", "2", "//", "decimation_rate", "\n", "self", ".", "initilaize_trajectory", "(", "trajectory_learning", ",", "initialization", ",", "n_shots", ")", "\n", "self", ".", "SNR", "=", "SNR", "\n", "self", ".", "interp_gap", "=", "interp_gap", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Layer.forward": [[57, 76], ["subsampling_model.Subsampling_Layer.x.reshape", "input.permute.permute.permute", "pytorch_nufft.nufft.nufft", "pytorch_nufft.nufft.nufft_adjoint", "pytorch_nufft.nufft.nufft_adjoint.permute", "torch.arange().float", "range", "range", "torch.randn", "noise.to", "torch.arange", "subsampling_model.Subsampling_Layer.interp"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft.nufft", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.nufft.nufft_adjoint", "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Layer.interp"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# interpolate", "\n", "        ", "if", "self", ".", "interp_gap", ">", "1", ":", "\n", "            ", "t", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "x", ".", "shape", "[", "1", "]", ",", "device", "=", "self", ".", "x", ".", "device", ")", ".", "float", "(", ")", "\n", "t1", "=", "t", "[", ":", ":", "self", ".", "interp_gap", "]", "\n", "x_short", "=", "self", ".", "x", "[", ":", ",", ":", ":", "self", ".", "interp_gap", ",", ":", "]", "\n", "for", "shot", "in", "range", "(", "x_short", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "d", "in", "range", "(", "2", ")", ":", "\n", "                    ", "self", ".", "x", ".", "data", "[", "shot", ",", ":", ",", "d", "]", "=", "self", ".", "interp", "(", "t1", ",", "x_short", "[", "shot", ",", ":", ",", "d", "]", ",", "t", ")", "\n", "\n", "", "", "", "x_full", "=", "self", ".", "x", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "input", "=", "input", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", "\n", "sub_ksp", "=", "nufft", "(", "input", ",", "x_full", ")", "\n", "if", "self", ".", "SNR", ":", "\n", "            ", "noise_amp", "=", "0.001", "\n", "noise", "=", "noise_amp", "*", "torch", ".", "randn", "(", "sub_ksp", ".", "shape", ")", "\n", "sub_ksp", "=", "sub_ksp", "+", "noise", ".", "to", "(", "sub_ksp", ".", "device", ")", "\n", "", "output", "=", "nufft_adjoint", "(", "sub_ksp", ",", "x_full", ",", "input", ".", "shape", ")", "\n", "return", "output", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Layer.get_trajectory": [[77, 79], ["None"], "methods", ["None"], ["", "def", "get_trajectory", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Layer.h_poly": [[80, 94], ["range", "torch.tensor", "sum", "range", "range", "range"], "methods", ["None"], ["", "def", "h_poly", "(", "self", ",", "t", ")", ":", "\n", "        ", "tt", "=", "[", "None", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "tt", "[", "0", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "tt", "[", "i", "]", "=", "tt", "[", "i", "-", "1", "]", "*", "t", "\n", "", "A", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "1", ",", "0", ",", "-", "3", ",", "2", "]", ",", "\n", "[", "0", ",", "1", ",", "-", "2", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "3", ",", "-", "2", "]", ",", "\n", "[", "0", ",", "0", ",", "-", "1", ",", "1", "]", "\n", "]", ",", "dtype", "=", "tt", "[", "-", "1", "]", ".", "dtype", ")", "\n", "return", "[", "\n", "sum", "(", "A", "[", "i", ",", "j", "]", "*", "tt", "[", "j", "]", "for", "j", "in", "range", "(", "4", ")", ")", "\n", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Layer.interp": [[95, 102], ["torch.cat", "matplotlib.searchsorted", "subsampling_model.Subsampling_Layer.h_poly", "x[].detach().cpu", "xs.detach().cpu", "x[].detach", "xs.detach"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Layer.h_poly"], ["", "def", "interp", "(", "self", ",", "x", ",", "y", ",", "xs", ")", ":", "\n", "      ", "m", "=", "(", "y", "[", "1", ":", "]", "-", "y", "[", ":", "-", "1", "]", ")", "/", "(", "x", "[", "1", ":", "]", "-", "x", "[", ":", "-", "1", "]", ")", "\n", "m", "=", "torch", ".", "cat", "(", "[", "m", "[", "[", "0", "]", "]", ",", "(", "m", "[", "1", ":", "]", "+", "m", "[", ":", "-", "1", "]", ")", "/", "2", ",", "m", "[", "[", "-", "1", "]", "]", "]", ")", "\n", "I", "=", "P", ".", "searchsorted", "(", "x", "[", "1", ":", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "xs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "dx", "=", "(", "x", "[", "I", "+", "1", "]", "-", "x", "[", "I", "]", ")", "\n", "hh", "=", "self", ".", "h_poly", "(", "(", "xs", "-", "x", "[", "I", "]", ")", "/", "dx", ")", "\n", "return", "hh", "[", "0", "]", "*", "y", "[", "I", "]", "+", "hh", "[", "1", "]", "*", "m", "[", "I", "]", "*", "dx", "+", "hh", "[", "2", "]", "*", "y", "[", "I", "+", "1", "]", "+", "hh", "[", "3", "]", "*", "m", "[", "I", "+", "1", "]", "*", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Layer.__repr__": [[103, 105], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'Subsampling_Layer'", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Model.__init__": [[107, 112], ["torch.nn.Module.__init__", "subsampling_model.Subsampling_Layer", "models.rec_models.unet_model.UnetModel"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_chans", ",", "out_chans", ",", "chans", ",", "num_pool_layers", ",", "drop_prob", ",", "decimation_rate", ",", "res", ",", "\n", "trajectory_learning", ",", "initialization", ",", "n_shots", ",", "interp_gap", ",", "SNR", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "subsampling", "=", "Subsampling_Layer", "(", "decimation_rate", ",", "res", ",", "trajectory_learning", ",", "initialization", ",", "n_shots", ",", "interp_gap", ",", "SNR", ")", "\n", "self", ".", "reconstruction_model", "=", "UnetModel", "(", "in_chans", ",", "out_chans", ",", "chans", ",", "num_pool_layers", ",", "drop_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Model.forward": [[113, 118], ["subsampling_model.Subsampling_Model.subsampling", "data.root_sum_of_squares().unsqueeze", "subsampling_model.Subsampling_Model.reconstruction_model", "data.root_sum_of_squares", "data.complex_abs"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.root_sum_of_squares", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.complex_abs"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "self", ".", "subsampling", "(", "input", ")", "\n", "input", "=", "transforms", ".", "root_sum_of_squares", "(", "transforms", ".", "complex_abs", "(", "input", ")", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "output", "=", "self", ".", "reconstruction_model", "(", "input", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Model.get_trajectory": [[119, 121], ["subsampling_model.Subsampling_Model.subsampling.get_trajectory"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.models.subsampling_model.Subsampling_Model.get_trajectory"], ["", "def", "get_trajectory", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "subsampling", ".", "get_trajectory", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexConvBlock.__init__": [[12, 33], ["torch.nn.Module.__init__", "torch.nn.Sequential", "complex_unet.ComplexConv2d", "complex_unet.ComplexInstanceNorm2d", "torch.nn.ReLU", "complex_unet.ComplexConv2d", "complex_unet.ComplexInstanceNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", ",", "out_chans", ",", "drop_prob", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans (int): Number of channels in the input.\n            out_chans (int): Number of channels in the output.\n            drop_prob (float): Dropout probability.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "ComplexConv2d", "(", "in_chans", ",", "out_chans", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "ComplexInstanceNorm2d", "(", "out_chans", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Dropout2d(drop_prob),", "\n", "ComplexConv2d", "(", "out_chans", ",", "out_chans", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "ComplexInstanceNorm2d", "(", "out_chans", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "# nn.Dropout2d(drop_prob)", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexConvBlock.forward": [[36, 45], ["complex_unet.ComplexConvBlock.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input (torch.Tensor): Input tensor of shape [batch_size, self.in_chans, height, width]\n\n        Returns:\n            (torch.Tensor): Output tensor of shape [batch_size, self.out_chans, height, width]\n        \"\"\"", "\n", "return", "self", ".", "layers", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexConvBlock.__repr__": [[46, 48], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'ConvBlock(in_chans={self.in_chans}, out_chans={self.out_chans}, '", "f'drop_prob={self.drop_prob})'", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexUnetModel.__init__": [[52, 87], ["torch.nn.Module.__init__", "complex_unet.ComplexInstanceNorm2d", "torch.nn.ModuleList", "range", "complex_unet.ComplexConvBlock", "torch.nn.ModuleList", "range", "torch.nn.Sequential", "complex_unet.ComplexConvBlock", "complex_unet.ComplexConv2d", "complex_unet.ComplexConv2d", "complex_unet.ComplexConv2d", "complex_unet.ComplexConvBlock", "complex_unet.ComplexConvBlock", "complex_unet.ComplexConvBlock"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_chans", ",", "out_chans", ",", "chans", ",", "num_pool_layers", ",", "drop_prob", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans (int): Number of channels in the input to the U-Net model.\n            out_chans (int): Number of channels in the output to the U-Net model.\n            chans (int): Number of output channels of the first convolution layer.\n            num_pool_layers (int): Number of down-sampling and up-sampling layers.\n            drop_prob (float): Dropout probability.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "num_pool_layers", "=", "num_pool_layers", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n", "self", ".", "in_norm", "=", "ComplexInstanceNorm2d", "(", "in_chans", ")", "\n", "\n", "self", ".", "down_sample_layers", "=", "nn", ".", "ModuleList", "(", "[", "ComplexConvBlock", "(", "in_chans", ",", "chans", ",", "drop_prob", ")", "]", ")", "\n", "ch", "=", "chans", "\n", "for", "i", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "down_sample_layers", "+=", "[", "ComplexConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ")", "]", "\n", "ch", "*=", "2", "\n", "", "self", ".", "conv", "=", "ComplexConvBlock", "(", "ch", ",", "ch", ",", "drop_prob", ")", "\n", "\n", "self", ".", "up_sample_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "up_sample_layers", "+=", "[", "ComplexConvBlock", "(", "ch", "*", "2", ",", "ch", "//", "2", ",", "drop_prob", ")", "]", "\n", "ch", "//=", "2", "\n", "", "self", ".", "up_sample_layers", "+=", "[", "ComplexConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ")", "]", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "ComplexConv2d", "(", "ch", ",", "ch", "//", "2", ",", "kernel_size", "=", "1", ")", ",", "\n", "ComplexConv2d", "(", "ch", "//", "2", ",", "out_chans", ",", "kernel_size", "=", "1", ")", ",", "\n", "ComplexConv2d", "(", "out_chans", ",", "out_chans", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexUnetModel.forward": [[89, 114], ["complex_unet.ComplexUnetModel.in_norm", "complex_unet.ComplexUnetModel.conv", "complex_unet.ComplexUnetModel.conv2", "layer", "stack.append", "complex_unet.Complex_max_pool2d", "complex_unet.Complex_interpolate", "torch.cat", "layer", "stack.pop"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.Complex_max_pool2d", "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.Complex_interpolate"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input (torch.Tensor): Input tensor of shape [batch_size, self.in_chans, height, width]\n\n        Returns:\n            (torch.Tensor): Output tensor of shape [batch_size, self.out_chans, height, width]\n        \"\"\"", "\n", "stack", "=", "[", "]", "\n", "output", "=", "input", "\n", "output", "=", "self", ".", "in_norm", "(", "output", ")", "\n", "# Apply down-sampling layers", "\n", "for", "layer", "in", "self", ".", "down_sample_layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ")", "\n", "stack", ".", "append", "(", "output", ")", "\n", "output", "=", "Complex_max_pool2d", "(", "output", ",", "kernel_size", "=", "2", ")", "\n", "\n", "", "output", "=", "self", ".", "conv", "(", "output", ")", "\n", "\n", "# Apply up-sampling layers", "\n", "for", "layer", "in", "self", ".", "up_sample_layers", ":", "\n", "            ", "output", "=", "Complex_interpolate", "(", "output", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "stack", ".", "pop", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "layer", "(", "output", ")", "\n", "", "return", "self", ".", "conv2", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexConv2d.__init__": [[132, 140], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "## Model components", "\n", "self", ".", "conv_re", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_im", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexConv2d.forward": [[141, 146], ["torch.stack", "complex_unet.ComplexConv2d.conv_re", "complex_unet.ComplexConv2d.conv_im", "complex_unet.ComplexConv2d.conv_re", "complex_unet.ComplexConv2d.conv_im"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# shpae of x : [batch,channel,axis1,axis2,2]", "\n", "        ", "real", "=", "self", ".", "conv_re", "(", "x", "[", "...", ",", "0", "]", ")", "-", "self", ".", "conv_im", "(", "x", "[", "...", ",", "1", "]", ")", "\n", "imaginary", "=", "self", ".", "conv_re", "(", "x", "[", "...", ",", "1", "]", ")", "+", "self", ".", "conv_im", "(", "x", "[", "...", ",", "0", "]", ")", "\n", "output", "=", "torch", ".", "stack", "(", "(", "real", ",", "imaginary", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexConvTranspose2d.__init__": [[149, 171], ["torch.nn.Module.__init__", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "## Model components", "\n", "self", ".", "tconv_re", "=", "nn", ".", "ConvTranspose2d", "(", "in_channel", ",", "out_channel", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", "dilation", "=", "dilation", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "tconv_im", "=", "nn", ".", "ConvTranspose2d", "(", "in_channel", ",", "out_channel", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "output_padding", "=", "output_padding", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", "dilation", "=", "dilation", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexConvTranspose2d.forward": [[172, 177], ["torch.stack", "complex_unet.ComplexConvTranspose2d.tconv_re", "complex_unet.ComplexConvTranspose2d.tconv_im", "complex_unet.ComplexConvTranspose2d.tconv_re", "complex_unet.ComplexConvTranspose2d.tconv_im"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# shpae of x : [batch,channel,axis1,axis2,2]", "\n", "        ", "real", "=", "self", ".", "tconv_re", "(", "x", "[", "...", ",", "0", "]", ")", "-", "self", ".", "tconv_im", "(", "x", "[", "...", ",", "1", "]", ")", "\n", "imaginary", "=", "self", ".", "tconv_re", "(", "x", "[", "...", ",", "1", "]", ")", "+", "self", ".", "tconv_im", "(", "x", "[", "...", ",", "0", "]", ")", "\n", "output", "=", "torch", ".", "stack", "(", "(", "real", ",", "imaginary", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexBatchNorm2d.__init__": [[180, 185], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn_re", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "num_features", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "eps", "=", "eps", ",", "track_running_stats", "=", "track_running_stats", ",", "**", "kwargs", ")", "\n", "self", ".", "bn_im", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "num_features", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "eps", "=", "eps", ",", "track_running_stats", "=", "track_running_stats", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexBatchNorm2d.forward": [[186, 191], ["complex_unet.ComplexBatchNorm2d.bn_re", "complex_unet.ComplexBatchNorm2d.bn_im", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "real", "=", "self", ".", "bn_re", "(", "x", "[", "...", ",", "0", "]", ")", "\n", "imag", "=", "self", ".", "bn_im", "(", "x", "[", "...", ",", "1", "]", ")", "\n", "output", "=", "torch", ".", "stack", "(", "(", "real", ",", "imag", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexInstanceNorm2d.__init__": [[193, 197], ["torch.nn.Module.__init__", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.args.Args.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chans", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_re", "=", "nn", ".", "InstanceNorm2d", "(", "chans", ")", "\n", "self", ".", "in_im", "=", "nn", ".", "InstanceNorm2d", "(", "chans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.ComplexInstanceNorm2d.forward": [[198, 203], ["complex_unet.ComplexInstanceNorm2d.in_re", "complex_unet.ComplexInstanceNorm2d.in_im", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "real", "=", "self", ".", "in_re", "(", "x", "[", "...", ",", "0", "]", ")", "\n", "imag", "=", "self", ".", "in_im", "(", "x", "[", "...", ",", "1", "]", ")", "\n", "output", "=", "torch", ".", "stack", "(", "(", "real", ",", "imag", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "output", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.Complex_max_pool2d": [[116, 121], ["torch.nn.functional.max_pool2d", "torch.nn.functional.max_pool2d", "torch.stack"], "function", ["None"], ["", "", "def", "Complex_max_pool2d", "(", "input", ",", "kernel_size", "=", "2", ")", ":", "\n", "    ", "real", "=", "F", ".", "max_pool2d", "(", "input", "[", "...", ",", "0", "]", ",", "kernel_size", "=", "kernel_size", ")", "\n", "imaginary", "=", "F", ".", "max_pool2d", "(", "input", "[", "...", ",", "1", "]", ",", "kernel_size", "=", "kernel_size", ")", "\n", "output", "=", "torch", ".", "stack", "(", "(", "real", ",", "imaginary", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.complex_unet.Complex_interpolate": [[123, 128], ["torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.stack"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.interpolate", "home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.interpolate"], ["", "def", "Complex_interpolate", "(", "input", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ":", "\n", "    ", "real", "=", "F", ".", "interpolate", "(", "input", "[", "...", ",", "0", "]", ",", "scale_factor", "=", "scale_factor", ",", "mode", "=", "mode", ",", "align_corners", "=", "align_corners", ")", "\n", "imaginary", "=", "F", ".", "interpolate", "(", "input", "[", "...", ",", "1", "]", ",", "scale_factor", "=", "scale_factor", ",", "mode", "=", "mode", ",", "align_corners", "=", "align_corners", ")", "\n", "output", "=", "torch", ".", "stack", "(", "(", "real", ",", "imaginary", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.unet_model.ConvBlock.__init__": [[19, 41], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.InstanceNorm2d", "torch.nn.ReLU", "torch.nn.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", ",", "out_chans", ",", "drop_prob", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans (int): Number of channels in the input.\n            out_chans (int): Number of channels in the output.\n            drop_prob (float): Dropout probability.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "out_chans", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_chans", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop_prob", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_chans", ",", "out_chans", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_chans", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop_prob", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.unet_model.ConvBlock.forward": [[43, 52], ["unet_model.ConvBlock.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input (torch.Tensor): Input tensor of shape [batch_size, self.in_chans, height, width]\n\n        Returns:\n            (torch.Tensor): Output tensor of shape [batch_size, self.out_chans, height, width]\n        \"\"\"", "\n", "return", "self", ".", "layers", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.unet_model.ConvBlock.__repr__": [[53, 55], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'ConvBlock(in_chans={self.in_chans}, out_chans={self.out_chans}, '", "f'drop_prob={self.drop_prob})'", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.unet_model.UnetModel.__init__": [[68, 101], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "unet_model.ConvBlock", "torch.nn.ModuleList", "range", "torch.nn.Sequential", "unet_model.ConvBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "unet_model.ConvBlock", "unet_model.ConvBlock", "unet_model.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", ",", "out_chans", ",", "chans", ",", "num_pool_layers", ",", "drop_prob", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_chans (int): Number of channels in the input to the U-Net model.\n            out_chans (int): Number of channels in the output to the U-Net model.\n            chans (int): Number of output channels of the first convolution layer.\n            num_pool_layers (int): Number of down-sampling and up-sampling layers.\n            drop_prob (float): Dropout probability.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "out_chans", "=", "out_chans", "\n", "self", ".", "chans", "=", "chans", "\n", "self", ".", "num_pool_layers", "=", "num_pool_layers", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n", "self", ".", "down_sample_layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBlock", "(", "in_chans", ",", "chans", ",", "drop_prob", ")", "]", ")", "\n", "ch", "=", "chans", "\n", "for", "i", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "down_sample_layers", "+=", "[", "ConvBlock", "(", "ch", ",", "ch", "*", "2", ",", "drop_prob", ")", "]", "\n", "ch", "*=", "2", "\n", "", "self", ".", "conv", "=", "ConvBlock", "(", "ch", ",", "ch", ",", "drop_prob", ")", "\n", "\n", "self", ".", "up_sample_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_pool_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "up_sample_layers", "+=", "[", "ConvBlock", "(", "ch", "*", "2", ",", "ch", "//", "2", ",", "drop_prob", ")", "]", "\n", "ch", "//=", "2", "\n", "", "self", ".", "up_sample_layers", "+=", "[", "ConvBlock", "(", "ch", "*", "2", ",", "ch", ",", "drop_prob", ")", "]", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch", ",", "ch", "//", "2", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch", "//", "2", ",", "out_chans", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_chans", ",", "out_chans", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.rec_models.unet_model.UnetModel.forward": [[103, 127], ["unet_model.UnetModel.conv", "unet_model.UnetModel.conv2", "layer", "stack.append", "torch.nn.functional.max_pool2d", "torch.nn.functional.interpolate", "torch.cat", "layer", "stack.pop"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.pytorch_nufft.interp.interpolate"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input (torch.Tensor): Input tensor of shape [batch_size, self.in_chans, height, width]\n\n        Returns:\n            (torch.Tensor): Output tensor of shape [batch_size, self.out_chans, height, width]\n        \"\"\"", "\n", "stack", "=", "[", "]", "\n", "output", "=", "input", "\n", "# Apply down-sampling layers", "\n", "for", "layer", "in", "self", ".", "down_sample_layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ")", "\n", "stack", ".", "append", "(", "output", ")", "\n", "output", "=", "F", ".", "max_pool2d", "(", "output", ",", "kernel_size", "=", "2", ")", "\n", "\n", "", "output", "=", "self", ".", "conv", "(", "output", ")", "\n", "\n", "# Apply up-sampling layers", "\n", "for", "layer", "in", "self", ".", "up_sample_layers", ":", "\n", "            ", "output", "=", "F", ".", "interpolate", "(", "output", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "stack", ".", "pop", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "layer", "(", "output", ")", "\n", "", "return", "self", ".", "conv2", "(", "output", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.to_tensor": [[12, 16], ["numpy.iscomplexobj", "torch.from_numpy", "numpy.stack"], "function", ["None"], ["def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "if", "np", ".", "iscomplexobj", "(", "data", ")", ":", "\n", "        ", "data", "=", "np", ".", "stack", "(", "(", "data", ".", "real", ",", "data", ".", "imag", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.rfft2": [[17, 25], ["transforms.ifftshift", "torch.rfft", "transforms.fftshift", "data.squeeze.permute", "data.squeeze.squeeze"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifftshift", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.fftshift"], ["", "def", "rfft2", "(", "data", ")", ":", "\n", "    ", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "data", "=", "torch", ".", "rfft", "(", "data", ",", "2", ",", "normalized", "=", "False", ",", "onesided", "=", "False", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "data", "=", "data", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", "\n", "data", "=", "data", ".", "squeeze", "(", "1", ")", "\n", "# data=data.reshape(1,2,320,320)", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.rfft2_regular": [[26, 31], ["transforms.ifftshift", "torch.rfft", "transforms.fftshift"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifftshift", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.fftshift"], ["", "def", "rfft2_regular", "(", "data", ")", ":", "\n", "    ", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "data", "=", "torch", ".", "rfft", "(", "data", ",", "2", ",", "normalized", "=", "True", ",", "onesided", "=", "False", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.irfft2": [[32, 41], ["fftshift.unsqueeze", "fftshift.permute", "transforms.ifftshift", "torch.irfft", "transforms.fftshift", "fftshift.size"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifftshift", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.fftshift"], ["", "def", "irfft2", "(", "data", ")", ":", "\n", "    ", "data", "=", "data", ".", "unsqueeze", "(", "1", ")", "\n", "data", "=", "data", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "# data=data.reshape(1,1,320,320,2)", "\n", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "data", "=", "torch", ".", "irfft", "(", "data", ",", "2", ",", "normalized", "=", "False", ",", "onesided", "=", "False", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.irfft2_regular": [[42, 48], ["transforms.ifftshift", "torch.irfft", "transforms.fftshift", "fftshift.size"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifftshift", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.fftshift"], ["", "def", "irfft2_regular", "(", "data", ")", ":", "\n", "    ", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "data", "=", "torch", ".", "irfft", "(", "data", ",", "2", ",", "normalized", "=", "False", ",", "onesided", "=", "False", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.fft2": [[49, 55], ["transforms.ifftshift", "torch.fft", "transforms.fftshift", "fftshift.size"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifftshift", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.fftshift"], ["", "def", "fft2", "(", "data", ")", ":", "\n", "    ", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "data", "=", "torch", ".", "fft", "(", "data", ",", "2", ",", "normalized", "=", "True", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifft2": [[56, 66], ["data.squeeze.unsqueeze", "data.squeeze.permute", "transforms.ifftshift", "torch.ifft", "transforms.fftshift", "data.squeeze.permute", "data.squeeze.squeeze", "data.squeeze.size"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifftshift", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.fftshift"], ["", "def", "ifft2", "(", "data", ")", ":", "\n", "    ", "data", "=", "data", ".", "unsqueeze", "(", "1", ")", "\n", "data", "=", "data", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "data", "=", "torch", ".", "ifft", "(", "data", ",", "2", ",", "normalized", "=", "False", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "data", "=", "data", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", "\n", "data", "=", "data", ".", "squeeze", "(", "1", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifft2_regular": [[67, 74], ["transforms.ifftshift", "torch.ifft", "transforms.fftshift", "fftshift.size"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifftshift", "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.fftshift"], ["", "def", "ifft2_regular", "(", "data", ")", ":", "\n", "    ", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "data", "=", "ifftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "data", "=", "torch", ".", "ifft", "(", "data", ",", "2", ",", "normalized", "=", "True", ")", "\n", "data", "=", "fftshift", "(", "data", ",", "dim", "=", "(", "-", "3", ",", "-", "2", ")", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.complex_abs": [[75, 88], ["data.size"], "function", ["None"], ["", "def", "complex_abs", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Compute the absolute value of a complex valued input tensor.\n\n    Args:\n        data (torch.Tensor): A complex valued tensor, where the size of the final dimension\n            should be 2.\n\n    Returns:\n        torch.Tensor: Absolute value of data\n    \"\"\"", "\n", "assert", "data", ".", "size", "(", "-", "1", ")", "==", "2", "\n", "return", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.root_sum_of_squares": [[90, 102], ["torch.sqrt"], "function", ["None"], ["", "def", "root_sum_of_squares", "(", "data", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Compute the Root Sum of Squares (RSS) transform along a given dimension of a tensor.\n\n    Args:\n        data (torch.Tensor): The input tensor\n        dim (int): The dimensions along which to apply the RSS transform\n\n    Returns:\n        torch.Tensor: The RSS value\n    \"\"\"", "\n", "return", "torch", ".", "sqrt", "(", "(", "data", "**", "2", ")", ".", "sum", "(", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.center_crop": [[104, 124], ["None"], "function", ["None"], ["", "def", "center_crop", "(", "data", ",", "shape", ")", ":", "\n", "    ", "\"\"\"\n    Apply a center crop to the input real image or batch of real images.\n\n    Args:\n        data (torch.Tensor): The input tensor to be center cropped. It should have at\n            least 2 dimensions and the cropping is applied along the last two dimensions.\n        shape (int, int): The output shape. The shape should be smaller than the\n            corresponding dimensions of data.\n\n    Returns:\n        torch.Tensor: The center cropped image\n    \"\"\"", "\n", "assert", "0", "<", "shape", "[", "0", "]", "<=", "data", ".", "shape", "[", "-", "2", "]", "\n", "assert", "0", "<", "shape", "[", "1", "]", "<=", "data", ".", "shape", "[", "-", "1", "]", "\n", "w_from", "=", "(", "data", ".", "shape", "[", "-", "2", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "\n", "h_from", "=", "(", "data", ".", "shape", "[", "-", "1", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "\n", "w_to", "=", "w_from", "+", "shape", "[", "0", "]", "\n", "h_to", "=", "h_from", "+", "shape", "[", "1", "]", "\n", "return", "data", "[", "...", ",", "w_from", ":", "w_to", ",", "h_from", ":", "h_to", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.complex_center_crop": [[126, 147], ["None"], "function", ["None"], ["", "def", "complex_center_crop", "(", "data", ",", "shape", ")", ":", "\n", "    ", "\"\"\"\n    Apply a center crop to the input image or batch of complex images.\n\n    Args:\n        data (torch.Tensor): The complex input tensor to be center cropped. It should\n            have at least 3 dimensions and the cropping is applied along dimensions\n            -3 and -2 and the last dimensions should have a size of 2.\n        shape (int, int): The output shape. The shape should be smaller than the\n            corresponding dimensions of data.\n\n    Returns:\n        torch.Tensor: The center cropped image\n    \"\"\"", "\n", "assert", "0", "<", "shape", "[", "0", "]", "<=", "data", ".", "shape", "[", "-", "3", "]", "\n", "assert", "0", "<", "shape", "[", "1", "]", "<=", "data", ".", "shape", "[", "-", "2", "]", "\n", "w_from", "=", "(", "data", ".", "shape", "[", "-", "3", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "\n", "h_from", "=", "(", "data", ".", "shape", "[", "-", "2", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "\n", "w_to", "=", "w_from", "+", "shape", "[", "0", "]", "\n", "h_to", "=", "h_from", "+", "shape", "[", "1", "]", "\n", "return", "data", "[", "...", ",", "w_from", ":", "w_to", ",", "h_from", ":", "h_to", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.normalize": [[149, 164], ["None"], "function", ["None"], ["", "def", "normalize", "(", "data", ",", "mean", ",", "stddev", ",", "eps", "=", "0.", ")", ":", "\n", "    ", "\"\"\"\n    Normalize the given tensor using:\n        (data - mean) / (stddev + eps)\n\n    Args:\n        data (torch.Tensor): Input data to be normalized\n        mean (float): Mean value\n        stddev (float): Standard deviation\n        eps (float): Added to stddev to prevent dividing by zero\n\n    Returns:\n        torch.Tensor: Normalized tensor\n    \"\"\"", "\n", "return", "(", "data", "-", "mean", ")", "/", "(", "stddev", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.normalize_instance": [[166, 182], ["data.mean", "data.std", "transforms.normalize"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.normalize"], ["", "def", "normalize_instance", "(", "data", ",", "eps", "=", "0.", ")", ":", "\n", "    ", "\"\"\"\n        Normalize the given tensor using:\n            (data - mean) / (stddev + eps)\n        where mean and stddev are computed from the data itself.\n\n        Args:\n            data (torch.Tensor): Input data to be normalized\n            eps (float): Added to stddev to prevent dividing by zero\n\n        Returns:\n            torch.Tensor: Normalized tensor\n        \"\"\"", "\n", "mean", "=", "data", ".", "mean", "(", ")", "\n", "std", "=", "data", ".", "std", "(", ")", "\n", "return", "normalize", "(", "data", ",", "mean", ",", "std", ",", "eps", ")", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.normalize_instance_per_channel": [[183, 202], ["range", "range", "data[].mean", "data[].std", "transforms.normalize"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.normalize"], ["", "def", "normalize_instance_per_channel", "(", "data", ",", "eps", "=", "0.", ")", ":", "\n", "    ", "\"\"\"\n        Normalize the given tensor using:\n            (data - mean) / (stddev + eps)\n        where mean and stddev are computed from the data itself.\n\n        Args:\n            data (torch.Tensor): Input data to be normalized\n            eps (float): Added to stddev to prevent dividing by zero\n\n        Returns:\n            torch.Tensor: Normalized tensor\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "mean", "=", "data", "[", "i", ",", ":", ",", ":", ",", "j", "]", ".", "mean", "(", ")", "\n", "std", "=", "data", "[", "i", ",", ":", ",", ":", ",", "j", "]", ".", "std", "(", ")", "\n", "data", "[", "i", ",", ":", ",", ":", ",", "j", "]", "=", "normalize", "(", "data", "[", "i", ",", ":", ",", ":", ",", "j", "]", ",", "mean", ",", "std", ",", "eps", ")", "\n", "", "", "return", "data", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.roll": [[205, 220], ["isinstance", "roll.narrow", "roll.narrow", "torch.cat", "zip", "roll.size", "len", "len", "transforms.roll", "roll.size", "roll.size"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.roll"], ["", "def", "roll", "(", "x", ",", "shift", ",", "dim", ")", ":", "\n", "    ", "\"\"\"\n    Similar to np.roll but applies to PyTorch Tensors\n    \"\"\"", "\n", "if", "isinstance", "(", "shift", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "assert", "len", "(", "shift", ")", "==", "len", "(", "dim", ")", "\n", "for", "s", ",", "d", "in", "zip", "(", "shift", ",", "dim", ")", ":", "\n", "            ", "x", "=", "roll", "(", "x", ",", "s", ",", "d", ")", "\n", "", "return", "x", "\n", "", "shift", "=", "shift", "%", "x", ".", "size", "(", "dim", ")", "\n", "if", "shift", "==", "0", ":", "\n", "        ", "return", "x", "\n", "", "left", "=", "x", ".", "narrow", "(", "dim", ",", "0", ",", "x", ".", "size", "(", "dim", ")", "-", "shift", ")", "\n", "right", "=", "x", ".", "narrow", "(", "dim", ",", "x", ".", "size", "(", "dim", ")", "-", "shift", ",", "shift", ")", "\n", "return", "torch", ".", "cat", "(", "(", "right", ",", "left", ")", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.fftshift": [[222, 234], ["transforms.roll", "tuple", "isinstance", "range", "x.dim"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.roll"], ["", "def", "fftshift", "(", "x", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Similar to np.fft.fftshift but applies to PyTorch Tensors\n    \"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "dim", "=", "tuple", "(", "range", "(", "x", ".", "dim", "(", ")", ")", ")", "\n", "shift", "=", "[", "dim", "//", "2", "for", "dim", "in", "x", ".", "shape", "]", "\n", "", "elif", "isinstance", "(", "dim", ",", "int", ")", ":", "\n", "        ", "shift", "=", "x", ".", "shape", "[", "dim", "]", "//", "2", "\n", "", "else", ":", "\n", "        ", "shift", "=", "[", "x", ".", "shape", "[", "i", "]", "//", "2", "for", "i", "in", "dim", "]", "\n", "", "return", "roll", "(", "x", ",", "shift", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.ifftshift": [[236, 248], ["transforms.roll", "tuple", "isinstance", "range", "x.dim"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.data.transforms.roll"], ["", "def", "ifftshift", "(", "x", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Similar to np.fft.ifftshift but applies to PyTorch Tensors\n    \"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "dim", "=", "tuple", "(", "range", "(", "x", ".", "dim", "(", ")", ")", ")", "\n", "shift", "=", "[", "(", "dim", "+", "1", ")", "//", "2", "for", "dim", "in", "x", ".", "shape", "]", "\n", "", "elif", "isinstance", "(", "dim", ",", "int", ")", ":", "\n", "        ", "shift", "=", "(", "x", ".", "shape", "[", "dim", "]", "+", "1", ")", "//", "2", "\n", "", "else", ":", "\n", "        ", "shift", "=", "[", "(", "x", ".", "shape", "[", "i", "]", "+", "1", ")", "//", "2", "for", "i", "in", "dim", "]", "\n", "", "return", "roll", "(", "x", ",", "shift", ",", "dim", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.mri_data.SliceData.__init__": [[8, 34], ["list", "sorted", "pathlib.Path().iterdir", "random.shuffle", "round", "h5py.File", "pathlib.Path", "len", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", ",", "sample_rate", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            root (pathlib.Path): Path to the dataset.\n            transform (callable): A callable object that pre-processes the raw data into\n                appropriate form. The transform function should take 'kspace', 'target',\n                'attributes', 'filename', and 'slice' as inputs. 'target' may be null\n                for test data.\n            challenge (str): \"singlecoil\" or \"multicoil\" depending on which challenge to use.\n            sample_rate (float, optional): A float between 0 and 1. This controls what fraction\n                of the volumes should be loaded.\n        \"\"\"", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "examples", "=", "[", "]", "\n", "files", "=", "list", "(", "pathlib", ".", "Path", "(", "root", ")", ".", "iterdir", "(", ")", ")", "\n", "if", "sample_rate", "<", "1", ":", "\n", "            ", "random", ".", "shuffle", "(", "files", ")", "\n", "num_files", "=", "round", "(", "len", "(", "files", ")", "*", "sample_rate", ")", "\n", "files", "=", "files", "[", ":", "num_files", "]", "\n", "", "for", "fname", "in", "sorted", "(", "files", ")", ":", "\n", "            ", "with", "h5py", ".", "File", "(", "fname", ",", "'r'", ")", "as", "data", ":", "\n", "                ", "if", "data", ".", "attrs", "[", "'acquisition'", "]", "==", "'CORPD_FBK'", ":", "# should be 'CORPD_FBK' or 'CORPDFS_FBK'", "\n", "                    ", "kspace", "=", "data", "[", "'kspace'", "]", "\n", "num_slices", "=", "kspace", ".", "shape", "[", "0", "]", "\n", "self", ".", "examples", "+=", "[", "(", "fname", ",", "slice", ")", "for", "slice", "in", "range", "(", "5", ",", "num_slices", "-", "2", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.mri_data.SliceData.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.data.mri_data.SliceData.__getitem__": [[38, 44], ["h5py.File", "mri_data.SliceData.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "fname", ",", "slice", "=", "self", ".", "examples", "[", "i", "]", "\n", "with", "h5py", ".", "File", "(", "fname", ",", "'r'", ")", "as", "data", ":", "\n", "            ", "kspace", "=", "data", "[", "'kspace'", "]", "[", "slice", "]", "\n", "target", "=", "data", "[", "'reconstruction_rss'", "]", "[", "slice", "]", "if", "'reconstruction_rss'", "in", "data", "else", "None", "\n", "return", "self", ".", "transform", "(", "kspace", ",", "target", ",", "data", ".", "attrs", ",", "fname", ".", "name", ",", "slice", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.Metrics.__init__": [[64, 67], ["runstats.Statistics"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "metric_funcs", ")", ":", "\n", "        ", "self", ".", "metrics", "=", "{", "\n", "metric", ":", "Statistics", "(", ")", "for", "metric", "in", "metric_funcs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.Metrics.push": [[69, 72], ["METRIC_FUNCS.items", "evaluate.Metrics.metrics[].push", "func"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.Metrics.push"], ["", "def", "push", "(", "self", ",", "target", ",", "recons", ")", ":", "\n", "        ", "for", "metric", ",", "func", "in", "METRIC_FUNCS", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "metrics", "[", "metric", "]", ".", "push", "(", "func", "(", "target", ",", "recons", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.Metrics.means": [[73, 76], ["stat.mean", "evaluate.Metrics.metrics.items"], "methods", ["None"], ["", "", "def", "means", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "metric", ":", "stat", ".", "mean", "(", ")", "for", "metric", ",", "stat", "in", "self", ".", "metrics", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.Metrics.stddevs": [[78, 81], ["stat.stddev", "evaluate.Metrics.metrics.items"], "methods", ["None"], ["", "def", "stddevs", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "metric", ":", "stat", ".", "stddev", "(", ")", "for", "metric", ",", "stat", "in", "self", ".", "metrics", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.Metrics.__repr__": [[83, 89], ["evaluate.Metrics.means", "evaluate.Metrics.stddevs", "sorted", "list"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.Metrics.means", "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.Metrics.stddevs"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "means", "=", "self", ".", "means", "(", ")", "\n", "stddevs", "=", "self", ".", "stddevs", "(", ")", "\n", "metric_names", "=", "sorted", "(", "list", "(", "means", ")", ")", "\n", "return", "' '", ".", "join", "(", "\n", "f'{name} = {means[name]:.4g} +/- {2 * stddevs[name]:.4g}'", "for", "name", "in", "metric_names", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.mse": [[17, 20], ["numpy.mean"], "function", ["None"], ["def", "mse", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\" Compute Mean Squared Error (MSE) \"\"\"", "\n", "return", "np", ".", "mean", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.nmse": [[21, 24], ["numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "nmse", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\" Compute Normalized Mean Squared Error (NMSE) \"\"\"", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "gt", "-", "pred", ")", "**", "2", "/", "np", ".", "linalg", ".", "norm", "(", "gt", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.psnr": [[25, 28], ["skimage.measure.compare_psnr", "gt.max"], "function", ["None"], ["", "def", "psnr", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\" Compute Peak Signal to Noise Ratio metric (PSNR) \"\"\"", "\n", "return", "compare_psnr", "(", "gt", ",", "pred", ",", "data_range", "=", "gt", ".", "max", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.psnr1": [[29, 38], ["skimage.measure.compare_psnr", "gt.min", "gt.max", "pred.min", "pred.max", "gt.max"], "function", ["None"], ["", "def", "psnr1", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\" Compute Peak Signal to Noise Ratio metric (PSNR) \"\"\"", "\n", "gt", "=", "gt", "-", "gt", ".", "min", "(", ")", "\n", "gt", "=", "gt", "/", "gt", ".", "max", "(", ")", "\n", "\n", "pred", "=", "pred", "-", "pred", ".", "min", "(", ")", "\n", "pred", "=", "pred", "/", "pred", ".", "max", "(", ")", "\n", "\n", "return", "compare_psnr", "(", "gt", ",", "pred", ",", "data_range", "=", "gt", ".", "max", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.ssim": [[40, 44], ["skimage.measure.compare_ssim", "gt.transpose", "pred.transpose", "gt.max"], "function", ["None"], ["", "def", "ssim", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\" Compute Structural Similarity Index Metric (SSIM). \"\"\"", "\n", "return", "compare_ssim", "(", "\n", "gt", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "pred", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "multichannel", "=", "True", ",", "data_range", "=", "gt", ".", "max", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.ssim1": [[46, 50], ["skimage.measure.compare_ssim", "gt.max"], "function", ["None"], ["", "def", "ssim1", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\" Compute Structural Similarity Index Metric (SSIM). \"\"\"", "\n", "return", "compare_ssim", "(", "\n", "gt", ",", "pred", ",", "multichannel", "=", "True", ",", "data_range", "=", "gt", ".", "max", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.evaluate": [[91, 116], ["create_arg_parser().parse_args", "print", "evaluate.Metrics", "pathlib.Path().iterdir", "print", "evaluate.create_arg_parser", "pathlib.Path", "h5py.File", "h5py.File", "target.min", "target.max", "recons.min", "recons.max", "evaluate.Metrics.push"], "function", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.create_arg_parser", "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.Metrics.push"], ["", "", "def", "evaluate", "(", ")", ":", "\n", "    ", "args", "=", "create_arg_parser", "(", ")", ".", "parse_args", "(", ")", "\n", "args", ".", "target_path", "=", "f'{args.data_path}/multicoil_{args.data_split}'", "\n", "args", ".", "predictions_path", "=", "f'/home/tomerweiss/multiPILOT2/summary/{args.test_name}/rec_cs'", "\n", "print", "(", "args", ".", "predictions_path", ")", "\n", "metrics", "=", "Metrics", "(", "METRIC_FUNCS", ")", "\n", "for", "tgt_file", "in", "pathlib", ".", "Path", "(", "args", ".", "predictions_path", ")", ".", "iterdir", "(", ")", ":", "\n", "        ", "print", "(", "args", ".", "predictions_path", "+", "'/'", "+", "tgt_file", ".", "name", ")", "\n", "with", "h5py", ".", "File", "(", "tgt_file", ")", "as", "recons", ",", "h5py", ".", "File", "(", "\n", "args", ".", "target_path", "+", "'/'", "+", "tgt_file", ".", "name", ")", "as", "target", ":", "\n", "            ", "if", "args", ".", "acquisition", "and", "args", ".", "acquisition", "==", "target", ".", "attrs", "[", "'acquisition'", "]", ":", "\n", "                ", "continue", "\n", "", "target", "=", "target", "[", "'reconstruction_rss'", "]", "[", "(", ")", "]", "\n", "recons", "=", "recons", "[", "'reconstruction'", "]", "[", "(", ")", "]", "\n", "target", "=", "target", "[", "5", ":", "-", "2", ",", ":", ",", ":", "]", "\n", "target", "-=", "target", ".", "min", "(", ")", "\n", "target", "/=", "target", ".", "max", "(", ")", "\n", "recons", "-=", "recons", ".", "min", "(", ")", "\n", "recons", "/=", "recons", ".", "max", "(", ")", "\n", "# print(f'{tgt_file.name}, {target.shape}, {recons.shape}')", "\n", "# print(f'{target.min()} {target.max()}')", "\n", "# print(f'{recons.min()} {recons.max()}')", "\n", "# if target.shape == recons.shape:", "\n", "metrics", ".", "push", "(", "target", ",", "recons", ")", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.evaluate.create_arg_parser": [[117, 132], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "create_arg_parser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--test-name'", ",", "type", "=", "str", ",", "default", "=", "'32/radial_fixed'", ",", "help", "=", "'name for the output dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-split'", ",", "choices", "=", "[", "'val'", ",", "'test'", "]", ",", "default", "=", "'val'", ",", "\n", "help", "=", "'Which data partition to run on: \"val\" or \"test\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--target-path'", ",", "type", "=", "pathlib", ".", "Path", ",", "default", "=", "f'/home/tomerweiss/Datasets/pd_only'", ",", "\n", "help", "=", "'Path to the ground truth data'", ")", "\n", "parser", ".", "add_argument", "(", "'--predictions-path'", ",", "type", "=", "pathlib", ".", "Path", ",", "default", "=", "f'summary/test/rec'", ",", "\n", "help", "=", "'Path to reconstructions'", ")", "\n", "parser", ".", "add_argument", "(", "'--acquisition'", ",", "choices", "=", "[", "'PD'", ",", "'PDFS'", "]", ",", "default", "=", "None", ",", "\n", "help", "=", "'If set, only volumes of the specified acquisition type are used '", "\n", "'for evaluation. By default, all volumes are included.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-path'", ",", "type", "=", "pathlib", ".", "Path", ",", "\n", "default", "=", "'/home/tomerweiss/Datasets/pd_only'", ",", "help", "=", "'Path to the dataset'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.utils.get_vel_acc": [[12, 17], ["None"], "function", ["None"], ["def", "get_vel_acc", "(", "x", ")", ":", "\n", "# calculate numerical derivatives of the trajectory", "\n", "    ", "v", "=", "(", "x", "[", ":", ",", "1", ":", ",", ":", "]", "-", "x", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "a", "=", "(", "v", "[", ":", ",", "1", ":", ",", ":", "]", "-", "v", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "return", "v", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.utils.save_reconstructions": [[18, 33], ["pathlib.Path().mkdir", "reconstructions.items", "pathlib.Path", "h5py.File", "f.create_dataset"], "function", ["None"], ["", "def", "save_reconstructions", "(", "reconstructions", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"\n    Saves the reconstructions from a model into h5 files that is appropriate for submission\n    to the leaderboard.\n\n    Args:\n        reconstructions (dict[str, np.array]): A dictionary mapping input filenames to\n            corresponding reconstructions (of shape num_slices x height x width).\n        out_dir (pathlib.Path): Path to the output directory where the reconstructions\n            should be saved.\n    \"\"\"", "\n", "pathlib", ".", "Path", "(", "out_dir", ")", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "for", "fname", ",", "recons", "in", "reconstructions", ".", "items", "(", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "out_dir", "+", "'/'", "+", "fname", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "create_dataset", "(", "'reconstruction'", ",", "data", "=", "recons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.utils.tensor_to_complex_np": [[35, 46], ["data.numpy.numpy"], "function", ["None"], ["", "", "", "def", "tensor_to_complex_np", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Converts a complex torch tensor to numpy array.\n    Args:\n        data (torch.Tensor): Input data to be converted to numpy.\n\n    Returns:\n        np.array: Complex numpy version of data\n    \"\"\"", "\n", "data", "=", "data", ".", "numpy", "(", ")", "\n", "return", "data", "[", "...", ",", "0", "]", "+", "1j", "*", "data", "[", "...", ",", "1", "]", "", "", ""]], "home.repos.pwc.inspect_result.tomer196_PILOT.common.args.Args.__init__": [[10, 28], ["argparse.ArgumentParser.__init__", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.add_argument", "args.Args.set_defaults"], "methods", ["home.repos.pwc.inspect_result.tomer196_PILOT.common.args.Args.__init__"], ["def", "__init__", "(", "self", ",", "**", "overrides", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            **overrides (dict, optional): Keyword arguments used to override default argument values\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n", "self", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "42", ",", "type", "=", "int", ",", "help", "=", "'Seed for random number generators'", ")", "\n", "self", ".", "add_argument", "(", "'--resolution'", ",", "default", "=", "320", ",", "type", "=", "int", ",", "help", "=", "'Resolution of images'", ")", "\n", "\n", "# Data parameters", "\n", "self", ".", "add_argument", "(", "'--data-path'", ",", "type", "=", "pathlib", ".", "Path", ",", "\n", "default", "=", "'/home/tomerweiss/Datasets/pd_only/'", ",", "help", "=", "'Path to the dataset'", ")", "\n", "self", ".", "add_argument", "(", "'--sample-rate'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'Fraction of total volumes to include'", ")", "\n", "# Override defaults with passed overrides", "\n", "self", ".", "set_defaults", "(", "**", "overrides", ")", "\n", "", "", ""]]}