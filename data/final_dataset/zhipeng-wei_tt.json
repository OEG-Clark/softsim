{"home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_kinetics.arg_parse": [[13, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "arg_parse", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu device.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'i3d_resnet101'", ",", "help", "=", "'i3d_resnet101 | slowfast_resnet101 | tpn_resnet101.'", ")", "\n", "parser", ".", "add_argument", "(", "'--attack_method'", ",", "type", "=", "str", ",", "default", "=", "'TemporalTranslation_TI'", ",", "help", "=", "'TemporalTranslation | TemporalTranslation_TI'", ")", "\n", "parser", ".", "add_argument", "(", "'--step'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Multi-step or One-step.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--file_prefix'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "\n", "# parameters in the paper", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Use iterative momentum in MFFGSM.'", ")", "\n", "parser", ".", "add_argument", "(", "'--kernlen'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--move_type'", ",", "type", "=", "str", ",", "default", "=", "'adj'", ",", "help", "=", "'adj | remote | random'", ")", "\n", "parser", ".", "add_argument", "(", "'--kernel_mode'", ",", "type", "=", "str", ",", "default", "=", "'gaussian'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "adv_path", "=", "os", ".", "path", ".", "join", "(", "OPT_PATH", ",", "'Kinetics-{}-{}-{}-{}'", ".", "format", "(", "args", ".", "model", ",", "args", ".", "attack_method", ",", "args", ".", "step", ",", "args", ".", "file_prefix", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "adv_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "adv_path", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_ucf101.arg_parse": [[13, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "arg_parse", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu device.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'i3d_resnet101'", ",", "help", "=", "'i3d_resnet101 | slowfast_resnet101 | tpn_resnet101.'", ")", "\n", "parser", ".", "add_argument", "(", "'--attack_method'", ",", "type", "=", "str", ",", "default", "=", "'TemporalTranslation'", ",", "help", "=", "'TemporalTranslation | TemporalTranslation_TI'", ")", "\n", "parser", ".", "add_argument", "(", "'--step'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Multi-step or One-step.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--file_prefix'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "\n", "# parameters in the paper", "\n", "parser", ".", "add_argument", "(", "'--kernlen'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'Use iterative momentum in MFFGSM.'", ")", "\n", "parser", ".", "add_argument", "(", "'--move_type'", ",", "type", "=", "str", ",", "default", "=", "'adj'", ",", "help", "=", "'adj | remote | random'", ")", "\n", "parser", ".", "add_argument", "(", "'--kernel_mode'", ",", "type", "=", "str", ",", "default", "=", "'gaussian'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "adv_path", "=", "os", ".", "path", ".", "join", "(", "OPT_PATH", ",", "'UCF-{}-{}-{}-{}'", ".", "format", "(", "args", ".", "model", ",", "args", ".", "attack_method", ",", "args", ".", "step", ",", "args", ".", "file_prefix", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "adv_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "adv_path", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.reference_ucf101.arg_parse": [[13, 22], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join"], "function", ["None"], ["def", "arg_parse", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--adv_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'the path of adversarial examples.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu device.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for reference (default: 16)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "adv_path", "=", "os", ".", "path", ".", "join", "(", "OPT_PATH", ",", "args", ".", "adv_path", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.reference_ucf101.accuracy": [[23, 32], ["target.size", "output.topk", "pred.t.t", "pred.t.eq", "correct[].view().float().sum", "target.view().expand_as", "correct[].view().float().sum.mul_", "torch.squeeze", "correct[].view().float", "target.view", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "1", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "# batch_size, 1", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "correct_k", "=", "correct", "[", ":", "1", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "return", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ",", "torch", ".", "squeeze", "(", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.reference_ucf101.generate_batch": [[33, 42], ["numpy.array().astype", "torch.from_numpy", "batches.append", "torch.from_numpy.append", "torch.stack", "torch.from_numpy().cuda", "int", "numpy.array", "torch.from_numpy", "file.split", "numpy.load", "os.path.join"], "function", ["None"], ["", "def", "generate_batch", "(", "batch_files", ")", ":", "\n", "    ", "batches", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "file", "in", "batch_files", ":", "\n", "        ", "batches", ".", "append", "(", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "adv_path", ",", "file", ")", ")", ")", ".", "cuda", "(", ")", ")", "\n", "labels", ".", "append", "(", "int", "(", "file", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", ")", "\n", "", "labels", "=", "np", ".", "array", "(", "labels", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "labels", ")", "\n", "return", "torch", ".", "stack", "(", "batches", ")", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.reference_ucf101.reference": [[43, 83], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "time.time", "torch.no_grad", "enumerate", "utils.AverageMeter.update", "reference_ucf101.generate_batch", "val_batch.cuda.cuda", "val_label.cuda.cuda", "val_label.cuda.size", "model", "reference_ucf101.accuracy", "list", "list", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "preds.cpu().numpy", "val_label.cuda.cpu().numpy", "prec1a.item", "val_batch.cuda.size", "print", "print", "print", "print", "time.time", "time.time", "len", "preds.cpu", "val_label.cuda.cpu"], "function", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.reference_kinetics.generate_batch", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.reference_kinetics.accuracy", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.AverageMeter.update"], ["", "def", "reference", "(", "model", ",", "files_batch", ")", ":", "\n", "    ", "data_time", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "predictions", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "batch", "in", "enumerate", "(", "files_batch", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "val_batch", ",", "val_label", "=", "generate_batch", "(", "batch", ")", "\n", "\n", "val_batch", "=", "val_batch", ".", "cuda", "(", ")", "\n", "val_label", "=", "val_label", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "val_label", ".", "size", "(", "0", ")", "\n", "outputs", "=", "model", "(", "val_batch", ")", "\n", "\n", "prec1a", ",", "preds", "=", "accuracy", "(", "outputs", ".", "data", ",", "val_label", ")", "\n", "\n", "predictions", "+=", "list", "(", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels", "+=", "list", "(", "val_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "top1", ".", "update", "(", "prec1a", ".", "item", "(", ")", ",", "val_batch", ".", "size", "(", "0", ")", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "step", "%", "5", "==", "0", ":", "\n", "                ", "print", "(", "'----validation----'", ")", "\n", "print_string", "=", "'Process: [{0}/{1}]'", ".", "format", "(", "step", "+", "1", ",", "len", "(", "files_batch", ")", ")", "\n", "print", "(", "print_string", ")", "\n", "print_string", "=", "'data_time: {data_time:.3f}, batch time: {batch_time:.3f}'", ".", "format", "(", "\n", "data_time", "=", "data_time", ".", "val", ",", "\n", "batch_time", "=", "batch_time", ".", "val", ")", "\n", "print", "(", "print_string", ")", "\n", "print_string", "=", "'top-1 accuracy: {top1_acc:.2f}%'", ".", "format", "(", "top1_acc", "=", "top1", ".", "avg", ")", "\n", "print", "(", "print_string", ")", "\n", "", "", "", "return", "predictions", ",", "labels", ",", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack.__init__": [[31, 52], ["str().split", "next", "model.parameters", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "model", ")", ":", "\n", "        ", "r\"\"\"\n        Initializes internal attack state.\n        Arguments:\n            name (str) : name of an attack.\n            model (torch.nn.Module): model to attack.\n        \"\"\"", "\n", "self", ".", "attack", "=", "name", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model_name", "=", "str", "(", "model", ")", ".", "split", "(", "\"(\"", ")", "[", "0", "]", "\n", "\n", "self", ".", "training", "=", "model", ".", "training", "\n", "self", ".", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n", "self", ".", "_targeted", "=", "1", "\n", "self", ".", "_attack_mode", "=", "'default'", "\n", "self", ".", "_return_type", "=", "'float'", "\n", "self", ".", "_target_map_function", "=", "lambda", "images", ",", "labels", ":", "labels", "\n", "\n", "self", ".", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack.forward": [[53, 59], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "r\"\"\"\n        It defines the computation performed at every call (attack forward).\n        Should be overridden by all subclasses.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack.set_attack_mode": [[60, 92], ["ValueError", "ValueError", "ValueError"], "methods", ["None"], ["", "def", "set_attack_mode", "(", "self", ",", "mode", ",", "target_map_function", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        Set the attack mode.\n  \n        Arguments:\n            mode (str) : 'default' (DEFAULT)\n                         'targeted' - Use input labels as targeted labels.\n                         'least_likely' - Use least likely labels as targeted labels.\n                         \n            target_map_function (function) :\n        \"\"\"", "\n", "if", "self", ".", "_attack_mode", "is", "'only_default'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Changing attack mode is not supported in this attack method.\"", ")", "\n", "\n", "", "if", "(", "mode", "is", "'targeted'", ")", "and", "(", "target_map_function", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Please give a target_map_function, e.g., lambda images, labels:(labels+1)%10.\"", ")", "\n", "\n", "", "if", "mode", "==", "\"default\"", ":", "\n", "            ", "self", ".", "_attack_mode", "=", "\"default\"", "\n", "self", ".", "_targeted", "=", "1", "\n", "self", ".", "_transform_label", "=", "self", ".", "_get_label", "\n", "", "elif", "mode", "==", "\"targeted\"", ":", "\n", "            ", "self", ".", "_attack_mode", "=", "\"targeted\"", "\n", "self", ".", "_targeted", "=", "-", "1", "\n", "self", ".", "_target_map_function", "=", "target_map_function", "\n", "self", ".", "_transform_label", "=", "self", ".", "_get_target_label", "\n", "", "elif", "mode", "==", "\"least_likely\"", ":", "\n", "            ", "self", ".", "_attack_mode", "=", "\"least_likely\"", "\n", "self", ".", "_targeted", "=", "-", "1", "\n", "self", ".", "_transform_label", "=", "self", ".", "_get_least_likely_label", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "mode", "+", "\" is not a valid mode. [Options : default, targeted, least_likely]\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack.set_return_type": [[93, 105], ["ValueError"], "methods", ["None"], ["", "", "def", "set_return_type", "(", "self", ",", "type", ")", ":", "\n", "        ", "r\"\"\"\n        Set the return type of adversarial images: `int` or `float`.\n        Arguments:\n            type (str) : 'float' or 'int'. (DEFAULT : 'float')\n        \"\"\"", "\n", "if", "type", "==", "'float'", ":", "\n", "            ", "self", ".", "_return_type", "=", "'float'", "\n", "", "elif", "type", "==", "'int'", ":", "\n", "            ", "self", ".", "_return_type", "=", "'int'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "type", "+", "\" is not a valid type. [Options : float, int]\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack.save": [[106, 148], ["attack_methods.Attack.model.eval", "len", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.save", "torch.save", "torch.save", "torch.save", "print", "attack_methods.Attack._switch_model", "attack_methods.Attack.__call__", "image_list.append", "label_list.append", "attack_methods.Attack.cpu", "labels.cpu", "attack_methods.Attack.model", "torch.max", "torch.max", "torch.max", "torch.max", "labels.size", "print", "attack_methods.Attack.float", "float", "labels.to"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack.save", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack.save", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack.save", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack.save", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._switch_model", "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.MultiScaleRandomCrop.__call__"], ["", "", "def", "save", "(", "self", ",", "save_path", ",", "data_loader", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        Save adversarial images as torch.tensor from given torch.utils.data.DataLoader.\n        Arguments:\n            save_path (str) : save_path.\n            data_loader (torch.utils.data.DataLoader) : data loader.\n            verbose (bool) : True for displaying detailed information. (DEFAULT : True)\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "image_list", "=", "[", "]", "\n", "label_list", "=", "[", "]", "\n", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "total_batch", "=", "len", "(", "data_loader", ")", "\n", "\n", "for", "step", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "adv_images", "=", "self", ".", "__call__", "(", "images", ",", "labels", ")", "\n", "\n", "image_list", ".", "append", "(", "adv_images", ".", "cpu", "(", ")", ")", "\n", "label_list", ".", "append", "(", "labels", ".", "cpu", "(", ")", ")", "\n", "\n", "if", "self", ".", "_return_type", "==", "'int'", ":", "\n", "                ", "adv_images", "=", "adv_images", ".", "float", "(", ")", "/", "255", "\n", "\n", "", "if", "verbose", ":", "\n", "                ", "outputs", "=", "self", ".", "model", "(", "adv_images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "predicted", "==", "labels", ".", "to", "(", "self", ".", "device", ")", ")", ".", "sum", "(", ")", "\n", "\n", "acc", "=", "100", "*", "float", "(", "correct", ")", "/", "total", "\n", "print", "(", "'- Save Progress : %2.2f %% / Accuracy : %2.2f %%'", "%", "(", "(", "step", "+", "1", ")", "/", "total_batch", "*", "100", ",", "acc", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "", "", "x", "=", "torch", ".", "cat", "(", "image_list", ",", "0", ")", "\n", "y", "=", "torch", ".", "cat", "(", "label_list", ",", "0", ")", "\n", "torch", ".", "save", "(", "(", "x", ",", "y", ")", ",", "save_path", ")", "\n", "print", "(", "'\\n- Save Complete!'", ")", "\n", "\n", "self", ".", "_switch_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._transform_video": [[149, 163], ["torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "video.sub_().div_", "video.mul_().add_", "video.sub_", "video.mul_"], "methods", ["None"], ["", "def", "_transform_video", "(", "self", ",", "video", ",", "mode", "=", "'forward'", ")", ":", "\n", "        ", "r'''\n        Transform the video into [0, 1]\n        '''", "\n", "dtype", "=", "video", ".", "dtype", "\n", "mean", "=", "torch", ".", "as_tensor", "(", "self", ".", "mean", ",", "dtype", "=", "dtype", ",", "device", "=", "self", ".", "device", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "self", ".", "std", ",", "dtype", "=", "dtype", ",", "device", "=", "self", ".", "device", ")", "\n", "if", "mode", "==", "'forward'", ":", "\n", "# [-mean/std, mean/std]", "\n", "            ", "video", ".", "sub_", "(", "mean", "[", ":", ",", "None", ",", "None", ",", "None", "]", ")", ".", "div_", "(", "std", "[", ":", ",", "None", ",", "None", ",", "None", "]", ")", "\n", "", "elif", "mode", "==", "'back'", ":", "\n", "# [0, 1]", "\n", "            ", "video", ".", "mul_", "(", "std", "[", ":", ",", "None", ",", "None", ",", "None", "]", ")", ".", "add_", "(", "mean", "[", ":", ",", "None", ",", "None", ",", "None", "]", ")", "\n", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._transform_label": [[164, 169], ["None"], "methods", ["None"], ["", "def", "_transform_label", "(", "self", ",", "images", ",", "labels", ")", ":", "\n", "        ", "r\"\"\"\n        Function for changing the attack mode.\n        \"\"\"", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._get_label": [[170, 176], ["None"], "methods", ["None"], ["", "def", "_get_label", "(", "self", ",", "images", ",", "labels", ")", ":", "\n", "        ", "r\"\"\"\n        Function for changing the attack mode.\n        Return input labels.\n        \"\"\"", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._get_target_label": [[177, 183], ["attack_methods.Attack._target_map_function"], "methods", ["None"], ["", "def", "_get_target_label", "(", "self", ",", "images", ",", "labels", ")", ":", "\n", "        ", "r\"\"\"\n        Function for changing the attack mode.\n        Return input labels.\n        \"\"\"", "\n", "return", "self", ".", "_target_map_function", "(", "images", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._get_least_likely_label": [[184, 193], ["attack_methods.Attack.model", "torch.min", "torch.min", "torch.min", "torch.min", "labels.detach_.detach_.detach_"], "methods", ["None"], ["", "def", "_get_least_likely_label", "(", "self", ",", "images", ",", "labels", ")", ":", "\n", "        ", "r\"\"\"\n        Function for changing the attack mode.\n        Return least likely labels.\n        \"\"\"", "\n", "outputs", "=", "self", ".", "model", "(", "images", ")", "\n", "_", ",", "labels", "=", "torch", ".", "min", "(", "outputs", ".", "data", ",", "1", ")", "\n", "labels", "=", "labels", ".", "detach_", "(", ")", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._to_uint": [[194, 200], ["None"], "methods", ["None"], ["", "def", "_to_uint", "(", "self", ",", "images", ")", ":", "\n", "        ", "r\"\"\"\n        Function for changing the return type.\n        Return images as int.\n        \"\"\"", "\n", "return", "(", "images", "*", "255", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._switch_model": [[201, 209], ["attack_methods.Attack.model.train", "attack_methods.Attack.model.eval"], "methods", ["None"], ["", "def", "_switch_model", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Function for changing the training mode of the model.\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack.__str__": [[210, 229], ["attack_methods.Attack.__dict__.copy", "attack_methods.Attack.keys", "del_keys.append", "attack_methods.Attack.items"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "info", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "\n", "del_keys", "=", "[", "'model'", ",", "'attack'", "]", "\n", "\n", "for", "key", "in", "info", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "[", "0", "]", "==", "\"_\"", ":", "\n", "                ", "del_keys", ".", "append", "(", "key", ")", "\n", "\n", "", "", "for", "key", "in", "del_keys", ":", "\n", "            ", "del", "info", "[", "key", "]", "\n", "\n", "", "info", "[", "'attack_mode'", "]", "=", "self", ".", "_attack_mode", "\n", "if", "info", "[", "'attack_mode'", "]", "==", "'only_default'", ":", "\n", "            ", "info", "[", "'attack_mode'", "]", "=", "'default'", "\n", "\n", "", "info", "[", "'return_type'", "]", "=", "self", ".", "_return_type", "\n", "\n", "return", "self", ".", "attack", "+", "\"(\"", "+", "', '", ".", "join", "(", "'{}={}'", ".", "format", "(", "key", ",", "val", ")", "for", "key", ",", "val", "in", "info", ".", "items", "(", ")", ")", "+", "\")\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack.__call__": [[230, 239], ["attack_methods.Attack.model.eval", "attack_methods.Attack.forward", "attack_methods.Attack._switch_model", "attack_methods.Attack._to_uint"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI.forward", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._switch_model", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._to_uint"], ["", "def", "__call__", "(", "self", ",", "*", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "images", "=", "self", ".", "forward", "(", "*", "input", ",", "**", "kwargs", ")", "\n", "self", ".", "_switch_model", "(", ")", "\n", "\n", "if", "self", ".", "_return_type", "==", "'int'", ":", "\n", "            ", "images", "=", "self", ".", "_to_uint", "(", "images", ")", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation.__init__": [[251, 271], ["attack_methods.Attack.__init__", "params.items", "attack_methods.TemporalTranslation._move_info_generation", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "setattr", "attack_methods.TemporalTranslation._initial_kernel_gaussian().astype", "attack_methods.TemporalTranslation._initial_kernel_linear().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "attack_methods.TemporalTranslation._initial_kernel_gaussian", "attack_methods.TemporalTranslation._initial_kernel_uniform().astype", "numpy.expand_dims", "attack_methods.TemporalTranslation._initial_kernel_linear", "attack_methods.TemporalTranslation._initial_kernel_uniform"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.__init__", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._move_info_generation", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._initial_kernel_gaussian", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._initial_kernel_linear", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._initial_kernel_uniform"], ["def", "__init__", "(", "self", ",", "model", ",", "params", ",", "epsilon", "=", "16", "/", "255", ",", "steps", "=", "10", ",", "delay", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "TemporalTranslation", ",", "self", ")", ".", "__init__", "(", "\"TemporalTranslation\"", ",", "model", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "step_size", "=", "self", ".", "epsilon", "/", "self", ".", "steps", "\n", "self", ".", "delay", "=", "delay", "\n", "\n", "for", "name", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "name", ",", "value", ")", "\n", "\n", "", "self", ".", "frames", "=", "32", "\n", "self", ".", "cycle_move_list", "=", "self", ".", "_move_info_generation", "(", ")", "\n", "if", "self", ".", "kernel_mode", "==", "'gaussian'", ":", "\n", "            ", "kernel", "=", "self", ".", "_initial_kernel_gaussian", "(", "self", ".", "kernlen", ")", ".", "astype", "(", "np", ".", "float32", ")", "# (self.kernlen)", "\n", "", "elif", "self", ".", "kernel_mode", "==", "'linear'", ":", "\n", "            ", "kernel", "=", "self", ".", "_initial_kernel_linear", "(", "self", ".", "kernlen", ")", ".", "astype", "(", "np", ".", "float32", ")", "# (self.kernlen)", "\n", "", "elif", "self", ".", "kernel_mode", "==", "'uniform'", ":", "\n", "            ", "kernel", "=", "self", ".", "_initial_kernel_uniform", "(", "self", ".", "kernlen", ")", ".", "astype", "(", "np", ".", "float32", ")", "# (self.kernlen)", "\n", "\n", "", "self", ".", "kernel", "=", "torch", ".", "from_numpy", "(", "np", ".", "expand_dims", "(", "kernel", ",", "0", ")", ")", ".", "to", "(", "self", ".", "device", ")", "# 1,self.kernlen", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation._move_info_generation": [[272, 276], ["int", "range"], "methods", ["None"], ["", "def", "_move_info_generation", "(", "self", ")", ":", "\n", "        ", "max_move", "=", "int", "(", "(", "self", ".", "kernlen", "-", "1", ")", "/", "2", ")", "\n", "lists", "=", "[", "i", "for", "i", "in", "range", "(", "-", "max_move", ",", "max_move", "+", "1", ")", "]", "\n", "return", "lists", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation._initial_kernel_linear": [[277, 285], ["int", "range", "numpy.array", "numpy.array.append", "numpy.array.sum"], "methods", ["None"], ["", "def", "_initial_kernel_linear", "(", "self", ",", "kernlen", ")", ":", "\n", "        ", "k", "=", "int", "(", "(", "kernlen", "-", "1", ")", "/", "2", ")", "\n", "kern1d", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "k", "+", "1", ")", ":", "\n", "            ", "kern1d", ".", "append", "(", "1", "-", "i", "/", "(", "k", "+", "1", ")", ")", "\n", "", "kern1d", "=", "np", ".", "array", "(", "kern1d", "[", ":", ":", "-", "1", "]", "[", ":", "-", "1", "]", "+", "kern1d", ")", "\n", "kernel", "=", "kern1d", "/", "kern1d", ".", "sum", "(", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation._initial_kernel_uniform": [[286, 290], ["numpy.ones", "numpy.ones.sum"], "methods", ["None"], ["", "def", "_initial_kernel_uniform", "(", "self", ",", "kernlen", ")", ":", "\n", "        ", "kern1d", "=", "np", ".", "ones", "(", "kernlen", ")", "\n", "kernel", "=", "kern1d", "/", "kern1d", ".", "sum", "(", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation._initial_kernel_gaussian": [[291, 305], ["int", "range", "numpy.array", "numpy.array.append", "len", "numpy.array.sum", "numpy.math.exp", "attack_methods.TemporalTranslation._initial_kernel_gaussian.calculte_guassian"], "methods", ["None"], ["", "def", "_initial_kernel_gaussian", "(", "self", ",", "kernlen", ")", ":", "\n", "        ", "assert", "kernlen", "%", "2", "==", "1", "\n", "k", "=", "(", "kernlen", "-", "1", ")", "/", "2", "\n", "sigma", "=", "k", "/", "3", "\n", "k", "=", "int", "(", "k", ")", "\n", "def", "calculte_guassian", "(", "x", ",", "sigma", ")", ":", "\n", "            ", "return", "(", "1", "/", "(", "sigma", "*", "np", ".", "sqrt", "(", "2", "*", "np", ".", "pi", ")", ")", "*", "np", ".", "math", ".", "exp", "(", "-", "(", "x", "**", "2", ")", "/", "(", "2", "*", "(", "sigma", "**", "2", ")", ")", ")", ")", "\n", "", "kern1d", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "            ", "kern1d", ".", "append", "(", "calculte_guassian", "(", "i", ",", "sigma", ")", ")", "\n", "", "assert", "len", "(", "kern1d", ")", "==", "kernlen", "\n", "kern1d", "=", "np", ".", "array", "(", "kern1d", ")", "\n", "kernel", "=", "kern1d", "/", "kern1d", ".", "sum", "(", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation._conv1d_frame": [[306, 317], ["grads.reshape.reshape.reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "grad.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "_conv1d_frame", "(", "self", ",", "grads", ")", ":", "\n", "        ", "'''\n        grads: D, N, C, T, H, W\n        '''", "\n", "# cycle padding for grads", "\n", "D", ",", "N", ",", "C", ",", "T", ",", "H", ",", "W", "=", "grads", ".", "shape", "\n", "grads", "=", "grads", ".", "reshape", "(", "D", ",", "-", "1", ")", "\n", "\n", "grad", "=", "torch", ".", "matmul", "(", "self", ".", "kernel", ",", "grads", ")", "\n", "grad", "=", "grad", ".", "reshape", "(", "N", ",", "C", ",", "T", ",", "H", ",", "W", ")", "\n", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation._cycle_move": [[318, 331], ["abs", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range"], "methods", ["None"], ["", "def", "_cycle_move", "(", "self", ",", "adv_videos", ",", "cycle_move", ")", ":", "\n", "        ", "if", "cycle_move", "<", "0", ":", "\n", "            ", "direction", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "direction", "=", "1", "\n", "", "cycle_move", "=", "abs", "(", "cycle_move", ")", "\n", "cycle_move", "=", "cycle_move", "%", "self", ".", "frames", "\n", "new_videos", "=", "torch", ".", "zeros_like", "(", "adv_videos", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "frames", ")", ":", "\n", "            ", "ori_ind", "=", "i", "\n", "new_ind", "=", "(", "ori_ind", "+", "direction", "*", "cycle_move", ")", "%", "self", ".", "frames", "\n", "new_videos", "[", ":", ",", ":", ",", "new_ind", "]", "=", "adv_videos", "[", ":", ",", ":", ",", "ori_ind", "]", "\n", "", "return", "new_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation._cycle_move_remote": [[332, 348], ["abs", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "int"], "methods", ["None"], ["", "def", "_cycle_move_remote", "(", "self", ",", "adv_videos", ",", "cycle_move", ")", ":", "\n", "        ", "if", "cycle_move", "<", "0", ":", "\n", "            ", "direction", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "direction", "=", "1", "\n", "", "cycle_move", "=", "abs", "(", "cycle_move", ")", "\n", "if", "cycle_move", "==", "0", ":", "\n", "            ", "cycle_move", "=", "cycle_move", "%", "self", ".", "frames", "\n", "", "else", ":", "\n", "            ", "cycle_move", "=", "(", "cycle_move", "+", "(", "int", "(", "self", ".", "frames", "/", "2", ")", "-", "1", ")", ")", "%", "self", ".", "frames", "\n", "", "new_videos", "=", "torch", ".", "zeros_like", "(", "adv_videos", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "frames", ")", ":", "\n", "            ", "ori_ind", "=", "i", "\n", "new_ind", "=", "(", "ori_ind", "+", "direction", "*", "cycle_move", ")", "%", "self", ".", "frames", "\n", "new_videos", "[", ":", ",", ":", ",", "new_ind", "]", "=", "adv_videos", "[", ":", ",", ":", ",", "ori_ind", "]", "\n", "", "return", "new_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation._cycle_move_random": [[349, 366], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "random.randint"], "methods", ["None"], ["", "def", "_cycle_move_random", "(", "self", ",", "adv_videos", ",", "cycle_move", ")", ":", "\n", "        ", "if", "cycle_move", "<", "0", ":", "\n", "            ", "direction", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "direction", "=", "1", "\n", "# cycle_move = abs(cycle_move)", "\n", "", "if", "cycle_move", "==", "0", ":", "\n", "            ", "cycle_move", "=", "cycle_move", "%", "self", ".", "frames", "\n", "", "else", ":", "\n", "            ", "cycle_move", "=", "random", ".", "randint", "(", "0", ",", "100", ")", "%", "self", ".", "frames", "\n", "# cycle_move = (cycle_move + int(self.frames/2)) % self.frames", "\n", "", "new_videos", "=", "torch", ".", "zeros_like", "(", "adv_videos", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "frames", ")", ":", "\n", "            ", "ori_ind", "=", "i", "\n", "new_ind", "=", "(", "ori_ind", "+", "direction", "*", "cycle_move", ")", "%", "self", ".", "frames", "\n", "new_videos", "[", ":", ",", ":", ",", "new_ind", "]", "=", "adv_videos", "[", ":", ",", ":", ",", "ori_ind", "]", "\n", "", "return", "new_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation._exchange_move": [[367, 374], ["adv_videos.clone"], "methods", ["None"], ["", "def", "_exchange_move", "(", "self", ",", "adv_videos", ",", "exchange_lists", ")", ":", "\n", "        ", "new_videos", "=", "adv_videos", ".", "clone", "(", ")", "\n", "for", "exchange", "in", "exchange_lists", ":", "\n", "            ", "one_frame", ",", "ano_frame", "=", "exchange", "\n", "new_videos", "[", ":", ",", ":", ",", "one_frame", "]", "=", "adv_videos", "[", ":", ",", ":", ",", "ano_frame", "]", "\n", "new_videos", "[", ":", ",", ":", ",", "ano_frame", "]", "=", "adv_videos", "[", ":", ",", ":", ",", "one_frame", "]", "\n", "", "return", "new_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation._get_grad": [[375, 384], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "attack_methods.TemporalTranslation.model", "loss().to", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "loss"], "methods", ["None"], ["", "def", "_get_grad", "(", "self", ",", "adv_videos", ",", "labels", ",", "loss", ")", ":", "\n", "        ", "batch_size", "=", "adv_videos", ".", "shape", "[", "0", "]", "\n", "used_labels", "=", "torch", ".", "cat", "(", "[", "labels", "]", "*", "batch_size", ",", "dim", "=", "0", ")", "\n", "adv_videos", ".", "requires_grad", "=", "True", "\n", "outputs", "=", "self", ".", "model", "(", "adv_videos", ")", "\n", "cost", "=", "self", ".", "_targeted", "*", "loss", "(", "outputs", ",", "used_labels", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "cost", ",", "adv_videos", ",", "\n", "retain_graph", "=", "False", ",", "create_graph", "=", "False", ")", "[", "0", "]", "\n", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation._grad_augmentation": [[385, 397], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "enumerate", "attack_methods.TemporalTranslation._conv1d_frame", "attack_methods.TemporalTranslation._cycle_move"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._conv1d_frame", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._cycle_move"], ["", "def", "_grad_augmentation", "(", "self", ",", "grads", ")", ":", "\n", "        ", "'''\n        Input:\n            grads: kernlen, grad.shape\n        Return \n            grad\n        '''", "\n", "diff_position_same_frame", "=", "torch", ".", "zeros_like", "(", "grads", ")", "\n", "for", "ind", ",", "cycle_move", "in", "enumerate", "(", "self", ".", "cycle_move_list", ")", ":", "\n", "            ", "diff_position_same_frame", "[", "ind", "]", "=", "self", ".", "_cycle_move", "(", "grads", "[", "ind", "]", ",", "-", "cycle_move", ")", "\n", "", "d_conv_grad", "=", "self", ".", "_conv1d_frame", "(", "diff_position_same_frame", ")", "\n", "return", "d_conv_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation.forward": [[398, 453], ["videos.to.to.to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "labels.to.to.to", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "attack_methods.TemporalTranslation._transform_video", "videos.to.to.clone().detach", "time.time", "range", "videos.to.to.clone().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "math.ceil", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "attack_methods.TemporalTranslation._grad_augmentation", "attack_methods.TemporalTranslation._transform_video", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "attack_methods.TemporalTranslation._transform_video", "print", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "videos.to.to.clone", "batch_new_videos.append", "print", "attack_methods.TemporalTranslation._get_grad", "torch.unsqueeze.append", "torch.unsqueeze.append", "attack_methods.norm_grads", "attack_methods.TemporalTranslation.detach", "videos.to.to.clone", "attack_methods.TemporalTranslation._cycle_move", "norm_grads.sign", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "time.time", "attack_methods.TemporalTranslation._cycle_move_remote", "attack_methods.TemporalTranslation._cycle_move_random", "min"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._transform_video", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._grad_augmentation", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._transform_video", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._transform_video", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._get_grad", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.norm_grads", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._cycle_move", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._cycle_move_remote", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._cycle_move_random"], ["", "def", "forward", "(", "self", ",", "videos", ",", "labels", ")", ":", "\n", "        ", "r\"\"\"\n        Overridden.\n        \"\"\"", "\n", "videos", "=", "videos", ".", "to", "(", "self", ".", "device", ")", "\n", "momentum", "=", "torch", ".", "zeros_like", "(", "videos", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "unnorm_videos", "=", "self", ".", "_transform_video", "(", "videos", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "mode", "=", "'back'", ")", "# [0, 1]", "\n", "adv_videos", "=", "videos", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "del", "videos", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "steps", ")", ":", "\n", "# obtain grads of these variants", "\n", "            ", "batch_new_videos", "=", "[", "]", "\n", "for", "cycle_move", "in", "self", ".", "cycle_move_list", ":", "\n", "                ", "if", "self", ".", "move_type", "==", "'adj'", ":", "\n", "                    ", "new_videos", "=", "self", ".", "_cycle_move", "(", "adv_videos", ",", "cycle_move", ")", "\n", "", "elif", "self", ".", "move_type", "==", "'remote'", ":", "\n", "                    ", "new_videos", "=", "self", ".", "_cycle_move_remote", "(", "adv_videos", ",", "cycle_move", ")", "\n", "", "elif", "self", ".", "move_type", "==", "'random'", ":", "\n", "                    ", "new_videos", "=", "self", ".", "_cycle_move_random", "(", "adv_videos", ",", "cycle_move", ")", "\n", "", "batch_new_videos", ".", "append", "(", "new_videos", ")", "\n", "", "batch_inps", "=", "torch", ".", "cat", "(", "batch_new_videos", ",", "dim", "=", "0", ")", "\n", "grads", "=", "[", "]", "\n", "batch_times", "=", "5", "\n", "length", "=", "len", "(", "self", ".", "cycle_move_list", ")", "\n", "if", "self", ".", "model_name", "==", "'TPNet'", ":", "\n", "                ", "batch_times", "=", "length", "\n", "print", "(", "self", ".", "model_name", ",", "batch_times", ")", "\n", "", "batch_size", "=", "math", ".", "ceil", "(", "length", "/", "batch_times", ")", "\n", "for", "i", "in", "range", "(", "batch_times", ")", ":", "\n", "                ", "grad", "=", "self", ".", "_get_grad", "(", "batch_inps", "[", "i", "*", "batch_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", ",", "length", ")", "]", ",", "labels", ",", "loss", ")", "\n", "grads", ".", "append", "(", "grad", ")", "\n", "# grad augmentation", "\n", "", "grads", "=", "torch", ".", "cat", "(", "grads", ",", "dim", "=", "0", ")", "\n", "grads", "=", "torch", ".", "unsqueeze", "(", "grads", ",", "dim", "=", "1", ")", "\n", "grad", "=", "self", ".", "_grad_augmentation", "(", "grads", ")", "\n", "\n", "# momentum ", "\n", "if", "self", ".", "momentum", ":", "\n", "                ", "grad", "=", "norm_grads", "(", "grad", ")", "\n", "grad", "+=", "momentum", "*", "self", ".", "delay", "\n", "momentum", "=", "grad", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "", "adv_videos", "=", "self", ".", "_transform_video", "(", "adv_videos", ".", "detach", "(", ")", ",", "mode", "=", "'back'", ")", "# [0, 1]", "\n", "adv_videos", "=", "adv_videos", "+", "self", ".", "step_size", "*", "grad", ".", "sign", "(", ")", "\n", "delta", "=", "torch", ".", "clamp", "(", "adv_videos", "-", "unnorm_videos", ",", "min", "=", "-", "self", ".", "epsilon", ",", "max", "=", "self", ".", "epsilon", ")", "\n", "adv_videos", "=", "torch", ".", "clamp", "(", "unnorm_videos", "+", "delta", ",", "min", "=", "0", ",", "max", "=", "1", ")", ".", "detach", "(", ")", "\n", "adv_videos", "=", "self", ".", "_transform_video", "(", "adv_videos", ",", "mode", "=", "'forward'", ")", "# norm", "\n", "print", "(", "'now_time'", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "", "return", "adv_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI.__init__": [[465, 490], ["attack_methods.Attack.__init__", "params.items", "attack_methods.TemporalTranslation_TI._move_info_generation", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "attack_methods.TemporalTranslation_TI._initial_kernel().astype", "numpy.stack", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "setattr", "attack_methods.TemporalTranslation_TI._initial_kernel_gaussian().astype", "attack_methods.TemporalTranslation_TI._initial_kernel_linear().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "attack_methods.TemporalTranslation_TI._initial_kernel", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "attack_methods.TemporalTranslation_TI._initial_kernel_gaussian", "attack_methods.TemporalTranslation_TI._initial_kernel_uniform().astype", "numpy.expand_dims", "numpy.expand_dims", "attack_methods.TemporalTranslation_TI._initial_kernel_linear", "attack_methods.TemporalTranslation_TI._initial_kernel_uniform"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.__init__", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._move_info_generation", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._initial_kernel", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._initial_kernel_gaussian", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._initial_kernel_linear", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._initial_kernel_uniform"], ["def", "__init__", "(", "self", ",", "model", ",", "params", ",", "epsilon", "=", "16", "/", "255", ",", "steps", "=", "1", ",", "delay", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "TemporalTranslation_TI", ",", "self", ")", ".", "__init__", "(", "\"TemporalTranslation_TI\"", ",", "model", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "step_size", "=", "self", ".", "epsilon", "/", "self", ".", "steps", "\n", "self", ".", "delay", "=", "delay", "\n", "\n", "for", "name", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "name", ",", "value", ")", "\n", "\n", "", "self", ".", "frames", "=", "32", "\n", "self", ".", "cycle_move_list", "=", "self", ".", "_move_info_generation", "(", ")", "\n", "if", "self", ".", "kernel_mode", "==", "'gaussian'", ":", "\n", "            ", "kernel", "=", "self", ".", "_initial_kernel_gaussian", "(", "self", ".", "kernlen", ")", ".", "astype", "(", "np", ".", "float32", ")", "# (self.kernlen)", "\n", "", "elif", "self", ".", "kernel_mode", "==", "'linear'", ":", "\n", "            ", "kernel", "=", "self", ".", "_initial_kernel_linear", "(", "self", ".", "kernlen", ")", ".", "astype", "(", "np", ".", "float32", ")", "# (self.kernlen)", "\n", "", "elif", "self", ".", "kernel_mode", "==", "'uniform'", ":", "\n", "            ", "kernel", "=", "self", ".", "_initial_kernel_uniform", "(", "self", ".", "kernlen", ")", ".", "astype", "(", "np", ".", "float32", ")", "# (self.kernlen)", "\n", "\n", "", "self", ".", "kernel", "=", "torch", ".", "from_numpy", "(", "np", ".", "expand_dims", "(", "kernel", ",", "0", ")", ")", ".", "to", "(", "self", ".", "device", ")", "# 1,self.kernlen", "\n", "\n", "# TI kernel", "\n", "ti_kernel", "=", "self", ".", "_initial_kernel", "(", "15", ",", "3", ")", ".", "astype", "(", "np", ".", "float32", ")", "# (15,15)", "\n", "stack_kernel", "=", "np", ".", "stack", "(", "[", "ti_kernel", ",", "ti_kernel", ",", "ti_kernel", "]", ")", "# (3,15,15)", "\n", "self", ".", "stack_kernel", "=", "torch", ".", "from_numpy", "(", "np", ".", "expand_dims", "(", "stack_kernel", ",", "1", ")", ")", ".", "to", "(", "self", ".", "device", ")", "# 3,1,15,15", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._move_info_generation": [[491, 495], ["int", "range"], "methods", ["None"], ["", "def", "_move_info_generation", "(", "self", ")", ":", "\n", "        ", "max_move", "=", "int", "(", "(", "self", ".", "kernlen", "-", "1", ")", "/", "2", ")", "\n", "lists", "=", "[", "i", "for", "i", "in", "range", "(", "-", "max_move", ",", "max_move", "+", "1", ")", "]", "\n", "return", "lists", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._initial_kernel_linear": [[496, 504], ["int", "range", "numpy.array", "numpy.array.append", "numpy.array.sum"], "methods", ["None"], ["", "def", "_initial_kernel_linear", "(", "self", ",", "kernlen", ")", ":", "\n", "        ", "k", "=", "int", "(", "(", "kernlen", "-", "1", ")", "/", "2", ")", "\n", "kern1d", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "k", "+", "1", ")", ":", "\n", "            ", "kern1d", ".", "append", "(", "1", "-", "i", "/", "(", "k", "+", "1", ")", ")", "\n", "", "kern1d", "=", "np", ".", "array", "(", "kern1d", "[", ":", ":", "-", "1", "]", "[", ":", "-", "1", "]", "+", "kern1d", ")", "\n", "kernel", "=", "kern1d", "/", "kern1d", ".", "sum", "(", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._initial_kernel_uniform": [[505, 509], ["numpy.ones", "numpy.ones.sum"], "methods", ["None"], ["", "def", "_initial_kernel_uniform", "(", "self", ",", "kernlen", ")", ":", "\n", "        ", "kern1d", "=", "np", ".", "ones", "(", "kernlen", ")", "\n", "kernel", "=", "kern1d", "/", "kern1d", ".", "sum", "(", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._initial_kernel_gaussian": [[510, 524], ["int", "range", "numpy.array", "numpy.array.append", "len", "numpy.array.sum", "numpy.math.exp", "attack_methods.TemporalTranslation_TI._initial_kernel_gaussian.calculte_guassian"], "methods", ["None"], ["", "def", "_initial_kernel_gaussian", "(", "self", ",", "kernlen", ")", ":", "\n", "        ", "assert", "kernlen", "%", "2", "==", "1", "\n", "k", "=", "(", "kernlen", "-", "1", ")", "/", "2", "\n", "sigma", "=", "k", "/", "3", "\n", "k", "=", "int", "(", "k", ")", "\n", "def", "calculte_guassian", "(", "x", ",", "sigma", ")", ":", "\n", "            ", "return", "(", "1", "/", "(", "sigma", "*", "np", ".", "sqrt", "(", "2", "*", "np", ".", "pi", ")", ")", "*", "np", ".", "math", ".", "exp", "(", "-", "(", "x", "**", "2", ")", "/", "(", "2", "*", "(", "sigma", "**", "2", ")", ")", ")", ")", "\n", "", "kern1d", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", ":", "\n", "            ", "kern1d", ".", "append", "(", "calculte_guassian", "(", "i", ",", "sigma", ")", ")", "\n", "", "assert", "len", "(", "kern1d", ")", "==", "kernlen", "\n", "kern1d", "=", "np", ".", "array", "(", "kern1d", ")", "\n", "kernel", "=", "kern1d", "/", "kern1d", ".", "sum", "(", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._conv1d_frame": [[525, 536], ["grads.reshape.reshape.reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "grad.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "_conv1d_frame", "(", "self", ",", "grads", ")", ":", "\n", "        ", "'''\n        grads: D, N, C, T, H, W\n        '''", "\n", "# cycle padding for grads", "\n", "D", ",", "N", ",", "C", ",", "T", ",", "H", ",", "W", "=", "grads", ".", "shape", "\n", "grads", "=", "grads", ".", "reshape", "(", "D", ",", "-", "1", ")", "\n", "\n", "grad", "=", "torch", ".", "matmul", "(", "self", ".", "kernel", ",", "grads", ")", "\n", "grad", "=", "grad", ".", "reshape", "(", "N", ",", "C", ",", "T", ",", "H", ",", "W", ")", "\n", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._cycle_move": [[537, 550], ["abs", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range"], "methods", ["None"], ["", "def", "_cycle_move", "(", "self", ",", "adv_videos", ",", "cycle_move", ")", ":", "\n", "        ", "if", "cycle_move", "<", "0", ":", "\n", "            ", "direction", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "direction", "=", "1", "\n", "", "cycle_move", "=", "abs", "(", "cycle_move", ")", "\n", "cycle_move", "=", "cycle_move", "%", "self", ".", "frames", "\n", "new_videos", "=", "torch", ".", "zeros_like", "(", "adv_videos", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "frames", ")", ":", "\n", "            ", "ori_ind", "=", "i", "\n", "new_ind", "=", "(", "ori_ind", "+", "direction", "*", "cycle_move", ")", "%", "self", ".", "frames", "\n", "new_videos", "[", ":", ",", ":", ",", "new_ind", "]", "=", "adv_videos", "[", ":", ",", ":", ",", "ori_ind", "]", "\n", "", "return", "new_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._cycle_move_remote": [[551, 567], ["abs", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "int"], "methods", ["None"], ["", "def", "_cycle_move_remote", "(", "self", ",", "adv_videos", ",", "cycle_move", ")", ":", "\n", "        ", "if", "cycle_move", "<", "0", ":", "\n", "            ", "direction", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "direction", "=", "1", "\n", "", "cycle_move", "=", "abs", "(", "cycle_move", ")", "\n", "if", "cycle_move", "==", "0", ":", "\n", "            ", "cycle_move", "=", "cycle_move", "%", "self", ".", "frames", "\n", "", "else", ":", "\n", "            ", "cycle_move", "=", "(", "cycle_move", "+", "(", "int", "(", "self", ".", "frames", "/", "2", ")", "-", "1", ")", ")", "%", "self", ".", "frames", "\n", "", "new_videos", "=", "torch", ".", "zeros_like", "(", "adv_videos", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "frames", ")", ":", "\n", "            ", "ori_ind", "=", "i", "\n", "new_ind", "=", "(", "ori_ind", "+", "direction", "*", "cycle_move", ")", "%", "self", ".", "frames", "\n", "new_videos", "[", ":", ",", ":", ",", "new_ind", "]", "=", "adv_videos", "[", ":", ",", ":", ",", "ori_ind", "]", "\n", "", "return", "new_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._cycle_move_random": [[568, 585], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "random.randint"], "methods", ["None"], ["", "def", "_cycle_move_random", "(", "self", ",", "adv_videos", ",", "cycle_move", ")", ":", "\n", "        ", "if", "cycle_move", "<", "0", ":", "\n", "            ", "direction", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "direction", "=", "1", "\n", "# cycle_move = abs(cycle_move)", "\n", "", "if", "cycle_move", "==", "0", ":", "\n", "            ", "cycle_move", "=", "cycle_move", "%", "self", ".", "frames", "\n", "", "else", ":", "\n", "            ", "cycle_move", "=", "random", ".", "randint", "(", "0", ",", "100", ")", "%", "self", ".", "frames", "\n", "# cycle_move = (cycle_move + int(self.frames/2)) % self.frames", "\n", "", "new_videos", "=", "torch", ".", "zeros_like", "(", "adv_videos", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "frames", ")", ":", "\n", "            ", "ori_ind", "=", "i", "\n", "new_ind", "=", "(", "ori_ind", "+", "direction", "*", "cycle_move", ")", "%", "self", ".", "frames", "\n", "new_videos", "[", ":", ",", ":", ",", "new_ind", "]", "=", "adv_videos", "[", ":", ",", ":", ",", "ori_ind", "]", "\n", "", "return", "new_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._exchange_move": [[586, 593], ["adv_videos.clone"], "methods", ["None"], ["", "def", "_exchange_move", "(", "self", ",", "adv_videos", ",", "exchange_lists", ")", ":", "\n", "        ", "new_videos", "=", "adv_videos", ".", "clone", "(", ")", "\n", "for", "exchange", "in", "exchange_lists", ":", "\n", "            ", "one_frame", ",", "ano_frame", "=", "exchange", "\n", "new_videos", "[", ":", ",", ":", ",", "one_frame", "]", "=", "adv_videos", "[", ":", ",", ":", ",", "ano_frame", "]", "\n", "new_videos", "[", ":", ",", ":", ",", "ano_frame", "]", "=", "adv_videos", "[", ":", ",", ":", ",", "one_frame", "]", "\n", "", "return", "new_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._get_grad": [[594, 603], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "attack_methods.TemporalTranslation_TI.model", "loss().to", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "loss"], "methods", ["None"], ["", "def", "_get_grad", "(", "self", ",", "adv_videos", ",", "labels", ",", "loss", ")", ":", "\n", "        ", "batch_size", "=", "adv_videos", ".", "shape", "[", "0", "]", "\n", "used_labels", "=", "torch", ".", "cat", "(", "[", "labels", "]", "*", "batch_size", ",", "dim", "=", "0", ")", "\n", "adv_videos", ".", "requires_grad", "=", "True", "\n", "outputs", "=", "self", ".", "model", "(", "adv_videos", ")", "\n", "cost", "=", "self", ".", "_targeted", "*", "loss", "(", "outputs", ",", "used_labels", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "cost", ",", "adv_videos", ",", "\n", "retain_graph", "=", "False", ",", "create_graph", "=", "False", ")", "[", "0", "]", "\n", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._grad_augmentation": [[604, 616], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "enumerate", "attack_methods.TemporalTranslation_TI._conv1d_frame", "attack_methods.TemporalTranslation_TI._cycle_move"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._conv1d_frame", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._cycle_move"], ["", "def", "_grad_augmentation", "(", "self", ",", "grads", ")", ":", "\n", "        ", "'''\n        Input:\n            grads: kernlen, grad.shape\n        Return \n            grad\n        '''", "\n", "diff_position_same_frame", "=", "torch", ".", "zeros_like", "(", "grads", ")", "\n", "for", "ind", ",", "cycle_move", "in", "enumerate", "(", "self", ".", "cycle_move_list", ")", ":", "\n", "            ", "diff_position_same_frame", "[", "ind", "]", "=", "self", ".", "_cycle_move", "(", "grads", "[", "ind", "]", ",", "-", "cycle_move", ")", "\n", "", "d_conv_grad", "=", "self", ".", "_conv1d_frame", "(", "diff_position_same_frame", ")", "\n", "return", "d_conv_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._initial_kernel": [[618, 624], ["numpy.linspace", "scipy.norm.pdf", "numpy.outer", "numpy.outer.sum"], "methods", ["None"], ["", "def", "_initial_kernel", "(", "self", ",", "kernlen", ",", "nsig", ")", ":", "\n", "        ", "x", "=", "np", ".", "linspace", "(", "-", "nsig", ",", "nsig", ",", "kernlen", ")", "\n", "kern1d", "=", "st", ".", "norm", ".", "pdf", "(", "x", ")", "\n", "kernel_raw", "=", "np", ".", "outer", "(", "kern1d", ",", "kern1d", ")", "\n", "kernel", "=", "kernel_raw", "/", "kernel_raw", ".", "sum", "(", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._conv2d_frame": [[625, 637], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.functional.conv2d", "torch.functional.conv2d", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "_conv2d_frame", "(", "self", ",", "grads", ")", ":", "\n", "        ", "'''\n        grads: N, C, T, H, W\n        '''", "\n", "frames", "=", "grads", ".", "shape", "[", "2", "]", "\n", "out_grads", "=", "torch", ".", "zeros_like", "(", "grads", ")", "\n", "for", "i", "in", "range", "(", "frames", ")", ":", "\n", "            ", "this_grads", "=", "grads", "[", ":", ",", ":", ",", "i", "]", "\n", "out_grad", "=", "nn", ".", "functional", ".", "conv2d", "(", "this_grads", ",", "self", ".", "stack_kernel", ",", "groups", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "7", ")", "\n", "out_grads", "[", ":", ",", ":", ",", "i", "]", "=", "out_grad", "\n", "", "out_grads", "=", "out_grads", "/", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "out_grads", ")", ",", "[", "1", ",", "2", ",", "3", "]", ",", "True", ")", "\n", "return", "out_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI.forward": [[638, 694], ["videos.to.to.to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "labels.to.to.to", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "attack_methods.TemporalTranslation_TI._transform_video", "videos.to.to.clone().detach", "time.time", "range", "videos.to.to.clone().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "math.ceil", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "attack_methods.TemporalTranslation_TI._grad_augmentation", "attack_methods.TemporalTranslation_TI._transform_video", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "attack_methods.TemporalTranslation_TI._transform_video", "print", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "videos.to.to.clone", "batch_new_videos.append", "print", "attack_methods.TemporalTranslation_TI._get_grad", "attack_methods.TemporalTranslation_TI._conv2d_frame", "torch.unsqueeze.append", "torch.unsqueeze.append", "attack_methods.norm_grads", "attack_methods.TemporalTranslation_TI.detach", "videos.to.to.clone", "attack_methods.TemporalTranslation_TI._cycle_move", "norm_grads.sign", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "time.time", "attack_methods.TemporalTranslation_TI._cycle_move_remote", "attack_methods.TemporalTranslation_TI._cycle_move_random", "min"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._transform_video", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._grad_augmentation", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._transform_video", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.Attack._transform_video", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._get_grad", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._conv2d_frame", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.norm_grads", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._cycle_move", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._cycle_move_remote", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.TemporalTranslation_TI._cycle_move_random"], ["", "def", "forward", "(", "self", ",", "videos", ",", "labels", ")", ":", "\n", "        ", "r\"\"\"\n        Overridden.\n        \"\"\"", "\n", "videos", "=", "videos", ".", "to", "(", "self", ".", "device", ")", "\n", "momentum", "=", "torch", ".", "zeros_like", "(", "videos", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "unnorm_videos", "=", "self", ".", "_transform_video", "(", "videos", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "mode", "=", "'back'", ")", "# [0, 1]", "\n", "adv_videos", "=", "videos", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "del", "videos", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "steps", ")", ":", "\n", "# obtain grads of these variants", "\n", "            ", "batch_new_videos", "=", "[", "]", "\n", "for", "cycle_move", "in", "self", ".", "cycle_move_list", ":", "\n", "                ", "if", "self", ".", "move_type", "==", "'adj'", ":", "\n", "                    ", "new_videos", "=", "self", ".", "_cycle_move", "(", "adv_videos", ",", "cycle_move", ")", "\n", "", "elif", "self", ".", "move_type", "==", "'remote'", ":", "\n", "                    ", "new_videos", "=", "self", ".", "_cycle_move_remote", "(", "adv_videos", ",", "cycle_move", ")", "\n", "", "elif", "self", ".", "move_type", "==", "'random'", ":", "\n", "                    ", "new_videos", "=", "self", ".", "_cycle_move_random", "(", "adv_videos", ",", "cycle_move", ")", "\n", "", "batch_new_videos", ".", "append", "(", "new_videos", ")", "\n", "", "batch_inps", "=", "torch", ".", "cat", "(", "batch_new_videos", ",", "dim", "=", "0", ")", "\n", "grads", "=", "[", "]", "\n", "batch_times", "=", "5", "\n", "length", "=", "len", "(", "self", ".", "cycle_move_list", ")", "\n", "if", "self", ".", "model_name", "==", "'TPNet'", ":", "\n", "                ", "batch_times", "=", "length", "\n", "print", "(", "self", ".", "model_name", ",", "batch_times", ")", "\n", "", "batch_size", "=", "math", ".", "ceil", "(", "length", "/", "batch_times", ")", "\n", "for", "i", "in", "range", "(", "batch_times", ")", ":", "\n", "                ", "grad", "=", "self", ".", "_get_grad", "(", "batch_inps", "[", "i", "*", "batch_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", ",", "length", ")", "]", ",", "labels", ",", "loss", ")", "\n", "grad", "=", "self", ".", "_conv2d_frame", "(", "grad", ")", "\n", "grads", ".", "append", "(", "grad", ")", "\n", "# grad augmentation", "\n", "", "grads", "=", "torch", ".", "cat", "(", "grads", ",", "dim", "=", "0", ")", "\n", "grads", "=", "torch", ".", "unsqueeze", "(", "grads", ",", "dim", "=", "1", ")", "\n", "grad", "=", "self", ".", "_grad_augmentation", "(", "grads", ")", "\n", "\n", "# momentum ", "\n", "if", "self", ".", "momentum", ":", "\n", "                ", "grad", "=", "norm_grads", "(", "grad", ")", "\n", "grad", "+=", "momentum", "*", "self", ".", "delay", "\n", "momentum", "=", "grad", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "", "adv_videos", "=", "self", ".", "_transform_video", "(", "adv_videos", ".", "detach", "(", ")", ",", "mode", "=", "'back'", ")", "# [0, 1]", "\n", "adv_videos", "=", "adv_videos", "+", "self", ".", "step_size", "*", "grad", ".", "sign", "(", ")", "\n", "delta", "=", "torch", ".", "clamp", "(", "adv_videos", "-", "unnorm_videos", ",", "min", "=", "-", "self", ".", "epsilon", ",", "max", "=", "self", ".", "epsilon", ")", "\n", "adv_videos", "=", "torch", ".", "clamp", "(", "unnorm_videos", "+", "delta", ",", "min", "=", "0", ",", "max", "=", "1", ")", ".", "detach", "(", ")", "\n", "adv_videos", "=", "self", ".", "_transform_video", "(", "adv_videos", ",", "mode", "=", "'forward'", ")", "# norm", "\n", "print", "(", "'now_time'", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "", "return", "adv_videos", "", "", "", ""]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.attack_methods.norm_grads": [[11, 21], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["def", "norm_grads", "(", "grads", ",", "frame_level", "=", "True", ")", ":", "\n", "# frame level norm", "\n", "# clip level norm", "\n", "    ", "assert", "len", "(", "grads", ".", "shape", ")", "==", "5", "and", "grads", ".", "shape", "[", "2", "]", "==", "32", "\n", "if", "frame_level", ":", "\n", "        ", "norm", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "grads", ")", ",", "[", "1", ",", "3", ",", "4", "]", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "norm", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "grads", ")", ",", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "keepdim", "=", "True", ")", "\n", "# norm = torch.norm(grads, dim=[1,2,3,4], p=1)", "\n", "", "return", "grads", "/", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.reference_kinetics.arg_parse": [[13, 22], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join"], "function", ["None"], ["def", "arg_parse", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--adv_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'the path of adversarial examples.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu device.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for reference (default: 16)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "adv_path", "=", "os", ".", "path", ".", "join", "(", "OPT_PATH", ",", "args", ".", "adv_path", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.reference_kinetics.accuracy": [[23, 32], ["target.size", "output.topk", "pred.t.t", "pred.t.eq", "correct[].view().float().sum", "target.view().expand_as", "correct[].view().float().sum.mul_", "torch.squeeze", "correct[].view().float", "target.view", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "1", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "# batch_size, 1", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "correct_k", "=", "correct", "[", ":", "1", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "return", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ",", "torch", ".", "squeeze", "(", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.reference_kinetics.generate_batch": [[33, 42], ["numpy.array().astype", "torch.from_numpy", "batches.append", "torch.from_numpy.append", "torch.stack", "torch.from_numpy().cuda", "int", "numpy.array", "torch.from_numpy", "file.split", "numpy.load", "os.path.join"], "function", ["None"], ["", "def", "generate_batch", "(", "batch_files", ")", ":", "\n", "    ", "batches", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "file", "in", "batch_files", ":", "\n", "        ", "batches", ".", "append", "(", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "adv_path", ",", "file", ")", ")", ")", ".", "cuda", "(", ")", ")", "\n", "labels", ".", "append", "(", "int", "(", "file", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", ")", "\n", "", "labels", "=", "np", ".", "array", "(", "labels", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "labels", ")", "\n", "return", "torch", ".", "stack", "(", "batches", ")", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.reference_kinetics.reference": [[43, 83], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "time.time", "torch.no_grad", "enumerate", "utils.AverageMeter.update", "reference_kinetics.generate_batch", "val_batch.cuda.cuda", "val_label.cuda.cuda", "val_label.cuda.size", "model", "reference_kinetics.accuracy", "list", "list", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "preds.cpu().numpy", "val_label.cuda.cpu().numpy", "prec1a.item", "val_batch.cuda.size", "print", "print", "print", "print", "time.time", "time.time", "len", "preds.cpu", "val_label.cuda.cpu"], "function", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.reference_kinetics.generate_batch", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.reference_kinetics.accuracy", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.AverageMeter.update"], ["", "def", "reference", "(", "model", ",", "files_batch", ")", ":", "\n", "    ", "data_time", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "predictions", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "batch", "in", "enumerate", "(", "files_batch", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "val_batch", ",", "val_label", "=", "generate_batch", "(", "batch", ")", "\n", "\n", "val_batch", "=", "val_batch", ".", "cuda", "(", ")", "\n", "val_label", "=", "val_label", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "val_label", ".", "size", "(", "0", ")", "\n", "outputs", "=", "model", "(", "val_batch", ")", "\n", "\n", "prec1a", ",", "preds", "=", "accuracy", "(", "outputs", ".", "data", ",", "val_label", ")", "\n", "\n", "predictions", "+=", "list", "(", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels", "+=", "list", "(", "val_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "top1", ".", "update", "(", "prec1a", ".", "item", "(", ")", ",", "val_batch", ".", "size", "(", "0", ")", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "step", "%", "5", "==", "0", ":", "\n", "                ", "print", "(", "'----validation----'", ")", "\n", "print_string", "=", "'Process: [{0}/{1}]'", ".", "format", "(", "step", "+", "1", ",", "len", "(", "files_batch", ")", ")", "\n", "print", "(", "print_string", ")", "\n", "print_string", "=", "'data_time: {data_time:.3f}, batch time: {batch_time:.3f}'", ".", "format", "(", "\n", "data_time", "=", "data_time", ".", "val", ",", "\n", "batch_time", "=", "batch_time", ".", "val", ")", "\n", "print", "(", "print_string", ")", "\n", "print_string", "=", "'top-1 accuracy: {top1_acc:.2f}%'", ".", "format", "(", "top1_acc", "=", "top1", ".", "avg", ")", "\n", "print", "(", "print_string", ")", "\n", "", "", "", "return", "predictions", ",", "labels", ",", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.AverageMeter.__init__": [[51, 53], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.AverageMeter.reset": [[54, 59], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.AverageMeter.update": [[60, 65], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.change_cfg": [[34, 41], ["None"], "function", ["None"], ["def", "change_cfg", "(", "cfg", ",", "batch_size", ")", ":", "\n", "# modify video paths and pretrain setting.", "\n", "    ", "cfg", ".", "CONFIG", ".", "DATA", ".", "VAL_DATA_PATH", "=", "Kinetic_DATA_ROOT", "\n", "cfg", ".", "CONFIG", ".", "DATA", ".", "VAL_ANNO_PATH", "=", "'./kinetics400_attack_samples.csv'", "\n", "cfg", ".", "CONFIG", ".", "MODEL", ".", "PRETRAINED", "=", "True", "\n", "cfg", ".", "CONFIG", ".", "VAL", ".", "BATCH_SIZE", "=", "batch_size", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.get_cfg_custom": [[42, 47], ["gluoncv.torch.engine.config.get_cfg_defaults", "change_cfg.merge_from_file", "utils.change_cfg"], "function", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.None.utils.change_cfg"], ["", "def", "get_cfg_custom", "(", "cfg_path", ",", "batch_size", "=", "16", ")", ":", "\n", "    ", "cfg", "=", "get_cfg_defaults", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "cfg_path", ")", "\n", "cfg", "=", "change_cfg", "(", "cfg", ",", "batch_size", ")", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.LoopPadding.__init__": [[29, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.LoopPadding.__call__": [[32, 41], ["out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "out", "=", "frame_indices", "[", "1", ":", "self", ".", "size", "+", "1", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.TemporalBeginCrop.__init__": [[51, 53], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.TemporalBeginCrop.__call__": [[54, 62], ["out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "out", "=", "frame_indices", "[", "1", ":", "self", ".", "size", "+", "1", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.TemporalCenterCrop.__init__": [[72, 74], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.TemporalCenterCrop.__call__": [[75, 95], ["max", "min", "len", "len", "out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_indices (list): frame indices to be cropped.\n        Returns:\n            list: Cropped frame indices.\n        \"\"\"", "\n", "\n", "center_index", "=", "len", "(", "frame_indices", ")", "//", "2", "\n", "begin_index", "=", "max", "(", "1", ",", "center_index", "-", "(", "self", ".", "size", "//", "2", ")", ")", "\n", "end_index", "=", "min", "(", "begin_index", "+", "self", ".", "size", ",", "len", "(", "frame_indices", ")", ")", "\n", "\n", "out", "=", "frame_indices", "[", "begin_index", ":", "end_index", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.TemporalRandomCrop.__init__": [[105, 107], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.TemporalRandomCrop.__call__": [[108, 129], ["max", "random.seed", "random.randint", "min", "len", "out.append", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_indices (list): frame indices to be cropped.\n        Returns:\n            list: Cropped frame indices.\n        \"\"\"", "\n", "\n", "rand_end", "=", "max", "(", "1", ",", "len", "(", "frame_indices", ")", "-", "self", ".", "size", "-", "1", ")", "\n", "random", ".", "seed", "(", "1024", ")", "\n", "begin_index", "=", "random", ".", "randint", "(", "0", ",", "rand_end", ")", "\n", "end_index", "=", "min", "(", "begin_index", "+", "self", ".", "size", ",", "len", "(", "frame_indices", ")", ")", "\n", "\n", "out", "=", "frame_indices", "[", "begin_index", ":", "end_index", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.spatial_Compose.__init__": [[153, 155], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.spatial_Compose.__call__": [[156, 160], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", "=", "t", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.spatial_Compose.randomize_parameters": [[161, 164], ["t.randomize_parameters"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.MultiScaleRandomCrop.randomize_parameters"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "t", ".", "randomize_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.ToTensor.__init__": [[172, 174], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "norm_value", "=", "255", ")", ":", "\n", "        ", "self", ".", "norm_value", "=", "norm_value", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.ToTensor.__call__": [[175, 216], ["isinstance", "torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "torch.from_numpy", "torch.ByteTensor.float().div", "isinstance", "numpy.zeros", "pic.copyto", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor.float().div", "pic.transpose", "numpy.array", "torch.from_numpy", "torch.ByteTensor", "len", "torch.ByteTensor.transpose().transpose", "torch.ByteTensor.float", "numpy.array", "torch.ByteStorage.from_buffer", "torch.ByteTensor.float", "pic.tobytes", "torch.ByteTensor.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pic (PIL.Image or numpy.ndarray): Image to be converted to tensor.\n        Returns:\n            Tensor: Converted image.\n        \"\"\"", "\n", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "# backward compatibility", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "self", ".", "norm_value", ")", "\n", "\n", "", "if", "accimage", "is", "not", "None", "and", "isinstance", "(", "pic", ",", "accimage", ".", "Image", ")", ":", "\n", "            ", "nppic", "=", "np", ".", "zeros", "(", "\n", "[", "pic", ".", "channels", ",", "pic", ".", "height", ",", "pic", ".", "width", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pic", ".", "copyto", "(", "nppic", ")", "\n", "return", "torch", ".", "from_numpy", "(", "nppic", ")", "\n", "\n", "# handle PIL Image", "\n", "", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "            ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "            ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "            ", "return", "img", ".", "float", "(", ")", ".", "div", "(", "self", ".", "norm_value", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.ToTensor.randomize_parameters": [[217, 219], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.Normalize.__init__": [[232, 235], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.Normalize.__call__": [[236, 247], ["zip", "t.sub_().div_", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.Normalize.randomize_parameters": [[248, 250], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.Scale.__init__": [[264, 270], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "assert", "isinstance", "(", "size", ",", "\n", "int", ")", "or", "(", "isinstance", "(", "size", ",", "collections", ".", "Iterable", ")", "and", "\n", "len", "(", "size", ")", "==", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.Scale.__call__": [[271, 292], ["isinstance", "img.resize", "int", "img.resize", "int", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be scaled.\n        Returns:\n            PIL.Image: Rescaled image.\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "int", ")", ":", "\n", "            ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "                ", "return", "img", "\n", "", "if", "w", "<", "h", ":", "\n", "                ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "else", ":", "\n", "                ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.Scale.randomize_parameters": [[293, 295], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.CenterCrop.__init__": [[305, 310], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.CenterCrop.__call__": [[311, 323], ["int", "int", "img.crop", "round", "round"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.CenterCrop.randomize_parameters": [[324, 326], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.CornerCrop.__init__": [[330, 338], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_position", "=", "None", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "if", "crop_position", "is", "None", ":", "\n", "            ", "self", ".", "randomize", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "randomize", "=", "False", "\n", "", "self", ".", "crop_position", "=", "crop_position", "\n", "self", ".", "crop_positions", "=", "[", "'c'", ",", "'tl'", ",", "'tr'", ",", "'bl'", ",", "'br'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.CornerCrop.__call__": [[339, 373], ["img.crop.crop.crop", "int", "int", "round", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "if", "self", ".", "crop_position", "==", "'c'", ":", "\n", "            ", "th", ",", "tw", "=", "(", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "x1", "=", "int", "(", "round", "(", "(", "image_width", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "image_height", "-", "th", ")", "/", "2.", ")", ")", "\n", "x2", "=", "x1", "+", "tw", "\n", "y2", "=", "y1", "+", "th", "\n", "", "elif", "self", ".", "crop_position", "==", "'tl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "self", ".", "size", "\n", "y2", "=", "self", ".", "size", "\n", "", "elif", "self", ".", "crop_position", "==", "'tr'", ":", "\n", "            ", "x1", "=", "image_width", "-", "self", ".", "size", "\n", "y1", "=", "0", "\n", "x2", "=", "image_width", "\n", "y2", "=", "self", ".", "size", "\n", "", "elif", "self", ".", "crop_position", "==", "'bl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "image_height", "-", "self", ".", "size", "\n", "x2", "=", "self", ".", "size", "\n", "y2", "=", "image_height", "\n", "", "elif", "self", ".", "crop_position", "==", "'br'", ":", "\n", "            ", "x1", "=", "image_width", "-", "self", ".", "size", "\n", "y1", "=", "image_height", "-", "self", ".", "size", "\n", "x2", "=", "image_width", "\n", "y2", "=", "image_height", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.CornerCrop.randomize_parameters": [[374, 380], ["random.seed", "random.randint", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "randomize", ":", "\n", "            ", "random", ".", "seed", "(", "1024", ")", "\n", "self", ".", "crop_position", "=", "self", ".", "crop_positions", "[", "random", ".", "randint", "(", "\n", "0", ",", "\n", "len", "(", "self", ".", "crop_positions", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.RandomHorizontalFlip.__call__": [[385, 395], ["img.transpose"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "if", "self", ".", "p", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.RandomHorizontalFlip.randomize_parameters": [[396, 399], ["random.seed", "random.random"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "random", ".", "seed", "(", "1024", ")", "\n", "self", ".", "p", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.MultiScaleCornerCrop.__init__": [[412, 422], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "scales", ",", "\n", "size", ",", "\n", "interpolation", "=", "Image", ".", "BILINEAR", ",", "\n", "crop_positions", "=", "[", "'c'", ",", "'tl'", ",", "'tr'", ",", "'bl'", ",", "'br'", "]", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n", "self", ".", "crop_positions", "=", "crop_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.MultiScaleCornerCrop.__call__": [[423, 462], ["min", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "if", "self", ".", "crop_position", "==", "'c'", ":", "\n", "            ", "center_x", "=", "image_width", "//", "2", "\n", "center_y", "=", "image_height", "//", "2", "\n", "box_half", "=", "crop_size", "//", "2", "\n", "x1", "=", "center_x", "-", "box_half", "\n", "y1", "=", "center_y", "-", "box_half", "\n", "x2", "=", "center_x", "+", "box_half", "\n", "y2", "=", "center_y", "+", "box_half", "\n", "", "elif", "self", ".", "crop_position", "==", "'tl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'tr'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "0", "\n", "x2", "=", "image_width", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'bl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "image_height", "\n", "", "elif", "self", ".", "crop_position", "==", "'br'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "image_width", "\n", "y2", "=", "image_height", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.MultiScaleCornerCrop.randomize_parameters": [[463, 470], ["random.seed", "random.seed", "random.randint", "random.randint", "len", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "random", ".", "seed", "(", "1024", ")", "\n", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "random", ".", "seed", "(", "1024", ")", "\n", "self", ".", "crop_position", "=", "self", ".", "crop_positions", "[", "random", ".", "randint", "(", "\n", "0", ",", "\n", "len", "(", "self", ".", "crop_positions", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.MultiScaleRandomCrop.__init__": [[477, 481], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scales", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.MultiScaleRandomCrop.__call__": [[482, 497], ["min", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "x1", "=", "self", ".", "tl_x", "*", "(", "image_width", "-", "crop_size", ")", "\n", "y1", "=", "self", ".", "tl_y", "*", "(", "image_height", "-", "crop_size", ")", "\n", "x2", "=", "x1", "+", "crop_size", "\n", "y2", "=", "y1", "+", "crop_size", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.MultiScaleRandomCrop.randomize_parameters": [[498, 504], ["random.seed", "random.random", "random.seed", "random.random", "random.randint", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "random", ".", "seed", "(", "1024", ")", "\n", "self", ".", "tl_x", "=", "random", ".", "random", "(", ")", "\n", "random", ".", "seed", "(", "1024", ")", "\n", "self", ".", "tl_y", "=", "random", ".", "random", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.attack_ucf101.__init__": [[57, 70], ["ucf101.attack_ucf101._make_dataset", "get_loader", "print", "open", "pickle.load", "ucf101.attack_ucf101.new_clips.append", "len"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.attack_ucf101._make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "setting_path", ",", "idx_path", ",", "spatial_transform", "=", "None", ",", "temporal_transform", "=", "None", ",", "get_loader", "=", "get_default_video_loader", ")", ":", "\n", "        ", "setting", "=", "setting_path", "\n", "self", ".", "clips", "=", "self", ".", "_make_dataset", "(", "setting", ")", "\n", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "temporal_transform", "=", "temporal_transform", "\n", "self", ".", "loader", "=", "get_loader", "(", ")", "\n", "with", "open", "(", "idx_path", ",", "'rb'", ")", "as", "ipt", ":", "\n", "            ", "used_idxs", "=", "pkl", ".", "load", "(", "ipt", ")", "\n", "", "self", ".", "new_clips", "=", "[", "]", "\n", "for", "i", "in", "used_idxs", ":", "\n", "            ", "self", ".", "new_clips", ".", "append", "(", "self", ".", "clips", "[", "i", "]", ")", "\n", "", "self", ".", "clips", "=", "self", ".", "new_clips", "\n", "print", "(", "'length'", ",", "len", "(", "self", ".", "clips", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.attack_ucf101.__getitem__": [[71, 87], ["list", "ucf101.attack_ucf101.loader", "torch.stack().permute", "range", "ucf101.attack_ucf101.temporal_transform", "ucf101.attack_ucf101.spatial_transform.randomize_parameters", "ucf101.attack_ucf101.spatial_transform", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.transforms.MultiScaleRandomCrop.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "directory", ",", "duration", ",", "target", "=", "self", ".", "clips", "[", "index", "]", "\n", "frame_indices", "=", "list", "(", "range", "(", "1", ",", "duration", "+", "1", ")", ")", "\n", "\n", "if", "self", ".", "temporal_transform", "is", "not", "None", ":", "\n", "            ", "frame_indices", "=", "self", ".", "temporal_transform", "(", "frame_indices", ")", "\n", "\n", "", "clip", "=", "self", ".", "loader", "(", "directory", ",", "frame_indices", ")", "\n", "\n", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "\n", "", "clip", "=", "torch", ".", "stack", "(", "clip", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "return", "clip", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.attack_ucf101._make_dataset": [[88, 100], ["pandas.read_csv", "pandas.read_csv.iterrows", "os.path.exists", "RuntimeError", "os.path.join", "int", "int", "clips.append", "row[].split"], "methods", ["None"], ["", "def", "_make_dataset", "(", "self", ",", "setting", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "setting", ")", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Setting file %s doesn't exist. Check opt.train-list and opt.val-list. \"", "%", "(", "setting", ")", ")", ")", "\n", "", "clips", "=", "[", "]", "\n", "df", "=", "pd", ".", "read_csv", "(", "setting", ")", "\n", "for", "idx", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "            ", "clip_path", "=", "os", ".", "path", ".", "join", "(", "UCF_DATA_ROOT", ",", "row", "[", "'path'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "duration", "=", "int", "(", "row", "[", "'duration'", "]", ")", "\n", "target", "=", "int", "(", "row", "[", "'target'", "]", ")", "\n", "item", "=", "(", "clip_path", ",", "duration", ",", "target", ")", "\n", "clips", ".", "append", "(", "item", ")", "\n", "", "return", "clips", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.attack_ucf101.__len__": [[101, 103], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "clips", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.pil_loader": [[15, 20], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.accimage_loader": [[22, 29], ["accimage.Image", "ucf101.pil_loader"], "function", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.get_default_image_loader": [[31, 37], ["get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.video_loader": [[39, 49], ["os.path.join", "os.path.exists", "video.append", "image_loader"], "function", ["None"], ["", "", "def", "video_loader", "(", "video_dir_path", ",", "frame_indices", ",", "image_loader", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "for", "i", "in", "frame_indices", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'image_{:05d}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "video", ".", "append", "(", "image_loader", "(", "image_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "video", "\n", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.get_default_video_loader": [[51, 54], ["ucf101.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.test_transform": [[104, 118], ["transforms.Normalize", "transforms.spatial_Compose", "transforms.LoopPadding", "float", "scale_ratios.split", "transforms.Scale", "transforms.CornerCrop", "transforms.ToTensor", "int"], "function", ["None"], ["", "", "def", "test_transform", "(", ")", ":", "\n", "    ", "input_size", "=", "224", "\n", "scale_ratios", "=", "'1.0, 0.8'", "\n", "scale_ratios", "=", "[", "float", "(", "i", ")", "for", "i", "in", "scale_ratios", ".", "split", "(", "','", ")", "]", "\n", "default_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "default_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "norm_method", "=", "Normalize", "(", "default_mean", ",", "default_std", ")", "\n", "spatial_transform", "=", "spatial_Compose", "(", "[", "\n", "Scale", "(", "int", "(", "input_size", "/", "1.0", ")", ")", ",", "\n", "CornerCrop", "(", "input_size", ",", "'c'", ")", ",", "\n", "ToTensor", "(", ")", ",", "norm_method", "\n", "]", ")", "\n", "temporal_transform", "=", "LoopPadding", "(", "32", ")", "\n", "return", "spatial_transform", ",", "temporal_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.get_dataset": [[119, 126], ["ucf101.test_transform", "ucf101.attack_ucf101", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.ucf101.test_transform"], ["", "def", "get_dataset", "(", "setting_path", ",", "idx_path", ",", "test_batch_size", ",", "loader", "=", "True", ")", ":", "\n", "    ", "test_spa_trans", ",", "test_temp_trans", "=", "test_transform", "(", ")", "\n", "test_dataset", "=", "attack_ucf101", "(", "setting_path", ",", "idx_path", ",", "spatial_transform", "=", "test_spa_trans", ",", "temporal_transform", "=", "test_temp_trans", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "9", ",", "pin_memory", "=", "True", ")", "\n", "return", "val_loader", "", "", ""]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.__init__": [[18, 110], ["pd.read_csv", "cleaned[].values.tolist", "cleaned[].values.tolist", "cleaned[].values.tolist", "ImportError", "gluoncv.torch.data.video_transforms.Compose", "gluoncv.torch.data.multiGridHelper", "range", "gluoncv.torch.data.video_transforms.Compose", "gluoncv.torch.data.video_transforms.Compose", "range", "kinetics.VideoClsDataset.data_transform.append", "gluoncv.torch.data.video_transforms.RandomHorizontalFlip", "gluoncv.torch.data.volume_transforms.ClipToTensor", "gluoncv.torch.data.video_transforms.Normalize", "gluoncv.torch.data.video_transforms.Compose", "gluoncv.torch.data.video_transforms.Compose", "range", "kinetics.VideoClsDataset.mg_helper.get_resize", "tmp.append", "gluoncv.torch.data.video_transforms.Resize", "gluoncv.torch.data.video_transforms.RandomResize", "gluoncv.torch.data.video_transforms.RandomCrop", "gluoncv.torch.data.video_transforms.Resize", "gluoncv.torch.data.video_transforms.CenterCrop", "gluoncv.torch.data.volume_transforms.ClipToTensor", "gluoncv.torch.data.video_transforms.Normalize", "range", "gluoncv.torch.data.video_transforms.Compose", "int", "gluoncv.torch.data.video_transforms.Resize", "gluoncv.torch.data.volume_transforms.ClipToTensor", "gluoncv.torch.data.video_transforms.Normalize", "range", "len", "kinetics.VideoClsDataset.test_label_array.append", "kinetics.VideoClsDataset.test_dataset.append", "kinetics.VideoClsDataset.test_seg.append", "gluoncv.torch.data.video_transforms.Resize", "gluoncv.torch.data.video_transforms.RandomResize", "gluoncv.torch.data.video_transforms.RandomCrop", "int", "int", "int", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "anno_path", ",", "data_path", ",", "mode", "=", "'train'", ",", "clip_len", "=", "8", ",", "\n", "frame_sample_rate", "=", "2", ",", "crop_size", "=", "224", ",", "short_side_size", "=", "256", ",", "\n", "new_height", "=", "256", ",", "new_width", "=", "340", ",", "keep_aspect_ratio", "=", "False", ",", "\n", "num_segment", "=", "1", ",", "num_crop", "=", "1", ",", "test_num_segment", "=", "10", ",", "test_num_crop", "=", "3", ",", "\n", "use_multigrid", "=", "False", ")", ":", "\n", "        ", "self", ".", "anno_path", "=", "anno_path", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "frame_sample_rate", "=", "frame_sample_rate", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "short_side_size", "=", "short_side_size", "\n", "self", ".", "new_height", "=", "new_height", "\n", "self", ".", "new_width", "=", "new_width", "\n", "self", ".", "keep_aspect_ratio", "=", "keep_aspect_ratio", "\n", "self", ".", "num_segment", "=", "num_segment", "\n", "self", ".", "test_num_segment", "=", "test_num_segment", "\n", "self", ".", "num_crop", "=", "num_crop", "\n", "self", ".", "test_num_crop", "=", "test_num_crop", "\n", "self", ".", "use_multigrid", "=", "use_multigrid", "and", "(", "mode", "==", "'train'", ")", "\n", "if", "VideoReader", "is", "None", ":", "\n", "            ", "raise", "ImportError", "(", "\"Unable to import `decord` which is required to read videos.\"", ")", "\n", "\n", "", "import", "pandas", "as", "pd", "\n", "# cleaned = pd.read_csv(self.anno_path, header=None, delimiter=' ')", "\n", "# self.dataset_samples = list(cleaned.values[:, 0])", "\n", "# self.label_array = list(cleaned.values[:, 2])", "\n", "cleaned", "=", "pd", ".", "read_csv", "(", "self", ".", "anno_path", ")", "\n", "self", ".", "dataset_samples", "=", "cleaned", "[", "'path'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "self", ".", "label_array", "=", "cleaned", "[", "'gt_label'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "self", ".", "clip_inds", "=", "cleaned", "[", "'clip_index'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "\n", "if", "(", "mode", "==", "'train'", ")", ":", "\n", "            ", "if", "self", ".", "use_multigrid", ":", "\n", "                ", "self", ".", "mg_helper", "=", "multiGridHelper", "(", ")", "\n", "self", ".", "data_transform", "=", "[", "]", "\n", "for", "alpha", "in", "range", "(", "self", ".", "mg_helper", ".", "mod_long", ")", ":", "\n", "                    ", "tmp", "=", "[", "]", "\n", "for", "beta", "in", "range", "(", "self", ".", "mg_helper", ".", "mod_short", ")", ":", "\n", "                        ", "info", "=", "self", ".", "mg_helper", ".", "get_resize", "(", "alpha", ",", "beta", ")", "\n", "scale_s", "=", "info", "[", "1", "]", "\n", "tmp", ".", "append", "(", "video_transforms", ".", "Compose", "(", "[", "\n", "video_transforms", ".", "Resize", "(", "int", "(", "self", ".", "short_side_size", "/", "scale_s", ")", ",", "\n", "interpolation", "=", "'bilinear'", ")", ",", "\n", "# TODO: multiscale corner cropping", "\n", "video_transforms", ".", "RandomResize", "(", "ratio", "=", "(", "1", ",", "1.25", ")", ",", "\n", "interpolation", "=", "'bilinear'", ")", ",", "\n", "video_transforms", ".", "RandomCrop", "(", "size", "=", "(", "int", "(", "self", ".", "crop_size", "/", "scale_s", ")", ",", "\n", "int", "(", "self", ".", "crop_size", "/", "scale_s", ")", ")", ")", "]", ")", ")", "\n", "", "self", ".", "data_transform", ".", "append", "(", "tmp", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "data_transform", "=", "video_transforms", ".", "Compose", "(", "[", "\n", "video_transforms", ".", "Resize", "(", "int", "(", "self", ".", "short_side_size", ")", ",", "\n", "interpolation", "=", "'bilinear'", ")", ",", "\n", "video_transforms", ".", "RandomResize", "(", "ratio", "=", "(", "1", ",", "1.25", ")", ",", "\n", "interpolation", "=", "'bilinear'", ")", ",", "\n", "video_transforms", ".", "RandomCrop", "(", "size", "=", "(", "int", "(", "self", ".", "crop_size", ")", ",", "\n", "int", "(", "self", ".", "crop_size", ")", ")", ")", "]", ")", "\n", "\n", "", "self", ".", "data_transform_after", "=", "video_transforms", ".", "Compose", "(", "[", "\n", "video_transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "volume_transforms", ".", "ClipToTensor", "(", ")", ",", "\n", "video_transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "", "elif", "(", "mode", "==", "'validation'", ")", ":", "\n", "            ", "self", ".", "data_transform", "=", "video_transforms", ".", "Compose", "(", "[", "\n", "video_transforms", ".", "Resize", "(", "self", ".", "short_side_size", ",", "interpolation", "=", "'bilinear'", ")", ",", "\n", "video_transforms", ".", "CenterCrop", "(", "size", "=", "(", "self", ".", "crop_size", ",", "self", ".", "crop_size", ")", ")", ",", "\n", "volume_transforms", ".", "ClipToTensor", "(", ")", ",", "\n", "video_transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "data_resize", "=", "video_transforms", ".", "Compose", "(", "[", "\n", "video_transforms", ".", "Resize", "(", "size", "=", "(", "short_side_size", ")", ",", "interpolation", "=", "'bilinear'", ")", "\n", "]", ")", "\n", "self", ".", "data_transform", "=", "video_transforms", ".", "Compose", "(", "[", "\n", "volume_transforms", ".", "ClipToTensor", "(", ")", ",", "\n", "video_transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "self", ".", "test_seg", "=", "[", "]", "\n", "self", ".", "test_dataset", "=", "[", "]", "\n", "self", ".", "test_label_array", "=", "[", "]", "\n", "for", "ck", "in", "range", "(", "self", ".", "test_num_segment", ")", ":", "\n", "                ", "for", "cp", "in", "range", "(", "self", ".", "test_num_crop", ")", ":", "\n", "                    ", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "label_array", ")", ")", ":", "\n", "                        ", "sample_label", "=", "self", ".", "label_array", "[", "idx", "]", "\n", "self", ".", "test_label_array", ".", "append", "(", "sample_label", ")", "\n", "self", ".", "test_dataset", ".", "append", "(", "self", ".", "dataset_samples", "[", "idx", "]", ")", "\n", "self", ".", "test_seg", ".", "append", "(", "(", "ck", ",", "cp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.__getitem__": [[111, 184], ["kinetics.VideoClsDataset.loadvideo_decord", "data_transform_func", "kinetics.VideoClsDataset.data_transform_after", "kinetics.VideoClsDataset.mg_helper.get_resize", "len", "kinetics.VideoClsDataset.loadvideo_decord", "kinetics.VideoClsDataset.data_transform", "len", "warnings.warn", "numpy.random.randint", "kinetics.VideoClsDataset.loadvideo_decord", "[].split", "len", "kinetics.VideoClsDataset.loadvideo_decord", "kinetics.VideoClsDataset.data_resize", "isinstance", "max", "int", "int", "kinetics.VideoClsDataset.data_transform", "NameError", "kinetics.VideoClsDataset.__len__", "len", "warnings.warn", "numpy.random.randint", "kinetics.VideoClsDataset.loadvideo_decord", "sample.split", "len", "warnings.warn", "numpy.random.randint", "kinetics.VideoClsDataset.loadvideo_decord", "numpy.stack", "kinetics.VideoClsDataset.__len__", "kinetics.VideoClsDataset.__len__", "[].split", "sample.split", "str", "max", "sample.split"], "methods", ["home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.loadvideo_decord", "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.loadvideo_decord", "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.loadvideo_decord", "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.loadvideo_decord", "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.__len__", "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.loadvideo_decord", "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.loadvideo_decord", "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.__len__", "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.__len__"], ["", "", "", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "if", "self", ".", "use_multigrid", "is", "True", ":", "\n", "                ", "index", ",", "alpha", ",", "beta", "=", "index", "\n", "info", "=", "self", ".", "mg_helper", ".", "get_resize", "(", "alpha", ",", "beta", ")", "\n", "scale_t", "=", "info", "[", "0", "]", "\n", "data_transform_func", "=", "self", ".", "data_transform", "[", "alpha", "]", "[", "beta", "]", "\n", "", "else", ":", "\n", "                ", "scale_t", "=", "1", "\n", "data_transform_func", "=", "self", ".", "data_transform", "\n", "\n", "", "sample", "=", "self", ".", "dataset_samples", "[", "index", "]", "\n", "buffer", "=", "self", ".", "loadvideo_decord", "(", "sample", ",", "sample_rate_scale", "=", "scale_t", ")", "\n", "if", "len", "(", "buffer", ")", "==", "0", ":", "\n", "                ", "while", "len", "(", "buffer", ")", "==", "0", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\"video {} not correctly loaded during training\"", ".", "format", "(", "sample", ")", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "__len__", "(", ")", ")", "\n", "sample", "=", "self", ".", "dataset_samples", "[", "index", "]", "\n", "buffer", "=", "self", ".", "loadvideo_decord", "(", "sample", ",", "sample_rate_scale", "=", "scale_t", ")", "\n", "\n", "", "", "buffer", "=", "data_transform_func", "(", "buffer", ")", "\n", "buffer", "=", "self", ".", "data_transform_after", "(", "buffer", ")", "\n", "return", "buffer", ",", "self", ".", "label_array", "[", "index", "]", ",", "sample", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'validation'", ":", "\n", "            ", "sample", "=", "self", ".", "dataset_samples", "[", "index", "]", "\n", "clip_ind", "=", "self", ".", "clip_inds", "[", "index", "]", "\n", "buffer", "=", "self", ".", "loadvideo_decord", "(", "sample", ",", "clip_ind", ")", "\n", "if", "len", "(", "buffer", ")", "==", "0", ":", "\n", "                ", "while", "len", "(", "buffer", ")", "==", "0", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\"video {} not correctly loaded during validation\"", ".", "format", "(", "sample", ")", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "__len__", "(", ")", ")", "\n", "sample", "=", "self", ".", "dataset_samples", "[", "index", "]", "\n", "buffer", "=", "self", ".", "loadvideo_decord", "(", "sample", ")", "\n", "", "", "buffer", "=", "self", ".", "data_transform", "(", "buffer", ")", "\n", "# return buffer, self.label_array[index], sample.split(\"/\")[-1].split(\".\")[0]", "\n", "return", "buffer", ",", "self", ".", "label_array", "[", "index", "]", ",", "sample", ".", "split", "(", "\".\"", ")", "[", "0", "]", ",", "clip_ind", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "sample", "=", "self", ".", "test_dataset", "[", "index", "]", "\n", "chunk_nb", ",", "split_nb", "=", "self", ".", "test_seg", "[", "index", "]", "\n", "buffer", "=", "self", ".", "loadvideo_decord", "(", "sample", ")", "\n", "\n", "while", "len", "(", "buffer", ")", "==", "0", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"video {}, temporal {}, spatial {} not found during testing\"", ".", "format", "(", "str", "(", "self", ".", "test_dataset", "[", "index", "]", ")", ",", "chunk_nb", ",", "split_nb", ")", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "__len__", "(", ")", ")", "\n", "sample", "=", "self", ".", "test_dataset", "[", "index", "]", "\n", "chunk_nb", ",", "split_nb", "=", "self", ".", "test_seg", "[", "index", "]", "\n", "buffer", "=", "self", ".", "loadvideo_decord", "(", "sample", ")", "\n", "\n", "", "buffer", "=", "self", ".", "data_resize", "(", "buffer", ")", "\n", "if", "isinstance", "(", "buffer", ",", "list", ")", ":", "\n", "                ", "buffer", "=", "np", ".", "stack", "(", "buffer", ",", "0", ")", "\n", "\n", "", "spatial_step", "=", "1.0", "*", "(", "max", "(", "buffer", ".", "shape", "[", "1", "]", ",", "buffer", ".", "shape", "[", "2", "]", ")", "-", "self", ".", "short_side_size", ")", "/", "(", "self", ".", "test_num_crop", "-", "1", ")", "\n", "temporal_step", "=", "max", "(", "1.0", "*", "(", "buffer", ".", "shape", "[", "0", "]", "-", "self", ".", "clip_len", ")", "/", "(", "self", ".", "test_num_segment", "-", "1", ")", ",", "0", ")", "\n", "temporal_start", "=", "int", "(", "chunk_nb", "*", "temporal_step", ")", "\n", "spatial_start", "=", "int", "(", "split_nb", "*", "spatial_step", ")", "\n", "if", "buffer", ".", "shape", "[", "1", "]", ">=", "buffer", ".", "shape", "[", "2", "]", ":", "\n", "                ", "buffer", "=", "buffer", "[", "temporal_start", ":", "temporal_start", "+", "self", ".", "clip_len", ",", "spatial_start", ":", "spatial_start", "+", "self", ".", "short_side_size", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "buffer", "=", "buffer", "[", "temporal_start", ":", "temporal_start", "+", "self", ".", "clip_len", ",", ":", ",", "spatial_start", ":", "spatial_start", "+", "self", ".", "short_side_size", ",", ":", "]", "\n", "\n", "", "buffer", "=", "self", ".", "data_transform", "(", "buffer", ")", "\n", "return", "buffer", ",", "self", ".", "test_label_array", "[", "index", "]", ",", "sample", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ",", "chunk_nb", ",", "split_nb", "\n", "", "else", ":", "\n", "            ", "raise", "NameError", "(", "'mode {} unkown'", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.loadvideo_decord": [[185, 241], ["os.path.join", "int", "range", "VideoReader.seek", "VideoReader.get_batch().asnumpy", "sample.replace().replace().replace", "os.path.exists", "os.path.getsize", "print", "VideoReader.seek", "VideoReader.get_batch().asnumpy", "len", "all_index.extend", "os.path.getsize", "VideoReader", "VideoReader", "print", "len", "all_index.append", "numpy.linspace", "numpy.concatenate", "numpy.clip().astype", "numpy.linspace", "numpy.clip().astype", "list", "int", "VideoReader.get_batch", "sample.replace().replace", "range", "VideoReader.get_batch", "numpy.random.seed", "numpy.random.randint", "cpu", "cpu", "len", "numpy.clip", "numpy.clip", "sample.replace", "numpy.ones"], "methods", ["None"], ["", "", "def", "loadvideo_decord", "(", "self", ",", "sample", ",", "clip_ind", ",", "sample_rate_scale", "=", "1", ")", ":", "\n", "        ", "\"\"\"Load video content using Decord\"\"\"", "\n", "# pylint: disable=line-too-long, bare-except, unnecessary-comprehension", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "sample", ".", "replace", "(", "' '", ",", "'\\ '", ")", ".", "replace", "(", "'('", ",", "'\\('", ")", ".", "replace", "(", "')'", ",", "'\\)'", ")", ")", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "fname", ")", ")", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "# avoid hanging issue", "\n", "", "if", "os", ".", "path", ".", "getsize", "(", "fname", ")", "<", "1", "*", "1024", ":", "\n", "            ", "print", "(", "'SKIP: '", ",", "fname", ",", "\" - \"", ",", "os", ".", "path", ".", "getsize", "(", "fname", ")", ")", "\n", "return", "[", "]", "\n", "", "try", ":", "\n", "            ", "if", "self", ".", "keep_aspect_ratio", ":", "\n", "                ", "vr", "=", "VideoReader", "(", "fname", ",", "num_threads", "=", "1", ",", "ctx", "=", "cpu", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "vr", "=", "VideoReader", "(", "fname", ",", "width", "=", "self", ".", "new_width", ",", "height", "=", "self", ".", "new_height", ",", "\n", "num_threads", "=", "1", ",", "ctx", "=", "cpu", "(", "0", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "\"video cannot be loaded by decord: \"", ",", "fname", ")", "\n", "return", "[", "]", "\n", "\n", "", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "all_index", "=", "[", "x", "for", "x", "in", "range", "(", "0", ",", "len", "(", "vr", ")", ",", "self", ".", "frame_sample_rate", ")", "]", "\n", "while", "len", "(", "all_index", ")", "<", "self", ".", "clip_len", ":", "\n", "                ", "all_index", ".", "append", "(", "all_index", "[", "-", "1", "]", ")", "\n", "", "vr", ".", "seek", "(", "0", ")", "\n", "buffer", "=", "vr", ".", "get_batch", "(", "all_index", ")", ".", "asnumpy", "(", ")", "\n", "return", "buffer", "\n", "\n", "# handle temporal segments", "\n", "", "converted_len", "=", "int", "(", "self", ".", "clip_len", "*", "self", ".", "frame_sample_rate", ")", "\n", "seg_len", "=", "len", "(", "vr", ")", "//", "self", ".", "num_segment", "\n", "\n", "all_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_segment", ")", ":", "\n", "            ", "if", "seg_len", "<=", "converted_len", ":", "\n", "                ", "index", "=", "np", ".", "linspace", "(", "0", ",", "seg_len", ",", "num", "=", "seg_len", "//", "self", ".", "frame_sample_rate", ")", "\n", "index", "=", "np", ".", "concatenate", "(", "(", "index", ",", "np", ".", "ones", "(", "self", ".", "clip_len", "-", "seg_len", "//", "self", ".", "frame_sample_rate", ")", "*", "seg_len", ")", ")", "\n", "index", "=", "np", ".", "clip", "(", "index", ",", "0", ",", "seg_len", "-", "1", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "# end_idx = np.random.randint(converted_len, seg_len)", "\n", "                ", "if", "clip_ind", "==", "-", "1", ":", "\n", "                    ", "end_idx", "=", "seg_len", "-", "1", "\n", "", "else", ":", "\n", "                    ", "np", ".", "random", ".", "seed", "(", "clip_ind", ")", "\n", "end_idx", "=", "np", ".", "random", ".", "randint", "(", "converted_len", ",", "seg_len", ")", "\n", "", "str_idx", "=", "end_idx", "-", "converted_len", "\n", "index", "=", "np", ".", "linspace", "(", "str_idx", ",", "end_idx", ",", "num", "=", "self", ".", "clip_len", ")", "\n", "index", "=", "np", ".", "clip", "(", "index", ",", "str_idx", ",", "end_idx", "-", "1", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "", "index", "=", "index", "+", "i", "*", "seg_len", "\n", "all_index", ".", "extend", "(", "list", "(", "index", ")", ")", "\n", "\n", "", "all_index", "=", "all_index", "[", ":", ":", "int", "(", "sample_rate_scale", ")", "]", "\n", "vr", ".", "seek", "(", "0", ")", "\n", "buffer", "=", "vr", ".", "get_batch", "(", "all_index", ")", ".", "asnumpy", "(", ")", "\n", "return", "buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.VideoClsDataset.__len__": [[242, 247], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "!=", "'test'", ":", "\n", "            ", "return", "len", "(", "self", ".", "dataset_samples", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhipeng-wei_tt.dataset.kinetics.get_dataset": [[248, 270], ["kinetics.VideoClsDataset", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len"], "function", ["None"], ["", "", "", "def", "get_dataset", "(", "cfg", ",", "loader", "=", "True", ")", ":", "\n", "    ", "val_dataset", "=", "VideoClsDataset", "(", "anno_path", "=", "cfg", ".", "CONFIG", ".", "DATA", ".", "VAL_ANNO_PATH", ",", "\n", "data_path", "=", "cfg", ".", "CONFIG", ".", "DATA", ".", "VAL_DATA_PATH", ",", "\n", "mode", "=", "'validation'", ",", "\n", "use_multigrid", "=", "cfg", ".", "CONFIG", ".", "DATA", ".", "MULTIGRID", ",", "\n", "clip_len", "=", "cfg", ".", "CONFIG", ".", "DATA", ".", "CLIP_LEN", ",", "\n", "frame_sample_rate", "=", "cfg", ".", "CONFIG", ".", "DATA", ".", "FRAME_RATE", ",", "\n", "num_segment", "=", "cfg", ".", "CONFIG", ".", "DATA", ".", "NUM_SEGMENT", ",", "\n", "num_crop", "=", "cfg", ".", "CONFIG", ".", "DATA", ".", "NUM_CROP", ",", "\n", "keep_aspect_ratio", "=", "cfg", ".", "CONFIG", ".", "DATA", ".", "KEEP_ASPECT_RATIO", ",", "\n", "crop_size", "=", "cfg", ".", "CONFIG", ".", "DATA", ".", "CROP_SIZE", ",", "\n", "short_side_size", "=", "cfg", ".", "CONFIG", ".", "DATA", ".", "SHORT_SIDE_SIZE", ",", "\n", "new_height", "=", "cfg", ".", "CONFIG", ".", "DATA", ".", "NEW_HEIGHT", ",", "\n", "new_width", "=", "cfg", ".", "CONFIG", ".", "DATA", ".", "NEW_WIDTH", ")", "\n", "print", "(", "'The length of Dataset is {}.'", ".", "format", "(", "len", "(", "val_dataset", ")", ")", ")", "\n", "if", "loader", ":", "\n", "        ", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "cfg", ".", "CONFIG", ".", "VAL", ".", "BATCH_SIZE", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "9", ",", "sampler", "=", "None", ",", "pin_memory", "=", "True", ")", "\n", "return", "val_loader", "\n", "", "else", ":", "\n", "        ", "return", "val_dataset", "", "", "", ""]]}