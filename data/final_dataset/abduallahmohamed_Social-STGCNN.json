{"home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.ade": [[21, 37], ["len", "range", "numpy.swapaxes", "numpy.swapaxes", "range", "range", "math.sqrt"], "function", ["None"], ["def", "ade", "(", "predAll", ",", "targetAll", ",", "count_", ")", ":", "\n", "    ", "All", "=", "len", "(", "predAll", ")", "\n", "sum_all", "=", "0", "\n", "for", "s", "in", "range", "(", "All", ")", ":", "\n", "        ", "pred", "=", "np", ".", "swapaxes", "(", "predAll", "[", "s", "]", "[", ":", ",", ":", "count_", "[", "s", "]", ",", ":", "]", ",", "0", ",", "1", ")", "\n", "target", "=", "np", ".", "swapaxes", "(", "targetAll", "[", "s", "]", "[", ":", ",", ":", "count_", "[", "s", "]", ",", ":", "]", ",", "0", ",", "1", ")", "\n", "\n", "N", "=", "pred", ".", "shape", "[", "0", "]", "\n", "T", "=", "pred", ".", "shape", "[", "1", "]", "\n", "sum_", "=", "0", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "                ", "sum_", "+=", "math", ".", "sqrt", "(", "(", "pred", "[", "i", ",", "t", ",", "0", "]", "-", "target", "[", "i", ",", "t", ",", "0", "]", ")", "**", "2", "+", "(", "pred", "[", "i", ",", "t", ",", "1", "]", "-", "target", "[", "i", ",", "t", ",", "1", "]", ")", "**", "2", ")", "\n", "", "", "sum_all", "+=", "sum_", "/", "(", "N", "*", "T", ")", "\n", "\n", "", "return", "sum_all", "/", "All", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.fde": [[39, 54], ["len", "range", "numpy.swapaxes", "numpy.swapaxes", "range", "range", "math.sqrt"], "function", ["None"], ["", "def", "fde", "(", "predAll", ",", "targetAll", ",", "count_", ")", ":", "\n", "    ", "All", "=", "len", "(", "predAll", ")", "\n", "sum_all", "=", "0", "\n", "for", "s", "in", "range", "(", "All", ")", ":", "\n", "        ", "pred", "=", "np", ".", "swapaxes", "(", "predAll", "[", "s", "]", "[", ":", ",", ":", "count_", "[", "s", "]", ",", ":", "]", ",", "0", ",", "1", ")", "\n", "target", "=", "np", ".", "swapaxes", "(", "targetAll", "[", "s", "]", "[", ":", ",", ":", "count_", "[", "s", "]", ",", ":", "]", ",", "0", ",", "1", ")", "\n", "N", "=", "pred", ".", "shape", "[", "0", "]", "\n", "T", "=", "pred", ".", "shape", "[", "1", "]", "\n", "sum_", "=", "0", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "T", "-", "1", ",", "T", ")", ":", "\n", "                ", "sum_", "+=", "math", ".", "sqrt", "(", "(", "pred", "[", "i", ",", "t", ",", "0", "]", "-", "target", "[", "i", ",", "t", ",", "0", "]", ")", "**", "2", "+", "(", "pred", "[", "i", ",", "t", ",", "1", "]", "-", "target", "[", "i", ",", "t", ",", "1", "]", ")", "**", "2", ")", "\n", "", "", "sum_all", "+=", "sum_", "/", "(", "N", ")", "\n", "\n", "", "return", "sum_all", "/", "All", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.seq_to_nodes": [[56, 68], ["seq_.squeeze.squeeze", "numpy.zeros", "range", "np.zeros.squeeze", "range", "len"], "function", ["None"], ["", "def", "seq_to_nodes", "(", "seq_", ")", ":", "\n", "    ", "max_nodes", "=", "seq_", ".", "shape", "[", "1", "]", "#number of pedestrians in the graph", "\n", "seq_", "=", "seq_", ".", "squeeze", "(", ")", "\n", "seq_len", "=", "seq_", ".", "shape", "[", "2", "]", "\n", "\n", "V", "=", "np", ".", "zeros", "(", "(", "seq_len", ",", "max_nodes", ",", "2", ")", ")", "\n", "for", "s", "in", "range", "(", "seq_len", ")", ":", "\n", "        ", "step_", "=", "seq_", "[", ":", ",", ":", ",", "s", "]", "\n", "for", "h", "in", "range", "(", "len", "(", "step_", ")", ")", ":", "\n", "            ", "V", "[", "s", ",", "h", ",", ":", "]", "=", "step_", "[", "h", "]", "\n", "\n", "", "", "return", "V", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.nodes_rel_to_nodes_abs": [[69, 76], ["numpy.zeros_like", "range", "np.zeros_like.squeeze", "range", "numpy.sum"], "function", ["None"], ["", "def", "nodes_rel_to_nodes_abs", "(", "nodes", ",", "init_node", ")", ":", "\n", "    ", "nodes_", "=", "np", ".", "zeros_like", "(", "nodes", ")", "\n", "for", "s", "in", "range", "(", "nodes", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "ped", "in", "range", "(", "nodes", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "nodes_", "[", "s", ",", "ped", ",", ":", "]", "=", "np", ".", "sum", "(", "nodes", "[", ":", "s", "+", "1", ",", "ped", ",", ":", "]", ",", "axis", "=", "0", ")", "+", "init_node", "[", "ped", ",", ":", "]", "\n", "\n", "", "", "return", "nodes_", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.closer_to_zero": [[77, 83], ["min", "abs", "abs"], "function", ["None"], ["", "def", "closer_to_zero", "(", "current", ",", "new_v", ")", ":", "\n", "    ", "dec", "=", "min", "(", "[", "(", "abs", "(", "current", ")", ",", "current", ")", ",", "(", "abs", "(", "new_v", ")", ",", "new_v", ")", "]", ")", "[", "1", "]", "\n", "if", "dec", "!=", "current", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.bivariate_loss": [[84, 114], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "", "def", "bivariate_loss", "(", "V_pred", ",", "V_trgt", ")", ":", "\n", "#mux, muy, sx, sy, corr", "\n", "#assert V_pred.shape == V_trgt.shape", "\n", "    ", "normx", "=", "V_trgt", "[", ":", ",", ":", ",", "0", "]", "-", "V_pred", "[", ":", ",", ":", ",", "0", "]", "\n", "normy", "=", "V_trgt", "[", ":", ",", ":", ",", "1", "]", "-", "V_pred", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "sx", "=", "torch", ".", "exp", "(", "V_pred", "[", ":", ",", ":", ",", "2", "]", ")", "#sx", "\n", "sy", "=", "torch", ".", "exp", "(", "V_pred", "[", ":", ",", ":", ",", "3", "]", ")", "#sy", "\n", "corr", "=", "torch", ".", "tanh", "(", "V_pred", "[", ":", ",", ":", ",", "4", "]", ")", "#corr", "\n", "\n", "sxsy", "=", "sx", "*", "sy", "\n", "\n", "z", "=", "(", "normx", "/", "sx", ")", "**", "2", "+", "(", "normy", "/", "sy", ")", "**", "2", "-", "2", "*", "(", "(", "corr", "*", "normx", "*", "normy", ")", "/", "sxsy", ")", "\n", "negRho", "=", "1", "-", "corr", "**", "2", "\n", "\n", "# Numerator", "\n", "result", "=", "torch", ".", "exp", "(", "-", "z", "/", "(", "2", "*", "negRho", ")", ")", "\n", "# Normalization factor", "\n", "denom", "=", "2", "*", "np", ".", "pi", "*", "(", "sxsy", "*", "torch", ".", "sqrt", "(", "negRho", ")", ")", "\n", "\n", "# Final PDF calculation", "\n", "result", "=", "result", "/", "denom", "\n", "\n", "# Numerical stability", "\n", "epsilon", "=", "1e-20", "\n", "\n", "result", "=", "-", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "result", ",", "min", "=", "epsilon", ")", ")", "\n", "result", "=", "torch", ".", "mean", "(", "result", ")", "\n", "\n", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.train.graph_loss": [[75, 77], ["metrics.bivariate_loss"], "function", ["home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.bivariate_loss"], ["def", "graph_loss", "(", "V_pred", ",", "V_target", ")", ":", "\n", "    ", "return", "bivariate_loss", "(", "V_pred", ",", "V_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.train.train": [[142, 201], ["model.train", "len", "enumerate", "metrics[].append", "optimizer.zero_grad", "V_obs.permute", "model", "V_pred.squeeze.permute", "V_tr.squeeze.squeeze", "A_tr.squeeze.squeeze", "V_pred.squeeze.squeeze", "tensor.cuda", "A_obs.squeeze", "train.graph_loss", "loss.backward", "optimizer.step", "loss.item", "print", "int", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "model.parameters"], "function", ["home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.train.train", "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.train.graph_loss"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "global", "metrics", ",", "loader_train", "\n", "model", ".", "train", "(", ")", "\n", "loss_batch", "=", "0", "\n", "batch_count", "=", "0", "\n", "is_fst_loss", "=", "True", "\n", "loader_len", "=", "len", "(", "loader_train", ")", "\n", "turn_point", "=", "int", "(", "loader_len", "/", "args", ".", "batch_size", ")", "*", "args", ".", "batch_size", "+", "loader_len", "%", "args", ".", "batch_size", "-", "1", "\n", "\n", "\n", "for", "cnt", ",", "batch", "in", "enumerate", "(", "loader_train", ")", ":", "\n", "        ", "batch_count", "+=", "1", "\n", "\n", "#Get data", "\n", "batch", "=", "[", "tensor", ".", "cuda", "(", ")", "for", "tensor", "in", "batch", "]", "\n", "obs_traj", ",", "pred_traj_gt", ",", "obs_traj_rel", ",", "pred_traj_gt_rel", ",", "non_linear_ped", ",", "loss_mask", ",", "V_obs", ",", "A_obs", ",", "V_tr", ",", "A_tr", "=", "batch", "\n", "\n", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "#Forward", "\n", "#V_obs = batch,seq,node,feat", "\n", "#V_obs_tmp = batch,feat,seq,node", "\n", "V_obs_tmp", "=", "V_obs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "V_pred", ",", "_", "=", "model", "(", "V_obs_tmp", ",", "A_obs", ".", "squeeze", "(", ")", ")", "\n", "\n", "V_pred", "=", "V_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "\n", "\n", "V_tr", "=", "V_tr", ".", "squeeze", "(", ")", "\n", "A_tr", "=", "A_tr", ".", "squeeze", "(", ")", "\n", "V_pred", "=", "V_pred", ".", "squeeze", "(", ")", "\n", "\n", "if", "batch_count", "%", "args", ".", "batch_size", "!=", "0", "and", "cnt", "!=", "turn_point", ":", "\n", "            ", "l", "=", "graph_loss", "(", "V_pred", ",", "V_tr", ")", "\n", "if", "is_fst_loss", ":", "\n", "                ", "loss", "=", "l", "\n", "is_fst_loss", "=", "False", "\n", "", "else", ":", "\n", "                ", "loss", "+=", "l", "\n", "\n", "", "", "else", ":", "\n", "            ", "loss", "=", "loss", "/", "args", ".", "batch_size", "\n", "is_fst_loss", "=", "True", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "args", ".", "clip_grad", "is", "not", "None", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip_grad", ")", "\n", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "#Metrics", "\n", "loss_batch", "+=", "loss", ".", "item", "(", ")", "\n", "print", "(", "'TRAIN:'", ",", "'\\t Epoch:'", ",", "epoch", ",", "'\\t Loss:'", ",", "loss_batch", "/", "batch_count", ")", "\n", "\n", "", "", "metrics", "[", "'train_loss'", "]", ".", "append", "(", "loss_batch", "/", "batch_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.train.vald": [[205, 254], ["model.eval", "len", "enumerate", "metrics[].append", "V_obs.permute", "model", "V_pred.squeeze.permute", "V_tr.squeeze.squeeze", "A_tr.squeeze.squeeze", "V_pred.squeeze.squeeze", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "tensor.cuda", "A_obs.squeeze", "train.graph_loss", "loss.item", "print", "model.state_dict", "int"], "function", ["home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.train.graph_loss"], ["", "def", "vald", "(", "epoch", ")", ":", "\n", "    ", "global", "metrics", ",", "loader_val", ",", "constant_metrics", "\n", "model", ".", "eval", "(", ")", "\n", "loss_batch", "=", "0", "\n", "batch_count", "=", "0", "\n", "is_fst_loss", "=", "True", "\n", "loader_len", "=", "len", "(", "loader_val", ")", "\n", "turn_point", "=", "int", "(", "loader_len", "/", "args", ".", "batch_size", ")", "*", "args", ".", "batch_size", "+", "loader_len", "%", "args", ".", "batch_size", "-", "1", "\n", "\n", "for", "cnt", ",", "batch", "in", "enumerate", "(", "loader_val", ")", ":", "\n", "        ", "batch_count", "+=", "1", "\n", "\n", "#Get data", "\n", "batch", "=", "[", "tensor", ".", "cuda", "(", ")", "for", "tensor", "in", "batch", "]", "\n", "obs_traj", ",", "pred_traj_gt", ",", "obs_traj_rel", ",", "pred_traj_gt_rel", ",", "non_linear_ped", ",", "loss_mask", ",", "V_obs", ",", "A_obs", ",", "V_tr", ",", "A_tr", "=", "batch", "\n", "\n", "\n", "V_obs_tmp", "=", "V_obs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "V_pred", ",", "_", "=", "model", "(", "V_obs_tmp", ",", "A_obs", ".", "squeeze", "(", ")", ")", "\n", "\n", "V_pred", "=", "V_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "V_tr", "=", "V_tr", ".", "squeeze", "(", ")", "\n", "A_tr", "=", "A_tr", ".", "squeeze", "(", ")", "\n", "V_pred", "=", "V_pred", ".", "squeeze", "(", ")", "\n", "\n", "if", "batch_count", "%", "args", ".", "batch_size", "!=", "0", "and", "cnt", "!=", "turn_point", ":", "\n", "            ", "l", "=", "graph_loss", "(", "V_pred", ",", "V_tr", ")", "\n", "if", "is_fst_loss", ":", "\n", "                ", "loss", "=", "l", "\n", "is_fst_loss", "=", "False", "\n", "", "else", ":", "\n", "                ", "loss", "+=", "l", "\n", "\n", "", "", "else", ":", "\n", "            ", "loss", "=", "loss", "/", "args", ".", "batch_size", "\n", "is_fst_loss", "=", "True", "\n", "#Metrics", "\n", "loss_batch", "+=", "loss", ".", "item", "(", ")", "\n", "print", "(", "'VALD:'", ",", "'\\t Epoch:'", ",", "epoch", ",", "'\\t Loss:'", ",", "loss_batch", "/", "batch_count", ")", "\n", "\n", "", "", "metrics", "[", "'val_loss'", "]", ".", "append", "(", "loss_batch", "/", "batch_count", ")", "\n", "\n", "if", "metrics", "[", "'val_loss'", "]", "[", "-", "1", "]", "<", "constant_metrics", "[", "'min_val_loss'", "]", ":", "\n", "        ", "constant_metrics", "[", "'min_val_loss'", "]", "=", "metrics", "[", "'val_loss'", "]", "[", "-", "1", "]", "\n", "constant_metrics", "[", "'min_val_epoch'", "]", "=", "epoch", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "checkpoint_dir", "+", "'val_best.pth'", ")", "# OK", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.test.test": [[17, 127], ["model.eval", "V_obs.permute", "model", "mvnormal.sample.permute", "V_tr.squeeze.squeeze", "A_tr.squeeze.squeeze", "mvnormal.sample.squeeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.tanh", "torch.tanh", "torch.zeros().cuda", "torch.zeros().cuda", "torch.MultivariateNormal", "metrics.seq_to_nodes", "metrics.nodes_rel_to_nodes_abs", "metrics.seq_to_nodes", "metrics.nodes_rel_to_nodes_abs", "copy.deepcopy", "copy.deepcopy", "range", "range", "range", "sum", "len", "sum", "len", "tensor.cuda", "A_obs.squeeze", "obs_traj.data.cpu().numpy().copy", "V_obs.data.cpu().numpy().squeeze().copy", "V_x[].copy", "pred_traj_gt.data.cpu().numpy().copy", "V_tr.squeeze.data.cpu().numpy().squeeze().copy", "V_x[].copy", "torchdist.MultivariateNormal.sample", "metrics.nodes_rel_to_nodes_abs", "[].append", "range", "ade_bigls.append", "fde_bigls.append", "torch.zeros", "torch.zeros", "mvnormal.sample.data.cpu().numpy().squeeze().copy", "V_x[].copy", "copy.deepcopy", "pred.append", "target.append", "obsrvs.append", "number_of.append", "ade_ls[].append", "fde_ls[].append", "min", "min", "obs_traj.data.cpu().numpy", "V_obs.data.cpu().numpy().squeeze", "pred_traj_gt.data.cpu().numpy", "V_tr.squeeze.data.cpu().numpy().squeeze", "metrics.ade", "metrics.fde", "mvnormal.sample.data.cpu().numpy().squeeze", "obs_traj.data.cpu", "V_obs.data.cpu().numpy", "pred_traj_gt.data.cpu", "V_tr.squeeze.data.cpu().numpy", "mvnormal.sample.data.cpu().numpy", "V_obs.data.cpu", "V_tr.squeeze.data.cpu", "mvnormal.sample.data.cpu"], "function", ["home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.seq_to_nodes", "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.nodes_rel_to_nodes_abs", "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.seq_to_nodes", "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.nodes_rel_to_nodes_abs", "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.nodes_rel_to_nodes_abs", "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.ade", "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.metrics.fde"], ["def", "test", "(", "KSTEPS", "=", "20", ")", ":", "\n", "    ", "global", "loader_test", ",", "model", "\n", "model", ".", "eval", "(", ")", "\n", "ade_bigls", "=", "[", "]", "\n", "fde_bigls", "=", "[", "]", "\n", "raw_data_dict", "=", "{", "}", "\n", "step", "=", "0", "\n", "for", "batch", "in", "loader_test", ":", "\n", "        ", "step", "+=", "1", "\n", "#Get data", "\n", "batch", "=", "[", "tensor", ".", "cuda", "(", ")", "for", "tensor", "in", "batch", "]", "\n", "obs_traj", ",", "pred_traj_gt", ",", "obs_traj_rel", ",", "pred_traj_gt_rel", ",", "non_linear_ped", ",", "loss_mask", ",", "V_obs", ",", "A_obs", ",", "V_tr", ",", "A_tr", "=", "batch", "\n", "\n", "\n", "num_of_objs", "=", "obs_traj_rel", ".", "shape", "[", "1", "]", "\n", "\n", "#Forward", "\n", "#V_obs = batch,seq,node,feat", "\n", "#V_obs_tmp = batch,feat,seq,node", "\n", "V_obs_tmp", "=", "V_obs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "V_pred", ",", "_", "=", "model", "(", "V_obs_tmp", ",", "A_obs", ".", "squeeze", "(", ")", ")", "\n", "# print(V_pred.shape)", "\n", "# torch.Size([1, 5, 12, 2])", "\n", "# torch.Size([12, 2, 5])", "\n", "V_pred", "=", "V_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "# torch.Size([1, 12, 2, 5])>>seq,node,feat", "\n", "# V_pred= torch.rand_like(V_tr).cuda()", "\n", "\n", "\n", "V_tr", "=", "V_tr", ".", "squeeze", "(", ")", "\n", "A_tr", "=", "A_tr", ".", "squeeze", "(", ")", "\n", "V_pred", "=", "V_pred", ".", "squeeze", "(", ")", "\n", "num_of_objs", "=", "obs_traj_rel", ".", "shape", "[", "1", "]", "\n", "V_pred", ",", "V_tr", "=", "V_pred", "[", ":", ",", ":", "num_of_objs", ",", ":", "]", ",", "V_tr", "[", ":", ",", ":", "num_of_objs", ",", ":", "]", "\n", "#print(V_pred.shape)", "\n", "\n", "#For now I have my bi-variate parameters ", "\n", "#normx =  V_pred[:,:,0:1]", "\n", "#normy =  V_pred[:,:,1:2]", "\n", "sx", "=", "torch", ".", "exp", "(", "V_pred", "[", ":", ",", ":", ",", "2", "]", ")", "#sx", "\n", "sy", "=", "torch", ".", "exp", "(", "V_pred", "[", ":", ",", ":", ",", "3", "]", ")", "#sy", "\n", "corr", "=", "torch", ".", "tanh", "(", "V_pred", "[", ":", ",", ":", ",", "4", "]", ")", "#corr", "\n", "\n", "cov", "=", "torch", ".", "zeros", "(", "V_pred", ".", "shape", "[", "0", "]", ",", "V_pred", ".", "shape", "[", "1", "]", ",", "2", ",", "2", ")", ".", "cuda", "(", ")", "\n", "cov", "[", ":", ",", ":", ",", "0", ",", "0", "]", "=", "sx", "*", "sx", "\n", "cov", "[", ":", ",", ":", ",", "0", ",", "1", "]", "=", "corr", "*", "sx", "*", "sy", "\n", "cov", "[", ":", ",", ":", ",", "1", ",", "0", "]", "=", "corr", "*", "sx", "*", "sy", "\n", "cov", "[", ":", ",", ":", ",", "1", ",", "1", "]", "=", "sy", "*", "sy", "\n", "mean", "=", "V_pred", "[", ":", ",", ":", ",", "0", ":", "2", "]", "\n", "\n", "mvnormal", "=", "torchdist", ".", "MultivariateNormal", "(", "mean", ",", "cov", ")", "\n", "\n", "\n", "### Rel to abs ", "\n", "##obs_traj.shape = torch.Size([1, 6, 2, 8]) Batch, Ped ID, x|y, Seq Len ", "\n", "\n", "#Now sample 20 samples", "\n", "ade_ls", "=", "{", "}", "\n", "fde_ls", "=", "{", "}", "\n", "V_x", "=", "seq_to_nodes", "(", "obs_traj", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", ")", "\n", "V_x_rel_to_abs", "=", "nodes_rel_to_nodes_abs", "(", "V_obs", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ".", "copy", "(", ")", ",", "\n", "V_x", "[", "0", ",", ":", ",", ":", "]", ".", "copy", "(", ")", ")", "\n", "\n", "V_y", "=", "seq_to_nodes", "(", "pred_traj_gt", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", ")", "\n", "V_y_rel_to_abs", "=", "nodes_rel_to_nodes_abs", "(", "V_tr", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ".", "copy", "(", ")", ",", "\n", "V_x", "[", "-", "1", ",", ":", ",", ":", "]", ".", "copy", "(", ")", ")", "\n", "\n", "raw_data_dict", "[", "step", "]", "=", "{", "}", "\n", "raw_data_dict", "[", "step", "]", "[", "'obs'", "]", "=", "copy", ".", "deepcopy", "(", "V_x_rel_to_abs", ")", "\n", "raw_data_dict", "[", "step", "]", "[", "'trgt'", "]", "=", "copy", ".", "deepcopy", "(", "V_y_rel_to_abs", ")", "\n", "raw_data_dict", "[", "step", "]", "[", "'pred'", "]", "=", "[", "]", "\n", "\n", "for", "n", "in", "range", "(", "num_of_objs", ")", ":", "\n", "            ", "ade_ls", "[", "n", "]", "=", "[", "]", "\n", "fde_ls", "[", "n", "]", "=", "[", "]", "\n", "\n", "", "for", "k", "in", "range", "(", "KSTEPS", ")", ":", "\n", "\n", "            ", "V_pred", "=", "mvnormal", ".", "sample", "(", ")", "\n", "\n", "\n", "\n", "#V_pred = seq_to_nodes(pred_traj_gt.data.numpy().copy())", "\n", "V_pred_rel_to_abs", "=", "nodes_rel_to_nodes_abs", "(", "V_pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ".", "copy", "(", ")", ",", "\n", "V_x", "[", "-", "1", ",", ":", ",", ":", "]", ".", "copy", "(", ")", ")", "\n", "raw_data_dict", "[", "step", "]", "[", "'pred'", "]", ".", "append", "(", "copy", ".", "deepcopy", "(", "V_pred_rel_to_abs", ")", ")", "\n", "\n", "# print(V_pred_rel_to_abs.shape) #(12, 3, 2) = seq, ped, location", "\n", "for", "n", "in", "range", "(", "num_of_objs", ")", ":", "\n", "                ", "pred", "=", "[", "]", "\n", "target", "=", "[", "]", "\n", "obsrvs", "=", "[", "]", "\n", "number_of", "=", "[", "]", "\n", "pred", ".", "append", "(", "V_pred_rel_to_abs", "[", ":", ",", "n", ":", "n", "+", "1", ",", ":", "]", ")", "\n", "target", ".", "append", "(", "V_y_rel_to_abs", "[", ":", ",", "n", ":", "n", "+", "1", ",", ":", "]", ")", "\n", "obsrvs", ".", "append", "(", "V_x_rel_to_abs", "[", ":", ",", "n", ":", "n", "+", "1", ",", ":", "]", ")", "\n", "number_of", ".", "append", "(", "1", ")", "\n", "\n", "ade_ls", "[", "n", "]", ".", "append", "(", "ade", "(", "pred", ",", "target", ",", "number_of", ")", ")", "\n", "fde_ls", "[", "n", "]", ".", "append", "(", "fde", "(", "pred", ",", "target", ",", "number_of", ")", ")", "\n", "\n", "", "", "for", "n", "in", "range", "(", "num_of_objs", ")", ":", "\n", "            ", "ade_bigls", ".", "append", "(", "min", "(", "ade_ls", "[", "n", "]", ")", ")", "\n", "fde_bigls", ".", "append", "(", "min", "(", "fde_ls", "[", "n", "]", ")", ")", "\n", "\n", "", "", "ade_", "=", "sum", "(", "ade_bigls", ")", "/", "len", "(", "ade_bigls", ")", "\n", "fde_", "=", "sum", "(", "fde_bigls", ")", "/", "len", "(", "fde_bigls", ")", "\n", "return", "ade_", ",", "fde_", ",", "raw_data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.model.ConvTemporalGraphical.__init__": [[44, 63], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.TrajectoryDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "t_kernel_size", "=", "1", ",", "\n", "t_stride", "=", "1", ",", "\n", "t_padding", "=", "0", ",", "\n", "t_dilation", "=", "1", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvTemporalGraphical", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "(", "t_kernel_size", ",", "1", ")", ",", "\n", "padding", "=", "(", "t_padding", ",", "0", ")", ",", "\n", "stride", "=", "(", "t_stride", ",", "1", ")", ",", "\n", "dilation", "=", "(", "t_dilation", ",", "1", ")", ",", "\n", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.model.ConvTemporalGraphical.forward": [[64, 69], ["model.ConvTemporalGraphical.conv", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "A.size", "torch.einsum.contiguous", "torch.einsum.contiguous", "torch.einsum.contiguous", "torch.einsum.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "A", ")", ":", "\n", "        ", "assert", "A", ".", "size", "(", "0", ")", "==", "self", ".", "kernel_size", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "torch", ".", "einsum", "(", "'nctv,tvw->nctw'", ",", "(", "x", ",", "A", ")", ")", "\n", "return", "x", ".", "contiguous", "(", ")", ",", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.model.st_gcn.__init__": [[92, 144], ["torch.Module.__init__", "model.ConvTemporalGraphical", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "len", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.TrajectoryDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "use_mdn", "=", "False", ",", "\n", "stride", "=", "1", ",", "\n", "dropout", "=", "0", ",", "\n", "residual", "=", "True", ")", ":", "\n", "        ", "super", "(", "st_gcn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#         print(\"outstg\",out_channels)", "\n", "\n", "assert", "len", "(", "kernel_size", ")", "==", "2", "\n", "assert", "kernel_size", "[", "0", "]", "%", "2", "==", "1", "\n", "padding", "=", "(", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", ",", "0", ")", "\n", "self", ".", "use_mdn", "=", "use_mdn", "\n", "\n", "self", ".", "gcn", "=", "ConvTemporalGraphical", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "[", "1", "]", ")", "\n", "\n", "\n", "self", ".", "tcn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "(", "kernel_size", "[", "0", "]", ",", "1", ")", ",", "\n", "(", "stride", ",", "1", ")", ",", "\n", "padding", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "if", "not", "residual", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "0", "\n", "\n", "", "elif", "(", "in_channels", "==", "out_channels", ")", "and", "(", "stride", "==", "1", ")", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "x", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "(", "stride", ",", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.model.st_gcn.forward": [[145, 156], ["model.st_gcn.residual", "model.st_gcn.gcn", "model.st_gcn.tcn", "model.st_gcn.prelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "A", ")", ":", "\n", "\n", "        ", "res", "=", "self", ".", "residual", "(", "x", ")", "\n", "x", ",", "A", "=", "self", ".", "gcn", "(", "x", ",", "A", ")", "\n", "\n", "x", "=", "self", ".", "tcn", "(", "x", ")", "+", "res", "\n", "\n", "if", "not", "self", ".", "use_mdn", ":", "\n", "            ", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "\n", "", "return", "x", ",", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.model.social_stgcnn.__init__": [[158, 179], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.social_stgcnn.st_gcns.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.social_stgcnn.tpcnns.append", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model.st_gcn", "model.social_stgcnn.st_gcns.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.social_stgcnn.tpcnns.append", "model.social_stgcnn.prelus.append", "model.st_gcn", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.TrajectoryDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_stgcnn", "=", "1", ",", "n_txpcnn", "=", "1", ",", "input_feat", "=", "2", ",", "output_feat", "=", "5", ",", "\n", "seq_len", "=", "8", ",", "pred_seq_len", "=", "12", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "social_stgcnn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_stgcnn", "=", "n_stgcnn", "\n", "self", ".", "n_txpcnn", "=", "n_txpcnn", "\n", "\n", "self", ".", "st_gcns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "st_gcns", ".", "append", "(", "st_gcn", "(", "input_feat", ",", "output_feat", ",", "(", "kernel_size", ",", "seq_len", ")", ")", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "n_stgcnn", ")", ":", "\n", "            ", "self", ".", "st_gcns", ".", "append", "(", "st_gcn", "(", "output_feat", ",", "output_feat", ",", "(", "kernel_size", ",", "seq_len", ")", ")", ")", "\n", "\n", "", "self", ".", "tpcnns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "tpcnns", ".", "append", "(", "nn", ".", "Conv2d", "(", "seq_len", ",", "pred_seq_len", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "n_txpcnn", ")", ":", "\n", "            ", "self", ".", "tpcnns", ".", "append", "(", "nn", ".", "Conv2d", "(", "pred_seq_len", ",", "pred_seq_len", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "", "self", ".", "tpcnn_ouput", "=", "nn", ".", "Conv2d", "(", "pred_seq_len", ",", "pred_seq_len", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n", "\n", "self", ".", "prelus", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "n_txpcnn", ")", ":", "\n", "            ", "self", ".", "prelus", ".", "append", "(", "nn", ".", "PReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.model.social_stgcnn.forward": [[182, 199], ["range", "v.view.view.view", "range", "model.social_stgcnn.tpcnn_ouput", "v.view.view.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "v", ",", "a", ")", ":", "\n", "\n", "        ", "for", "k", "in", "range", "(", "self", ".", "n_stgcnn", ")", ":", "\n", "            ", "v", ",", "a", "=", "self", ".", "st_gcns", "[", "k", "]", "(", "v", ",", "a", ")", "\n", "\n", "", "v", "=", "v", ".", "view", "(", "v", ".", "shape", "[", "0", "]", ",", "v", ".", "shape", "[", "2", "]", ",", "v", ".", "shape", "[", "1", "]", ",", "v", ".", "shape", "[", "3", "]", ")", "\n", "\n", "v", "=", "self", ".", "prelus", "[", "0", "]", "(", "self", ".", "tpcnns", "[", "0", "]", "(", "v", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "1", ",", "self", ".", "n_txpcnn", "-", "1", ")", ":", "\n", "            ", "v", "=", "self", ".", "prelus", "[", "k", "]", "(", "self", ".", "tpcnns", "[", "k", "]", "(", "v", ")", ")", "+", "v", "\n", "\n", "", "v", "=", "self", ".", "tpcnn_ouput", "(", "v", ")", "\n", "v", "=", "v", ".", "view", "(", "v", ".", "shape", "[", "0", "]", ",", "v", ".", "shape", "[", "2", "]", ",", "v", ".", "shape", "[", "1", "]", ",", "v", ".", "shape", "[", "3", "]", ")", "\n", "\n", "\n", "return", "v", ",", "a", "\n", "", "", ""]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.TrajectoryDataset.__init__": [[88, 213], ["torch.utils.data.Dataset.__init__", "os.listdir", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.asarray", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "print", "tqdm.tqdm.tqdm", "range", "tqdm.tqdm.tqdm.close", "os.path.join", "utils.read_file", "numpy.unique().tolist", "int", "range", "numpy.cumsum().tolist", "len", "tqdm.tqdm.tqdm.update", "utils.seq_to_graph", "utils.TrajectoryDataset.v_obs.append", "utils.TrajectoryDataset.A_obs.append", "utils.seq_to_graph", "utils.TrajectoryDataset.v_pred.append", "utils.TrajectoryDataset.A_pred.append", "frame_data.append", "math.ceil", "numpy.concatenate", "numpy.unique", "max", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "zip", "len", "v_.clone", "a_.clone", "v_.clone", "a_.clone", "numpy.unique", "len", "numpy.around", "numpy.transpose", "numpy.zeros", "_non_linear_ped.append", "num_peds_in_seq.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.cumsum", "len", "len", "len", "numpy.unique().tolist.index", "utils.poly_fit", "numpy.unique().tolist.index", "len"], "methods", ["home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.TrajectoryDataset.__init__", "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.read_file", "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.seq_to_graph", "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.seq_to_graph", "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.poly_fit"], ["def", "__init__", "(", "\n", "self", ",", "data_dir", ",", "obs_len", "=", "8", ",", "pred_len", "=", "8", ",", "skip", "=", "1", ",", "threshold", "=", "0.002", ",", "\n", "min_ped", "=", "1", ",", "delim", "=", "'\\t'", ",", "norm_lap_matr", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n        - data_dir: Directory containing dataset files in the format\n        <frame_id> <ped_id> <x> <y>\n        - obs_len: Number of time-steps in input trajectories\n        - pred_len: Number of time-steps in output trajectories\n        - skip: Number of frames to skip while making the dataset\n        - threshold: Minimum error to be considered for non linear traj\n        when using a linear predictor\n        - min_ped: Minimum number of pedestrians that should be in a seqeunce\n        - delim: Delimiter in the dataset files\n        \"\"\"", "\n", "super", "(", "TrajectoryDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "max_peds_in_frame", "=", "0", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "obs_len", "=", "obs_len", "\n", "self", ".", "pred_len", "=", "pred_len", "\n", "self", ".", "skip", "=", "skip", "\n", "self", ".", "seq_len", "=", "self", ".", "obs_len", "+", "self", ".", "pred_len", "\n", "self", ".", "delim", "=", "delim", "\n", "self", ".", "norm_lap_matr", "=", "norm_lap_matr", "\n", "\n", "all_files", "=", "os", ".", "listdir", "(", "self", ".", "data_dir", ")", "\n", "all_files", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "_path", ")", "for", "_path", "in", "all_files", "]", "\n", "num_peds_in_seq", "=", "[", "]", "\n", "seq_list", "=", "[", "]", "\n", "seq_list_rel", "=", "[", "]", "\n", "loss_mask_list", "=", "[", "]", "\n", "non_linear_ped", "=", "[", "]", "\n", "for", "path", "in", "all_files", ":", "\n", "            ", "data", "=", "read_file", "(", "path", ",", "delim", ")", "\n", "frames", "=", "np", ".", "unique", "(", "data", "[", ":", ",", "0", "]", ")", ".", "tolist", "(", ")", "\n", "frame_data", "=", "[", "]", "\n", "for", "frame", "in", "frames", ":", "\n", "                ", "frame_data", ".", "append", "(", "data", "[", "frame", "==", "data", "[", ":", ",", "0", "]", ",", ":", "]", ")", "\n", "", "num_sequences", "=", "int", "(", "\n", "math", ".", "ceil", "(", "(", "len", "(", "frames", ")", "-", "self", ".", "seq_len", "+", "1", ")", "/", "skip", ")", ")", "\n", "\n", "for", "idx", "in", "range", "(", "0", ",", "num_sequences", "*", "self", ".", "skip", "+", "1", ",", "skip", ")", ":", "\n", "                ", "curr_seq_data", "=", "np", ".", "concatenate", "(", "\n", "frame_data", "[", "idx", ":", "idx", "+", "self", ".", "seq_len", "]", ",", "axis", "=", "0", ")", "\n", "peds_in_curr_seq", "=", "np", ".", "unique", "(", "curr_seq_data", "[", ":", ",", "1", "]", ")", "\n", "self", ".", "max_peds_in_frame", "=", "max", "(", "self", ".", "max_peds_in_frame", ",", "len", "(", "peds_in_curr_seq", ")", ")", "\n", "curr_seq_rel", "=", "np", ".", "zeros", "(", "(", "len", "(", "peds_in_curr_seq", ")", ",", "2", ",", "\n", "self", ".", "seq_len", ")", ")", "\n", "curr_seq", "=", "np", ".", "zeros", "(", "(", "len", "(", "peds_in_curr_seq", ")", ",", "2", ",", "self", ".", "seq_len", ")", ")", "\n", "curr_loss_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "peds_in_curr_seq", ")", ",", "\n", "self", ".", "seq_len", ")", ")", "\n", "num_peds_considered", "=", "0", "\n", "_non_linear_ped", "=", "[", "]", "\n", "for", "_", ",", "ped_id", "in", "enumerate", "(", "peds_in_curr_seq", ")", ":", "\n", "                    ", "curr_ped_seq", "=", "curr_seq_data", "[", "curr_seq_data", "[", ":", ",", "1", "]", "==", "\n", "ped_id", ",", ":", "]", "\n", "curr_ped_seq", "=", "np", ".", "around", "(", "curr_ped_seq", ",", "decimals", "=", "4", ")", "\n", "pad_front", "=", "frames", ".", "index", "(", "curr_ped_seq", "[", "0", ",", "0", "]", ")", "-", "idx", "\n", "pad_end", "=", "frames", ".", "index", "(", "curr_ped_seq", "[", "-", "1", ",", "0", "]", ")", "-", "idx", "+", "1", "\n", "if", "pad_end", "-", "pad_front", "!=", "self", ".", "seq_len", ":", "\n", "                        ", "continue", "\n", "", "curr_ped_seq", "=", "np", ".", "transpose", "(", "curr_ped_seq", "[", ":", ",", "2", ":", "]", ")", "\n", "curr_ped_seq", "=", "curr_ped_seq", "\n", "# Make coordinates relative", "\n", "rel_curr_ped_seq", "=", "np", ".", "zeros", "(", "curr_ped_seq", ".", "shape", ")", "\n", "rel_curr_ped_seq", "[", ":", ",", "1", ":", "]", "=", "curr_ped_seq", "[", ":", ",", "1", ":", "]", "-", "curr_ped_seq", "[", ":", ",", ":", "-", "1", "]", "\n", "_idx", "=", "num_peds_considered", "\n", "curr_seq", "[", "_idx", ",", ":", ",", "pad_front", ":", "pad_end", "]", "=", "curr_ped_seq", "\n", "curr_seq_rel", "[", "_idx", ",", ":", ",", "pad_front", ":", "pad_end", "]", "=", "rel_curr_ped_seq", "\n", "# Linear vs Non-Linear Trajectory", "\n", "_non_linear_ped", ".", "append", "(", "\n", "poly_fit", "(", "curr_ped_seq", ",", "pred_len", ",", "threshold", ")", ")", "\n", "curr_loss_mask", "[", "_idx", ",", "pad_front", ":", "pad_end", "]", "=", "1", "\n", "num_peds_considered", "+=", "1", "\n", "\n", "", "if", "num_peds_considered", ">", "min_ped", ":", "\n", "                    ", "non_linear_ped", "+=", "_non_linear_ped", "\n", "num_peds_in_seq", ".", "append", "(", "num_peds_considered", ")", "\n", "loss_mask_list", ".", "append", "(", "curr_loss_mask", "[", ":", "num_peds_considered", "]", ")", "\n", "seq_list", ".", "append", "(", "curr_seq", "[", ":", "num_peds_considered", "]", ")", "\n", "seq_list_rel", ".", "append", "(", "curr_seq_rel", "[", ":", "num_peds_considered", "]", ")", "\n", "\n", "", "", "", "self", ".", "num_seq", "=", "len", "(", "seq_list", ")", "\n", "seq_list", "=", "np", ".", "concatenate", "(", "seq_list", ",", "axis", "=", "0", ")", "\n", "seq_list_rel", "=", "np", ".", "concatenate", "(", "seq_list_rel", ",", "axis", "=", "0", ")", "\n", "loss_mask_list", "=", "np", ".", "concatenate", "(", "loss_mask_list", ",", "axis", "=", "0", ")", "\n", "non_linear_ped", "=", "np", ".", "asarray", "(", "non_linear_ped", ")", "\n", "\n", "# Convert numpy -> Torch Tensor", "\n", "self", ".", "obs_traj", "=", "torch", ".", "from_numpy", "(", "\n", "seq_list", "[", ":", ",", ":", ",", ":", "self", ".", "obs_len", "]", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "self", ".", "pred_traj", "=", "torch", ".", "from_numpy", "(", "\n", "seq_list", "[", ":", ",", ":", ",", "self", ".", "obs_len", ":", "]", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "self", ".", "obs_traj_rel", "=", "torch", ".", "from_numpy", "(", "\n", "seq_list_rel", "[", ":", ",", ":", ",", ":", "self", ".", "obs_len", "]", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "self", ".", "pred_traj_rel", "=", "torch", ".", "from_numpy", "(", "\n", "seq_list_rel", "[", ":", ",", ":", ",", "self", ".", "obs_len", ":", "]", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "self", ".", "loss_mask", "=", "torch", ".", "from_numpy", "(", "loss_mask_list", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "self", ".", "non_linear_ped", "=", "torch", ".", "from_numpy", "(", "non_linear_ped", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "cum_start_idx", "=", "[", "0", "]", "+", "np", ".", "cumsum", "(", "num_peds_in_seq", ")", ".", "tolist", "(", ")", "\n", "self", ".", "seq_start_end", "=", "[", "\n", "(", "start", ",", "end", ")", "\n", "for", "start", ",", "end", "in", "zip", "(", "cum_start_idx", ",", "cum_start_idx", "[", "1", ":", "]", ")", "\n", "]", "\n", "#Convert to Graphs ", "\n", "self", ".", "v_obs", "=", "[", "]", "\n", "self", ".", "A_obs", "=", "[", "]", "\n", "self", ".", "v_pred", "=", "[", "]", "\n", "self", ".", "A_pred", "=", "[", "]", "\n", "print", "(", "\"Processing Data .....\"", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "self", ".", "seq_start_end", ")", ")", "\n", "for", "ss", "in", "range", "(", "len", "(", "self", ".", "seq_start_end", ")", ")", ":", "\n", "            ", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "start", ",", "end", "=", "self", ".", "seq_start_end", "[", "ss", "]", "\n", "\n", "v_", ",", "a_", "=", "seq_to_graph", "(", "self", ".", "obs_traj", "[", "start", ":", "end", ",", ":", "]", ",", "self", ".", "obs_traj_rel", "[", "start", ":", "end", ",", ":", "]", ",", "self", ".", "norm_lap_matr", ")", "\n", "self", ".", "v_obs", ".", "append", "(", "v_", ".", "clone", "(", ")", ")", "\n", "self", ".", "A_obs", ".", "append", "(", "a_", ".", "clone", "(", ")", ")", "\n", "v_", ",", "a_", "=", "seq_to_graph", "(", "self", ".", "pred_traj", "[", "start", ":", "end", ",", ":", "]", ",", "self", ".", "pred_traj_rel", "[", "start", ":", "end", ",", ":", "]", ",", "self", ".", "norm_lap_matr", ")", "\n", "self", ".", "v_pred", ".", "append", "(", "v_", ".", "clone", "(", ")", ")", "\n", "self", ".", "A_pred", ".", "append", "(", "a_", ".", "clone", "(", ")", ")", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.TrajectoryDataset.__len__": [[214, 216], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.TrajectoryDataset.__getitem__": [[217, 229], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "start", ",", "end", "=", "self", ".", "seq_start_end", "[", "index", "]", "\n", "\n", "out", "=", "[", "\n", "self", ".", "obs_traj", "[", "start", ":", "end", ",", ":", "]", ",", "self", ".", "pred_traj", "[", "start", ":", "end", ",", ":", "]", ",", "\n", "self", ".", "obs_traj_rel", "[", "start", ":", "end", ",", ":", "]", ",", "self", ".", "pred_traj_rel", "[", "start", ":", "end", ",", ":", "]", ",", "\n", "self", ".", "non_linear_ped", "[", "start", ":", "end", "]", ",", "self", ".", "loss_mask", "[", "start", ":", "end", ",", ":", "]", ",", "\n", "self", ".", "v_obs", "[", "index", "]", ",", "self", ".", "A_obs", "[", "index", "]", ",", "\n", "self", ".", "v_pred", "[", "index", "]", ",", "self", ".", "A_pred", "[", "index", "]", "\n", "\n", "]", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.anorm": [[23, 28], ["math.sqrt"], "function", ["None"], ["def", "anorm", "(", "p1", ",", "p2", ")", ":", "\n", "    ", "NORM", "=", "math", ".", "sqrt", "(", "(", "p1", "[", "0", "]", "-", "p2", "[", "0", "]", ")", "**", "2", "+", "(", "p1", "[", "1", "]", "-", "p2", "[", "1", "]", ")", "**", "2", ")", "\n", "if", "NORM", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "1", "/", "(", "NORM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.seq_to_graph": [[29, 54], ["seq_.squeeze.squeeze", "seq_rel.squeeze.squeeze", "numpy.zeros", "numpy.zeros", "range", "range", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "len", "range", "networkx.from_numpy_matrix", "networkx.normalized_laplacian_matrix().toarray", "len", "utils.anorm", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "networkx.normalized_laplacian_matrix"], "function", ["home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.anorm"], ["", "def", "seq_to_graph", "(", "seq_", ",", "seq_rel", ",", "norm_lap_matr", "=", "True", ")", ":", "\n", "    ", "seq_", "=", "seq_", ".", "squeeze", "(", ")", "\n", "seq_rel", "=", "seq_rel", ".", "squeeze", "(", ")", "\n", "seq_len", "=", "seq_", ".", "shape", "[", "2", "]", "\n", "max_nodes", "=", "seq_", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "V", "=", "np", ".", "zeros", "(", "(", "seq_len", ",", "max_nodes", ",", "2", ")", ")", "\n", "A", "=", "np", ".", "zeros", "(", "(", "seq_len", ",", "max_nodes", ",", "max_nodes", ")", ")", "\n", "for", "s", "in", "range", "(", "seq_len", ")", ":", "\n", "        ", "step_", "=", "seq_", "[", ":", ",", ":", ",", "s", "]", "\n", "step_rel", "=", "seq_rel", "[", ":", ",", ":", ",", "s", "]", "\n", "for", "h", "in", "range", "(", "len", "(", "step_", ")", ")", ":", "\n", "            ", "V", "[", "s", ",", "h", ",", ":", "]", "=", "step_rel", "[", "h", "]", "\n", "A", "[", "s", ",", "h", ",", "h", "]", "=", "1", "\n", "for", "k", "in", "range", "(", "h", "+", "1", ",", "len", "(", "step_", ")", ")", ":", "\n", "                ", "l2_norm", "=", "anorm", "(", "step_rel", "[", "h", "]", ",", "step_rel", "[", "k", "]", ")", "\n", "A", "[", "s", ",", "h", ",", "k", "]", "=", "l2_norm", "\n", "A", "[", "s", ",", "k", ",", "h", "]", "=", "l2_norm", "\n", "", "", "if", "norm_lap_matr", ":", "\n", "            ", "G", "=", "nx", ".", "from_numpy_matrix", "(", "A", "[", "s", ",", ":", ",", ":", "]", ")", "\n", "A", "[", "s", ",", ":", ",", ":", "]", "=", "nx", ".", "normalized_laplacian_matrix", "(", "G", ")", ".", "toarray", "(", ")", "\n", "\n", "", "", "return", "torch", ".", "from_numpy", "(", "V", ")", ".", "type", "(", "torch", ".", "float", ")", ",", "torch", ".", "from_numpy", "(", "A", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.poly_fit": [[56, 72], ["numpy.linspace", "numpy.polyfit", "numpy.polyfit"], "function", ["None"], ["", "def", "poly_fit", "(", "traj", ",", "traj_len", ",", "threshold", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    - traj: Numpy array of shape (2, traj_len)\n    - traj_len: Len of trajectory\n    - threshold: Minimum error to be considered for non linear traj\n    Output:\n    - int: 1 -> Non Linear 0-> Linear\n    \"\"\"", "\n", "t", "=", "np", ".", "linspace", "(", "0", ",", "traj_len", "-", "1", ",", "traj_len", ")", "\n", "res_x", "=", "np", ".", "polyfit", "(", "t", ",", "traj", "[", "0", ",", "-", "traj_len", ":", "]", ",", "2", ",", "full", "=", "True", ")", "[", "1", "]", "\n", "res_y", "=", "np", ".", "polyfit", "(", "t", ",", "traj", "[", "1", ",", "-", "traj_len", ":", "]", ",", "2", ",", "full", "=", "True", ")", "[", "1", "]", "\n", "if", "res_x", "+", "res_y", ">=", "threshold", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "return", "0.0", "\n", "", "", "def", "read_file", "(", "_path", ",", "delim", "=", "'\\t'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.abduallahmohamed_Social-STGCNN.None.utils.read_file": [[72, 84], ["numpy.asarray", "open", "line.strip().split.strip().split", "data.append", "float", "line.strip().split.strip"], "function", ["None"], ["", "", "def", "read_file", "(", "_path", ",", "delim", "=", "'\\t'", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "if", "delim", "==", "'tab'", ":", "\n", "        ", "delim", "=", "'\\t'", "\n", "", "elif", "delim", "==", "'space'", ":", "\n", "        ", "delim", "=", "' '", "\n", "", "with", "open", "(", "_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "delim", ")", "\n", "line", "=", "[", "float", "(", "i", ")", "for", "i", "in", "line", "]", "\n", "data", ".", "append", "(", "line", ")", "\n", "", "", "return", "np", ".", "asarray", "(", "data", ")", "\n", "\n"]]}