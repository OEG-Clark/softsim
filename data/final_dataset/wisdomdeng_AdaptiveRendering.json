{"home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg.net": [[11, 51], ["scipy.io.loadmat", "numpy.mean", "enumerate", "len", "len", "numpy.transpose", "bias.reshape.reshape", "vgg._conv_layer", "tensorflow.nn.relu", "vgg._pool_layer"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg._conv_layer", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg._pool_layer"], ["def", "net", "(", "data_path", ",", "input_image", ")", ":", "\n", "    ", "layers", "=", "(", "\n", "'conv1_1'", ",", "'relu1_1'", ",", "'conv1_2'", ",", "'relu1_2'", ",", "'pool1'", ",", "\n", "\n", "'conv2_1'", ",", "'relu2_1'", ",", "'conv2_2'", ",", "'relu2_2'", ",", "'pool2'", ",", "\n", "\n", "'conv3_1'", ",", "'relu3_1'", ",", "'conv3_2'", ",", "'relu3_2'", ",", "'conv3_3'", ",", "\n", "'relu3_3'", ",", "'conv3_4'", ",", "'relu3_4'", ",", "'pool3'", ",", "\n", "\n", "'conv4_1'", ",", "'relu4_1'", ",", "'conv4_2'", ",", "'relu4_2'", ",", "'conv4_3'", ",", "\n", "'relu4_3'", ",", "'conv4_4'", ",", "'relu4_4'", ",", "'pool4'", ",", "\n", "\n", "'conv5_1'", ",", "'relu5_1'", ",", "'conv5_2'", ",", "'relu5_2'", ",", "'conv5_3'", ",", "\n", "'relu5_3'", ",", "'conv5_4'", ",", "'relu5_4'", "\n", ")", "\n", "\n", "data", "=", "scipy", ".", "io", ".", "loadmat", "(", "data_path", ")", "\n", "mean", "=", "data", "[", "'normalization'", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "mean_pixel", "=", "np", ".", "mean", "(", "mean", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "weights", "=", "data", "[", "'layers'", "]", "[", "0", "]", "\n", "\n", "net", "=", "{", "}", "\n", "current", "=", "input_image", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "layers", ")", ":", "\n", "        ", "kind", "=", "name", "[", ":", "4", "]", "\n", "if", "kind", "==", "'conv'", ":", "\n", "            ", "kernels", ",", "bias", "=", "weights", "[", "i", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "# matconvnet: weights are [width, height, in_channels, out_channels]", "\n", "# tensorflow: weights are [height, width, in_channels, out_channels]", "\n", "kernels", "=", "np", ".", "transpose", "(", "kernels", ",", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "-", "1", ")", "\n", "current", "=", "_conv_layer", "(", "current", ",", "kernels", ",", "bias", ")", "\n", "", "elif", "kind", "==", "'relu'", ":", "\n", "            ", "current", "=", "tf", ".", "nn", ".", "relu", "(", "current", ")", "\n", "", "elif", "kind", "==", "'pool'", ":", "\n", "            ", "current", "=", "_pool_layer", "(", "current", ")", "\n", "", "net", "[", "name", "]", "=", "current", "\n", "\n", "", "assert", "len", "(", "net", ")", "==", "len", "(", "layers", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg._conv_layer": [[53, 57], ["tensorflow.nn.conv2d", "tensorflow.nn.bias_add", "tensorflow.constant"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d"], ["", "def", "_conv_layer", "(", "input", ",", "weights", ",", "bias", ")", ":", "\n", "    ", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "input", ",", "tf", ".", "constant", "(", "weights", ")", ",", "strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "'SAME'", ")", "\n", "return", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg._pool_layer": [[59, 62], ["tensorflow.nn.max_pool"], "function", ["None"], ["", "def", "_pool_layer", "(", "input", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "max_pool", "(", "input", ",", "ksize", "=", "(", "1", ",", "2", ",", "2", ",", "1", ")", ",", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "1", ")", ",", "\n", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg.preprocess": [[64, 66], ["None"], "function", ["None"], ["", "def", "preprocess", "(", "image", ")", ":", "\n", "    ", "return", "image", "-", "MEAN_PIXEL", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg.unprocess": [[68, 70], ["None"], "function", ["None"], ["", "def", "unprocess", "(", "image", ")", ":", "\n", "    ", "return", "image", "+", "MEAN_PIXEL", "\n", "", ""]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.batch_norm.__init__": [[14, 19], ["tensorflow.variable_scope"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-5", ",", "momentum", "=", "0.9", ",", "name", "=", "\"batch_norm\"", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.batch_norm.__call__": [[20, 23], ["tensorflow.contrib.layers.batch_norm"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "x", ",", "train", "=", "True", ")", ":", "\n", "        ", "return", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "x", ",", "decay", "=", "self", ".", "momentum", ",", "updates_collections", "=", "None", ",", "epsilon", "=", "self", ".", "epsilon", ",", "\n", "scale", "=", "True", ",", "scope", "=", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.binary_cross_entropy": [[25, 42], ["tensorflow.python.framework.ops.op_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.reduce_mean", "tensorflow.log", "tensorflow.log"], "function", ["None"], ["", "", "def", "binary_cross_entropy", "(", "preds", ",", "targets", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Computes binary cross entropy given `preds`.\n\n    For brevity, let `x = `, `z = targets`.  The logistic loss is\n\n        loss(x, z) = - sum_i (x[i] * log(z[i]) + (1 - x[i]) * log(1 - z[i]))\n\n    Args:\n        preds: A `Tensor` of type `float32` or `float64`.\n        targets: A `Tensor` of the same type and shape as `preds`.\n    \"\"\"", "\n", "eps", "=", "1e-12", "\n", "with", "ops", ".", "op_scope", "(", "[", "preds", ",", "targets", "]", ",", "name", ",", "\"bce_loss\"", ")", "as", "name", ":", "\n", "        ", "preds", "=", "ops", ".", "convert_to_tensor", "(", "preds", ",", "name", "=", "\"preds\"", ")", "\n", "targets", "=", "ops", ".", "convert_to_tensor", "(", "targets", ",", "name", "=", "\"targets\"", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "-", "(", "targets", "*", "tf", ".", "log", "(", "preds", "+", "eps", ")", "+", "\n", "(", "1.", "-", "targets", ")", "*", "tf", ".", "log", "(", "1.", "-", "preds", "+", "eps", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv_cond_concat": [[44, 49], ["x.get_shape", "y.get_shape", "tensorflow.concat", "tensorflow.ones"], "function", ["None"], ["", "", "def", "conv_cond_concat", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"Concatenate conditioning vector on feature map axis.\"\"\"", "\n", "x_shapes", "=", "x", ".", "get_shape", "(", ")", "\n", "y_shapes", "=", "y", ".", "get_shape", "(", ")", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "y", "*", "tf", ".", "ones", "(", "[", "x_shapes", "[", "0", "]", ",", "x_shapes", "[", "1", "]", ",", "x_shapes", "[", "2", "]", ",", "y_shapes", "[", "3", "]", "]", ")", "]", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d": [[51, 63], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.nn.bias_add", "tf.reshape.get_shape", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer", "input_.get_shape"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d"], ["", "def", "conv2d", "(", "input_", ",", "output_dim", ",", "\n", "k_h", "=", "5", ",", "k_w", "=", "5", ",", "d_h", "=", "2", ",", "d_w", "=", "2", ",", "stddev", "=", "0.02", ",", "\n", "name", "=", "\"conv2d\"", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "'w'", ",", "[", "k_h", ",", "k_w", ",", "input_", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "input_", ",", "w", ",", "strides", "=", "[", "1", ",", "d_h", ",", "d_w", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "output_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "conv", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", ",", "conv", ".", "get_shape", "(", ")", ")", "\n", "\n", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.deconv2d": [[65, 89], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.nn.conv2d_transpose", "tensorflow.nn.bias_add", "tf.nn.deconv2d.get_shape", "tensorflow.random_normal_initializer", "tensorflow.nn.deconv2d", "tensorflow.constant_initializer", "input_.get_shape"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.deconv2d"], ["", "", "def", "deconv2d", "(", "input_", ",", "output_shape", ",", "\n", "k_h", "=", "5", ",", "k_w", "=", "5", ",", "d_h", "=", "2", ",", "d_w", "=", "2", ",", "stddev", "=", "0.02", ",", "\n", "name", "=", "\"deconv2d\"", ",", "with_w", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "# filter : [height, width, output_channels, in_channels]", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "'w'", ",", "[", "k_h", ",", "k_w", ",", "output_shape", "[", "-", "1", "]", ",", "input_", ".", "get_shape", "(", ")", "[", "-", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "deconv", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "input_", ",", "w", ",", "output_shape", "=", "output_shape", ",", "\n", "strides", "=", "[", "1", ",", "d_h", ",", "d_w", ",", "1", "]", ")", "\n", "\n", "# Support for verisons of TensorFlow before 0.7.0", "\n", "", "except", "AttributeError", ":", "\n", "            ", "deconv", "=", "tf", ".", "nn", ".", "deconv2d", "(", "input_", ",", "w", ",", "output_shape", "=", "output_shape", ",", "\n", "strides", "=", "[", "1", ",", "d_h", ",", "d_w", ",", "1", "]", ")", "\n", "\n", "", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "output_shape", "[", "-", "1", "]", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "deconv", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "bias_add", "(", "deconv", ",", "biases", ")", ",", "deconv", ".", "get_shape", "(", ")", ")", "\n", "\n", "if", "with_w", ":", "\n", "            ", "return", "deconv", ",", "w", ",", "biases", "\n", "", "else", ":", "\n", "            ", "return", "deconv", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.lrelu": [[91, 93], ["tensorflow.maximum"], "function", ["None"], ["", "", "", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ",", "name", "=", "\"lrelu\"", ")", ":", "\n", "    ", "return", "tf", ".", "maximum", "(", "x", ",", "leak", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.linear": [[95, 107], ["input_.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "input_.get_shape", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer", "tensorflow.matmul", "tensorflow.matmul"], "function", ["None"], ["", "def", "linear", "(", "input_", ",", "output_size", ",", "scope", "=", "None", ",", "stddev", "=", "0.02", ",", "bias_start", "=", "0.0", ",", "with_w", "=", "False", ")", ":", "\n", "    ", "shape", "=", "input_", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"Linear\"", ")", ":", "\n", "        ", "matrix", "=", "tf", ".", "get_variable", "(", "\"Matrix\"", ",", "[", "shape", "[", "1", "]", ",", "output_size", "]", ",", "tf", ".", "float32", ",", "\n", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "[", "output_size", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "bias_start", ")", ")", "\n", "if", "with_w", ":", "\n", "            ", "return", "tf", ".", "matmul", "(", "input_", ",", "matrix", ")", "+", "bias", ",", "matrix", ",", "bias", "\n", "", "else", ":", "\n", "            ", "return", "tf", ".", "matmul", "(", "input_", ",", "matrix", ")", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.adaptive_filter": [[110, 218], ["tensorflow.nn.max_pool", "tensorflow.nn.max_pool", "tensorflow.reshape", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.Variable", "tensorflow.nn.bias_add", "tensorflow.nn.relu", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.Variable", "tensorflow.nn.bias_add", "tensorflow.nn.relu", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.Variable", "tensorflow.nn.bias_add", "tensorflow.nn.relu", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.Variable", "tensorflow.nn.bias_add", "tensorflow.nn.relu", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.Variable", "tensorflow.nn.bias_add", "tensorflow.nn.relu", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.truncated_normal", "tensorflow.constant", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d"], ["", "", "", "def", "adaptive_filter", "(", "style", ",", "input_filt_dim", ",", "output_filt_dim", ")", ":", "\n", "    ", "\"\"\"Build the AlexNet model.\n    Args:\n      style: Image Tensor\n    Returns:\n      pool5: the last Tensor in the convolutional component of AlexNet.\n      parameters: a list of Tensors corresponding to the weights and biases of the\n          AlexNet model.\n    \"\"\"", "\n", "# print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')", "\n", "# print('input_filt_dim: ' + str(input_filt_dim))", "\n", "# print('output_filt_dim: ' + str(output_filt_dim))", "\n", "# print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')", "\n", "\n", "parameters", "=", "[", "]", "\n", "# conv1", "\n", "with", "tf", ".", "name_scope", "(", "'conv1'", ")", "as", "scope", ":", "\n", "        ", "kernel", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "11", ",", "11", ",", "3", ",", "96", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "stddev", "=", "1e-1", ")", ",", "name", "=", "'g_conv1_weights'", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "style", ",", "kernel", ",", "[", "1", ",", "4", ",", "4", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "biases", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "96", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'g_conv1_biases'", ")", "\n", "bias", "=", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", "\n", "conv1", "=", "tf", ".", "nn", ".", "relu", "(", "bias", ",", "name", "=", "scope", ")", "\n", "# print_activations(conv1)", "\n", "parameters", "+=", "[", "kernel", ",", "biases", "]", "\n", "\n", "# lrn1", "\n", "# TODO(shlens, jiayq): Add a GPU version of local response normalization.", "\n", "\n", "# pool1", "\n", "", "pool1", "=", "tf", ".", "nn", ".", "max_pool", "(", "conv1", ",", "\n", "ksize", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "name", "=", "'g_pool1'", ")", "\n", "# print_activations(pool1)", "\n", "\n", "# conv2", "\n", "with", "tf", ".", "name_scope", "(", "'conv2'", ")", "as", "scope", ":", "\n", "        ", "kernel", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "5", ",", "5", ",", "96", ",", "256", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "stddev", "=", "1e-1", ")", ",", "name", "=", "'g_conv2_weights'", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "pool1", ",", "kernel", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "biases", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "256", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'g_conv2_biases'", ")", "\n", "bias", "=", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", "\n", "conv2", "=", "tf", ".", "nn", ".", "relu", "(", "bias", ",", "name", "=", "scope", ")", "\n", "parameters", "+=", "[", "kernel", ",", "biases", "]", "\n", "# print_activations(conv2)", "\n", "\n", "# pool2", "\n", "", "pool2", "=", "tf", ".", "nn", ".", "max_pool", "(", "conv2", ",", "\n", "ksize", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "name", "=", "'g_pool2'", ")", "\n", "# print_activations(pool2)", "\n", "\n", "# conv3: kernel stride change from 1 x 1 to 3 x 3, make output feature shape 5 x 5 x 384", "\n", "with", "tf", ".", "name_scope", "(", "'conv3'", ")", "as", "scope", ":", "\n", "        ", "kernel", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "3", ",", "3", ",", "256", ",", "384", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "stddev", "=", "1e-1", ")", ",", "name", "=", "'g_conv3_weights'", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "pool2", ",", "kernel", ",", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "biases", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "384", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'g_conv3_biases'", ")", "\n", "bias", "=", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", "\n", "conv3", "=", "tf", ".", "nn", ".", "relu", "(", "bias", ",", "name", "=", "scope", ")", "\n", "parameters", "+=", "[", "kernel", ",", "biases", "]", "\n", "# print_activations(conv3)", "\n", "\n", "# conv4: conv4 output dim change from 384 to input_filt_dim", "\n", "", "with", "tf", ".", "name_scope", "(", "'conv4'", ")", "as", "scope", ":", "\n", "        ", "kernel", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "3", ",", "3", ",", "384", ",", "96", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "stddev", "=", "1e-1", ")", ",", "name", "=", "'g_conv4_weights'", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "conv3", ",", "kernel", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "biases", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "96", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'g_conv4_biases'", ")", "\n", "bias", "=", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", "\n", "conv4", "=", "tf", ".", "nn", ".", "relu", "(", "bias", ",", "name", "=", "scope", ")", "\n", "parameters", "+=", "[", "kernel", ",", "biases", "]", "\n", "# print_activations(conv4)", "\n", "\n", "# conv5: conv5 input dim change to input_filt_dim, output dim change to output_filt_dim", "\n", "# conv5 output shape 5 x 5 x input_filt_dim x output_filt_dim", "\n", "", "with", "tf", ".", "name_scope", "(", "'conv5'", ")", "as", "scope", ":", "\n", "        ", "kernel", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "3", ",", "3", ",", "96", ",", "int", "(", "input_filt_dim", ")", "*", "int", "(", "output_filt_dim", ")", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "stddev", "=", "1e-1", ")", ",", "name", "=", "'g_conv5_weights'", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "conv4", ",", "kernel", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "biases", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "int", "(", "input_filt_dim", ")", "*", "int", "(", "output_filt_dim", ")", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'g_conv5_biases'", ")", "\n", "bias", "=", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", "\n", "conv5", "=", "tf", ".", "nn", ".", "relu", "(", "bias", ",", "name", "=", "scope", ")", "\n", "parameters", "+=", "[", "kernel", ",", "biases", "]", "\n", "# print_activations(conv5)", "\n", "\n", "", "filt_h", "=", "conv5", ".", "shape", "[", "1", "]", "\n", "filt_w", "=", "conv5", ".", "shape", "[", "2", "]", "\n", "\n", "ada_filt", "=", "tf", ".", "reshape", "(", "conv5", ",", "(", "int", "(", "filt_h", ")", ",", "int", "(", "filt_w", ")", ",", "int", "(", "input_filt_dim", ")", ",", "int", "(", "output_filt_dim", ")", ")", ")", "\n", "\n", "# print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')", "\n", "# print(conv5.shape)", "\n", "# print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')", "\n", "\n", "return", "ada_filt", "\n", "# return ada_filt, parameters", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.main.main": [[54, 76], ["os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tensorflow.Session", "print", "ada_rendering.pose2image", "print", "print", "ada_rendering.pose2image.train", "print", "ada_rendering.pose2image.test", "tensorflow.ConfigProto"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.train", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.test"], ["def", "main", "(", "_", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "checkpoint_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "sample_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "sample_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "test_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "test_dir", ")", "\n", "\n", "", "with", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "'GPU'", ":", "1", "}", ")", ")", "as", "sess", ":", "\n", "        ", "print", "(", "\"Creating Model...\"", ")", "\n", "model", "=", "pose2image", "(", "sess", ",", "image_size", "=", "args", ".", "fine_size", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "output_size", "=", "args", ".", "fine_size", ",", "dataset_name", "=", "args", ".", "dataset_name", ",", "\n", "checkpoint_dir", "=", "args", ".", "checkpoint_dir", ",", "sample_dir", "=", "args", ".", "sample_dir", ",", "\n", "dataset", "=", "args", ".", "dataset", ",", "dataset_dir", "=", "args", ".", "dataset_dir", ",", "vgg_path", "=", "args", ".", "vgg_path", ")", "\n", "print", "(", "\"Model Created...\"", ")", "\n", "# st()", "\n", "if", "args", ".", "phase", "==", "'train'", ":", "\n", "            ", "print", "(", "\"Start to train model...\"", ")", "\n", "model", ".", "train", "(", "args", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Start to test model...\"", ")", "\n", "model", ".", "test", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.__init__": [[32, 96], ["ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ada_rendering.pose2image.build_model"], "methods", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.build_model"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "image_size", "=", "128", ",", "\n", "batch_size", "=", "1", ",", "sample_size", "=", "1", ",", "output_size", "=", "128", ",", "\n", "gf_dim", "=", "32", ",", "df_dim", "=", "32", ",", "L1_lambda", "=", "100", ",", "\n", "input_pose_dim", "=", "3", ",", "input_style_dim", "=", "3", ",", "output_image_dim", "=", "3", ",", "dataset_name", "=", "'facades'", ",", "\n", "content_weight", "=", "1e-4", ",", "style_weight", "=", "1e-14", ",", "\n", "checkpoint_dir", "=", "None", ",", "sample_dir", "=", "None", ",", "dataset", "=", "'fashion'", ",", "dataset_dir", "=", "'./dataset'", ",", "\n", "vgg_path", "=", "'./pretrained_vgg/imagenet-vgg-verydeep-19.mat'", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            sess: TensorFlow session\n            batch_size: The size of batch. Should be specified before training.\n            output_size: (optional) The resolution in pixels of the images. [256]\n            gf_dim: (optional) Dimension of gen filters in first conv layer. [64]\n            df_dim: (optional) Dimension of discrim filters in first conv layer. [64]\n            input_c_dim: (optional) Dimension of input image color. For grayscale input, set to 1. [3]\n            output_c_dim: (optional) Dimension of output image color. For grayscale input, set to 1. [3]\n        \"\"\"", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "is_grayscale", "=", "(", "input_style_dim", "==", "1", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "sample_size", "=", "sample_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "dataset_dir", "=", "dataset_dir", "\n", "self", ".", "vgg_path", "=", "vgg_path", "\n", "\n", "self", ".", "gf_dim", "=", "gf_dim", "\n", "self", ".", "df_dim", "=", "df_dim", "\n", "\n", "self", ".", "input_style_dim", "=", "input_style_dim", "\n", "self", ".", "input_pose_dim", "=", "input_pose_dim", "\n", "self", ".", "output_image_dim", "=", "output_image_dim", "\n", "\n", "self", ".", "L1_lambda", "=", "L1_lambda", "\n", "\n", "self", ".", "style_weight", "=", "style_weight", "\n", "self", ".", "content_weight", "=", "content_weight", "\n", "\n", "# batch normalization : deals with poor initialization helps gradient flow", "\n", "self", ".", "d_bn1", "=", "batch_norm", "(", "name", "=", "'d_bn1'", ")", "\n", "self", ".", "d_bn2", "=", "batch_norm", "(", "name", "=", "'d_bn2'", ")", "\n", "self", ".", "d_bn3", "=", "batch_norm", "(", "name", "=", "'d_bn3'", ")", "\n", "\n", "self", ".", "g_bn_e2", "=", "batch_norm", "(", "name", "=", "'g_bn_e2'", ")", "\n", "self", ".", "g_bn_e3", "=", "batch_norm", "(", "name", "=", "'g_bn_e3'", ")", "\n", "self", ".", "g_bn_e4", "=", "batch_norm", "(", "name", "=", "'g_bn_e4'", ")", "\n", "self", ".", "g_bn_e5", "=", "batch_norm", "(", "name", "=", "'g_bn_e5'", ")", "\n", "self", ".", "g_bn_e6", "=", "batch_norm", "(", "name", "=", "'g_bn_e6'", ")", "\n", "self", ".", "g_bn_e7", "=", "batch_norm", "(", "name", "=", "'g_bn_e7'", ")", "\n", "self", ".", "g_bn_e8", "=", "batch_norm", "(", "name", "=", "'g_bn_e8'", ")", "\n", "\n", "self", ".", "g_bn_d1", "=", "batch_norm", "(", "name", "=", "'g_bn_d1'", ")", "\n", "self", ".", "g_bn_d2", "=", "batch_norm", "(", "name", "=", "'g_bn_d2'", ")", "\n", "self", ".", "g_bn_d3", "=", "batch_norm", "(", "name", "=", "'g_bn_d3'", ")", "\n", "self", ".", "g_bn_d4", "=", "batch_norm", "(", "name", "=", "'g_bn_d4'", ")", "\n", "self", ".", "g_bn_d5", "=", "batch_norm", "(", "name", "=", "'g_bn_d5'", ")", "\n", "self", ".", "g_bn_d6", "=", "batch_norm", "(", "name", "=", "'g_bn_d6'", ")", "\n", "self", ".", "g_bn_d7", "=", "batch_norm", "(", "name", "=", "'g_bn_d7'", ")", "\n", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "checkpoint_dir", "=", "checkpoint_dir", "\n", "self", ".", "build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.build_model": [[97, 188], ["tensorflow.placeholder", "ada_rendering.pose2image.generator", "tensorflow.concat", "tensorflow.concat", "ada_rendering.pose2image.discriminator", "ada_rendering.pose2image.discriminator", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.image", "vgg.preprocess", "vgg.net", "vgg.preprocess", "vgg.net", "vgg.preprocess", "vgg.net", "vgg.preprocess", "vgg.net", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.trainable_variables", "tensorflow.train.Saver", "map", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.matmul", "map", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.matmul", "style_losses.append", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "layer.get_shape", "layer.get_shape", "functools.reduce", "int", "tensorflow.nn.l2_loss", "int", "int", "tensorflow.nn.l2_loss", "int", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.reduce_mean", "int", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_mean", "int", "int", "tensorflow.abs", "tensorflow.ones_like"], "methods", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.generator", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.discriminator", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.discriminator", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg.preprocess", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg.net", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg.preprocess", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg.net", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg.preprocess", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg.net", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg.preprocess", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.vgg.net"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "[", "self", ".", "batch_size", ",", "self", ".", "image_size", ",", "self", ".", "image_size", ",", "\n", "self", ".", "input_pose_dim", "+", "self", ".", "input_style_dim", "+", "self", ".", "output_image_dim", "]", ",", "\n", "name", "=", "'pose_and_style'", ")", "\n", "\n", "self", ".", "style", "=", "self", ".", "real_data", "[", ":", ",", ":", ",", ":", ",", ":", "self", ".", "input_style_dim", "]", "\n", "self", ".", "pose", "=", "self", ".", "real_data", "[", ":", ",", ":", ",", ":", ",", "self", ".", "input_style_dim", ":", "self", ".", "input_style_dim", "+", "self", ".", "input_pose_dim", "]", "\n", "self", ".", "target", "=", "self", ".", "real_data", "[", ":", ",", ":", ",", ":", ",", "\n", "self", ".", "input_style_dim", "+", "self", ".", "input_pose_dim", ":", "self", ".", "input_style_dim", "+", "self", ".", "input_pose_dim", "+", "self", ".", "output_image_dim", "]", "\n", "\n", "# print self.input_style_dim, self.input_pose_dim, self.output_image_dim", "\n", "\n", "self", ".", "fake_target", "=", "self", ".", "generator", "(", "self", ".", "pose", ",", "self", ".", "style", ")", "\n", "\n", "self", ".", "real_target_with_style", "=", "tf", ".", "concat", "(", "[", "self", ".", "pose", ",", "self", ".", "target", "]", ",", "3", ")", "\n", "self", ".", "fake_target_with_style", "=", "tf", ".", "concat", "(", "[", "self", ".", "pose", ",", "self", ".", "fake_target", "]", ",", "3", ")", "\n", "self", ".", "D", ",", "self", ".", "D_logits", "=", "self", ".", "discriminator", "(", "self", ".", "real_target_with_style", ",", "reuse", "=", "False", ")", "\n", "self", ".", "D_", ",", "self", ".", "D_logits_", "=", "self", ".", "discriminator", "(", "self", ".", "fake_target_with_style", ",", "reuse", "=", "True", ")", "\n", "\n", "self", ".", "d_sum", "=", "tf", ".", "summary", ".", "histogram", "(", "\"d\"", ",", "self", ".", "D", ")", "\n", "self", ".", "d__sum", "=", "tf", ".", "summary", ".", "histogram", "(", "\"d_\"", ",", "self", ".", "D_", ")", "\n", "self", ".", "fake_target_sum", "=", "tf", ".", "summary", ".", "image", "(", "\"fake_target\"", ",", "self", ".", "fake_target", ")", "\n", "\n", "# style loss", "\n", "style_pre", "=", "vgg", ".", "preprocess", "(", "(", "self", ".", "style", "+", "1.0", ")", "*", "127.5", ")", "\n", "net_style", "=", "vgg", ".", "net", "(", "self", ".", "vgg_path", ",", "style_pre", ")", "\n", "\n", "fake_target_pre", "=", "vgg", ".", "preprocess", "(", "(", "self", ".", "fake_target", "+", "1.0", ")", "*", "127.5", ")", "\n", "net_fake_target", "=", "vgg", ".", "net", "(", "self", ".", "vgg_path", ",", "fake_target_pre", ")", "\n", "\n", "style_losses", "=", "[", "]", "\n", "for", "style_layer", "in", "STYLE_LAYERS", ":", "\n", "            ", "layer", "=", "net_fake_target", "[", "style_layer", "]", "\n", "# batch_size, h, w, channel", "\n", "bs", ",", "height", ",", "width", ",", "filters", "=", "map", "(", "lambda", "i", ":", "i", ".", "value", ",", "layer", ".", "get_shape", "(", ")", ")", "\n", "feats", "=", "tf", ".", "reshape", "(", "layer", ",", "(", "bs", ",", "height", "*", "width", ",", "filters", ")", ")", "\n", "feats_T", "=", "tf", ".", "transpose", "(", "feats", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "grams_fake_target", "=", "tf", ".", "matmul", "(", "feats_T", ",", "feats", ")", "\n", "\n", "layer", "=", "net_style", "[", "style_layer", "]", "\n", "# batch_size, h, w, channel", "\n", "bs", ",", "height", ",", "width", ",", "filters", "=", "map", "(", "lambda", "i", ":", "i", ".", "value", ",", "layer", ".", "get_shape", "(", ")", ")", "\n", "feats", "=", "tf", ".", "reshape", "(", "layer", ",", "(", "bs", ",", "height", "*", "width", ",", "filters", ")", ")", "\n", "feats_T", "=", "tf", ".", "transpose", "(", "feats", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "grams_style", "=", "tf", ".", "matmul", "(", "feats_T", ",", "feats", ")", "\n", "\n", "style_losses", ".", "append", "(", "2", "*", "tf", ".", "nn", ".", "l2_loss", "(", "grams_fake_target", "-", "grams_style", ")", ")", "\n", "\n", "", "self", ".", "style_loss", "=", "self", ".", "style_weight", "*", "functools", ".", "reduce", "(", "tf", ".", "add", ",", "style_losses", ")", "/", "(", "\n", "int", "(", "grams_style", ".", "shape", "[", "0", "]", ")", "*", "int", "(", "grams_style", ".", "shape", "[", "1", "]", ")", "*", "int", "(", "grams_style", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "# content loss", "\n", "fake_target_pre", "=", "vgg", ".", "preprocess", "(", "(", "self", ".", "fake_target", "+", "1.0", ")", "*", "127.5", ")", "\n", "net_fake_target", "=", "vgg", ".", "net", "(", "self", ".", "vgg_path", ",", "fake_target_pre", ")", "\n", "\n", "target_pre", "=", "vgg", ".", "preprocess", "(", "(", "self", ".", "target", "+", "1.0", ")", "*", "127.5", ")", "\n", "net_target", "=", "vgg", ".", "net", "(", "self", ".", "vgg_path", ",", "target_pre", ")", "\n", "\n", "content_losses", "=", "[", "]", "\n", "feats_fake_target", "=", "net_fake_target", "[", "CONTENT_LAYER", "]", "\n", "feats_target", "=", "net_target", "[", "CONTENT_LAYER", "]", "\n", "\n", "self", ".", "content_loss", "=", "self", ".", "content_weight", "*", "(", "2", "*", "tf", ".", "nn", ".", "l2_loss", "(", "feats_fake_target", "-", "feats_target", ")", "/", "(", "\n", "int", "(", "feats_target", ".", "shape", "[", "0", "]", ")", "*", "int", "(", "feats_target", ".", "shape", "[", "1", "]", ")", "*", "int", "(", "feats_target", ".", "shape", "[", "2", "]", ")", "*", "int", "(", "\n", "feats_target", ".", "shape", "[", "3", "]", ")", ")", ")", "\n", "\n", "self", ".", "d_loss_real", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "D_logits", ",", "labels", "=", "tf", ".", "ones_like", "(", "self", ".", "D", ")", ")", ")", "\n", "self", ".", "d_loss_fake", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "D_logits_", ",", "labels", "=", "tf", ".", "zeros_like", "(", "self", ".", "D_", ")", ")", ")", "\n", "self", ".", "g_loss", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "D_logits_", ",", "labels", "=", "tf", ".", "ones_like", "(", "self", ".", "D_", ")", ")", ")", "+", "self", ".", "L1_lambda", "*", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "abs", "(", "self", ".", "target", "-", "self", ".", "fake_target", ")", ")", "+", "self", ".", "content_loss", "+", "self", ".", "style_loss", "\n", "# self.g_loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=self.D_logits_, labels=tf.ones_like(self.D_))) + self.content_loss + self.style_loss", "\n", "\n", "self", ".", "d_loss_real_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"d_loss_real\"", ",", "self", ".", "d_loss_real", ")", "\n", "self", ".", "d_loss_fake_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"d_loss_fake\"", ",", "self", ".", "d_loss_fake", ")", "\n", "\n", "self", ".", "d_loss", "=", "self", ".", "d_loss_real", "+", "self", ".", "d_loss_fake", "\n", "\n", "self", ".", "g_loss_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"g_loss\"", ",", "self", ".", "g_loss", ")", "\n", "self", ".", "d_loss_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"d_loss\"", ",", "self", ".", "d_loss", ")", "\n", "\n", "t_vars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "\n", "self", ".", "d_vars", "=", "[", "var", "for", "var", "in", "t_vars", "if", "'d_'", "in", "var", ".", "name", "]", "\n", "self", ".", "g_vars", "=", "[", "var", "for", "var", "in", "t_vars", "if", "'g_'", "in", "var", ".", "name", "]", "\n", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.load_random_samples": [[189, 198], ["numpy.random.choice", "glob.glob.glob", "utils.load_data", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.load_data"], ["", "def", "load_random_samples", "(", "self", ")", ":", "\n", "        ", "data", "=", "np", ".", "random", ".", "choice", "(", "glob", "(", "'./datasets/{}/val/*.jpg'", ".", "format", "(", "self", ".", "dataset_name", ")", ")", ",", "self", ".", "batch_size", ")", "\n", "sample", "=", "[", "load_data", "(", "sample_file", ")", "for", "sample_file", "in", "data", "]", "\n", "\n", "if", "(", "self", ".", "is_grayscale", ")", ":", "\n", "            ", "sample_images", "=", "np", ".", "array", "(", "sample", ")", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "sample_images", "=", "np", ".", "array", "(", "sample", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "sample_images", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.sample_model": [[199, 208], ["ada_rendering.pose2image.sess.run", "utils.save_images", "print"], "methods", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.save_images"], ["", "def", "sample_model", "(", "self", ",", "batch_images", ",", "sample_dir", ",", "epoch", ",", "idx", ")", ":", "\n", "        ", "sample_images", "=", "batch_images", "\n", "samples", ",", "d_loss", ",", "g_loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "fake_target", ",", "self", ".", "d_loss", ",", "self", ".", "g_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "real_data", ":", "sample_images", "}", "\n", ")", "\n", "save_images", "(", "samples", ",", "[", "self", ".", "batch_size", ",", "1", "]", ",", "\n", "'{}/train_{:02d}_{:04d}.png'", ".", "format", "(", "sample_dir", ",", "epoch", ",", "idx", ")", ")", "\n", "print", "(", "\"[Sample] d_loss: {:.8f}, g_loss: {:.8f}\"", ".", "format", "(", "d_loss", ",", "g_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.train": [[209, 314], ["tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.global_variables_initializer", "ada_rendering.pose2image.sess.run", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.FileWriter", "time.time", "ada_rendering.pose2image.load_old", "create_database", "six.moves.xrange", "print", "print", "len", "create_database", "six.moves.xrange", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "min", "ada_rendering.pose2image.sess.run", "ada_rendering.pose2image.writer.add_summary", "ada_rendering.pose2image.sess.run", "ada_rendering.pose2image.writer.add_summary", "ada_rendering.pose2image.sess.run", "ada_rendering.pose2image.writer.add_summary", "ada_rendering.pose2image.sess.run", "ada_rendering.pose2image.writer.add_summary", "ada_rendering.pose2image.d_loss_fake.eval", "ada_rendering.pose2image.d_loss_real.eval", "ada_rendering.pose2image.g_loss.eval", "ada_rendering.pose2image.content_loss.eval", "ada_rendering.pose2image.style_loss.eval", "print", "numpy.mod", "six.moves.xrange", "len", "utils.load_data", "numpy.array().astype", "numpy.mod", "ada_rendering.pose2image.sample_model", "numpy.mod", "ada_rendering.pose2image.save_old", "str", "os.path.exists", "os.makedirs", "ada_rendering.pose2image.sess.run", "utils.save_images", "numpy.array().astype", "utils.load_data", "numpy.array().astype", "numpy.array", "numpy.array().astype", "numpy.array", "time.time", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.merge", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.merge", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.load_old", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.load_data", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.sample_model", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.save_old", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.save_images", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.load_data"], ["", "def", "train", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"Train pose2image\"\"\"", "\n", "d_optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "args", ".", "lr", ",", "beta1", "=", "args", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "d_loss", ",", "var_list", "=", "self", ".", "d_vars", ")", "\n", "g_optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "args", ".", "lr", ",", "beta1", "=", "args", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "g_loss", ",", "var_list", "=", "self", ".", "g_vars", ")", "\n", "\n", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init_op", ")", "\n", "\n", "self", ".", "g_sum", "=", "tf", ".", "summary", ".", "merge", "(", "[", "self", ".", "d__sum", ",", "self", ".", "fake_target_sum", ",", "self", ".", "d_loss_fake_sum", ",", "self", ".", "g_loss_sum", "]", ")", "\n", "self", ".", "d_sum", "=", "tf", ".", "summary", ".", "merge", "(", "[", "self", ".", "d_sum", ",", "self", ".", "d_loss_real_sum", ",", "self", ".", "d_loss_sum", "]", ")", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "\"./logs\"", ",", "self", ".", "sess", ".", "graph", ")", "\n", "\n", "counter", "=", "1", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "self", ".", "load_old", "(", "self", ".", "checkpoint_dir", ")", ":", "\n", "            ", "print", "(", "\" [*] Load SUCCESS\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\" [!] Load failed...\"", ")", "\n", "\n", "# data = create_database('train', 1)", "\n", "# batch_idxs = min(len(data), args.train_size) // self.batch_size", "\n", "", "data_test", "=", "create_database", "(", "'test'", ",", "1", ",", "base_dir", "=", "self", ".", "dataset_dir", ",", "dataset", "=", "self", ".", "dataset", ")", "\n", "batch_idxs_test", "=", "len", "(", "data_test", ")", "//", "self", ".", "batch_size", "\n", "\n", "for", "epoch", "in", "xrange", "(", "args", ".", "epoch", ")", ":", "\n", "\n", "            ", "data", "=", "create_database", "(", "'train'", ",", "1", ",", "base_dir", "=", "self", ".", "dataset_dir", ",", "dataset", "=", "self", ".", "dataset", ")", "\n", "batch_idxs", "=", "min", "(", "len", "(", "data", ")", ",", "args", ".", "train_size", ")", "//", "self", ".", "batch_size", "\n", "\n", "for", "idx", "in", "xrange", "(", "0", ",", "batch_idxs", ")", ":", "\n", "                ", "batch_files", "=", "data", "[", "idx", "*", "self", ".", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "batch", "=", "[", "load_data", "(", "batch_file", ")", "for", "batch_file", "in", "batch_files", "]", "\n", "if", "(", "self", ".", "is_grayscale", ")", ":", "\n", "                    ", "batch_images", "=", "np", ".", "array", "(", "batch", ")", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "                    ", "batch_images", "=", "np", ".", "array", "(", "batch", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Update D network", "\n", "", "_", ",", "summary_str", "=", "self", ".", "sess", ".", "run", "(", "[", "d_optim", ",", "self", ".", "d_sum", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "real_data", ":", "batch_images", "}", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary_str", ",", "counter", ")", "\n", "\n", "# Update G network", "\n", "_", ",", "summary_str", "=", "self", ".", "sess", ".", "run", "(", "[", "g_optim", ",", "self", ".", "g_sum", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "real_data", ":", "batch_images", "}", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary_str", ",", "counter", ")", "\n", "\n", "# Run g_optim twice to make sure that d_loss does not go to zero (different from paper)", "\n", "_", ",", "summary_str", "=", "self", ".", "sess", ".", "run", "(", "[", "g_optim", ",", "self", ".", "g_sum", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "real_data", ":", "batch_images", "}", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary_str", ",", "counter", ")", "\n", "\n", "# Run g_optim three times to make sure that d_loss does not go to zero (different from paper)", "\n", "_", ",", "summary_str", "=", "self", ".", "sess", ".", "run", "(", "[", "g_optim", ",", "self", ".", "g_sum", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "real_data", ":", "batch_images", "}", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary_str", ",", "counter", ")", "\n", "\n", "# # Run g_optim four times to make sure that d_loss does not go to zero (different from paper)", "\n", "# _, summary_str = self.sess.run([g_optim, self.g_sum],", "\n", "#                                feed_dict={ self.real_data: batch_images })", "\n", "# self.writer.add_summary(summary_str, counter)", "\n", "\n", "errD_fake", "=", "self", ".", "d_loss_fake", ".", "eval", "(", "{", "self", ".", "real_data", ":", "batch_images", "}", ")", "\n", "errD_real", "=", "self", ".", "d_loss_real", ".", "eval", "(", "{", "self", ".", "real_data", ":", "batch_images", "}", ")", "\n", "errG", "=", "self", ".", "g_loss", ".", "eval", "(", "{", "self", ".", "real_data", ":", "batch_images", "}", ")", "\n", "\n", "errContent", "=", "self", ".", "content_loss", ".", "eval", "(", "{", "self", ".", "real_data", ":", "batch_images", "}", ")", "\n", "errStyle", "=", "self", ".", "style_loss", ".", "eval", "(", "{", "self", ".", "real_data", ":", "batch_images", "}", ")", "\n", "\n", "counter", "+=", "1", "\n", "print", "(", "\n", "\"Epoch: [%2d] [%4d/%4d] time: %4.4f, d_loss: %.4f, g_loss: %.4f, content_loss: %.4f, style_loss: %.4f\"", "%", "(", "epoch", ",", "idx", ",", "batch_idxs", ",", "\n", "time", ".", "time", "(", ")", "-", "start_time", ",", "errD_fake", "+", "errD_real", ",", "errG", ",", "errContent", ",", "errStyle", ")", ")", "\n", "\n", "if", "np", ".", "mod", "(", "counter", ",", "100", ")", "==", "1", ":", "\n", "                    ", "self", ".", "sample_model", "(", "batch_images", ",", "args", ".", "sample_dir", ",", "epoch", ",", "idx", ")", "\n", "\n", "", "if", "np", ".", "mod", "(", "counter", ",", "1000", ")", "==", "2", ":", "\n", "                    ", "self", ".", "save_old", "(", "args", ".", "checkpoint_dir", ",", "counter", ")", "\n", "\n", "", "", "if", "np", ".", "mod", "(", "epoch", ",", "10", ")", "==", "0", ":", "\n", "                ", "TEST_DIR", "=", "args", ".", "test_dir", "+", "'/debug_epoch_'", "+", "str", "(", "epoch", "+", "1", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "TEST_DIR", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "TEST_DIR", ")", "\n", "", "for", "idx", "in", "xrange", "(", "0", ",", "batch_idxs_test", ")", ":", "\n", "                    ", "batch_files_test", "=", "data_test", "[", "idx", "*", "self", ".", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "batch_test", "=", "[", "load_data", "(", "batch_file_test", ")", "for", "batch_file_test", "in", "batch_files_test", "]", "\n", "if", "(", "self", ".", "is_grayscale", ")", ":", "\n", "                        ", "batch_images_test", "=", "np", ".", "array", "(", "batch_test", ")", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "                        ", "batch_images_test", "=", "np", ".", "array", "(", "batch_test", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "samples_test", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "fake_target", ",", "\n", "feed_dict", "=", "{", "self", ".", "real_data", ":", "batch_images_test", "}", "\n", ")", "\n", "print", "\n", "samples_test", ".", "shape", "\n", "person_idx", "=", "idx", "+", "1", "\n", "save_images", "(", "samples_test", ",", "[", "self", ".", "batch_size", ",", "1", "]", ",", "\n", "'{}/test_{:d}.png'", ".", "format", "(", "TEST_DIR", ",", "person_idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.discriminator": [[315, 336], ["tensorflow.variable_scope", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.linear", "tensorflow.get_variable_scope().reuse_variables", "ops.conv2d", "ada_rendering.pose2image.d_bn1", "ada_rendering.pose2image.d_bn2", "ada_rendering.pose2image.d_bn3", "tensorflow.reshape", "tensorflow.nn.sigmoid", "ops.conv2d", "ops.conv2d", "ops.conv2d", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.lrelu", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.lrelu", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.lrelu", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.lrelu", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.linear", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d"], ["", "", "", "", "def", "discriminator", "(", "self", ",", "image", ",", "y", "=", "None", ",", "reuse", "=", "False", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"discriminator\"", ")", "as", "scope", ":", "\n", "\n", "# image is 128 x 128 x (input_c_dim + output_c_dim)", "\n", "            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "else", ":", "\n", "                ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", "==", "False", "\n", "\n", "", "h0", "=", "lrelu", "(", "conv2d", "(", "image", ",", "self", ".", "df_dim", ",", "name", "=", "'d_h0_conv'", ")", ")", "\n", "# h0 is (64 x 64 x self.df_dim)", "\n", "h1", "=", "lrelu", "(", "self", ".", "d_bn1", "(", "conv2d", "(", "h0", ",", "self", ".", "df_dim", "*", "2", ",", "name", "=", "'d_h1_conv'", ")", ")", ")", "\n", "# h1 is (32 x 32 x self.df_dim*2)", "\n", "h2", "=", "lrelu", "(", "self", ".", "d_bn2", "(", "conv2d", "(", "h1", ",", "self", ".", "df_dim", "*", "4", ",", "name", "=", "'d_h2_conv'", ")", ")", ")", "\n", "# h2 is (16 x 16 x self.df_dim*4)", "\n", "h3", "=", "lrelu", "(", "self", ".", "d_bn3", "(", "conv2d", "(", "h2", ",", "self", ".", "df_dim", "*", "8", ",", "d_h", "=", "1", ",", "d_w", "=", "1", ",", "name", "=", "'d_h3_conv'", ")", ")", ")", "\n", "# h3 is (8 x 8 x self.df_dim*8)", "\n", "h4", "=", "linear", "(", "tf", ".", "reshape", "(", "h3", ",", "[", "self", ".", "batch_size", ",", "-", "1", "]", ")", ",", "1", ",", "'d_h3_lin'", ")", "\n", "\n", "return", "tf", ".", "nn", ".", "sigmoid", "(", "h4", ")", ",", "h4", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.generator": [[337, 417], ["tensorflow.variable_scope", "ops.conv2d", "ada_rendering.pose2image.g_bn_e2", "ada_rendering.pose2image.g_bn_e3", "ada_rendering.pose2image.g_bn_e4", "ada_rendering.pose2image.g_bn_e6", "ada_rendering.pose2image.g_bn_e7", "ops.adaptive_filter", "tensorflow.nn.conv2d", "tensorflow.get_variable", "tensorflow.reshape", "ops.deconv2d", "tensorflow.nn.dropout", "tensorflow.concat", "ops.deconv2d", "tensorflow.nn.dropout", "tensorflow.concat", "ops.deconv2d", "ada_rendering.pose2image.g_bn_d4", "tensorflow.concat", "ops.deconv2d", "ada_rendering.pose2image.g_bn_d5", "tensorflow.concat", "ops.deconv2d", "ada_rendering.pose2image.g_bn_d6", "tensorflow.concat", "ops.deconv2d", "ada_rendering.pose2image.g_bn_d7", "tensorflow.concat", "ops.deconv2d", "tensorflow.nn.tanh", "int", "int", "int", "int", "int", "int", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.lrelu().get_shape", "ops.lrelu", "tensorflow.nn.bias_add", "tensorflow.nn.conv2d.get_shape", "tensorflow.nn.relu", "ada_rendering.pose2image.g_bn_d1", "tensorflow.nn.relu", "ada_rendering.pose2image.g_bn_d2", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "tensorflow.constant_initializer", "ops.lrelu"], "methods", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.adaptive_filter", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.deconv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.deconv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.deconv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.deconv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.deconv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.deconv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.deconv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.conv2d", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.lrelu", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.lrelu", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.lrelu", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.lrelu", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.lrelu", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.lrelu", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ops.lrelu"], ["", "", "def", "generator", "(", "self", ",", "pose", ",", "style", ",", "y", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"generator\"", ")", "as", "scope", ":", "\n", "            ", "s", "=", "self", ".", "output_size", "\n", "s2", ",", "s4", ",", "s8", ",", "s16", ",", "s32", ",", "s64", "=", "int", "(", "s", "/", "2", ")", ",", "int", "(", "s", "/", "4", ")", ",", "int", "(", "s", "/", "8", ")", ",", "int", "(", "s", "/", "16", ")", ",", "int", "(", "s", "/", "32", ")", ",", "int", "(", "s", "/", "64", ")", "\n", "\n", "# pose is (128 x 128 x input_pose_dim)", "\n", "e1", "=", "conv2d", "(", "pose", ",", "self", ".", "gf_dim", ",", "name", "=", "'g_e1_conv'", ")", "\n", "# e1 is (64 x 64 x self.gf_dim)", "\n", "e2", "=", "self", ".", "g_bn_e2", "(", "conv2d", "(", "lrelu", "(", "e1", ")", ",", "self", ".", "gf_dim", "*", "2", ",", "name", "=", "'g_e2_conv'", ")", ")", "\n", "# e2 is (32 x 32 x self.gf_dim*2)", "\n", "e3", "=", "self", ".", "g_bn_e3", "(", "conv2d", "(", "lrelu", "(", "e2", ")", ",", "self", ".", "gf_dim", "*", "4", ",", "name", "=", "'g_e3_conv'", ")", ")", "\n", "# e3 is (16 x 16 x self.gf_dim*4)", "\n", "e4", "=", "self", ".", "g_bn_e4", "(", "conv2d", "(", "lrelu", "(", "e3", ")", ",", "self", ".", "gf_dim", "*", "8", ",", "name", "=", "'g_e4_conv'", ")", ")", "\n", "# e4 is (8 x 8 x self.gf_dim*8)", "\n", "e6", "=", "self", ".", "g_bn_e6", "(", "conv2d", "(", "lrelu", "(", "e4", ")", ",", "self", ".", "gf_dim", "*", "8", ",", "name", "=", "'g_e6_conv'", ")", ")", "\n", "# e6 is (4 x 4 x self.gf_dim*8)", "\n", "e7", "=", "self", ".", "g_bn_e7", "(", "conv2d", "(", "lrelu", "(", "e6", ")", ",", "64", ",", "name", "=", "'g_e7_conv'", ")", ")", "\n", "# e7 is (2 x 2 x 10)", "\n", "\n", "input_filt_dim", "=", "lrelu", "(", "e7", ")", ".", "get_shape", "(", ")", "[", "-", "1", "]", "\n", "output_filt_dim", "=", "64", "\n", "\n", "## Compute the adaptive filter given reference image", "\n", "## Make sure ada_filt size is [5,5,lrelu(e7).get_shape()[-1],self.gf_dim*8]", "\n", "ada_filt", "=", "adaptive_filter", "(", "style", ",", "input_filt_dim", ",", "output_filt_dim", ")", "\n", "## Last conv layer, use adaptive convolution", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "lrelu", "(", "e7", ")", ",", "ada_filt", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ",", "name", "=", "'g_e8_conv'", ")", "\n", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "output_filt_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "e8", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", ",", "conv", ".", "get_shape", "(", ")", ")", "\n", "# e8 = self.g_bn_e8(conv2d(lrelu(e7), self.gf_dim*8, name='g_e8_conv'))", "\n", "# e8 is (1 x 1 x self.gf_dim*8)", "\n", "\n", "\n", "self", ".", "d1", ",", "self", ".", "d1_w", ",", "self", ".", "d1_b", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "e8", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "s64", ",", "s64", ",", "self", ".", "gf_dim", "*", "8", "]", ",", "name", "=", "'g_d1'", ",", "\n", "with_w", "=", "True", ")", "\n", "d1", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "g_bn_d1", "(", "self", ".", "d1", ")", ",", "0.5", ")", "\n", "d1", "=", "tf", ".", "concat", "(", "[", "d1", ",", "e7", "]", ",", "3", ")", "\n", "# d1 is (2 x 2 x self.gf_dim*8*2)", "\n", "\n", "self", ".", "d2", ",", "self", ".", "d2_w", ",", "self", ".", "d2_b", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d1", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "s32", ",", "s32", ",", "self", ".", "gf_dim", "*", "8", "]", ",", "name", "=", "'g_d2'", ",", "\n", "with_w", "=", "True", ")", "\n", "d2", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "g_bn_d2", "(", "self", ".", "d2", ")", ",", "0.5", ")", "\n", "d2", "=", "tf", ".", "concat", "(", "[", "d2", ",", "e6", "]", ",", "3", ")", "\n", "# d2 is (4 x 4 x self.gf_dim*8*2)", "\n", "\n", "self", ".", "d4", ",", "self", ".", "d4_w", ",", "self", ".", "d4_b", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d2", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "s16", ",", "s16", ",", "self", ".", "gf_dim", "*", "8", "]", ",", "name", "=", "'g_d4'", ",", "\n", "with_w", "=", "True", ")", "\n", "d4", "=", "self", ".", "g_bn_d4", "(", "self", ".", "d4", ")", "\n", "d4", "=", "tf", ".", "concat", "(", "[", "d4", ",", "e4", "]", ",", "3", ")", "\n", "# d4 is (8 x 8 x self.gf_dim*8*2)", "\n", "\n", "self", ".", "d5", ",", "self", ".", "d5_w", ",", "self", ".", "d5_b", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d4", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "s8", ",", "s8", ",", "self", ".", "gf_dim", "*", "4", "]", ",", "name", "=", "'g_d5'", ",", "\n", "with_w", "=", "True", ")", "\n", "d5", "=", "self", ".", "g_bn_d5", "(", "self", ".", "d5", ")", "\n", "d5", "=", "tf", ".", "concat", "(", "[", "d5", ",", "e3", "]", ",", "3", ")", "\n", "# d5 is (16 x 16 x self.gf_dim*4*2)", "\n", "\n", "self", ".", "d6", ",", "self", ".", "d6_w", ",", "self", ".", "d6_b", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d5", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "s4", ",", "s4", ",", "self", ".", "gf_dim", "*", "2", "]", ",", "name", "=", "'g_d6'", ",", "\n", "with_w", "=", "True", ")", "\n", "d6", "=", "self", ".", "g_bn_d6", "(", "self", ".", "d6", ")", "\n", "d6", "=", "tf", ".", "concat", "(", "[", "d6", ",", "e2", "]", ",", "3", ")", "\n", "# d6 is (32 x 32 x self.gf_dim*2*2)", "\n", "\n", "self", ".", "d7", ",", "self", ".", "d7_w", ",", "self", ".", "d7_b", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d6", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "s2", ",", "s2", ",", "self", ".", "gf_dim", "]", ",", "name", "=", "'g_d7'", ",", "with_w", "=", "True", ")", "\n", "d7", "=", "self", ".", "g_bn_d7", "(", "self", ".", "d7", ")", "\n", "d7", "=", "tf", ".", "concat", "(", "[", "d7", ",", "e1", "]", ",", "3", ")", "\n", "# d7 is (64 x 64 x self.gf_dim*1*2)", "\n", "\n", "self", ".", "d8", ",", "self", ".", "d8_w", ",", "self", ".", "d8_b", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d7", ")", ",", "\n", "[", "self", ".", "batch_size", ",", "s", ",", "s", ",", "self", ".", "output_image_dim", "]", ",", "name", "=", "'g_d8'", ",", "\n", "with_w", "=", "True", ")", "\n", "# d8 is (128 x 128 x output_c_dim)", "\n", "\n", "return", "tf", ".", "nn", ".", "tanh", "(", "self", ".", "d8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.save_old": [[418, 429], ["os.path.join", "ada_rendering.pose2image.saver.save", "os.path.exists", "os.makedirs", "os.path.join"], "methods", ["None"], ["", "", "def", "save_old", "(", "self", ",", "checkpoint_dir", ",", "step", ")", ":", "\n", "        ", "model_name", "=", "\"pose2image.model\"", "\n", "model_dir", "=", "\"%s_%s_%s\"", "%", "(", "self", ".", "dataset_name", ",", "self", ".", "batch_size", ",", "self", ".", "output_size", ")", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_dir", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "\n", "", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_name", ")", ",", "\n", "global_step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.load_old": [[430, 443], ["print", "os.path.join", "tensorflow.train.get_checkpoint_state", "os.path.basename", "ada_rendering.pose2image.saver.restore", "os.path.join"], "methods", ["None"], ["", "def", "load_old", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "print", "(", "\" [*] Reading checkpoint...\"", ")", "\n", "\n", "model_dir", "=", "\"%s_%s_%s\"", "%", "(", "self", ".", "dataset_name", ",", "self", ".", "batch_size", ",", "self", ".", "output_size", ")", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_dir", ")", "\n", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "checkpoint_dir", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "ckpt_name", "=", "os", ".", "path", ".", "basename", "(", "ckpt", ".", "model_checkpoint_path", ")", "\n", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "ckpt_name", ")", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.test": [[444, 476], ["print", "tensorflow.global_variables_initializer", "ada_rendering.pose2image.sess.run", "print", "print", "create_database", "print", "time.time", "ada_rendering.pose2image.load_old", "six.moves.xrange", "min", "print", "print", "ada_rendering.pose2image.sess.run", "utils.save_images", "len", "utils.load_data", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.ada_rendering.pose2image.load_old", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.save_images", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.load_data"], ["", "", "def", "test", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"Test pose2image\"\"\"", "\n", "print", "(", "\"Init variables...\"", ")", "\n", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init_op", ")", "\n", "print", "(", "\"Variables initialized\"", ")", "\n", "print", "(", "\"Creating Test Data...\"", ")", "\n", "data", "=", "create_database", "(", "'test'", ",", "1", ",", "base_dir", "=", "self", ".", "dataset_dir", ",", "dataset", "=", "self", ".", "dataset", ")", "\n", "print", "(", "\"Data created...\"", ")", "\n", "batch_idxs", "=", "min", "(", "len", "(", "data", ")", ",", "args", ".", "train_size", ")", "//", "self", ".", "batch_size", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "load_old", "(", "self", ".", "checkpoint_dir", ")", ":", "\n", "            ", "print", "(", "\" [*] Load SUCCESS\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\" [!] Load failed...\"", ")", "\n", "\n", "", "for", "idx", "in", "xrange", "(", "0", ",", "batch_idxs", ")", ":", "\n", "            ", "batch_files", "=", "data", "[", "idx", "*", "self", ".", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "batch", "=", "[", "load_data", "(", "batch_file", ")", "for", "batch_file", "in", "batch_files", "]", "\n", "if", "self", ".", "is_grayscale", ":", "\n", "                ", "batch_images", "=", "np", ".", "array", "(", "batch", ")", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "                ", "batch_images", "=", "np", ".", "array", "(", "batch", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "samples", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "fake_target", ",", "\n", "feed_dict", "=", "{", "self", ".", "real_data", ":", "batch_images", "}", "\n", ")", "\n", "# print(samples.shape)", "\n", "person_idx", "=", "idx", "+", "1", "\n", "save_images", "(", "samples", ",", "[", "self", ".", "batch_size", ",", "1", "]", ",", "\n", "'{}/test_{:d}.png'", ".", "format", "(", "args", ".", "test_dir", ",", "person_idx", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.load_data": [[21, 32], ["utils.load_image", "utils.preprocess_SPT", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.load_image", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.preprocess_SPT"], ["def", "load_data", "(", "image_path", ",", "flip", "=", "False", ",", "is_test", "=", "False", ")", ":", "\n", "    ", "style", ",", "pose", ",", "target", "=", "load_image", "(", "image_path", ")", "\n", "style", ",", "pose", ",", "target", "=", "preprocess_SPT", "(", "style", ",", "pose", ",", "target", ",", "flip", "=", "flip", ",", "is_test", "=", "is_test", ")", "\n", "\n", "style", "=", "style", "/", "127.5", "-", "1.", "\n", "pose", "=", "pose", "/", "127.5", "-", "1.", "\n", "target", "=", "target", "/", "127.5", "-", "1.", "\n", "\n", "img_SPT", "=", "np", ".", "concatenate", "(", "(", "style", ",", "pose", ",", "target", ")", ",", "axis", "=", "2", ")", "\n", "# img_AB shape: (fine_size, fine_size, input_c_dim + output_c_dim)", "\n", "return", "img_SPT", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.load_image": [[34, 41], ["image_path.split.split", "utils.imread", "utils.imread", "utils.imread"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.imread", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.imread", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.imread"], ["", "def", "load_image", "(", "image_path", ")", ":", "\n", "    ", "image_path", "=", "image_path", ".", "split", "(", "','", ")", "\n", "style", "=", "imread", "(", "image_path", "[", "0", "]", ")", "\n", "pose", "=", "imread", "(", "image_path", "[", "1", "]", ")", "\n", "target", "=", "imread", "(", "image_path", "[", "2", "]", ")", "\n", "\n", "return", "style", ",", "pose", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.preprocess_SPT": [[43, 68], ["scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize"], "function", ["None"], ["", "def", "preprocess_SPT", "(", "style", ",", "pose", ",", "target", ",", "load_size", "=", "134", ",", "fine_size", "=", "128", ",", "flip", "=", "False", ",", "is_test", "=", "False", ")", ":", "\n", "    ", "if", "is_test", ":", "\n", "        ", "style", "=", "scipy", ".", "misc", ".", "imresize", "(", "style", ",", "[", "fine_size", ",", "fine_size", "]", ")", "\n", "pose", "=", "scipy", ".", "misc", ".", "imresize", "(", "pose", ",", "[", "fine_size", ",", "fine_size", "]", ")", "\n", "target", "=", "scipy", ".", "misc", ".", "imresize", "(", "target", ",", "[", "fine_size", ",", "fine_size", "]", ")", "\n", "", "else", ":", "\n", "        ", "style", "=", "scipy", ".", "misc", ".", "imresize", "(", "style", ",", "[", "fine_size", ",", "fine_size", "]", ")", "\n", "pose", "=", "scipy", ".", "misc", ".", "imresize", "(", "pose", ",", "[", "fine_size", ",", "fine_size", "]", ")", "\n", "target", "=", "scipy", ".", "misc", ".", "imresize", "(", "target", ",", "[", "fine_size", ",", "fine_size", "]", ")", "\n", "# style = scipy.misc.imresize(style, [load_size, load_size])", "\n", "# pose = scipy.misc.imresize(pose, [load_size, load_size])", "\n", "# target = scipy.misc.imresize(target, [load_size, load_size])", "\n", "\n", "# h1 = int(np.ceil(np.random.uniform(1e-2, load_size-fine_size)))", "\n", "# w1 = int(np.ceil(np.random.uniform(1e-2, load_size-fine_size)))", "\n", "# style = style[h1:h1+fine_size, w1:w1+fine_size]", "\n", "# pose = pose[h1:h1+fine_size, w1:w1+fine_size]", "\n", "# target = target[h1:h1+fine_size, w1:w1+fine_size]", "\n", "\n", "# if flip and np.random.random() > 0.5:", "\n", "#     style = np.fliplr(style)", "\n", "#     pose = np.fliplr(pose)", "\n", "#     target = np.fliplr(target)", "\n", "\n", "", "return", "style", ",", "pose", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.get_image": [[72, 74], ["utils.transform", "utils.imread"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.transform", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.imread"], ["", "def", "get_image", "(", "image_path", ",", "image_size", ",", "is_crop", "=", "True", ",", "resize_w", "=", "64", ",", "is_grayscale", "=", "False", ")", ":", "\n", "    ", "return", "transform", "(", "imread", "(", "image_path", ",", "is_grayscale", ")", ",", "image_size", ",", "is_crop", ",", "resize_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.save_images": [[76, 78], ["utils.imsave", "utils.inverse_transform"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.imsave", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.inverse_transform"], ["", "def", "save_images", "(", "images", ",", "size", ",", "image_path", ")", ":", "\n", "    ", "return", "imsave", "(", "inverse_transform", "(", "images", ")", ",", "size", ",", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.imread": [[80, 85], ["scipy.misc.imread().astype", "scipy.misc.imread().astype", "scipy.misc.imread", "scipy.misc.imread"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.imread", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.imread"], ["", "def", "imread", "(", "path", ",", "is_grayscale", "=", "False", ")", ":", "\n", "    ", "if", "(", "is_grayscale", ")", ":", "\n", "        ", "return", "scipy", ".", "misc", ".", "imread", "(", "path", ",", "flatten", "=", "True", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "", "else", ":", "\n", "        ", "return", "scipy", ".", "misc", ".", "imread", "(", "path", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.merge_images": [[87, 89], ["utils.inverse_transform"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.inverse_transform"], ["", "", "def", "merge_images", "(", "images", ",", "size", ")", ":", "\n", "    ", "return", "inverse_transform", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.merge": [[91, 100], ["numpy.zeros", "enumerate"], "function", ["None"], ["", "def", "merge", "(", "images", ",", "size", ")", ":", "\n", "    ", "h", ",", "w", "=", "images", ".", "shape", "[", "1", "]", ",", "images", ".", "shape", "[", "2", "]", "\n", "img", "=", "np", ".", "zeros", "(", "(", "h", "*", "size", "[", "0", "]", ",", "w", "*", "size", "[", "1", "]", ",", "3", ")", ")", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "i", "=", "idx", "%", "size", "[", "1", "]", "\n", "j", "=", "idx", "//", "size", "[", "1", "]", "\n", "img", "[", "j", "*", "h", ":", "j", "*", "h", "+", "h", ",", "i", "*", "w", ":", "i", "*", "w", "+", "w", ",", ":", "]", "=", "image", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.imsave": [[102, 104], ["scipy.misc.imsave", "utils.merge"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.imsave", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.merge"], ["", "def", "imsave", "(", "images", ",", "size", ",", "path", ")", ":", "\n", "    ", "return", "scipy", ".", "misc", ".", "imsave", "(", "path", ",", "merge", "(", "images", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.transform": [[106, 113], ["center_crop", "numpy.array"], "function", ["None"], ["", "def", "transform", "(", "image", ",", "npx", "=", "64", ",", "is_crop", "=", "True", ",", "resize_w", "=", "64", ")", ":", "\n", "# npx : # of pixels width/height of image", "\n", "    ", "if", "is_crop", ":", "\n", "        ", "cropped_image", "=", "center_crop", "(", "image", ",", "npx", ",", "resize_w", "=", "resize_w", ")", "\n", "", "else", ":", "\n", "        ", "cropped_image", "=", "image", "\n", "", "return", "np", ".", "array", "(", "cropped_image", ")", "/", "127.5", "-", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.None.utils.inverse_transform": [[115, 117], ["None"], "function", ["None"], ["", "def", "inverse_transform", "(", "images", ")", ":", "\n", "    ", "return", "(", "images", "+", "1.", ")", "/", "2.", "\n", "", ""]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.pose_score.get_pose_score.get_pose_score": [[10, 35], ["sorted", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "get_pose_score.get_single_pose", "get_pose_score.get_single_pose", "get_pose_score.pose_mse", "ValueError"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.pose_score.get_pose_score.get_single_pose", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.pose_score.get_pose_score.get_single_pose", "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.pose_score.get_pose_score.pose_mse"], ["def", "get_pose_score", "(", "gt_dir", ",", "test_dir", ")", ":", "\n", "    ", "total_loss", "=", "0", "\n", "succ", "=", "0", "\n", "fail", "=", "0", "\n", "invalid", "=", "0", "\n", "for", "gt_name", "in", "sorted", "(", "os", ".", "listdir", "(", "gt_dir", ")", ")", ":", "\n", "# gt_split = gt_name.split('_')", "\n", "# if gt_split[1] in ['0', '1', '2', '3', '4', '5']:", "\n", "# continue", "\n", "        ", "gt_path", "=", "os", ".", "path", ".", "join", "(", "gt_dir", ",", "gt_name", ")", "\n", "test_path", "=", "os", ".", "path", ".", "join", "(", "test_dir", ",", "'test_'", "+", "gt_name", ")", "\n", "gt_pose", "=", "get_single_pose", "(", "gt_path", ")", "\n", "test_pose", "=", "get_single_pose", "(", "test_path", ")", "\n", "status", ",", "loss", "=", "pose_mse", "(", "gt_pose", ",", "test_pose", ")", "\n", "if", "status", "==", "'succ'", ":", "\n", "            ", "total_loss", "+=", "loss", "\n", "succ", "+=", "1", "\n", "", "elif", "status", "==", "'fail'", ":", "\n", "            ", "fail", "+=", "1", "\n", "", "elif", "status", "==", "'invalid'", ":", "\n", "            ", "invalid", "+=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid return value {}'", ".", "format", "(", "status", ")", ")", "\n", "", "", "total_loss", "/=", "succ", "\n", "return", "succ", ",", "fail", ",", "invalid", ",", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.pose_score.get_pose_score.get_single_pose": [[37, 64], ["enumerate", "open", "json.load", "get_pose_score._separate_pose_list"], "function", ["home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.pose_score.get_pose_score._separate_pose_list"], ["", "def", "get_single_pose", "(", "json_path", ")", ":", "\n", "    ", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "all_people", "=", "data", "[", "'people'", "]", "\n", "", "best_conf", "=", "0", "\n", "best_pose", "=", "None", "\n", "best_joint_num", "=", "0", "\n", "\n", "for", "idx", ",", "person", "in", "enumerate", "(", "all_people", ")", ":", "\n", "        ", "single_pose", "=", "_separate_pose_list", "(", "person", "[", "'pose_keypoints'", "]", ")", "\n", "total_conf", "=", "0", "\n", "cnt", "=", "0", "\n", "for", "conf", "in", "single_pose", "[", ":", ",", "2", "]", ":", "\n", "            ", "if", "conf", ">", "0", ":", "\n", "                ", "total_conf", "+=", "conf", "\n", "cnt", "+=", "1", "\n", "", "", "total_conf", "/=", "cnt", "\n", "if", "cnt", ">", "best_joint_num", "+", "3", "and", "total_conf", ">", "0.3", ":", "\n", "            ", "best_conf", "=", "total_conf", "\n", "best_pose", "=", "single_pose", "\n", "best_joint_num", "=", "cnt", "\n", "", "elif", "total_conf", ">", "best_conf", "and", "cnt", ">", "best_joint_num", ":", "\n", "            ", "best_conf", "=", "total_conf", "\n", "best_pose", "=", "single_pose", "\n", "best_joint_num", "=", "cnt", "\n", "\n", "", "", "return", "best_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.pose_score.get_pose_score._separate_pose_list": [[66, 77], ["range", "numpy.array", "len", "pose_list.append"], "function", ["None"], ["", "def", "_separate_pose_list", "(", "lst", ")", ":", "\n", "    ", "'''\n    Convert a list with length of 18 * 3 into a ndarray of shape (18, 3)\n    :param lst:\n    :return:\n    '''", "\n", "i", "=", "0", "\n", "pose_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lst", ")", ",", "3", ")", ":", "\n", "        ", "pose_list", ".", "append", "(", "lst", "[", "i", ":", "i", "+", "3", "]", ")", "\n", "", "return", "np", ".", "array", "(", "pose_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.pose_score.get_pose_score.pose_mse_recall": [[79, 113], ["enumerate", "enumerate"], "function", ["None"], ["", "def", "pose_mse_recall", "(", "gt", ",", "output", ")", ":", "\n", "    ", "if", "gt", "is", "None", ":", "\n", "        ", "return", "'invalid'", ",", "0", "\n", "\n", "", "valid_gt_joint", "=", "0", "\n", "for", "idx", ",", "joint", "in", "enumerate", "(", "gt", ")", ":", "\n", "        ", "if", "joint", "[", "2", "]", ">", "0", ":", "\n", "            ", "valid_gt_joint", "+=", "1", "\n", "\n", "", "", "if", "valid_gt_joint", "<", "8", ":", "\n", "        ", "return", "'invalid'", ",", "0", "\n", "\n", "# failure case        ", "\n", "", "if", "output", "is", "None", ":", "\n", "        ", "return", "'fail'", ",", "0", "\n", "\n", "", "total_mse", "=", "0", "\n", "hit", "=", "0", "\n", "\n", "for", "idx", ",", "joint", "in", "enumerate", "(", "gt", ")", ":", "\n", "        ", "output_joint", "=", "output", "[", "idx", "]", "\n", "if", "joint", "[", "2", "]", ">", "0", ":", "\n", "            ", "t", "=", "(", "(", "joint", "[", "0", "]", "/", "2", "-", "output_joint", "[", "0", "]", ")", "**", "2", "+", "(", "joint", "[", "1", "]", "/", "2", "-", "output_joint", "[", "1", "]", ")", "**", "2", ")", "/", "2", "\n", "if", "t", "<=", "100", ":", "\n", "                ", "hit", "+=", "1", "\n", "total_mse", "+=", "t", "\n", "\n", "# matched, return matching status and mse", "\n", "", "", "", "if", "hit", ">", "0.8", "*", "valid_gt_joint", ":", "\n", "        ", "total_mse", "/=", "hit", "\n", "return", "'succ'", ",", "total_mse", "\n", "# not matched. failure case", "\n", "", "else", ":", "\n", "        ", "return", "'fail'", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.wisdomdeng_AdaptiveRendering.pose_score.get_pose_score.pose_mse": [[114, 134], ["enumerate"], "function", ["None"], ["", "", "def", "pose_mse", "(", "gt", ",", "output", ")", ":", "\n", "    ", "\"\"\"\n        The simple version of MSE between two poses, where invalid/failed pose is considered to be all (0, 0)\n    \"\"\"", "\n", "total_mse", "=", "0", "\n", "cnt", "=", "0", "\n", "for", "idx", ",", "joint", "in", "enumerate", "(", "gt", ")", ":", "\n", "        ", "if", "output", "is", "not", "None", ":", "\n", "            ", "output_joint", "=", "output", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "output_joint", "=", "(", "0", ",", "0", ")", "\n", "\n", "", "if", "joint", "[", "2", "]", ">", "0", ":", "\n", "            ", "t", "=", "(", "(", "(", "joint", "[", "0", "]", "-", "127.5", ")", "/", "127.5", "-", "(", "output_joint", "[", "0", "]", "-", "63.5", ")", "/", "63.5", ")", "**", "2", "+", "(", "(", "joint", "[", "1", "]", "-", "127.5", ")", "/", "127.5", "-", "(", "output_joint", "[", "1", "]", "-", "63.5", ")", "/", "63.5", ")", "**", "2", ")", "/", "2", "# normalize to [-1, 1] and then compute distance", "\n", "total_mse", "+=", "t", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "total_mse", "/=", "cnt", "\n", "\n", "return", "'succ'", ",", "total_mse", "\n", "\n"]]}