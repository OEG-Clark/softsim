{"home.repos.pwc.inspect_result.engelnico_point-transformer.None.train_partseg.to_categorical": [[22, 28], ["torch.eye", "new_y.cuda", "y.cpu().data.numpy", "y.cpu"], "function", ["None"], ["", "", "def", "to_categorical", "(", "y", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\" 1-hot encodes a tensor \"\"\"", "\n", "new_y", "=", "torch", ".", "eye", "(", "num_classes", ")", "[", "y", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "]", "\n", "if", "(", "y", ".", "is_cuda", ")", ":", "\n", "        ", "return", "new_y", ".", "cuda", "(", ")", "\n", "", "return", "new_y", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.None.train_partseg.train": [[29, 262], ["str", "pathlib.Path", "experiment_dir.joinpath.mkdir", "experiment_dir.joinpath.joinpath", "experiment_dir.joinpath.mkdir", "experiment_dir.joinpath.joinpath", "experiment_dir.joinpath.mkdir", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "train_partseg.train.log_string"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "\n", "    ", "def", "log_string", "(", "str", ")", ":", "\n", "        ", "logger", ".", "info", "(", "str", ")", "\n", "print", "(", "str", ")", "\n", "\n", "", "def", "weights_init", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "def", "bn_momentum_adjust", "(", "m", ",", "momentum", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", ":", "\n", "            ", "m", ".", "momentum", "=", "momentum", "\n", "\n", "\n", "## Hyperparameters", "\n", "", "", "config", "=", "{", "'num_points'", ":", "1024", ",", "\n", "'batch_size'", ":", "8", ",", "\n", "'use_normals'", ":", "True", ",", "\n", "'optimizer'", ":", "'RangerVA'", ",", "\n", "'lr'", ":", "0.005", ",", "\n", "'decay_rate'", ":", "0.0001", ",", "\n", "'lr_decay'", ":", "0.7", ",", "\n", "'epochs'", ":", "500", ",", "\n", "'num_classes'", ":", "16", ",", "\n", "'num_part'", ":", "50", ",", "\n", "'dropout'", ":", "0.3", ",", "\n", "'M'", ":", "10", ",", "\n", "'K'", ":", "16", ",", "\n", "'d_m'", ":", "512", ",", "\n", "'dd_m'", ":", "128", ",", "\n", "'step_size'", ":", "15", ",", "\n", "}", "\n", "\n", "## Create LogDir", "\n", "timestr", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d_%H-%M'", ")", ")", "\n", "experiment_dir", "=", "Path", "(", "'./log/'", ")", "\n", "experiment_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "experiment_dir", "=", "experiment_dir", ".", "joinpath", "(", "'part_seg'", ")", "\n", "experiment_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "experiment_dir", "=", "experiment_dir", ".", "joinpath", "(", "timestr", ")", "\n", "experiment_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "with", "open", "(", "str", "(", "experiment_dir", ")", "+", "\"/config.txt\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "config", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "## logger", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "\"Model\"", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(message)s'", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "f\"{experiment_dir}/logs.txt\"", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "log_string", "(", "'Hyperparameters'", ")", "\n", "log_string", "(", "config", ")", "\n", "\n", "## Create Dataloader", "\n", "data_path", "=", "'data/shapenetcore_partanno_segmentation_benchmark_v0_normal/'", "\n", "train_ds", "=", "PartNormalDataset", "(", "root", "=", "data_path", ",", "npoints", "=", "config", "[", "'num_points'", "]", ",", "split", "=", "'trainval'", ",", "normal_channel", "=", "config", "[", "'use_normals'", "]", ")", "\n", "test_ds", "=", "PartNormalDataset", "(", "root", "=", "data_path", ",", "npoints", "=", "config", "[", "'num_points'", "]", ",", "split", "=", "'test'", ",", "normal_channel", "=", "config", "[", "'use_normals'", "]", ")", "\n", "\n", "train_dl", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_ds", ",", "batch_size", "=", "config", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "test_dl", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_ds", ",", "batch_size", "=", "config", "[", "'batch_size'", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ")", "\n", "\n", "## Create Point Transformer model", "\n", "classifier", "=", "pt_partseg", ".", "Point_Transformer", "(", "config", ")", ".", "cuda", "(", ")", "\n", "criterion", "=", "pt_partseg", ".", "Loss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "## Create optimizer", "\n", "if", "config", "[", "'optimizer'", "]", "==", "'RangerVA'", ":", "\n", "        ", "optimizer", "=", "RangerVA", "(", "classifier", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "config", "[", "'lr'", "]", ",", "\n", "weight_decay", "=", "config", "[", "'decay_rate'", "]", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "classifier", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "config", "[", "'lr'", "]", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "eps", "=", "1e-08", ",", "\n", "weight_decay", "=", "config", "[", "'decay_rate'", "]", "\n", ")", "\n", "\n", "", "global_epoch", "=", "0", "\n", "global_step", "=", "0", "\n", "best_instance_acc", "=", "0.0", "\n", "best_class_acc", "=", "0.0", "\n", "mean_correct", "=", "[", "]", "\n", "\n", "LEARNING_RATE_CLIP", "=", "1e-5", "\n", "MOMENTUM_ORIGINAL", "=", "0.1", "\n", "MOMENTUM_DECCAY", "=", "0.5", "\n", "MOMENTUM_DECCAY_STEP", "=", "config", "[", "'step_size'", "]", "\n", "\n", "best_acc", "=", "0", "\n", "global_epoch", "=", "0", "\n", "best_class_avg_iou", "=", "0", "\n", "best_instance_avg_iou", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "config", "[", "'epochs'", "]", ")", ":", "\n", "        ", "log_string", "(", "'Epoch %d (%d/%s):'", "%", "(", "global_epoch", "+", "1", ",", "epoch", "+", "1", ",", "config", "[", "'epochs'", "]", ")", ")", "\n", "'''Adjust learning rate and BN momentum'''", "\n", "lr", "=", "max", "(", "config", "[", "'lr'", "]", "*", "(", "config", "[", "'lr_decay'", "]", "**", "(", "epoch", "//", "config", "[", "'step_size'", "]", ")", ")", ",", "LEARNING_RATE_CLIP", ")", "\n", "log_string", "(", "'Learning rate:%f'", "%", "lr", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "mean_correct", "=", "[", "]", "\n", "momentum", "=", "MOMENTUM_ORIGINAL", "*", "(", "MOMENTUM_DECCAY", "**", "(", "epoch", "//", "MOMENTUM_DECCAY_STEP", ")", ")", "\n", "if", "momentum", "<", "0.01", ":", "\n", "            ", "momentum", "=", "0.01", "\n", "", "print", "(", "'BN momentum updated to: %f'", "%", "momentum", ")", "\n", "classifier", "=", "classifier", ".", "apply", "(", "lambda", "x", ":", "bn_momentum_adjust", "(", "x", ",", "momentum", ")", ")", "\n", "\n", "'''learning one epoch'''", "\n", "for", "i", ",", "data", "in", "tqdm", "(", "enumerate", "(", "train_dl", ")", ",", "total", "=", "len", "(", "train_dl", ")", ",", "smoothing", "=", "0.9", ")", ":", "\n", "            ", "points", ",", "label", ",", "target", "=", "data", "\n", "points", "=", "points", ".", "data", ".", "numpy", "(", ")", "\n", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "provider", ".", "random_scale_point_cloud", "(", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", ")", "\n", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "provider", ".", "shift_point_cloud", "(", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", ")", "\n", "points", "=", "torch", ".", "Tensor", "(", "points", ")", "\n", "points", ",", "label", ",", "target", "=", "points", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "label", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "target", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "points", "=", "points", ".", "transpose", "(", "2", ",", "1", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "classifier", "=", "classifier", ".", "train", "(", ")", "\n", "seg_pred", ",", "_", "=", "classifier", "(", "points", ",", "to_categorical", "(", "label", ",", "config", "[", "'num_classes'", "]", ")", ")", "\n", "seg_pred", "=", "seg_pred", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "config", "[", "'num_part'", "]", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "[", ":", ",", "0", "]", "\n", "pred_choice", "=", "seg_pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "=", "pred_choice", ".", "eq", "(", "target", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "mean_correct", ".", "append", "(", "correct", ".", "item", "(", ")", "/", "(", "config", "[", "'batch_size'", "]", "*", "config", "[", "'num_points'", "]", ")", ")", "\n", "loss", "=", "criterion", "(", "seg_pred", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "train_instance_acc", "=", "np", ".", "mean", "(", "mean_correct", ")", "\n", "log_string", "(", "'Train accuracy is: %.5f'", "%", "train_instance_acc", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test_metrics", "=", "{", "}", "\n", "total_correct", "=", "0", "\n", "total_seen", "=", "0", "\n", "total_seen_class", "=", "[", "0", "for", "_", "in", "range", "(", "config", "[", "'num_part'", "]", ")", "]", "\n", "total_correct_class", "=", "[", "0", "for", "_", "in", "range", "(", "config", "[", "'num_part'", "]", ")", "]", "\n", "shape_ious", "=", "{", "cat", ":", "[", "]", "for", "cat", "in", "seg_classes", ".", "keys", "(", ")", "}", "\n", "seg_label_to_cat", "=", "{", "}", "# {0:Airplane, 1:Airplane, ...49:Table}", "\n", "for", "cat", "in", "seg_classes", ".", "keys", "(", ")", ":", "\n", "                ", "for", "label", "in", "seg_classes", "[", "cat", "]", ":", "\n", "                    ", "seg_label_to_cat", "[", "label", "]", "=", "cat", "\n", "\n", "", "", "for", "batch_id", ",", "(", "points", ",", "label", ",", "target", ")", "in", "tqdm", "(", "enumerate", "(", "test_dl", ")", ",", "total", "=", "len", "(", "test_dl", ")", ",", "smoothing", "=", "0.9", ")", ":", "\n", "                ", "cur_batch_size", ",", "NUM_POINT", ",", "_", "=", "points", ".", "size", "(", ")", "\n", "points", ",", "label", ",", "target", "=", "points", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "label", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "target", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "points", "=", "points", ".", "transpose", "(", "2", ",", "1", ")", "\n", "classifier", "=", "classifier", ".", "eval", "(", ")", "\n", "seg_pred", ",", "_", "=", "classifier", "(", "points", ",", "to_categorical", "(", "label", ",", "config", "[", "'num_classes'", "]", ")", ")", "\n", "cur_pred_val", "=", "seg_pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "cur_pred_val_logits", "=", "cur_pred_val", "\n", "cur_pred_val", "=", "np", ".", "zeros", "(", "(", "cur_batch_size", ",", "NUM_POINT", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "cur_batch_size", ")", ":", "\n", "                    ", "cat", "=", "seg_label_to_cat", "[", "target", "[", "i", ",", "0", "]", "]", "\n", "logits", "=", "cur_pred_val_logits", "[", "i", ",", ":", ",", ":", "]", "\n", "cur_pred_val", "[", "i", ",", ":", "]", "=", "np", ".", "argmax", "(", "logits", "[", ":", ",", "seg_classes", "[", "cat", "]", "]", ",", "1", ")", "+", "seg_classes", "[", "cat", "]", "[", "0", "]", "\n", "", "correct", "=", "np", ".", "sum", "(", "cur_pred_val", "==", "target", ")", "\n", "total_correct", "+=", "correct", "\n", "total_seen", "+=", "(", "cur_batch_size", "*", "NUM_POINT", ")", "\n", "\n", "for", "l", "in", "range", "(", "config", "[", "'num_part'", "]", ")", ":", "\n", "                    ", "total_seen_class", "[", "l", "]", "+=", "np", ".", "sum", "(", "target", "==", "l", ")", "\n", "total_correct_class", "[", "l", "]", "+=", "(", "np", ".", "sum", "(", "(", "cur_pred_val", "==", "l", ")", "&", "(", "target", "==", "l", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "cur_batch_size", ")", ":", "\n", "                    ", "segp", "=", "cur_pred_val", "[", "i", ",", ":", "]", "\n", "segl", "=", "target", "[", "i", ",", ":", "]", "\n", "cat", "=", "seg_label_to_cat", "[", "segl", "[", "0", "]", "]", "\n", "part_ious", "=", "[", "0.0", "for", "_", "in", "range", "(", "len", "(", "seg_classes", "[", "cat", "]", ")", ")", "]", "\n", "for", "l", "in", "seg_classes", "[", "cat", "]", ":", "\n", "                        ", "if", "(", "np", ".", "sum", "(", "segl", "==", "l", ")", "==", "0", ")", "and", "(", "\n", "np", ".", "sum", "(", "segp", "==", "l", ")", "==", "0", ")", ":", "# part is not present, no prediction as well", "\n", "                            ", "part_ious", "[", "l", "-", "seg_classes", "[", "cat", "]", "[", "0", "]", "]", "=", "1.0", "\n", "", "else", ":", "\n", "                            ", "part_ious", "[", "l", "-", "seg_classes", "[", "cat", "]", "[", "0", "]", "]", "=", "np", ".", "sum", "(", "(", "segl", "==", "l", ")", "&", "(", "segp", "==", "l", ")", ")", "/", "float", "(", "\n", "np", ".", "sum", "(", "(", "segl", "==", "l", ")", "|", "(", "segp", "==", "l", ")", ")", ")", "\n", "", "", "shape_ious", "[", "cat", "]", ".", "append", "(", "np", ".", "mean", "(", "part_ious", ")", ")", "\n", "\n", "", "", "all_shape_ious", "=", "[", "]", "\n", "for", "cat", "in", "shape_ious", ".", "keys", "(", ")", ":", "\n", "                ", "for", "iou", "in", "shape_ious", "[", "cat", "]", ":", "\n", "                    ", "all_shape_ious", ".", "append", "(", "iou", ")", "\n", "", "shape_ious", "[", "cat", "]", "=", "np", ".", "mean", "(", "shape_ious", "[", "cat", "]", ")", "\n", "", "mean_shape_ious", "=", "np", ".", "mean", "(", "list", "(", "shape_ious", ".", "values", "(", ")", ")", ")", "\n", "test_metrics", "[", "'accuracy'", "]", "=", "total_correct", "/", "float", "(", "total_seen", ")", "\n", "test_metrics", "[", "'class_avg_accuracy'", "]", "=", "np", ".", "mean", "(", "\n", "np", ".", "array", "(", "total_correct_class", ")", "/", "np", ".", "array", "(", "total_seen_class", ",", "dtype", "=", "np", ".", "float", ")", ")", "\n", "for", "cat", "in", "sorted", "(", "shape_ious", ".", "keys", "(", ")", ")", ":", "\n", "                ", "log_string", "(", "'eval mIoU of %s %f'", "%", "(", "cat", "+", "' '", "*", "(", "14", "-", "len", "(", "cat", ")", ")", ",", "shape_ious", "[", "cat", "]", ")", ")", "\n", "", "test_metrics", "[", "'class_avg_iou'", "]", "=", "mean_shape_ious", "\n", "test_metrics", "[", "'instance_avg_iou'", "]", "=", "np", ".", "mean", "(", "all_shape_ious", ")", "\n", "\n", "\n", "", "log_string", "(", "'Epoch %d test Accuracy: %f  Class avg mIOU: %f   Instance avg mIOU: %f'", "%", "(", "\n", "epoch", "+", "1", ",", "test_metrics", "[", "'accuracy'", "]", ",", "test_metrics", "[", "'class_avg_iou'", "]", ",", "test_metrics", "[", "'instance_avg_iou'", "]", ")", ")", "\n", "if", "(", "test_metrics", "[", "'instance_avg_iou'", "]", ">=", "best_instance_avg_iou", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'Save model...'", ")", "\n", "savepath", "=", "str", "(", "experiment_dir", ")", "+", "'/best_model.pth'", "\n", "log_string", "(", "'Saving at %s'", "%", "savepath", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'train_acc'", ":", "train_instance_acc", ",", "\n", "'test_acc'", ":", "test_metrics", "[", "'accuracy'", "]", ",", "\n", "'class_avg_iou'", ":", "test_metrics", "[", "'class_avg_iou'", "]", ",", "\n", "'instance_avg_iou'", ":", "test_metrics", "[", "'instance_avg_iou'", "]", ",", "\n", "'model_state_dict'", ":", "classifier", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "savepath", ")", "\n", "log_string", "(", "'Saving model....'", ")", "\n", "\n", "", "if", "test_metrics", "[", "'accuracy'", "]", ">", "best_acc", ":", "\n", "            ", "best_acc", "=", "test_metrics", "[", "'accuracy'", "]", "\n", "", "if", "test_metrics", "[", "'class_avg_iou'", "]", ">", "best_class_avg_iou", ":", "\n", "            ", "best_class_avg_iou", "=", "test_metrics", "[", "'class_avg_iou'", "]", "\n", "", "if", "test_metrics", "[", "'instance_avg_iou'", "]", ">", "best_instance_avg_iou", ":", "\n", "            ", "best_instance_avg_iou", "=", "test_metrics", "[", "'instance_avg_iou'", "]", "\n", "", "log_string", "(", "'Best accuracy is: %.5f'", "%", "best_acc", ")", "\n", "log_string", "(", "'Best class avg mIOU is: %.5f'", "%", "best_class_avg_iou", ")", "\n", "log_string", "(", "'Best instance avg mIOU is: %.5f'", "%", "best_instance_avg_iou", ")", "\n", "global_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.None.train_cls.train": [[15, 178], ["str", "pathlib.Path", "experiment_dir.joinpath.mkdir", "experiment_dir.joinpath.joinpath", "experiment_dir.joinpath.mkdir", "experiment_dir.joinpath.joinpath", "experiment_dir.joinpath.mkdir", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "train_cls.train.log_string"], "function", ["None"], ["def", "train", "(", ")", ":", "\n", "\n", "    ", "def", "log_string", "(", "str", ")", ":", "\n", "        ", "logger", ".", "info", "(", "str", ")", "\n", "print", "(", "str", ")", "\n", "\n", "## Hyperparameters", "\n", "", "config", "=", "{", "'num_points'", ":", "1024", ",", "\n", "'batch_size'", ":", "11", ",", "\n", "'use_normals'", ":", "True", ",", "\n", "'optimizer'", ":", "'RangerVA'", ",", "\n", "'lr'", ":", "0.001", ",", "\n", "'decay_rate'", ":", "1e-06", ",", "\n", "'epochs'", ":", "500", ",", "\n", "'num_classes'", ":", "40", ",", "\n", "'dropout'", ":", "0.4", ",", "\n", "'M'", ":", "4", ",", "\n", "'K'", ":", "64", ",", "\n", "'d_m'", ":", "512", ",", "\n", "}", "\n", "\n", "## Create LogDir", "\n", "timestr", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d_%H-%M'", ")", ")", "\n", "experiment_dir", "=", "Path", "(", "'./log/'", ")", "\n", "experiment_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "experiment_dir", "=", "experiment_dir", ".", "joinpath", "(", "'classification'", ")", "\n", "experiment_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "experiment_dir", "=", "experiment_dir", ".", "joinpath", "(", "timestr", ")", "\n", "experiment_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "with", "open", "(", "str", "(", "experiment_dir", ")", "+", "\"/config.txt\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "config", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "## logger", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "\"Model\"", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(message)s'", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "f\"{experiment_dir}/logs.txt\"", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "log_string", "(", "'Hyperparameters:'", ")", "\n", "log_string", "(", "config", ")", "\n", "\n", "## Create Dataloader", "\n", "# data_path = 'data/modelnet40_normal_resampled/'", "\n", "# train_ds = ModelNetDataLoader(root=data_path, npoint=config['num_points'], split='train', normal_channel=config['use_normals'])", "\n", "# test_ds = ModelNetDataLoader(root=data_path, npoint=config['num_points'], split='test', normal_channel=config['use_normals'])", "\n", "\n", "# train_dl = torch.utils.data.DataLoader(train_ds, batch_size=config['batch_size'], shuffle=True, num_workers=8)", "\n", "# test_dl = torch.utils.data.DataLoader(test_ds, batch_size=config['batch_size'], shuffle=False, num_workers=8)", "\n", "\n", "## Create Point Transformer model", "\n", "model", "=", "pt_cls", ".", "Point_Transformer", "(", "config", ")", ".", "cuda", "(", ")", "\n", "# model = pt_cls.SortNet(128,6, top_k=64).cuda()", "\n", "\n", "def", "count_parameters", "(", "model", ")", ":", "\n", "        ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n", "\n", "", "from", "helper", ".", "summary", "import", "summary", "\n", "#summary(model, input_data=[(1, 128, 1024),(6, 1024)])", "\n", "summary", "(", "model", ",", "input_data", "=", "(", "6", ",", "1024", ")", ")", "\n", "# from pytictoc import TicToc", "\n", "\n", "# t = TicToc()", "\n", "\n", "# t.tic()", "\n", "# for i in range(100):", "\n", "\n", "#     a = torch.zeros(2, 1, 128, 1024).cuda()", "\n", "#     b = torch.zeros(2, 6, 1024).cuda()", "\n", "#     out = model(a, b)", "\n", "# t.toc()", "\n", "\n", "\n", "exit", "(", ")", "\n", "#", "\n", "criterion", "=", "pt_cls", ".", "Loss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "## Create optimizer", "\n", "optimizer", "=", "None", "\n", "if", "config", "[", "'optimizer'", "]", "==", "'RangerVA'", ":", "\n", "        ", "optimizer", "=", "RangerVA", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "config", "[", "'lr'", "]", ",", "\n", "weight_decay", "=", "config", "[", "'decay_rate'", "]", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "config", "[", "'lr'", "]", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "eps", "=", "1e-08", ",", "\n", "weight_decay", "=", "config", "[", "'decay_rate'", "]", "\n", ")", "\n", "\n", "", "global_epoch", "=", "0", "\n", "global_step", "=", "0", "\n", "best_instance_acc", "=", "0.0", "\n", "best_class_acc", "=", "0.0", "\n", "mean_correct", "=", "[", "]", "\n", "\n", "## Learning Rate Scheduler", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "30", ",", "gamma", "=", "0.5", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "config", "[", "'epochs'", "]", ")", ":", "\n", "        ", "log_string", "(", "f\"Epoch {epoch}/{config['epochs']}\"", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "for", "data", "in", "tqdm", "(", "train_dl", ",", "total", "=", "len", "(", "train_dl", ")", ",", "smoothing", "=", "0.9", ")", ":", "\n", "            ", "points", ",", "target", "=", "data", "\n", "points", "=", "points", ".", "data", ".", "numpy", "(", ")", "\n", "points", "=", "provider", ".", "random_point_dropout", "(", "points", ")", "\n", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "provider", ".", "random_scale_point_cloud", "(", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", ")", "\n", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", "=", "provider", ".", "shift_point_cloud", "(", "points", "[", ":", ",", ":", ",", "0", ":", "3", "]", ")", "\n", "points", "=", "torch", ".", "Tensor", "(", "points", ")", "\n", "target", "=", "target", "[", ":", ",", "0", "]", "\n", "\n", "points", "=", "points", ".", "transpose", "(", "2", ",", "1", ")", "\n", "points", ",", "target", "=", "points", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "model", "=", "model", ".", "train", "(", ")", "\n", "pred", "=", "model", "(", "points", ")", "\n", "loss", "=", "criterion", "(", "pred", ",", "target", ".", "long", "(", ")", ")", "\n", "pred_choice", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "=", "pred_choice", ".", "eq", "(", "target", ".", "long", "(", ")", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "mean_correct", ".", "append", "(", "correct", ".", "item", "(", ")", "/", "float", "(", "points", ".", "size", "(", ")", "[", "0", "]", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "global_step", "+=", "1", "\n", "\n", "", "train_instance_acc", "=", "np", ".", "mean", "(", "mean_correct", ")", "\n", "log_string", "(", "f\"Train Instance Accuracy: {train_instance_acc}\"", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "instance_acc", ",", "class_acc", "=", "test", "(", "model", ".", "eval", "(", ")", ",", "test_dl", ",", "config", ")", "\n", "\n", "if", "(", "instance_acc", ">=", "best_instance_acc", ")", ":", "\n", "                ", "best_instance_acc", "=", "instance_acc", "\n", "best_epoch", "=", "epoch", "+", "1", "\n", "\n", "", "if", "(", "class_acc", ">=", "best_class_acc", ")", ":", "\n", "                ", "best_class_acc", "=", "class_acc", "\n", "\n", "", "log_string", "(", "f\"Test Instance Accuracy: {instance_acc}, Class Accuracy: {class_acc}\"", ")", "\n", "log_string", "(", "f\"Best Instance Accuracy: {best_instance_acc}, Class Accuracy: {best_class_acc}\"", ")", "\n", "\n", "if", "(", "instance_acc", ">=", "best_instance_acc", ")", ":", "\n", "                ", "log_string", "(", "'Save model...'", ")", "\n", "savepath", "=", "str", "(", "experiment_dir", ")", "+", "'/best_model.pth'", "\n", "log_string", "(", "f\"Saving at {savepath}\"", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "best_epoch", ",", "\n", "'instance_acc'", ":", "instance_acc", ",", "\n", "'class_acc'", ":", "class_acc", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "savepath", ")", "\n", "\n", "", "global_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.None.train_cls.test": [[182, 203], ["numpy.zeros", "tqdm.tqdm", "numpy.mean", "numpy.mean", "enumerate", "points.transpose.transpose", "model.eval", "model.eval.", "numpy.unique", "pred_choice.eq().cpu().sum", "mean_correct.append", "len", "points.transpose.cuda", "target.cuda", "classifier.data.max", "target.cpu", "pred_choice[].eq().cpu().sum", "pred_choice[].eq().cpu().sum.item", "float", "pred_choice.eq().cpu", "pred_choice.eq().cpu().sum.item", "float", "pred_choice[].eq().cpu", "points[].size", "pred_choice.eq", "points.transpose.size", "pred_choice[].eq", "target.long", "target[].long"], "function", ["None"], ["", "", "", "def", "test", "(", "model", ",", "loader", ",", "config", ")", ":", "\n", "    ", "mean_correct", "=", "[", "]", "\n", "class_acc", "=", "np", ".", "zeros", "(", "(", "config", "[", "'num_classes'", "]", ",", "3", ")", ")", "\n", "for", "j", ",", "data", "in", "tqdm", "(", "enumerate", "(", "loader", ")", ",", "total", "=", "len", "(", "loader", ")", ")", ":", "\n", "        ", "points", ",", "target", "=", "data", "\n", "target", "=", "target", "[", ":", ",", "0", "]", "\n", "points", "=", "points", ".", "transpose", "(", "2", ",", "1", ")", "\n", "points", ",", "target", "=", "points", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "classifier", "=", "model", ".", "eval", "(", ")", "\n", "pred", "=", "classifier", "(", "points", ")", "\n", "pred_choice", "=", "pred", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "for", "cat", "in", "np", ".", "unique", "(", "target", ".", "cpu", "(", ")", ")", ":", "\n", "            ", "classacc", "=", "pred_choice", "[", "target", "==", "cat", "]", ".", "eq", "(", "target", "[", "target", "==", "cat", "]", ".", "long", "(", ")", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "class_acc", "[", "cat", ",", "0", "]", "+=", "classacc", ".", "item", "(", ")", "/", "float", "(", "points", "[", "target", "==", "cat", "]", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "class_acc", "[", "cat", ",", "1", "]", "+=", "1", "\n", "", "correct", "=", "pred_choice", ".", "eq", "(", "target", ".", "long", "(", ")", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "mean_correct", ".", "append", "(", "correct", ".", "item", "(", ")", "/", "float", "(", "points", ".", "size", "(", ")", "[", "0", "]", ")", ")", "\n", "", "class_acc", "[", ":", ",", "2", "]", "=", "class_acc", "[", ":", ",", "0", "]", "/", "class_acc", "[", ":", ",", "1", "]", "\n", "class_acc", "=", "np", ".", "mean", "(", "class_acc", "[", ":", ",", "2", "]", ")", "\n", "instance_acc", "=", "np", ".", "mean", "(", "mean_correct", ")", "\n", "return", "instance_acc", ",", "class_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.formatting.FormattingOptions.__init__": [[19, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "use_branching", ":", "bool", ",", "\n", "max_depth", ":", "int", ",", "\n", "verbose", ":", "int", ",", "\n", "col_names", ":", "Sequence", "[", "str", "]", ",", "\n", "col_width", ":", "int", ",", "\n", ")", ":", "\n", "        ", "self", ".", "use_branching", "=", "use_branching", "\n", "self", ".", "max_depth", "=", "max_depth", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "col_names", "=", "col_names", "\n", "self", ".", "col_width", "=", "col_width", "\n", "self", ".", "layer_name_width", "=", "40", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.formatting.FormattingOptions.set_layer_name_width": [[34, 43], ["max", "math.ceil", "len", "str"], "methods", ["None"], ["", "def", "set_layer_name_width", "(", "self", ",", "summary_list", ":", "List", "[", "LayerInfo", "]", ",", "align_val", ":", "int", "=", "5", ")", "->", "None", ":", "\n", "        ", "\"\"\" Set layer name width by taking the longest line length and rounding up to\n        the nearest multiple of align_val. \"\"\"", "\n", "max_length", "=", "0", "\n", "for", "info", "in", "summary_list", ":", "\n", "            ", "depth_indent", "=", "info", ".", "depth", "*", "align_val", "+", "1", "\n", "max_length", "=", "max", "(", "max_length", ",", "len", "(", "str", "(", "info", ")", ")", "+", "depth_indent", ")", "\n", "", "if", "max_length", ">=", "self", ".", "layer_name_width", ":", "\n", "            ", "self", ".", "layer_name_width", "=", "math", ".", "ceil", "(", "max_length", "/", "align_val", ")", "*", "align_val", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.formatting.FormattingOptions.get_total_width": [[44, 47], ["len"], "methods", ["None"], ["", "", "def", "get_total_width", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\" Calculate the total width of all lines in the table. \"\"\"", "\n", "return", "len", "(", "self", ".", "col_names", ")", "*", "self", ".", "col_width", "+", "self", ".", "layer_name_width", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.formatting.FormattingOptions.format_row": [[48, 55], ["row_values.get", "new_line.rstrip"], "methods", ["None"], ["", "def", "format_row", "(", "self", ",", "layer_name", ":", "str", ",", "row_values", ":", "Dict", "[", "str", ",", "str", "]", ")", "->", "str", ":", "\n", "        ", "\"\"\" Get the string representation of a single layer of the model. \"\"\"", "\n", "info_to_use", "=", "[", "row_values", ".", "get", "(", "row_type", ",", "\"\"", ")", "for", "row_type", "in", "self", ".", "col_names", "]", "\n", "new_line", "=", "\"{:<{}} \"", ".", "format", "(", "layer_name", ",", "self", ".", "layer_name_width", ")", "\n", "for", "info", "in", "info_to_use", ":", "\n", "            ", "new_line", "+=", "\"{:<{}} \"", ".", "format", "(", "info", ",", "self", ".", "col_width", ")", "\n", "", "return", "new_line", ".", "rstrip", "(", ")", "+", "\"\\n\"", "", "", "", ""]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.normalize_data": [[5, 22], ["numpy.zeros", "range", "numpy.mean", "numpy.max", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["def", "normalize_data", "(", "batch_data", ")", ":", "\n", "    ", "\"\"\" Normalize the batch data, use coordinates of the block centered at origin,\n        Input:\n            BxNxC array\n        Output:\n            BxNxC array\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "normal_data", "=", "np", ".", "zeros", "(", "(", "B", ",", "N", ",", "C", ")", ")", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "        ", "pc", "=", "batch_data", "[", "b", "]", "\n", "centroid", "=", "np", ".", "mean", "(", "pc", ",", "axis", "=", "0", ")", "\n", "pc", "=", "pc", "-", "centroid", "\n", "m", "=", "np", ".", "max", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pc", "**", "2", ",", "axis", "=", "1", ")", ")", ")", "\n", "pc", "=", "pc", "/", "m", "\n", "normal_data", "[", "b", "]", "=", "pc", "\n", "", "return", "normal_data", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.shuffle_data": [[24, 35], ["numpy.arange", "numpy.random.shuffle", "len"], "function", ["None"], ["", "def", "shuffle_data", "(", "data", ",", "labels", ")", ":", "\n", "    ", "\"\"\" Shuffle data and labels.\n        Input:\n          data: B,N,... numpy array\n          label: B,... numpy array\n        Return:\n          shuffled data, label and shuffle indices\n    \"\"\"", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "return", "data", "[", "idx", ",", "...", "]", ",", "labels", "[", "idx", "]", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.shuffle_points": [[36, 47], ["numpy.arange", "numpy.random.shuffle"], "function", ["None"], ["", "def", "shuffle_points", "(", "batch_data", ")", ":", "\n", "    ", "\"\"\" Shuffle orders of points in each point cloud -- changes FPS behavior.\n        Use the same shuffling idx for the entire batch.\n        Input:\n            BxNxC array\n        Output:\n            BxNxC array\n    \"\"\"", "\n", "idx", "=", "np", ".", "arange", "(", "batch_data", ".", "shape", "[", "1", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "return", "batch_data", "[", ":", ",", "idx", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.rotate_point_cloud": [[48, 67], ["numpy.zeros", "range", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape", "numpy.random.uniform"], "function", ["None"], ["", "def", "rotate_point_cloud", "(", "batch_data", ")", ":", "\n", "    ", "\"\"\" Randomly rotate the point clouds to augument the dataset\n        rotation is per shape based along up direction\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.rotate_point_cloud_z": [[68, 87], ["numpy.zeros", "range", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape", "numpy.random.uniform"], "function", ["None"], ["", "def", "rotate_point_cloud_z", "(", "batch_data", ")", ":", "\n", "    ", "\"\"\" Randomly rotate the point clouds to augument the dataset\n        rotation is per shape based along up direction\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "sinval", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "cosval", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.rotate_point_cloud_with_normal": [[88, 107], ["range", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "numpy.dot", "shape_pc.reshape", "shape_normal.reshape", "numpy.random.uniform"], "function", ["None"], ["", "def", "rotate_point_cloud_with_normal", "(", "batch_xyz_normal", ")", ":", "\n", "    ", "''' Randomly rotate XYZ, normal point cloud.\n        Input:\n            batch_xyz_normal: B,N,6, first three channels are XYZ, last 3 all normal\n        Output:\n            B,N,6, rotated XYZ, normal point cloud\n    '''", "\n", "for", "k", "in", "range", "(", "batch_xyz_normal", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_xyz_normal", "[", "k", ",", ":", ",", "0", ":", "3", "]", "\n", "shape_normal", "=", "batch_xyz_normal", "[", "k", ",", ":", ",", "3", ":", "6", "]", "\n", "batch_xyz_normal", "[", "k", ",", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "batch_xyz_normal", "[", "k", ",", ":", ",", "3", ":", "6", "]", "=", "np", ".", "dot", "(", "shape_normal", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "batch_xyz_normal", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.rotate_perturbation_point_cloud_with_normal": [[108, 133], ["numpy.zeros", "range", "numpy.clip", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "shape_pc.reshape", "shape_normal.reshape", "numpy.random.randn", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "rotate_perturbation_point_cloud_with_normal", "(", "batch_data", ",", "angle_sigma", "=", "0.06", ",", "angle_clip", "=", "0.18", ")", ":", "\n", "    ", "\"\"\" Randomly perturb the point clouds by small rotations\n        Input:\n          BxNx6 array, original batch of point clouds and point normals\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "angles", "=", "np", ".", "clip", "(", "angle_sigma", "*", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "-", "angle_clip", ",", "angle_clip", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R", "=", "np", ".", "dot", "(", "Rz", ",", "np", ".", "dot", "(", "Ry", ",", "Rx", ")", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", ":", ",", "0", ":", "3", "]", "\n", "shape_normal", "=", "batch_data", "[", "k", ",", ":", ",", "3", ":", "6", "]", "\n", "rotated_data", "[", "k", ",", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "R", ")", "\n", "rotated_data", "[", "k", ",", ":", ",", "3", ":", "6", "]", "=", "np", ".", "dot", "(", "shape_normal", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "R", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.rotate_point_cloud_by_angle": [[135, 153], ["numpy.zeros", "range", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle", "(", "batch_data", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "#rotation_angle = np.random.uniform() * 2 * np.pi", "\n", "        ", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", ":", ",", "0", ":", "3", "]", "\n", "rotated_data", "[", "k", ",", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.rotate_point_cloud_by_angle_with_normal": [[154, 175], ["numpy.zeros", "range", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "numpy.dot", "shape_pc.reshape", "shape_normal.reshape"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle_with_normal", "(", "batch_data", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n        Input:\n          BxNx6 array, original batch of point clouds with normal\n          scalar, angle of rotation\n        Return:\n          BxNx6 array, rotated batch of point clouds iwth normal\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "#rotation_angle = np.random.uniform() * 2 * np.pi", "\n", "        ", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", ":", ",", "0", ":", "3", "]", "\n", "shape_normal", "=", "batch_data", "[", "k", ",", ":", ",", "3", ":", "6", "]", "\n", "rotated_data", "[", "k", ",", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "rotated_data", "[", "k", ",", ":", ",", "3", ":", "6", "]", "=", "np", ".", "dot", "(", "shape_normal", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.rotate_perturbation_point_cloud": [[178, 201], ["numpy.zeros", "range", "numpy.clip", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "shape_pc.reshape", "numpy.random.randn", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "rotate_perturbation_point_cloud", "(", "batch_data", ",", "angle_sigma", "=", "0.06", ",", "angle_clip", "=", "0.18", ")", ":", "\n", "    ", "\"\"\" Randomly perturb the point clouds by small rotations\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "angles", "=", "np", ".", "clip", "(", "angle_sigma", "*", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "-", "angle_clip", ",", "angle_clip", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R", "=", "np", ".", "dot", "(", "Rz", ",", "np", ".", "dot", "(", "Ry", ",", "Rx", ")", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "R", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.jitter_point_cloud": [[203, 215], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_point_cloud", "(", "batch_data", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "    ", "\"\"\" Randomly jitter points. jittering is per point.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, jittered batch of point clouds\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "assert", "(", "clip", ">", "0", ")", "\n", "jittered_data", "=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "B", ",", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "jittered_data", "+=", "batch_data", "\n", "return", "jittered_data", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.shift_point_cloud": [[216, 228], ["numpy.random.uniform", "range"], "function", ["None"], ["", "def", "shift_point_cloud", "(", "batch_data", ",", "shift_range", "=", "0.1", ")", ":", "\n", "    ", "\"\"\" Randomly shift point cloud. Shift is per point cloud.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, shifted batch of point clouds\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "shifts", "=", "np", ".", "random", ".", "uniform", "(", "-", "shift_range", ",", "shift_range", ",", "(", "B", ",", "3", ")", ")", "\n", "for", "batch_index", "in", "range", "(", "B", ")", ":", "\n", "        ", "batch_data", "[", "batch_index", ",", ":", ",", ":", "]", "+=", "shifts", "[", "batch_index", ",", ":", "]", "\n", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.random_scale_point_cloud": [[230, 242], ["numpy.random.uniform", "range"], "function", ["None"], ["", "def", "random_scale_point_cloud", "(", "batch_data", ",", "scale_low", "=", "0.8", ",", "scale_high", "=", "1.25", ")", ":", "\n", "    ", "\"\"\" Randomly scale the point cloud. Scale is per point cloud.\n        Input:\n            BxNx3 array, original batch of point clouds\n        Return:\n            BxNx3 array, scaled batch of point clouds\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "scales", "=", "np", ".", "random", ".", "uniform", "(", "scale_low", ",", "scale_high", ",", "B", ")", "\n", "for", "batch_index", "in", "range", "(", "B", ")", ":", "\n", "        ", "batch_data", "[", "batch_index", ",", ":", ",", ":", "]", "*=", "scales", "[", "batch_index", "]", "\n", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.provider.random_point_dropout": [[243, 251], ["range", "numpy.random.random", "numpy.where", "len", "numpy.random.random"], "function", ["None"], ["", "def", "random_point_dropout", "(", "batch_pc", ",", "max_dropout_ratio", "=", "0.875", ")", ":", "\n", "    ", "''' batch_pc: BxNx3 '''", "\n", "for", "b", "in", "range", "(", "batch_pc", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "dropout_ratio", "=", "np", ".", "random", ".", "random", "(", ")", "*", "max_dropout_ratio", "# 0~0.875", "\n", "drop_idx", "=", "np", ".", "where", "(", "np", ".", "random", ".", "random", "(", "(", "batch_pc", ".", "shape", "[", "1", "]", ")", ")", "<=", "dropout_ratio", ")", "[", "0", "]", "\n", "if", "len", "(", "drop_idx", ")", ">", "0", ":", "\n", "            ", "batch_pc", "[", "b", ",", "drop_idx", ",", ":", "]", "=", "batch_pc", "[", "b", ",", "0", ",", ":", "]", "# set to the first point", "\n", "", "", "return", "batch_pc", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.summary.summary": [[18, 141], ["summary.apply_hooks", "isinstance", "tuple", "formatting.FormattingOptions", "formatting.FormattingOptions.set_layer_name_width", "model_statistics.ModelStatistics", "torch.device", "torch.device", "summary.get_correct_input_sizes", "isinstance", "print", "input_data.size", "input_data.to", "all", "TypeError", "torch.is_tensor", "torch.is_tensor", "kwargs[].to", "torch.no_grad", "torch.no_grad", "print", "hook.remove", "torch.cuda.is_available", "torch.cuda.is_available", "summary.get_correct_input_sizes", "summary.get_correct_input_sizes", "summary.get_input_tensor", "torch.is_tensor", "torch.is_tensor", "t.to", "model.to", "isinstance", "data.size", "data.to", "len"], "function", ["home.repos.pwc.inspect_result.engelnico_point-transformer.helper.summary.apply_hooks", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.formatting.FormattingOptions.set_layer_name_width", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.summary.get_correct_input_sizes", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.summary.get_correct_input_sizes", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.summary.get_correct_input_sizes", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.summary.get_input_tensor"], ["def", "summary", "(", "\n", "model", ":", "nn", ".", "Module", ",", "\n", "input_data", ":", "Union", "[", "torch", ".", "Tensor", ",", "torch", ".", "Size", ",", "Sequence", "[", "torch", ".", "Tensor", "]", ",", "INPUT_SIZE_TYPE", "]", ",", "\n", "*", "args", ":", "Any", ",", "\n", "batch_dim", ":", "int", "=", "0", ",", "\n", "branching", ":", "bool", "=", "True", ",", "\n", "col_names", ":", "Sequence", "[", "str", "]", "=", "(", "\"output_size\"", ",", "\"num_params\"", ")", ",", "\n", "col_width", ":", "int", "=", "25", ",", "\n", "depth", ":", "int", "=", "3", ",", "\n", "device", ":", "Optional", "[", "torch", ".", "device", "]", "=", "None", ",", "\n", "dtypes", ":", "Optional", "[", "List", "[", "torch", ".", "dtype", "]", "]", "=", "None", ",", "\n", "verbose", ":", "int", "=", "1", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ModelStatistics", ":", "\n", "    ", "\"\"\"\n    Summarize the given PyTorch model. Summarized information includes:\n        1) Layer names,\n        2) output shape,\n        3) kernel shape,\n        4) # of parameters,\n        5) # of operations (Mult-Adds)\n\n    Args:\n        model (nn.Module):\n                PyTorch model to summarize\n\n        input_data (Sequence of Sizes or Tensors):\n                Example input tensor of the model (dtypes inferred from model input).\n                - OR -\n                Shape of input data as a List/Tuple/torch.Size (dtypes must match model input,\n                default is FloatTensors).\n\n        batch_dim (int):\n                Batch_dimension of input data. Default: 0\n\n        branching (bool):\n                Whether to use the branching layout for the printed output. Default: True\n\n        col_names (Sequence[str]):\n                Specify which columns to show in the output. Currently supported:\n                        ('output_size', 'num_params', 'kernel_size', 'mult_adds')\n                Default: (\"output_size\", \"num_params\")\n\n        col_width (int):\n                Width of each column. Default: 25\n\n        depth (int):\n                Number of nested layers to traverse (e.g. Sequentials). Default: 3\n\n        device (torch.Device):\n                Uses this torch device for model and input_data.\n                If not specified, uses result of torch.cuda.is_available(). Default: None\n\n        dtypes (List[torch.dtype]):\n                For multiple inputs, specify the size of both inputs, and\n                also specify the types of each parameter here. Default: None\n\n        verbose (int):\n                0 (quiet): No output\n                1 (default): Print model summary\n                2 (verbose): Show weight and bias layers in full detail\n                Default: 1\n\n        *args, **kwargs:\n                Other arguments used in `model.forward` function.\n\n    Return:\n        ModelStatistics object\n                See torchsummary/model_statistics.py for more information.\n    \"\"\"", "\n", "assert", "verbose", "in", "(", "0", ",", "1", ",", "2", ")", "\n", "summary_list", "=", "[", "]", "# type: List[LayerInfo]", "\n", "hooks", "=", "[", "]", "# type: List[RemovableHandle]", "\n", "idx", "=", "{", "}", "# type: Dict[int, int]", "\n", "apply_hooks", "(", "model", ",", "model", ",", "depth", ",", "summary_list", ",", "hooks", ",", "idx", ",", "batch_dim", ")", "\n", "\n", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "", "if", "isinstance", "(", "input_data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "input_size", "=", "get_correct_input_sizes", "(", "input_data", ".", "size", "(", ")", ")", "\n", "x", "=", "[", "input_data", ".", "to", "(", "device", ")", "]", "\n", "\n", "", "elif", "isinstance", "(", "input_data", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "if", "all", "(", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", "for", "data", "in", "input_data", ")", ":", "\n", "            ", "input_sizes", "=", "[", "data", ".", "size", "(", ")", "for", "data", "in", "input_data", "]", "# type: ignore", "\n", "input_size", "=", "get_correct_input_sizes", "(", "input_sizes", ")", "\n", "x", "=", "[", "data", ".", "to", "(", "device", ")", "for", "data", "in", "input_data", "]", "# type: ignore", "\n", "", "else", ":", "\n", "            ", "if", "dtypes", "is", "None", ":", "\n", "                ", "dtypes", "=", "[", "torch", ".", "float", "]", "*", "len", "(", "input_data", ")", "\n", "", "input_size", "=", "get_correct_input_sizes", "(", "input_data", ")", "\n", "x", "=", "get_input_tensor", "(", "input_size", ",", "batch_dim", ",", "dtypes", ",", "device", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "\"Input type is not recognized. Please ensure input_data is valid.\\n\"", "\n", "\"For multiple inputs to the network, ensure input_data passed in is \"", "\n", "\"a sequence of tensors or a list of tuple sizes. If you are having trouble here, \"", "\n", "\"please submit a GitHub issue.\"", "\n", ")", "\n", "\n", "", "args", "=", "tuple", "(", "[", "t", ".", "to", "(", "device", ")", "if", "torch", ".", "is_tensor", "(", "t", ")", "else", "t", "for", "t", "in", "args", "]", ")", "\n", "kwargs", "=", "{", "k", ":", "kwargs", "[", "k", "]", ".", "to", "(", "device", ")", "if", "torch", ".", "is_tensor", "(", "kwargs", "[", "k", "]", ")", "else", "k", "for", "k", "in", "kwargs", "}", "\n", "\n", "try", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", "=", "model", ".", "to", "(", "device", ")", "(", "*", "x", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "except", "Exception", ":", "\n", "        ", "print", "(", "\n", "\"Failed to run torchsummary, printing sizes of executed layers: {}\"", ".", "format", "(", "summary_list", ")", "\n", ")", "\n", "raise", "\n", "", "finally", ":", "\n", "        ", "for", "hook", "in", "hooks", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "\n", "", "", "formatting", "=", "FormattingOptions", "(", "branching", ",", "depth", ",", "verbose", ",", "col_names", ",", "col_width", ")", "\n", "formatting", ".", "set_layer_name_width", "(", "summary_list", ")", "\n", "results", "=", "ModelStatistics", "(", "summary_list", ",", "input_size", ",", "formatting", ")", "\n", "if", "verbose", ">", "Verbosity", ".", "QUIET", ".", "value", ":", "\n", "        ", "print", "(", "results", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.summary.get_input_tensor": [[143, 162], ["zip", "isinstance", "torch.cat.to().type", "isinstance", "torch.rand", "torch.rand", "torch.cat.unsqueeze", "torch.cat", "torch.cat", "x.append", "torch.cat.to"], "function", ["None"], ["", "def", "get_input_tensor", "(", "\n", "input_size", ":", "CORRECTED_INPUT_SIZE_TYPE", ",", "\n", "batch_dim", ":", "int", ",", "\n", "dtypes", ":", "List", "[", "torch", ".", "dtype", "]", ",", "\n", "device", ":", "torch", ".", "device", ",", "\n", ")", "->", "List", "[", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\" Get input_tensor with batch size 2 for use in model.forward() \"\"\"", "\n", "x", "=", "[", "]", "\n", "for", "size", ",", "dtype", "in", "zip", "(", "input_size", ",", "dtypes", ")", ":", "\n", "# add batch_size of 2 for BatchNorm", "\n", "        ", "if", "isinstance", "(", "size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# Case: input_tensor is a list of dimensions", "\n", "            ", "input_tensor", "=", "torch", ".", "rand", "(", "*", "size", ")", "\n", "input_tensor", "=", "input_tensor", ".", "unsqueeze", "(", "dim", "=", "batch_dim", ")", "\n", "input_tensor", "=", "torch", ".", "cat", "(", "[", "input_tensor", "]", "*", "2", ",", "dim", "=", "batch_dim", ")", "\n", "", "result", "=", "input_tensor", ".", "to", "(", "device", ")", ".", "type", "(", "dtype", ")", "\n", "if", "isinstance", "(", "result", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "x", ".", "append", "(", "result", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.summary.get_correct_input_sizes": [[164, 186], ["all", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "list", "isinstance", "tuple", "summary.get_correct_input_sizes.flatten"], "function", ["None"], ["", "def", "get_correct_input_sizes", "(", "input_size", ":", "INPUT_SIZE_TYPE", ")", "->", "CORRECTED_INPUT_SIZE_TYPE", ":", "\n", "    ", "\"\"\" Convert input_size to the correct form, which is a list of tuples.\n    Also handles multiple inputs to the network. \"\"\"", "\n", "\n", "def", "flatten", "(", "nested_array", ":", "INPUT_SIZE_TYPE", ")", "->", "Generator", ":", "\n", "        ", "\"\"\" Flattens a nested array. \"\"\"", "\n", "for", "item", "in", "nested_array", ":", "\n", "            ", "if", "isinstance", "(", "item", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "yield", "from", "flatten", "(", "item", ")", "\n", "", "else", ":", "\n", "                ", "yield", "item", "\n", "\n", "", "", "", "assert", "input_size", "\n", "assert", "all", "(", "size", ">", "0", "for", "size", "in", "flatten", "(", "input_size", ")", ")", ",", "\"Negative size found in input_data.\"", "\n", "\n", "if", "isinstance", "(", "input_size", ",", "list", ")", "and", "isinstance", "(", "input_size", "[", "0", "]", ",", "int", ")", ":", "\n", "        ", "return", "[", "tuple", "(", "input_size", ")", "]", "\n", "", "if", "isinstance", "(", "input_size", ",", "list", ")", ":", "\n", "        ", "return", "input_size", "\n", "", "if", "isinstance", "(", "input_size", ",", "tuple", ")", "and", "isinstance", "(", "input_size", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "return", "list", "(", "input_size", ")", "\n", "", "return", "[", "input_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.summary.apply_hooks": [[188, 219], ["layer_info.LayerInfo", "layer_info.LayerInfo.calculate_output_size", "layer_info.LayerInfo.calculate_num_params", "layer_info.LayerInfo.check_recursive", "summary_list.append", "isinstance", "hooks.append", "module.children", "idx.get", "module.modules", "module.register_forward_hook", "summary.apply_hooks"], "function", ["home.repos.pwc.inspect_result.engelnico_point-transformer.helper.layer_info.LayerInfo.calculate_output_size", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.layer_info.LayerInfo.calculate_num_params", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.layer_info.LayerInfo.check_recursive", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.summary.apply_hooks"], ["", "def", "apply_hooks", "(", "\n", "module", ":", "nn", ".", "Module", ",", "\n", "orig_model", ":", "nn", ".", "Module", ",", "\n", "depth", ":", "int", ",", "\n", "summary_list", ":", "List", "[", "LayerInfo", "]", ",", "\n", "hooks", ":", "List", "[", "RemovableHandle", "]", ",", "\n", "idx", ":", "Dict", "[", "int", ",", "int", "]", ",", "\n", "batch_dim", ":", "int", ",", "\n", "curr_depth", ":", "int", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\" Recursively adds hooks to all layers of the model. \"\"\"", "\n", "\n", "def", "hook", "(", "module", ":", "nn", ".", "Module", ",", "inputs", ":", "Any", ",", "outputs", ":", "Any", ")", "->", "None", ":", "\n", "        ", "\"\"\" Create a LayerInfo object to aggregate information about that layer. \"\"\"", "\n", "del", "inputs", "\n", "idx", "[", "curr_depth", "]", "=", "idx", ".", "get", "(", "curr_depth", ",", "0", ")", "+", "1", "\n", "info", "=", "LayerInfo", "(", "module", ",", "curr_depth", ",", "idx", "[", "curr_depth", "]", ")", "\n", "info", ".", "calculate_output_size", "(", "outputs", ",", "batch_dim", ")", "\n", "info", ".", "calculate_num_params", "(", ")", "\n", "info", ".", "check_recursive", "(", "summary_list", ")", "\n", "summary_list", ".", "append", "(", "info", ")", "\n", "\n", "# ignore Sequential and ModuleList and other containers", "\n", "", "submodules", "=", "[", "m", "for", "m", "in", "module", ".", "modules", "(", ")", "if", "m", "is", "not", "orig_model", "]", "\n", "if", "module", "!=", "orig_model", "or", "isinstance", "(", "module", ",", "LAYER_MODULES", ")", "or", "not", "submodules", ":", "\n", "        ", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "hook", ")", ")", "\n", "\n", "", "if", "curr_depth", "<=", "depth", ":", "\n", "        ", "for", "child", "in", "module", ".", "children", "(", ")", ":", "\n", "            ", "apply_hooks", "(", "\n", "child", ",", "orig_model", ",", "depth", ",", "summary_list", ",", "hooks", ",", "idx", ",", "batch_dim", ",", "curr_depth", "+", "1", "\n", ")", ""]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.ShapeNetDataLoader.PartNormalDataset.__init__": [[18, 88], ["os.path.join", "dict", "ShapeNetDataLoader.PartNormalDataset.cat.keys", "open", "zip", "open", "set", "open", "set", "open", "set", "os.path.join", "sorted", "line.strip().split", "ShapeNetDataLoader.PartNormalDataset.cat.items", "range", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "ShapeNetDataLoader.PartNormalDataset.meta[].append", "ShapeNetDataLoader.PartNormalDataset.datapath.append", "len", "ShapeNetDataLoader.PartNormalDataset.cat.items", "str", "str", "str", "os.path.splitext", "os.path.join", "line.strip", "json.load", "json.load", "json.load", "os.path.basename", "d.split", "d.split", "d.split", "print", "exit"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'./data/shapenetcore_partanno_segmentation_benchmark_v0_normal'", ",", "npoints", "=", "1024", ",", "split", "=", "'train'", ",", "class_choice", "=", "None", ",", "normal_channel", "=", "False", ")", ":", "\n", "        ", "self", ".", "npoints", "=", "npoints", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "catfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'synsetoffset2category.txt'", ")", "\n", "self", ".", "cat", "=", "{", "}", "\n", "self", ".", "normal_channel", "=", "normal_channel", "\n", "\n", "\n", "with", "open", "(", "self", ".", "catfile", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "ls", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "self", ".", "cat", "[", "ls", "[", "0", "]", "]", "=", "ls", "[", "1", "]", "\n", "", "", "self", ".", "cat", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "cat", ".", "items", "(", ")", "}", "\n", "self", ".", "classes_original", "=", "dict", "(", "zip", "(", "self", ".", "cat", ",", "range", "(", "len", "(", "self", ".", "cat", ")", ")", ")", ")", "\n", "\n", "if", "not", "class_choice", "is", "None", ":", "\n", "            ", "self", ".", "cat", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "cat", ".", "items", "(", ")", "if", "k", "in", "class_choice", "}", "\n", "# print(self.cat)", "\n", "\n", "", "self", ".", "meta", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'train_test_split'", ",", "'shuffled_train_file_list.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "train_ids", "=", "set", "(", "[", "str", "(", "d", ".", "split", "(", "'/'", ")", "[", "2", "]", ")", "for", "d", "in", "json", ".", "load", "(", "f", ")", "]", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'train_test_split'", ",", "'shuffled_val_file_list.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "val_ids", "=", "set", "(", "[", "str", "(", "d", ".", "split", "(", "'/'", ")", "[", "2", "]", ")", "for", "d", "in", "json", ".", "load", "(", "f", ")", "]", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'train_test_split'", ",", "'shuffled_test_file_list.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "test_ids", "=", "set", "(", "[", "str", "(", "d", ".", "split", "(", "'/'", ")", "[", "2", "]", ")", "for", "d", "in", "json", ".", "load", "(", "f", ")", "]", ")", "\n", "", "for", "item", "in", "self", ".", "cat", ":", "\n", "# print('category', item)", "\n", "            ", "self", ".", "meta", "[", "item", "]", "=", "[", "]", "\n", "dir_point", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "cat", "[", "item", "]", ")", "\n", "fns", "=", "sorted", "(", "os", ".", "listdir", "(", "dir_point", ")", ")", "\n", "# print(fns[0][0:-4])", "\n", "if", "split", "==", "'trainval'", ":", "\n", "                ", "fns", "=", "[", "fn", "for", "fn", "in", "fns", "if", "(", "(", "fn", "[", "0", ":", "-", "4", "]", "in", "train_ids", ")", "or", "(", "fn", "[", "0", ":", "-", "4", "]", "in", "val_ids", ")", ")", "]", "\n", "", "elif", "split", "==", "'train'", ":", "\n", "                ", "fns", "=", "[", "fn", "for", "fn", "in", "fns", "if", "fn", "[", "0", ":", "-", "4", "]", "in", "train_ids", "]", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "                ", "fns", "=", "[", "fn", "for", "fn", "in", "fns", "if", "fn", "[", "0", ":", "-", "4", "]", "in", "val_ids", "]", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "                ", "fns", "=", "[", "fn", "for", "fn", "in", "fns", "if", "fn", "[", "0", ":", "-", "4", "]", "in", "test_ids", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Unknown split: %s. Exiting..'", "%", "(", "split", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "# print(os.path.basename(fns))", "\n", "", "for", "fn", "in", "fns", ":", "\n", "                ", "token", "=", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "fn", ")", ")", "[", "0", "]", ")", "\n", "self", ".", "meta", "[", "item", "]", ".", "append", "(", "os", ".", "path", ".", "join", "(", "dir_point", ",", "token", "+", "'.txt'", ")", ")", "\n", "\n", "", "", "self", ".", "datapath", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "cat", ":", "\n", "            ", "for", "fn", "in", "self", ".", "meta", "[", "item", "]", ":", "\n", "                ", "self", ".", "datapath", ".", "append", "(", "(", "item", ",", "fn", ")", ")", "\n", "\n", "", "", "self", ".", "classes", "=", "{", "}", "\n", "for", "i", "in", "self", ".", "cat", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "classes", "[", "i", "]", "=", "self", ".", "classes_original", "[", "i", "]", "\n", "\n", "# Mapping from category ('Chair') to a list of int [10,11,12,13] as segmentation labels", "\n", "", "self", ".", "seg_classes", "=", "{", "'Earphone'", ":", "[", "16", ",", "17", ",", "18", "]", ",", "'Motorbike'", ":", "[", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", "]", ",", "'Rocket'", ":", "[", "41", ",", "42", ",", "43", "]", ",", "\n", "'Car'", ":", "[", "8", ",", "9", ",", "10", ",", "11", "]", ",", "'Laptop'", ":", "[", "28", ",", "29", "]", ",", "'Cap'", ":", "[", "6", ",", "7", "]", ",", "'Skateboard'", ":", "[", "44", ",", "45", ",", "46", "]", ",", "\n", "'Mug'", ":", "[", "36", ",", "37", "]", ",", "'Guitar'", ":", "[", "19", ",", "20", ",", "21", "]", ",", "'Bag'", ":", "[", "4", ",", "5", "]", ",", "'Lamp'", ":", "[", "24", ",", "25", ",", "26", ",", "27", "]", ",", "\n", "'Table'", ":", "[", "47", ",", "48", ",", "49", "]", ",", "'Airplane'", ":", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "'Pistol'", ":", "[", "38", ",", "39", ",", "40", "]", ",", "\n", "'Chair'", ":", "[", "12", ",", "13", ",", "14", ",", "15", "]", ",", "'Knife'", ":", "[", "22", ",", "23", "]", "}", "\n", "\n", "# for cat in sorted(self.seg_classes.keys()):", "\n", "#     print(cat, self.seg_classes[cat])", "\n", "\n", "self", ".", "cache", "=", "{", "}", "# from index to (point_set, cls, seg) tuple", "\n", "self", ".", "cache_size", "=", "20000", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.ShapeNetDataLoader.PartNormalDataset.__getitem__": [[90, 114], ["ShapeNetDataLoader.pc_normalize", "numpy.random.choice", "numpy.array().astype", "numpy.loadtxt().astype", "data[].astype", "len", "len", "numpy.array", "numpy.loadtxt"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.pc_normalize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", "in", "self", ".", "cache", ":", "\n", "            ", "ppoint_set", ",", "cls", ",", "seg", "=", "self", ".", "cache", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "fn", "=", "self", ".", "datapath", "[", "index", "]", "\n", "cat", "=", "self", ".", "datapath", "[", "index", "]", "[", "0", "]", "\n", "cls", "=", "self", ".", "classes", "[", "cat", "]", "\n", "cls", "=", "np", ".", "array", "(", "[", "cls", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "data", "=", "np", ".", "loadtxt", "(", "fn", "[", "1", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "not", "self", ".", "normal_channel", ":", "\n", "                ", "point_set", "=", "data", "[", ":", ",", "0", ":", "3", "]", "\n", "", "else", ":", "\n", "                ", "point_set", "=", "data", "[", ":", ",", "0", ":", "6", "]", "\n", "", "seg", "=", "data", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "if", "len", "(", "self", ".", "cache", ")", "<", "self", ".", "cache_size", ":", "\n", "                ", "self", ".", "cache", "[", "index", "]", "=", "(", "point_set", ",", "cls", ",", "seg", ")", "\n", "", "", "point_set", "[", ":", ",", "0", ":", "3", "]", "=", "pc_normalize", "(", "point_set", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "seg", ")", ",", "self", ".", "npoints", ",", "replace", "=", "True", ")", "\n", "# resample", "\n", "point_set", "=", "point_set", "[", "choice", ",", ":", "]", "\n", "seg", "=", "seg", "[", "choice", "]", "\n", "\n", "return", "point_set", ",", "cls", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.ShapeNetDataLoader.PartNormalDataset.__len__": [[115, 117], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "datapath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.ShapeNetDataLoader.pc_normalize": [[10, 16], ["numpy.mean", "numpy.max", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["def", "pc_normalize", "(", "pc", ")", ":", "\n", "    ", "centroid", "=", "np", ".", "mean", "(", "pc", ",", "axis", "=", "0", ")", "\n", "pc", "=", "pc", "-", "centroid", "\n", "m", "=", "np", ".", "max", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pc", "**", "2", ",", "axis", "=", "1", ")", ")", ")", "\n", "pc", "=", "pc", "/", "m", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.ModelNetDataLoader.ModelNetDataLoader.__init__": [[42, 65], ["os.path.join", "dict", "print", "line.rstrip", "zip", "line.rstrip", "line.rstrip", "open", "range", "open", "open", "range", "len", "os.path.join", "os.path.join", "x.split", "os.path.join", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "npoint", "=", "1024", ",", "split", "=", "'train'", ",", "uniform", "=", "False", ",", "normal_channel", "=", "True", ",", "cache_size", "=", "15000", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "npoints", "=", "npoint", "\n", "self", ".", "uniform", "=", "uniform", "\n", "self", ".", "catfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'modelnet40_shape_names.txt'", ")", "\n", "\n", "self", ".", "cat", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "self", ".", "catfile", ")", "]", "\n", "self", ".", "classes", "=", "dict", "(", "zip", "(", "self", ".", "cat", ",", "range", "(", "len", "(", "self", ".", "cat", ")", ")", ")", ")", "\n", "self", ".", "normal_channel", "=", "normal_channel", "\n", "\n", "shape_ids", "=", "{", "}", "\n", "shape_ids", "[", "'train'", "]", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'modelnet40_train.txt'", ")", ")", "]", "\n", "shape_ids", "[", "'test'", "]", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'modelnet40_test.txt'", ")", ")", "]", "\n", "\n", "assert", "(", "split", "==", "'train'", "or", "split", "==", "'test'", ")", "\n", "shape_names", "=", "[", "'_'", ".", "join", "(", "x", ".", "split", "(", "'_'", ")", "[", "0", ":", "-", "1", "]", ")", "for", "x", "in", "shape_ids", "[", "split", "]", "]", "\n", "# list of (shape_name, shape_txt_file_path) tuple", "\n", "self", ".", "datapath", "=", "[", "(", "shape_names", "[", "i", "]", ",", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "shape_names", "[", "i", "]", ",", "shape_ids", "[", "split", "]", "[", "i", "]", ")", "+", "'.txt'", ")", "for", "i", "\n", "in", "range", "(", "len", "(", "shape_ids", "[", "split", "]", ")", ")", "]", "\n", "print", "(", "'The size of %s data is %d'", "%", "(", "split", ",", "len", "(", "self", ".", "datapath", ")", ")", ")", "\n", "\n", "self", ".", "cache_size", "=", "cache_size", "# how many data points to cache in memory", "\n", "self", ".", "cache", "=", "{", "}", "# from index to (point_set, cls) tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.ModelNetDataLoader.ModelNetDataLoader.__len__": [[66, 68], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "datapath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.ModelNetDataLoader.ModelNetDataLoader._get_item": [[69, 91], ["numpy.array().astype", "numpy.loadtxt().astype", "ModelNetDataLoader.pc_normalize", "ModelNetDataLoader.farthest_point_sample", "len", "numpy.array", "numpy.loadtxt"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.pc_normalize", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.farthest_point_sample"], ["", "def", "_get_item", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", "in", "self", ".", "cache", ":", "\n", "            ", "point_set", ",", "cls", "=", "self", ".", "cache", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "fn", "=", "self", ".", "datapath", "[", "index", "]", "\n", "cls", "=", "self", ".", "classes", "[", "self", ".", "datapath", "[", "index", "]", "[", "0", "]", "]", "\n", "cls", "=", "np", ".", "array", "(", "[", "cls", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "point_set", "=", "np", ".", "loadtxt", "(", "fn", "[", "1", "]", ",", "delimiter", "=", "','", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "self", ".", "uniform", ":", "\n", "                ", "point_set", "=", "farthest_point_sample", "(", "point_set", ",", "self", ".", "npoints", ")", "\n", "", "else", ":", "\n", "                ", "point_set", "=", "point_set", "[", "0", ":", "self", ".", "npoints", ",", ":", "]", "\n", "\n", "", "point_set", "[", ":", ",", "0", ":", "3", "]", "=", "pc_normalize", "(", "point_set", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "\n", "if", "not", "self", ".", "normal_channel", ":", "\n", "                ", "point_set", "=", "point_set", "[", ":", ",", "0", ":", "3", "]", "\n", "\n", "", "if", "len", "(", "self", ".", "cache", ")", "<", "self", ".", "cache_size", ":", "\n", "                ", "self", ".", "cache", "[", "index", "]", "=", "(", "point_set", ",", "cls", ")", "\n", "\n", "", "", "return", "point_set", ",", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.ModelNetDataLoader.ModelNetDataLoader.__getitem__": [[92, 94], ["ModelNetDataLoader.ModelNetDataLoader._get_item"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.helper.ModelNetDataLoader.ModelNetDataLoader._get_item"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "_get_item", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.ModelNetDataLoader.pc_normalize": [[11, 17], ["numpy.mean", "numpy.max", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["def", "pc_normalize", "(", "pc", ")", ":", "\n", "    ", "centroid", "=", "np", ".", "mean", "(", "pc", ",", "axis", "=", "0", ")", "\n", "pc", "=", "pc", "-", "centroid", "\n", "m", "=", "np", ".", "max", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pc", "**", "2", ",", "axis", "=", "1", ")", ")", ")", "\n", "pc", "=", "pc", "/", "m", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.ModelNetDataLoader.farthest_point_sample": [[18, 40], ["numpy.zeros", "numpy.random.randint", "range", "numpy.ones", "numpy.sum", "numpy.argmax", "np.zeros.astype"], "function", ["None"], ["", "def", "farthest_point_sample", "(", "point", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: pointcloud data, [N, D]\n        npoint: number of samples\n    Return:\n        centroids: sampled pointcloud index, [npoint, D]\n    \"\"\"", "\n", "N", ",", "D", "=", "point", ".", "shape", "\n", "xyz", "=", "point", "[", ":", ",", ":", "3", "]", "\n", "centroids", "=", "np", ".", "zeros", "(", "(", "npoint", ",", ")", ")", "\n", "distance", "=", "np", ".", "ones", "(", "(", "N", ",", ")", ")", "*", "1e10", "\n", "farthest", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "N", ")", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "centroids", "[", "i", "]", "=", "farthest", "\n", "centroid", "=", "xyz", "[", "farthest", ",", ":", "]", "\n", "dist", "=", "np", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "-", "1", ")", "\n", "mask", "=", "dist", "<", "distance", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "farthest", "=", "np", ".", "argmax", "(", "distance", ",", "-", "1", ")", "\n", "", "point", "=", "point", "[", "centroids", ".", "astype", "(", "np", ".", "int32", ")", "]", "\n", "return", "point", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.layer_info.LayerInfo.__init__": [[14, 30], ["id", "[].split", "str().split", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "module", ":", "nn", ".", "Module", ",", "depth", ":", "int", ",", "depth_index", ":", "int", ")", ":", "\n", "# Identifying information", "\n", "        ", "self", ".", "layer_id", "=", "id", "(", "module", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "class_name", "=", "str", "(", "module", ".", "__class__", ")", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"'\"", ")", "[", "0", "]", "\n", "self", ".", "inner_layers", "=", "{", "}", "# type: Dict[str, List[int]]", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "depth_index", "=", "depth_index", "\n", "\n", "# Statistics", "\n", "self", ".", "trainable", "=", "True", "\n", "self", ".", "is_recursive", "=", "False", "\n", "self", ".", "output_size", "=", "[", "]", "# type: List[Union[int, Sequence[Any], torch.Size]]", "\n", "self", ".", "kernel_size", "=", "[", "]", "# type: List[int]", "\n", "self", ".", "num_params", "=", "0", "\n", "self", ".", "macs", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.layer_info.LayerInfo.__repr__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"{}: {}-{}\"", ".", "format", "(", "self", ".", "class_name", ",", "self", ".", "depth", ",", "self", ".", "depth_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.layer_info.LayerInfo.calculate_output_size": [[34, 58], ["isinstance", "isinstance", "list", "outputs.items", "isinstance", "outputs[].size", "list", "list", "layer_info.LayerInfo.output_size.append", "list", "TypeError", "outputs[].data.size", "output.size", "outputs.size"], "methods", ["None"], ["", "def", "calculate_output_size", "(", "self", ",", "outputs", ":", "DETECTED_OUTPUT_TYPES", ",", "batch_dim", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\" Set output_size using the model's outputs. \"\"\"", "\n", "if", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "output_size", "=", "list", "(", "outputs", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "self", ".", "output_size", "[", "batch_dim", "]", "=", "-", "1", "\n", "", "except", "AttributeError", ":", "\n", "# pack_padded_seq and pad_packed_seq store feature into data attribute", "\n", "                ", "size", "=", "list", "(", "outputs", "[", "0", "]", ".", "data", ".", "size", "(", ")", ")", "\n", "self", ".", "output_size", "=", "size", "[", ":", "batch_dim", "]", "+", "[", "-", "1", "]", "+", "size", "[", "batch_dim", "+", "1", ":", "]", "\n", "\n", "", "", "elif", "isinstance", "(", "outputs", ",", "dict", ")", ":", "\n", "            ", "for", "_", ",", "output", "in", "outputs", ".", "items", "(", ")", ":", "\n", "                ", "size", "=", "list", "(", "output", ".", "size", "(", ")", ")", "\n", "size_with_batch", "=", "size", "[", ":", "batch_dim", "]", "+", "[", "-", "1", "]", "+", "size", "[", "batch_dim", "+", "1", ":", "]", "\n", "self", ".", "output_size", ".", "append", "(", "size_with_batch", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "outputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "list", "(", "outputs", ".", "size", "(", ")", ")", "\n", "self", ".", "output_size", "[", "batch_dim", "]", "=", "-", "1", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Model contains a layer with an unsupported output type: {}\"", ".", "format", "(", "outputs", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.layer_info.LayerInfo.calculate_num_params": [[60, 83], ["layer_info.LayerInfo.module.named_parameters", "param.nelement", "list", "param.size", "len", "int", "param.nelement", "list", "param.nelement", "param.size", "param.nelement", "numpy.prod"], "methods", ["None"], ["", "", "def", "calculate_num_params", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\" Set num_params using the module's parameters.  \"\"\"", "\n", "for", "name", ",", "param", "in", "self", ".", "module", ".", "named_parameters", "(", ")", ":", "\n", "            ", "self", ".", "num_params", "+=", "param", ".", "nelement", "(", ")", "\n", "self", ".", "trainable", "&=", "param", ".", "requires_grad", "\n", "\n", "if", "name", "==", "\"weight\"", ":", "\n", "                ", "ksize", "=", "list", "(", "param", ".", "size", "(", ")", ")", "\n", "# to make [in_shape, out_shape, ksize, ksize]", "\n", "if", "len", "(", "ksize", ")", ">", "1", ":", "\n", "                    ", "ksize", "[", "0", "]", ",", "ksize", "[", "1", "]", "=", "ksize", "[", "1", "]", ",", "ksize", "[", "0", "]", "\n", "", "self", ".", "kernel_size", "=", "ksize", "\n", "\n", "# ignore N, C when calculate Mult-Adds in ConvNd", "\n", "if", "\"Conv\"", "in", "self", ".", "class_name", ":", "\n", "                    ", "self", ".", "macs", "+=", "int", "(", "param", ".", "nelement", "(", ")", "*", "np", ".", "prod", "(", "self", ".", "output_size", "[", "2", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "macs", "+=", "param", ".", "nelement", "(", ")", "\n", "\n", "# RNN modules have inner weights such as weight_ih_l0", "\n", "", "", "elif", "\"weight\"", "in", "name", ":", "\n", "                ", "self", ".", "inner_layers", "[", "name", "]", "=", "list", "(", "param", ".", "size", "(", ")", ")", "\n", "self", ".", "macs", "+=", "param", ".", "nelement", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.layer_info.LayerInfo.check_recursive": [[84, 91], ["list", "layer_info.LayerInfo.module.named_parameters"], "methods", ["None"], ["", "", "", "def", "check_recursive", "(", "self", ",", "summary_list", ":", "\"List[LayerInfo]\"", ")", "->", "None", ":", "\n", "        ", "\"\"\" if the current module is already-used, mark as (recursive).\n        Must check before adding line to the summary. \"\"\"", "\n", "if", "list", "(", "self", ".", "module", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "for", "other_layer", "in", "summary_list", ":", "\n", "                ", "if", "self", ".", "layer_id", "==", "other_layer", ".", "layer_id", ":", "\n", "                    ", "self", ".", "is_recursive", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.layer_info.LayerInfo.macs_to_str": [[92, 97], ["any", "layer_info.LayerInfo.module.children"], "methods", ["None"], ["", "", "", "", "def", "macs_to_str", "(", "self", ",", "reached_max_depth", ":", "bool", ")", "->", "str", ":", "\n", "        ", "\"\"\" Convert MACs to string. \"\"\"", "\n", "if", "self", ".", "num_params", ">", "0", "and", "(", "reached_max_depth", "or", "not", "any", "(", "self", ".", "module", ".", "children", "(", ")", ")", ")", ":", "\n", "            ", "return", "\"{:,}\"", ".", "format", "(", "self", ".", "macs", ")", "\n", "", "return", "\"--\"", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.layer_info.LayerInfo.num_params_to_str": [[98, 110], ["any", "layer_info.LayerInfo.module.children"], "methods", ["None"], ["", "def", "num_params_to_str", "(", "self", ",", "reached_max_depth", ":", "bool", "=", "False", ")", "->", "str", ":", "\n", "        ", "\"\"\" Convert num_params to string. \"\"\"", "\n", "assert", "self", ".", "num_params", ">=", "0", "\n", "if", "self", ".", "is_recursive", ":", "\n", "            ", "return", "\"(recursive)\"", "\n", "", "if", "self", ".", "num_params", ">", "0", ":", "\n", "            ", "param_count_str", "=", "\"{:,}\"", ".", "format", "(", "(", "self", ".", "num_params", ")", ")", "\n", "if", "reached_max_depth", "or", "not", "any", "(", "self", ".", "module", ".", "children", "(", ")", ")", ":", "\n", "                ", "if", "not", "self", ".", "trainable", ":", "\n", "                    ", "return", "\"({})\"", ".", "format", "(", "param_count_str", ")", "\n", "", "return", "param_count_str", "\n", "", "", "return", "\"--\"", "", "", "", ""]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.optimizer.RangerVA.__init__": [[29, 63], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "alpha", "=", "0.5", ",", "k", "=", "6", ",", "n_sma_threshhold", "=", "5", ",", "betas", "=", "(", ".95", ",", "0.999", ")", ",", "\n", "eps", "=", "1e-5", ",", "weight_decay", "=", "0", ",", "amsgrad", "=", "True", ",", "transformer", "=", "'softplus'", ",", "smooth", "=", "50", ",", "\n", "grad_transformer", "=", "'square'", ")", ":", "\n", "#parameter checks", "\n", "        ", "if", "not", "0.0", "<=", "alpha", "<=", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid slow update rate: {alpha}'", ")", "\n", "", "if", "not", "1", "<=", "k", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid lookahead steps: {k}'", ")", "\n", "", "if", "not", "lr", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid Learning Rate: {lr}'", ")", "\n", "", "if", "not", "eps", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid eps: {eps}'", ")", "\n", "\n", "#parameter comments:", "\n", "# beta1 (momentum) of .95 seems to work better than .90...", "\n", "#N_sma_threshold of 5 seems better in testing than 4.", "\n", "#In both cases, worth testing on your dataset (.90 vs .95, 4 vs 5) to make sure which works best for you.", "\n", "\n", "#prep defaults and init torch.optim base", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "alpha", "=", "alpha", ",", "k", "=", "k", ",", "step_counter", "=", "0", ",", "betas", "=", "betas", ",", "\n", "n_sma_threshhold", "=", "n_sma_threshhold", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "\n", "smooth", "=", "smooth", ",", "transformer", "=", "transformer", ",", "grad_transformer", "=", "grad_transformer", ",", "\n", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "#adjustable threshold", "\n", "self", ".", "n_sma_threshhold", "=", "n_sma_threshhold", "\n", "\n", "#look ahead params", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "k", "=", "k", "\n", "\n", "#radam buffer for state", "\n", "self", ".", "radam_buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "ind", "in", "range", "(", "10", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.optimizer.RangerVA.__setstate__": [[77, 80], ["print", "super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.helper.optimizer.RangerVA.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "print", "(", "\"set state called\"", ")", "\n", "super", "(", "Ranger", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.optimizer.RangerVA.step": [[82, 207], ["p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "exp_avg_sq.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.empty_like", "state[].copy_", "state[].type_as", "state[].type_as", "torch.max", "max_exp_avg_sq.clone", "exp_avg_sq.clone", "exp_avg_sq.clone.sqrt_", "p.data.float.add_", "torch.nn.Softplus", "torch.nn.Softplus.", "p.data.float.addcdiv_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "slow_p.add_", "p.data.copy_", "torch.zeros_like", "exp_avg_sq.mul_", "exp_avg.mul_", "p.grad.data.float.abs", "exp_avg_sq.mul_", "math.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "#note - below is commented out b/c I have other work that passes back the loss as a float, and thus not a callable closure.  ", "\n", "#Uncomment if you need to use the actual closure...", "\n", "\n", "#if closure is not None:", "\n", "#loss = closure()", "\n", "\n", "#Evaluate averages and grad, update param tensors", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Ranger optimizer does not support sparse gradients'", ")", "\n", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "smooth", "=", "group", "[", "'smooth'", "]", "\n", "grad_transformer", "=", "group", "[", "'grad_transformer'", "]", "\n", "\n", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "#get state dict for this param", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "#if first time to run...init dictionary with our desired entries", "\n", "#if self.first_run_check==0:", "\n", "#self.first_run_check=1", "\n", "#print(\"Initializing slow buffer...should not see this at load from saved model!\")", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "#look ahead weight storage now in state dict ", "\n", "", "state", "[", "'slow_buffer'", "]", "=", "torch", ".", "empty_like", "(", "p", ".", "data", ")", "\n", "state", "[", "'slow_buffer'", "]", ".", "copy_", "(", "p", ".", "data", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "\n", "#begin computations ", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "if", "amsgrad", ":", "\n", "                        ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "\n", "\n", "#compute variance mov avg", "\n", "", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "#compute mean moving avg", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "\n", "\n", "\n", "##transformer", "\n", "if", "grad_transformer", "==", "'square'", ":", "\n", "                    ", "grad_tmp", "=", "grad", "**", "2", "\n", "", "elif", "grad_transformer", "==", "'abs'", ":", "\n", "                    ", "grad_tmp", "=", "grad", ".", "abs", "(", ")", "\n", "\n", "\n", "", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "add_", "(", "(", "1", "-", "beta2", ")", "*", "grad_tmp", ")", "\n", "\n", "\n", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denomc", "=", "max_exp_avg_sq", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                    ", "denomc", "=", "exp_avg_sq", ".", "clone", "(", ")", "\n", "\n", "", "if", "grad_transformer", "==", "'square'", ":", "\n", "#pdb.set_trace()", "\n", "                    ", "denomc", ".", "sqrt_", "(", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "\n", "\n", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "\n", "# ...let's use calibrated alr ", "\n", "if", "group", "[", "'transformer'", "]", "==", "'softplus'", ":", "\n", "                    ", "sp", "=", "torch", ".", "nn", ".", "Softplus", "(", "smooth", ")", "\n", "denomf", "=", "sp", "(", "denomc", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denomf", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "#integrated look ahead...", "\n", "#we do it at the param level instead of group level", "\n", "if", "state", "[", "'step'", "]", "%", "group", "[", "'k'", "]", "==", "0", ":", "\n", "                    ", "slow_p", "=", "state", "[", "'slow_buffer'", "]", "#get access to slow param tensor", "\n", "slow_p", ".", "add_", "(", "self", ".", "alpha", ",", "p", ".", "data", "-", "slow_p", ")", "#(fast weights - slow weights) * alpha", "\n", "p", ".", "data", ".", "copy_", "(", "slow_p", ")", "#copy interpolated weights to RAdam param tensor", "\n", "\n", "", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.__init__": [[22, 47], ["sum", "abs", "numpy.prod", "any", "abs", "any", "layer_info.module.children", "numpy.prod", "layer_info.module.children"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "summary_list", ":", "List", "[", "LayerInfo", "]", ",", "\n", "input_size", ":", "CORRECTED_INPUT_SIZE_TYPE", ",", "\n", "formatting", ":", "FormattingOptions", ",", "\n", ")", ":", "\n", "        ", "self", ".", "summary_list", "=", "summary_list", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "total_input", "=", "sum", "(", "[", "abs", "(", "np", ".", "prod", "(", "sz", ")", ")", "for", "sz", "in", "input_size", "]", ")", "\n", "self", ".", "formatting", "=", "formatting", "\n", "self", ".", "total_params", ",", "self", ".", "trainable_params", "=", "0", ",", "0", "\n", "self", ".", "total_output", ",", "self", ".", "total_mult_adds", "=", "0", ",", "0", "\n", "for", "layer_info", "in", "summary_list", ":", "\n", "            ", "self", ".", "total_mult_adds", "+=", "layer_info", ".", "macs", "\n", "if", "not", "layer_info", ".", "is_recursive", ":", "\n", "                ", "if", "layer_info", ".", "depth", "==", "formatting", ".", "max_depth", "or", "(", "\n", "not", "any", "(", "layer_info", ".", "module", ".", "children", "(", ")", ")", "\n", "and", "layer_info", ".", "depth", "<", "formatting", ".", "max_depth", "\n", ")", ":", "\n", "                    ", "self", ".", "total_params", "+=", "layer_info", ".", "num_params", "\n", "if", "layer_info", ".", "trainable", ":", "\n", "                        ", "self", ".", "trainable_params", "+=", "layer_info", ".", "num_params", "\n", "", "", "if", "layer_info", ".", "num_params", ">", "0", "and", "not", "any", "(", "layer_info", ".", "module", ".", "children", "(", ")", ")", ":", "\n", "# x2 for gradients", "\n", "                    ", "self", ".", "total_output", "+=", "2.0", "*", "abs", "(", "np", ".", "prod", "(", "layer_info", ".", "output_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.to_bytes": [[48, 53], ["None"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "to_bytes", "(", "num", ":", "int", ")", "->", "float", ":", "\n", "        ", "\"\"\" Converts a number (assume floats, 4 bytes each) to megabytes. \"\"\"", "\n", "assert", "num", ">=", "0", "\n", "return", "num", "*", "4", "/", "(", "1024", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.to_readable": [[54, 61], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "to_readable", "(", "num", ":", "int", ")", "->", "float", ":", "\n", "        ", "\"\"\" Converts a number to millions or billions. \"\"\"", "\n", "assert", "num", ">=", "0", "\n", "if", "num", ">=", "1e9", ":", "\n", "            ", "return", "num", "/", "1e9", "\n", "", "return", "num", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.__repr__": [[62, 105], ["model_statistics.ModelStatistics.formatting.format_row", "model_statistics.ModelStatistics.layers_to_str", "model_statistics.ModelStatistics.formatting.get_total_width", "model_statistics.ModelStatistics.to_readable", "model_statistics.ModelStatistics.to_bytes", "model_statistics.ModelStatistics.to_bytes", "model_statistics.ModelStatistics.to_bytes", "model_statistics.ModelStatistics.to_bytes"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.helper.formatting.FormattingOptions.format_row", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.layers_to_str", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.formatting.FormattingOptions.get_total_width", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.to_readable", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.to_bytes", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.to_bytes", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.to_bytes", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.to_bytes"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\" Print results of the summary. \"\"\"", "\n", "header_row", "=", "self", ".", "formatting", ".", "format_row", "(", "\"Layer (type:depth-idx)\"", ",", "HEADER_TITLES", ")", "\n", "layer_rows", "=", "self", ".", "layers_to_str", "(", ")", "\n", "\n", "total_size", "=", "self", ".", "total_input", "+", "self", ".", "total_output", "+", "self", ".", "total_params", "\n", "width", "=", "self", ".", "formatting", ".", "get_total_width", "(", ")", "\n", "summary_str", "=", "(", "\n", "\"{}\\n\"", "\n", "\"{}\"", "\n", "\"{}\\n\"", "\n", "\"{}\"", "\n", "\"{}\\n\"", "\n", "\"Total params: {:,}\\n\"", "\n", "\"Trainable params: {:,}\\n\"", "\n", "\"Non-trainable params: {:,}\\n\"", "\n", "\"Total mult-adds ({}): \"", "\n", "\"{:0.2f}\\n\"", "\n", "\"{}\\n\"", "\n", "\"Input size (MB): {:0.2f}\\n\"", "\n", "\"Forward/backward pass size (MB): {:0.2f}\\n\"", "\n", "\"Params size (MB): {:0.2f}\\n\"", "\n", "\"Estimated Total Size (MB): {:0.2f}\\n\"", "\n", "\"{}\"", ".", "format", "(", "\n", "\"-\"", "*", "width", ",", "\n", "header_row", ",", "\n", "\"=\"", "*", "width", ",", "\n", "layer_rows", ",", "\n", "\"=\"", "*", "width", ",", "\n", "self", ".", "total_params", ",", "\n", "self", ".", "trainable_params", ",", "\n", "self", ".", "total_params", "-", "self", ".", "trainable_params", ",", "\n", "\"G\"", "if", "self", ".", "total_mult_adds", ">=", "1e9", "else", "\"M\"", ",", "\n", "self", ".", "to_readable", "(", "self", ".", "total_mult_adds", ")", ",", "\n", "\"-\"", "*", "width", ",", "\n", "self", ".", "to_bytes", "(", "self", ".", "total_input", ")", ",", "\n", "self", ".", "to_bytes", "(", "self", ".", "total_output", ")", ",", "\n", "self", ".", "to_bytes", "(", "self", ".", "total_params", ")", ",", "\n", "self", ".", "to_bytes", "(", "total_size", ")", ",", "\n", "\"-\"", "*", "width", ",", "\n", ")", "\n", ")", "\n", "return", "summary_str", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.layer_info_to_row": [[106, 127], ["model_statistics.ModelStatistics.formatting.format_row", "str", "layer_info.num_params_to_str", "layer_info.macs_to_str", "str", "layer_info.inner_layers.items", "str", "model_statistics.ModelStatistics.layer_info_to_row.get_start_str"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.helper.formatting.FormattingOptions.format_row", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.layer_info.LayerInfo.num_params_to_str", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.layer_info.LayerInfo.macs_to_str"], ["", "def", "layer_info_to_row", "(", "self", ",", "layer_info", ":", "LayerInfo", ",", "reached_max_depth", ":", "bool", "=", "False", ")", "->", "str", ":", "\n", "        ", "\"\"\" Convert layer_info to string representation of a row. \"\"\"", "\n", "\n", "def", "get_start_str", "(", "depth", ":", "int", ")", "->", "str", ":", "\n", "            ", "return", "\"\u251c\u2500\"", "if", "depth", "==", "1", "else", "\"|    \"", "*", "(", "depth", "-", "1", ")", "+", "\"\u2514\u2500\"", "\n", "\n", "", "row_values", "=", "{", "\n", "\"kernel_size\"", ":", "str", "(", "layer_info", ".", "kernel_size", ")", "if", "layer_info", ".", "kernel_size", "else", "\"--\"", ",", "\n", "\"output_size\"", ":", "str", "(", "layer_info", ".", "output_size", ")", ",", "\n", "\"num_params\"", ":", "layer_info", ".", "num_params_to_str", "(", "reached_max_depth", ")", ",", "\n", "\"mult_adds\"", ":", "layer_info", ".", "macs_to_str", "(", "reached_max_depth", ")", ",", "\n", "}", "\n", "depth", "=", "layer_info", ".", "depth", "\n", "name", "=", "(", "get_start_str", "(", "depth", ")", "if", "self", ".", "formatting", ".", "use_branching", "else", "\"\"", ")", "+", "str", "(", "layer_info", ")", "\n", "new_line", "=", "self", ".", "formatting", ".", "format_row", "(", "name", ",", "row_values", ")", "\n", "if", "self", ".", "formatting", ".", "verbose", "==", "Verbosity", ".", "VERBOSE", ".", "value", ":", "\n", "            ", "for", "inner_name", ",", "inner_shape", "in", "layer_info", ".", "inner_layers", ".", "items", "(", ")", ":", "\n", "                ", "prefix", "=", "get_start_str", "(", "depth", "+", "1", ")", "if", "self", ".", "formatting", ".", "use_branching", "else", "\"  \"", "\n", "extra_row_values", "=", "{", "\"kernel_size\"", ":", "str", "(", "inner_shape", ")", "}", "\n", "new_line", "+=", "self", ".", "formatting", ".", "format_row", "(", "prefix", "+", "inner_name", ",", "extra_row_values", ")", "\n", "", "", "return", "new_line", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.layers_to_str": [[128, 137], ["model_statistics.ModelStatistics._layer_tree_to_str", "model_statistics.ModelStatistics.layer_info_to_row"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics._layer_tree_to_str", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.layer_info_to_row"], ["", "def", "layers_to_str", "(", "self", ")", "->", "str", ":", "\n", "        ", "\"\"\" Print each layer of the model as tree or as a list. \"\"\"", "\n", "if", "self", ".", "formatting", ".", "use_branching", ":", "\n", "            ", "return", "self", ".", "_layer_tree_to_str", "(", ")", "\n", "\n", "", "layer_rows", "=", "\"\"", "\n", "for", "layer_info", "in", "self", ".", "summary_list", ":", "\n", "            ", "layer_rows", "+=", "self", ".", "layer_info_to_row", "(", "layer_info", ")", "\n", "", "return", "layer_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics._layer_tree_to_str": [[138, 154], ["range", "len", "model_statistics.ModelStatistics.layer_info_to_row", "model_statistics.ModelStatistics._layer_tree_to_str"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics.layer_info_to_row", "home.repos.pwc.inspect_result.engelnico_point-transformer.helper.model_statistics.ModelStatistics._layer_tree_to_str"], ["", "def", "_layer_tree_to_str", "(", "self", ",", "left", ":", "int", "=", "0", ",", "right", ":", "Optional", "[", "int", "]", "=", "None", ",", "depth", ":", "int", "=", "1", ")", "->", "str", ":", "\n", "        ", "\"\"\" Print each layer of the model using a fancy branching diagram. \"\"\"", "\n", "if", "depth", ">", "self", ".", "formatting", ".", "max_depth", ":", "\n", "            ", "return", "\"\"", "\n", "", "new_left", "=", "left", "-", "1", "\n", "new_str", "=", "\"\"", "\n", "if", "right", "is", "None", ":", "\n", "            ", "right", "=", "len", "(", "self", ".", "summary_list", ")", "\n", "", "for", "i", "in", "range", "(", "left", ",", "right", ")", ":", "\n", "            ", "layer_info", "=", "self", ".", "summary_list", "[", "i", "]", "\n", "if", "layer_info", ".", "depth", "==", "depth", ":", "\n", "                ", "reached_max_depth", "=", "depth", "==", "self", ".", "formatting", ".", "max_depth", "\n", "new_str", "+=", "self", ".", "layer_info_to_row", "(", "layer_info", ",", "reached_max_depth", ")", "\n", "new_str", "+=", "self", ".", "_layer_tree_to_str", "(", "new_left", "+", "1", ",", "i", ",", "depth", "+", "1", ")", "\n", "new_left", "=", "i", "\n", "", "", "return", "new_str", "", "", "", ""]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.Mish.__init__": [[18, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.Mish.forward": [[21, 24], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softplus", "torch.softplus", "torch.softplus"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# inlining this saves 1 second per epoch (V100 GPU) vs having a temp x and then returning x(!)", "\n", "        ", "return", "x", "*", "(", "torch", ".", "tanh", "(", "F", ".", "softplus", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.Loss.__init__": [[80, 82], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.Loss.forward": [[83, 87], ["torch.nll_loss", "torch.nll_loss", "torch.nll_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "total_loss", "=", "F", ".", "nll_loss", "(", "pred", ",", "target", ")", "\n", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.Point_Transformer.__init__": [[90, 200], ["torch.Module.__init__", "pointtransformer_partseg.Mish", "pointtransformer_partseg.create_rFF", "pointtransformer_partseg.Point_Transformer.sort_cnn.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointtransformer_partseg.create_rFF", "pointtransformer_partseg.Point_Transformer.global_cnn.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "pointnet_util.PointNetSetAbstractionMsg", "pointnet_util.PointNetSetAbstractionMsg", "pointtransformer_partseg.Point_Transformer.sa1.apply", "pointtransformer_partseg.Point_Transformer.sa2.apply", "torch.TransformerDecoderLayer", "torch.TransformerDecoderLayer", "torch.TransformerDecoderLayer", "pointtransformer_partseg.PTransformerDecoderLayer", "pointtransformer_partseg.PTransformerDecoder", "torch.Transformer", "torch.Transformer", "torch.Transformer", "pointtransformer_partseg.Point_Transformer.transformer_model.apply", "torch.TransformerDecoderLayer", "torch.TransformerDecoderLayer", "torch.TransformerDecoderLayer", "pointtransformer_partseg.PTransformerDecoderLayer", "pointtransformer_partseg.PTransformerDecoder", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pointtransformer_partseg.SortNet", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "range", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.create_rFF", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.create_rFF"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Point_Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Parameters", "\n", "self", ".", "actv_fn", "=", "Mish", "(", ")", "\n", "\n", "self", ".", "p_dropout", "=", "config", "[", "\"dropout\"", "]", "\n", "self", ".", "norm_channel", "=", "config", "[", "\"use_normals\"", "]", "\n", "self", ".", "input_dim", "=", "6", "if", "config", "[", "\"use_normals\"", "]", "else", "3", "\n", "self", ".", "num_sort_nets", "=", "config", "[", "\"M\"", "]", "\n", "self", ".", "top_k", "=", "config", "[", "\"K\"", "]", "\n", "self", ".", "d_model", "=", "config", "[", "\"d_m\"", "]", "\n", "\n", "## Create rFF to project input points to latent feature space", "\n", "## Local Feature Generation --> rFF", "\n", "self", ".", "sort_ch", "=", "[", "64", ",", "128", ",", "256", "]", "\n", "self", ".", "sort_cnn", "=", "create_rFF", "(", "self", ".", "sort_ch", ",", "self", ".", "input_dim", ")", "\n", "self", ".", "sort_cnn", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "sort_bn", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "sort_ch", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sort_ch", ")", ")", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "sortnets", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "SortNet", "(", "\n", "self", ".", "sort_ch", "[", "-", "1", "]", ",", "self", ".", "input_dim", ",", "self", ".", "actv_fn", ",", "top_k", "=", "self", ".", "top_k", "\n", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_sort_nets", ")", "\n", "]", "\n", ")", "\n", "\n", "## Create rFF to project input points to latent feature space", "\n", "## Global Feature Generation --> rFF", "\n", "self", ".", "global_ch", "=", "[", "64", ",", "128", ",", "256", "]", "\n", "self", ".", "global_cnn", "=", "create_rFF", "(", "self", ".", "global_ch", ",", "self", ".", "input_dim", ")", "\n", "self", ".", "global_cnn", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "global_bn", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "global_ch", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "global_ch", ")", ")", "\n", "]", "\n", ")", "\n", "self", ".", "global_selfattention", "=", "nn", ".", "TransformerEncoderLayer", "(", "\n", "self", ".", "global_ch", "[", "-", "1", "]", ",", "nhead", "=", "8", "\n", ")", "\n", "\n", "## Create set abstraction (MSG)", "\n", "## Global Feature Generation --> Set Abstraction (MSG)", "\n", "in_channel", "=", "self", ".", "global_ch", "[", "-", "1", "]", "\n", "\n", "self", ".", "sa1", "=", "PointNetSetAbstractionMsg", "(", "\n", "256", ",", "\n", "[", "0.1", ",", "0.2", ",", "0.4", "]", ",", "\n", "[", "16", ",", "32", ",", "64", "]", ",", "\n", "in_channel", ",", "\n", "[", "[", "32", ",", "32", ",", "64", "]", ",", "[", "64", ",", "64", ",", "128", "]", ",", "[", "64", ",", "96", ",", "128", "]", "]", ",", "\n", ")", "\n", "self", ".", "sa2", "=", "PointNetSetAbstractionMsg", "(", "\n", "64", ",", "\n", "[", "0.2", ",", "0.4", ",", "0.6", "]", ",", "\n", "[", "32", ",", "64", ",", "128", "]", ",", "\n", "320", ",", "\n", "[", "[", "32", ",", "64", ",", "128", "]", ",", "[", "64", ",", "64", ",", "128", "]", ",", "[", "64", ",", "128", ",", "253", "]", "]", ",", "\n", ")", "\n", "\n", "self", ".", "sa1", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "sa2", ".", "apply", "(", "init_weights", ")", "\n", "\n", "## Create Local-Global Attention", "\n", "##  A^LG", "\n", "self", ".", "decoder_layer", "=", "nn", ".", "TransformerDecoderLayer", "(", "self", ".", "d_model", ",", "nhead", "=", "8", ")", "\n", "self", ".", "last_layer", "=", "PTransformerDecoderLayer", "(", "\n", "self", ".", "d_model", ",", "nhead", "=", "8", ",", "last_dim", "=", "self", ".", "global_ch", "[", "-", "1", "]", "\n", ")", "\n", "self", ".", "custom_decoder", "=", "PTransformerDecoder", "(", "\n", "self", ".", "decoder_layer", ",", "8", ",", "self", ".", "last_layer", "\n", ")", "\n", "self", ".", "transformer_model", "=", "nn", ".", "Transformer", "(", "\n", "d_model", "=", "self", ".", "d_model", ",", "\n", "nhead", "=", "8", ",", "\n", "num_encoder_layers", "=", "4", ",", "\n", "num_decoder_layers", "=", "4", ",", "\n", "custom_decoder", "=", "self", ".", "custom_decoder", ",", "\n", ")", "\n", "self", ".", "transformer_model", ".", "apply", "(", "init_weights", ")", "\n", "\n", "## Create Part Segmentation Head", "\n", "self", ".", "interp_decoder_layer", "=", "nn", ".", "TransformerDecoderLayer", "(", "\n", "self", ".", "global_ch", "[", "-", "1", "]", ",", "nhead", "=", "8", "\n", ")", "\n", "self", ".", "interp_last_layer", "=", "PTransformerDecoderLayer", "(", "\n", "self", ".", "global_ch", "[", "-", "1", "]", ",", "nhead", "=", "8", ",", "last_dim", "=", "config", "[", "\"dd_m\"", "]", "\n", ")", "\n", "self", ".", "interp_decoder", "=", "PTransformerDecoder", "(", "\n", "self", ".", "interp_decoder_layer", ",", "1", ",", "self", ".", "interp_last_layer", "\n", ")", "\n", "\n", "# Per point classification", "\n", "num_classes", "=", "config", "[", "\"num_part\"", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "self", ".", "p_dropout", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "128", ",", "num_classes", ",", "1", ")", "\n", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "p_dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "p_dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "p_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.Point_Transformer.forward": [[201, 269], ["input.unsqueeze", "enumerate", "pointtransformer_partseg.Point_Transformer.squeeze().permute", "pointtransformer_partseg.Point_Transformer.global_selfattention", "pointtransformer_partseg.Point_Transformer.permute", "pointtransformer_partseg.Point_Transformer.sa1", "pointtransformer_partseg.Point_Transformer.sa2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "input.unsqueeze", "enumerate", "pointtransformer_partseg.Point_Transformer.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "pointtransformer_partseg.Point_Transformer.transformer_model", "pointtransformer_partseg.Point_Transformer.permute", "pointtransformer_partseg.Point_Transformer.interp_decoder", "input_feat.permute.permute.permute", "pointtransformer_partseg.Point_Transformer.actv_fn", "pointtransformer_partseg.Point_Transformer.drop1", "pointtransformer_partseg.Point_Transformer.conv2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.permute", "pointtransformer_partseg.Point_Transformer.actv_fn", "pointtransformer_partseg.Point_Transformer.actv_fn", "pointtransformer_partseg.Point_Transformer.bn1", "bn", "pointtransformer_partseg.Point_Transformer.squeeze", "bn", "pointtransformer_partseg.Point_Transformer.conv1", "global_conv", "sort_conv", "sortnet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "cls_label", ")", ":", "\n", "\n", "#############################################", "\n", "## Global Features", "\n", "#############################################", "\n", "        ", "xyz", "=", "input", "\n", "\n", "B", ",", "_", ",", "_", "=", "xyz", ".", "shape", "\n", "\n", "if", "self", ".", "norm_channel", ":", "\n", "            ", "norm", "=", "None", "# xyz[:, 3:, :]", "\n", "xyz", "=", "xyz", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "norm", "=", "None", "\n", "\n", "", "x_global", "=", "input", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "\n", "for", "i", ",", "global_conv", "in", "enumerate", "(", "self", ".", "global_cnn", ")", ":", "\n", "            ", "bn", "=", "self", ".", "global_bn", "[", "i", "]", "\n", "x_global", "=", "self", ".", "actv_fn", "(", "bn", "(", "global_conv", "(", "x_global", ")", ")", ")", "\n", "\n", "", "x_global", "=", "x_global", ".", "squeeze", "(", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "x_global", "=", "self", ".", "global_selfattention", "(", "x_global", ")", "\n", "x_global", "=", "x_global", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "l1_xyz", ",", "l1_points", "=", "self", ".", "sa1", "(", "xyz", ",", "x_global", ")", "\n", "l2_xyz", ",", "l2_points", "=", "self", ".", "sa2", "(", "l1_xyz", ",", "l1_points", ")", "\n", "# l3_xyz, l3_points = self.sa3(l2_xyz, l2_points)", "\n", "out", "=", "torch", ".", "cat", "(", "[", "l2_xyz", ",", "l2_points", "]", ",", "dim", "=", "1", ")", "\n", "\n", "#############################################", "\n", "## Local Features", "\n", "#############################################", "\n", "\n", "x_local", "=", "input", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "\n", "for", "i", ",", "sort_conv", "in", "enumerate", "(", "self", ".", "sort_cnn", ")", ":", "\n", "            ", "bn", "=", "self", ".", "sort_bn", "[", "i", "]", "\n", "x_local", "=", "self", ".", "actv_fn", "(", "bn", "(", "sort_conv", "(", "x_local", ")", ")", ")", "\n", "", "x_local", "=", "x_local", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "x_local_sorted", "=", "torch", ".", "cat", "(", "\n", "[", "sortnet", "(", "x_local", ",", "input", ")", "[", "0", "]", "for", "sortnet", "in", "self", ".", "sortnets", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n", "\n", "#############################################", "\n", "## Point Transformer", "\n", "#############################################", "\n", "\n", "source", "=", "out", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "target", "=", "x_local_sorted", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "embedding", "=", "self", ".", "transformer_model", "(", "source", ",", "target", ")", "\n", "\n", "#############################################", "\n", "## Part Segmentation", "\n", "#############################################", "\n", "x_interp", "=", "x_global", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "input_feat", "=", "self", ".", "interp_decoder", "(", "x_interp", ",", "embedding", ")", "\n", "input_feat", "=", "input_feat", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "# FC layers", "\n", "x", "=", "self", ".", "actv_fn", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "input_feat", ")", ")", ")", "\n", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "output", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "return", "output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.SortNet.__init__": [[272, 338], ["torch.Module.__init__", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.TransformerEncoder", "pointtransformer_partseg.create_rFF", "pointtransformer_partseg.SortNet.feat_generator.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointtransformer_partseg.create_rFF3d", "pointtransformer_partseg.SortNet.radius_cnn.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointtransformer_partseg.SortNet.flatten_linear.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "range", "range", "range", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.create_rFF", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.create_rFF3d"], ["    ", "def", "__init__", "(", "self", ",", "num_feat", ",", "input_dims", ",", "actv_fn", "=", "F", ".", "relu", ",", "feat_dims", "=", "256", ",", "top_k", "=", "16", ")", ":", "\n", "        ", "\"\"\"This function returns a sorted Tensor of Points. The Points are sorted\n        according to a 1D score which is generated using rFF's (row-wise Feed Forward).\n\n        Arguments:\n            config {config.Config} -- Config class holding network parameters\n            num_feat {int} -- number of features (dims) per point\n            device {torch.device} -- Device to run (CPU or GPU)\n\n        Keyword Arguments:\n            mode {str} -- Mode to create score (default: {\"max\"})\n        \"\"\"", "\n", "super", "(", "SortNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_feat", "=", "num_feat", "\n", "self", ".", "actv_fn", "=", "actv_fn", "\n", "self", ".", "input_dims", "=", "input_dims", "\n", "\n", "self", ".", "top_k", "=", "top_k", "\n", "self", ".", "d_model", "=", "512", "\n", "self", ".", "radius", "=", "0.3", "\n", "self", ".", "max_radius_points", "=", "64", "\n", "\n", "self", ".", "input_selfattention_layer", "=", "nn", ".", "TransformerEncoderLayer", "(", "\n", "self", ".", "num_feat", ",", "nhead", "=", "8", "\n", ")", "\n", "self", ".", "input_selfattention", "=", "nn", ".", "TransformerEncoder", "(", "\n", "self", ".", "input_selfattention_layer", ",", "num_layers", "=", "2", "\n", ")", "\n", "\n", "self", ".", "feat_channels", "=", "[", "64", ",", "16", ",", "1", "]", "\n", "self", ".", "feat_generator", "=", "create_rFF", "(", "self", ".", "feat_channels", ",", "num_feat", ")", "\n", "self", ".", "feat_generator", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "feat_bn", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "feat_channels", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "feat_channels", ")", ")", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "radius_ch", "=", "[", "128", ",", "256", ",", "self", ".", "d_model", "]", "\n", "self", ".", "radius_cnn", "=", "create_rFF3d", "(", "self", ".", "radius_ch", ",", "self", ".", "max_radius_points", "+", "1", ",", "6", ")", "\n", "self", ".", "radius_cnn", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "radius_bn", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "BatchNorm3d", "(", "num_features", "=", "self", ".", "radius_ch", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "radius_ch", ")", ")", "\n", "]", "\n", ")", "\n", "\n", "dim_flatten", "=", "self", ".", "d_model", "*", "self", ".", "top_k", "\n", "self", ".", "flatten_linear_ch", "=", "[", "dim_flatten", ",", "1024", ",", "self", ".", "d_model", "]", "\n", "self", ".", "flatten_linear", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "flatten_linear_ch", "[", "i", "]", ",", "\n", "out_features", "=", "self", ".", "flatten_linear_ch", "[", "i", "+", "1", "]", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "flatten_linear_ch", ")", "-", "1", ")", "\n", "]", "\n", ")", "\n", "self", ".", "flatten_linear", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "flatten_bn", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "BatchNorm1d", "(", "num_features", "=", "self", ".", "flatten_linear_ch", "[", "i", "+", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "flatten_linear_ch", ")", "-", "1", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.SortNet.forward": [[341, 402], ["pointtransformer_partseg.SortNet.squeeze", "sortvec_att.permute.permute.permute", "pointtransformer_partseg.SortNet.input_selfattention", "sortvec_att.permute.permute.permute", "sortvec_att.permute.permute.unsqueeze", "enumerate", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk.indices.squeeze", "torch.topk.indices.squeeze", "torch.topk.indices.squeeze", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "pointnet_util.index_points().permute", "input.permute", "pointtransformer_partseg.SortNet.permute", "pointnet_util.query_ball_point", "pointnet_util.index_points", "pointtransformer_partseg.SortNet.permute.unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "enumerate", "pointtransformer_partseg.SortNet.squeeze", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "enumerate", "pointtransformer_partseg.SortNet.unsqueeze", "pointtransformer_partseg.SortNet.actv_fn", "indices.unsqueeze.unsqueeze.unsqueeze", "pointtransformer_partseg.SortNet.actv_fn", "pointtransformer_partseg.SortNet.actv_fn", "bn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "pointnet_util.index_points", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bn", "bn", "conv", "input.permute", "radius_conv", "linear"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points"], ["", "def", "forward", "(", "self", ",", "sortvec", ",", "input", ")", ":", "\n", "\n", "        ", "top_k", "=", "self", ".", "top_k", "\n", "sortvec_feat", "=", "sortvec", "\n", "feat_dim", "=", "input", ".", "shape", "[", "1", "]", "\n", "\n", "sortvec_att", "=", "sortvec", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "sortvec_att", "=", "sortvec_att", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "sortvec_att", "=", "self", ".", "input_selfattention", "(", "sortvec_att", ")", "\n", "sortvec_att", "=", "sortvec_att", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "sortvec", "=", "sortvec_att", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "feat_generator", ")", ":", "\n", "            ", "bn", "=", "self", ".", "feat_bn", "[", "i", "]", "\n", "sortvec", "=", "self", ".", "actv_fn", "(", "bn", "(", "conv", "(", "sortvec", ")", ")", ")", "\n", "\n", "", "topk", "=", "torch", ".", "topk", "(", "sortvec", ",", "k", "=", "top_k", ",", "dim", "=", "-", "1", ")", "\n", "indices", "=", "topk", ".", "indices", ".", "squeeze", "(", ")", "\n", "sorted_input", "=", "torch", ".", "zeros", "(", "(", "sortvec_feat", ".", "shape", "[", "0", "]", ",", "feat_dim", ",", "top_k", ")", ")", ".", "to", "(", "\n", "input", ".", "device", "\n", ")", "\n", "\n", "if", "top_k", "==", "1", ":", "\n", "            ", "indices", "=", "indices", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "sorted_input", "=", "index_points", "(", "input", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "indices", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "all_points", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "query_points", "=", "sorted_input", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "radius_indices", "=", "query_ball_point", "(", "\n", "self", ".", "radius", ",", "\n", "self", ".", "max_radius_points", ",", "\n", "all_points", "[", ":", ",", ":", ",", ":", "3", "]", ",", "\n", "query_points", "[", ":", ",", ":", ",", ":", "3", "]", ",", "\n", ")", "\n", "\n", "radius_points", "=", "index_points", "(", "all_points", ",", "radius_indices", ")", "\n", "\n", "radius_centroids", "=", "query_points", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", "\n", "radius_grouped", "=", "torch", ".", "cat", "(", "[", "radius_centroids", ",", "radius_points", "]", ",", "dim", "=", "-", "2", ")", ".", "unsqueeze", "(", "\n", "dim", "=", "1", "\n", ")", "\n", "\n", "for", "i", ",", "radius_conv", "in", "enumerate", "(", "self", ".", "radius_cnn", ")", ":", "\n", "            ", "bn", "=", "self", ".", "radius_bn", "[", "i", "]", "\n", "radius_grouped", "=", "self", ".", "actv_fn", "(", "bn", "(", "radius_conv", "(", "radius_grouped", ")", ")", ")", "\n", "\n", "", "radius_grouped", "=", "radius_grouped", ".", "squeeze", "(", ")", "\n", "sorted_idx", "=", "indices", "\n", "sorted_input", "=", "radius_grouped", "\n", "\n", "sorted_input", "=", "torch", ".", "flatten", "(", "sorted_input", ",", "start_dim", "=", "1", ")", "\n", "\n", "for", "i", ",", "linear", "in", "enumerate", "(", "self", ".", "flatten_linear", ")", ":", "\n", "            ", "bn", "=", "self", ".", "flatten_bn", "[", "i", "]", "\n", "sorted_input", "=", "self", ".", "actv_fn", "(", "bn", "(", "linear", "(", "sorted_input", ")", ")", ")", "\n", "\n", "", "sorted_input", "=", "sorted_input", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "\n", "return", "sorted_input", ",", "sorted_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.PTransformerDecoderLayer.__init__": [[409, 426], ["torch.Module.__init__", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "last_dim", "=", "256", ",", "dropout", "=", "0.1", ",", "activation", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "PTransformerDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "512", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "512", ",", "last_dim", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.PTransformerDecoderLayer.forward": [[427, 467], ["pointtransformer_partseg.PTransformerDecoderLayer.norm1", "pointtransformer_partseg.PTransformerDecoderLayer.norm2", "pointtransformer_partseg.PTransformerDecoderLayer.linear2", "pointtransformer_partseg.PTransformerDecoderLayer.self_attn", "pointtransformer_partseg.PTransformerDecoderLayer.dropout1", "pointtransformer_partseg.PTransformerDecoderLayer.multihead_attn", "pointtransformer_partseg.PTransformerDecoderLayer.dropout2", "pointtransformer_partseg.PTransformerDecoderLayer.dropout", "pointtransformer_partseg.PTransformerDecoderLayer.activation", "pointtransformer_partseg.PTransformerDecoderLayer.linear1"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "tgt", ",", "\n", "memory", ",", "\n", "tgt_mask", "=", "None", ",", "\n", "memory_mask", "=", "None", ",", "\n", "tgt_key_padding_mask", "=", "None", ",", "\n", "memory_key_padding_mask", "=", "None", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer.\n\n        Args:\n            tgt: the sequence to the decoder layer (required).\n            memory: the sequnce from the last layer of the encoder (required).\n            tgt_mask: the mask for the tgt sequence (optional).\n            memory_mask: the mask for the memory sequence (optional).\n            tgt_key_padding_mask: the mask for the tgt keys per batch (optional).\n            memory_key_padding_mask: the mask for the memory keys per batch (optional).\n\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "tgt2", "=", "self", ".", "self_attn", "(", "\n", "tgt", ",", "tgt", ",", "tgt", ",", "attn_mask", "=", "tgt_mask", ",", "key_padding_mask", "=", "tgt_key_padding_mask", "\n", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "multihead_attn", "(", "\n", "tgt", ",", "\n", "memory", ",", "\n", "memory", ",", "\n", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ",", "\n", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "\n", "tgt", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.PTransformerDecoder.__init__": [[485, 491], ["torch.Module.__init__", "pointtransformer_partseg._get_clones"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls._get_clones"], ["def", "__init__", "(", "self", ",", "decoder_layer", ",", "num_layers", ",", "last_layer", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "PTransformerDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "decoder_layer", ",", "num_layers", ")", "\n", "self", ".", "last_layer", "=", "last_layer", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.PTransformerDecoder.forward": [[492, 532], ["range", "pointtransformer_partseg.PTransformerDecoder.last_layer", "pointtransformer_partseg.PTransformerDecoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "tgt", ",", "\n", "memory", ",", "\n", "tgt_mask", "=", "None", ",", "\n", "memory_mask", "=", "None", ",", "\n", "tgt_key_padding_mask", "=", "None", ",", "\n", "memory_key_padding_mask", "=", "None", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer in turn.\n\n        Args:\n            tgt: the sequence to the decoder (required).\n            memory: the sequnce from the last layer of the encoder (required).\n            tgt_mask: the mask for the tgt sequence (optional).\n            memory_mask: the mask for the memory sequence (optional).\n            tgt_key_padding_mask: the mask for the tgt keys per batch (optional).\n            memory_key_padding_mask: the mask for the memory keys per batch (optional).\n\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "output", "=", "tgt", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "output", "=", "self", ".", "layers", "[", "i", "]", "(", "\n", "output", ",", "\n", "memory", ",", "\n", "tgt_mask", "=", "tgt_mask", ",", "\n", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "norm", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "output", "=", "self", ".", "last_layer", "(", "output", ",", "memory", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.init_weights": [[26, 33], ["type", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.fill_", "type", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.fill_"], "function", ["None"], ["", "", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.00", ")", "\n", "", "elif", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.00", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.create_rFF": [[35, 54], ["torch.ModuleList", "nn.ModuleList.insert", "torch.Conv2d", "torch.Conv2d", "range", "len"], "function", ["None"], ["", "", "def", "create_rFF", "(", "channel_list", ",", "input_dim", ")", ":", "\n", "    ", "rFF", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "channel_list", "[", "i", "]", ",", "\n", "out_channels", "=", "channel_list", "[", "i", "+", "1", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "channel_list", ")", "-", "1", ")", "\n", "]", "\n", ")", "\n", "rFF", ".", "insert", "(", "\n", "0", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "1", ",", "out_channels", "=", "channel_list", "[", "0", "]", ",", "kernel_size", "=", "(", "input_dim", ",", "1", ")", "\n", ")", ",", "\n", ")", "\n", "\n", "return", "rFF", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg.create_rFF3d": [[56, 77], ["torch.ModuleList", "nn.ModuleList.insert", "torch.Conv3d", "torch.Conv3d", "range", "len"], "function", ["None"], ["", "def", "create_rFF3d", "(", "channel_list", ",", "num_points", ",", "dim", ")", ":", "\n", "    ", "rFF", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "nn", ".", "Conv3d", "(", "\n", "in_channels", "=", "channel_list", "[", "i", "]", ",", "\n", "out_channels", "=", "channel_list", "[", "i", "+", "1", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "channel_list", ")", "-", "1", ")", "\n", "]", "\n", ")", "\n", "rFF", ".", "insert", "(", "\n", "0", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "channel_list", "[", "0", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "num_points", ",", "dim", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "return", "rFF", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_partseg._get_clones": [[404, 406], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "_get_clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.Mish.__init__": [[17, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.Mish.forward": [[20, 22], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softplus", "torch.softplus", "torch.softplus"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "(", "torch", ".", "tanh", "(", "F", ".", "softplus", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.Loss.__init__": [[52, 54], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.Loss.forward": [[55, 59], ["torch.nll_loss", "torch.nll_loss", "torch.nll_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "total_loss", "=", "F", ".", "nll_loss", "(", "pred", ",", "target", ")", "\n", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.Point_Transformer.__init__": [[63, 138], ["torch.Module.__init__", "pointtransformer_cls.Mish", "pointtransformer_cls.create_rFF", "pointtransformer_cls.Point_Transformer.sort_cnn.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointtransformer_cls.create_rFF3d", "pointtransformer_cls.Point_Transformer.radius_cnn.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetSetAbstractionMsg", "pointnet_util.PointNetSetAbstractionMsg", "torch.TransformerDecoderLayer", "torch.TransformerDecoderLayer", "torch.TransformerDecoderLayer", "pointtransformer_cls.PTransformerDecoderLayer", "pointtransformer_cls.PTransformerDecoder", "torch.Transformer", "torch.Transformer", "torch.Transformer", "pointtransformer_cls.Point_Transformer.transformer_model.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointtransformer_cls.Point_Transformer.flatten_linear.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pointtransformer_cls.SortNet", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "range", "range", "range", "range", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.create_rFF", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.create_rFF3d"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Point_Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Parameters", "\n", "self", ".", "actv_fn", "=", "Mish", "(", ")", "\n", "\n", "self", ".", "p_dropout", "=", "config", "[", "'dropout'", "]", "\n", "self", ".", "norm_channel", "=", "config", "[", "'use_normals'", "]", "\n", "self", ".", "input_dim", "=", "6", "if", "config", "[", "'use_normals'", "]", "else", "3", "\n", "self", ".", "num_sort_nets", "=", "config", "[", "'M'", "]", "\n", "self", ".", "top_k", "=", "config", "[", "'K'", "]", "\n", "self", ".", "d_model", "=", "config", "[", "'d_m'", "]", "\n", "\n", "\n", "self", ".", "radius_max_points", "=", "16", "\n", "self", ".", "radius", "=", "0.1", "\n", "\n", "\n", "## Create rFF to project input points to latent feature space", "\n", "## Local Feature Generation --> rFF", "\n", "self", ".", "sort_ch", "=", "[", "64", ",", "128", "]", "\n", "self", ".", "sort_cnn", "=", "create_rFF", "(", "self", ".", "sort_ch", ",", "self", ".", "input_dim", ")", "\n", "self", ".", "sort_cnn", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "sort_bn", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "sort_ch", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sort_ch", ")", ")", "]", ")", "\n", "\n", "## Create Self-Attention layer", "\n", "##  Local Feature Generation --> A^self", "\n", "self", ".", "input_selfattention_layer", "=", "nn", ".", "TransformerEncoderLayer", "(", "self", ".", "sort_ch", "[", "-", "1", "]", ",", "nhead", "=", "8", ")", "\n", "\n", "self", ".", "sortnets", "=", "nn", ".", "ModuleList", "(", "[", "SortNet", "(", "self", ".", "sort_ch", "[", "-", "1", "]", ",", "\n", "self", ".", "input_dim", ",", "\n", "self", ".", "actv_fn", ",", "\n", "top_k", "=", "self", ".", "top_k", ")", "for", "_", "in", "range", "(", "self", ".", "num_sort_nets", ")", "]", ")", "\n", "\n", "\n", "## Create ball query search + feature aggregation of SortNet", "\n", "## ball query + feat. agg", "\n", "## Note: We put the ball query search and feature aggregation outside the SortNet implementation as it greatly decreased computational time", "\n", "## This however, does not change the method in any way", "\n", "self", ".", "radius_ch", "=", "[", "128", ",", "256", ",", "self", ".", "d_model", "-", "1", "-", "self", ".", "input_dim", "]", "\n", "self", ".", "radius_cnn", "=", "create_rFF3d", "(", "self", ".", "radius_ch", ",", "self", ".", "radius_max_points", "+", "1", ",", "self", ".", "input_dim", ")", "\n", "self", ".", "radius_cnn", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "radius_bn", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm3d", "(", "num_features", "=", "self", ".", "radius_ch", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "radius_ch", ")", ")", "]", ")", "\n", "\n", "## Create set abstraction (MSG)", "\n", "##  Global Feature Generation --> Set Abstraction (MSG)", "\n", "out_points", "=", "128", "\n", "in_channel", "=", "3", "if", "self", ".", "norm_channel", "else", "0", "\n", "\n", "self", ".", "sa1", "=", "PointNetSetAbstractionMsg", "(", "256", ",", "[", "0.1", ",", "0.2", ",", "0.4", "]", ",", "[", "16", ",", "32", ",", "64", "]", ",", "in_channel", ",", "[", "[", "32", ",", "32", ",", "64", "]", ",", "[", "64", ",", "64", ",", "128", "]", ",", "[", "64", ",", "96", ",", "128", "]", "]", ")", "\n", "self", ".", "sa2", "=", "PointNetSetAbstractionMsg", "(", "out_points", ",", "[", "0.2", ",", "0.4", ",", "0.6", "]", ",", "[", "32", ",", "64", ",", "128", "]", ",", "320", ",", "[", "[", "32", ",", "64", ",", "128", "]", ",", "[", "64", ",", "64", ",", "128", "]", ",", "[", "64", ",", "128", ",", "253", "]", "]", ")", "\n", "\n", "## Create Local-Global Attention", "\n", "##  A^LG", "\n", "out_dim", "=", "64", "\n", "self", ".", "decoder_layer", "=", "nn", ".", "TransformerDecoderLayer", "(", "self", ".", "d_model", ",", "nhead", "=", "8", ")", "\n", "self", ".", "last_layer", "=", "PTransformerDecoderLayer", "(", "self", ".", "d_model", ",", "nhead", "=", "8", ",", "last_dim", "=", "out_dim", ")", "\n", "self", ".", "custom_decoder", "=", "PTransformerDecoder", "(", "self", ".", "decoder_layer", ",", "1", ",", "self", ".", "last_layer", ")", "\n", "self", ".", "transformer_model", "=", "nn", ".", "Transformer", "(", "d_model", "=", "self", ".", "d_model", ",", "nhead", "=", "8", ",", "dim_feedforward", "=", "512", ",", "num_encoder_layers", "=", "1", ",", "num_decoder_layers", "=", "1", ",", "custom_decoder", "=", "self", ".", "custom_decoder", ")", "\n", "self", ".", "transformer_model", ".", "apply", "(", "init_weights", ")", "\n", "\n", "# Create Classification Head", "\n", "\n", "dim_flatten", "=", "out_dim", "*", "self", ".", "num_sort_nets", "*", "self", ".", "top_k", "\n", "self", ".", "flatten_linear_ch", "=", "[", "dim_flatten", ",", "512", ",", "128", ",", "40", "]", "\n", "self", ".", "flatten_linear", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "flatten_linear_ch", "[", "i", "]", ",", "\n", "out_features", "=", "self", ".", "flatten_linear_ch", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "flatten_linear_ch", ")", "-", "1", ")", "]", ")", "\n", "self", ".", "flatten_linear", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "flatten_bn", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm1d", "(", "num_features", "=", "self", ".", "flatten_linear_ch", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "flatten_linear_ch", ")", "-", "1", ")", "]", ")", "\n", "\n", "## Create Dropout layers for classification heads", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "p_dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "p_dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "p_dropout", ")", "\n", "self", ".", "dropout4", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "p_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.Point_Transformer.forward": [[140, 239], ["pointtransformer_cls.Point_Transformer.sa1", "pointtransformer_cls.Point_Transformer.sa2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "input.unsqueeze", "enumerate", "pointtransformer_cls.Point_Transformer.transpose", "pointtransformer_cls.Point_Transformer.squeeze", "pointtransformer_cls.Point_Transformer.permute", "pointtransformer_cls.Point_Transformer.input_selfattention_layer", "pointtransformer_cls.Point_Transformer.permute", "pointtransformer_cls.Point_Transformer.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_local_sorted[].permute", "x_local_sorted[].permute", "input.squeeze().permute", "pointtransformer_cls.query_ball_point", "pointtransformer_cls.index_points", "query_points.unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "enumerate", "pointtransformer_cls.Point_Transformer.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "pointtransformer_cls.Point_Transformer.permute", "pointtransformer_cls.Point_Transformer.transformer_model", "embedding.permute.permute.permute", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "enumerate", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pointtransformer_cls.Point_Transformer.actv_fn", "pointtransformer_cls.Point_Transformer.actv_fn", "bn", "input.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bn", "x_local_sorted[].permute.transpose", "x_local_sorted[].permute.transpose", "pointtransformer_cls.Point_Transformer.actv_fn", "linear", "sort_conv", "sortnet", "radius_conv", "len", "bn", "pointtransformer_cls.Point_Transformer.dropout1", "linear", "pointtransformer_cls.Point_Transformer.dropout2", "pointtransformer_cls.Point_Transformer.dropout3", "pointtransformer_cls.Point_Transformer.dropout4"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "#############################################", "\n", "## Global Features ", "\n", "#############################################", "\n", "        ", "xyz", "=", "input", "\n", "\n", "B", ",", "_", ",", "_", "=", "xyz", ".", "shape", "\n", "\n", "if", "self", ".", "norm_channel", ":", "\n", "            ", "norm", "=", "xyz", "[", ":", ",", "3", ":", ",", ":", "]", "\n", "xyz", "=", "xyz", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "norm", "=", "None", "\n", "\n", "## Set Abstraction with MSG", "\n", "", "l1_xyz", ",", "l1_points", "=", "self", ".", "sa1", "(", "xyz", ",", "norm", ")", "\n", "l2_xyz", ",", "l2_points", "=", "self", ".", "sa2", "(", "l1_xyz", ",", "l1_points", ")", "\n", "global_feat", "=", "torch", ".", "cat", "(", "[", "l2_xyz", ",", "l2_points", "]", ",", "dim", "=", "1", ")", "\n", "\n", "#############################################", "\n", "## Local Features", "\n", "#############################################", "\n", "\n", "x_local", "=", "input", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "\n", "# Project to latent feature dim", "\n", "for", "i", ",", "sort_conv", "in", "enumerate", "(", "self", ".", "sort_cnn", ")", ":", "\n", "            ", "bn", "=", "self", ".", "sort_bn", "[", "i", "]", "\n", "x_local", "=", "self", ".", "actv_fn", "(", "bn", "(", "sort_conv", "(", "x_local", ")", ")", ")", "\n", "", "x_local", "=", "x_local", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "# Perform Self Attention", "\n", "x_local", "=", "x_local", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "x_local", "=", "x_local", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "x_local", "=", "self", ".", "input_selfattention_layer", "(", "x_local", ")", "\n", "x_local", "=", "x_local", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "x_local", "=", "x_local", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "# Concatenate outputs of SortNet", "\n", "x_local_sorted", "=", "torch", ".", "cat", "(", "[", "sortnet", "(", "x_local", ",", "input", ")", "[", "0", "]", "for", "sortnet", "in", "self", ".", "sortnets", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# this corresponds to s^j_i", "\n", "x_local_scores", "=", "x_local_sorted", "[", ":", ",", "6", ":", ",", ":", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# this corresponds to p^j_i", "\n", "x_local_sorted", "=", "x_local_sorted", "[", ":", ",", ":", "6", ",", ":", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# Perform ball query search with feature aggregation", "\n", "all_points", "=", "input", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "query_points", "=", "x_local_sorted", "\n", "radius_indices", "=", "query_ball_point", "(", "self", ".", "radius", ",", "self", ".", "radius_max_points", ",", "all_points", "[", ":", ",", ":", ",", ":", "3", "]", ",", "query_points", "[", ":", ",", ":", ",", ":", "3", "]", ")", "\n", "\n", "radius_points", "=", "index_points", "(", "all_points", ",", "radius_indices", ")", "\n", "radius_centroids", "=", "query_points", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", "\n", "\n", "# This corresponds to g^j", "\n", "radius_grouped", "=", "torch", ".", "cat", "(", "[", "radius_centroids", ",", "radius_points", "]", ",", "dim", "=", "-", "2", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "\n", "for", "i", ",", "radius_conv", "in", "enumerate", "(", "self", ".", "radius_cnn", ")", ":", "\n", "            ", "bn", "=", "self", ".", "radius_bn", "[", "i", "]", "\n", "radius_grouped", "=", "self", ".", "actv_fn", "(", "bn", "(", "radius_conv", "(", "radius_grouped", ")", ")", ")", "\n", "\n", "", "radius_grouped", "=", "radius_grouped", ".", "squeeze", "(", ")", "\n", "# This corresponds to f^j_i", "\n", "radius_grouped", "=", "torch", ".", "cat", "(", "[", "x_local_sorted", ".", "transpose", "(", "2", ",", "1", ")", ",", "radius_grouped", ",", "x_local_scores", ".", "transpose", "(", "2", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "#############################################", "\n", "## Point Transformer", "\n", "#############################################", "\n", "\n", "source", "=", "global_feat", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "target", "=", "radius_grouped", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "embedding", "=", "self", ".", "transformer_model", "(", "source", ",", "target", ")", "\n", "embedding", "=", "embedding", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "#############################################", "\n", "## Classification", "\n", "#############################################", "\n", "output", "=", "torch", ".", "flatten", "(", "embedding", ",", "start_dim", "=", "1", ")", "\n", "\n", "for", "i", ",", "linear", "in", "enumerate", "(", "self", ".", "flatten_linear", ")", ":", "\n", "            ", "bn", "=", "self", ".", "flatten_bn", "[", "i", "]", "\n", "# Use activation function and batch norm for every layer except last", "\n", "if", "i", "<", "len", "(", "self", ".", "flatten_linear", ")", "-", "1", ":", "\n", "                ", "output", "=", "self", ".", "actv_fn", "(", "bn", "(", "linear", "(", "output", ")", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "output", "=", "self", ".", "dropout1", "(", "output", ")", "\n", "", "elif", "i", "==", "1", ":", "\n", "                    ", "output", "=", "self", ".", "dropout2", "(", "output", ")", "\n", "", "elif", "i", "==", "2", ":", "\n", "                    ", "output", "=", "self", ".", "dropout3", "(", "output", ")", "\n", "", "elif", "i", "==", "3", ":", "\n", "                    ", "output", "=", "self", ".", "dropout4", "(", "output", ")", "\n", "", "", "else", ":", "\n", "                ", "output", "=", "linear", "(", "output", ")", "\n", "\n", "", "", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "-", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.SortNet.__init__": [[242, 255], ["torch.Module.__init__", "pointtransformer_cls.create_rFF", "pointtransformer_cls.SortNet.feat_generator.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "range", "len"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.create_rFF"], ["    ", "def", "__init__", "(", "self", ",", "num_feat", ",", "input_dims", ",", "actv_fn", "=", "F", ".", "relu", ",", "top_k", "=", "5", ")", ":", "\n", "        ", "super", "(", "SortNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_feat", "=", "num_feat", "\n", "self", ".", "actv_fn", "=", "actv_fn", "\n", "self", ".", "input_dims", "=", "input_dims", "\n", "\n", "self", ".", "top_k", "=", "top_k", "\n", "\n", "self", ".", "feat_channels", "=", "[", "64", ",", "16", ",", "1", "]", "\n", "self", ".", "feat_generator", "=", "create_rFF", "(", "self", ".", "feat_channels", ",", "num_feat", ")", "\n", "self", ".", "feat_generator", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "feat_bn", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "self", ".", "feat_channels", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "feat_channels", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.SortNet.forward": [[256, 277], ["enumerate", "pointtransformer_cls.SortNet.squeeze", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk.indices.squeeze", "torch.topk.indices.squeeze", "torch.topk.indices.squeeze", "index_points().permute", "index_points().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pointtransformer_cls.SortNet.actv_fn", "bn", "pointtransformer_cls.index_points", "pointtransformer_cls.index_points", "conv", "input.permute", "pointtransformer_cls.SortNet.permute"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points"], ["", "def", "forward", "(", "self", ",", "sortvec", ",", "input", ")", ":", "\n", "\n", "        ", "top_k", "=", "self", ".", "top_k", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "feat_dim", "=", "input", ".", "shape", "[", "1", "]", "\n", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "feat_generator", ")", ":", "\n", "            ", "bn", "=", "self", ".", "feat_bn", "[", "i", "]", "\n", "sortvec", "=", "self", ".", "actv_fn", "(", "bn", "(", "conv", "(", "sortvec", ")", ")", ")", "\n", "", "sortvec", "=", "sortvec", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "\n", "topk", "=", "torch", ".", "topk", "(", "sortvec", ",", "k", "=", "top_k", ",", "dim", "=", "-", "1", ")", "\n", "indices", "=", "topk", ".", "indices", ".", "squeeze", "(", ")", "\n", "\n", "sorted_input", "=", "index_points", "(", "input", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "indices", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "sorted_score", "=", "index_points", "(", "sortvec", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "indices", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "feat", "=", "torch", ".", "cat", "(", "[", "sorted_input", ",", "sorted_score", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "feat", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.PTransformerDecoderLayer.__init__": [[283, 300], ["torch.Module.__init__", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "last_dim", "=", "64", ",", "dropout", "=", "0.1", ",", "activation", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "PTransformerDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "multihead_attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "256", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "256", ",", "last_dim", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.PTransformerDecoderLayer.forward": [[301, 329], ["pointtransformer_cls.PTransformerDecoderLayer.norm1", "pointtransformer_cls.PTransformerDecoderLayer.norm2", "pointtransformer_cls.PTransformerDecoderLayer.linear2", "pointtransformer_cls.PTransformerDecoderLayer.self_attn", "pointtransformer_cls.PTransformerDecoderLayer.dropout1", "pointtransformer_cls.PTransformerDecoderLayer.multihead_attn", "pointtransformer_cls.PTransformerDecoderLayer.dropout2", "pointtransformer_cls.PTransformerDecoderLayer.dropout", "pointtransformer_cls.PTransformerDecoderLayer.activation", "pointtransformer_cls.PTransformerDecoderLayer.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "memory", ",", "tgt_mask", "=", "None", ",", "memory_mask", "=", "None", ",", "\n", "tgt_key_padding_mask", "=", "None", ",", "memory_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer.\n\n        Args:\n            tgt: the sequence to the decoder layer (required).\n            memory: the sequnce from the last layer of the encoder (required).\n            tgt_mask: the mask for the tgt sequence (optional).\n            memory_mask: the mask for the memory sequence (optional).\n            tgt_key_padding_mask: the mask for the tgt keys per batch (optional).\n            memory_key_padding_mask: the mask for the memory keys per batch (optional).\n\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "tgt2", "=", "self", ".", "self_attn", "(", "tgt", ",", "tgt", ",", "tgt", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "multihead_attn", "(", "tgt", ",", "memory", ",", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "\n", "\n", "tgt", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.PTransformerDecoder.__init__": [[347, 353], ["torch.Module.__init__", "pointtransformer_cls._get_clones"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls._get_clones"], ["def", "__init__", "(", "self", ",", "decoder_layer", ",", "num_layers", ",", "last_layer", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "PTransformerDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "_get_clones", "(", "decoder_layer", ",", "num_layers", ")", "\n", "self", ".", "last_layer", "=", "last_layer", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.PTransformerDecoder.forward": [[354, 384], ["range", "pointtransformer_cls.PTransformerDecoder.last_layer", "pointtransformer_cls.PTransformerDecoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "memory", ",", "tgt_mask", "=", "None", ",", "\n", "memory_mask", "=", "None", ",", "tgt_key_padding_mask", "=", "None", ",", "\n", "memory_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Pass the inputs (and mask) through the decoder layer in turn.\n\n        Args:\n            tgt: the sequence to the decoder (required).\n            memory: the sequnce from the last layer of the encoder (required).\n            tgt_mask: the mask for the tgt sequence (optional).\n            memory_mask: the mask for the memory sequence (optional).\n            tgt_key_padding_mask: the mask for the tgt keys per batch (optional).\n            memory_key_padding_mask: the mask for the memory keys per batch (optional).\n\n        Shape:\n            see the docs in Transformer class.\n        \"\"\"", "\n", "output", "=", "tgt", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "output", "=", "self", ".", "layers", "[", "i", "]", "(", "output", ",", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "\n", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ")", "\n", "\n", "", "if", "self", ".", "norm", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "output", "=", "self", ".", "last_layer", "(", "output", ",", "memory", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.init_weights": [[23, 30], ["type", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.fill_", "type", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.fill_"], "function", ["None"], ["", "", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.00", ")", "\n", "", "elif", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.00", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.create_rFF": [[31, 40], ["torch.ModuleList", "nn.ModuleList.insert", "torch.Conv2d", "torch.Conv2d", "range", "len"], "function", ["None"], ["", "", "def", "create_rFF", "(", "channel_list", ",", "input_dim", ")", ":", "\n", "    ", "rFF", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv2d", "(", "in_channels", "=", "channel_list", "[", "i", "]", ",", "\n", "out_channels", "=", "channel_list", "[", "i", "+", "1", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ")", "for", "i", "in", "range", "(", "len", "(", "channel_list", ")", "-", "1", ")", "]", ")", "\n", "rFF", ".", "insert", "(", "0", ",", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "channel_list", "[", "0", "]", ",", "\n", "kernel_size", "=", "(", "input_dim", ",", "1", ")", ")", ")", "\n", "\n", "return", "rFF", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.create_rFF3d": [[41, 50], ["torch.ModuleList", "nn.ModuleList.insert", "torch.Conv3d", "torch.Conv3d", "range", "len"], "function", ["None"], ["", "def", "create_rFF3d", "(", "channel_list", ",", "num_points", ",", "dim", ")", ":", "\n", "    ", "rFF", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv3d", "(", "in_channels", "=", "channel_list", "[", "i", "]", ",", "\n", "out_channels", "=", "channel_list", "[", "i", "+", "1", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ")", "for", "i", "in", "range", "(", "len", "(", "channel_list", ")", "-", "1", ")", "]", ")", "\n", "rFF", ".", "insert", "(", "0", ",", "nn", ".", "Conv3d", "(", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "channel_list", "[", "0", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "num_points", ",", "dim", ")", ")", ")", "\n", "\n", "return", "rFF", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls._get_clones": [[278, 280], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "_get_clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.square_distance": [[385, 405], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.matmul", "torch.matmul", "torch.matmul", "dst.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "def", "square_distance", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"\n    Calculate Euclid distance between each two points.\n    src^T * dst = xn * xm + yn * ym + zn * zm?\n    sum(src^2, dim=-1) = xn*xn + yn*yn + zn*zn;\n    sum(dst^2, dim=-1) = xm*xm + ym*ym + zm*zm;\n    dist = (xn - xm)^2 + (yn - ym)^2 + (zn - zm)^2\n         = sum(src**2,dim=-1)+sum(dst**2,dim=-1)-2*src^T*dst\n    Input:\n        src: source points, [B, N, C]\n        dst: target points, [B, M, C]\n    Output:\n        dist: per-point square distance, [B, N, M]\n    \"\"\"", "\n", "B", ",", "N", ",", "_", "=", "src", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "dst", ".", "shape", "\n", "dist", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ",", "dst", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "src", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "dst", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "1", ",", "M", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.index_points": [[407, 424], ["list", "list", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "len", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "index_points", "(", "points", ",", "idx", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        points: input points data, [B, N, C]\n        idx: sample index data, [B, S]\n    Return:\n        new_points:, indexed points data, [B, S, C]\n    \"\"\"", "\n", "device", "=", "points", ".", "device", "\n", "B", "=", "points", ".", "shape", "[", "0", "]", "\n", "view_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "view_shape", "[", "1", ":", "]", "=", "[", "1", "]", "*", "(", "len", "(", "view_shape", ")", "-", "1", ")", "\n", "repeat_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "repeat_shape", "[", "0", "]", "=", "1", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "view_shape", ")", ".", "repeat", "(", "repeat_shape", ")", "\n", "new_points", "=", "points", "[", "batch_indices", ",", "idx", ",", ":", "]", "\n", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.farthest_point_sample": [[425, 447], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "xyz[].view", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint", "torch.randint", "torch.randint", "torch.arange", "torch.arange", "torch.arange", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: pointcloud data, [B, N, 3]\n        npoint: number of samples\n    Return:\n        centroids: sampled pointcloud index, [B, npoint]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "centroids", "=", "torch", ".", "zeros", "(", "B", ",", "npoint", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "distance", "=", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "to", "(", "device", ")", "*", "1e10", "\n", "farthest", "=", "torch", ".", "randint", "(", "0", ",", "N", ",", "(", "B", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "centroids", "[", ":", ",", "i", "]", "=", "farthest", "\n", "centroid", "=", "xyz", "[", "batch_indices", ",", "farthest", ",", ":", "]", ".", "view", "(", "B", ",", "1", ",", "3", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "-", "1", ")", "\n", "mask", "=", "dist", "<", "distance", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "farthest", "=", "torch", ".", "max", "(", "distance", ",", "-", "1", ")", "[", "1", "]", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.query_ball_point": [[448, 469], ["torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "pointtransformer_cls.square_distance", "group_idx[].view().repeat", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view().repeat.sort", "group_idx[].view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.square_distance"], ["", "def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        radius: local region radius\n        nsample: max sample number in local region\n        xyz: all points, [B, N, 3]\n        new_xyz: query points, [B, S, 3]\n    Return:\n        group_idx: grouped points index, [B, S, nsample]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "new_xyz", ".", "shape", "\n", "group_idx", "=", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "1", ",", "1", ",", "N", ")", ".", "repeat", "(", "[", "B", ",", "S", ",", "1", "]", ")", "\n", "sqrdists", "=", "square_distance", "(", "new_xyz", ",", "xyz", ")", "\n", "group_idx", "[", "sqrdists", ">", "radius", "**", "2", "]", "=", "N", "\n", "group_idx", "=", "group_idx", ".", "sort", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "[", ":", ",", ":", ",", ":", "nsample", "]", "\n", "group_first", "=", "group_idx", "[", ":", ",", ":", ",", "0", "]", ".", "view", "(", "B", ",", "S", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "nsample", "]", ")", "\n", "mask", "=", "group_idx", "==", "N", "\n", "group_idx", "[", "mask", "]", "=", "group_first", "[", "mask", "]", "\n", "return", "group_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointtransformer_cls.sample_and_group": [[471, 505], ["pointtransformer_cls.farthest_point_sample", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "pointtransformer_cls.index_points", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "pointtransformer_cls.query_ball_point", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "pointtransformer_cls.index_points", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "index_points.view", "pointtransformer_cls.index_points", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.farthest_point_sample", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points"], ["", "def", "sample_and_group", "(", "npoint", ",", "radius", ",", "nsample", ",", "xyz", ",", "points", ",", "returnfps", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        npoint:\n        radius:\n        nsample:\n        xyz: input points position data, [B, N, 3]\n        points: input points data, [B, N, D]\n    Return:\n        new_xyz: sampled points position data, [B, npoint, nsample, 3]\n        new_points: sampled points data, [B, npoint, nsample, 3+D]\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "S", "=", "npoint", "\n", "fps_idx", "=", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", "# [B, npoint, C]", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "new_xyz", "=", "index_points", "(", "xyz", ",", "fps_idx", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "idx", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "grouped_xyz", "=", "index_points", "(", "xyz", ",", "idx", ")", "# [B, npoint, nsample, C]", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "grouped_xyz_norm", "=", "grouped_xyz", "-", "new_xyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "grouped_points", "=", "index_points", "(", "points", ",", "idx", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", ",", "grouped_points", "]", ",", "dim", "=", "-", "1", ")", "# [B, npoint, nsample, C+D]", "\n", "", "else", ":", "\n", "        ", "new_points", "=", "grouped_xyz_norm", "\n", "", "if", "returnfps", ":", "\n", "        ", "return", "new_xyz", ",", "new_points", ",", "grouped_xyz", ",", "fps_idx", "\n", "", "else", ":", "\n", "        ", "return", "new_xyz", ",", "new_points", "\n", "", "", ""]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetSetAbstraction.__init__": [[170, 183], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetSetAbstraction.mlp_convs.append", "pointnet_util.PointNetSetAbstraction.mlp_bns.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "npoint", ",", "radius", ",", "nsample", ",", "in_channel", ",", "mlp", ",", "group_all", ")", ":", "\n", "        ", "super", "(", "PointNetSetAbstraction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "nsample", "=", "nsample", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_bns", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "", "self", ".", "group_all", "=", "group_all", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetSetAbstraction.forward": [[184, 211], ["xyz.permute.permute.permute", "torch.relu.permute", "enumerate", "new_xyz.permute.permute.permute", "points.permute.permute.permute", "pointnet_util.sample_and_group_all", "pointnet_util.sample_and_group", "torch.relu", "torch.relu", "torch.relu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "bn", "conv"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.sample_and_group_all", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.sample_and_group"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz: input points position data, [B, C, N]\n            points: input points data, [B, D, N]\n        Return:\n            new_xyz: sampled points position data, [B, C, S]\n            new_points_concat: sample points feature data, [B, D', S]\n        \"\"\"", "\n", "xyz", "=", "xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "            ", "points", "=", "points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "group_all", ":", "\n", "            ", "new_xyz", ",", "new_points", "=", "sample_and_group_all", "(", "xyz", ",", "points", ")", "\n", "", "else", ":", "\n", "            ", "new_xyz", ",", "new_points", "=", "sample_and_group", "(", "self", ".", "npoint", ",", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "points", ")", "\n", "# new_xyz: sampled points position data, [B, npoint, C]", "\n", "# new_points: sampled points data, [B, npoint, nsample, C+D]", "\n", "", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# [B, C+D, nsample,npoint]", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "bn", "=", "self", ".", "mlp_bns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "bn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "\n", "", "new_points", "=", "torch", ".", "max", "(", "new_points", ",", "2", ")", "[", "0", "]", "\n", "new_xyz", "=", "new_xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "new_xyz", ",", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetSetAbstractionMsg.__init__": [[215, 232], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetSetAbstractionMsg.conv_blocks.append", "pointnet_util.PointNetSetAbstractionMsg.bn_blocks.append", "torch.ModuleList.append", "torch.ModuleList.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "npoint", ",", "radius_list", ",", "nsample_list", ",", "in_channel", ",", "mlp_list", ")", ":", "\n", "        ", "super", "(", "PointNetSetAbstractionMsg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius_list", "=", "radius_list", "\n", "self", ".", "nsample_list", "=", "nsample_list", "\n", "self", ".", "conv_blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bn_blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mlp_list", ")", ")", ":", "\n", "            ", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "+", "3", "\n", "for", "out_channel", "in", "mlp_list", "[", "i", "]", ":", "\n", "                ", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "bns", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "", "self", ".", "conv_blocks", ".", "append", "(", "convs", ")", "\n", "self", ".", "bn_blocks", ".", "append", "(", "bns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetSetAbstractionMsg.forward": [[233, 272], ["xyz.permute.permute.permute", "pointnet_util.index_points", "enumerate", "new_xyz.permute.permute.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "points.permute.permute.permute", "pointnet_util.farthest_point_sample", "pointnet_util.query_ball_point", "pointnet_util.index_points", "new_xyz.permute.permute.view", "torch.relu.permute", "range", "new_points_list.append", "pointnet_util.index_points", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.relu", "torch.relu", "torch.relu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "bn", "conv"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.farthest_point_sample", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "points", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz: input points position data, [B, C, N]\n            points: input points data, [B, D, N]\n        Return:\n            new_xyz: sampled points position data, [B, C, S]\n            new_points_concat: sample points feature data, [B, D', S]\n        \"\"\"", "\n", "xyz", "=", "xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "            ", "points", "=", "points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "S", "=", "self", ".", "npoint", "\n", "new_xyz", "=", "index_points", "(", "xyz", ",", "farthest_point_sample", "(", "xyz", ",", "S", ")", ")", "\n", "new_points_list", "=", "[", "]", "\n", "for", "i", ",", "radius", "in", "enumerate", "(", "self", ".", "radius_list", ")", ":", "\n", "            ", "K", "=", "self", ".", "nsample_list", "[", "i", "]", "\n", "group_idx", "=", "query_ball_point", "(", "radius", ",", "K", ",", "xyz", ",", "new_xyz", ")", "\n", "grouped_xyz", "=", "index_points", "(", "xyz", ",", "group_idx", ")", "\n", "grouped_xyz", "-=", "new_xyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "                ", "grouped_points", "=", "index_points", "(", "points", ",", "group_idx", ")", "\n", "grouped_points", "=", "torch", ".", "cat", "(", "[", "grouped_points", ",", "grouped_xyz", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "grouped_points", "=", "grouped_xyz", "\n", "\n", "", "grouped_points", "=", "grouped_points", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# [B, D, K, S]", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "conv_blocks", "[", "i", "]", ")", ")", ":", "\n", "                ", "conv", "=", "self", ".", "conv_blocks", "[", "i", "]", "[", "j", "]", "\n", "bn", "=", "self", ".", "bn_blocks", "[", "i", "]", "[", "j", "]", "\n", "grouped_points", "=", "F", ".", "relu", "(", "bn", "(", "conv", "(", "grouped_points", ")", ")", ")", "\n", "", "new_points", "=", "torch", ".", "max", "(", "grouped_points", ",", "2", ")", "[", "0", "]", "# [B, D', S]", "\n", "new_points_list", ".", "append", "(", "new_points", ")", "\n", "\n", "", "new_xyz", "=", "new_xyz", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_points_concat", "=", "torch", ".", "cat", "(", "new_points_list", ",", "dim", "=", "1", ")", "\n", "return", "new_xyz", ",", "new_points_concat", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__": [[275, 284], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "pointnet_util.PointNetFeaturePropagation.mlp_convs.append", "pointnet_util.PointNetFeaturePropagation.mlp_bns.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "mlp", ")", ":", "\n", "        ", "super", "(", "PointNetFeaturePropagation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlp_bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "last_channel", "=", "in_channel", "\n", "for", "out_channel", "in", "mlp", ":", "\n", "            ", "self", ".", "mlp_convs", ".", "append", "(", "nn", ".", "Conv1d", "(", "last_channel", ",", "out_channel", ",", "1", ")", ")", "\n", "self", ".", "mlp_bns", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "out_channel", ")", ")", "\n", "last_channel", "=", "out_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.PointNetFeaturePropagation.forward": [[285, 325], ["xyz1.permute.permute.permute", "xyz2.permute.permute.permute", "points2.permute.permute.permute", "torch.relu.permute", "enumerate", "points2.permute.permute.repeat", "pointnet_util.square_distance", "square_distance.sort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "points1.permute.permute.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "bn", "pointnet_util.index_points", "weight.view", "conv"], "methods", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.square_distance", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points"], ["", "", "def", "forward", "(", "self", ",", "xyz1", ",", "xyz2", ",", "points1", ",", "points2", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            xyz1: input points position data, [B, C, N]\n            xyz2: sampled input points position data, [B, C, S]\n            points1: input points data, [B, D, N]\n            points2: input points data, [B, D, S]\n        Return:\n            new_points: upsampled points data, [B, D', N]\n        \"\"\"", "\n", "xyz1", "=", "xyz1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "xyz2", "=", "xyz2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "points2", "=", "points2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "B", ",", "N", ",", "C", "=", "xyz1", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "xyz2", ".", "shape", "\n", "\n", "if", "S", "==", "1", ":", "\n", "            ", "interpolated_points", "=", "points2", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "dists", "=", "square_distance", "(", "xyz1", ",", "xyz2", ")", "\n", "dists", ",", "idx", "=", "dists", ".", "sort", "(", "dim", "=", "-", "1", ")", "\n", "dists", ",", "idx", "=", "dists", "[", ":", ",", ":", ",", ":", "3", "]", ",", "idx", "[", ":", ",", ":", ",", ":", "3", "]", "# [B, N, 3]", "\n", "\n", "dist_recip", "=", "1.0", "/", "(", "dists", "+", "1e-8", ")", "\n", "norm", "=", "torch", ".", "sum", "(", "dist_recip", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "dist_recip", "/", "norm", "\n", "interpolated_points", "=", "torch", ".", "sum", "(", "index_points", "(", "points2", ",", "idx", ")", "*", "weight", ".", "view", "(", "B", ",", "N", ",", "3", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "if", "points1", "is", "not", "None", ":", "\n", "            ", "points1", "=", "points1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "points1", ",", "interpolated_points", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "new_points", "=", "interpolated_points", "\n", "\n", "", "new_points", "=", "new_points", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "mlp_convs", ")", ":", "\n", "            ", "bn", "=", "self", ".", "mlp_bns", "[", "i", "]", "\n", "new_points", "=", "F", ".", "relu", "(", "bn", "(", "conv", "(", "new_points", ")", ")", ")", "\n", "", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.timeit": [[10, 13], ["print", "time.time", "time.time"], "function", ["None"], ["def", "timeit", "(", "tag", ",", "t", ")", ":", "\n", "    ", "print", "(", "\"{}: {}s\"", ".", "format", "(", "tag", ",", "time", "(", ")", "-", "t", ")", ")", "\n", "return", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.pc_normalize": [[14, 21], ["numpy.mean", "numpy.max", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "def", "pc_normalize", "(", "pc", ")", ":", "\n", "    ", "l", "=", "pc", ".", "shape", "[", "0", "]", "\n", "centroid", "=", "np", ".", "mean", "(", "pc", ",", "axis", "=", "0", ")", "\n", "pc", "=", "pc", "-", "centroid", "\n", "m", "=", "np", ".", "max", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pc", "**", "2", ",", "axis", "=", "1", ")", ")", ")", "\n", "pc", "=", "pc", "/", "m", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.square_distance": [[22, 44], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.matmul", "torch.matmul", "torch.matmul", "dst.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "square_distance", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"\n    Calculate Euclid distance between each two points.\n\n    src^T * dst = xn * xm + yn * ym + zn * zm\uff1b\n    sum(src^2, dim=-1) = xn*xn + yn*yn + zn*zn;\n    sum(dst^2, dim=-1) = xm*xm + ym*ym + zm*zm;\n    dist = (xn - xm)^2 + (yn - ym)^2 + (zn - zm)^2\n         = sum(src**2,dim=-1)+sum(dst**2,dim=-1)-2*src^T*dst\n\n    Input:\n        src: source points, [B, N, C]\n        dst: target points, [B, M, C]\n    Output:\n        dist: per-point square distance, [B, N, M]\n    \"\"\"", "\n", "B", ",", "N", ",", "_", "=", "src", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "dst", ".", "shape", "\n", "dist", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ",", "dst", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "src", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "dst", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "1", ",", "M", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points": [[46, 64], ["list", "list", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "len", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "index_points", "(", "points", ",", "idx", ")", ":", "\n", "    ", "\"\"\"\n\n    Input:\n        points: input points data, [B, N, C]\n        idx: sample index data, [B, S]\n    Return:\n        new_points:, indexed points data, [B, S, C]\n    \"\"\"", "\n", "device", "=", "points", ".", "device", "\n", "B", "=", "points", ".", "shape", "[", "0", "]", "\n", "view_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "view_shape", "[", "1", ":", "]", "=", "[", "1", "]", "*", "(", "len", "(", "view_shape", ")", "-", "1", ")", "\n", "repeat_shape", "=", "list", "(", "idx", ".", "shape", ")", "\n", "repeat_shape", "[", "0", "]", "=", "1", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "view_shape", ")", ".", "repeat", "(", "repeat_shape", ")", "\n", "new_points", "=", "points", "[", "batch_indices", ",", "idx", ",", ":", "]", "\n", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.farthest_point_sample": [[66, 88], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "xyz[].view", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint", "torch.randint", "torch.randint", "torch.arange", "torch.arange", "torch.arange", "torch.max", "torch.max", "torch.max", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: pointcloud data, [B, N, 3]\n        npoint: number of samples\n    Return:\n        centroids: sampled pointcloud index, [B, npoint]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "centroids", "=", "torch", ".", "zeros", "(", "B", ",", "npoint", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "distance", "=", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "to", "(", "device", ")", "*", "1e10", "\n", "farthest", "=", "torch", ".", "randint", "(", "0", ",", "N", ",", "(", "B", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "centroids", "[", ":", ",", "i", "]", "=", "farthest", "\n", "centroid", "=", "xyz", "[", "batch_indices", ",", "farthest", ",", ":", "]", ".", "view", "(", "B", ",", "1", ",", "3", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "-", "1", ")", "\n", "mask", "=", "dist", "<", "distance", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "farthest", "=", "torch", ".", "max", "(", "distance", ",", "-", "1", ")", "[", "1", "]", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.query_ball_point": [[90, 111], ["torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "pointnet_util.square_distance", "group_idx[].view().repeat", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view().repeat.sort", "group_idx[].view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.square_distance"], ["", "def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        radius: local region radius\n        nsample: max sample number in local region\n        xyz: all points, [B, N, 3]\n        new_xyz: query points, [B, S, 3]\n    Return:\n        group_idx: grouped points index, [B, S, nsample]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "_", ",", "S", ",", "_", "=", "new_xyz", ".", "shape", "\n", "group_idx", "=", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", ".", "view", "(", "1", ",", "1", ",", "N", ")", ".", "repeat", "(", "[", "B", ",", "S", ",", "1", "]", ")", "\n", "sqrdists", "=", "square_distance", "(", "new_xyz", ",", "xyz", ")", "\n", "group_idx", "[", "sqrdists", ">", "radius", "**", "2", "]", "=", "N", "\n", "group_idx", "=", "group_idx", ".", "sort", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "[", ":", ",", ":", ",", ":", "nsample", "]", "\n", "group_first", "=", "group_idx", "[", ":", ",", ":", ",", "0", "]", ".", "view", "(", "B", ",", "S", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "nsample", "]", ")", "\n", "mask", "=", "group_idx", "==", "N", "\n", "group_idx", "[", "mask", "]", "=", "group_first", "[", "mask", "]", "\n", "return", "group_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.sample_and_group": [[113, 147], ["pointnet_util.farthest_point_sample", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "pointnet_util.index_points", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "pointnet_util.query_ball_point", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "pointnet_util.index_points", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "index_points.view", "pointnet_util.index_points", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.farthest_point_sample", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.query_ball_point", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points", "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.index_points"], ["", "def", "sample_and_group", "(", "npoint", ",", "radius", ",", "nsample", ",", "xyz", ",", "points", ",", "returnfps", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        npoint:\n        radius:\n        nsample:\n        xyz: input points position data, [B, N, 3]\n        points: input points data, [B, N, D]\n    Return:\n        new_xyz: sampled points position data, [B, npoint, nsample, 3]\n        new_points: sampled points data, [B, npoint, nsample, 3+D]\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "S", "=", "npoint", "\n", "fps_idx", "=", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", "# [B, npoint, C]", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "new_xyz", "=", "index_points", "(", "xyz", ",", "fps_idx", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "idx", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "grouped_xyz", "=", "index_points", "(", "xyz", ",", "idx", ")", "# [B, npoint, nsample, C]", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "grouped_xyz_norm", "=", "grouped_xyz", "-", "new_xyz", ".", "view", "(", "B", ",", "S", ",", "1", ",", "C", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "grouped_points", "=", "index_points", "(", "points", ",", "idx", ")", "\n", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz_norm", ",", "grouped_points", "]", ",", "dim", "=", "-", "1", ")", "# [B, npoint, nsample, C+D]", "\n", "", "else", ":", "\n", "        ", "new_points", "=", "grouped_xyz_norm", "\n", "", "if", "returnfps", ":", "\n", "        ", "return", "new_xyz", ",", "new_points", ",", "grouped_xyz", ",", "fps_idx", "\n", "", "else", ":", "\n", "        ", "return", "new_xyz", ",", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.engelnico_point-transformer.model.pointnet_util.sample_and_group_all": [[149, 167], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "xyz.view", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "points.view"], "function", ["None"], ["", "", "def", "sample_and_group_all", "(", "xyz", ",", "points", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: input points position data, [B, N, 3]\n        points: input points data, [B, N, D]\n    Return:\n        new_xyz: sampled points position data, [B, 1, 3]\n        new_points: sampled points data, [B, 1, N, 3+D]\n    \"\"\"", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "new_xyz", "=", "torch", ".", "zeros", "(", "B", ",", "1", ",", "C", ")", ".", "to", "(", "device", ")", "\n", "grouped_xyz", "=", "xyz", ".", "view", "(", "B", ",", "1", ",", "N", ",", "C", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "new_points", "=", "torch", ".", "cat", "(", "[", "grouped_xyz", ",", "points", ".", "view", "(", "B", ",", "1", ",", "N", ",", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "new_points", "=", "grouped_xyz", "\n", "", "return", "new_xyz", ",", "new_points", "\n", "\n"]]}