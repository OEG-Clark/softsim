{"home.repos.pwc.inspect_result.machine-discovery_research.algs.k_center_greedy.kCenterGreedy.__init__": [[30, 43], ["x.reshape", "torch.cuda.is_available"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "cluster_centers", ":", "Optional", "[", "list", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param x: the features of the pool of ALL samples from which smaller subset will be sampled\n                  to train the deep learning model (features normally taken from hidden layer)\n        :param cluster_centers: indices of the current pool of labelled training samples\n        \"\"\"", "\n", "self", ".", "name", ":", "str", "=", "'kcenter'", "\n", "self", ".", "n", ":", "int", "=", "x", ".", "shape", "[", "0", "]", "\n", "self", ".", "x", ":", "np", ".", "ndarray", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "self", ".", "min_distances", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", "\n", "self", ".", "cluster_centers", ":", "Optional", "[", "list", "]", "=", "cluster_centers", "# indices of cluster centers, not coordinates", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "use_cuda", "else", "torch", ".", "FloatTensor", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.algs.k_center_greedy.kCenterGreedy.update_distances": [[44, 71], ["torch.as_tensor().type", "torch.as_tensor().type", "pykeops.torch.Vi", "pykeops.torch.Vj", "dist.reshape", "numpy.array", "torch.as_tensor().type", "torch.as_tensor().type", "pykeops.torch.Vi", "pykeops.torch.Vj", "torch.as_tensor", "torch.as_tensor", "numpy.minimum", "torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["", "def", "update_distances", "(", "self", ",", "initial_state", ":", "bool", "=", "False", ")", ":", "\n", "        ", "center", ":", "np", ".", "ndarray", "\n", "dist", ":", "np", ".", "ndarray", "\n", "\n", "if", "initial_state", ":", "\n", "            ", "center", "=", "self", ".", "x", "[", "self", ".", "cluster_centers", ",", ":", "]", "\n", "x", "=", "torch", ".", "as_tensor", "(", "self", ".", "x", ")", ".", "type", "(", "self", ".", "tensor", ")", "\n", "center", "=", "torch", ".", "as_tensor", "(", "center", ")", ".", "type", "(", "self", ".", "tensor", ")", "\n", "x_i", "=", "Vi", "(", "x", ")", "\n", "y_j", "=", "Vj", "(", "center", ")", "\n", "dist", "=", "(", "(", "x_i", "-", "y_j", ")", "**", "2", ")", ".", "sum", "(", ")", ".", "min", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "min_distances", "=", "dist", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "return", "self", ".", "min_distances", "\n", "\n", "", "else", ":", "\n", "# add this if statement so that it is mypy compliant", "\n", "            ", "if", "self", ".", "cluster_centers", "is", "not", "None", ":", "\n", "                ", "center", "=", "np", ".", "array", "(", "[", "self", ".", "x", "[", "self", ".", "cluster_centers", "[", "-", "1", "]", ",", ":", "]", "]", ")", "\n", "x", "=", "torch", ".", "as_tensor", "(", "self", ".", "x", ")", ".", "type", "(", "self", ".", "tensor", ")", "\n", "center", "=", "torch", ".", "as_tensor", "(", "center", ")", ".", "type", "(", "self", ".", "tensor", ")", "\n", "x_i", "=", "Vi", "(", "x", ")", "\n", "y_j", "=", "Vj", "(", "center", ")", "\n", "dist", "=", "(", "(", "x_i", "-", "y_j", ")", "**", "2", ")", ".", "sum", "(", ")", ".", "min", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# add this if statement so that it is mypy compliant", "\n", "if", "self", ".", "min_distances", "is", "not", "None", ":", "\n", "                    ", "assert", "self", ".", "min_distances", ".", "shape", "==", "dist", ".", "shape", "\n", "self", ".", "min_distances", "=", "np", ".", "minimum", "(", "self", ".", "min_distances", ",", "dist", ")", "\n", "# assert self.min_distances.shape == (self.n, 1)", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.algs.k_center_greedy.kCenterGreedy.select_batch": [[73, 102], ["k_center_greedy.kCenterGreedy.update_distances", "k_center_greedy.kCenterGreedy.cluster_centers.copy", "tqdm.tqdm.tqdm", "numpy.arange", "numpy.array.tolist", "k_center_greedy.kCenterGreedy.update_distances", "range", "numpy.array", "k_center_greedy.kCenterGreedy.cluster_centers.append", "k_center_greedy.kCenterGreedy.update_distances", "s_next.append", "numpy.argmax", "numpy.array.tolist", "numpy.array.tolist"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.algs.k_center_greedy.kCenterGreedy.update_distances", "home.repos.pwc.inspect_result.machine-discovery_research.algs.k_center_greedy.kCenterGreedy.update_distances", "home.repos.pwc.inspect_result.machine-discovery_research.algs.k_center_greedy.kCenterGreedy.update_distances"], ["", "", "", "", "def", "select_batch", "(", "self", ",", "b", ":", "int", ",", "initial_pool_size", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "Tuple", "[", "List", ",", "List", ",", "List", "]", ":", "\n", "        ", "\"\"\"\n        :param b: number of datapoints to be selected\n        :param init_pool_size: |s0| per the core-set paper, the initial number of cluster centers i.e. training\n                               datapoints\n        \"\"\"", "\n", "s_next", ":", "list", "=", "[", "]", "\n", "s0", ":", "list", "=", "[", "]", "\n", "idx", ":", "np", ".", "ndarray", "\n", "\n", "if", "self", ".", "cluster_centers", "is", "None", ":", "\n", "            ", "idx", "=", "np", ".", "arange", "(", "initial_pool_size", ")", "\n", "s0", "=", "idx", ".", "tolist", "(", ")", "\n", "self", ".", "cluster_centers", "=", "s0", "\n", "self", ".", "update_distances", "(", "initial_state", "=", "True", ")", "\n", "s_next", "=", "s0", "\n", "return", "s_next", ",", "s0", ",", "self", ".", "cluster_centers", "\n", "\n", "", "self", ".", "update_distances", "(", "initial_state", "=", "True", ")", "\n", "s0", "=", "self", ".", "cluster_centers", ".", "copy", "(", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "b", ")", ")", ":", "\n", "# add this if statement so that it is mypy compliant", "\n", "            ", "if", "self", ".", "min_distances", "is", "not", "None", ":", "\n", "                ", "idx", "=", "np", ".", "array", "(", "np", ".", "argmax", "(", "self", ".", "min_distances", ")", ")", "\n", "self", ".", "cluster_centers", ".", "append", "(", "idx", ".", "tolist", "(", ")", ")", "\n", "self", ".", "update_distances", "(", ")", "\n", "s_next", ".", "append", "(", "idx", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "return", "s_next", ",", "s0", ",", "self", ".", "cluster_centers", "\n", "", "", ""]], "home.repos.pwc.inspect_result.machine-discovery_research.algs.random_sample.RandomSample.__init__": [[14, 43], ["numpy.array", "configparser.ConfigParser", "random_sample.RandomSample.parser.read", "int", "float", "int", "int", "int", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "nsamples", ":", "int", ",", "\n", "ndim", ":", "int", ",", "\n", "total_pool_size", ":", "int", ",", "\n", "selected_x", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "[", "]", ")", ")", ":", "\n", "        ", "\"\"\"\n        :param nsamples: number of datapoints to be selected\n        :param ndim: not used here (remove later)\n        :param total_pool_size: size of the total pool of labelled and unlabelled samples\n        :param selected_x: indices of the current pool of labelled training samples\n        \"\"\"", "\n", "self", ".", "_ndim", ":", "int", "=", "ndim", "\n", "self", ".", "_nsamples", ":", "int", "=", "nsamples", "\n", "self", ".", "selected_x", ":", "np", ".", "ndarray", "=", "selected_x", "# the index", "\n", "self", ".", "total_pool_size", ":", "int", "=", "total_pool_size", "\n", "\n", "self", ".", "parser", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "self", ".", "parser", ".", "read", "(", "'/home/yi_heng_machine_discovery_com/aldense/aldense/config/config.ini'", ")", "\n", "self", ".", "patience", ":", "int", "=", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'early_stopping_patience'", "]", ")", "\n", "self", ".", "gradient_clip_val", ":", "float", "=", "float", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'gradient_clip_val'", "]", ")", "\n", "self", ".", "track_grad_norm", ":", "Union", "[", "int", ",", "str", "]", "\n", "try", ":", "\n", "            ", "self", ".", "track_grad_norm", "=", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'track_grad_norm'", "]", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "self", ".", "track_grad_norm", "=", "self", ".", "parser", "[", "'hparams'", "]", "[", "'track_grad_norm'", "]", "\n", "", "self", ".", "batch_size", ":", "int", "=", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'batch_size'", "]", ")", "\n", "self", ".", "nb_epoch", ":", "int", "=", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'nb_epoch'", "]", ")", "\n", "self", ".", "nb_gpus", ":", "int", "=", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'nb_gpus'", "]", ")", "\n", "self", ".", "check_val_every_n_epoch", ":", "int", "=", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'check_val_every_n_epoch'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.algs.random_sample.RandomSample.ask_normalized": [[44, 60], ["numpy.arange", "numpy.random.choice", "numpy.append", "numpy.array"], "methods", ["None"], ["", "def", "ask_normalized", "(", "self", ",", "jobid", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        :param jobid: jobid\n\n        :return: the indices of all the current pool of (& to-be) labelled training samples (from all iterations)\n        \"\"\"", "\n", "if", "jobid", "==", "0", ":", "\n", "            ", "self", ".", "selected_x", "=", "np", ".", "arange", "(", "self", ".", "_nsamples", ")", "\n", "return", "self", ".", "selected_x", "\n", "", "else", ":", "\n", "            ", "supposed_n", "=", "self", ".", "selected_x", ".", "shape", "[", "0", "]", "+", "self", ".", "_nsamples", "\n", "while", "self", ".", "selected_x", ".", "shape", "[", "0", "]", "<", "supposed_n", ":", "\n", "                ", "choice", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "total_pool_size", ")", "\n", "if", "choice", "not", "in", "self", ".", "selected_x", ":", "\n", "                    ", "self", ".", "selected_x", "=", "np", ".", "append", "(", "self", ".", "selected_x", ",", "np", ".", "array", "(", "choice", ")", ")", "\n", "", "", "return", "self", ".", "selected_x", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.algs.random_sample.RandomSample.tell_normalized": [[61, 95], ["models.litmodel.DENSEDataModule", "models.litmodel.LitModel", "pytorch_lightning.Trainer", "pytorch_lightning.Trainer.fit", "pytorch_lightning.callbacks.early_stopping.EarlyStopping", "pytorch_lightning.callbacks.ModelCheckpoint"], "methods", ["None"], ["", "", "def", "tell_normalized", "(", "self", ",", "\n", "emulator", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "x_train", ":", "np", ".", "ndarray", ",", "\n", "x_val", ":", "np", ".", "ndarray", ",", "\n", "jobid", ":", "int", ",", "\n", "logger_name", ":", "TensorBoardLogger", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "        ", "\"\"\"\n        :param simulator: oracle for data labelling\n        :param emulator: emulator to be trained\n        :param x_train: training points x (the input, different from self.x)\n        :param x_val: validation points x\n        :param jobid: jobid (not used here, just a placeholder in case it is needed in the future)\n        :param logger_name: Tensorboard log file details\n\n        :return: the trained emulator\n        \"\"\"", "\n", "data_module", "=", "DENSEDataModule", "(", "x_train", "=", "x_train", ",", "\n", "x_val", "=", "x_val", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "dense_model", "=", "LitModel", "(", "emulator", ")", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "max_epochs", "=", "self", ".", "nb_epoch", ",", "\n", "gpus", "=", "self", ".", "nb_gpus", ",", "\n", "logger", "=", "logger_name", ",", "\n", "accelerator", "=", "'ddp'", ",", "\n", "gradient_clip_val", "=", "self", ".", "gradient_clip_val", ",", "\n", "track_grad_norm", "=", "self", ".", "track_grad_norm", ",", "\n", "terminate_on_nan", "=", "True", ",", "\n", "check_val_every_n_epoch", "=", "self", ".", "check_val_every_n_epoch", ",", "\n", "callbacks", "=", "[", "EarlyStopping", "(", "monitor", "=", "'val_loss'", ",", "\n", "patience", "=", "self", ".", "patience", ",", "\n", "verbose", "=", "False", ")", ",", "\n", "ModelCheckpoint", "(", "save_last", "=", "True", ")", "]", ")", "\n", "trainer", ".", "fit", "(", "dense_model", ",", "data_module", ")", "\n", "return", "emulator", "\n", "", "", ""]], "home.repos.pwc.inspect_result.machine-discovery_research.algs.base_alg.BaseAlg.ask_normalized": [[7, 15], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "ask_normalized", "(", "self", ",", "jobid", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Given the job id, returns an ndarray with shape of ``(nsamples, ndim)``\n        correspond to the points to be evaluated in simulations.\n        The values of the output should be bounded from 0 to 1.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.algs.base_alg.BaseAlg.tell_normalized": [[24, 36], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "tell_normalized", "(", "self", ",", "\n", "emulator", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "x_train", ":", "np", ".", "ndarray", ",", "\n", "x_val", ":", "np", ".", "ndarray", ",", "\n", "jobid", ":", "int", ",", "\n", "logger_name", ":", "TensorBoardLogger", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "        ", "\"\"\"\n        Inform the algorithm about the simulation results where ``x`` is the evaluted\n        points and ``y`` is the evaluated outputs.\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.machine-discovery_research.algs.coreset_sample.CoreSetSample.__init__": [[15, 50], ["algs.k_center_greedy.kCenterGreedy", "configparser.ConfigParser", "coreset_sample.CoreSetSample.parser.read", "int", "float", "int", "int", "int", "int", "t_idx.tolist", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "budget", ":", "int", ",", "t_idx", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "init_pool_size", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Implementation of the paper https://arxiv.org/abs/1708.00489\n\n        :param x: the features of the pool of ALL samples from which smaller subset will be sampled\n                  to train the deep learning model (features normally taken from hidden layer)\n        :param budget: number of datapoints to be selected\n        :param t_idx: indices of the current pool of labelled training samples\n        :param init_pool_size: |s0| per the core-set paper, the initial number of cluster centers i.e. training\n                               datapoints\n\n        if t_idx is None, init_pool_size must be provided\n        if t_idx is not None, init_pool_size can be omitted\n        & vice versa\n        \"\"\"", "\n", "self", ".", "x", ":", "np", ".", "ndarray", "=", "x", "\n", "self", ".", "t_idx", ":", "Optional", "[", "list", "]", "=", "t_idx", ".", "tolist", "(", ")", "if", "t_idx", "is", "not", "None", "else", "None", "# indices of current pool", "\n", "self", ".", "algo", "=", "kCenterGreedy", "(", "x", "=", "self", ".", "x", ",", "cluster_centers", "=", "self", ".", "t_idx", ")", "# self.t_idx can be a list or None", "\n", "self", ".", "s0", ":", "Optional", "[", "int", "]", "=", "init_pool_size", "# number of initial cluster centers to be chosen if no t_idx given", "\n", "self", ".", "budget", ":", "int", "=", "budget", "\n", "\n", "self", ".", "parser", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "self", ".", "parser", ".", "read", "(", "'./config/config.ini'", ")", "\n", "self", ".", "patience", ":", "int", "=", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'early_stopping_patience'", "]", ")", "\n", "self", ".", "gradient_clip_val", ":", "float", "=", "float", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'gradient_clip_val'", "]", ")", "\n", "self", ".", "track_grad_norm", ":", "Union", "[", "int", ",", "str", "]", "\n", "try", ":", "\n", "            ", "self", ".", "track_grad_norm", "=", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'track_grad_norm'", "]", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "self", ".", "track_grad_norm", "=", "self", ".", "parser", "[", "'hparams'", "]", "[", "'track_grad_norm'", "]", "\n", "", "self", ".", "batch_size", ":", "int", "=", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'batch_size'", "]", ")", "\n", "self", ".", "nb_epoch", ":", "int", "=", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'nb_epoch'", "]", ")", "\n", "self", ".", "nb_gpus", ":", "int", "=", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'nb_gpus'", "]", ")", "\n", "self", ".", "check_val_every_n_epoch", ":", "int", "=", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'check_val_every_n_epoch'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.algs.coreset_sample.CoreSetSample.ask_normalized": [[51, 59], ["numpy.array", "coreset_sample.CoreSetSample.algo.select_batch"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.algs.k_center_greedy.kCenterGreedy.select_batch"], ["", "def", "ask_normalized", "(", "self", ",", "jobid", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        :param jobid: jobid (not used here, just a placeholder in case it is needed in the future)\n\n        :return: the indices of all the current pool of (& to-be) labelled training samples (from all iterations)\n        \"\"\"", "\n", "# not the most efficient way, should only return the to-be samples", "\n", "return", "np", ".", "array", "(", "self", ".", "algo", ".", "select_batch", "(", "b", "=", "self", ".", "budget", ",", "initial_pool_size", "=", "self", ".", "s0", ")", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.algs.coreset_sample.CoreSetSample.tell_normalized": [[60, 94], ["models.litmodel.DENSEDataModule", "models.litmodel.LitModel", "pytorch_lightning.Trainer", "pytorch_lightning.Trainer.fit", "pytorch_lightning.callbacks.early_stopping.EarlyStopping", "pytorch_lightning.callbacks.ModelCheckpoint"], "methods", ["None"], ["", "def", "tell_normalized", "(", "self", ",", "\n", "emulator", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "x_train", ":", "np", ".", "ndarray", ",", "\n", "x_val", ":", "np", ".", "ndarray", ",", "\n", "jobid", ":", "int", ",", "\n", "logger_name", ":", "TensorBoardLogger", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "        ", "\"\"\"\n        :param simulator: oracle for data labelling\n        :param emulator: emulator to be trained\n        :param x_train: training points x (the input, different from self.x)\n        :param x_val: validation points x\n        :param jobid: jobid (not used here, just a placeholder in case it is needed in the future)\n        :param logger_name: Tensorboard log file details\n\n        :return: the trained emulator\n        \"\"\"", "\n", "data_module", "=", "DENSEDataModule", "(", "x_train", "=", "x_train", ",", "\n", "x_val", "=", "x_val", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "dense_model", "=", "LitModel", "(", "emulator", ")", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "max_epochs", "=", "self", ".", "nb_epoch", ",", "\n", "gpus", "=", "self", ".", "nb_gpus", ",", "\n", "logger", "=", "logger_name", ",", "\n", "accelerator", "=", "'ddp'", ",", "\n", "gradient_clip_val", "=", "self", ".", "gradient_clip_val", ",", "\n", "track_grad_norm", "=", "self", ".", "track_grad_norm", ",", "\n", "terminate_on_nan", "=", "True", ",", "\n", "check_val_every_n_epoch", "=", "self", ".", "check_val_every_n_epoch", ",", "\n", "callbacks", "=", "[", "EarlyStopping", "(", "monitor", "=", "'val_loss'", ",", "\n", "patience", "=", "self", ".", "patience", ",", "\n", "verbose", "=", "False", ")", ",", "\n", "ModelCheckpoint", "(", "save_last", "=", "True", ")", "]", ")", "\n", "trainer", ".", "fit", "(", "dense_model", ",", "data_module", ")", "\n", "return", "emulator", "\n", "", "", ""]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.DENSE01.__init__": [[12, 108], ["super().__init__", "parser.read", "max", "len", "nodes.append", "torch.nn.Sequential", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "list", "nodes.append", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "convs.append", "skips.append", "zip", "len", "torch.nn.Sequential", "dense01.DCTHybrid", "torch.nn.Sequential", "torch.nn.Sequential", "float", "numpy.prod", "len", "torch.nn.ReLU", "dense01.DCTHybrid", "dense01.ConvertSize1D", "torch.nn.Conv1d", "dense01.ConvertSize1D", "dense01.ConvertChannel", "torch.nn.Sequential", "torch.nn.Sequential", "NotImplementedError", "max", "dense01.ConvertSize2D", "torch.nn.Conv2d", "dense01.ConvertSize2D", "dense01.ConvertChannel", "dense01.generate_shape", "max"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__", "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.generate_shape"], ["    ", "def", "__init__", "(", "self", ",", "ninps", ":", "int", "=", "3", ",", "nout", ":", "int", "=", "1", ",", "outshape", ":", "Sequence", "[", "int", "]", "=", "[", "250", "]", ",", "\n", "kernel_size", ":", "int", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        ndim=len(outshape) should be output type per the paper, for e.g. 2D for images, 1D for lines\n        nout should be the 'number of columns', or 'number of channels' in the final output\n        ndepths should be the number of CNN layers\n        \"\"\"", "\n", "parser", ".", "read", "(", "'/home/yi_heng_machine_discovery_com/aldense/aldense/config/config.ini'", ")", "\n", "# determine the channels and shapes of the intermediate values", "\n", "ch", "=", "max", "(", "64", ",", "nout", ")", "\n", "ndim", "=", "len", "(", "outshape", ")", "# number of dimension of the output signal", "\n", "ndepths", "=", "7", "\n", "if", "ndim", ">", "0", ":", "\n", "            ", "shapes", ":", "List", "[", "Sequence", "[", "int", "]", "]", "=", "list", "(", "zip", "(", "*", "[", "generate_shape", "(", "outs", ",", "ndepths", ")", "for", "outs", "in", "outshape", "]", ")", ")", "\n", "outsh", "=", "outshape", "\n", "", "else", ":", "\n", "            ", "shapes", "=", "[", "(", "1", ",", ")", "]", "*", "ndepths", "\n", "outsh", "=", "[", "1", "]", "\n", "", "nodes", ":", "List", "[", "Tuple", "[", "int", ",", "...", "]", "]", "=", "[", "]", "\n", "for", "shape", "in", "shapes", ":", "\n", "            ", "nodes", ".", "append", "(", "(", "ch", ",", "*", "shape", ")", ")", "\n", "# print(nodes)", "\n", "", "nodes", ".", "append", "(", "(", "nout", ",", "*", "outsh", ")", ")", "\n", "# print(nodes)", "\n", "self", ".", "_nodes", "=", "nodes", "\n", "self", ".", "_ndim", "=", "ndim", "\n", "\"\"\"\n        # densely connected layer\n        self._dense = torch.nn.Sequential(\n            torch.nn.Linear(ninps, ch * 4),\n            torch.nn.ReLU(),\n            torch.nn.Linear(ch * 4, ch * np.prod(nodes[0][1:])),\n        )\n        \"\"\"", "\n", "# densely connected layer", "\n", "self", ".", "_dense", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "ninps", ",", "ch", "*", "4", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "# torch.nn.ELU(),", "\n", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "float", "(", "parser", "[", "'hparams'", "]", "[", "'dropout'", "]", ")", ")", ",", "\n", "# torch.nn.BatchNorm1d(ch * 4),", "\n", "torch", ".", "nn", ".", "Linear", "(", "ch", "*", "4", ",", "ch", "*", "np", ".", "prod", "(", "nodes", "[", "0", "]", "[", "1", ":", "]", ")", ")", ",", "\n", ")", "\n", "\n", "# construct the convolutional layer and skip connection", "\n", "convs", ":", "List", "[", "torch", ".", "nn", ".", "Module", "]", "=", "[", "]", "\n", "skips", ":", "List", "[", "torch", ".", "nn", ".", "Module", "]", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "nodes", ")", "-", "1", ")", ":", "\n", "            ", "ch0", "=", "nodes", "[", "i", "]", "[", "0", "]", "\n", "ch1", "=", "nodes", "[", "i", "+", "1", "]", "[", "0", "]", "\n", "sz0", "=", "nodes", "[", "i", "]", "[", "1", ":", "]", "\n", "sz1", "=", "nodes", "[", "i", "+", "1", "]", "[", "1", ":", "]", "\n", "\n", "with_relu", "=", "i", "<", "len", "(", "nodes", ")", "-", "1", "\n", "if", "with_relu", ":", "\n", "                ", "nonlinear", ":", "torch", ".", "nn", ".", "Module", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "DCTHybrid", "(", ")", ")", "\n", "# nonlinear: torch.nn.Module = torch.nn.Sequential(torch.nn.ELU(), DCTHybrid())", "\n", "", "else", ":", "\n", "                ", "nonlinear", "=", "DCTHybrid", "(", ")", "\n", "\n", "", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "if", "ndim", "==", "1", "or", "ndim", "==", "0", ":", "\n", "# convolutional layer", "\n", "                ", "conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "ConvertSize1D", "(", "sz0", ",", "sz1", ",", "fill_const", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "ch0", ",", "ch1", ",", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nonlinear", ",", "\n", ")", "\n", "# skip connection", "\n", "skip", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "ConvertSize1D", "(", "sz0", ",", "sz1", ")", ",", "\n", "ConvertChannel", "(", "ch0", ",", "ch1", ",", "max", "(", "ndim", ",", "1", ")", ")", "\n", ")", "\n", "", "elif", "ndim", "==", "2", ":", "\n", "# convolutional layer", "\n", "                ", "conv", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "ConvertSize2D", "(", "sz0", ",", "sz1", ",", "fill_const", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "ch0", ",", "ch1", ",", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nonlinear", ",", "\n", ")", "\n", "# skip connection", "\n", "skip", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "ConvertSize2D", "(", "sz0", ",", "sz1", ")", ",", "\n", "ConvertChannel", "(", "ch0", ",", "ch1", ",", "max", "(", "ndim", ",", "1", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"Not implemented operation for ndim: %d\"", "%", "ndim", ")", "\n", "\n", "", "convs", ".", "append", "(", "conv", ")", "\n", "skips", ".", "append", "(", "skip", ")", "\n", "\n", "", "self", ".", "_convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", "convs", ")", "\n", "self", ".", "_skips", "=", "torch", ".", "nn", ".", "ModuleList", "(", "skips", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.DENSE01.forward": [[109, 123], ["dense01.DENSE01._dense", "x.reshape.reshape.reshape", "zip", "len", "len", "x.reshape.reshape.reshape", "conv", "skip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "assert", "len", "(", "self", ".", "_convs", ")", "==", "len", "(", "self", ".", "_skips", ")", "\n", "x", "=", "self", ".", "_dense", "(", "x", ")", "\n", "# print(x.shape)", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "*", "self", ".", "_nodes", "[", "0", "]", ")", "\n", "for", "conv", ",", "skip", "in", "zip", "(", "self", ".", "_convs", ",", "self", ".", "_skips", ")", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "+", "skip", "(", "x", ")", "\n", "# print(x.shape)", "\n", "# x is not (nbatch, nout, *outshape)", "\n", "", "if", "self", ".", "_ndim", "==", "0", ":", "\n", "            ", "x", "=", "x", ".", "reshape", "(", "*", "x", ".", "shape", "[", ":", "2", "]", ")", "\n", "# for name, param in self.named_parameters():", "\n", "#     print(name, param.shape)", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.DENSE01.get_embeddings": [[124, 133], ["dense01.DENSE01._dense"], "methods", ["None"], ["", "def", "get_embeddings", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "self", ".", "_dense", "(", "x", ")", "\n", "\"\"\"x = x.reshape(x.shape[0], *self._nodes[0])\n        for conv, skip in zip(self._convs[:2], self._skips[:2]):\n            x = conv(x) + skip(x)\n            # print(x.shape)\n        x = torch.mean(x, dim=1)\"\"\"", "\n", "# print(x.shape)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.ConvertSize1D.__init__": [[136, 152], ["super().__init__", "len", "len", "torch.nn.Identity", "int", "numpy.round", "dense01.Upsample1D", "torch.nn.Sequential", "dense01.Upsample1D", "dense01.Pad1D"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "s0", ":", "Tuple", "[", "int", ",", "...", "]", ",", "s1", ":", "Tuple", "[", "int", ",", "...", "]", ",", "fill_const", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "s0", ")", "==", "len", "(", "s1", ")", "==", "1", "\n", "\n", "if", "s0", "==", "s1", ":", "\n", "            ", "self", ".", "_module", ":", "torch", ".", "nn", ".", "Module", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "ratio", "=", "int", "(", "np", ".", "round", "(", "s1", "[", "0", "]", "*", "1.0", "/", "s0", "[", "0", "]", ")", ")", "\n", "shrink", "=", "ratio", "*", "s0", "[", "0", "]", "-", "s1", "[", "0", "]", "\n", "if", "shrink", "==", "0", ":", "\n", "                ", "self", ".", "_module", "=", "Upsample1D", "(", "ratio", ",", "fill_const", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_module", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "Upsample1D", "(", "ratio", ",", "fill_const", ")", ",", "\n", "Pad1D", "(", "shrink", "//", "2", ",", "shrink", "-", "shrink", "//", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.ConvertSize1D.forward": [[154, 156], ["dense01.ConvertSize1D._module"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.Upsample1D.__init__": [[159, 166], ["super().__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nr", ":", "int", "=", "2", ",", "fill_const", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nr", "=", "nr", "\n", "self", ".", "repeats", "=", "(", "1", ",", "1", ",", "1", ",", "nr", ")", "\n", "self", ".", "fill_const", "=", "fill_const", "\n", "if", "fill_const", ":", "\n", "            ", "self", ".", "const", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.Upsample1D.forward": [[167, 174], ["x.unsqueeze().repeat().view", "torch.nn.functional.pad().view", "x.unsqueeze().repeat", "torch.nn.functional.pad", "x.unsqueeze", "x.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NeuralODE.pad"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "yshape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "if", "not", "self", ".", "fill_const", ":", "\n", "            ", "return", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "*", "self", ".", "repeats", ")", ".", "view", "(", "yshape", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "-", "self", ".", "const", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", ",", "(", "0", ",", "self", ".", "nr", "-", "1", ")", ")", ".", "view", "(", "yshape", ")", "+", "self", ".", "const", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.Pad1D.__init__": [[177, 184], ["super().__init__", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nl", ":", "int", "=", "1", ",", "nr", ":", "int", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "nl", "+", "nr", "==", "0", ":", "\n", "            ", "self", ".", "module", ":", "Union", "[", "torch", ".", "nn", ".", "Module", ",", "Callable", "[", "[", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", "]", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "module", "=", "lambda", "x", ":", "x", "[", ":", ",", ":", ",", "nl", ":", "-", "nr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.Pad1D.forward": [[185, 187], ["dense01.Pad1D.module"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.ConvertSize2D.__init__": [[190, 206], ["super().__init__", "torch.nn.Identity", "int", "dense01.Upsample2D", "torch.nn.Sequential", "numpy.round", "range", "range", "dense01.Upsample2D", "dense01.Pad2D", "len", "len"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "s0", ":", "Tuple", "[", "int", ",", "...", "]", ",", "s1", ":", "Tuple", "[", "int", ",", "...", "]", ",", "fill_const", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "s0", "==", "s1", ":", "\n", "            ", "self", ".", "module", ":", "torch", ".", "nn", ".", "Module", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "ratio", "=", "[", "int", "(", "np", ".", "round", "(", "s1", "[", "i", "]", "*", "1.0", "/", "s0", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "s0", ")", ")", "]", "\n", "shrink", "=", "[", "ratio", "[", "i", "]", "*", "s0", "[", "i", "]", "-", "s1", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "s0", ")", ")", "]", "\n", "if", "shrink", "[", "0", "]", "==", "0", "and", "shrink", "[", "1", "]", "==", "0", ":", "\n", "                ", "self", ".", "module", "=", "Upsample2D", "(", "ratio", "[", "0", "]", ",", "ratio", "[", "1", "]", ",", "fill_const", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "module", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "Upsample2D", "(", "ratio", "[", "0", "]", ",", "ratio", "[", "1", "]", ",", "fill_const", ")", ",", "\n", "Pad2D", "(", "shrink", "[", "0", "]", "//", "2", ",", "shrink", "[", "0", "]", "-", "shrink", "[", "0", "]", "//", "2", ",", "\n", "shrink", "[", "1", "]", "//", "2", ",", "shrink", "[", "1", "]", "-", "shrink", "[", "1", "]", "//", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.ConvertSize2D.forward": [[208, 210], ["dense01.ConvertSize2D.module"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.Upsample2D.__init__": [[213, 224], ["super().__init__", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nr1", ":", "int", "=", "2", ",", "nr2", ":", "int", "=", "2", ",", "fill_const", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nr1", "=", "nr1", "\n", "self", ".", "nr2", "=", "nr2", "\n", "self", ".", "repeats2", "=", "(", "1", ",", "1", ",", "1", ",", "1", ",", "nr2", ")", "\n", "self", ".", "repeats1", "=", "(", "1", ",", "1", ",", "1", ",", "nr1", ",", "1", ")", "\n", "self", ".", "repeats", "=", "(", "1", ",", "1", ",", "1", ",", "nr1", ",", "1", ",", "nr2", ")", "\n", "self", ".", "pads", "=", "(", "0", ",", "self", ".", "nr2", "-", "1", ",", "0", ",", "0", ",", "0", ",", "self", ".", "nr1", "-", "1", ")", "\n", "self", ".", "fill_const", "=", "fill_const", "\n", "if", "fill_const", ":", "\n", "            ", "self", ".", "const", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.Upsample2D.forward": [[225, 234], ["x.unsqueeze().unsqueeze().repeat().view", "torch.nn.functional.pad().view", "x.unsqueeze().unsqueeze().repeat", "torch.nn.functional.pad", "x.unsqueeze().unsqueeze", "x.unsqueeze().unsqueeze", "x.unsqueeze", "x.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NeuralODE.pad"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "# yshape_horz = (x.shape[0], x.shape[1], x.shape[2], x.shape[3] * self.nr2)", "\n", "        ", "yshape_out", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", "*", "self", ".", "nr1", ",", "x", ".", "shape", "[", "3", "]", "*", "self", ".", "nr2", ")", "\n", "if", "not", "self", ".", "fill_const", ":", "\n", "            ", "return", "x", ".", "unsqueeze", "(", "-", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "*", "self", ".", "repeats", ")", ".", "view", "(", "yshape_out", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "-", "self", ".", "const", "\n", "y", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "x", ".", "unsqueeze", "(", "-", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "self", ".", "pads", ")", ".", "view", "(", "yshape_out", ")", "\n", "return", "y", "+", "self", ".", "const", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.Pad2D.__init__": [[237, 248], ["super().__init__", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nl1", ":", "int", "=", "1", ",", "nr1", ":", "int", "=", "1", ",", "nl2", ":", "int", "=", "1", ",", "nr2", ":", "int", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "nl1", "==", "0", "and", "nl2", "==", "0", "and", "nr1", "==", "0", "and", "nr2", "==", "0", ":", "\n", "            ", "self", ".", "module", ":", "Union", "[", "torch", ".", "nn", ".", "Module", ",", "Callable", "[", "[", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", "]", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "nl1", "==", "0", "and", "nr1", "==", "0", ":", "\n", "            ", "self", ".", "module", "=", "lambda", "x", ":", "x", "[", ":", ",", ":", ",", ":", ",", "nl2", ":", "-", "nr2", "]", "\n", "", "elif", "nl2", "==", "0", "and", "nr2", "==", "0", ":", "\n", "            ", "self", ".", "module", "=", "lambda", "x", ":", "x", "[", ":", ",", ":", ",", "nl1", ":", "-", "nr1", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "module", "=", "lambda", "x", ":", "x", "[", ":", ",", ":", ",", "nl1", ":", "-", "nr1", ",", "nl2", ":", "-", "nr2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.Pad2D.forward": [[249, 251], ["dense01.Pad2D.module"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.ConvertChannel.__init__": [[254, 270], ["super().__init__", "torch.nn.Identity", "NotImplementedError", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c0", ",", "c1", ",", "ndim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "c0", "==", "c1", ":", "\n", "            ", "self", ".", "module", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "c0", ">", "c1", ":", "\n", "            ", "if", "ndim", "==", "1", ":", "\n", "                ", "self", ".", "module", "=", "lambda", "x", ":", "x", "[", ":", ",", ":", "c1", ",", ":", "]", "\n", "", "elif", "ndim", "==", "2", ":", "\n", "                ", "self", ".", "module", "=", "lambda", "x", ":", "x", "[", ":", ",", ":", "c1", ",", ":", ",", ":", "]", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "                ", "self", ".", "module", "=", "lambda", "x", ":", "x", "[", ":", ",", ":", "c1", ",", ":", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Invalid ndim: %d\"", "%", "ndim", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Upping the channels is not implemented yet\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.ConvertChannel.forward": [[271, 273], ["dense01.ConvertChannel.module"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.DCTHybrid.__init__": [[304, 308], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_alpha", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "1.0", ")", ")", "\n", "self", ".", "_beta", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.DCTHybrid.forward": [[309, 312], ["dense01.dct"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.dct"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "xd", "=", "dct", "(", "x", ",", "norm", "=", "\"ortho\"", ")", "\n", "return", "self", ".", "_alpha", "*", "x", "+", "self", ".", "_beta", "*", "xd", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.dct": [[275, 301], ["x.contiguous().view.contiguous().view", "torch.cat", "torch.fft.fft", "torch.cos", "torch.sin", "V.view", "x.contiguous().view.contiguous", "x[].flip", "numpy.sqrt", "numpy.sqrt", "torch.arange"], "function", ["None"], ["", "", "def", "dct", "(", "x", ":", "torch", ".", "Tensor", ",", "norm", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Discrete Cosine Transform, Type II (a.k.a. the DCT)\n    For the meaning of the parameter `norm`, see:\n    https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.fftpack.dct.html\n    :param x: the input signal\n    :param norm: the normalization, None or 'ortho'\n    :return: the DCT-II of the signal over the last dimension\n    \"\"\"", "\n", "x_shape", "=", "x", ".", "shape", "\n", "N", "=", "x_shape", "[", "-", "1", "]", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "N", ")", "\n", "\n", "v", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", ":", "2", "]", ",", "x", "[", ":", ",", "1", ":", ":", "2", "]", ".", "flip", "(", "[", "1", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "Vc", "=", "torch", ".", "fft", ".", "fft", "(", "v", ",", "dim", "=", "-", "1", ")", "\n", "\n", "k", "=", "-", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "[", "None", ",", ":", "]", "*", "np", ".", "pi", "/", "(", "2", "*", "N", ")", "\n", "W_r", "=", "torch", ".", "cos", "(", "k", ")", "\n", "W_i", "=", "torch", ".", "sin", "(", "k", ")", "\n", "V", "=", "Vc", ".", "real", "*", "W_r", "-", "Vc", ".", "imag", "*", "W_i", "\n", "if", "norm", "==", "'ortho'", ":", "\n", "        ", "V", "[", ":", ",", "0", "]", "/=", "np", ".", "sqrt", "(", "N", ")", "*", "2", "\n", "V", "[", ":", ",", "1", ":", "]", "/=", "np", ".", "sqrt", "(", "N", "/", "2", ")", "*", "2", "\n", "", "V", "=", "2", "*", "V", ".", "view", "(", "*", "x_shape", ")", "\n", "return", "V", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.dense01.generate_shape": [[314, 337], ["int", "int", "range", "res.pop", "numpy.ceil", "bin", "len", "int", "len", "res.append", "len", "numpy.log2", "len", "len"], "function", ["None"], ["", "", "def", "generate_shape", "(", "s", ":", "int", ",", "n", ":", "int", ")", "->", "List", "[", "int", "]", ":", "\n", "# generate the shape for the intermediate values", "\n", "    ", "s", "=", "int", "(", "s", ")", "\n", "# get the lowest 2^p not lower than s", "\n", "p", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "log2", "(", "s", ")", ")", ")", "\n", "p2", "=", "2", "**", "p", "\n", "sp", "=", "p2", "-", "s", "\n", "binsp", "=", "bin", "(", "sp", ")", "[", "2", ":", "]", "\n", "if", "len", "(", "binsp", ")", "<", "p", ":", "\n", "        ", "binsp", "=", "\"0\"", "*", "(", "p", "-", "len", "(", "binsp", ")", ")", "+", "binsp", "\n", "", "binsp_list", "=", "[", "int", "(", "c", ")", "for", "c", "in", "binsp", "]", "\n", "res", "=", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "binsp_list", ")", ")", ":", "\n", "        ", "r", "=", "res", "[", "-", "1", "]", "*", "2", "\n", "if", "binsp_list", "[", "i", "]", ":", "\n", "            ", "r", "=", "r", "-", "1", "\n", "", "res", ".", "append", "(", "r", ")", "\n", "", "res", ".", "pop", "(", "0", ")", "\n", "if", "len", "(", "res", ")", ">=", "n", ":", "\n", "        ", "res", "=", "res", "[", "-", "n", ":", "]", "\n", "", "else", ":", "\n", "        ", "res", "=", "[", "res", "[", "0", "]", "]", "*", "(", "n", "-", "len", "(", "res", ")", ")", "+", "res", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.train.random_sampling": [[17, 81], ["parser.read", "h5py.File", "h5py.File.close", "numpy.array", "models.dense01.DENSE01", "algs.random_sample.RandomSample", "random_sampling.ask_normalized", "pytorch_lightning.loggers.TensorBoardLogger", "random_sampling.tell_normalized", "models.dense01.DENSE01", "train._shrink_perturb", "str"], "function", ["home.repos.pwc.inspect_result.machine-discovery_research.algs.coreset_sample.CoreSetSample.ask_normalized", "home.repos.pwc.inspect_result.machine-discovery_research.algs.coreset_sample.CoreSetSample.tell_normalized", "home.repos.pwc.inspect_result.machine-discovery_research.models.train._shrink_perturb"], ["def", "random_sampling", "(", "ninps", ":", "int", ",", "\n", "nout", ":", "int", ",", "\n", "outshape", ":", "Sequence", "[", "int", "]", ",", "\n", "total_pool_size", ":", "int", ",", "\n", "jobids", ":", "np", ".", "ndarray", ",", "\n", "budget", ":", "int", ",", "\n", "warm_start", ":", "bool", "=", "False", ",", "\n", "shrink_perturb", ":", "bool", "=", "False", ",", "\n", "shrink_by", ":", "Optional", "[", "float", "]", "=", "0.5", ",", "\n", "perturb_by", ":", "Optional", "[", "float", "]", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"\n    :param ninps: number of input parameters of the emulator\n    :param nout: number of outputs of the emulator, i.e. the 'depth'\n    :param outshape: number of dimensions of the emulator output, e.g. 1D or 2D\n    :param nb_val: size of validation data\n    :param total_pool_size: size of the total pool of labelled and unlabelled samples\n    :param jobids: list of job ids\n    :param model: simulator\n    :param budget: number of datapoints to be selected, same for all iterations\n    :param vis_depth: the output 'depth' to visualise (not actually used)\n    :param warm_start: if True, the emulator is warm started in new iterations\n    :param shrink_perturb: if True (and warm_start is also set to True),\n                           shrink and perturb trick is used in warm start\n    :param shrink_by: if shrink_perturb is set to True, the parameters (weights) are\n                      shrunk by a the fraction given here\n    :param perturb_by: if shrink_perturb is set to True, the parameters (weights) are\n                       perturbed by Gaussian noise with standard deviation given here\n    \"\"\"", "\n", "parser", ".", "read", "(", "'./config/config.ini'", ")", "\n", "\n", "h5f", "=", "h5py", ".", "File", "(", "'./data/shuffled_data.h5'", ",", "'r'", ")", "\n", "x", ":", "np", ".", "ndarray", "=", "h5f", "[", "'train_input'", "]", "[", ":", "]", "\n", "x_val", ":", "np", ".", "ndarray", "=", "h5f", "[", "'val_input'", "]", "[", ":", "]", "\n", "h5f", ".", "close", "(", ")", "\n", "\n", "x_train_idx", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "if", "warm_start", ":", "\n", "        ", "emulator", ":", "torch", ".", "nn", ".", "Module", "=", "DENSE01", "(", "ninps", "=", "ninps", ",", "nout", "=", "nout", ",", "outshape", "=", "outshape", ")", "\n", "", "for", "jobid", "in", "jobids", ":", "\n", "        ", "if", "not", "warm_start", ":", "\n", "# retrain the emulator from scratch in each jobid", "\n", "            ", "emulator", "=", "DENSE01", "(", "ninps", "=", "ninps", ",", "nout", "=", "nout", ",", "outshape", "=", "outshape", ")", "\n", "", "random_sampling", ":", "RandomSample", "=", "RandomSample", "(", "nsamples", "=", "budget", ",", "\n", "ndim", "=", "ninps", ",", "\n", "total_pool_size", "=", "total_pool_size", ",", "\n", "selected_x", "=", "x_train_idx", ")", "\n", "\n", "# sampling (ask is the acquisition function)", "\n", "x_train_idx", "=", "random_sampling", ".", "ask_normalized", "(", "jobid", "=", "jobid", ")", "\n", "x_train", ":", "np", ".", "ndarray", "=", "x", "[", "x_train_idx", ",", "...", "]", "\n", "\n", "# train the emulator, return the model so that output can be tested", "\n", "logger", ":", "TensorBoardLogger", "=", "TensorBoardLogger", "(", "save_dir", "=", "parser", "[", "'hparams'", "]", "[", "'log_dir'", "]", ",", "\n", "version", "=", "parser", "[", "'hparams'", "]", "[", "'rs_log_name'", "]", "+", "str", "(", "jobid", "+", "1", ")", ",", "\n", "name", "=", "parser", "[", "'hparams'", "]", "[", "'sim_model'", "]", ",", "\n", "default_hp_metric", "=", "False", ")", "\n", "emulator", "=", "random_sampling", ".", "tell_normalized", "(", "emulator", "=", "emulator", ",", "\n", "x_train", "=", "x_train", ",", "\n", "x_val", "=", "x_val", ",", "\n", "jobid", "=", "jobid", ",", "\n", "logger_name", "=", "logger", ")", "\n", "\n", "if", "warm_start", "and", "shrink_perturb", ":", "\n", "            ", "emulator", "=", "_shrink_perturb", "(", "emulator", ",", "shrink_by", ",", "perturb_by", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.train.coreset_sampling": [[83, 151], ["parser.read", "h5py.File", "h5py.File.close", "models.dense01.DENSE01", "train.get_latent_embedding", "algs.coreset_sample.CoreSetSample", "algs.coreset_sample.CoreSetSample.ask_normalized", "pytorch_lightning.loggers.TensorBoardLogger", "algs.coreset_sample.CoreSetSample.tell_normalized", "train.get_latent_embedding", "models.dense01.DENSE01", "str", "train._shrink_perturb"], "function", ["home.repos.pwc.inspect_result.machine-discovery_research.models.train.get_latent_embedding", "home.repos.pwc.inspect_result.machine-discovery_research.algs.coreset_sample.CoreSetSample.ask_normalized", "home.repos.pwc.inspect_result.machine-discovery_research.algs.coreset_sample.CoreSetSample.tell_normalized", "home.repos.pwc.inspect_result.machine-discovery_research.models.train.get_latent_embedding", "home.repos.pwc.inspect_result.machine-discovery_research.models.train._shrink_perturb"], ["", "", "", "def", "coreset_sampling", "(", "total_pool_size", ":", "int", ",", "\n", "ninps", ":", "int", ",", "\n", "nout", ":", "int", ",", "\n", "outshape", ":", "Sequence", "[", "int", "]", ",", "\n", "jobids", ":", "np", ".", "ndarray", ",", "\n", "budget", ":", "int", "=", "500", ",", "\n", "warm_start", ":", "bool", "=", "False", ",", "\n", "shrink_perturb", ":", "bool", "=", "False", ",", "\n", "shrink_by", ":", "Optional", "[", "float", "]", "=", "0.5", ",", "\n", "perturb_by", ":", "Optional", "[", "float", "]", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"\n    :param total_pool_size: size of the total pool of labelled and unlabelled samples\n    :param ninps: number of input parameters of the emulator\n    :param nout: number of outputs of the emulator, i.e. the 'depth'\n    :param outshape: number of dimensions of the emulator output, e.g. 1D or 2D\n    :param nb_val: size of validation data\n    :param jobids: list of job ids\n    :param model: simulator\n    :param budget: size of new batch of samples in each iteration, set init_pool_size=budget here\n    :param vis_depth: the output 'depth' to visualise (not actually used)\n    :param warm_start: if True, the emulator is warm started in new iterations\n    :param shrink_perturb: if True (and warm_start is also set to True),\n                           shrink and perturb trick is used in warm start\n    :param shrink_by: if shrink_perturb is set to True, the parameters (weights) are\n                      shrunk by a the fraction given here\n    :param perturb_by: if shrink_perturb is set to True, the parameters (weights) are\n                       perturbed by Gaussian noise with standard deviation given here\n    \"\"\"", "\n", "parser", ".", "read", "(", "'./config/config.ini'", ")", "\n", "\n", "h5f", "=", "h5py", ".", "File", "(", "'./data/shuffled_data.h5'", ",", "'r'", ")", "\n", "x", ":", "np", ".", "ndarray", "=", "h5f", "[", "'train_input'", "]", "[", ":", "]", "\n", "x_val", ":", "np", ".", "ndarray", "=", "h5f", "[", "'val_input'", "]", "[", ":", "]", "\n", "h5f", ".", "close", "(", ")", "\n", "\n", "# retrain the emulator from scratch in each jobid", "\n", "emulator", ":", "torch", ".", "nn", ".", "Module", "=", "DENSE01", "(", "ninps", "=", "ninps", ",", "nout", "=", "nout", ",", "outshape", "=", "outshape", ")", "\n", "# extract x_embedding from emulator", "\n", "x_embedding", "=", "get_latent_embedding", "(", "emulator", ",", "x", ")", "\n", "\n", "x_train_idx", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", "\n", "\n", "for", "jobid", "in", "jobids", ":", "\n", "# sampling (ask is the acquisition function)", "\n", "        ", "coreset_sampling", "=", "CoreSetSample", "(", "x_embedding", ",", "budget", "=", "budget", ",", "t_idx", "=", "x_train_idx", ",", "init_pool_size", "=", "budget", ")", "\n", "# x_train is the input, not the middle layer representation", "\n", "x_train_idx", "=", "coreset_sampling", ".", "ask_normalized", "(", "jobid", "=", "jobid", ")", "\n", "x_train", ":", "np", ".", "ndarray", "=", "x", "[", "x_train_idx", ",", "...", "]", "\n", "\n", "# train the emulator from scratch, return the model so that output can be tested", "\n", "logger", ":", "TensorBoardLogger", "=", "TensorBoardLogger", "(", "save_dir", "=", "parser", "[", "'hparams'", "]", "[", "'log_dir'", "]", ",", "\n", "version", "=", "parser", "[", "'hparams'", "]", "[", "'cs_log_name'", "]", "+", "str", "(", "jobid", "+", "1", ")", ",", "\n", "name", "=", "parser", "[", "'hparams'", "]", "[", "'sim_model'", "]", ",", "\n", "default_hp_metric", "=", "False", ")", "\n", "emulator", "=", "coreset_sampling", ".", "tell_normalized", "(", "emulator", "=", "emulator", ",", "\n", "x_train", "=", "x_train", ",", "\n", "x_val", "=", "x_val", ",", "\n", "jobid", "=", "jobid", ",", "\n", "logger_name", "=", "logger", ")", "\n", "\n", "if", "jobid", "<", "jobids", "[", "-", "1", "]", ":", "\n", "            ", "x_embedding", "=", "get_latent_embedding", "(", "emulator", ",", "x", ")", "\n", "# create a new emulator instance to override the old one to retrain from scratch in the next iteration", "\n", "if", "not", "warm_start", ":", "\n", "                ", "emulator", "=", "DENSE01", "(", "ninps", "=", "ninps", ",", "nout", "=", "nout", ",", "outshape", "=", "outshape", ")", "\n", "", "else", ":", "\n", "                ", "if", "shrink_perturb", ":", "\n", "                    ", "emulator", "=", "_shrink_perturb", "(", "emulator", ",", "shrink_by", ",", "perturb_by", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.train._shrink_perturb": [[153, 159], ["torch.no_grad", "emulator.parameters", "param.add_", "param.add_", "torch.randn", "param.size"], "function", ["None"], ["", "", "", "", "", "def", "_shrink_perturb", "(", "emulator", ",", "shrink_scale", ",", "noise_scale", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "param", "in", "emulator", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "add_", "(", "-", "param", "*", "shrink_scale", ")", "\n", "param", ".", "add_", "(", "torch", ".", "randn", "(", "param", ".", "size", "(", ")", ")", "*", "noise_scale", ")", "\n", "", "", "return", "emulator", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.train.get_latent_embedding": [[160, 182], ["parser.read", "models.litmodel.DENSEDataModule", "models.litmodel.LitModel", "pytorch_lightning.Trainer", "tqdm.tqdm", "torch.stack().detach().numpy", "range", "pl.Trainer.predict", "x_embedding.append", "numpy.mean", "int", "int", "int", "torch.Tensor", "torch.stack().detach", "torch.stack"], "function", ["None"], ["", "def", "get_latent_embedding", "(", "emulator", ":", "torch", ".", "nn", ".", "Module", ",", "x_all", ":", "np", ".", "ndarray", ",", "avg", "=", "True", ")", ":", "\n", "# extract embeddings from emulator, could be final layer output depending on emulator forward", "\n", "# in LitModel", "\n", "    ", "parser", ".", "read", "(", "'./config/config.ini'", ")", "\n", "data_module", "=", "DENSEDataModule", "(", "x_pred", "=", "x_all", ",", "\n", "inference_batch_size", "=", "int", "(", "parser", "[", "'hparams'", "]", "[", "'inference_batch_size'", "]", ")", ",", "\n", "predict", "=", "True", ")", "\n", "dense_model", "=", "LitModel", "(", "emulator", ")", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "gpus", "=", "int", "(", "parser", "[", "'hparams'", "]", "[", "'nb_gpus'", "]", ")", ",", "logger", "=", "False", ",", "accelerator", "=", "'ddp'", ")", "\n", "\n", "x_embedding", ":", "List", "=", "[", "]", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "int", "(", "parser", "[", "'hparams'", "]", "[", "'npass'", "]", ")", ")", ")", ":", "\n", "        ", "out", "=", "trainer", ".", "predict", "(", "model", "=", "dense_model", ",", "datamodule", "=", "data_module", ",", "return_predictions", "=", "True", ")", "\n", "assert", "out", "is", "not", "None", "\n", "out", "=", "[", "item", "for", "sublist", "in", "out", "for", "item", "in", "sublist", "]", "\n", "x_embedding", ".", "append", "(", "torch", ".", "Tensor", "(", "out", ")", ")", "\n", "", "res", ":", "np", ".", "ndarray", "=", "torch", ".", "stack", "(", "[", "*", "x_embedding", "]", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "avg", "is", "False", ":", "\n", "        ", "return", "res", "\n", "", "else", ":", "\n", "        ", "res", "=", "np", ".", "mean", "(", "res", ",", "axis", "=", "0", ")", "\n", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.__init__": [[13, 18], ["pytorch_lightning.LightningModule.__init__", "configparser.ConfigParser", "litmodel.LitModel.parser.read"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "parser", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "self", ".", "parser", ".", "read", "(", "'./config/config.ini'", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.forward": [[19, 21], ["litmodel.LitModel.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "backbone", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.huber_loss": [[22, 25], ["torch.nn.L1Loss", "torch.nn.L1Loss."], "methods", ["None"], ["", "def", "huber_loss", "(", "self", ",", "y_hat", ",", "y", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'mean'", ")", "\n", "return", "loss", "(", "y_hat", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.on_train_start": [[26, 42], ["litmodel.LitModel.logger.log_hyperparams", "float", "int", "int", "int", "int", "int", "int", "int", "int", "float", "float", "float", "int"], "methods", ["None"], ["", "def", "on_train_start", "(", "self", ")", ":", "\n", "        ", "hparams", "=", "{", "'hp/lr'", ":", "float", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'lr'", "]", ")", ",", "\n", "'hp/nb_epoch'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'nb_epoch'", "]", ")", ",", "\n", "'hp/nb_gpus'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'nb_gpus'", "]", ")", ",", "\n", "'hp/batch_size'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'batch_size'", "]", ")", ",", "\n", "'hp/inference_batch_size'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'inference_batch_size'", "]", ")", ",", "\n", "'hp/total_pool_size'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'total_pool_size'", "]", ")", ",", "\n", "'hp/budget'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'budget'", "]", ")", ",", "\n", "'hp/init_train_seed'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'init_train_seed'", "]", ")", ",", "\n", "'hp/early_stopping_patience'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'early_stopping_patience'", "]", ")", ",", "\n", "'hp/gradient_clip_val'", ":", "float", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'gradient_clip_val'", "]", ")", ",", "\n", "'hp/shrink_by'", ":", "float", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'shrink_by'", "]", ")", ",", "\n", "'hp/perturb_by'", ":", "float", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'perturb_by'", "]", ")", ",", "\n", "'hp/check_val_every_n_epoch'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'check_val_every_n_epoch'", "]", ")", "}", "\n", "\n", "self", ".", "logger", ".", "log_hyperparams", "(", "self", ".", "hparams", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.predict_step": [[43, 54], ["litmodel.LitModel.backbone.train", "litmodel.LitModel.backbone", "litmodel.LitModel.all_gather", "y.reshape.reshape.reshape", "torch.cat().reshape", "y.reshape.reshape.reshape", "y.reshape.reshape.detach().cpu().tolist", "torch.cat", "y.reshape.reshape.detach().cpu", "y.reshape.reshape.detach", "range"], "methods", ["None"], ["", "def", "predict_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "        ", "self", ".", "backbone", ".", "train", "(", ")", "# temporary solution to enable dropout at prediction", "\n", "x", "=", "batch", "\n", "y", "=", "self", ".", "backbone", "(", "x", ")", "\n", "y", "=", "self", ".", "all_gather", "(", "y", ")", "\n", "gpu_n", ",", "batch_n", ",", "out_n", ",", "outshape_n", "=", "y", ".", "shape", "\n", "y", "=", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", "[", "i", ",", "...", "]", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "y", ".", "shape", "[", "-", "1", "]", ")", "\n", "y", "=", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "out_n", ",", "outshape_n", ")", "\n", "# need to store in cpu otherwise CUDA OOM", "\n", "return", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.training_step": [[55, 61], ["litmodel.LitModel.backbone", "litmodel.LitModel.huber_loss", "litmodel.LitModel.log"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.huber_loss"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", ".", "backbone", "(", "x", ")", "\n", "loss", "=", "self", ".", "huber_loss", "(", "y_hat", ",", "y", ")", "\n", "self", ".", "log", "(", "'train_loss'", ",", "loss", ",", "on_step", "=", "False", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "sync_dist", "=", "True", ")", "\n", "return", "{", "'loss'", ":", "loss", ",", "'y'", ":", "y", ",", "'y_hat'", ":", "y_hat", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.training_epoch_end": [[62, 101], ["litmodel.LitModel.all_gather", "y.reshape.reshape.reshape", "torch.cat().reshape", "y.reshape.reshape.reshape", "litmodel.LitModel.all_gather", "y_hat.reshape.reshape.reshape", "torch.cat().reshape", "y_hat.reshape.reshape.reshape", "y_hat[].detach().cpu().numpy", "y[].detach().cpu().numpy", "range", "litmodel.LitModel.logger.experiment.add_figure", "y_hat[].detach().cpu().numpy", "y[].detach().cpu().numpy", "range", "litmodel.LitModel.logger.experiment.add_figure", "int", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.close", "figs.append", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.close", "figs.append", "torch.cat", "torch.cat", "y_hat[].detach().cpu", "y[].detach().cpu", "y_hat[].detach().cpu", "y[].detach().cpu", "y_hat[].detach", "y[].detach", "y_hat[].detach", "y[].detach", "range", "range"], "methods", ["None"], ["", "def", "training_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "if", "self", ".", "current_epoch", "%", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'log_plot'", "]", ")", "==", "0", ":", "\n", "            ", "loss", ",", "y", ",", "y_hat", "=", "outputs", "[", "-", "1", "]", "[", "'loss'", "]", ",", "outputs", "[", "-", "1", "]", "[", "'y'", "]", ",", "outputs", "[", "-", "1", "]", "[", "'y_hat'", "]", "\n", "\n", "y", "=", "self", ".", "all_gather", "(", "y", ")", "\n", "gpu_n", ",", "batch_n", ",", "out_n", ",", "outshape_n", "=", "y", ".", "shape", "\n", "y", "=", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", "[", "i", ",", "...", "]", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "y", ".", "shape", "[", "-", "1", "]", ")", "\n", "y", "=", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "out_n", ",", "outshape_n", ")", "\n", "\n", "y_hat", "=", "self", ".", "all_gather", "(", "y_hat", ")", "\n", "gpu_n", ",", "batch_n", ",", "out_n", ",", "outshape_n", "=", "y_hat", ".", "shape", "\n", "y_hat", "=", "y_hat", ".", "reshape", "(", "y_hat", ".", "shape", "[", "0", "]", ",", "y_hat", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "y_hat", "=", "torch", ".", "cat", "(", "[", "y_hat", "[", "i", ",", "...", "]", "for", "i", "in", "range", "(", "y_hat", ".", "shape", "[", "0", "]", ")", "]", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "y_hat", ".", "shape", "[", "-", "1", "]", ")", "\n", "y_hat", "=", "y_hat", ".", "reshape", "(", "y_hat", ".", "shape", "[", "0", "]", ",", "out_n", ",", "outshape_n", ")", "\n", "\n", "img", "=", "y_hat", "[", "-", "1", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "true_img", "=", "y", "[", "-", "1", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "figs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "img", "[", "i", "]", ",", "label", "=", "'prediction'", ")", "\n", "plt", ".", "plot", "(", "true_img", "[", "i", "]", ",", "label", "=", "'truth'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "figs", ".", "append", "(", "fig", ")", "\n", "", "self", ".", "logger", ".", "experiment", ".", "add_figure", "(", "'training sample 1'", ",", "figs", ",", "self", ".", "current_epoch", ")", "\n", "\n", "img", "=", "y_hat", "[", "-", "2", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "true_img", "=", "y", "[", "-", "2", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "figs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "img", "[", "i", "]", ",", "label", "=", "'prediction'", ")", "\n", "plt", ".", "plot", "(", "true_img", "[", "i", "]", ",", "label", "=", "'truth'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "figs", ".", "append", "(", "fig", ")", "\n", "", "self", ".", "logger", ".", "experiment", ".", "add_figure", "(", "'training sample 2'", ",", "figs", ",", "self", ".", "current_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.validation_step": [[102, 110], ["litmodel.LitModel.backbone", "litmodel.LitModel.huber_loss", "litmodel.LitModel.log", "litmodel.LitModel.log"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.huber_loss"], ["", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", ".", "backbone", "(", "x", ")", "\n", "loss", "=", "self", ".", "huber_loss", "(", "y_hat", ",", "y", ")", "\n", "\n", "self", ".", "log", "(", "'step'", ",", "self", ".", "trainer", ".", "current_epoch", ",", "sync_dist", "=", "True", ")", "# change x-axis from step to epoch", "\n", "self", ".", "log", "(", "'val_loss'", ",", "loss", ",", "on_step", "=", "False", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "sync_dist", "=", "True", ")", "\n", "return", "loss", ",", "y", ",", "y_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.validation_epoch_end": [[111, 150], ["litmodel.LitModel.all_gather", "y.reshape.reshape.reshape", "torch.cat().reshape", "y.reshape.reshape.reshape", "litmodel.LitModel.all_gather", "y_hat.reshape.reshape.reshape", "torch.cat().reshape", "y_hat.reshape.reshape.reshape", "y_hat[].detach().cpu().numpy", "y[].detach().cpu().numpy", "range", "litmodel.LitModel.logger.experiment.add_figure", "y_hat[].detach().cpu().numpy", "y[].detach().cpu().numpy", "range", "litmodel.LitModel.logger.experiment.add_figure", "int", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.close", "figs.append", "matplotlib.figure", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.close", "figs.append", "torch.cat", "torch.cat", "y_hat[].detach().cpu", "y[].detach().cpu", "y_hat[].detach().cpu", "y[].detach().cpu", "y_hat[].detach", "y[].detach", "y_hat[].detach", "y[].detach", "range", "range"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "if", "self", ".", "current_epoch", "%", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'log_plot'", "]", ")", "==", "0", ":", "\n", "            ", "loss", ",", "y", ",", "y_hat", "=", "outputs", "[", "-", "1", "]", "\n", "\n", "y", "=", "self", ".", "all_gather", "(", "y", ")", "\n", "gpu_n", ",", "batch_n", ",", "out_n", ",", "outshape_n", "=", "y", ".", "shape", "\n", "y", "=", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", "[", "i", ",", "...", "]", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "y", ".", "shape", "[", "-", "1", "]", ")", "\n", "y", "=", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "out_n", ",", "outshape_n", ")", "\n", "\n", "y_hat", "=", "self", ".", "all_gather", "(", "y_hat", ")", "\n", "gpu_n", ",", "batch_n", ",", "out_n", ",", "outshape_n", "=", "y_hat", ".", "shape", "\n", "y_hat", "=", "y_hat", ".", "reshape", "(", "y_hat", ".", "shape", "[", "0", "]", ",", "y_hat", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "y_hat", "=", "torch", ".", "cat", "(", "[", "y_hat", "[", "i", ",", "...", "]", "for", "i", "in", "range", "(", "y_hat", ".", "shape", "[", "0", "]", ")", "]", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "y_hat", ".", "shape", "[", "-", "1", "]", ")", "\n", "y_hat", "=", "y_hat", ".", "reshape", "(", "y_hat", ".", "shape", "[", "0", "]", ",", "out_n", ",", "outshape_n", ")", "\n", "\n", "img", "=", "y_hat", "[", "-", "1", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "true_img", "=", "y", "[", "-", "1", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "figs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "img", "[", "i", "]", ",", "label", "=", "'prediction'", ")", "\n", "plt", ".", "plot", "(", "true_img", "[", "i", "]", ",", "label", "=", "'truth'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "figs", ".", "append", "(", "fig", ")", "\n", "", "self", ".", "logger", ".", "experiment", ".", "add_figure", "(", "'val sample 1'", ",", "figs", ",", "self", ".", "current_epoch", ")", "\n", "\n", "img", "=", "y_hat", "[", "-", "2", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "true_img", "=", "y", "[", "-", "2", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "figs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "img", "[", "i", "]", ",", "label", "=", "'prediction'", ")", "\n", "plt", ".", "plot", "(", "true_img", "[", "i", "]", ",", "label", "=", "'truth'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "figs", ".", "append", "(", "fig", ")", "\n", "", "self", ".", "logger", ".", "experiment", ".", "add_figure", "(", "'val sample 2'", ",", "figs", ",", "self", ".", "current_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.test_step": [[151, 156], ["litmodel.LitModel.backbone", "litmodel.LitModel.huber_loss", "litmodel.LitModel.log"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.huber_loss"], ["", "", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", ".", "backbone", "(", "x", ")", "\n", "loss", "=", "self", ".", "huber_loss", "(", "y_hat", ",", "y", ")", "\n", "self", ".", "log", "(", "'test_loss'", ",", "loss", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "sync_dist", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.LitModel.configure_optimizers": [[157, 160], ["torch.optim.Adam", "litmodel.LitModel.parameters", "float"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "float", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'lr'", "]", ")", ",", "amsgrad", "=", "True", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.DENSEDataset.__init__": [[163, 169], ["torch.Tensor", "torch.Tensor", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "y", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "labelling", ":", "bool", "=", "False", ")", ":", "\n", "        ", "self", ".", "x", ":", "torch", ".", "Tensor", "=", "torch", ".", "Tensor", "(", "x", ")", "\n", "self", ".", "labelling", ":", "bool", "=", "labelling", "\n", "if", "self", ".", "labelling", "is", "False", ":", "\n", "            ", "self", ".", "y", ":", "torch", ".", "Tensor", "=", "torch", ".", "Tensor", "(", "y", ")", "\n", "assert", "len", "(", "self", ".", "x", ")", "==", "len", "(", "self", ".", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.DENSEDataset.__len__": [[170, 172], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.DENSEDataset.__getitem__": [[173, 178], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "labelling", "is", "False", ":", "\n", "            ", "return", "self", ".", "x", "[", "index", "]", ",", "self", ".", "y", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "x", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.DENSEDataModule.__init__": [[181, 216], ["pytorch_lightning.LightningDataModule.__init__", "litmodel.DENSEDataset", "litmodel.DENSEDataset", "h5py.File", "h5py.File.close", "litmodel.DENSEDataset", "litmodel.DENSEDataset", "litmodel.DENSEDataset", "numpy.flatnonzero", "numpy.flatnonzero", "numpy_indexed.contains", "numpy_indexed.contains"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "x_train", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "x_val", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "x_pred", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "inference_batch_size", ":", "int", "=", "64", ",", "\n", "predict", ":", "bool", "=", "False", ",", "\n", "jobid", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "predict", "is", "False", ":", "\n", "            ", "self", ".", "batch_size", ":", "int", "=", "batch_size", "\n", "assert", "x_train", "is", "not", "None", "\n", "self", ".", "x_train", ":", "DENSEDataset", "=", "DENSEDataset", "(", "x_train", ",", "labelling", "=", "True", ")", "\n", "assert", "x_val", "is", "not", "None", "\n", "self", ".", "x_val", ":", "DENSEDataset", "=", "DENSEDataset", "(", "x_val", ",", "labelling", "=", "True", ")", "\n", "\n", "h5f", "=", "h5py", ".", "File", "(", "'./data/shuffled_data.h5'", ",", "'r'", ")", "\n", "input_train", ":", "np", ".", "ndarray", "=", "h5f", "[", "'train_input'", "]", "[", ":", "]", "\n", "output_train", ":", "np", ".", "ndarray", "=", "h5f", "[", "'train_output'", "]", "[", ":", "]", "\n", "y_val", ":", "np", ".", "ndarray", "=", "h5f", "[", "'val_output'", "]", "[", ":", "]", "\n", "h5f", ".", "close", "(", ")", "\n", "\n", "y_train", "=", "output_train", "[", "np", ".", "flatnonzero", "(", "npi", ".", "contains", "(", "x_train", ",", "input_train", ")", ")", "]", "\n", "x_train", "=", "input_train", "[", "np", ".", "flatnonzero", "(", "npi", ".", "contains", "(", "x_train", ",", "input_train", ")", ")", "]", "\n", "\n", "assert", "x_train", "is", "not", "None", "and", "y_train", "is", "not", "None", "\n", "self", ".", "train_data", ":", "DENSEDataset", "=", "DENSEDataset", "(", "x_train", ",", "y_train", ",", "labelling", "=", "False", ")", "\n", "assert", "x_val", "is", "not", "None", "\n", "self", ".", "val_data", ":", "DENSEDataset", "=", "DENSEDataset", "(", "x_val", ",", "y_val", ",", "labelling", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "inference_batch_size", ":", "int", "=", "inference_batch_size", "\n", "assert", "x_pred", "is", "not", "None", "\n", "self", ".", "pred_data", ":", "DENSEDataset", "=", "DENSEDataset", "(", "x_pred", ",", "labelling", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.DENSEDataModule.train_dataloader": [[217, 219], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "", "def", "train_dataloader", "(", "self", ")", "->", "DataLoader", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "train_data", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.DENSEDataModule.val_dataloader": [[220, 223], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", "->", "DataLoader", ":", "\n", "# return DataLoader(self.val_data, batch_size=self.batch_size)", "\n", "        ", "return", "DataLoader", "(", "self", ".", "val_data", ",", "batch_size", "=", "3000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.models.litmodel.DENSEDataModule.predict_dataloader": [[224, 226], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "predict_dataloader", "(", "self", ")", "->", "DataLoader", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "pred_data", ",", "batch_size", "=", "self", ".", "inference_batch_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.MLP.__init__": [[15, 31], ["super().__init__", "torch.nn.Linear", "layers.append", "layers.append", "range", "torch.nn.Linear", "layers.append", "torch.nn.Sequential", "len", "torch.nn.Linear", "layers.append", "layers.append"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ninp", ":", "int", ",", "nout", ":", "int", ",", "ndepths", ":", "int", ",", "nhidden", ":", "int", ",", "activation", ":", "List", "[", "torch", ".", "nn", ".", "Module", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "activation", ")", "==", "ndepths", "-", "1", "\n", "layers", ":", "List", "[", "torch", ".", "nn", ".", "Module", "]", "=", "[", "]", "\n", "linear_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "ninp", ",", "nhidden", ")", "\n", "layers", ".", "append", "(", "linear_layer", ")", "\n", "layers", ".", "append", "(", "activation", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "ndepths", "-", "1", ")", ":", "\n", "            ", "linear_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "nhidden", ",", "nhidden", ")", "\n", "layers", ".", "append", "(", "linear_layer", ")", "\n", "layers", ".", "append", "(", "activation", "[", "i", "]", ")", "\n", "", "linear_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "nhidden", ",", "nout", ")", "\n", "layers", ".", "append", "(", "linear_layer", ")", "\n", "\n", "self", ".", "_module", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.MLP.forward": [[32, 34], ["model.MLP._module.forward"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.forward"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "_module", ".", "forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NeuralODE.__init__": [[37, 43], ["super().__init__", "model.NeuralODE.func.get_extra_in_dim"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.get_extra_in_dim"], ["    ", "def", "__init__", "(", "self", ",", "func", ":", "torch", ".", "nn", ".", "Module", ",", "hmax", ":", "float", "=", "0.001", ",", "solver", ":", "str", "=", "'rk4'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "func", "=", "func", "\n", "self", ".", "hmax", "=", "hmax", "\n", "self", ".", "solver", "=", "solver", "\n", "self", ".", "extra_in_dim", "=", "self", ".", "func", ".", "get_extra_in_dim", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NeuralODE.forward": [[44, 57], ["model.NeuralODE.size", "t.size", "torch.zeros", "z.type_as.type_as.type_as", "model.NeuralODE.requires_grad_", "tqdm.tqdm.tqdm", "range", "model.NeuralODE.rk4_solve"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NeuralODE.rk4_solve"], ["", "def", "forward", "(", "self", ",", "z0", ":", "torch", ".", "Tensor", ",", "t", ":", "torch", ".", "Tensor", ")", "->", "Union", "[", "torch", ".", "Tensor", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ":", "\n", "        ", "bs", ",", "*", "z_shape", "=", "z0", ".", "size", "(", ")", "\n", "time_len", "=", "t", ".", "size", "(", "0", ")", "\n", "z", "=", "torch", ".", "zeros", "(", "time_len", ",", "bs", ",", "*", "z_shape", ")", "\n", "z", "=", "z", ".", "type_as", "(", "z0", ")", "\n", "z", "[", "0", "]", "=", "z0", "\n", "z0", "=", "z0", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "for", "i_t", "in", "tqdm", "(", "range", "(", "time_len", "-", "1", ")", ")", ":", "\n", "            ", "z0", "=", "self", ".", "rk4_solve", "(", "z0", ",", "t", "[", "i_t", "]", ",", "t", "[", "i_t", "+", "1", "]", ")", "\n", "z", "[", "i_t", "+", "1", "]", "=", "z0", "\n", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NeuralODE.rk4_solve": [[58, 88], ["math.ceil", "range", "model.NeuralODE.func", "model.NeuralODE.pad", "model.NeuralODE.func", "model.NeuralODE.pad", "model.NeuralODE.func", "model.NeuralODE.pad", "model.NeuralODE.func", "model.NeuralODE.pad", "abs"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NeuralODE.pad", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NeuralODE.pad", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NeuralODE.pad", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NeuralODE.pad"], ["", "def", "rk4_solve", "(", "self", ",", "z0", ":", "torch", ".", "Tensor", ",", "t0", ":", "torch", ".", "Tensor", ",", "\n", "t1", ":", "torch", ".", "Tensor", ")", "->", "Union", "[", "torch", ".", "Tensor", ",", "Tuple", "[", "torch", ".", "Tensor", ",", "List", "[", "torch", ".", "Tensor", "]", "]", "]", ":", "\n", "        ", "n_steps", "=", "math", ".", "ceil", "(", "(", "abs", "(", "t1", "-", "t0", ")", "/", "self", ".", "hmax", ")", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "h", "=", "(", "t1", "-", "t0", ")", "/", "n_steps", "\n", "t", "=", "t0", "\n", "z", "=", "z0", "\n", "\n", "# tmp solution", "\n", "h", "=", "h", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "n_steps", ")", ":", "\n", "            ", "k1", "=", "self", ".", "func", "(", "z", ",", "compute_jacobian", "=", "False", ")", "\n", "k1", "=", "self", ".", "pad", "(", "z", ",", "k1", ")", "\n", "\n", "z2", "=", "z", "+", "0.5", "*", "k1", "*", "h", "\n", "k2", "=", "self", ".", "func", "(", "z2", ",", "compute_jacobian", "=", "False", ")", "\n", "k2", "=", "self", ".", "pad", "(", "z2", ",", "k2", ")", "\n", "\n", "z3", "=", "z", "+", "0.5", "*", "k2", "*", "h", "\n", "k3", "=", "self", ".", "func", "(", "z3", ",", "compute_jacobian", "=", "False", ")", "\n", "k3", "=", "self", ".", "pad", "(", "z3", ",", "k3", ")", "\n", "\n", "z4", "=", "z", "+", "k3", "*", "h", "\n", "k4", "=", "self", ".", "func", "(", "z4", ",", "compute_jacobian", "=", "False", ")", "\n", "k4", "=", "self", ".", "pad", "(", "z4", ",", "k4", ")", "\n", "\n", "z", "=", "z", "+", "h", "*", "(", "k1", "+", "2", "*", "(", "k2", "+", "k3", ")", "+", "k4", ")", "/", "6", "\n", "t", "=", "t", "+", "h", "\n", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NeuralODE.pad": [[89, 95], ["torch.zeros().type_as", "torch.cat", "torch.zeros"], "methods", ["None"], ["", "def", "pad", "(", "self", ",", "z", ":", "torch", ".", "Tensor", ",", "k", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "extra_in_dim", ">", "0", ":", "\n", "            ", "*", "dim", ",", "_", "=", "z", ".", "shape", "\n", "pad", "=", "torch", ".", "zeros", "(", "(", "*", "dim", ",", "self", ".", "extra_in_dim", ")", ")", ".", "type_as", "(", "z", ")", "\n", "k", "=", "torch", ".", "cat", "(", "(", "k", ",", "pad", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.MLPAutoencoder.__init__": [[98, 111], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ":", "int", ",", "hidden_dim", ":", "int", ",", "latent_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear1", "=", "torch", ".", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear2", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear3", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear4", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "latent_dim", ")", "\n", "\n", "self", ".", "linear5", "=", "torch", ".", "nn", ".", "Linear", "(", "latent_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear6", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear7", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "linear8", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "input_dim", ")", "\n", "\n", "self", ".", "nonlinearity", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.MLPAutoencoder.encode": [[112, 117], ["model.MLPAutoencoder.nonlinearity", "model.MLPAutoencoder.linear4", "model.MLPAutoencoder.linear1", "model.MLPAutoencoder.nonlinearity", "model.MLPAutoencoder.nonlinearity", "model.MLPAutoencoder.linear2", "model.MLPAutoencoder.linear3"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "nonlinearity", "(", "self", ".", "linear1", "(", "x", ")", ")", "\n", "h", "=", "h", "+", "self", ".", "nonlinearity", "(", "self", ".", "linear2", "(", "h", ")", ")", "\n", "h", "=", "h", "+", "self", ".", "nonlinearity", "(", "self", ".", "linear3", "(", "h", ")", ")", "\n", "return", "self", ".", "linear4", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.MLPAutoencoder.decode": [[118, 123], ["model.MLPAutoencoder.nonlinearity", "model.MLPAutoencoder.linear8", "model.MLPAutoencoder.linear5", "model.MLPAutoencoder.nonlinearity", "model.MLPAutoencoder.nonlinearity", "model.MLPAutoencoder.linear6", "model.MLPAutoencoder.linear7"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ")", ":", "\n", "        ", "h", "=", "self", ".", "nonlinearity", "(", "self", ".", "linear5", "(", "z", ")", ")", "\n", "h", "=", "h", "+", "self", ".", "nonlinearity", "(", "self", ".", "linear6", "(", "h", ")", ")", "\n", "h", "=", "h", "+", "self", ".", "nonlinearity", "(", "self", ".", "linear7", "(", "h", ")", ")", "\n", "return", "self", ".", "linear8", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.MLPAutoencoder.forward": [[124, 128], ["model.MLPAutoencoder.encode", "model.MLPAutoencoder.decode"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "encode", "(", "x", ")", "\n", "x_hat", "=", "self", ".", "decode", "(", "z", ")", "\n", "return", "x_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.__init__": [[131, 145], ["super().__init__", "model.BaseModel.register_buffer", "torch.Tensor", "numpy.loadtxt", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ninp", ":", "int", "=", "2", ",", "nhid", ":", "int", "=", "200", ",", "ndepth", ":", "int", "=", "3", ",", "\n", "extra_ninp", ":", "int", "=", "0", ",", "norm", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ninp", "=", "ninp", "\n", "self", ".", "_nhid", "=", "nhid", "\n", "self", ".", "_ndepth", "=", "ndepth", "\n", "self", ".", "_extra_ninp", "=", "extra_ninp", "# number of input constants", "\n", "self", ".", "_norm", "=", "norm", "# whether or not normalisation is applied (at both inps and outs)", "\n", "self", ".", "register_buffer", "(", "'jacobian'", ",", "torch", ".", "Tensor", "(", "[", "]", ")", ")", "\n", "\n", "if", "self", ".", "_norm", ":", "\n", "# special case only for double pendulum", "\n", "            ", "A", "=", "np", ".", "loadtxt", "(", "'/home/ubuntu/research/node/version_2/data/norm.txt'", ")", "\n", "self", ".", "A", "=", "torch", ".", "Tensor", "(", "A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.forward": [[146, 149], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "compute_jacobian", ":", "bool", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.compute_jacobian": [[150, 157], ["range", "torch.stack().squeeze", "torch.autograd.grad", "jacobian_rows.append", "torch.ones_like", "torch.stack"], "methods", ["None"], ["", "def", "compute_jacobian", "(", "self", ",", "dx", ":", "torch", ".", "Tensor", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "jacobian_rows", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "dx", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "dx", "[", "...", ",", "i", "]", ",", "x", ",", "torch", ".", "ones_like", "(", "dx", "[", "...", ",", "i", "]", ")", ",", "True", ",", "True", ")", "\n", "jacobian_rows", ".", "append", "(", "grad", "[", "0", "]", "[", "...", ",", ":", "dx", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "", "jacobian", "=", "torch", ".", "stack", "(", "jacobian_rows", ",", "dim", "=", "-", "2", ")", ".", "squeeze", "(", ")", "\n", "return", "jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.get_extra_in_dim": [[158, 160], ["None"], "methods", ["None"], ["", "def", "get_extra_in_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_extra_ninp", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.Baseline.__init__": [[166, 172], ["model.BaseModel.__init__", "model.MLP", "torch.nn.Softplus", "range"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "activations", "=", "[", "torch", ".", "nn", ".", "Softplus", "(", ")", "for", "_", "in", "range", "(", "self", ".", "_ndepth", "-", "1", ")", "]", "\n", "self", ".", "linear", "=", "MLP", "(", "\n", "ninp", "=", "self", ".", "_ninp", "+", "self", ".", "_extra_ninp", ",", "nout", "=", "self", ".", "_ninp", ",", "ndepths", "=", "self", ".", "_ndepth", ",", "\n", "nhidden", "=", "self", ".", "_nhid", ",", "activation", "=", "activations", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.Baseline.forward": [[175, 189], ["x.requires_grad_.requires_grad_.requires_grad_", "model.Baseline.linear", "model.Baseline.A.type_as", "model.Baseline.compute_jacobian", "torch.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.compute_jacobian"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "compute_jacobian", ":", "bool", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "x", ".", "requires_grad_", "(", "True", ")", "\n", "if", "self", ".", "_norm", "and", "not", "compute_jacobian", ":", "\n", "# always set compute_jacobian to True when training and validating", "\n", "# when testing this is always set to False", "\n", "            ", "self", ".", "A", "=", "self", ".", "A", ".", "type_as", "(", "self", ".", "jacobian", ")", "\n", "x", "=", "x", "@", "torch", ".", "linalg", ".", "inv", "(", "self", ".", "A", ")", "\n", "\n", "", "dx", "=", "self", ".", "linear", "(", "x", ")", "\n", "if", "compute_jacobian", ":", "\n", "            ", "self", ".", "jacobian", "=", "self", ".", "compute_jacobian", "(", "dx", ",", "x", ")", "\n", "", "if", "self", ".", "_norm", "and", "not", "compute_jacobian", ":", "\n", "            ", "dx", "=", "dx", "@", "self", ".", "A", "\n", "", "return", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NSF.__init__": [[192, 202], ["model.BaseModel.__init__", "model.MLP", "model.MLP", "torch.nn.Softplus", "range"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "activations", "=", "[", "torch", ".", "nn", ".", "Softplus", "(", ")", "for", "_", "in", "range", "(", "self", ".", "_ndepth", "-", "1", ")", "]", "\n", "self", ".", "linear", "=", "MLP", "(", "\n", "ninp", "=", "self", ".", "_ninp", "+", "self", ".", "_extra_ninp", ",", "nout", "=", "self", ".", "_ninp", ",", "ndepths", "=", "self", ".", "_ndepth", ",", "\n", "nhidden", "=", "self", ".", "_nhid", ",", "activation", "=", "activations", "\n", ")", "\n", "self", ".", "hnn", "=", "MLP", "(", "\n", "ninp", "=", "self", ".", "_ninp", "+", "self", ".", "_extra_ninp", ",", "nout", "=", "1", ",", "ndepths", "=", "self", ".", "_ndepth", ",", "\n", "nhidden", "=", "self", ".", "_nhid", ",", "activation", "=", "activations", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.NSF.forward": [[204, 227], ["x.requires_grad_.requires_grad_.requires_grad_", "model.NSF.hnn", "model.NSF.linear", "model.NSF.compute_jacobian", "torch.inverse", "torch.matmul", "model.NSF.A.type_as", "torch.autograd.grad", "len", "torch.transpose", "torch.linalg.inv", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.compute_jacobian"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "compute_jacobian", ":", "bool", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "x", ".", "requires_grad_", "(", "True", ")", "\n", "if", "self", ".", "_norm", "and", "not", "compute_jacobian", ":", "\n", "            ", "self", ".", "A", "=", "self", ".", "A", ".", "type_as", "(", "self", ".", "jacobian", ")", "\n", "x", "=", "x", "@", "torch", ".", "linalg", ".", "inv", "(", "self", ".", "A", ")", "\n", "\n", "", "hnn_x", "=", "self", ".", "hnn", "(", "x", ")", "\n", "hnn_x", "=", "torch", ".", "autograd", ".", "grad", "(", "hnn_x", ",", "x", ",", "torch", ".", "ones_like", "(", "hnn_x", ")", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "\n", "linear_x", "=", "self", ".", "linear", "(", "x", ")", "\n", "jac", "=", "self", ".", "compute_jacobian", "(", "linear_x", ",", "x", ")", "\n", "if", "len", "(", "jac", ".", "shape", ")", "==", "2", ":", "\n", "            ", "jac", "=", "jac", "[", "None", ",", "...", "]", "\n", "", "M", "=", "jac", "-", "torch", ".", "transpose", "(", "jac", ",", "1", ",", "2", ")", "\n", "inv_M", "=", "torch", ".", "inverse", "(", "M", ")", "\n", "\n", "dx", "=", "torch", ".", "matmul", "(", "inv_M", ",", "hnn_x", "[", "...", ",", "None", "]", ")", "\n", "\n", "if", "compute_jacobian", ":", "\n", "            ", "self", ".", "jacobian", "=", "jac", "\n", "", "if", "self", ".", "_norm", "and", "not", "compute_jacobian", ":", "\n", "            ", "return", "dx", "[", "...", ",", "0", "]", "@", "self", ".", "A", "\n", "", "return", "dx", "[", "...", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.AutoEncoderReg.__init__": [[230, 238], ["model.BaseModel.__init__", "model.MLP", "model.MLPAutoencoder", "torch.nn.Softplus", "range"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "activations", "=", "[", "torch", ".", "nn", ".", "Softplus", "(", ")", "for", "_", "in", "range", "(", "self", ".", "_ndepth", "-", "1", ")", "]", "\n", "self", ".", "linear", "=", "MLP", "(", "\n", "ninp", "=", "self", ".", "_ninp", "+", "self", ".", "_extra_ninp", ",", "nout", "=", "self", ".", "_ninp", ",", "ndepths", "=", "self", ".", "_ndepth", ",", "\n", "nhidden", "=", "self", ".", "_nhid", ",", "activation", "=", "activations", "\n", ")", "\n", "self", ".", "autoencoder", "=", "MLPAutoencoder", "(", "self", ".", "_ninp", ",", "self", ".", "_nhid", ",", "self", ".", "_ninp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.AutoEncoderReg.forward": [[239, 252], ["model.AutoEncoderReg.requires_grad_", "model.AutoEncoderReg.autoencoder.encode", "model.AutoEncoderReg.linear", "functorch.jvp", "model.AutoEncoderReg.A.type_as", "model.AutoEncoderReg.compute_jacobian", "torch.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.compute_jacobian"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "compute_jacobian", ":", "bool", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "x", ".", "requires_grad_", "(", "True", ")", "\n", "if", "self", ".", "_norm", "and", "not", "compute_jacobian", ":", "\n", "            ", "self", ".", "A", "=", "self", ".", "A", ".", "type_as", "(", "self", ".", "jacobian", ")", "\n", "x", "=", "x", "@", "torch", ".", "linalg", ".", "inv", "(", "self", ".", "A", ")", "\n", "", "x", "=", "self", ".", "autoencoder", ".", "encode", "(", "x", ")", "\n", "dx", "=", "self", ".", "linear", "(", "x", ")", "\n", "if", "compute_jacobian", ":", "\n", "            ", "self", ".", "jacobian", "=", "self", ".", "compute_jacobian", "(", "dx", ",", "x", ")", "\n", "", "transformed_grad", "=", "functorch", ".", "jvp", "(", "self", ".", "autoencoder", ".", "decode", ",", "(", "x", ",", ")", ",", "(", "dx", ",", ")", ")", "\n", "if", "self", ".", "_norm", "and", "not", "compute_jacobian", ":", "\n", "            ", "return", "transformed_grad", "[", "1", "]", "@", "self", ".", "A", "\n", "", "return", "transformed_grad", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.AutoEncoderReg.encode": [[253, 255], ["model.AutoEncoderReg.autoencoder.encode"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode"], ["", "def", "encode", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "autoencoder", ".", "encode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.AutoEncoderReg.decode": [[256, 258], ["model.AutoEncoderReg.autoencoder.decode"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.decode"], ["", "def", "decode", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "autoencoder", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.InvertibleNNReg.__init__": [[260, 279], ["model.BaseModel.__init__", "model.MLP", "FrEIA.SequenceINN", "FrEIA.SequenceINN", "range", "torch.nn.Softplus", "torch.nn.Sequential", "FrEIA.SequenceINN.append", "range", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "model.InvertibleNNReg.inn_net"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nblocks", ":", "int", "=", "8", ",", "inn_nhid", ":", "int", "=", "512", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "activations", "=", "[", "torch", ".", "nn", ".", "Softplus", "(", ")", "for", "_", "in", "range", "(", "self", ".", "_ndepth", "-", "1", ")", "]", "\n", "self", ".", "linear", "=", "MLP", "(", "\n", "ninp", "=", "self", ".", "_ninp", "+", "self", ".", "_extra_ninp", ",", "nout", "=", "self", ".", "_ninp", ",", "ndepths", "=", "self", ".", "_ndepth", ",", "\n", "nhidden", "=", "self", ".", "_nhid", ",", "activation", "=", "activations", "\n", ")", "\n", "\n", "def", "subnet_fc", "(", "c_in", ",", "c_out", ")", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "c_in", ",", "inn_nhid", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "inn_nhid", ",", "c_out", ")", "\n", ")", "\n", "", "inn", "=", "FF", ".", "SequenceINN", "(", "self", ".", "_ninp", ")", "\n", "for", "_", "in", "range", "(", "nblocks", ")", ":", "\n", "            ", "inn", ".", "append", "(", "FM", ".", "AllInOneBlock", ",", "subnet_constructor", "=", "subnet_fc", ",", "permute_soft", "=", "True", ")", "\n", "", "self", ".", "inn_net", "=", "inn", "\n", "self", ".", "inn_net_inv", "=", "lambda", "x", ":", "self", ".", "inn_net", "(", "x", ",", "rev", "=", "True", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.InvertibleNNReg.forward": [[280, 293], ["x.requires_grad_.requires_grad_.requires_grad_", "model.InvertibleNNReg.linear", "functorch.jvp", "model.InvertibleNNReg.A.type_as", "model.InvertibleNNReg.inn_net", "model.InvertibleNNReg.compute_jacobian", "torch.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.compute_jacobian"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "compute_jacobian", ":", "bool", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "x", ".", "requires_grad_", "(", "True", ")", "\n", "if", "self", ".", "_norm", "and", "not", "compute_jacobian", ":", "\n", "            ", "self", ".", "A", "=", "self", ".", "A", ".", "type_as", "(", "self", ".", "jacobian", ")", "\n", "x", "=", "x", "@", "torch", ".", "linalg", ".", "inv", "(", "self", ".", "A", ")", "\n", "", "x", "=", "self", ".", "inn_net", "(", "x", ")", "[", "0", "]", "\n", "dx", "=", "self", ".", "linear", "(", "x", ")", "\n", "if", "compute_jacobian", ":", "\n", "            ", "self", ".", "jacobian", "=", "self", ".", "compute_jacobian", "(", "dx", ",", "x", ")", "\n", "", "transformed_grad", "=", "functorch", ".", "jvp", "(", "self", ".", "inn_net_inv", ",", "(", "x", ",", ")", ",", "(", "dx", ",", ")", ")", "\n", "if", "self", ".", "_norm", "and", "not", "compute_jacobian", ":", "\n", "            ", "return", "transformed_grad", "[", "1", "]", "@", "self", ".", "A", "\n", "", "return", "transformed_grad", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.HNN.__init__": [[296, 306], ["model.BaseModel.__init__", "model.MLP", "field_type.lower", "model.HNN.permutation_tensor", "torch.nn.Softplus", "range"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelHNNAutoEncoder.permutation_tensor"], ["    ", "def", "__init__", "(", "self", ",", "field_type", ":", "str", "=", "'solenoidal'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "activations", "=", "[", "torch", ".", "nn", ".", "Softplus", "(", ")", "for", "_", "in", "range", "(", "self", ".", "_ndepth", "-", "1", ")", "]", "\n", "self", ".", "linear", "=", "MLP", "(", "\n", "ninp", "=", "self", ".", "_ninp", "+", "self", ".", "_extra_ninp", ",", "nout", "=", "self", ".", "_ninp", ",", "ndepths", "=", "self", ".", "_ndepth", ",", "\n", "nhidden", "=", "self", ".", "_nhid", ",", "activation", "=", "activations", "\n", ")", "\n", "self", ".", "field_type", "=", "field_type", ".", "lower", "(", ")", "\n", "assert", "self", ".", "field_type", "in", "[", "'solenoidal'", ",", "'conservative'", "]", "\n", "self", ".", "M", "=", "self", ".", "permutation_tensor", "(", "self", ".", "_ninp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.HNN.permutation_tensor": [[307, 311], ["torch.eye", "torch.cat"], "methods", ["None"], ["", "def", "permutation_tensor", "(", "self", ",", "n", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "M", "=", "torch", ".", "eye", "(", "n", ")", "\n", "M", "=", "torch", ".", "cat", "(", "[", "M", "[", "n", "//", "2", ":", "]", ",", "-", "M", "[", ":", "n", "//", "2", "]", "]", ")", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.HNN.forward": [[312, 333], ["x.requires_grad_.requires_grad_.requires_grad_", "model.HNN.M.type_as", "model.HNN.linear().split", "torch.zeros_like", "torch.zeros_like", "model.HNN.compute_jacobian", "model.HNN.linear", "torch.autograd.grad", "torch.eye().type_as", "torch.autograd.grad", "model.HNN.M.t", "F1.sum", "F2.sum", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.compute_jacobian"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "compute_jacobian", ":", "bool", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "# not implemented for double pendulum so norm is not needed", "\n", "        ", "x", "=", "x", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "M", "=", "self", ".", "M", ".", "type_as", "(", "x", ")", "\n", "\n", "F1", ",", "F2", "=", "self", ".", "linear", "(", "x", ")", ".", "split", "(", "self", ".", "_ninp", "//", "2", ",", "-", "1", ")", "# traditional forward pass", "\n", "\n", "conservative_field", "=", "torch", ".", "zeros_like", "(", "x", ")", "# start out with both components set to 0", "\n", "solenoidal_field", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "if", "self", ".", "field_type", "!=", "'solenoidal'", ":", "\n", "# this will probably break if batch size is larger than 1", "\n", "            ", "dF1", "=", "torch", ".", "autograd", ".", "grad", "(", "F1", ".", "sum", "(", ")", ",", "x", ",", "create_graph", "=", "True", ")", "[", "0", "]", "# gradients for conservative field", "\n", "conservative_field", "=", "dF1", "@", "torch", ".", "eye", "(", "*", "self", ".", "M", ".", "shape", ")", ".", "type_as", "(", "x", ")", "\n", "", "if", "self", ".", "field_type", "!=", "'conservative'", ":", "\n", "            ", "dF2", "=", "torch", ".", "autograd", ".", "grad", "(", "F2", ".", "sum", "(", ")", ",", "x", ",", "create_graph", "=", "True", ")", "[", "0", "]", "# gradients for solenoidal field", "\n", "solenoidal_field", "=", "dF2", "@", "self", ".", "M", ".", "t", "(", ")", "\n", "", "dx", "=", "conservative_field", "+", "solenoidal_field", "\n", "if", "compute_jacobian", ":", "\n", "            ", "self", ".", "jacobian", "=", "self", ".", "compute_jacobian", "(", "dx", ",", "x", ")", "\n", "", "return", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.LNN.__init__": [[336, 342], ["model.BaseModel.__init__", "model.MLP", "torch.nn.Softplus", "range"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "activations", "=", "[", "torch", ".", "nn", ".", "Softplus", "(", ")", "for", "_", "in", "range", "(", "self", ".", "_ndepth", "-", "1", ")", "]", "\n", "self", ".", "linear", "=", "MLP", "(", "\n", "ninp", "=", "self", ".", "_ninp", "+", "self", ".", "_extra_ninp", ",", "nout", "=", "1", ",", "ndepths", "=", "self", ".", "_ndepth", ",", "\n", "nhidden", "=", "self", ".", "_nhid", ",", "activation", "=", "activations", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.LNN.forward": [[344, 370], ["x.requires_grad_.requires_grad_.requires_grad_", "torch.split", "model.LNN.functorch_hessian", "model.LNN.functorch_jacobian", "A.unsqueeze.unsqueeze.unsqueeze", "qtt.squeeze().squeeze.squeeze().squeeze.squeeze().squeeze", "torch.cat", "len", "model.LNN.A.type_as", "torch.linalg.pinv", "torch.linalg.inv", "qtt.squeeze().squeeze.squeeze().squeeze.squeeze"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.LNN.functorch_hessian", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.LNN.functorch_jacobian"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "compute_jacobian", ":", "bool", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "len", "(", "x", ".", "shape", ")", ">", "2", ":", "\n", "            ", "assert", "x", ".", "shape", "[", "0", "]", "==", "1", "\n", "x", "=", "x", "[", "0", "]", "\n", "\n", "", "x", "=", "x", ".", "requires_grad_", "(", "True", ")", "\n", "if", "self", ".", "_norm", "and", "not", "compute_jacobian", ":", "\n", "            ", "self", ".", "A", "=", "self", ".", "A", ".", "type_as", "(", "self", ".", "jacobian", ")", "\n", "x", "=", "x", "@", "torch", ".", "linalg", ".", "inv", "(", "self", ".", "A", ")", "\n", "", "n", "=", "self", ".", "_ninp", "//", "2", "\n", "_", ",", "qt", "=", "torch", ".", "split", "(", "x", ",", "n", ",", "dim", "=", "-", "1", ")", "\n", "\n", "H", "=", "self", ".", "functorch_hessian", "(", "x", ")", "\n", "J", "=", "self", ".", "functorch_jacobian", "(", "x", ")", "\n", "A", "=", "J", "[", "...", ",", ":", "n", "]", "# (..., nout=1, nstates // 2)", "\n", "B", "=", "H", "[", "...", ",", "n", ":", ",", "n", ":", "]", "# (..., nout=1, nstates // 2, nstates // 2)", "\n", "C", "=", "H", "[", "...", ",", "n", ":", ",", ":", "n", "]", "# (..., nout=1, nstates // 2, nstates // 2)", "\n", "A", "=", "A", ".", "unsqueeze", "(", "-", "1", ")", "# (..., nout=1, nstates // 2, 1)", "\n", "\n", "qtt", "=", "torch", ".", "linalg", ".", "pinv", "(", "B", ")", "@", "(", "A", "-", "C", "@", "qt", "[", "...", ",", "None", ",", ":", ",", "None", "]", ")", "\n", "qtt", "=", "qtt", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "2", ")", "\n", "\n", "res", "=", "torch", ".", "cat", "(", "(", "qt", ",", "qtt", ")", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "_norm", "and", "not", "compute_jacobian", ":", "\n", "            ", "res", "=", "res", "@", "self", ".", "A", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.LNN.functorch_jacobian": [[371, 373], ["functorch.vmap", "functorch.jacrev"], "methods", ["None"], ["", "def", "functorch_jacobian", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "functorch", ".", "vmap", "(", "functorch", ".", "jacrev", "(", "self", ".", "linear", ")", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.LNN.functorch_hessian": [[374, 377], ["functorch.vmap", "functorch.jacrev", "functorch.jacrev"], "methods", ["None"], ["", "def", "functorch_hessian", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "# return functorch.vmap(functorch.hessian(self.linear))(x)", "\n", "        ", "return", "functorch", ".", "vmap", "(", "functorch", ".", "jacrev", "(", "functorch", ".", "jacrev", "(", "(", "self", ".", "linear", ")", ")", ")", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelHNNAutoEncoder.__init__": [[380, 392], ["model.BaseModel.__init__", "model.MLP", "model.MLPAutoencoder", "field_type.lower", "model.PixelHNNAutoEncoder.permutation_tensor", "torch.nn.Softplus", "range"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelHNNAutoEncoder.permutation_tensor"], ["    ", "def", "__init__", "(", "self", ",", "field_type", ":", "str", "=", "'solenoidal'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_nlatent", "=", "2", "\n", "activations", "=", "[", "torch", ".", "nn", ".", "Softplus", "(", ")", "for", "_", "in", "range", "(", "self", ".", "_ndepth", "-", "1", ")", "]", "\n", "self", ".", "linear", "=", "MLP", "(", "\n", "ninp", "=", "self", ".", "_nlatent", ",", "nout", "=", "self", ".", "_nlatent", ",", "ndepths", "=", "self", ".", "_ndepth", ",", "\n", "nhidden", "=", "self", ".", "_nhid", ",", "activation", "=", "activations", "\n", ")", "\n", "self", ".", "autoencoder", "=", "MLPAutoencoder", "(", "self", ".", "_ninp", ",", "self", ".", "_nhid", ",", "self", ".", "_nlatent", ")", "\n", "self", ".", "field_type", "=", "field_type", ".", "lower", "(", ")", "\n", "assert", "self", ".", "field_type", "in", "[", "'solenoidal'", ",", "'conservative'", "]", "\n", "self", ".", "M", "=", "self", ".", "permutation_tensor", "(", "self", ".", "_nlatent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelHNNAutoEncoder.permutation_tensor": [[393, 397], ["torch.eye", "torch.cat"], "methods", ["None"], ["", "def", "permutation_tensor", "(", "self", ",", "n", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "M", "=", "torch", ".", "eye", "(", "n", ")", "\n", "M", "=", "torch", ".", "cat", "(", "[", "M", "[", "n", "//", "2", ":", "]", ",", "-", "M", "[", ":", "n", "//", "2", "]", "]", ")", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelHNNAutoEncoder.forward": [[398, 419], ["x.requires_grad_.requires_grad_.requires_grad_", "model.PixelHNNAutoEncoder.M.type_as", "model.PixelHNNAutoEncoder.linear().split", "torch.zeros_like", "torch.zeros_like", "model.PixelHNNAutoEncoder.compute_jacobian", "model.PixelHNNAutoEncoder.linear", "torch.autograd.grad", "torch.eye().type_as", "torch.autograd.grad", "model.PixelHNNAutoEncoder.M.t", "F1.sum", "F2.sum", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.compute_jacobian"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "compute_jacobian", ":", "bool", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "# not implemented for double pendulum so norm is not needed", "\n", "        ", "x", "=", "x", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "M", "=", "self", ".", "M", ".", "type_as", "(", "x", ")", "\n", "\n", "F1", ",", "F2", "=", "self", ".", "linear", "(", "x", ")", ".", "split", "(", "self", ".", "_nlatent", "//", "2", ",", "-", "1", ")", "# traditional forward pass", "\n", "\n", "conservative_field", "=", "torch", ".", "zeros_like", "(", "x", ")", "# start out with both components set to 0", "\n", "solenoidal_field", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n", "if", "self", ".", "field_type", "!=", "'solenoidal'", ":", "\n", "# this will probably break if batch size is larger than 1", "\n", "            ", "dF1", "=", "torch", ".", "autograd", ".", "grad", "(", "F1", ".", "sum", "(", ")", ",", "x", ",", "create_graph", "=", "True", ")", "[", "0", "]", "# gradients for conservative field", "\n", "conservative_field", "=", "dF1", "@", "torch", ".", "eye", "(", "*", "self", ".", "M", ".", "shape", ")", ".", "type_as", "(", "x", ")", "\n", "", "if", "self", ".", "field_type", "!=", "'conservative'", ":", "\n", "            ", "dF2", "=", "torch", ".", "autograd", ".", "grad", "(", "F2", ".", "sum", "(", ")", ",", "x", ",", "create_graph", "=", "True", ")", "[", "0", "]", "# gradients for solenoidal field", "\n", "solenoidal_field", "=", "dF2", "@", "self", ".", "M", ".", "t", "(", ")", "\n", "", "dx", "=", "conservative_field", "+", "solenoidal_field", "\n", "if", "compute_jacobian", ":", "\n", "            ", "self", ".", "jacobian", "=", "self", ".", "compute_jacobian", "(", "dx", ",", "x", ")", "\n", "", "return", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelHNNAutoEncoder.encode": [[420, 422], ["model.PixelHNNAutoEncoder.autoencoder.encode"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode"], ["", "def", "encode", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "autoencoder", ".", "encode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelHNNAutoEncoder.decode": [[423, 425], ["model.PixelHNNAutoEncoder.autoencoder.decode"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.decode"], ["", "def", "decode", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "autoencoder", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoder.__init__": [[428, 437], ["model.BaseModel.__init__", "model.MLP", "model.MLPAutoencoder", "torch.nn.Softplus", "range"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_nlatent", "=", "2", "\n", "activations", "=", "[", "torch", ".", "nn", ".", "Softplus", "(", ")", "for", "_", "in", "range", "(", "self", ".", "_ndepth", "-", "1", ")", "]", "\n", "self", ".", "linear", "=", "MLP", "(", "\n", "ninp", "=", "self", ".", "_nlatent", ",", "nout", "=", "self", ".", "_nlatent", ",", "ndepths", "=", "self", ".", "_ndepth", ",", "\n", "nhidden", "=", "self", ".", "_nhid", ",", "activation", "=", "activations", "\n", ")", "\n", "self", ".", "autoencoder", "=", "MLPAutoencoder", "(", "self", ".", "_ninp", ",", "self", ".", "_nhid", ",", "self", ".", "_nlatent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoder.forward": [[438, 448], ["x.requires_grad_.requires_grad_.requires_grad_", "model.PixelRegAutoEncoder.linear", "model.PixelRegAutoEncoder.A.type_as", "model.PixelRegAutoEncoder.compute_jacobian", "torch.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.compute_jacobian"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "compute_jacobian", ":", "bool", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "# x is the latent embedding", "\n", "        ", "x", "=", "x", ".", "requires_grad_", "(", "True", ")", "\n", "if", "self", ".", "_norm", "and", "not", "compute_jacobian", ":", "\n", "            ", "self", ".", "A", "=", "self", ".", "A", ".", "type_as", "(", "self", ".", "jacobian", ")", "\n", "x", "=", "x", "@", "torch", ".", "linalg", ".", "inv", "(", "self", ".", "A", ")", "\n", "", "dx", "=", "self", ".", "linear", "(", "x", ")", "\n", "if", "compute_jacobian", ":", "\n", "            ", "self", ".", "jacobian", "=", "self", ".", "compute_jacobian", "(", "dx", ",", "x", ")", "\n", "", "return", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoder.encode": [[449, 451], ["model.PixelRegAutoEncoder.autoencoder.encode"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode"], ["", "def", "encode", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "autoencoder", ".", "encode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoder.decode": [[452, 454], ["model.PixelRegAutoEncoder.autoencoder.decode"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.decode"], ["", "def", "decode", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "autoencoder", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.__init__": [[457, 466], ["model.BaseModel.__init__", "model.MLP", "model.MLPAutoencoder", "torch.nn.Softplus", "range"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_nlatent", "=", "20", "\n", "activations", "=", "[", "torch", ".", "nn", ".", "Softplus", "(", ")", "for", "_", "in", "range", "(", "self", ".", "_ndepth", "-", "1", ")", "]", "\n", "self", ".", "linear", "=", "MLP", "(", "\n", "ninp", "=", "self", ".", "_nlatent", ",", "nout", "=", "self", ".", "_nlatent", ",", "ndepths", "=", "self", ".", "_ndepth", ",", "\n", "nhidden", "=", "self", ".", "_nhid", ",", "activation", "=", "activations", "\n", ")", "\n", "self", ".", "autoencoder", "=", "MLPAutoencoder", "(", "self", ".", "_ninp", ",", "self", ".", "_nhid", ",", "self", ".", "_nlatent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.forward": [[467, 477], ["x.requires_grad_.requires_grad_.requires_grad_", "model.PixelRegAutoEncoderRedundant.linear", "model.PixelRegAutoEncoderRedundant.A.type_as", "model.PixelRegAutoEncoderRedundant.compute_jacobian", "torch.linalg.inv"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.BaseModel.compute_jacobian"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "compute_jacobian", ":", "bool", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "# x is the latent embedding", "\n", "        ", "x", "=", "x", ".", "requires_grad_", "(", "True", ")", "\n", "if", "self", ".", "_norm", "and", "not", "compute_jacobian", ":", "\n", "            ", "self", ".", "A", "=", "self", ".", "A", ".", "type_as", "(", "self", ".", "jacobian", ")", "\n", "x", "=", "x", "@", "torch", ".", "linalg", ".", "inv", "(", "self", ".", "A", ")", "\n", "", "dx", "=", "self", ".", "linear", "(", "x", ")", "\n", "if", "compute_jacobian", ":", "\n", "            ", "self", ".", "jacobian", "=", "self", ".", "compute_jacobian", "(", "dx", ",", "x", ")", "\n", "", "return", "dx", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode": [[478, 480], ["model.PixelRegAutoEncoderRedundant.autoencoder.encode"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode"], ["", "def", "encode", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "autoencoder", ".", "encode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.decode": [[481, 483], ["model.PixelRegAutoEncoderRedundant.autoencoder.decode"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.decode"], ["", "def", "decode", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "autoencoder", ".", "decode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.get_model": [[485, 504], ["model.lower.lower"], "function", ["None"], ["", "", "def", "get_model", "(", "model", ":", "str", ")", ":", "\n", "    ", "model", "=", "model", ".", "lower", "(", ")", "\n", "opt", "=", "{", "\n", "'baseline'", ":", "Baseline", ",", "\n", "'baselinereg'", ":", "Baseline", ",", "\n", "'autoencoderreg'", ":", "AutoEncoderReg", ",", "\n", "'invertiblennreg'", ":", "InvertibleNNReg", ",", "\n", "'hnn'", ":", "HNN", ",", "\n", "'nsf'", ":", "NSF", ",", "\n", "'lnn'", ":", "LNN", ",", "\n", "'damped-baseline'", ":", "Baseline", ",", "\n", "'damped-nsf'", ":", "NSF", ",", "\n", "'dampedreg'", ":", "InvertibleNNReg", ",", "\n", "'dampedregbaseline'", ":", "Baseline", ",", "\n", "'pixelhnn'", ":", "PixelHNNAutoEncoder", ",", "\n", "'pixelreg'", ":", "PixelRegAutoEncoder", ",", "\n", "'dampedpixelreg'", ":", "PixelRegAutoEncoderRedundant", "\n", "}", "\n", "return", "opt", "[", "model", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.misc.calc_mass_spring_energy": [[8, 14], ["numpy.split"], "function", ["None"], ["def", "calc_mass_spring_energy", "(", "x", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "k", "=", "m", "=", "1", "\n", "q", ",", "qt", "=", "np", ".", "split", "(", "x", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "T", "=", "0.5", "*", "m", "*", "qt", "**", "2", "\n", "V", "=", "0.5", "*", "k", "*", "q", "**", "2", "\n", "return", "T", "+", "V", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.misc.calc_single_pdl_energy": [[15, 22], ["numpy.split", "numpy.cos"], "function", ["None"], ["", "def", "calc_single_pdl_energy", "(", "x", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "g", "=", "3", "\n", "m", "=", "r", "=", "1", "\n", "q", ",", "qt", "=", "np", ".", "split", "(", "x", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "T", "=", "0.5", "*", "m", "*", "(", "r", "*", "qt", ")", "**", "2", "\n", "V", "=", "m", "*", "g", "*", "r", "*", "(", "1", "-", "np", ".", "cos", "(", "q", ")", ")", "\n", "return", "T", "+", "V", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.misc.calc_damped_pdl_energy": [[23, 29], ["numpy.split"], "function", ["None"], ["", "def", "calc_damped_pdl_energy", "(", "x", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "g", "=", "m", "=", "r", "=", "1", "\n", "x", ",", "y", ",", "dx", ",", "dy", "=", "np", ".", "split", "(", "x", ",", "4", ",", "axis", "=", "-", "1", ")", "\n", "T", "=", "0.5", "*", "m", "*", "(", "r", "**", "2", ")", "*", "(", "dx", "**", "2", "+", "dy", "**", "2", ")", "\n", "V", "=", "m", "*", "g", "*", "r", "*", "(", "1", "+", "y", ")", "\n", "return", "T", "+", "V", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.misc.calc_double_pdl_energy": [[30, 40], ["numpy.split", "numpy.cos", "numpy.cos", "numpy.cos"], "function", ["None"], ["", "def", "calc_double_pdl_energy", "(", "x", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "g", "=", "9.8", "# fix g to be 9.8", "\n", "r1", "=", "r2", "=", "m1", "=", "m2", "=", "1", "\n", "q", ",", "p", ",", "qt", ",", "pt", "=", "np", ".", "split", "(", "x", ",", "4", ",", "axis", "=", "-", "1", ")", "\n", "T", "=", "0.5", "*", "m1", "*", "(", "r1", "**", "2", ")", "*", "(", "qt", "**", "2", ")", "\n", "T", "=", "T", "+", "0.5", "*", "m2", "*", "(", "r1", "**", "2", ")", "*", "(", "qt", "**", "2", ")", "\n", "T", "=", "T", "+", "0.5", "*", "m2", "*", "(", "r2", "**", "2", ")", "*", "(", "pt", "**", "2", ")", "\n", "T", "=", "T", "+", "0.5", "*", "m2", "*", "2", "*", "r1", "*", "r2", "*", "qt", "*", "pt", "*", "np", ".", "cos", "(", "q", "-", "p", ")", "\n", "V", "=", "-", "(", "m1", "+", "m2", ")", "*", "g", "*", "r1", "*", "np", ".", "cos", "(", "q", ")", "-", "m2", "*", "g", "*", "r2", "*", "np", ".", "cos", "(", "p", ")", "\n", "return", "T", "+", "V", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.misc.generate_init_state": [[41, 61], ["data.mass_spring.general_spring", "torch.Tensor().reshape", "[].permute", "data.single_pendulum.general_pendulum", "torch.Tensor().reshape", "[].permute", "torch.Tensor", "data.double_pendulum.general_double_pendulum", "torch.Tensor().reshape", "[].permute", "torch.linspace", "torch.Tensor", "torch.linspace", "torch.Tensor", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.machine-discovery_research.data.mass_spring.general_spring", "home.repos.pwc.inspect_result.machine-discovery_research.data.single_pendulum.general_pendulum", "home.repos.pwc.inspect_result.machine-discovery_research.data.double_pendulum.general_double_pendulum"], ["", "def", "generate_init_state", "(", "self", ",", "seed", ":", "int", ",", "experiment", ":", "str", ")", "->", "Tuple", "[", "torch", ".", "Tensor", "]", ":", "\n", "    ", "if", "experiment", "==", "'mass-spring'", ":", "\n", "        ", "x", ",", "_", "=", "general_spring", "(", "\n", "t_span", "=", "(", "0", ",", "100", ")", ",", "nb_teval", "=", "1000", ",", "seed", "=", "seed", ",", "nb_samples", "=", "1", ",", "noiseless", "=", "True", "\n", ")", "\n", "x0", "=", "torch", ".", "Tensor", "(", "x", "[", "0", "]", ")", ".", "reshape", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "t", "=", "torch", ".", "linspace", "(", "0", ",", "100", ",", "1000", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "", "elif", "experiment", "==", "'single-pdl'", ":", "\n", "        ", "x", ",", "_", "=", "general_pendulum", "(", "\n", "t_span", "=", "(", "0", ",", "100", ")", ",", "nb_teval", "=", "1000", ",", "seed", "=", "seed", ",", "nb_samples", "=", "1", ",", "noiseless", "=", "True", "\n", ")", "\n", "x0", "=", "torch", ".", "Tensor", "(", "x", "[", "0", "]", ")", ".", "reshape", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "t", "=", "torch", ".", "linspace", "(", "0", ",", "100", ",", "1000", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "", "elif", "experiment", "==", "'double-pdl'", ":", "\n", "        ", "x", ",", "_", "=", "general_double_pendulum", "(", "\n", "t_span", "=", "(", "0", ",", "50", ")", ",", "nb_teval", "=", "2000", ",", "seed", "=", "seed", ",", "nb_samples", "=", "1", "\n", ")", "\n", "x0", "=", "torch", ".", "Tensor", "(", "x", "[", "0", "]", ")", ".", "reshape", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "t", "=", "torch", ".", "linspace", "(", "0", ",", "50", ",", "2000", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "", "return", "x0", ",", "t", ",", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaseLitModel.__init__": [[13, 17], ["pytorch_lightning.LightningModule.__init__", "model.NeuralODE"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "parser", "=", "configparser", ".", "ConfigParser", "(", ")", "\n", "self", ".", "parser", ".", "read", "(", "'./config/config.ini'", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaseLitModel.configure_optimizers": [[18, 21], ["torch.optim.Adam", "litmodel.BaseLitModel.parameters"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "backbone", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaseLitModel.loss": [[22, 26], ["None"], "methods", ["None"], ["", "def", "huber_loss", "(", "self", ",", "y_hat", ",", "y", ")", ":", "\n", "        ", "loss", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'mean'", ")", "\n", "return", "loss", "(", "y_hat", ",", "y", ")", "\n", "\n", "", "def", "on_train_start", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaseLitModel.training_step": [[27, 30], ["None"], "methods", ["None"], ["        ", "hparams", "=", "{", "'hp/lr'", ":", "float", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'lr'", "]", ")", ",", "\n", "'hp/nb_epoch'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'nb_epoch'", "]", ")", ",", "\n", "'hp/nb_gpus'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'nb_gpus'", "]", ")", ",", "\n", "'hp/batch_size'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'batch_size'", "]", ")", ",", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaseLitModel.validation_step": [[31, 34], ["None"], "methods", ["None"], ["'hp/inference_batch_size'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'inference_batch_size'", "]", ")", ",", "\n", "'hp/total_pool_size'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'total_pool_size'", "]", ")", ",", "\n", "'hp/budget'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'budget'", "]", ")", ",", "\n", "'hp/init_train_seed'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'init_train_seed'", "]", ")", ",", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaselineLitModel.__init__": [[37, 41], ["litmodel.BaseLitModel.__init__", "model.NeuralODE"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["'hp/shrink_by'", ":", "float", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'shrink_by'", "]", ")", ",", "\n", "'hp/perturb_by'", ":", "float", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'perturb_by'", "]", ")", ",", "\n", "'hp/check_val_every_n_epoch'", ":", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'check_val_every_n_epoch'", "]", ")", "}", "\n", "\n", "self", ".", "logger", ".", "log_hyperparams", "(", "self", ".", "hparams", ",", "hparams", ")", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaselineLitModel.loss": [[42, 45], ["torch.nn.MSELoss", "torch.nn.MSELoss."], "methods", ["None"], ["\n", "", "def", "predict_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "None", ")", ":", "\n", "        ", "self", ".", "backbone", ".", "train", "(", ")", "# temporary solution to enable dropout at prediction", "\n", "x", "=", "batch", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaselineLitModel.training_step": [[46, 55], ["litmodel.BaselineLitModel._backbone", "litmodel.BaselineLitModel.loss", "litmodel.BaselineLitModel.log"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.loss"], ["y", "=", "self", ".", "backbone", "(", "x", ")", "\n", "y", "=", "self", ".", "all_gather", "(", "y", ")", "\n", "gpu_n", ",", "batch_n", ",", "out_n", ",", "outshape_n", "=", "y", ".", "shape", "\n", "y", "=", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", "[", "i", ",", "...", "]", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "y", ".", "shape", "[", "-", "1", "]", ")", "\n", "y", "=", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "out_n", ",", "outshape_n", ")", "\n", "# need to store in cpu otherwise CUDA OOM", "\n", "return", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaselineLitModel.validation_step": [[56, 64], ["litmodel.BaselineLitModel.loss", "litmodel.BaselineLitModel.log", "torch.enable_grad", "litmodel.BaselineLitModel._backbone"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.loss"], ["        ", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", ".", "backbone", "(", "x", ")", "\n", "loss", "=", "self", ".", "huber_loss", "(", "y_hat", ",", "y", ")", "\n", "self", ".", "log", "(", "'train_loss'", ",", "loss", ",", "on_step", "=", "False", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "sync_dist", "=", "True", ")", "\n", "return", "{", "'loss'", ":", "loss", ",", "'y'", ":", "y", ",", "'y_hat'", ":", "y_hat", "}", "\n", "\n", "", "def", "training_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "if", "self", ".", "current_epoch", "%", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'log_plot'", "]", ")", "==", "0", ":", "\n", "            ", "loss", ",", "y", ",", "y_hat", "=", "outputs", "[", "-", "1", "]", "[", "'loss'", "]", ",", "outputs", "[", "-", "1", "]", "[", "'y'", "]", ",", "outputs", "[", "-", "1", "]", "[", "'y_hat'", "]", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaselineRegLitModel.__init__": [[68, 73], ["litmodel.BaseLitModel.__init__", "model.NeuralODE"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["y", "=", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", "[", "i", ",", "...", "]", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "y", ".", "shape", "[", "-", "1", "]", ")", "\n", "y", "=", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "out_n", ",", "outshape_n", ")", "\n", "\n", "y_hat", "=", "self", ".", "all_gather", "(", "y_hat", ")", "\n", "gpu_n", ",", "batch_n", ",", "out_n", ",", "outshape_n", "=", "y_hat", ".", "shape", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaselineRegLitModel.loss": [[74, 88], ["torch.nn.MSELoss", "litmodel.BaselineRegLitModel._backbone.named_buffers", "torch.eye", "torch.cat", "J.type_as.type_as.type_as", "torch.nn.MSELoss.", "torch.nn.MSELoss.", "int", "torch.transpose", "int", "int"], "methods", ["None"], ["y_hat", "=", "y_hat", ".", "reshape", "(", "y_hat", ".", "shape", "[", "0", "]", ",", "y_hat", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "y_hat", "=", "torch", ".", "cat", "(", "[", "y_hat", "[", "i", ",", "...", "]", "for", "i", "in", "range", "(", "y_hat", ".", "shape", "[", "0", "]", ")", "]", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "y_hat", ".", "shape", "[", "-", "1", "]", ")", "\n", "y_hat", "=", "y_hat", ".", "reshape", "(", "y_hat", ".", "shape", "[", "0", "]", ",", "out_n", ",", "outshape_n", ")", "\n", "\n", "img", "=", "y_hat", "[", "-", "1", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "true_img", "=", "y", "[", "-", "1", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "figs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "img", "[", "i", "]", ",", "label", "=", "'prediction'", ")", "\n", "plt", ".", "plot", "(", "true_img", "[", "i", "]", ",", "label", "=", "'truth'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "figs", ".", "append", "(", "fig", ")", "\n", "", "self", ".", "logger", ".", "experiment", ".", "add_figure", "(", "'training sample 1'", ",", "figs", ",", "self", ".", "current_epoch", ")", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaselineRegLitModel.training_step": [[89, 106], ["litmodel.BaselineRegLitModel._backbone", "litmodel.BaselineRegLitModel.loss", "litmodel.BaselineRegLitModel.log", "litmodel.BaselineRegLitModel.log", "litmodel.BaselineRegLitModel.log"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.loss"], ["\n", "img", "=", "y_hat", "[", "-", "2", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "true_img", "=", "y", "[", "-", "2", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "figs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "img", "[", "i", "]", ",", "label", "=", "'prediction'", ")", "\n", "plt", ".", "plot", "(", "true_img", "[", "i", "]", ",", "label", "=", "'truth'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "figs", ".", "append", "(", "fig", ")", "\n", "", "self", ".", "logger", ".", "experiment", ".", "add_figure", "(", "'training sample 2'", ",", "figs", ",", "self", ".", "current_epoch", ")", "\n", "\n", "", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", ".", "backbone", "(", "x", ")", "\n", "loss", "=", "self", ".", "huber_loss", "(", "y_hat", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.BaselineRegLitModel.validation_step": [[107, 123], ["litmodel.BaselineRegLitModel.loss", "litmodel.BaselineRegLitModel.log", "litmodel.BaselineRegLitModel.log", "litmodel.BaselineRegLitModel.log", "torch.enable_grad", "litmodel.BaselineRegLitModel._backbone"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.loss"], ["self", ".", "log", "(", "'step'", ",", "self", ".", "trainer", ".", "current_epoch", ",", "sync_dist", "=", "True", ")", "# change x-axis from step to epoch", "\n", "self", ".", "log", "(", "'val_loss'", ",", "loss", ",", "on_step", "=", "False", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "sync_dist", "=", "True", ")", "\n", "return", "loss", ",", "y", ",", "y_hat", "\n", "\n", "", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "if", "self", ".", "current_epoch", "%", "int", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'log_plot'", "]", ")", "==", "0", ":", "\n", "            ", "loss", ",", "y", ",", "y_hat", "=", "outputs", "[", "-", "1", "]", "\n", "\n", "y", "=", "self", ".", "all_gather", "(", "y", ")", "\n", "gpu_n", ",", "batch_n", ",", "out_n", ",", "outshape_n", "=", "y", ".", "shape", "\n", "y", "=", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "y", "[", "i", ",", "...", "]", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", "]", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "y", ".", "shape", "[", "-", "1", "]", ")", "\n", "y", "=", "y", ".", "reshape", "(", "y", ".", "shape", "[", "0", "]", ",", "out_n", ",", "outshape_n", ")", "\n", "\n", "y_hat", "=", "self", ".", "all_gather", "(", "y_hat", ")", "\n", "gpu_n", ",", "batch_n", ",", "out_n", ",", "outshape_n", "=", "y_hat", ".", "shape", "\n", "y_hat", "=", "y_hat", ".", "reshape", "(", "y_hat", ".", "shape", "[", "0", "]", ",", "y_hat", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedRegLitModel.loss": [[127, 140], ["torch.nn.MSELoss", "litmodel.DampedRegLitModel._backbone.named_buffers", "torch.view_as_real", "torch.nn.MSELoss.", "torch.nn.MSELoss.", "torch.linalg.eig", "torch.nn.functional.relu", "torch.zeros_like"], "methods", ["None"], ["img", "=", "y_hat", "[", "-", "1", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "true_img", "=", "y", "[", "-", "1", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "figs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "img", "[", "i", "]", ",", "label", "=", "'prediction'", ")", "\n", "plt", ".", "plot", "(", "true_img", "[", "i", "]", ",", "label", "=", "'truth'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "figs", ".", "append", "(", "fig", ")", "\n", "", "self", ".", "logger", ".", "experiment", ".", "add_figure", "(", "'val sample 1'", ",", "figs", ",", "self", ".", "current_epoch", ")", "\n", "\n", "img", "=", "y_hat", "[", "-", "2", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "true_img", "=", "y", "[", "-", "2", ",", "...", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.PixelHNNLitModel.__init__": [[143, 147], ["litmodel.BaselineLitModel.__init__", "model.NeuralODE"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["                ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "img", "[", "i", "]", ",", "label", "=", "'prediction'", ")", "\n", "plt", ".", "plot", "(", "true_img", "[", "i", "]", ",", "label", "=", "'truth'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.PixelHNNLitModel.loss": [[148, 166], ["torch.nn.MSELoss", "litmodel.PixelHNNLitModel._backbone.encode", "litmodel.PixelHNNLitModel._backbone.decode", "litmodel.PixelHNNLitModel._backbone.encode", "torch.split", "torch.split", "torch.nn.MSELoss.", "torch.nn.MSELoss.", "torch.nn.MSELoss.", "torch.randn_like", "litmodel.PixelHNNLitModel._backbone"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.decode", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode"], ["figs", ".", "append", "(", "fig", ")", "\n", "", "self", ".", "logger", ".", "experiment", ".", "add_figure", "(", "'val sample 2'", ",", "figs", ",", "self", ".", "current_epoch", ")", "\n", "\n", "", "", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "y_hat", "=", "self", ".", "backbone", "(", "x", ")", "\n", "loss", "=", "self", ".", "huber_loss", "(", "y_hat", ",", "y", ")", "\n", "self", ".", "log", "(", "'test_loss'", ",", "loss", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "sync_dist", "=", "True", ")", "\n", "\n", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "float", "(", "self", ".", "parser", "[", "'hparams'", "]", "[", "'lr'", "]", ")", ",", "amsgrad", "=", "True", ")", "\n", "return", "optimizer", "\n", "\n", "\n", "", "", "class", "DENSEDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "x", ":", "np", ".", "ndarray", ",", "y", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "labelling", ":", "bool", "=", "False", ")", ":", "\n", "        ", "self", ".", "x", ":", "torch", ".", "Tensor", "=", "torch", ".", "Tensor", "(", "x", ")", "\n", "self", ".", "labelling", ":", "bool", "=", "labelling", "\n", "if", "self", ".", "labelling", "is", "False", ":", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.PixelHNNLitModel.training_step": [[167, 187], ["litmodel.PixelHNNLitModel.loss", "litmodel.PixelHNNLitModel.log", "litmodel.PixelHNNLitModel.log", "litmodel.PixelHNNLitModel.log", "litmodel.PixelHNNLitModel.log"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.loss"], ["            ", "self", ".", "y", ":", "torch", ".", "Tensor", "=", "torch", ".", "Tensor", "(", "y", ")", "\n", "assert", "len", "(", "self", ".", "x", ")", "==", "len", "(", "self", ".", "y", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "x", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "labelling", "is", "False", ":", "\n", "            ", "return", "self", ".", "x", "[", "index", "]", ",", "self", ".", "y", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "x", "[", "index", "]", "\n", "\n", "\n", "", "", "", "class", "DENSEDataModule", "(", "pl", ".", "LightningDataModule", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "x_train", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "x_val", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "x_pred", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "inference_batch_size", ":", "int", "=", "64", ",", "\n", "predict", ":", "bool", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.PixelHNNLitModel.validation_step": [[188, 207], ["litmodel.PixelHNNLitModel.log", "litmodel.PixelHNNLitModel.log", "litmodel.PixelHNNLitModel.log", "litmodel.PixelHNNLitModel.log", "torch.enable_grad", "litmodel.PixelHNNLitModel.loss"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.loss"], ["jobid", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "predict", "is", "False", ":", "\n", "            ", "self", ".", "batch_size", ":", "int", "=", "batch_size", "\n", "assert", "x_train", "is", "not", "None", "\n", "self", ".", "x_train", ":", "DENSEDataset", "=", "DENSEDataset", "(", "x_train", ",", "labelling", "=", "True", ")", "\n", "assert", "x_val", "is", "not", "None", "\n", "self", ".", "x_val", ":", "DENSEDataset", "=", "DENSEDataset", "(", "x_val", ",", "labelling", "=", "True", ")", "\n", "\n", "h5f", "=", "h5py", ".", "File", "(", "'./data/shuffled_data.h5'", ",", "'r'", ")", "\n", "input_train", ":", "np", ".", "ndarray", "=", "h5f", "[", "'train_input'", "]", "[", ":", "]", "\n", "output_train", ":", "np", ".", "ndarray", "=", "h5f", "[", "'train_output'", "]", "[", ":", "]", "\n", "y_val", ":", "np", ".", "ndarray", "=", "h5f", "[", "'val_output'", "]", "[", ":", "]", "\n", "h5f", ".", "close", "(", ")", "\n", "\n", "y_train", "=", "output_train", "[", "np", ".", "flatnonzero", "(", "npi", ".", "contains", "(", "x_train", ",", "input_train", ")", ")", "]", "\n", "x_train", "=", "input_train", "[", "np", ".", "flatnonzero", "(", "npi", ".", "contains", "(", "x_train", ",", "input_train", ")", ")", "]", "\n", "\n", "assert", "x_train", "is", "not", "None", "and", "y_train", "is", "not", "None", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.PixelHNNLitModel.configure_optimizers": [[209, 212], ["torch.optim.Adam", "litmodel.PixelHNNLitModel.parameters"], "methods", ["None"], ["assert", "x_val", "is", "not", "None", "\n", "self", ".", "val_data", ":", "DENSEDataset", "=", "DENSEDataset", "(", "x_val", ",", "y_val", ",", "labelling", "=", "False", ")", "\n", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.PixelRegLitModel.__init__": [[215, 220], ["litmodel.BaselineRegLitModel.__init__", "model.NeuralODE"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], ["self", ".", "pred_data", ":", "DENSEDataset", "=", "DENSEDataset", "(", "x_pred", ",", "labelling", "=", "True", ")", "\n", "\n", "", "", "def", "train_dataloader", "(", "self", ")", "->", "DataLoader", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "train_data", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "def", "val_dataloader", "(", "self", ")", "->", "DataLoader", ":", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.PixelRegLitModel.loss": [[221, 250], ["torch.nn.MSELoss", "litmodel.PixelRegLitModel._backbone.encode", "litmodel.PixelRegLitModel._backbone.decode", "litmodel.PixelRegLitModel._backbone.encode", "torch.split", "torch.split", "litmodel.PixelRegLitModel._backbone.named_buffers", "torch.zeros().type_as", "torch.eye().type_as", "torch.zeros().type_as", "torch.cat().type_as", "torch.nn.MSELoss.", "torch.nn.MSELoss.", "torch.nn.MSELoss.", "torch.nn.MSELoss.", "torch.randn_like", "litmodel.PixelRegLitModel._backbone", "torch.eye().type_as", "torch.zeros", "torch.eye", "torch.zeros", "torch.cat", "torch.transpose", "int", "torch.eye", "int", "int", "int", "int", "int", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.decode", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode"], ["# return DataLoader(self.val_data, batch_size=self.batch_size)", "\n", "        ", "return", "DataLoader", "(", "self", ".", "val_data", ",", "batch_size", "=", "3000", ")", "\n", "\n", "", "def", "predict_dataloader", "(", "self", ")", "->", "DataLoader", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "pred_data", ",", "batch_size", "=", "self", ".", "inference_batch_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.PixelRegLitModel.training_step": [[251, 275], ["litmodel.PixelRegLitModel.loss", "litmodel.PixelRegLitModel.log", "litmodel.PixelRegLitModel.log", "litmodel.PixelRegLitModel.log", "litmodel.PixelRegLitModel.log", "litmodel.PixelRegLitModel.log"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.loss"], []], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.PixelRegLitModel.validation_step": [[276, 299], ["litmodel.PixelRegLitModel.log", "litmodel.PixelRegLitModel.log", "litmodel.PixelRegLitModel.log", "litmodel.PixelRegLitModel.log", "litmodel.PixelRegLitModel.log", "torch.enable_grad", "litmodel.PixelRegLitModel.loss"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.loss"], []], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.PixelRegLitModel.configure_optimizers": [[301, 304], ["torch.optim.Adam", "litmodel.PixelRegLitModel.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__": [[307, 312], ["litmodel.BaselineRegLitModel.__init__", "model.NeuralODE"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.__init__"], []], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.loss": [[313, 337], ["torch.nn.MSELoss", "litmodel.DampedPixelRegLitModel._backbone.encode", "litmodel.DampedPixelRegLitModel._backbone.decode", "litmodel.DampedPixelRegLitModel._backbone.encode", "litmodel.DampedPixelRegLitModel._backbone.named_buffers", "torch.view_as_real", "torch.nn.MSELoss.", "torch.nn.MSELoss.", "torch.nn.MSELoss.", "torch.randn_like", "litmodel.DampedPixelRegLitModel._backbone", "torch.linalg.eig", "torch.nn.functional.relu", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.decode", "home.repos.pwc.inspect_result.machine-discovery_research.constr.model.PixelRegAutoEncoderRedundant.encode"], []], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.training_step": [[338, 358], ["litmodel.DampedPixelRegLitModel.loss", "litmodel.DampedPixelRegLitModel.log", "litmodel.DampedPixelRegLitModel.log", "litmodel.DampedPixelRegLitModel.log", "litmodel.DampedPixelRegLitModel.log"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.loss"], []], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.validation_step": [[359, 378], ["litmodel.DampedPixelRegLitModel.log", "litmodel.DampedPixelRegLitModel.log", "litmodel.DampedPixelRegLitModel.log", "litmodel.DampedPixelRegLitModel.log", "torch.enable_grad", "litmodel.DampedPixelRegLitModel.loss"], "methods", ["home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.loss"], []], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.DampedPixelRegLitModel.configure_optimizers": [[380, 383], ["torch.optim.Adam", "litmodel.DampedPixelRegLitModel.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.machine-discovery_research.constr.litmodel.get_litmodel": [[401, 419], ["model.lower.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.machine-discovery_research.constr.utils.parse_arguments": [[6, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str().lower", "str"], "function", ["None"], ["def", "parse_arguments", "(", ")", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "argparser", ".", "add_argument", "(", "\"--nb_epoch\"", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "\"number of epochs per active learning iteration\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--nb_gpus\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"number of GPUs, -1 to use all GPUs available\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--batch\"", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "\"batch size\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--reg_real\"", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "\"regularisation weight for real part of Jacobian eigenvalue\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--logdir\"", ",", "type", "=", "str", ",", "default", "=", "'./log'", ",", "help", "=", "\"directory to store training information\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--logname\"", ",", "type", "=", "str", ",", "default", "=", "'mass-spring'", ",", "help", "=", "\"training folder name\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--version\"", ",", "type", "=", "str", ",", "default", "=", "'random_version'", ",", "help", "=", "\"training version\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "\"learning rate\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--hmax\"", ",", "type", "=", "float", ",", "default", "=", "1e-1", ",", "help", "=", "\"maximum numerical solver step size\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--solver\"", ",", "type", "=", "str", ",", "default", "=", "'rk4'", ",", "help", "=", "\"rk4 only\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--experiment\"", ",", "type", "=", "str", ",", "default", "=", "\"mass-spring\"", ",", "help", "=", "\"experiment\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--val_seed\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"validation data random seed\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--train_seed\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"training data random seed\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--noiseless\"", ",", "type", "=", "lambda", "x", ":", "(", "str", "(", "x", ")", ".", "lower", "(", ")", "==", "'true'", ")", ",", "default", "=", "False", ",", "help", "=", "\"noiseless or not\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--gradient_clip_val\"", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "\"gradient clipping\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "'baseline'", ",", "help", "=", "\"model\"", ")", "\n", "\n", "global", "CONSOLE_ARGUMENTS", "\n", "CONSOLE_ARGUMENTS", "=", "argparser", ".", "parse_args", "(", ")", "\n", "return", "CONSOLE_ARGUMENTS", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.data.double_pendulum.double_pendulum_dynamics": [[7, 24], ["numpy.split", "numpy.concatenate", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["def", "double_pendulum_dynamics", "(", "t", ":", "Optional", "[", "np", ".", "ndarray", "]", ",", "y0", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "g", "=", "9.8", "\n", "r1", "=", "r2", "=", "m1", "=", "1", "\n", "m2", "=", "1", "\n", "\n", "q", ",", "p", ",", "qt", ",", "pt", "=", "np", ".", "split", "(", "y0", ",", "4", ",", "axis", "=", "-", "1", ")", "\n", "\n", "coef", "=", "r2", "/", "r1", "*", "(", "m2", "/", "(", "m1", "+", "m2", ")", ")", "\n", "a1", "=", "coef", "*", "np", ".", "cos", "(", "q", "-", "p", ")", "\n", "a2", "=", "r1", "/", "r2", "*", "np", ".", "cos", "(", "q", "-", "p", ")", "\n", "f1", "=", "-", "coef", "*", "(", "pt", "**", "2", ")", "*", "np", ".", "sin", "(", "q", "-", "p", ")", "-", "g", "/", "r1", "*", "np", ".", "sin", "(", "q", ")", "\n", "f2", "=", "r1", "/", "r2", "*", "(", "qt", "**", "2", ")", "*", "np", ".", "sin", "(", "q", "-", "p", ")", "-", "g", "/", "r2", "*", "np", ".", "sin", "(", "p", ")", "\n", "\n", "qtt", "=", "(", "f1", "-", "a1", "*", "f2", ")", "/", "(", "1", "-", "a1", "*", "a2", ")", "\n", "ptt", "=", "(", "f2", "-", "a2", "*", "f1", ")", "/", "(", "1", "-", "a1", "*", "a2", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "(", "qt", ",", "pt", ",", "qtt", ",", "ptt", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.data.double_pendulum.general_double_pendulum": [[25, 51], ["numpy.random.seed", "numpy.linspace", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "range", "numpy.random.randn", "scipy.integrate.solve_ivp", "numpy.stack", "np.concatenate.append", "np.concatenate.append", "numpy.allclose", "double_pendulum.double_pendulum_dynamics"], "function", ["home.repos.pwc.inspect_result.machine-discovery_research.data.double_pendulum.double_pendulum_dynamics"], ["", "def", "general_double_pendulum", "(", "t_span", ":", "Tuple", "[", "float", "]", "=", "(", "0", ",", "15", ")", ",", "y0", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "nb_teval", ":", "int", "=", "30", ",", "seed", ":", "int", "=", "1", ",", "nb_samples", ":", "int", "=", "25", ")", "->", "Tuple", "[", "np", ".", "ndarray", "]", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "t_eval", "=", "np", ".", "linspace", "(", "t_span", "[", "0", "]", ",", "t_span", "[", "1", "]", ",", "num", "=", "nb_teval", ")", "\n", "\n", "xs", "=", "[", "]", "\n", "dxs", "=", "[", "]", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "nb_samples", ")", ")", ":", "\n", "        ", "y0", "=", "np", ".", "random", ".", "randn", "(", "4", ")", "\n", "\n", "# get the points along the curve using numerical solver", "\n", "res", "=", "solve_ivp", "(", "double_pendulum_dynamics", ",", "t_span", ",", "y0", ",", "t_eval", "=", "t_eval", ",", "rtol", "=", "1e-10", ",", "atol", "=", "1e-10", ")", "\n", "\n", "# get the gradient of each point obtained", "\n", "grad", "=", "[", "double_pendulum_dynamics", "(", "None", ",", "y", ")", "for", "y", "in", "res", "[", "'y'", "]", ".", "T", "]", "\n", "grad", "=", "np", ".", "stack", "(", "grad", ")", "\n", "\n", "xs", ".", "append", "(", "res", "[", "'y'", "]", ".", "T", ")", "\n", "dxs", ".", "append", "(", "grad", ")", "\n", "assert", "np", ".", "allclose", "(", "grad", "[", ":", ",", ":", "2", "]", ",", "res", "[", "'y'", "]", ".", "T", "[", ":", ",", "2", ":", "]", ")", "\n", "\n", "", "xs", "=", "np", ".", "concatenate", "(", "xs", ")", "\n", "dxs", "=", "np", ".", "concatenate", "(", "dxs", ")", "\n", "\n", "return", "xs", ",", "dxs", "\n", "", ""]], "home.repos.pwc.inspect_result.machine-discovery_research.data.damped_pendulum.damped_pendulum_dynamics": [[6, 12], ["numpy.split", "numpy.concatenate", "numpy.sin"], "function", ["None"], ["def", "damped_pendulum_dynamics", "(", "t", ":", "Optional", "[", "np", ".", "ndarray", "]", ",", "y0", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "g", "=", "1", "\n", "q", ",", "qt", "=", "np", ".", "split", "(", "y0", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "\n", "qtt", "=", "-", "g", "*", "np", ".", "sin", "(", "q", ")", "-", "0.05", "*", "qt", "\n", "return", "np", ".", "concatenate", "(", "(", "qt", ",", "qtt", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.data.damped_pendulum.general_damped_pendulum": [[13, 47], ["numpy.random.seed", "numpy.linspace", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "range", "numpy.random.randn", "scipy.integrate.solve_ivp", "numpy.split", "numpy.sin", "numpy.concatenate", "numpy.concatenate", "np.concatenate.append", "np.concatenate.append", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.random.randn", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "general_damped_pendulum", "(", "t_span", ":", "Tuple", "[", "float", "]", "=", "(", "0", ",", "15", ")", ",", "y0", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "nb_teval", ":", "int", "=", "30", ",", "seed", ":", "int", "=", "1", ",", "nb_samples", ":", "int", "=", "25", ",", "\n", "noiseless", ":", "bool", "=", "False", ")", "->", "Tuple", "[", "np", ".", "ndarray", "]", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "t_eval", "=", "np", ".", "linspace", "(", "t_span", "[", "0", "]", ",", "t_span", "[", "1", "]", ",", "num", "=", "nb_teval", ")", "\n", "\n", "xs", "=", "[", "]", "\n", "dxs", "=", "[", "]", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "nb_samples", ")", ")", ":", "\n", "        ", "y0", "=", "np", ".", "random", ".", "randn", "(", "2", ")", "\n", "\n", "# get the points along the curve using numerical solver", "\n", "res", "=", "solve_ivp", "(", "damped_pendulum_dynamics", ",", "t_span", ",", "y0", ",", "t_eval", "=", "t_eval", ",", "rtol", "=", "1e-10", ")", "\n", "\n", "theta", ",", "omega", "=", "np", ".", "split", "(", "res", "[", "'y'", "]", ".", "T", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "x", "=", "np", ".", "sin", "(", "theta", ")", "\n", "y", "=", "-", "np", ".", "cos", "(", "theta", ")", "\n", "dx", "=", "omega", "*", "np", ".", "cos", "(", "theta", ")", "\n", "dy", "=", "omega", "*", "np", ".", "sin", "(", "theta", ")", "\n", "ddx", "=", "-", "omega", "**", "2", "*", "np", ".", "sin", "(", "theta", ")", "-", "np", ".", "sin", "(", "theta", ")", "*", "np", ".", "cos", "(", "theta", ")", "-", "dx", "*", "0.05", "\n", "ddy", "=", "omega", "**", "2", "*", "np", ".", "cos", "(", "theta", ")", "-", "np", ".", "sin", "(", "theta", ")", "**", "2", "-", "dy", "*", "0.05", "\n", "\n", "inp", "=", "np", ".", "concatenate", "(", "[", "x", ",", "y", ",", "dx", ",", "dy", "]", ",", "axis", "=", "-", "1", ")", "\n", "grad", "=", "np", ".", "concatenate", "(", "[", "dx", ",", "dy", ",", "ddx", ",", "ddy", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "xs", ".", "append", "(", "inp", ")", "\n", "dxs", ".", "append", "(", "grad", ")", "\n", "\n", "", "xs", "=", "np", ".", "concatenate", "(", "xs", ")", "\n", "if", "not", "noiseless", ":", "\n", "        ", "xs", "=", "xs", "+", "np", ".", "random", ".", "randn", "(", "*", "xs", ".", "shape", ")", "*", "0.1", "\n", "", "dxs", "=", "np", ".", "concatenate", "(", "dxs", ")", "\n", "return", "xs", ",", "dxs", "\n", "", ""]], "home.repos.pwc.inspect_result.machine-discovery_research.data.single_pendulum.pendulum_dynamics": [[6, 11], ["numpy.split", "numpy.concatenate", "numpy.sin"], "function", ["None"], ["def", "pendulum_dynamics", "(", "t", ":", "Optional", "[", "np", ".", "ndarray", "]", ",", "y0", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "g", "=", "3", "\n", "q", ",", "qt", "=", "np", ".", "split", "(", "y0", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "qtt", "=", "-", "g", "*", "np", ".", "sin", "(", "q", ")", "\n", "return", "np", ".", "concatenate", "(", "(", "qt", ",", "qtt", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.data.single_pendulum.general_pendulum": [[12, 40], ["numpy.random.seed", "numpy.linspace", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "range", "numpy.random.randn", "scipy.integrate.solve_ivp", "numpy.stack", "np.concatenate.append", "np.concatenate.append", "numpy.allclose", "single_pendulum.pendulum_dynamics", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.machine-discovery_research.data.single_pendulum.pendulum_dynamics"], ["", "def", "general_pendulum", "(", "t_span", ":", "Tuple", "[", "float", "]", "=", "(", "0", ",", "15", ")", ",", "y0", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "nb_teval", ":", "int", "=", "30", ",", "seed", ":", "int", "=", "1", ",", "nb_samples", ":", "int", "=", "25", ",", "\n", "noiseless", ":", "bool", "=", "False", ")", "->", "Tuple", "[", "np", ".", "ndarray", "]", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "t_eval", "=", "np", ".", "linspace", "(", "t_span", "[", "0", "]", ",", "t_span", "[", "1", "]", ",", "num", "=", "nb_teval", ")", "\n", "\n", "xs", "=", "[", "]", "\n", "dxs", "=", "[", "]", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "nb_samples", ")", ")", ":", "\n", "        ", "y0", "=", "np", ".", "random", ".", "randn", "(", "2", ")", "\n", "\n", "# get the points along the curve using numerical solver", "\n", "res", "=", "solve_ivp", "(", "pendulum_dynamics", ",", "t_span", ",", "y0", ",", "t_eval", "=", "t_eval", ",", "rtol", "=", "1e-10", ")", "\n", "\n", "# get the gradient of each point obtained", "\n", "grad", "=", "[", "pendulum_dynamics", "(", "None", ",", "y", ")", "for", "y", "in", "res", "[", "'y'", "]", ".", "T", "]", "\n", "grad", "=", "np", ".", "stack", "(", "grad", ")", "\n", "\n", "xs", ".", "append", "(", "res", "[", "'y'", "]", ".", "T", ")", "\n", "dxs", ".", "append", "(", "grad", ")", "\n", "assert", "np", ".", "allclose", "(", "grad", "[", ":", ",", "0", "]", ",", "res", "[", "'y'", "]", ".", "T", "[", ":", ",", "1", "]", ")", "\n", "\n", "", "xs", "=", "np", ".", "concatenate", "(", "xs", ")", "\n", "if", "not", "noiseless", ":", "\n", "        ", "xs", "=", "xs", "+", "np", ".", "random", ".", "randn", "(", "*", "xs", ".", "shape", ")", "*", "0.1", "\n", "", "dxs", "=", "np", ".", "concatenate", "(", "dxs", ")", "\n", "return", "xs", ",", "dxs", "\n", "", ""]], "home.repos.pwc.inspect_result.machine-discovery_research.data.mass_spring.spring_dynamics": [[6, 11], ["numpy.split", "numpy.concatenate"], "function", ["None"], ["def", "spring_dynamics", "(", "t", ":", "Optional", "[", "np", ".", "ndarray", "]", ",", "y0", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "k", "=", "m", "=", "1", "\n", "q", ",", "qt", "=", "np", ".", "split", "(", "y0", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "qtt", "=", "-", "k", "/", "m", "*", "q", "\n", "return", "np", ".", "concatenate", "(", "(", "qt", ",", "qtt", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-discovery_research.data.mass_spring.general_spring": [[12, 40], ["numpy.random.seed", "numpy.linspace", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "range", "numpy.random.randn", "scipy.integrate.solve_ivp", "numpy.stack", "np.concatenate.append", "np.concatenate.append", "numpy.allclose", "mass_spring.spring_dynamics", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.machine-discovery_research.data.mass_spring.spring_dynamics"], ["", "def", "general_spring", "(", "t_span", ":", "Tuple", "[", "float", "]", "=", "(", "0", ",", "15", ")", ",", "y0", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "nb_teval", ":", "int", "=", "30", ",", "seed", ":", "int", "=", "1", ",", "nb_samples", ":", "int", "=", "25", ",", "\n", "noiseless", ":", "bool", "=", "False", ")", "->", "Tuple", "[", "np", ".", "ndarray", "]", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "t_eval", "=", "np", ".", "linspace", "(", "t_span", "[", "0", "]", ",", "t_span", "[", "1", "]", ",", "num", "=", "nb_teval", ")", "\n", "\n", "xs", "=", "[", "]", "\n", "dxs", "=", "[", "]", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "nb_samples", ")", ")", ":", "\n", "        ", "y0", "=", "np", ".", "random", ".", "randn", "(", "2", ")", "\n", "\n", "# get the points along the curve using numerical solver", "\n", "res", "=", "solve_ivp", "(", "spring_dynamics", ",", "t_span", ",", "y0", ",", "t_eval", "=", "t_eval", ",", "rtol", "=", "1e-10", ")", "\n", "\n", "# get the gradient of each point obtained", "\n", "grad", "=", "[", "spring_dynamics", "(", "None", ",", "y", ")", "for", "y", "in", "res", "[", "'y'", "]", ".", "T", "]", "\n", "grad", "=", "np", ".", "stack", "(", "grad", ")", "\n", "\n", "xs", ".", "append", "(", "res", "[", "'y'", "]", ".", "T", ")", "\n", "dxs", ".", "append", "(", "grad", ")", "\n", "assert", "np", ".", "allclose", "(", "grad", "[", ":", ",", "0", "]", ",", "res", "[", "'y'", "]", ".", "T", "[", ":", ",", "1", "]", ")", "\n", "\n", "", "xs", "=", "np", ".", "concatenate", "(", "xs", ")", "\n", "if", "not", "noiseless", ":", "\n", "        ", "xs", "=", "xs", "+", "np", ".", "random", ".", "randn", "(", "*", "xs", ".", "shape", ")", "*", "0.1", "\n", "", "dxs", "=", "np", ".", "concatenate", "(", "dxs", ")", "\n", "return", "xs", ",", "dxs", "\n", "", ""]]}