{"home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.results_plotter.rolling_window": [[19, 23], ["numpy.lib.stride_tricks.as_strided"], "function", ["None"], ["def", "rolling_window", "(", "a", ",", "window", ")", ":", "\n", "    ", "shape", "=", "a", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "a", ".", "shape", "[", "-", "1", "]", "-", "window", "+", "1", ",", "window", ")", "\n", "strides", "=", "a", ".", "strides", "+", "(", "a", ".", "strides", "[", "-", "1", "]", ",", ")", "\n", "return", "np", ".", "lib", ".", "stride_tricks", ".", "as_strided", "(", "a", ",", "shape", "=", "shape", ",", "strides", "=", "strides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.results_plotter.window_func": [[24, 28], ["results_plotter.rolling_window", "numpy.np.mean"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.results_plotter.rolling_window", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean"], ["", "def", "window_func", "(", "x", ",", "y", ",", "window", ",", "func", ")", ":", "\n", "    ", "yw", "=", "rolling_window", "(", "y", ",", "window", ")", "\n", "yw_func", "=", "func", "(", "yw", ",", "axis", "=", "-", "1", ")", "\n", "return", "x", "[", "window", "-", "1", ":", "]", ",", "yw_func", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.results_plotter.ts2xy": [[29, 42], ["numpy.cumsum", "numpy.arange", "len"], "function", ["None"], ["", "def", "ts2xy", "(", "ts", ",", "xaxis", ")", ":", "\n", "    ", "if", "xaxis", "==", "X_TIMESTEPS", ":", "\n", "        ", "x", "=", "np", ".", "cumsum", "(", "ts", ".", "l", ".", "values", ")", "\n", "y", "=", "ts", ".", "r", ".", "values", "\n", "", "elif", "xaxis", "==", "X_EPISODES", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "len", "(", "ts", ")", ")", "\n", "y", "=", "ts", ".", "r", ".", "values", "\n", "", "elif", "xaxis", "==", "X_WALLTIME", ":", "\n", "        ", "x", "=", "ts", ".", "t", ".", "values", "/", "3600.", "\n", "y", "=", "ts", ".", "r", ".", "values", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.results_plotter.plot_curves": [[43, 57], ["matplotlib.figure", "max", "enumerate", "matplotlib.xlim", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.scatter", "results_plotter.window_func", "matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.results_plotter.window_func"], ["", "def", "plot_curves", "(", "xy_list", ",", "xaxis", ",", "title", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "2", ")", ")", "\n", "maxx", "=", "max", "(", "xy", "[", "0", "]", "[", "-", "1", "]", "for", "xy", "in", "xy_list", ")", "\n", "minx", "=", "0", "\n", "for", "(", "i", ",", "(", "x", ",", "y", ")", ")", "in", "enumerate", "(", "xy_list", ")", ":", "\n", "        ", "color", "=", "COLORS", "[", "i", "]", "\n", "plt", ".", "scatter", "(", "x", ",", "y", ",", "s", "=", "2", ")", "\n", "x", ",", "y_mean", "=", "window_func", "(", "x", ",", "y", ",", "EPISODES_WINDOW", ",", "np", ".", "mean", ")", "#So returns average of last EPISODE_WINDOW episodes", "\n", "plt", ".", "plot", "(", "x", ",", "y_mean", ",", "color", "=", "color", ")", "\n", "", "plt", ".", "xlim", "(", "minx", ",", "maxx", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "xlabel", "(", "xaxis", ")", "\n", "plt", ".", "ylabel", "(", "\"Episode Rewards\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.results_plotter.plot_results": [[58, 66], ["results_plotter.plot_curves", "baselines.bench.monitor.load_results", "tslist.append", "results_plotter.ts2xy", "baselines.bench.monitor.load_results.l.cumsum"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.results_plotter.plot_curves", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.results_plotter.ts2xy"], ["", "def", "plot_results", "(", "dirs", ",", "num_timesteps", ",", "xaxis", ",", "task_name", ")", ":", "\n", "    ", "tslist", "=", "[", "]", "\n", "for", "dir", "in", "dirs", ":", "\n", "        ", "ts", "=", "load_results", "(", "dir", ")", "\n", "ts", "=", "ts", "[", "ts", ".", "l", ".", "cumsum", "(", ")", "<=", "num_timesteps", "]", "\n", "tslist", ".", "append", "(", "ts", ")", "\n", "", "xy_list", "=", "[", "ts2xy", "(", "ts", ",", "xaxis", ")", "for", "ts", "in", "tslist", "]", "\n", "plot_curves", "(", "xy_list", ",", "xaxis", ",", "task_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.results_plotter.main": [[73, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "results_plotter.plot_results", "matplotlib.show", "os.path.abspath", "int"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.results_plotter.plot_results"], ["", "def", "main", "(", ")", ":", "\n", "    ", "import", "argparse", "\n", "import", "os", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--dirs'", ",", "help", "=", "'List of log directories'", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "'./log'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--num_timesteps'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "10e6", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--xaxis'", ",", "help", "=", "'Varible on X-axis'", ",", "default", "=", "X_TIMESTEPS", ")", "\n", "parser", ".", "add_argument", "(", "'--task_name'", ",", "help", "=", "'Title of plot'", ",", "default", "=", "'Breakout'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "dirs", "=", "[", "os", ".", "path", ".", "abspath", "(", "dir", ")", "for", "dir", "in", "args", ".", "dirs", "]", "\n", "plot_results", "(", "args", ".", "dirs", ",", "args", ".", "num_timesteps", ",", "args", ".", "xaxis", ",", "args", ".", "task_name", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.KVWriter.writekvs": [[23, 25], ["None"], "methods", ["None"], ["    ", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.SeqWriter.writeseq": [[27, 29], ["None"], "methods", ["None"], ["    ", "def", "writeseq", "(", "self", ",", "seq", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.HumanOutputFormat.__init__": [[31, 39], ["isinstance", "open", "hasattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename_or_file", ")", ":", "\n", "        ", "if", "isinstance", "(", "filename_or_file", ",", "str", ")", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "filename_or_file", ",", "'wt'", ")", "\n", "self", ".", "own_file", "=", "True", "\n", "", "else", ":", "\n", "            ", "assert", "hasattr", "(", "filename_or_file", ",", "'read'", ")", ",", "'expected file or str, got %s'", "%", "filename_or_file", "\n", "self", ".", "file", "=", "filename_or_file", "\n", "self", ".", "own_file", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.HumanOutputFormat.writekvs": [[40, 73], ["sorted", "sorted", "lines.append", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "kvs.items", "isinstance", "logger.HumanOutputFormat._truncate", "len", "print", "max", "max", "key2str.items", "lines.append", "str", "map", "map", "logger.HumanOutputFormat._truncate", "key2str.keys", "key2str.values", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.HumanOutputFormat._truncate", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.HumanOutputFormat._truncate"], ["", "", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "# Create strings for printing", "\n", "        ", "key2str", "=", "{", "}", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "valstr", "=", "'%-8.3g'", "%", "(", "val", ",", ")", "\n", "", "else", ":", "\n", "                ", "valstr", "=", "str", "(", "val", ")", "\n", "", "key2str", "[", "self", ".", "_truncate", "(", "key", ")", "]", "=", "self", ".", "_truncate", "(", "valstr", ")", "\n", "\n", "# Find max widths", "\n", "", "if", "len", "(", "key2str", ")", "==", "0", ":", "\n", "            ", "print", "(", "'WARNING: tried to write empty key-value dict'", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "keywidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "keys", "(", ")", ")", ")", "\n", "valwidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "values", "(", ")", ")", ")", "\n", "\n", "# Write out the data", "\n", "", "dashes", "=", "'-'", "*", "(", "keywidth", "+", "valwidth", "+", "7", ")", "\n", "lines", "=", "[", "dashes", "]", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "key2str", ".", "items", "(", ")", ")", ":", "\n", "            ", "lines", ".", "append", "(", "'| %s%s | %s%s |'", "%", "(", "\n", "key", ",", "\n", "' '", "*", "(", "keywidth", "-", "len", "(", "key", ")", ")", ",", "\n", "val", ",", "\n", "' '", "*", "(", "valwidth", "-", "len", "(", "val", ")", ")", ",", "\n", ")", ")", "\n", "", "lines", ".", "append", "(", "dashes", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\n'", ".", "join", "(", "lines", ")", "+", "'\\n'", ")", "\n", "\n", "# Flush the output to the file", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.HumanOutputFormat._truncate": [[74, 76], ["len"], "methods", ["None"], ["", "def", "_truncate", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "s", "[", ":", "20", "]", "+", "'...'", "if", "len", "(", "s", ")", ">", "23", "else", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.HumanOutputFormat.writeseq": [[77, 82], ["logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "logger.HumanOutputFormat.file.write"], "methods", ["None"], ["", "def", "writeseq", "(", "self", ",", "seq", ")", ":", "\n", "        ", "for", "arg", "in", "seq", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "arg", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.HumanOutputFormat.close": [[83, 86], ["logger.HumanOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "own_file", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.JSONOutputFormat.__init__": [[88, 90], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "filename", ",", "'wt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.JSONOutputFormat.writekvs": [[91, 98], ["sorted", "logger.JSONOutputFormat.file.write", "logger.JSONOutputFormat.file.flush", "kvs.items", "hasattr", "v.tolist.tolist.tolist", "float", "json.dumps"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "'dtype'", ")", ":", "\n", "                ", "v", "=", "v", ".", "tolist", "(", ")", "\n", "kvs", "[", "k", "]", "=", "float", "(", "v", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "json", ".", "dumps", "(", "kvs", ")", "+", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.JSONOutputFormat.close": [[99, 101], ["logger.JSONOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.CSVOutputFormat.__init__": [[103, 107], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "filename", ",", "'w+t'", ")", "\n", "self", ".", "keys", "=", "[", "]", "\n", "self", ".", "sep", "=", "','", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.CSVOutputFormat.writekvs": [[108, 133], ["enumerate", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.flush", "kvs.keys", "logger.CSVOutputFormat.keys.extend", "logger.CSVOutputFormat.file.seek", "logger.CSVOutputFormat.file.readlines", "logger.CSVOutputFormat.file.seek", "enumerate", "logger.CSVOutputFormat.file.write", "kvs.get", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "str", "len"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "# Add our current row to the history", "\n", "        ", "extra_keys", "=", "kvs", ".", "keys", "(", ")", "-", "self", ".", "keys", "\n", "if", "extra_keys", ":", "\n", "            ", "self", ".", "keys", ".", "extend", "(", "extra_keys", ")", "\n", "self", ".", "file", ".", "seek", "(", "0", ")", "\n", "lines", "=", "self", ".", "file", ".", "readlines", "(", ")", "\n", "self", ".", "file", ".", "seek", "(", "0", ")", "\n", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "self", ".", "keys", ")", ":", "\n", "                ", "if", "i", ">", "0", ":", "\n", "                    ", "self", ".", "file", ".", "write", "(", "','", ")", "\n", "", "self", ".", "file", ".", "write", "(", "k", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "line", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "file", ".", "write", "(", "self", ".", "sep", "*", "len", "(", "extra_keys", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "", "", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "self", ".", "keys", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "','", ")", "\n", "", "v", "=", "kvs", ".", "get", "(", "k", ")", "\n", "if", "v", "is", "not", "None", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "str", "(", "v", ")", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.CSVOutputFormat.close": [[134, 136], ["logger.CSVOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.TensorBoardOutputFormat.__init__": [[142, 156], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.join", "os.join", "pywrap_tensorflow.EventsWriter", "os.abspath", "os.abspath", "compat.as_bytes"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "step", "=", "1", "\n", "prefix", "=", "'events'", "\n", "path", "=", "osp", ".", "join", "(", "osp", ".", "abspath", "(", "dir", ")", ",", "prefix", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "python", "import", "pywrap_tensorflow", "\n", "from", "tensorflow", ".", "core", ".", "util", "import", "event_pb2", "\n", "from", "tensorflow", ".", "python", ".", "util", "import", "compat", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "event_pb2", "=", "event_pb2", "\n", "self", ".", "pywrap_tensorflow", "=", "pywrap_tensorflow", "\n", "self", ".", "writer", "=", "pywrap_tensorflow", ".", "EventsWriter", "(", "compat", ".", "as_bytes", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.TensorBoardOutputFormat.writekvs": [[157, 167], ["logger.TensorBoardOutputFormat.tf.Summary", "logger.TensorBoardOutputFormat.event_pb2.Event", "logger.TensorBoardOutputFormat.writer.WriteEvent", "logger.TensorBoardOutputFormat.writer.Flush", "logger.TensorBoardOutputFormat.tf.Summary.Value", "float", "time.time", "logger.TensorBoardOutputFormat.writekvs.summary_val"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "def", "summary_val", "(", "k", ",", "v", ")", ":", "\n", "            ", "kwargs", "=", "{", "'tag'", ":", "k", ",", "'simple_value'", ":", "float", "(", "v", ")", "}", "\n", "return", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "**", "kwargs", ")", "\n", "", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "summary_val", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "kvs", ".", "items", "(", ")", "]", ")", "\n", "event", "=", "self", ".", "event_pb2", ".", "Event", "(", "wall_time", "=", "time", ".", "time", "(", ")", ",", "summary", "=", "summary", ")", "\n", "event", ".", "step", "=", "self", ".", "step", "# is there any reason why you'd want to specify the step?", "\n", "self", ".", "writer", ".", "WriteEvent", "(", "event", ")", "\n", "self", ".", "writer", ".", "Flush", "(", ")", "\n", "self", ".", "step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.TensorBoardOutputFormat.close": [[168, 172], ["logger.TensorBoardOutputFormat.writer.Close"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "writer", ":", "\n", "            ", "self", ".", "writer", ".", "Close", "(", ")", "\n", "self", ".", "writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.ProfileKV.__init__": [[267, 269], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "n", "=", "\"wait_\"", "+", "n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.ProfileKV.__enter__": [[269, 271], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t1", "=", "time", ".", "time", "(", ")", "\n", "", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.ProfileKV.__exit__": [[271, 273], ["time.time"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "Logger", ".", "CURRENT", ".", "name2val", "[", "self", ".", "n", "]", "+=", "time", ".", "time", "(", ")", "-", "self", ".", "t1", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.Logger.__init__": [[297, 303], ["collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dir", ",", "output_formats", ")", ":", "\n", "        ", "self", ".", "name2val", "=", "defaultdict", "(", "float", ")", "# values this iteration", "\n", "self", ".", "name2cnt", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "level", "=", "INFO", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "output_formats", "=", "output_formats", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.Logger.logkv": [[306, 308], ["None"], "methods", ["None"], ["", "def", "logkv", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "self", ".", "name2val", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.Logger.logkv_mean": [[309, 316], ["None"], "methods", ["None"], ["", "def", "logkv_mean", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "if", "val", "is", "None", ":", "\n", "            ", "self", ".", "name2val", "[", "key", "]", "=", "None", "\n", "return", "\n", "", "oldval", ",", "cnt", "=", "self", ".", "name2val", "[", "key", "]", ",", "self", ".", "name2cnt", "[", "key", "]", "\n", "self", ".", "name2val", "[", "key", "]", "=", "oldval", "*", "cnt", "/", "(", "cnt", "+", "1", ")", "+", "val", "/", "(", "cnt", "+", "1", ")", "\n", "self", ".", "name2cnt", "[", "key", "]", "=", "cnt", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.Logger.dumpkvs": [[317, 324], ["logger.Logger.name2val.clear", "logger.Logger.name2cnt.clear", "isinstance", "fmt.writekvs"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.TensorBoardOutputFormat.writekvs"], ["", "def", "dumpkvs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "level", "==", "DISABLED", ":", "return", "\n", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "if", "isinstance", "(", "fmt", ",", "KVWriter", ")", ":", "\n", "                ", "fmt", ".", "writekvs", "(", "self", ".", "name2val", ")", "\n", "", "", "self", ".", "name2val", ".", "clear", "(", ")", "\n", "self", ".", "name2cnt", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.Logger.log": [[325, 328], ["logger.Logger._do_log"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.Logger._do_log"], ["", "def", "log", "(", "self", ",", "*", "args", ",", "level", "=", "INFO", ")", ":", "\n", "        ", "if", "self", ".", "level", "<=", "level", ":", "\n", "            ", "self", ".", "_do_log", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.Logger.set_level": [[331, 333], ["None"], "methods", ["None"], ["", "", "def", "set_level", "(", "self", ",", "level", ")", ":", "\n", "        ", "self", ".", "level", "=", "level", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.Logger.get_dir": [[334, 336], ["None"], "methods", ["None"], ["", "def", "get_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.Logger.close": [[337, 340], ["fmt.close"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "fmt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.Logger._do_log": [[343, 347], ["isinstance", "fmt.writeseq", "map"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.HumanOutputFormat.writeseq"], ["", "", "def", "_do_log", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "if", "isinstance", "(", "fmt", ",", "SeqWriter", ")", ":", "\n", "                ", "fmt", ".", "writeseq", "(", "map", "(", "str", ",", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.scoped_configure.__init__": [[385, 389], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dir", "=", "None", ",", "format_strs", "=", "None", ")", ":", "\n", "        ", "self", ".", "dir", "=", "dir", "\n", "self", ".", "format_strs", "=", "format_strs", "\n", "self", ".", "prevlogger", "=", "None", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.scoped_configure.__enter__": [[389, 392], ["logger.configure"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.configure"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "prevlogger", "=", "Logger", ".", "CURRENT", "\n", "configure", "(", "dir", "=", "self", ".", "dir", ",", "format_strs", "=", "self", ".", "format_strs", ")", "\n", "", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.scoped_configure.__exit__": [[392, 395], ["Logger.CURRENT.close"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "Logger", ".", "CURRENT", ".", "close", "(", ")", "\n", "Logger", ".", "CURRENT", "=", "self", ".", "prevlogger", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.make_output_format": [[173, 187], ["os.makedirs", "os.makedirs", "logger.HumanOutputFormat", "logger.HumanOutputFormat", "os.join", "logger.JSONOutputFormat", "os.join", "logger.CSVOutputFormat", "os.join", "logger.TensorBoardOutputFormat", "ValueError", "os.join"], "function", ["None"], ["", "", "", "def", "make_output_format", "(", "format", ",", "ev_dir", ",", "log_suffix", "=", "''", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "ev_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "format", "==", "'stdout'", ":", "\n", "        ", "return", "HumanOutputFormat", "(", "sys", ".", "stdout", ")", "\n", "", "elif", "format", "==", "'log'", ":", "\n", "        ", "return", "HumanOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'log%s.txt'", "%", "log_suffix", ")", ")", "\n", "", "elif", "format", "==", "'json'", ":", "\n", "        ", "return", "JSONOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'progress%s.json'", "%", "log_suffix", ")", ")", "\n", "", "elif", "format", "==", "'csv'", ":", "\n", "        ", "return", "CSVOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'progress%s.csv'", "%", "log_suffix", ")", ")", "\n", "", "elif", "format", "==", "'tensorboard'", ":", "\n", "        ", "return", "TensorBoardOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'tb%s'", "%", "log_suffix", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown format specified: %s'", "%", "(", "format", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv": [[192, 199], ["Logger.CURRENT.logkv"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv"], ["", "", "def", "logkv", "(", "key", ",", "val", ")", ":", "\n", "    ", "\"\"\"\n    Log a value of some diagnostic\n    Call this once for each diagnostic quantity, each iteration\n    If called many times, last value will be used.\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "logkv", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv_mean": [[200, 205], ["Logger.CURRENT.logkv_mean"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv_mean"], ["", "def", "logkv_mean", "(", "key", ",", "val", ")", ":", "\n", "    ", "\"\"\"\n    The same as logkv(), but if called many times, values averaged.\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "logkv_mean", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkvs": [[206, 212], ["d.items", "logger.logkv"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv"], ["", "def", "logkvs", "(", "d", ")", ":", "\n", "    ", "\"\"\"\n    Log a dictionary of key-value pairs\n    \"\"\"", "\n", "for", "(", "k", ",", "v", ")", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "logkv", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.dumpkvs": [[213, 221], ["Logger.CURRENT.dumpkvs"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.dumpkvs"], ["", "", "def", "dumpkvs", "(", ")", ":", "\n", "    ", "\"\"\"\n    Write all of the diagnostics from the current iteration\n\n    level: int. (see logger.py docs) If the global logger level is higher than\n                the level argument here, don't print to stdout.\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "dumpkvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.getkvs": [[222, 224], ["None"], "function", ["None"], ["", "def", "getkvs", "(", ")", ":", "\n", "    ", "return", "Logger", ".", "CURRENT", ".", "name2val", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log": [[226, 231], ["Logger.CURRENT.log"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log"], ["", "def", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Write the sequence of args, with no separators, to the console and output files (if you've configured an output file).\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "log", "(", "*", "args", ",", "level", "=", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.debug": [[232, 234], ["logger.log"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log"], ["", "def", "debug", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "DEBUG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.info": [[235, 237], ["logger.log"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log"], ["", "def", "info", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.warn": [[238, 240], ["logger.log"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log"], ["", "def", "warn", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "WARN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.error": [[241, 243], ["logger.log"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log"], ["", "def", "error", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "ERROR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.set_level": [[245, 250], ["Logger.CURRENT.set_level"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.set_level"], ["", "def", "set_level", "(", "level", ")", ":", "\n", "    ", "\"\"\"\n    Set logging threshold on current logger.\n    \"\"\"", "\n", "Logger", ".", "CURRENT", ".", "set_level", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.get_dir": [[251, 257], ["Logger.CURRENT.get_dir"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.get_dir"], ["", "def", "get_dir", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get directory that log files are being written to.\n    will be None if there is no output directory (i.e., if you didn't call start)\n    \"\"\"", "\n", "return", "Logger", ".", "CURRENT", ".", "get_dir", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.profile": [[274, 286], ["logger.ProfileKV", "func"], "function", ["None"], ["", "", "def", "profile", "(", "n", ")", ":", "\n", "    ", "\"\"\"\n    Usage:\n    @profile(\"my_func\")\n    def my_func(): code\n    \"\"\"", "\n", "def", "decorator_with_name", "(", "func", ")", ":", "\n", "        ", "def", "func_wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "with", "ProfileKV", "(", "n", ")", ":", "\n", "                ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "func_wrapper", "\n", "", "return", "decorator_with_name", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.configure": [[350, 377], ["isinstance", "os.makedirs", "os.makedirs", "MPI.COMM_WORLD.Get_rank", "logger.Logger", "logger.log", "os.getenv", "os.getenv", "os.join", "logger.make_output_format", "tempfile.gettempdir", "datetime.datetime.now().strftime", "os.getenv", "os.getenv", "os.getenv", "os.getenv", "format_strs.split.split", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.make_output_format"], ["def", "configure", "(", "dir", "=", "None", ",", "format_strs", "=", "None", ")", ":", "\n", "    ", "if", "dir", "is", "None", ":", "\n", "        ", "dir", "=", "os", ".", "getenv", "(", "'OPENAI_LOGDIR'", ")", "\n", "", "if", "dir", "is", "None", ":", "\n", "        ", "dir", "=", "osp", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "\n", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"openai-%Y-%m-%d-%H-%M-%S-%f\"", ")", ")", "\n", "", "assert", "isinstance", "(", "dir", ",", "str", ")", "\n", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "log_suffix", "=", "''", "\n", "from", "mpi4py", "import", "MPI", "\n", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "if", "rank", ">", "0", ":", "\n", "        ", "log_suffix", "=", "\"-rank%03i\"", "%", "rank", "\n", "\n", "", "if", "format_strs", "is", "None", ":", "\n", "        ", "strs", ",", "strs_mpi", "=", "os", ".", "getenv", "(", "'OPENAI_LOG_FORMAT'", ")", ",", "os", ".", "getenv", "(", "'OPENAI_LOG_FORMAT_MPI'", ")", "\n", "format_strs", "=", "strs_mpi", "if", "rank", ">", "0", "else", "strs", "\n", "if", "format_strs", "is", "not", "None", ":", "\n", "            ", "format_strs", "=", "format_strs", ".", "split", "(", "','", ")", "\n", "", "else", ":", "\n", "            ", "format_strs", "=", "LOG_OUTPUT_FORMATS_MPI", "if", "rank", ">", "0", "else", "LOG_OUTPUT_FORMATS", "\n", "\n", "", "", "output_formats", "=", "[", "make_output_format", "(", "f", ",", "dir", ",", "log_suffix", ")", "for", "f", "in", "format_strs", "]", "\n", "\n", "Logger", ".", "CURRENT", "=", "Logger", "(", "dir", "=", "dir", ",", "output_formats", "=", "output_formats", ")", "\n", "log", "(", "'Logging to %s'", "%", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.reset": [[378, 383], ["Logger.CURRENT.close", "logger.log"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "if", "Logger", ".", "CURRENT", "is", "not", "Logger", ".", "DEFAULT", ":", "\n", "        ", "Logger", ".", "CURRENT", ".", "close", "(", ")", "\n", "Logger", ".", "CURRENT", "=", "Logger", ".", "DEFAULT", "\n", "log", "(", "'Reset logger'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger._demo": [[398, 425], ["logger.info", "logger.debug", "logger.set_level", "logger.debug", "os.path.exists", "os.path.exists", "logger.configure", "logger.logkv", "logger.logkv", "logger.dumpkvs", "logger.logkv", "logger.logkv", "logger.dumpkvs", "logger.info", "logger.logkv_mean", "logger.logkv_mean", "logger.logkv", "logger.dumpkvs", "logger.info", "logger.logkv", "logger.dumpkvs", "logger.logkv", "logger.dumpkvs", "shutil.rmtree"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.info", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.debug", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.set_level", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.debug", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.configure", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.info", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv_mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv_mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.info", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.dumpkvs", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.logkv", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.dumpkvs"], ["", "", "def", "_demo", "(", ")", ":", "\n", "    ", "info", "(", "\"hi\"", ")", "\n", "debug", "(", "\"shouldn't appear\"", ")", "\n", "set_level", "(", "DEBUG", ")", "\n", "debug", "(", "\"should appear\"", ")", "\n", "dir", "=", "\"/tmp/testlogging\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "dir", ")", "\n", "", "configure", "(", "dir", "=", "dir", ")", "\n", "logkv", "(", "\"a\"", ",", "3", ")", "\n", "logkv", "(", "\"b\"", ",", "2.5", ")", "\n", "dumpkvs", "(", ")", "\n", "logkv", "(", "\"b\"", ",", "-", "2.5", ")", "\n", "logkv", "(", "\"a\"", ",", "5.5", ")", "\n", "dumpkvs", "(", ")", "\n", "info", "(", "\"^^^ should see a = 5.5\"", ")", "\n", "logkv_mean", "(", "\"b\"", ",", "-", "22.5", ")", "\n", "logkv_mean", "(", "\"b\"", ",", "-", "44.4", ")", "\n", "logkv", "(", "\"a\"", ",", "5.5", ")", "\n", "dumpkvs", "(", ")", "\n", "info", "(", "\"^^^ should see b = 33.3\"", ")", "\n", "\n", "logkv", "(", "\"b\"", ",", "-", "2.5", ")", "\n", "dumpkvs", "(", ")", "\n", "\n", "logkv", "(", "\"a\"", ",", "\"longasslongasslongasslongasslongasslongassvalue\"", ")", "\n", "dumpkvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.read_json": [[431, 438], ["pandas.DataFrame", "open", "ds.append", "json.loads"], "function", ["None"], ["", "def", "read_json", "(", "fname", ")", ":", "\n", "    ", "import", "pandas", "\n", "ds", "=", "[", "]", "\n", "with", "open", "(", "fname", ",", "'rt'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "ds", ".", "append", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "", "", "return", "pandas", ".", "DataFrame", "(", "ds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.read_csv": [[439, 442], ["pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.read_csv"], ["", "def", "read_csv", "(", "fname", ")", ":", "\n", "    ", "import", "pandas", "\n", "return", "pandas", ".", "read_csv", "(", "fname", ",", "index_col", "=", "None", ",", "comment", "=", "'#'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.read_tb": [[443, 476], ["os.isdir", "collections.defaultdict", "np.empty", "sorted", "enumerate", "pandas.DataFrame", "glob", "os.basename().startswith", "tf.train.summary_iterator", "collections.defaultdict.keys", "os.join", "NotImplementedError", "len", "os.basename", "max", "tag2pairs[].append"], "function", ["None"], ["", "def", "read_tb", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    path : a tensorboard file OR a directory, where we will find all TB files\n           of the form events.*\n    \"\"\"", "\n", "import", "pandas", "\n", "import", "numpy", "as", "np", "\n", "from", "glob", "import", "glob", "\n", "from", "collections", "import", "defaultdict", "\n", "import", "tensorflow", "as", "tf", "\n", "if", "osp", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "fnames", "=", "glob", "(", "osp", ".", "join", "(", "path", ",", "\"events.*\"", ")", ")", "\n", "", "elif", "osp", ".", "basename", "(", "path", ")", ".", "startswith", "(", "\"events.\"", ")", ":", "\n", "        ", "fnames", "=", "[", "path", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Expected tensorboard file or directory containing them. Got %s\"", "%", "path", ")", "\n", "", "tag2pairs", "=", "defaultdict", "(", "list", ")", "\n", "maxstep", "=", "0", "\n", "for", "fname", "in", "fnames", ":", "\n", "        ", "for", "summary", "in", "tf", ".", "train", ".", "summary_iterator", "(", "fname", ")", ":", "\n", "            ", "if", "summary", ".", "step", ">", "0", ":", "\n", "                ", "for", "v", "in", "summary", ".", "summary", ".", "value", ":", "\n", "                    ", "pair", "=", "(", "summary", ".", "step", ",", "v", ".", "simple_value", ")", "\n", "tag2pairs", "[", "v", ".", "tag", "]", ".", "append", "(", "pair", ")", "\n", "", "maxstep", "=", "max", "(", "summary", ".", "step", ",", "maxstep", ")", "\n", "", "", "", "data", "=", "np", ".", "empty", "(", "(", "maxstep", ",", "len", "(", "tag2pairs", ")", ")", ")", "\n", "data", "[", ":", "]", "=", "np", ".", "nan", "\n", "tags", "=", "sorted", "(", "tag2pairs", ".", "keys", "(", ")", ")", "\n", "for", "(", "colidx", ",", "tag", ")", "in", "enumerate", "(", "tags", ")", ":", "\n", "        ", "pairs", "=", "tag2pairs", "[", "tag", "]", "\n", "for", "(", "step", ",", "value", ")", "in", "pairs", ":", "\n", "            ", "data", "[", "step", "-", "1", ",", "colidx", "]", "=", "value", "\n", "", "", "return", "pandas", ".", "DataFrame", "(", "data", ",", "columns", "=", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.__init__": [[11, 47], ["collections.deque", "collections.deque", "numpy.empty", "numpy.empty", "numpy.empty", "rollout.RolloutWorker.reset_all_rollouts", "rollout.RolloutWorker.clear_history", "make_env", "key.replace", "range", "dims.keys", "key.startswith"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.reset_all_rollouts", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.clear_history"], ["    ", "@", "store_args", "\n", "def", "__init__", "(", "self", ",", "make_env", ",", "policy", ",", "dims", ",", "logger", ",", "T", ",", "rollout_batch_size", "=", "1", ",", "\n", "exploit", "=", "False", ",", "use_target_net", "=", "False", ",", "compute_Q", "=", "False", ",", "noise_eps", "=", "0", ",", "\n", "random_eps", "=", "0", ",", "history_len", "=", "100", ",", "render", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Rollout worker generates experience by interacting with one or many environments.\n\n        Args:\n            make_env (function): a factory function that creates a new instance of the environment\n                when called\n            policy (object): the policy that is used to act\n            dims (dict of ints): the dimensions for observations (o), goals (g), and actions (u)\n            logger (object): the logger that is used by the rollout worker\n            rollout_batch_size (int): the number of parallel rollouts that should be used\n            exploit (boolean): whether or not to exploit, i.e. to act optimally according to the\n                current policy without any exploration\n            use_target_net (boolean): whether or not to use the target net for rollouts\n            compute_Q (boolean): whether or not to compute the Q values alongside the actions\n            noise_eps (float): scale of the additive Gaussian noise\n            random_eps (float): probability of selecting a completely random action\n            history_len (int): length of history for statistics smoothing\n            render (boolean): whether or not to render the rollouts\n        \"\"\"", "\n", "self", ".", "envs", "=", "[", "make_env", "(", ")", "for", "_", "in", "range", "(", "rollout_batch_size", ")", "]", "\n", "assert", "self", ".", "T", ">", "0", "\n", "\n", "self", ".", "info_keys", "=", "[", "key", ".", "replace", "(", "'info_'", ",", "''", ")", "for", "key", "in", "dims", ".", "keys", "(", ")", "if", "key", ".", "startswith", "(", "'info_'", ")", "]", "\n", "\n", "self", ".", "success_history", "=", "deque", "(", "maxlen", "=", "history_len", ")", "\n", "self", ".", "Q_history", "=", "deque", "(", "maxlen", "=", "history_len", ")", "\n", "\n", "self", ".", "n_episodes", "=", "0", "\n", "self", ".", "g", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'g'", "]", ")", ",", "np", ".", "float32", ")", "# goals", "\n", "self", ".", "initial_o", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'o'", "]", ")", ",", "np", ".", "float32", ")", "# observations", "\n", "self", ".", "initial_ag", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'g'", "]", ")", ",", "np", ".", "float32", ")", "# achieved goals", "\n", "self", ".", "reset_all_rollouts", "(", ")", "\n", "self", ".", "clear_history", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.reset_rollout": [[48, 56], ["rollout.RolloutWorker.envs[].reset"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "reset_rollout", "(", "self", ",", "i", ")", ":", "\n", "        ", "\"\"\"Resets the `i`-th rollout environment, re-samples a new goal, and updates the `initial_o`\n        and `g` arrays accordingly.\n        \"\"\"", "\n", "obs", "=", "self", ".", "envs", "[", "i", "]", ".", "reset", "(", ")", "\n", "self", ".", "initial_o", "[", "i", "]", "=", "obs", "[", "'observation'", "]", "\n", "self", ".", "initial_ag", "[", "i", "]", "=", "obs", "[", "'achieved_goal'", "]", "\n", "self", ".", "g", "[", "i", "]", "=", "obs", "[", "'desired_goal'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.reset_all_rollouts": [[57, 62], ["range", "rollout.RolloutWorker.reset_rollout"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.reset_rollout"], ["", "def", "reset_all_rollouts", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets all `rollout_batch_size` rollout workers.\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "rollout_batch_size", ")", ":", "\n", "            ", "self", ".", "reset_rollout", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.generate_rollouts": [[63, 151], ["rollout.RolloutWorker.reset_all_rollouts", "numpy.empty", "numpy.empty", "range", "obs.append", "achieved_goals.append", "[].copy", "dict", "zip", "numpy.mean", "rollout.RolloutWorker.success_history.append", "baselines.her.util.convert_episode_to_batch_major", "numpy.empty", "rollout.RolloutWorker.policy.get_actions", "numpy.empty", "numpy.empty", "numpy.zeros", "range", "numpy.isnan().any", "obs.append", "achieved_goals.append", "successes.append", "acts.append", "goals.append", "numpy.empty.copy", "numpy.empty.copy", "rollout.RolloutWorker.Q_history.append", "Qs.append", "u.reshape.reshape.reshape", "rollout.RolloutWorker.logger.warning", "rollout.RolloutWorker.reset_all_rollouts", "rollout.RolloutWorker.generate_rollouts", "numpy.empty.copy", "numpy.empty.copy", "numpy.zeros.copy", "u.reshape.reshape.copy", "rollout.RolloutWorker.g.copy", "numpy.mean", "rollout.RolloutWorker.envs[].step", "enumerate", "numpy.isnan", "numpy.array", "rollout.RolloutWorker.envs[].render", "rollout.RolloutWorker.generate_rollouts"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.reset_all_rollouts", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.convert_episode_to_batch_major", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.get_actions", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.reset_all_rollouts", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.render", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.generate_rollouts"], ["", "", "def", "generate_rollouts", "(", "self", ")", ":", "\n", "        ", "\"\"\"Performs `rollout_batch_size` rollouts in parallel for time horizon `T` with the current\n        policy acting on it accordingly.\n        \"\"\"", "\n", "self", ".", "reset_all_rollouts", "(", ")", "\n", "\n", "# compute observations", "\n", "o", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'o'", "]", ")", ",", "np", ".", "float32", ")", "# observations", "\n", "ag", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'g'", "]", ")", ",", "np", ".", "float32", ")", "# achieved goals", "\n", "o", "[", ":", "]", "=", "self", ".", "initial_o", "\n", "ag", "[", ":", "]", "=", "self", ".", "initial_ag", "\n", "\n", "# generate episodes", "\n", "obs", ",", "achieved_goals", ",", "acts", ",", "goals", ",", "successes", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "info_values", "=", "[", "np", ".", "empty", "(", "(", "self", ".", "T", ",", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'info_'", "+", "key", "]", ")", ",", "np", ".", "float32", ")", "for", "key", "in", "self", ".", "info_keys", "]", "\n", "Qs", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "            ", "policy_output", "=", "self", ".", "policy", ".", "get_actions", "(", "\n", "o", ",", "ag", ",", "self", ".", "g", ",", "\n", "compute_Q", "=", "self", ".", "compute_Q", ",", "\n", "noise_eps", "=", "self", ".", "noise_eps", "if", "not", "self", ".", "exploit", "else", "0.", ",", "\n", "random_eps", "=", "self", ".", "random_eps", "if", "not", "self", ".", "exploit", "else", "0.", ",", "\n", "use_target_net", "=", "self", ".", "use_target_net", ")", "\n", "\n", "if", "self", ".", "compute_Q", ":", "\n", "                ", "u", ",", "Q", "=", "policy_output", "\n", "Qs", ".", "append", "(", "Q", ")", "\n", "", "else", ":", "\n", "                ", "u", "=", "policy_output", "\n", "\n", "", "if", "u", ".", "ndim", "==", "1", ":", "\n", "# The non-batched case should still have a reasonable shape.", "\n", "                ", "u", "=", "u", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "", "o_new", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'o'", "]", ")", ")", "\n", "ag_new", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'g'", "]", ")", ")", "\n", "success", "=", "np", ".", "zeros", "(", "self", ".", "rollout_batch_size", ")", "\n", "# compute new states and observations", "\n", "for", "i", "in", "range", "(", "self", ".", "rollout_batch_size", ")", ":", "\n", "                ", "try", ":", "\n", "# We fully ignore the reward here because it will have to be re-computed", "\n", "# for HER.", "\n", "                    ", "curr_o_new", ",", "_", ",", "_", ",", "info", "=", "self", ".", "envs", "[", "i", "]", ".", "step", "(", "u", "[", "i", "]", ")", "\n", "if", "'is_success'", "in", "info", ":", "\n", "                        ", "success", "[", "i", "]", "=", "info", "[", "'is_success'", "]", "\n", "", "o_new", "[", "i", "]", "=", "curr_o_new", "[", "'observation'", "]", "\n", "ag_new", "[", "i", "]", "=", "curr_o_new", "[", "'achieved_goal'", "]", "\n", "for", "idx", ",", "key", "in", "enumerate", "(", "self", ".", "info_keys", ")", ":", "\n", "                        ", "info_values", "[", "idx", "]", "[", "t", ",", "i", "]", "=", "info", "[", "key", "]", "\n", "", "if", "self", ".", "render", ":", "\n", "                        ", "self", ".", "envs", "[", "i", "]", ".", "render", "(", ")", "\n", "", "", "except", "MujocoException", "as", "e", ":", "\n", "                    ", "return", "self", ".", "generate_rollouts", "(", ")", "\n", "\n", "", "", "if", "np", ".", "isnan", "(", "o_new", ")", ".", "any", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "'NaN caught during rollout generation. Trying again...'", ")", "\n", "self", ".", "reset_all_rollouts", "(", ")", "\n", "return", "self", ".", "generate_rollouts", "(", ")", "\n", "\n", "", "obs", ".", "append", "(", "o", ".", "copy", "(", ")", ")", "\n", "achieved_goals", ".", "append", "(", "ag", ".", "copy", "(", ")", ")", "\n", "successes", ".", "append", "(", "success", ".", "copy", "(", ")", ")", "\n", "acts", ".", "append", "(", "u", ".", "copy", "(", ")", ")", "\n", "goals", ".", "append", "(", "self", ".", "g", ".", "copy", "(", ")", ")", "\n", "o", "[", "...", "]", "=", "o_new", "\n", "ag", "[", "...", "]", "=", "ag_new", "\n", "", "obs", ".", "append", "(", "o", ".", "copy", "(", ")", ")", "\n", "achieved_goals", ".", "append", "(", "ag", ".", "copy", "(", ")", ")", "\n", "self", ".", "initial_o", "[", ":", "]", "=", "o", "\n", "\n", "successful", "=", "np", ".", "array", "(", "successes", ")", "[", "-", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n", "episode", "=", "dict", "(", "o", "=", "obs", ",", "\n", "u", "=", "acts", ",", "\n", "g", "=", "goals", ",", "\n", "ag", "=", "achieved_goals", ",", ")", "\n", "for", "key", ",", "value", "in", "zip", "(", "self", ".", "info_keys", ",", "info_values", ")", ":", "\n", "            ", "episode", "[", "'info_{}'", ".", "format", "(", "key", ")", "]", "=", "value", "\n", "\n", "# stats", "\n", "", "assert", "successful", ".", "shape", "==", "(", "self", ".", "rollout_batch_size", ",", ")", "\n", "success_rate", "=", "np", ".", "mean", "(", "successful", ")", "\n", "self", ".", "success_history", ".", "append", "(", "success_rate", ")", "\n", "if", "self", ".", "compute_Q", ":", "\n", "            ", "self", ".", "Q_history", ".", "append", "(", "np", ".", "mean", "(", "Qs", ")", ")", "\n", "", "self", ".", "n_episodes", "+=", "self", ".", "rollout_batch_size", "\n", "\n", "return", "convert_episode_to_batch_major", "(", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.clear_history": [[152, 157], ["rollout.RolloutWorker.success_history.clear", "rollout.RolloutWorker.Q_history.clear"], "methods", ["None"], ["", "def", "clear_history", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clears all histories that are used for statistics\n        \"\"\"", "\n", "self", ".", "success_history", ".", "clear", "(", ")", "\n", "self", ".", "Q_history", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.current_success_rate": [[158, 160], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean"], ["", "def", "current_success_rate", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "success_history", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.current_mean_Q": [[161, 163], ["numpy.mean"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean"], ["", "def", "current_mean_Q", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "Q_history", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.save_policy": [[164, 169], ["open", "pickle.dump"], "methods", ["None"], ["", "def", "save_policy", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Pickles the current policy for later inspection.\n        \"\"\"", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "policy", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.logs": [[170, 183], ["numpy.mean", "prefix.endswith", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean"], ["", "", "def", "logs", "(", "self", ",", "prefix", "=", "'worker'", ")", ":", "\n", "        ", "\"\"\"Generates a dictionary that contains all collected statistics.\n        \"\"\"", "\n", "logs", "=", "[", "]", "\n", "logs", "+=", "[", "(", "'success_rate'", ",", "np", ".", "mean", "(", "self", ".", "success_history", ")", ")", "]", "\n", "if", "self", ".", "compute_Q", ":", "\n", "            ", "logs", "+=", "[", "(", "'mean_Q'", ",", "np", ".", "mean", "(", "self", ".", "Q_history", ")", ")", "]", "\n", "", "logs", "+=", "[", "(", "'episode'", ",", "self", ".", "n_episodes", ")", "]", "\n", "\n", "if", "prefix", "is", "not", "''", "and", "not", "prefix", ".", "endswith", "(", "'/'", ")", ":", "\n", "            ", "return", "[", "(", "prefix", "+", "'/'", "+", "key", ",", "val", ")", "for", "key", ",", "val", "in", "logs", "]", "\n", "", "else", ":", "\n", "            ", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed": [[184, 189], ["enumerate", "env.seed"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed"], ["", "", "def", "seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "\"\"\"Seeds each environment with a distinct seed derived from the passed in global seed.\n        \"\"\"", "\n", "for", "idx", ",", "env", "in", "enumerate", "(", "self", ".", "envs", ")", ":", "\n", "            ", "env", ".", "seed", "(", "seed", "+", "1000", "*", "idx", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBuffer.__init__": [[33, 57], ["threading.Lock", "numpy.empty", "buffer_shapes.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buffer_shapes", ",", "size_in_transitions", ",", "T", ",", "sample_transitions", ")", ":", "\n", "        ", "\"\"\"Creates a replay buffer.\n\n        Args:\n            buffer_shapes (dict of ints): the shape for all buffers that are used in the replay\n                buffer\n            size_in_transitions (int): the size of the buffer, measured in transitions\n            T (int): the time horizon for episodes\n            sample_transitions (function): a function that samples from the replay buffer\n        \"\"\"", "\n", "self", ".", "buffer_shapes", "=", "buffer_shapes", "\n", "self", ".", "size", "=", "size_in_transitions", "//", "T", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "sample_transitions", "=", "sample_transitions", "\n", "\n", "# self.buffers is {key: array(size_in_episodes x T or T+1 x dim_key)}", "\n", "self", ".", "buffers", "=", "{", "key", ":", "np", ".", "empty", "(", "[", "self", ".", "size", ",", "*", "shape", "]", ")", "\n", "for", "key", ",", "shape", "in", "buffer_shapes", ".", "items", "(", ")", "}", "\n", "\n", "# memory management", "\n", "self", ".", "current_size", "=", "0", "\n", "self", ".", "n_transitions_stored", "=", "0", "\n", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBuffer.full": [[58, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "full", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "==", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBuffer.sample": [[63, 82], ["replay_buffer.ReplayBuffer.sample_transitions", "replay_buffer.ReplayBuffer.buffers.keys", "list", "replay_buffer.ReplayBuffer.buffers.keys"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"Returns a dict {key: array(batch_size x shapes[key])}\n        \"\"\"", "\n", "buffers", "=", "{", "}", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "assert", "self", ".", "current_size", ">", "0", "\n", "for", "key", "in", "self", ".", "buffers", ".", "keys", "(", ")", ":", "\n", "                ", "buffers", "[", "key", "]", "=", "self", ".", "buffers", "[", "key", "]", "[", ":", "self", ".", "current_size", "]", "\n", "\n", "", "", "buffers", "[", "'o_2'", "]", "=", "buffers", "[", "'o'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "buffers", "[", "'ag_2'", "]", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "\n", "transitions", "=", "self", ".", "sample_transitions", "(", "buffers", ",", "batch_size", ")", "\n", "\n", "for", "key", "in", "(", "[", "'r'", ",", "'o_2'", ",", "'ag_2'", "]", "+", "list", "(", "self", ".", "buffers", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "assert", "key", "in", "transitions", ",", "\"key %s missing from transitions\"", "%", "key", "\n", "\n", "", "return", "transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBuffer.store_episode": [[83, 98], ["numpy.all", "len", "replay_buffer.ReplayBuffer._get_storage_idx", "replay_buffer.ReplayBuffer.buffers.keys", "episode_batch.keys", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy._get_storage_idx"], ["", "def", "store_episode", "(", "self", ",", "episode_batch", ")", ":", "\n", "        ", "\"\"\"episode_batch: array(batch_size x (T or T+1) x dim_key)\n        \"\"\"", "\n", "batch_sizes", "=", "[", "len", "(", "episode_batch", "[", "key", "]", ")", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "array", "(", "batch_sizes", ")", "==", "batch_sizes", "[", "0", "]", ")", "\n", "batch_size", "=", "batch_sizes", "[", "0", "]", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "idxs", "=", "self", ".", "_get_storage_idx", "(", "batch_size", ")", "\n", "\n", "# load inputs into buffers", "\n", "for", "key", "in", "self", ".", "buffers", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "buffers", "[", "key", "]", "[", "idxs", "]", "=", "episode_batch", "[", "key", "]", "\n", "\n", "", "self", ".", "n_transitions_stored", "+=", "batch_size", "*", "self", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBuffer.get_current_episode_size": [[99, 102], ["None"], "methods", ["None"], ["", "", "def", "get_current_episode_size", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBuffer.get_current_size": [[103, 106], ["None"], "methods", ["None"], ["", "", "def", "get_current_size", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "*", "self", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBuffer.get_transitions_stored": [[107, 110], ["None"], "methods", ["None"], ["", "", "def", "get_transitions_stored", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "n_transitions_stored", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBuffer.clear_buffer": [[111, 114], ["None"], "methods", ["None"], ["", "", "def", "clear_buffer", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "current_size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBuffer._get_storage_idx": [[115, 135], ["min", "numpy.arange", "numpy.arange", "numpy.random.randint", "numpy.concatenate", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min"], ["", "", "def", "_get_storage_idx", "(", "self", ",", "inc", "=", "None", ")", ":", "\n", "        ", "inc", "=", "inc", "or", "1", "# size increment", "\n", "assert", "inc", "<=", "self", ".", "size", ",", "\"Batch committed to replay is too large!\"", "\n", "# go consecutively until you hit the end, and then go randomly.", "\n", "if", "self", ".", "current_size", "+", "inc", "<=", "self", ".", "size", ":", "\n", "            ", "idx", "=", "np", ".", "arange", "(", "self", ".", "current_size", ",", "self", ".", "current_size", "+", "inc", ")", "\n", "", "elif", "self", ".", "current_size", "<", "self", ".", "size", ":", "\n", "            ", "overflow", "=", "inc", "-", "(", "self", ".", "size", "-", "self", ".", "current_size", ")", "\n", "idx_a", "=", "np", ".", "arange", "(", "self", ".", "current_size", ",", "self", ".", "size", ")", "\n", "idx_b", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "current_size", ",", "overflow", ")", "\n", "idx", "=", "np", ".", "concatenate", "(", "[", "idx_a", ",", "idx_b", "]", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "size", ",", "inc", ")", "\n", "\n", "# update replay size", "\n", "", "self", ".", "current_size", "=", "min", "(", "self", ".", "size", ",", "self", ".", "current_size", "+", "inc", ")", "\n", "\n", "if", "inc", "==", "1", ":", "\n", "            ", "idx", "=", "idx", "[", "0", "]", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy.__init__": [[138, 169], ["numpy.empty", "numpy.empty", "threading.Lock", "numpy.empty", "buffer_shapes.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buffer_shapes", ",", "size_in_transitions", ",", "T", ",", "sample_transitions", ",", "prioritization", ",", "env_name", ")", ":", "\n", "        ", "\"\"\"Creates a replay buffer.\n\n        Args:\n            buffer_shapes (dict of ints): the shape for all buffers that are used in the replay\n                buffer\n            size_in_transitions (int): the size of the buffer, measured in transitions\n            T (int): the time horizon for episodes\n            sample_transitions (function): a function that samples from the replay buffer\n        \"\"\"", "\n", "self", ".", "buffer_shapes", "=", "buffer_shapes", "\n", "self", ".", "size", "=", "size_in_transitions", "//", "T", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "sample_transitions", "=", "sample_transitions", "\n", "\n", "self", ".", "buffers", "=", "{", "key", ":", "np", ".", "empty", "(", "[", "self", ".", "size", ",", "*", "shape", "]", ")", "\n", "for", "key", ",", "shape", "in", "buffer_shapes", ".", "items", "(", ")", "}", "\n", "self", ".", "buffers", "[", "'e'", "]", "=", "np", ".", "empty", "(", "[", "self", ".", "size", ",", "1", "]", ")", "# energy", "\n", "self", ".", "buffers", "[", "'p'", "]", "=", "np", ".", "empty", "(", "[", "self", ".", "size", ",", "1", "]", ")", "# priority/ranking", "\n", "\n", "self", ".", "prioritization", "=", "prioritization", "\n", "self", ".", "env_name", "=", "env_name", "\n", "\n", "# memory management", "\n", "self", ".", "current_size", "=", "0", "\n", "self", ".", "n_transitions_stored", "=", "0", "\n", "\n", "self", ".", "current_size_test", "=", "0", "\n", "self", ".", "n_transitions_stored_test", "=", "0", "\n", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy.full": [[170, 174], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "full", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "==", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy.sample": [[175, 195], ["replay_buffer.ReplayBufferEnergy.sample_transitions", "replay_buffer.ReplayBufferEnergy.buffers.keys", "list", "replay_buffer.ReplayBufferEnergy.buffers.keys"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ",", "batch_size", ",", "rank_method", ",", "temperature", ")", ":", "\n", "        ", "\"\"\"Returns a dict {key: array(batch_size x shapes[key])}\n        \"\"\"", "\n", "buffers", "=", "{", "}", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "assert", "self", ".", "current_size", ">", "0", "\n", "for", "key", "in", "self", ".", "buffers", ".", "keys", "(", ")", ":", "\n", "                ", "buffers", "[", "key", "]", "=", "self", ".", "buffers", "[", "key", "]", "[", ":", "self", ".", "current_size", "]", "\n", "\n", "", "", "buffers", "[", "'o_2'", "]", "=", "buffers", "[", "'o'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "buffers", "[", "'ag_2'", "]", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "\n", "transitions", "=", "self", ".", "sample_transitions", "(", "buffers", ",", "batch_size", ",", "rank_method", ",", "temperature", ")", "\n", "\n", "for", "key", "in", "(", "[", "'r'", ",", "'o_2'", ",", "'ag_2'", "]", "+", "list", "(", "self", ".", "buffers", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "if", "not", "key", "==", "'p'", "and", "not", "key", "==", "'e'", ":", "\n", "                ", "assert", "key", "in", "transitions", ",", "\"key %s missing from transitions\"", "%", "key", "\n", "\n", "", "", "return", "transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy.store_episode": [[196, 273], ["numpy.all", "episode_batch.keys", "len", "replay_buffer.ReplayBufferEnergy._get_storage_idx", "replay_buffer.ReplayBufferEnergy.buffers.keys", "scipy.stats.rankdata", "energy_rank.reshape.reshape.reshape", "energy_rank.reshape.reshape.copy", "episode_batch.keys", "numpy.array", "numpy.repeat", "numpy.diff", "numpy.sum", "numpy.diff", "energy_totoal.copy", "numpy.diff.copy", "numpy.clip", "numpy.sum", "numpy.sum.reshape", "height[].reshape", "numpy.power", "[].copy", "numpy.apply_along_axis", "numpy.diff", "numpy.sum", "numpy.repeat", "numpy.diff", "numpy.sum", "numpy.diff", "energy_totoal.copy", "numpy.diff.copy", "numpy.clip", "numpy.sum", "numpy.sum.reshape", "print", "exit", "numpy.power", "height[].reshape", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy._get_storage_idx", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum"], ["", "def", "store_episode", "(", "self", ",", "episode_batch", ",", "w_potential", ",", "w_linear", ",", "w_rotational", ",", "rank_method", ",", "clip_energy", ")", ":", "\n", "        ", "\"\"\"episode_batch: array(batch_size x (T or T+1) x dim_key)\n        \"\"\"", "\n", "batch_sizes", "=", "[", "len", "(", "episode_batch", "[", "key", "]", ")", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "array", "(", "batch_sizes", ")", "==", "batch_sizes", "[", "0", "]", ")", "\n", "batch_size", "=", "batch_sizes", "[", "0", "]", "\n", "\n", "buffers", "=", "{", "}", "\n", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", ":", "\n", "            ", "buffers", "[", "key", "]", "=", "episode_batch", "[", "key", "]", "\n", "\n", "", "if", "self", ".", "prioritization", "==", "'energy'", ":", "\n", "            ", "if", "self", ".", "env_name", "in", "[", "'FetchPickAndPlace-v0'", ",", "'FetchSlide-v0'", ",", "'FetchPush-v0'", "]", ":", "\n", "                ", "height", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", ":", ",", "2", "]", "\n", "height_0", "=", "np", ".", "repeat", "(", "height", "[", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "height", "[", ":", ",", "1", ":", ":", "]", ".", "shape", "[", "1", "]", ",", "axis", "=", "1", ")", "\n", "height", "=", "height", "[", ":", ",", "1", ":", ":", "]", "-", "height_0", "\n", "g", ",", "m", ",", "delta_t", "=", "9.81", ",", "1", ",", "0.04", "\n", "potential_energy", "=", "g", "*", "m", "*", "height", "\n", "diff", "=", "np", ".", "diff", "(", "buffers", "[", "'ag'", "]", ",", "axis", "=", "1", ")", "\n", "velocity", "=", "diff", "/", "delta_t", "\n", "kinetic_energy", "=", "0.5", "*", "m", "*", "np", ".", "power", "(", "velocity", ",", "2", ")", "\n", "kinetic_energy", "=", "np", ".", "sum", "(", "kinetic_energy", ",", "axis", "=", "2", ")", "\n", "energy_totoal", "=", "w_potential", "*", "potential_energy", "+", "w_linear", "*", "kinetic_energy", "\n", "energy_diff", "=", "np", ".", "diff", "(", "energy_totoal", ",", "axis", "=", "1", ")", "\n", "energy_transition", "=", "energy_totoal", ".", "copy", "(", ")", "\n", "energy_transition", "[", ":", ",", "1", ":", ":", "]", "=", "energy_diff", ".", "copy", "(", ")", "\n", "energy_transition", "=", "np", ".", "clip", "(", "energy_transition", ",", "0", ",", "clip_energy", ")", "\n", "energy_transition_total", "=", "np", ".", "sum", "(", "energy_transition", ",", "axis", "=", "1", ")", "\n", "episode_batch", "[", "'e'", "]", "=", "energy_transition_total", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "elif", "self", ".", "env_name", "in", "[", "'HandManipulatePenRotate-v0'", ",", "'HandManipulateEggFull-v0'", ",", "'HandManipulateBlockFull-v0'", ",", "'HandManipulateBlockRotateXYZ-v0'", "]", ":", "\n", "                ", "g", ",", "m", ",", "delta_t", ",", "inertia", "=", "9.81", ",", "1", ",", "0.04", ",", "1", "\n", "quaternion", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", ":", ",", "3", ":", "]", ".", "copy", "(", ")", "\n", "angle", "=", "np", ".", "apply_along_axis", "(", "quaternion_to_euler_angle", ",", "2", ",", "quaternion", ")", "\n", "diff_angle", "=", "np", ".", "diff", "(", "angle", ",", "axis", "=", "1", ")", "\n", "angular_velocity", "=", "diff_angle", "/", "delta_t", "\n", "rotational_energy", "=", "0.5", "*", "inertia", "*", "np", ".", "power", "(", "angular_velocity", ",", "2", ")", "\n", "rotational_energy", "=", "np", ".", "sum", "(", "rotational_energy", ",", "axis", "=", "2", ")", "\n", "buffers", "[", "'ag'", "]", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "height", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", ":", ",", "2", "]", "\n", "height_0", "=", "np", ".", "repeat", "(", "height", "[", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "height", "[", ":", ",", "1", ":", ":", "]", ".", "shape", "[", "1", "]", ",", "axis", "=", "1", ")", "\n", "height", "=", "height", "[", ":", ",", "1", ":", ":", "]", "-", "height_0", "\n", "potential_energy", "=", "g", "*", "m", "*", "height", "\n", "diff", "=", "np", ".", "diff", "(", "buffers", "[", "'ag'", "]", ",", "axis", "=", "1", ")", "\n", "velocity", "=", "diff", "/", "delta_t", "\n", "kinetic_energy", "=", "0.5", "*", "m", "*", "np", ".", "power", "(", "velocity", ",", "2", ")", "\n", "kinetic_energy", "=", "np", ".", "sum", "(", "kinetic_energy", ",", "axis", "=", "2", ")", "\n", "energy_totoal", "=", "w_potential", "*", "potential_energy", "+", "w_linear", "*", "kinetic_energy", "+", "w_rotational", "*", "rotational_energy", "\n", "energy_diff", "=", "np", ".", "diff", "(", "energy_totoal", ",", "axis", "=", "1", ")", "\n", "energy_transition", "=", "energy_totoal", ".", "copy", "(", ")", "\n", "energy_transition", "[", ":", ",", "1", ":", ":", "]", "=", "energy_diff", ".", "copy", "(", ")", "\n", "energy_transition", "=", "np", ".", "clip", "(", "energy_transition", ",", "0", ",", "clip_energy", ")", "\n", "energy_transition_total", "=", "np", ".", "sum", "(", "energy_transition", ",", "axis", "=", "1", ")", "\n", "episode_batch", "[", "'e'", "]", "=", "energy_transition_total", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Trajectory Energy Function Not Implemented'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "", "with", "self", ".", "lock", ":", "\n", "            ", "idxs", "=", "self", ".", "_get_storage_idx", "(", "batch_size", ")", "\n", "\n", "# load inputs into buffers", "\n", "for", "key", "in", "self", ".", "buffers", ".", "keys", "(", ")", ":", "\n", "                ", "if", "not", "key", "==", "'p'", ":", "\n", "                    ", "self", ".", "buffers", "[", "key", "]", "[", "idxs", "]", "=", "episode_batch", "[", "key", "]", "\n", "\n", "", "", "self", ".", "n_transitions_stored", "+=", "batch_size", "*", "self", ".", "T", "\n", "\n", "energy_transition_total", "=", "self", ".", "buffers", "[", "'e'", "]", "[", ":", "self", ".", "current_size", "]", "\n", "if", "rank_method", "==", "'none'", ":", "\n", "                ", "rank_method", "=", "'dense'", "\n", "", "energy_rank", "=", "rankdata", "(", "energy_transition_total", ",", "method", "=", "rank_method", ")", "\n", "energy_rank", "=", "energy_rank", "-", "1", "\n", "energy_rank", "=", "energy_rank", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "self", ".", "buffers", "[", "'p'", "]", "[", ":", "self", ".", "current_size", "]", "=", "energy_rank", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy.get_current_episode_size": [[274, 277], ["None"], "methods", ["None"], ["", "", "def", "get_current_episode_size", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy.get_current_size": [[278, 281], ["None"], "methods", ["None"], ["", "", "def", "get_current_size", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "*", "self", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy.get_transitions_stored": [[282, 285], ["None"], "methods", ["None"], ["", "", "def", "get_transitions_stored", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "n_transitions_stored", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy.clear_buffer": [[286, 289], ["None"], "methods", ["None"], ["", "", "def", "clear_buffer", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "current_size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy._get_storage_idx": [[290, 310], ["min", "numpy.arange", "numpy.arange", "numpy.random.randint", "numpy.concatenate", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min"], ["", "", "def", "_get_storage_idx", "(", "self", ",", "inc", "=", "None", ")", ":", "\n", "        ", "inc", "=", "inc", "or", "1", "# size increment", "\n", "assert", "inc", "<=", "self", ".", "size", ",", "\"Batch committed to replay is too large!\"", "\n", "# go consecutively until you hit the end, and then go randomly.", "\n", "if", "self", ".", "current_size", "+", "inc", "<=", "self", ".", "size", ":", "\n", "            ", "idx", "=", "np", ".", "arange", "(", "self", ".", "current_size", ",", "self", ".", "current_size", "+", "inc", ")", "\n", "", "elif", "self", ".", "current_size", "<", "self", ".", "size", ":", "\n", "            ", "overflow", "=", "inc", "-", "(", "self", ".", "size", "-", "self", ".", "current_size", ")", "\n", "idx_a", "=", "np", ".", "arange", "(", "self", ".", "current_size", ",", "self", ".", "size", ")", "\n", "idx_b", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "current_size", ",", "overflow", ")", "\n", "idx", "=", "np", ".", "concatenate", "(", "[", "idx_a", ",", "idx_b", "]", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "size", ",", "inc", ")", "\n", "\n", "# update replay size", "\n", "", "self", ".", "current_size", "=", "min", "(", "self", ".", "size", ",", "self", ".", "current_size", "+", "inc", ")", "\n", "\n", "if", "inc", "==", "1", ":", "\n", "            ", "idx", "=", "idx", "[", "0", "]", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.PrioritizedReplayBuffer.__init__": [[313, 333], ["replay_buffer.ReplayBuffer.__init__", "baselines.common.segment_tree.SumSegmentTree", "baselines.common.segment_tree.MinSegmentTree", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "buffer_shapes", ",", "size_in_transitions", ",", "T", ",", "sample_transitions", ",", "alpha", ",", "env_name", ")", ":", "\n", "        ", "\"\"\"Create Prioritized Replay buffer.\n        \"\"\"", "\n", "super", "(", "PrioritizedReplayBuffer", ",", "self", ")", ".", "__init__", "(", "buffer_shapes", ",", "size_in_transitions", ",", "T", ",", "sample_transitions", ")", "\n", "assert", "alpha", ">=", "0", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "\n", "it_capacity", "=", "1", "\n", "self", ".", "size_in_transitions", "=", "size_in_transitions", "\n", "while", "it_capacity", "<", "size_in_transitions", ":", "\n", "            ", "it_capacity", "*=", "2", "\n", "\n", "", "self", ".", "_it_sum", "=", "SumSegmentTree", "(", "it_capacity", ")", "\n", "self", ".", "_it_min", "=", "MinSegmentTree", "(", "it_capacity", ")", "\n", "self", ".", "_max_priority", "=", "1.0", "\n", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "buffers", "[", "'td'", "]", "=", "np", ".", "zeros", "(", "[", "self", ".", "size", ",", "self", ".", "T", "]", ")", "# accumulated td-error", "\n", "self", ".", "buffers", "[", "'e'", "]", "=", "np", ".", "zeros", "(", "[", "self", ".", "size", ",", "self", ".", "T", "]", ")", "# trajectory energy", "\n", "self", ".", "env_name", "=", "env_name", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.PrioritizedReplayBuffer.store_episode": [[334, 410], ["numpy.all", "len", "episode_batch.keys", "replay_buffer.PrioritizedReplayBuffer._get_storage_idx", "replay_buffer.PrioritizedReplayBuffer.buffers.keys", "episode_batch.keys", "numpy.array", "numpy.repeat", "numpy.diff", "numpy.sum", "numpy.diff", "energy_totoal.copy", "numpy.diff.copy", "range", "height[].reshape", "numpy.power", "[].copy", "numpy.apply_along_axis", "numpy.diff", "numpy.sum", "numpy.repeat", "numpy.diff", "numpy.sum", "numpy.diff", "energy_totoal.copy", "numpy.diff.copy", "numpy.power", "height[].reshape", "numpy.power", "min"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy._get_storage_idx", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min"], ["", "def", "store_episode", "(", "self", ",", "episode_batch", ",", "dump_buffer", ")", ":", "\n", "        ", "\"\"\"episode_batch: array(batch_size x (T or T+1) x dim_key)\n        \"\"\"", "\n", "\n", "batch_sizes", "=", "[", "len", "(", "episode_batch", "[", "key", "]", ")", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "array", "(", "batch_sizes", ")", "==", "batch_sizes", "[", "0", "]", ")", "\n", "batch_size", "=", "batch_sizes", "[", "0", "]", "\n", "\n", "if", "dump_buffer", ":", "\n", "\n", "            ", "buffers", "=", "{", "}", "\n", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", ":", "\n", "                ", "buffers", "[", "key", "]", "=", "episode_batch", "[", "key", "]", "\n", "\n", "", "if", "self", ".", "env_name", "in", "[", "'FetchPickAndPlace-v0'", ",", "'FetchSlide-v0'", ",", "'FetchPush-v0'", "]", ":", "\n", "                ", "height", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", ":", ",", "2", "]", "\n", "height_0", "=", "np", ".", "repeat", "(", "height", "[", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "height", "[", ":", ",", "1", ":", ":", "]", ".", "shape", "[", "1", "]", ",", "axis", "=", "1", ")", "\n", "height", "=", "height", "[", ":", ",", "1", ":", ":", "]", "-", "height_0", "\n", "g", ",", "m", ",", "delta_t", "=", "9.81", ",", "1", ",", "0.04", "\n", "potential_energy", "=", "g", "*", "m", "*", "height", "\n", "diff", "=", "np", ".", "diff", "(", "buffers", "[", "'ag'", "]", ",", "axis", "=", "1", ")", "\n", "velocity", "=", "diff", "/", "delta_t", "\n", "kinetic_energy", "=", "0.5", "*", "m", "*", "np", ".", "power", "(", "velocity", ",", "2", ")", "\n", "kinetic_energy", "=", "np", ".", "sum", "(", "kinetic_energy", ",", "axis", "=", "2", ")", "\n", "energy_totoal", "=", "potential_energy", "+", "kinetic_energy", "\n", "energy_diff", "=", "np", ".", "diff", "(", "energy_totoal", ",", "axis", "=", "1", ")", "\n", "energy_transition", "=", "energy_totoal", ".", "copy", "(", ")", "\n", "energy_transition", "[", ":", ",", "1", ":", ":", "]", "=", "energy_diff", ".", "copy", "(", ")", "\n", "episode_batch", "[", "'e'", "]", "=", "energy_transition", "\n", "", "elif", "self", ".", "env_name", "in", "[", "'HandManipulatePenRotate-v0'", ",", "'HandManipulateEggFull-v0'", ",", "'HandManipulateBlockFull-v0'", ",", "'HandManipulateBlockRotateXYZ-v0'", "]", ":", "\n", "                ", "g", ",", "m", ",", "delta_t", ",", "inertia", "=", "9.81", ",", "1", ",", "0.04", ",", "1", "\n", "quaternion", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", ":", ",", "3", ":", "]", ".", "copy", "(", ")", "\n", "angle", "=", "np", ".", "apply_along_axis", "(", "quaternion_to_euler_angle", ",", "2", ",", "quaternion", ")", "\n", "diff_angle", "=", "np", ".", "diff", "(", "angle", ",", "axis", "=", "1", ")", "\n", "angular_velocity", "=", "diff_angle", "/", "delta_t", "\n", "rotational_energy", "=", "0.5", "*", "inertia", "*", "np", ".", "power", "(", "angular_velocity", ",", "2", ")", "\n", "rotational_energy", "=", "np", ".", "sum", "(", "rotational_energy", ",", "axis", "=", "2", ")", "\n", "buffers", "[", "'ag'", "]", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "height", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", ":", ",", "2", "]", "\n", "height_0", "=", "np", ".", "repeat", "(", "height", "[", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "height", "[", ":", ",", "1", ":", ":", "]", ".", "shape", "[", "1", "]", ",", "axis", "=", "1", ")", "\n", "height", "=", "height", "[", ":", ",", "1", ":", ":", "]", "-", "height_0", "\n", "potential_energy", "=", "g", "*", "m", "*", "height", "\n", "diff", "=", "np", ".", "diff", "(", "buffers", "[", "'ag'", "]", ",", "axis", "=", "1", ")", "\n", "velocity", "=", "diff", "/", "delta_t", "\n", "kinetic_energy", "=", "0.5", "*", "m", "*", "np", ".", "power", "(", "velocity", ",", "2", ")", "\n", "kinetic_energy", "=", "np", ".", "sum", "(", "kinetic_energy", ",", "axis", "=", "2", ")", "\n", "energy_totoal", "=", "potential_energy", "+", "kinetic_energy", "+", "rotational_energy", "\n", "energy_diff", "=", "np", ".", "diff", "(", "energy_totoal", ",", "axis", "=", "1", ")", "\n", "energy_transition", "=", "energy_totoal", ".", "copy", "(", ")", "\n", "energy_transition", "[", ":", ",", "1", ":", ":", "]", "=", "energy_diff", ".", "copy", "(", ")", "\n", "episode_batch", "[", "'e'", "]", "=", "energy_transition", "\n", "\n", "\n", "", "", "with", "self", ".", "lock", ":", "\n", "            ", "idxs", "=", "self", ".", "_get_storage_idx", "(", "batch_size", ")", "\n", "\n", "# load inputs into buffers", "\n", "for", "key", "in", "self", ".", "buffers", ".", "keys", "(", ")", ":", "\n", "                ", "if", "not", "key", "==", "'td'", ":", "\n", "                    ", "if", "dump_buffer", ":", "\n", "                        ", "self", ".", "buffers", "[", "key", "]", "[", "idxs", "]", "=", "episode_batch", "[", "key", "]", "\n", "", "else", ":", "\n", "                        ", "if", "not", "key", "==", "'e'", ":", "\n", "                            ", "self", ".", "buffers", "[", "key", "]", "[", "idxs", "]", "=", "episode_batch", "[", "key", "]", "\n", "\n", "", "", "", "", "self", ".", "n_transitions_stored", "+=", "batch_size", "*", "self", ".", "T", "\n", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "episode_idx", "=", "idx", "\n", "for", "t", "in", "range", "(", "episode_idx", "*", "self", ".", "T", ",", "(", "episode_idx", "+", "1", ")", "*", "self", ".", "T", ")", ":", "\n", "                    ", "assert", "(", "episode_idx", "+", "1", ")", "*", "self", ".", "T", "-", "1", "<", "min", "(", "self", ".", "n_transitions_stored", ",", "self", ".", "size_in_transitions", ")", "\n", "self", ".", "_it_sum", "[", "t", "]", "=", "self", ".", "_max_priority", "**", "self", ".", "_alpha", "\n", "self", ".", "_it_min", "[", "t", "]", "=", "self", ".", "_max_priority", "**", "self", ".", "_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.PrioritizedReplayBuffer.dump_buffer": [[411, 421], ["range", "print", "[].tolist", "[].tolist", "[].tolist", "open", "file.write", "file.write", "json.dumps"], "methods", ["None"], ["", "", "", "", "def", "dump_buffer", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "current_size", ")", ":", "\n", "            ", "entry", "=", "{", "\"e\"", ":", "self", ".", "buffers", "[", "'e'", "]", "[", "i", "]", ".", "tolist", "(", ")", ",", "\"td\"", ":", "self", ".", "buffers", "[", "'td'", "]", "[", "i", "]", ".", "tolist", "(", ")", ",", "\"ag\"", ":", "self", ".", "buffers", "[", "'ag'", "]", "[", "i", "]", ".", "tolist", "(", ")", "}", "\n", "with", "open", "(", "'buffer_epoch_{0}.txt'", ".", "format", "(", "epoch", ")", ",", "'a'", ")", "as", "file", ":", "\n", "                 ", "file", ".", "write", "(", "json", ".", "dumps", "(", "entry", ")", ")", "# use `json.loads` to do the reverse", "\n", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "print", "(", "\"dump buffer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.PrioritizedReplayBuffer.sample": [[423, 458], ["replay_buffer.PrioritizedReplayBuffer.sample_transitions", "replay_buffer.PrioritizedReplayBuffer.buffers.keys", "list", "replay_buffer.PrioritizedReplayBuffer.buffers.keys"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "batch_size", ",", "beta", ")", ":", "\n", "        ", "\"\"\"Returns a dict {key: array(batch_size x shapes[key])}\n        \"\"\"", "\n", "\n", "\"\"\"Sample a batch of experiences.\n\n        compared to ReplayBuffer.sample\n        it also returns importance weights and idxes\n        of sampled experiences.\n\n        Parameters\n        ----------\n        batch_size: int\n            How many transitions to sample.\n        beta: float\n            To what degree to use importance weights\n            (0 - no corrections, 1 - full correction)\n        \"\"\"", "\n", "buffers", "=", "{", "}", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "assert", "self", ".", "current_size", ">", "0", "\n", "for", "key", "in", "self", ".", "buffers", ".", "keys", "(", ")", ":", "\n", "                ", "buffers", "[", "key", "]", "=", "self", ".", "buffers", "[", "key", "]", "[", ":", "self", ".", "current_size", "]", "\n", "\n", "", "", "buffers", "[", "'o_2'", "]", "=", "buffers", "[", "'o'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "buffers", "[", "'ag_2'", "]", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "\n", "transitions", ",", "weights", ",", "idxs", "=", "self", ".", "sample_transitions", "(", "self", ",", "buffers", ",", "batch_size", ",", "beta", ")", "\n", "\n", "for", "key", "in", "(", "[", "'r'", ",", "'o_2'", ",", "'ag_2'", "]", "+", "list", "(", "self", ".", "buffers", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "if", "not", "key", "==", "'td'", "and", "not", "key", "==", "'e'", ":", "\n", "                ", "assert", "key", "in", "transitions", ",", "\"key %s missing from transitions\"", "%", "key", "\n", "\n", "", "", "return", "(", "transitions", ",", "weights", ",", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.PrioritizedReplayBuffer.update_priorities": [[460, 483], ["zip", "len", "len", "priorities.flatten", "max"], "methods", ["None"], ["", "def", "update_priorities", "(", "self", ",", "idxes", ",", "priorities", ")", ":", "\n", "        ", "\"\"\"Update priorities of sampled transitions.\n\n        sets priority of transition at index idxes[i] in buffer\n        to priorities[i].\n\n        Parameters\n        ----------\n        idxes: [int]\n            List of idxes of sampled transitions\n        priorities: [float]\n            List of updated priorities corresponding to\n            transitions at the sampled idxes denoted by\n            variable `idxes`.\n        \"\"\"", "\n", "assert", "len", "(", "idxes", ")", "==", "len", "(", "priorities", ")", "\n", "for", "idx", ",", "priority", "in", "zip", "(", "idxes", ",", "priorities", ".", "flatten", "(", ")", ")", ":", "\n", "            ", "assert", "priority", ">", "0", "\n", "assert", "0", "<=", "idx", "<", "self", ".", "n_transitions_stored", "\n", "self", ".", "_it_sum", "[", "idx", "]", "=", "priority", "**", "self", ".", "_alpha", "\n", "self", ".", "_it_min", "[", "idx", "]", "=", "priority", "**", "self", ".", "_alpha", "\n", "\n", "self", ".", "_max_priority", "=", "max", "(", "self", ".", "_max_priority", ",", "priority", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.quaternion_to_euler_angle": [[13, 31], ["math.atan2", "math.asin", "math.atan2", "numpy.array"], "function", ["None"], ["def", "quaternion_to_euler_angle", "(", "array", ")", ":", "\n", "    ", "w", "=", "array", "[", "0", "]", "\n", "x", "=", "array", "[", "1", "]", "\n", "y", "=", "array", "[", "2", "]", "\n", "z", "=", "array", "[", "3", "]", "\n", "ysqr", "=", "y", "*", "y", "\n", "t0", "=", "+", "2.0", "*", "(", "w", "*", "x", "+", "y", "*", "z", ")", "\n", "t1", "=", "+", "1.0", "-", "2.0", "*", "(", "x", "*", "x", "+", "ysqr", ")", "\n", "X", "=", "math", ".", "atan2", "(", "t0", ",", "t1", ")", "\n", "t2", "=", "+", "2.0", "*", "(", "w", "*", "y", "-", "z", "*", "x", ")", "\n", "t2", "=", "+", "1.0", "if", "t2", ">", "+", "1.0", "else", "t2", "\n", "t2", "=", "-", "1.0", "if", "t2", "<", "-", "1.0", "else", "t2", "\n", "Y", "=", "math", ".", "asin", "(", "t2", ")", "\n", "t3", "=", "+", "2.0", "*", "(", "w", "*", "z", "+", "x", "*", "y", ")", "\n", "t4", "=", "+", "1.0", "-", "2.0", "*", "(", "ysqr", "+", "z", "*", "z", ")", "\n", "Z", "=", "math", ".", "atan2", "(", "t3", ",", "t4", ")", "\n", "result", "=", "np", ".", "array", "(", "[", "X", ",", "Y", ",", "Z", "]", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.__init__": [[22, 112], ["baselines.her.util.import_function", "ddpg.dims_to_shapes", "collections.OrderedDict", "sorted", "ddpg.DDPG.input_dims.keys", "key.startswith", "tensorflow.variable_scope", "tensorflow.contrib.staging.StagingArea", "ddpg.DDPG.staging_tf.put", "ddpg.DDPG._create_network", "baselines.her.replay_buffer.ReplayBufferEnergy", "tensorflow.placeholder", "dims_to_shapes.items", "baselines.her.replay_buffer.PrioritizedReplayBuffer", "baselines.common.schedules.LinearSchedule", "baselines.her.replay_buffer.ReplayBuffer", "list", "ddpg.DDPG.stage_shapes.values", "ddpg.DDPG.stage_shapes.values", "ddpg.DDPG.stage_shapes.keys"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.import_function", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.dims_to_shapes", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._create_network"], ["    ", "@", "store_args", "\n", "def", "__init__", "(", "self", ",", "input_dims", ",", "buffer_size", ",", "hidden", ",", "layers", ",", "network_class", ",", "polyak", ",", "batch_size", ",", "\n", "Q_lr", ",", "pi_lr", ",", "norm_eps", ",", "norm_clip", ",", "max_u", ",", "action_l2", ",", "clip_obs", ",", "scope", ",", "T", ",", "\n", "rollout_batch_size", ",", "subtract_goals", ",", "relative_goals", ",", "clip_pos_returns", ",", "clip_return", ",", "\n", "sample_transitions", ",", "gamma", ",", "temperature", ",", "prioritization", ",", "env_name", ",", "\n", "alpha", ",", "beta0", ",", "beta_iters", ",", "eps", ",", "max_timesteps", ",", "rank_method", ",", "reuse", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Implementation of DDPG that is used in combination with Hindsight Experience Replay (HER).\n\n        Args:\n            input_dims (dict of ints): dimensions for the observation (o), the goal (g), and the\n                actions (u)\n            buffer_size (int): number of transitions that are stored in the replay buffer\n            hidden (int): number of units in the hidden layers\n            layers (int): number of hidden layers\n            network_class (str): the network class that should be used (e.g. 'baselines.her.ActorCritic')\n            polyak (float): coefficient for Polyak-averaging of the target network\n            batch_size (int): batch size for training\n            Q_lr (float): learning rate for the Q (critic) network\n            pi_lr (float): learning rate for the pi (actor) network\n            norm_eps (float): a small value used in the normalizer to avoid numerical instabilities\n            norm_clip (float): normalized inputs are clipped to be in [-norm_clip, norm_clip]\n            max_u (float): maximum action magnitude, i.e. actions are in [-max_u, max_u]\n            action_l2 (float): coefficient for L2 penalty on the actions\n            clip_obs (float): clip observations before normalization to be in [-clip_obs, clip_obs]\n            scope (str): the scope used for the TensorFlow graph\n            T (int): the time horizon for rollouts\n            rollout_batch_size (int): number of parallel rollouts per DDPG agent\n            subtract_goals (function): function that subtracts goals from each other\n            relative_goals (boolean): whether or not relative goals should be fed into the network\n            clip_pos_returns (boolean): whether or not positive returns should be clipped\n            clip_return (float): clip returns to be in [-clip_return, clip_return]\n            sample_transitions (function) function that samples from the replay buffer\n            gamma (float): gamma used for Q learning updates\n            reuse (boolean): whether or not the networks should be reused\n        \"\"\"", "\n", "if", "self", ".", "clip_return", "is", "None", ":", "\n", "            ", "self", ".", "clip_return", "=", "np", ".", "inf", "\n", "\n", "", "self", ".", "create_actor_critic", "=", "import_function", "(", "self", ".", "network_class", ")", "\n", "\n", "input_shapes", "=", "dims_to_shapes", "(", "self", ".", "input_dims", ")", "\n", "self", ".", "dimo", "=", "self", ".", "input_dims", "[", "'o'", "]", "\n", "self", ".", "dimg", "=", "self", ".", "input_dims", "[", "'g'", "]", "\n", "self", ".", "dimu", "=", "self", ".", "input_dims", "[", "'u'", "]", "\n", "\n", "self", ".", "prioritization", "=", "prioritization", "\n", "self", ".", "env_name", "=", "env_name", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "rank_method", "=", "rank_method", "\n", "\n", "# Prepare staging area for feeding data to the model.", "\n", "stage_shapes", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "sorted", "(", "self", ".", "input_dims", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'info_'", ")", ":", "\n", "                ", "continue", "\n", "", "stage_shapes", "[", "key", "]", "=", "(", "None", ",", "*", "input_shapes", "[", "key", "]", ")", "\n", "", "for", "key", "in", "[", "'o'", ",", "'g'", "]", ":", "\n", "            ", "stage_shapes", "[", "key", "+", "'_2'", "]", "=", "stage_shapes", "[", "key", "]", "\n", "", "stage_shapes", "[", "'r'", "]", "=", "(", "None", ",", ")", "\n", "stage_shapes", "[", "'w'", "]", "=", "(", "None", ",", ")", "\n", "self", ".", "stage_shapes", "=", "stage_shapes", "\n", "\n", "# Create network.", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ")", ":", "\n", "            ", "self", ".", "staging_tf", "=", "StagingArea", "(", "\n", "dtypes", "=", "[", "tf", ".", "float32", "for", "_", "in", "self", ".", "stage_shapes", ".", "keys", "(", ")", "]", ",", "\n", "shapes", "=", "list", "(", "self", ".", "stage_shapes", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "buffer_ph_tf", "=", "[", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "shape", ")", "for", "shape", "in", "self", ".", "stage_shapes", ".", "values", "(", ")", "]", "\n", "self", ".", "stage_op", "=", "self", ".", "staging_tf", ".", "put", "(", "self", ".", "buffer_ph_tf", ")", "\n", "\n", "self", ".", "_create_network", "(", "reuse", "=", "reuse", ")", "\n", "\n", "# Configure the replay buffer.", "\n", "", "buffer_shapes", "=", "{", "key", ":", "(", "self", ".", "T", "if", "key", "!=", "'o'", "else", "self", ".", "T", "+", "1", ",", "*", "input_shapes", "[", "key", "]", ")", "\n", "for", "key", ",", "val", "in", "input_shapes", ".", "items", "(", ")", "}", "\n", "buffer_shapes", "[", "'g'", "]", "=", "(", "buffer_shapes", "[", "'g'", "]", "[", "0", "]", ",", "self", ".", "dimg", ")", "\n", "buffer_shapes", "[", "'ag'", "]", "=", "(", "self", ".", "T", "+", "1", ",", "self", ".", "dimg", ")", "\n", "buffer_size", "=", "(", "self", ".", "buffer_size", "//", "self", ".", "rollout_batch_size", ")", "*", "self", ".", "rollout_batch_size", "\n", "\n", "if", "self", ".", "prioritization", "==", "'energy'", ":", "\n", "            ", "self", ".", "buffer", "=", "ReplayBufferEnergy", "(", "buffer_shapes", ",", "buffer_size", ",", "self", ".", "T", ",", "self", ".", "sample_transitions", ",", "\n", "self", ".", "prioritization", ",", "self", ".", "env_name", ")", "\n", "", "elif", "self", ".", "prioritization", "==", "'tderror'", ":", "\n", "            ", "self", ".", "buffer", "=", "PrioritizedReplayBuffer", "(", "buffer_shapes", ",", "buffer_size", ",", "self", ".", "T", ",", "self", ".", "sample_transitions", ",", "alpha", ",", "self", ".", "env_name", ")", "\n", "if", "beta_iters", "is", "None", ":", "\n", "                ", "beta_iters", "=", "max_timesteps", "\n", "", "self", ".", "beta_schedule", "=", "LinearSchedule", "(", "beta_iters", ",", "initial_p", "=", "beta0", ",", "final_p", "=", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "buffer", "=", "ReplayBuffer", "(", "buffer_shapes", ",", "buffer_size", ",", "self", ".", "T", ",", "self", ".", "sample_transitions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._random_action": [[113, 115], ["numpy.random.uniform"], "methods", ["None"], ["", "", "def", "_random_action", "(", "self", ",", "n", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "self", ".", "max_u", ",", "high", "=", "self", ".", "max_u", ",", "size", "=", "(", "n", ",", "self", ".", "dimu", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._preprocess_og": [[116, 126], ["numpy.clip", "numpy.clip", "g.reshape.reshape.reshape", "ag.reshape.reshape.reshape", "ddpg.DDPG.subtract_goals", "g.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "_preprocess_og", "(", "self", ",", "o", ",", "ag", ",", "g", ")", ":", "\n", "        ", "if", "self", ".", "relative_goals", ":", "\n", "            ", "g_shape", "=", "g", ".", "shape", "\n", "g", "=", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", "\n", "ag", "=", "ag", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", "\n", "g", "=", "self", ".", "subtract_goals", "(", "g", ",", "ag", ")", "\n", "g", "=", "g", ".", "reshape", "(", "*", "g_shape", ")", "\n", "", "o", "=", "np", ".", "clip", "(", "o", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "g", "=", "np", ".", "clip", "(", "g", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "return", "o", ",", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.get_actions": [[127, 159], ["ddpg.DDPG._preprocess_og", "ddpg.DDPG.sess.run", "numpy.clip", "u.copy.copy.copy", "o.reshape", "g.reshape", "numpy.zeros", "numpy.random.randn", "numpy.random.binomial().reshape", "len", "ddpg.DDPG._random_action", "numpy.random.binomial"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._preprocess_og", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._random_action"], ["", "def", "get_actions", "(", "self", ",", "o", ",", "ag", ",", "g", ",", "noise_eps", "=", "0.", ",", "random_eps", "=", "0.", ",", "use_target_net", "=", "False", ",", "\n", "compute_Q", "=", "False", ")", ":", "\n", "        ", "o", ",", "g", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "policy", "=", "self", ".", "target", "if", "use_target_net", "else", "self", ".", "main", "\n", "# values to compute", "\n", "vals", "=", "[", "policy", ".", "pi_tf", "]", "\n", "if", "compute_Q", ":", "\n", "            ", "vals", "+=", "[", "policy", ".", "Q_pi_tf", "]", "\n", "# feed", "\n", "", "feed", "=", "{", "\n", "policy", ".", "o_tf", ":", "o", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimo", ")", ",", "\n", "policy", ".", "g_tf", ":", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", ",", "\n", "policy", ".", "u_tf", ":", "np", ".", "zeros", "(", "(", "o", ".", "size", "//", "self", ".", "dimo", ",", "self", ".", "dimu", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "}", "\n", "\n", "ret", "=", "self", ".", "sess", ".", "run", "(", "vals", ",", "feed_dict", "=", "feed", ")", "\n", "\n", "# action postprocessing", "\n", "u", "=", "ret", "[", "0", "]", "\n", "noise", "=", "noise_eps", "*", "self", ".", "max_u", "*", "np", ".", "random", ".", "randn", "(", "*", "u", ".", "shape", ")", "# gaussian noise", "\n", "u", "+=", "noise", "\n", "u", "=", "np", ".", "clip", "(", "u", ",", "-", "self", ".", "max_u", ",", "self", ".", "max_u", ")", "\n", "u", "+=", "np", ".", "random", ".", "binomial", "(", "1", ",", "random_eps", ",", "u", ".", "shape", "[", "0", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "*", "(", "self", ".", "_random_action", "(", "u", ".", "shape", "[", "0", "]", ")", "-", "u", ")", "# eps-greedy", "\n", "if", "u", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "u", "=", "u", "[", "0", "]", "\n", "", "u", "=", "u", ".", "copy", "(", ")", "\n", "ret", "[", "0", "]", "=", "u", "\n", "\n", "if", "len", "(", "ret", ")", "==", "1", ":", "\n", "            ", "return", "ret", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.get_td_errors": [[160, 177], ["ddpg.DDPG._preprocess_og", "numpy.ones", "ddpg.DDPG.sess.run", "td_errors.copy.copy.copy", "o.reshape", "g.reshape", "o.reshape", "g.reshape", "u.reshape", "o.reshape"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._preprocess_og", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run"], ["", "", "def", "get_td_errors", "(", "self", ",", "o", ",", "g", ",", "u", ")", ":", "\n", "        ", "o", ",", "g", "=", "self", ".", "_preprocess_og", "(", "o", ",", "g", ",", "g", ")", "\n", "vals", "=", "[", "self", ".", "td_error_tf", "]", "\n", "r", "=", "np", ".", "ones", "(", "(", "o", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimo", ")", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "feed", "=", "{", "\n", "self", ".", "target", ".", "o_tf", ":", "o", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimo", ")", ",", "\n", "self", ".", "target", ".", "g_tf", ":", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", ",", "\n", "self", ".", "bath_tf_r", ":", "r", ",", "\n", "self", ".", "main", ".", "o_tf", ":", "o", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimo", ")", ",", "\n", "self", ".", "main", ".", "g_tf", ":", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", ",", "\n", "self", ".", "main", ".", "u_tf", ":", "u", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimu", ")", "\n", "}", "\n", "td_errors", "=", "self", ".", "sess", ".", "run", "(", "vals", ",", "feed_dict", "=", "feed", ")", "\n", "td_errors", "=", "td_errors", ".", "copy", "(", ")", "\n", "\n", "return", "td_errors", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.store_episode": [[178, 214], ["ddpg.DDPG.buffer.store_episode", "baselines.her.util.transitions_in_episode_batch", "ddpg.DDPG._preprocess_og", "ddpg.DDPG.o_stats.update", "ddpg.DDPG.g_stats.update", "ddpg.DDPG.o_stats.recompute_stats", "ddpg.DDPG.g_stats.recompute_stats", "ddpg.DDPG.buffer.store_episode", "ddpg.DDPG.buffer.store_episode", "ddpg.DDPG.sample_transitions", "ddpg.DDPG.sample_transitions", "ddpg.DDPG.sample_transitions", "len"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.store_episode", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.transitions_in_episode_batch", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._preprocess_og", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.IdentityNormalizer.recompute_stats", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.IdentityNormalizer.recompute_stats", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.store_episode", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.store_episode"], ["", "def", "store_episode", "(", "self", ",", "episode_batch", ",", "dump_buffer", ",", "w_potential", ",", "w_linear", ",", "w_rotational", ",", "rank_method", ",", "clip_energy", ",", "update_stats", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        episode_batch: array of batch_size x (T or T+1) x dim_key\n                       'o' is of size T+1, others are of size T\n        \"\"\"", "\n", "if", "self", ".", "prioritization", "==", "'tderror'", ":", "\n", "            ", "self", ".", "buffer", ".", "store_episode", "(", "episode_batch", ",", "dump_buffer", ")", "\n", "", "elif", "self", ".", "prioritization", "==", "'energy'", ":", "\n", "            ", "self", ".", "buffer", ".", "store_episode", "(", "episode_batch", ",", "w_potential", ",", "w_linear", ",", "w_rotational", ",", "rank_method", ",", "clip_energy", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "buffer", ".", "store_episode", "(", "episode_batch", ")", "\n", "\n", "", "if", "update_stats", ":", "\n", "# add transitions to normalizer", "\n", "            ", "episode_batch", "[", "'o_2'", "]", "=", "episode_batch", "[", "'o'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "episode_batch", "[", "'ag_2'", "]", "=", "episode_batch", "[", "'ag'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "num_normalizing_transitions", "=", "transitions_in_episode_batch", "(", "episode_batch", ")", "\n", "\n", "if", "self", ".", "prioritization", "==", "'energy'", ":", "\n", "                ", "if", "not", "self", ".", "buffer", ".", "current_size", "==", "0", "and", "not", "len", "(", "episode_batch", "[", "'ag'", "]", ")", "==", "0", ":", "\n", "                    ", "transitions", "=", "self", ".", "sample_transitions", "(", "episode_batch", ",", "num_normalizing_transitions", ",", "'none'", ",", "1.0", ",", "True", ")", "\n", "", "", "elif", "self", ".", "prioritization", "==", "'tderror'", ":", "\n", "                ", "transitions", ",", "weights", ",", "episode_idxs", "=", "self", ".", "sample_transitions", "(", "self", ".", "buffer", ",", "episode_batch", ",", "num_normalizing_transitions", ",", "beta", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "transitions", "=", "self", ".", "sample_transitions", "(", "episode_batch", ",", "num_normalizing_transitions", ")", "\n", "\n", "\n", "", "o", ",", "o_2", ",", "g", ",", "ag", "=", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'o_2'", "]", ",", "transitions", "[", "'g'", "]", ",", "transitions", "[", "'ag'", "]", "\n", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'g'", "]", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "\n", "self", ".", "o_stats", ".", "update", "(", "transitions", "[", "'o'", "]", ")", "\n", "self", ".", "g_stats", ".", "update", "(", "transitions", "[", "'g'", "]", ")", "\n", "\n", "self", ".", "o_stats", ".", "recompute_stats", "(", ")", "\n", "self", ".", "g_stats", ".", "recompute_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.get_current_buffer_size": [[215, 217], ["ddpg.DDPG.buffer.get_current_size"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.ReplayBufferEnergy.get_current_size"], ["", "", "def", "get_current_buffer_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "buffer", ".", "get_current_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.dump_buffer": [[218, 220], ["ddpg.DDPG.buffer.dump_buffer"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.dump_buffer"], ["", "def", "dump_buffer", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "buffer", ".", "dump_buffer", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._sync_optimizers": [[221, 224], ["ddpg.DDPG.Q_adam.sync", "ddpg.DDPG.pi_adam.sync"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_adam.MpiAdam.sync"], ["", "def", "_sync_optimizers", "(", "self", ")", ":", "\n", "        ", "self", ".", "Q_adam", ".", "sync", "(", ")", "\n", "self", ".", "pi_adam", ".", "sync", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._grads": [[225, 235], ["ddpg.DDPG.sess.run"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run"], ["", "def", "_grads", "(", "self", ")", ":", "\n", "# Avoid feed_dict here for performance!", "\n", "        ", "critic_loss", ",", "actor_loss", ",", "Q_grad", ",", "pi_grad", ",", "td_error", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "Q_loss_tf", ",", "\n", "self", ".", "main", ".", "Q_pi_tf", ",", "\n", "self", ".", "Q_grad_tf", ",", "\n", "self", ".", "pi_grad_tf", ",", "\n", "self", ".", "td_error_tf", "\n", "]", ")", "\n", "return", "critic_loss", ",", "actor_loss", ",", "Q_grad", ",", "pi_grad", ",", "td_error", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._update": [[236, 239], ["ddpg.DDPG.Q_adam.update", "ddpg.DDPG.pi_adam.update"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "_update", "(", "self", ",", "Q_grad", ",", "pi_grad", ")", ":", "\n", "        ", "self", ".", "Q_adam", ".", "update", "(", "Q_grad", ",", "self", ".", "Q_lr", ")", "\n", "self", ".", "pi_adam", ".", "update", "(", "pi_grad", ",", "self", ".", "pi_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.sample_batch": [[240, 263], ["ddpg.DDPG._preprocess_og", "ddpg.DDPG._preprocess_og", "numpy.ones_like().copy.flatten().copy", "ddpg.DDPG.buffer.sample", "numpy.ones_like().copy", "ddpg.DDPG.buffer.sample", "ddpg.DDPG.buffer.sample", "numpy.ones_like().copy", "numpy.ones_like().copy.flatten", "ddpg.DDPG.stage_shapes.keys", "numpy.ones_like", "ddpg.DDPG.beta_schedule.value", "numpy.ones_like"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._preprocess_og", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._preprocess_og", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.sample", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.sample", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.sample", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value"], ["", "def", "sample_batch", "(", "self", ",", "t", ")", ":", "\n", "\n", "        ", "if", "self", ".", "prioritization", "==", "'energy'", ":", "\n", "            ", "transitions", "=", "self", ".", "buffer", ".", "sample", "(", "self", ".", "batch_size", ",", "self", ".", "rank_method", ",", "temperature", "=", "self", ".", "temperature", ")", "\n", "weights", "=", "np", ".", "ones_like", "(", "transitions", "[", "'r'", "]", ")", ".", "copy", "(", ")", "\n", "", "elif", "self", ".", "prioritization", "==", "'tderror'", ":", "\n", "            ", "transitions", ",", "weights", ",", "idxs", "=", "self", ".", "buffer", ".", "sample", "(", "self", ".", "batch_size", ",", "beta", "=", "self", ".", "beta_schedule", ".", "value", "(", "t", ")", ")", "\n", "", "else", ":", "\n", "            ", "transitions", "=", "self", ".", "buffer", ".", "sample", "(", "self", ".", "batch_size", ")", "\n", "weights", "=", "np", ".", "ones_like", "(", "transitions", "[", "'r'", "]", ")", ".", "copy", "(", ")", "\n", "\n", "", "o", ",", "o_2", ",", "g", "=", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'o_2'", "]", ",", "transitions", "[", "'g'", "]", "\n", "ag", ",", "ag_2", "=", "transitions", "[", "'ag'", "]", ",", "transitions", "[", "'ag_2'", "]", "\n", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'g'", "]", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "transitions", "[", "'o_2'", "]", ",", "transitions", "[", "'g_2'", "]", "=", "self", ".", "_preprocess_og", "(", "o_2", ",", "ag_2", ",", "g", ")", "\n", "\n", "transitions", "[", "'w'", "]", "=", "weights", ".", "flatten", "(", ")", ".", "copy", "(", ")", "# note: ordered dict", "\n", "transitions_batch", "=", "[", "transitions", "[", "key", "]", "for", "key", "in", "self", ".", "stage_shapes", ".", "keys", "(", ")", "]", "\n", "\n", "if", "self", ".", "prioritization", "==", "'tderror'", ":", "\n", "            ", "return", "(", "transitions_batch", ",", "idxs", ")", "\n", "", "else", ":", "\n", "            ", "return", "transitions_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.stage_batch": [[264, 275], ["ddpg.DDPG.sess.run", "len", "len", "ddpg.DDPG.sample_batch", "ddpg.DDPG.sample_batch", "dict", "zip"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.sample_batch", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.sample_batch"], ["", "", "def", "stage_batch", "(", "self", ",", "t", ",", "batch", "=", "None", ")", ":", "#", "\n", "        ", "if", "batch", "is", "None", ":", "\n", "            ", "if", "self", ".", "prioritization", "==", "'tderror'", ":", "\n", "                ", "batch", ",", "idxs", "=", "self", ".", "sample_batch", "(", "t", ")", "\n", "", "else", ":", "\n", "                ", "batch", "=", "self", ".", "sample_batch", "(", "t", ")", "\n", "", "", "assert", "len", "(", "self", ".", "buffer_ph_tf", ")", "==", "len", "(", "batch", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "stage_op", ",", "feed_dict", "=", "dict", "(", "zip", "(", "self", ".", "buffer_ph_tf", ",", "batch", ")", ")", ")", "\n", "\n", "if", "self", ".", "prioritization", "==", "'tderror'", ":", "\n", "            ", "return", "idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.train": [[276, 299], ["ddpg.DDPG._grads", "ddpg.DDPG._update", "ddpg.DDPG.buffer.update_priorities", "ddpg.DDPG.stage_batch", "ddpg.DDPG.stage_batch", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._grads", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.replay_buffer.PrioritizedReplayBuffer.update_priorities", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.stage_batch", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.stage_batch"], ["", "", "def", "train", "(", "self", ",", "t", ",", "dump_buffer", ",", "stage", "=", "True", ")", ":", "\n", "        ", "if", "not", "self", ".", "buffer", ".", "current_size", "==", "0", ":", "\n", "            ", "if", "stage", ":", "\n", "                ", "if", "self", ".", "prioritization", "==", "'tderror'", ":", "\n", "                    ", "idxs", "=", "self", ".", "stage_batch", "(", "t", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "stage_batch", "(", "t", ")", "\n", "", "", "critic_loss", ",", "actor_loss", ",", "Q_grad", ",", "pi_grad", ",", "td_error", "=", "self", ".", "_grads", "(", ")", "\n", "if", "self", ".", "prioritization", "==", "'tderror'", ":", "\n", "                ", "new_priorities", "=", "np", ".", "abs", "(", "td_error", ")", "+", "self", ".", "eps", "# td_error", "\n", "\n", "if", "dump_buffer", ":", "\n", "                    ", "T", "=", "self", ".", "buffer", ".", "buffers", "[", "'u'", "]", ".", "shape", "[", "1", "]", "\n", "episode_idxs", "=", "idxs", "//", "T", "\n", "t_samples", "=", "idxs", "%", "T", "\n", "batch_size", "=", "td_error", ".", "shape", "[", "0", "]", "\n", "with", "self", ".", "buffer", ".", "lock", ":", "\n", "                        ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                            ", "self", ".", "buffer", ".", "buffers", "[", "'td'", "]", "[", "episode_idxs", "[", "i", "]", "]", "[", "t_samples", "[", "i", "]", "]", "=", "td_error", "[", "i", "]", "\n", "\n", "", "", "", "self", ".", "buffer", ".", "update_priorities", "(", "idxs", ",", "new_priorities", ")", "\n", "", "self", ".", "_update", "(", "Q_grad", ",", "pi_grad", ")", "\n", "return", "critic_loss", ",", "actor_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._init_target_net": [[300, 302], ["ddpg.DDPG.sess.run"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run"], ["", "", "def", "_init_target_net", "(", "self", ")", ":", "\n", "        ", "self", ".", "sess", ".", "run", "(", "self", ".", "init_target_net_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.update_target_net": [[303, 305], ["ddpg.DDPG.sess.run"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run"], ["", "def", "update_target_net", "(", "self", ")", ":", "\n", "        ", "self", ".", "sess", ".", "run", "(", "self", ".", "update_target_net_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.clear_buffer": [[306, 308], ["ddpg.DDPG.buffer.clear_buffer"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.clear_buffer"], ["", "def", "clear_buffer", "(", "self", ")", ":", "\n", "        ", "self", ".", "buffer", ".", "clear_buffer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars": [[309, 313], ["tensorflow.get_collection", "len"], "methods", ["None"], ["", "def", "_vars", "(", "self", ",", "scope", ")", ":", "\n", "        ", "res", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "self", ".", "scope", "+", "'/'", "+", "scope", ")", "\n", "assert", "len", "(", "res", ")", ">", "0", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._global_vars": [[314, 317], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "_global_vars", "(", "self", ",", "scope", ")", ":", "\n", "        ", "res", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "scope", "+", "'/'", "+", "scope", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._create_network": [[318, 397], ["baselines.logger.info", "tensorflow.get_default_session", "ddpg.DDPG.staging_tf.get", "collections.OrderedDict", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.clip_by_value", "tensorflow.square", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.gradients", "tensorflow.gradients", "zip", "zip", "baselines.her.util.flatten_grads", "baselines.her.util.flatten_grads", "baselines.common.mpi_adam.MpiAdam", "baselines.common.mpi_adam.MpiAdam", "list", "list", "tensorflow.variables_initializer().run", "ddpg.DDPG._sync_optimizers", "ddpg.DDPG._init_target_net", "tensorflow.InteractiveSession", "tensorflow.variable_scope", "baselines.her.normalizer.Normalizer", "tensorflow.variable_scope", "baselines.her.normalizer.Normalizer", "tensorflow.variable_scope", "ddpg.DDPG.create_actor_critic", "vs.reuse_variables", "tensorflow.variable_scope", "collections.OrderedDict.copy", "ddpg.DDPG.create_actor_critic", "vs.reuse_variables", "len", "len", "tensorflow.stop_gradient", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "len", "len", "len", "len", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._global_vars", "ddpg.DDPG._global_vars", "map", "map", "vs.reuse_variables", "vs.reuse_variables", "vs.reuse_variables", "vs.reuse_variables", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "tensorflow.square", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "ddpg.DDPG._vars", "zip", "zip", "tensorflow.variables_initializer", "enumerate", "v[].assign", "v[].assign", "ddpg.DDPG._global_vars", "ddpg.DDPG.stage_shapes.keys"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.info", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.flatten_grads", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.flatten_grads", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._sync_optimizers", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._init_target_net", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._global_vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._global_vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._vars", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._global_vars"], ["", "def", "_create_network", "(", "self", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Creating a DDPG agent with action space %d x %s...\"", "%", "(", "self", ".", "dimu", ",", "self", ".", "max_u", ")", ")", "\n", "\n", "self", ".", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "if", "self", ".", "sess", "is", "None", ":", "\n", "            ", "self", ".", "sess", "=", "tf", ".", "InteractiveSession", "(", ")", "\n", "\n", "# running averages", "\n", "", "with", "tf", ".", "variable_scope", "(", "'o_stats'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "o_stats", "=", "Normalizer", "(", "self", ".", "dimo", ",", "self", ".", "norm_eps", ",", "self", ".", "norm_clip", ",", "sess", "=", "self", ".", "sess", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'g_stats'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "g_stats", "=", "Normalizer", "(", "self", ".", "dimg", ",", "self", ".", "norm_eps", ",", "self", ".", "norm_clip", ",", "sess", "=", "self", ".", "sess", ")", "\n", "\n", "# mini-batch sampling.", "\n", "", "batch", "=", "self", ".", "staging_tf", ".", "get", "(", ")", "\n", "batch_tf", "=", "OrderedDict", "(", "[", "(", "key", ",", "batch", "[", "i", "]", ")", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "stage_shapes", ".", "keys", "(", ")", ")", "]", ")", "\n", "batch_tf", "[", "'r'", "]", "=", "tf", ".", "reshape", "(", "batch_tf", "[", "'r'", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "batch_tf", "[", "'w'", "]", "=", "tf", ".", "reshape", "(", "batch_tf", "[", "'w'", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "# networks", "\n", "with", "tf", ".", "variable_scope", "(", "'main'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "main", "=", "self", ".", "create_actor_critic", "(", "batch_tf", ",", "net_type", "=", "'main'", ",", "**", "self", ".", "__dict__", ")", "\n", "vs", ".", "reuse_variables", "(", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'target'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "target_batch_tf", "=", "batch_tf", ".", "copy", "(", ")", "\n", "target_batch_tf", "[", "'o'", "]", "=", "batch_tf", "[", "'o_2'", "]", "\n", "target_batch_tf", "[", "'g'", "]", "=", "batch_tf", "[", "'g_2'", "]", "\n", "self", ".", "target", "=", "self", ".", "create_actor_critic", "(", "\n", "target_batch_tf", ",", "net_type", "=", "'target'", ",", "**", "self", ".", "__dict__", ")", "\n", "vs", ".", "reuse_variables", "(", ")", "\n", "", "assert", "len", "(", "self", ".", "_vars", "(", "\"main\"", ")", ")", "==", "len", "(", "self", ".", "_vars", "(", "\"target\"", ")", ")", "\n", "\n", "# loss functions", "\n", "target_Q_pi_tf", "=", "self", ".", "target", ".", "Q_pi_tf", "\n", "clip_range", "=", "(", "-", "self", ".", "clip_return", ",", "0.", "if", "self", ".", "clip_pos_returns", "else", "np", ".", "inf", ")", "\n", "target_tf", "=", "tf", ".", "clip_by_value", "(", "batch_tf", "[", "'r'", "]", "+", "self", ".", "gamma", "*", "target_Q_pi_tf", ",", "*", "clip_range", ")", "\n", "\n", "self", ".", "td_error_tf", "=", "tf", ".", "stop_gradient", "(", "target_tf", ")", "-", "self", ".", "main", ".", "Q_tf", "\n", "self", ".", "errors_tf", "=", "tf", ".", "square", "(", "self", ".", "td_error_tf", ")", "\n", "self", ".", "errors_tf", "=", "tf", ".", "reduce_mean", "(", "batch_tf", "[", "'w'", "]", "*", "self", ".", "errors_tf", ")", "\n", "self", ".", "Q_loss_tf", "=", "tf", ".", "reduce_mean", "(", "self", ".", "errors_tf", ")", "\n", "\n", "self", ".", "pi_loss_tf", "=", "-", "tf", ".", "reduce_mean", "(", "self", ".", "main", ".", "Q_pi_tf", ")", "\n", "self", ".", "pi_loss_tf", "+=", "self", ".", "action_l2", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "self", ".", "main", ".", "pi_tf", "/", "self", ".", "max_u", ")", ")", "\n", "Q_grads_tf", "=", "tf", ".", "gradients", "(", "self", ".", "Q_loss_tf", ",", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "\n", "pi_grads_tf", "=", "tf", ".", "gradients", "(", "self", ".", "pi_loss_tf", ",", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "assert", "len", "(", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "==", "len", "(", "Q_grads_tf", ")", "\n", "assert", "len", "(", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "==", "len", "(", "pi_grads_tf", ")", "\n", "self", ".", "Q_grads_vars_tf", "=", "zip", "(", "Q_grads_tf", ",", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "\n", "self", ".", "pi_grads_vars_tf", "=", "zip", "(", "pi_grads_tf", ",", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "self", ".", "Q_grad_tf", "=", "flatten_grads", "(", "grads", "=", "Q_grads_tf", ",", "var_list", "=", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "\n", "self", ".", "pi_grad_tf", "=", "flatten_grads", "(", "grads", "=", "pi_grads_tf", ",", "var_list", "=", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "\n", "# optimizers", "\n", "self", ".", "Q_adam", "=", "MpiAdam", "(", "self", ".", "_vars", "(", "'main/Q'", ")", ",", "scale_grad_by_procs", "=", "False", ")", "\n", "self", ".", "pi_adam", "=", "MpiAdam", "(", "self", ".", "_vars", "(", "'main/pi'", ")", ",", "scale_grad_by_procs", "=", "False", ")", "\n", "\n", "# polyak averaging", "\n", "self", ".", "main_vars", "=", "self", ".", "_vars", "(", "'main/Q'", ")", "+", "self", ".", "_vars", "(", "'main/pi'", ")", "\n", "self", ".", "target_vars", "=", "self", ".", "_vars", "(", "'target/Q'", ")", "+", "self", ".", "_vars", "(", "'target/pi'", ")", "\n", "self", ".", "stats_vars", "=", "self", ".", "_global_vars", "(", "'o_stats'", ")", "+", "self", ".", "_global_vars", "(", "'g_stats'", ")", "\n", "self", ".", "init_target_net_op", "=", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ".", "assign", "(", "v", "[", "1", "]", ")", ",", "zip", "(", "self", ".", "target_vars", ",", "self", ".", "main_vars", ")", ")", ")", "\n", "self", ".", "update_target_net_op", "=", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ".", "assign", "(", "self", ".", "polyak", "*", "v", "[", "0", "]", "+", "(", "1.", "-", "self", ".", "polyak", ")", "*", "v", "[", "1", "]", ")", ",", "zip", "(", "self", ".", "target_vars", ",", "self", ".", "main_vars", ")", ")", ")", "\n", "\n", "# initialize all variables", "\n", "tf", ".", "variables_initializer", "(", "self", ".", "_global_vars", "(", "''", ")", ")", ".", "run", "(", ")", "\n", "self", ".", "_sync_optimizers", "(", ")", "\n", "self", ".", "_init_target_net", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.logs": [[398, 409], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "prefix.endswith", "ddpg.DDPG.sess.run", "ddpg.DDPG.sess.run", "ddpg.DDPG.sess.run", "ddpg.DDPG.sess.run"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run"], ["", "def", "logs", "(", "self", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "logs", "=", "[", "]", "\n", "logs", "+=", "[", "(", "'stats_o/mean'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "o_stats", ".", "mean", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_o/std'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "o_stats", ".", "std", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_g/mean'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "g_stats", ".", "mean", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_g/std'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "g_stats", ".", "std", "]", ")", ")", ")", "]", "\n", "\n", "if", "prefix", "is", "not", "''", "and", "not", "prefix", ".", "endswith", "(", "'/'", ")", ":", "\n", "            ", "return", "[", "(", "prefix", "+", "'/'", "+", "key", ",", "val", ")", "for", "key", ",", "val", "in", "logs", "]", "\n", "", "else", ":", "\n", "            ", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.__getstate__": [[410, 421], ["ddpg.DDPG.sess.run", "ddpg.DDPG.__dict__.items", "all", "ddpg.DDPG._global_vars"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._global_vars"], ["", "", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Our policies can be loaded from pkl, but after unpickling you cannot continue training.\n        \"\"\"", "\n", "excluded_subnames", "=", "[", "'_tf'", ",", "'_op'", ",", "'_vars'", ",", "'_adam'", ",", "'buffer'", ",", "'sess'", ",", "'_stats'", ",", "\n", "'main'", ",", "'target'", ",", "'lock'", ",", "'env'", ",", "'sample_transitions'", ",", "\n", "'stage_shapes'", ",", "'create_actor_critic'", "]", "\n", "\n", "state", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "all", "(", "[", "not", "subname", "in", "k", "for", "subname", "in", "excluded_subnames", "]", ")", "}", "\n", "state", "[", "'buffer_size'", "]", "=", "self", ".", "buffer_size", "\n", "state", "[", "'tf'", "]", "=", "self", ".", "sess", ".", "run", "(", "[", "x", "for", "x", "in", "self", ".", "_global_vars", "(", "''", ")", "if", "'buffer'", "not", "in", "x", ".", "name", "]", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.__setstate__": [[422, 438], ["ddpg.DDPG.__init__", "state.items", "ddpg.DDPG.sess.run", "len", "len", "tensorflow.assign", "ddpg.DDPG._global_vars", "zip"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG._global_vars"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "'sample_transitions'", "not", "in", "state", ":", "\n", "# We don't need this for playing the policy.", "\n", "            ", "state", "[", "'sample_transitions'", "]", "=", "None", "\n", "", "state", "[", "'env_name'", "]", "=", "None", "# No need for playing the policy", "\n", "\n", "self", ".", "__init__", "(", "**", "state", ")", "\n", "# set up stats (they are overwritten in __init__)", "\n", "for", "k", ",", "v", "in", "state", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "[", "-", "6", ":", "]", "==", "'_stats'", ":", "\n", "                ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "# load TF variables", "\n", "", "", "vars", "=", "[", "x", "for", "x", "in", "self", ".", "_global_vars", "(", "''", ")", "if", "'buffer'", "not", "in", "x", ".", "name", "]", "\n", "assert", "(", "len", "(", "vars", ")", "==", "len", "(", "state", "[", "\"tf\"", "]", ")", ")", "\n", "node", "=", "[", "tf", ".", "assign", "(", "var", ",", "val", ")", "for", "var", ",", "val", "in", "zip", "(", "vars", ",", "state", "[", "\"tf\"", "]", ")", "]", "\n", "self", ".", "sess", ".", "run", "(", "node", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.dims_to_shapes": [[17, 19], ["tuple", "tuple", "input_dims.items"], "function", ["None"], ["def", "dims_to_shapes", "(", "input_dims", ")", ":", "\n", "    ", "return", "{", "key", ":", "tuple", "(", "[", "val", "]", ")", "if", "val", ">", "0", "else", "tuple", "(", ")", "for", "key", ",", "val", "in", "input_dims", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.Normalizer.__init__": [[11, 63], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.group", "tensorflow.group", "threading.Lock", "tensorflow.get_default_session", "normalizer.Normalizer.count_tf.assign_add", "normalizer.Normalizer.sum_tf.assign_add", "normalizer.Normalizer.sumsq_tf.assign_add", "tensorflow.assign", "tensorflow.assign", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.sqrt", "tensorflow.maximum", "tensorflow.square", "tensorflow.square"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "eps", "=", "1e-2", ",", "default_clip_range", "=", "np", ".", "inf", ",", "sess", "=", "None", ")", ":", "\n", "        ", "\"\"\"A normalizer that ensures that observations are approximately distributed according to\n        a standard Normal distribution (i.e. have mean zero and variance one).\n\n        Args:\n            size (int): the size of the observation to be normalized\n            eps (float): a small constant that avoids underflows\n            default_clip_range (float): normalized observations are clipped to be in\n                [-default_clip_range, default_clip_range]\n            sess (object): the TensorFlow session to be used\n        \"\"\"", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "default_clip_range", "=", "default_clip_range", "\n", "self", ".", "sess", "=", "sess", "if", "sess", "is", "not", "None", "else", "tf", ".", "get_default_session", "(", ")", "\n", "\n", "self", ".", "local_sum", "=", "np", ".", "zeros", "(", "self", ".", "size", ",", "np", ".", "float32", ")", "\n", "self", ".", "local_sumsq", "=", "np", ".", "zeros", "(", "self", ".", "size", ",", "np", ".", "float32", ")", "\n", "self", ".", "local_count", "=", "np", ".", "zeros", "(", "1", ",", "np", ".", "float32", ")", "\n", "\n", "self", ".", "sum_tf", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "shape", "=", "self", ".", "local_sum", ".", "shape", ",", "name", "=", "'sum'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "sumsq_tf", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "shape", "=", "self", ".", "local_sumsq", ".", "shape", ",", "name", "=", "'sumsq'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "count_tf", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "shape", "=", "self", ".", "local_count", ".", "shape", ",", "name", "=", "'count'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "mean", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "name", "=", "'mean'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "std", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "name", "=", "'std'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "count_pl", "=", "tf", ".", "placeholder", "(", "name", "=", "'count_pl'", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "sum_pl", "=", "tf", ".", "placeholder", "(", "name", "=", "'sum_pl'", ",", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "sumsq_pl", "=", "tf", ".", "placeholder", "(", "name", "=", "'sumsq_pl'", ",", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "update_op", "=", "tf", ".", "group", "(", "\n", "self", ".", "count_tf", ".", "assign_add", "(", "self", ".", "count_pl", ")", ",", "\n", "self", ".", "sum_tf", ".", "assign_add", "(", "self", ".", "sum_pl", ")", ",", "\n", "self", ".", "sumsq_tf", ".", "assign_add", "(", "self", ".", "sumsq_pl", ")", "\n", ")", "\n", "self", ".", "recompute_op", "=", "tf", ".", "group", "(", "\n", "tf", ".", "assign", "(", "self", ".", "mean", ",", "self", ".", "sum_tf", "/", "self", ".", "count_tf", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "std", ",", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "\n", "tf", ".", "square", "(", "self", ".", "eps", ")", ",", "\n", "self", ".", "sumsq_tf", "/", "self", ".", "count_tf", "-", "tf", ".", "square", "(", "self", ".", "sum_tf", "/", "self", ".", "count_tf", ")", "\n", ")", ")", ")", ",", "\n", ")", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.Normalizer.update": [[64, 71], ["v.reshape.reshape.reshape", "v.reshape.reshape.sum", "numpy.square().sum", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum"], ["", "def", "update", "(", "self", ",", "v", ")", ":", "\n", "        ", "v", "=", "v", ".", "reshape", "(", "-", "1", ",", "self", ".", "size", ")", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "local_sum", "+=", "v", ".", "sum", "(", "axis", "=", "0", ")", "\n", "self", ".", "local_sumsq", "+=", "(", "np", ".", "square", "(", "v", ")", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "self", ".", "local_count", "[", "0", "]", "+=", "v", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.Normalizer.normalize": [[72, 78], ["baselines.her.util.reshape_for_broadcasting", "baselines.her.util.reshape_for_broadcasting", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.reshape_for_broadcasting", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.reshape_for_broadcasting"], ["", "", "def", "normalize", "(", "self", ",", "v", ",", "clip_range", "=", "None", ")", ":", "\n", "        ", "if", "clip_range", "is", "None", ":", "\n", "            ", "clip_range", "=", "self", ".", "default_clip_range", "\n", "", "mean", "=", "reshape_for_broadcasting", "(", "self", ".", "mean", ",", "v", ")", "\n", "std", "=", "reshape_for_broadcasting", "(", "self", ".", "std", ",", "v", ")", "\n", "return", "tf", ".", "clip_by_value", "(", "(", "v", "-", "mean", ")", "/", "std", ",", "-", "clip_range", ",", "clip_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.Normalizer.denormalize": [[79, 83], ["baselines.her.util.reshape_for_broadcasting", "baselines.her.util.reshape_for_broadcasting"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.reshape_for_broadcasting", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.reshape_for_broadcasting"], ["", "def", "denormalize", "(", "self", ",", "v", ")", ":", "\n", "        ", "mean", "=", "reshape_for_broadcasting", "(", "self", ".", "mean", ",", "v", ")", "\n", "std", "=", "reshape_for_broadcasting", "(", "self", ".", "std", ",", "v", ")", "\n", "return", "mean", "+", "v", "*", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.Normalizer._mpi_average": [[84, 89], ["numpy.zeros_like", "mpi4py.MPI.COMM_WORLD.Allreduce", "mpi4py.MPI.COMM_WORLD.Get_size"], "methods", ["None"], ["", "def", "_mpi_average", "(", "self", ",", "x", ")", ":", "\n", "        ", "buf", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "x", ",", "buf", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "buf", "/=", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "return", "buf", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.Normalizer.synchronize": [[90, 95], ["normalizer.Normalizer._mpi_average", "normalizer.Normalizer._mpi_average", "normalizer.Normalizer._mpi_average"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.Normalizer._mpi_average", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.Normalizer._mpi_average", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.Normalizer._mpi_average"], ["", "def", "synchronize", "(", "self", ",", "local_sum", ",", "local_sumsq", ",", "local_count", ",", "root", "=", "None", ")", ":", "\n", "        ", "local_sum", "[", "...", "]", "=", "self", ".", "_mpi_average", "(", "local_sum", ")", "\n", "local_sumsq", "[", "...", "]", "=", "self", ".", "_mpi_average", "(", "local_sumsq", ")", "\n", "local_count", "[", "...", "]", "=", "self", ".", "_mpi_average", "(", "local_count", ")", "\n", "return", "local_sum", ",", "local_sumsq", ",", "local_count", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.Normalizer.recompute_stats": [[96, 119], ["normalizer.Normalizer.synchronize", "normalizer.Normalizer.sess.run", "normalizer.Normalizer.sess.run", "normalizer.Normalizer.local_count.copy", "normalizer.Normalizer.local_sum.copy", "normalizer.Normalizer.local_sumsq.copy"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.IdentityNormalizer.synchronize", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run"], ["", "def", "recompute_stats", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "# Copy over results.", "\n", "            ", "local_count", "=", "self", ".", "local_count", ".", "copy", "(", ")", "\n", "local_sum", "=", "self", ".", "local_sum", ".", "copy", "(", ")", "\n", "local_sumsq", "=", "self", ".", "local_sumsq", ".", "copy", "(", ")", "\n", "\n", "# Reset.", "\n", "self", ".", "local_count", "[", "...", "]", "=", "0", "\n", "self", ".", "local_sum", "[", "...", "]", "=", "0", "\n", "self", ".", "local_sumsq", "[", "...", "]", "=", "0", "\n", "\n", "# We perform the synchronization outside of the lock to keep the critical section as short", "\n", "# as possible.", "\n", "", "synced_sum", ",", "synced_sumsq", ",", "synced_count", "=", "self", ".", "synchronize", "(", "\n", "local_sum", "=", "local_sum", ",", "local_sumsq", "=", "local_sumsq", ",", "local_count", "=", "local_count", ")", "\n", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "update_op", ",", "feed_dict", "=", "{", "\n", "self", ".", "count_pl", ":", "synced_count", ",", "\n", "self", ".", "sum_pl", ":", "synced_sum", ",", "\n", "self", ".", "sumsq_pl", ":", "synced_sumsq", ",", "\n", "}", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "recompute_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.IdentityNormalizer.__init__": [[122, 126], ["tensorflow.zeros", "tensorflow.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "std", "=", "1.", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "mean", "=", "tf", ".", "zeros", "(", "self", ".", "size", ",", "tf", ".", "float32", ")", "\n", "self", ".", "std", "=", "std", "*", "tf", ".", "ones", "(", "self", ".", "size", ",", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.IdentityNormalizer.update": [[127, 129], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.IdentityNormalizer.normalize": [[130, 132], ["None"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "x", ",", "clip_range", "=", "None", ")", ":", "\n", "        ", "return", "x", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.IdentityNormalizer.denormalize": [[133, 135], ["None"], "methods", ["None"], ["", "def", "denormalize", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "std", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.IdentityNormalizer.synchronize": [[136, 138], ["None"], "methods", ["None"], ["", "def", "synchronize", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.IdentityNormalizer.recompute_stats": [[139, 141], ["None"], "methods", ["None"], ["", "def", "recompute_stats", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.her.make_sample_her_transitions": [[8, 71], ["numpy.random.randint", "numpy.random.randint", "numpy.where", "future_offset.astype.astype", "transitions.items", "reward_fun", "[].copy", "numpy.random.uniform", "key.startswith", "transitions[].reshape", "episode_batch.keys", "numpy.random.uniform", "transitions.keys", "key.replace"], "function", ["None"], ["def", "make_sample_her_transitions", "(", "replay_strategy", ",", "replay_k", ",", "reward_fun", ")", ":", "\n", "    ", "\"\"\"Creates a sample function that can be used for HER experience replay.\n\n    Args:\n        replay_strategy (in ['future', 'none']): the HER replay strategy; if set to 'none',\n            regular DDPG experience replay is used\n        replay_k (int): the ratio between HER replays and regular replays (e.g. k = 4 -> 4 times\n            as many HER replays as regular replays are used)\n        reward_fun (function): function to re-compute the reward with substituted goals\n    \"\"\"", "\n", "if", "(", "replay_strategy", "==", "'future'", ")", "or", "(", "replay_strategy", "==", "'final'", ")", ":", "\n", "        ", "future_p", "=", "1", "-", "(", "1.", "/", "(", "1", "+", "replay_k", ")", ")", "\n", "", "else", ":", "# 'replay_strategy' == 'none'", "\n", "        ", "future_p", "=", "0", "\n", "\n", "", "def", "_sample_her_transitions", "(", "episode_batch", ",", "batch_size_in_transitions", ")", ":", "\n", "        ", "\"\"\"episode_batch is {key: array(buffer_size x T x dim_key)}\n        \"\"\"", "\n", "T", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "[", "1", "]", "\n", "rollout_batch_size", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "batch_size_in_transitions", "\n", "\n", "# Select which episodes and time steps to use.", "\n", "episode_idxs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "rollout_batch_size", ",", "batch_size", ")", "\n", "t_samples", "=", "np", ".", "random", ".", "randint", "(", "T", ",", "size", "=", "batch_size", ")", "\n", "transitions", "=", "{", "key", ":", "episode_batch", "[", "key", "]", "[", "episode_idxs", ",", "t_samples", "]", ".", "copy", "(", ")", "\n", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", "}", "\n", "\n", "# Select future time indexes proportional with probability future_p. These", "\n", "# will be used for HER replay by substituting in future goals.", "\n", "her_indexes", "=", "np", ".", "where", "(", "np", ".", "random", ".", "uniform", "(", "size", "=", "batch_size", ")", "<", "future_p", ")", "\n", "future_offset", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "batch_size", ")", "*", "(", "T", "-", "t_samples", ")", "\n", "future_offset", "=", "future_offset", ".", "astype", "(", "int", ")", "\n", "future_t", "=", "(", "t_samples", "+", "1", "+", "future_offset", ")", "[", "her_indexes", "]", "\n", "\n", "if", "replay_strategy", "==", "'final'", ":", "\n", "            ", "future_t", "[", ":", "]", "=", "T", "\n", "\n", "# Replace goal with achieved goal but only for the previously-selected", "\n", "# HER transitions (as defined by her_indexes). For the other transitions,", "\n", "# keep the original goal.", "\n", "", "future_ag", "=", "episode_batch", "[", "'ag'", "]", "[", "episode_idxs", "[", "her_indexes", "]", ",", "future_t", "]", "\n", "transitions", "[", "'g'", "]", "[", "her_indexes", "]", "=", "future_ag", "\n", "\n", "# Reconstruct info dictionary for reward computation.", "\n", "info", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "transitions", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'info_'", ")", ":", "\n", "                ", "info", "[", "key", ".", "replace", "(", "'info_'", ",", "''", ")", "]", "=", "value", "\n", "\n", "# Re-compute reward since we may have substituted the goal.", "\n", "", "", "reward_params", "=", "{", "k", ":", "transitions", "[", "k", "]", "for", "k", "in", "[", "'ag_2'", ",", "'g'", "]", "}", "\n", "reward_params", "[", "'info'", "]", "=", "info", "\n", "transitions", "[", "'r'", "]", "=", "reward_fun", "(", "**", "reward_params", ")", "\n", "\n", "transitions", "=", "{", "k", ":", "transitions", "[", "k", "]", ".", "reshape", "(", "batch_size", ",", "*", "transitions", "[", "k", "]", ".", "shape", "[", "1", ":", "]", ")", "\n", "for", "k", "in", "transitions", ".", "keys", "(", ")", "}", "\n", "\n", "assert", "(", "transitions", "[", "'u'", "]", ".", "shape", "[", "0", "]", "==", "batch_size_in_transitions", ")", "\n", "\n", "return", "transitions", "\n", "\n", "", "return", "_sample_her_transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.her.make_sample_her_transitions_energy": [[73, 144], ["numpy.random.randint", "numpy.random.randint", "episode_batch.keys", "numpy.where", "future_offset.astype.astype", "transitions.items", "reward_fun", "numpy.power", "numpy.random.choice", "numpy.random.uniform", "key.startswith", "transitions[].reshape", "np.power.sum", "[].copy", "numpy.random.uniform", "transitions.keys", "np.power.flatten", "key.replace"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum"], ["", "def", "make_sample_her_transitions_energy", "(", "replay_strategy", ",", "replay_k", ",", "reward_fun", ")", ":", "\n", "\n", "    ", "if", "(", "replay_strategy", "==", "'future'", ")", "or", "(", "replay_strategy", "==", "'final'", ")", ":", "\n", "        ", "future_p", "=", "1", "-", "(", "1.", "/", "(", "1", "+", "replay_k", ")", ")", "\n", "", "else", ":", "\n", "        ", "future_p", "=", "0", "\n", "\n", "\n", "", "def", "_sample_her_transitions", "(", "episode_batch", ",", "batch_size_in_transitions", ",", "rank_method", ",", "temperature", ",", "update_stats", "=", "False", ")", ":", "\n", "\n", "        ", "T", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "[", "1", "]", "\n", "rollout_batch_size", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "batch_size_in_transitions", "\n", "\n", "episode_idxs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "rollout_batch_size", ",", "batch_size", ")", "\n", "t_samples", "=", "np", ".", "random", ".", "randint", "(", "T", ",", "size", "=", "batch_size", ")", "\n", "\n", "if", "not", "update_stats", ":", "\n", "            ", "if", "rank_method", "==", "'none'", ":", "\n", "                ", "energy_trajectory", "=", "episode_batch", "[", "'e'", "]", "\n", "", "else", ":", "\n", "                ", "energy_trajectory", "=", "episode_batch", "[", "'p'", "]", "\n", "", "p_trajectory", "=", "np", ".", "power", "(", "energy_trajectory", ",", "1", "/", "(", "temperature", "+", "1e-2", ")", ")", "\n", "p_trajectory", "=", "p_trajectory", "/", "p_trajectory", ".", "sum", "(", ")", "\n", "episode_idxs_energy", "=", "np", ".", "random", ".", "choice", "(", "rollout_batch_size", ",", "size", "=", "batch_size", ",", "replace", "=", "True", ",", "p", "=", "p_trajectory", ".", "flatten", "(", ")", ")", "\n", "episode_idxs", "=", "episode_idxs_energy", "\n", "\n", "\n", "", "transitions", "=", "{", "}", "\n", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", ":", "\n", "            ", "if", "not", "key", "==", "'p'", "and", "not", "key", "==", "'s'", "and", "not", "key", "==", "'e'", ":", "\n", "                ", "transitions", "[", "key", "]", "=", "episode_batch", "[", "key", "]", "[", "episode_idxs", ",", "t_samples", "]", ".", "copy", "(", ")", "\n", "\n", "# Select future time indexes proportional with probability future_p. These", "\n", "# will be used for HER replay by substituting in future goals.", "\n", "", "", "her_indexes", "=", "np", ".", "where", "(", "np", ".", "random", ".", "uniform", "(", "size", "=", "batch_size", ")", "<", "future_p", ")", "\n", "\n", "future_offset", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "batch_size", ")", "*", "(", "T", "-", "t_samples", ")", "\n", "future_offset", "=", "future_offset", ".", "astype", "(", "int", ")", "\n", "future_t", "=", "(", "t_samples", "+", "1", "+", "future_offset", ")", "[", "her_indexes", "]", "\n", "\n", "if", "replay_strategy", "==", "'final'", ":", "\n", "            ", "future_t", "[", ":", "]", "=", "T", "\n", "\n", "# Replace goal with achieved goal but only for the previously-selected", "\n", "# HER transitions (as defined by her_indexes). For the other transitions,", "\n", "# keep the original goal.", "\n", "", "future_ag", "=", "episode_batch", "[", "'ag'", "]", "[", "episode_idxs", "[", "her_indexes", "]", ",", "future_t", "]", "\n", "\n", "transitions", "[", "'g'", "]", "[", "her_indexes", "]", "=", "future_ag", "\n", "\n", "# Reconstruct info dictionary for reward computation.", "\n", "info", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "transitions", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'info_'", ")", ":", "\n", "                ", "info", "[", "key", ".", "replace", "(", "'info_'", ",", "''", ")", "]", "=", "value", "\n", "\n", "# Re-compute reward since we may have substituted the goal.", "\n", "", "", "reward_params", "=", "{", "k", ":", "transitions", "[", "k", "]", "for", "k", "in", "[", "'ag_2'", ",", "'g'", "]", "}", "\n", "reward_params", "[", "'info'", "]", "=", "info", "\n", "\n", "transitions", "[", "'r'", "]", "=", "reward_fun", "(", "**", "reward_params", ")", "\n", "\n", "transitions", "=", "{", "k", ":", "transitions", "[", "k", "]", ".", "reshape", "(", "batch_size", ",", "*", "transitions", "[", "k", "]", ".", "shape", "[", "1", ":", "]", ")", "\n", "for", "k", "in", "transitions", ".", "keys", "(", ")", "}", "\n", "\n", "assert", "(", "transitions", "[", "'u'", "]", ".", "shape", "[", "0", "]", "==", "batch_size_in_transitions", ")", "\n", "\n", "return", "transitions", "\n", "\n", "", "return", "_sample_her_transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.her.make_sample_her_transitions_prioritized_replay": [[146, 246], ["range", "zip", "numpy.array", "episode_batch.keys", "numpy.where", "future_offset.astype.astype", "transitions.items", "reward_fun", "min", "her.._it_sum.find_prefixsum_idx", "np.array.append", "np.array.append", "numpy.random.randint", "numpy.random.randint", "her.make_sample_her_transitions_prioritized_replay._sample_proportional"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], ["", "def", "make_sample_her_transitions_prioritized_replay", "(", "replay_strategy", ",", "replay_k", ",", "reward_fun", ")", ":", "\n", "\n", "    ", "if", "(", "replay_strategy", "==", "'future'", ")", "or", "(", "replay_strategy", "==", "'final'", ")", ":", "\n", "        ", "future_p", "=", "1", "-", "(", "1.", "/", "(", "1", "+", "replay_k", ")", ")", "\n", "", "else", ":", "\n", "        ", "future_p", "=", "0", "\n", "\n", "", "def", "_sample_proportional", "(", "self", ",", "rollout_batch_size", ",", "batch_size", ",", "T", ")", ":", "\n", "        ", "episode_idxs", "=", "[", "]", "\n", "t_samples", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "self", ".", "n_transitions_stored", "=", "min", "(", "self", ".", "n_transitions_stored", ",", "self", ".", "size_in_transitions", ")", "\n", "mass", "=", "random", ".", "random", "(", ")", "*", "self", ".", "_it_sum", ".", "sum", "(", "0", ",", "self", ".", "n_transitions_stored", "-", "1", ")", "\n", "idx", "=", "self", ".", "_it_sum", ".", "find_prefixsum_idx", "(", "mass", ")", "\n", "assert", "idx", "<", "self", ".", "n_transitions_stored", "\n", "episode_idx", "=", "idx", "//", "T", "\n", "assert", "episode_idx", "<", "rollout_batch_size", "\n", "t_sample", "=", "idx", "%", "T", "\n", "episode_idxs", ".", "append", "(", "episode_idx", ")", "\n", "t_samples", ".", "append", "(", "t_sample", ")", "\n", "\n", "", "return", "(", "episode_idxs", ",", "t_samples", ")", "\n", "\n", "", "def", "_sample_her_transitions", "(", "self", ",", "episode_batch", ",", "batch_size_in_transitions", ",", "beta", ")", ":", "\n", "        ", "\"\"\"episode_batch is {key: array(buffer_size x T x dim_key)}\n        \"\"\"", "\n", "\n", "T", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "[", "1", "]", "\n", "rollout_batch_size", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "batch_size_in_transitions", "\n", "\n", "if", "rollout_batch_size", "<", "self", ".", "current_size", ":", "\n", "            ", "episode_idxs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "rollout_batch_size", ",", "batch_size", ")", "\n", "t_samples", "=", "np", ".", "random", ".", "randint", "(", "T", ",", "size", "=", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "assert", "beta", ">=", "0", "\n", "episode_idxs", ",", "t_samples", "=", "_sample_proportional", "(", "self", ",", "rollout_batch_size", ",", "batch_size", ",", "T", ")", "\n", "episode_idxs", "=", "np", ".", "array", "(", "episode_idxs", ")", "\n", "t_samples", "=", "np", ".", "array", "(", "t_samples", ")", "\n", "\n", "", "weights", "=", "[", "]", "\n", "p_min", "=", "self", ".", "_it_min", ".", "min", "(", ")", "/", "self", ".", "_it_sum", ".", "sum", "(", ")", "\n", "max_weight", "=", "(", "p_min", "*", "self", ".", "n_transitions_stored", ")", "**", "(", "-", "beta", ")", "\n", "\n", "for", "episode_idx", ",", "t_sample", "in", "zip", "(", "episode_idxs", ",", "t_samples", ")", ":", "\n", "            ", "p_sample", "=", "self", ".", "_it_sum", "[", "episode_idx", "*", "T", "+", "t_sample", "]", "/", "self", ".", "_it_sum", ".", "sum", "(", ")", "\n", "weight", "=", "(", "p_sample", "*", "self", ".", "n_transitions_stored", ")", "**", "(", "-", "beta", ")", "\n", "weights", ".", "append", "(", "weight", "/", "max_weight", ")", "\n", "\n", "", "weights", "=", "np", ".", "array", "(", "weights", ")", "\n", "\n", "transitions", "=", "{", "}", "\n", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", ":", "\n", "            ", "if", "not", "key", "==", "\"td\"", "and", "not", "key", "==", "\"e\"", ":", "\n", "                ", "episode_batch_key", "=", "episode_batch", "[", "key", "]", ".", "copy", "(", ")", "\n", "transitions", "[", "key", "]", "=", "episode_batch_key", "[", "episode_idxs", ",", "t_samples", "]", ".", "copy", "(", ")", "\n", "\n", "# Select future time indexes proportional with probability future_p. These", "\n", "# will be used for HER replay by substituting in future goals.", "\n", "", "", "her_indexes", "=", "np", ".", "where", "(", "np", ".", "random", ".", "uniform", "(", "size", "=", "batch_size", ")", "<", "future_p", ")", "\n", "\n", "future_offset", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "batch_size", ")", "*", "(", "T", "-", "t_samples", ")", "\n", "future_offset", "=", "future_offset", ".", "astype", "(", "int", ")", "\n", "future_t", "=", "(", "t_samples", "+", "1", "+", "future_offset", ")", "[", "her_indexes", "]", "\n", "\n", "if", "replay_strategy", "==", "'final'", ":", "\n", "            ", "future_t", "[", ":", "]", "=", "T", "\n", "\n", "# Replace goal with achieved goal but only for the previously-selected", "\n", "# HER transitions (as defined by her_indexes). For the other transitions,", "\n", "# keep the original goal.", "\n", "", "future_ag", "=", "episode_batch", "[", "'ag'", "]", "[", "episode_idxs", "[", "her_indexes", "]", ",", "future_t", "]", "\n", "\n", "# Reconstruct info dictionary for reward computation.", "\n", "info", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "transitions", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'info_'", ")", ":", "\n", "                ", "info", "[", "key", ".", "replace", "(", "'info_'", ",", "''", ")", "]", "=", "value", "\n", "\n", "", "", "reward_params", "=", "{", "k", ":", "transitions", "[", "k", "]", "for", "k", "in", "[", "'ag_2'", ",", "'g'", "]", "}", "\n", "reward_params", "[", "'info'", "]", "=", "info", "\n", "\n", "transitions", "[", "'g'", "]", "[", "her_indexes", "]", "=", "future_ag", "\n", "\n", "# Re-compute reward since we may have substituted the goal.", "\n", "reward_params", "=", "{", "k", ":", "transitions", "[", "k", "]", "for", "k", "in", "[", "'ag_2'", ",", "'g'", "]", "}", "\n", "reward_params", "[", "'info'", "]", "=", "info", "\n", "\n", "transitions", "[", "'r'", "]", "=", "reward_fun", "(", "**", "reward_params", ")", "\n", "\n", "transitions", "=", "{", "k", ":", "transitions", "[", "k", "]", ".", "reshape", "(", "batch_size", ",", "*", "transitions", "[", "k", "]", ".", "shape", "[", "1", ":", "]", ")", "\n", "for", "k", "in", "transitions", ".", "keys", "(", ")", "}", "\n", "\n", "assert", "(", "transitions", "[", "'u'", "]", ".", "shape", "[", "0", "]", "==", "batch_size_in_transitions", ")", "\n", "\n", "idxs", "=", "episode_idxs", "*", "T", "+", "t_samples", "\n", "\n", "return", "(", "transitions", ",", "weights", ",", "idxs", ")", "\n", "\n", "", "return", "_sample_her_transitions", "\n", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.actor_critic.ActorCritic.__init__": [[6, 45], ["actor_critic.ActorCritic.o_stats.normalize", "actor_critic.ActorCritic.g_stats.normalize", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.concat", "baselines.her.util.nn", "tensorflow.concat", "baselines.her.util.nn", "tensorflow.tanh", "baselines.her.util.nn"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.IdentityNormalizer.normalize", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.normalizer.IdentityNormalizer.normalize", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.nn", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.nn", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.nn"], ["    ", "@", "store_args", "\n", "def", "__init__", "(", "self", ",", "inputs_tf", ",", "dimo", ",", "dimg", ",", "dimu", ",", "max_u", ",", "o_stats", ",", "g_stats", ",", "hidden", ",", "layers", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"The actor-critic network and related training code.\n\n        Args:\n            inputs_tf (dict of tensors): all necessary inputs for the network: the\n                observation (o), the goal (g), and the action (u)\n            dimo (int): the dimension of the observations\n            dimg (int): the dimension of the goals\n            dimu (int): the dimension of the actions\n            max_u (float): the maximum magnitude of actions; action outputs will be scaled\n                accordingly\n            o_stats (baselines.her.Normalizer): normalizer for observations\n            g_stats (baselines.her.Normalizer): normalizer for goals\n            hidden (int): number of hidden units that should be used in hidden layers\n            layers (int): number of hidden layers\n        \"\"\"", "\n", "self", ".", "o_tf", "=", "inputs_tf", "[", "'o'", "]", "\n", "self", ".", "g_tf", "=", "inputs_tf", "[", "'g'", "]", "\n", "self", ".", "u_tf", "=", "inputs_tf", "[", "'u'", "]", "\n", "\n", "# Prepare inputs for actor and critic.", "\n", "o", "=", "self", ".", "o_stats", ".", "normalize", "(", "self", ".", "o_tf", ")", "\n", "g", "=", "self", ".", "g_stats", ".", "normalize", "(", "self", ".", "g_tf", ")", "\n", "input_pi", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "o", ",", "g", "]", ")", "# for actor", "\n", "\n", "# Networks.", "\n", "with", "tf", ".", "variable_scope", "(", "'pi'", ")", ":", "\n", "            ", "self", ".", "pi_tf", "=", "self", ".", "max_u", "*", "tf", ".", "tanh", "(", "nn", "(", "\n", "input_pi", ",", "[", "self", ".", "hidden", "]", "*", "self", ".", "layers", "+", "[", "self", ".", "dimu", "]", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Q'", ")", ":", "\n", "# for policy training", "\n", "            ", "input_Q", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "o", ",", "g", ",", "self", ".", "pi_tf", "/", "self", ".", "max_u", "]", ")", "\n", "self", ".", "Q_pi_tf", "=", "nn", "(", "input_Q", ",", "[", "self", ".", "hidden", "]", "*", "self", ".", "layers", "+", "[", "1", "]", ")", "\n", "# for critic training", "\n", "input_Q", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "o", ",", "g", ",", "self", ".", "u_tf", "/", "self", ".", "max_u", "]", ")", "\n", "self", ".", "_input_Q", "=", "input_Q", "# exposed for tests", "\n", "self", ".", "Q_tf", "=", "nn", "(", "input_Q", ",", "[", "self", ".", "hidden", "]", "*", "self", ".", "layers", "+", "[", "1", "]", ",", "reuse", "=", "True", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.store_args": [[15, 40], ["inspect.getfullargspec", "functools.wraps", "dict", "dict.update", "dict.copy", "zip", "defaults.copy.update", "util..__dict__.update", "method", "zip", "len"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update"], ["def", "store_args", "(", "method", ")", ":", "\n", "    ", "\"\"\"Stores provided method args as instance attributes.\n    \"\"\"", "\n", "argspec", "=", "inspect", ".", "getfullargspec", "(", "method", ")", "\n", "defaults", "=", "{", "}", "\n", "if", "argspec", ".", "defaults", "is", "not", "None", ":", "\n", "        ", "defaults", "=", "dict", "(", "\n", "zip", "(", "argspec", ".", "args", "[", "-", "len", "(", "argspec", ".", "defaults", ")", ":", "]", ",", "argspec", ".", "defaults", ")", ")", "\n", "", "if", "argspec", ".", "kwonlydefaults", "is", "not", "None", ":", "\n", "        ", "defaults", ".", "update", "(", "argspec", ".", "kwonlydefaults", ")", "\n", "", "arg_names", "=", "argspec", ".", "args", "[", "1", ":", "]", "\n", "\n", "@", "functools", ".", "wraps", "(", "method", ")", "\n", "def", "wrapper", "(", "*", "positional_args", ",", "**", "keyword_args", ")", ":", "\n", "        ", "self", "=", "positional_args", "[", "0", "]", "\n", "# Get default arg values", "\n", "args", "=", "defaults", ".", "copy", "(", ")", "\n", "# Add provided arg values", "\n", "for", "name", ",", "value", "in", "zip", "(", "arg_names", ",", "positional_args", "[", "1", ":", "]", ")", ":", "\n", "            ", "args", "[", "name", "]", "=", "value", "\n", "", "args", ".", "update", "(", "keyword_args", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "args", ")", "\n", "return", "method", "(", "*", "positional_args", ",", "**", "keyword_args", ")", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.import_function": [[42, 49], ["spec.split", "importlib.import_module", "getattr"], "function", ["None"], ["", "def", "import_function", "(", "spec", ")", ":", "\n", "    ", "\"\"\"Import a function identified by a string like \"pkg.module:fn_name\".\n    \"\"\"", "\n", "mod_name", ",", "fn_name", "=", "spec", ".", "split", "(", "':'", ")", "\n", "module", "=", "importlib", ".", "import_module", "(", "mod_name", ")", "\n", "fn", "=", "getattr", "(", "module", ",", "fn_name", ")", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.flatten_grads": [[51, 56], ["tensorflow.concat", "tensorflow.reshape", "zip", "baselines.common.tf_util.numel"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.numel"], ["", "def", "flatten_grads", "(", "var_list", ",", "grads", ")", ":", "\n", "    ", "\"\"\"Flattens a variables and their gradients.\n    \"\"\"", "\n", "return", "tf", ".", "concat", "(", "[", "tf", ".", "reshape", "(", "grad", ",", "[", "U", ".", "numel", "(", "v", ")", "]", ")", "\n", "for", "(", "v", ",", "grad", ")", "in", "zip", "(", "var_list", ",", "grads", ")", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.nn": [[58, 74], ["enumerate", "tensorflow.layers.dense", "tensorflow.reshape", "activation", "tensorflow.contrib.layers.xavier_initializer", "len", "str"], "function", ["None"], ["", "def", "nn", "(", "input", ",", "layers_sizes", ",", "reuse", "=", "None", ",", "flatten", "=", "False", ",", "name", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Creates a simple neural network\n    \"\"\"", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "layers_sizes", ")", ":", "\n", "        ", "activation", "=", "tf", ".", "nn", ".", "relu", "if", "i", "<", "len", "(", "layers_sizes", ")", "-", "1", "else", "None", "\n", "input", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "input", ",", "\n", "units", "=", "size", ",", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ",", "\n", "reuse", "=", "reuse", ",", "\n", "name", "=", "name", "+", "'_'", "+", "str", "(", "i", ")", ")", "\n", "if", "activation", ":", "\n", "            ", "input", "=", "activation", "(", "input", ")", "\n", "", "", "if", "flatten", ":", "\n", "        ", "assert", "layers_sizes", "[", "-", "1", "]", "==", "1", "\n", "input", "=", "tf", ".", "reshape", "(", "input", ",", "[", "-", "1", "]", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.install_mpi_excepthook": [[76, 87], ["old_hook", "sys.stdout.flush", "sys.stderr.flush", "MPI.COMM_WORLD.Abort"], "function", ["None"], ["", "def", "install_mpi_excepthook", "(", ")", ":", "\n", "    ", "import", "sys", "\n", "from", "mpi4py", "import", "MPI", "\n", "old_hook", "=", "sys", ".", "excepthook", "\n", "\n", "def", "new_hook", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "        ", "old_hook", "(", "a", ",", "b", ",", "c", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Abort", "(", ")", "\n", "", "sys", ".", "excepthook", "=", "new_hook", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.mpi_fork": [[89, 127], ["os.getenv", "os.environ.copy", "os.environ.copy.update", "subprocess.check_call", "util.install_mpi_excepthook", "platform.system", "str", "str"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.install_mpi_excepthook"], ["", "def", "mpi_fork", "(", "n", ",", "binding", "=", "\"core\"", ")", ":", "\n", "    ", "\"\"\"Re-launches the current script with workers\n    Returns \"parent\" for original parent, \"child\" for MPI children\n    \"\"\"", "\n", "if", "n", "<=", "1", ":", "\n", "        ", "return", "\"child\"", "\n", "", "if", "os", ".", "getenv", "(", "\"IN_MPI\"", ")", "is", "None", ":", "\n", "        ", "env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "env", ".", "update", "(", "\n", "MKL_NUM_THREADS", "=", "\"1\"", ",", "\n", "OMP_NUM_THREADS", "=", "\"1\"", ",", "\n", "IN_MPI", "=", "\"1\"", "\n", ")", "\n", "# \"-bind-to core\" is crucial for good performance", "\n", "if", "platform", ".", "system", "(", ")", "==", "'Darwin'", ":", "\n", "            ", "args", "=", "[", "\n", "\"mpirun\"", ",", "\n", "\"-np\"", ",", "\n", "str", "(", "n", ")", ",", "\n", "\"-allow-run-as-root\"", ",", "\n", "sys", ".", "executable", "\n", "]", "\n", "", "else", ":", "\n", "            ", "args", "=", "[", "\n", "\"mpirun\"", ",", "\n", "\"-np\"", ",", "\n", "str", "(", "n", ")", ",", "\n", "\"-bind-to\"", ",", "\n", "binding", ",", "# core or none", "\n", "\"-allow-run-as-root\"", ",", "\n", "sys", ".", "executable", "\n", "]", "\n", "", "args", "+=", "sys", ".", "argv", "\n", "subprocess", ".", "check_call", "(", "args", ",", "env", "=", "env", ")", "\n", "return", "\"parent\"", "\n", "", "else", ":", "\n", "        ", "install_mpi_excepthook", "(", ")", "\n", "return", "\"child\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.convert_episode_to_batch_major": [[129, 140], ["episode.keys", "numpy.array().copy", "np.array().copy.swapaxes", "numpy.array"], "function", ["None"], ["", "", "def", "convert_episode_to_batch_major", "(", "episode", ")", ":", "\n", "    ", "\"\"\"Converts an episode to have the batch dimension in the major (first)\n    dimension.\n    \"\"\"", "\n", "episode_batch", "=", "{", "}", "\n", "for", "key", "in", "episode", ".", "keys", "(", ")", ":", "\n", "        ", "val", "=", "np", ".", "array", "(", "episode", "[", "key", "]", ")", ".", "copy", "(", ")", "\n", "# make inputs batch-major instead of time-major", "\n", "episode_batch", "[", "key", "]", "=", "val", ".", "swapaxes", "(", "0", ",", "1", ")", "\n", "\n", "", "return", "episode_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.transitions_in_episode_batch": [[142, 147], ["None"], "function", ["None"], ["", "def", "transitions_in_episode_batch", "(", "episode_batch", ")", ":", "\n", "    ", "\"\"\"Number of transitions in a given episode batch.\n    \"\"\"", "\n", "shape", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "\n", "return", "shape", "[", "0", "]", "*", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.util.reshape_for_broadcasting": [[149, 156], ["len", "tensorflow.reshape", "target.get_shape", "tensorflow.cast"], "function", ["None"], ["", "def", "reshape_for_broadcasting", "(", "source", ",", "target", ")", ":", "\n", "    ", "\"\"\"Reshapes a tensor (source) to have the correct shape and dtype of the target\n    before broadcasting it with MPI.\n    \"\"\"", "\n", "dim", "=", "len", "(", "target", ".", "get_shape", "(", ")", ")", "\n", "shape", "=", "(", "[", "1", "]", "*", "(", "dim", "-", "1", ")", ")", "+", "[", "-", "1", "]", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "source", ",", "target", ".", "dtype", ")", ",", "shape", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.cached_make_env": [[67, 77], ["config.prepare_params.make_env"], "function", ["None"], ["def", "cached_make_env", "(", "make_env", ")", ":", "\n", "    ", "\"\"\"\n    Only creates a new environment from the provided function if one has not yet already been\n    created. This is useful here because we need to infer certain properties of the env, e.g.\n    its observation and action spaces, without any intend of actually using it.\n    \"\"\"", "\n", "if", "make_env", "not", "in", "CACHED_ENVS", ":", "\n", "        ", "env", "=", "make_env", "(", ")", "\n", "CACHED_ENVS", "[", "make_env", "]", "=", "env", "\n", "", "return", "CACHED_ENVS", "[", "make_env", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.prepare_params": [[79, 110], ["dict", "config.cached_make_env", "hasattr", "cached_make_env.reset", "gym.make", "numpy.array", "type"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.cached_make_env", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "prepare_params", "(", "kwargs", ")", ":", "\n", "# DDPG params", "\n", "    ", "ddpg_params", "=", "dict", "(", ")", "\n", "\n", "env_name", "=", "kwargs", "[", "'env_name'", "]", "\n", "def", "make_env", "(", ")", ":", "\n", "        ", "return", "gym", ".", "make", "(", "env_name", ")", "\n", "", "kwargs", "[", "'make_env'", "]", "=", "make_env", "\n", "tmp_env", "=", "cached_make_env", "(", "kwargs", "[", "'make_env'", "]", ")", "\n", "assert", "hasattr", "(", "tmp_env", ",", "'_max_episode_steps'", ")", "\n", "kwargs", "[", "'T'", "]", "=", "tmp_env", ".", "_max_episode_steps", "\n", "tmp_env", ".", "reset", "(", ")", "\n", "kwargs", "[", "'max_u'", "]", "=", "np", ".", "array", "(", "kwargs", "[", "'max_u'", "]", ")", "if", "type", "(", "kwargs", "[", "'max_u'", "]", ")", "==", "list", "else", "kwargs", "[", "'max_u'", "]", "\n", "kwargs", "[", "'gamma'", "]", "=", "1.", "-", "1.", "/", "kwargs", "[", "'T'", "]", "\n", "if", "'lr'", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'pi_lr'", "]", "=", "kwargs", "[", "'lr'", "]", "\n", "kwargs", "[", "'Q_lr'", "]", "=", "kwargs", "[", "'lr'", "]", "\n", "del", "kwargs", "[", "'lr'", "]", "\n", "", "for", "name", "in", "[", "'buffer_size'", ",", "'hidden'", ",", "'layers'", ",", "\n", "'network_class'", ",", "\n", "'polyak'", ",", "\n", "'batch_size'", ",", "'Q_lr'", ",", "'pi_lr'", ",", "\n", "'norm_eps'", ",", "'norm_clip'", ",", "'max_u'", ",", "\n", "'action_l2'", ",", "'clip_obs'", ",", "'scope'", ",", "'relative_goals'", ",", "\n", "'alpha'", ",", "'beta0'", ",", "'beta_iters'", ",", "'eps'", "]", ":", "\n", "        ", "ddpg_params", "[", "name", "]", "=", "kwargs", "[", "name", "]", "\n", "kwargs", "[", "'_'", "+", "name", "]", "=", "kwargs", "[", "name", "]", "\n", "del", "kwargs", "[", "name", "]", "\n", "", "kwargs", "[", "'ddpg_params'", "]", "=", "ddpg_params", "\n", "\n", "return", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.log_params": [[112, 115], ["sorted", "params.keys", "baselines.logger.info"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.info"], ["", "def", "log_params", "(", "params", ",", "logger", "=", "logger", ")", ":", "\n", "    ", "for", "key", "in", "sorted", "(", "params", ".", "keys", "(", ")", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "key", ",", "params", "[", "key", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.configure_her": [[117, 140], ["config.cached_make_env", "cached_make_env.reset", "cached_make_env.compute_reward", "baselines.her.her.make_sample_her_transitions_energy", "baselines.her.her.make_sample_her_transitions_prioritized_replay", "baselines.her.her.make_sample_her_transitions"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.cached_make_env", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.her.make_sample_her_transitions_energy", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.her.make_sample_her_transitions_prioritized_replay", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.her.make_sample_her_transitions"], ["", "", "def", "configure_her", "(", "params", ")", ":", "\n", "    ", "env", "=", "cached_make_env", "(", "params", "[", "'make_env'", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "def", "reward_fun", "(", "ag_2", ",", "g", ",", "info", ")", ":", "# vectorized", "\n", "        ", "return", "env", ".", "compute_reward", "(", "achieved_goal", "=", "ag_2", ",", "desired_goal", "=", "g", ",", "info", "=", "info", ")", "\n", "\n", "# Prepare configuration for HER.", "\n", "", "her_params", "=", "{", "\n", "'reward_fun'", ":", "reward_fun", ",", "\n", "}", "\n", "for", "name", "in", "[", "'replay_strategy'", ",", "'replay_k'", "]", ":", "\n", "        ", "her_params", "[", "name", "]", "=", "params", "[", "name", "]", "\n", "params", "[", "'_'", "+", "name", "]", "=", "her_params", "[", "name", "]", "\n", "del", "params", "[", "name", "]", "\n", "\n", "", "if", "params", "[", "'prioritization'", "]", "==", "'energy'", ":", "\n", "        ", "sample_her_transitions", "=", "make_sample_her_transitions_energy", "(", "**", "her_params", ")", "\n", "", "elif", "params", "[", "'prioritization'", "]", "==", "'tderror'", ":", "\n", "        ", "sample_her_transitions", "=", "make_sample_her_transitions_prioritized_replay", "(", "**", "her_params", ")", "\n", "", "else", ":", "\n", "        ", "sample_her_transitions", "=", "make_sample_her_transitions", "(", "**", "her_params", ")", "\n", "\n", "", "return", "sample_her_transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.simple_goal_subtract": [[142, 145], ["None"], "function", ["None"], ["", "def", "simple_goal_subtract", "(", "a", ",", "b", ")", ":", "\n", "    ", "assert", "a", ".", "shape", "==", "b", ".", "shape", "\n", "return", "a", "-", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.configure_ddpg": [[147, 183], ["config.configure_her", "dims.copy", "config.cached_make_env", "cached_make_env.reset", "ddpg_params.update", "baselines.her.ddpg.DDPG"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.configure_her", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.cached_make_env", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "configure_ddpg", "(", "dims", ",", "params", ",", "reuse", "=", "False", ",", "use_mpi", "=", "True", ",", "clip_return", "=", "True", ")", ":", "\n", "    ", "sample_her_transitions", "=", "configure_her", "(", "params", ")", "\n", "# Extract relevant parameters.", "\n", "gamma", "=", "params", "[", "'gamma'", "]", "\n", "rollout_batch_size", "=", "params", "[", "'rollout_batch_size'", "]", "\n", "ddpg_params", "=", "params", "[", "'ddpg_params'", "]", "\n", "temperature", "=", "params", "[", "'temperature'", "]", "\n", "prioritization", "=", "params", "[", "'prioritization'", "]", "\n", "env_name", "=", "params", "[", "'env_name'", "]", "\n", "max_timesteps", "=", "params", "[", "'max_timesteps'", "]", "\n", "rank_method", "=", "params", "[", "'rank_method'", "]", "\n", "\n", "input_dims", "=", "dims", ".", "copy", "(", ")", "\n", "\n", "# DDPG agent", "\n", "env", "=", "cached_make_env", "(", "params", "[", "'make_env'", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "ddpg_params", ".", "update", "(", "{", "'input_dims'", ":", "input_dims", ",", "# agent takes an input observations", "\n", "'T'", ":", "params", "[", "'T'", "]", ",", "\n", "'clip_pos_returns'", ":", "True", ",", "# clip positive returns", "\n", "'clip_return'", ":", "(", "1.", "/", "(", "1.", "-", "gamma", ")", ")", "if", "clip_return", "else", "np", ".", "inf", ",", "# max abs of return", "\n", "'rollout_batch_size'", ":", "rollout_batch_size", ",", "\n", "'subtract_goals'", ":", "simple_goal_subtract", ",", "\n", "'sample_transitions'", ":", "sample_her_transitions", ",", "\n", "'gamma'", ":", "gamma", ",", "\n", "'temperature'", ":", "temperature", ",", "\n", "'prioritization'", ":", "prioritization", ",", "\n", "'env_name'", ":", "env_name", ",", "\n", "'max_timesteps'", ":", "max_timesteps", ",", "\n", "'rank_method'", ":", "rank_method", ",", "\n", "}", ")", "\n", "ddpg_params", "[", "'info'", "]", "=", "{", "\n", "'env_name'", ":", "params", "[", "'env_name'", "]", ",", "\n", "}", "\n", "policy", "=", "DDPG", "(", "reuse", "=", "reuse", ",", "**", "ddpg_params", ",", "use_mpi", "=", "use_mpi", ")", "\n", "return", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.configure_dims": [[185, 201], ["config.cached_make_env", "cached_make_env.reset", "cached_make_env.step", "info.items", "cached_make_env.action_space.sample", "numpy.array", "value.reshape.reshape"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.cached_make_env", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.sample"], ["", "def", "configure_dims", "(", "params", ")", ":", "\n", "    ", "env", "=", "cached_make_env", "(", "params", "[", "'make_env'", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "obs", ",", "_", ",", "_", ",", "info", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "\n", "dims", "=", "{", "\n", "'o'", ":", "obs", "[", "'observation'", "]", ".", "shape", "[", "0", "]", ",", "\n", "'u'", ":", "env", ".", "action_space", ".", "shape", "[", "0", "]", ",", "\n", "'g'", ":", "obs", "[", "'desired_goal'", "]", ".", "shape", "[", "0", "]", ",", "\n", "}", "\n", "for", "key", ",", "value", "in", "info", ".", "items", "(", ")", ":", "\n", "        ", "value", "=", "np", ".", "array", "(", "value", ")", "\n", "if", "value", ".", "ndim", "==", "0", ":", "\n", "            ", "value", "=", "value", ".", "reshape", "(", "1", ")", "\n", "", "dims", "[", "'info_{}'", ".", "format", "(", "key", ")", "]", "=", "value", ".", "shape", "[", "0", "]", "\n", "", "return", "dims", "\n", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.train.mpi_average": [[21, 27], ["isinstance", "baselines.common.mpi_moments.mpi_moments", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_moments.mpi_moments"], ["def", "mpi_average", "(", "value", ")", ":", "\n", "    ", "if", "value", "==", "[", "]", ":", "\n", "        ", "value", "=", "[", "0.", "]", "\n", "", "if", "not", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "        ", "value", "=", "[", "value", "]", "\n", "", "return", "mpi_moments", "(", "np", ".", "array", "(", "value", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.train.train": [[29, 91], ["mpi4py.MPI.COMM_WORLD.Get_rank", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "baselines.logger.info", "range", "baselines.logger.get_dir", "baselines.logger.get_dir", "baselines.logger.get_dir", "rollout_worker.clear_history", "range", "evaluator.clear_history", "range", "baselines.logger.record_tabular", "evaluator.logs", "rollout_worker.logs", "policy.logs", "train.mpi_average", "numpy.random.uniform", "np.random.uniform.copy", "mpi4py.MPI.COMM_WORLD.Bcast", "rollout_worker.generate_rollouts", "policy.store_episode", "range", "policy.update_target_net", "evaluator.generate_rollouts", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.record_tabular", "baselines.logger.dump_tabular", "evaluator.current_success_rate", "baselines.logger.info", "evaluator.save_policy", "evaluator.save_policy", "os.path.join.format", "baselines.logger.info", "evaluator.save_policy", "policy.train", "train.mpi_average", "train.mpi_average", "train.mpi_average", "policy.dump_buffer"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.info", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.get_dir", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.get_dir", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.get_dir", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.clear_history", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.clear_history", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.logs", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.logs", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.logs", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.train.mpi_average", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.store_episode", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.update_target_net", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.current_success_rate", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.info", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.save_policy", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.save_policy", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.info", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.save_policy", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.train.train", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.train.mpi_average", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.train.mpi_average", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.train.mpi_average", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.dump_buffer"], ["", "def", "train", "(", "policy", ",", "rollout_worker", ",", "evaluator", ",", "n_epochs", ",", "n_test_rollouts", ",", "n_cycles", ",", "n_batches", ",", "\n", "policy_save_interval", ",", "save_policies", ",", "num_cpu", ",", "dump_buffer", ",", "w_potential", ",", "w_linear", ",", "\n", "w_rotational", ",", "rank_method", ",", "clip_energy", ",", "**", "kwargs", ")", ":", "\n", "    ", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "\n", "latest_policy_path", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'policy_latest.pkl'", ")", "\n", "best_policy_path", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'policy_best.pkl'", ")", "\n", "periodic_policy_path", "=", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'policy_{}.pkl'", ")", "\n", "\n", "logger", ".", "info", "(", "\"Training...\"", ")", "\n", "best_success_rate", "=", "-", "1", "\n", "t", "=", "1", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "# train", "\n", "        ", "rollout_worker", ".", "clear_history", "(", ")", "\n", "for", "cycle", "in", "range", "(", "n_cycles", ")", ":", "\n", "            ", "episode", "=", "rollout_worker", ".", "generate_rollouts", "(", ")", "\n", "policy", ".", "store_episode", "(", "episode", ",", "dump_buffer", ",", "w_potential", ",", "w_linear", ",", "w_rotational", ",", "rank_method", ",", "clip_energy", ")", "\n", "for", "batch", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "t", "=", "(", "(", "epoch", "*", "n_cycles", "*", "n_batches", ")", "+", "(", "cycle", "*", "n_batches", ")", "+", "batch", ")", "*", "num_cpu", "\n", "policy", ".", "train", "(", "t", ",", "dump_buffer", ")", "\n", "\n", "", "policy", ".", "update_target_net", "(", ")", "\n", "\n", "# test", "\n", "", "evaluator", ".", "clear_history", "(", ")", "\n", "for", "_", "in", "range", "(", "n_test_rollouts", ")", ":", "\n", "            ", "evaluator", ".", "generate_rollouts", "(", ")", "\n", "\n", "# record logs", "\n", "", "logger", ".", "record_tabular", "(", "'epoch'", ",", "epoch", ")", "\n", "for", "key", ",", "val", "in", "evaluator", ".", "logs", "(", "'test'", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "key", ",", "mpi_average", "(", "val", ")", ")", "\n", "", "for", "key", ",", "val", "in", "rollout_worker", ".", "logs", "(", "'train'", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "key", ",", "mpi_average", "(", "val", ")", ")", "\n", "", "for", "key", ",", "val", "in", "policy", ".", "logs", "(", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "key", ",", "mpi_average", "(", "val", ")", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "            ", "logger", ".", "dump_tabular", "(", ")", "\n", "\n", "if", "dump_buffer", ":", "\n", "                ", "policy", ".", "dump_buffer", "(", "epoch", ")", "\n", "\n", "# save the policy if it's better than the previous ones", "\n", "", "", "success_rate", "=", "mpi_average", "(", "evaluator", ".", "current_success_rate", "(", ")", ")", "\n", "if", "rank", "==", "0", "and", "success_rate", ">=", "best_success_rate", "and", "save_policies", ":", "\n", "            ", "best_success_rate", "=", "success_rate", "\n", "logger", ".", "info", "(", "'New best success rate: {}. Saving policy to {} ...'", ".", "format", "(", "best_success_rate", ",", "best_policy_path", ")", ")", "\n", "evaluator", ".", "save_policy", "(", "best_policy_path", ")", "\n", "evaluator", ".", "save_policy", "(", "latest_policy_path", ")", "\n", "", "if", "rank", "==", "0", "and", "policy_save_interval", ">", "0", "and", "epoch", "%", "policy_save_interval", "==", "0", "and", "save_policies", ":", "\n", "            ", "policy_path", "=", "periodic_policy_path", ".", "format", "(", "epoch", ")", "\n", "logger", ".", "info", "(", "'Saving periodic policy to {} ...'", ".", "format", "(", "policy_path", ")", ")", "\n", "evaluator", ".", "save_policy", "(", "policy_path", ")", "\n", "\n", "# make sure that different threads have different seeds", "\n", "", "local_uniform", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "1", ",", ")", ")", "\n", "root_uniform", "=", "local_uniform", ".", "copy", "(", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Bcast", "(", "root_uniform", ",", "root", "=", "0", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "            ", "assert", "local_uniform", "[", "0", "]", "!=", "root_uniform", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.train.launch": [[93, 201], ["mpi4py.MPI.COMM_WORLD.Get_rank", "baselines.logger.get_dir", "os.makedirs", "os.makedirs", "baselines.common.set_global_seeds", "config.prepare_params.update", "baselines.prepare_params", "baselines.log_params", "baselines.configure_dims", "baselines.configure_ddpg", "baselines.her.rollout.RolloutWorker", "baselines.her.rollout.RolloutWorker.seed", "baselines.her.rollout.RolloutWorker", "baselines.her.rollout.RolloutWorker.seed", "train.train", "baselines.her.util.mpi_fork", "U.single_threaded_session().__enter__", "os.join", "baselines.logger.configure", "config.prepare_params.update", "open", "json.dump", "sys.exit", "str", "tempfile.gettempdir", "datetime.datetime.now().strftime", "baselines.logger.configure", "os.path.join", "os.path.join", "U.single_threaded_session", "baselines.logger.get_dir", "baselines.logger.get_dir", "str", "datetime.datetime.now", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.get_dir", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.prepare_params", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.log_params", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.configure_dims", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.configure_ddpg", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.train.train", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_fork.mpi_fork", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.scoped_configure.__enter__", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.configure", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.configure", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.get_dir", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.get_dir"], ["", "", "", "def", "launch", "(", "\n", "env_name", ",", "n_epochs", ",", "num_cpu", ",", "seed", ",", "replay_strategy", ",", "policy_save_interval", ",", "clip_return", ",", "\n", "temperature", ",", "prioritization", ",", "binding", ",", "logging", ",", "version", ",", "dump_buffer", ",", "n_cycles", ",", "rank_method", ",", "\n", "w_potential", ",", "w_linear", ",", "w_rotational", ",", "clip_energy", ",", "override_params", "=", "{", "}", ",", "save_policies", "=", "True", ")", ":", "\n", "\n", "# Fork for multi-CPU MPI implementation.", "\n", "    ", "if", "num_cpu", ">", "1", ":", "\n", "        ", "whoami", "=", "mpi_fork", "(", "num_cpu", ",", "binding", ")", "\n", "if", "whoami", "==", "'parent'", ":", "\n", "            ", "sys", ".", "exit", "(", "0", ")", "\n", "", "import", "baselines", ".", "common", ".", "tf_util", "as", "U", "\n", "U", ".", "single_threaded_session", "(", ")", ".", "__enter__", "(", ")", "\n", "", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "\n", "# Configure logging", "\n", "\n", "if", "logging", ":", "\n", "        ", "logdir", "=", "'logs/'", "+", "str", "(", "env_name", ")", "+", "'-temperature'", "+", "str", "(", "temperature", ")", "+", "'-prioritization'", "+", "str", "(", "prioritization", ")", "+", "'-replay_strategy'", "+", "str", "(", "replay_strategy", ")", "+", "'-n_epochs'", "+", "str", "(", "n_epochs", ")", "+", "'-num_cpu'", "+", "str", "(", "num_cpu", ")", "+", "'-seed'", "+", "str", "(", "seed", ")", "+", "'-n_cycles'", "+", "str", "(", "n_cycles", ")", "+", "'-rank_method'", "+", "str", "(", "rank_method", ")", "+", "'-w_potential'", "+", "str", "(", "w_potential", ")", "+", "'-w_linear'", "+", "str", "(", "w_linear", ")", "+", "'-w_rotational'", "+", "str", "(", "w_rotational", ")", "+", "'-clip_energy'", "+", "str", "(", "clip_energy", ")", "+", "'-version'", "+", "str", "(", "version", ")", "\n", "", "else", ":", "\n", "        ", "logdir", "=", "osp", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "\n", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"openai-%Y-%m-%d-%H-%M-%S-%f\"", ")", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "        ", "if", "logdir", "or", "logger", ".", "get_dir", "(", ")", "is", "None", ":", "\n", "            ", "logger", ".", "configure", "(", "dir", "=", "logdir", ")", "\n", "", "", "else", ":", "\n", "        ", "logger", ".", "configure", "(", ")", "\n", "", "logdir", "=", "logger", ".", "get_dir", "(", ")", "\n", "assert", "logdir", "is", "not", "None", "\n", "os", ".", "makedirs", "(", "logdir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Seed everything.", "\n", "rank_seed", "=", "seed", "+", "1000000", "*", "rank", "\n", "set_global_seeds", "(", "rank_seed", ")", "\n", "\n", "# Prepare params.", "\n", "params", "=", "config", ".", "DEFAULT_PARAMS", "\n", "params", "[", "'env_name'", "]", "=", "env_name", "\n", "params", "[", "'replay_strategy'", "]", "=", "replay_strategy", "\n", "params", "[", "'temperature'", "]", "=", "temperature", "\n", "params", "[", "'prioritization'", "]", "=", "prioritization", "\n", "params", "[", "'binding'", "]", "=", "binding", "\n", "params", "[", "'max_timesteps'", "]", "=", "n_epochs", "*", "params", "[", "'n_cycles'", "]", "*", "params", "[", "'n_batches'", "]", "*", "num_cpu", "\n", "params", "[", "'version'", "]", "=", "version", "\n", "params", "[", "'dump_buffer'", "]", "=", "dump_buffer", "\n", "params", "[", "'n_cycles'", "]", "=", "n_cycles", "\n", "params", "[", "'rank_method'", "]", "=", "rank_method", "\n", "params", "[", "'w_potential'", "]", "=", "w_potential", "\n", "params", "[", "'w_linear'", "]", "=", "w_linear", "\n", "params", "[", "'w_rotational'", "]", "=", "w_rotational", "\n", "params", "[", "'clip_energy'", "]", "=", "clip_energy", "\n", "params", "[", "'n_epochs'", "]", "=", "n_epochs", "\n", "params", "[", "'num_cpu'", "]", "=", "num_cpu", "\n", "\n", "if", "params", "[", "'dump_buffer'", "]", ":", "\n", "        ", "params", "[", "'alpha'", "]", "=", "0", "\n", "\n", "", "if", "env_name", "in", "config", ".", "DEFAULT_ENV_PARAMS", ":", "\n", "        ", "params", ".", "update", "(", "config", ".", "DEFAULT_ENV_PARAMS", "[", "env_name", "]", ")", "# merge env-specific parameters in", "\n", "", "params", ".", "update", "(", "**", "override_params", ")", "# makes it possible to override any parameter", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "'params.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "params", ",", "f", ")", "\n", "", "params", "=", "config", ".", "prepare_params", "(", "params", ")", "\n", "config", ".", "log_params", "(", "params", ",", "logger", "=", "logger", ")", "\n", "\n", "dims", "=", "config", ".", "configure_dims", "(", "params", ")", "\n", "policy", "=", "config", ".", "configure_ddpg", "(", "dims", "=", "dims", ",", "params", "=", "params", ",", "clip_return", "=", "clip_return", ")", "\n", "\n", "rollout_params", "=", "{", "\n", "'exploit'", ":", "False", ",", "\n", "'use_target_net'", ":", "False", ",", "\n", "'use_demo_states'", ":", "True", ",", "\n", "'compute_Q'", ":", "False", ",", "\n", "'T'", ":", "params", "[", "'T'", "]", ",", "\n", "}", "\n", "\n", "eval_params", "=", "{", "\n", "'exploit'", ":", "True", ",", "\n", "'use_target_net'", ":", "params", "[", "'test_with_polyak'", "]", ",", "\n", "'use_demo_states'", ":", "False", ",", "\n", "'compute_Q'", ":", "True", ",", "\n", "'T'", ":", "params", "[", "'T'", "]", ",", "\n", "}", "\n", "\n", "for", "name", "in", "[", "'T'", ",", "'rollout_batch_size'", ",", "'gamma'", ",", "'noise_eps'", ",", "'random_eps'", "]", ":", "\n", "        ", "rollout_params", "[", "name", "]", "=", "params", "[", "name", "]", "\n", "eval_params", "[", "name", "]", "=", "params", "[", "name", "]", "\n", "\n", "", "rollout_worker", "=", "RolloutWorker", "(", "params", "[", "'make_env'", "]", ",", "policy", ",", "dims", ",", "logger", ",", "**", "rollout_params", ")", "\n", "rollout_worker", ".", "seed", "(", "rank_seed", ")", "\n", "\n", "evaluator", "=", "RolloutWorker", "(", "params", "[", "'make_env'", "]", ",", "policy", ",", "dims", ",", "logger", ",", "**", "eval_params", ")", "\n", "evaluator", ".", "seed", "(", "rank_seed", ")", "\n", "\n", "train", "(", "\n", "logdir", "=", "logdir", ",", "policy", "=", "policy", ",", "rollout_worker", "=", "rollout_worker", ",", "\n", "evaluator", "=", "evaluator", ",", "n_epochs", "=", "n_epochs", ",", "n_test_rollouts", "=", "params", "[", "'n_test_rollouts'", "]", ",", "\n", "n_cycles", "=", "params", "[", "'n_cycles'", "]", ",", "n_batches", "=", "params", "[", "'n_batches'", "]", ",", "\n", "policy_save_interval", "=", "policy_save_interval", ",", "save_policies", "=", "save_policies", ",", "\n", "num_cpu", "=", "num_cpu", ",", "dump_buffer", "=", "dump_buffer", ",", "w_potential", "=", "params", "[", "'w_potential'", "]", ",", "\n", "w_linear", "=", "params", "[", "'w_linear'", "]", ",", "w_rotational", "=", "params", "[", "'w_rotational'", "]", ",", "rank_method", "=", "rank_method", ",", "\n", "clip_energy", "=", "clip_energy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.train.main": [[203, 230], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "train.launch", "click.Choice", "click.Choice", "click.Choice", "click.Choice", "click.Choice"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.train.launch"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--env_name'", ",", "type", "=", "click", ".", "Choice", "(", "[", "'FetchPickAndPlace-v0'", ",", "'HandManipulateBlockFull-v0'", ",", "'HandManipulateEggFull-v0'", ",", "'HandManipulatePenRotate-v0'", "]", ")", ",", "default", "=", "'FetchPickAndPlace-v0'", ",", "help", "=", "'the name of the OpenAI Gym \\\n        environment that you want to train on. We tested EBP on four challenging robotic manipulation tasks, including: \\\n        FetchPickAndPlace-v0, HandManipulateBlockFull-v0, HandManipulateEggFull-v0, HandManipulatePenRotate-v0'", ")", "\n", "@", "click", ".", "option", "(", "'--n_epochs'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'the number of training epochs to run'", ")", "\n", "@", "click", ".", "option", "(", "'--num_cpu'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the number of CPU cores to use (using MPI)'", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'the random seed used to seed both the environment and the training code'", ")", "\n", "@", "click", ".", "option", "(", "'--policy_save_interval'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'the interval with which policy pickles are saved. If set to 0, only the best and latest policy will be pickled.'", ")", "\n", "@", "click", ".", "option", "(", "'--replay_strategy'", ",", "type", "=", "click", ".", "Choice", "(", "[", "'future'", ",", "'final'", ",", "'none'", "]", ")", ",", "default", "=", "'future'", ",", "help", "=", "'the HER replay strategy to be used. \"future\" uses HER, \"none\" disables HER.'", ")", "\n", "@", "click", ".", "option", "(", "'--clip_return'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'whether or not returns should be clipped'", ")", "\n", "@", "click", ".", "option", "(", "'--temperature'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'temperature value for Enery-Based Prioritization (EBP)'", ")", "\n", "@", "click", ".", "option", "(", "'--prioritization'", ",", "type", "=", "click", ".", "Choice", "(", "[", "'none'", ",", "'energy'", ",", "'tderror'", "]", ")", ",", "default", "=", "'energy'", ",", "help", "=", "'the prioritization strategy to be used. \"energy\" uses EBP;\\\n                                                                                                             \"none\" is vanilla HER; tderror is Prioritized Experience Replay.'", ")", "\n", "@", "click", ".", "option", "(", "'--binding'", ",", "type", "=", "click", ".", "Choice", "(", "[", "'none'", ",", "'core'", "]", ")", ",", "default", "=", "'core'", ",", "help", "=", "'configure mpi using bind-to none or core.'", ")", "\n", "@", "click", ".", "option", "(", "'--logging'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'whether or not logging'", ")", "\n", "@", "click", ".", "option", "(", "'--version'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'version'", ")", "\n", "@", "click", ".", "option", "(", "'--dump_buffer'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'dump buffer contains achieved goals, energy, tderrors for analysis'", ")", "\n", "@", "click", ".", "option", "(", "'--n_cycles'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'n_cycles'", ")", "\n", "@", "click", ".", "option", "(", "'--rank_method'", ",", "type", "=", "click", ".", "Choice", "(", "[", "'none'", ",", "'min'", ",", "'dense'", ",", "'average'", "]", ")", ",", "default", "=", "'none'", ",", "help", "=", "'energy ranking method'", ")", "\n", "@", "click", ".", "option", "(", "'--w_potential'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'w_potential'", ")", "\n", "@", "click", ".", "option", "(", "'--w_linear'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'w_linear'", ")", "\n", "@", "click", ".", "option", "(", "'--w_rotational'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'w_rotational'", ")", "\n", "@", "click", ".", "option", "(", "'--clip_energy'", ",", "type", "=", "float", ",", "default", "=", "999", ",", "help", "=", "'clip_energy'", ")", "\n", "\n", "def", "main", "(", "**", "kwargs", ")", ":", "\n", "    ", "launch", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.play.main": [[11, 57], ["click.command", "click.argument", "click.option", "click.option", "click.option", "baselines.common.set_global_seeds", "baselines.prepare_params", "baselines.log_params", "baselines.configure_dims", "baselines.her.rollout.RolloutWorker", "baselines.her.rollout.RolloutWorker.seed", "baselines.her.rollout.RolloutWorker.clear_history", "range", "baselines.her.rollout.RolloutWorker.logs", "baselines.logger.dump_tabular", "open", "pickle.load", "config.prepare_params.update", "bool", "baselines.her.rollout.RolloutWorker.generate_rollouts", "baselines.logger.record_tabular", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.prepare_params", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.log_params", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.experiment.config.configure_dims", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.clear_history", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.ddpg.DDPG.logs", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "argument", "(", "'policy_file'", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "@", "click", ".", "option", "(", "'--n_test_rollouts'", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "@", "click", ".", "option", "(", "'--render'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "def", "main", "(", "policy_file", ",", "seed", ",", "n_test_rollouts", ",", "render", ")", ":", "\n", "    ", "set_global_seeds", "(", "seed", ")", "\n", "\n", "# Load policy.", "\n", "with", "open", "(", "policy_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "policy", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "env_name", "=", "policy", ".", "info", "[", "'env_name'", "]", "\n", "\n", "# Prepare params.", "\n", "params", "=", "config", ".", "DEFAULT_PARAMS", "\n", "if", "env_name", "in", "config", ".", "DEFAULT_ENV_PARAMS", ":", "\n", "        ", "params", ".", "update", "(", "config", ".", "DEFAULT_ENV_PARAMS", "[", "env_name", "]", ")", "# merge env-specific parameters in", "\n", "", "params", "[", "'env_name'", "]", "=", "env_name", "\n", "params", "=", "config", ".", "prepare_params", "(", "params", ")", "\n", "config", ".", "log_params", "(", "params", ",", "logger", "=", "logger", ")", "\n", "\n", "dims", "=", "config", ".", "configure_dims", "(", "params", ")", "\n", "\n", "eval_params", "=", "{", "\n", "'exploit'", ":", "True", ",", "\n", "'use_target_net'", ":", "params", "[", "'test_with_polyak'", "]", ",", "\n", "'compute_Q'", ":", "True", ",", "\n", "'rollout_batch_size'", ":", "1", ",", "\n", "'render'", ":", "bool", "(", "render", ")", ",", "\n", "}", "\n", "\n", "for", "name", "in", "[", "'T'", ",", "'gamma'", ",", "'noise_eps'", ",", "'random_eps'", "]", ":", "\n", "        ", "eval_params", "[", "name", "]", "=", "params", "[", "name", "]", "\n", "\n", "", "evaluator", "=", "RolloutWorker", "(", "params", "[", "'make_env'", "]", ",", "policy", ",", "dims", ",", "logger", ",", "**", "eval_params", ")", "\n", "evaluator", ".", "seed", "(", "seed", ")", "\n", "\n", "# Run evaluation.", "\n", "evaluator", ".", "clear_history", "(", ")", "\n", "for", "_", "in", "range", "(", "n_test_rollouts", ")", ":", "\n", "        ", "evaluator", ".", "generate_rollouts", "(", ")", "\n", "\n", "# record logs", "\n", "", "for", "key", ",", "val", "in", "evaluator", ".", "logs", "(", "'test'", ")", ":", "\n", "        ", "logger", ".", "record_tabular", "(", "key", ",", "np", ".", "mean", "(", "val", ")", ")", "\n", "", "logger", ".", "dump_tabular", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.__init__": [[5, 9], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ")", ":", "\n", "        ", "self", ".", "_n", "=", "0", "\n", "self", ".", "_M", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "self", ".", "_S", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "", "def", "push", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.push": [[9, 19], ["numpy.asarray", "running_stat.RunningStat._M.copy"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "assert", "x", ".", "shape", "==", "self", ".", "_M", ".", "shape", "\n", "self", ".", "_n", "+=", "1", "\n", "if", "self", ".", "_n", "==", "1", ":", "\n", "            ", "self", ".", "_M", "[", "...", "]", "=", "x", "\n", "", "else", ":", "\n", "            ", "oldM", "=", "self", ".", "_M", ".", "copy", "(", ")", "\n", "self", ".", "_M", "[", "...", "]", "=", "oldM", "+", "(", "x", "-", "oldM", ")", "/", "self", ".", "_n", "\n", "self", ".", "_S", "[", "...", "]", "=", "self", ".", "_S", "+", "(", "x", "-", "oldM", ")", "*", "(", "x", "-", "self", ".", "_M", ")", "\n", "", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.n": [[19, 22], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "n", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_M", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.var": [[25, 28], ["numpy.square"], "methods", ["None"], ["", "@", "property", "\n", "def", "var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_S", "/", "(", "self", ".", "_n", "-", "1", ")", "if", "self", ".", "_n", ">", "1", "else", "np", ".", "square", "(", "self", ".", "_M", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.std": [[28, 31], ["numpy.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "std", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "self", ".", "var", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.shape": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_M", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.test_running_stat": [[35, 47], ["running_stat.RunningStat", "range", "numpy.random.randn", "running_stat.RunningStat.push", "li.append", "numpy.mean", "numpy.allclose", "numpy.allclose", "numpy.square", "numpy.var", "len"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.push", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.var"], ["", "", "def", "test_running_stat", "(", ")", ":", "\n", "    ", "for", "shp", "in", "(", "(", ")", ",", "(", "3", ",", ")", ",", "(", "3", ",", "4", ")", ")", ":", "\n", "        ", "li", "=", "[", "]", "\n", "rs", "=", "RunningStat", "(", "shp", ")", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "            ", "val", "=", "np", ".", "random", ".", "randn", "(", "*", "shp", ")", "\n", "rs", ".", "push", "(", "val", ")", "\n", "li", ".", "append", "(", "val", ")", "\n", "m", "=", "np", ".", "mean", "(", "li", ",", "axis", "=", "0", ")", "\n", "assert", "np", ".", "allclose", "(", "rs", ".", "mean", ",", "m", ")", "\n", "v", "=", "np", ".", "square", "(", "m", ")", "if", "(", "len", "(", "li", ")", "==", "1", ")", "else", "np", ".", "var", "(", "li", ",", "ddof", "=", "1", ",", "axis", "=", "0", ")", "\n", "assert", "np", ".", "allclose", "(", "rs", ".", "var", ",", "v", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.math_util.discount": [[5, 24], ["scipy.signal.lfilter"], "function", ["None"], ["def", "discount", "(", "x", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"\n    computes discounted sums along 0th dimension of x.\n\n    inputs\n    ------\n    x: ndarray\n    gamma: float\n\n    outputs\n    -------\n    y: ndarray with same shape as x, satisfying\n\n        y[t] = x[t] + gamma*x[t+1] + gamma^2*x[t+2] + ... + gamma^k x[t+k],\n                where k = len(x) - t - 1\n\n    \"\"\"", "\n", "assert", "x", ".", "ndim", ">=", "1", "\n", "return", "scipy", ".", "signal", ".", "lfilter", "(", "[", "1", "]", ",", "[", "1", ",", "-", "gamma", "]", ",", "x", "[", ":", ":", "-", "1", "]", ",", "axis", "=", "0", ")", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.math_util.explained_variance": [[25, 39], ["numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.var", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.var"], ["", "def", "explained_variance", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Computes fraction of variance that ypred explains about y.\n    Returns 1 - Var[y-ypred] / Var[y]\n\n    interpretation:\n        ev=0  =>  might as well have predicted zero\n        ev=1  =>  perfect prediction\n        ev<0  =>  worse than just predicting zero\n\n    \"\"\"", "\n", "assert", "y", ".", "ndim", "==", "1", "and", "ypred", ".", "ndim", "==", "1", "\n", "vary", "=", "np", ".", "var", "(", "y", ")", "\n", "return", "np", ".", "nan", "if", "vary", "==", "0", "else", "1", "-", "np", ".", "var", "(", "y", "-", "ypred", ")", "/", "vary", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.math_util.explained_variance_2d": [[40, 46], ["numpy.var", "numpy.var"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.var", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.var"], ["", "def", "explained_variance_2d", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "assert", "y", ".", "ndim", "==", "2", "and", "ypred", ".", "ndim", "==", "2", "\n", "vary", "=", "np", ".", "var", "(", "y", ",", "axis", "=", "0", ")", "\n", "out", "=", "1", "-", "np", ".", "var", "(", "y", "-", "ypred", ")", "/", "vary", "\n", "out", "[", "vary", "<", "1e-10", "]", "=", "0", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.math_util.ncc": [[47, 49], ["numpy.corrcoef"], "function", ["None"], ["", "def", "ncc", "(", "ypred", ",", "y", ")", ":", "\n", "    ", "return", "np", ".", "corrcoef", "(", "ypred", ",", "y", ")", "[", "1", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.math_util.flatten_arrays": [[50, 52], ["numpy.concatenate"], "function", ["None"], ["", "def", "flatten_arrays", "(", "arrs", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "[", "arr", ".", "flat", "for", "arr", "in", "arrs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.math_util.unflatten_vector": [[53, 62], ["numpy.prod", "vec[].reshape", "arrs.append"], "function", ["None"], ["", "def", "unflatten_vector", "(", "vec", ",", "shapes", ")", ":", "\n", "    ", "i", "=", "0", "\n", "arrs", "=", "[", "]", "\n", "for", "shape", "in", "shapes", ":", "\n", "        ", "size", "=", "np", ".", "prod", "(", "shape", ")", "\n", "arr", "=", "vec", "[", "i", ":", "i", "+", "size", "]", ".", "reshape", "(", "shape", ")", "\n", "arrs", ".", "append", "(", "arr", ")", "\n", "i", "+=", "size", "\n", "", "return", "arrs", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.math_util.discount_with_boundaries": [[63, 74], ["numpy.zeros_like", "range"], "function", ["None"], ["", "def", "discount_with_boundaries", "(", "X", ",", "New", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"\n    X: 2d array of floats, time x features\n    New: 2d array of bools, indicating when a new episode has started\n    \"\"\"", "\n", "Y", "=", "np", ".", "zeros_like", "(", "X", ")", "\n", "T", "=", "X", ".", "shape", "[", "0", "]", "\n", "Y", "[", "T", "-", "1", "]", "=", "X", "[", "T", "-", "1", "]", "\n", "for", "t", "in", "range", "(", "T", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "Y", "[", "t", "]", "=", "X", "[", "t", "]", "+", "gamma", "*", "Y", "[", "t", "+", "1", "]", "*", "(", "1", "-", "New", "[", "t", "+", "1", "]", ")", "\n", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.math_util.test_discount_with_boundaries": [[75, 85], ["numpy.array", "math_util.discount_with_boundaries", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.math_util.discount_with_boundaries"], ["", "def", "test_discount_with_boundaries", "(", ")", ":", "\n", "    ", "gamma", "=", "0.9", "\n", "x", "=", "np", ".", "array", "(", "[", "1.0", ",", "2.0", ",", "3.0", ",", "4.0", "]", ",", "'float32'", ")", "\n", "starts", "=", "[", "1.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "\n", "y", "=", "discount_with_boundaries", "(", "x", ",", "starts", ",", "gamma", ")", "\n", "assert", "np", ".", "allclose", "(", "y", ",", "[", "\n", "1", "+", "gamma", "*", "2", "+", "gamma", "**", "2", "*", "3", ",", "\n", "2", "+", "gamma", "*", "3", ",", "\n", "3", ",", "\n", "4", "\n", "]", ")", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_moments.mpi_mean": [[6, 18], ["numpy.asarray", "np.asarray.sum", "numpy.zeros", "x.sum.ravel", "numpy.zeros_like", "comm.Allreduce", "globalsum[].reshape"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum"], ["def", "mpi_mean", "(", "x", ",", "axis", "=", "0", ",", "comm", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "assert", "x", ".", "ndim", ">", "0", "\n", "if", "comm", "is", "None", ":", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "xsum", "=", "x", ".", "sum", "(", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", "\n", "n", "=", "xsum", ".", "size", "\n", "localsum", "=", "np", ".", "zeros", "(", "n", "+", "1", ",", "x", ".", "dtype", ")", "\n", "localsum", "[", ":", "n", "]", "=", "xsum", ".", "ravel", "(", ")", "\n", "localsum", "[", "n", "]", "=", "x", ".", "shape", "[", "axis", "]", "\n", "globalsum", "=", "np", ".", "zeros_like", "(", "localsum", ")", "\n", "comm", ".", "Allreduce", "(", "localsum", ",", "globalsum", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "return", "globalsum", "[", ":", "n", "]", ".", "reshape", "(", "xsum", ".", "shape", ")", "/", "globalsum", "[", "n", "]", ",", "globalsum", "[", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_moments.mpi_moments": [[19, 32], ["numpy.asarray", "mpi_moments.mpi_mean", "numpy.square", "mpi_moments.mpi_mean", "numpy.sqrt", "mean.reshape.reshape", "std.reshape.reshape"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_moments.mpi_mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_moments.mpi_mean"], ["", "def", "mpi_moments", "(", "x", ",", "axis", "=", "0", ",", "comm", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "assert", "x", ".", "ndim", ">", "0", "\n", "mean", ",", "count", "=", "mpi_mean", "(", "x", ",", "axis", "=", "axis", ",", "comm", "=", "comm", ",", "keepdims", "=", "True", ")", "\n", "sqdiffs", "=", "np", ".", "square", "(", "x", "-", "mean", ")", "\n", "meansqdiff", ",", "count1", "=", "mpi_mean", "(", "sqdiffs", ",", "axis", "=", "axis", ",", "comm", "=", "comm", ",", "keepdims", "=", "True", ")", "\n", "assert", "count1", "==", "count", "\n", "std", "=", "np", ".", "sqrt", "(", "meansqdiff", ")", "\n", "if", "not", "keepdims", ":", "\n", "        ", "newshape", "=", "mean", ".", "shape", "[", ":", "axis", "]", "+", "mean", ".", "shape", "[", "axis", "+", "1", ":", "]", "\n", "mean", "=", "mean", ".", "reshape", "(", "newshape", ")", "\n", "std", "=", "std", ".", "reshape", "(", "newshape", ")", "\n", "", "return", "mean", ",", "std", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_moments.test_runningmeanstd": [[34, 39], ["subprocess.check_call"], "function", ["None"], ["", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "import", "subprocess", "\n", "subprocess", ".", "check_call", "(", "[", "'mpirun'", ",", "'-np'", ",", "'3'", ",", "\n", "'python'", ",", "'-c'", ",", "\n", "'from baselines.common.mpi_moments import _helper_runningmeanstd; _helper_runningmeanstd()'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_moments._helper_runningmeanstd": [[40, 60], ["numpy.random.seed", "numpy.concatenate", "mpi_moments.mpi_moments", "baselines.common.zipsame", "np.concatenate.mean", "np.concatenate.std", "print", "numpy.allclose", "print", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "comm.Get_rank"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_moments.mpi_moments", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.zipsame", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.std"], ["", "def", "_helper_runningmeanstd", "(", ")", ":", "\n", "    ", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "for", "(", "triple", ",", "axis", ")", "in", "[", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "0", ")", ",", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "0", ")", ",", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "2", ",", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "2", ",", "4", ")", ")", ",", "1", ")", ",", "\n", "]", ":", "\n", "\n", "\n", "        ", "x", "=", "np", ".", "concatenate", "(", "triple", ",", "axis", "=", "axis", ")", "\n", "ms1", "=", "[", "x", ".", "mean", "(", "axis", "=", "axis", ")", ",", "x", ".", "std", "(", "axis", "=", "axis", ")", ",", "x", ".", "shape", "[", "axis", "]", "]", "\n", "\n", "\n", "ms2", "=", "mpi_moments", "(", "triple", "[", "comm", ".", "Get_rank", "(", ")", "]", ",", "axis", "=", "axis", ")", "\n", "\n", "for", "(", "a1", ",", "a2", ")", "in", "zipsame", "(", "ms1", ",", "ms2", ")", ":", "\n", "            ", "print", "(", "a1", ",", "a2", ")", "\n", "assert", "np", ".", "allclose", "(", "a1", ",", "a2", ")", "\n", "print", "(", "\"ok!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_fork.mpi_fork": [[3, 24], ["os.getenv", "os.environ.copy", "os.environ.copy.update", "subprocess.check_call", "str"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update"], ["def", "mpi_fork", "(", "n", ",", "bind_to_core", "=", "False", ")", ":", "\n", "    ", "\"\"\"Re-launches the current script with workers\n    Returns \"parent\" for original parent, \"child\" for MPI children\n    \"\"\"", "\n", "if", "n", "<=", "1", ":", "\n", "        ", "return", "\"child\"", "\n", "", "if", "os", ".", "getenv", "(", "\"IN_MPI\"", ")", "is", "None", ":", "\n", "        ", "env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "env", ".", "update", "(", "\n", "MKL_NUM_THREADS", "=", "\"1\"", ",", "\n", "OMP_NUM_THREADS", "=", "\"1\"", ",", "\n", "IN_MPI", "=", "\"1\"", "\n", ")", "\n", "args", "=", "[", "\"mpirun\"", ",", "\"-np\"", ",", "str", "(", "n", ")", "]", "\n", "if", "bind_to_core", ":", "\n", "            ", "args", "+=", "[", "\"-bind-to\"", ",", "\"core\"", "]", "\n", "", "args", "+=", "[", "sys", ".", "executable", "]", "+", "sys", ".", "argv", "\n", "subprocess", ".", "check_call", "(", "args", ",", "env", "=", "env", ")", "\n", "return", "\"parent\"", "\n", "", "else", ":", "\n", "        ", "return", "\"child\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.__init__": [[5, 15], ["numpy.zeros", "env.reset", "range"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "env", ",", "model", ",", "nsteps", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "model", "=", "model", "\n", "nenv", "=", "env", ".", "num_envs", "\n", "self", ".", "batch_ob_shape", "=", "(", "nenv", "*", "nsteps", ",", ")", "+", "env", ".", "observation_space", ".", "shape", "\n", "self", ".", "obs", "=", "np", ".", "zeros", "(", "(", "nenv", ",", ")", "+", "env", ".", "observation_space", ".", "shape", ",", "dtype", "=", "model", ".", "train_model", ".", "X", ".", "dtype", ".", "name", ")", "\n", "self", ".", "obs", "[", ":", "]", "=", "env", ".", "reset", "(", ")", "\n", "self", ".", "nsteps", "=", "nsteps", "\n", "self", ".", "states", "=", "model", ".", "initial_state", "\n", "self", ".", "dones", "=", "[", "False", "for", "_", "in", "range", "(", "nenv", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run": [[16, 19], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "run", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.console_util.fmt_row": [[10, 14], ["console_util.fmt_item", "len"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.console_util.fmt_item"], ["def", "fmt_row", "(", "width", ",", "row", ",", "header", "=", "False", ")", ":", "\n", "    ", "out", "=", "\" | \"", ".", "join", "(", "fmt_item", "(", "x", ",", "width", ")", "for", "x", "in", "row", ")", "\n", "if", "header", ":", "out", "=", "out", "+", "\"\\n\"", "+", "\"-\"", "*", "len", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.console_util.fmt_item": [[15, 27], ["isinstance", "isinstance", "x.item.item", "abs", "str", "len"], "function", ["None"], ["", "def", "fmt_item", "(", "x", ",", "l", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "assert", "x", ".", "ndim", "==", "0", "\n", "x", "=", "x", ".", "item", "(", ")", "\n", "", "if", "isinstance", "(", "x", ",", "(", "float", ",", "np", ".", "float32", ",", "np", ".", "float64", ")", ")", ":", "\n", "        ", "v", "=", "abs", "(", "x", ")", "\n", "if", "(", "v", "<", "1e-4", "or", "v", ">", "1e+4", ")", "and", "v", ">", "0", ":", "\n", "            ", "rep", "=", "\"%7.2e\"", "%", "x", "\n", "", "else", ":", "\n", "            ", "rep", "=", "\"%7.5f\"", "%", "x", "\n", "", "", "else", ":", "rep", "=", "str", "(", "x", ")", "\n", "return", "\" \"", "*", "(", "l", "-", "len", "(", "rep", ")", ")", "+", "rep", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.console_util.colorize": [[40, 47], ["attr.append", "str", "attr.append"], "function", ["None"], ["def", "colorize", "(", "string", ",", "color", ",", "bold", "=", "False", ",", "highlight", "=", "False", ")", ":", "\n", "    ", "attr", "=", "[", "]", "\n", "num", "=", "color2num", "[", "color", "]", "\n", "if", "highlight", ":", "num", "+=", "10", "\n", "attr", ".", "append", "(", "str", "(", "num", ")", ")", "\n", "if", "bold", ":", "attr", ".", "append", "(", "'1'", ")", "\n", "return", "'\\x1b[%sm%s\\x1b[0m'", "%", "(", "';'", ".", "join", "(", "attr", ")", ",", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.console_util.timed": [[51, 60], ["print", "time.time", "print", "console_util.colorize", "console_util.colorize", "time.time"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.console_util.colorize", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.console_util.colorize"], ["@", "contextmanager", "\n", "def", "timed", "(", "msg", ")", ":", "\n", "    ", "global", "MESSAGE_DEPTH", "#pylint: disable=W0603", "\n", "print", "(", "colorize", "(", "'\\t'", "*", "MESSAGE_DEPTH", "+", "'=: '", "+", "msg", ",", "color", "=", "'magenta'", ")", ")", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "MESSAGE_DEPTH", "+=", "1", "\n", "yield", "\n", "MESSAGE_DEPTH", "-=", "1", "\n", "print", "(", "colorize", "(", "'\\t'", "*", "MESSAGE_DEPTH", "+", "\"done in %.3f seconds\"", "%", "(", "time", ".", "time", "(", ")", "-", "tstart", ")", ",", "color", "=", "'magenta'", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.cmd_util.make_atari_env": [[14, 28], ["baselines.common.set_global_seeds", "baselines.common.vec_env.subproc_vec_env.SubprocVecEnv", "baselines.common.atari_wrappers.make_atari", "baselines.bench.Monitor.seed", "baselines.bench.Monitor", "baselines.common.atari_wrappers.wrap_deepmind", "cmd_util.make_atari_env.make_env"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.make_atari", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.wrap_deepmind"], ["def", "make_atari_env", "(", "env_id", ",", "num_env", ",", "seed", ",", "wrapper_kwargs", "=", "None", ",", "start_index", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Create a wrapped, monitored SubprocVecEnv for Atari.\n    \"\"\"", "\n", "if", "wrapper_kwargs", "is", "None", ":", "wrapper_kwargs", "=", "{", "}", "\n", "def", "make_env", "(", "rank", ")", ":", "# pylint: disable=C0111", "\n", "        ", "def", "_thunk", "(", ")", ":", "\n", "            ", "env", "=", "make_atari", "(", "env_id", ")", "\n", "env", ".", "seed", "(", "seed", "+", "rank", ")", "\n", "env", "=", "Monitor", "(", "env", ",", "logger", ".", "get_dir", "(", ")", "and", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "str", "(", "rank", ")", ")", ")", "\n", "return", "wrap_deepmind", "(", "env", ",", "**", "wrapper_kwargs", ")", "\n", "", "return", "_thunk", "\n", "", "set_global_seeds", "(", "seed", ")", "\n", "return", "SubprocVecEnv", "(", "[", "make_env", "(", "i", "+", "start_index", ")", "for", "i", "in", "range", "(", "num_env", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.cmd_util.make_mujoco_env": [[29, 38], ["baselines.common.set_global_seeds", "gym.make", "baselines.bench.Monitor", "baselines.bench.Monitor.seed", "baselines.logger.get_dir"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.get_dir"], ["", "def", "make_mujoco_env", "(", "env_id", ",", "seed", ")", ":", "\n", "    ", "\"\"\"\n    Create a wrapped, monitored gym.Env for MuJoCo.\n    \"\"\"", "\n", "set_global_seeds", "(", "seed", ")", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "env", "=", "Monitor", "(", "env", ",", "logger", ".", "get_dir", "(", ")", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.cmd_util.make_robotics_env": [[39, 51], ["baselines.common.set_global_seeds", "gym.make", "gym.wrappers.FlattenDictWrapper", "baselines.bench.Monitor", "baselines.bench.Monitor.seed", "baselines.logger.get_dir", "os.path.join", "baselines.logger.get_dir", "str"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.set_global_seeds", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.get_dir", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.get_dir"], ["", "def", "make_robotics_env", "(", "env_id", ",", "seed", ",", "rank", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Create a wrapped, monitored gym.Env for MuJoCo.\n    \"\"\"", "\n", "set_global_seeds", "(", "seed", ")", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "env", "=", "FlattenDictWrapper", "(", "env", ",", "[", "'observation'", ",", "'desired_goal'", "]", ")", "\n", "env", "=", "Monitor", "(", "\n", "env", ",", "logger", ".", "get_dir", "(", ")", "and", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "str", "(", "rank", ")", ")", ",", "\n", "info_keywords", "=", "(", "'is_success'", ",", ")", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.cmd_util.arg_parser": [[52, 58], ["argparse.ArgumentParser"], "function", ["None"], ["", "def", "arg_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create an empty argparse.ArgumentParser.\n    \"\"\"", "\n", "import", "argparse", "\n", "return", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.cmd_util.atari_arg_parser": [[59, 68], ["cmd_util.arg_parser", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "int"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.cmd_util.arg_parser"], ["", "def", "atari_arg_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create an argparse.ArgumentParser for run_atari.py.\n    \"\"\"", "\n", "parser", "=", "arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "help", "=", "'environment ID'", ",", "default", "=", "'BreakoutNoFrameskip-v4'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--num-timesteps'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "10e6", ")", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.cmd_util.mujoco_arg_parser": [[69, 78], ["cmd_util.arg_parser", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "int"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.cmd_util.arg_parser"], ["", "def", "mujoco_arg_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create an argparse.ArgumentParser for run_mujoco.py.\n    \"\"\"", "\n", "parser", "=", "arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "help", "=", "'environment ID'", ",", "type", "=", "str", ",", "default", "=", "'Reacher-v2'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--num-timesteps'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "1e6", ")", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.cmd_util.robotics_arg_parser": [[79, 88], ["cmd_util.arg_parser", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "int"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.cmd_util.arg_parser"], ["", "def", "robotics_arg_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create an argparse.ArgumentParser for run_mujoco.py.\n    \"\"\"", "\n", "parser", "=", "arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "help", "=", "'environment ID'", ",", "type", "=", "str", ",", "default", "=", "'FetchReach-v0'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--num-timesteps'", ",", "type", "=", "int", ",", "default", "=", "int", "(", "1e6", ")", ")", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.Filter.__call__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.Filter.reset": [[8, 10], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.IdentityFilter.__call__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.CompositionFilter.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fs", ")", ":", "\n", "        ", "self", ".", "fs", "=", "fs", "\n", "", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.CompositionFilter.__call__": [[18, 22], ["f"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "for", "f", "in", "self", ".", "fs", ":", "\n", "            ", "x", "=", "f", "(", "x", ")", "\n", "", "return", "x", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.CompositionFilter.output_shape": [[22, 27], ["f.output_shape"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.StackFilter.output_shape"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "out", "=", "input_space", ".", "shape", "\n", "for", "f", "in", "self", ".", "fs", ":", "\n", "            ", "out", "=", "f", ".", "output_shape", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.ZFilter.__init__": [[34, 40], ["running_stat.RunningStat"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "shape", ",", "demean", "=", "True", ",", "destd", "=", "True", ",", "clip", "=", "10.0", ")", ":", "\n", "        ", "self", ".", "demean", "=", "demean", "\n", "self", ".", "destd", "=", "destd", "\n", "self", ".", "clip", "=", "clip", "\n", "\n", "self", ".", "rs", "=", "RunningStat", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.ZFilter.__call__": [[41, 50], ["filters.ZFilter.rs.push", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.push"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "if", "update", ":", "self", ".", "rs", ".", "push", "(", "x", ")", "\n", "if", "self", ".", "demean", ":", "\n", "            ", "x", "=", "x", "-", "self", ".", "rs", ".", "mean", "\n", "", "if", "self", ".", "destd", ":", "\n", "            ", "x", "=", "x", "/", "(", "self", ".", "rs", ".", "std", "+", "1e-8", ")", "\n", "", "if", "self", ".", "clip", ":", "\n", "            ", "x", "=", "np", ".", "clip", "(", "x", ",", "-", "self", ".", "clip", ",", "self", ".", "clip", ")", "\n", "", "return", "x", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.ZFilter.output_shape": [[50, 52], ["None"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "return", "input_space", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.AddClock.__init__": [[54, 56], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.AddClock.reset": [[56, 58], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "count", "=", "0", "\n", "", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.AddClock.__call__": [[58, 60], ["numpy.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "return", "np", ".", "append", "(", "x", ",", "self", ".", "count", "/", "100.0", ")", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.AddClock.output_shape": [[60, 62], ["None"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "return", "(", "input_space", ".", "shape", "[", "0", "]", "+", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.FlattenFilter.__call__": [[64, 66], ["x.ravel"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "return", "x", ".", "ravel", "(", ")", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.FlattenFilter.output_shape": [[66, 68], ["int", "numpy.prod"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "return", "(", "int", "(", "np", ".", "prod", "(", "input_space", ".", "shape", ")", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.Ind2OneHotFilter.__init__": [[70, 72], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.Ind2OneHotFilter.__call__": [[72, 76], ["numpy.zeros"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "out", "=", "np", ".", "zeros", "(", "self", ".", "n", ")", "\n", "out", "[", "x", "]", "=", "1", "\n", "return", "out", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.Ind2OneHotFilter.output_shape": [[76, 78], ["None"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "return", "(", "input_space", ".", "n", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.DivFilter.__init__": [[80, 82], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "divisor", ")", ":", "\n", "        ", "self", ".", "divisor", "=", "divisor", "\n", "", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.DivFilter.__call__": [[82, 84], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "return", "x", "/", "self", ".", "divisor", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.DivFilter.output_shape": [[84, 86], ["None"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "return", "input_space", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.StackFilter.__init__": [[88, 90], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "stack", "=", "deque", "(", "maxlen", "=", "length", ")", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.StackFilter.reset": [[90, 92], ["filters.StackFilter.stack.clear"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "stack", ".", "clear", "(", ")", "\n", "", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.StackFilter.__call__": [[92, 97], ["filters.StackFilter.stack.append", "numpy.concatenate", "len", "filters.StackFilter.stack.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "update", "=", "True", ")", ":", "\n", "        ", "self", ".", "stack", ".", "append", "(", "x", ")", "\n", "while", "len", "(", "self", ".", "stack", ")", "<", "self", ".", "stack", ".", "maxlen", ":", "\n", "            ", "self", ".", "stack", ".", "append", "(", "x", ")", "\n", "", "return", "np", ".", "concatenate", "(", "self", ".", "stack", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.filters.StackFilter.output_shape": [[97, 99], ["None"], "methods", ["None"], ["", "def", "output_shape", "(", "self", ",", "input_space", ")", ":", "\n", "        ", "return", "input_space", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "input_space", ".", "shape", "[", "-", "1", "]", "*", "self", ".", "stack", ".", "maxlen", ",", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.Schedule.value": [[13, 16], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"Value of the schedule at time t\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.ConstantSchedule.__init__": [[19, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Value remains constant over time.\n\n        Parameters\n        ----------\n        value: float\n            Constant value of the schedule\n        \"\"\"", "\n", "self", ".", "_v", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.ConstantSchedule.value": [[29, 32], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "return", "self", ".", "_v", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.PiecewiseSchedule.__init__": [[39, 63], ["sorted"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "endpoints", ",", "interpolation", "=", "linear_interpolation", ",", "outside_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"Piecewise schedule.\n\n        endpoints: [(int, int)]\n            list of pairs `(time, value)` meanining that schedule should output\n            `value` when `t==time`. All the values for time must be sorted in\n            an increasing order. When t is between two times, e.g. `(time_a, value_a)`\n            and `(time_b, value_b)`, such that `time_a <= t < time_b` then value outputs\n            `interpolation(value_a, value_b, alpha)` where alpha is a fraction of\n            time passed between `time_a` and `time_b` for time `t`.\n        interpolation: lambda float, float, float: float\n            a function that takes value to the left and to the right of t according\n            to the `endpoints`. Alpha is the fraction of distance from left endpoint to\n            right endpoint that t has covered. See linear_interpolation for example.\n        outside_value: float\n            if the value is requested outside of all the intervals sepecified in\n            `endpoints` this value is returned. If None then AssertionError is\n            raised when outside value is requested.\n        \"\"\"", "\n", "idxes", "=", "[", "e", "[", "0", "]", "for", "e", "in", "endpoints", "]", "\n", "assert", "idxes", "==", "sorted", "(", "idxes", ")", "\n", "self", ".", "_interpolation", "=", "interpolation", "\n", "self", ".", "_outside_value", "=", "outside_value", "\n", "self", ".", "_endpoints", "=", "endpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.PiecewiseSchedule.value": [[64, 74], ["zip", "schedules.PiecewiseSchedule._interpolation", "float"], "methods", ["None"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "for", "(", "l_t", ",", "l", ")", ",", "(", "r_t", ",", "r", ")", "in", "zip", "(", "self", ".", "_endpoints", "[", ":", "-", "1", "]", ",", "self", ".", "_endpoints", "[", "1", ":", "]", ")", ":", "\n", "            ", "if", "l_t", "<=", "t", "and", "t", "<", "r_t", ":", "\n", "                ", "alpha", "=", "float", "(", "t", "-", "l_t", ")", "/", "(", "r_t", "-", "l_t", ")", "\n", "return", "self", ".", "_interpolation", "(", "l", ",", "r", ",", "alpha", ")", "\n", "\n", "# t does not belong to any of the pieces, so doom.", "\n", "", "", "assert", "self", ".", "_outside_value", "is", "not", "None", "\n", "return", "self", ".", "_outside_value", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.__init__": [[77, 95], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "schedule_timesteps", ",", "final_p", ",", "initial_p", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"Linear interpolation between initial_p and final_p over\n        schedule_timesteps. After this many timesteps pass final_p is\n        returned.\n\n        Parameters\n        ----------\n        schedule_timesteps: int\n            Number of timesteps for which to linearly anneal initial_p\n            to final_p\n        initial_p: float\n            initial output value\n        final_p: float\n            final output value\n        \"\"\"", "\n", "self", ".", "schedule_timesteps", "=", "schedule_timesteps", "\n", "self", ".", "final_p", "=", "final_p", "\n", "self", ".", "initial_p", "=", "initial_p", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value": [[96, 100], ["min", "float"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min"], ["", "def", "value", "(", "self", ",", "t", ")", ":", "\n", "        ", "\"\"\"See Schedule.value\"\"\"", "\n", "fraction", "=", "min", "(", "float", "(", "t", ")", "/", "self", ".", "schedule_timesteps", ",", "1.0", ")", "\n", "return", "self", ".", "initial_p", "+", "fraction", "*", "(", "self", ".", "final_p", "-", "self", ".", "initial_p", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.linear_interpolation": [[34, 36], ["None"], "function", ["None"], ["", "", "def", "linear_interpolation", "(", "l", ",", "r", ",", "alpha", ")", ":", "\n", "    ", "return", "l", "+", "alpha", "*", "(", "r", "-", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.EzPickle.__init__": [[57, 60], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_ezpickle_args", "=", "args", "\n", "self", ".", "_ezpickle_kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.EzPickle.__getstate__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"_ezpickle_args\"", ":", "self", ".", "_ezpickle_args", ",", "\"_ezpickle_kwargs\"", ":", "self", ".", "_ezpickle_kwargs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.EzPickle.__setstate__": [[64, 67], ["misc_util.EzPickle.__dict__.update", "type"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "out", "=", "type", "(", "self", ")", "(", "*", "d", "[", "\"_ezpickle_args\"", "]", ",", "**", "d", "[", "\"_ezpickle_kwargs\"", "]", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "out", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.RunningAvg.__init__": [[123, 137], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ",", "init_value", "=", "None", ")", ":", "\n", "        ", "\"\"\"Keep a running estimate of a quantity. This is a bit like mean\n        but more sensitive to recent changes.\n\n        Parameters\n        ----------\n        gamma: float\n            Must be between 0 and 1, where 0 is the most sensitive to recent\n            changes.\n        init_value: float or None\n            Initial value of the estimate. If None, it will be set on the first update.\n        \"\"\"", "\n", "self", ".", "_value", "=", "init_value", "\n", "self", ".", "_gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.RunningAvg.update": [[138, 150], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "new_val", ")", ":", "\n", "        ", "\"\"\"Update the estimate.\n\n        Parameters\n        ----------\n        new_val: float\n            new observated value of estimated quantity.\n        \"\"\"", "\n", "if", "self", ".", "_value", "is", "None", ":", "\n", "            ", "self", ".", "_value", "=", "new_val", "\n", "", "else", ":", "\n", "            ", "self", ".", "_value", "=", "self", ".", "_gamma", "*", "self", ".", "_value", "+", "(", "1.0", "-", "self", ".", "_gamma", ")", "*", "new_val", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.RunningAvg.__float__": [[151, 154], ["None"], "methods", ["None"], ["", "", "def", "__float__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the current estimate\"\"\"", "\n", "return", "self", ".", "_value", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.zipsame": [[10, 14], ["len", "all", "zip", "len"], "function", ["None"], ["def", "zipsame", "(", "*", "seqs", ")", ":", "\n", "    ", "L", "=", "len", "(", "seqs", "[", "0", "]", ")", "\n", "assert", "all", "(", "len", "(", "seq", ")", "==", "L", "for", "seq", "in", "seqs", "[", "1", ":", "]", ")", "\n", "return", "zip", "(", "*", "seqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.unpack": [[16, 35], ["list", "iter", "sum", "len", "range", "iter.__next__", "li.append", "iter.__next__"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum"], ["", "def", "unpack", "(", "seq", ",", "sizes", ")", ":", "\n", "    ", "\"\"\"\n    Unpack 'seq' into a sequence of lists, with lengths specified by 'sizes'.\n    None = just one bare element, not a list\n\n    Example:\n    unpack([1,2,3,4,5,6], [3,None,2]) -> ([1,2,3], 4, [5,6])\n    \"\"\"", "\n", "seq", "=", "list", "(", "seq", ")", "\n", "it", "=", "iter", "(", "seq", ")", "\n", "assert", "sum", "(", "1", "if", "s", "is", "None", "else", "s", "for", "s", "in", "sizes", ")", "==", "len", "(", "seq", ")", ",", "\"Trying to unpack %s into %s\"", "%", "(", "seq", ",", "sizes", ")", "\n", "for", "size", "in", "sizes", ":", "\n", "        ", "if", "size", "is", "None", ":", "\n", "            ", "yield", "it", ".", "__next__", "(", ")", "\n", "", "else", ":", "\n", "            ", "li", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "size", ")", ":", "\n", "                ", "li", ".", "append", "(", "it", ".", "__next__", "(", ")", ")", "\n", "", "yield", "li", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.set_global_seeds": [[69, 78], ["numpy.random.seed", "random.seed", "tf.set_random_seed"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed"], ["", "", "def", "set_global_seeds", "(", "i", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "tf", ".", "set_random_seed", "(", "i", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "i", ")", "\n", "random", ".", "seed", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.pretty_eta": [[80, 120], ["misc_util.pretty_eta.helper"], "function", ["None"], ["", "def", "pretty_eta", "(", "seconds_left", ")", ":", "\n", "    ", "\"\"\"Print the number of seconds in human readable format.\n\n    Examples:\n    2 days\n    2 hours and 37 minutes\n    less than a minute\n\n    Paramters\n    ---------\n    seconds_left: int\n        Number of seconds to be converted to the ETA\n    Returns\n    -------\n    eta: str\n        String representing the pretty ETA.\n    \"\"\"", "\n", "minutes_left", "=", "seconds_left", "//", "60", "\n", "seconds_left", "%=", "60", "\n", "hours_left", "=", "minutes_left", "//", "60", "\n", "minutes_left", "%=", "60", "\n", "days_left", "=", "hours_left", "//", "24", "\n", "hours_left", "%=", "24", "\n", "\n", "def", "helper", "(", "cnt", ",", "name", ")", ":", "\n", "        ", "return", "\"{} {}{}\"", ".", "format", "(", "str", "(", "cnt", ")", ",", "name", ",", "(", "'s'", "if", "cnt", ">", "1", "else", "''", ")", ")", "\n", "\n", "", "if", "days_left", ">", "0", ":", "\n", "        ", "msg", "=", "helper", "(", "days_left", ",", "'day'", ")", "\n", "if", "hours_left", ">", "0", ":", "\n", "            ", "msg", "+=", "' and '", "+", "helper", "(", "hours_left", ",", "'hour'", ")", "\n", "", "return", "msg", "\n", "", "if", "hours_left", ">", "0", ":", "\n", "        ", "msg", "=", "helper", "(", "hours_left", ",", "'hour'", ")", "\n", "if", "minutes_left", ">", "0", ":", "\n", "            ", "msg", "+=", "' and '", "+", "helper", "(", "minutes_left", ",", "'minute'", ")", "\n", "", "return", "msg", "\n", "", "if", "minutes_left", ">", "0", ":", "\n", "        ", "return", "helper", "(", "minutes_left", ",", "'minute'", ")", "\n", "", "return", "'less than a minute'", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.boolean_flag": [[155, 172], ["name.replace", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "", "def", "boolean_flag", "(", "parser", ",", "name", ",", "default", "=", "False", ",", "help", "=", "None", ")", ":", "\n", "    ", "\"\"\"Add a boolean flag to argparse parser.\n\n    Parameters\n    ----------\n    parser: argparse.Parser\n        parser to add the flag to\n    name: str\n        --<name> will enable the flag, while --no-<name> will disable it\n    default: bool or None\n        default value of the flag\n    help: str\n        help string for the flag\n    \"\"\"", "\n", "dest", "=", "name", ".", "replace", "(", "'-'", ",", "'_'", ")", "\n", "parser", ".", "add_argument", "(", "\"--\"", "+", "name", ",", "action", "=", "\"store_true\"", ",", "default", "=", "default", ",", "dest", "=", "dest", ",", "help", "=", "help", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-\"", "+", "name", ",", "action", "=", "\"store_false\"", ",", "dest", "=", "dest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.get_wrapper_by_name": [[174, 198], ["currentenv.class_name", "isinstance", "ValueError"], "function", ["None"], ["", "def", "get_wrapper_by_name", "(", "env", ",", "classname", ")", ":", "\n", "    ", "\"\"\"Given an a gym environment possibly wrapped multiple times, returns a wrapper\n    of class named classname or raises ValueError if no such wrapper was applied\n\n    Parameters\n    ----------\n    env: gym.Env of gym.Wrapper\n        gym environment\n    classname: str\n        name of the wrapper\n\n    Returns\n    -------\n    wrapper: gym.Wrapper\n        wrapper named classname\n    \"\"\"", "\n", "currentenv", "=", "env", "\n", "while", "True", ":", "\n", "        ", "if", "classname", "==", "currentenv", ".", "class_name", "(", ")", ":", "\n", "            ", "return", "currentenv", "\n", "", "elif", "isinstance", "(", "currentenv", ",", "gym", ".", "Wrapper", ")", ":", "\n", "            ", "currentenv", "=", "currentenv", ".", "env", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Couldn't find wrapper named %s\"", "%", "classname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.relatively_safe_pickle_dump": [[200, 234], ["os.rename", "tempfile.NamedTemporaryFile", "pickle.dump", "uncompressed_file.file.flush", "open", "pickle.dump", "zipfile.ZipFile", "myzip.write"], "function", ["None"], ["", "", "", "def", "relatively_safe_pickle_dump", "(", "obj", ",", "path", ",", "compression", "=", "False", ")", ":", "\n", "    ", "\"\"\"This is just like regular pickle dump, except from the fact that failure cases are\n    different:\n\n        - It's never possible that we end up with a pickle in corrupted state.\n        - If a there was a different file at the path, that file will remain unchanged in the\n          even of failure (provided that filesystem rename is atomic).\n        - it is sometimes possible that we end up with useless temp file which needs to be\n          deleted manually (it will be removed automatically on the next function call)\n\n    The indended use case is periodic checkpoints of experiment state, such that we never\n    corrupt previous checkpoints if the current one fails.\n\n    Parameters\n    ----------\n    obj: object\n        object to pickle\n    path: str\n        path to the output file\n    compression: bool\n        if true pickle will be compressed\n    \"\"\"", "\n", "temp_storage", "=", "path", "+", "\".relatively_safe\"", "\n", "if", "compression", ":", "\n", "# Using gzip here would be simpler, but the size is limited to 2GB", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "uncompressed_file", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "uncompressed_file", ")", "\n", "uncompressed_file", ".", "file", ".", "flush", "(", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "temp_storage", ",", "\"w\"", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "myzip", ":", "\n", "                ", "myzip", ".", "write", "(", "uncompressed_file", ".", "name", ",", "\"data\"", ")", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "temp_storage", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "f", ")", "\n", "", "", "os", ".", "rename", "(", "temp_storage", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.misc_util.pickle_load": [[236, 259], ["zipfile.ZipFile", "open", "pickle.load", "myzip.open", "pickle.load"], "function", ["None"], ["", "def", "pickle_load", "(", "path", ",", "compression", "=", "False", ")", ":", "\n", "    ", "\"\"\"Unpickle a possible compressed pickle.\n\n    Parameters\n    ----------\n    path: str\n        path to the output file\n    compression: bool\n        if true assumes that pickle was compressed when created and attempts decompression.\n\n    Returns\n    -------\n    obj: object\n        the unpickled object\n    \"\"\"", "\n", "\n", "if", "compression", ":", "\n", "        ", "with", "zipfile", ".", "ZipFile", "(", "path", ",", "\"r\"", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "myzip", ":", "\n", "            ", "with", "myzip", ".", "open", "(", "\"data\"", ")", "as", "f", ":", "\n", "                ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_mean_std.RunningMeanStd.__init__": [[4, 8], ["numpy.zeros", "numpy.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-4", ",", "shape", "=", "(", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "zeros", "(", "shape", ",", "'float64'", ")", "\n", "self", ".", "var", "=", "np", ".", "ones", "(", "shape", ",", "'float64'", ")", "\n", "self", ".", "count", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_mean_std.RunningMeanStd.update": [[9, 14], ["numpy.mean", "numpy.var", "running_mean_std.RunningMeanStd.update_from_moments"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.var", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_mean_std.RunningMeanStd.update_from_moments"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_mean", "=", "np", ".", "mean", "(", "x", ",", "axis", "=", "0", ")", "\n", "batch_var", "=", "np", ".", "var", "(", "x", ",", "axis", "=", "0", ")", "\n", "batch_count", "=", "x", ".", "shape", "[", "0", "]", "\n", "self", ".", "update_from_moments", "(", "batch_mean", ",", "batch_var", ",", "batch_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_mean_std.RunningMeanStd.update_from_moments": [[15, 30], ["numpy.square"], "methods", ["None"], ["", "def", "update_from_moments", "(", "self", ",", "batch_mean", ",", "batch_var", ",", "batch_count", ")", ":", "\n", "        ", "delta", "=", "batch_mean", "-", "self", ".", "mean", "\n", "tot_count", "=", "self", ".", "count", "+", "batch_count", "\n", "\n", "new_mean", "=", "self", ".", "mean", "+", "delta", "*", "batch_count", "/", "tot_count", "\n", "m_a", "=", "self", ".", "var", "*", "(", "self", ".", "count", ")", "\n", "m_b", "=", "batch_var", "*", "(", "batch_count", ")", "\n", "M2", "=", "m_a", "+", "m_b", "+", "np", ".", "square", "(", "delta", ")", "*", "self", ".", "count", "*", "batch_count", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "new_var", "=", "M2", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "\n", "new_count", "=", "batch_count", "+", "self", ".", "count", "\n", "\n", "self", ".", "mean", "=", "new_mean", "\n", "self", ".", "var", "=", "new_var", "\n", "self", ".", "count", "=", "new_count", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_mean_std.test_runningmeanstd": [[31, 47], ["running_mean_std.RunningMeanStd", "numpy.concatenate", "running_mean_std.RunningMeanStd.update", "running_mean_std.RunningMeanStd.update", "running_mean_std.RunningMeanStd.update", "numpy.allclose", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "np.concatenate.mean", "np.concatenate.var"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.var"], ["", "", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "for", "(", "x1", ",", "x2", ",", "x3", ")", "in", "[", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "\n", "]", ":", "\n", "\n", "        ", "rms", "=", "RunningMeanStd", "(", "epsilon", "=", "0.0", ",", "shape", "=", "x1", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "x1", ",", "x2", ",", "x3", "]", ",", "axis", "=", "0", ")", "\n", "ms1", "=", "[", "x", ".", "mean", "(", "axis", "=", "0", ")", ",", "x", ".", "var", "(", "axis", "=", "0", ")", "]", "\n", "rms", ".", "update", "(", "x1", ")", "\n", "rms", ".", "update", "(", "x2", ")", "\n", "rms", ".", "update", "(", "x3", ")", "\n", "ms2", "=", "[", "rms", ".", "mean", ",", "rms", ".", "var", "]", "\n", "\n", "assert", "np", ".", "allclose", "(", "ms1", ",", "ms2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SegmentTree.__init__": [[5, 35], ["range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ",", "operation", ",", "neutral_element", ")", ":", "\n", "        ", "\"\"\"Build a Segment Tree data structure.\n\n        https://en.wikipedia.org/wiki/Segment_tree\n\n        Can be used as regular array, but with two\n        important differences:\n\n            a) setting item's value is slightly slower.\n               It is O(lg capacity) instead of O(1).\n            b) user has access to an efficient ( O(log segment size) )\n               `reduce` operation which reduces `operation` over\n               a contiguous subsequence of items in the array.\n\n        Paramters\n        ---------\n        capacity: int\n            Total size of the array - must be a power of two.\n        operation: lambda obj, obj -> obj\n            and operation for combining elements (eg. sum, max)\n            must form a mathematical group together with the set of\n            possible values for array elements (i.e. be associative)\n        neutral_element: obj\n            neutral element for the operation above. eg. float('-inf')\n            for max and 0 for sum.\n        \"\"\"", "\n", "assert", "capacity", ">", "0", "and", "capacity", "&", "(", "capacity", "-", "1", ")", "==", "0", ",", "\"capacity must be positive and a power of 2.\"", "\n", "self", ".", "_capacity", "=", "capacity", "\n", "self", ".", "_value", "=", "[", "neutral_element", "for", "_", "in", "range", "(", "2", "*", "capacity", ")", "]", "\n", "self", ".", "_operation", "=", "operation", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SegmentTree._reduce_helper": [[36, 49], ["segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._operation", "segment_tree.SegmentTree._reduce_helper", "segment_tree.SegmentTree._reduce_helper"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SegmentTree._reduce_helper", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SegmentTree._reduce_helper"], ["", "def", "_reduce_helper", "(", "self", ",", "start", ",", "end", ",", "node", ",", "node_start", ",", "node_end", ")", ":", "\n", "        ", "if", "start", "==", "node_start", "and", "end", "==", "node_end", ":", "\n", "            ", "return", "self", ".", "_value", "[", "node", "]", "\n", "", "mid", "=", "(", "node_start", "+", "node_end", ")", "//", "2", "\n", "if", "end", "<=", "mid", ":", "\n", "            ", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "2", "*", "node", ",", "node_start", ",", "mid", ")", "\n", "", "else", ":", "\n", "            ", "if", "mid", "+", "1", "<=", "start", ":", "\n", "                ", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "2", "*", "node", "+", "1", ",", "mid", "+", "1", ",", "node_end", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_operation", "(", "\n", "self", ".", "_reduce_helper", "(", "start", ",", "mid", ",", "2", "*", "node", ",", "node_start", ",", "mid", ")", ",", "\n", "self", ".", "_reduce_helper", "(", "mid", "+", "1", ",", "end", ",", "2", "*", "node", "+", "1", ",", "mid", "+", "1", ",", "node_end", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SegmentTree.reduce": [[51, 75], ["segment_tree.SegmentTree._reduce_helper"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SegmentTree._reduce_helper"], ["", "", "", "def", "reduce", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns result of applying `self.operation`\n        to a contiguous subsequence of the array.\n\n            self.operation(arr[start], operation(arr[start+1], operation(... arr[end])))\n\n        Parameters\n        ----------\n        start: int\n            beginning of the subsequence\n        end: int\n            end of the subsequences\n\n        Returns\n        -------\n        reduced: obj\n            result of reducing self.operation over the specified range of array elements.\n        \"\"\"", "\n", "if", "end", "is", "None", ":", "\n", "            ", "end", "=", "self", ".", "_capacity", "\n", "", "if", "end", "<", "0", ":", "\n", "            ", "end", "+=", "self", ".", "_capacity", "\n", "", "end", "-=", "1", "\n", "return", "self", ".", "_reduce_helper", "(", "start", ",", "end", ",", "1", ",", "0", ",", "self", ".", "_capacity", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SegmentTree.__setitem__": [[76, 87], ["segment_tree.SegmentTree._operation"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "idx", ",", "val", ")", ":", "\n", "# index of the leaf", "\n", "        ", "idx", "+=", "self", ".", "_capacity", "\n", "self", ".", "_value", "[", "idx", "]", "=", "val", "\n", "idx", "//=", "2", "\n", "while", "idx", ">=", "1", ":", "\n", "            ", "self", ".", "_value", "[", "idx", "]", "=", "self", ".", "_operation", "(", "\n", "self", ".", "_value", "[", "2", "*", "idx", "]", ",", "\n", "self", ".", "_value", "[", "2", "*", "idx", "+", "1", "]", "\n", ")", "\n", "idx", "//=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SegmentTree.__getitem__": [[88, 91], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "0", "<=", "idx", "<", "self", ".", "_capacity", "\n", "return", "self", ".", "_value", "[", "self", ".", "_capacity", "+", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.__init__": [[94, 99], ["segment_tree.SegmentTree.__init__"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "super", "(", "SumSegmentTree", ",", "self", ")", ".", "__init__", "(", "\n", "capacity", "=", "capacity", ",", "\n", "operation", "=", "operator", ".", "add", ",", "\n", "neutral_element", "=", "0.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum": [[101, 104], ["segment_tree.SegmentTree.reduce"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SegmentTree.reduce"], ["", "def", "sum", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns arr[start] + ... + arr[end]\"\"\"", "\n", "return", "super", "(", "SumSegmentTree", ",", "self", ")", ".", "reduce", "(", "start", ",", "end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx": [[105, 132], ["segment_tree.SumSegmentTree.sum"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum"], ["", "def", "find_prefixsum_idx", "(", "self", ",", "prefixsum", ")", ":", "\n", "        ", "\"\"\"Find the highest index `i` in the array such that\n            sum(arr[0] + arr[1] + ... + arr[i - i]) <= prefixsum\n\n        if array values are probabilities, this function\n        allows to sample indexes according to the discrete\n        probability efficiently.\n\n        Parameters\n        ----------\n        perfixsum: float\n            upperbound on the sum of array prefix\n\n        Returns\n        -------\n        idx: int\n            highest index satisfying the prefixsum constraint\n        \"\"\"", "\n", "assert", "0", "<=", "prefixsum", "<=", "self", ".", "sum", "(", ")", "+", "1e-5", "\n", "idx", "=", "1", "\n", "while", "idx", "<", "self", ".", "_capacity", ":", "# while non-leaf", "\n", "            ", "if", "self", ".", "_value", "[", "2", "*", "idx", "]", ">", "prefixsum", ":", "\n", "                ", "idx", "=", "2", "*", "idx", "\n", "", "else", ":", "\n", "                ", "prefixsum", "-=", "self", ".", "_value", "[", "2", "*", "idx", "]", "\n", "idx", "=", "2", "*", "idx", "+", "1", "\n", "", "", "return", "idx", "-", "self", ".", "_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.__init__": [[135, 140], ["segment_tree.SegmentTree.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "super", "(", "MinSegmentTree", ",", "self", ")", ".", "__init__", "(", "\n", "capacity", "=", "capacity", ",", "\n", "operation", "=", "min", ",", "\n", "neutral_element", "=", "float", "(", "'inf'", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min": [[142, 146], ["segment_tree.SegmentTree.reduce"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SegmentTree.reduce"], ["", "def", "min", "(", "self", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns min(arr[start], ...,  arr[end])\"\"\"", "\n", "\n", "return", "super", "(", "MinSegmentTree", ",", "self", ")", ".", "reduce", "(", "start", ",", "end", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.dataset.Dataset.__init__": [[4, 11], ["dataset.Dataset.shuffle", "next", "iter", "data_map.values"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.dataset.Dataset.shuffle"], ["    ", "def", "__init__", "(", "self", ",", "data_map", ",", "deterministic", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "data_map", "=", "data_map", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "self", ".", "enable_shuffle", "=", "shuffle", "\n", "self", ".", "n", "=", "next", "(", "iter", "(", "data_map", ".", "values", "(", ")", ")", ")", ".", "shape", "[", "0", "]", "\n", "self", ".", "_next_id", "=", "0", "\n", "self", ".", "shuffle", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.dataset.Dataset.shuffle": [[12, 22], ["numpy.arange", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.dataset.Dataset.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "deterministic", ":", "\n", "            ", "return", "\n", "", "perm", "=", "np", ".", "arange", "(", "self", ".", "n", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "self", ".", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", "perm", "]", "\n", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.dataset.Dataset.next_batch": [[23, 35], ["min", "dict", "dataset.Dataset.shuffle"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.dataset.Dataset.shuffle"], ["", "def", "next_batch", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "_next_id", ">=", "self", ".", "n", "and", "self", ".", "enable_shuffle", ":", "\n", "            ", "self", ".", "shuffle", "(", ")", "\n", "\n", "", "cur_id", "=", "self", ".", "_next_id", "\n", "cur_batch_size", "=", "min", "(", "batch_size", ",", "self", ".", "n", "-", "self", ".", "_next_id", ")", "\n", "self", ".", "_next_id", "+=", "cur_batch_size", "\n", "\n", "data_map", "=", "dict", "(", ")", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", "cur_id", ":", "cur_id", "+", "cur_batch_size", "]", "\n", "", "return", "data_map", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.dataset.Dataset.iterate_once": [[36, 42], ["dataset.Dataset.shuffle", "dataset.Dataset.next_batch"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.dataset.Dataset.shuffle", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.dataset.Dataset.next_batch"], ["", "def", "iterate_once", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "enable_shuffle", ":", "self", ".", "shuffle", "(", ")", "\n", "\n", "while", "self", ".", "_next_id", "<=", "self", ".", "n", "-", "batch_size", ":", "\n", "            ", "yield", "self", ".", "next_batch", "(", "batch_size", ")", "\n", "", "self", ".", "_next_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.dataset.Dataset.subset": [[43, 48], ["dict", "dataset.Dataset"], "methods", ["None"], ["", "def", "subset", "(", "self", ",", "num_elements", ",", "deterministic", "=", "True", ")", ":", "\n", "        ", "data_map", "=", "dict", "(", ")", "\n", "for", "key", "in", "self", ".", "data_map", ":", "\n", "            ", "data_map", "[", "key", "]", "=", "self", ".", "data_map", "[", "key", "]", "[", ":", "num_elements", "]", "\n", "", "return", "Dataset", "(", "data_map", ",", "deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.dataset.iterbatches": [[50, 61], ["tuple", "all", "numpy.arange", "numpy.array_split", "map", "numpy.random.shuffle", "numpy.arange", "len", "tuple"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.dataset.Dataset.shuffle"], ["", "", "def", "iterbatches", "(", "arrays", ",", "*", ",", "num_batches", "=", "None", ",", "batch_size", "=", "None", ",", "shuffle", "=", "True", ",", "include_final_partial_batch", "=", "True", ")", ":", "\n", "    ", "assert", "(", "num_batches", "is", "None", ")", "!=", "(", "batch_size", "is", "None", ")", ",", "'Provide num_batches or batch_size, but not both'", "\n", "arrays", "=", "tuple", "(", "map", "(", "np", ".", "asarray", ",", "arrays", ")", ")", "\n", "n", "=", "arrays", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "assert", "all", "(", "a", ".", "shape", "[", "0", "]", "==", "n", "for", "a", "in", "arrays", "[", "1", ":", "]", ")", "\n", "inds", "=", "np", ".", "arange", "(", "n", ")", "\n", "if", "shuffle", ":", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "sections", "=", "np", ".", "arange", "(", "0", ",", "n", ",", "batch_size", ")", "[", "1", ":", "]", "if", "num_batches", "is", "None", "else", "num_batches", "\n", "for", "batch_inds", "in", "np", ".", "array_split", "(", "inds", ",", "sections", ")", ":", "\n", "        ", "if", "include_final_partial_batch", "or", "len", "(", "batch_inds", ")", "==", "batch_size", ":", "\n", "            ", "yield", "tuple", "(", "a", "[", "batch_inds", "]", "for", "a", "in", "arrays", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_adam.MpiAdam.__init__": [[7, 20], ["sum", "numpy.zeros", "numpy.zeros", "baselines.SetFromFlat", "baselines.GetFlat", "baselines.numel"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.numel"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ",", "*", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "epsilon", "=", "1e-08", ",", "scale_grad_by_procs", "=", "True", ",", "comm", "=", "None", ")", ":", "\n", "        ", "self", ".", "var_list", "=", "var_list", "\n", "self", ".", "beta1", "=", "beta1", "\n", "self", ".", "beta2", "=", "beta2", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "scale_grad_by_procs", "=", "scale_grad_by_procs", "\n", "size", "=", "sum", "(", "U", ".", "numel", "(", "v", ")", "for", "v", "in", "var_list", ")", "\n", "self", ".", "m", "=", "np", ".", "zeros", "(", "size", ",", "'float32'", ")", "\n", "self", ".", "v", "=", "np", ".", "zeros", "(", "size", ",", "'float32'", ")", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "setfromflat", "=", "U", ".", "SetFromFlat", "(", "var_list", ")", "\n", "self", ".", "getflat", "=", "U", ".", "GetFlat", "(", "var_list", ")", "\n", "self", ".", "comm", "=", "MPI", ".", "COMM_WORLD", "if", "comm", "is", "None", "else", "comm", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_adam.MpiAdam.update": [[21, 36], ["localg.astype.astype.astype", "numpy.zeros_like", "mpi_adam.MpiAdam.comm.Allreduce", "mpi_adam.MpiAdam.setfromflat", "mpi_adam.MpiAdam.check_synced", "mpi_adam.MpiAdam.comm.Get_size", "numpy.sqrt", "numpy.sqrt", "mpi_adam.MpiAdam.getflat"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_adam.MpiAdam.check_synced"], ["", "def", "update", "(", "self", ",", "localg", ",", "stepsize", ")", ":", "\n", "        ", "if", "self", ".", "t", "%", "100", "==", "0", ":", "\n", "            ", "self", ".", "check_synced", "(", ")", "\n", "", "localg", "=", "localg", ".", "astype", "(", "'float32'", ")", "\n", "globalg", "=", "np", ".", "zeros_like", "(", "localg", ")", "\n", "self", ".", "comm", ".", "Allreduce", "(", "localg", ",", "globalg", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "if", "self", ".", "scale_grad_by_procs", ":", "\n", "            ", "globalg", "/=", "self", ".", "comm", ".", "Get_size", "(", ")", "\n", "\n", "", "self", ".", "t", "+=", "1", "\n", "a", "=", "stepsize", "*", "np", ".", "sqrt", "(", "1", "-", "self", ".", "beta2", "**", "self", ".", "t", ")", "/", "(", "1", "-", "self", ".", "beta1", "**", "self", ".", "t", ")", "\n", "self", ".", "m", "=", "self", ".", "beta1", "*", "self", ".", "m", "+", "(", "1", "-", "self", ".", "beta1", ")", "*", "globalg", "\n", "self", ".", "v", "=", "self", ".", "beta2", "*", "self", ".", "v", "+", "(", "1", "-", "self", ".", "beta2", ")", "*", "(", "globalg", "*", "globalg", ")", "\n", "step", "=", "(", "-", "a", ")", "*", "self", ".", "m", "/", "(", "np", ".", "sqrt", "(", "self", ".", "v", ")", "+", "self", ".", "epsilon", ")", "\n", "self", ".", "setfromflat", "(", "self", ".", "getflat", "(", ")", "+", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_adam.MpiAdam.sync": [[37, 41], ["mpi_adam.MpiAdam.getflat", "mpi_adam.MpiAdam.comm.Bcast", "mpi_adam.MpiAdam.setfromflat"], "methods", ["None"], ["", "def", "sync", "(", "self", ")", ":", "\n", "        ", "theta", "=", "self", ".", "getflat", "(", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "theta", ",", "root", "=", "0", ")", "\n", "self", ".", "setfromflat", "(", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_adam.MpiAdam.check_synced": [[42, 51], ["mpi_adam.MpiAdam.comm.Get_rank", "mpi_adam.MpiAdam.getflat", "mpi_adam.MpiAdam.comm.Bcast", "mpi_adam.MpiAdam.getflat", "numpy.empty_like", "mpi_adam.MpiAdam.comm.Bcast"], "methods", ["None"], ["", "def", "check_synced", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "comm", ".", "Get_rank", "(", ")", "==", "0", ":", "# this is root", "\n", "            ", "theta", "=", "self", ".", "getflat", "(", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "theta", ",", "root", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "thetalocal", "=", "self", ".", "getflat", "(", ")", "\n", "thetaroot", "=", "np", ".", "empty_like", "(", "thetalocal", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "thetaroot", ",", "root", "=", "0", ")", "\n", "assert", "(", "thetaroot", "==", "thetalocal", ")", ".", "all", "(", ")", ",", "(", "thetaroot", ",", "thetalocal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_adam.test_MpiAdam": [[52, 80], ["numpy.random.seed", "tensorflow.set_random_seed", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.AdamOptimizer().minimize", "baselines.function", "tensorflow.get_default_session().run", "range", "tensorflow.set_random_seed", "tensorflow.get_default_session().run", "baselines.function", "mpi_adam.MpiAdam", "range", "numpy.random.randn().astype", "numpy.random.randn().astype", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.global_variables_initializer", "print", "tensorflow.global_variables_initializer", "U.function.", "mpi_adam.MpiAdam.update", "print", "tensorflow.square", "tensorflow.sin", "tensorflow.train.AdamOptimizer", "tensorflow.get_default_session", "U.function.", "tensorflow.get_default_session", "baselines.flatgrad", "numpy.random.randn", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.function", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.function", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.flatgrad"], ["", "", "", "@", "U", ".", "in_session", "\n", "def", "test_MpiAdam", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "\n", "a", "=", "tf", ".", "Variable", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "np", ".", "random", ".", "randn", "(", "2", ",", "5", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "a", ")", ")", "+", "tf", ".", "reduce_sum", "(", "tf", ".", "sin", "(", "b", ")", ")", "\n", "\n", "stepsize", "=", "1e-2", "\n", "update_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "stepsize", ")", ".", "minimize", "(", "loss", ")", "\n", "do_update", "=", "U", ".", "function", "(", "[", "]", ",", "loss", ",", "updates", "=", "[", "update_op", "]", ")", "\n", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "print", "(", "i", ",", "do_update", "(", ")", ")", "\n", "\n", "", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "var_list", "=", "[", "a", ",", "b", "]", "\n", "lossandgrad", "=", "U", ".", "function", "(", "[", "]", ",", "[", "loss", ",", "U", ".", "flatgrad", "(", "loss", ",", "var_list", ")", "]", ",", "updates", "=", "[", "update_op", "]", ")", "\n", "adam", "=", "MpiAdam", "(", "var_list", ")", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "l", ",", "g", "=", "lossandgrad", "(", ")", "\n", "adam", ".", "update", "(", "g", ",", "stepsize", ")", "\n", "print", "(", "i", ",", "l", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.Pd.flatparam": [[11, 13], ["None"], "methods", ["None"], ["def", "flatparam", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.Pd.mode": [[13, 15], ["None"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.Pd.neglogp": [[15, 18], ["None"], "methods", ["None"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "# Usually it's easier to define the negative logprob", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.Pd.kl": [[18, 20], ["None"], "methods", ["None"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.Pd.entropy": [[20, 22], ["None"], "methods", ["None"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.Pd.sample": [[22, 24], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "logp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.Pd.logp": [[24, 26], ["distributions.Pd.neglogp"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.neglogp"], ["", "def", "logp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "-", "self", ".", "neglogp", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.PdType.pdclass": [[31, 33], ["None"], "methods", ["None"], ["def", "pdclass", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.PdType.pdfromflat": [[33, 35], ["distributions.PdType.pdclass"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPdType.pdclass"], ["", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n", "        ", "return", "self", ".", "pdclass", "(", ")", "(", "flat", ")", "\n", "", "def", "pdfromlatent", "(", "self", ",", "latent_vector", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.PdType.pdfromlatent": [[35, 37], ["None"], "methods", ["None"], ["", "def", "pdfromlatent", "(", "self", ",", "latent_vector", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.PdType.param_shape": [[37, 39], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.PdType.sample_shape": [[39, 41], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.PdType.sample_dtype": [[41, 43], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.PdType.param_placeholder": [[44, 46], ["tensorflow.placeholder", "distributions.PdType.param_shape"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPdType.param_shape"], ["", "def", "param_placeholder", "(", "self", ",", "prepend_shape", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "prepend_shape", "+", "self", ".", "param_shape", "(", ")", ",", "name", "=", "name", ")", "\n", "", "def", "sample_placeholder", "(", "self", ",", "prepend_shape", ",", "name", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.PdType.sample_placeholder": [[46, 48], ["tensorflow.placeholder", "distributions.PdType.sample_dtype", "distributions.PdType.sample_shape"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPdType.sample_dtype", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPdType.sample_shape"], ["", "def", "sample_placeholder", "(", "self", ",", "prepend_shape", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "tf", ".", "placeholder", "(", "dtype", "=", "self", ".", "sample_dtype", "(", ")", ",", "shape", "=", "prepend_shape", "+", "self", ".", "sample_shape", "(", ")", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPdType.__init__": [[50, 52], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ncat", ")", ":", "\n", "        ", "self", ".", "ncat", "=", "ncat", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPdType.pdclass": [[52, 54], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "CategoricalPd", "\n", "", "def", "pdfromlatent", "(", "self", ",", "latent_vector", ",", "init_scale", "=", "1.0", ",", "init_bias", "=", "0.0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPdType.pdfromlatent": [[54, 57], ["baselines.a2c.utils.fc", "distributions.CategoricalPdType.pdfromflat"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPdType.pdfromflat"], ["", "def", "pdfromlatent", "(", "self", ",", "latent_vector", ",", "init_scale", "=", "1.0", ",", "init_bias", "=", "0.0", ")", ":", "\n", "        ", "pdparam", "=", "fc", "(", "latent_vector", ",", "'pi'", ",", "self", ".", "ncat", ",", "init_scale", "=", "init_scale", ",", "init_bias", "=", "init_bias", ")", "\n", "return", "self", ".", "pdfromflat", "(", "pdparam", ")", ",", "pdparam", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPdType.param_shape": [[58, 60], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "ncat", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPdType.sample_shape": [[60, 62], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPdType.sample_dtype": [[62, 64], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPdType.__init__": [[67, 69], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nvec", ")", ":", "\n", "        ", "self", ".", "ncats", "=", "nvec", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPdType.pdclass": [[69, 71], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "MultiCategoricalPd", "\n", "", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPdType.pdfromflat": [[71, 73], ["distributions.MultiCategoricalPd"], "methods", ["None"], ["", "def", "pdfromflat", "(", "self", ",", "flat", ")", ":", "\n", "        ", "return", "MultiCategoricalPd", "(", "self", ".", "ncats", ",", "flat", ")", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPdType.param_shape": [[73, 75], ["sum"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "sum", "(", "self", ".", "ncats", ")", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPdType.sample_shape": [[75, 77], ["len"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "len", "(", "self", ".", "ncats", ")", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPdType.sample_dtype": [[77, 79], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPdType.__init__": [[81, 83], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPdType.pdclass": [[83, 85], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "DiagGaussianPd", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPdType.pdfromlatent": [[86, 91], ["baselines.a2c.utils.fc", "tensorflow.get_variable", "tensorflow.concat", "distributions.DiagGaussianPdType.pdfromflat", "tensorflow.zeros_initializer"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPdType.pdfromflat"], ["", "def", "pdfromlatent", "(", "self", ",", "latent_vector", ",", "init_scale", "=", "1.0", ",", "init_bias", "=", "0.0", ")", ":", "\n", "        ", "mean", "=", "fc", "(", "latent_vector", ",", "'pi'", ",", "self", ".", "size", ",", "init_scale", "=", "init_scale", ",", "init_bias", "=", "init_bias", ")", "\n", "logstd", "=", "tf", ".", "get_variable", "(", "name", "=", "'logstd'", ",", "shape", "=", "[", "1", ",", "self", ".", "size", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "pdparam", "=", "tf", ".", "concat", "(", "[", "mean", ",", "mean", "*", "0.0", "+", "logstd", "]", ",", "axis", "=", "1", ")", "\n", "return", "self", ".", "pdfromflat", "(", "pdparam", ")", ",", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPdType.param_shape": [[92, 94], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "2", "*", "self", ".", "size", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPdType.sample_shape": [[94, 96], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPdType.sample_dtype": [[96, 98], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "float32", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPdType.__init__": [[100, 102], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "", "def", "pdclass", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPdType.pdclass": [[102, 104], ["None"], "methods", ["None"], ["", "def", "pdclass", "(", "self", ")", ":", "\n", "        ", "return", "BernoulliPd", "\n", "", "def", "param_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPdType.param_shape": [[104, 106], ["None"], "methods", ["None"], ["", "def", "param_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "", "def", "sample_shape", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPdType.sample_shape": [[106, 108], ["None"], "methods", ["None"], ["", "def", "sample_shape", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "", "def", "sample_dtype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPdType.sample_dtype": [[108, 110], ["None"], "methods", ["None"], ["", "def", "sample_dtype", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPd.__init__": [[135, 137], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logits", ")", ":", "\n", "        ", "self", ".", "logits", "=", "logits", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPd.flatparam": [[137, 139], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "logits", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPd.mode": [[139, 141], ["tensorflow.argmax"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "argmax", "(", "self", ".", "logits", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPd.neglogp": [[141, 149], ["tensorflow.one_hot", "tensorflow.nn.softmax_cross_entropy_with_logits", "distributions.CategoricalPd.logits.get_shape().as_list", "distributions.CategoricalPd.logits.get_shape"], "methods", ["None"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "# return tf.nn.sparse_softmax_cross_entropy_with_logits(logits=self.logits, labels=x)", "\n", "# Note: we can't use sparse_softmax_cross_entropy_with_logits because", "\n", "#       the implementation does not allow second-order derivatives...", "\n", "        ", "one_hot_actions", "=", "tf", ".", "one_hot", "(", "x", ",", "self", ".", "logits", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", ")", "\n", "return", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "logits", ",", "\n", "labels", "=", "one_hot_actions", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPd.kl": [[149, 158], ["tensorflow.exp", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.log", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "a0", "=", "self", ".", "logits", "-", "tf", ".", "reduce_max", "(", "self", ".", "logits", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "a1", "=", "other", ".", "logits", "-", "tf", ".", "reduce_max", "(", "other", ".", "logits", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "ea1", "=", "tf", ".", "exp", "(", "a1", ")", "\n", "z0", "=", "tf", ".", "reduce_sum", "(", "ea0", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "z1", "=", "tf", ".", "reduce_sum", "(", "ea1", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "tf", ".", "reduce_sum", "(", "p0", "*", "(", "a0", "-", "tf", ".", "log", "(", "z0", ")", "-", "a1", "+", "tf", ".", "log", "(", "z1", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPd.entropy": [[158, 164], ["tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "a0", "=", "self", ".", "logits", "-", "tf", ".", "reduce_max", "(", "self", ".", "logits", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "ea0", "=", "tf", ".", "exp", "(", "a0", ")", "\n", "z0", "=", "tf", ".", "reduce_sum", "(", "ea0", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "p0", "=", "ea0", "/", "z0", "\n", "return", "tf", ".", "reduce_sum", "(", "p0", "*", "(", "tf", ".", "log", "(", "z0", ")", "-", "a0", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPd.sample": [[164, 167], ["tensorflow.random_uniform", "tensorflow.argmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.shape", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "u", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "self", ".", "logits", ")", ")", "\n", "return", "tf", ".", "argmax", "(", "self", ".", "logits", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "u", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.CategoricalPd.fromflat": [[167, 170], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "return", "cls", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPd.__init__": [[172, 175], ["list", "map", "tensorflow.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nvec", ",", "flat", ")", ":", "\n", "        ", "self", ".", "flat", "=", "flat", "\n", "self", ".", "categoricals", "=", "list", "(", "map", "(", "CategoricalPd", ",", "tf", ".", "split", "(", "flat", ",", "nvec", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPd.flatparam": [[175, 177], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "flat", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPd.mode": [[177, 179], ["tensorflow.cast", "tensorflow.stack", "p.mode"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.mode"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "[", "p", ".", "mode", "(", ")", "for", "p", "in", "self", ".", "categoricals", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPd.neglogp": [[179, 181], ["tensorflow.add_n", "p.neglogp", "zip", "tensorflow.unstack"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.neglogp"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "p", ".", "neglogp", "(", "px", ")", "for", "p", ",", "px", "in", "zip", "(", "self", ".", "categoricals", ",", "tf", ".", "unstack", "(", "x", ",", "axis", "=", "-", "1", ")", ")", "]", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPd.kl": [[181, 183], ["tensorflow.add_n", "p.kl", "zip"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.kl"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "p", ".", "kl", "(", "q", ")", "for", "p", ",", "q", "in", "zip", "(", "self", ".", "categoricals", ",", "other", ".", "categoricals", ")", "]", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPd.entropy": [[183, 185], ["tensorflow.add_n", "p.entropy"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.entropy"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "[", "p", ".", "entropy", "(", ")", "for", "p", "in", "self", ".", "categoricals", "]", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPd.sample": [[185, 187], ["tensorflow.cast", "tensorflow.stack", "p.sample"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "[", "p", ".", "sample", "(", ")", "for", "p", "in", "self", ".", "categoricals", "]", ",", "axis", "=", "-", "1", ")", ",", "tf", ".", "int32", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPd.fromflat": [[187, 190], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPd.__init__": [[192, 198], ["tensorflow.split", "tensorflow.exp", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "flat", ")", ":", "\n", "        ", "self", ".", "flat", "=", "flat", "\n", "mean", ",", "logstd", "=", "tf", ".", "split", "(", "axis", "=", "len", "(", "flat", ".", "shape", ")", "-", "1", ",", "num_or_size_splits", "=", "2", ",", "value", "=", "flat", ")", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "logstd", "=", "logstd", "\n", "self", ".", "std", "=", "tf", ".", "exp", "(", "logstd", ")", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPd.flatparam": [[198, 200], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "flat", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPd.mode": [[200, 202], ["None"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPd.neglogp": [[202, 206], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.square", "numpy.log", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.shape"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "0.5", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ",", "axis", "=", "-", "1", ")", "+", "0.5", "*", "np", ".", "log", "(", "2.0", "*", "np", ".", "pi", ")", "*", "tf", ".", "to_float", "(", "tf", ".", "shape", "(", "x", ")", "[", "-", "1", "]", ")", "+", "tf", ".", "reduce_sum", "(", "self", ".", "logstd", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPd.kl": [[206, 209], ["isinstance", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.square", "tensorflow.square"], "methods", ["None"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "assert", "isinstance", "(", "other", ",", "DiagGaussianPd", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "other", ".", "logstd", "-", "self", ".", "logstd", "+", "(", "tf", ".", "square", "(", "self", ".", "std", ")", "+", "tf", ".", "square", "(", "self", ".", "mean", "-", "other", ".", "mean", ")", ")", "/", "(", "2.0", "*", "tf", ".", "square", "(", "other", ".", "std", ")", ")", "-", "0.5", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPd.entropy": [[209, 211], ["tensorflow.reduce_sum", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.log"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "self", ".", "logstd", "+", ".5", "*", "np", ".", "log", "(", "2.0", "*", "np", ".", "pi", "*", "np", ".", "e", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPd.sample": [[211, 213], ["tensorflow.random_normal", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.shape"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "+", "self", ".", "std", "*", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "self", ".", "mean", ")", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.DiagGaussianPd.fromflat": [[213, 216], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "return", "cls", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.__init__": [[218, 221], ["tensorflow.sigmoid"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logits", ")", ":", "\n", "        ", "self", ".", "logits", "=", "logits", "\n", "self", ".", "ps", "=", "tf", ".", "sigmoid", "(", "logits", ")", "\n", "", "def", "flatparam", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.flatparam": [[221, 223], ["None"], "methods", ["None"], ["", "def", "flatparam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "logits", "\n", "", "def", "mode", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.mode": [[223, 225], ["tensorflow.round"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "round", "(", "self", ".", "ps", ")", "\n", "", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.neglogp": [[225, 227], ["tensorflow.reduce_sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.to_float"], "methods", ["None"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "tf", ".", "to_float", "(", "x", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "kl", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.kl": [[227, 229], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "other", ".", "logits", ",", "labels", "=", "self", ".", "ps", ")", ",", "axis", "=", "-", "1", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "self", ".", "ps", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "entropy", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.entropy": [[229, 231], ["tensorflow.reduce_sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "self", ".", "ps", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "def", "sample", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.sample": [[231, 234], ["tensorflow.random_uniform", "tensorflow.to_float", "tensorflow.shape", "tensorflow.python.ops.math_ops.less"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.shape"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "u", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "self", ".", "ps", ")", ")", "\n", "return", "tf", ".", "to_float", "(", "math_ops", ".", "less", "(", "u", ",", "self", ".", "ps", ")", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.fromflat": [[234, 237], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fromflat", "(", "cls", ",", "flat", ")", ":", "\n", "        ", "return", "cls", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.make_pdtype": [[238, 251], ["isinstance", "distributions.DiagGaussianPdType", "isinstance", "len", "distributions.CategoricalPdType", "isinstance", "distributions.MultiCategoricalPdType", "isinstance", "distributions.BernoulliPdType"], "function", ["None"], ["", "", "def", "make_pdtype", "(", "ac_space", ")", ":", "\n", "    ", "from", "gym", "import", "spaces", "\n", "if", "isinstance", "(", "ac_space", ",", "spaces", ".", "Box", ")", ":", "\n", "        ", "assert", "len", "(", "ac_space", ".", "shape", ")", "==", "1", "\n", "return", "DiagGaussianPdType", "(", "ac_space", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "Discrete", ")", ":", "\n", "        ", "return", "CategoricalPdType", "(", "ac_space", ".", "n", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "MultiDiscrete", ")", ":", "\n", "        ", "return", "MultiCategoricalPdType", "(", "ac_space", ".", "nvec", ")", "\n", "", "elif", "isinstance", "(", "ac_space", ",", "spaces", ".", "MultiBinary", ")", ":", "\n", "        ", "return", "BernoulliPdType", "(", "ac_space", ".", "n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.shape_el": [[252, 258], ["v.get_shape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.shape"], ["", "", "def", "shape_el", "(", "v", ",", "i", ")", ":", "\n", "    ", "maybe", "=", "v", ".", "get_shape", "(", ")", "[", "i", "]", "\n", "if", "maybe", "is", "not", "None", ":", "\n", "        ", "return", "maybe", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "shape", "(", "v", ")", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.test_probtypes": [[259, 279], ["numpy.random.seed", "numpy.array", "distributions.DiagGaussianPdType", "distributions.validate_probtype", "numpy.array", "distributions.CategoricalPdType", "distributions.validate_probtype", "numpy.array", "distributions.MultiCategoricalPdType", "distributions.validate_probtype", "numpy.array", "distributions.BernoulliPdType", "distributions.validate_probtype"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.validate_probtype", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.validate_probtype", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.validate_probtype", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.validate_probtype"], ["", "", "@", "U", ".", "in_session", "\n", "def", "test_probtypes", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "pdparam_diag_gauss", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".4", ",", "-", ".5", ",", ".1", ",", "-", ".5", ",", ".1", ",", "0.8", "]", ")", "\n", "diag_gauss", "=", "DiagGaussianPdType", "(", "pdparam_diag_gauss", ".", "size", "//", "2", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "diag_gauss", ",", "pdparam_diag_gauss", ")", "\n", "\n", "pdparam_categorical", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".5", "]", ")", "\n", "categorical", "=", "CategoricalPdType", "(", "pdparam_categorical", ".", "size", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "categorical", ",", "pdparam_categorical", ")", "\n", "\n", "nvec", "=", "[", "1", ",", "2", ",", "3", "]", "\n", "pdparam_multicategorical", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".5", ",", ".1", ",", "1", ",", "-", ".1", "]", ")", "\n", "multicategorical", "=", "MultiCategoricalPdType", "(", "nvec", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "multicategorical", ",", "pdparam_multicategorical", ")", "\n", "\n", "pdparam_bernoulli", "=", "np", ".", "array", "(", "[", "-", ".2", ",", ".3", ",", ".5", "]", ")", "\n", "bernoulli", "=", "BernoulliPdType", "(", "pdparam_bernoulli", ".", "size", ")", "#pylint: disable=E1101", "\n", "validate_probtype", "(", "bernoulli", ",", "pdparam_bernoulli", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.validate_probtype": [[281, 309], ["numpy.repeat", "probtype.param_placeholder", "probtype.sample_placeholder", "probtype.pdfromflat", "baselines.function", "baselines.function", "tensorflow.get_default_session().run", "U.function.", "U.function.mean", "probtype.param_placeholder", "probtype.pdfromflat", "numpy.repeat", "baselines.function", "U.function.mean", "U.function.", "print", "probtype.pdfromflat.logp", "probtype.pdfromflat.entropy", "probtype.pdfromflat.sample", "calcloglik.mean", "calcloglik.std", "numpy.sqrt", "numpy.abs", "probtype.pdfromflat.kl", "calcloglik.mean", "calcloglik.std", "numpy.sqrt", "numpy.abs", "tensorflow.get_default_session", "U.function.", "numpy.random.randn", "U.function."], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.PdType.param_placeholder", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.PdType.sample_placeholder", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPdType.pdfromflat", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.function", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.function", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.PdType.param_placeholder", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.MultiCategoricalPdType.pdfromflat", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.function", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.Pd.logp", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.entropy", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.sample", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.std", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.distributions.BernoulliPd.kl", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.std"], ["", "def", "validate_probtype", "(", "probtype", ",", "pdparam", ")", ":", "\n", "    ", "N", "=", "100000", "\n", "# Check to see if mean negative log likelihood == differential entropy", "\n", "Mval", "=", "np", ".", "repeat", "(", "pdparam", "[", "None", ",", ":", "]", ",", "N", ",", "axis", "=", "0", ")", "\n", "M", "=", "probtype", ".", "param_placeholder", "(", "[", "N", "]", ")", "\n", "X", "=", "probtype", ".", "sample_placeholder", "(", "[", "N", "]", ")", "\n", "pd", "=", "probtype", ".", "pdfromflat", "(", "M", ")", "\n", "calcloglik", "=", "U", ".", "function", "(", "[", "X", ",", "M", "]", ",", "pd", ".", "logp", "(", "X", ")", ")", "\n", "calcent", "=", "U", ".", "function", "(", "[", "M", "]", ",", "pd", ".", "entropy", "(", ")", ")", "\n", "Xval", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "pd", ".", "sample", "(", ")", ",", "feed_dict", "=", "{", "M", ":", "Mval", "}", ")", "\n", "logliks", "=", "calcloglik", "(", "Xval", ",", "Mval", ")", "\n", "entval_ll", "=", "-", "logliks", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "entval_ll_stderr", "=", "logliks", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "N", ")", "#pylint: disable=E1101", "\n", "entval", "=", "calcent", "(", "Mval", ")", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "assert", "np", ".", "abs", "(", "entval", "-", "entval_ll", ")", "<", "3", "*", "entval_ll_stderr", "# within 3 sigmas", "\n", "\n", "# Check to see if kldiv[p,q] = - ent[p] - E_p[log q]", "\n", "M2", "=", "probtype", ".", "param_placeholder", "(", "[", "N", "]", ")", "\n", "pd2", "=", "probtype", ".", "pdfromflat", "(", "M2", ")", "\n", "q", "=", "pdparam", "+", "np", ".", "random", ".", "randn", "(", "pdparam", ".", "size", ")", "*", "0.1", "\n", "Mval2", "=", "np", ".", "repeat", "(", "q", "[", "None", ",", ":", "]", ",", "N", ",", "axis", "=", "0", ")", "\n", "calckl", "=", "U", ".", "function", "(", "[", "M", ",", "M2", "]", ",", "pd", ".", "kl", "(", "pd2", ")", ")", "\n", "klval", "=", "calckl", "(", "Mval", ",", "Mval2", ")", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "logliks", "=", "calcloglik", "(", "Xval", ",", "Mval2", ")", "\n", "klval_ll", "=", "-", "entval", "-", "logliks", ".", "mean", "(", ")", "#pylint: disable=E1101", "\n", "klval_ll_stderr", "=", "logliks", ".", "std", "(", ")", "/", "np", ".", "sqrt", "(", "N", ")", "#pylint: disable=E1101", "\n", "assert", "np", ".", "abs", "(", "klval", "-", "klval_ll", ")", "<", "3", "*", "klval_ll_stderr", "# within 3 sigmas", "\n", "print", "(", "'ok on'", ",", "probtype", ",", "pdparam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util._Function.__init__": [[169, 178], ["tensorflow.group", "list", "hasattr", "type", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "outputs", ",", "updates", ",", "givens", ")", ":", "\n", "        ", "for", "inpt", "in", "inputs", ":", "\n", "            ", "if", "not", "hasattr", "(", "inpt", ",", "'make_feed_dict'", ")", "and", "not", "(", "type", "(", "inpt", ")", "is", "tf", ".", "Tensor", "and", "len", "(", "inpt", ".", "op", ".", "inputs", ")", "==", "0", ")", ":", "\n", "                ", "assert", "False", ",", "\"inputs should all be placeholders, constants, or have a make_feed_dict method\"", "\n", "", "", "self", ".", "inputs", "=", "inputs", "\n", "updates", "=", "updates", "or", "[", "]", "\n", "self", ".", "update_group", "=", "tf", ".", "group", "(", "*", "updates", ")", "\n", "self", ".", "outputs_update", "=", "list", "(", "outputs", ")", "+", "[", "self", ".", "update_group", "]", "\n", "self", ".", "givens", "=", "{", "}", "if", "givens", "is", "None", "else", "givens", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util._Function._feed_input": [[179, 184], ["hasattr", "feed_dict.update", "inpt.make_feed_dict"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "_feed_input", "(", "self", ",", "feed_dict", ",", "inpt", ",", "value", ")", ":", "\n", "        ", "if", "hasattr", "(", "inpt", ",", "'make_feed_dict'", ")", ":", "\n", "            ", "feed_dict", ".", "update", "(", "inpt", ".", "make_feed_dict", "(", "value", ")", ")", "\n", "", "else", ":", "\n", "            ", "feed_dict", "[", "inpt", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util._Function.__call__": [[185, 196], ["zip", "len", "len", "tf_util._Function._feed_input", "feed_dict.get", "tensorflow.get_default_session().run", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util._Function._feed_input", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run"], ["", "", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "assert", "len", "(", "args", ")", "<=", "len", "(", "self", ".", "inputs", ")", ",", "\"Too many arguments provided\"", "\n", "feed_dict", "=", "{", "}", "\n", "# Update the args", "\n", "for", "inpt", ",", "value", "in", "zip", "(", "self", ".", "inputs", ",", "args", ")", ":", "\n", "            ", "self", ".", "_feed_input", "(", "feed_dict", ",", "inpt", ",", "value", ")", "\n", "# Update feed dict with givens.", "\n", "", "for", "inpt", "in", "self", ".", "givens", ":", "\n", "            ", "feed_dict", "[", "inpt", "]", "=", "feed_dict", ".", "get", "(", "inpt", ",", "self", ".", "givens", "[", "inpt", "]", ")", "\n", "", "results", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "self", ".", "outputs_update", ",", "feed_dict", "=", "feed_dict", ")", "[", ":", "-", "1", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.SetFromFlat.__init__": [[223, 236], ["list", "numpy.sum", "tensorflow.placeholder", "zip", "tensorflow.group", "map", "tf_util.intprod", "assigns.append", "tf_util.intprod", "tensorflow.assign", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.intprod", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.intprod"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "        ", "assigns", "=", "[", "]", "\n", "shapes", "=", "list", "(", "map", "(", "var_shape", ",", "var_list", ")", ")", "\n", "total_size", "=", "np", ".", "sum", "(", "[", "intprod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", ")", "\n", "\n", "self", ".", "theta", "=", "theta", "=", "tf", ".", "placeholder", "(", "dtype", ",", "[", "total_size", "]", ")", "\n", "start", "=", "0", "\n", "assigns", "=", "[", "]", "\n", "for", "(", "shape", ",", "v", ")", "in", "zip", "(", "shapes", ",", "var_list", ")", ":", "\n", "            ", "size", "=", "intprod", "(", "shape", ")", "\n", "assigns", ".", "append", "(", "tf", ".", "assign", "(", "v", ",", "tf", ".", "reshape", "(", "theta", "[", "start", ":", "start", "+", "size", "]", ",", "shape", ")", ")", ")", "\n", "start", "+=", "size", "\n", "", "self", ".", "op", "=", "tf", ".", "group", "(", "*", "assigns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.SetFromFlat.__call__": [[237, 239], ["tensorflow.get_default_session().run", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run"], ["", "def", "__call__", "(", "self", ",", "theta", ")", ":", "\n", "        ", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "self", ".", "op", ",", "feed_dict", "=", "{", "self", ".", "theta", ":", "theta", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.GetFlat.__init__": [[241, 243], ["tensorflow.concat", "tensorflow.reshape", "tf_util.numel"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.numel"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ")", ":", "\n", "        ", "self", ".", "op", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "tf", ".", "reshape", "(", "v", ",", "[", "numel", "(", "v", ")", "]", ")", "for", "v", "in", "var_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.GetFlat.__call__": [[244, 246], ["tensorflow.get_default_session().run", "tensorflow.get_default_session"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "self", ".", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.switch": [[9, 25], ["copy.copy", "tensorflow.cond", "tf.cond.set_shape", "then_expression.get_shape", "tensorflow.cast"], "function", ["None"], ["def", "switch", "(", "condition", ",", "then_expression", ",", "else_expression", ")", ":", "\n", "    ", "\"\"\"Switches between two operations depending on a scalar value (int or bool).\n    Note that both `then_expression` and `else_expression`\n    should be symbolic tensors of the *same shape*.\n\n    # Arguments\n        condition: scalar tensor.\n        then_expression: TensorFlow operation.\n        else_expression: TensorFlow operation.\n    \"\"\"", "\n", "x_shape", "=", "copy", ".", "copy", "(", "then_expression", ".", "get_shape", "(", ")", ")", "\n", "x", "=", "tf", ".", "cond", "(", "tf", ".", "cast", "(", "condition", ",", "'bool'", ")", ",", "\n", "lambda", ":", "then_expression", ",", "\n", "lambda", ":", "else_expression", ")", "\n", "x", ".", "set_shape", "(", "x_shape", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.lrelu": [[30, 34], ["abs"], "function", ["None"], ["", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ")", ":", "\n", "    ", "f1", "=", "0.5", "*", "(", "1", "+", "leak", ")", "\n", "f2", "=", "0.5", "*", "(", "1", "-", "leak", ")", "\n", "return", "f1", "*", "x", "+", "f2", "*", "abs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.huber_loss": [[39, 45], ["tensorflow.where", "tensorflow.abs", "tensorflow.square", "tensorflow.abs"], "function", ["None"], ["", "def", "huber_loss", "(", "x", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Reference: https://en.wikipedia.org/wiki/Huber_loss\"\"\"", "\n", "return", "tf", ".", "where", "(", "\n", "tf", ".", "abs", "(", "x", ")", "<", "delta", ",", "\n", "tf", ".", "square", "(", "x", ")", "*", "0.5", ",", "\n", "delta", "*", "(", "tf", ".", "abs", "(", "x", ")", "-", "0.5", "*", "delta", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.make_session": [[51, 63], ["tensorflow.ConfigProto", "int", "tensorflow.InteractiveSession", "tensorflow.Session", "os.getenv", "multiprocessing.cpu_count"], "function", ["None"], ["", "def", "make_session", "(", "num_cpu", "=", "None", ",", "make_default", "=", "False", ",", "graph", "=", "None", ")", ":", "\n", "    ", "\"\"\"Returns a session that will use <num_cpu> CPU's only\"\"\"", "\n", "if", "num_cpu", "is", "None", ":", "\n", "        ", "num_cpu", "=", "int", "(", "os", ".", "getenv", "(", "'RCALL_NUM_CPU'", ",", "multiprocessing", ".", "cpu_count", "(", ")", ")", ")", "\n", "", "tf_config", "=", "tf", ".", "ConfigProto", "(", "\n", "inter_op_parallelism_threads", "=", "num_cpu", ",", "\n", "intra_op_parallelism_threads", "=", "num_cpu", ")", "\n", "tf_config", ".", "gpu_options", ".", "allocator_type", "=", "'BFC'", "\n", "if", "make_default", ":", "\n", "        ", "return", "tf", ".", "InteractiveSession", "(", "config", "=", "tf_config", ",", "graph", "=", "graph", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "Session", "(", "config", "=", "tf_config", ",", "graph", "=", "graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.single_threaded_session": [[64, 67], ["tf_util.make_session"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.make_session"], ["", "", "def", "single_threaded_session", "(", ")", ":", "\n", "    ", "\"\"\"Returns a session which will only use a single CPU\"\"\"", "\n", "return", "make_session", "(", "num_cpu", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.in_session": [[68, 74], ["functools.wraps", "tensorflow.Session", "f"], "function", ["None"], ["", "def", "in_session", "(", "f", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "f", ")", "\n", "def", "newfunc", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", ":", "\n", "            ", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "newfunc", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.initialize": [[77, 82], ["tensorflow.get_default_session().run", "ALREADY_INITIALIZED.update", "set", "tensorflow.variables_initializer", "tensorflow.global_variables", "tensorflow.get_default_session"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.runners.AbstractEnvRunner.run", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update"], ["def", "initialize", "(", ")", ":", "\n", "    ", "\"\"\"Initialize all the uninitialized variables in the global scope.\"\"\"", "\n", "new_variables", "=", "set", "(", "tf", ".", "global_variables", "(", ")", ")", "-", "ALREADY_INITIALIZED", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "variables_initializer", "(", "new_variables", ")", ")", "\n", "ALREADY_INITIALIZED", ".", "update", "(", "new_variables", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.normc_initializer": [[87, 93], ["numpy.random.randn().astype", "tensorflow.constant", "numpy.sqrt", "numpy.random.randn", "numpy.square().sum", "numpy.square"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum"], ["", "def", "normc_initializer", "(", "std", "=", "1.0", ",", "axis", "=", "0", ")", ":", "\n", "    ", "def", "_initializer", "(", "shape", ",", "dtype", "=", "None", ",", "partition_info", "=", "None", ")", ":", "# pylint: disable=W0613", "\n", "        ", "out", "=", "np", ".", "random", ".", "randn", "(", "*", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "out", "*=", "std", "/", "np", ".", "sqrt", "(", "np", ".", "square", "(", "out", ")", ".", "sum", "(", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "tf", ".", "constant", "(", "out", ")", "\n", "", "return", "_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.conv2d": [[94, 122], ["tensorflow.variable_scope", "tf_util.intprod", "numpy.sqrt", "tensorflow.get_variable", "tensorflow.get_variable", "int", "tf_util.intprod", "tensorflow.random_uniform_initializer", "tensorflow.summary.image", "tensorflow.nn.conv2d", "tensorflow.zeros_initializer", "tensorflow.transpose", "x.get_shape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.intprod", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.intprod", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.conv2d"], ["", "def", "conv2d", "(", "x", ",", "num_filters", ",", "name", ",", "filter_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "\"SAME\"", ",", "dtype", "=", "tf", ".", "float32", ",", "collections", "=", "None", ",", "\n", "summary_tag", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "stride_shape", "=", "[", "1", ",", "stride", "[", "0", "]", ",", "stride", "[", "1", "]", ",", "1", "]", "\n", "filter_shape", "=", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "int", "(", "x", ".", "get_shape", "(", ")", "[", "3", "]", ")", ",", "num_filters", "]", "\n", "\n", "# there are \"num input feature maps * filter height * filter width\"", "\n", "# inputs to each hidden unit", "\n", "fan_in", "=", "intprod", "(", "filter_shape", "[", ":", "3", "]", ")", "\n", "# each unit in the lower layer receives a gradient from:", "\n", "# \"num output feature maps * filter height * filter width\" /", "\n", "#   pooling size", "\n", "fan_out", "=", "intprod", "(", "filter_shape", "[", ":", "2", "]", ")", "*", "num_filters", "\n", "# initialize weights with random weights", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "filter_shape", ",", "dtype", ",", "tf", ".", "random_uniform_initializer", "(", "-", "w_bound", ",", "w_bound", ")", ",", "\n", "collections", "=", "collections", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "1", ",", "1", ",", "1", ",", "num_filters", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "collections", "=", "collections", ")", "\n", "\n", "if", "summary_tag", "is", "not", "None", ":", "\n", "            ", "tf", ".", "summary", ".", "image", "(", "summary_tag", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "w", ",", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "-", "1", ",", "1", "]", ")", ",", "\n", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", ",", "\n", "max_images", "=", "10", ")", "\n", "\n", "", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "stride_shape", ",", "pad", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.function": [[127, 166], ["isinstance", "tf_util._Function", "isinstance", "tf_util._Function", "tf_util._Function", "outputs.values", "type", "zip", "_Function.", "outputs.keys", "_Function."], "function", ["None"], ["", "", "def", "function", "(", "inputs", ",", "outputs", ",", "updates", "=", "None", ",", "givens", "=", "None", ")", ":", "\n", "    ", "\"\"\"Just like Theano function. Take a bunch of tensorflow placeholders and expressions\n    computed based on those placeholders and produces f(inputs) -> outputs. Function f takes\n    values to be fed to the input's placeholders and produces the values of the expressions\n    in outputs.\n\n    Input values can be passed in the same order as inputs or can be provided as kwargs based\n    on placeholder name (passed to constructor or accessible via placeholder.op.name).\n\n    Example:\n        x = tf.placeholder(tf.int32, (), name=\"x\")\n        y = tf.placeholder(tf.int32, (), name=\"y\")\n        z = 3 * x + 2 * y\n        lin = function([x, y], z, givens={y: 0})\n\n        with single_threaded_session():\n            initialize()\n\n            assert lin(2) == 6\n            assert lin(x=3) == 9\n            assert lin(2, 2) == 10\n            assert lin(x=2, y=3) == 12\n\n    Parameters\n    ----------\n    inputs: [tf.placeholder, tf.constant, or object with make_feed_dict method]\n        list of input arguments\n    outputs: [tf.Variable] or tf.Variable\n        list of outputs or a single output to be returned from function. Returned\n        value will also have the same shape.\n    \"\"\"", "\n", "if", "isinstance", "(", "outputs", ",", "list", ")", ":", "\n", "        ", "return", "_Function", "(", "inputs", ",", "outputs", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "", "elif", "isinstance", "(", "outputs", ",", "(", "dict", ",", "collections", ".", "OrderedDict", ")", ")", ":", "\n", "        ", "f", "=", "_Function", "(", "inputs", ",", "outputs", ".", "values", "(", ")", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "type", "(", "outputs", ")", "(", "zip", "(", "outputs", ".", "keys", "(", ")", ",", "f", "(", "*", "args", ",", "**", "kwargs", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "_Function", "(", "inputs", ",", "[", "outputs", "]", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "f", "(", "*", "args", ",", "**", "kwargs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.var_shape": [[201, 206], ["x.get_shape().as_list", "all", "x.get_shape", "isinstance"], "function", ["None"], ["", "", "def", "var_shape", "(", "x", ")", ":", "\n", "    ", "out", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "assert", "all", "(", "isinstance", "(", "a", ",", "int", ")", "for", "a", "in", "out", ")", ",", "\"shape function assumes that shape is fully known\"", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.numel": [[207, 209], ["tf_util.intprod", "tf_util.var_shape"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.intprod", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.var_shape"], ["", "def", "numel", "(", "x", ")", ":", "\n", "    ", "return", "intprod", "(", "var_shape", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.intprod": [[210, 212], ["int", "numpy.prod"], "function", ["None"], ["", "def", "intprod", "(", "x", ")", ":", "\n", "    ", "return", "int", "(", "np", ".", "prod", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.flatgrad": [[213, 220], ["tensorflow.gradients", "tensorflow.concat", "tensorflow.clip_by_norm", "tensorflow.reshape", "zip", "tensorflow.zeros_like", "tf_util.numel"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.numel"], ["", "def", "flatgrad", "(", "loss", ",", "var_list", ",", "clip_norm", "=", "None", ")", ":", "\n", "    ", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "var_list", ")", "\n", "if", "clip_norm", "is", "not", "None", ":", "\n", "        ", "grads", "=", "[", "tf", ".", "clip_by_norm", "(", "grad", ",", "clip_norm", "=", "clip_norm", ")", "for", "grad", "in", "grads", "]", "\n", "", "return", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "\n", "tf", ".", "reshape", "(", "grad", "if", "grad", "is", "not", "None", "else", "tf", ".", "zeros_like", "(", "v", ")", ",", "[", "numel", "(", "v", ")", "]", ")", "\n", "for", "(", "v", ",", "grad", ")", "in", "zip", "(", "var_list", ",", "grads", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.get_placeholder": [[249, 258], ["tensorflow.placeholder"], "function", ["None"], ["def", "get_placeholder", "(", "name", ",", "dtype", ",", "shape", ")", ":", "\n", "    ", "if", "name", "in", "_PLACEHOLDER_CACHE", ":", "\n", "        ", "out", ",", "dtype1", ",", "shape1", "=", "_PLACEHOLDER_CACHE", "[", "name", "]", "\n", "assert", "dtype1", "==", "dtype", "and", "shape1", "==", "shape", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "out", "=", "tf", ".", "placeholder", "(", "dtype", "=", "dtype", ",", "shape", "=", "shape", ",", "name", "=", "name", ")", "\n", "_PLACEHOLDER_CACHE", "[", "name", "]", "=", "(", "out", ",", "dtype", ",", "shape", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.get_placeholder_cached": [[259, 261], ["None"], "function", ["None"], ["", "", "def", "get_placeholder_cached", "(", "name", ")", ":", "\n", "    ", "return", "_PLACEHOLDER_CACHE", "[", "name", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.flattenallbut0": [[262, 264], ["tensorflow.reshape", "tf_util.intprod", "x.get_shape().as_list", "x.get_shape"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.intprod"], ["", "def", "flattenallbut0", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "intprod", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.display_var_info": [[270, 282], ["logger.info", "numpy.prod", "logger.info", "v.shape.as_list", "str", "len"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.info", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.info"], ["", "def", "display_var_info", "(", "vars", ")", ":", "\n", "    ", "from", "baselines", "import", "logger", "\n", "count_params", "=", "0", "\n", "for", "v", "in", "vars", ":", "\n", "        ", "name", "=", "v", ".", "name", "\n", "if", "\"/Adam\"", "in", "name", "or", "\"beta1_power\"", "in", "name", "or", "\"beta2_power\"", "in", "name", ":", "continue", "\n", "v_params", "=", "np", ".", "prod", "(", "v", ".", "shape", ".", "as_list", "(", ")", ")", "\n", "count_params", "+=", "v_params", "\n", "if", "\"/b:\"", "in", "name", "or", "\"/biases\"", "in", "name", ":", "continue", "# Wx+b, bias is not interesting to look at => count params, but not print", "\n", "logger", ".", "info", "(", "\"   %s%s %i params %s\"", "%", "(", "name", ",", "\" \"", "*", "(", "55", "-", "len", "(", "name", ")", ")", ",", "v_params", ",", "str", "(", "v", ".", "shape", ")", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Total model parameters: %0.2f million\"", "%", "(", "count_params", "*", "1e-6", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.cg.cg": [[2, 35], ["b.copy", "b.copy", "numpy.zeros_like", "b.copy.dot", "range", "print", "f_Ax", "b.copy.dot", "callback", "print", "callback", "print", "b.copy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["def", "cg", "(", "f_Ax", ",", "b", ",", "cg_iters", "=", "10", ",", "callback", "=", "None", ",", "verbose", "=", "False", ",", "residual_tol", "=", "1e-10", ")", ":", "\n", "    ", "\"\"\"\n    Demmel p 312\n    \"\"\"", "\n", "p", "=", "b", ".", "copy", "(", ")", "\n", "r", "=", "b", ".", "copy", "(", ")", "\n", "x", "=", "np", ".", "zeros_like", "(", "b", ")", "\n", "rdotr", "=", "r", ".", "dot", "(", "r", ")", "\n", "\n", "fmtstr", "=", "\"%10i %10.3g %10.3g\"", "\n", "titlestr", "=", "\"%10s %10s %10s\"", "\n", "if", "verbose", ":", "print", "(", "titlestr", "%", "(", "\"iter\"", ",", "\"residual norm\"", ",", "\"soln norm\"", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "cg_iters", ")", ":", "\n", "        ", "if", "callback", "is", "not", "None", ":", "\n", "            ", "callback", "(", "x", ")", "\n", "", "if", "verbose", ":", "print", "(", "fmtstr", "%", "(", "i", ",", "rdotr", ",", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "\n", "z", "=", "f_Ax", "(", "p", ")", "\n", "v", "=", "rdotr", "/", "p", ".", "dot", "(", "z", ")", "\n", "x", "+=", "v", "*", "p", "\n", "r", "-=", "v", "*", "z", "\n", "newrdotr", "=", "r", ".", "dot", "(", "r", ")", "\n", "mu", "=", "newrdotr", "/", "rdotr", "\n", "p", "=", "r", "+", "mu", "*", "p", "\n", "\n", "rdotr", "=", "newrdotr", "\n", "if", "rdotr", "<", "residual_tol", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "callback", "is", "not", "None", ":", "\n", "        ", "callback", "(", "x", ")", "\n", "", "if", "verbose", ":", "print", "(", "fmtstr", "%", "(", "i", "+", "1", ",", "rdotr", ",", "np", ".", "linalg", ".", "norm", "(", "x", ")", ")", ")", "# pylint: disable=W0631", "\n", "return", "x", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.NoopResetEnv.__init__": [[9, 18], ["gym.Wrapper.__init__", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "noop_max", "=", "30", ")", ":", "\n", "        ", "\"\"\"Sample initial states by taking random number of no-ops on reset.\n        No-op is assumed to be action 0.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "noop_max", "=", "noop_max", "\n", "self", ".", "override_num_noops", "=", "None", "\n", "self", ".", "noop_action", "=", "0", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "0", "]", "==", "'NOOP'", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.NoopResetEnv.reset": [[19, 33], ["atari_wrappers.NoopResetEnv.env.reset", "range", "atari_wrappers.NoopResetEnv.unwrapped.np_random.randint", "atari_wrappers.NoopResetEnv.env.step", "atari_wrappers.NoopResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Do no-op action for a number of steps in [1, noop_max].\"\"\"", "\n", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "if", "self", ".", "override_num_noops", "is", "not", "None", ":", "\n", "            ", "noops", "=", "self", ".", "override_num_noops", "\n", "", "else", ":", "\n", "            ", "noops", "=", "self", ".", "unwrapped", ".", "np_random", ".", "randint", "(", "1", ",", "self", ".", "noop_max", "+", "1", ")", "#pylint: disable=E1101", "\n", "", "assert", "noops", ">", "0", "\n", "obs", "=", "None", "\n", "for", "_", "in", "range", "(", "noops", ")", ":", "\n", "            ", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "self", ".", "noop_action", ")", "\n", "if", "done", ":", "\n", "                ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.NoopResetEnv.step": [[34, 36], ["atari_wrappers.NoopResetEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.FireResetEnv.__init__": [[38, 43], ["gym.Wrapper.__init__", "len", "env.unwrapped.get_action_meanings", "env.unwrapped.get_action_meanings"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Take action on reset for environments that are fixed until firing.\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "assert", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", "[", "1", "]", "==", "'FIRE'", "\n", "assert", "len", "(", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ")", ">=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.FireResetEnv.reset": [[44, 53], ["atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.step", "atari_wrappers.FireResetEnv.env.reset", "atari_wrappers.FireResetEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "1", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "obs", ",", "_", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "2", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.FireResetEnv.step": [[54, 56], ["atari_wrappers.FireResetEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.EpisodicLifeEnv.__init__": [[58, 65], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Make end-of-life == end-of-episode, but only reset on true game over.\n        Done by DeepMind for the DQN and co. since it helps value estimation.\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "lives", "=", "0", "\n", "self", ".", "was_real_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.EpisodicLifeEnv.step": [[66, 79], ["atari_wrappers.EpisodicLifeEnv.env.step", "atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "was_real_done", "=", "done", "\n", "# check current lives, make loss of life terminal,", "\n", "# then update lives to handle bonus lives", "\n", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "if", "lives", "<", "self", ".", "lives", "and", "lives", ">", "0", ":", "\n", "# for Qbert sometimes we stay in lives == 0 condtion for a few frames", "\n", "# so its important to keep lives > 0, so that we only reset once", "\n", "# the environment advertises done.", "\n", "            ", "done", "=", "True", "\n", "", "self", ".", "lives", "=", "lives", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.EpisodicLifeEnv.reset": [[80, 92], ["atari_wrappers.EpisodicLifeEnv.env.unwrapped.ale.lives", "atari_wrappers.EpisodicLifeEnv.env.reset", "atari_wrappers.EpisodicLifeEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Reset only when lives are exhausted.\n        This way all states are still reachable even though lives are episodic,\n        and the learner need not know about any of this behind-the-scenes.\n        \"\"\"", "\n", "if", "self", ".", "was_real_done", ":", "\n", "            ", "obs", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "# no-op step to advance from terminal/lost life state", "\n", "            ", "obs", ",", "_", ",", "_", ",", "_", "=", "self", ".", "env", ".", "step", "(", "0", ")", "\n", "", "self", ".", "lives", "=", "self", ".", "env", ".", "unwrapped", ".", "ale", ".", "lives", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.MaxAndSkipEnv.__init__": [[94, 100], ["gym.Wrapper.__init__", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "skip", "=", "4", ")", ":", "\n", "        ", "\"\"\"Return only every `skip`-th frame\"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "# most recent raw observations (for max pooling across time steps)", "\n", "self", ".", "_obs_buffer", "=", "np", ".", "zeros", "(", "(", "2", ",", ")", "+", "env", ".", "observation_space", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "self", ".", "_skip", "=", "skip", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.MaxAndSkipEnv.step": [[101, 117], ["range", "atari_wrappers.MaxAndSkipEnv._obs_buffer.max", "atari_wrappers.MaxAndSkipEnv.env.step"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"Repeat action, sum reward, and max over last observations.\"\"\"", "\n", "total_reward", "=", "0.0", "\n", "done", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "_skip", ")", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "i", "==", "self", ".", "_skip", "-", "2", ":", "self", ".", "_obs_buffer", "[", "0", "]", "=", "obs", "\n", "if", "i", "==", "self", ".", "_skip", "-", "1", ":", "self", ".", "_obs_buffer", "[", "1", "]", "=", "obs", "\n", "total_reward", "+=", "reward", "\n", "if", "done", ":", "\n", "                ", "break", "\n", "# Note that the observation on the done=True frame", "\n", "# doesn't matter", "\n", "", "", "max_frame", "=", "self", ".", "_obs_buffer", ".", "max", "(", "axis", "=", "0", ")", "\n", "\n", "return", "max_frame", ",", "total_reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.MaxAndSkipEnv.reset": [[118, 120], ["atari_wrappers.MaxAndSkipEnv.env.reset"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.ClipRewardEnv.__init__": [[122, 124], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "RewardWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.ClipRewardEnv.reward": [[125, 128], ["numpy.sign"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "\"\"\"Bin reward to {+1, 0, -1} by its sign.\"\"\"", "\n", "return", "np", ".", "sign", "(", "reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.WarpFrame.__init__": [[130, 137], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"Warp frames to 84x84 as done in the Nature paper and later work.\"\"\"", "\n", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "width", "=", "84", "\n", "self", ".", "height", "=", "84", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "height", ",", "self", ".", "width", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.WarpFrame.observation": [[138, 142], ["cv2.cvtColor", "cv2.resize"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "frame", ")", ":", "\n", "        ", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "frame", "=", "cv2", ".", "resize", "(", "frame", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "return", "frame", "[", ":", ",", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.FrameStack.__init__": [[144, 158], ["gym.Wrapper.__init__", "collections.deque", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "k", ")", ":", "\n", "        ", "\"\"\"Stack k last frames.\n\n        Returns lazy array, which is much more memory efficient.\n\n        See Also\n        --------\n        baselines.common.atari_wrappers.LazyFrames\n        \"\"\"", "\n", "gym", ".", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "frames", "=", "deque", "(", "[", "]", ",", "maxlen", "=", "k", ")", "\n", "shp", "=", "env", ".", "observation_space", ".", "shape", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "shp", "[", "0", "]", ",", "shp", "[", "1", "]", ",", "shp", "[", "2", "]", "*", "k", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.FrameStack.reset": [[159, 164], ["atari_wrappers.FrameStack.env.reset", "range", "atari_wrappers.FrameStack._get_ob", "atari_wrappers.FrameStack.frames.append"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.FrameStack._get_ob"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "ob", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "            ", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "", "return", "self", ".", "_get_ob", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.FrameStack.step": [[165, 169], ["atari_wrappers.FrameStack.env.step", "atari_wrappers.FrameStack.frames.append", "atari_wrappers.FrameStack._get_ob"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.FrameStack._get_ob"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "frames", ".", "append", "(", "ob", ")", "\n", "return", "self", ".", "_get_ob", "(", ")", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.FrameStack._get_ob": [[170, 173], ["atari_wrappers.LazyFrames", "len", "list"], "methods", ["None"], ["", "def", "_get_ob", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "frames", ")", "==", "self", ".", "k", "\n", "return", "LazyFrames", "(", "list", "(", "self", ".", "frames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.ScaledFloatFrame.__init__": [[175, 177], ["gym.ObservationWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "ObservationWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.ScaledFloatFrame.observation": [[178, 182], ["numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "# careful! This undoes the memory optimization, use", "\n", "# with smaller replay buffers only.", "\n", "        ", "return", "np", ".", "array", "(", "observation", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.LazyFrames.__init__": [[184, 194], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "frames", ")", ":", "\n", "        ", "\"\"\"This object ensures that common frames between the observations are only stored once.\n        It exists purely to optimize memory usage which can be huge for DQN's 1M frames replay\n        buffers.\n\n        This object should only be converted to numpy array before being passed to the model.\n\n        You'd not believe how complex the previous solution was.\"\"\"", "\n", "self", ".", "_frames", "=", "frames", "\n", "self", ".", "_out", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.LazyFrames._force": [[195, 200], ["numpy.concatenate"], "methods", ["None"], ["", "def", "_force", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_out", "is", "None", ":", "\n", "            ", "self", ".", "_out", "=", "np", ".", "concatenate", "(", "self", ".", "_frames", ",", "axis", "=", "2", ")", "\n", "self", ".", "_frames", "=", "None", "\n", "", "return", "self", ".", "_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.LazyFrames.__array__": [[201, 206], ["atari_wrappers.LazyFrames._force", "out.astype.astype.astype"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.LazyFrames._force"], ["", "def", "__array__", "(", "self", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "out", "=", "self", ".", "_force", "(", ")", "\n", "if", "dtype", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", ".", "astype", "(", "dtype", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.LazyFrames.__len__": [[207, 209], ["len", "atari_wrappers.LazyFrames._force"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.LazyFrames._force"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_force", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.LazyFrames.__getitem__": [[210, 212], ["atari_wrappers.LazyFrames._force"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.LazyFrames._force"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "_force", "(", ")", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.make_atari": [[213, 219], ["gym.make", "atari_wrappers.NoopResetEnv", "atari_wrappers.MaxAndSkipEnv"], "function", ["None"], ["", "", "def", "make_atari", "(", "env_id", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "assert", "'NoFrameskip'", "in", "env", ".", "spec", ".", "id", "\n", "env", "=", "NoopResetEnv", "(", "env", ",", "noop_max", "=", "30", ")", "\n", "env", "=", "MaxAndSkipEnv", "(", "env", ",", "skip", "=", "4", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.atari_wrappers.wrap_deepmind": [[220, 235], ["atari_wrappers.WarpFrame", "atari_wrappers.EpisodicLifeEnv", "FrameStack.unwrapped.get_action_meanings", "atari_wrappers.FireResetEnv", "atari_wrappers.ScaledFloatFrame", "atari_wrappers.ClipRewardEnv", "atari_wrappers.FrameStack"], "function", ["None"], ["", "def", "wrap_deepmind", "(", "env", ",", "episode_life", "=", "True", ",", "clip_rewards", "=", "True", ",", "frame_stack", "=", "False", ",", "scale", "=", "False", ")", ":", "\n", "    ", "\"\"\"Configure environment for DeepMind-style Atari.\n    \"\"\"", "\n", "if", "episode_life", ":", "\n", "        ", "env", "=", "EpisodicLifeEnv", "(", "env", ")", "\n", "", "if", "'FIRE'", "in", "env", ".", "unwrapped", ".", "get_action_meanings", "(", ")", ":", "\n", "        ", "env", "=", "FireResetEnv", "(", "env", ")", "\n", "", "env", "=", "WarpFrame", "(", "env", ")", "\n", "if", "scale", ":", "\n", "        ", "env", "=", "ScaledFloatFrame", "(", "env", ")", "\n", "", "if", "clip_rewards", ":", "\n", "        ", "env", "=", "ClipRewardEnv", "(", "env", ")", "\n", "", "if", "frame_stack", ":", "\n", "        ", "env", "=", "FrameStack", "(", "env", ",", "4", ")", "\n", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.__init__": [[6, 35], ["tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.to_float", "tensorflow.sqrt", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.function", "tensorflow.maximum", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.to_float", "tensorflow.square", "tensorflow.assign_add", "tensorflow.assign_add", "tensorflow.assign_add"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.function"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-2", ",", "shape", "=", "(", ")", ")", ":", "\n", "\n", "        ", "self", ".", "_sum", "=", "tf", ".", "get_variable", "(", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "shape", "=", "shape", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "name", "=", "\"runningsum\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_sumsq", "=", "tf", ".", "get_variable", "(", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "shape", "=", "shape", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "epsilon", ")", ",", "\n", "name", "=", "\"runningsumsq\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_count", "=", "tf", ".", "get_variable", "(", "\n", "dtype", "=", "tf", ".", "float64", ",", "\n", "shape", "=", "(", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "epsilon", ")", ",", "\n", "name", "=", "\"count\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "\n", "self", ".", "mean", "=", "tf", ".", "to_float", "(", "self", ".", "_sum", "/", "self", ".", "_count", ")", "\n", "self", ".", "std", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "tf", ".", "to_float", "(", "self", ".", "_sumsq", "/", "self", ".", "_count", ")", "-", "tf", ".", "square", "(", "self", ".", "mean", ")", ",", "1e-2", ")", ")", "\n", "\n", "newsum", "=", "tf", ".", "placeholder", "(", "shape", "=", "self", ".", "shape", ",", "dtype", "=", "tf", ".", "float64", ",", "name", "=", "'sum'", ")", "\n", "newsumsq", "=", "tf", ".", "placeholder", "(", "shape", "=", "self", ".", "shape", ",", "dtype", "=", "tf", ".", "float64", ",", "name", "=", "'var'", ")", "\n", "newcount", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float64", ",", "name", "=", "'count'", ")", "\n", "self", ".", "incfiltparams", "=", "U", ".", "function", "(", "[", "newsum", ",", "newsumsq", ",", "newcount", "]", ",", "[", "]", ",", "\n", "updates", "=", "[", "tf", ".", "assign_add", "(", "self", ".", "_sum", ",", "newsum", ")", ",", "\n", "tf", ".", "assign_add", "(", "self", ".", "_sumsq", ",", "newsumsq", ")", ",", "\n", "tf", ".", "assign_add", "(", "self", ".", "_count", ",", "newcount", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update": [[37, 44], ["x.astype.astype.astype", "int", "numpy.zeros", "numpy.concatenate", "mpi4py.MPI.COMM_WORLD.Allreduce", "mpi_running_mean_std.RunningMeanStd.incfiltparams", "numpy.prod", "totalvec[].reshape", "totalvec[].reshape", "x.astype.astype.sum().ravel", "numpy.square().sum().ravel", "numpy.array", "x.astype.astype.sum", "numpy.square().sum", "len", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum"], ["", "def", "update", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "astype", "(", "'float64'", ")", "\n", "n", "=", "int", "(", "np", ".", "prod", "(", "self", ".", "shape", ")", ")", "\n", "totalvec", "=", "np", ".", "zeros", "(", "n", "*", "2", "+", "1", ",", "'float64'", ")", "\n", "addvec", "=", "np", ".", "concatenate", "(", "[", "x", ".", "sum", "(", "axis", "=", "0", ")", ".", "ravel", "(", ")", ",", "np", ".", "square", "(", "x", ")", ".", "sum", "(", "axis", "=", "0", ")", ".", "ravel", "(", ")", ",", "np", ".", "array", "(", "[", "len", "(", "x", ")", "]", ",", "dtype", "=", "'float64'", ")", "]", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "addvec", ",", "totalvec", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "self", ".", "incfiltparams", "(", "totalvec", "[", "0", ":", "n", "]", ".", "reshape", "(", "self", ".", "shape", ")", ",", "totalvec", "[", "n", ":", "2", "*", "n", "]", ".", "reshape", "(", "self", ".", "shape", ")", ",", "totalvec", "[", "2", "*", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.test_runningmeanstd": [[45, 63], ["mpi_running_mean_std.RunningMeanStd", "baselines.initialize", "numpy.concatenate", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "numpy.allclose", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "np.concatenate.mean", "np.concatenate.std", "RunningMeanStd.mean.eval", "RunningMeanStd.std.eval"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.initialize", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.mean", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.running_stat.RunningStat.std"], ["", "", "@", "U", ".", "in_session", "\n", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "for", "(", "x1", ",", "x2", ",", "x3", ")", "in", "[", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "\n", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "\n", "]", ":", "\n", "\n", "        ", "rms", "=", "RunningMeanStd", "(", "epsilon", "=", "0.0", ",", "shape", "=", "x1", ".", "shape", "[", "1", ":", "]", ")", "\n", "U", ".", "initialize", "(", ")", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "x1", ",", "x2", ",", "x3", "]", ",", "axis", "=", "0", ")", "\n", "ms1", "=", "[", "x", ".", "mean", "(", "axis", "=", "0", ")", ",", "x", ".", "std", "(", "axis", "=", "0", ")", "]", "\n", "rms", ".", "update", "(", "x1", ")", "\n", "rms", ".", "update", "(", "x2", ")", "\n", "rms", ".", "update", "(", "x3", ")", "\n", "ms2", "=", "[", "rms", ".", "mean", ".", "eval", "(", ")", ",", "rms", ".", "std", ".", "eval", "(", ")", "]", "\n", "\n", "assert", "np", ".", "allclose", "(", "ms1", ",", "ms2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.test_dist": [[64, 102], ["numpy.random.seed", "mpi_running_mean_std.RunningMeanStd", "baselines.initialize", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "mpi_running_mean_std.RunningMeanStd.update", "numpy.concatenate", "mpi_running_mean_std.test_dist.checkallclose"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.her.rollout.RolloutWorker.seed", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.initialize", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "", "@", "U", ".", "in_session", "\n", "def", "test_dist", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "p1", ",", "p2", ",", "p3", "=", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "1", ")", ")", "\n", "q1", ",", "q2", ",", "q3", "=", "(", "np", ".", "random", ".", "randn", "(", "6", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "7", ",", "1", ")", ",", "np", ".", "random", ".", "randn", "(", "8", ",", "1", ")", ")", "\n", "\n", "# p1,p2,p3=(np.random.randn(3), np.random.randn(4), np.random.randn(5))", "\n", "# q1,q2,q3=(np.random.randn(6), np.random.randn(7), np.random.randn(8))", "\n", "\n", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "assert", "comm", ".", "Get_size", "(", ")", "==", "2", "\n", "if", "comm", ".", "Get_rank", "(", ")", "==", "0", ":", "\n", "        ", "x1", ",", "x2", ",", "x3", "=", "p1", ",", "p2", ",", "p3", "\n", "", "elif", "comm", ".", "Get_rank", "(", ")", "==", "1", ":", "\n", "        ", "x1", ",", "x2", ",", "x3", "=", "q1", ",", "q2", ",", "q3", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "rms", "=", "RunningMeanStd", "(", "epsilon", "=", "0.0", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "U", ".", "initialize", "(", ")", "\n", "\n", "rms", ".", "update", "(", "x1", ")", "\n", "rms", ".", "update", "(", "x2", ")", "\n", "rms", ".", "update", "(", "x3", ")", "\n", "\n", "bigvec", "=", "np", ".", "concatenate", "(", "[", "p1", ",", "p2", ",", "p3", ",", "q1", ",", "q2", ",", "q3", "]", ")", "\n", "\n", "def", "checkallclose", "(", "x", ",", "y", ")", ":", "\n", "        ", "print", "(", "x", ",", "y", ")", "\n", "return", "np", ".", "allclose", "(", "x", ",", "y", ")", "\n", "\n", "", "assert", "checkallclose", "(", "\n", "bigvec", ".", "mean", "(", "axis", "=", "0", ")", ",", "\n", "rms", ".", "mean", ".", "eval", "(", ")", ",", "\n", ")", "\n", "assert", "checkallclose", "(", "\n", "bigvec", ".", "std", "(", "axis", "=", "0", ")", ",", "\n", "rms", ".", "std", ".", "eval", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.tests.test_schedules.test_piecewise_schedule": [[6, 21], ["baselines.common.schedules.PiecewiseSchedule", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value", "baselines.common.schedules.PiecewiseSchedule.value"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value"], ["def", "test_piecewise_schedule", "(", ")", ":", "\n", "    ", "ps", "=", "PiecewiseSchedule", "(", "[", "(", "-", "5", ",", "100", ")", ",", "(", "5", ",", "200", ")", ",", "(", "10", ",", "50", ")", ",", "(", "100", ",", "50", ")", ",", "(", "200", ",", "-", "50", ")", "]", ",", "outside_value", "=", "500", ")", "\n", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "-", "10", ")", ",", "500", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "0", ")", ",", "150", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "5", ")", ",", "200", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "9", ")", ",", "80", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "50", ")", ",", "50", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "80", ")", ",", "50", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "150", ")", ",", "0", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "175", ")", ",", "-", "25", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "201", ")", ",", "500", ")", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "500", ")", ",", "500", ")", "\n", "\n", "assert", "np", ".", "isclose", "(", "ps", ".", "value", "(", "200", "-", "1e-10", ")", ",", "-", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.tests.test_schedules.test_constant_schedule": [[23, 27], ["baselines.common.schedules.ConstantSchedule", "range", "numpy.isclose", "baselines.common.schedules.ConstantSchedule.value"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.schedules.LinearSchedule.value"], ["", "def", "test_constant_schedule", "(", ")", ":", "\n", "    ", "cs", "=", "ConstantSchedule", "(", "5", ")", "\n", "for", "i", "in", "range", "(", "-", "100", ",", "100", ")", ":", "\n", "        ", "assert", "np", ".", "isclose", "(", "cs", ".", "value", "(", "i", ")", ",", "5", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.tests.test_tf_util.test_function": [[10, 22], ["tensorflow.Graph().as_default", "tensorflow.placeholder", "tensorflow.placeholder", "baselines.common.tf_util.function", "baselines.common.tf_util.single_threaded_session", "baselines.common.tf_util.initialize", "tensorflow.Graph", "baselines.common.tf_util.function.", "baselines.common.tf_util.function."], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.function", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.initialize"], ["def", "test_function", "(", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"x\"", ")", "\n", "y", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"y\"", ")", "\n", "z", "=", "3", "*", "x", "+", "2", "*", "y", "\n", "lin", "=", "function", "(", "[", "x", ",", "y", "]", ",", "z", ",", "givens", "=", "{", "y", ":", "0", "}", ")", "\n", "\n", "with", "single_threaded_session", "(", ")", ":", "\n", "            ", "initialize", "(", ")", "\n", "\n", "assert", "lin", "(", "2", ")", "==", "6", "\n", "assert", "lin", "(", "2", ",", "2", ")", "==", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.tests.test_tf_util.test_multikwargs": [[24, 36], ["tensorflow.Graph().as_default", "tensorflow.placeholder", "baselines.common.tf_util.function", "tensorflow.variable_scope", "tensorflow.placeholder", "baselines.common.tf_util.single_threaded_session", "baselines.common.tf_util.initialize", "tensorflow.Graph", "baselines.common.tf_util.function.", "baselines.common.tf_util.function."], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.function", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.single_threaded_session", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.tf_util.initialize"], ["", "", "", "def", "test_multikwargs", "(", ")", ":", "\n", "    ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"x\"", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"other\"", ")", ":", "\n", "            ", "x2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", ")", ",", "name", "=", "\"x\"", ")", "\n", "", "z", "=", "3", "*", "x", "+", "2", "*", "x2", "\n", "\n", "lin", "=", "function", "(", "[", "x", ",", "x2", "]", ",", "z", ",", "givens", "=", "{", "x2", ":", "0", "}", ")", "\n", "with", "single_threaded_session", "(", ")", ":", "\n", "            ", "initialize", "(", ")", "\n", "assert", "lin", "(", "2", ")", "==", "6", "\n", "assert", "lin", "(", "2", ",", "2", ")", "==", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.tests.test_segment_tree.test_tree_set": [[6, 18], ["baselines.common.segment_tree.SumSegmentTree", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum"], ["def", "test_tree_set", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", ")", ",", "4.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "0", ",", "2", ")", ",", "0.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "0", ",", "3", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "3", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "-", "1", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "4", ")", ",", "4.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.tests.test_segment_tree.test_tree_set_overlap": [[20, 31], ["baselines.common.segment_tree.SumSegmentTree", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum", "baselines.common.segment_tree.SumSegmentTree.sum"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.sum"], ["", "def", "test_tree_set_overlap", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "2", "]", "=", "3.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "3", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "-", "1", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "2", ",", "4", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "sum", "(", "1", ",", "2", ")", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.tests.test_segment_tree.test_prefixsum_idx": [[33, 45], ["baselines.common.segment_tree.SumSegmentTree", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], ["", "def", "test_prefixsum_idx", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.0", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.5", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.99", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "1.01", ")", "==", "3", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "3.00", ")", "==", "3", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "4.00", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.tests.test_segment_tree.test_prefixsum_idx2": [[47, 61], ["baselines.common.segment_tree.SumSegmentTree", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "baselines.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.SumSegmentTree.find_prefixsum_idx"], ["", "def", "test_prefixsum_idx2", "(", ")", ":", "\n", "    ", "tree", "=", "SumSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "0", "]", "=", "0.5", "\n", "tree", "[", "1", "]", "=", "1.0", "\n", "tree", "[", "2", "]", "=", "1.0", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.00", ")", "==", "0", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.55", ")", "==", "1", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "0.99", ")", "==", "1", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "1.51", ")", "==", "2", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "3.00", ")", "==", "3", "\n", "assert", "tree", ".", "find_prefixsum_idx", "(", "5.50", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.tests.test_segment_tree.test_max_interval_tree": [[63, 96], ["baselines.common.segment_tree.MinSegmentTree", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min", "baselines.common.segment_tree.MinSegmentTree.min"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.segment_tree.MinSegmentTree.min"], ["", "def", "test_max_interval_tree", "(", ")", ":", "\n", "    ", "tree", "=", "MinSegmentTree", "(", "4", ")", "\n", "\n", "tree", "[", "0", "]", "=", "1.0", "\n", "tree", "[", "2", "]", "=", "0.5", "\n", "tree", "[", "3", "]", "=", "3.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "2", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "3", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "-", "1", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "4", ")", ",", "0.5", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "3", ",", "4", ")", ",", "3.0", ")", "\n", "\n", "tree", "[", "2", "]", "=", "0.7", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "2", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "3", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "-", "1", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "4", ")", ",", "0.7", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "3", ",", "4", ")", ",", "3.0", ")", "\n", "\n", "tree", "[", "2", "]", "=", "4.0", "\n", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "2", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "3", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "0", ",", "-", "1", ")", ",", "1.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "4", ")", ",", "3.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "3", ")", ",", "4.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "2", ",", "-", "1", ")", ",", "4.0", ")", "\n", "assert", "np", ".", "isclose", "(", "tree", ".", "min", "(", "3", ",", "4", ")", ",", "3.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.vec_frame_stack.VecFrameStack.__init__": [[9, 18], ["numpy.repeat", "numpy.repeat", "numpy.zeros", "gym.spaces.Box", "baselines.common.vec_env.VecEnvWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["def", "__init__", "(", "self", ",", "venv", ",", "nstack", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "self", ".", "nstack", "=", "nstack", "\n", "wos", "=", "venv", ".", "observation_space", "# wrapped ob space", "\n", "low", "=", "np", ".", "repeat", "(", "wos", ".", "low", ",", "self", ".", "nstack", ",", "axis", "=", "-", "1", ")", "\n", "high", "=", "np", ".", "repeat", "(", "wos", ".", "high", ",", "self", ".", "nstack", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "stackedobs", "=", "np", ".", "zeros", "(", "(", "venv", ".", "num_envs", ",", ")", "+", "low", ".", "shape", ",", "low", ".", "dtype", ")", "\n", "observation_space", "=", "spaces", ".", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "venv", ".", "observation_space", ".", "dtype", ")", "\n", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ",", "observation_space", "=", "observation_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.vec_frame_stack.VecFrameStack.step_wait": [[19, 27], ["vec_frame_stack.VecFrameStack.venv.step_wait", "numpy.roll", "enumerate"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.step_wait"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "rews", ",", "news", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "self", ".", "stackedobs", "=", "np", ".", "roll", "(", "self", ".", "stackedobs", ",", "shift", "=", "-", "1", ",", "axis", "=", "-", "1", ")", "\n", "for", "(", "i", ",", "new", ")", "in", "enumerate", "(", "news", ")", ":", "\n", "            ", "if", "new", ":", "\n", "                ", "self", ".", "stackedobs", "[", "i", "]", "=", "0", "\n", "", "", "self", ".", "stackedobs", "[", "...", ",", "-", "obs", ".", "shape", "[", "-", "1", "]", ":", "]", "=", "obs", "\n", "return", "self", ".", "stackedobs", ",", "rews", ",", "news", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.vec_frame_stack.VecFrameStack.reset": [[28, 36], ["vec_frame_stack.VecFrameStack.venv.reset"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset all environments\n        \"\"\"", "\n", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "self", ".", "stackedobs", "[", "...", "]", "=", "0", "\n", "self", ".", "stackedobs", "[", "...", ",", "-", "obs", ".", "shape", "[", "-", "1", "]", ":", "]", "=", "obs", "\n", "return", "self", ".", "stackedobs", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.vec_frame_stack.VecFrameStack.close": [[37, 39], ["vec_frame_stack.VecFrameStack.venv.close"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "venv", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.subproc_vec_env.SubprocVecEnv.__init__": [[32, 51], ["len", "zip", "subproc_vec_env.SubprocVecEnv.remotes[].send", "subproc_vec_env.SubprocVecEnv.remotes[].recv", "baselines.common.vec_env.VecEnv.__init__", "multiprocessing.Process", "p.start", "remote.close", "len", "zip", "multiprocessing.Pipe", "range", "baselines.common.vec_env.CloudpickleWrapper"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.close"], ["    ", "def", "__init__", "(", "self", ",", "env_fns", ",", "spaces", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        envs: list of gym environments to run in subprocesses\n        \"\"\"", "\n", "self", ".", "waiting", "=", "False", "\n", "self", ".", "closed", "=", "False", "\n", "nenvs", "=", "len", "(", "env_fns", ")", "\n", "self", ".", "remotes", ",", "self", ".", "work_remotes", "=", "zip", "(", "*", "[", "Pipe", "(", ")", "for", "_", "in", "range", "(", "nenvs", ")", "]", ")", "\n", "self", ".", "ps", "=", "[", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "work_remote", ",", "remote", ",", "CloudpickleWrapper", "(", "env_fn", ")", ")", ")", "\n", "for", "(", "work_remote", ",", "remote", ",", "env_fn", ")", "in", "zip", "(", "self", ".", "work_remotes", ",", "self", ".", "remotes", ",", "env_fns", ")", "]", "\n", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "daemon", "=", "True", "# if the main process crashes, we should not cause things to hang", "\n", "p", ".", "start", "(", ")", "\n", "", "for", "remote", "in", "self", ".", "work_remotes", ":", "\n", "            ", "remote", ".", "close", "(", ")", "\n", "\n", "", "self", ".", "remotes", "[", "0", "]", ".", "send", "(", "(", "'get_spaces'", ",", "None", ")", ")", "\n", "observation_space", ",", "action_space", "=", "self", ".", "remotes", "[", "0", "]", ".", "recv", "(", ")", "\n", "VecEnv", ".", "__init__", "(", "self", ",", "len", "(", "env_fns", ")", ",", "observation_space", ",", "action_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.subproc_vec_env.SubprocVecEnv.step_async": [[52, 56], ["zip", "remote.send"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "for", "remote", ",", "action", "in", "zip", "(", "self", ".", "remotes", ",", "actions", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'step'", ",", "action", ")", ")", "\n", "", "self", ".", "waiting", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.subproc_vec_env.SubprocVecEnv.step_wait": [[57, 62], ["zip", "remote.recv", "numpy.stack", "numpy.stack", "numpy.stack"], "methods", ["None"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "results", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "self", ".", "waiting", "=", "False", "\n", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "np", ".", "stack", "(", "obs", ")", ",", "np", ".", "stack", "(", "rews", ")", ",", "np", ".", "stack", "(", "dones", ")", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.subproc_vec_env.SubprocVecEnv.reset": [[63, 67], ["numpy.stack", "remote.send", "remote.recv"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'reset'", ",", "None", ")", ")", "\n", "", "return", "np", ".", "stack", "(", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.subproc_vec_env.SubprocVecEnv.reset_task": [[68, 72], ["numpy.stack", "remote.send", "remote.recv"], "methods", ["None"], ["", "def", "reset_task", "(", "self", ")", ":", "\n", "        ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'reset_task'", ",", "None", ")", ")", "\n", "", "return", "np", ".", "stack", "(", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.subproc_vec_env.SubprocVecEnv.close": [[73, 84], ["remote.send", "p.join", "remote.recv"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "closed", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "waiting", ":", "\n", "            ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "                ", "remote", ".", "recv", "(", ")", "\n", "", "", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'close'", ",", "None", ")", ")", "\n", "", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "", "self", ".", "closed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.subproc_vec_env.worker": [[6, 29], ["parent_remote.close", "env_fn_wrapper.x", "remote.recv", "env_fn_wrapper.x.step", "remote.send", "env_fn_wrapper.x.reset", "env_fn_wrapper.x.reset", "remote.send", "env_fn_wrapper.x.reset_task", "remote.send", "remote.close", "remote.send"], "function", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.close", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.subproc_vec_env.SubprocVecEnv.reset_task", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.close"], ["def", "worker", "(", "remote", ",", "parent_remote", ",", "env_fn_wrapper", ")", ":", "\n", "    ", "parent_remote", ".", "close", "(", ")", "\n", "env", "=", "env_fn_wrapper", ".", "x", "(", ")", "\n", "while", "True", ":", "\n", "        ", "cmd", ",", "data", "=", "remote", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "'step'", ":", "\n", "            ", "ob", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "data", ")", "\n", "if", "done", ":", "\n", "                ", "ob", "=", "env", ".", "reset", "(", ")", "\n", "", "remote", ".", "send", "(", "(", "ob", ",", "reward", ",", "done", ",", "info", ")", ")", "\n", "", "elif", "cmd", "==", "'reset'", ":", "\n", "            ", "ob", "=", "env", ".", "reset", "(", ")", "\n", "remote", ".", "send", "(", "ob", ")", "\n", "", "elif", "cmd", "==", "'reset_task'", ":", "\n", "            ", "ob", "=", "env", ".", "reset_task", "(", ")", "\n", "remote", ".", "send", "(", "ob", ")", "\n", "", "elif", "cmd", "==", "'close'", ":", "\n", "            ", "remote", ".", "close", "(", ")", "\n", "break", "\n", "", "elif", "cmd", "==", "'get_spaces'", ":", "\n", "            ", "remote", ".", "send", "(", "(", "env", ".", "observation_space", ",", "env", ".", "action_space", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.dummy_vec_env.DummyVecEnv.__init__": [[7, 31], ["VecEnv.__init__", "isinstance", "numpy.zeros", "numpy.zeros", "fn", "len", "isinstance", "obs_space.spaces.items", "isinstance", "numpy.zeros", "isinstance", "dummy_vec_env.DummyVecEnv.keys.append", "range", "tuple"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env_fns", ")", ":", "\n", "        ", "self", ".", "envs", "=", "[", "fn", "(", ")", "for", "fn", "in", "env_fns", "]", "\n", "env", "=", "self", ".", "envs", "[", "0", "]", "\n", "VecEnv", ".", "__init__", "(", "self", ",", "len", "(", "env_fns", ")", ",", "env", ".", "observation_space", ",", "env", ".", "action_space", ")", "\n", "shapes", ",", "dtypes", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "keys", "=", "[", "]", "\n", "obs_space", "=", "env", ".", "observation_space", "\n", "if", "isinstance", "(", "obs_space", ",", "spaces", ".", "Dict", ")", ":", "\n", "            ", "assert", "isinstance", "(", "obs_space", ".", "spaces", ",", "OrderedDict", ")", "\n", "for", "key", ",", "box", "in", "obs_space", ".", "spaces", ".", "items", "(", ")", ":", "\n", "                ", "assert", "isinstance", "(", "box", ",", "spaces", ".", "Box", ")", "\n", "shapes", "[", "key", "]", "=", "box", ".", "shape", "\n", "dtypes", "[", "key", "]", "=", "box", ".", "dtype", "\n", "self", ".", "keys", ".", "append", "(", "key", ")", "\n", "", "", "else", ":", "\n", "            ", "box", "=", "obs_space", "\n", "assert", "isinstance", "(", "box", ",", "spaces", ".", "Box", ")", "\n", "self", ".", "keys", "=", "[", "None", "]", "\n", "shapes", ",", "dtypes", "=", "{", "None", ":", "box", ".", "shape", "}", ",", "{", "None", ":", "box", ".", "dtype", "}", "\n", "", "self", ".", "buf_obs", "=", "{", "k", ":", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", "+", "tuple", "(", "shapes", "[", "k", "]", ")", ",", "dtype", "=", "dtypes", "[", "k", "]", ")", "for", "k", "in", "self", ".", "keys", "}", "\n", "self", ".", "buf_dones", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "buf_rews", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "buf_infos", "=", "[", "{", "}", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", "self", ".", "actions", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.dummy_vec_env.DummyVecEnv.step_async": [[32, 34], ["None"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "self", ".", "actions", "=", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.dummy_vec_env.DummyVecEnv.step_wait": [[35, 43], ["range", "dummy_vec_env.DummyVecEnv.envs[].step", "dummy_vec_env.DummyVecEnv._save_obs", "dummy_vec_env.DummyVecEnv._obs_from_buf", "numpy.copy", "numpy.copy", "dummy_vec_env.DummyVecEnv.buf_infos.copy", "dummy_vec_env.DummyVecEnv.envs[].reset"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.dummy_vec_env.DummyVecEnv._save_obs", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.dummy_vec_env.DummyVecEnv._obs_from_buf", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "for", "e", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "            ", "obs", ",", "self", ".", "buf_rews", "[", "e", "]", ",", "self", ".", "buf_dones", "[", "e", "]", ",", "self", ".", "buf_infos", "[", "e", "]", "=", "self", ".", "envs", "[", "e", "]", ".", "step", "(", "self", ".", "actions", "[", "e", "]", ")", "\n", "if", "self", ".", "buf_dones", "[", "e", "]", ":", "\n", "                ", "obs", "=", "self", ".", "envs", "[", "e", "]", ".", "reset", "(", ")", "\n", "", "self", ".", "_save_obs", "(", "e", ",", "obs", ")", "\n", "", "return", "(", "self", ".", "_obs_from_buf", "(", ")", ",", "np", ".", "copy", "(", "self", ".", "buf_rews", ")", ",", "np", ".", "copy", "(", "self", ".", "buf_dones", ")", ",", "\n", "self", ".", "buf_infos", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.dummy_vec_env.DummyVecEnv.reset": [[44, 49], ["range", "dummy_vec_env.DummyVecEnv._obs_from_buf", "dummy_vec_env.DummyVecEnv.envs[].reset", "dummy_vec_env.DummyVecEnv._save_obs"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.dummy_vec_env.DummyVecEnv._obs_from_buf", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.dummy_vec_env.DummyVecEnv._save_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "e", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "            ", "obs", "=", "self", ".", "envs", "[", "e", "]", ".", "reset", "(", ")", "\n", "self", ".", "_save_obs", "(", "e", ",", "obs", ")", "\n", "", "return", "self", ".", "_obs_from_buf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.dummy_vec_env.DummyVecEnv.close": [[50, 52], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.dummy_vec_env.DummyVecEnv._save_obs": [[53, 59], ["None"], "methods", ["None"], ["", "def", "_save_obs", "(", "self", ",", "e", ",", "obs", ")", ":", "\n", "        ", "for", "k", "in", "self", ".", "keys", ":", "\n", "            ", "if", "k", "is", "None", ":", "\n", "                ", "self", ".", "buf_obs", "[", "k", "]", "[", "e", "]", "=", "obs", "\n", "", "else", ":", "\n", "                ", "self", ".", "buf_obs", "[", "k", "]", "[", "e", "]", "=", "obs", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.dummy_vec_env.DummyVecEnv._obs_from_buf": [[60, 65], ["None"], "methods", ["None"], ["", "", "", "def", "_obs_from_buf", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "keys", "==", "[", "None", "]", ":", "\n", "            ", "return", "self", ".", "buf_obs", "[", "None", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "buf_obs", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.vec_normalize.VecNormalize.__init__": [[9, 18], ["baselines.common.vec_env.VecEnvWrapper.__init__", "numpy.zeros", "baselines.common.running_mean_std.RunningMeanStd", "baselines.common.running_mean_std.RunningMeanStd"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], ["def", "__init__", "(", "self", ",", "venv", ",", "ob", "=", "True", ",", "ret", "=", "True", ",", "clipob", "=", "10.", ",", "cliprew", "=", "10.", ",", "gamma", "=", "0.99", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ")", "\n", "self", ".", "ob_rms", "=", "RunningMeanStd", "(", "shape", "=", "self", ".", "observation_space", ".", "shape", ")", "if", "ob", "else", "None", "\n", "self", ".", "ret_rms", "=", "RunningMeanStd", "(", "shape", "=", "(", ")", ")", "if", "ret", "else", "None", "\n", "self", ".", "clipob", "=", "clipob", "\n", "self", ".", "cliprew", "=", "cliprew", "\n", "self", ".", "ret", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.vec_normalize.VecNormalize.step_wait": [[19, 33], ["vec_normalize.VecNormalize.venv.step_wait", "vec_normalize.VecNormalize._obfilt", "vec_normalize.VecNormalize.ret_rms.update", "numpy.clip", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.step_wait", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.vec_normalize.VecNormalize._obfilt", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Apply sequence of actions to sequence of environments\n        actions -> (observations, rewards, news)\n\n        where 'news' is a boolean vector indicating whether each element is new.\n        \"\"\"", "\n", "obs", ",", "rews", ",", "news", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "self", ".", "ret", "=", "self", ".", "ret", "*", "self", ".", "gamma", "+", "rews", "\n", "obs", "=", "self", ".", "_obfilt", "(", "obs", ")", "\n", "if", "self", ".", "ret_rms", ":", "\n", "            ", "self", ".", "ret_rms", ".", "update", "(", "self", ".", "ret", ")", "\n", "rews", "=", "np", ".", "clip", "(", "rews", "/", "np", ".", "sqrt", "(", "self", ".", "ret_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "-", "self", ".", "cliprew", ",", "self", ".", "cliprew", ")", "\n", "", "return", "obs", ",", "rews", ",", "news", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.vec_normalize.VecNormalize._obfilt": [[34, 41], ["vec_normalize.VecNormalize.ob_rms.update", "numpy.clip", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.common.mpi_running_mean_std.RunningMeanStd.update"], ["", "def", "_obfilt", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "ob_rms", ":", "\n", "            ", "self", ".", "ob_rms", ".", "update", "(", "obs", ")", "\n", "obs", "=", "np", ".", "clip", "(", "(", "obs", "-", "self", ".", "ob_rms", ".", "mean", ")", "/", "np", ".", "sqrt", "(", "self", ".", "ob_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "-", "self", ".", "clipob", ",", "self", ".", "clipob", ")", "\n", "return", "obs", "\n", "", "else", ":", "\n", "            ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.vec_normalize.VecNormalize.reset": [[42, 48], ["vec_normalize.VecNormalize.venv.reset", "vec_normalize.VecNormalize._obfilt"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.vec_normalize.VecNormalize._obfilt"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset all environments\n        \"\"\"", "\n", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "return", "self", ".", "_obfilt", "(", "obs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.AlreadySteppingError.__init__": [[9, 12], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.NotSteppingError.__init__": [[18, 21], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.__init__": [[26, 30], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.reset": [[31, 42], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step_async": [[43, 54], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step_wait": [[55, 68], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.close": [[69, 75], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.step": [[76, 79], ["__init__.VecEnv.step_async", "__init__.VecEnv.step_wait"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.step_async", "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.step_wait"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.render": [[80, 82], ["baselines.logger.warn"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.baselines.logger.warn"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnv.unwrapped": [[83, 89], ["isinstance"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.__init__": [[91, 97], ["VecEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.step_async": [[98, 100], ["__init__.VecEnvWrapper.venv.step_async"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.step_async"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.reset": [[101, 104], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.step_wait": [[105, 108], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.close": [[109, 111], ["__init__.VecEnvWrapper.venv.close"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.close"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.render": [[112, 114], ["__init__.VecEnvWrapper.venv.render"], "methods", ["home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.VecEnvWrapper.render"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__init__": [[119, 121], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__getstate__": [[121, 124], ["cloudpickle.dumps"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ruizhaogit_EnergyBasedPrioritization.vec_env.__init__.CloudpickleWrapper.__setstate__": [[124, 127], ["pickle.loads"], "methods", ["None"], []]}