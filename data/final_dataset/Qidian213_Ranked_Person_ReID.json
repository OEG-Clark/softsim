{"home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.iotools.mkdir_if_missing": [[14, 21], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "directory", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.iotools.check_isfile": [[23, 28], ["os.isfile", "print"], "function", ["None"], ["", "", "", "", "def", "check_isfile", "(", "path", ")", ":", "\n", "    ", "isfile", "=", "osp", ".", "isfile", "(", "path", ")", "\n", "if", "not", "isfile", ":", "\n", "        ", "print", "(", "\"=> Warning: no file found at '{}' (ignored)\"", ".", "format", "(", "path", ")", ")", "\n", "", "return", "isfile", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.iotools.read_json": [[30, 34], ["open", "json.load"], "function", ["None"], ["", "def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.iotools.write_json": [[36, 40], ["iotools.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.iotools.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.logger.setup_logger": [[12, 31], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# don't log results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "return", "logger", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"log.txt\"", ")", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.reid_metric.R1_mAP.__init__": [[16, 21], ["ignite.metrics.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_query", ",", "max_rank", "=", "50", ",", "feat_norm", "=", "'yes'", ")", ":", "\n", "        ", "super", "(", "R1_mAP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_query", "=", "num_query", "\n", "self", ".", "max_rank", "=", "max_rank", "\n", "self", ".", "feat_norm", "=", "feat_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.reid_metric.R1_mAP.reset": [[22, 26], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "feats", "=", "[", "]", "\n", "self", ".", "pids", "=", "[", "]", "\n", "self", ".", "camids", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.reid_metric.R1_mAP.update": [[27, 32], ["reid_metric.R1_mAP.feats.append", "reid_metric.R1_mAP.pids.extend", "reid_metric.R1_mAP.camids.extend", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "output", ")", ":", "\n", "        ", "feat", ",", "pid", ",", "camid", "=", "output", "\n", "self", ".", "feats", ".", "append", "(", "feat", ")", "\n", "self", ".", "pids", ".", "extend", "(", "np", ".", "asarray", "(", "pid", ")", ")", "\n", "self", ".", "camids", ".", "extend", "(", "np", ".", "asarray", "(", "camid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.reid_metric.R1_mAP.compute": [[33, 54], ["torch.cat", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "distmat.cpu().numpy.cpu().numpy.addmm_", "distmat.cpu().numpy.cpu().numpy.cpu().numpy", "data.datasets.eval_reid.eval_func", "print", "torch.nn.functional.normalize", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "gf.t", "distmat.cpu().numpy.cpu().numpy.cpu", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow", "torch.pow().sum", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.eval_reid.eval_func", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.compute_threshold.normalize"], ["", "def", "compute", "(", "self", ")", ":", "\n", "        ", "feats", "=", "torch", ".", "cat", "(", "self", ".", "feats", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "feat_norm", "==", "'yes'", ":", "\n", "            ", "print", "(", "\"The test feature is normalized\"", ")", "\n", "feats", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "feats", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "# query", "\n", "", "qf", "=", "feats", "[", ":", "self", ".", "num_query", "]", "\n", "q_pids", "=", "np", ".", "asarray", "(", "self", ".", "pids", "[", ":", "self", ".", "num_query", "]", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "self", ".", "camids", "[", ":", "self", ".", "num_query", "]", ")", "\n", "# gallery", "\n", "gf", "=", "feats", "[", "self", ".", "num_query", ":", "]", "\n", "g_pids", "=", "np", ".", "asarray", "(", "self", ".", "pids", "[", "self", ".", "num_query", ":", "]", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "self", ".", "camids", "[", "self", ".", "num_query", ":", "]", ")", "\n", "m", ",", "n", "=", "qf", ".", "shape", "[", "0", "]", ",", "gf", ".", "shape", "[", "0", "]", "\n", "distmat", "=", "torch", ".", "pow", "(", "qf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "distmat", "=", "distmat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cmc", ",", "mAP", "=", "eval_func", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ")", "\n", "\n", "return", "cmc", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.reid_metric.R1_mAP_reranking.__init__": [[57, 62], ["ignite.metrics.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_query", ",", "max_rank", "=", "50", ",", "feat_norm", "=", "'yes'", ")", ":", "\n", "        ", "super", "(", "R1_mAP_reranking", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_query", "=", "num_query", "\n", "self", ".", "max_rank", "=", "max_rank", "\n", "self", ".", "feat_norm", "=", "feat_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.reid_metric.R1_mAP_reranking.reset": [[63, 67], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "feats", "=", "[", "]", "\n", "self", ".", "pids", "=", "[", "]", "\n", "self", ".", "camids", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.reid_metric.R1_mAP_reranking.update": [[68, 73], ["reid_metric.R1_mAP_reranking.feats.append", "reid_metric.R1_mAP_reranking.pids.extend", "reid_metric.R1_mAP_reranking.camids.extend", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "output", ")", ":", "\n", "        ", "feat", ",", "pid", ",", "camid", "=", "output", "\n", "self", ".", "feats", ".", "append", "(", "feat", ")", "\n", "self", ".", "pids", ".", "extend", "(", "np", ".", "asarray", "(", "pid", ")", ")", "\n", "self", ".", "camids", ".", "extend", "(", "np", ".", "asarray", "(", "camid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.reid_metric.R1_mAP_reranking.compute": [[74, 98], ["torch.cat", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "print", "re_ranking.re_ranking.re_ranking", "data.datasets.eval_reid.eval_func", "print", "torch.nn.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.re_ranking.re_ranking", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.eval_reid.eval_func", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.compute_threshold.normalize"], ["", "def", "compute", "(", "self", ")", ":", "\n", "        ", "feats", "=", "torch", ".", "cat", "(", "self", ".", "feats", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "feat_norm", "==", "'yes'", ":", "\n", "            ", "print", "(", "\"The test feature is normalized\"", ")", "\n", "feats", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "feats", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "# query", "\n", "", "qf", "=", "feats", "[", ":", "self", ".", "num_query", "]", "\n", "q_pids", "=", "np", ".", "asarray", "(", "self", ".", "pids", "[", ":", "self", ".", "num_query", "]", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "self", ".", "camids", "[", ":", "self", ".", "num_query", "]", ")", "\n", "# gallery", "\n", "gf", "=", "feats", "[", "self", ".", "num_query", ":", "]", "\n", "g_pids", "=", "np", ".", "asarray", "(", "self", ".", "pids", "[", "self", ".", "num_query", ":", "]", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "self", ".", "camids", "[", "self", ".", "num_query", ":", "]", ")", "\n", "# m, n = qf.shape[0], gf.shape[0]", "\n", "# distmat = torch.pow(qf, 2).sum(dim=1, keepdim=True).expand(m, n) + \\", "\n", "#           torch.pow(gf, 2).sum(dim=1, keepdim=True).expand(n, m).t()", "\n", "# distmat.addmm_(1, -2, qf, gf.t())", "\n", "# distmat = distmat.cpu().numpy()", "\n", "print", "(", "\"Enter reranking\"", ")", "\n", "distmat", "=", "re_ranking", "(", "qf", ",", "gf", ",", "k1", "=", "20", ",", "k2", "=", "6", ",", "lambda_value", "=", "0.3", ")", "\n", "cmc", ",", "mAP", "=", "eval_func", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ")", "\n", "\n", "return", "cmc", ",", "mAP", "", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.re_ranking.re_ranking": [[29, 101], ["probFea.size", "numpy.transpose", "numpy.zeros_like().astype", "numpy.argsort().astype", "print", "range", "range", "numpy.zeros_like", "range", "galFea.size", "torch.cat", "print", "distmat.addmm_", "distmat.cpu().numpy", "range", "numpy.unique", "numpy.exp", "numpy.zeros_like", "range", "invIndex.append", "numpy.zeros", "range", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.cat.t", "numpy.max", "numpy.zeros_like", "numpy.argsort", "numpy.where", "len", "numpy.sum", "numpy.mean", "numpy.where", "len", "distmat.cpu", "numpy.where", "len", "numpy.append", "numpy.where", "numpy.minimum", "torch.pow().sum", "torch.pow().sum().expand", "numpy.intersect1d", "len", "torch.pow", "torch.pow().sum", "int", "int", "numpy.around", "numpy.around", "torch.pow"], "function", ["None"], ["def", "re_ranking", "(", "probFea", ",", "galFea", ",", "k1", ",", "k2", ",", "lambda_value", ",", "local_distmat", "=", "None", ",", "only_local", "=", "False", ")", ":", "\n", "# if feature vector is numpy, you should use 'torch.tensor' transform it to tensor", "\n", "    ", "query_num", "=", "probFea", ".", "size", "(", "0", ")", "\n", "all_num", "=", "query_num", "+", "galFea", ".", "size", "(", "0", ")", "\n", "if", "only_local", ":", "\n", "        ", "original_dist", "=", "local_distmat", "\n", "", "else", ":", "\n", "        ", "feat", "=", "torch", ".", "cat", "(", "[", "probFea", ",", "galFea", "]", ")", "\n", "print", "(", "'using GPU to compute original distance'", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "feat", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "all_num", ",", "all_num", ")", "+", "torch", ".", "pow", "(", "feat", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "all_num", ",", "all_num", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "feat", ",", "feat", ".", "t", "(", ")", ")", "\n", "original_dist", "=", "distmat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "del", "feat", "\n", "if", "not", "local_distmat", "is", "None", ":", "\n", "            ", "original_dist", "=", "original_dist", "+", "local_distmat", "\n", "", "", "gallery_num", "=", "original_dist", ".", "shape", "[", "0", "]", "\n", "original_dist", "=", "np", ".", "transpose", "(", "original_dist", "/", "np", ".", "max", "(", "original_dist", ",", "axis", "=", "0", ")", ")", "\n", "V", "=", "np", ".", "zeros_like", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "initial_rank", "=", "np", ".", "argsort", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "print", "(", "'starting re_ranking'", ")", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "# k-reciprocal neighbors", "\n", "        ", "forward_k_neigh_index", "=", "initial_rank", "[", "i", ",", ":", "k1", "+", "1", "]", "\n", "backward_k_neigh_index", "=", "initial_rank", "[", "forward_k_neigh_index", ",", ":", "k1", "+", "1", "]", "\n", "fi", "=", "np", ".", "where", "(", "backward_k_neigh_index", "==", "i", ")", "[", "0", "]", "\n", "k_reciprocal_index", "=", "forward_k_neigh_index", "[", "fi", "]", "\n", "k_reciprocal_expansion_index", "=", "k_reciprocal_index", "\n", "for", "j", "in", "range", "(", "len", "(", "k_reciprocal_index", ")", ")", ":", "\n", "            ", "candidate", "=", "k_reciprocal_index", "[", "j", "]", "\n", "candidate_forward_k_neigh_index", "=", "initial_rank", "[", "candidate", ",", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2", ")", ")", "+", "1", "]", "\n", "candidate_backward_k_neigh_index", "=", "initial_rank", "[", "candidate_forward_k_neigh_index", ",", "\n", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2", ")", ")", "+", "1", "]", "\n", "fi_candidate", "=", "np", ".", "where", "(", "candidate_backward_k_neigh_index", "==", "candidate", ")", "[", "0", "]", "\n", "candidate_k_reciprocal_index", "=", "candidate_forward_k_neigh_index", "[", "fi_candidate", "]", "\n", "if", "len", "(", "np", ".", "intersect1d", "(", "candidate_k_reciprocal_index", ",", "k_reciprocal_index", ")", ")", ">", "2", "/", "3", "*", "len", "(", "\n", "candidate_k_reciprocal_index", ")", ":", "\n", "                ", "k_reciprocal_expansion_index", "=", "np", ".", "append", "(", "k_reciprocal_expansion_index", ",", "candidate_k_reciprocal_index", ")", "\n", "\n", "", "", "k_reciprocal_expansion_index", "=", "np", ".", "unique", "(", "k_reciprocal_expansion_index", ")", "\n", "weight", "=", "np", ".", "exp", "(", "-", "original_dist", "[", "i", ",", "k_reciprocal_expansion_index", "]", ")", "\n", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "weight", "/", "np", ".", "sum", "(", "weight", ")", "\n", "", "original_dist", "=", "original_dist", "[", ":", "query_num", ",", "]", "\n", "if", "k2", "!=", "1", ":", "\n", "        ", "V_qe", "=", "np", ".", "zeros_like", "(", "V", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "            ", "V_qe", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "V", "[", "initial_rank", "[", "i", ",", ":", "k2", "]", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "V", "=", "V_qe", "\n", "del", "V_qe", "\n", "", "del", "initial_rank", "\n", "invIndex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gallery_num", ")", ":", "\n", "        ", "invIndex", ".", "append", "(", "np", ".", "where", "(", "V", "[", ":", ",", "i", "]", "!=", "0", ")", "[", "0", "]", ")", "\n", "\n", "", "jaccard_dist", "=", "np", ".", "zeros_like", "(", "original_dist", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "\n", "for", "i", "in", "range", "(", "query_num", ")", ":", "\n", "        ", "temp_min", "=", "np", ".", "zeros", "(", "shape", "=", "[", "1", ",", "gallery_num", "]", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "indNonZero", "=", "np", ".", "where", "(", "V", "[", "i", ",", ":", "]", "!=", "0", ")", "[", "0", "]", "\n", "indImages", "=", "[", "invIndex", "[", "ind", "]", "for", "ind", "in", "indNonZero", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "indNonZero", ")", ")", ":", "\n", "            ", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "=", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "+", "np", ".", "minimum", "(", "V", "[", "i", ",", "indNonZero", "[", "j", "]", "]", ",", "\n", "V", "[", "indImages", "[", "j", "]", ",", "indNonZero", "[", "j", "]", "]", ")", "\n", "", "jaccard_dist", "[", "i", "]", "=", "1", "-", "temp_min", "/", "(", "2", "-", "temp_min", ")", "\n", "\n", "", "final_dist", "=", "jaccard_dist", "*", "(", "1", "-", "lambda_value", ")", "+", "original_dist", "*", "lambda_value", "\n", "del", "original_dist", "\n", "del", "V", "\n", "del", "jaccard_dist", "\n", "final_dist", "=", "final_dist", "[", ":", "query_num", ",", "query_num", ":", "]", "\n", "return", "final_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.modeling.__init__.build_model": [[9, 12], ["baseline.Baseline"], "function", ["None"], []], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.modeling.baseline.Baseline.__init__": [[41, 177], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "baseline.Baseline.fc_loc[].weight.data.zero_", "baseline.Baseline.fc_loc[].bias.data.copy_", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "baseline.Baseline.bottleneck.bias.requires_grad_", "torch.nn.Linear", "torch.nn.Linear", "baseline.Baseline.bottleneck.apply", "baseline.Baseline.classifier.apply", "backbones.resnet.ResNet", "baseline.Baseline.base.load_param", "print", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "backbones.resnet.ResNet", "backbones.resnet.ResNet", "backbones.resnet.ResNet", "backbones.resnet.ResNet", "backbones.senet.SENet", "backbones.senet.SENet", "backbones.senet.SENet", "backbones.senet.SENet", "backbones.senet.SENet", "backbones.senet.SENet", "backbones.mobilenetv3.MobileNetV3_Large", "backbones.resnet_ibn_a.resnet50_ibn_a", "backbones.resnet_ibn_a_old.resnet50_ibn_a_old"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet.load_param", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.resnet50_ibn_a", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.resnet50_ibn_a_old"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "last_stride", ",", "model_path", ",", "stn_flag", ",", "model_name", ",", "pretrain_choice", ")", ":", "\n", "        ", "super", "(", "Baseline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model_name", "=", "model_name", "\n", "\n", "if", "model_name", "==", "'resnet18'", ":", "\n", "            ", "self", ".", "in_planes", "=", "512", "\n", "self", ".", "base", "=", "ResNet", "(", "last_stride", "=", "last_stride", ",", "\n", "block", "=", "BasicBlock", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "", "elif", "model_name", "==", "'resnet34'", ":", "\n", "            ", "self", ".", "in_planes", "=", "512", "\n", "self", ".", "base", "=", "ResNet", "(", "last_stride", "=", "last_stride", ",", "\n", "block", "=", "BasicBlock", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "", "elif", "model_name", "==", "'resnet50'", ":", "\n", "            ", "self", ".", "base", "=", "ResNet", "(", "last_stride", "=", "last_stride", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "", "elif", "model_name", "==", "'resnet101'", ":", "\n", "            ", "self", ".", "base", "=", "ResNet", "(", "last_stride", "=", "last_stride", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "", "elif", "model_name", "==", "'resnet152'", ":", "\n", "            ", "self", ".", "base", "=", "ResNet", "(", "last_stride", "=", "last_stride", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "", "elif", "model_name", "==", "'se_resnet50'", ":", "\n", "            ", "self", ".", "base", "=", "SENet", "(", "block", "=", "SEResNetBottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "groups", "=", "1", ",", "\n", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "\n", "inplanes", "=", "64", ",", "\n", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", ",", "\n", "last_stride", "=", "last_stride", ")", "\n", "", "elif", "model_name", "==", "'se_resnet101'", ":", "\n", "            ", "self", ".", "base", "=", "SENet", "(", "block", "=", "SEResNetBottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "groups", "=", "1", ",", "\n", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "\n", "inplanes", "=", "64", ",", "\n", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", ",", "\n", "last_stride", "=", "last_stride", ")", "\n", "", "elif", "model_name", "==", "'se_resnet152'", ":", "\n", "            ", "self", ".", "base", "=", "SENet", "(", "block", "=", "SEResNetBottleneck", ",", "\n", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "\n", "groups", "=", "1", ",", "\n", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "\n", "inplanes", "=", "64", ",", "\n", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", ",", "\n", "last_stride", "=", "last_stride", ")", "\n", "", "elif", "model_name", "==", "'se_resnext50'", ":", "\n", "            ", "self", ".", "base", "=", "SENet", "(", "block", "=", "SEResNeXtBottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "groups", "=", "32", ",", "\n", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "\n", "inplanes", "=", "64", ",", "\n", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", ",", "\n", "last_stride", "=", "last_stride", ")", "\n", "", "elif", "model_name", "==", "'se_resnext101'", ":", "\n", "            ", "self", ".", "base", "=", "SENet", "(", "block", "=", "SEResNeXtBottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "groups", "=", "32", ",", "\n", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "None", ",", "\n", "inplanes", "=", "64", ",", "\n", "input_3x3", "=", "False", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", ",", "\n", "last_stride", "=", "last_stride", ")", "\n", "", "elif", "model_name", "==", "'senet154'", ":", "\n", "            ", "self", ".", "base", "=", "SENet", "(", "block", "=", "SEBottleneck", ",", "\n", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "\n", "groups", "=", "64", ",", "\n", "reduction", "=", "16", ",", "\n", "dropout_p", "=", "0.2", ",", "\n", "last_stride", "=", "last_stride", ")", "\n", "\n", "", "elif", "model_name", "==", "'mobilenetv3'", ":", "\n", "            ", "self", ".", "in_planes", "=", "960", "\n", "self", ".", "base", "=", "MobileNetV3_Large", "(", ")", "\n", "\n", "", "elif", "model_name", "==", "'resnet50_ibn_a'", ":", "\n", "            ", "self", ".", "base", "=", "resnet50_ibn_a", "(", "last_stride", "=", "last_stride", ")", "\n", "\n", "", "elif", "model_name", "==", "'resnet50_ibn_a_old'", ":", "\n", "            ", "self", ".", "base", "=", "resnet50_ibn_a_old", "(", "last_stride", "=", "last_stride", ")", "\n", "\n", "", "if", "pretrain_choice", "==", "'imagenet'", ":", "\n", "            ", "self", ".", "base", ".", "load_param", "(", "model_path", ")", "\n", "print", "(", "'Loading pretrained ImageNet model......'", ")", "\n", "\n", "# Spatial transformer localization-network", "\n", "", "self", ".", "localization", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "8", ",", "kernel_size", "=", "7", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "8", ",", "10", ",", "kernel_size", "=", "5", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "# Regressor for the 3 * 2 affine matrix", "\n", "self", ".", "fc_loc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "10", "*", "60", "*", "28", ",", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "32", ",", "3", "*", "2", ")", "\n", ")", "\n", "# Initialize the weights/bias with identity transformation", "\n", "self", ".", "fc_loc", "[", "2", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "fc_loc", "[", "2", "]", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "tensor", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "\n", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# self.gap = nn.AdaptiveMaxPool2d(1)", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "stn_flag", "=", "stn_flag", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "# no shift", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "in_planes", ",", "self", ".", "num_classes", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.modeling.baseline.Baseline.stn": [[179, 189], ["baseline.Baseline.localization", "xs.view.view.view", "baseline.Baseline.fc_loc", "theta.view.view.view", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample.size"], "methods", ["None"], ["", "def", "stn", "(", "self", ",", "x", ")", ":", "\n", "        ", "xs", "=", "self", ".", "localization", "(", "x", ")", "\n", "xs", "=", "xs", ".", "view", "(", "-", "1", ",", "10", "*", "60", "*", "28", ")", "\n", "theta", "=", "self", ".", "fc_loc", "(", "xs", ")", "\n", "theta", "=", "theta", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "\n", "grid", "=", "F", ".", "affine_grid", "(", "theta", ",", "x", ".", "size", "(", ")", ")", "\n", "x", "=", "F", ".", "grid_sample", "(", "x", ",", "grid", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.modeling.baseline.Baseline.forward": [[190, 204], ["baseline.Baseline.gap", "global_feat.view.view.view", "baseline.Baseline.bottleneck", "baseline.Baseline.stn", "baseline.Baseline.base", "baseline.Baseline.classifier"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.modeling.baseline.Baseline.stn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stn_flag", "==", "'yes'", ":", "\n", "            ", "x", "=", "self", ".", "stn", "(", "x", ")", "#### stn", "\n", "\n", "", "global_feat", "=", "self", ".", "gap", "(", "self", ".", "base", "(", "x", ")", ")", "# (b, 2048, 1, 1)", "\n", "global_feat", "=", "global_feat", ".", "view", "(", "global_feat", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# flatten to (bs, 2048)", "\n", "\n", "feat", "=", "self", ".", "bottleneck", "(", "global_feat", ")", "# normalize for angular softmax", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "cls_score", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "return", "cls_score", ",", "feat", "### feat for ranked loss", "\n", "", "else", ":", "\n", "            ", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.modeling.baseline.Baseline.load_param": [[205, 211], ["torch.load", "torch.load", "torch.load", "torch.load", "[].copy_", "baseline.Baseline.state_dict", "baseline.Baseline.state_dict"], "methods", ["None"], ["", "", "def", "load_param", "(", "self", ",", "trained_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "trained_path", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "state_dict", "(", ")", "or", "'classifier'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.modeling.baseline.weights_init_kaiming": [[17, 30], ["classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "classname.find", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "if", "m", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.modeling.baseline.weights_init_classifier": [[31, 37], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "m", ".", "bias", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_b.BasicBlock.__init__": [[27, 36], ["torch.Module.__init__", "resnet_ibn_b.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_ibn_b.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.conv3x3", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_b.BasicBlock.forward": [[37, 54], ["resnet_ibn_b.BasicBlock.conv1", "resnet_ibn_b.BasicBlock.bn1", "resnet_ibn_b.BasicBlock.relu", "resnet_ibn_b.BasicBlock.conv2", "resnet_ibn_b.BasicBlock.bn2", "resnet_ibn_b.BasicBlock.relu", "resnet_ibn_b.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_b.Bottleneck.__init__": [[59, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "IN", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "IN", "=", "None", "\n", "if", "IN", ":", "\n", "            ", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "True", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_b.Bottleneck.forward": [[75, 98], ["resnet_ibn_b.Bottleneck.conv1", "resnet_ibn_b.Bottleneck.bn1", "resnet_ibn_b.Bottleneck.relu", "resnet_ibn_b.Bottleneck.conv2", "resnet_ibn_b.Bottleneck.bn2", "resnet_ibn_b.Bottleneck.relu", "resnet_ibn_b.Bottleneck.conv3", "resnet_ibn_b.Bottleneck.bn3", "resnet_ibn_b.Bottleneck.relu", "resnet_ibn_b.Bottleneck.downsample", "resnet_ibn_b.Bottleneck.IN"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "self", ".", "IN", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "IN", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_b.ResNet.__init__": [[102, 128], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_ibn_b.ResNet._make_layer", "resnet_ibn_b.ResNet._make_layer", "resnet_ibn_b.ResNet._make_layer", "resnet_ibn_b.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_ibn_b.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "scale", "=", "64", "\n", "self", ".", "inplanes", "=", "scale", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "scale", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "scale", ",", "affine", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "IN", "=", "True", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "IN", "=", "True", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "scale", "*", "8", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_b.ResNet._make_layer": [[129, 146], ["layers.append", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "IN", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "IN", "=", "IN", ")", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_b.ResNet.forward": [[147, 163], ["resnet_ibn_b.ResNet.conv1", "resnet_ibn_b.ResNet.bn1", "resnet_ibn_b.ResNet.relu", "resnet_ibn_b.ResNet.maxpool", "resnet_ibn_b.ResNet.layer1", "resnet_ibn_b.ResNet.layer2", "resnet_ibn_b.ResNet.layer3", "resnet_ibn_b.ResNet.layer4", "resnet_ibn_b.ResNet.avgpool", "resnet_ibn_b.ResNet.view", "resnet_ibn_b.ResNet.fc", "resnet_ibn_b.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_b.conv3x3": [[18, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_b.resnet50_ibn_b": [[165, 175], ["resnet_ibn_b.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet50_ibn_b", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_b.resnet101_ibn_b": [[177, 187], ["resnet_ibn_b.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101_ibn_b", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_b.resnet152_ibn_b": [[189, 199], ["resnet_ibn_b.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152_ibn_b", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.hswish.forward": [[11, 14], ["torch.relu6", "torch.relu6", "torch.relu6"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "*", "F", ".", "relu6", "(", "x", "+", "3", ",", "inplace", "=", "True", ")", "/", "6", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.hsigmoid.forward": [[16, 19], ["torch.relu6", "torch.relu6", "torch.relu6"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu6", "(", "x", "+", "3", ",", "inplace", "=", "True", ")", "/", "6", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.SeModule.__init__": [[21, 32], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv3.hsigmoid"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "reduction", "=", "4", ")", ":", "\n", "        ", "super", "(", "SeModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_size", ",", "in_size", "//", "reduction", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_size", "//", "reduction", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_size", "//", "reduction", ",", "in_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_size", ")", ",", "\n", "hsigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.SeModule.forward": [[34, 36], ["mobilenetv3.SeModule.se"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "se", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.Block.__init__": [[40, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "kernel_size", ",", "in_size", ",", "expand_size", ",", "out_size", ",", "nolinear", ",", "semodule", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "se", "=", "semodule", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_size", ",", "expand_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "expand_size", ")", "\n", "self", ".", "nolinear1", "=", "nolinear", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "expand_size", ",", "expand_size", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "kernel_size", "//", "2", ",", "groups", "=", "expand_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "expand_size", ")", "\n", "self", ".", "nolinear2", "=", "nolinear", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "expand_size", ",", "out_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_size", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_size", "!=", "out_size", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_size", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.Block.forward": [[61, 69], ["mobilenetv3.Block.nolinear1", "mobilenetv3.Block.nolinear2", "mobilenetv3.Block.bn3", "mobilenetv3.Block.bn1", "mobilenetv3.Block.bn2", "mobilenetv3.Block.conv3", "mobilenetv3.Block.se", "mobilenetv3.Block.conv1", "mobilenetv3.Block.conv2", "mobilenetv3.Block.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "nolinear1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "nolinear2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "if", "self", ".", "se", "!=", "None", ":", "\n", "            ", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.MobileNetV3_Large.__init__": [[71, 104], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv3.hswish", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv3.hswish", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "mobilenetv3.hswish", "torch.Linear", "torch.Linear", "torch.Linear", "mobilenetv3.MobileNetV3_Large.init_params", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mobilenetv3.SeModule", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mobilenetv3.SeModule", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mobilenetv3.SeModule", "mobilenetv3.hswish", "mobilenetv3.hswish", "mobilenetv3.hswish", "mobilenetv3.hswish", "mobilenetv3.hswish", "mobilenetv3.SeModule", "mobilenetv3.hswish", "mobilenetv3.SeModule", "mobilenetv3.hswish", "mobilenetv3.SeModule", "mobilenetv3.hswish", "mobilenetv3.SeModule", "mobilenetv3.hswish", "mobilenetv3.SeModule"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.MobileNetV3_Small.init_params"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "MobileNetV3_Large", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "hs1", "=", "hswish", "(", ")", "\n", "\n", "self", ".", "bneck", "=", "nn", ".", "Sequential", "(", "\n", "Block", "(", "3", ",", "16", ",", "16", ",", "16", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "None", ",", "1", ")", ",", "\n", "Block", "(", "3", ",", "16", ",", "64", ",", "24", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "None", ",", "2", ")", ",", "\n", "Block", "(", "3", ",", "24", ",", "72", ",", "24", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "None", ",", "1", ")", ",", "\n", "Block", "(", "5", ",", "24", ",", "72", ",", "40", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "SeModule", "(", "40", ")", ",", "2", ")", ",", "\n", "Block", "(", "5", ",", "40", ",", "120", ",", "40", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "SeModule", "(", "40", ")", ",", "1", ")", ",", "\n", "Block", "(", "5", ",", "40", ",", "120", ",", "40", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "SeModule", "(", "40", ")", ",", "1", ")", ",", "\n", "Block", "(", "3", ",", "40", ",", "240", ",", "80", ",", "hswish", "(", ")", ",", "None", ",", "2", ")", ",", "\n", "Block", "(", "3", ",", "80", ",", "200", ",", "80", ",", "hswish", "(", ")", ",", "None", ",", "1", ")", ",", "\n", "Block", "(", "3", ",", "80", ",", "184", ",", "80", ",", "hswish", "(", ")", ",", "None", ",", "1", ")", ",", "\n", "Block", "(", "3", ",", "80", ",", "184", ",", "80", ",", "hswish", "(", ")", ",", "None", ",", "1", ")", ",", "\n", "Block", "(", "3", ",", "80", ",", "480", ",", "112", ",", "hswish", "(", ")", ",", "SeModule", "(", "112", ")", ",", "1", ")", ",", "\n", "Block", "(", "3", ",", "112", ",", "672", ",", "112", ",", "hswish", "(", ")", ",", "SeModule", "(", "112", ")", ",", "1", ")", ",", "\n", "Block", "(", "5", ",", "112", ",", "672", ",", "160", ",", "hswish", "(", ")", ",", "SeModule", "(", "160", ")", ",", "1", ")", ",", "\n", "Block", "(", "5", ",", "160", ",", "672", ",", "160", ",", "hswish", "(", ")", ",", "SeModule", "(", "160", ")", ",", "2", ")", ",", "\n", "Block", "(", "5", ",", "160", ",", "960", ",", "160", ",", "hswish", "(", ")", ",", "SeModule", "(", "160", ")", ",", "1", ")", ",", "\n", ")", "\n", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "160", ",", "960", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "960", ")", "\n", "self", ".", "hs2", "=", "hswish", "(", ")", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "960", ",", "1280", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1280", ")", "\n", "self", ".", "hs3", "=", "hswish", "(", ")", "\n", "self", ".", "linear4", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.MobileNetV3_Large.init_params": [[105, 118], ["mobilenetv3.MobileNetV3_Large.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.MobileNetV3_Large.load_param": [[119, 121], ["mobilenetv3.MobileNetV3_Large.init_params"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.MobileNetV3_Small.init_params"], ["", "", "", "", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.MobileNetV3_Large.forward": [[122, 131], ["mobilenetv3.MobileNetV3_Large.hs1", "mobilenetv3.MobileNetV3_Large.bneck", "mobilenetv3.MobileNetV3_Large.hs2", "mobilenetv3.MobileNetV3_Large.bn1", "mobilenetv3.MobileNetV3_Large.bn2", "mobilenetv3.MobileNetV3_Large.conv1", "mobilenetv3.MobileNetV3_Large.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "hs1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bneck", "(", "out", ")", "\n", "out", "=", "self", ".", "hs2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "#        out = F.avg_pool2d(out, [8,4])", "\n", "#        out = out.view(out.size(0), -1)", "\n", "#        out = self.hs3(self.bn3(self.linear3(out)))", "\n", "#        out = self.linear4(out)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.MobileNetV3_Small.__init__": [[133, 161], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv3.hswish", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv3.hswish", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "mobilenetv3.hswish", "torch.Linear", "torch.Linear", "torch.Linear", "mobilenetv3.MobileNetV3_Small.init_params", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "mobilenetv3.Block", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mobilenetv3.SeModule", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mobilenetv3.hswish", "mobilenetv3.SeModule", "mobilenetv3.hswish", "mobilenetv3.SeModule", "mobilenetv3.hswish", "mobilenetv3.SeModule", "mobilenetv3.hswish", "mobilenetv3.SeModule", "mobilenetv3.hswish", "mobilenetv3.SeModule", "mobilenetv3.hswish", "mobilenetv3.SeModule", "mobilenetv3.hswish", "mobilenetv3.SeModule", "mobilenetv3.hswish", "mobilenetv3.SeModule"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.MobileNetV3_Small.init_params"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "MobileNetV3_Small", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "hs1", "=", "hswish", "(", ")", "\n", "\n", "self", ".", "bneck", "=", "nn", ".", "Sequential", "(", "\n", "Block", "(", "3", ",", "16", ",", "16", ",", "16", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "SeModule", "(", "16", ")", ",", "2", ")", ",", "\n", "Block", "(", "3", ",", "16", ",", "72", ",", "24", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "None", ",", "2", ")", ",", "\n", "Block", "(", "3", ",", "24", ",", "88", ",", "24", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "None", ",", "1", ")", ",", "\n", "Block", "(", "5", ",", "24", ",", "96", ",", "40", ",", "hswish", "(", ")", ",", "SeModule", "(", "40", ")", ",", "2", ")", ",", "\n", "Block", "(", "5", ",", "40", ",", "240", ",", "40", ",", "hswish", "(", ")", ",", "SeModule", "(", "40", ")", ",", "1", ")", ",", "\n", "Block", "(", "5", ",", "40", ",", "240", ",", "40", ",", "hswish", "(", ")", ",", "SeModule", "(", "40", ")", ",", "1", ")", ",", "\n", "Block", "(", "5", ",", "40", ",", "120", ",", "48", ",", "hswish", "(", ")", ",", "SeModule", "(", "48", ")", ",", "1", ")", ",", "\n", "Block", "(", "5", ",", "48", ",", "144", ",", "48", ",", "hswish", "(", ")", ",", "SeModule", "(", "48", ")", ",", "1", ")", ",", "\n", "Block", "(", "5", ",", "48", ",", "288", ",", "96", ",", "hswish", "(", ")", ",", "SeModule", "(", "96", ")", ",", "2", ")", ",", "\n", "Block", "(", "5", ",", "96", ",", "576", ",", "96", ",", "hswish", "(", ")", ",", "SeModule", "(", "96", ")", ",", "1", ")", ",", "\n", "Block", "(", "5", ",", "96", ",", "576", ",", "96", ",", "hswish", "(", ")", ",", "SeModule", "(", "96", ")", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "96", ",", "576", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "576", ")", "\n", "self", ".", "hs2", "=", "hswish", "(", ")", "\n", "self", ".", "linear3", "=", "nn", ".", "Linear", "(", "576", ",", "1280", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1280", ")", "\n", "self", ".", "hs3", "=", "hswish", "(", ")", "\n", "self", ".", "linear4", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "self", ".", "init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.MobileNetV3_Small.init_params": [[162, 175], ["mobilenetv3.MobileNetV3_Small.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.MobileNetV3_Small.forward": [[176, 185], ["mobilenetv3.MobileNetV3_Small.hs1", "mobilenetv3.MobileNetV3_Small.bneck", "mobilenetv3.MobileNetV3_Small.hs2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenetv3.MobileNetV3_Small.view", "mobilenetv3.MobileNetV3_Small.hs3", "mobilenetv3.MobileNetV3_Small.linear4", "mobilenetv3.MobileNetV3_Small.bn1", "mobilenetv3.MobileNetV3_Small.bn2", "mobilenetv3.MobileNetV3_Small.size", "mobilenetv3.MobileNetV3_Small.bn3", "mobilenetv3.MobileNetV3_Small.conv1", "mobilenetv3.MobileNetV3_Small.conv2", "mobilenetv3.MobileNetV3_Small.linear3"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "hs1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bneck", "(", "out", ")", "\n", "out", "=", "self", ".", "hs2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "7", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "hs3", "(", "self", ".", "bn3", "(", "self", ".", "linear3", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "linear4", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.mobilenetv3.test": [[186, 191], ["mobilenetv3.MobileNetV3_Large", "torch.randn", "torch.randn", "torch.randn", "MobileNetV3_Large.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNetV3_Large", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "256", ",", "128", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet.BasicBlock.__init__": [[21, 30], ["torch.nn.Module.__init__", "resnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "resnet.conv3x3", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.conv3x3", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet.BasicBlock.forward": [[31, 48], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet.Bottleneck.__init__": [[53, 65], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet.Bottleneck.forward": [[66, 87], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet.ResNet.__init__": [[90, 101], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "last_stride", "=", "2", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet.ResNet._make_layer": [[102, 118], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet.ResNet.forward": [[119, 130], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet.ResNet.load_param": [[131, 137], ["torch.load", "[].copy_", "resnet.ResNet.state_dict"], "methods", ["None"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "'fc'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet.ResNet.random_init": [[138, 146], ["resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "", "def", "random_init", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet.conv3x3": [[13, 17], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.senet.SEModule.__init__": [[87, 96], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.senet.SEModule.forward": [[97, 105], ["senet.SEModule.avg_pool", "senet.SEModule.fc1", "senet.SEModule.relu", "senet.SEModule.fc2", "senet.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.senet.Bottleneck.forward": [[111, 132], ["senet.Bottleneck.conv1", "senet.Bottleneck.bn1", "senet.Bottleneck.relu", "senet.Bottleneck.conv2", "senet.Bottleneck.bn2", "senet.Bottleneck.relu", "senet.Bottleneck.conv3", "senet.Bottleneck.bn3", "senet.Bottleneck.relu", "senet.Bottleneck.downsample", "senet.Bottleneck.se_module"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "se_module", "(", "out", ")", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.senet.SEBottleneck.__init__": [[140, 156], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "senet.SEModule"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "SEBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "2", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", "*", "4", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "*", "4", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.senet.SEResNetBottleneck.__init__": [[166, 181], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "senet.SEModule"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "SEResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.senet.SEResNeXtBottleneck.__init__": [[189, 205], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "senet.SEModule", "math.floor"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "base_width", "=", "4", ")", ":", "\n", "        ", "super", "(", "SEResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "math", ".", "floor", "(", "planes", "*", "(", "base_width", "/", "64", ")", ")", "*", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "stride", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "se_module", "=", "SEModule", "(", "planes", "*", "4", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.senet.SENet.__init__": [[209, 325], ["torch.Module.__init__", "layer0_modules.append", "torch.Sequential", "torch.Sequential", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "collections.OrderedDict", "torch.Dropout", "torch.Dropout", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "groups", ",", "reduction", ",", "dropout_p", "=", "0.2", ",", "\n", "inplanes", "=", "128", ",", "input_3x3", "=", "True", ",", "downsample_kernel_size", "=", "3", ",", "\n", "downsample_padding", "=", "1", ",", "last_stride", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        block (nn.Module): Bottleneck class.\n            - For SENet154: SEBottleneck\n            - For SE-ResNet models: SEResNetBottleneck\n            - For SE-ResNeXt models:  SEResNeXtBottleneck\n        layers (list of ints): Number of residual blocks for 4 layers of the\n            network (layer1...layer4).\n        groups (int): Number of groups for the 3x3 convolution in each\n            bottleneck block.\n            - For SENet154: 64\n            - For SE-ResNet models: 1\n            - For SE-ResNeXt models:  32\n        reduction (int): Reduction ratio for Squeeze-and-Excitation modules.\n            - For all models: 16\n        dropout_p (float or None): Drop probability for the Dropout layer.\n            If `None` the Dropout layer is not used.\n            - For SENet154: 0.2\n            - For SE-ResNet models: None\n            - For SE-ResNeXt models: None\n        inplanes (int):  Number of input channels for layer1.\n            - For SENet154: 128\n            - For SE-ResNet models: 64\n            - For SE-ResNeXt models: 64\n        input_3x3 (bool): If `True`, use three 3x3 convolutions instead of\n            a single 7x7 convolution in layer0.\n            - For SENet154: True\n            - For SE-ResNet models: False\n            - For SE-ResNeXt models: False\n        downsample_kernel_size (int): Kernel size for downsampling convolutions\n            in layer2, layer3 and layer4.\n            - For SENet154: 3\n            - For SE-ResNet models: 1\n            - For SE-ResNeXt models: 1\n        downsample_padding (int): Padding for downsampling convolutions in\n            layer2, layer3 and layer4.\n            - For SENet154: 1\n            - For SE-ResNet models: 0\n            - For SE-ResNeXt models: 0\n        num_classes (int): Number of outputs in `last_linear` layer.\n            - For all models: 1000\n        \"\"\"", "\n", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "if", "input_3x3", ":", "\n", "            ", "layer0_modules", "=", "[", "\n", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn1'", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn2'", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ")", ",", "\n", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'conv3'", ",", "nn", ".", "Conv2d", "(", "64", ",", "inplanes", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn3'", ",", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", ")", ",", "\n", "(", "'relu3'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "layer0_modules", "=", "[", "\n", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "3", ",", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn1'", ",", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "]", "\n", "# To preserve compatibility with Caffe weights `ceil_mode=True`", "\n", "# is used instead of `padding=1`.", "\n", "", "layer0_modules", ".", "append", "(", "(", "'pool'", ",", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "\n", "ceil_mode", "=", "True", ")", ")", ")", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "layer0_modules", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "64", ",", "\n", "blocks", "=", "layers", "[", "0", "]", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "1", ",", "\n", "downsample_padding", "=", "0", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "128", ",", "\n", "blocks", "=", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "256", ",", "\n", "blocks", "=", "layers", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "planes", "=", "512", ",", "\n", "blocks", "=", "layers", "[", "3", "]", ",", "\n", "stride", "=", "last_stride", ",", "\n", "groups", "=", "groups", ",", "\n", "reduction", "=", "reduction", ",", "\n", "downsample_kernel_size", "=", "downsample_kernel_size", ",", "\n", "downsample_padding", "=", "downsample_padding", "\n", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_p", ")", "if", "dropout_p", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.senet.SENet._make_layer": [[326, 345], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "groups", ",", "reduction", ",", "stride", "=", "1", ",", "\n", "downsample_kernel_size", "=", "1", ",", "downsample_padding", "=", "0", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "downsample_kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "downsample_padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ",", "stride", ",", "\n", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", ",", "reduction", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.senet.SENet.load_param": [[346, 352], ["torch.load", "torch.load", "torch.load", "torch.load", "[].copy_", "senet.SENet.state_dict"], "methods", ["None"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "param_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "for", "i", "in", "param_dict", ":", "\n", "            ", "if", "'last_linear'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "param_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.senet.SENet.forward": [[353, 360], ["senet.SENet.layer0", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.BasicBlock.__init__": [[27, 36], ["torch.Module.__init__", "resnet_ibn_a.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_ibn_a.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.conv3x3", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.BasicBlock.forward": [[37, 54], ["resnet_ibn_a.BasicBlock.conv1", "resnet_ibn_a.BasicBlock.bn1", "resnet_ibn_a.BasicBlock.relu", "resnet_ibn_a.BasicBlock.conv2", "resnet_ibn_a.BasicBlock.bn2", "resnet_ibn_a.BasicBlock.relu", "resnet_ibn_a.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.IBN.__init__": [[57, 64], ["torch.Module.__init__", "int", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "IBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "self", ".", "half", "=", "half1", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half1", ",", "affine", "=", "True", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.IBN.forward": [[65, 71], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "resnet_ibn_a.IBN.IN", "resnet_ibn_a.IBN.BN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "split", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "half", ",", "1", ")", "\n", "out1", "=", "self", ".", "IN", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.Bottleneck.__init__": [[76, 91], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_ibn_a.IBN", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "ibn", "=", "False", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "if", "ibn", ":", "\n", "            ", "self", ".", "bn1", "=", "IBN", "(", "planes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.Bottleneck.forward": [[92, 113], ["resnet_ibn_a.Bottleneck.conv1", "resnet_ibn_a.Bottleneck.bn1", "resnet_ibn_a.Bottleneck.relu", "resnet_ibn_a.Bottleneck.conv2", "resnet_ibn_a.Bottleneck.bn2", "resnet_ibn_a.Bottleneck.relu", "resnet_ibn_a.Bottleneck.conv3", "resnet_ibn_a.Bottleneck.bn3", "resnet_ibn_a.Bottleneck.relu", "resnet_ibn_a.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.ResNet.__init__": [[116, 140], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_ibn_a.ResNet._make_layer", "resnet_ibn_a.ResNet._make_layer", "resnet_ibn_a.ResNet._make_layer", "resnet_ibn_a.ResNet._make_layer", "resnet_ibn_a.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "last_stride", "=", "2", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", ":", "\n", "        ", "scale", "=", "64", "\n", "self", ".", "inplanes", "=", "scale", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "scale", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "scale", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_stride", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.ResNet._make_layer": [[141, 160], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "ibn", "=", "True", "\n", "if", "planes", "==", "512", ":", "\n", "            ", "ibn", "=", "False", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "ibn", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "ibn", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.ResNet.forward": [[161, 173], ["resnet_ibn_a.ResNet.conv1", "resnet_ibn_a.ResNet.bn1", "resnet_ibn_a.ResNet.relu", "resnet_ibn_a.ResNet.maxpool", "resnet_ibn_a.ResNet.layer1", "resnet_ibn_a.ResNet.layer2", "resnet_ibn_a.ResNet.layer3", "resnet_ibn_a.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.ResNet.load_param": [[174, 187], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "param_dict.items", "[].copy_", "resnet_ibn_a.ResNet.state_dict"], "methods", ["None"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "model_weight", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "param_dict", "=", "model_weight", "[", "'state_dict'", "]", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "param_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "\n", "", "for", "i", "in", "new_state_dict", ":", "\n", "            ", "if", "'fc'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "new_state_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.conv3x3": [[18, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.resnet50_ibn_a": [[188, 198], ["resnet_ibn_a.ResNet"], "function", ["None"], ["", "", "", "def", "resnet50_ibn_a", "(", "last_stride", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "last_stride", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "#    if pretrained:", "\n", "#        model.load_state_dict(model_zoo.load_url(model_urls['resnet50']))", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.resnet101_ibn_a": [[200, 210], ["resnet_ibn_a.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101_ibn_a", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a.resnet152_ibn_a": [[212, 222], ["resnet_ibn_a.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152_ibn_a", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.BasicBlock.__init__": [[27, 36], ["torch.Module.__init__", "resnet_ibn_a_old.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_ibn_a_old.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.conv3x3", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.BasicBlock.forward": [[37, 54], ["resnet_ibn_a_old.BasicBlock.conv1", "resnet_ibn_a_old.BasicBlock.bn1", "resnet_ibn_a_old.BasicBlock.relu", "resnet_ibn_a_old.BasicBlock.conv2", "resnet_ibn_a_old.BasicBlock.bn2", "resnet_ibn_a_old.BasicBlock.relu", "resnet_ibn_a_old.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.Bottleneck.__init__": [[58, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.Bottleneck.forward": [[71, 92], ["resnet_ibn_a_old.Bottleneck.conv1", "resnet_ibn_a_old.Bottleneck.bn1", "resnet_ibn_a_old.Bottleneck.relu", "resnet_ibn_a_old.Bottleneck.conv2", "resnet_ibn_a_old.Bottleneck.bn2", "resnet_ibn_a_old.Bottleneck.relu", "resnet_ibn_a_old.Bottleneck.conv3", "resnet_ibn_a_old.Bottleneck.bn3", "resnet_ibn_a_old.Bottleneck.relu", "resnet_ibn_a_old.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ConvBNIN.__init__": [[94, 102], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ")", ":", "\n", "        ", "super", "(", "ConvBNIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "half1", "=", "int", "(", "planes", "/", "2", ")", "\n", "half2", "=", "planes", "-", "half1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "half1", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "half2", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN", "=", "nn", ".", "BatchNorm2d", "(", "half1", ")", "\n", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "half2", ",", "affine", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ConvBNIN.forward": [[103, 108], ["resnet_ibn_a_old.ConvBNIN.BN", "resnet_ibn_a_old.ConvBNIN.IN", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet_ibn_a_old.ConvBNIN.conv1", "resnet_ibn_a_old.ConvBNIN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out1", "=", "self", ".", "BN", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out2", "=", "self", ".", "IN", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.BottleneckIN.__init__": [[113, 124], ["torch.Module.__init__", "resnet_ibn_a_old.ConvBNIN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BottleneckIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convbnin", "=", "ConvBNIN", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.BottleneckIN.forward": [[125, 145], ["resnet_ibn_a_old.BottleneckIN.convbnin", "resnet_ibn_a_old.BottleneckIN.relu", "resnet_ibn_a_old.BottleneckIN.conv2", "resnet_ibn_a_old.BottleneckIN.bn2", "resnet_ibn_a_old.BottleneckIN.relu", "resnet_ibn_a_old.BottleneckIN.conv3", "resnet_ibn_a_old.BottleneckIN.bn3", "resnet_ibn_a_old.BottleneckIN.relu", "resnet_ibn_a_old.BottleneckIN.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "convbnin", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet.__init__": [[149, 173], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_ibn_a_old.ResNet._make_layer", "resnet_ibn_a_old.ResNet._make_layer", "resnet_ibn_a_old.ResNet._make_layer", "resnet_ibn_a_old.ResNet._make_layer", "resnet_ibn_a_old.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "last_stride", "=", "2", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", ":", "\n", "        ", "scale", "=", "64", "\n", "self", ".", "inplanes", "=", "scale", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "scale", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "scale", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "BottleneckIN", ",", "scale", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "BottleneckIN", ",", "scale", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "BottleneckIN", ",", "scale", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "scale", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_stride", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet._make_layer": [[174, 190], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet.forward": [[191, 203], ["resnet_ibn_a_old.ResNet.conv1", "resnet_ibn_a_old.ResNet.bn1", "resnet_ibn_a_old.ResNet.relu", "resnet_ibn_a_old.ResNet.maxpool", "resnet_ibn_a_old.ResNet.layer1", "resnet_ibn_a_old.ResNet.layer2", "resnet_ibn_a_old.ResNet.layer3", "resnet_ibn_a_old.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet.load_param": [[204, 217], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "param_dict.items", "[].copy_", "resnet_ibn_a_old.ResNet.state_dict"], "methods", ["None"], ["", "def", "load_param", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "model_weight", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "param_dict", "=", "model_weight", "[", "'state_dict'", "]", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "param_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "\n", "", "for", "i", "in", "new_state_dict", ":", "\n", "            ", "if", "'fc'", "in", "i", ":", "\n", "                ", "continue", "\n", "", "self", ".", "state_dict", "(", ")", "[", "i", "]", ".", "copy_", "(", "new_state_dict", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.conv3x3": [[18, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.resnet50_ibn_a_old": [[218, 227], ["resnet_ibn_a_old.ResNet"], "function", ["None"], ["", "", "", "def", "resnet50_ibn_a_old", "(", "last_stride", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "last_stride", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.resnet101_ibn_a_old": [[229, 239], ["resnet_ibn_a_old.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101_ibn_a_old", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.resnet152_ibn_a_old": [[241, 251], ["resnet_ibn_a_old.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152_ibn_a_old", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.demo.euclidean_dist_rank": [[9, 24], ["torch.pow().sum().expand", "torch.pow().sum().expand().t", "dist.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt", "x.size", "y.size", "y.t", "torch.pow().sum", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["def", "euclidean_dist_rank", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      x: pytorch Variable, with shape [m, d]\n      y: pytorch Variable, with shape [n, d]\n    Returns:\n      dist: pytorch Variable, with shape [m, n]\n    \"\"\"", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "yy", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist", "=", "xx", "+", "yy", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.demo.process_img": [[25, 30], ["PIL.Image.open().convert", "transform().unsqueeze", "img.to.to", "PIL.Image.open", "transform"], "function", ["None"], ["", "def", "process_img", "(", "img_path", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "transform", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.demo.main": [[34, 57], ["modeling.baseline.Baseline", "modeling.baseline.Baseline.load_param", "modeling.baseline.Baseline.to", "modeling.baseline.Baseline.eval", "torch.cat", "torch.nn.functional.normalize", "demo.euclidean_dist_rank", "print", "torch.no_grad", "demo.process_img", "modeling.baseline.Baseline.", "torch.nn.functional.normalize.append", "demo.process_img", "modeling.baseline.Baseline.", "torch.nn.functional.normalize.append", "demo.process_img", "modeling.baseline.Baseline.", "torch.nn.functional.normalize.append"], "function", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet.load_param", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.compute_threshold.normalize", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.euclidean_dist_rank", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.demo.process_img", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.demo.process_img", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.demo.process_img"], ["def", "main", "(", ")", ":", "\n", "    ", "model", "=", "Baseline", "(", "num_classes", "=", "702", ",", "last_stride", "=", "1", ",", "model_path", "=", "' '", ",", "stn", "=", "'no'", ",", "model_name", "=", "'resnet50_ibn_a'", ",", "pretrain_choice", "=", "' '", ")", "\n", "model", ".", "load_param", "(", "'models/resnet50_ibn_a/duke_resnet50_ibn_a_model.pth'", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "feats", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img1", "=", "process_img", "(", "'/home/zzg/Datasets/DukeReiD/DukeMTMC-reID/query/0033_c1_f0057706.jpg'", ")", "\n", "feat1", "=", "model", "(", "img1", ")", "\n", "feats", ".", "append", "(", "feat1", ")", "\n", "\n", "img2", "=", "process_img", "(", "'/home/zzg/Datasets/DukeReiD/DukeMTMC-reID/query/0033_c6_f0045755.jpg'", ")", "\n", "feat2", "=", "model", "(", "img2", ")", "\n", "feats", ".", "append", "(", "feat2", ")", "\n", "\n", "img3", "=", "process_img", "(", "'/home/zzg/Datasets/DukeReiD/DukeMTMC-reID/query/0034_c2_f0057453.jpg'", ")", "\n", "feat3", "=", "model", "(", "img3", ")", "\n", "feats", ".", "append", "(", "feat3", ")", "\n", "", "feats", "=", "torch", ".", "cat", "(", "feats", ",", "dim", "=", "0", ")", "\n", "feats", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "feats", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "dist", "=", "euclidean_dist_rank", "(", "feats", ",", "feats", ")", "\n", "print", "(", "dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.train.train": [[25, 70], ["data.make_data_loader", "modeling.build_model", "print", "solver.make_optimizer", "layers.make_loss", "engine.trainer.do_train", "eval", "print", "config.cfg.MODEL.PRETRAIN_PATH.replace", "print", "modeling.build_model.load_state_dict", "solver.make_optimizer.load_state_dict", "solver.WarmupMultiStepLR", "torch.load", "torch.load", "solver.WarmupMultiStepLR", "print", "[].split", "[].split", "config.cfg.MODEL.PRETRAIN_PATH.split", "config.cfg"], "function", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.data.build.make_data_loader", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.modeling.__init__.build_model", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.build.make_optimizer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.__init__.make_loss", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.engine.trainer.do_train"], ["def", "train", "(", "cfg", ")", ":", "\n", "# prepare dataset", "\n", "    ", "train_loader", ",", "val_loader", ",", "num_query", ",", "num_classes", "=", "make_data_loader", "(", "cfg", ")", "\n", "\n", "# prepare model", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_classes", ")", "\n", "\n", "\n", "print", "(", "'Train with the loss type is'", ",", "cfg", ".", "MODEL", ".", "METRIC_LOSS_TYPE", ")", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "# scheduler = WarmupMultiStepLR(optimizer, cfg.SOLVER.STEPS, cfg.SOLVER.GAMMA, cfg.SOLVER.WARMUP_FACTOR,", "\n", "#                               cfg.SOLVER.WARMUP_ITERS, cfg.SOLVER.WARMUP_METHOD)", "\n", "\n", "loss_func", "=", "make_loss", "(", "cfg", ",", "num_classes", ")", "# modified by gu", "\n", "\n", "# Add for using self trained model", "\n", "if", "cfg", ".", "MODEL", ".", "PRETRAIN_CHOICE", "==", "'self'", ":", "\n", "        ", "start_epoch", "=", "eval", "(", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "print", "(", "'Start epoch:'", ",", "start_epoch", ")", "\n", "path_to_optimizer", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", ".", "replace", "(", "'model'", ",", "'optimizer'", ")", "\n", "print", "(", "'Path to the checkpoint of optimizer:'", ",", "path_to_optimizer", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", ")", ")", "\n", "optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path_to_optimizer", ")", ")", "\n", "scheduler", "=", "WarmupMultiStepLR", "(", "optimizer", ",", "cfg", ".", "SOLVER", ".", "STEPS", ",", "cfg", ".", "SOLVER", ".", "GAMMA", ",", "cfg", ".", "SOLVER", ".", "WARMUP_FACTOR", ",", "\n", "cfg", ".", "SOLVER", ".", "WARMUP_ITERS", ",", "cfg", ".", "SOLVER", ".", "WARMUP_METHOD", ",", "start_epoch", ")", "\n", "\n", "", "elif", "cfg", ".", "MODEL", ".", "PRETRAIN_CHOICE", "==", "'imagenet'", ":", "\n", "        ", "start_epoch", "=", "0", "\n", "scheduler", "=", "WarmupMultiStepLR", "(", "optimizer", ",", "cfg", ".", "SOLVER", ".", "STEPS", ",", "cfg", ".", "SOLVER", ".", "GAMMA", ",", "cfg", ".", "SOLVER", ".", "WARMUP_FACTOR", ",", "\n", "cfg", ".", "SOLVER", ".", "WARMUP_ITERS", ",", "cfg", ".", "SOLVER", ".", "WARMUP_METHOD", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Only support pretrain_choice for imagenet and self, but got {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "PRETRAIN_CHOICE", ")", ")", "\n", "\n", "", "arguments", "=", "{", "}", "\n", "\n", "do_train", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "# modify for using self trained model", "\n", "loss_func", ",", "\n", "num_query", ",", "\n", "start_epoch", "# add for using self trained model", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.train.main": [[73, 109], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.cfg.merge_from_list", "config.cfg.freeze", "utils.logger.setup_logger", "utils.logger.setup_logger.info", "utils.logger.setup_logger.info", "utils.logger.setup_logger.info", "train.train", "int", "config.cfg.merge_from_file", "os.makedirs", "utils.logger.setup_logger.info", "os.path.exists", "open", "utils.logger.setup_logger.info", "cf.read"], "function", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.logger.setup_logger", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.train.train"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"ReID Baseline Training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config_file\"", ",", "default", "=", "\"\"", ",", "help", "=", "\"path to config file\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "help", "=", "\"Modify config options using the command-line\"", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", "and", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"reid_baseline\"", ",", "output_dir", ",", "0", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUS\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "'r'", ")", "as", "cf", ":", "\n", "            ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_ID", "# new add by gu", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "train", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.test.main": [[23, 64], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.cfg.merge_from_list", "config.cfg.freeze", "utils.logger.setup_logger", "utils.logger.setup_logger.info", "utils.logger.setup_logger.info", "utils.logger.setup_logger.info", "data.make_data_loader", "modeling.build_model", "modeling.build_model.load_param", "engine.inference.inference", "int", "config.cfg.merge_from_file", "os.mkdir", "utils.logger.setup_logger.info", "os.path.exists", "open", "utils.logger.setup_logger.info", "cf.read"], "function", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.logger.setup_logger", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.data.build.make_data_loader", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.modeling.__init__.build_model", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet.load_param", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.engine.inference.inference"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"ReID Baseline Inference\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config_file\"", ",", "default", "=", "\"\"", ",", "help", "=", "\"path to config file\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "help", "=", "\"Modify config options using the command-line\"", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", "and", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"reid_baseline\"", ",", "output_dir", ",", "0", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUS\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "'r'", ")", "as", "cf", ":", "\n", "            ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_ID", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "train_loader", ",", "val_loader", ",", "num_query", ",", "num_classes", "=", "make_data_loader", "(", "cfg", ")", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_classes", ")", "\n", "model", ".", "load_param", "(", "cfg", ".", "TEST", ".", "WEIGHT", ")", "\n", "\n", "inference", "(", "cfg", ",", "model", ",", "val_loader", ",", "num_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.compute_threshold.normalize": [[21, 30], ["torch.norm().expand_as", "torch.norm"], "function", ["None"], ["def", "normalize", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Normalizing to unit length along the specified dimension.\n    Args:\n      x: pytorch Variable\n    Returns:\n      x: pytorch Variable, same shape as input\n    \"\"\"", "\n", "x", "=", "1.", "*", "x", "/", "(", "torch", ".", "norm", "(", "x", ",", "2", ",", "axis", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "x", ")", "+", "1e-12", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.compute_threshold.euclidean_dist": [[31, 46], ["torch.pow().sum().expand", "torch.pow().sum().expand().t", "dist.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt", "x.size", "y.size", "y.t", "torch.pow().sum", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      x: pytorch Variable, with shape [m, d]\n      y: pytorch Variable, with shape [n, d]\n    Returns:\n      dist: pytorch Variable, with shape [m, n]\n    \"\"\"", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "yy", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist", "=", "xx", "+", "yy", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.compute_threshold.hard_example_mining": [[47, 65], ["dist_mat.size", "labels.expand().eq", "labels.expand().ne", "torch.max", "torch.min", "dist_ap.squeeze.squeeze", "dist_an.squeeze.squeeze", "len", "dist_mat.size", "dist_mat.size", "labels.expand().t", "labels.expand().t", "dist_mat[].contiguous().view", "dist_mat[].contiguous().view", "dist_mat.size", "labels.expand", "labels.expand", "labels.expand", "labels.expand", "dist_mat[].contiguous", "dist_mat[].contiguous"], "function", ["None"], ["", "def", "hard_example_mining", "(", "dist_mat", ",", "labels", ",", "return_inds", "=", "False", ")", ":", "\n", "    ", "assert", "len", "(", "dist_mat", ".", "size", "(", ")", ")", "==", "2", "\n", "assert", "dist_mat", ".", "size", "(", "0", ")", "==", "dist_mat", ".", "size", "(", "1", ")", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "\n", "# shape [N, N]", "\n", "is_pos", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "eq", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "is_neg", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "ne", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "\n", "dist_ap", ",", "relative_p_inds", "=", "torch", ".", "max", "(", "dist_mat", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "dist_an", ",", "relative_n_inds", "=", "torch", ".", "min", "(", "\n", "dist_mat", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "# shape [N]", "\n", "dist_ap", "=", "dist_ap", ".", "squeeze", "(", "1", ")", "\n", "dist_an", "=", "dist_an", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "dist_ap", ",", "dist_an", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.compute_threshold.inference_threshold": [[66, 80], ["model.to", "model.eval", "enumerate", "torch.no_grad", "img.cuda.cuda", "target.cuda.cuda", "model", "compute_threshold.normalize", "compute_threshold.euclidean_dist", "compute_threshold.hard_example_mining", "writer.add_histogram", "writer.add_histogram", "config.cfg"], "function", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.compute_threshold.normalize", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.compute_threshold.euclidean_dist", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.compute_threshold.hard_example_mining"], ["", "def", "inference_threshold", "(", "cfg", ",", "model", ",", "data_loader", ",", "num_query", ")", ":", "\n", "    ", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "img", ",", "target", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "feat", "=", "model", "(", "img", ")", "\n", "feat", "=", "normalize", "(", "feat", ",", "axis", "=", "-", "1", ")", "\n", "dist_mat", "=", "euclidean_dist", "(", "feat", ",", "feat", ")", "\n", "dist_ap", ",", "dist_an", "=", "hard_example_mining", "(", "dist_mat", ",", "target", ")", "\n", "writer", ".", "add_histogram", "(", "'dist_ap'", ",", "dist_ap", ",", "batch_idx", ")", "\n", "writer", ".", "add_histogram", "(", "'dist_an'", ",", "dist_an", ",", "batch_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.compute_threshold.main": [[82, 124], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.cfg.merge_from_list", "config.cfg.freeze", "utils.logger.setup_logger", "utils.logger.setup_logger.info", "utils.logger.setup_logger.info", "utils.logger.setup_logger.info", "data.make_data_loader", "modeling.build_model", "modeling.build_model.load_param", "compute_threshold.inference_threshold", "writer.close", "int", "config.cfg.merge_from_file", "os.mkdir", "utils.logger.setup_logger.info", "os.path.exists", "open", "utils.logger.setup_logger.info", "cf.read"], "function", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.logger.setup_logger", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.data.build.make_data_loader", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.modeling.__init__.build_model", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.backbones.resnet_ibn_a_old.ResNet.load_param", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.compute_threshold.inference_threshold"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"ReID Inference\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config_file\"", ",", "default", "=", "\"\"", ",", "help", "=", "\"path to config file\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "help", "=", "\"Modify config options using the command-line\"", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", "and", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"reid_baseline\"", ",", "output_dir", ",", "0", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUS\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "'r'", ")", "as", "cf", ":", "\n", "            ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_ID", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "train_loader", ",", "val_loader", ",", "num_query", ",", "num_classes", "=", "make_data_loader", "(", "cfg", ")", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_classes", ")", "\n", "model", ".", "load_param", "(", "cfg", ".", "TEST", ".", "WEIGHT", ")", "\n", "\n", "inference_threshold", "(", "cfg", ",", "model", ",", "train_loader", ",", "num_query", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_loss.RankedLoss.__init__": [[75, 79], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "margin", "=", "None", ",", "alpha", "=", "None", ",", "tval", "=", "None", ")", ":", "\n", "        ", "self", ".", "margin", "=", "margin", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "tval", "=", "tval", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_loss.RankedLoss.__call__": [[80, 87], ["reanked_loss.euclidean_dist_rank", "reanked_loss.rank_loss", "reanked_loss.normalize_rank"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.euclidean_dist_rank", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_loss.rank_loss", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.normalize_rank"], ["", "def", "__call__", "(", "self", ",", "global_feat", ",", "labels", ",", "normalize_feature", "=", "True", ")", ":", "\n", "        ", "if", "normalize_feature", ":", "\n", "            ", "global_feat", "=", "normalize_rank", "(", "global_feat", ",", "axis", "=", "-", "1", ")", "\n", "", "dist_mat", "=", "euclidean_dist_rank", "(", "global_feat", ",", "global_feat", ")", "\n", "total_loss", "=", "rank_loss", "(", "dist_mat", ",", "labels", ",", "self", ".", "margin", ",", "self", ".", "alpha", ",", "self", ".", "tval", ")", "\n", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_loss.CrossEntropyLabelSmooth.__init__": [[99, 105], ["torch.nn.Module.__init__", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", "=", "0.1", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_loss.CrossEntropyLabelSmooth.forward": [[106, 118], ["reanked_loss.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros().scatter_", "targets.cuda.cuda.unsqueeze().data.cpu", "targets.cuda.cuda.cuda", "torch.zeros", "reanked_loss.CrossEntropyLabelSmooth.size", "targets.cuda.cuda.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: prediction matrix (before softmax) with shape (batch_size, num_classes)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros", "(", "log_probs", ".", "size", "(", ")", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "1", ")", "\n", "if", "self", ".", "use_gpu", ":", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_loss.normalize_rank": [[9, 18], ["torch.norm().expand_as", "torch.norm"], "function", ["None"], ["def", "normalize_rank", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Normalizing to unit length along the specified dimension.\n    Args:\n      x: pytorch Variable\n    Returns:\n      x: pytorch Variable, same shape as input\n    \"\"\"", "\n", "x", "=", "1.", "*", "x", "/", "(", "torch", ".", "norm", "(", "x", ",", "2", ",", "axis", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "x", ")", "+", "1e-12", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_loss.euclidean_dist_rank": [[19, 34], ["torch.pow().sum().expand", "torch.pow().sum().expand().t", "dist.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt", "x.size", "y.size", "y.t", "torch.pow().sum", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "euclidean_dist_rank", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      x: pytorch Variable, with shape [m, d]\n      y: pytorch Variable, with shape [n, d]\n    Returns:\n      dist: pytorch Variable, with shape [m, n]\n    \"\"\"", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "yy", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist", "=", "xx", "+", "yy", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_loss.rank_loss": [[35, 71], ["dist_mat.size", "range", "len", "dist_mat.size", "dist_mat.size", "labels.eq", "labels.ne", "torch.clamp", "torch.sum", "torch.div", "torch.lt", "torch.exp", "torch.sum", "torch.div", "dist_mat.size", "torch.add", "torch.clamp.size", "float", "torch.sum", "torch.mul"], "function", ["None"], ["", "def", "rank_loss", "(", "dist_mat", ",", "labels", ",", "margin", ",", "alpha", ",", "tval", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      dist_mat: pytorch Variable, pair wise distance between samples, shape [N, N]\n      labels: pytorch LongTensor, with shape [N]\n      \n    \"\"\"", "\n", "assert", "len", "(", "dist_mat", ".", "size", "(", ")", ")", "==", "2", "\n", "assert", "dist_mat", ".", "size", "(", "0", ")", "==", "dist_mat", ".", "size", "(", "1", ")", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "\n", "total_loss", "=", "0.0", "\n", "for", "ind", "in", "range", "(", "N", ")", ":", "\n", "        ", "is_pos", "=", "labels", ".", "eq", "(", "labels", "[", "ind", "]", ")", "\n", "is_pos", "[", "ind", "]", "=", "0", "\n", "is_neg", "=", "labels", ".", "ne", "(", "labels", "[", "ind", "]", ")", "\n", "\n", "dist_ap", "=", "dist_mat", "[", "ind", "]", "[", "is_pos", "]", "\n", "dist_an", "=", "dist_mat", "[", "ind", "]", "[", "is_neg", "]", "\n", "\n", "ap_is_pos", "=", "torch", ".", "clamp", "(", "torch", ".", "add", "(", "dist_ap", ",", "margin", "-", "alpha", ")", ",", "min", "=", "0.0", ")", "\n", "ap_pos_num", "=", "ap_is_pos", ".", "size", "(", "0", ")", "+", "1e-5", "\n", "ap_pos_val_sum", "=", "torch", ".", "sum", "(", "ap_is_pos", ")", "\n", "loss_ap", "=", "torch", ".", "div", "(", "ap_pos_val_sum", ",", "float", "(", "ap_pos_num", ")", ")", "\n", "\n", "an_is_pos", "=", "torch", ".", "lt", "(", "dist_an", ",", "alpha", ")", "\n", "an_less_alpha", "=", "dist_an", "[", "an_is_pos", "]", "\n", "an_weight", "=", "torch", ".", "exp", "(", "tval", "*", "(", "-", "1", "*", "an_less_alpha", "+", "alpha", ")", ")", "\n", "an_weight_sum", "=", "torch", ".", "sum", "(", "an_weight", ")", "+", "1e-5", "\n", "an_dist_lm", "=", "alpha", "-", "an_less_alpha", "\n", "an_ln_sum", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "an_dist_lm", ",", "an_weight", ")", ")", "\n", "loss_an", "=", "torch", ".", "div", "(", "an_ln_sum", ",", "an_weight_sum", ")", "\n", "\n", "total_loss", "=", "total_loss", "+", "loss_ap", "+", "loss_an", "\n", "", "total_loss", "=", "total_loss", "*", "1.0", "/", "N", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.CRankedLoss.__init__": [[89, 93], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "margin", "=", "None", ",", "alpha", "=", "None", ",", "tval", "=", "None", ")", ":", "\n", "        ", "self", ".", "margin", "=", "margin", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "tval", "=", "tval", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.CRankedLoss.__call__": [[94, 130], ["normalize_rank.clone", "clu_features.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "numpy.unique", "labels.clone().cpu().numpy", "numpy.unique", "reanked_clu_loss.normalize_rank", "scipy.cluster.vq.kmeans", "scipy.cluster.vq.vq", "numpy.where", "numpy.where", "reanked_clu_loss.euclidean_dist_rank", "reanked_clu_loss.pocrank_loss", "clu_features.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "reanked_clu_loss.euclidean_dist_rank", "reanked_clu_loss.necrank_loss", "labels.clone().cpu", "grouplabel.size", "clu_features.detach().cpu().numpy.detach().cpu().numpy.detach", "labels.clone"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.normalize_rank", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.euclidean_dist_rank", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.pocrank_loss", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.euclidean_dist_rank", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.necrank_loss"], ["", "def", "__call__", "(", "self", ",", "global_feat", ",", "labels", ",", "normalize_feature", "=", "True", ")", ":", "\n", "        ", "if", "normalize_feature", ":", "\n", "            ", "global_feat", "=", "normalize_rank", "(", "global_feat", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "clu_features", "=", "global_feat", ".", "clone", "(", ")", "\n", "clu_features", "=", "clu_features", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "centroid", "=", "kmeans", "(", "clu_features", ",", "8", ",", "iter", "=", "10", ")", "[", "0", "]", "\n", "appearanceGroups", "=", "vq", "(", "clu_features", ",", "centroid", ")", "[", "0", "]", "\n", "\n", "allGroups", "=", "np", ".", "unique", "(", "appearanceGroups", ")", "\n", "\n", "total_loss", "=", "0", "\n", "for", "group", "in", "allGroups", ":", "\n", "            ", "indices", "=", "np", ".", "where", "(", "appearanceGroups", "==", "group", ")", "\n", "groupfeatures", "=", "global_feat", "[", "indices", "]", "\n", "grouplabel", "=", "labels", "[", "indices", "]", "\n", "\n", "if", "(", "grouplabel", ".", "size", "(", ")", "[", "0", "]", ">", "3", ")", ":", "\n", "                ", "nedist_mat", "=", "euclidean_dist_rank", "(", "groupfeatures", ",", "groupfeatures", ")", "\n", "ne_loss", "=", "necrank_loss", "(", "nedist_mat", ",", "grouplabel", ",", "self", ".", "margin", ",", "self", ".", "alpha", ",", "self", ".", "tval", ")", "\n", "\n", "total_loss", "+=", "ne_loss", "\n", "\n", "", "", "labelgp", "=", "labels", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "IDGroup", "=", "np", ".", "unique", "(", "labelgp", ")", "\n", "for", "ind", "in", "IDGroup", ":", "\n", "            ", "is_pos", "=", "np", ".", "where", "(", "labelgp", "==", "ind", ")", "\n", "posfeatures", "=", "global_feat", "[", "is_pos", "]", "\n", "\n", "posdist_mat", "=", "euclidean_dist_rank", "(", "posfeatures", ",", "posfeatures", ")", "\n", "\n", "pos_loss", "=", "pocrank_loss", "(", "posdist_mat", ",", "self", ".", "margin", ",", "self", ".", "alpha", ",", "self", ".", "tval", ")", "\n", "total_loss", "+=", "pos_loss", "\n", "\n", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.normalize_rank": [[11, 20], ["torch.norm().expand_as", "torch.norm"], "function", ["None"], ["def", "normalize_rank", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Normalizing to unit length along the specified dimension.\n    Args:\n      x: pytorch Variable\n    Returns:\n      x: pytorch Variable, same shape as input\n    \"\"\"", "\n", "x", "=", "1.", "*", "x", "/", "(", "torch", ".", "norm", "(", "x", ",", "2", ",", "axis", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "x", ")", "+", "1e-12", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.euclidean_dist_rank": [[21, 36], ["torch.pow().sum().expand", "torch.pow().sum().expand().t", "dist.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt", "x.size", "y.size", "y.t", "torch.pow().sum", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "euclidean_dist_rank", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      x: pytorch Variable, with shape [m, d]\n      y: pytorch Variable, with shape [n, d]\n    Returns:\n      dist: pytorch Variable, with shape [m, n]\n    \"\"\"", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "yy", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist", "=", "xx", "+", "yy", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.necrank_loss": [[37, 63], ["dist_mat.size", "range", "len", "dist_mat.size", "dist_mat.size", "labels.ne", "torch.lt", "torch.exp", "torch.sum", "torch.div", "dist_mat.size", "torch.sum", "torch.mul"], "function", ["None"], ["", "def", "necrank_loss", "(", "dist_mat", ",", "labels", ",", "margin", ",", "alpha", ",", "tval", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      dist_mat: pytorch Variable, pair wise distance between samples, shape [N, N]\n      labels: pytorch LongTensor, with shape [N]\n      \n    \"\"\"", "\n", "assert", "len", "(", "dist_mat", ".", "size", "(", ")", ")", "==", "2", "\n", "assert", "dist_mat", ".", "size", "(", "0", ")", "==", "dist_mat", ".", "size", "(", "1", ")", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "\n", "total_loss", "=", "0.0", "\n", "for", "ind", "in", "range", "(", "N", ")", ":", "\n", "        ", "is_neg", "=", "labels", ".", "ne", "(", "labels", "[", "ind", "]", ")", "\n", "dist_an", "=", "dist_mat", "[", "ind", "]", "[", "is_neg", "]", "\n", "an_is_pos", "=", "torch", ".", "lt", "(", "dist_an", ",", "alpha", ")", "\n", "an_less_alpha", "=", "dist_an", "[", "an_is_pos", "]", "\n", "an_weight", "=", "torch", ".", "exp", "(", "tval", "*", "(", "-", "1", "*", "an_less_alpha", "+", "alpha", ")", ")", "\n", "an_weight_sum", "=", "torch", ".", "sum", "(", "an_weight", ")", "+", "1e-5", "\n", "an_dist_lm", "=", "alpha", "-", "an_less_alpha", "\n", "an_ln_sum", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "an_dist_lm", ",", "an_weight", ")", ")", "\n", "loss_an", "=", "torch", ".", "div", "(", "an_ln_sum", ",", "an_weight_sum", ")", "\n", "\n", "total_loss", "=", "total_loss", "+", "loss_an", "\n", "", "total_loss", "=", "total_loss", "*", "1.0", "/", "N", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.reanked_clu_loss.pocrank_loss": [[64, 87], ["dist_mat.size", "range", "len", "dist_mat.size", "dist_mat.size", "torch.clamp", "torch.sum", "torch.div", "dist_mat.size", "torch.add", "torch.clamp.size", "float"], "function", ["None"], ["", "def", "pocrank_loss", "(", "dist_mat", ",", "margin", ",", "alpha", ",", "tval", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      dist_mat: pytorch Variable, pair wise distance between samples, shape [N, N]\n      labels: pytorch LongTensor, with shape [N]\n      \n    \"\"\"", "\n", "assert", "len", "(", "dist_mat", ".", "size", "(", ")", ")", "==", "2", "\n", "assert", "dist_mat", ".", "size", "(", "0", ")", "==", "dist_mat", ".", "size", "(", "1", ")", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "\n", "total_loss", "=", "0.0", "\n", "for", "ind", "in", "range", "(", "N", ")", ":", "\n", "        ", "dist_ap", "=", "dist_mat", "[", "ind", "]", "\n", "\n", "ap_is_pos", "=", "torch", ".", "clamp", "(", "torch", ".", "add", "(", "dist_ap", ",", "margin", "-", "alpha", ")", ",", "min", "=", "0.0", ")", "\n", "ap_pos_num", "=", "ap_is_pos", ".", "size", "(", "0", ")", "+", "1e-5", "\n", "ap_pos_val_sum", "=", "torch", ".", "sum", "(", "ap_is_pos", ")", "\n", "loss_ap", "=", "torch", ".", "div", "(", "ap_pos_val_sum", ",", "float", "(", "ap_pos_num", ")", ")", "\n", "\n", "total_loss", "=", "total_loss", "+", "loss_ap", "\n", "", "total_loss", "=", "total_loss", "*", "1.0", "/", "N", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.layers.__init__.make_loss": [[8, 53], ["reanked_loss.RankedLoss", "reanked_loss.CrossEntropyLabelSmooth", "print", "reanked_clu_loss.CRankedLoss", "print", "torch.cross_entropy", "reanked_loss.RankedLoss.", "print", "reanked_clu_loss.CRankedLoss.", "print", "reanked_loss.CrossEntropyLabelSmooth.", "torch.cross_entropy", "reanked_loss.RankedLoss.", "reanked_loss.CrossEntropyLabelSmooth.", "torch.cross_entropy", "reanked_loss.RankedLoss.", "reanked_clu_loss.CRankedLoss.", "reanked_clu_loss.CRankedLoss."], "function", ["None"], []], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.engine.inference.create_supervised_evaluator": [[15, 47], ["ignite.engine.Engine", "metrics.items", "nn.DataParallel.to", "nn.DataParallel.eval", "metric.attach", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "torch.no_grad", "torch.no_grad", "nn.DataParallel.", "data.to", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["None"], ["def", "create_supervised_evaluator", "(", "model", ",", "metrics", ",", "\n", "device", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Factory function for creating an evaluator for supervised models\n\n    Args:\n        model (`torch.nn.Module`): the model to train\n        metrics (dict of str - :class:`ignite.metrics.Metric`): a map of metric names to Metrics\n        device (str, optional): device type specification (default: None).\n            Applies to both model and batches.\n    Returns:\n        Engine: an evaluator engine with supervised inference function\n    \"\"\"", "\n", "if", "device", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "def", "_inference", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "data", ",", "pids", ",", "camids", "=", "batch", "\n", "data", "=", "data", ".", "to", "(", "device", ")", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">=", "1", "else", "data", "\n", "feat", "=", "model", "(", "data", ")", "\n", "return", "feat", ",", "pids", ",", "camids", "\n", "\n", "", "", "engine", "=", "Engine", "(", "_inference", ")", "\n", "\n", "for", "name", ",", "metric", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "metric", ".", "attach", "(", "engine", ",", "name", ")", "\n", "\n", "", "return", "engine", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.engine.inference.inference": [[49, 76], ["logging.getLogger", "logging.getLogger.info", "create_supervised_evaluator.run", "logging.getLogger.info", "logging.getLogger.info", "print", "inference.create_supervised_evaluator", "logging.getLogger.info", "print", "inference.create_supervised_evaluator", "print", "utils.reid_metric.R1_mAP", "utils.reid_metric.R1_mAP_reranking"], "function", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.engine.trainer.create_supervised_evaluator", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.engine.trainer.create_supervised_evaluator"], ["", "def", "inference", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "val_loader", ",", "\n", "num_query", "\n", ")", ":", "\n", "    ", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"reid_baseline.inference\"", ")", "\n", "logger", ".", "info", "(", "\"Enter inferencing\"", ")", "\n", "if", "cfg", ".", "TEST", ".", "RE_RANKING", "==", "'no'", ":", "\n", "        ", "print", "(", "\"Create evaluator\"", ")", "\n", "evaluator", "=", "create_supervised_evaluator", "(", "model", ",", "metrics", "=", "{", "'r1_mAP'", ":", "R1_mAP", "(", "num_query", ",", "max_rank", "=", "50", ",", "feat_norm", "=", "cfg", ".", "TEST", ".", "FEAT_NORM", ")", "}", ",", "\n", "device", "=", "device", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "RE_RANKING", "==", "'yes'", ":", "\n", "        ", "print", "(", "\"Create evaluator for reranking\"", ")", "\n", "evaluator", "=", "create_supervised_evaluator", "(", "model", ",", "metrics", "=", "{", "'r1_mAP'", ":", "R1_mAP_reranking", "(", "num_query", ",", "max_rank", "=", "50", ",", "feat_norm", "=", "cfg", ".", "TEST", ".", "FEAT_NORM", ")", "}", ",", "\n", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unsupported re_ranking config. Only support for no or yes, but got {}.\"", ".", "format", "(", "cfg", ".", "TEST", ".", "RE_RANKING", ")", ")", "\n", "\n", "", "evaluator", ".", "run", "(", "val_loader", ")", "\n", "cmc", ",", "mAP", "=", "evaluator", ".", "state", ".", "metrics", "[", "'r1_mAP'", "]", "\n", "logger", ".", "info", "(", "'Validation Results'", ")", "\n", "logger", ".", "info", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "        ", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.engine.trainer.create_supervised_trainer": [[20, 55], ["ignite.engine.Engine", "nn.DataParallel.to", "nn.DataParallel.train", "optimizer.zero_grad", "nn.DataParallel.", "loss_fn", "loss_fn.backward", "optimizer.step", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "img.to", "target.to", "loss_fn.item", "acc.item", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "score.max", "ignite.engine.Events.EPOCH_COMPLETED", "ignite.engine.Events.STARTED", "ignite.engine.Events.EPOCH_STARTED", "ignite.engine.Events.ITERATION_COMPLETED", "ignite.engine.Events.EPOCH_COMPLETED", "ignite.engine.Events.EPOCH_COMPLETED"], "function", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.tools.train.train"], ["def", "create_supervised_trainer", "(", "model", ",", "optimizer", ",", "loss_fn", ",", "\n", "device", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Factory function for creating a trainer for supervised models\n\n    Args:\n        model (`torch.nn.Module`): the model to train\n        optimizer (`torch.optim.Optimizer`): the optimizer to use\n        loss_fn (torch.nn loss function): the loss function to use\n        device (str, optional): device type specification (default: None).\n            Applies to both model and batches.\n\n    Returns:\n        Engine: a trainer engine with supervised update function\n    \"\"\"", "\n", "if", "device", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "def", "_update", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "img", ",", "target", "=", "batch", "\n", "img", "=", "img", ".", "to", "(", "device", ")", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">=", "1", "else", "img", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">=", "1", "else", "target", "\n", "score", ",", "feat", "=", "model", "(", "img", ")", "\n", "loss", "=", "loss_fn", "(", "score", ",", "feat", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# compute acc", "\n", "acc", "=", "(", "score", ".", "max", "(", "1", ")", "[", "1", "]", "==", "target", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", ",", "acc", ".", "item", "(", ")", "\n", "\n", "", "return", "Engine", "(", "_update", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.engine.trainer.create_supervised_evaluator": [[56, 88], ["ignite.engine.Engine", "metrics.items", "nn.DataParallel.to", "nn.DataParallel.eval", "metric.attach", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "torch.no_grad", "torch.no_grad", "nn.DataParallel.", "data.to", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["None"], ["", "def", "create_supervised_evaluator", "(", "model", ",", "metrics", ",", "\n", "device", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Factory function for creating an evaluator for supervised models\n\n    Args:\n        model (`torch.nn.Module`): the model to train\n        metrics (dict of str - :class:`ignite.metrics.Metric`): a map of metric names to Metrics\n        device (str, optional): device type specification (default: None).\n            Applies to both model and batches.\n    Returns:\n        Engine: an evaluator engine with supervised inference function\n    \"\"\"", "\n", "if", "device", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "def", "_inference", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "data", ",", "pids", ",", "camids", "=", "batch", "\n", "data", "=", "data", ".", "to", "(", "device", ")", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">=", "1", "else", "data", "\n", "feat", "=", "model", "(", "data", ")", "\n", "return", "feat", ",", "pids", ",", "camids", "\n", "\n", "", "", "engine", "=", "Engine", "(", "_inference", ")", "\n", "\n", "for", "name", ",", "metric", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "metric", ".", "attach", "(", "engine", ",", "name", ")", "\n", "\n", "", "return", "engine", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.engine.trainer.do_train": [[90, 165], ["logging.getLogger", "logging.getLogger.info", "trainer.create_supervised_trainer", "trainer.create_supervised_evaluator", "ignite.handlers.ModelCheckpoint", "ignite.handlers.Timer", "create_supervised_trainer.add_event_handler", "ignite.handlers.Timer.attach", "ignite.metrics.RunningAverage().attach", "ignite.metrics.RunningAverage().attach", "create_supervised_trainer.on", "create_supervised_trainer.on", "create_supervised_trainer.on", "create_supervised_trainer.on", "create_supervised_trainer.on", "create_supervised_trainer.run", "scheduler.step", "logging.getLogger.info", "logging.getLogger.info", "ignite.handlers.Timer.reset", "model.state_dict", "optimizer.state_dict", "ignite.metrics.RunningAverage", "ignite.metrics.RunningAverage", "logging.getLogger.info", "len", "create_supervised_evaluator.run", "logging.getLogger.info", "logging.getLogger.info", "utils.reid_metric.R1_mAP", "logging.getLogger.info", "len", "ignite.handlers.Timer.value", "ignite.handlers.Timer.value", "scheduler.get_lr"], "function", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.engine.trainer.create_supervised_trainer", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.engine.trainer.create_supervised_evaluator", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.reid_metric.R1_mAP_reranking.reset", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.get_lr"], ["", "def", "do_train", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "loss_fn", ",", "\n", "num_query", ",", "\n", "start_epoch", "\n", ")", ":", "\n", "    ", "log_period", "=", "cfg", ".", "SOLVER", ".", "LOG_PERIOD", "\n", "checkpoint_period", "=", "cfg", ".", "SOLVER", ".", "CHECKPOINT_PERIOD", "\n", "eval_period", "=", "cfg", ".", "SOLVER", ".", "EVAL_PERIOD", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "epochs", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"reid_baseline.train\"", ")", "\n", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "trainer", "=", "create_supervised_trainer", "(", "model", ",", "optimizer", ",", "loss_fn", ",", "device", "=", "device", ")", "\n", "evaluator", "=", "create_supervised_evaluator", "(", "model", ",", "metrics", "=", "{", "'r1_mAP'", ":", "R1_mAP", "(", "num_query", ",", "max_rank", "=", "50", ",", "feat_norm", "=", "cfg", ".", "TEST", ".", "FEAT_NORM", ")", "}", ",", "device", "=", "device", ")", "\n", "checkpointer", "=", "ModelCheckpoint", "(", "output_dir", ",", "cfg", ".", "MODEL", ".", "NAME", ",", "checkpoint_period", ",", "n_saved", "=", "10", ",", "require_empty", "=", "False", ")", "\n", "timer", "=", "Timer", "(", "average", "=", "True", ")", "\n", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "checkpointer", ",", "{", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ")", "\n", "timer", ".", "attach", "(", "trainer", ",", "start", "=", "Events", ".", "EPOCH_STARTED", ",", "resume", "=", "Events", ".", "ITERATION_STARTED", ",", "\n", "pause", "=", "Events", ".", "ITERATION_COMPLETED", ",", "step", "=", "Events", ".", "ITERATION_COMPLETED", ")", "\n", "\n", "# average metric to attach on trainer", "\n", "RunningAverage", "(", "output_transform", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ".", "attach", "(", "trainer", ",", "'avg_loss'", ")", "\n", "RunningAverage", "(", "output_transform", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", ".", "attach", "(", "trainer", ",", "'avg_acc'", ")", "\n", "\n", "@", "trainer", ".", "on", "(", "Events", ".", "STARTED", ")", "\n", "def", "start_training", "(", "engine", ")", ":", "\n", "        ", "engine", ".", "state", ".", "epoch", "=", "start_epoch", "\n", "\n", "", "@", "trainer", ".", "on", "(", "Events", ".", "EPOCH_STARTED", ")", "\n", "def", "adjust_learning_rate", "(", "engine", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "@", "trainer", ".", "on", "(", "Events", ".", "ITERATION_COMPLETED", ")", "\n", "def", "log_training_loss", "(", "engine", ")", ":", "\n", "        ", "global", "ITER", "\n", "ITER", "+=", "1", "\n", "\n", "if", "ITER", "%", "log_period", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Epoch[{}] Iteration[{}/{}] Loss: {:.3f}, Acc: {:.3f}, Base Lr: {:.2e}\"", "\n", ".", "format", "(", "engine", ".", "state", ".", "epoch", ",", "ITER", ",", "len", "(", "train_loader", ")", ",", "\n", "engine", ".", "state", ".", "metrics", "[", "'avg_loss'", "]", ",", "engine", ".", "state", ".", "metrics", "[", "'avg_acc'", "]", ",", "\n", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", ")", ")", "\n", "", "if", "len", "(", "train_loader", ")", "==", "ITER", ":", "\n", "            ", "ITER", "=", "0", "\n", "\n", "# adding handlers using `trainer.on` decorator API", "\n", "", "", "@", "trainer", ".", "on", "(", "Events", ".", "EPOCH_COMPLETED", ")", "\n", "def", "print_times", "(", "engine", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Epoch {} done. Time per batch: {:.3f}[s] Speed: {:.1f}[samples/s]'", "\n", ".", "format", "(", "engine", ".", "state", ".", "epoch", ",", "timer", ".", "value", "(", ")", "*", "timer", ".", "step_count", ",", "\n", "train_loader", ".", "batch_size", "/", "timer", ".", "value", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "'-'", "*", "10", ")", "\n", "timer", ".", "reset", "(", ")", "\n", "\n", "", "@", "trainer", ".", "on", "(", "Events", ".", "EPOCH_COMPLETED", ")", "\n", "def", "log_validation_results", "(", "engine", ")", ":", "\n", "        ", "if", "engine", ".", "state", ".", "epoch", "%", "eval_period", "==", "0", ":", "\n", "            ", "evaluator", ".", "run", "(", "val_loader", ")", "\n", "cmc", ",", "mAP", "=", "evaluator", ".", "state", ".", "metrics", "[", "'r1_mAP'", "]", "\n", "logger", ".", "info", "(", "\"Validation Results - Epoch: {}\"", ".", "format", "(", "engine", ".", "state", ".", "epoch", ")", ")", "\n", "logger", ".", "info", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "                ", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "\n", "", "", "", "trainer", ".", "run", "(", "train_loader", ",", "max_epochs", "=", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.data.build.make_data_loader": [[15, 46], ["transforms.build_transforms", "transforms.build_transforms", "datasets.ImageDataset", "datasets.ImageDataset", "torch.utils.data.DataLoader", "len", "datasets.init_dataset", "datasets.init_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "samplers.RandomIdentitySampler"], "function", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.transforms.build.build_transforms", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.transforms.build.build_transforms", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.__init__.init_dataset", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.__init__.init_dataset"], ["def", "make_data_loader", "(", "cfg", ")", ":", "\n", "    ", "train_transforms", "=", "build_transforms", "(", "cfg", ",", "is_train", "=", "True", ")", "\n", "val_transforms", "=", "build_transforms", "(", "cfg", ",", "is_train", "=", "False", ")", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", "\n", "if", "len", "(", "cfg", ".", "DATASETS", ".", "NAMES", ")", "==", "1", ":", "\n", "        ", "dataset", "=", "init_dataset", "(", "cfg", ".", "DATASETS", ".", "NAMES", ",", "root", "=", "cfg", ".", "DATASETS", ".", "ROOT_DIR", ")", "\n", "", "else", ":", "\n", "# TODO: add multi dataset to train", "\n", "        ", "dataset", "=", "init_dataset", "(", "cfg", ".", "DATASETS", ".", "NAMES", ",", "root", "=", "cfg", ".", "DATASETS", ".", "ROOT_DIR", ")", "\n", "\n", "", "num_classes", "=", "dataset", ".", "num_train_pids", "\n", "train_set", "=", "ImageDataset", "(", "dataset", ".", "train", ",", "train_transforms", ")", "\n", "if", "cfg", ".", "DATALOADER", ".", "SAMPLER", "==", "'softmax'", ":", "\n", "        ", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "batch_size", "=", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "train_collate_fn", "\n", ")", "\n", "", "else", ":", "\n", "        ", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "batch_size", "=", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", ",", "\n", "sampler", "=", "RandomIdentitySampler", "(", "dataset", ".", "train", ",", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", ",", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", ",", "\n", "# sampler=RandomIdentitySampler_alignedreid(dataset.train, cfg.DATALOADER.NUM_INSTANCE),      # new add by gu", "\n", "num_workers", "=", "num_workers", ",", "collate_fn", "=", "train_collate_fn", "\n", ")", "\n", "\n", "", "val_set", "=", "ImageDataset", "(", "dataset", ".", "query", "+", "dataset", ".", "gallery", ",", "val_transforms", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_set", ",", "batch_size", "=", "cfg", ".", "TEST", ".", "IMS_PER_BATCH", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "val_collate_fn", "\n", ")", "\n", "return", "train_loader", ",", "val_loader", ",", "len", "(", "dataset", ".", "query", ")", ",", "num_classes", "\n", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.data.collate_batch.train_collate_fn": [[10, 14], ["zip", "torch.tensor", "torch.stack"], "function", ["None"], ["def", "train_collate_fn", "(", "batch", ")", ":", "\n", "    ", "imgs", ",", "pids", ",", "_", ",", "_", ",", "=", "zip", "(", "*", "batch", ")", "\n", "pids", "=", "torch", ".", "tensor", "(", "pids", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "return", "torch", ".", "stack", "(", "imgs", ",", "dim", "=", "0", ")", ",", "pids", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.data.collate_batch.val_collate_fn": [[16, 19], ["zip", "torch.stack"], "function", ["None"], ["", "def", "val_collate_fn", "(", "batch", ")", ":", "\n", "    ", "imgs", ",", "pids", ",", "camids", ",", "_", "=", "zip", "(", "*", "batch", ")", "\n", "return", "torch", ".", "stack", "(", "imgs", ",", "dim", "=", "0", ")", ",", "pids", ",", "camids", "\n", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.cuhk03.CUHK03.__init__": [[34, 85], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "cuhk03.CUHK03._check_before_run", "cuhk03.CUHK03._preprocess", "utils.iotools.read_json", "print", "cuhk03.CUHK03.get_imagedata_info", "cuhk03.CUHK03.get_imagedata_info", "cuhk03.CUHK03.get_imagedata_info", "len", "len", "print", "cuhk03.CUHK03.print_dataset_statistics"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._check_before_run", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.cuhk03.CUHK03._preprocess", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.iotools.read_json", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseVideoDataset.print_dataset_statistics"], ["def", "__init__", "(", "self", ",", "root", "=", "'/home/haoluo/data'", ",", "split_id", "=", "0", ",", "cuhk03_labeled", "=", "False", ",", "\n", "cuhk03_classic_split", "=", "False", ",", "verbose", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CUHK03", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "data_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'cuhk03_release'", ")", "\n", "self", ".", "raw_mat_path", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'cuhk-03.mat'", ")", "\n", "\n", "self", ".", "imgs_detected_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'images_detected'", ")", "\n", "self", ".", "imgs_labeled_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'images_labeled'", ")", "\n", "\n", "self", ".", "split_classic_det_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'splits_classic_detected.json'", ")", "\n", "self", ".", "split_classic_lab_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'splits_classic_labeled.json'", ")", "\n", "\n", "self", ".", "split_new_det_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'splits_new_detected.json'", ")", "\n", "self", ".", "split_new_lab_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'splits_new_labeled.json'", ")", "\n", "\n", "self", ".", "split_new_det_mat_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'cuhk03_new_protocol_config_detected.mat'", ")", "\n", "self", ".", "split_new_lab_mat_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'cuhk03_new_protocol_config_labeled.mat'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "self", ".", "_preprocess", "(", ")", "\n", "\n", "if", "cuhk03_labeled", ":", "\n", "            ", "image_type", "=", "'labeled'", "\n", "split_path", "=", "self", ".", "split_classic_lab_json_path", "if", "cuhk03_classic_split", "else", "self", ".", "split_new_lab_json_path", "\n", "", "else", ":", "\n", "            ", "image_type", "=", "'detected'", "\n", "split_path", "=", "self", ".", "split_classic_det_json_path", "if", "cuhk03_classic_split", "else", "self", ".", "split_new_det_json_path", "\n", "\n", "", "splits", "=", "read_json", "(", "split_path", ")", "\n", "assert", "split_id", "<", "len", "(", "splits", ")", ",", "\"Condition split_id ({}) < len(splits) ({}) is false\"", ".", "format", "(", "split_id", ",", "\n", "len", "(", "splits", ")", ")", "\n", "split", "=", "splits", "[", "split_id", "]", "\n", "print", "(", "\"Split index = {}\"", ".", "format", "(", "split_id", ")", ")", "\n", "\n", "train", "=", "split", "[", "'train'", "]", "\n", "query", "=", "split", "[", "'query'", "]", "\n", "gallery", "=", "split", "[", "'gallery'", "]", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> CUHK03 ({}) loaded\"", ".", "format", "(", "image_type", ")", ")", "\n", "self", ".", "print_dataset_statistics", "(", "train", ",", "query", ",", "gallery", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.cuhk03.CUHK03._check_before_run": [[86, 98], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "data_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "data_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "raw_mat_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "raw_mat_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "split_new_det_mat_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "split_new_det_mat_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "split_new_lab_mat_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "split_new_lab_mat_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.cuhk03.CUHK03._preprocess": [[99, 260], ["print", "utils.iotools.mkdir_if_missing", "utils.iotools.mkdir_if_missing", "print", "h5py.File", "cuhk03.CUHK03._preprocess._extract_img"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.iotools.mkdir_if_missing", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.iotools.mkdir_if_missing"], ["", "", "def", "_preprocess", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function is a bit complex and ugly, what it does is\n        1. Extract data from cuhk-03.mat and save as png images.\n        2. Create 20 classic splits. (Li et al. CVPR'14)\n        3. Create new split. (Zhong et al. CVPR'17)\n        \"\"\"", "\n", "print", "(", "\n", "\"Note: if root path is changed, the previously generated json files need to be re-generated (delete them first)\"", ")", "\n", "if", "osp", ".", "exists", "(", "self", ".", "imgs_labeled_dir", ")", "and", "osp", ".", "exists", "(", "self", ".", "imgs_detected_dir", ")", "and", "osp", ".", "exists", "(", "self", ".", "split_classic_det_json_path", ")", "and", "osp", ".", "exists", "(", "self", ".", "split_classic_lab_json_path", ")", "and", "osp", ".", "exists", "(", "self", ".", "split_new_det_json_path", ")", "and", "osp", ".", "exists", "(", "self", ".", "split_new_lab_json_path", ")", ":", "\n", "            ", "return", "\n", "\n", "", "mkdir_if_missing", "(", "self", ".", "imgs_detected_dir", ")", "\n", "mkdir_if_missing", "(", "self", ".", "imgs_labeled_dir", ")", "\n", "\n", "print", "(", "\"Extract image data from {} and save as png\"", ".", "format", "(", "self", ".", "raw_mat_path", ")", ")", "\n", "mat", "=", "h5py", ".", "File", "(", "self", ".", "raw_mat_path", ",", "'r'", ")", "\n", "\n", "def", "_deref", "(", "ref", ")", ":", "\n", "            ", "return", "mat", "[", "ref", "]", "[", ":", "]", ".", "T", "\n", "\n", "", "def", "_process_images", "(", "img_refs", ",", "campid", ",", "pid", ",", "save_dir", ")", ":", "\n", "            ", "img_paths", "=", "[", "]", "# Note: some persons only have images for one view", "\n", "for", "imgid", ",", "img_ref", "in", "enumerate", "(", "img_refs", ")", ":", "\n", "                ", "img", "=", "_deref", "(", "img_ref", ")", "\n", "# skip empty cell", "\n", "if", "img", ".", "size", "==", "0", "or", "img", ".", "ndim", "<", "3", ":", "continue", "\n", "# images are saved with the following format, index-1 (ensure uniqueness)", "\n", "# campid: index of camera pair (1-5)", "\n", "# pid: index of person in 'campid'-th camera pair", "\n", "# viewid: index of view, {1, 2}", "\n", "# imgid: index of image, (1-10)", "\n", "viewid", "=", "1", "if", "imgid", "<", "5", "else", "2", "\n", "img_name", "=", "'{:01d}_{:03d}_{:01d}_{:02d}.png'", ".", "format", "(", "campid", "+", "1", ",", "pid", "+", "1", ",", "viewid", ",", "imgid", "+", "1", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "save_dir", ",", "img_name", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "img_path", ")", ":", "\n", "                    ", "imsave", "(", "img_path", ",", "img", ")", "\n", "", "img_paths", ".", "append", "(", "img_path", ")", "\n", "", "return", "img_paths", "\n", "\n", "", "def", "_extract_img", "(", "name", ")", ":", "\n", "            ", "print", "(", "\"Processing {} images (extract and save) ...\"", ".", "format", "(", "name", ")", ")", "\n", "meta_data", "=", "[", "]", "\n", "imgs_dir", "=", "self", ".", "imgs_detected_dir", "if", "name", "==", "'detected'", "else", "self", ".", "imgs_labeled_dir", "\n", "for", "campid", ",", "camp_ref", "in", "enumerate", "(", "mat", "[", "name", "]", "[", "0", "]", ")", ":", "\n", "                ", "camp", "=", "_deref", "(", "camp_ref", ")", "\n", "num_pids", "=", "camp", ".", "shape", "[", "0", "]", "\n", "for", "pid", "in", "range", "(", "num_pids", ")", ":", "\n", "                    ", "img_paths", "=", "_process_images", "(", "camp", "[", "pid", ",", ":", "]", ",", "campid", ",", "pid", ",", "imgs_dir", ")", "\n", "assert", "len", "(", "img_paths", ")", ">", "0", ",", "\"campid{}-pid{} has no images\"", ".", "format", "(", "campid", ",", "pid", ")", "\n", "meta_data", ".", "append", "(", "(", "campid", "+", "1", ",", "pid", "+", "1", ",", "img_paths", ")", ")", "\n", "", "print", "(", "\"- done camera pair {} with {} identities\"", ".", "format", "(", "campid", "+", "1", ",", "num_pids", ")", ")", "\n", "", "return", "meta_data", "\n", "\n", "", "meta_detected", "=", "_extract_img", "(", "'detected'", ")", "\n", "meta_labeled", "=", "_extract_img", "(", "'labeled'", ")", "\n", "\n", "def", "_extract_classic_split", "(", "meta_data", ",", "test_split", ")", ":", "\n", "            ", "train", ",", "test", "=", "[", "]", ",", "[", "]", "\n", "num_train_pids", ",", "num_test_pids", "=", "0", ",", "0", "\n", "num_train_imgs", ",", "num_test_imgs", "=", "0", ",", "0", "\n", "for", "i", ",", "(", "campid", ",", "pid", ",", "img_paths", ")", "in", "enumerate", "(", "meta_data", ")", ":", "\n", "\n", "                ", "if", "[", "campid", ",", "pid", "]", "in", "test_split", ":", "\n", "                    ", "for", "img_path", "in", "img_paths", ":", "\n", "                        ", "camid", "=", "int", "(", "osp", ".", "basename", "(", "img_path", ")", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "-", "1", "# make it 0-based", "\n", "test", ".", "append", "(", "(", "img_path", ",", "num_test_pids", ",", "camid", ")", ")", "\n", "", "num_test_pids", "+=", "1", "\n", "num_test_imgs", "+=", "len", "(", "img_paths", ")", "\n", "", "else", ":", "\n", "                    ", "for", "img_path", "in", "img_paths", ":", "\n", "                        ", "camid", "=", "int", "(", "osp", ".", "basename", "(", "img_path", ")", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "-", "1", "# make it 0-based", "\n", "train", ".", "append", "(", "(", "img_path", ",", "num_train_pids", ",", "camid", ")", ")", "\n", "", "num_train_pids", "+=", "1", "\n", "num_train_imgs", "+=", "len", "(", "img_paths", ")", "\n", "", "", "return", "train", ",", "num_train_pids", ",", "num_train_imgs", ",", "test", ",", "num_test_pids", ",", "num_test_imgs", "\n", "\n", "", "print", "(", "\"Creating classic splits (# = 20) ...\"", ")", "\n", "splits_classic_det", ",", "splits_classic_lab", "=", "[", "]", ",", "[", "]", "\n", "for", "split_ref", "in", "mat", "[", "'testsets'", "]", "[", "0", "]", ":", "\n", "            ", "test_split", "=", "_deref", "(", "split_ref", ")", ".", "tolist", "(", ")", "\n", "\n", "# create split for detected images", "\n", "train", ",", "num_train_pids", ",", "num_train_imgs", ",", "test", ",", "num_test_pids", ",", "num_test_imgs", "=", "_extract_classic_split", "(", "meta_detected", ",", "test_split", ")", "\n", "splits_classic_det", ".", "append", "(", "{", "\n", "'train'", ":", "train", ",", "'query'", ":", "test", ",", "'gallery'", ":", "test", ",", "\n", "'num_train_pids'", ":", "num_train_pids", ",", "'num_train_imgs'", ":", "num_train_imgs", ",", "\n", "'num_query_pids'", ":", "num_test_pids", ",", "'num_query_imgs'", ":", "num_test_imgs", ",", "\n", "'num_gallery_pids'", ":", "num_test_pids", ",", "'num_gallery_imgs'", ":", "num_test_imgs", ",", "\n", "}", ")", "\n", "\n", "# create split for labeled images", "\n", "train", ",", "num_train_pids", ",", "num_train_imgs", ",", "test", ",", "num_test_pids", ",", "num_test_imgs", "=", "_extract_classic_split", "(", "meta_labeled", ",", "test_split", ")", "\n", "splits_classic_lab", ".", "append", "(", "{", "\n", "'train'", ":", "train", ",", "'query'", ":", "test", ",", "'gallery'", ":", "test", ",", "\n", "'num_train_pids'", ":", "num_train_pids", ",", "'num_train_imgs'", ":", "num_train_imgs", ",", "\n", "'num_query_pids'", ":", "num_test_pids", ",", "'num_query_imgs'", ":", "num_test_imgs", ",", "\n", "'num_gallery_pids'", ":", "num_test_pids", ",", "'num_gallery_imgs'", ":", "num_test_imgs", ",", "\n", "}", ")", "\n", "\n", "", "write_json", "(", "splits_classic_det", ",", "self", ".", "split_classic_det_json_path", ")", "\n", "write_json", "(", "splits_classic_lab", ",", "self", ".", "split_classic_lab_json_path", ")", "\n", "\n", "def", "_extract_set", "(", "filelist", ",", "pids", ",", "pid2label", ",", "idxs", ",", "img_dir", ",", "relabel", ")", ":", "\n", "            ", "tmp_set", "=", "[", "]", "\n", "unique_pids", "=", "set", "(", ")", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "img_name", "=", "filelist", "[", "idx", "]", "[", "0", "]", "\n", "camid", "=", "int", "(", "img_name", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "-", "1", "# make it 0-based", "\n", "pid", "=", "pids", "[", "idx", "]", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "img_name", ")", "\n", "tmp_set", ".", "append", "(", "(", "img_path", ",", "int", "(", "pid", ")", ",", "camid", ")", ")", "\n", "unique_pids", ".", "add", "(", "pid", ")", "\n", "", "return", "tmp_set", ",", "len", "(", "unique_pids", ")", ",", "len", "(", "idxs", ")", "\n", "\n", "", "def", "_extract_new_split", "(", "split_dict", ",", "img_dir", ")", ":", "\n", "            ", "train_idxs", "=", "split_dict", "[", "'train_idx'", "]", ".", "flatten", "(", ")", "-", "1", "# index-0", "\n", "pids", "=", "split_dict", "[", "'labels'", "]", ".", "flatten", "(", ")", "\n", "train_pids", "=", "set", "(", "pids", "[", "train_idxs", "]", ")", "\n", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "train_pids", ")", "}", "\n", "query_idxs", "=", "split_dict", "[", "'query_idx'", "]", ".", "flatten", "(", ")", "-", "1", "\n", "gallery_idxs", "=", "split_dict", "[", "'gallery_idx'", "]", ".", "flatten", "(", ")", "-", "1", "\n", "filelist", "=", "split_dict", "[", "'filelist'", "]", ".", "flatten", "(", ")", "\n", "train_info", "=", "_extract_set", "(", "filelist", ",", "pids", ",", "pid2label", ",", "train_idxs", ",", "img_dir", ",", "relabel", "=", "True", ")", "\n", "query_info", "=", "_extract_set", "(", "filelist", ",", "pids", ",", "pid2label", ",", "query_idxs", ",", "img_dir", ",", "relabel", "=", "False", ")", "\n", "gallery_info", "=", "_extract_set", "(", "filelist", ",", "pids", ",", "pid2label", ",", "gallery_idxs", ",", "img_dir", ",", "relabel", "=", "False", ")", "\n", "return", "train_info", ",", "query_info", ",", "gallery_info", "\n", "\n", "", "print", "(", "\"Creating new splits for detected images (767/700) ...\"", ")", "\n", "train_info", ",", "query_info", ",", "gallery_info", "=", "_extract_new_split", "(", "\n", "loadmat", "(", "self", ".", "split_new_det_mat_path", ")", ",", "\n", "self", ".", "imgs_detected_dir", ",", "\n", ")", "\n", "splits", "=", "[", "{", "\n", "'train'", ":", "train_info", "[", "0", "]", ",", "'query'", ":", "query_info", "[", "0", "]", ",", "'gallery'", ":", "gallery_info", "[", "0", "]", ",", "\n", "'num_train_pids'", ":", "train_info", "[", "1", "]", ",", "'num_train_imgs'", ":", "train_info", "[", "2", "]", ",", "\n", "'num_query_pids'", ":", "query_info", "[", "1", "]", ",", "'num_query_imgs'", ":", "query_info", "[", "2", "]", ",", "\n", "'num_gallery_pids'", ":", "gallery_info", "[", "1", "]", ",", "'num_gallery_imgs'", ":", "gallery_info", "[", "2", "]", ",", "\n", "}", "]", "\n", "write_json", "(", "splits", ",", "self", ".", "split_new_det_json_path", ")", "\n", "\n", "print", "(", "\"Creating new splits for labeled images (767/700) ...\"", ")", "\n", "train_info", ",", "query_info", ",", "gallery_info", "=", "_extract_new_split", "(", "\n", "loadmat", "(", "self", ".", "split_new_lab_mat_path", ")", ",", "\n", "self", ".", "imgs_labeled_dir", ",", "\n", ")", "\n", "splits", "=", "[", "{", "\n", "'train'", ":", "train_info", "[", "0", "]", ",", "'query'", ":", "query_info", "[", "0", "]", ",", "'gallery'", ":", "gallery_info", "[", "0", "]", ",", "\n", "'num_train_pids'", ":", "train_info", "[", "1", "]", ",", "'num_train_imgs'", ":", "train_info", "[", "2", "]", ",", "\n", "'num_query_pids'", ":", "query_info", "[", "1", "]", ",", "'num_query_imgs'", ":", "query_info", "[", "2", "]", ",", "\n", "'num_gallery_pids'", ":", "gallery_info", "[", "1", "]", ",", "'num_gallery_imgs'", ":", "gallery_info", "[", "2", "]", ",", "\n", "}", "]", "\n", "write_json", "(", "splits", ",", "self", ".", "split_new_lab_json_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.eval_reid.eval_func": [[10, 64], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.mean", "print", "numpy.invert", "orig_cmc.cumsum", "np.asarray().astype.append", "orig_cmc.sum", "orig_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.any", "numpy.asarray", "orig_cmc.cumsum.sum", "numpy.asarray", "enumerate"], "function", ["None"], ["def", "eval_func", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "=", "50", ")", ":", "\n", "    ", "\"\"\"Evaluation with market1501 metric\n        Key: for each query identity, its gallery images from the same camera view are discarded.\n        \"\"\"", "\n", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "# number of valid query", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "# binary vector, positions with value 1 are correct matches", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "orig_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "\n", "return", "all_cmc", ",", "mAP", "\n", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.dukemtmcreid.DukeMTMCreID.__init__": [[33, 59], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "dukemtmcreid.DukeMTMCreID._download_data", "dukemtmcreid.DukeMTMCreID._check_before_run", "dukemtmcreid.DukeMTMCreID._process_dir", "dukemtmcreid.DukeMTMCreID._process_dir", "dukemtmcreid.DukeMTMCreID._process_dir", "dukemtmcreid.DukeMTMCreID.get_imagedata_info", "dukemtmcreid.DukeMTMCreID.get_imagedata_info", "dukemtmcreid.DukeMTMCreID.get_imagedata_info", "print", "dukemtmcreid.DukeMTMCreID.print_dataset_statistics"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.dukemtmcreid.DukeMTMCreID._download_data", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._check_before_run", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseVideoDataset.print_dataset_statistics"], ["def", "__init__", "(", "self", ",", "root", "=", "'./data'", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DukeMTMCreID", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "dataset_url", "=", "'http://vision.cs.duke.edu/DukeMTMC/data/misc/DukeMTMC-reID.zip'", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-reID/bounding_box_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-reID/query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-reID/bounding_box_test'", ")", "\n", "\n", "self", ".", "_download_data", "(", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> DukeMTMC-reID loaded\"", ")", "\n", "self", ".", "print_dataset_statistics", "(", "train", ",", "query", ",", "gallery", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.dukemtmcreid.DukeMTMCreID._download_data": [[60, 76], ["os.exists", "print", "utils.iotools.mkdir_if_missing", "os.join", "print", "urllib.request.urlretrieve", "print", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "print", "os.basename"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.utils.iotools.mkdir_if_missing"], ["", "def", "_download_data", "(", "self", ")", ":", "\n", "        ", "if", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "print", "(", "\"This dataset has been downloaded.\"", ")", "\n", "return", "\n", "\n", "", "print", "(", "\"Creating directory {}\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "mkdir_if_missing", "(", "self", ".", "dataset_dir", ")", "\n", "fpath", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "osp", ".", "basename", "(", "self", ".", "dataset_url", ")", ")", "\n", "\n", "print", "(", "\"Downloading DukeMTMC-reID dataset\"", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "self", ".", "dataset_url", ",", "fpath", ")", "\n", "\n", "print", "(", "\"Extracting files\"", ")", "\n", "zip_ref", "=", "zipfile", ".", "ZipFile", "(", "fpath", ",", "'r'", ")", "\n", "zip_ref", ".", "extractall", "(", "self", ".", "dataset_dir", ")", "\n", "zip_ref", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.dukemtmcreid.DukeMTMCreID._check_before_run": [[77, 87], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.dukemtmcreid.DukeMTMCreID._process_dir": [[88, 107], ["glob.glob", "re.compile", "set", "os.join", "map", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "assert", "1", "<=", "camid", "<=", "8", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.market1501.Market1501.__init__": [[28, 52], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "market1501.Market1501._check_before_run", "market1501.Market1501._process_dir", "market1501.Market1501._process_dir", "market1501.Market1501._process_dir", "market1501.Market1501.get_imagedata_info", "market1501.Market1501.get_imagedata_info", "market1501.Market1501.get_imagedata_info", "print", "market1501.Market1501.print_dataset_statistics"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._check_before_run", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseVideoDataset.print_dataset_statistics"], ["def", "__init__", "(", "self", ",", "root", "=", "'/home/haoluo/data'", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Market1501", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_test'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> Market1501 loaded\"", ")", "\n", "self", ".", "print_dataset_statistics", "(", "train", ",", "query", ",", "gallery", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.market1501.Market1501._check_before_run": [[53, 63], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.market1501.Market1501._process_dir": [[64, 86], ["glob.glob", "re.compile", "set", "os.join", "map", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "assert", "0", "<=", "pid", "<=", "1501", "# pid == 0 means background", "\n", "assert", "1", "<=", "camid", "<=", "6", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info": [[15, 26], ["set", "set", "len", "len", "len"], "methods", ["None"], ["def", "get_imagedata_info", "(", "self", ",", "data", ")", ":", "\n", "        ", "pids", ",", "cams", "=", "[", "]", ",", "[", "]", "\n", "for", "_", ",", "pid", ",", "camid", "in", "data", ":", "\n", "            ", "pids", "+=", "[", "pid", "]", "\n", "cams", "+=", "[", "camid", "]", "\n", "", "pids", "=", "set", "(", "pids", ")", "\n", "cams", "=", "set", "(", "cams", ")", "\n", "num_pids", "=", "len", "(", "pids", ")", "\n", "num_cams", "=", "len", "(", "cams", ")", "\n", "num_imgs", "=", "len", "(", "data", ")", "\n", "return", "num_pids", ",", "num_imgs", ",", "num_cams", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_videodata_info": [[27, 41], ["set", "set", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "get_videodata_info", "(", "self", ",", "data", ",", "return_tracklet_stats", "=", "False", ")", ":", "\n", "        ", "pids", ",", "cams", ",", "tracklet_stats", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "img_paths", ",", "pid", ",", "camid", "in", "data", ":", "\n", "            ", "pids", "+=", "[", "pid", "]", "\n", "cams", "+=", "[", "camid", "]", "\n", "tracklet_stats", "+=", "[", "len", "(", "img_paths", ")", "]", "\n", "", "pids", "=", "set", "(", "pids", ")", "\n", "cams", "=", "set", "(", "cams", ")", "\n", "num_pids", "=", "len", "(", "pids", ")", "\n", "num_cams", "=", "len", "(", "cams", ")", "\n", "num_tracklets", "=", "len", "(", "data", ")", "\n", "if", "return_tracklet_stats", ":", "\n", "            ", "return", "num_pids", ",", "num_tracklets", ",", "num_cams", ",", "tracklet_stats", "\n", "", "return", "num_pids", ",", "num_tracklets", ",", "num_cams", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.print_dataset_statistics": [[42, 44], ["None"], "methods", ["None"], ["", "def", "print_dataset_statistics", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseImageDataset.print_dataset_statistics": [[51, 64], ["bases.BaseImageDataset.get_imagedata_info", "bases.BaseImageDataset.get_imagedata_info", "bases.BaseImageDataset.get_imagedata_info", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info"], ["def", "print_dataset_statistics", "(", "self", ",", "train", ",", "query", ",", "gallery", ")", ":", "\n", "        ", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "train", ")", "\n", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "query", ")", "\n", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "gallery", ")", "\n", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images | # cameras\"", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", ")", ")", "\n", "print", "(", "\"  ----------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseVideoDataset.print_dataset_statistics": [[71, 96], ["bases.BaseVideoDataset.get_videodata_info", "bases.BaseVideoDataset.get_videodata_info", "bases.BaseVideoDataset.get_videodata_info", "numpy.min", "numpy.max", "numpy.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_videodata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_videodata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_videodata_info"], ["def", "print_dataset_statistics", "(", "self", ",", "train", ",", "query", ",", "gallery", ")", ":", "\n", "        ", "num_train_pids", ",", "num_train_tracklets", ",", "num_train_cams", ",", "train_tracklet_stats", "=", "self", ".", "get_videodata_info", "(", "train", ",", "return_tracklet_stats", "=", "True", ")", "\n", "\n", "num_query_pids", ",", "num_query_tracklets", ",", "num_query_cams", ",", "query_tracklet_stats", "=", "self", ".", "get_videodata_info", "(", "query", ",", "return_tracklet_stats", "=", "True", ")", "\n", "\n", "num_gallery_pids", ",", "num_gallery_tracklets", ",", "num_gallery_cams", ",", "gallery_tracklet_stats", "=", "self", ".", "get_videodata_info", "(", "gallery", ",", "return_tracklet_stats", "=", "True", ")", "\n", "\n", "tracklet_stats", "=", "train_tracklet_stats", "+", "query_tracklet_stats", "+", "gallery_tracklet_stats", "\n", "min_num", "=", "np", ".", "min", "(", "tracklet_stats", ")", "\n", "max_num", "=", "np", ".", "max", "(", "tracklet_stats", ")", "\n", "avg_num", "=", "np", ".", "mean", "(", "tracklet_stats", ")", "\n", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  -------------------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # tracklets | # cameras\"", ")", "\n", "print", "(", "\"  -------------------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:11d} | {:9d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_tracklets", ",", "num_train_cams", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:11d} | {:9d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_tracklets", ",", "num_query_cams", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:11d} | {:9d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_tracklets", ",", "num_gallery_cams", ")", ")", "\n", "print", "(", "\"  -------------------------------------------\"", ")", "\n", "print", "(", "\"  number of images per tracklet: {} ~ {}, average {:.2f}\"", ".", "format", "(", "min_num", ",", "max_num", ",", "avg_num", ")", ")", "\n", "print", "(", "\"  -------------------------------------------\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.dataset_loader.ImageDataset.__init__": [[31, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.dataset_loader.ImageDataset.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.dataset_loader.ImageDataset.__getitem__": [[38, 46], ["dataset_loader.read_image", "dataset_loader.ImageDataset.transform"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.dataset_loader.read_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", ",", "pid", ",", "camid", "=", "self", ".", "dataset", "[", "index", "]", "\n", "img", "=", "read_image", "(", "img_path", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "pid", ",", "camid", ",", "img_path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.dataset_loader.read_image": [[12, 26], ["os.exists", "IOError", "PIL.Image.open().convert", "print", "PIL.Image.open"], "function", ["None"], ["def", "read_image", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"Keep reading image until succeed.\n    This can avoid IOError incurred by heavy IO process.\"\"\"", "\n", "got_img", "=", "False", "\n", "if", "not", "osp", ".", "exists", "(", "img_path", ")", ":", "\n", "        ", "raise", "IOError", "(", "\"{} does not exist\"", ".", "format", "(", "img_path", ")", ")", "\n", "", "while", "not", "got_img", ":", "\n", "        ", "try", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "got_img", "=", "True", "\n", "", "except", "IOError", ":", "\n", "            ", "print", "(", "\"IOError incurred when reading '{}'. Will redo. Don't worry. Just chill.\"", ".", "format", "(", "img_path", ")", ")", "\n", "pass", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.__init__.get_names": [[20, 22], ["__factory.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.__init__.init_dataset": [[24, 28], ["__factory.keys", "KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17.__init__": [[31, 57], ["bases.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "msmt17.MSMT17._check_before_run", "msmt17.MSMT17._process_dir", "msmt17.MSMT17._process_dir", "msmt17.MSMT17._process_dir", "msmt17.MSMT17.get_imagedata_info", "msmt17.MSMT17.get_imagedata_info", "msmt17.MSMT17.get_imagedata_info", "print", "msmt17.MSMT17.print_dataset_statistics"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._check_before_run", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.bases.BaseVideoDataset.print_dataset_statistics"], ["def", "__init__", "(", "self", ",", "root", "=", "'/home/haoluo/data'", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MSMT17", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'MSMT17_V2/mask_train_v2'", ")", "\n", "self", ".", "test_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'MSMT17_V2/mask_test_v2'", ")", "\n", "self", ".", "list_train_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'MSMT17_V2/list_train.txt'", ")", "\n", "self", ".", "list_val_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'MSMT17_V2/list_val.txt'", ")", "\n", "self", ".", "list_query_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'MSMT17_V2/list_query.txt'", ")", "\n", "self", ".", "list_gallery_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'MSMT17_V2/list_gallery.txt'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "list_train_path", ")", "\n", "#val, num_val_pids, num_val_imgs = self._process_dir(self.train_dir, self.list_val_path)", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "test_dir", ",", "self", ".", "list_query_path", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "test_dir", ",", "self", ".", "list_gallery_path", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> MSMT17 loaded\"", ")", "\n", "self", ".", "print_dataset_statistics", "(", "train", ",", "query", ",", "gallery", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._check_before_run": [[58, 66], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "test_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "test_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.datasets.msmt17.MSMT17._process_dir": [[67, 84], ["set", "enumerate", "enumerate", "open", "txt.readlines", "img_info.split", "int", "int", "os.join", "dataset.append", "set.add", "os.join.split"], "methods", ["None"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "list_path", ")", ":", "\n", "        ", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "txt", ":", "\n", "            ", "lines", "=", "txt", ".", "readlines", "(", ")", "\n", "", "dataset", "=", "[", "]", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_idx", ",", "img_info", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "img_path", ",", "pid", "=", "img_info", ".", "split", "(", "' '", ")", "\n", "pid", "=", "int", "(", "pid", ")", "# no need to relabel", "\n", "camid", "=", "int", "(", "img_path", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "dir_path", ",", "img_path", ")", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "\n", "# check if pid starts from 0 and increments with 1", "\n", "", "for", "idx", ",", "pid", "in", "enumerate", "(", "pid_container", ")", ":", "\n", "            ", "assert", "idx", "==", "pid", ",", "\"See code comment for explanation\"", "\n", "", "return", "dataset", "", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.samplers.triplet_sampler.RandomIdentitySampler.__init__": [[26, 44], ["collections.defaultdict", "enumerate", "list", "triplet_sampler.RandomIdentitySampler.index_dic[].append", "triplet_sampler.RandomIdentitySampler.index_dic.keys", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ",", "num_instances", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "num_pids_per_batch", "=", "self", ".", "batch_size", "//", "self", ".", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "self", ".", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "\n", "# estimate number of examples in an epoch", "\n", "self", ".", "length", "=", "0", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "            ", "idxs", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "num", "=", "len", "(", "idxs", ")", "\n", "if", "num", "<", "self", ".", "num_instances", ":", "\n", "                ", "num", "=", "self", ".", "num_instances", "\n", "", "self", ".", "length", "+=", "num", "-", "num", "%", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.samplers.triplet_sampler.RandomIdentitySampler.__iter__": [[45, 73], ["collections.defaultdict", "copy.deepcopy", "len", "iter", "copy.deepcopy", "random.shuffle", "len", "random.sample", "len", "numpy.random.choice", "batch_idxs_dict[].pop.append", "batch_idxs_dict[].pop", "final_idxs.extend", "len", "batch_idxs_dict[].append", "len", "copy.deepcopy.remove"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "batch_idxs_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "            ", "idxs", "=", "copy", ".", "deepcopy", "(", "self", ".", "index_dic", "[", "pid", "]", ")", "\n", "if", "len", "(", "idxs", ")", "<", "self", ".", "num_instances", ":", "\n", "                ", "idxs", "=", "np", ".", "random", ".", "choice", "(", "idxs", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "", "random", ".", "shuffle", "(", "idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "batch_idxs", ".", "append", "(", "idx", ")", "\n", "if", "len", "(", "batch_idxs", ")", "==", "self", ".", "num_instances", ":", "\n", "                    ", "batch_idxs_dict", "[", "pid", "]", ".", "append", "(", "batch_idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "\n", "", "", "", "avai_pids", "=", "copy", ".", "deepcopy", "(", "self", ".", "pids", ")", "\n", "final_idxs", "=", "[", "]", "\n", "\n", "while", "len", "(", "avai_pids", ")", ">=", "self", ".", "num_pids_per_batch", ":", "\n", "            ", "selected_pids", "=", "random", ".", "sample", "(", "avai_pids", ",", "self", ".", "num_pids_per_batch", ")", "\n", "for", "pid", "in", "selected_pids", ":", "\n", "                ", "batch_idxs", "=", "batch_idxs_dict", "[", "pid", "]", ".", "pop", "(", "0", ")", "\n", "final_idxs", ".", "extend", "(", "batch_idxs", ")", "\n", "if", "len", "(", "batch_idxs_dict", "[", "pid", "]", ")", "==", "0", ":", "\n", "                    ", "avai_pids", ".", "remove", "(", "pid", ")", "\n", "\n", "", "", "", "self", ".", "length", "=", "len", "(", "final_idxs", ")", "\n", "return", "iter", "(", "final_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.samplers.triplet_sampler.RandomIdentitySampler.__len__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.samplers.triplet_sampler.RandomIdentitySampler_alignedreid.__init__": [[90, 98], ["collections.defaultdict", "enumerate", "list", "len", "triplet_sampler.RandomIdentitySampler_alignedreid.index_dic[].append", "triplet_sampler.RandomIdentitySampler_alignedreid.index_dic.keys"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_identities", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.samplers.triplet_sampler.RandomIdentitySampler_alignedreid.__iter__": [[99, 109], ["torch.randperm", "iter", "numpy.random.choice", "ret.extend", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_identities", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "pid", "=", "self", ".", "pids", "[", "i", "]", "\n", "t", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "replace", "=", "False", "if", "len", "(", "t", ")", ">=", "self", ".", "num_instances", "else", "True", "\n", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "replace", ")", "\n", "ret", ".", "extend", "(", "t", ")", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.samplers.triplet_sampler.RandomIdentitySampler_alignedreid.__len__": [[110, 112], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_identities", "*", "self", ".", "num_instances", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.transforms.transforms.RandomErasing.__init__": [[23, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ",", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.transforms.transforms.RandomErasing.__call__": [[30, 56], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">=", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "size", "(", ")", "[", "2", "]", "and", "h", "<", "img", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "1", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "2", "]", "-", "w", ")", "\n", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "img", "[", "1", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "1", "]", "\n", "img", "[", "2", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.transforms.build.build_transforms": [[12, 32], ["torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.Pad", "torchvision.RandomCrop", "torchvision.ToTensor", "transforms.RandomErasing", "torchvision.Resize", "torchvision.ToTensor"], "function", ["None"], ["from", ".", "transforms", "import", "build_transforms", "\n", "\n", "\n", "def", "make_data_loader", "(", "cfg", ")", ":", "\n", "    ", "train_transforms", "=", "build_transforms", "(", "cfg", ",", "is_train", "=", "True", ")", "\n", "val_transforms", "=", "build_transforms", "(", "cfg", ",", "is_train", "=", "False", ")", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", "\n", "if", "len", "(", "cfg", ".", "DATASETS", ".", "NAMES", ")", "==", "1", ":", "\n", "        ", "dataset", "=", "init_dataset", "(", "cfg", ".", "DATASETS", ".", "NAMES", ",", "root", "=", "cfg", ".", "DATASETS", ".", "ROOT_DIR", ")", "\n", "", "else", ":", "\n", "# TODO: add multi dataset to train", "\n", "        ", "dataset", "=", "init_dataset", "(", "cfg", ".", "DATASETS", ".", "NAMES", ",", "root", "=", "cfg", ".", "DATASETS", ".", "ROOT_DIR", ")", "\n", "\n", "", "num_classes", "=", "dataset", ".", "num_train_pids", "\n", "train_set", "=", "ImageDataset", "(", "dataset", ".", "train", ",", "train_transforms", ")", "\n", "if", "cfg", ".", "DATALOADER", ".", "SAMPLER", "==", "'softmax'", ":", "\n", "        ", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "batch_size", "=", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "train_collate_fn", "\n", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.build.make_optimizer": [[10, 26], ["model.named_parameters", "getattr", "getattr"], "function", ["None"], ["from", ".", "datasets", "import", "init_dataset", ",", "ImageDataset", "\n", "from", ".", "samplers", "import", "RandomIdentitySampler", ",", "RandomIdentitySampler_alignedreid", "# New add by gu", "\n", "from", ".", "transforms", "import", "build_transforms", "\n", "\n", "\n", "def", "make_data_loader", "(", "cfg", ")", ":", "\n", "    ", "train_transforms", "=", "build_transforms", "(", "cfg", ",", "is_train", "=", "True", ")", "\n", "val_transforms", "=", "build_transforms", "(", "cfg", ",", "is_train", "=", "False", ")", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", "\n", "if", "len", "(", "cfg", ".", "DATASETS", ".", "NAMES", ")", "==", "1", ":", "\n", "        ", "dataset", "=", "init_dataset", "(", "cfg", ".", "DATASETS", ".", "NAMES", ",", "root", "=", "cfg", ".", "DATASETS", ".", "ROOT_DIR", ")", "\n", "", "else", ":", "\n", "# TODO: add multi dataset to train", "\n", "        ", "dataset", "=", "init_dataset", "(", "cfg", ".", "DATASETS", ".", "NAMES", ",", "root", "=", "cfg", ".", "DATASETS", ".", "ROOT_DIR", ")", "\n", "\n", "", "num_classes", "=", "dataset", ".", "num_train_pids", "\n", "train_set", "=", "ImageDataset", "(", "dataset", ".", "train", ",", "train_transforms", ")", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__": [[15, 42], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Qidian213_Ranked_Person_ReID.solver.lr_scheduler.WarmupMultiStepLR.get_lr": [[43, 56], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "self", ".", "last_epoch", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]]}