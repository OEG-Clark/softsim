{"home.repos.pwc.inspect_result.ncarraz_ESRGANplus.codes.train.main": [[19, 170], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "options.parse", "options.dict_to_nonedict", "utils.util.setup_logger", "utils.util.setup_logger", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "utils.util.set_random_seed", "opt[].items", "models.create_model", "logging.getLogger.info", "range", "logging.getLogger.info", "models.create_model.save", "logging.getLogger.info", "torch.load", "utils.util.mkdir_and_rename", "utils.util.mkdirs", "logging.getLogger.info", "options.check_resume", "options.dict2str", "SummaryWriter", "random.randint", "models.create_model.resume_training", "enumerate", "argparse.ArgumentParser.parse_args", "data.create_dataset", "int", "logging.getLogger.info", "int", "int", "logging.getLogger.info", "data.create_dataloader", "models.create_model.update_learning_rate", "models.create_model.feed_data", "models.create_model.optimize_parameters", "math.ceil", "math.ceil", "data.create_dataset", "data.create_dataloader", "logging.getLogger.info", "NotImplementedError", "models.create_model.get_current_log", "model.get_current_log.items", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "models.create_model.save", "models.create_model.save_training_state", "opt[].items", "len", "models.create_model.get_current_learning_rate", "os.path.join", "utils.util.mkdir", "models.create_model.feed_data", "models.create_model.test", "models.create_model.get_current_visuals", "utils.util.tensor2img", "utils.util.tensor2img", "os.path.join", "utils.util.save_img", "utils.util.calculate_psnr", "SummaryWriter.add_scalar", "len", "len", "SummaryWriter.add_scalar", "os.path.splitext", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.options.options.parse", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.options.options.dict_to_nonedict", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.setup_logger", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.setup_logger", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.set_random_seed", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.__init__.create_model", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.save", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir_and_rename", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdirs", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.options.options.check_resume", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.options.options.dict2str", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.resume_training", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.__init__.create_dataset", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.__init__.create_dataloader", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.update_learning_rate", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.feed_data", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.optimize_parameters", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.__init__.create_dataset", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.__init__.create_dataloader", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.get_current_log", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.save", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.save_training_state", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_current_learning_rate", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.feed_data", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.test", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.get_current_visuals", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.tensor2img", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.tensor2img", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.save_img", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.calculate_psnr"], ["def", "main", "(", ")", ":", "\n", "# options", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-opt'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'Path to option JSON file.'", ")", "\n", "opt", "=", "option", ".", "parse", "(", "parser", ".", "parse_args", "(", ")", ".", "opt", ",", "is_train", "=", "True", ")", "\n", "opt", "=", "option", ".", "dict_to_nonedict", "(", "opt", ")", "# Convert to NoneDict, which return None for missing key.", "\n", "\n", "# train from scratch OR resume training", "\n", "if", "opt", "[", "'path'", "]", "[", "'resume_state'", "]", ":", "# resuming training", "\n", "        ", "resume_state", "=", "torch", ".", "load", "(", "opt", "[", "'path'", "]", "[", "'resume_state'", "]", ")", "\n", "", "else", ":", "# training from scratch", "\n", "        ", "resume_state", "=", "None", "\n", "util", ".", "mkdir_and_rename", "(", "opt", "[", "'path'", "]", "[", "'experiments_root'", "]", ")", "# rename old folder if exists", "\n", "util", ".", "mkdirs", "(", "(", "path", "for", "key", ",", "path", "in", "opt", "[", "'path'", "]", ".", "items", "(", ")", "if", "not", "key", "==", "'experiments_root'", "\n", "and", "'pretrain_model'", "not", "in", "key", "and", "'resume'", "not", "in", "key", ")", ")", "\n", "\n", "# config loggers. Before it, the log will not work", "\n", "", "util", ".", "setup_logger", "(", "None", ",", "opt", "[", "'path'", "]", "[", "'log'", "]", ",", "'train'", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "True", ")", "\n", "util", ".", "setup_logger", "(", "'val'", ",", "opt", "[", "'path'", "]", "[", "'log'", "]", ",", "'val'", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "\n", "if", "resume_state", ":", "\n", "        ", "logger", ".", "info", "(", "'Resuming training from epoch: {}, iter: {}.'", ".", "format", "(", "\n", "resume_state", "[", "'epoch'", "]", ",", "resume_state", "[", "'iter'", "]", ")", ")", "\n", "option", ".", "check_resume", "(", "opt", ")", "# check resume options", "\n", "\n", "", "logger", ".", "info", "(", "option", ".", "dict2str", "(", "opt", ")", ")", "\n", "# tensorboard logger", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "        ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "tb_logger", "=", "SummaryWriter", "(", "log_dir", "=", "'../tb_logger/'", "+", "opt", "[", "'name'", "]", ")", "\n", "\n", "# random seed", "\n", "", "seed", "=", "opt", "[", "'train'", "]", "[", "'manual_seed'", "]", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "seed", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "\n", "", "logger", ".", "info", "(", "'Random seed: {}'", ".", "format", "(", "seed", ")", ")", "\n", "util", ".", "set_random_seed", "(", "seed", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benckmark", "=", "True", "\n", "# torch.backends.cudnn.deterministic = True", "\n", "\n", "# create train and val dataloader", "\n", "for", "phase", ",", "dataset_opt", "in", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "phase", "==", "'train'", ":", "\n", "            ", "train_set", "=", "create_dataset", "(", "dataset_opt", ")", "\n", "train_size", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "train_set", ")", "/", "dataset_opt", "[", "'batch_size'", "]", ")", ")", "\n", "logger", ".", "info", "(", "'Number of train images: {:,d}, iters: {:,d}'", ".", "format", "(", "\n", "len", "(", "train_set", ")", ",", "train_size", ")", ")", "\n", "total_iters", "=", "int", "(", "opt", "[", "'train'", "]", "[", "'niter'", "]", ")", "\n", "total_epochs", "=", "int", "(", "math", ".", "ceil", "(", "total_iters", "/", "train_size", ")", ")", "\n", "logger", ".", "info", "(", "'Total epochs needed: {:d} for iters {:,d}'", ".", "format", "(", "\n", "total_epochs", ",", "total_iters", ")", ")", "\n", "train_loader", "=", "create_dataloader", "(", "train_set", ",", "dataset_opt", ")", "\n", "", "elif", "phase", "==", "'val'", ":", "\n", "            ", "val_set", "=", "create_dataset", "(", "dataset_opt", ")", "\n", "val_loader", "=", "create_dataloader", "(", "val_set", ",", "dataset_opt", ")", "\n", "logger", ".", "info", "(", "'Number of val images in [{:s}]: {:d}'", ".", "format", "(", "dataset_opt", "[", "'name'", "]", ",", "\n", "len", "(", "val_set", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Phase [{:s}] is not recognized.'", ".", "format", "(", "phase", ")", ")", "\n", "", "", "assert", "train_loader", "is", "not", "None", "\n", "\n", "# create model", "\n", "model", "=", "create_model", "(", "opt", ")", "\n", "\n", "# resume training", "\n", "if", "resume_state", ":", "\n", "        ", "start_epoch", "=", "resume_state", "[", "'epoch'", "]", "\n", "current_step", "=", "resume_state", "[", "'iter'", "]", "\n", "model", ".", "resume_training", "(", "resume_state", ")", "# handle optimizers and schedulers", "\n", "", "else", ":", "\n", "        ", "current_step", "=", "0", "\n", "start_epoch", "=", "0", "\n", "\n", "# training", "\n", "", "logger", ".", "info", "(", "'Start training from epoch: {:d}, iter: {:d}'", ".", "format", "(", "start_epoch", ",", "current_step", ")", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "total_epochs", ")", ":", "\n", "        ", "for", "_", ",", "train_data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "current_step", "+=", "1", "\n", "if", "current_step", ">", "total_iters", ":", "\n", "                ", "break", "\n", "# update learning rate", "\n", "", "model", ".", "update_learning_rate", "(", ")", "\n", "\n", "# training", "\n", "model", ".", "feed_data", "(", "train_data", ")", "\n", "model", ".", "optimize_parameters", "(", "current_step", ")", "\n", "\n", "# log", "\n", "if", "current_step", "%", "opt", "[", "'logger'", "]", "[", "'print_freq'", "]", "==", "0", ":", "\n", "                ", "logs", "=", "model", ".", "get_current_log", "(", ")", "\n", "message", "=", "'<epoch:{:3d}, iter:{:8,d}, lr:{:.3e}> '", ".", "format", "(", "\n", "epoch", ",", "current_step", ",", "model", ".", "get_current_learning_rate", "(", ")", ")", "\n", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", ":", "\n", "                    ", "message", "+=", "'{:s}: {:.4e} '", ".", "format", "(", "k", ",", "v", ")", "\n", "# tensorboard logger", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                        ", "tb_logger", ".", "add_scalar", "(", "k", ",", "v", ",", "current_step", ")", "\n", "", "", "logger", ".", "info", "(", "message", ")", "\n", "\n", "# validation", "\n", "", "if", "current_step", "%", "opt", "[", "'train'", "]", "[", "'val_freq'", "]", "==", "0", ":", "\n", "                ", "avg_psnr", "=", "0.0", "\n", "idx", "=", "0", "\n", "for", "val_data", "in", "val_loader", ":", "\n", "                    ", "idx", "+=", "1", "\n", "img_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "val_data", "[", "'LR_path'", "]", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'val_images'", "]", ",", "img_name", ")", "\n", "util", ".", "mkdir", "(", "img_dir", ")", "\n", "\n", "model", ".", "feed_data", "(", "val_data", ")", "\n", "model", ".", "test", "(", ")", "\n", "\n", "visuals", "=", "model", ".", "get_current_visuals", "(", ")", "\n", "sr_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'SR'", "]", ")", "# uint8", "\n", "gt_img", "=", "util", ".", "tensor2img", "(", "visuals", "[", "'HR'", "]", ")", "# uint8", "\n", "\n", "# Save SR images for reference", "\n", "save_img_path", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "'{:s}_{:d}.png'", ".", "format", "(", "img_name", ",", "current_step", ")", ")", "\n", "util", ".", "save_img", "(", "sr_img", ",", "save_img_path", ")", "\n", "\n", "# calculate PSNR", "\n", "crop_size", "=", "opt", "[", "'scale'", "]", "\n", "gt_img", "=", "gt_img", "/", "255.", "\n", "sr_img", "=", "sr_img", "/", "255.", "\n", "cropped_sr_img", "=", "sr_img", "[", "crop_size", ":", "-", "crop_size", ",", "crop_size", ":", "-", "crop_size", ",", ":", "]", "\n", "cropped_gt_img", "=", "gt_img", "[", "crop_size", ":", "-", "crop_size", ",", "crop_size", ":", "-", "crop_size", ",", ":", "]", "\n", "avg_psnr", "+=", "util", ".", "calculate_psnr", "(", "cropped_sr_img", "*", "255", ",", "cropped_gt_img", "*", "255", ")", "\n", "\n", "", "avg_psnr", "=", "avg_psnr", "/", "idx", "\n", "\n", "# log", "\n", "logger", ".", "info", "(", "'# Validation # PSNR: {:.4e}'", ".", "format", "(", "avg_psnr", ")", ")", "\n", "logger_val", "=", "logging", ".", "getLogger", "(", "'val'", ")", "# validation logger", "\n", "logger_val", ".", "info", "(", "'<epoch:{:3d}, iter:{:8,d}> psnr: {:.4e}'", ".", "format", "(", "\n", "epoch", ",", "current_step", ",", "avg_psnr", ")", ")", "\n", "# tensorboard logger", "\n", "if", "opt", "[", "'use_tb_logger'", "]", "and", "'debug'", "not", "in", "opt", "[", "'name'", "]", ":", "\n", "                    ", "tb_logger", ".", "add_scalar", "(", "'psnr'", ",", "avg_psnr", ",", "current_step", ")", "\n", "\n", "# save models and training states", "\n", "", "", "if", "current_step", "%", "opt", "[", "'logger'", "]", "[", "'save_checkpoint_freq'", "]", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Saving models and training states.'", ")", "\n", "model", ".", "save", "(", "current_step", ")", "\n", "model", ".", "save_training_state", "(", "epoch", ",", "current_step", ")", "\n", "\n", "", "", "", "logger", ".", "info", "(", "'Saving the final model.'", ")", "\n", "model", ".", "save", "(", "'latest'", ")", "\n", "logger", ".", "info", "(", "'End of training.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.codes.test_dataloader.render": [[50, 67], ["torch.max", "argmax.squeeze().byte.squeeze().byte", "argmax.squeeze().byte.size", "torch.FloatTensor().fill_", "range", "torch.eq", "torch.FloatTensor().fill_.select().masked_fill_", "torch.FloatTensor().fill_.select().masked_fill_", "torch.FloatTensor().fill_.select().masked_fill_", "torch.eq", "torch.FloatTensor().fill_.select().masked_fill_", "torch.FloatTensor().fill_.select().masked_fill_", "torch.FloatTensor().fill_.select().masked_fill_", "argmax.squeeze().byte.squeeze", "torch.FloatTensor", "torch.FloatTensor().fill_.select", "torch.FloatTensor().fill_.select", "torch.FloatTensor().fill_.select", "torch.FloatTensor().fill_.select", "torch.FloatTensor().fill_.select", "torch.FloatTensor().fill_.select"], "function", ["None"], ["def", "render", "(", "seg", ")", ":", "\n", "    ", "_", ",", "argmax", "=", "torch", ".", "max", "(", "seg", ",", "0", ")", "\n", "argmax", "=", "argmax", ".", "squeeze", "(", ")", ".", "byte", "(", ")", "\n", "# color img", "\n", "im_h", ",", "im_w", "=", "argmax", ".", "size", "(", ")", "\n", "color", "=", "torch", ".", "FloatTensor", "(", "3", ",", "im_h", ",", "im_w", ")", ".", "fill_", "(", "0", ")", "# black", "\n", "for", "k", "in", "range", "(", "8", ")", ":", "\n", "        ", "mask", "=", "torch", ".", "eq", "(", "argmax", ",", "k", ")", "\n", "color", ".", "select", "(", "0", ",", "0", ")", ".", "masked_fill_", "(", "mask", ",", "lookup_table", "[", "k", "]", "[", "0", "]", ")", "# R", "\n", "color", ".", "select", "(", "0", ",", "1", ")", ".", "masked_fill_", "(", "mask", ",", "lookup_table", "[", "k", "]", "[", "1", "]", ")", "# G", "\n", "color", ".", "select", "(", "0", ",", "2", ")", ".", "masked_fill_", "(", "mask", ",", "lookup_table", "[", "k", "]", "[", "2", "]", ")", "# B", "\n", "# void", "\n", "", "mask", "=", "torch", ".", "eq", "(", "argmax", ",", "255", ")", "\n", "color", ".", "select", "(", "0", ",", "0", ")", ".", "masked_fill_", "(", "mask", ",", "lookup_table", "[", "8", "]", "[", "0", "]", ")", "# R", "\n", "color", ".", "select", "(", "0", ",", "1", ")", ".", "masked_fill_", "(", "mask", ",", "lookup_table", "[", "8", "]", "[", "1", "]", ")", "# G", "\n", "color", ".", "select", "(", "0", ",", "2", ")", ".", "masked_fill_", "(", "mask", ",", "lookup_table", "[", "8", "]", "[", "2", "]", ")", "# B", "\n", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.codes.auto_test.modify_json": [[9, 22], ["open", "json.load", "json_file.seek", "json.dump", "json_file.truncate"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load"], ["def", "modify_json", "(", "json_path", ",", "model_name", ",", "iteration", ")", ":", "\n", "    ", "with", "open", "(", "json_path", ",", "'r+'", ")", "as", "json_file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "config", "[", "'name'", "]", "=", "model_name", "\n", "config", "[", "'datasets'", "]", "[", "'test_1'", "]", "[", "'name'", "]", "=", "'pirm_test_{:d}k'", ".", "format", "(", "iteration", ")", "\n", "# config['datasets']['test_1']['dataroot_LR'] = \\", "\n", "#   '/home/carraz/datasets/PIRM/PIRM_Test_set/LR'", "\n", "config", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "=", "'../experiments/{:s}/models/{:d}_G.pth'", ".", "format", "(", "model_name", ",", "iteration", "*", "1000", ")", "\n", "json_file", ".", "seek", "(", "0", ")", "# rewind", "\n", "json", ".", "dump", "(", "config", ",", "json_file", ")", "\n", "json_file", ".", "truncate", "(", ")", "# if the new data is smaller than the previous", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.progress_bar.ProgressBar.__init__": [[11, 18], ["progress_bar.ProgressBar._get_max_bar_width", "progress_bar.ProgressBar.start"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.progress_bar.ProgressBar._get_max_bar_width", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.progress_bar.ProgressBar.start"], ["def", "__init__", "(", "self", ",", "task_num", "=", "0", ",", "bar_width", "=", "50", ",", "start", "=", "True", ")", ":", "\n", "        ", "self", ".", "task_num", "=", "task_num", "\n", "max_bar_width", "=", "self", ".", "_get_max_bar_width", "(", ")", "\n", "self", ".", "bar_width", "=", "(", "bar_width", "if", "bar_width", "<=", "max_bar_width", "else", "max_bar_width", ")", "\n", "self", ".", "completed", "=", "0", "\n", "if", "start", ":", "\n", "            ", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.progress_bar.ProgressBar._get_max_bar_width": [[19, 27], ["shutil.get_terminal_size", "min", "int", "print"], "methods", ["None"], ["", "", "def", "_get_max_bar_width", "(", "self", ")", ":", "\n", "        ", "terminal_width", ",", "_", "=", "get_terminal_size", "(", ")", "\n", "max_bar_width", "=", "min", "(", "int", "(", "terminal_width", "*", "0.6", ")", ",", "terminal_width", "-", "50", ")", "\n", "if", "max_bar_width", "<", "10", ":", "\n", "            ", "print", "(", "'terminal width is too small ({}), please consider widen the terminal for better '", "\n", "'progressbar visualization'", ".", "format", "(", "terminal_width", ")", ")", "\n", "max_bar_width", "=", "10", "\n", "", "return", "max_bar_width", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.progress_bar.ProgressBar.start": [[28, 36], ["sys.stdout.flush", "time.time", "sys.stdout.write", "sys.stdout.write"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "task_num", ">", "0", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'[{}] 0/{}, elapsed: 0s, ETA:\\n{}\\n'", ".", "format", "(", "\n", "' '", "*", "self", ".", "bar_width", ",", "self", ".", "task_num", ",", "'Start...'", ")", ")", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'completed: 0, elapsed: 0s'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.progress_bar.ProgressBar.update": [[37, 54], ["sys.stdout.flush", "time.time", "int", "int", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "float", "int", "int"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "msg", "=", "'In progress...'", ")", ":", "\n", "        ", "self", ".", "completed", "+=", "1", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "fps", "=", "self", ".", "completed", "/", "elapsed", "\n", "if", "self", ".", "task_num", ">", "0", ":", "\n", "            ", "percentage", "=", "self", ".", "completed", "/", "float", "(", "self", ".", "task_num", ")", "\n", "eta", "=", "int", "(", "elapsed", "*", "(", "1", "-", "percentage", ")", "/", "percentage", "+", "0.5", ")", "\n", "mark_width", "=", "int", "(", "self", ".", "bar_width", "*", "percentage", ")", "\n", "bar_chars", "=", "'\u2588'", "*", "mark_width", "+", "'-'", "*", "(", "self", ".", "bar_width", "-", "mark_width", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\033[2F'", ")", "# cursor up 2 lines", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\033[J'", ")", "# clean the output (remove extra chars since last display)", "\n", "sys", ".", "stdout", ".", "write", "(", "'[{}] {}/{}, {:.1f} task/s, elapsed: {}s, ETA: {:5}s\\n{}\\n'", ".", "format", "(", "\n", "bar_chars", ",", "self", ".", "completed", ",", "self", ".", "task_num", ",", "fps", ",", "int", "(", "elapsed", "+", "0.5", ")", ",", "eta", ",", "msg", ")", ")", "\n", "", "else", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'completed: {}, elapsed: {}s, {:.1f} tasks/s'", ".", "format", "(", "\n", "self", ".", "completed", ",", "int", "(", "elapsed", "+", "0.5", ")", ",", "fps", ")", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.get_timestamp": [[16, 18], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "get_timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H%M%S'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir": [[20, 23], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdirs": [[25, 31], ["isinstance", "util.mkdir", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "", "else", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir_and_rename": [[33, 41], ["os.path.exists", "os.makedirs", "print", "logging.getLogger", "logging.getLogger.info", "os.rename", "util.get_timestamp"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.get_timestamp"], ["", "", "", "def", "mkdir_and_rename", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "new_name", "=", "path", "+", "'_archived_'", "+", "get_timestamp", "(", ")", "\n", "print", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "logger", ".", "info", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "os", ".", "rename", "(", "path", ",", "new_name", ")", "\n", "", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.set_random_seed": [[43, 48], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.setup_logger": [[50, 64], ["logging.getLogger", "logging.Formatter", "os.path.join", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "util.get_timestamp"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.get_timestamp"], ["", "def", "setup_logger", "(", "logger_name", ",", "root", ",", "phase", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "False", ")", ":", "\n", "    ", "'''set up logger'''", "\n", "l", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'%(asctime)s.%(msecs)03d - %(levelname)s: %(message)s'", ",", "datefmt", "=", "'%y-%m-%d %H:%M:%S'", ")", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "phase", "+", "'_{}.log'", ".", "format", "(", "get_timestamp", "(", ")", ")", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "l", ".", "setLevel", "(", "level", ")", "\n", "l", ".", "addHandler", "(", "fh", ")", "\n", "if", "screen", ":", "\n", "        ", "sh", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "sh", ".", "setFormatter", "(", "formatter", ")", "\n", "l", ".", "addHandler", "(", "sh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.tensor2img": [[71, 96], ["tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu().clamp_", "tensor.squeeze().float().cpu().clamp_.dim", "tensor.numpy.astype", "len", "torchvision.utils.make_grid().numpy", "numpy.transpose", "tensor.squeeze().float().cpu().clamp_.squeeze().float().cpu", "tensor.squeeze().float().cpu().clamp_.numpy", "numpy.transpose", "torchvision.utils.make_grid", "tensor.squeeze().float().cpu().clamp_.numpy", "TypeError", "tensor.squeeze().float().cpu().clamp_.squeeze().float", "int", "tensor.squeeze().float().cpu().clamp_.squeeze", "math.sqrt"], "function", ["None"], ["", "", "def", "tensor2img", "(", "tensor", ",", "out_type", "=", "np", ".", "uint8", ",", "min_max", "=", "(", "0", ",", "1", ")", ")", ":", "\n", "    ", "'''\n    Converts a torch Tensor into an image Numpy array\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "2", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'", ".", "format", "(", "n_dim", ")", ")", "\n", "", "if", "out_type", "==", "np", ".", "uint8", ":", "\n", "        ", "img_np", "=", "(", "img_np", "*", "255.0", ")", ".", "round", "(", ")", "\n", "# Important. Unlike matlab, numpy.unit8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.save_img": [[98, 100], ["cv2.imwrite"], "function", ["None"], ["", "def", "save_img", "(", "img", ",", "img_path", ",", "mode", "=", "'RGB'", ")", ":", "\n", "    ", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.calculate_psnr": [[107, 115], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "float", "math.log10", "math.sqrt"], "function", ["None"], ["", "def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.ssim": [[117, 138], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.calculate_ssim": [[140, 159], ["ValueError", "util.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "util.ssim", "util.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.scripts.color2gray.main": [[12, 47], ["sorted", "utils.progress_bar.ProgressBar", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "print", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "print", "print", "sys.exit", "os.walk", "os.walk", "img_list.extend", "utils.progress_bar.ProgressBar.update", "len", "multiprocessing.Pool.apply_async", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.progress_bar.ProgressBar.update"], ["def", "main", "(", ")", ":", "\n", "    ", "\"\"\"A multi-thread tool for converting RGB images to gary/Y images.\"\"\"", "\n", "\n", "input_folder", "=", "'/home/carraz/datasets/DIV2K800/DIV2K800'", "\n", "save_folder", "=", "'/home/carraz/datasets/DIV2K800/DIV2K800_gray'", "\n", "mode", "=", "'gray'", "# 'gray' | 'y': Y channel in YCbCr space", "\n", "compression_level", "=", "3", "# 3 is the default value in cv2", "\n", "# CV_IMWRITE_PNG_COMPRESSION from 0 to 9. A higher value means a smaller size and longer", "\n", "# compression time. If read raw images during training, use 0 for faster IO speed.", "\n", "n_thread", "=", "20", "# thread number", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "print", "(", "'mkdir [{:s}] ...'", ".", "format", "(", "save_folder", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Folder [{:s}] already exists. Exit...'", ".", "format", "(", "save_folder", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "# print('Parent process {:d}.'.format(os.getpid()))", "\n", "\n", "", "img_list", "=", "[", "]", "\n", "for", "root", ",", "_", ",", "file_list", "in", "sorted", "(", "os", ".", "walk", "(", "input_folder", ")", ")", ":", "\n", "        ", "path", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "x", ")", "for", "x", "in", "file_list", "]", "# assume only images in the input_folder", "\n", "img_list", ".", "extend", "(", "path", ")", "\n", "\n", "", "def", "update", "(", "arg", ")", ":", "\n", "        ", "pbar", ".", "update", "(", "arg", ")", "\n", "\n", "", "pbar", "=", "ProgressBar", "(", "len", "(", "img_list", ")", ")", "\n", "\n", "pool", "=", "Pool", "(", "n_thread", ")", "\n", "for", "path", "in", "img_list", ":", "\n", "        ", "pool", ".", "apply_async", "(", "worker", ",", "args", "=", "(", "path", ",", "save_folder", ",", "mode", ",", "compression_level", ")", ",", "callback", "=", "update", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "print", "(", "'All subprocesses done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.scripts.color2gray.worker": [[49, 60], ["os.path.basename", "os.path.basename", "cv2.imread", "cv2.imwrite", "cv2.cvtColor", "data.util.bgr2ycbcr", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.bgr2ycbcr"], ["", "def", "worker", "(", "path", ",", "save_folder", ",", "mode", ",", "compression_level", ")", ":", "\n", "    ", "img_name", "=", "os", ".", "path", ".", "basename", "(", "path", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "# BGR", "\n", "if", "mode", "==", "'gray'", ":", "\n", "        ", "img_y", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "", "else", ":", "\n", "        ", "img_y", "=", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", "\n", "", "cv2", ".", "imwrite", "(", "\n", "os", ".", "path", ".", "join", "(", "save_folder", ",", "img_name", ")", ",", "img_y", ",", "\n", "[", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ",", "compression_level", "]", ")", "\n", "return", "'Processing {:s} ...'", ".", "format", "(", "img_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.scripts.extract_subimgs_single.main": [[11, 48], ["sorted", "utils.progress_bar.ProgressBar", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "print", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "print", "print", "sys.exit", "os.walk", "os.walk", "img_list.extend", "utils.progress_bar.ProgressBar.update", "len", "multiprocessing.Pool.apply_async", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.progress_bar.ProgressBar.update"], ["def", "main", "(", ")", ":", "\n", "    ", "\"\"\"A multi-thread tool to crop sub imags.\"\"\"", "\n", "input_folder", "=", "'/home/carraz/datasets/DIV2K800/DIV2K800'", "\n", "save_folder", "=", "'/home/carraz/datasets/DIV2K800/DIV2K800_sub'", "\n", "n_thread", "=", "20", "\n", "crop_sz", "=", "480", "\n", "step", "=", "240", "\n", "thres_sz", "=", "48", "\n", "compression_level", "=", "3", "# 3 is the default value in cv2", "\n", "# CV_IMWRITE_PNG_COMPRESSION from 0 to 9. A higher value means a smaller size and longer", "\n", "# compression time. If read raw images during training, use 0 for faster IO speed.", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "print", "(", "'mkdir [{:s}] ...'", ".", "format", "(", "save_folder", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Folder [{:s}] already exists. Exit...'", ".", "format", "(", "save_folder", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "img_list", "=", "[", "]", "\n", "for", "root", ",", "_", ",", "file_list", "in", "sorted", "(", "os", ".", "walk", "(", "input_folder", ")", ")", ":", "\n", "        ", "path", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "x", ")", "for", "x", "in", "file_list", "]", "# assume only images in the input_folder", "\n", "img_list", ".", "extend", "(", "path", ")", "\n", "\n", "", "def", "update", "(", "arg", ")", ":", "\n", "        ", "pbar", ".", "update", "(", "arg", ")", "\n", "\n", "", "pbar", "=", "ProgressBar", "(", "len", "(", "img_list", ")", ")", "\n", "\n", "pool", "=", "Pool", "(", "n_thread", ")", "\n", "for", "path", "in", "img_list", ":", "\n", "        ", "pool", ".", "apply_async", "(", "worker", ",", "\n", "args", "=", "(", "path", ",", "save_folder", ",", "crop_sz", ",", "step", ",", "thres_sz", ",", "compression_level", ")", ",", "\n", "callback", "=", "update", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "print", "(", "'All subprocesses done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.scripts.extract_subimgs_single.worker": [[50, 85], ["os.path.basename", "os.path.basename", "cv2.imread", "len", "numpy.arange", "numpy.arange", "numpy.append", "numpy.append", "ValueError", "numpy.ascontiguousarray", "cv2.imwrite", "os.path.join", "os.path.join", "os.path.basename.replace"], "function", ["None"], ["", "def", "worker", "(", "path", ",", "save_folder", ",", "crop_sz", ",", "step", ",", "thres_sz", ",", "compression_level", ")", ":", "\n", "    ", "img_name", "=", "os", ".", "path", ".", "basename", "(", "path", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ",", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "\n", "n_channels", "=", "len", "(", "img", ".", "shape", ")", "\n", "if", "n_channels", "==", "2", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "\n", "", "elif", "n_channels", "==", "3", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong image shape - {}'", ".", "format", "(", "n_channels", ")", ")", "\n", "\n", "", "h_space", "=", "np", ".", "arange", "(", "0", ",", "h", "-", "crop_sz", "+", "1", ",", "step", ")", "\n", "if", "h", "-", "(", "h_space", "[", "-", "1", "]", "+", "crop_sz", ")", ">", "thres_sz", ":", "\n", "        ", "h_space", "=", "np", ".", "append", "(", "h_space", ",", "h", "-", "crop_sz", ")", "\n", "", "w_space", "=", "np", ".", "arange", "(", "0", ",", "w", "-", "crop_sz", "+", "1", ",", "step", ")", "\n", "if", "w", "-", "(", "w_space", "[", "-", "1", "]", "+", "crop_sz", ")", ">", "thres_sz", ":", "\n", "        ", "w_space", "=", "np", ".", "append", "(", "w_space", ",", "w", "-", "crop_sz", ")", "\n", "\n", "", "index", "=", "0", "\n", "for", "x", "in", "h_space", ":", "\n", "        ", "for", "y", "in", "w_space", ":", "\n", "            ", "index", "+=", "1", "\n", "if", "n_channels", "==", "2", ":", "\n", "                ", "crop_img", "=", "img", "[", "x", ":", "x", "+", "crop_sz", ",", "y", ":", "y", "+", "crop_sz", "]", "\n", "", "else", ":", "\n", "                ", "crop_img", "=", "img", "[", "x", ":", "x", "+", "crop_sz", ",", "y", ":", "y", "+", "crop_sz", ",", ":", "]", "\n", "", "crop_img", "=", "np", ".", "ascontiguousarray", "(", "crop_img", ")", "\n", "# var = np.var(crop_img / 255)", "\n", "# if var > 0.008:", "\n", "#     print(img_name, index_str, var)", "\n", "cv2", ".", "imwrite", "(", "\n", "os", ".", "path", ".", "join", "(", "save_folder", ",", "img_name", ".", "replace", "(", "'.png'", ",", "'_s{:03d}.png'", ".", "format", "(", "index", ")", ")", ")", ",", "\n", "crop_img", ",", "[", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ",", "compression_level", "]", ")", "\n", "", "", "return", "'Processing {:s} ...'", ".", "format", "(", "img_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.scripts.generate_mod_LR_bic.generate_mod_LR_bic": [[7, 72], ["os.path.join", "os.path.join", "os.path.join", "len", "range", "os.path.isdir", "print", "exit", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "print", "os.path.isdir", "os.mkdir", "print", "os.path.isdir", "os.mkdir", "print", "print", "cv2.imread", "int", "int", "data.util.imresize_np", "data.util.imresize_np", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "str", "str", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "f.endswith", "os.path.join", "numpy.floor", "numpy.floor", "len", "os.path.join", "os.path.join", "os.path.join", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.utils.util.mkdir", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.imresize_np", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.imresize_np"], ["def", "generate_mod_LR_bic", "(", ")", ":", "\n", "# set parameters", "\n", "    ", "up_scale", "=", "4", "\n", "mod_scale", "=", "4", "\n", "# set data dir", "\n", "sourcedir", "=", "'/data/datasets/img'", "\n", "savedir", "=", "'/data/datasets/mod'", "\n", "\n", "saveHRpath", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'HR'", ",", "'x'", "+", "str", "(", "mod_scale", ")", ")", "\n", "saveLRpath", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'LR'", ",", "'x'", "+", "str", "(", "up_scale", ")", ")", "\n", "saveBicpath", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'Bic'", ",", "'x'", "+", "str", "(", "up_scale", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "sourcedir", ")", ":", "\n", "        ", "print", "(", "'Error: No source data found'", ")", "\n", "exit", "(", "0", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "savedir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "savedir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'HR'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'HR'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'LR'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'LR'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'Bic'", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "savedir", ",", "'Bic'", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "saveHRpath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "saveHRpath", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'It will cover '", "+", "str", "(", "saveHRpath", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "saveLRpath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "saveLRpath", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'It will cover '", "+", "str", "(", "saveLRpath", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "saveBicpath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "saveBicpath", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'It will cover '", "+", "str", "(", "saveBicpath", ")", ")", "\n", "\n", "", "filepaths", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "sourcedir", ")", "if", "f", ".", "endswith", "(", "'.png'", ")", "]", "\n", "num_files", "=", "len", "(", "filepaths", ")", "\n", "\n", "# prepare data with augementation", "\n", "for", "i", "in", "range", "(", "num_files", ")", ":", "\n", "        ", "filename", "=", "filepaths", "[", "i", "]", "\n", "print", "(", "'No.{} -- Processing {}'", ".", "format", "(", "i", ",", "filename", ")", ")", "\n", "# read image", "\n", "image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "sourcedir", ",", "filename", ")", ")", "\n", "\n", "width", "=", "int", "(", "np", ".", "floor", "(", "image", ".", "shape", "[", "1", "]", "/", "mod_scale", ")", ")", "\n", "height", "=", "int", "(", "np", ".", "floor", "(", "image", ".", "shape", "[", "0", "]", "/", "mod_scale", ")", ")", "\n", "# modcrop", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "            ", "image_HR", "=", "image", "[", "0", ":", "mod_scale", "*", "height", ",", "0", ":", "mod_scale", "*", "width", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "image_HR", "=", "image", "[", "0", ":", "mod_scale", "*", "height", ",", "0", ":", "mod_scale", "*", "width", "]", "\n", "# LR", "\n", "", "image_LR", "=", "imresize_np", "(", "image_HR", ",", "1", "/", "up_scale", ",", "True", ")", "\n", "# bic", "\n", "image_Bic", "=", "imresize_np", "(", "image_LR", ",", "up_scale", ",", "True", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "saveHRpath", ",", "filename", ")", ",", "image_HR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "saveLRpath", ",", "filename", ")", ",", "image_LR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "saveBicpath", ",", "filename", ")", ",", "image_Bic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.weights_init_normal": [[15, 28], ["classname.find", "torch.nn.init.normal_", "m.bias.data.zero_", "classname.find", "torch.nn.init.normal_", "m.bias.data.zero_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["def", "weights_init_normal", "(", "m", ",", "std", "=", "0.02", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "std", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "std", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "std", ")", "# BN also uses norm", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.weights_init_kaiming": [[30, 45], ["classname.find", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "classname.find", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "classname.find", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ",", "scale", "=", "1", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "weight", ".", "data", "*=", "scale", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "weight", ".", "data", "*=", "scale", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.weights_init_orthogonal": [[47, 60], ["classname.find", "torch.nn.init.orthogonal_", "m.bias.data.zero_", "classname.find", "torch.nn.init.orthogonal_", "m.bias.data.zero_", "classname.find", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_orthogonal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.init_weights": [[62, 75], ["logger.info", "functools.partial", "net.apply", "functools.partial", "net.apply", "net.apply", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.SpectralNorm.apply", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.SpectralNorm.apply", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.SpectralNorm.apply"], ["", "", "def", "init_weights", "(", "net", ",", "init_type", "=", "'kaiming'", ",", "scale", "=", "1", ",", "std", "=", "0.02", ")", ":", "\n", "# scale for 'kaiming', std for 'normal'.", "\n", "    ", "logger", ".", "info", "(", "'Initialization method [{:s}]'", ".", "format", "(", "init_type", ")", ")", "\n", "if", "init_type", "==", "'normal'", ":", "\n", "        ", "weights_init_normal_", "=", "functools", ".", "partial", "(", "weights_init_normal", ",", "std", "=", "std", ")", "\n", "net", ".", "apply", "(", "weights_init_normal_", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "        ", "weights_init_kaiming_", "=", "functools", ".", "partial", "(", "weights_init_kaiming", ",", "scale", "=", "scale", ")", "\n", "net", ".", "apply", "(", "weights_init_kaiming_", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_orthogonal", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'initialization method [{:s}] not implemented'", ".", "format", "(", "init_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_G": [[83, 109], ["models.SRResNet", "networks.init_weights", "torch.cuda.is_available", "torch.cuda.is_available", "torch.DataParallel", "models.SFT_Net", "models.RRDBNet", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.init_weights"], ["", "", "def", "define_G", "(", "opt", ")", ":", "\n", "    ", "gpu_ids", "=", "opt", "[", "'gpu_ids'", "]", "\n", "opt_net", "=", "opt", "[", "'network_G'", "]", "\n", "which_model", "=", "opt_net", "[", "'which_model_G'", "]", "\n", "\n", "if", "which_model", "==", "'sr_resnet'", ":", "# SRResNet", "\n", "        ", "netG", "=", "arch", ".", "SRResNet", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "out_nc", "=", "opt_net", "[", "'out_nc'", "]", ",", "nf", "=", "opt_net", "[", "'nf'", "]", ",", "nb", "=", "opt_net", "[", "'nb'", "]", ",", "upscale", "=", "opt_net", "[", "'scale'", "]", ",", "norm_type", "=", "opt_net", "[", "'norm_type'", "]", ",", "act_type", "=", "'relu'", ",", "mode", "=", "opt_net", "[", "'mode'", "]", ",", "upsample_mode", "=", "'pixelshuffle'", ")", "\n", "\n", "", "elif", "which_model", "==", "'sft_arch'", ":", "# SFT-GAN", "\n", "        ", "netG", "=", "sft_arch", ".", "SFT_Net", "(", ")", "\n", "\n", "", "elif", "which_model", "==", "'RRDB_net'", ":", "# RRDB", "\n", "        ", "netG", "=", "arch", ".", "RRDBNet", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "out_nc", "=", "opt_net", "[", "'out_nc'", "]", ",", "nf", "=", "opt_net", "[", "'nf'", "]", ",", "\n", "nb", "=", "opt_net", "[", "'nb'", "]", ",", "gc", "=", "opt_net", "[", "'gc'", "]", ",", "upscale", "=", "opt_net", "[", "'scale'", "]", ",", "norm_type", "=", "opt_net", "[", "'norm_type'", "]", ",", "\n", "act_type", "=", "'leakyrelu'", ",", "mode", "=", "opt_net", "[", "'mode'", "]", ",", "upsample_mode", "=", "'upconv'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model [{:s}] not recognized'", ".", "format", "(", "which_model", ")", ")", "\n", "\n", "", "if", "opt", "[", "'is_train'", "]", ":", "\n", "        ", "init_weights", "(", "netG", ",", "init_type", "=", "'kaiming'", ",", "scale", "=", "0.1", ")", "\n", "", "if", "gpu_ids", ":", "\n", "        ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "netG", "=", "nn", ".", "DataParallel", "(", "netG", ")", "\n", "", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_D": [[112, 139], ["networks.init_weights", "models.Discriminator_VGG_128", "torch.DataParallel", "models.ACD_VGG_BN_96", "models.Discriminator_VGG_96", "models.Discriminator_VGG_192", "models.Discriminator_VGG_128_SN", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.init_weights"], ["", "def", "define_D", "(", "opt", ")", ":", "\n", "    ", "gpu_ids", "=", "opt", "[", "'gpu_ids'", "]", "\n", "opt_net", "=", "opt", "[", "'network_D'", "]", "\n", "which_model", "=", "opt_net", "[", "'which_model_D'", "]", "\n", "\n", "if", "which_model", "==", "'discriminator_vgg_128'", ":", "\n", "        ", "netD", "=", "arch", ".", "Discriminator_VGG_128", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "base_nf", "=", "opt_net", "[", "'nf'", "]", ",", "norm_type", "=", "opt_net", "[", "'norm_type'", "]", ",", "mode", "=", "opt_net", "[", "'mode'", "]", ",", "act_type", "=", "opt_net", "[", "'act_type'", "]", ")", "\n", "\n", "", "elif", "which_model", "==", "'dis_acd'", ":", "# sft-gan, Auxiliary Classifier Discriminator", "\n", "        ", "netD", "=", "sft_arch", ".", "ACD_VGG_BN_96", "(", ")", "\n", "\n", "", "elif", "which_model", "==", "'discriminator_vgg_96'", ":", "\n", "        ", "netD", "=", "arch", ".", "Discriminator_VGG_96", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "base_nf", "=", "opt_net", "[", "'nf'", "]", ",", "norm_type", "=", "opt_net", "[", "'norm_type'", "]", ",", "mode", "=", "opt_net", "[", "'mode'", "]", ",", "act_type", "=", "opt_net", "[", "'act_type'", "]", ")", "\n", "", "elif", "which_model", "==", "'discriminator_vgg_192'", ":", "\n", "        ", "netD", "=", "arch", ".", "Discriminator_VGG_192", "(", "in_nc", "=", "opt_net", "[", "'in_nc'", "]", ",", "base_nf", "=", "opt_net", "[", "'nf'", "]", ",", "norm_type", "=", "opt_net", "[", "'norm_type'", "]", ",", "mode", "=", "opt_net", "[", "'mode'", "]", ",", "act_type", "=", "opt_net", "[", "'act_type'", "]", ")", "\n", "", "elif", "which_model", "==", "'discriminator_vgg_128_SN'", ":", "\n", "        ", "netD", "=", "arch", ".", "Discriminator_VGG_128_SN", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Discriminator model [{:s}] not recognized'", ".", "format", "(", "which_model", ")", ")", "\n", "\n", "", "init_weights", "(", "netD", ",", "init_type", "=", "'kaiming'", ",", "scale", "=", "1", ")", "\n", "if", "gpu_ids", ":", "\n", "        ", "netD", "=", "nn", ".", "DataParallel", "(", "netD", ")", "\n", "", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_F": [[141, 156], ["torch.device", "torch.device", "models.VGGFeatureExtractor", "nn.DataParallel.eval", "torch.DataParallel"], "function", ["None"], ["", "def", "define_F", "(", "opt", ",", "use_bn", "=", "False", ")", ":", "\n", "    ", "gpu_ids", "=", "opt", "[", "'gpu_ids'", "]", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "gpu_ids", "else", "'cpu'", ")", "\n", "# pytorch pretrained VGG19-54, before ReLU.", "\n", "if", "use_bn", ":", "\n", "        ", "feature_layer", "=", "49", "\n", "", "else", ":", "\n", "        ", "feature_layer", "=", "34", "\n", "", "netF", "=", "arch", ".", "VGGFeatureExtractor", "(", "feature_layer", "=", "feature_layer", ",", "use_bn", "=", "use_bn", ",", "use_input_norm", "=", "True", ",", "device", "=", "device", ")", "\n", "# netF = arch.ResNet101FeatureExtractor(use_input_norm=True, device=device)", "\n", "if", "gpu_ids", ":", "\n", "        ", "netF", "=", "nn", ".", "DataParallel", "(", "netF", ")", "\n", "", "netF", ".", "eval", "(", ")", "# No need to train", "\n", "return", "netF", "\n", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SR_model.SRModel.__init__": [[16, 60], ["base_model.BaseModel.__init__", "models.define_G().to", "SR_model.SRModel.load", "SR_model.SRModel.print_network", "SR_model.SRModel.netG.train", "SR_model.SRModel.netG.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "SR_model.SRModel.optimizers.append", "collections.OrderedDict", "models.define_G", "torch.L1Loss().to", "torch.L1Loss().to", "NotImplementedError", "torch.MSELoss().to", "torch.MSELoss().to", "NotImplementedError", "optim_params.append", "logger.warning", "SR_model.SRModel.schedulers.append", "torch.L1Loss", "torch.L1Loss", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.print_network", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_G"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SRModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "train_opt", "=", "opt", "[", "'train'", "]", "\n", "\n", "# define network and load pretrained models", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "load", "(", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n", "# loss", "\n", "loss_type", "=", "train_opt", "[", "'pixel_criterion'", "]", "\n", "if", "loss_type", "==", "'l1'", ":", "\n", "                ", "self", ".", "cri_pix", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "loss_type", "==", "'l2'", ":", "\n", "                ", "self", ".", "cri_pix", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] is not recognized.'", ".", "format", "(", "loss_type", ")", ")", "\n", "", "self", ".", "l_pix_w", "=", "train_opt", "[", "'pixel_weight'", "]", "\n", "\n", "# optimizers", "\n", "wd_G", "=", "train_opt", "[", "'weight_decay_G'", "]", "if", "train_opt", "[", "'weight_decay_G'", "]", "else", "0", "\n", "optim_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "# can optimize for a part of the model", "\n", "                ", "if", "v", ".", "requires_grad", ":", "\n", "                    ", "optim_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "warning", "(", "'Params [{:s}] will not optimize.'", ".", "format", "(", "k", ")", ")", "\n", "", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "optim_params", ",", "lr", "=", "train_opt", "[", "'lr_G'", "]", ",", "weight_decay", "=", "wd_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "\n", "# schedulers", "\n", "if", "train_opt", "[", "'lr_scheme'", "]", "==", "'MultiStepLR'", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "self", ".", "schedulers", ".", "append", "(", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "train_opt", "[", "'lr_steps'", "]", ",", "train_opt", "[", "'lr_gamma'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'MultiStepLR learning rate scheme is enough.'", ")", "\n", "\n", "", "self", ".", "log_dict", "=", "OrderedDict", "(", ")", "\n", "# print network", "\n", "", "self", ".", "print_network", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SR_model.SRModel.feed_data": [[61, 65], ["data[].to", "data[].to"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ",", "need_HR", "=", "True", ")", ":", "\n", "        ", "self", ".", "var_L", "=", "data", "[", "'LR'", "]", ".", "to", "(", "self", ".", "device", ")", "# LR", "\n", "if", "need_HR", ":", "\n", "            ", "self", ".", "real_H", "=", "data", "[", "'HR'", "]", ".", "to", "(", "self", ".", "device", ")", "# HR", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SR_model.SRModel.optimize_parameters": [[66, 75], ["SR_model.SRModel.optimizer_G.zero_grad", "SR_model.SRModel.netG", "l_pix.backward", "SR_model.SRModel.optimizer_G.step", "l_pix.item", "SR_model.SRModel.cri_pix"], "methods", ["None"], ["", "", "def", "optimize_parameters", "(", "self", ",", "step", ")", ":", "\n", "        ", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "l_pix", "=", "self", ".", "l_pix_w", "*", "self", ".", "cri_pix", "(", "self", ".", "fake_H", ",", "self", ".", "real_H", ")", "\n", "l_pix", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "# set log", "\n", "self", ".", "log_dict", "[", "'l_pix'", "]", "=", "l_pix", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SR_model.SRModel.test": [[76, 81], ["SR_model.SRModel.netG.eval", "SR_model.SRModel.netG.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "SR_model.SRModel.netG"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SR_model.SRModel.test_x8": [[82, 121], ["SR_model.SRModel.netG.eval", "SR_model.SRModel.netG.named_parameters", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean", "SR_model.SRModel.netG.named_parameters", "SR_model.SRModel.netG.train", "v.data.cpu().numpy", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "lr_list.extend", "SR_model.SRModel.netG", "len", "v2np[].copy", "SR_model.SRModel.test_x8._transform"], "methods", ["None"], ["", "def", "test_x8", "(", "self", ")", ":", "\n", "# from https://github.com/thstkdgus35/EDSR-PyTorch", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "            ", "v", ".", "requires_grad", "=", "False", "\n", "\n", "", "def", "_transform", "(", "v", ",", "op", ")", ":", "\n", "# if self.precision != 'single': v = v.float()", "\n", "            ", "v2np", "=", "v", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "op", "==", "'v'", ":", "\n", "                ", "tfnp", "=", "v2np", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "", "elif", "op", "==", "'h'", ":", "\n", "                ", "tfnp", "=", "v2np", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "", "elif", "op", "==", "'t'", ":", "\n", "                ", "tfnp", "=", "v2np", ".", "transpose", "(", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", ".", "copy", "(", ")", "\n", "\n", "", "ret", "=", "torch", ".", "Tensor", "(", "tfnp", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# if self.precision == 'half': ret = ret.half()", "\n", "\n", "return", "ret", "\n", "\n", "", "lr_list", "=", "[", "self", ".", "var_L", "]", "\n", "for", "tf", "in", "'v'", ",", "'h'", ",", "'t'", ":", "\n", "            ", "lr_list", ".", "extend", "(", "[", "_transform", "(", "t", ",", "tf", ")", "for", "t", "in", "lr_list", "]", ")", "\n", "", "sr_list", "=", "[", "self", ".", "netG", "(", "aug", ")", "for", "aug", "in", "lr_list", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sr_list", ")", ")", ":", "\n", "            ", "if", "i", ">", "3", ":", "\n", "                ", "sr_list", "[", "i", "]", "=", "_transform", "(", "sr_list", "[", "i", "]", ",", "'t'", ")", "\n", "", "if", "i", "%", "4", ">", "1", ":", "\n", "                ", "sr_list", "[", "i", "]", "=", "_transform", "(", "sr_list", "[", "i", "]", ",", "'h'", ")", "\n", "", "if", "(", "i", "%", "4", ")", "%", "2", "==", "1", ":", "\n", "                ", "sr_list", "[", "i", "]", "=", "_transform", "(", "sr_list", "[", "i", "]", ",", "'v'", ")", "\n", "\n", "", "", "output_cat", "=", "torch", ".", "cat", "(", "sr_list", ",", "dim", "=", "0", ")", "\n", "self", ".", "fake_H", "=", "output_cat", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "\n", "            ", "v", ".", "requires_grad", "=", "True", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SR_model.SRModel.get_current_log": [[122, 124], ["None"], "methods", ["None"], ["", "def", "get_current_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SR_model.SRModel.get_current_visuals": [[125, 132], ["collections.OrderedDict", "[].float().cpu", "[].float().cpu", "[].float().cpu", "[].float", "[].float", "[].float", "SR_model.SRModel.var_L.detach", "SR_model.SRModel.fake_H.detach", "SR_model.SRModel.real_H.detach"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ",", "need_HR", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'LR'", "]", "=", "self", ".", "var_L", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "out_dict", "[", "'SR'", "]", "=", "self", ".", "fake_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "if", "need_HR", ":", "\n", "            ", "out_dict", "[", "'HR'", "]", "=", "self", ".", "real_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SR_model.SRModel.print_network": [[133, 143], ["SR_model.SRModel.get_network_description", "isinstance", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_network_description"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netG", ")", "\n", "if", "isinstance", "(", "self", ".", "netG", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netG", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Network G structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SR_model.SRModel.load": [[144, 149], ["logger.info", "SR_model.SRModel.load_network"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.load_network"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "load_path_G", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "\n", "if", "load_path_G", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading pretrained model for G [{:s}] ...'", ".", "format", "(", "load_path_G", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_G", ",", "self", ".", "netG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SR_model.SRModel.save": [[150, 152], ["SR_model.SRModel.save_network"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "iter_step", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "iter_step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRRaGAN_model.SRRaGANModel.__init__": [[16, 102], ["base_model.BaseModel.__init__", "models.define_G().to", "SRRaGAN_model.SRRaGANModel.load", "SRRaGAN_model.SRRaGANModel.print_network", "models.define_D().to", "SRRaGAN_model.SRRaGANModel.netG.train", "SRRaGAN_model.SRRaGANModel.netD.train", "models.modules.loss.GANLoss().to", "SRRaGAN_model.SRRaGANModel.netG.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "SRRaGAN_model.SRRaGANModel.optimizers.append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "SRRaGAN_model.SRRaGANModel.optimizers.append", "collections.OrderedDict", "models.define_G", "logger.info", "logger.info", "models.define_F().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "models.modules.loss.GradientPenaltyLoss().to", "SRRaGAN_model.SRRaGANModel.netD.parameters", "NotImplementedError", "models.define_D", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "models.modules.loss.GANLoss", "optim_params.append", "logger.warning", "SRRaGAN_model.SRRaGANModel.schedulers.append", "torch.MSELoss().to", "torch.MSELoss().to", "NotImplementedError", "torch.MSELoss().to", "torch.MSELoss().to", "NotImplementedError", "models.define_F", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "models.modules.loss.GradientPenaltyLoss", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.print_network", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_G", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_D", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_F"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SRRaGANModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "train_opt", "=", "opt", "[", "'train'", "]", "\n", "\n", "# define networks and load pretrained models", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "# G", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "# D", "\n", "self", ".", "netG", ".", "train", "(", ")", "\n", "self", ".", "netD", ".", "train", "(", ")", "\n", "", "self", ".", "load", "(", ")", "# load G and D if needed", "\n", "\n", "# define losses, optimizer and scheduler", "\n", "if", "self", ".", "is_train", ":", "\n", "# G pixel loss", "\n", "            ", "if", "train_opt", "[", "'pixel_weight'", "]", ">", "0", ":", "\n", "                ", "l_pix_type", "=", "train_opt", "[", "'pixel_criterion'", "]", "\n", "if", "l_pix_type", "==", "'l1'", ":", "\n", "                    ", "self", ".", "cri_pix", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "l_pix_type", "==", "'l2'", ":", "\n", "                    ", "self", ".", "cri_pix", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] not recognized.'", ".", "format", "(", "l_pix_type", ")", ")", "\n", "", "self", ".", "l_pix_w", "=", "train_opt", "[", "'pixel_weight'", "]", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "'Remove pixel loss.'", ")", "\n", "self", ".", "cri_pix", "=", "None", "\n", "\n", "# G feature loss", "\n", "", "if", "train_opt", "[", "'feature_weight'", "]", ">", "0", ":", "\n", "                ", "l_fea_type", "=", "train_opt", "[", "'feature_criterion'", "]", "\n", "if", "l_fea_type", "==", "'l1'", ":", "\n", "                    ", "self", ".", "cri_fea", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "l_fea_type", "==", "'l2'", ":", "\n", "                    ", "self", ".", "cri_fea", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] not recognized.'", ".", "format", "(", "l_fea_type", ")", ")", "\n", "", "self", ".", "l_fea_w", "=", "train_opt", "[", "'feature_weight'", "]", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "'Remove feature loss.'", ")", "\n", "self", ".", "cri_fea", "=", "None", "\n", "", "if", "self", ".", "cri_fea", ":", "# load VGG perceptual loss", "\n", "                ", "self", ".", "netF", "=", "networks", ".", "define_F", "(", "opt", ",", "use_bn", "=", "False", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# GD gan loss", "\n", "", "self", ".", "cri_gan", "=", "GANLoss", "(", "train_opt", "[", "'gan_type'", "]", ",", "1.0", ",", "0.0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "l_gan_w", "=", "train_opt", "[", "'gan_weight'", "]", "\n", "# D_update_ratio and D_init_iters are for WGAN", "\n", "self", ".", "D_update_ratio", "=", "train_opt", "[", "'D_update_ratio'", "]", "if", "train_opt", "[", "'D_update_ratio'", "]", "else", "1", "\n", "self", ".", "D_init_iters", "=", "train_opt", "[", "'D_init_iters'", "]", "if", "train_opt", "[", "'D_init_iters'", "]", "else", "0", "\n", "\n", "if", "train_opt", "[", "'gan_type'", "]", "==", "'wgan-gp'", ":", "\n", "                ", "self", ".", "random_pt", "=", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# gradient penalty loss", "\n", "self", ".", "cri_gp", "=", "GradientPenaltyLoss", "(", "device", "=", "self", ".", "device", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "l_gp_w", "=", "train_opt", "[", "'gp_weigth'", "]", "\n", "\n", "# optimizers", "\n", "# G", "\n", "", "wd_G", "=", "train_opt", "[", "'weight_decay_G'", "]", "if", "train_opt", "[", "'weight_decay_G'", "]", "else", "0", "\n", "optim_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "# can optimize for a part of the model", "\n", "                ", "if", "v", ".", "requires_grad", ":", "\n", "                    ", "optim_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "warning", "(", "'Params [{:s}] will not optimize.'", ".", "format", "(", "k", ")", ")", "\n", "", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "train_opt", "[", "'lr_G'", "]", ",", "weight_decay", "=", "wd_G", ",", "betas", "=", "(", "train_opt", "[", "'beta1_G'", "]", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "# D", "\n", "wd_D", "=", "train_opt", "[", "'weight_decay_D'", "]", "if", "train_opt", "[", "'weight_decay_D'", "]", "else", "0", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "train_opt", "[", "'lr_D'", "]", ",", "weight_decay", "=", "wd_D", ",", "betas", "=", "(", "train_opt", "[", "'beta1_D'", "]", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n", "# schedulers", "\n", "if", "train_opt", "[", "'lr_scheme'", "]", "==", "'MultiStepLR'", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "self", ".", "schedulers", ".", "append", "(", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "train_opt", "[", "'lr_steps'", "]", ",", "train_opt", "[", "'lr_gamma'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'MultiStepLR learning rate scheme is enough.'", ")", "\n", "\n", "", "self", ".", "log_dict", "=", "OrderedDict", "(", ")", "\n", "# print network", "\n", "", "self", ".", "print_network", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRRaGAN_model.SRRaGANModel.feed_data": [[103, 112], ["data[].to", "data[].to", "input_ref.to"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ",", "need_HR", "=", "True", ")", ":", "\n", "# LR", "\n", "        ", "self", ".", "var_L", "=", "data", "[", "'LR'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "need_HR", ":", "# train or val", "\n", "            ", "self", ".", "var_H", "=", "data", "[", "'HR'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "input_ref", "=", "data", "[", "'ref'", "]", "if", "'ref'", "in", "data", "else", "data", "[", "'HR'", "]", "\n", "self", ".", "var_ref", "=", "input_ref", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRRaGAN_model.SRRaGANModel.optimize_parameters": [[113, 187], ["SRRaGAN_model.SRRaGANModel.netD.parameters", "SRRaGAN_model.SRRaGANModel.optimizer_G.zero_grad", "SRRaGAN_model.SRRaGANModel.netG", "SRRaGAN_model.SRRaGANModel.netD.parameters", "SRRaGAN_model.SRRaGANModel.optimizer_D.zero_grad", "SRRaGAN_model.SRRaGANModel.netD", "SRRaGAN_model.SRRaGANModel.netD", "SRRaGAN_model.SRRaGANModel.cri_gan", "SRRaGAN_model.SRRaGANModel.cri_gan", "l_d_total.backward", "SRRaGAN_model.SRRaGANModel.optimizer_D.step", "SRRaGAN_model.SRRaGANModel.item", "SRRaGAN_model.SRRaGANModel.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "SRRaGAN_model.SRRaGANModel.netD", "SRRaGAN_model.SRRaGANModel.netD().detach", "l_g_total.backward", "SRRaGAN_model.SRRaGANModel.optimizer_G.step", "SRRaGAN_model.SRRaGANModel.fake_H.detach", "SRRaGAN_model.SRRaGANModel.var_ref.size", "SRRaGAN_model.SRRaGANModel.random_pt.uniform_", "SRRaGAN_model.SRRaGANModel.netD", "l_g_gan.item", "l_d_gp.item", "SRRaGAN_model.SRRaGANModel.detach", "SRRaGAN_model.SRRaGANModel.detach", "SRRaGAN_model.SRRaGANModel.netF().detach", "SRRaGAN_model.SRRaGANModel.netF", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "SRRaGAN_model.SRRaGANModel.random_pt.size", "SRRaGAN_model.SRRaGANModel.random_pt.resize_", "SRRaGAN_model.SRRaGANModel.cri_gp", "l_g_pix.item", "l_g_fea.item", "SRRaGAN_model.SRRaGANModel.cri_pix", "SRRaGAN_model.SRRaGANModel.cri_fea", "SRRaGAN_model.SRRaGANModel.netD", "SRRaGAN_model.SRRaGANModel.fake_H.detach", "SRRaGAN_model.SRRaGANModel.netF", "SRRaGAN_model.SRRaGANModel.cri_gan", "SRRaGAN_model.SRRaGANModel.cri_gan", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "", "def", "optimize_parameters", "(", "self", ",", "step", ")", ":", "\n", "# G", "\n", "        ", "for", "p", "in", "self", ".", "netD", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "\n", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "\n", "l_g_total", "=", "0", "\n", "if", "step", "%", "self", ".", "D_update_ratio", "==", "0", "and", "step", ">", "self", ".", "D_init_iters", ":", "\n", "            ", "if", "self", ".", "cri_pix", ":", "# pixel loss", "\n", "                ", "l_g_pix", "=", "self", ".", "l_pix_w", "*", "self", ".", "cri_pix", "(", "self", ".", "fake_H", ",", "self", ".", "var_H", ")", "\n", "l_g_total", "+=", "l_g_pix", "\n", "", "if", "self", ".", "cri_fea", ":", "# feature loss", "\n", "                ", "real_fea", "=", "self", ".", "netF", "(", "self", ".", "var_H", ")", ".", "detach", "(", ")", "\n", "fake_fea", "=", "self", ".", "netF", "(", "self", ".", "fake_H", ")", "\n", "l_g_fea", "=", "self", ".", "l_fea_w", "*", "self", ".", "cri_fea", "(", "fake_fea", ",", "real_fea", ")", "\n", "l_g_total", "+=", "l_g_fea", "\n", "# G gan + cls loss", "\n", "", "pred_g_fake", "=", "self", ".", "netD", "(", "self", ".", "fake_H", ")", "\n", "pred_d_real", "=", "self", ".", "netD", "(", "self", ".", "var_ref", ")", ".", "detach", "(", ")", "\n", "\n", "l_g_gan", "=", "self", ".", "l_gan_w", "*", "(", "self", ".", "cri_gan", "(", "pred_d_real", "-", "torch", ".", "mean", "(", "pred_g_fake", ")", ",", "False", ")", "+", "\n", "self", ".", "cri_gan", "(", "pred_g_fake", "-", "torch", ".", "mean", "(", "pred_d_real", ")", ",", "True", ")", ")", "/", "2", "\n", "l_g_total", "+=", "l_g_gan", "\n", "\n", "l_g_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "# D", "\n", "", "for", "p", "in", "self", ".", "netD", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "True", "\n", "\n", "", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "l_d_total", "=", "0", "\n", "pred_d_real", "=", "self", ".", "netD", "(", "self", ".", "var_ref", ")", "\n", "pred_d_fake", "=", "self", ".", "netD", "(", "self", ".", "fake_H", ".", "detach", "(", ")", ")", "# detach to avoid BP to G", "\n", "l_d_real", "=", "self", ".", "cri_gan", "(", "pred_d_real", "-", "torch", ".", "mean", "(", "pred_d_fake", ")", ",", "True", ")", "\n", "l_d_fake", "=", "self", ".", "cri_gan", "(", "pred_d_fake", "-", "torch", ".", "mean", "(", "pred_d_real", ")", ",", "False", ")", "\n", "\n", "l_d_total", "=", "(", "l_d_real", "+", "l_d_fake", ")", "/", "2", "\n", "\n", "if", "self", ".", "opt", "[", "'train'", "]", "[", "'gan_type'", "]", "==", "'wgan-gp'", ":", "\n", "            ", "batch_size", "=", "self", ".", "var_ref", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "random_pt", ".", "size", "(", "0", ")", "!=", "batch_size", ":", "\n", "                ", "self", ".", "random_pt", ".", "resize_", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "", "self", ".", "random_pt", ".", "uniform_", "(", ")", "# Draw random interpolation points", "\n", "interp", "=", "self", ".", "random_pt", "*", "self", ".", "fake_H", ".", "detach", "(", ")", "+", "(", "1", "-", "self", ".", "random_pt", ")", "*", "self", ".", "var_ref", "\n", "interp", ".", "requires_grad", "=", "True", "\n", "interp_crit", "=", "self", ".", "netD", "(", "interp", ")", "\n", "l_d_gp", "=", "self", ".", "l_gp_w", "*", "self", ".", "cri_gp", "(", "interp", ",", "interp_crit", ")", "\n", "l_d_total", "+=", "l_d_gp", "\n", "\n", "", "l_d_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "# set log", "\n", "if", "step", "%", "self", ".", "D_update_ratio", "==", "0", "and", "step", ">", "self", ".", "D_init_iters", ":", "\n", "# G", "\n", "            ", "if", "self", ".", "cri_pix", ":", "\n", "                ", "self", ".", "log_dict", "[", "'l_g_pix'", "]", "=", "l_g_pix", ".", "item", "(", ")", "\n", "", "if", "self", ".", "cri_fea", ":", "\n", "                ", "self", ".", "log_dict", "[", "'l_g_fea'", "]", "=", "l_g_fea", ".", "item", "(", ")", "\n", "", "self", ".", "log_dict", "[", "'l_g_gan'", "]", "=", "l_g_gan", ".", "item", "(", ")", "\n", "# D", "\n", "", "self", ".", "log_dict", "[", "'l_d_real'", "]", "=", "l_d_real", ".", "item", "(", ")", "\n", "self", ".", "log_dict", "[", "'l_d_fake'", "]", "=", "l_d_fake", ".", "item", "(", ")", "\n", "\n", "if", "self", ".", "opt", "[", "'train'", "]", "[", "'gan_type'", "]", "==", "'wgan-gp'", ":", "\n", "            ", "self", ".", "log_dict", "[", "'l_d_gp'", "]", "=", "l_d_gp", ".", "item", "(", ")", "\n", "# D outputs", "\n", "", "self", ".", "log_dict", "[", "'D_real'", "]", "=", "torch", ".", "mean", "(", "pred_d_real", ".", "detach", "(", ")", ")", "\n", "self", ".", "log_dict", "[", "'D_fake'", "]", "=", "torch", ".", "mean", "(", "pred_d_fake", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRRaGAN_model.SRRaGANModel.test": [[188, 193], ["SRRaGAN_model.SRRaGANModel.netG.eval", "SRRaGAN_model.SRRaGANModel.netG.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "SRRaGAN_model.SRRaGANModel.netG"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRRaGAN_model.SRRaGANModel.get_current_log": [[194, 196], ["None"], "methods", ["None"], ["", "def", "get_current_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRRaGAN_model.SRRaGANModel.get_current_visuals": [[197, 204], ["collections.OrderedDict", "[].float().cpu", "[].float().cpu", "[].float().cpu", "[].float", "[].float", "[].float", "SRRaGAN_model.SRRaGANModel.var_L.detach", "SRRaGAN_model.SRRaGANModel.fake_H.detach", "SRRaGAN_model.SRRaGANModel.var_H.detach"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ",", "need_HR", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'LR'", "]", "=", "self", ".", "var_L", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "out_dict", "[", "'SR'", "]", "=", "self", ".", "fake_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "if", "need_HR", ":", "\n", "            ", "out_dict", "[", "'HR'", "]", "=", "self", ".", "var_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRRaGAN_model.SRRaGANModel.print_network": [[205, 238], ["SRRaGAN_model.SRRaGANModel.get_network_description", "isinstance", "logger.info", "logger.info", "SRRaGAN_model.SRRaGANModel.get_network_description", "isinstance", "logger.info", "logger.info", "SRRaGAN_model.SRRaGANModel.get_network_description", "isinstance", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_network_description", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_network_description", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_network_description"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "# Generator", "\n", "        ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netG", ")", "\n", "if", "isinstance", "(", "self", ".", "netG", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netG", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Network G structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "# Discriminator", "\n", "            ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netD", ")", "\n", "if", "isinstance", "(", "self", ".", "netD", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netD", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netD", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "                ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netD", ".", "__class__", ".", "__name__", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Network D structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n", "if", "self", ".", "cri_fea", ":", "# F, Perceptual Network", "\n", "                ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netF", ")", "\n", "if", "isinstance", "(", "self", ".", "netF", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netF", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netF", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "                    ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netF", ".", "__class__", ".", "__name__", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Network F structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRRaGAN_model.SRRaGANModel.load": [[239, 248], ["logger.info", "SRRaGAN_model.SRRaGANModel.load_network", "logger.info", "SRRaGAN_model.SRRaGANModel.load_network"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.load_network"], ["", "", "", "def", "load", "(", "self", ")", ":", "\n", "        ", "load_path_G", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "\n", "if", "load_path_G", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading pretrained model for G [{:s}] ...'", ".", "format", "(", "load_path_G", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_G", ",", "self", ".", "netG", ")", "\n", "", "load_path_D", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_D'", "]", "\n", "if", "self", ".", "opt", "[", "'is_train'", "]", "and", "load_path_D", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading pretrained model for D [{:s}] ...'", ".", "format", "(", "load_path_D", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_D", ",", "self", ".", "netD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRRaGAN_model.SRRaGANModel.save": [[249, 252], ["SRRaGAN_model.SRRaGANModel.save_network", "SRRaGAN_model.SRRaGANModel.save_network"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "iter_step", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "iter_step", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "iter_step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.__init__.create_model": [[5, 21], ["M", "logger.info", "NotImplementedError"], "function", ["None"], ["def", "create_model", "(", "opt", ")", ":", "\n", "    ", "model", "=", "opt", "[", "'model'", "]", "\n", "\n", "if", "model", "==", "'sr'", ":", "\n", "        ", "from", ".", "SR_model", "import", "SRModel", "as", "M", "\n", "", "elif", "model", "==", "'srgan'", ":", "\n", "        ", "from", ".", "SRGAN_model", "import", "SRGANModel", "as", "M", "\n", "", "elif", "model", "==", "'srragan'", ":", "\n", "        ", "from", ".", "SRRaGAN_model", "import", "SRRaGANModel", "as", "M", "\n", "", "elif", "model", "==", "'sftgan'", ":", "\n", "        ", "from", ".", "SFTGAN_ACD_model", "import", "SFTGAN_ACD_Model", "as", "M", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Model [{:s}] not recognized.'", ".", "format", "(", "model", ")", ")", "\n", "", "m", "=", "M", "(", "opt", ")", "\n", "logger", ".", "info", "(", "'Model [{:s}] is created.'", ".", "format", "(", "m", ".", "__class__", ".", "__name__", ")", ")", "\n", "return", "m", "\n", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRGAN_model.SRGANModel.__init__": [[17, 103], ["base_model.BaseModel.__init__", "models.define_G().to", "SRGAN_model.SRGANModel.load", "SRGAN_model.SRGANModel.print_network", "models.define_D().to", "SRGAN_model.SRGANModel.netG.train", "SRGAN_model.SRGANModel.netD.train", "models.modules.loss.GANLoss().to", "SRGAN_model.SRGANModel.netG.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "SRGAN_model.SRGANModel.optimizers.append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "SRGAN_model.SRGANModel.optimizers.append", "collections.OrderedDict", "models.define_G", "logger.info", "logger.info", "models.define_F().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "models.modules.loss.GradientPenaltyLoss().to", "SRGAN_model.SRGANModel.netD.parameters", "NotImplementedError", "models.define_D", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "models.modules.loss.GANLoss", "optim_params.append", "logger.warning", "SRGAN_model.SRGANModel.schedulers.append", "torch.MSELoss().to", "torch.MSELoss().to", "NotImplementedError", "torch.MSELoss().to", "torch.MSELoss().to", "NotImplementedError", "models.define_F", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "models.modules.loss.GradientPenaltyLoss", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.print_network", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_G", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_D", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_F"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SRGANModel", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "train_opt", "=", "opt", "[", "'train'", "]", "\n", "\n", "# define networks and load pretrained models", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "# G", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "# D", "\n", "self", ".", "netG", ".", "train", "(", ")", "\n", "self", ".", "netD", ".", "train", "(", ")", "\n", "", "self", ".", "load", "(", ")", "# load G and D if needed", "\n", "\n", "# define losses, optimizer and scheduler", "\n", "if", "self", ".", "is_train", ":", "\n", "# G pixel loss", "\n", "            ", "if", "train_opt", "[", "'pixel_weight'", "]", ">", "0", ":", "\n", "                ", "l_pix_type", "=", "train_opt", "[", "'pixel_criterion'", "]", "\n", "if", "l_pix_type", "==", "'l1'", ":", "\n", "                    ", "self", ".", "cri_pix", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "l_pix_type", "==", "'l2'", ":", "\n", "                    ", "self", ".", "cri_pix", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] not recognized.'", ".", "format", "(", "l_pix_type", ")", ")", "\n", "", "self", ".", "l_pix_w", "=", "train_opt", "[", "'pixel_weight'", "]", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "'Remove pixel loss.'", ")", "\n", "self", ".", "cri_pix", "=", "None", "\n", "\n", "# G feature loss", "\n", "", "if", "train_opt", "[", "'feature_weight'", "]", ">", "0", ":", "\n", "                ", "l_fea_type", "=", "train_opt", "[", "'feature_criterion'", "]", "\n", "if", "l_fea_type", "==", "'l1'", ":", "\n", "                    ", "self", ".", "cri_fea", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "l_fea_type", "==", "'l2'", ":", "\n", "                    ", "self", ".", "cri_fea", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] not recognized.'", ".", "format", "(", "l_fea_type", ")", ")", "\n", "", "self", ".", "l_fea_w", "=", "train_opt", "[", "'feature_weight'", "]", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "'Remove feature loss.'", ")", "\n", "self", ".", "cri_fea", "=", "None", "\n", "", "if", "self", ".", "cri_fea", ":", "# load VGG perceptual loss", "\n", "                ", "self", ".", "netF", "=", "networks", ".", "define_F", "(", "opt", ",", "use_bn", "=", "False", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# GD gan loss", "\n", "", "self", ".", "cri_gan", "=", "GANLoss", "(", "train_opt", "[", "'gan_type'", "]", ",", "1.0", ",", "0.0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "l_gan_w", "=", "train_opt", "[", "'gan_weight'", "]", "\n", "# D_update_ratio and D_init_iters are for WGAN", "\n", "self", ".", "D_update_ratio", "=", "train_opt", "[", "'D_update_ratio'", "]", "if", "train_opt", "[", "'D_update_ratio'", "]", "else", "1", "\n", "self", ".", "D_init_iters", "=", "train_opt", "[", "'D_init_iters'", "]", "if", "train_opt", "[", "'D_init_iters'", "]", "else", "0", "\n", "\n", "if", "train_opt", "[", "'gan_type'", "]", "==", "'wgan-gp'", ":", "\n", "                ", "self", ".", "random_pt", "=", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# gradient penalty loss", "\n", "self", ".", "cri_gp", "=", "GradientPenaltyLoss", "(", "device", "=", "self", ".", "device", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "l_gp_w", "=", "train_opt", "[", "'gp_weigth'", "]", "\n", "\n", "# optimizers", "\n", "# G", "\n", "", "wd_G", "=", "train_opt", "[", "'weight_decay_G'", "]", "if", "train_opt", "[", "'weight_decay_G'", "]", "else", "0", "\n", "optim_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "# can optimize for a part of the model", "\n", "                ", "if", "v", ".", "requires_grad", ":", "\n", "                    ", "optim_params", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "warning", "(", "'Params [{:s}] will not optimize.'", ".", "format", "(", "k", ")", ")", "\n", "", "", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params", ",", "lr", "=", "train_opt", "[", "'lr_G'", "]", ",", "weight_decay", "=", "wd_G", ",", "betas", "=", "(", "train_opt", "[", "'beta1_G'", "]", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "# D", "\n", "wd_D", "=", "train_opt", "[", "'weight_decay_D'", "]", "if", "train_opt", "[", "'weight_decay_D'", "]", "else", "0", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "train_opt", "[", "'lr_D'", "]", ",", "weight_decay", "=", "wd_D", ",", "betas", "=", "(", "train_opt", "[", "'beta1_D'", "]", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n", "# schedulers", "\n", "if", "train_opt", "[", "'lr_scheme'", "]", "==", "'MultiStepLR'", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "self", ".", "schedulers", ".", "append", "(", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "train_opt", "[", "'lr_steps'", "]", ",", "train_opt", "[", "'lr_gamma'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'MultiStepLR learning rate scheme is enough.'", ")", "\n", "\n", "", "self", ".", "log_dict", "=", "OrderedDict", "(", ")", "\n", "# print network", "\n", "", "self", ".", "print_network", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRGAN_model.SRGANModel.feed_data": [[104, 112], ["data[].to", "data[].to", "input_ref.to"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ",", "need_HR", "=", "True", ")", ":", "\n", "# LR", "\n", "        ", "self", ".", "var_L", "=", "data", "[", "'LR'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "need_HR", ":", "# train or val", "\n", "            ", "self", ".", "var_H", "=", "data", "[", "'HR'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "input_ref", "=", "data", "[", "'ref'", "]", "if", "'ref'", "in", "data", "else", "data", "[", "'HR'", "]", "\n", "self", ".", "var_ref", "=", "input_ref", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRGAN_model.SRGANModel.optimize_parameters": [[113, 179], ["SRGAN_model.SRGANModel.optimizer_G.zero_grad", "SRGAN_model.SRGANModel.netG", "SRGAN_model.SRGANModel.optimizer_D.zero_grad", "SRGAN_model.SRGANModel.netD", "SRGAN_model.SRGANModel.cri_gan", "SRGAN_model.SRGANModel.netD", "SRGAN_model.SRGANModel.cri_gan", "l_d_total.backward", "SRGAN_model.SRGANModel.optimizer_D.step", "SRGAN_model.SRGANModel.item", "SRGAN_model.SRGANModel.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "SRGAN_model.SRGANModel.netD", "l_g_total.backward", "SRGAN_model.SRGANModel.optimizer_G.step", "SRGAN_model.SRGANModel.fake_H.detach", "SRGAN_model.SRGANModel.var_ref.size", "SRGAN_model.SRGANModel.random_pt.uniform_", "SRGAN_model.SRGANModel.netD", "l_g_gan.item", "l_d_gp.item", "SRGAN_model.SRGANModel.detach", "SRGAN_model.SRGANModel.detach", "SRGAN_model.SRGANModel.netF().detach", "SRGAN_model.SRGANModel.netF", "SRGAN_model.SRGANModel.cri_gan", "SRGAN_model.SRGANModel.random_pt.size", "SRGAN_model.SRGANModel.random_pt.resize_", "SRGAN_model.SRGANModel.cri_gp", "l_g_pix.item", "l_g_fea.item", "SRGAN_model.SRGANModel.cri_pix", "SRGAN_model.SRGANModel.cri_fea", "SRGAN_model.SRGANModel.fake_H.detach", "SRGAN_model.SRGANModel.netF"], "methods", ["None"], ["", "", "def", "optimize_parameters", "(", "self", ",", "step", ")", ":", "\n", "# G", "\n", "        ", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "\n", "l_g_total", "=", "0", "\n", "if", "step", "%", "self", ".", "D_update_ratio", "==", "0", "and", "step", ">", "self", ".", "D_init_iters", ":", "\n", "            ", "if", "self", ".", "cri_pix", ":", "# pixel loss", "\n", "                ", "l_g_pix", "=", "self", ".", "l_pix_w", "*", "self", ".", "cri_pix", "(", "self", ".", "fake_H", ",", "self", ".", "var_H", ")", "\n", "l_g_total", "+=", "l_g_pix", "\n", "", "if", "self", ".", "cri_fea", ":", "# feature loss", "\n", "                ", "real_fea", "=", "self", ".", "netF", "(", "self", ".", "var_H", ")", ".", "detach", "(", ")", "\n", "fake_fea", "=", "self", ".", "netF", "(", "self", ".", "fake_H", ")", "\n", "l_g_fea", "=", "self", ".", "l_fea_w", "*", "self", ".", "cri_fea", "(", "fake_fea", ",", "real_fea", ")", "\n", "l_g_total", "+=", "l_g_fea", "\n", "# G gan + cls loss", "\n", "", "pred_g_fake", "=", "self", ".", "netD", "(", "self", ".", "fake_H", ")", "\n", "l_g_gan", "=", "self", ".", "l_gan_w", "*", "self", ".", "cri_gan", "(", "pred_g_fake", ",", "True", ")", "\n", "l_g_total", "+=", "l_g_gan", "\n", "\n", "l_g_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "# D", "\n", "", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "l_d_total", "=", "0", "\n", "# real data", "\n", "pred_d_real", "=", "self", ".", "netD", "(", "self", ".", "var_ref", ")", "\n", "l_d_real", "=", "self", ".", "cri_gan", "(", "pred_d_real", ",", "True", ")", "\n", "# fake data", "\n", "pred_d_fake", "=", "self", ".", "netD", "(", "self", ".", "fake_H", ".", "detach", "(", ")", ")", "# detach to avoid BP to G", "\n", "l_d_fake", "=", "self", ".", "cri_gan", "(", "pred_d_fake", ",", "False", ")", "\n", "\n", "l_d_total", "=", "l_d_real", "+", "l_d_fake", "\n", "\n", "if", "self", ".", "opt", "[", "'train'", "]", "[", "'gan_type'", "]", "==", "'wgan-gp'", ":", "\n", "            ", "batch_size", "=", "self", ".", "var_ref", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "random_pt", ".", "size", "(", "0", ")", "!=", "batch_size", ":", "\n", "                ", "self", ".", "random_pt", ".", "resize_", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "", "self", ".", "random_pt", ".", "uniform_", "(", ")", "# Draw random interpolation points", "\n", "interp", "=", "self", ".", "random_pt", "*", "self", ".", "fake_H", ".", "detach", "(", ")", "+", "(", "1", "-", "self", ".", "random_pt", ")", "*", "self", ".", "var_ref", "\n", "interp", ".", "requires_grad", "=", "True", "\n", "interp_crit", "=", "self", ".", "netD", "(", "interp", ")", "\n", "l_d_gp", "=", "self", ".", "l_gp_w", "*", "self", ".", "cri_gp", "(", "interp", ",", "interp_crit", ")", "\n", "l_d_total", "+=", "l_d_gp", "\n", "\n", "", "l_d_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "# set log", "\n", "if", "step", "%", "self", ".", "D_update_ratio", "==", "0", "and", "step", ">", "self", ".", "D_init_iters", ":", "\n", "# G", "\n", "            ", "if", "self", ".", "cri_pix", ":", "\n", "                ", "self", ".", "log_dict", "[", "'l_g_pix'", "]", "=", "l_g_pix", ".", "item", "(", ")", "\n", "", "if", "self", ".", "cri_fea", ":", "\n", "                ", "self", ".", "log_dict", "[", "'l_g_fea'", "]", "=", "l_g_fea", ".", "item", "(", ")", "\n", "", "self", ".", "log_dict", "[", "'l_g_gan'", "]", "=", "l_g_gan", ".", "item", "(", ")", "\n", "# D", "\n", "", "self", ".", "log_dict", "[", "'l_d_real'", "]", "=", "l_d_real", ".", "item", "(", ")", "\n", "self", ".", "log_dict", "[", "'l_d_fake'", "]", "=", "l_d_fake", ".", "item", "(", ")", "\n", "\n", "if", "self", ".", "opt", "[", "'train'", "]", "[", "'gan_type'", "]", "==", "'wgan-gp'", ":", "\n", "            ", "self", ".", "log_dict", "[", "'l_d_gp'", "]", "=", "l_d_gp", ".", "item", "(", ")", "\n", "# D outputs", "\n", "", "self", ".", "log_dict", "[", "'D_real'", "]", "=", "torch", ".", "mean", "(", "pred_d_real", ".", "detach", "(", ")", ")", "\n", "self", ".", "log_dict", "[", "'D_fake'", "]", "=", "torch", ".", "mean", "(", "pred_d_fake", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRGAN_model.SRGANModel.test": [[180, 185], ["SRGAN_model.SRGANModel.netG.eval", "SRGAN_model.SRGANModel.netG.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "SRGAN_model.SRGANModel.netG"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "self", ".", "var_L", ")", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRGAN_model.SRGANModel.get_current_log": [[186, 188], ["None"], "methods", ["None"], ["", "def", "get_current_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRGAN_model.SRGANModel.get_current_visuals": [[189, 196], ["collections.OrderedDict", "[].float().cpu", "[].float().cpu", "[].float().cpu", "[].float", "[].float", "[].float", "SRGAN_model.SRGANModel.var_L.detach", "SRGAN_model.SRGANModel.fake_H.detach", "SRGAN_model.SRGANModel.var_H.detach"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ",", "need_HR", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'LR'", "]", "=", "self", ".", "var_L", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "out_dict", "[", "'SR'", "]", "=", "self", ".", "fake_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "if", "need_HR", ":", "\n", "            ", "out_dict", "[", "'HR'", "]", "=", "self", ".", "var_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRGAN_model.SRGANModel.print_network": [[197, 227], ["SRGAN_model.SRGANModel.get_network_description", "isinstance", "logger.info", "logger.info", "SRGAN_model.SRGANModel.get_network_description", "isinstance", "logger.info", "logger.info", "SRGAN_model.SRGANModel.get_network_description", "isinstance", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_network_description", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_network_description", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_network_description"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "# Generator", "\n", "        ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netG", ")", "\n", "if", "isinstance", "(", "self", ".", "netG", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netG", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ")", "\n", "", "logger", ".", "info", "(", "'Network G structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "# Discriminator", "\n", "            ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netD", ")", "\n", "if", "isinstance", "(", "self", ".", "netD", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netD", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netD", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "                ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netD", ".", "__class__", ".", "__name__", ")", "\n", "", "logger", ".", "info", "(", "'Network D structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n", "if", "self", ".", "cri_fea", ":", "# F, Perceptual Network", "\n", "                ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netF", ")", "\n", "if", "isinstance", "(", "self", ".", "netF", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netF", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netF", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "                    ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netF", ".", "__class__", ".", "__name__", ")", "\n", "", "logger", ".", "info", "(", "'Network F structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRGAN_model.SRGANModel.load": [[228, 237], ["logger.info", "SRGAN_model.SRGANModel.load_network", "logger.info", "SRGAN_model.SRGANModel.load_network"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.load_network"], ["", "", "", "def", "load", "(", "self", ")", ":", "\n", "        ", "load_path_G", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "\n", "if", "load_path_G", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading pretrained model for G [{:s}] ...'", ".", "format", "(", "load_path_G", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_G", ",", "self", ".", "netG", ")", "\n", "", "load_path_D", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_D'", "]", "\n", "if", "self", ".", "opt", "[", "'is_train'", "]", "and", "load_path_D", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading pretrained model for D [{:s}] ...'", ".", "format", "(", "load_path_D", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_D", ",", "self", ".", "netD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SRGAN_model.SRGANModel.save": [[238, 241], ["SRGAN_model.SRGANModel.save_network", "SRGAN_model.SRGANModel.save_network"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "iter_step", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "iter_step", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "iter_step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.__init__": [[7, 13], ["torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "opt", "[", "'gpu_ids'", "]", "is", "not", "None", "else", "'cpu'", ")", "\n", "self", ".", "is_train", "=", "opt", "[", "'is_train'", "]", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.feed_data": [[14, 16], ["None"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.optimize_parameters": [[17, 19], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_current_visuals": [[20, 22], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_current_losses": [[23, 25], ["None"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.print_network": [[26, 28], ["None"], "methods", ["None"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.save": [[29, 31], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.load": [[32, 34], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.update_learning_rate": [[35, 38], ["scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_current_learning_rate": [[39, 41], ["base_model.BaseModel.schedulers[].get_lr"], "methods", ["None"], ["", "", "def", "get_current_learning_rate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "schedulers", "[", "0", "]", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_network_description": [[42, 49], ["isinstance", "str", "sum", "map", "network.parameters", "x.numel"], "methods", ["None"], ["", "def", "get_network_description", "(", "self", ",", "network", ")", ":", "\n", "        ", "'''Get the string and total parameters of the network'''", "\n", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "s", "=", "str", "(", "network", ")", "\n", "n", "=", "sum", "(", "map", "(", "lambda", "x", ":", "x", ".", "numel", "(", ")", ",", "network", ".", "parameters", "(", ")", ")", ")", "\n", "return", "s", ",", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.save_network": [[50, 59], ["os.path.join", "isinstance", "network.state_dict", "network.state_dict.items", "torch.save", "torch.save", "torch.save", "torch.save", "param.cpu"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.save", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.save", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.save", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "iter_step", ")", ":", "\n", "        ", "save_filename", "=", "'{}_{}.pth'", ".", "format", "(", "iter_step", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "save_filename", ")", "\n", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "state_dict", "=", "network", ".", "state_dict", "(", ")", "\n", "for", "key", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "state_dict", "[", "key", "]", "=", "param", ".", "cpu", "(", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.load_network": [[60, 64], ["isinstance", "network.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load"], ["", "def", "load_network", "(", "self", ",", "load_path", ",", "network", ",", "strict", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "network", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "network", "=", "network", ".", "module", "\n", "", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "load_path", ")", ",", "strict", "=", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.save_training_state": [[65, 75], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "state[].append", "state[].append", "s.state_dict", "o.state_dict"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.save", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.save", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.save", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.save"], ["", "def", "save_training_state", "(", "self", ",", "epoch", ",", "iter_step", ")", ":", "\n", "        ", "'''Saves training state during training, which will be used for resuming'''", "\n", "state", "=", "{", "'epoch'", ":", "epoch", ",", "'iter'", ":", "iter_step", ",", "'schedulers'", ":", "[", "]", ",", "'optimizers'", ":", "[", "]", "}", "\n", "for", "s", "in", "self", ".", "schedulers", ":", "\n", "            ", "state", "[", "'schedulers'", "]", ".", "append", "(", "s", ".", "state_dict", "(", ")", ")", "\n", "", "for", "o", "in", "self", ".", "optimizers", ":", "\n", "            ", "state", "[", "'optimizers'", "]", ".", "append", "(", "o", ".", "state_dict", "(", ")", ")", "\n", "", "save_filename", "=", "'{}.state'", ".", "format", "(", "iter_step", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'training_state'", "]", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.resume_training": [[76, 86], ["enumerate", "enumerate", "len", "len", "len", "len", "base_model.BaseModel.optimizers[].load_state_dict", "base_model.BaseModel.schedulers[].load_state_dict"], "methods", ["None"], ["", "def", "resume_training", "(", "self", ",", "resume_state", ")", ":", "\n", "        ", "'''Resume the optimizers and schedulers for training'''", "\n", "resume_optimizers", "=", "resume_state", "[", "'optimizers'", "]", "\n", "resume_schedulers", "=", "resume_state", "[", "'schedulers'", "]", "\n", "assert", "len", "(", "resume_optimizers", ")", "==", "len", "(", "self", ".", "optimizers", ")", ",", "'Wrong lengths of optimizers'", "\n", "assert", "len", "(", "resume_schedulers", ")", "==", "len", "(", "self", ".", "schedulers", ")", ",", "'Wrong lengths of schedulers'", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "resume_optimizers", ")", ":", "\n", "            ", "self", ".", "optimizers", "[", "i", "]", ".", "load_state_dict", "(", "o", ")", "\n", "", "for", "i", ",", "s", "in", "enumerate", "(", "resume_schedulers", ")", ":", "\n", "            ", "self", ".", "schedulers", "[", "i", "]", ".", "load_state_dict", "(", "s", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.__init__": [[17, 111], ["base_model.BaseModel.__init__", "models.define_G().to", "SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "SFTGAN_ACD_model.SFTGAN_ACD_Model.print_network", "models.define_D().to", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netG.train", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netD.train", "models.modules.loss.GANLoss().to", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss().to", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netG.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "SFTGAN_ACD_model.SFTGAN_ACD_Model.optimizers.append", "SFTGAN_ACD_model.SFTGAN_ACD_Model.optimizers.append", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "SFTGAN_ACD_model.SFTGAN_ACD_Model.optimizers.append", "collections.OrderedDict", "models.define_G", "logging.info", "logging.info", "models.define_F().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "models.modules.loss.GradientPenaltyLoss().to", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netD.parameters", "NotImplementedError", "models.define_D", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "models.modules.loss.GANLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "optim_params_SFT.append", "optim_params_other.append", "SFTGAN_ACD_model.SFTGAN_ACD_Model.schedulers.append", "torch.MSELoss().to", "torch.MSELoss().to", "NotImplementedError", "torch.MSELoss().to", "torch.MSELoss().to", "NotImplementedError", "models.define_F", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "models.modules.loss.GradientPenaltyLoss", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.print_network", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_G", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_D", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.networks.define_F"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SFTGAN_ACD_Model", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "train_opt", "=", "opt", "[", "'train'", "]", "\n", "\n", "# define networks and load pretrained models", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "# G", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ")", ".", "to", "(", "self", ".", "device", ")", "# D", "\n", "self", ".", "netG", ".", "train", "(", ")", "\n", "self", ".", "netD", ".", "train", "(", ")", "\n", "", "self", ".", "load", "(", ")", "# load G and D if needed", "\n", "\n", "# define losses, optimizer and scheduler", "\n", "if", "self", ".", "is_train", ":", "\n", "# G pixel loss", "\n", "            ", "if", "train_opt", "[", "'pixel_weight'", "]", ">", "0", ":", "\n", "                ", "l_pix_type", "=", "train_opt", "[", "'pixel_criterion'", "]", "\n", "if", "l_pix_type", "==", "'l1'", ":", "\n", "                    ", "self", ".", "cri_pix", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "l_pix_type", "==", "'l2'", ":", "\n", "                    ", "self", ".", "cri_pix", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] not recognized.'", ".", "format", "(", "l_pix_type", ")", ")", "\n", "", "self", ".", "l_pix_w", "=", "train_opt", "[", "'pixel_weight'", "]", "\n", "", "else", ":", "\n", "                ", "logging", ".", "info", "(", "'Remove pixel loss.'", ")", "\n", "self", ".", "cri_pix", "=", "None", "\n", "\n", "# G feature loss", "\n", "", "if", "train_opt", "[", "'feature_weight'", "]", ">", "0", ":", "\n", "                ", "l_fea_type", "=", "train_opt", "[", "'feature_criterion'", "]", "\n", "if", "l_fea_type", "==", "'l1'", ":", "\n", "                    ", "self", ".", "cri_fea", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "l_fea_type", "==", "'l2'", ":", "\n", "                    ", "self", ".", "cri_fea", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Loss type [{:s}] not recognized.'", ".", "format", "(", "l_fea_type", ")", ")", "\n", "", "self", ".", "l_fea_w", "=", "train_opt", "[", "'feature_weight'", "]", "\n", "", "else", ":", "\n", "                ", "logging", ".", "info", "(", "'Remove feature loss.'", ")", "\n", "self", ".", "cri_fea", "=", "None", "\n", "", "if", "self", ".", "cri_fea", ":", "# load VGG perceptual loss", "\n", "                ", "self", ".", "netF", "=", "networks", ".", "define_F", "(", "opt", ",", "use_bn", "=", "False", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# GD gan loss", "\n", "", "self", ".", "cri_gan", "=", "GANLoss", "(", "train_opt", "[", "'gan_type'", "]", ",", "1.0", ",", "0.0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "l_gan_w", "=", "train_opt", "[", "'gan_weight'", "]", "\n", "# D_update_ratio and D_init_iters are for WGAN", "\n", "self", ".", "D_update_ratio", "=", "train_opt", "[", "'D_update_ratio'", "]", "if", "train_opt", "[", "'D_update_ratio'", "]", "else", "1", "\n", "self", ".", "D_init_iters", "=", "train_opt", "[", "'D_init_iters'", "]", "if", "train_opt", "[", "'D_init_iters'", "]", "else", "0", "\n", "\n", "if", "train_opt", "[", "'gan_type'", "]", "==", "'wgan-gp'", ":", "\n", "                ", "self", ".", "random_pt", "=", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# gradient penalty loss", "\n", "self", ".", "cri_gp", "=", "GradientPenaltyLoss", "(", "device", "=", "self", ".", "device", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "l_gp_w", "=", "train_opt", "[", "'gp_weigth'", "]", "\n", "\n", "# D cls loss", "\n", "", "self", ".", "cri_ce", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# ignore background, since bg images may conflict with other classes", "\n", "\n", "# optimizers", "\n", "# G", "\n", "wd_G", "=", "train_opt", "[", "'weight_decay_G'", "]", "if", "train_opt", "[", "'weight_decay_G'", "]", "else", "0", "\n", "optim_params_SFT", "=", "[", "]", "\n", "optim_params_other", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "netG", ".", "named_parameters", "(", ")", ":", "# can optimize for a part of the model", "\n", "                ", "if", "'SFT'", "in", "k", "or", "'Cond'", "in", "k", ":", "\n", "                    ", "optim_params_SFT", ".", "append", "(", "v", ")", "\n", "", "else", ":", "\n", "                    ", "optim_params_other", ".", "append", "(", "v", ")", "\n", "", "", "self", ".", "optimizer_G_SFT", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params_SFT", ",", "lr", "=", "train_opt", "[", "'lr_G'", "]", "*", "5", ",", "weight_decay", "=", "wd_G", ",", "betas", "=", "(", "train_opt", "[", "'beta1_G'", "]", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_G_other", "=", "torch", ".", "optim", ".", "Adam", "(", "optim_params_other", ",", "lr", "=", "train_opt", "[", "'lr_G'", "]", ",", "weight_decay", "=", "wd_G", ",", "betas", "=", "(", "train_opt", "[", "'beta1_G'", "]", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G_SFT", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G_other", ")", "\n", "# D", "\n", "wd_D", "=", "train_opt", "[", "'weight_decay_D'", "]", "if", "train_opt", "[", "'weight_decay_D'", "]", "else", "0", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "train_opt", "[", "'lr_D'", "]", ",", "weight_decay", "=", "wd_D", ",", "betas", "=", "(", "train_opt", "[", "'beta1_D'", "]", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n", "# schedulers", "\n", "if", "train_opt", "[", "'lr_scheme'", "]", "==", "'MultiStepLR'", ":", "\n", "                ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                    ", "self", ".", "schedulers", ".", "append", "(", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "train_opt", "[", "'lr_steps'", "]", ",", "train_opt", "[", "'lr_gamma'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'MultiStepLR learning rate scheme is enough.'", ")", "\n", "\n", "", "self", ".", "log_dict", "=", "OrderedDict", "(", ")", "\n", "# print network", "\n", "", "self", ".", "print_network", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.feed_data": [[112, 122], ["data[].to", "data[].to", "data[].long().to", "data[].to", "data[].long"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ",", "need_HR", "=", "True", ")", ":", "\n", "# LR", "\n", "        ", "self", ".", "var_L", "=", "data", "[", "'LR'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "# seg", "\n", "self", ".", "var_seg", "=", "data", "[", "'seg'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "# category", "\n", "self", ".", "var_cat", "=", "data", "[", "'category'", "]", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "need_HR", ":", "# train or val", "\n", "            ", "self", ".", "var_H", "=", "data", "[", "'HR'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.optimize_parameters": [[123, 197], ["SFTGAN_ACD_model.SFTGAN_ACD_Model.optimizer_G_SFT.zero_grad", "SFTGAN_ACD_model.SFTGAN_ACD_Model.optimizer_G_other.zero_grad", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netG", "SFTGAN_ACD_model.SFTGAN_ACD_Model.optimizer_D.zero_grad", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netD", "SFTGAN_ACD_model.SFTGAN_ACD_Model.cri_gan", "SFTGAN_ACD_model.SFTGAN_ACD_Model.cri_ce", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netD", "SFTGAN_ACD_model.SFTGAN_ACD_Model.cri_gan", "SFTGAN_ACD_model.SFTGAN_ACD_Model.cri_ce", "l_d_total.backward", "SFTGAN_ACD_model.SFTGAN_ACD_Model.optimizer_D.step", "SFTGAN_ACD_model.SFTGAN_ACD_Model.item", "SFTGAN_ACD_model.SFTGAN_ACD_Model.item", "SFTGAN_ACD_model.SFTGAN_ACD_Model.item", "SFTGAN_ACD_model.SFTGAN_ACD_Model.item", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netD", "l_g_total.backward", "SFTGAN_ACD_model.SFTGAN_ACD_Model.optimizer_G_SFT.step", "SFTGAN_ACD_model.SFTGAN_ACD_Model.optimizer_G_other.step", "SFTGAN_ACD_model.SFTGAN_ACD_Model.fake_H.detach", "SFTGAN_ACD_model.SFTGAN_ACD_Model.var_H.size", "SFTGAN_ACD_model.SFTGAN_ACD_Model.random_pt.uniform_", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netD", "l_g_gan.item", "l_d_gp.item", "pred_d_real.detach", "pred_d_fake.detach", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netF().detach", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netF", "SFTGAN_ACD_model.SFTGAN_ACD_Model.cri_gan", "SFTGAN_ACD_model.SFTGAN_ACD_Model.cri_ce", "SFTGAN_ACD_model.SFTGAN_ACD_Model.random_pt.size", "SFTGAN_ACD_model.SFTGAN_ACD_Model.random_pt.resize_", "SFTGAN_ACD_model.SFTGAN_ACD_Model.cri_gp", "l_g_pix.item", "l_g_fea.item", "SFTGAN_ACD_model.SFTGAN_ACD_Model.cri_pix", "SFTGAN_ACD_model.SFTGAN_ACD_Model.cri_fea", "SFTGAN_ACD_model.SFTGAN_ACD_Model.fake_H.detach", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netF"], "methods", ["None"], ["", "", "def", "optimize_parameters", "(", "self", ",", "step", ")", ":", "\n", "# G", "\n", "        ", "self", ".", "optimizer_G_SFT", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer_G_other", ".", "zero_grad", "(", ")", "\n", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "(", "self", ".", "var_L", ",", "self", ".", "var_seg", ")", ")", "\n", "\n", "l_g_total", "=", "0", "\n", "if", "step", "%", "self", ".", "D_update_ratio", "==", "0", "and", "step", ">", "self", ".", "D_init_iters", ":", "\n", "            ", "if", "self", ".", "cri_pix", ":", "# pixel loss", "\n", "                ", "l_g_pix", "=", "self", ".", "l_pix_w", "*", "self", ".", "cri_pix", "(", "self", ".", "fake_H", ",", "self", ".", "var_H", ")", "\n", "l_g_total", "+=", "l_g_pix", "\n", "", "if", "self", ".", "cri_fea", ":", "# feature loss", "\n", "                ", "real_fea", "=", "self", ".", "netF", "(", "self", ".", "var_H", ")", ".", "detach", "(", ")", "\n", "fake_fea", "=", "self", ".", "netF", "(", "self", ".", "fake_H", ")", "\n", "l_g_fea", "=", "self", ".", "l_fea_w", "*", "self", ".", "cri_fea", "(", "fake_fea", ",", "real_fea", ")", "\n", "l_g_total", "+=", "l_g_fea", "\n", "# G gan + cls loss", "\n", "", "pred_g_fake", ",", "cls_g_fake", "=", "self", ".", "netD", "(", "self", ".", "fake_H", ")", "\n", "l_g_gan", "=", "self", ".", "l_gan_w", "*", "self", ".", "cri_gan", "(", "pred_g_fake", ",", "True", ")", "\n", "l_g_cls", "=", "self", ".", "l_gan_w", "*", "self", ".", "cri_ce", "(", "cls_g_fake", ",", "self", ".", "var_cat", ")", "\n", "l_g_total", "+=", "l_g_gan", "\n", "l_g_total", "+=", "l_g_cls", "\n", "\n", "l_g_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_G_SFT", ".", "step", "(", ")", "\n", "", "if", "step", ">", "20000", ":", "\n", "            ", "self", ".", "optimizer_G_other", ".", "step", "(", ")", "\n", "\n", "# D", "\n", "", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "l_d_total", "=", "0", "\n", "# real data", "\n", "pred_d_real", ",", "cls_d_real", "=", "self", ".", "netD", "(", "self", ".", "var_H", ")", "\n", "l_d_real", "=", "self", ".", "cri_gan", "(", "pred_d_real", ",", "True", ")", "\n", "l_d_cls_real", "=", "self", ".", "cri_ce", "(", "cls_d_real", ",", "self", ".", "var_cat", ")", "\n", "# fake data", "\n", "pred_d_fake", ",", "cls_d_fake", "=", "self", ".", "netD", "(", "self", ".", "fake_H", ".", "detach", "(", ")", ")", "# detach to avoid BP to G", "\n", "l_d_fake", "=", "self", ".", "cri_gan", "(", "pred_d_fake", ",", "False", ")", "\n", "l_d_cls_fake", "=", "self", ".", "cri_ce", "(", "cls_d_fake", ",", "self", ".", "var_cat", ")", "\n", "\n", "l_d_total", "=", "l_d_real", "+", "l_d_cls_real", "+", "l_d_fake", "+", "l_d_cls_fake", "\n", "\n", "if", "self", ".", "opt", "[", "'train'", "]", "[", "'gan_type'", "]", "==", "'wgan-gp'", ":", "\n", "            ", "batch_size", "=", "self", ".", "var_H", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "random_pt", ".", "size", "(", "0", ")", "!=", "batch_size", ":", "\n", "                ", "self", ".", "random_pt", ".", "resize_", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "", "self", ".", "random_pt", ".", "uniform_", "(", ")", "# Draw random interpolation points", "\n", "interp", "=", "self", ".", "random_pt", "*", "self", ".", "fake_H", ".", "detach", "(", ")", "+", "(", "1", "-", "self", ".", "random_pt", ")", "*", "self", ".", "var_H", "\n", "interp", ".", "requires_grad", "=", "True", "\n", "interp_crit", ",", "_", "=", "self", ".", "netD", "(", "interp", ")", "\n", "l_d_gp", "=", "self", ".", "l_gp_w", "*", "self", ".", "cri_gp", "(", "interp", ",", "interp_crit", ")", "# maybe wrong in cls?", "\n", "l_d_total", "+=", "l_d_gp", "\n", "\n", "", "l_d_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "# set log", "\n", "if", "step", "%", "self", ".", "D_update_ratio", "==", "0", "and", "step", ">", "self", ".", "D_init_iters", ":", "\n", "# G", "\n", "            ", "if", "self", ".", "cri_pix", ":", "\n", "                ", "self", ".", "log_dict", "[", "'l_g_pix'", "]", "=", "l_g_pix", ".", "item", "(", ")", "\n", "", "if", "self", ".", "cri_fea", ":", "\n", "                ", "self", ".", "log_dict", "[", "'l_g_fea'", "]", "=", "l_g_fea", ".", "item", "(", ")", "\n", "", "self", ".", "log_dict", "[", "'l_g_gan'", "]", "=", "l_g_gan", ".", "item", "(", ")", "\n", "# D", "\n", "", "self", ".", "log_dict", "[", "'l_d_real'", "]", "=", "l_d_real", ".", "item", "(", ")", "\n", "self", ".", "log_dict", "[", "'l_d_fake'", "]", "=", "l_d_fake", ".", "item", "(", ")", "\n", "self", ".", "log_dict", "[", "'l_d_cls_real'", "]", "=", "l_d_cls_real", ".", "item", "(", ")", "\n", "self", ".", "log_dict", "[", "'l_d_cls_fake'", "]", "=", "l_d_cls_fake", ".", "item", "(", ")", "\n", "if", "self", ".", "opt", "[", "'train'", "]", "[", "'gan_type'", "]", "==", "'wgan-gp'", ":", "\n", "            ", "self", ".", "log_dict", "[", "'l_d_gp'", "]", "=", "l_d_gp", ".", "item", "(", ")", "\n", "# D outputs", "\n", "", "self", ".", "log_dict", "[", "'D_real'", "]", "=", "torch", ".", "mean", "(", "pred_d_real", ".", "detach", "(", ")", ")", "\n", "self", ".", "log_dict", "[", "'D_fake'", "]", "=", "torch", ".", "mean", "(", "pred_d_fake", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.test": [[198, 203], ["SFTGAN_ACD_model.SFTGAN_ACD_Model.netG.eval", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netG.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "SFTGAN_ACD_model.SFTGAN_ACD_Model.netG"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "netG", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "fake_H", "=", "self", ".", "netG", "(", "(", "self", ".", "var_L", ",", "self", ".", "var_seg", ")", ")", "\n", "", "self", ".", "netG", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.get_current_log": [[204, 206], ["None"], "methods", ["None"], ["", "def", "get_current_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.get_current_visuals": [[207, 214], ["collections.OrderedDict", "[].float().cpu", "[].float().cpu", "[].float().cpu", "[].float", "[].float", "[].float", "SFTGAN_ACD_model.SFTGAN_ACD_Model.var_L.detach", "SFTGAN_ACD_model.SFTGAN_ACD_Model.fake_H.detach", "SFTGAN_ACD_model.SFTGAN_ACD_Model.var_H.detach"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ",", "need_HR", "=", "True", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'LR'", "]", "=", "self", ".", "var_L", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "out_dict", "[", "'SR'", "]", "=", "self", ".", "fake_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "if", "need_HR", ":", "\n", "            ", "out_dict", "[", "'HR'", "]", "=", "self", ".", "var_H", ".", "detach", "(", ")", "[", "0", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.print_network": [[215, 248], ["SFTGAN_ACD_model.SFTGAN_ACD_Model.get_network_description", "isinstance", "logger.info", "logger.info", "SFTGAN_ACD_model.SFTGAN_ACD_Model.get_network_description", "isinstance", "logger.info", "logger.info", "SFTGAN_ACD_model.SFTGAN_ACD_Model.get_network_description", "isinstance", "logger.info", "logger.info"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_network_description", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_network_description", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.get_network_description"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "# G", "\n", "        ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netG", ")", "\n", "if", "isinstance", "(", "self", ".", "netG", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netG", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "            ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netG", ".", "__class__", ".", "__name__", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Network G structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "# D", "\n", "            ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netD", ")", "\n", "if", "isinstance", "(", "self", ".", "netD", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netD", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netD", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "                ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netD", ".", "__class__", ".", "__name__", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Network D structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n", "if", "self", ".", "cri_fea", ":", "# F, Perceptual Network", "\n", "                ", "s", ",", "n", "=", "self", ".", "get_network_description", "(", "self", ".", "netF", ")", "\n", "if", "isinstance", "(", "self", ".", "netF", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net_struc_str", "=", "'{} - {}'", ".", "format", "(", "self", ".", "netF", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "netF", ".", "module", ".", "__class__", ".", "__name__", ")", "\n", "", "else", ":", "\n", "                    ", "net_struc_str", "=", "'{}'", ".", "format", "(", "self", ".", "netF", ".", "__class__", ".", "__name__", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Network F structure: {}, with parameters: {:,d}'", ".", "format", "(", "net_struc_str", ",", "n", ")", ")", "\n", "logger", ".", "info", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load": [[249, 258], ["logger.info", "SFTGAN_ACD_model.SFTGAN_ACD_Model.load_network", "logger.info", "SFTGAN_ACD_model.SFTGAN_ACD_Model.load_network"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.load_network"], ["", "", "", "def", "load", "(", "self", ")", ":", "\n", "        ", "load_path_G", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "\n", "if", "load_path_G", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading pretrained model for G [{:s}] ...'", ".", "format", "(", "load_path_G", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_G", ",", "self", ".", "netG", ")", "\n", "", "load_path_D", "=", "self", ".", "opt", "[", "'path'", "]", "[", "'pretrain_model_D'", "]", "\n", "if", "self", ".", "opt", "[", "'is_train'", "]", "and", "load_path_D", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading pretrained model for D [{:s}] ...'", ".", "format", "(", "load_path_D", ")", ")", "\n", "self", ".", "load_network", "(", "load_path_D", ",", "self", ".", "netD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.save": [[259, 262], ["SFTGAN_ACD_model.SFTGAN_ACD_Model.save_network", "SFTGAN_ACD_model.SFTGAN_ACD_Model.save_network"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "iter_step", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "iter_step", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD", ",", "'D'", ",", "iter_step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.SpectralNorm.__init__": [[11, 19], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "'weight'", ",", "n_power_iterations", "=", "1", ",", "dim", "=", "0", ",", "eps", "=", "1e-12", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "dim", "=", "dim", "\n", "if", "n_power_iterations", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Expected n_power_iterations to be positive, but '", "\n", "'got n_power_iterations={}'", ".", "format", "(", "n_power_iterations", ")", ")", "\n", "", "self", ".", "n_power_iterations", "=", "n_power_iterations", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.SpectralNorm.compute_weight": [[20, 41], ["getattr", "getattr", "weight_mat.permute.permute.size", "weight_mat.permute.permute.reshape", "torch.dot", "weight_mat.permute.permute.permute", "torch.no_grad", "range", "torch.matmul", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.matmul", "torch.matmul", "weight_mat.permute.permute.t", "range", "weight_mat.permute.permute.dim"], "methods", ["None"], ["", "def", "compute_weight", "(", "self", ",", "module", ")", ":", "\n", "        ", "weight", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_orig'", ")", "\n", "u", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_u'", ")", "\n", "weight_mat", "=", "weight", "\n", "if", "self", ".", "dim", "!=", "0", ":", "\n", "# permute dim to front", "\n", "            ", "weight_mat", "=", "weight_mat", ".", "permute", "(", "self", ".", "dim", ",", "\n", "*", "[", "d", "for", "d", "in", "range", "(", "weight_mat", ".", "dim", "(", ")", ")", "if", "d", "!=", "self", ".", "dim", "]", ")", "\n", "", "height", "=", "weight_mat", ".", "size", "(", "0", ")", "\n", "weight_mat", "=", "weight_mat", ".", "reshape", "(", "height", ",", "-", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "n_power_iterations", ")", ":", "\n", "# Spectral norm of weight equals to `u^T W v`, where `u` and `v`", "\n", "# are the first left and right singular vectors.", "\n", "# This power iteration produces approximations of `u` and `v`.", "\n", "                ", "v", "=", "normalize", "(", "torch", ".", "matmul", "(", "weight_mat", ".", "t", "(", ")", ",", "u", ")", ",", "dim", "=", "0", ",", "eps", "=", "self", ".", "eps", ")", "\n", "u", "=", "normalize", "(", "torch", ".", "matmul", "(", "weight_mat", ",", "v", ")", ",", "dim", "=", "0", ",", "eps", "=", "self", ".", "eps", ")", "\n", "\n", "", "", "sigma", "=", "torch", ".", "dot", "(", "u", ",", "torch", ".", "matmul", "(", "weight_mat", ",", "v", ")", ")", "\n", "weight", "=", "weight", "/", "sigma", "\n", "return", "weight", ",", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.SpectralNorm.remove": [[42, 48], ["getattr", "delattr", "delattr", "delattr", "module.register_parameter", "torch.nn.Parameter"], "methods", ["None"], ["", "def", "remove", "(", "self", ",", "module", ")", ":", "\n", "        ", "weight", "=", "getattr", "(", "module", ",", "self", ".", "name", ")", "\n", "delattr", "(", "module", ",", "self", ".", "name", ")", "\n", "delattr", "(", "module", ",", "self", ".", "name", "+", "'_u'", ")", "\n", "delattr", "(", "module", ",", "self", ".", "name", "+", "'_orig'", ")", "\n", "module", ".", "register_parameter", "(", "self", ".", "name", ",", "torch", ".", "nn", ".", "Parameter", "(", "weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.SpectralNorm.__call__": [[49, 57], ["spectral_norm.SpectralNorm.compute_weight", "setattr", "setattr", "getattr().detach_().requires_grad_", "getattr", "getattr().detach_", "getattr"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.SpectralNorm.compute_weight"], ["", "def", "__call__", "(", "self", ",", "module", ",", "inputs", ")", ":", "\n", "        ", "if", "module", ".", "training", ":", "\n", "            ", "weight", ",", "u", "=", "self", ".", "compute_weight", "(", "module", ")", "\n", "setattr", "(", "module", ",", "self", ".", "name", ",", "weight", ")", "\n", "setattr", "(", "module", ",", "self", ".", "name", "+", "'_u'", ",", "u", ")", "\n", "", "else", ":", "\n", "            ", "r_g", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_orig'", ")", ".", "requires_grad", "\n", "getattr", "(", "module", ",", "self", ".", "name", ")", ".", "detach_", "(", ")", ".", "requires_grad_", "(", "r_g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.SpectralNorm.apply": [[58, 78], ["spectral_norm.SpectralNorm", "weight.size", "torch.nn.functional.normalize", "delattr", "module.register_parameter", "module.register_buffer", "module.register_buffer", "module.register_forward_pre_hook", "weight.new_empty().normal_", "weight.new_empty"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "apply", "(", "module", ",", "name", ",", "n_power_iterations", ",", "dim", ",", "eps", ")", ":", "\n", "        ", "fn", "=", "SpectralNorm", "(", "name", ",", "n_power_iterations", ",", "dim", ",", "eps", ")", "\n", "weight", "=", "module", ".", "_parameters", "[", "name", "]", "\n", "height", "=", "weight", ".", "size", "(", "dim", ")", "\n", "\n", "u", "=", "normalize", "(", "weight", ".", "new_empty", "(", "height", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "dim", "=", "0", ",", "eps", "=", "fn", ".", "eps", ")", "\n", "delattr", "(", "module", ",", "fn", ".", "name", ")", "\n", "module", ".", "register_parameter", "(", "fn", ".", "name", "+", "\"_orig\"", ",", "weight", ")", "\n", "# We still need to assign weight back as fn.name because all sorts of", "\n", "# things may assume that it exists, e.g., when initializing weights.", "\n", "# However, we can't directly assign as it could be an nn.Parameter and", "\n", "# gets added as a parameter. Instead, we register weight.data as a", "\n", "# buffer, which will cause weight to be included in the state dict", "\n", "# and also supports nn.init due to shared storage.", "\n", "module", ".", "register_buffer", "(", "fn", ".", "name", ",", "weight", ".", "data", ")", "\n", "module", ".", "register_buffer", "(", "fn", ".", "name", "+", "\"_u\"", ",", "u", ")", "\n", "\n", "module", ".", "register_forward_pre_hook", "(", "fn", ")", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm": [[80, 130], ["spectral_norm.SpectralNorm.apply", "isinstance"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.SpectralNorm.apply"], ["", "", "def", "spectral_norm", "(", "module", ",", "name", "=", "'weight'", ",", "n_power_iterations", "=", "1", ",", "eps", "=", "1e-12", ",", "dim", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Applies spectral normalization to a parameter in the given module.\n\n    .. math::\n         \\mathbf{W} &= \\dfrac{\\mathbf{W}}{\\sigma(\\mathbf{W})} \\\\\n         \\sigma(\\mathbf{W}) &= \\max_{\\mathbf{h}: \\mathbf{h} \\ne 0} \\dfrac{\\|\\mathbf{W} \\mathbf{h}\\|_2}{\\|\\mathbf{h}\\|_2}\n\n    Spectral normalization stabilizes the training of discriminators (critics)\n    in Generaive Adversarial Networks (GANs) by rescaling the weight tensor\n    with spectral norm :math:`\\sigma` of the weight matrix calculated using\n    power iteration method. If the dimension of the weight tensor is greater\n    than 2, it is reshaped to 2D in power iteration method to get spectral\n    norm. This is implemented via a hook that calculates spectral norm and\n    rescales weight before every :meth:`~Module.forward` call.\n\n    See `Spectral Normalization for Generative Adversarial Networks`_ .\n\n    .. _`Spectral Normalization for Generative Adversarial Networks`: https://arxiv.org/abs/1802.05957\n\n    Args:\n        module (nn.Module): containing module\n        name (str, optional): name of weight parameter\n        n_power_iterations (int, optional): number of power iterations to\n            calculate spectal norm\n        eps (float, optional): epsilon for numerical stability in\n            calculating norms\n        dim (int, optional): dimension corresponding to number of outputs,\n            the default is 0, except for modules that are instances of\n            ConvTranspose1/2/3d, when it is 1\n\n    Returns:\n        The original module with the spectal norm hook\n\n    Example::\n\n        >>> m = spectral_norm(nn.Linear(20, 40))\n        Linear (20 -> 40)\n        >>> m.weight_u.size()\n        torch.Size([20])\n\n    \"\"\"", "\n", "if", "dim", "is", "None", ":", "\n", "        ", "if", "isinstance", "(", "\n", "module", ",", "\n", "(", "torch", ".", "nn", ".", "ConvTranspose1d", ",", "torch", ".", "nn", ".", "ConvTranspose2d", ",", "torch", ".", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "            ", "dim", "=", "1", "\n", "", "else", ":", "\n", "            ", "dim", "=", "0", "\n", "", "", "SpectralNorm", ".", "apply", "(", "module", ",", "name", ",", "n_power_iterations", ",", "dim", ",", "eps", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.remove_spectral_norm": [[132, 150], ["module._forward_pre_hooks.items", "ValueError", "isinstance", "hook.remove"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.SpectralNorm.remove"], ["", "def", "remove_spectral_norm", "(", "module", ",", "name", "=", "'weight'", ")", ":", "\n", "    ", "r\"\"\"Removes the spectral normalization reparameterization from a module.\n\n    Args:\n        module (nn.Module): containing module\n        name (str, optional): name of weight parameter\n\n    Example:\n        >>> m = spectral_norm(nn.Linear(40, 10))\n        >>> remove_spectral_norm(m)\n    \"\"\"", "\n", "for", "k", ",", "hook", "in", "module", ".", "_forward_pre_hooks", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "hook", ",", "SpectralNorm", ")", "and", "hook", ".", "name", "==", "name", ":", "\n", "            ", "hook", ".", "remove", "(", "module", ")", "\n", "del", "module", ".", "_forward_pre_hooks", "[", "k", "]", "\n", "return", "module", "\n", "\n", "", "", "raise", "ValueError", "(", "\"spectral_norm of '{}' not found in {}\"", ".", "format", "(", "name", ",", "module", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.seg_arch.Res131.__init__": [[9, 20], ["torch.Module.__init__", "block.conv_block", "block.conv_block", "block.conv_block", "block.sequential", "block.conv_block"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "mid_nc", ",", "out_nc", ",", "dilation", "=", "1", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Res131", ",", "self", ")", ".", "__init__", "(", ")", "\n", "conv0", "=", "B", ".", "conv_block", "(", "in_nc", ",", "mid_nc", ",", "1", ",", "1", ",", "1", ",", "1", ",", "False", ",", "'zero'", ",", "'batch'", ")", "\n", "conv1", "=", "B", ".", "conv_block", "(", "mid_nc", ",", "mid_nc", ",", "3", ",", "stride", ",", "dilation", ",", "1", ",", "False", ",", "'zero'", ",", "'batch'", ")", "\n", "conv2", "=", "B", ".", "conv_block", "(", "mid_nc", ",", "out_nc", ",", "1", ",", "1", ",", "1", ",", "1", ",", "False", ",", "'zero'", ",", "'batch'", ",", "None", ")", "#  No ReLU", "\n", "self", ".", "res", "=", "B", ".", "sequential", "(", "conv0", ",", "conv1", ",", "conv2", ")", "\n", "if", "in_nc", "==", "out_nc", ":", "\n", "            ", "self", ".", "has_proj", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "has_proj", "=", "True", "\n", "self", ".", "proj", "=", "B", ".", "conv_block", "(", "in_nc", ",", "out_nc", ",", "1", ",", "stride", ",", "1", ",", "1", ",", "False", ",", "'zero'", ",", "'batch'", ",", "None", ")", "\n", "#  No ReLU", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.seg_arch.Res131.forward": [[22, 27], ["seg_arch.Res131.res", "torch.functional.relu", "seg_arch.Res131.proj"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "res", "(", "x", ")", "\n", "if", "self", ".", "has_proj", ":", "\n", "            ", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "", "return", "nn", ".", "functional", ".", "relu", "(", "x", "+", "res", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.seg_arch.OutdoorSceneSeg.__init__": [[30, 65], ["torch.Module.__init__", "block.conv_block", "block.conv_block", "block.conv_block", "torch.MaxPool2d", "blocks.append", "range", "blocks.append", "range", "blocks.append", "range", "blocks.append", "blocks.append", "blocks.append", "blocks.append", "blocks.append", "blocks.append", "block.sequential", "torch.ConvTranspose2d", "torch.Softmax", "seg_arch.Res131", "blocks.append", "seg_arch.Res131", "blocks.append", "seg_arch.Res131", "blocks.append", "seg_arch.Res131", "seg_arch.Res131", "seg_arch.Res131", "block.conv_block", "torch.Dropout", "torch.Conv2d", "seg_arch.Res131", "seg_arch.Res131", "seg_arch.Res131"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "OutdoorSceneSeg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# conv1", "\n", "blocks", "=", "[", "]", "\n", "conv1_1", "=", "B", ".", "conv_block", "(", "3", ",", "64", ",", "3", ",", "2", ",", "1", ",", "1", ",", "False", ",", "'zero'", ",", "'batch'", ")", "#  /2", "\n", "conv1_2", "=", "B", ".", "conv_block", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ",", "1", ",", "False", ",", "'zero'", ",", "'batch'", ")", "\n", "conv1_3", "=", "B", ".", "conv_block", "(", "64", ",", "128", ",", "3", ",", "1", ",", "1", ",", "1", ",", "False", ",", "'zero'", ",", "'batch'", ")", "\n", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", ")", "#  /2", "\n", "blocks", "=", "[", "conv1_1", ",", "conv1_2", ",", "conv1_3", ",", "max_pool", "]", "\n", "# conv2, 3 blocks", "\n", "blocks", ".", "append", "(", "Res131", "(", "128", ",", "64", ",", "256", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "blocks", ".", "append", "(", "Res131", "(", "256", ",", "64", ",", "256", ")", ")", "\n", "# conv3, 4 blocks", "\n", "", "blocks", ".", "append", "(", "Res131", "(", "256", ",", "128", ",", "512", ",", "1", ",", "2", ")", ")", "#  /2", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "blocks", ".", "append", "(", "Res131", "(", "512", ",", "128", ",", "512", ")", ")", "\n", "# conv4, 23 blocks", "\n", "", "blocks", ".", "append", "(", "Res131", "(", "512", ",", "256", ",", "1024", ",", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "22", ")", ":", "\n", "            ", "blocks", ".", "append", "(", "Res131", "(", "1024", ",", "256", ",", "1024", ",", "2", ")", ")", "\n", "# conv5", "\n", "", "blocks", ".", "append", "(", "Res131", "(", "1024", ",", "512", ",", "2048", ",", "4", ")", ")", "\n", "blocks", ".", "append", "(", "Res131", "(", "2048", ",", "512", ",", "2048", ",", "4", ")", ")", "\n", "blocks", ".", "append", "(", "Res131", "(", "2048", ",", "512", ",", "2048", ",", "4", ")", ")", "\n", "blocks", ".", "append", "(", "B", ".", "conv_block", "(", "2048", ",", "512", ",", "3", ",", "1", ",", "1", ",", "1", ",", "False", ",", "'zero'", ",", "'batch'", ")", ")", "\n", "blocks", ".", "append", "(", "nn", ".", "Dropout", "(", "0.1", ")", ")", "\n", "# # conv6", "\n", "blocks", ".", "append", "(", "nn", ".", "Conv2d", "(", "512", ",", "8", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "feature", "=", "B", ".", "sequential", "(", "*", "blocks", ")", "\n", "# deconv", "\n", "self", ".", "deconv", "=", "nn", ".", "ConvTranspose2d", "(", "8", ",", "8", ",", "16", ",", "8", ",", "4", ",", "0", ",", "8", ",", "False", ",", "1", ")", "\n", "# softmax", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.seg_arch.OutdoorSceneSeg.forward": [[66, 71], ["seg_arch.OutdoorSceneSeg.feature", "seg_arch.OutdoorSceneSeg.deconv", "seg_arch.OutdoorSceneSeg.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature", "(", "x", ")", "\n", "x", "=", "self", ".", "deconv", "(", "x", ")", "\n", "x", "=", "self", ".", "softmax", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.SFTLayer.__init__": [[9, 15], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SFTLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "SFT_scale_conv0", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "1", ")", "\n", "self", ".", "SFT_scale_conv1", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "1", ")", "\n", "self", ".", "SFT_shift_conv0", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "1", ")", "\n", "self", ".", "SFT_shift_conv1", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.SFTLayer.forward": [[16, 21], ["sft_arch.SFTLayer.SFT_scale_conv1", "sft_arch.SFTLayer.SFT_shift_conv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "sft_arch.SFTLayer.SFT_scale_conv0", "sft_arch.SFTLayer.SFT_shift_conv0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x[0]: fea; x[1]: cond", "\n", "        ", "scale", "=", "self", ".", "SFT_scale_conv1", "(", "F", ".", "leaky_relu", "(", "self", ".", "SFT_scale_conv0", "(", "x", "[", "1", "]", ")", ",", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "shift", "=", "self", ".", "SFT_shift_conv1", "(", "F", ".", "leaky_relu", "(", "self", ".", "SFT_shift_conv0", "(", "x", "[", "1", "]", ")", ",", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "return", "x", "[", "0", "]", "*", "(", "scale", "+", "1", ")", "+", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.ResBlock_SFT.__init__": [[24, 30], ["torch.Module.__init__", "sft_arch.SFTLayer", "torch.Conv2d", "torch.Conv2d", "sft_arch.SFTLayer", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ResBlock_SFT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sft0", "=", "SFTLayer", "(", ")", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "sft1", "=", "SFTLayer", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.ResBlock_SFT.forward": [[31, 38], ["sft_arch.ResBlock_SFT.sft0", "torch.relu", "torch.relu", "sft_arch.ResBlock_SFT.sft1", "sft_arch.ResBlock_SFT.conv1", "sft_arch.ResBlock_SFT.conv0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x[0]: fea; x[1]: cond", "\n", "        ", "fea", "=", "self", ".", "sft0", "(", "x", ")", "\n", "fea", "=", "F", ".", "relu", "(", "self", ".", "conv0", "(", "fea", ")", ",", "inplace", "=", "True", ")", "\n", "fea", "=", "self", ".", "sft1", "(", "(", "fea", ",", "x", "[", "1", "]", ")", ")", "\n", "fea", "=", "self", ".", "conv1", "(", "fea", ")", "\n", "return", "(", "x", "[", "0", "]", "+", "fea", ",", "x", "[", "1", "]", ")", "# return a tuple containing features and conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.SFT_Net.__init__": [[41, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "range", "sft_branch.append", "sft_branch.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sft_branch.append", "sft_arch.SFTLayer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "sft_arch.ResBlock_SFT"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SFT_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "sft_branch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "            ", "sft_branch", ".", "append", "(", "ResBlock_SFT", "(", ")", ")", "\n", "", "sft_branch", ".", "append", "(", "SFTLayer", "(", ")", ")", "\n", "sft_branch", ".", "append", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "sft_branch", "=", "nn", ".", "Sequential", "(", "*", "sft_branch", ")", "\n", "\n", "self", ".", "HR_branch", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "PixelShuffle", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "PixelShuffle", "(", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "3", ",", "3", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "CondNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "8", ",", "128", ",", "4", ",", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.SFT_Net.forward": [[76, 84], ["sft_arch.SFT_Net.CondNet", "sft_arch.SFT_Net.conv0", "sft_arch.SFT_Net.sft_branch", "sft_arch.SFT_Net.HR_branch"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x[0]: img; x[1]: seg", "\n", "        ", "cond", "=", "self", ".", "CondNet", "(", "x", "[", "1", "]", ")", "\n", "fea", "=", "self", ".", "conv0", "(", "x", "[", "0", "]", ")", "\n", "res", "=", "self", ".", "sft_branch", "(", "(", "fea", ",", "cond", ")", ")", "\n", "fea", "=", "fea", "+", "res", "\n", "out", "=", "self", ".", "HR_branch", "(", "fea", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.ACD_VGG_BN_96.__init__": [[88, 135], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ACD_VGG_BN_96", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feature", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", ")", "\n", "\n", "# gan", "\n", "self", ".", "gan", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "6", "*", "6", ",", "100", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "100", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "cls", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "6", "*", "6", ",", "100", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "100", ",", "8", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.ACD_VGG_BN_96.forward": [[137, 143], ["sft_arch.ACD_VGG_BN_96.feature", "fea.view.view.view", "sft_arch.ACD_VGG_BN_96.gan", "sft_arch.ACD_VGG_BN_96.cls", "fea.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "feature", "(", "x", ")", "\n", "fea", "=", "fea", ".", "view", "(", "fea", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "gan", "=", "self", ".", "gan", "(", "fea", ")", "\n", "cls", "=", "self", ".", "cls", "(", "fea", ")", "\n", "return", "[", "gan", ",", "cls", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.SFTLayer_torch.__init__": [[151, 157], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SFTLayer_torch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "SFT_scale_conv0", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "1", ")", "\n", "self", ".", "SFT_scale_conv1", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "1", ")", "\n", "self", ".", "SFT_shift_conv0", "=", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "1", ")", "\n", "self", ".", "SFT_shift_conv1", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.SFTLayer_torch.forward": [[158, 163], ["sft_arch.SFTLayer_torch.SFT_scale_conv1", "sft_arch.SFTLayer_torch.SFT_shift_conv1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "sft_arch.SFTLayer_torch.SFT_scale_conv0", "sft_arch.SFTLayer_torch.SFT_shift_conv0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x[0]: fea; x[1]: cond", "\n", "        ", "scale", "=", "self", ".", "SFT_scale_conv1", "(", "F", ".", "leaky_relu", "(", "self", ".", "SFT_scale_conv0", "(", "x", "[", "1", "]", ")", ",", "0.01", ",", "inplace", "=", "True", ")", ")", "\n", "shift", "=", "self", ".", "SFT_shift_conv1", "(", "F", ".", "leaky_relu", "(", "self", ".", "SFT_shift_conv0", "(", "x", "[", "1", "]", ")", ",", "0.01", ",", "inplace", "=", "True", ")", ")", "\n", "return", "x", "[", "0", "]", "*", "scale", "+", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.ResBlock_SFT_torch.__init__": [[166, 172], ["torch.Module.__init__", "sft_arch.SFTLayer_torch", "torch.Conv2d", "torch.Conv2d", "sft_arch.SFTLayer_torch", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ResBlock_SFT_torch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sft0", "=", "SFTLayer_torch", "(", ")", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "sft1", "=", "SFTLayer_torch", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.ResBlock_SFT_torch.forward": [[173, 180], ["torch.relu", "torch.relu", "sft_arch.ResBlock_SFT_torch.conv0", "torch.relu", "torch.relu", "sft_arch.ResBlock_SFT_torch.conv1", "sft_arch.ResBlock_SFT_torch.sft0", "sft_arch.ResBlock_SFT_torch.sft1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x[0]: fea; x[1]: cond", "\n", "        ", "fea", "=", "F", ".", "relu", "(", "self", ".", "sft0", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "fea", "=", "self", ".", "conv0", "(", "fea", ")", "\n", "fea", "=", "F", ".", "relu", "(", "self", ".", "sft1", "(", "(", "fea", ",", "x", "[", "1", "]", ")", ")", ",", "inplace", "=", "True", ")", "\n", "fea", "=", "self", ".", "conv1", "(", "fea", ")", "\n", "return", "(", "x", "[", "0", "]", "+", "fea", ",", "x", "[", "1", "]", ")", "# return a tuple containing features and conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.SFT_Net_torch.__init__": [[183, 217], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "range", "sft_branch.append", "sft_branch.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sft_branch.append", "sft_arch.SFTLayer_torch", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "sft_arch.ResBlock_SFT_torch"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SFT_Net_torch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "\n", "sft_branch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "            ", "sft_branch", ".", "append", "(", "ResBlock_SFT_torch", "(", ")", ")", "\n", "", "sft_branch", ".", "append", "(", "SFTLayer_torch", "(", ")", ")", "\n", "sft_branch", ".", "append", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "sft_branch", "=", "nn", ".", "Sequential", "(", "*", "sft_branch", ")", "\n", "\n", "self", ".", "HR_branch", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "3", ",", "3", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "# Condtion network", "\n", "self", ".", "CondNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "8", ",", "128", ",", "4", ",", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.sft_arch.SFT_Net_torch.forward": [[219, 227], ["sft_arch.SFT_Net_torch.CondNet", "sft_arch.SFT_Net_torch.conv0", "sft_arch.SFT_Net_torch.sft_branch", "sft_arch.SFT_Net_torch.HR_branch"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x[0]: img; x[1]: seg", "\n", "        ", "cond", "=", "self", ".", "CondNet", "(", "x", "[", "1", "]", ")", "\n", "fea", "=", "self", ".", "conv0", "(", "x", "[", "0", "]", ")", "\n", "res", "=", "self", ".", "sft_branch", "(", "(", "fea", ",", "cond", ")", ")", "\n", "fea", "=", "fea", "+", "res", "\n", "out", "=", "self", ".", "HR_branch", "(", "fea", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.SRResNet.__init__": [[14, 41], ["torch.Module.__init__", "int", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.sequential", "math.log", "block.ResNetBlock", "upsample_block", "block.ShortcutBlock", "range", "NotImplementedError", "upsample_block", "block.sequential", "range"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "out_nc", ",", "nf", ",", "nb", ",", "upscale", "=", "4", ",", "norm_type", "=", "'batch'", ",", "act_type", "=", "'relu'", ",", "mode", "=", "'NAC'", ",", "res_scale", "=", "1", ",", "upsample_mode", "=", "'upconv'", ")", ":", "\n", "        ", "super", "(", "SRResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n_upscale", "=", "int", "(", "math", ".", "log", "(", "upscale", ",", "2", ")", ")", "\n", "if", "upscale", "==", "3", ":", "\n", "            ", "n_upscale", "=", "1", "\n", "\n", "", "fea_conv", "=", "B", ".", "conv_block", "(", "in_nc", ",", "nf", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "None", ",", "act_type", "=", "None", ")", "\n", "resnet_blocks", "=", "[", "B", ".", "ResNetBlock", "(", "nf", ",", "nf", ",", "nf", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ",", "res_scale", "=", "res_scale", ")", "for", "_", "in", "range", "(", "nb", ")", "]", "\n", "LR_conv", "=", "B", ".", "conv_block", "(", "nf", ",", "nf", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "None", ",", "mode", "=", "mode", ")", "\n", "\n", "if", "upsample_mode", "==", "'upconv'", ":", "\n", "            ", "upsample_block", "=", "B", ".", "upconv_blcok", "\n", "", "elif", "upsample_mode", "==", "'pixelshuffle'", ":", "\n", "            ", "upsample_block", "=", "B", ".", "pixelshuffle_block", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'upsample mode [{:s}] is not found'", ".", "format", "(", "upsample_mode", ")", ")", "\n", "", "if", "upscale", "==", "3", ":", "\n", "            ", "upsampler", "=", "upsample_block", "(", "nf", ",", "nf", ",", "3", ",", "act_type", "=", "act_type", ")", "\n", "", "else", ":", "\n", "            ", "upsampler", "=", "[", "upsample_block", "(", "nf", ",", "nf", ",", "act_type", "=", "act_type", ")", "for", "_", "in", "range", "(", "n_upscale", ")", "]", "\n", "", "HR_conv0", "=", "B", ".", "conv_block", "(", "nf", ",", "nf", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "None", ",", "act_type", "=", "act_type", ")", "\n", "HR_conv1", "=", "B", ".", "conv_block", "(", "nf", ",", "out_nc", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "None", ",", "act_type", "=", "None", ")", "\n", "\n", "self", ".", "model", "=", "B", ".", "sequential", "(", "fea_conv", ",", "B", ".", "ShortcutBlock", "(", "B", ".", "sequential", "(", "*", "resnet_blocks", ",", "LR_conv", ")", ")", ",", "*", "upsampler", ",", "HR_conv0", ",", "HR_conv1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.SRResNet.forward": [[42, 45], ["architecture.SRResNet.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.RRDBNet.__init__": [[48, 75], ["torch.Module.__init__", "int", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.sequential", "math.log", "block.RRDB", "upsample_block", "block.ShortcutBlock", "range", "NotImplementedError", "upsample_block", "block.sequential", "range"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "out_nc", ",", "nf", ",", "nb", ",", "gc", "=", "32", ",", "upscale", "=", "4", ",", "norm_type", "=", "None", ",", "act_type", "=", "'leakyrelu'", ",", "mode", "=", "'CNA'", ",", "upsample_mode", "=", "'upconv'", ")", ":", "\n", "        ", "super", "(", "RRDBNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n_upscale", "=", "int", "(", "math", ".", "log", "(", "upscale", ",", "2", ")", ")", "\n", "if", "upscale", "==", "3", ":", "\n", "            ", "n_upscale", "=", "1", "\n", "\n", "", "fea_conv", "=", "B", ".", "conv_block", "(", "in_nc", ",", "nf", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "None", ",", "act_type", "=", "None", ")", "\n", "rb_blocks", "=", "[", "B", ".", "RRDB", "(", "nf", ",", "kernel_size", "=", "3", ",", "gc", "=", "32", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad_type", "=", "'zero'", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "'CNA'", ")", "for", "_", "in", "range", "(", "nb", ")", "]", "\n", "LR_conv", "=", "B", ".", "conv_block", "(", "nf", ",", "nf", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "None", ",", "mode", "=", "mode", ")", "\n", "\n", "if", "upsample_mode", "==", "'upconv'", ":", "\n", "            ", "upsample_block", "=", "B", ".", "upconv_blcok", "\n", "", "elif", "upsample_mode", "==", "'pixelshuffle'", ":", "\n", "            ", "upsample_block", "=", "B", ".", "pixelshuffle_block", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'upsample mode [{:s}] is not found'", ".", "format", "(", "upsample_mode", ")", ")", "\n", "", "if", "upscale", "==", "3", ":", "\n", "            ", "upsampler", "=", "upsample_block", "(", "nf", ",", "nf", ",", "3", ",", "act_type", "=", "act_type", ")", "\n", "", "else", ":", "\n", "            ", "upsampler", "=", "[", "upsample_block", "(", "nf", ",", "nf", ",", "act_type", "=", "act_type", ")", "for", "_", "in", "range", "(", "n_upscale", ")", "]", "\n", "", "HR_conv0", "=", "B", ".", "conv_block", "(", "nf", ",", "nf", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "None", ",", "act_type", "=", "act_type", ")", "\n", "HR_conv1", "=", "B", ".", "conv_block", "(", "nf", ",", "out_nc", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "None", ",", "act_type", "=", "None", ")", "\n", "\n", "self", ".", "model", "=", "B", ".", "sequential", "(", "fea_conv", ",", "B", ".", "ShortcutBlock", "(", "B", ".", "sequential", "(", "*", "rb_blocks", ",", "LR_conv", ")", ")", ",", "*", "upsampler", ",", "HR_conv0", ",", "HR_conv1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.RRDBNet.forward": [[76, 79], ["architecture.RRDBNet.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.Discriminator_VGG_128.__init__": [[88, 124], ["torch.Module.__init__", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "base_nf", ",", "norm_type", "=", "'batch'", ",", "act_type", "=", "'leakyrelu'", ",", "mode", "=", "'CNA'", ")", ":", "\n", "        ", "super", "(", "Discriminator_VGG_128", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# features", "\n", "# hxw, c", "\n", "# 128, 64", "\n", "conv0", "=", "B", ".", "conv_block", "(", "in_nc", ",", "base_nf", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "None", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv1", "=", "B", ".", "conv_block", "(", "base_nf", ",", "base_nf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 64, 64", "\n", "conv2", "=", "B", ".", "conv_block", "(", "base_nf", ",", "base_nf", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv3", "=", "B", ".", "conv_block", "(", "base_nf", "*", "2", ",", "base_nf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 32, 128", "\n", "conv4", "=", "B", ".", "conv_block", "(", "base_nf", "*", "2", ",", "base_nf", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv5", "=", "B", ".", "conv_block", "(", "base_nf", "*", "4", ",", "base_nf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 16, 256", "\n", "conv6", "=", "B", ".", "conv_block", "(", "base_nf", "*", "4", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv7", "=", "B", ".", "conv_block", "(", "base_nf", "*", "8", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 8, 512", "\n", "conv8", "=", "B", ".", "conv_block", "(", "base_nf", "*", "8", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv9", "=", "B", ".", "conv_block", "(", "base_nf", "*", "8", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 4, 512", "\n", "self", ".", "features", "=", "B", ".", "sequential", "(", "conv0", ",", "conv1", ",", "conv2", ",", "conv3", ",", "conv4", ",", "conv5", ",", "conv6", ",", "conv7", ",", "conv8", ",", "conv9", ")", "\n", "\n", "# classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "4", "*", "4", ",", "100", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Linear", "(", "100", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.Discriminator_VGG_128.forward": [[125, 130], ["architecture.Discriminator_VGG_128.features", "architecture.Discriminator_VGG_128.view", "architecture.Discriminator_VGG_128.classifier", "architecture.Discriminator_VGG_128.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.Discriminator_VGG_128_SN.__init__": [[134, 160], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "spectral_norm.spectral_norm", "spectral_norm.spectral_norm", "spectral_norm.spectral_norm", "spectral_norm.spectral_norm", "spectral_norm.spectral_norm", "spectral_norm.spectral_norm", "spectral_norm.spectral_norm", "spectral_norm.spectral_norm", "spectral_norm.spectral_norm", "spectral_norm.spectral_norm", "spectral_norm.spectral_norm", "spectral_norm.spectral_norm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.spectral_norm.spectral_norm"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Discriminator_VGG_128_SN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# features", "\n", "# hxw, c", "\n", "# 128, 64", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "\n", "self", ".", "conv0", "=", "SN", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv1", "=", "SN", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "4", ",", "2", ",", "1", ")", ")", "\n", "# 64, 64", "\n", "self", ".", "conv2", "=", "SN", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv3", "=", "SN", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "4", ",", "2", ",", "1", ")", ")", "\n", "# 32, 128", "\n", "self", ".", "conv4", "=", "SN", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv5", "=", "SN", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "4", ",", "2", ",", "1", ")", ")", "\n", "# 16, 256", "\n", "self", ".", "conv6", "=", "SN", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv7", "=", "SN", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "4", ",", "2", ",", "1", ")", ")", "\n", "# 8, 512", "\n", "self", ".", "conv8", "=", "SN", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "conv9", "=", "SN", ".", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "4", ",", "2", ",", "1", ")", ")", "\n", "# 4, 512", "\n", "\n", "# classifier", "\n", "self", ".", "linear0", "=", "SN", ".", "spectral_norm", "(", "nn", ".", "Linear", "(", "512", "*", "4", "*", "4", ",", "100", ")", ")", "\n", "self", ".", "linear1", "=", "SN", ".", "spectral_norm", "(", "nn", ".", "Linear", "(", "100", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.Discriminator_VGG_128_SN.forward": [[161, 176], ["architecture.Discriminator_VGG_128_SN.lrelu", "architecture.Discriminator_VGG_128_SN.lrelu", "architecture.Discriminator_VGG_128_SN.lrelu", "architecture.Discriminator_VGG_128_SN.lrelu", "architecture.Discriminator_VGG_128_SN.lrelu", "architecture.Discriminator_VGG_128_SN.lrelu", "architecture.Discriminator_VGG_128_SN.lrelu", "architecture.Discriminator_VGG_128_SN.lrelu", "architecture.Discriminator_VGG_128_SN.lrelu", "architecture.Discriminator_VGG_128_SN.lrelu", "architecture.Discriminator_VGG_128_SN.view", "architecture.Discriminator_VGG_128_SN.lrelu", "architecture.Discriminator_VGG_128_SN.linear1", "architecture.Discriminator_VGG_128_SN.conv0", "architecture.Discriminator_VGG_128_SN.conv1", "architecture.Discriminator_VGG_128_SN.conv2", "architecture.Discriminator_VGG_128_SN.conv3", "architecture.Discriminator_VGG_128_SN.conv4", "architecture.Discriminator_VGG_128_SN.conv5", "architecture.Discriminator_VGG_128_SN.conv6", "architecture.Discriminator_VGG_128_SN.conv7", "architecture.Discriminator_VGG_128_SN.conv8", "architecture.Discriminator_VGG_128_SN.conv9", "architecture.Discriminator_VGG_128_SN.size", "architecture.Discriminator_VGG_128_SN.linear0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "lrelu", "(", "self", ".", "conv0", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "lrelu", "(", "self", ".", "conv5", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "lrelu", "(", "self", ".", "conv6", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "lrelu", "(", "self", ".", "conv7", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "lrelu", "(", "self", ".", "conv8", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "lrelu", "(", "self", ".", "conv9", "(", "x", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "lrelu", "(", "self", ".", "linear0", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "linear1", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.Discriminator_VGG_96.__init__": [[179, 215], ["torch.Module.__init__", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "base_nf", ",", "norm_type", "=", "'batch'", ",", "act_type", "=", "'leakyrelu'", ",", "mode", "=", "'CNA'", ")", ":", "\n", "        ", "super", "(", "Discriminator_VGG_96", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# features", "\n", "# hxw, c", "\n", "# 96, 64", "\n", "conv0", "=", "B", ".", "conv_block", "(", "in_nc", ",", "base_nf", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "None", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv1", "=", "B", ".", "conv_block", "(", "base_nf", ",", "base_nf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 48, 64", "\n", "conv2", "=", "B", ".", "conv_block", "(", "base_nf", ",", "base_nf", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv3", "=", "B", ".", "conv_block", "(", "base_nf", "*", "2", ",", "base_nf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 24, 128", "\n", "conv4", "=", "B", ".", "conv_block", "(", "base_nf", "*", "2", ",", "base_nf", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv5", "=", "B", ".", "conv_block", "(", "base_nf", "*", "4", ",", "base_nf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 12, 256", "\n", "conv6", "=", "B", ".", "conv_block", "(", "base_nf", "*", "4", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv7", "=", "B", ".", "conv_block", "(", "base_nf", "*", "8", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 6, 512", "\n", "conv8", "=", "B", ".", "conv_block", "(", "base_nf", "*", "8", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv9", "=", "B", ".", "conv_block", "(", "base_nf", "*", "8", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 3, 512", "\n", "self", ".", "features", "=", "B", ".", "sequential", "(", "conv0", ",", "conv1", ",", "conv2", ",", "conv3", ",", "conv4", ",", "conv5", ",", "conv6", ",", "conv7", ",", "conv8", ",", "conv9", ")", "\n", "\n", "# classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "3", "*", "3", ",", "100", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Linear", "(", "100", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.Discriminator_VGG_96.forward": [[216, 221], ["architecture.Discriminator_VGG_96.features", "architecture.Discriminator_VGG_96.view", "architecture.Discriminator_VGG_96.classifier", "architecture.Discriminator_VGG_96.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.Discriminator_VGG_192.__init__": [[224, 265], ["torch.Module.__init__", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential"], ["    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "base_nf", ",", "norm_type", "=", "'batch'", ",", "act_type", "=", "'leakyrelu'", ",", "mode", "=", "'CNA'", ")", ":", "\n", "        ", "super", "(", "Discriminator_VGG_192", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# features", "\n", "# hxw, c", "\n", "# 192, 64", "\n", "conv0", "=", "B", ".", "conv_block", "(", "in_nc", ",", "base_nf", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "None", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv1", "=", "B", ".", "conv_block", "(", "base_nf", ",", "base_nf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 96, 64", "\n", "conv2", "=", "B", ".", "conv_block", "(", "base_nf", ",", "base_nf", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv3", "=", "B", ".", "conv_block", "(", "base_nf", "*", "2", ",", "base_nf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 48, 128", "\n", "conv4", "=", "B", ".", "conv_block", "(", "base_nf", "*", "2", ",", "base_nf", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv5", "=", "B", ".", "conv_block", "(", "base_nf", "*", "4", ",", "base_nf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 24, 256", "\n", "conv6", "=", "B", ".", "conv_block", "(", "base_nf", "*", "4", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv7", "=", "B", ".", "conv_block", "(", "base_nf", "*", "8", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 12, 512", "\n", "conv8", "=", "B", ".", "conv_block", "(", "base_nf", "*", "8", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv9", "=", "B", ".", "conv_block", "(", "base_nf", "*", "8", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 6, 512", "\n", "conv10", "=", "B", ".", "conv_block", "(", "base_nf", "*", "8", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "conv11", "=", "B", ".", "conv_block", "(", "base_nf", "*", "8", ",", "base_nf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "# 3, 512", "\n", "self", ".", "features", "=", "B", ".", "sequential", "(", "conv0", ",", "conv1", ",", "conv2", ",", "conv3", ",", "conv4", ",", "conv5", ",", "conv6", ",", "conv7", ",", "conv8", ",", "conv9", ",", "conv10", ",", "conv11", ")", "\n", "\n", "# classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "3", "*", "3", ",", "100", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Linear", "(", "100", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.Discriminator_VGG_192.forward": [[266, 271], ["architecture.Discriminator_VGG_192.features", "architecture.Discriminator_VGG_192.view", "architecture.Discriminator_VGG_192.classifier", "architecture.Discriminator_VGG_192.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.VGGFeatureExtractor.__init__": [[280, 302], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "architecture.VGGFeatureExtractor.features.named_parameters", "torchvision.models.vgg19_bn", "torchvision.models.vgg19", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "architecture.VGGFeatureExtractor.register_buffer", "architecture.VGGFeatureExtractor.register_buffer", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "list", "torchvision.models.vgg19.features.children", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "feature_layer", "=", "34", ",", "\n", "use_bn", "=", "False", ",", "\n", "use_input_norm", "=", "True", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "super", "(", "VGGFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "use_bn", ":", "\n", "            ", "model", "=", "torchvision", ".", "models", ".", "vgg19_bn", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torchvision", ".", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", "\n", "", "self", ".", "use_input_norm", "=", "use_input_norm", "\n", "if", "self", ".", "use_input_norm", ":", "\n", "            ", "mean", "=", "torch", ".", "Tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "# [0.485-1, 0.456-1, 0.406-1] if input in range [-1,1]", "\n", "std", "=", "torch", ".", "Tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "# [0.229*2, 0.224*2, 0.225*2] if input in range [-1,1]", "\n", "self", ".", "register_buffer", "(", "'mean'", ",", "mean", ")", "\n", "self", ".", "register_buffer", "(", "'std'", ",", "std", ")", "\n", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "model", ".", "features", ".", "children", "(", ")", ")", "[", ":", "(", "feature_layer", "+", "1", ")", "]", ")", "\n", "# No need to BP to variable", "\n", "for", "k", ",", "v", "in", "self", ".", "features", ".", "named_parameters", "(", ")", ":", "\n", "            ", "v", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.VGGFeatureExtractor.forward": [[303, 308], ["architecture.VGGFeatureExtractor.features"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_input_norm", ":", "\n", "            ", "x", "=", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "", "output", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.ResNet101FeatureExtractor.__init__": [[312, 327], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torchvision.models.resnet101", "torch.Sequential", "torch.Sequential", "architecture.ResNet101FeatureExtractor.features.named_parameters", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "architecture.ResNet101FeatureExtractor.register_buffer", "architecture.ResNet101FeatureExtractor.register_buffer", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "list", "torchvision.models.resnet101.children", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_input_norm", "=", "True", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "super", "(", "ResNet101FeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model", "=", "torchvision", ".", "models", ".", "resnet101", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "use_input_norm", "=", "use_input_norm", "\n", "if", "self", ".", "use_input_norm", ":", "\n", "            ", "mean", "=", "torch", ".", "Tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "# [0.485-1, 0.456-1, 0.406-1] if input in range [-1,1]", "\n", "std", "=", "torch", ".", "Tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "# [0.229*2, 0.224*2, 0.225*2] if input in range [-1,1]", "\n", "self", ".", "register_buffer", "(", "'mean'", ",", "mean", ")", "\n", "self", ".", "register_buffer", "(", "'std'", ",", "std", ")", "\n", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "model", ".", "children", "(", ")", ")", "[", ":", "8", "]", ")", "\n", "# No need to BP to variable", "\n", "for", "k", ",", "v", "in", "self", ".", "features", ".", "named_parameters", "(", ")", ":", "\n", "            ", "v", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.ResNet101FeatureExtractor.forward": [[328, 333], ["architecture.ResNet101FeatureExtractor.features"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_input_norm", ":", "\n", "            ", "x", "=", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "", "output", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.MINCNet.__init__": [[336, 356], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MINCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ReLU", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv12", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "conv21", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv22", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "conv31", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv32", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv33", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "conv41", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv42", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv43", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "maxpool4", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "conv51", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv52", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv53", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.MINCNet.forward": [[357, 376], ["architecture.MINCNet.ReLU", "architecture.MINCNet.ReLU", "architecture.MINCNet.maxpool1", "architecture.MINCNet.ReLU", "architecture.MINCNet.ReLU", "architecture.MINCNet.maxpool2", "architecture.MINCNet.ReLU", "architecture.MINCNet.ReLU", "architecture.MINCNet.ReLU", "architecture.MINCNet.maxpool3", "architecture.MINCNet.ReLU", "architecture.MINCNet.ReLU", "architecture.MINCNet.ReLU", "architecture.MINCNet.maxpool4", "architecture.MINCNet.ReLU", "architecture.MINCNet.ReLU", "architecture.MINCNet.conv53", "architecture.MINCNet.conv11", "architecture.MINCNet.conv12", "architecture.MINCNet.conv21", "architecture.MINCNet.conv22", "architecture.MINCNet.conv31", "architecture.MINCNet.conv32", "architecture.MINCNet.conv33", "architecture.MINCNet.conv41", "architecture.MINCNet.conv42", "architecture.MINCNet.conv43", "architecture.MINCNet.conv51", "architecture.MINCNet.conv52"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "ReLU", "(", "self", ".", "conv11", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "ReLU", "(", "self", ".", "conv12", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "maxpool1", "(", "out", ")", "\n", "out", "=", "self", ".", "ReLU", "(", "self", ".", "conv21", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "ReLU", "(", "self", ".", "conv22", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "maxpool2", "(", "out", ")", "\n", "out", "=", "self", ".", "ReLU", "(", "self", ".", "conv31", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "ReLU", "(", "self", ".", "conv32", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "ReLU", "(", "self", ".", "conv33", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "maxpool3", "(", "out", ")", "\n", "out", "=", "self", ".", "ReLU", "(", "self", ".", "conv41", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "ReLU", "(", "self", ".", "conv42", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "ReLU", "(", "self", ".", "conv43", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "maxpool4", "(", "out", ")", "\n", "out", "=", "self", ".", "ReLU", "(", "self", ".", "conv51", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "ReLU", "(", "self", ".", "conv52", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "conv53", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.MINCFeatureExtractor.__init__": [[380, 391], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "architecture.MINCNet", "architecture.MINCFeatureExtractor.features.load_state_dict", "architecture.MINCFeatureExtractor.features.eval", "architecture.MINCFeatureExtractor.features.named_parameters", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load"], ["    ", "def", "__init__", "(", "self", ",", "feature_layer", "=", "34", ",", "use_bn", "=", "False", ",", "use_input_norm", "=", "True", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "super", "(", "MINCFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "features", "=", "MINCNet", "(", ")", "\n", "self", ".", "features", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "'../experiments/pretrained_models/VGG16minc_53.pth'", ")", ",", "strict", "=", "True", ")", "\n", "self", ".", "features", ".", "eval", "(", ")", "\n", "# No need to BP to variable", "\n", "for", "k", ",", "v", "in", "self", ".", "features", ".", "named_parameters", "(", ")", ":", "\n", "            ", "v", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.architecture.MINCFeatureExtractor.forward": [[392, 395], ["architecture.MINCFeatureExtractor.features"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.ConcatBlock.__init__": [[63, 66], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ",", "submodule", ")", ":", "\n", "        ", "super", "(", "ConcatBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sub", "=", "submodule", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.ConcatBlock.forward": [[67, 70], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "block.ConcatBlock.sub"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "torch", ".", "cat", "(", "(", "x", ",", "self", ".", "sub", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.ConcatBlock.__repr__": [[71, 76], ["block.ConcatBlock.sub.__repr__().replace", "block.ConcatBlock.sub.__repr__"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ShortcutBlock.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "'Identity .. \\n|'", "\n", "modstr", "=", "self", ".", "sub", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n|'", ")", "\n", "tmpstr", "=", "tmpstr", "+", "modstr", "\n", "return", "tmpstr", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.ShortcutBlock.__init__": [[80, 83], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ",", "submodule", ")", ":", "\n", "        ", "super", "(", "ShortcutBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sub", "=", "submodule", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.ShortcutBlock.forward": [[84, 87], ["block.ShortcutBlock.sub"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "x", "+", "self", ".", "sub", "(", "x", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.ShortcutBlock.__repr__": [[88, 93], ["block.ShortcutBlock.sub.__repr__().replace", "block.ShortcutBlock.sub.__repr__"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ShortcutBlock.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "'Identity + \\n|'", "\n", "modstr", "=", "self", ".", "sub", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n|'", ")", "\n", "tmpstr", "=", "tmpstr", "+", "modstr", "\n", "return", "tmpstr", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.GaussianNoise.__init__": [[111, 116], ["torch.Module.__init__", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sigma", "=", "0.1", ",", "is_relative_detach", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "is_relative_detach", "=", "is_relative_detach", "\n", "self", ".", "noise", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.GaussianNoise.forward": [[117, 123], ["block.GaussianNoise.noise.repeat().normal_", "x.detach", "block.GaussianNoise.noise.repeat", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", "and", "self", ".", "sigma", "!=", "0", ":", "\n", "            ", "scale", "=", "self", ".", "sigma", "*", "x", ".", "detach", "(", ")", "if", "self", ".", "is_relative_detach", "else", "self", ".", "sigma", "*", "x", "\n", "sampled_noise", "=", "self", ".", "noise", ".", "repeat", "(", "*", "x", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "*", "scale", "\n", "x", "=", "x", "+", "sampled_noise", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.minibatch_std_concat_layer.__init__": [[159, 167], ["torch.Module.__init__", "averaging.lower", "int", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ",", "averaging", "=", "'all'", ")", ":", "\n", "        ", "super", "(", "minibatch_std_concat_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "averaging", "=", "averaging", ".", "lower", "(", ")", "\n", "if", "'group'", "in", "self", ".", "averaging", ":", "\n", "            ", "self", ".", "n", "=", "int", "(", "self", ".", "averaging", "[", "5", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "averaging", "in", "[", "'all'", ",", "'flat'", ",", "'spatial'", ",", "'none'", ",", "'gpool'", "]", ",", "'Invalid averaging mode'", "%", "self", ".", "averaging", "\n", "", "self", ".", "adjusted_std", "=", "lambda", "x", ",", "**", "kwargs", ":", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "(", "x", "-", "torch", ".", "mean", "(", "x", ",", "**", "kwargs", ")", ")", "**", "2", ",", "**", "kwargs", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.minibatch_std_concat_layer.forward": [[168, 192], ["list", "copy.deepcopy", "block.minibatch_std_concat_layer.adjusted_std", "mean().view.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "mean", "len", "mean", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "mean().view.view", "mean().view", "block.minibatch_std_concat_layer.adjusted_std", "mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shape", "=", "list", "(", "x", ".", "size", "(", ")", ")", "\n", "target_shape", "=", "copy", ".", "deepcopy", "(", "shape", ")", "\n", "vals", "=", "self", ".", "adjusted_std", "(", "x", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "if", "self", ".", "averaging", "==", "'all'", ":", "\n", "            ", "target_shape", "[", "1", "]", "=", "1", "\n", "vals", "=", "torch", ".", "mean", "(", "vals", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "self", ".", "averaging", "==", "'spatial'", ":", "\n", "            ", "if", "len", "(", "shape", ")", "==", "4", ":", "\n", "                ", "vals", "=", "mean", "(", "vals", ",", "axis", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "# torch.mean(torch.mean(vals, 2, keepdim=True), 3, keepdim=True)", "\n", "", "", "elif", "self", ".", "averaging", "==", "'none'", ":", "\n", "            ", "target_shape", "=", "[", "target_shape", "[", "0", "]", "]", "+", "[", "s", "for", "s", "in", "target_shape", "[", "1", ":", "]", "]", "\n", "", "elif", "self", ".", "averaging", "==", "'gpool'", ":", "\n", "            ", "if", "len", "(", "shape", ")", "==", "4", ":", "\n", "                ", "vals", "=", "mean", "(", "x", ",", "[", "0", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "# torch.mean(torch.mean(torch.mean(x, 2, keepdim=True), 3, keepdim=True), 0, keepdim=True)", "\n", "", "", "elif", "self", ".", "averaging", "==", "'flat'", ":", "\n", "            ", "target_shape", "[", "1", "]", "=", "1", "\n", "vals", "=", "torch", ".", "FloatTensor", "(", "[", "self", ".", "adjusted_std", "(", "x", ")", "]", ")", "\n", "", "else", ":", "# self.averaging == 'group'", "\n", "            ", "target_shape", "[", "1", "]", "=", "self", ".", "n", "\n", "vals", "=", "vals", ".", "view", "(", "self", ".", "n", ",", "self", ".", "shape", "[", "1", "]", "/", "self", ".", "n", ",", "self", ".", "shape", "[", "2", "]", ",", "self", ".", "shape", "[", "3", "]", ")", "\n", "vals", "=", "mean", "(", "vals", ",", "axis", "=", "0", ",", "keepdim", "=", "True", ")", ".", "view", "(", "1", ",", "self", ".", "n", ",", "1", ",", "1", ")", "\n", "", "vals", "=", "vals", ".", "expand", "(", "*", "target_shape", ")", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "vals", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.ResNetBlock.__init__": [[206, 226], ["torch.Module.__init__", "block.conv_block", "block.conv_block", "block.sequential"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential"], ["def", "__init__", "(", "self", ",", "in_nc", ",", "mid_nc", ",", "out_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "pad_type", "=", "'zero'", ",", "norm_type", "=", "None", ",", "act_type", "=", "'relu'", ",", "mode", "=", "'CNA'", ",", "res_scale", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResNetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "conv0", "=", "conv_block", "(", "in_nc", ",", "mid_nc", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "bias", ",", "pad_type", ",", "norm_type", ",", "act_type", ",", "mode", ")", "\n", "if", "mode", "==", "'CNA'", ":", "\n", "            ", "act_type", "=", "None", "\n", "", "if", "mode", "==", "'CNAC'", ":", "# Residual path: |-CNAC-|", "\n", "            ", "act_type", "=", "None", "\n", "norm_type", "=", "None", "\n", "", "conv1", "=", "conv_block", "(", "mid_nc", ",", "out_nc", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "bias", ",", "pad_type", ",", "norm_type", ",", "act_type", ",", "mode", ")", "\n", "# if in_nc != out_nc:", "\n", "#     self.project = conv_block(in_nc, out_nc, 1, stride, dilation, 1, bias, pad_type, \\", "\n", "#         None, None)", "\n", "#     print('Need a projecter in ResNetBlock.')", "\n", "# else:", "\n", "#     self.project = lambda x:x", "\n", "self", ".", "res", "=", "sequential", "(", "conv0", ",", "conv1", ")", "\n", "self", ".", "res_scale", "=", "res_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.ResNetBlock.forward": [[227, 230], ["block.ResNetBlock.res().mul", "block.ResNetBlock.res"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "res", "(", "x", ")", ".", "mul", "(", "self", ".", "res_scale", ")", "\n", "return", "x", "+", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.ResidualDenseBlock_5C.__init__": [[239, 259], ["torch.Module.__init__", "block.conv1x1", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.GaussianNoise"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv1x1", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block"], ["def", "__init__", "(", "self", ",", "nc", ",", "kernel_size", "=", "3", ",", "gc", "=", "32", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad_type", "=", "'zero'", ",", "norm_type", "=", "None", ",", "act_type", "=", "'leakyrelu'", ",", "mode", "=", "'CNA'", ",", "gaussian_noise", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResidualDenseBlock_5C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel, i.e. intermediate channels", "\n", "self", ".", "noise", "=", "GaussianNoise", "(", ")", "if", "gaussian_noise", "else", "None", "\n", "self", ".", "conv1x1", "=", "conv1x1", "(", "nc", ",", "gc", ")", "\n", "self", ".", "conv1", "=", "conv_block", "(", "nc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "bias", "=", "bias", ",", "pad_type", "=", "pad_type", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "self", ".", "conv2", "=", "conv_block", "(", "nc", "+", "gc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "bias", "=", "bias", ",", "pad_type", "=", "pad_type", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "self", ".", "conv3", "=", "conv_block", "(", "nc", "+", "2", "*", "gc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "bias", "=", "bias", ",", "pad_type", "=", "pad_type", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "self", ".", "conv4", "=", "conv_block", "(", "nc", "+", "3", "*", "gc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "bias", "=", "bias", ",", "pad_type", "=", "pad_type", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "if", "mode", "==", "'CNA'", ":", "\n", "            ", "last_act", "=", "None", "\n", "", "else", ":", "\n", "            ", "last_act", "=", "act_type", "\n", "", "self", ".", "conv5", "=", "conv_block", "(", "nc", "+", "4", "*", "gc", ",", "nc", ",", "3", ",", "stride", ",", "bias", "=", "bias", ",", "pad_type", "=", "pad_type", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "last_act", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.ResidualDenseBlock_5C.forward": [[260, 269], ["block.ResidualDenseBlock_5C.conv1", "block.ResidualDenseBlock_5C.conv2", "block.ResidualDenseBlock_5C.conv3", "block.ResidualDenseBlock_5C.conv4", "block.ResidualDenseBlock_5C.conv5", "block.ResidualDenseBlock_5C.noise", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "block.ResidualDenseBlock_5C.conv1x1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "block.ResidualDenseBlock_5C.mul"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv1x1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x2", "=", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ")", ",", "1", ")", ")", "\n", "x2", "=", "x2", "+", "self", ".", "conv1x1", "(", "x", ")", "\n", "x3", "=", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ")", ",", "1", ")", ")", "\n", "x4", "=", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", ")", "\n", "x4", "=", "x4", "+", "x2", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", ")", "\n", "return", "self", ".", "noise", "(", "x5", ".", "mul", "(", "0.2", ")", "+", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.RRDB.__init__": [[277, 286], ["torch.Module.__init__", "block.ResidualDenseBlock_5C", "block.ResidualDenseBlock_5C", "block.ResidualDenseBlock_5C"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["def", "__init__", "(", "self", ",", "nc", ",", "kernel_size", "=", "3", ",", "gc", "=", "32", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad_type", "=", "'zero'", ",", "norm_type", "=", "None", ",", "act_type", "=", "'leakyrelu'", ",", "mode", "=", "'CNA'", ")", ":", "\n", "        ", "super", "(", "RRDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RDB1", "=", "ResidualDenseBlock_5C", "(", "nc", ",", "kernel_size", ",", "gc", ",", "stride", ",", "bias", ",", "pad_type", ",", "norm_type", ",", "act_type", ",", "mode", ")", "\n", "self", ".", "RDB2", "=", "ResidualDenseBlock_5C", "(", "nc", ",", "kernel_size", ",", "gc", ",", "stride", ",", "bias", ",", "pad_type", ",", "norm_type", ",", "act_type", ",", "mode", ")", "\n", "self", ".", "RDB3", "=", "ResidualDenseBlock_5C", "(", "nc", ",", "kernel_size", ",", "gc", ",", "stride", ",", "bias", ",", "pad_type", ",", "norm_type", ",", "act_type", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.RRDB.forward": [[287, 292], ["block.RRDB.RDB1", "block.RRDB.RDB2", "block.RRDB.RDB3", "block.RRDB.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "RDB1", "(", "x", ")", "\n", "out", "=", "self", ".", "RDB2", "(", "out", ")", "\n", "out", "=", "self", ".", "RDB3", "(", "out", ")", "\n", "return", "out", ".", "mul", "(", "0.2", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.act": [[12, 26], ["act_type.lower.lower", "torch.ReLU", "torch.LeakyReLU", "torch.PReLU", "NotImplementedError"], "function", ["None"], ["def", "act", "(", "act_type", ",", "inplace", "=", "True", ",", "neg_slope", "=", "0.2", ",", "n_prelu", "=", "1", ")", ":", "\n", "# helper selecting activation", "\n", "# neg_slope: for leakyrelu and init of prelu", "\n", "# n_prelu: for p_relu num_parameters", "\n", "    ", "act_type", "=", "act_type", ".", "lower", "(", ")", "\n", "if", "act_type", "==", "'relu'", ":", "\n", "        ", "layer", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "", "elif", "act_type", "==", "'leakyrelu'", ":", "\n", "        ", "layer", "=", "nn", ".", "LeakyReLU", "(", "neg_slope", ",", "inplace", ")", "\n", "", "elif", "act_type", "==", "'prelu'", ":", "\n", "        ", "layer", "=", "nn", ".", "PReLU", "(", "num_parameters", "=", "n_prelu", ",", "init", "=", "neg_slope", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'activation layer [{:s}] is not found'", ".", "format", "(", "act_type", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.norm": [[28, 38], ["norm_type.lower.lower", "torch.BatchNorm2d", "torch.InstanceNorm2d", "NotImplementedError"], "function", ["None"], ["", "def", "norm", "(", "norm_type", ",", "nc", ")", ":", "\n", "# helper selecting normalization layer", "\n", "    ", "norm_type", "=", "norm_type", ".", "lower", "(", ")", "\n", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "layer", "=", "nn", ".", "BatchNorm2d", "(", "nc", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "layer", "=", "nn", ".", "InstanceNorm2d", "(", "nc", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [{:s}] is not found'", ".", "format", "(", "norm_type", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.pad": [[40, 53], ["pad_type.lower.lower", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "function", ["None"], ["", "def", "pad", "(", "pad_type", ",", "padding", ")", ":", "\n", "# helper selecting padding layer", "\n", "# if padding is 'zero', do by conv layers", "\n", "    ", "pad_type", "=", "pad_type", ".", "lower", "(", ")", "\n", "if", "padding", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "if", "pad_type", "==", "'reflect'", ":", "\n", "        ", "layer", "=", "nn", ".", "ReflectionPad2d", "(", "padding", ")", "\n", "", "elif", "pad_type", "==", "'replicate'", ":", "\n", "        ", "layer", "=", "nn", ".", "ReplicationPad2d", "(", "padding", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'padding layer [{:s}] is not implemented'", ".", "format", "(", "pad_type", ")", ")", "\n", "", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.get_valid_padding": [[55, 59], ["None"], "function", ["None"], ["", "def", "get_valid_padding", "(", "kernel_size", ",", "dilation", ")", ":", "\n", "    ", "kernel_size", "=", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "dilation", "-", "1", ")", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.sequential": [[95, 109], ["torch.Sequential", "len", "isinstance", "isinstance", "NotImplementedError", "module.children", "isinstance", "modules.append", "modules.append"], "function", ["None"], ["", "", "def", "sequential", "(", "*", "args", ")", ":", "\n", "# Flatten Sequential. It unwraps nn.Sequential.", "\n", "    ", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "        ", "if", "isinstance", "(", "args", "[", "0", "]", ",", "OrderedDict", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'sequential does not support OrderedDict input.'", ")", "\n", "", "return", "args", "[", "0", "]", "# No sequential is needed.", "\n", "", "modules", "=", "[", "]", "\n", "for", "module", "in", "args", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "for", "submodule", "in", "module", ".", "children", "(", ")", ":", "\n", "                ", "modules", ".", "append", "(", "submodule", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "modules", ".", "append", "(", "module", ")", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.conv_block": [[125, 152], ["block.get_valid_padding", "torch.Conv2d", "block.pad", "block.act", "block.sequential", "block.norm", "block.sequential", "block.act", "block.norm"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.get_valid_padding", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.pad", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.act", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.act", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.norm"], ["", "", "def", "conv_block", "(", "in_nc", ",", "out_nc", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "pad_type", "=", "'zero'", ",", "norm_type", "=", "None", ",", "act_type", "=", "'relu'", ",", "mode", "=", "'CNA'", ")", ":", "\n", "    ", "'''\n    Conv layer with padding, normalization, activation\n    mode: CNA --> Conv -> Norm -> Act\n        NAC --> Norm -> Act --> Conv (Identity Mappings in Deep Residual Networks, ECCV16)\n    '''", "\n", "assert", "mode", "in", "[", "'CNA'", ",", "'NAC'", ",", "'CNAC'", "]", ",", "'Wong conv mode [{:s}]'", ".", "format", "(", "mode", ")", "\n", "padding", "=", "get_valid_padding", "(", "kernel_size", ",", "dilation", ")", "\n", "p", "=", "pad", "(", "pad_type", ",", "padding", ")", "if", "pad_type", "and", "pad_type", "!=", "'zero'", "else", "None", "\n", "padding", "=", "padding", "if", "pad_type", "==", "'zero'", "else", "0", "\n", "\n", "c", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "out_nc", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ",", "groups", "=", "groups", ")", "\n", "a", "=", "act", "(", "act_type", ")", "if", "act_type", "else", "None", "\n", "if", "'CNA'", "in", "mode", ":", "\n", "        ", "n", "=", "norm", "(", "norm_type", ",", "out_nc", ")", "if", "norm_type", "else", "None", "\n", "return", "sequential", "(", "p", ",", "c", ",", "n", ",", "a", ")", "\n", "", "elif", "mode", "==", "'NAC'", ":", "\n", "        ", "if", "norm_type", "is", "None", "and", "act_type", "is", "not", "None", ":", "\n", "            ", "a", "=", "act", "(", "act_type", ",", "inplace", "=", "False", ")", "\n", "# Important!", "\n", "# input----ReLU(inplace)----Conv--+----output", "\n", "#        |________________________|", "\n", "# inplace ReLU will modify the input, therefore wrong output", "\n", "", "n", "=", "norm", "(", "norm_type", ",", "in_nc", ")", "if", "norm_type", "else", "None", "\n", "return", "sequential", "(", "n", ",", "a", ",", "p", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.conv1x1": [[153, 155], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.pixelshuffle_block": [[299, 313], ["block.conv_block", "torch.PixelShuffle", "block.sequential", "block.norm", "block.act"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.act"], ["", "", "def", "pixelshuffle_block", "(", "in_nc", ",", "out_nc", ",", "upscale_factor", "=", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad_type", "=", "'zero'", ",", "norm_type", "=", "None", ",", "act_type", "=", "'relu'", ")", ":", "\n", "    ", "'''\n    Pixel shuffle layer\n    (Real-Time Single Image and Video Super-Resolution Using an Efficient Sub-Pixel Convolutional\n    Neural Network, CVPR17)\n    '''", "\n", "conv", "=", "conv_block", "(", "in_nc", ",", "out_nc", "*", "(", "upscale_factor", "**", "2", ")", ",", "kernel_size", ",", "stride", ",", "bias", "=", "bias", ",", "pad_type", "=", "pad_type", ",", "norm_type", "=", "None", ",", "act_type", "=", "None", ")", "\n", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "upscale_factor", ")", "\n", "\n", "n", "=", "norm", "(", "norm_type", ",", "out_nc", ")", "if", "norm_type", "else", "None", "\n", "a", "=", "act", "(", "act_type", ")", "if", "act_type", "else", "None", "\n", "return", "sequential", "(", "conv", ",", "pixel_shuffle", ",", "n", ",", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.block.upconv_blcok": [[315, 323], ["torch.Upsample", "block.conv_block", "block.sequential"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential"], ["", "def", "upconv_blcok", "(", "in_nc", ",", "out_nc", ",", "upscale_factor", "=", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad_type", "=", "'zero'", ",", "norm_type", "=", "None", ",", "act_type", "=", "'relu'", ",", "mode", "=", "'nearest'", ")", ":", "\n", "# Up conv", "\n", "# described in https://distill.pub/2016/deconv-checkerboard/", "\n", "    ", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "upscale_factor", ",", "mode", "=", "mode", ")", "\n", "conv", "=", "conv_block", "(", "in_nc", ",", "out_nc", ",", "kernel_size", ",", "stride", ",", "bias", "=", "bias", ",", "pad_type", "=", "pad_type", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ")", "\n", "return", "sequential", "(", "upsample", ",", "conv", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.loss.GANLoss.__init__": [[7, 26], ["torch.Module.__init__", "gan_type.lower", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.MSELoss", "torch.MSELoss", "NotImplementedError", "input.mean", "input.mean"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gan_type", ",", "real_label_val", "=", "1.0", ",", "fake_label_val", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gan_type", "=", "gan_type", ".", "lower", "(", ")", "\n", "self", ".", "real_label_val", "=", "real_label_val", "\n", "self", ".", "fake_label_val", "=", "fake_label_val", "\n", "\n", "if", "self", ".", "gan_type", "==", "'vanilla'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "elif", "self", ".", "gan_type", "==", "'lsgan'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "gan_type", "==", "'wgan-gp'", ":", "\n", "\n", "            ", "def", "wgan_loss", "(", "input", ",", "target", ")", ":", "\n", "# target is boolean", "\n", "                ", "return", "-", "1", "*", "input", ".", "mean", "(", ")", "if", "target", "else", "input", ".", "mean", "(", ")", "\n", "\n", "", "self", ".", "loss", "=", "wgan_loss", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'GAN type [{:s}] is not found'", ".", "format", "(", "self", ".", "gan_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.loss.GANLoss.get_target_label": [[27, 34], ["torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like().fill_", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like"], "methods", ["None"], ["", "", "def", "get_target_label", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "self", ".", "gan_type", "==", "'wgan-gp'", ":", "\n", "            ", "return", "target_is_real", "\n", "", "if", "target_is_real", ":", "\n", "            ", "return", "torch", ".", "empty_like", "(", "input", ")", ".", "fill_", "(", "self", ".", "real_label_val", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "empty_like", "(", "input", ")", ".", "fill_", "(", "self", ".", "fake_label_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.loss.GANLoss.forward": [[35, 39], ["loss.GANLoss.GANLoss.get_target_label", "loss.GANLoss.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.loss.GANLoss.get_target_label"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_label", "=", "self", ".", "get_target_label", "(", "input", ",", "target_is_real", ")", "\n", "loss", "=", "self", ".", "loss", "(", "input", ",", "target_label", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.loss.GradientPenaltyLoss.__init__": [[42, 46], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "loss.GradientPenaltyLoss.register_buffer", "loss.GradientPenaltyLoss.grad_outputs.to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["    ", "def", "__init__", "(", "self", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "super", "(", "GradientPenaltyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'grad_outputs'", ",", "torch", ".", "Tensor", "(", ")", ")", "\n", "self", ".", "grad_outputs", "=", "self", ".", "grad_outputs", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.loss.GradientPenaltyLoss.get_grad_outputs": [[47, 51], ["loss.GradientPenaltyLoss.grad_outputs.size", "input.size", "loss.GradientPenaltyLoss.grad_outputs.resize_().fill_", "loss.GradientPenaltyLoss.grad_outputs.resize_", "input.size"], "methods", ["None"], ["", "def", "get_grad_outputs", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "grad_outputs", ".", "size", "(", ")", "!=", "input", ".", "size", "(", ")", ":", "\n", "            ", "self", ".", "grad_outputs", ".", "resize_", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "1.0", ")", "\n", "", "return", "self", ".", "grad_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.loss.GradientPenaltyLoss.forward": [[52, 61], ["loss.GradientPenaltyLoss.get_grad_outputs", "grad_interp.view.view.view", "grad_interp.view.view.norm", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grad_interp.view.view.size"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.modules.loss.GradientPenaltyLoss.get_grad_outputs", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.norm"], ["", "def", "forward", "(", "self", ",", "interp", ",", "interp_crit", ")", ":", "\n", "        ", "grad_outputs", "=", "self", ".", "get_grad_outputs", "(", "interp_crit", ")", "\n", "grad_interp", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "interp_crit", ",", "inputs", "=", "interp", ",", "grad_outputs", "=", "grad_outputs", ",", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "grad_interp", "=", "grad_interp", ".", "view", "(", "grad_interp", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "grad_interp_norm", "=", "grad_interp", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "\n", "\n", "loss", "=", "(", "(", "grad_interp_norm", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.LR_dataset.LRDataset.__init__": [[10, 19], ["torch.Dataset.__init__", "torch.get_image_paths"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.get_image_paths"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "LRDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "paths_LR", "=", "None", "\n", "self", ".", "LR_env", "=", "None", "# environment for lmdb", "\n", "\n", "# read image list from lmdb or image files", "\n", "self", ".", "LR_env", ",", "self", ".", "paths_LR", "=", "util", ".", "get_image_paths", "(", "opt", "[", "'data_type'", "]", ",", "opt", "[", "'dataroot_LR'", "]", ")", "\n", "assert", "self", ".", "paths_LR", ",", "'Error: LR paths are empty.'", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.LR_dataset.LRDataset.__getitem__": [[20, 38], ["torch.read_img", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.channel_convert", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.ascontiguousarray", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.read_img", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.channel_convert"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "LR_path", "=", "None", "\n", "\n", "# get LR image", "\n", "LR_path", "=", "self", ".", "paths_LR", "[", "index", "]", "\n", "img_LR", "=", "util", ".", "read_img", "(", "self", ".", "LR_env", ",", "LR_path", ")", "\n", "H", ",", "W", ",", "C", "=", "img_LR", ".", "shape", "\n", "\n", "# change color space if necessary", "\n", "if", "self", ".", "opt", "[", "'color'", "]", ":", "\n", "            ", "img_LR", "=", "util", ".", "channel_convert", "(", "C", ",", "self", ".", "opt", "[", "'color'", "]", ",", "[", "img_LR", "]", ")", "[", "0", "]", "\n", "\n", "# BGR to RGB, HWC to CHW, numpy to tensor", "\n", "", "if", "img_LR", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "img_LR", "=", "img_LR", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "img_LR", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_LR", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "\n", "return", "{", "'LR'", ":", "img_LR", ",", "'LR_path'", ":", "LR_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.LR_dataset.LRDataset.__len__": [[39, 41], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_LR", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.LRHR_seg_bg_dataset.LRHRSeg_BG_Dataset.__init__": [[17, 41], ["torch.Dataset.__init__", "torch.get_image_paths", "torch.get_image_paths", "torch.get_image_paths", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.get_image_paths", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.get_image_paths", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.get_image_paths"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "LRHRSeg_BG_Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "paths_LR", "=", "None", "\n", "self", ".", "paths_HR", "=", "None", "\n", "self", ".", "paths_HR_bg", "=", "None", "# HR images for background scenes", "\n", "self", ".", "LR_env", "=", "None", "# environment for lmdb", "\n", "self", ".", "HR_env", "=", "None", "\n", "self", ".", "HR_env_bg", "=", "None", "\n", "\n", "# read image list from lmdb or image files", "\n", "self", ".", "HR_env", ",", "self", ".", "paths_HR", "=", "util", ".", "get_image_paths", "(", "opt", "[", "'data_type'", "]", ",", "opt", "[", "'dataroot_HR'", "]", ")", "\n", "self", ".", "LR_env", ",", "self", ".", "paths_LR", "=", "util", ".", "get_image_paths", "(", "opt", "[", "'data_type'", "]", ",", "opt", "[", "'dataroot_LR'", "]", ")", "\n", "self", ".", "HR_env_bg", ",", "self", ".", "paths_HR_bg", "=", "util", ".", "get_image_paths", "(", "opt", "[", "'data_type'", "]", ",", "opt", "[", "'dataroot_HR_bg'", "]", ")", "\n", "\n", "assert", "self", ".", "paths_HR", ",", "'Error: HR path is empty.'", "\n", "if", "self", ".", "paths_LR", "and", "self", ".", "paths_HR", ":", "\n", "            ", "assert", "len", "(", "self", ".", "paths_LR", ")", "==", "len", "(", "self", ".", "paths_HR", ")", ",", "'HR and LR datasets have different number of images - {}, {}.'", ".", "format", "(", "len", "(", "self", ".", "paths_LR", ")", ",", "len", "(", "self", ".", "paths_HR", ")", ")", "\n", "\n", "", "self", ".", "random_scale_list", "=", "[", "1", ",", "0.9", ",", "0.8", ",", "0.7", ",", "0.6", ",", "0.5", "]", "\n", "self", ".", "ratio", "=", "10", "# 10 OST data samples and 1 DIV2K general data samples(background)", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.LRHR_seg_bg_dataset.LRHRSeg_BG_Dataset.__getitem__": [[42, 146], ["numpy.transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "random.randint", "torch.read_img", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.read_img", "torch.load", "torch.load", "torch.load", "torch.load", "torch.modcrop", "cv2.resize.numpy", "torch.read_img", "torch.imresize_np", "random.randint", "random.randint", "torch.augment", "random.choice", "HR_path.replace().replace", "random.choice", "LRHR_seg_bg_dataset.LRHRSeg_BG_Dataset.__getitem__._mod"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.read_img", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.read_img", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.modcrop", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.read_img", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.imresize_np", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.augment"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "HR_path", ",", "LR_path", "=", "None", ",", "None", "\n", "scale", "=", "self", ".", "opt", "[", "'scale'", "]", "\n", "HR_size", "=", "self", ".", "opt", "[", "'HR_size'", "]", "\n", "\n", "# get HR image", "\n", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", "and", "random", ".", "choice", "(", "list", "(", "range", "(", "self", ".", "ratio", ")", ")", ")", "==", "0", ":", "# read background images", "\n", "            ", "bg_index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "paths_HR_bg", ")", "-", "1", ")", "\n", "HR_path", "=", "self", ".", "paths_HR_bg", "[", "bg_index", "]", "\n", "img_HR", "=", "util", ".", "read_img", "(", "self", ".", "HR_env_bg", ",", "HR_path", ")", "\n", "seg", "=", "torch", ".", "FloatTensor", "(", "8", ",", "img_HR", ".", "shape", "[", "0", "]", ",", "img_HR", ".", "shape", "[", "1", "]", ")", ".", "fill_", "(", "0", ")", "\n", "seg", "[", "0", ",", ":", ",", ":", "]", "=", "1", "# background", "\n", "", "else", ":", "\n", "            ", "HR_path", "=", "self", ".", "paths_HR", "[", "index", "]", "\n", "img_HR", "=", "util", ".", "read_img", "(", "self", ".", "HR_env", ",", "HR_path", ")", "\n", "seg", "=", "torch", ".", "load", "(", "HR_path", ".", "replace", "(", "'/img/'", ",", "'/bicseg/'", ")", ".", "replace", "(", "'.png'", ",", "'.pth'", ")", ")", "\n", "# read segmentatin files, you should change it to your settings.", "\n", "\n", "# modcrop in the validation / test phase", "\n", "", "if", "self", ".", "opt", "[", "'phase'", "]", "!=", "'train'", ":", "\n", "            ", "img_HR", "=", "util", ".", "modcrop", "(", "img_HR", ",", "8", ")", "\n", "\n", "", "seg", "=", "np", ".", "transpose", "(", "seg", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "# get LR image", "\n", "if", "self", ".", "paths_LR", ":", "\n", "            ", "LR_path", "=", "self", ".", "paths_LR", "[", "index", "]", "\n", "img_LR", "=", "util", ".", "read_img", "(", "self", ".", "LR_env", ",", "LR_path", ")", "\n", "", "else", ":", "# down-sampling on-the-fly", "\n", "# randomly scale during training", "\n", "            ", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "                ", "random_scale", "=", "random", ".", "choice", "(", "self", ".", "random_scale_list", ")", "\n", "H_s", ",", "W_s", ",", "_", "=", "seg", ".", "shape", "\n", "\n", "def", "_mod", "(", "n", ",", "random_scale", ",", "scale", ",", "thres", ")", ":", "\n", "                    ", "rlt", "=", "int", "(", "n", "*", "random_scale", ")", "\n", "rlt", "=", "(", "rlt", "//", "scale", ")", "*", "scale", "\n", "return", "thres", "if", "rlt", "<", "thres", "else", "rlt", "\n", "\n", "", "H_s", "=", "_mod", "(", "H_s", ",", "random_scale", ",", "scale", ",", "HR_size", ")", "\n", "W_s", "=", "_mod", "(", "W_s", ",", "random_scale", ",", "scale", ",", "HR_size", ")", "\n", "img_HR", "=", "cv2", ".", "resize", "(", "np", ".", "copy", "(", "img_HR", ")", ",", "(", "W_s", ",", "H_s", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "seg", "=", "cv2", ".", "resize", "(", "np", ".", "copy", "(", "seg", ")", ",", "(", "W_s", ",", "H_s", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "", "H", ",", "W", ",", "_", "=", "img_HR", ".", "shape", "\n", "# using matlab imresize", "\n", "img_LR", "=", "util", ".", "imresize_np", "(", "img_HR", ",", "1", "/", "scale", ",", "True", ")", "\n", "if", "img_LR", ".", "ndim", "==", "2", ":", "\n", "                ", "img_LR", "=", "np", ".", "expand_dims", "(", "img_LR", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "H", ",", "W", ",", "C", "=", "img_LR", ".", "shape", "\n", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "            ", "LR_size", "=", "HR_size", "//", "scale", "\n", "\n", "# randomly crop", "\n", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "LR_size", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "LR_size", ")", ")", "\n", "img_LR", "=", "img_LR", "[", "rnd_h", ":", "rnd_h", "+", "LR_size", ",", "rnd_w", ":", "rnd_w", "+", "LR_size", ",", ":", "]", "\n", "rnd_h_HR", ",", "rnd_w_HR", "=", "int", "(", "rnd_h", "*", "scale", ")", ",", "int", "(", "rnd_w", "*", "scale", ")", "\n", "img_HR", "=", "img_HR", "[", "rnd_h_HR", ":", "rnd_h_HR", "+", "HR_size", ",", "rnd_w_HR", ":", "rnd_w_HR", "+", "HR_size", ",", ":", "]", "\n", "seg", "=", "seg", "[", "rnd_h_HR", ":", "rnd_h_HR", "+", "HR_size", ",", "rnd_w_HR", ":", "rnd_w_HR", "+", "HR_size", ",", ":", "]", "\n", "\n", "# augmentation - flip, rotate", "\n", "img_LR", ",", "img_HR", ",", "seg", "=", "util", ".", "augment", "(", "[", "img_LR", ",", "img_HR", ",", "seg", "]", ",", "self", ".", "opt", "[", "'use_flip'", "]", ",", "\n", "self", ".", "opt", "[", "'use_rot'", "]", ")", "\n", "\n", "# category", "\n", "if", "'building'", "in", "HR_path", ":", "\n", "                ", "category", "=", "1", "\n", "", "elif", "'plant'", "in", "HR_path", ":", "\n", "                ", "category", "=", "2", "\n", "", "elif", "'mountain'", "in", "HR_path", ":", "\n", "                ", "category", "=", "3", "\n", "", "elif", "'water'", "in", "HR_path", ":", "\n", "                ", "category", "=", "4", "\n", "", "elif", "'sky'", "in", "HR_path", ":", "\n", "                ", "category", "=", "5", "\n", "", "elif", "'grass'", "in", "HR_path", ":", "\n", "                ", "category", "=", "6", "\n", "", "elif", "'animal'", "in", "HR_path", ":", "\n", "                ", "category", "=", "7", "\n", "", "else", ":", "\n", "                ", "category", "=", "0", "# background", "\n", "", "", "else", ":", "\n", "            ", "category", "=", "-", "1", "# during val, useless", "\n", "\n", "# BGR to RGB, HWC to CHW, numpy to tensor", "\n", "", "if", "img_HR", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "img_HR", "=", "img_HR", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "img_LR", "=", "img_LR", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "img_HR", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_HR", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "img_LR", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_LR", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "seg", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "seg", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "\n", "if", "LR_path", "is", "None", ":", "\n", "            ", "LR_path", "=", "HR_path", "\n", "", "return", "{", "\n", "'LR'", ":", "img_LR", ",", "\n", "'HR'", ":", "img_HR", ",", "\n", "'seg'", ":", "seg", ",", "\n", "'category'", ":", "category", ",", "\n", "'LR_path'", ":", "LR_path", ",", "\n", "'HR_path'", ":", "HR_path", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.LRHR_seg_bg_dataset.LRHRSeg_BG_Dataset.__len__": [[148, 150], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_HR", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.LRHR_dataset.LRHRDataset.__init__": [[17, 43], ["torch.Dataset.__init__", "torch.get_image_paths", "torch.get_image_paths", "open", "sorted", "NotImplementedError", "len", "len", "len", "len", "os.path.join", "line.rstrip"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.get_image_paths", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.get_image_paths"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "LRHRDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "paths_LR", "=", "None", "\n", "self", ".", "paths_HR", "=", "None", "\n", "self", ".", "LR_env", "=", "None", "# environment for lmdb", "\n", "self", ".", "HR_env", "=", "None", "\n", "\n", "# read image list from subset list txt", "\n", "if", "opt", "[", "'subset_file'", "]", "is", "not", "None", "and", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "            ", "with", "open", "(", "opt", "[", "'subset_file'", "]", ")", "as", "f", ":", "\n", "                ", "self", ".", "paths_HR", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "opt", "[", "'dataroot_HR'", "]", ",", "line", ".", "rstrip", "(", "'\\n'", ")", ")", "for", "line", "in", "f", "]", ")", "\n", "", "if", "opt", "[", "'dataroot_LR'", "]", "is", "not", "None", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Now subset only supports generating LR on-the-fly.'", ")", "\n", "", "", "else", ":", "# read image list from lmdb or image files", "\n", "            ", "self", ".", "HR_env", ",", "self", ".", "paths_HR", "=", "util", ".", "get_image_paths", "(", "opt", "[", "'data_type'", "]", ",", "opt", "[", "'dataroot_HR'", "]", ")", "\n", "self", ".", "LR_env", ",", "self", ".", "paths_LR", "=", "util", ".", "get_image_paths", "(", "opt", "[", "'data_type'", "]", ",", "opt", "[", "'dataroot_LR'", "]", ")", "\n", "\n", "", "assert", "self", ".", "paths_HR", ",", "'Error: HR path is empty.'", "\n", "if", "self", ".", "paths_LR", "and", "self", ".", "paths_HR", ":", "\n", "            ", "assert", "len", "(", "self", ".", "paths_LR", ")", "==", "len", "(", "self", ".", "paths_HR", ")", ",", "'HR and LR datasets have different number of images - {}, {}.'", ".", "format", "(", "len", "(", "self", ".", "paths_LR", ")", ",", "len", "(", "self", ".", "paths_HR", ")", ")", "\n", "\n", "", "self", ".", "random_scale_list", "=", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.LRHR_dataset.LRHRDataset.__getitem__": [[44, 126], ["torch.read_img", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.modcrop", "torch.read_img", "torch.imresize_np", "random.randint", "random.randint", "torch.augment", "torch.channel_convert", "random.choice", "LRHR_dataset.LRHRDataset.__getitem__._mod"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.read_img", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.modcrop", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.read_img", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.imresize_np", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.augment", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.channel_convert"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "HR_path", ",", "LR_path", "=", "None", ",", "None", "\n", "scale", "=", "self", ".", "opt", "[", "'scale'", "]", "\n", "HR_size", "=", "self", ".", "opt", "[", "'HR_size'", "]", "\n", "\n", "# get HR image", "\n", "HR_path", "=", "self", ".", "paths_HR", "[", "index", "]", "\n", "img_HR", "=", "util", ".", "read_img", "(", "self", ".", "HR_env", ",", "HR_path", ")", "\n", "# modcrop in the validation / test phase", "\n", "if", "self", ".", "opt", "[", "'phase'", "]", "!=", "'train'", ":", "\n", "            ", "img_HR", "=", "util", ".", "modcrop", "(", "img_HR", ",", "scale", ")", "\n", "# change color space if necessary", "\n", "", "if", "self", ".", "opt", "[", "'color'", "]", ":", "\n", "            ", "img_HR", "=", "util", ".", "channel_convert", "(", "img_HR", ".", "shape", "[", "2", "]", ",", "self", ".", "opt", "[", "'color'", "]", ",", "[", "img_HR", "]", ")", "[", "0", "]", "\n", "\n", "# get LR image", "\n", "", "if", "self", ".", "paths_LR", ":", "\n", "            ", "LR_path", "=", "self", ".", "paths_LR", "[", "index", "]", "\n", "img_LR", "=", "util", ".", "read_img", "(", "self", ".", "LR_env", ",", "LR_path", ")", "\n", "", "else", ":", "# down-sampling on-the-fly", "\n", "# randomly scale during training", "\n", "            ", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "                ", "random_scale", "=", "random", ".", "choice", "(", "self", ".", "random_scale_list", ")", "\n", "H_s", ",", "W_s", ",", "_", "=", "img_HR", ".", "shape", "\n", "\n", "def", "_mod", "(", "n", ",", "random_scale", ",", "scale", ",", "thres", ")", ":", "\n", "                    ", "rlt", "=", "int", "(", "n", "*", "random_scale", ")", "\n", "rlt", "=", "(", "rlt", "//", "scale", ")", "*", "scale", "\n", "return", "thres", "if", "rlt", "<", "thres", "else", "rlt", "\n", "\n", "", "H_s", "=", "_mod", "(", "H_s", ",", "random_scale", ",", "scale", ",", "HR_size", ")", "\n", "W_s", "=", "_mod", "(", "W_s", ",", "random_scale", ",", "scale", ",", "HR_size", ")", "\n", "img_HR", "=", "cv2", ".", "resize", "(", "np", ".", "copy", "(", "img_HR", ")", ",", "(", "W_s", ",", "H_s", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "# force to 3 channels", "\n", "if", "img_HR", ".", "ndim", "==", "2", ":", "\n", "                    ", "img_HR", "=", "cv2", ".", "cvtColor", "(", "img_HR", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "\n", "\n", "", "", "H", ",", "W", ",", "_", "=", "img_HR", ".", "shape", "\n", "# using matlab imresize", "\n", "img_LR", "=", "util", ".", "imresize_np", "(", "img_HR", ",", "1", "/", "scale", ",", "True", ")", "\n", "if", "img_LR", ".", "ndim", "==", "2", ":", "\n", "                ", "img_LR", "=", "np", ".", "expand_dims", "(", "img_LR", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "# if the image size is too small", "\n", "            ", "H", ",", "W", ",", "_", "=", "img_HR", ".", "shape", "\n", "if", "H", "<", "HR_size", "or", "W", "<", "HR_size", ":", "\n", "                ", "img_HR", "=", "cv2", ".", "resize", "(", "\n", "np", ".", "copy", "(", "img_HR", ")", ",", "(", "HR_size", ",", "HR_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "# using matlab imresize", "\n", "img_LR", "=", "util", ".", "imresize_np", "(", "img_HR", ",", "1", "/", "scale", ",", "True", ")", "\n", "if", "img_LR", ".", "ndim", "==", "2", ":", "\n", "                    ", "img_LR", "=", "np", ".", "expand_dims", "(", "img_LR", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "H", ",", "W", ",", "C", "=", "img_LR", ".", "shape", "\n", "LR_size", "=", "HR_size", "//", "scale", "\n", "\n", "# randomly crop", "\n", "rnd_h", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "H", "-", "LR_size", ")", ")", "\n", "rnd_w", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "W", "-", "LR_size", ")", ")", "\n", "img_LR", "=", "img_LR", "[", "rnd_h", ":", "rnd_h", "+", "LR_size", ",", "rnd_w", ":", "rnd_w", "+", "LR_size", ",", ":", "]", "\n", "rnd_h_HR", ",", "rnd_w_HR", "=", "int", "(", "rnd_h", "*", "scale", ")", ",", "int", "(", "rnd_w", "*", "scale", ")", "\n", "img_HR", "=", "img_HR", "[", "rnd_h_HR", ":", "rnd_h_HR", "+", "HR_size", ",", "rnd_w_HR", ":", "rnd_w_HR", "+", "HR_size", ",", ":", "]", "\n", "\n", "# augmentation - flip, rotate", "\n", "img_LR", ",", "img_HR", "=", "util", ".", "augment", "(", "[", "img_LR", ",", "img_HR", "]", ",", "self", ".", "opt", "[", "'use_flip'", "]", ",", "self", ".", "opt", "[", "'use_rot'", "]", ")", "\n", "\n", "# change color space if necessary", "\n", "", "if", "self", ".", "opt", "[", "'color'", "]", ":", "\n", "            ", "img_LR", "=", "util", ".", "channel_convert", "(", "C", ",", "self", ".", "opt", "[", "'color'", "]", ",", "[", "img_LR", "]", ")", "[", "0", "]", "# TODO during val no definetion", "\n", "\n", "# BGR to RGB, HWC to CHW, numpy to tensor", "\n", "", "if", "img_HR", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "img_HR", "=", "img_HR", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "img_LR", "=", "img_LR", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "img_HR", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_HR", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "img_LR", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "np", ".", "transpose", "(", "img_LR", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ")", ".", "float", "(", ")", "\n", "\n", "if", "LR_path", "is", "None", ":", "\n", "            ", "LR_path", "=", "HR_path", "\n", "", "return", "{", "'LR'", ":", "img_LR", ",", "'HR'", ":", "img_HR", ",", "'LR_path'", ":", "LR_path", ",", "'HR_path'", ":", "HR_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.LRHR_dataset.LRHRDataset.__len__": [[127, 129], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths_HR", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.__init__.create_dataloader": [[6, 20], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["    ", "model", "=", "opt", "[", "'model'", "]", "\n", "\n", "if", "model", "==", "'sr'", ":", "\n", "        ", "from", ".", "SR_model", "import", "SRModel", "as", "M", "\n", "", "elif", "model", "==", "'srgan'", ":", "\n", "        ", "from", ".", "SRGAN_model", "import", "SRGANModel", "as", "M", "\n", "", "elif", "model", "==", "'srragan'", ":", "\n", "        ", "from", ".", "SRRaGAN_model", "import", "SRRaGANModel", "as", "M", "\n", "", "elif", "model", "==", "'sftgan'", ":", "\n", "        ", "from", ".", "SFTGAN_ACD_model", "import", "SFTGAN_ACD_Model", "as", "M", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Model [{:s}] not recognized.'", ".", "format", "(", "model", ")", ")", "\n", "", "m", "=", "M", "(", "opt", ")", "\n", "logger", ".", "info", "(", "'Model [{:s}] is created.'", ".", "format", "(", "m", ".", "__class__", ".", "__name__", ")", ")", "\n", "return", "m", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.__init__.create_dataset": [[22, 38], ["D", "logging.getLogger", "logging.getLogger.info", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.is_image_file": [[18, 20], ["any", "filename.endswith"], "function", ["None"], ["\n", "\n", "", "def", "mkdir", "(", "path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util._get_paths_from_images": [[22, 32], ["os.path.isdir", "sorted", "os.walk", "sorted", "util.is_image_file", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.is_image_file"], ["        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "\n", "", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "", "else", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util._get_paths_from_lmdb": [[34, 48], ["lmdb.open", "os.path.join", "logging.getLogger", "os.path.isfile", "sorted", "logging.getLogger.info", "pickle.load", "pickle.dump", "open", "lmdb.open.begin", "logging.getLogger.info", "open", "key.decode", "txn.cursor", "key.endswith"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.models.SFTGAN_ACD_model.SFTGAN_ACD_Model.load"], ["    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "new_name", "=", "path", "+", "'_archived_'", "+", "get_timestamp", "(", ")", "\n", "print", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "logger", ".", "info", "(", "'Path already exists. Rename it to [{:s}]'", ".", "format", "(", "new_name", ")", ")", "\n", "os", ".", "rename", "(", "path", ",", "new_name", ")", "\n", "", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "\n", "", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.get_image_paths": [[50, 60], ["util._get_paths_from_lmdb", "sorted", "NotImplementedError", "util._get_paths_from_images"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util._get_paths_from_lmdb", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util._get_paths_from_images"], ["", "def", "setup_logger", "(", "logger_name", ",", "root", ",", "phase", ",", "level", "=", "logging", ".", "INFO", ",", "screen", "=", "False", ")", ":", "\n", "    ", "'''set up logger'''", "\n", "l", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'%(asctime)s.%(msecs)03d - %(levelname)s: %(message)s'", ",", "datefmt", "=", "'%y-%m-%d %H:%M:%S'", ")", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "phase", "+", "'_{}.log'", ".", "format", "(", "get_timestamp", "(", ")", ")", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "l", ".", "setLevel", "(", "level", ")", "\n", "l", ".", "addHandler", "(", "fh", ")", "\n", "if", "screen", ":", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util._read_lmdb_img": [[62, 70], ["numpy.frombuffer", "np.frombuffer.reshape", "env.begin", "txn.get", "txn.get().decode", "int", "path.encode", "txn.get().decode.split", "txn.get"], "function", ["None"], ["sh", ".", "setFormatter", "(", "formatter", ")", "\n", "l", ".", "addHandler", "(", "sh", ")", "\n", "\n", "\n", "####################", "\n", "# image convert", "\n", "####################", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.read_img": [[72, 86], ["cv2.imread", "util._read_lmdb_img", "np.expand_dims.astype", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util._read_lmdb_img"], ["    ", "'''\n    Converts a torch Tensor into an image Numpy array\n    Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order\n    Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)\n    '''", "\n", "tensor", "=", "tensor", ".", "squeeze", "(", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "clamp_", "(", "*", "min_max", ")", "# clamp", "\n", "tensor", "=", "(", "tensor", "-", "min_max", "[", "0", "]", ")", "/", "(", "min_max", "[", "1", "]", "-", "min_max", "[", "0", "]", ")", "# to range [0,1]", "\n", "n_dim", "=", "tensor", ".", "dim", "(", ")", "\n", "if", "n_dim", "==", "4", ":", "\n", "        ", "n_img", "=", "len", "(", "tensor", ")", "\n", "img_np", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "int", "(", "math", ".", "sqrt", "(", "n_img", ")", ")", ",", "normalize", "=", "False", ")", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n", "", "elif", "n_dim", "==", "3", ":", "\n", "        ", "img_np", "=", "tensor", ".", "numpy", "(", ")", "\n", "img_np", "=", "np", ".", "transpose", "(", "img_np", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# HWC, BGR", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.augment": [[94, 107], ["util.augment._augment"], "function", ["None"], ["# Important. Unlike matlab, numpy.unit8() WILL NOT round by default.", "\n", "", "return", "img_np", ".", "astype", "(", "out_type", ")", "\n", "\n", "\n", "", "def", "save_img", "(", "img", ",", "img_path", ",", "mode", "=", "'RGB'", ")", ":", "\n", "    ", "cv2", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "\n", "\n", "####################", "\n", "# metric", "\n", "####################", "\n", "\n", "\n", "", "def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.channel_convert": [[109, 121], ["cv2.cvtColor", "numpy.expand_dims", "util.bgr2ycbcr", "numpy.expand_dims", "cv2.cvtColor"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.bgr2ycbcr"], ["    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n", "\n", "", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.rgb2ycbcr": [[123, 145], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n", "\n", "", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.bgr2ycbcr": [[147, 169], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.ycbcr2rgb": [[171, 189], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.matmul"], "function", ["None"], []], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.modcrop": [[191, 205], ["numpy.copy", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.cubic": [[213, 219], ["torch.abs"], "function", ["None"], []], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.calculate_weights_indices": [[221, 274], ["torch.linspace", "torch.floor", "torch.sum().view", "torch.sum", "weights.narrow.contiguous", "indices.narrow.contiguous", "math.ceil", "torch.floor.view().expand", "torch.linspace().view().expand", "u.view().expand", "util.cubic", "torch.sum().view.expand", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "math.isclose", "indices.narrow.narrow", "weights.narrow.narrow", "indices.narrow.max", "int", "int", "util.cubic", "torch.sum", "indices.narrow.min", "torch.floor.view", "torch.linspace().view", "u.view", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.cubic", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.cubic"], []], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.imresize": [[276, 343], ["img.size", "util.calculate_weights_indices", "util.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "math.ceil", "math.ceil", "int", "img_aug[].transpose().mv", "img_aug[].transpose().mv", "img_aug[].transpose().mv", "int", "out_1_aug[].mv", "out_1_aug[].mv", "out_1_aug[].mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose", "img_aug[].transpose", "img_aug[].transpose", "sym_patch.size", "sym_patch.size", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.calculate_weights_indices", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.calculate_weights_indices"], []], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.imresize_np": [[345, 413], ["torch.from_numpy", "torch.from_numpy.size", "util.calculate_weights_indices", "util.calculate_weights_indices", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_H.size", "range", "torch.FloatTensor", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.arange().long", "sym_patch.index_select", "torch.FloatTensor.narrow().copy_", "torch.FloatTensor", "weights_W.size", "range", "torch.FloatTensor.numpy", "math.ceil", "math.ceil", "int", "img_aug[].transpose().mv", "img_aug[].transpose().mv", "img_aug[].transpose().mv", "int", "out_1_aug[].mv", "out_1_aug[].mv", "out_1_aug[].mv", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "torch.arange", "torch.FloatTensor.narrow", "img_aug[].transpose", "img_aug[].transpose", "img_aug[].transpose", "sym_patch.size", "sym_patch.size", "sym_patch.size", "sym_patch.size"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.calculate_weights_indices", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.data.util.calculate_weights_indices"], []], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.options.options.NoneDict.__missing__": [[76, 78], ["None"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.options.options.parse": [[8, 73], ["json.loads", "opt[].items", "opt[].items", "print", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "phase.split", "os.path.expanduser", "os.path.expanduser", "dataset[].endswith", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "dataset[].endswith", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "str", "line.split"], "function", ["None"], ["def", "parse", "(", "opt_path", ",", "is_train", "=", "True", ")", ":", "\n", "# remove comments starting with '//'", "\n", "    ", "json_str", "=", "''", "\n", "with", "open", "(", "opt_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "'//'", ")", "[", "0", "]", "+", "'\\n'", "\n", "json_str", "+=", "line", "\n", "", "", "opt", "=", "json", ".", "loads", "(", "json_str", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "\n", "opt", "[", "'is_train'", "]", "=", "is_train", "\n", "scale", "=", "opt", "[", "'scale'", "]", "\n", "\n", "# datasets", "\n", "for", "phase", ",", "dataset", "in", "opt", "[", "'datasets'", "]", ".", "items", "(", ")", ":", "\n", "        ", "phase", "=", "phase", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "dataset", "[", "'phase'", "]", "=", "phase", "\n", "dataset", "[", "'scale'", "]", "=", "scale", "\n", "is_lmdb", "=", "False", "\n", "if", "'dataroot_HR'", "in", "dataset", "and", "dataset", "[", "'dataroot_HR'", "]", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_HR'", "]", "=", "os", ".", "path", ".", "expanduser", "(", "dataset", "[", "'dataroot_HR'", "]", ")", "\n", "if", "dataset", "[", "'dataroot_HR'", "]", ".", "endswith", "(", "'lmdb'", ")", ":", "\n", "                ", "is_lmdb", "=", "True", "\n", "", "", "if", "'dataroot_HR_bg'", "in", "dataset", "and", "dataset", "[", "'dataroot_HR_bg'", "]", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_HR_bg'", "]", "=", "os", ".", "path", ".", "expanduser", "(", "dataset", "[", "'dataroot_HR_bg'", "]", ")", "\n", "", "if", "'dataroot_LR'", "in", "dataset", "and", "dataset", "[", "'dataroot_LR'", "]", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'dataroot_LR'", "]", "=", "os", ".", "path", ".", "expanduser", "(", "dataset", "[", "'dataroot_LR'", "]", ")", "\n", "if", "dataset", "[", "'dataroot_LR'", "]", ".", "endswith", "(", "'lmdb'", ")", ":", "\n", "                ", "is_lmdb", "=", "True", "\n", "", "", "dataset", "[", "'data_type'", "]", "=", "'lmdb'", "if", "is_lmdb", "else", "'img'", "\n", "\n", "if", "phase", "==", "'train'", "and", "'subset_file'", "in", "dataset", "and", "dataset", "[", "'subset_file'", "]", "is", "not", "None", ":", "\n", "            ", "dataset", "[", "'subset_file'", "]", "=", "os", ".", "path", ".", "expanduser", "(", "dataset", "[", "'subset_file'", "]", ")", "\n", "\n", "# path", "\n", "", "", "for", "key", ",", "path", "in", "opt", "[", "'path'", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "path", "and", "key", "in", "opt", "[", "'path'", "]", ":", "\n", "            ", "opt", "[", "'path'", "]", "[", "key", "]", "=", "os", ".", "path", ".", "expanduser", "(", "path", ")", "\n", "", "", "if", "is_train", ":", "\n", "        ", "experiments_root", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'root'", "]", ",", "'experiments'", ",", "opt", "[", "'name'", "]", ")", "\n", "opt", "[", "'path'", "]", "[", "'experiments_root'", "]", "=", "experiments_root", "\n", "opt", "[", "'path'", "]", "[", "'models'", "]", "=", "os", ".", "path", ".", "join", "(", "experiments_root", ",", "'models'", ")", "\n", "opt", "[", "'path'", "]", "[", "'training_state'", "]", "=", "os", ".", "path", ".", "join", "(", "experiments_root", ",", "'training_state'", ")", "\n", "opt", "[", "'path'", "]", "[", "'log'", "]", "=", "experiments_root", "\n", "opt", "[", "'path'", "]", "[", "'val_images'", "]", "=", "os", ".", "path", ".", "join", "(", "experiments_root", ",", "'val_images'", ")", "\n", "\n", "# change some options for debug mode", "\n", "if", "'debug'", "in", "opt", "[", "'name'", "]", ":", "\n", "            ", "opt", "[", "'train'", "]", "[", "'val_freq'", "]", "=", "8", "\n", "opt", "[", "'logger'", "]", "[", "'print_freq'", "]", "=", "2", "\n", "opt", "[", "'logger'", "]", "[", "'save_checkpoint_freq'", "]", "=", "8", "\n", "opt", "[", "'train'", "]", "[", "'lr_decay_iter'", "]", "=", "10", "\n", "", "", "else", ":", "# test", "\n", "        ", "results_root", "=", "os", ".", "path", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'root'", "]", ",", "'results'", ",", "opt", "[", "'name'", "]", ")", "\n", "opt", "[", "'path'", "]", "[", "'results_root'", "]", "=", "results_root", "\n", "opt", "[", "'path'", "]", "[", "'log'", "]", "=", "results_root", "\n", "\n", "# network", "\n", "", "opt", "[", "'network_G'", "]", "[", "'scale'", "]", "=", "scale", "\n", "\n", "# export CUDA_VISIBLE_DEVICES", "\n", "gpu_list", "=", "','", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "opt", "[", "'gpu_ids'", "]", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "gpu_list", "\n", "print", "(", "'export CUDA_VISIBLE_DEVICES='", "+", "gpu_list", ")", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.options.options.dict_to_nonedict": [[81, 91], ["isinstance", "dict", "opt.items", "options.NoneDict", "isinstance", "options.dict_to_nonedict", "options.dict_to_nonedict"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.options.options.dict_to_nonedict", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.options.options.dict_to_nonedict"], ["", "", "def", "dict_to_nonedict", "(", "opt", ")", ":", "\n", "    ", "if", "isinstance", "(", "opt", ",", "dict", ")", ":", "\n", "        ", "new_opt", "=", "dict", "(", ")", "\n", "for", "key", ",", "sub_opt", "in", "opt", ".", "items", "(", ")", ":", "\n", "            ", "new_opt", "[", "key", "]", "=", "dict_to_nonedict", "(", "sub_opt", ")", "\n", "", "return", "NoneDict", "(", "**", "new_opt", ")", "\n", "", "elif", "isinstance", "(", "opt", ",", "list", ")", ":", "\n", "        ", "return", "[", "dict_to_nonedict", "(", "sub_opt", ")", "for", "sub_opt", "in", "opt", "]", "\n", "", "else", ":", "\n", "        ", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.options.options.dict2str": [[93, 104], ["opt.items", "isinstance", "options.dict2str", "str"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.options.options.dict2str"], ["", "", "def", "dict2str", "(", "opt", ",", "indent_l", "=", "1", ")", ":", "\n", "    ", "'''dict to string for logger'''", "\n", "msg", "=", "''", "\n", "for", "k", ",", "v", "in", "opt", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "k", "+", "':[\\n'", "\n", "msg", "+=", "dict2str", "(", "v", ",", "indent_l", "+", "1", ")", "\n", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "']\\n'", "\n", "", "else", ":", "\n", "            ", "msg", "+=", "' '", "*", "(", "indent_l", "*", "2", ")", "+", "k", "+", "': '", "+", "str", "(", "v", ")", "+", "'\\n'", "\n", "", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.options.options.check_resume": [[106, 121], ["logging.getLogger", "os.join", "logging.getLogger.info", "logging.getLogger.warning", "os.basename().split", "os.join", "logging.getLogger.info", "os.basename"], "function", ["None"], ["", "def", "check_resume", "(", "opt", ")", ":", "\n", "    ", "'''Check resume states and pretrain_model paths'''", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'base'", ")", "\n", "if", "opt", "[", "'path'", "]", "[", "'resume_state'", "]", ":", "\n", "        ", "if", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "or", "opt", "[", "'path'", "]", "[", "'pretrain_model_D'", "]", ":", "\n", "            ", "logger", ".", "warning", "(", "'pretrain_model path will be ignored when resuming training.'", ")", "\n", "\n", "", "state_idx", "=", "osp", ".", "basename", "(", "opt", "[", "'path'", "]", "[", "'resume_state'", "]", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", "=", "osp", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "\n", "'{}_G.pth'", ".", "format", "(", "state_idx", ")", ")", "\n", "logger", ".", "info", "(", "'Set [pretrain_model_G] to '", "+", "opt", "[", "'path'", "]", "[", "'pretrain_model_G'", "]", ")", "\n", "if", "'gan'", "in", "opt", "[", "'model'", "]", ":", "\n", "            ", "opt", "[", "'path'", "]", "[", "'pretrain_model_D'", "]", "=", "osp", ".", "join", "(", "opt", "[", "'path'", "]", "[", "'models'", "]", ",", "\n", "'{}_D.pth'", ".", "format", "(", "state_idx", ")", ")", "\n", "logger", ".", "info", "(", "'Set [pretrain_model_D] to '", "+", "opt", "[", "'path'", "]", "[", "'pretrain_model_D'", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.architecture.RRDB_Net.__init__": [[8, 35], ["torch.Module.__init__", "int", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.sequential", "math.log", "block.RRDB", "upsample_block", "block.ShortcutBlock", "range", "NotImplementedError", "upsample_block", "block.sequential", "range"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential"], ["####################", "\n", "# Generator", "\n", "####################", "\n", "\n", "\n", "class", "SRResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_nc", ",", "out_nc", ",", "nf", ",", "nb", ",", "upscale", "=", "4", ",", "norm_type", "=", "'batch'", ",", "act_type", "=", "'relu'", ",", "mode", "=", "'NAC'", ",", "res_scale", "=", "1", ",", "upsample_mode", "=", "'upconv'", ")", ":", "\n", "        ", "super", "(", "SRResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n_upscale", "=", "int", "(", "math", ".", "log", "(", "upscale", ",", "2", ")", ")", "\n", "if", "upscale", "==", "3", ":", "\n", "            ", "n_upscale", "=", "1", "\n", "\n", "", "fea_conv", "=", "B", ".", "conv_block", "(", "in_nc", ",", "nf", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "None", ",", "act_type", "=", "None", ")", "\n", "resnet_blocks", "=", "[", "B", ".", "ResNetBlock", "(", "nf", ",", "nf", ",", "nf", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ",", "res_scale", "=", "res_scale", ")", "for", "_", "in", "range", "(", "nb", ")", "]", "\n", "LR_conv", "=", "B", ".", "conv_block", "(", "nf", ",", "nf", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "None", ",", "mode", "=", "mode", ")", "\n", "\n", "if", "upsample_mode", "==", "'upconv'", ":", "\n", "            ", "upsample_block", "=", "B", ".", "upconv_blcok", "\n", "", "elif", "upsample_mode", "==", "'pixelshuffle'", ":", "\n", "            ", "upsample_block", "=", "B", ".", "pixelshuffle_block", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'upsample mode [{:s}] is not found'", ".", "format", "(", "upsample_mode", ")", ")", "\n", "", "if", "upscale", "==", "3", ":", "\n", "            ", "upsampler", "=", "upsample_block", "(", "nf", ",", "nf", ",", "3", ",", "act_type", "=", "act_type", ")", "\n", "", "else", ":", "\n", "            ", "upsampler", "=", "[", "upsample_block", "(", "nf", ",", "nf", ",", "act_type", "=", "act_type", ")", "for", "_", "in", "range", "(", "n_upscale", ")", "]", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.architecture.RRDB_Net.forward": [[36, 39], ["architecture.RRDB_Net.model"], "methods", ["None"], ["", "HR_conv0", "=", "B", ".", "conv_block", "(", "nf", ",", "nf", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "None", ",", "act_type", "=", "act_type", ")", "\n", "HR_conv1", "=", "B", ".", "conv_block", "(", "nf", ",", "out_nc", ",", "kernel_size", "=", "3", ",", "norm_type", "=", "None", ",", "act_type", "=", "None", ")", "\n", "\n", "self", ".", "model", "=", "B", ".", "sequential", "(", "fea_conv", ",", "B", ".", "ShortcutBlock", "(", "B", ".", "sequential", "(", "*", "resnet_blocks", ",", "LR_conv", ")", ")", ","]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ConcatBlock.__init__": [[61, 64], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["", "class", "ConcatBlock", "(", "nn", ".", "Module", ")", ":", "\n", "# Concat the output of a submodule to its input", "\n", "    ", "def", "__init__", "(", "self", ",", "submodule", ")", ":", "\n", "        ", "super", "(", "ConcatBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ConcatBlock.forward": [[65, 68], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "block.ConcatBlock.sub"], "methods", ["None"], ["self", ".", "sub", "=", "submodule", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "torch", ".", "cat", "(", "(", "x", ",", "self", ".", "sub", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ConcatBlock.__repr__": [[69, 74], ["block.ConcatBlock.sub.__repr__().replace", "block.ConcatBlock.sub.__repr__"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ShortcutBlock.__repr__"], ["return", "output", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "'Identity .. \\n|'", "\n", "modstr", "=", "self", ".", "sub", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n|'", ")", "\n", "tmpstr", "=", "tmpstr", "+", "modstr", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ShortcutBlock.__init__": [[78, 81], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["", "", "class", "ShortcutBlock", "(", "nn", ".", "Module", ")", ":", "\n", "#Elementwise sum the output of a submodule to its input", "\n", "    ", "def", "__init__", "(", "self", ",", "submodule", ")", ":", "\n", "        ", "super", "(", "ShortcutBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ShortcutBlock.forward": [[82, 85], ["block.ShortcutBlock.sub"], "methods", ["None"], ["self", ".", "sub", "=", "submodule", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "x", "+", "self", ".", "sub", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ShortcutBlock.__repr__": [[86, 91], ["block.ShortcutBlock.sub.__repr__().replace", "block.ShortcutBlock.sub.__repr__"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ShortcutBlock.__repr__"], ["return", "output", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "'Identity + \\n|'", "\n", "modstr", "=", "self", ".", "sub", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n|'", ")", "\n", "tmpstr", "=", "tmpstr", "+", "modstr", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.GaussianNoise.__init__": [[144, 149], ["torch.Module.__init__", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.device", "torch.device", "torch.device", "torch.device", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["        ", "if", "norm_type", "is", "None", "and", "act_type", "is", "not", "None", ":", "\n", "            ", "a", "=", "act", "(", "act_type", ",", "inplace", "=", "False", ")", "\n", "# Important!", "\n", "# input----ReLU(inplace)----Conv--+----output", "\n", "#        |________________________|", "\n", "# inplace ReLU will modify the input, therefore wrong output", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.GaussianNoise.forward": [[150, 156], ["block.GaussianNoise.noise.repeat().normal_", "x.detach", "block.GaussianNoise.noise.repeat", "x.size"], "methods", ["None"], ["", "n", "=", "norm", "(", "norm_type", ",", "in_nc", ")", "if", "norm_type", "else", "None", "\n", "return", "sequential", "(", "n", ",", "a", ",", "p", ",", "c", ")", "\n", "\n", "", "", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ResNetBlock.__init__": [[170, 190], ["torch.Module.__init__", "block.conv_block", "block.conv_block", "block.sequential"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential"], ["target_shape", "=", "copy", ".", "deepcopy", "(", "shape", ")", "\n", "vals", "=", "self", ".", "adjusted_std", "(", "x", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "if", "self", ".", "averaging", "==", "'all'", ":", "\n", "            ", "target_shape", "[", "1", "]", "=", "1", "\n", "vals", "=", "torch", ".", "mean", "(", "vals", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "self", ".", "averaging", "==", "'spatial'", ":", "\n", "            ", "if", "len", "(", "shape", ")", "==", "4", ":", "\n", "                ", "vals", "=", "mean", "(", "vals", ",", "axis", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "# torch.mean(torch.mean(vals, 2, keepdim=True), 3, keepdim=True)", "\n", "", "", "elif", "self", ".", "averaging", "==", "'none'", ":", "\n", "            ", "target_shape", "=", "[", "target_shape", "[", "0", "]", "]", "+", "[", "s", "for", "s", "in", "target_shape", "[", "1", ":", "]", "]", "\n", "", "elif", "self", ".", "averaging", "==", "'gpool'", ":", "\n", "            ", "if", "len", "(", "shape", ")", "==", "4", ":", "\n", "                ", "vals", "=", "mean", "(", "x", ",", "[", "0", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "# torch.mean(torch.mean(torch.mean(x, 2, keepdim=True), 3, keepdim=True), 0, keepdim=True)", "\n", "", "", "elif", "self", ".", "averaging", "==", "'flat'", ":", "\n", "            ", "target_shape", "[", "1", "]", "=", "1", "\n", "vals", "=", "torch", ".", "FloatTensor", "(", "[", "self", ".", "adjusted_std", "(", "x", ")", "]", ")", "\n", "", "else", ":", "# self.averaging == 'group'", "\n", "            ", "target_shape", "[", "1", "]", "=", "self", ".", "n", "\n", "vals", "=", "vals", ".", "view", "(", "self", ".", "n", ",", "self", ".", "shape", "[", "1", "]", "/", "self", ".", "n", ",", "self", ".", "shape", "[", "2", "]", ",", "self", ".", "shape", "[", "3", "]", ")", "\n", "vals", "=", "mean", "(", "vals", ",", "axis", "=", "0", ",", "keepdim", "=", "True", ")", ".", "view", "(", "1", ",", "self", ".", "n", ",", "1", ",", "1", ")", "\n", "", "vals", "=", "vals", ".", "expand", "(", "*", "target_shape", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ResNetBlock.forward": [[191, 194], ["block.ResNetBlock.res().mul", "block.ResNetBlock.res"], "methods", ["None"], ["return", "torch", ".", "cat", "(", "[", "x", ",", "vals", "]", ",", "1", ")", "\n", "\n", "\n", "####################", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ResidualDenseBlock_5C.__init__": [[203, 223], ["torch.Module.__init__", "block.conv1x1", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.conv_block", "block.GaussianNoise"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv1x1", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block"], ["\n", "\n", "def", "__init__", "(", "self", ",", "in_nc", ",", "mid_nc", ",", "out_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "pad_type", "=", "'zero'", ",", "norm_type", "=", "None", ",", "act_type", "=", "'relu'", ",", "mode", "=", "'CNA'", ",", "res_scale", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResNetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "conv0", "=", "conv_block", "(", "in_nc", ",", "mid_nc", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "bias", ",", "pad_type", ",", "norm_type", ",", "act_type", ",", "mode", ")", "\n", "if", "mode", "==", "'CNA'", ":", "\n", "            ", "act_type", "=", "None", "\n", "", "if", "mode", "==", "'CNAC'", ":", "# Residual path: |-CNAC-|", "\n", "            ", "act_type", "=", "None", "\n", "norm_type", "=", "None", "\n", "", "conv1", "=", "conv_block", "(", "mid_nc", ",", "out_nc", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "groups", ",", "bias", ",", "pad_type", ",", "norm_type", ",", "act_type", ",", "mode", ")", "\n", "# if in_nc != out_nc:", "\n", "#     self.project = conv_block(in_nc, out_nc, 1, stride, dilation, 1, bias, pad_type, \\", "\n", "#         None, None)", "\n", "#     print('Need a projecter in ResNetBlock.')", "\n", "# else:", "\n", "#     self.project = lambda x:x", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.ResidualDenseBlock_5C.forward": [[224, 233], ["block.ResidualDenseBlock_5C.conv1", "block.ResidualDenseBlock_5C.conv2", "block.ResidualDenseBlock_5C.conv3", "block.ResidualDenseBlock_5C.conv4", "block.ResidualDenseBlock_5C.conv5", "block.ResidualDenseBlock_5C.noise", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "block.ResidualDenseBlock_5C.conv1x1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "block.ResidualDenseBlock_5C.mul"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv1x1"], ["self", ".", "res", "=", "sequential", "(", "conv0", ",", "conv1", ")", "\n", "self", ".", "res_scale", "=", "res_scale", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "res", "(", "x", ")", ".", "mul", "(", "self", ".", "res_scale", ")", "\n", "return", "x", "+", "res", "\n", "\n", "\n", "", "", "class", "ResidualDenseBlock_5C", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__": [[241, 251], ["torch.Module.__init__", "block.ResidualDenseBlock_5C", "block.ResidualDenseBlock_5C", "block.ResidualDenseBlock_5C", "block.GaussianNoise"], "methods", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.__init__"], ["        ", "super", "(", "ResidualDenseBlock_5C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel, i.e. intermediate channels", "\n", "self", ".", "noise", "=", "GaussianNoise", "(", ")", "if", "gaussian_noise", "else", "None", "\n", "self", ".", "conv1x1", "=", "conv1x1", "(", "nc", ",", "gc", ")", "\n", "self", ".", "conv1", "=", "conv_block", "(", "nc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "bias", "=", "bias", ",", "pad_type", "=", "pad_type", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "self", ".", "conv2", "=", "conv_block", "(", "nc", "+", "gc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "bias", "=", "bias", ",", "pad_type", "=", "pad_type", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "self", ".", "conv3", "=", "conv_block", "(", "nc", "+", "2", "*", "gc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "bias", "=", "bias", ",", "pad_type", "=", "pad_type", ",", "norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "self", ".", "conv4", "=", "conv_block", "(", "nc", "+", "3", "*", "gc", ",", "gc", ",", "kernel_size", ",", "stride", ",", "bias", "=", "bias", ",", "pad_type", "=", "pad_type", ","]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.RRDB.forward": [[252, 257], ["block.RRDB.RDB1", "block.RRDB.RDB2", "block.RRDB.RDB3", "block.RRDB.noise", "block.RRDB.mul"], "methods", ["None"], ["norm_type", "=", "norm_type", ",", "act_type", "=", "act_type", ",", "mode", "=", "mode", ")", "\n", "if", "mode", "==", "'CNA'", ":", "\n", "            ", "last_act", "=", "None", "\n", "", "else", ":", "\n", "            ", "last_act", "=", "act_type", "\n", "", "self", ".", "conv5", "=", "conv_block", "(", "nc", "+", "4", "*", "gc", ",", "nc", ",", "3", ",", "stride", ",", "bias", "=", "bias", ",", "pad_type", "=", "pad_type", ","]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.act": [[10, 24], ["act_type.lower.lower", "torch.ReLU", "torch.LeakyReLU", "torch.PReLU", "NotImplementedError"], "function", ["None"], ["\n", "\n", "def", "act", "(", "act_type", ",", "inplace", "=", "True", ",", "neg_slope", "=", "0.2", ",", "n_prelu", "=", "1", ")", ":", "\n", "# helper selecting activation", "\n", "# neg_slope: for leakyrelu and init of prelu", "\n", "# n_prelu: for p_relu num_parameters", "\n", "    ", "act_type", "=", "act_type", ".", "lower", "(", ")", "\n", "if", "act_type", "==", "'relu'", ":", "\n", "        ", "layer", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "", "elif", "act_type", "==", "'leakyrelu'", ":", "\n", "        ", "layer", "=", "nn", ".", "LeakyReLU", "(", "neg_slope", ",", "inplace", ")", "\n", "", "elif", "act_type", "==", "'prelu'", ":", "\n", "        ", "layer", "=", "nn", ".", "PReLU", "(", "num_parameters", "=", "n_prelu", ",", "init", "=", "neg_slope", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'activation layer [{:s}] is not found'", ".", "format", "(", "act_type", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.norm": [[26, 36], ["norm_type.lower.lower", "torch.BatchNorm2d", "torch.InstanceNorm2d", "NotImplementedError"], "function", ["None"], ["\n", "\n", "", "def", "norm", "(", "norm_type", ",", "nc", ")", ":", "\n", "# helper selecting normalization layer", "\n", "    ", "norm_type", "=", "norm_type", ".", "lower", "(", ")", "\n", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "layer", "=", "nn", ".", "BatchNorm2d", "(", "nc", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "layer", "=", "nn", ".", "InstanceNorm2d", "(", "nc", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [{:s}] is not found'", ".", "format", "(", "norm_type", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.pad": [[38, 51], ["pad_type.lower.lower", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "function", ["None"], ["\n", "\n", "", "def", "pad", "(", "pad_type", ",", "padding", ")", ":", "\n", "# helper selecting padding layer", "\n", "# if padding is 'zero', do by conv layers", "\n", "    ", "pad_type", "=", "pad_type", ".", "lower", "(", ")", "\n", "if", "padding", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "if", "pad_type", "==", "'reflect'", ":", "\n", "        ", "layer", "=", "nn", ".", "ReflectionPad2d", "(", "padding", ")", "\n", "", "elif", "pad_type", "==", "'replicate'", ":", "\n", "        ", "layer", "=", "nn", ".", "ReplicationPad2d", "(", "padding", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'padding layer [{:s}] is not implemented'", ".", "format", "(", "pad_type", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.get_valid_padding": [[53, 57], ["None"], "function", ["None"], ["\n", "\n", "", "def", "get_valid_padding", "(", "kernel_size", ",", "dilation", ")", ":", "\n", "    ", "kernel_size", "=", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "dilation", "-", "1", ")", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential": [[93, 107], ["torch.Sequential", "len", "isinstance", "isinstance", "NotImplementedError", "module.children", "isinstance", "modules.append", "modules.append"], "function", ["None"], ["\n", "\n", "", "", "def", "sequential", "(", "*", "args", ")", ":", "\n", "# Flatten Sequential. It unwraps nn.Sequential.", "\n", "    ", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "        ", "if", "isinstance", "(", "args", "[", "0", "]", ",", "OrderedDict", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'sequential does not support OrderedDict input.'", ")", "\n", "", "return", "args", "[", "0", "]", "# No sequential is needed.", "\n", "", "modules", "=", "[", "]", "\n", "for", "module", "in", "args", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "nn", ".", "Sequential", ")", ":", "\n", "            ", "for", "submodule", "in", "module", ".", "children", "(", ")", ":", "\n", "                ", "modules", ".", "append", "(", "submodule", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "modules", ".", "append", "(", "module", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block": [[109, 136], ["block.get_valid_padding", "torch.Conv2d", "block.pad", "block.act", "block.sequential", "block.norm", "block.sequential", "block.act", "block.norm"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.get_valid_padding", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.pad", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.act", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.act", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.norm"], ["\n", "", "class", "GaussianNoise", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "sigma", "=", "0.1", ",", "is_relative_detach", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "is_relative_detach", "=", "is_relative_detach", "\n", "self", ".", "noise", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", "and", "self", ".", "sigma", "!=", "0", ":", "\n", "            ", "scale", "=", "self", ".", "sigma", "*", "x", ".", "detach", "(", ")", "if", "self", ".", "is_relative_detach", "else", "self", ".", "sigma", "*", "x", "\n", "sampled_noise", "=", "self", ".", "noise", ".", "repeat", "(", "*", "x", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "*", "scale", "\n", "x", "=", "x", "+", "sampled_noise", "\n", "", "return", "x", "\n", "\n", "\n", "", "", "def", "conv_block", "(", "in_nc", ",", "out_nc", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "pad_type", "=", "'zero'", ",", "norm_type", "=", "None", ",", "act_type", "=", "'relu'", ",", "mode", "=", "'CNA'", ")", ":", "\n", "    ", "'''\n    Conv layer with padding, normalization, activation\n    mode: CNA --> Conv -> Norm -> Act\n        NAC --> Norm -> Act --> Conv (Identity Mappings in Deep Residual Networks, ECCV16)\n    '''", "\n", "assert", "mode", "in", "[", "'CNA'", ",", "'NAC'", ",", "'CNAC'", "]", ",", "'Wong conv mode [{:s}]'", ".", "format", "(", "mode", ")", "\n", "padding", "=", "get_valid_padding", "(", "kernel_size", ",", "dilation", ")", "\n", "p", "=", "pad", "(", "pad_type", ",", "padding", ")", "if", "pad_type", "and", "pad_type", "!=", "'zero'", "else", "None", "\n", "padding", "=", "padding", "if", "pad_type", "==", "'zero'", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv1x1": [[138, 141], ["torch.Conv2d"], "function", ["None"], ["dilation", "=", "dilation", ",", "bias", "=", "bias", ",", "groups", "=", "groups", ")", "\n", "a", "=", "act", "(", "act_type", ")", "if", "act_type", "else", "None", "\n", "if", "'CNA'", "in", "mode", ":", "\n", "        ", "n", "=", "norm", "(", "norm_type", ",", "out_nc", ")", "if", "norm_type", "else", "None", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.pixelshuffle_block": [[264, 278], ["block.conv_block", "torch.PixelShuffle", "block.sequential", "block.norm", "block.act"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.norm", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.act"], ["x3", "=", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ")", ",", "1", ")", ")", "\n", "x4", "=", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", ")", "\n", "x4", "=", "x4", "+", "x2", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", ")", "\n", "return", "self", ".", "noise", "(", "x5", ".", "mul", "(", "0.2", ")", "+", "x", ")", "\n", "\n", "\n", "", "", "class", "RRDB", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "'''\n    Residual in Residual Dense Block\n    (ESRGAN: Enhanced Super-Resolution Generative Adversarial Networks)\n    '''", "\n", "\n", "def", "__init__", "(", "self", ",", "nc", ",", "kernel_size", "=", "3", ",", "gc", "=", "32", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "pad_type", "=", "'zero'", ",", "norm_type", "=", "None", ",", "act_type", "=", "'leakyrelu'", ",", "mode", "=", "'CNA'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.upconv_blcok": [[280, 288], ["torch.Upsample", "block.conv_block", "block.sequential"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.conv_block", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.test_image.block.sequential"], ["self", ".", "RDB1", "=", "ResidualDenseBlock_5C", "(", "nc", ",", "kernel_size", ",", "gc", ",", "stride", ",", "bias", ",", "pad_type", ",", "norm_type", ",", "act_type", ",", "mode", ")", "\n", "self", ".", "RDB2", "=", "ResidualDenseBlock_5C", "(", "nc", ",", "kernel_size", ",", "gc", ",", "stride", ",", "bias", ",", "pad_type", ",", "norm_type", ",", "act_type", ",", "mode", ")", "\n", "self", ".", "RDB3", "=", "ResidualDenseBlock_5C", "(", "nc", ",", "kernel_size", ",", "gc", ",", "stride", ",", "bias", ",", "pad_type", ",", "norm_type", ",", "act_type", ",", "mode", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "RDB1", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.main": [[12, 66], ["sorted", "enumerate", "print", "glob.glob", "print", "print", "calculate_PSNR_SSIM.calculate_psnr", "calculate_PSNR_SSIM.calculate_ssim", "print", "PSNR_all.append", "SSIM_all.append", "os.path.splitext", "cv2.imread", "cv2.imread", "calculate_PSNR_SSIM.bgr2ycbcr", "calculate_PSNR_SSIM.bgr2ycbcr", "os.path.basename", "os.path.join", "ValueError", "sum", "len", "sum", "len"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.calculate_ssim", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.bgr2ycbcr", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.bgr2ycbcr"], ["def", "main", "(", ")", ":", "\n", "# Configurations", "\n", "\n", "# GT - Ground-truth;", "\n", "# Gen: Generated / Restored / Recovered images", "\n", "    ", "folder_GT", "=", "'/home/carraz/datasets/val_set5/Set5'", "\n", "folder_Gen", "=", "'/home/carraz/nESRGANplus/results/RRDB_PSNR_x4/set5'", "\n", "\n", "crop_border", "=", "4", "\n", "suffix", "=", "''", "# suffix for Gen images", "\n", "test_Y", "=", "False", "# True: test Y channel only; False: test RGB channels", "\n", "\n", "PSNR_all", "=", "[", "]", "\n", "SSIM_all", "=", "[", "]", "\n", "img_list", "=", "sorted", "(", "glob", ".", "glob", "(", "folder_GT", "+", "'/*'", ")", ")", "\n", "\n", "if", "test_Y", ":", "\n", "        ", "print", "(", "'Testing Y channel.'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Testing RGB channels.'", ")", "\n", "\n", "", "for", "i", ",", "img_path", "in", "enumerate", "(", "img_list", ")", ":", "\n", "        ", "base_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "im_GT", "=", "cv2", ".", "imread", "(", "img_path", ")", "/", "255.", "\n", "im_Gen", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "folder_Gen", ",", "base_name", "+", "suffix", "+", "'.png'", ")", ")", "/", "255.", "\n", "\n", "if", "test_Y", "and", "im_GT", ".", "shape", "[", "2", "]", "==", "3", ":", "# evaluate on Y channel in YCbCr color space", "\n", "            ", "im_GT_in", "=", "bgr2ycbcr", "(", "im_GT", ")", "\n", "im_Gen_in", "=", "bgr2ycbcr", "(", "im_Gen", ")", "\n", "", "else", ":", "\n", "            ", "im_GT_in", "=", "im_GT", "\n", "im_Gen_in", "=", "im_Gen", "\n", "\n", "# crop borders", "\n", "", "if", "im_GT_in", ".", "ndim", "==", "3", ":", "\n", "            ", "cropped_GT", "=", "im_GT_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", ":", "]", "\n", "cropped_Gen", "=", "im_Gen_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", ":", "]", "\n", "", "elif", "im_GT_in", ".", "ndim", "==", "2", ":", "\n", "            ", "cropped_GT", "=", "im_GT_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "\n", "cropped_Gen", "=", "im_Gen_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong image dimension: {}. Should be 2 or 3.'", ".", "format", "(", "im_GT_in", ".", "ndim", ")", ")", "\n", "\n", "# calculate PSNR and SSIM", "\n", "", "PSNR", "=", "calculate_psnr", "(", "cropped_GT", "*", "255", ",", "cropped_Gen", "*", "255", ")", "\n", "\n", "SSIM", "=", "calculate_ssim", "(", "cropped_GT", "*", "255", ",", "cropped_Gen", "*", "255", ")", "\n", "print", "(", "'{:3d} - {:25}. \\tPSNR: {:.6f} dB, \\tSSIM: {:.6f}'", ".", "format", "(", "\n", "i", "+", "1", ",", "base_name", ",", "PSNR", ",", "SSIM", ")", ")", "\n", "PSNR_all", ".", "append", "(", "PSNR", ")", "\n", "SSIM_all", ".", "append", "(", "SSIM", ")", "\n", "", "print", "(", "'Average: PSNR: {:.6f} dB, SSIM: {:.6f}'", ".", "format", "(", "\n", "sum", "(", "PSNR_all", ")", "/", "len", "(", "PSNR_all", ")", ",", "\n", "sum", "(", "SSIM_all", ")", "/", "len", "(", "SSIM_all", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.calculate_psnr": [[68, 76], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "float", "math.log10", "math.sqrt"], "function", ["None"], ["", "def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.ssim": [[78, 99], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.calculate_ssim": [[101, 120], ["ValueError", "calculate_PSNR_SSIM.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "calculate_PSNR_SSIM.ssim", "calculate_PSNR_SSIM.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncarraz_ESRGANplus.metrics.calculate_PSNR_SSIM.bgr2ycbcr": [[122, 144], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "", "def", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "24.966", ",", "128.553", ",", "65.481", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]]}