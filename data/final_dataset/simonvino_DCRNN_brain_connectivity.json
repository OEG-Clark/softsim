{"home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.None.generate_samples.generate_train_val_test": [[7, 131], ["list", "list", "numpy.sort", "numpy.sort", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "print", "print", "print", "print", "range", "range", "numpy.concatenate", "numpy.arange", "np.concatenate.mean", "print", "print", "print", "print", "numpy.loadtxt", "abs", "abs", "range", "numpy.stack", "numpy.stack", "numpy.expand_dims", "numpy.expand_dims", "round", "round", "os.path.exists", "os.makedirs", "len", "len", "print", "numpy.savez_compressed", "numpy.arange", "str", "min", "np.expand_dims.append", "np.expand_dims.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "os.path.join", "str", "abs", "map", "map", "locals", "locals", "np.sort.reshape", "np.sort.reshape", "np.loadtxt.min().min", "np.loadtxt.max().max", "np.loadtxt.min().min", "np.loadtxt.mean", "np.loadtxt.std", "max", "int", "list", "list", "np.loadtxt.min", "np.loadtxt.max", "np.loadtxt.min"], "function", ["None"], ["def", "generate_train_val_test", "(", "\n", "input_dir", ",", "input_filename", ",", "output_dir", ",", "NSess", ",", "NSub", ",", "input_horizon", "=", "30", ",", "output_horizon", "=", "30", ",", "\n", "scaling", "=", "'n'", ",", "save_data", "=", "True", ",", "train_prop", "=", "0.8", ",", "test_prop", "=", "0.1", ",", "NROIs", "=", "None", ",", "perturbations", "=", "None", ",", "\n", ")", ":", "\n", "\n", "    ", "'''\n    Generate train, validation and test data samples from multiple fMRI session timecourses.\n    \n    input_dir: directory with structure input_dir/Session_{nSess}/\n               with nSess running from 1 to NSess\n    input_filename: .txt file in: input_dir/Session_{nSess}\n                    with name: input_filename{nSub}\n                    with nSub running from 1 to NSub\n                    expected dimension: ROIs x Samples\n    output_dir: directory where train.npz, val.npz, test.npz are saved to\n                containing model inputs x and tragets y\n    perturbations: list of ROIs with perturbation, starts from 1\n                \n    x: (num_samples, input_length, num_nodes, feature_dim)\n    y: (num_samples, output_length, num_nodes, feature_dim)\n    '''", "\n", "\n", "Sub_list", "=", "list", "(", "range", "(", "1", ",", "NSub", "+", "1", ")", ")", "\n", "Sess_list", "=", "list", "(", "range", "(", "1", ",", "NSess", "+", "1", ")", ")", "\n", "\n", "# Define offsets.", "\n", "# 0 is the latest observed sample.", "\n", "x_offsets", "=", "np", ".", "sort", "(", "np", ".", "concatenate", "(", "(", "np", ".", "arange", "(", "-", "(", "input_horizon", "-", "1", ")", ",", "1", ",", "1", ")", ",", ")", ")", ")", "\n", "# Predict the next timesteps.", "\n", "y_offsets", "=", "np", ".", "sort", "(", "np", ".", "arange", "(", "1", ",", "(", "output_horizon", "+", "1", ")", ",", "1", ")", ")", "\n", "\n", "x_train", ",", "y_train", ",", "x_val", ",", "y_val", ",", "x_test", ",", "y_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "nSess", "in", "Sess_list", ":", "# Iterate through sessions.", "\n", "        ", "sessiondir", "=", "'/session_'", "+", "str", "(", "nSess", ")", "+", "'/'", "\n", "for", "nSub", "in", "Sub_list", ":", "# Iterate through subjects.", "\n", "            ", "subfile", "=", "input_filename", "+", "str", "(", "nSub", ")", "+", "'.txt'", "\n", "filename", "=", "input_dir", "+", "sessiondir", "+", "subfile", "\n", "print", "(", "\"Load: \"", "+", "filename", ")", "\n", "timeseries", "=", "np", ".", "loadtxt", "(", "filename", ",", "delimiter", "=", "\",\"", ",", "dtype", "=", "'float32'", ")", "\n", "if", "scaling", "==", "'n'", ":", "# Scale values between 0 and 1.              ", "\n", "                ", "timeseries", "=", "(", "timeseries", "-", "timeseries", ".", "min", "(", ")", ".", "min", "(", ")", ")", "/", "(", "timeseries", ".", "max", "(", ")", ".", "max", "(", ")", "-", "timeseries", ".", "min", "(", ")", ".", "min", "(", ")", ")", "\n", "", "elif", "scaling", "==", "'z'", ":", "# Standardize values.", "\n", "                ", "timeseries", "=", "timeseries", "-", "timeseries", ".", "mean", "(", ")", "\n", "timeseries", "=", "timeseries", "/", "timeseries", ".", "std", "(", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "timeseries", "=", "timeseries", ".", "T", "# Now has shape samples x ROIs.", "\n", "num_samples", ",", "num_nodes", "=", "timeseries", ".", "shape", "\n", "\n", "if", "NROIs", ":", "# Select only first few nodes.                ", "\n", "                ", "timeseries", "=", "timeseries", "[", ":", ",", ":", "NROIs", "]", "\n", "\n", "# Load data, t is the index of the last observation.", "\n", "", "min_t", "=", "abs", "(", "min", "(", "x_offsets", ")", ")", "\n", "max_t", "=", "abs", "(", "num_samples", "-", "abs", "(", "max", "(", "y_offsets", ")", ")", ")", "# Exclusive", "\n", "x", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "for", "t", "in", "range", "(", "min_t", ",", "max_t", ")", ":", "\n", "                ", "x_t", "=", "timeseries", "[", "t", "+", "x_offsets", ",", "...", "]", "\n", "y_t", "=", "timeseries", "[", "t", "+", "y_offsets", ",", "...", "]", "\n", "x", ".", "append", "(", "x_t", ")", "\n", "y", ".", "append", "(", "y_t", ")", "\n", "\n", "", "x", "=", "np", ".", "stack", "(", "x", ",", "axis", "=", "0", ")", "\n", "y", "=", "np", ".", "stack", "(", "y", ",", "axis", "=", "0", ")", "\n", "\n", "# Add feature dimension.", "\n", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", "y", "=", "np", ".", "expand_dims", "(", "y", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Compute number of train, val, test samples.", "\n", "num_snippets", "=", "x", ".", "shape", "[", "0", "]", "\n", "num_test", "=", "round", "(", "num_snippets", "*", "test_prop", ")", "\n", "num_train", "=", "round", "(", "num_snippets", "*", "train_prop", ")", "\n", "num_val", "=", "num_snippets", "-", "num_test", "-", "num_train", "\n", "\n", "# Split data.", "\n", "# Train.", "\n", "x_train", ".", "append", "(", "x", "[", ":", "num_train", "]", ")", ",", "y_train", ".", "append", "(", "y", "[", ":", "num_train", "]", ")", "\n", "# Val.", "\n", "x_val", ".", "append", "(", "x", "[", "num_train", ":", "num_train", "+", "num_val", "]", ")", ",", "y_val", ".", "append", "(", "y", "[", "num_train", ":", "num_train", "+", "num_val", "]", ")", "\n", "# Test.", "\n", "x_test", ".", "append", "(", "x", "[", "-", "num_test", ":", "]", ")", ",", "y_test", ".", "append", "(", "y", "[", "-", "num_test", ":", "]", ")", "\n", "\n", "", "", "x_train", "=", "np", ".", "concatenate", "(", "x_train", ",", "axis", "=", "0", ")", "# Concatenate all samples along first dimension.    ", "\n", "y_train", "=", "np", ".", "concatenate", "(", "y_train", ",", "axis", "=", "0", ")", "\n", "x_val", "=", "np", ".", "concatenate", "(", "x_val", ",", "axis", "=", "0", ")", "\n", "y_val", "=", "np", ".", "concatenate", "(", "y_val", ",", "axis", "=", "0", ")", "\n", "x_test", "=", "np", ".", "concatenate", "(", "x_test", ",", "axis", "=", "0", ")", "\n", "y_test", "=", "np", ".", "concatenate", "(", "y_test", ",", "axis", "=", "0", ")", "\n", "\n", "# Induce perturbation in some brain regions to generate second dataset for the perturbation experiment.", "\n", "if", "perturbations", "!=", "None", ":", "\n", "        ", "sample_mean", "=", "x_train", ".", "mean", "(", ")", "\n", "for", "n_ROI_pertb", "in", "perturbations", ":", "\n", "            ", "x_test", "[", ":", ",", ":", ",", "(", "int", "(", "n_ROI_pertb", ")", "-", "1", ")", ",", ":", "]", "=", "sample_mean", "# n_ROI_pertb starts counting from 1.", "\n", "\n", "", "print", "(", "'ROIs with perturbation: #{}'", ".", "format", "(", "', #'", ".", "join", "(", "map", "(", "str", ",", "perturbations", ")", ")", ")", ")", "\n", "output_dir", "=", "output_dir", "+", "'/dataset_perturbation_ROI{}/'", ".", "format", "(", "'_'", ".", "join", "(", "map", "(", "str", ",", "perturbations", ")", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_dir", ")", "# Create directory where data with perturbations is stored in.", "\n", "\n", "\n", "", "", "print", "(", "'### SAMPLES ###'", ")", "\n", "print", "(", "'Using {} sessions from {} subjects.'", ".", "format", "(", "len", "(", "Sess_list", ")", ",", "len", "(", "Sub_list", ")", ")", ")", "\n", "print", "(", "'Per session: {:5} training samples, {:5} validation samples, {:5} testing samples.'", ".", "format", "(", "num_train", ",", "num_val", ",", "num_test", ")", ")", "\n", "print", "(", "'In total:    {:5} training samples, {:5} validation samples, {:5} testing samples.'", ".", "format", "(", "x_train", ".", "shape", "[", "0", "]", ",", "x_val", ".", "shape", "[", "0", "]", ",", "x_test", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "# Save results.", "\n", "if", "save_data", ":", "\n", "        ", "print", "(", "'### SAVE DATA ###'", ")", "\n", "print", "(", "'Save in: '", "+", "output_dir", ")", "\n", "for", "cat", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ":", "\n", "            ", "_x", ",", "_y", "=", "locals", "(", ")", "[", "\"x_\"", "+", "cat", "]", ",", "locals", "(", ")", "[", "\"y_\"", "+", "cat", "]", "\n", "print", "(", "cat", ",", "\"x: \"", ",", "_x", ".", "shape", ",", "\"y:\"", ",", "_y", ".", "shape", ")", "\n", "np", ".", "savez_compressed", "(", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"%s.npz\"", "%", "cat", ")", ",", "\n", "x", "=", "_x", ",", "\n", "y", "=", "_y", ",", "\n", "x_offsets", "=", "x_offsets", ".", "reshape", "(", "list", "(", "x_offsets", ".", "shape", ")", "+", "[", "1", "]", ")", ",", "\n", "y_offsets", "=", "y_offsets", ".", "reshape", "(", "list", "(", "y_offsets", ".", "shape", ")", "+", "[", "1", "]", ")", ",", "\n", ")", "\n", "", "", "print", "(", "'Done.'", ")", "\n", "\n", "return", "x_train", ",", "y_train", ",", "x_val", ",", "y_val", ",", "x_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.None.generate_samples.main": [[133, 138], ["print", "generate_samples.generate_train_val_test"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.None.generate_samples.generate_train_val_test"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "\"Generating training data.\"", ")", "\n", "generate_train_val_test", "(", "input_dir", "=", "args", ".", "input_dir", ",", "input_filename", "=", "args", ".", "input_filename", ",", "output_dir", "=", "args", ".", "output_dir", ",", "\n", "NSess", "=", "args", ".", "NSess", ",", "NSub", "=", "args", ".", "NSub", ",", "input_horizon", "=", "args", ".", "input_horizon", ",", "output_horizon", "=", "args", ".", "output_horizon", ",", "\n", "perturbations", "=", "args", ".", "perturbations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.None.dcrnn_for_brain_connectivity_train.main": [[18, 42], ["open", "yaml.load", "lib.utils.load_graph_data", "tensorflow.ConfigProto", "tensorflow.ConfigProto", "tensorflow.Session", "model.dcrnn_supervisor.DCRNNSupervisor", "model.dcrnn_supervisor.DCRNNSupervisor.train", "model.dcrnn_supervisor.DCRNNSupervisor.evaluate", "print", "numpy.savez", "lib.plot_functions.plot_predictions"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.load", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.load_graph_data", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.train", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.evaluate", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.plot_functions.plot_predictions"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "args", ".", "config_filename", ")", "as", "f", ":", "\n", "        ", "supervisor_config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "\n", "SC_mx", "=", "load_graph_data", "(", "supervisor_config", ")", "# Load structural connectivity matrix.", "\n", "\n", "tf_config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "if", "args", ".", "use_cpu_only", ":", "\n", "            ", "tf_config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "'GPU'", ":", "0", "}", ")", "\n", "", "tf_config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "Session", "(", "config", "=", "tf_config", ")", "as", "sess", ":", "\n", "            ", "supervisor", "=", "DCRNNSupervisor", "(", "adj_mx", "=", "SC_mx", ",", "**", "supervisor_config", ")", "\n", "supervisor", ".", "train", "(", "sess", "=", "sess", ")", "\n", "\n", "if", "args", ".", "save_predictions", ":", "\n", "                ", "outputs", ",", "_", "=", "supervisor", ".", "evaluate", "(", "sess", "=", "sess", ")", "\n", "\n", "print", "(", "'Save outputs in: '", ",", "supervisor", ".", "_log_dir", ")", "\n", "np", ".", "savez", "(", "supervisor", ".", "_log_dir", "+", "'/outputs'", ",", "\n", "predictions", "=", "outputs", "[", "'predictions'", "]", ",", "\n", "groundtruth", "=", "outputs", "[", "'groundtruth'", "]", ")", "\n", "\n", "plot_predictions", "(", "log_dir", "=", "supervisor", ".", "_log_dir", ",", "\n", "dataset_dir", "=", "supervisor_config", "[", "'data'", "]", "[", "'dataset_dir'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.None.dcrnn_for_brain_connectivity_test.main": [[18, 45], ["open", "yaml.load", "lib.utils.load_graph_data", "tensorflow.ConfigProto", "tensorflow.ConfigProto", "tensorflow.Session", "model.dcrnn_supervisor.DCRNNSupervisor", "model.dcrnn_supervisor.DCRNNSupervisor.load", "model.dcrnn_supervisor.DCRNNSupervisor.evaluate", "print", "numpy.savez", "lib.plot_functions.plot_predictions"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.load", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.load_graph_data", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.load", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.evaluate", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.plot_functions.plot_predictions"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "args", ".", "config_filename", ")", "as", "f", ":", "\n", "        ", "supervisor_config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "\n", "SC_mx", "=", "load_graph_data", "(", "supervisor_config", ")", "# Load structural connectivity matrix.", "\n", "\n", "if", "args", ".", "test_dataset", ":", "# For evaluating the model on a different dataset.            ", "\n", "            ", "supervisor_config", "[", "'data'", "]", "[", "'dataset_dir'", "]", "=", "args", ".", "test_dataset", "\n", "\n", "", "tf_config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "if", "args", ".", "use_cpu_only", ":", "\n", "            ", "tf_config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "'GPU'", ":", "0", "}", ")", "\n", "", "tf_config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "Session", "(", "config", "=", "tf_config", ")", "as", "sess", ":", "\n", "            ", "supervisor", "=", "DCRNNSupervisor", "(", "adj_mx", "=", "SC_mx", ",", "**", "supervisor_config", ")", "\n", "supervisor", ".", "load", "(", "sess", ",", "supervisor_config", "[", "'train'", "]", "[", "'model_filename'", "]", ")", "# Restore model.", "\n", "\n", "if", "args", ".", "save_predictions", ":", "\n", "                ", "outputs", ",", "_", "=", "supervisor", ".", "evaluate", "(", "sess", "=", "sess", ")", "\n", "\n", "print", "(", "'Save outputs in: '", ",", "supervisor", ".", "_log_dir", ")", "\n", "np", ".", "savez", "(", "supervisor", ".", "_log_dir", "+", "'/'", "+", "args", ".", "output_name", ",", "\n", "predictions", "=", "outputs", "[", "'predictions'", "]", ",", "\n", "groundtruth", "=", "outputs", "[", "'groundtruth'", "]", ")", "\n", "\n", "plot_predictions", "(", "log_dir", "=", "supervisor", ".", "_log_dir", ",", "output_name", "=", "args", ".", "output_name", ",", "\n", "dataset_dir", "=", "supervisor_config", "[", "'data'", "]", "[", "'dataset_dir'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.plot_functions.plot_predictions": [[6, 60], ["numpy.load", "numpy.load", "outputs[].transpose", "outputs[].transpose", "matplotlib.figure", "plt.figure.subplots_adjust", "numpy.linspace", "numpy.linspace", "math.ceil", "range", "matplotlib.suptitle", "plt.figure.add_subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.axvline", "matplotlib.legend", "matplotlib.title", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "print", "matplotlib.savefig"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.load", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.load"], ["def", "plot_predictions", "(", "log_dir", ",", "dataset_dir", ",", "output_name", "=", "'outputs'", ",", "NROI", "=", "[", "1", ",", "15", "]", ",", "NSample", "=", "0", ",", "save_figure", "=", "True", ")", ":", "\n", "    ", "'''\n    Visualize model predictions. \n    \n    log_dir: directory where model outputs were saved to\n    dataset_dir: directory where data samples were saved to\n    NROI: plot predictions from NROI[0] to NROI[1]\n    NSample: number of test sample    \n    '''", "\n", "\n", "test_data", "=", "np", ".", "load", "(", "dataset_dir", "+", "'/test.npz'", ")", "\n", "outputs", "=", "np", ".", "load", "(", "log_dir", "+", "output_name", "+", "'.npz'", ")", "\n", "outputs_predicitons", "=", "outputs", "[", "'predictions'", "]", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "# To have shape (samples, time, ROI)", "\n", "outputs_groundtruth", "=", "outputs", "[", "'groundtruth'", "]", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "input_len", "=", "test_data", "[", "'x'", "]", ".", "shape", "[", "1", "]", "\n", "horizon", "=", "outputs_predicitons", ".", "shape", "[", "1", "]", "\n", "\n", "figurename", "=", "(", "'DCRNN_predictions_test_sample_{}'", ".", "format", "(", "NSample", ")", ")", "\n", "figurename", "=", "figurename", "+", "'_ROI{}-{}'", ".", "format", "(", "NROI", "[", "0", "]", ",", "NROI", "[", "1", "]", ")", "\n", "Nsubfigs", "=", "NROI", "[", "1", "]", "-", "NROI", "[", "0", "]", "+", "1", "\n", "fig", "=", "plt", ".", "figure", "(", "num", "=", "figurename", ",", "figsize", "=", "(", "27", ",", "Nsubfigs", ")", ")", "\n", "fig", ".", "subplots_adjust", "(", "top", "=", "0.93", ",", "right", "=", "0.88", ",", "left", "=", "0.12", ",", "wspace", "=", "0.15", ",", "\n", "hspace", "=", "0.4", ",", "bottom", "=", "0.07", ")", "\n", "\n", "t_in", "=", "np", ".", "linspace", "(", "1", ",", "input_len", ",", "input_len", ")", "\n", "t_out", "=", "np", ".", "linspace", "(", "input_len", "+", "1", ",", "input_len", "+", "horizon", ",", "horizon", ")", "\n", "\n", "Nrows", "=", "math", ".", "ceil", "(", "(", "Nsubfigs", ")", "/", "3", ")", "\n", "\n", "# Creat plots.", "\n", "for", "nROI", "in", "range", "(", "NROI", "[", "0", "]", "-", "1", ",", "NROI", "[", "1", "]", ")", ":", "\n", "\n", "        ", "ax", "=", "fig", ".", "add_subplot", "(", "Nrows", ",", "3", ",", "nROI", "+", "1", ")", "\n", "\n", "plt", ".", "plot", "(", "t_in", ",", "test_data", "[", "'x'", "]", "[", "NSample", ",", ":", ",", "nROI", ",", "0", "]", ",", "linestyle", "=", "'-'", ",", "marker", "=", "'o'", ",", "linewidth", "=", "4", ",", "\n", "markersize", "=", "'2.3'", ",", "markeredgecolor", "=", "'black'", ",", "color", "=", "(", "0", ",", "0.9", ",", "0.4", ",", "0.5", ")", ")", "\n", "plt", ".", "plot", "(", "t_out", ",", "outputs_groundtruth", "[", "NSample", ",", ":", ",", "nROI", "]", ",", "linestyle", "=", "'-'", ",", "marker", "=", "'o'", ",", "linewidth", "=", "4", ",", "\n", "markersize", "=", "'2.3'", ",", "markeredgecolor", "=", "'black'", ",", "color", "=", "(", "0", ",", "0.9", ",", "0.4", ",", "0.5", ")", ",", "label", "=", "'Truth'", ")", "\n", "plt", ".", "plot", "(", "t_out", ",", "outputs_predicitons", "[", "NSample", ",", ":", ",", "nROI", "]", ",", "linestyle", "=", "'-'", ",", "marker", "=", "'o'", ",", "\n", "markersize", "=", "'2.3'", ",", "markeredgecolor", "=", "'black'", ",", "color", "=", "'darkblue'", ",", "label", "=", "'Prediction'", ")", "\n", "plt", ".", "axvline", "(", "x", "=", "(", "input_len", "+", "0.5", ")", ",", "color", "=", "'black'", ",", "linewidth", "=", "'0.5'", ")", "\n", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "'ROI #{}'", ".", "format", "(", "nROI", "+", "1", ")", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "'TRs'", ")", "\n", "ax", ".", "set_ylabel", "(", "'BOLD Signal'", ")", "\n", "\n", "", "plt", ".", "suptitle", "(", "'Predictions (Sample #{})'", ".", "format", "(", "NSample", ")", ")", "\n", "\n", "if", "save_figure", ":", "\n", "        ", "print", "(", "'Save figure in: '", ",", "log_dir", ")", "\n", "plt", ".", "savefig", "(", "log_dir", "+", "figurename", "+", "'_'", "+", "output_name", "+", "'.png'", ",", "dpi", "=", "100", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mse_tf": [[5, 24], ["numpy.isnan", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.where", "tensorflow.square", "tensorflow.where", "tensorflow.reduce_mean", "tensorflow.not_equal", "tensorflow.is_nan", "tensorflow.zeros_like", "tensorflow.subtract", "tensorflow.is_nan", "tensorflow.zeros_like", "tensorflow.is_nan"], "function", ["None"], ["def", "masked_mse_tf", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "\"\"\"\n    Accuracy with masking.\n    :param preds:\n    :param labels:\n    :param null_val:\n    :return:\n    \"\"\"", "\n", "if", "np", ".", "isnan", "(", "null_val", ")", ":", "\n", "        ", "mask", "=", "~", "tf", ".", "is_nan", "(", "labels", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "tf", ".", "not_equal", "(", "labels", ",", "null_val", ")", "\n", "", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "mask", "=", "tf", ".", "where", "(", "tf", ".", "is_nan", "(", "mask", ")", ",", "tf", ".", "zeros_like", "(", "mask", ")", ",", "mask", ")", "\n", "loss", "=", "tf", ".", "square", "(", "tf", ".", "subtract", "(", "preds", ",", "labels", ")", ")", "\n", "loss", "=", "loss", "*", "mask", "\n", "loss", "=", "tf", ".", "where", "(", "tf", ".", "is_nan", "(", "loss", ")", ",", "tf", ".", "zeros_like", "(", "loss", ")", ",", "loss", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mae_tf": [[26, 45], ["numpy.isnan", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.where", "tensorflow.abs", "tensorflow.where", "tensorflow.reduce_mean", "tensorflow.not_equal", "tensorflow.is_nan", "tensorflow.zeros_like", "tensorflow.subtract", "tensorflow.is_nan", "tensorflow.zeros_like", "tensorflow.is_nan"], "function", ["None"], ["", "def", "masked_mae_tf", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "\"\"\"\n    Accuracy with masking.\n    :param preds:\n    :param labels:\n    :param null_val:\n    :return:\n    \"\"\"", "\n", "if", "np", ".", "isnan", "(", "null_val", ")", ":", "\n", "        ", "mask", "=", "~", "tf", ".", "is_nan", "(", "labels", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "tf", ".", "not_equal", "(", "labels", ",", "null_val", ")", "\n", "", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "tf", ".", "float32", ")", "\n", "mask", "/=", "tf", ".", "reduce_mean", "(", "mask", ")", "\n", "mask", "=", "tf", ".", "where", "(", "tf", ".", "is_nan", "(", "mask", ")", ",", "tf", ".", "zeros_like", "(", "mask", ")", ",", "mask", ")", "\n", "loss", "=", "tf", ".", "abs", "(", "tf", ".", "subtract", "(", "preds", ",", "labels", ")", ")", "\n", "loss", "=", "loss", "*", "mask", "\n", "loss", "=", "tf", ".", "where", "(", "tf", ".", "is_nan", "(", "loss", ")", ",", "tf", ".", "zeros_like", "(", "loss", ")", ",", "loss", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_rmse_tf": [[47, 56], ["tensorflow.sqrt", "metrics.masked_mse_tf"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mse_tf"], ["", "def", "masked_rmse_tf", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "\"\"\"\n    Accuracy with masking.\n    :param preds:\n    :param labels:\n    :param null_val:\n    :return:\n    \"\"\"", "\n", "return", "tf", ".", "sqrt", "(", "masked_mse_tf", "(", "preds", "=", "preds", ",", "labels", "=", "labels", ",", "null_val", "=", "null_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_rmse_np": [[58, 60], ["numpy.sqrt", "metrics.masked_mse_np"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mse_np"], ["", "def", "masked_rmse_np", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "masked_mse_np", "(", "preds", "=", "preds", ",", "labels", "=", "labels", ",", "null_val", "=", "null_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mse_np": [[62, 73], ["numpy.errstate", "numpy.isnan", "np.not_equal.astype", "numpy.mean", "numpy.square().astype", "numpy.nan_to_num", "numpy.mean", "numpy.not_equal", "numpy.isnan", "numpy.square", "numpy.subtract"], "function", ["None"], ["", "def", "masked_mse_np", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "null_val", ")", ":", "\n", "            ", "mask", "=", "~", "np", ".", "isnan", "(", "labels", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "not_equal", "(", "labels", ",", "null_val", ")", "\n", "", "mask", "=", "mask", ".", "astype", "(", "'float32'", ")", "\n", "mask", "/=", "np", ".", "mean", "(", "mask", ")", "\n", "rmse", "=", "np", ".", "square", "(", "np", ".", "subtract", "(", "preds", ",", "labels", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "rmse", "=", "np", ".", "nan_to_num", "(", "rmse", "*", "mask", ")", "\n", "return", "np", ".", "mean", "(", "rmse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mae_np": [[75, 86], ["numpy.errstate", "numpy.isnan", "np.not_equal.astype", "numpy.mean", "numpy.abs().astype", "numpy.nan_to_num", "numpy.mean", "numpy.not_equal", "numpy.isnan", "numpy.abs", "numpy.subtract"], "function", ["None"], ["", "", "def", "masked_mae_np", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "null_val", ")", ":", "\n", "            ", "mask", "=", "~", "np", ".", "isnan", "(", "labels", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "not_equal", "(", "labels", ",", "null_val", ")", "\n", "", "mask", "=", "mask", ".", "astype", "(", "'float32'", ")", "\n", "mask", "/=", "np", ".", "mean", "(", "mask", ")", "\n", "mae", "=", "np", ".", "abs", "(", "np", ".", "subtract", "(", "preds", ",", "labels", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "mae", "=", "np", ".", "nan_to_num", "(", "mae", "*", "mask", ")", "\n", "return", "np", ".", "mean", "(", "mae", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mape_np": [[88, 99], ["numpy.errstate", "numpy.isnan", "np.not_equal.astype", "numpy.mean", "numpy.abs", "numpy.nan_to_num", "numpy.mean", "numpy.not_equal", "numpy.divide", "numpy.isnan", "numpy.subtract().astype", "numpy.subtract"], "function", ["None"], ["", "", "def", "masked_mape_np", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "null_val", ")", ":", "\n", "            ", "mask", "=", "~", "np", ".", "isnan", "(", "labels", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "not_equal", "(", "labels", ",", "null_val", ")", "\n", "", "mask", "=", "mask", ".", "astype", "(", "'float32'", ")", "\n", "mask", "/=", "np", ".", "mean", "(", "mask", ")", "\n", "mape", "=", "np", ".", "abs", "(", "np", ".", "divide", "(", "np", ".", "subtract", "(", "preds", ",", "labels", ")", ".", "astype", "(", "'float32'", ")", ",", "labels", ")", ")", "\n", "mape", "=", "np", ".", "nan_to_num", "(", "mask", "*", "mape", ")", "\n", "return", "np", ".", "mean", "(", "mape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mse_loss": [[102, 110], ["metrics.masked_mse_tf", "scaler.inverse_transform", "scaler.inverse_transform"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mse_tf", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.inverse_transform"], ["", "", "def", "masked_mse_loss", "(", "scaler", ",", "null_val", ")", ":", "\n", "    ", "def", "loss", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "if", "scaler", ":", "\n", "            ", "preds", "=", "scaler", ".", "inverse_transform", "(", "preds", ")", "\n", "labels", "=", "scaler", ".", "inverse_transform", "(", "labels", ")", "\n", "", "return", "masked_mse_tf", "(", "preds", "=", "preds", ",", "labels", "=", "labels", ",", "null_val", "=", "null_val", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_rmse_loss": [[112, 120], ["metrics.masked_rmse_tf", "scaler.inverse_transform", "scaler.inverse_transform"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_rmse_tf", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.inverse_transform"], ["", "def", "masked_rmse_loss", "(", "scaler", ",", "null_val", ")", ":", "\n", "    ", "def", "loss", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "if", "scaler", ":", "\n", "            ", "preds", "=", "scaler", ".", "inverse_transform", "(", "preds", ")", "\n", "labels", "=", "scaler", ".", "inverse_transform", "(", "labels", ")", "\n", "", "return", "masked_rmse_tf", "(", "preds", "=", "preds", ",", "labels", "=", "labels", ",", "null_val", "=", "null_val", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mae_loss": [[122, 131], ["metrics.masked_mae_tf", "scaler.inverse_transform", "scaler.inverse_transform"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mae_tf", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.inverse_transform"], ["", "def", "masked_mae_loss", "(", "scaler", ",", "null_val", ")", ":", "\n", "    ", "def", "loss", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "if", "scaler", ":", "\n", "            ", "preds", "=", "scaler", ".", "inverse_transform", "(", "preds", ")", "\n", "labels", "=", "scaler", ".", "inverse_transform", "(", "labels", ")", "\n", "", "mae", "=", "masked_mae_tf", "(", "preds", "=", "preds", ",", "labels", "=", "labels", ",", "null_val", "=", "null_val", ")", "\n", "return", "mae", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.calculate_metrics": [[133, 146], ["metrics.masked_mape_np", "metrics.masked_mae_np", "metrics.masked_rmse_np", "df_pred.as_matrix", "df_test.as_matrix", "df_pred.as_matrix", "df_test.as_matrix", "df_pred.as_matrix", "df_test.as_matrix"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mape_np", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mae_np", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_rmse_np"], ["", "def", "calculate_metrics", "(", "df_pred", ",", "df_test", ",", "null_val", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the MAE, MAPE, RMSE\n    :param df_pred:\n    :param df_test:\n    :param null_val:\n    :return:\n    \"\"\"", "\n", "mape", "=", "masked_mape_np", "(", "preds", "=", "df_pred", ".", "as_matrix", "(", ")", ",", "labels", "=", "df_test", ".", "as_matrix", "(", ")", ",", "null_val", "=", "null_val", ")", "\n", "mae", "=", "masked_mae_np", "(", "preds", "=", "df_pred", ".", "as_matrix", "(", ")", ",", "labels", "=", "df_test", ".", "as_matrix", "(", ")", ",", "null_val", "=", "null_val", ")", "\n", "rmse", "=", "masked_rmse_np", "(", "preds", "=", "df_pred", ".", "as_matrix", "(", ")", ",", "labels", "=", "df_test", ".", "as_matrix", "(", ")", ",", "null_val", "=", "null_val", ")", "\n", "\n", "return", "mae", ",", "mape", ",", "rmse", "\n", "", ""]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.DataLoader.__init__": [[13, 35], ["len", "int", "numpy.repeat", "numpy.repeat", "numpy.concatenate", "numpy.concatenate", "numpy.random.permutation", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "xs", ",", "ys", ",", "batch_size", ",", "pad_with_last_sample", "=", "True", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param xs:\n        :param ys:\n        :param batch_size:\n        :param pad_with_last_sample: pad with the last sample to make number of samples divisible to batch_size.\n        \"\"\"", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "current_ind", "=", "0", "\n", "if", "pad_with_last_sample", ":", "\n", "            ", "num_padding", "=", "(", "batch_size", "-", "(", "len", "(", "xs", ")", "%", "batch_size", ")", ")", "%", "batch_size", "\n", "x_padding", "=", "np", ".", "repeat", "(", "xs", "[", "-", "1", ":", "]", ",", "num_padding", ",", "axis", "=", "0", ")", "\n", "y_padding", "=", "np", ".", "repeat", "(", "ys", "[", "-", "1", ":", "]", ",", "num_padding", ",", "axis", "=", "0", ")", "\n", "xs", "=", "np", ".", "concatenate", "(", "[", "xs", ",", "x_padding", "]", ",", "axis", "=", "0", ")", "\n", "ys", "=", "np", ".", "concatenate", "(", "[", "ys", ",", "y_padding", "]", ",", "axis", "=", "0", ")", "\n", "", "self", ".", "size", "=", "len", "(", "xs", ")", "\n", "self", ".", "num_batch", "=", "int", "(", "self", ".", "size", "//", "self", ".", "batch_size", ")", "\n", "if", "shuffle", ":", "\n", "            ", "permutation", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "size", ")", "\n", "xs", ",", "ys", "=", "xs", "[", "permutation", "]", ",", "ys", "[", "permutation", "]", "\n", "", "self", ".", "xs", "=", "xs", "\n", "self", ".", "ys", "=", "ys", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.DataLoader.get_iterator": [[36, 49], ["utils.DataLoader.get_iterator._wrapper"], "methods", ["None"], ["", "def", "get_iterator", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_ind", "=", "0", "\n", "\n", "def", "_wrapper", "(", ")", ":", "\n", "            ", "while", "self", ".", "current_ind", "<", "self", ".", "num_batch", ":", "\n", "                ", "start_ind", "=", "self", ".", "batch_size", "*", "self", ".", "current_ind", "\n", "end_ind", "=", "min", "(", "self", ".", "size", ",", "self", ".", "batch_size", "*", "(", "self", ".", "current_ind", "+", "1", ")", ")", "\n", "x_i", "=", "self", ".", "xs", "[", "start_ind", ":", "end_ind", ",", "...", "]", "\n", "y_i", "=", "self", ".", "ys", "[", "start_ind", ":", "end_ind", ",", "...", "]", "\n", "yield", "(", "x_i", ",", "y_i", ")", "\n", "self", ".", "current_ind", "+=", "1", "\n", "\n", "", "", "return", "_wrapper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.__init__": [[55, 58], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.transform": [[59, 61], ["None"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "(", "data", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.inverse_transform": [[62, 64], ["None"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "(", "data", "*", "self", ".", "std", ")", "+", "self", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.add_simple_summary": [[66, 81], ["zip", "tensorflow.Summary", "tf.Summary.value.add", "writer.add_summary"], "function", ["None"], ["", "", "def", "add_simple_summary", "(", "writer", ",", "names", ",", "values", ",", "global_step", ")", ":", "\n", "    ", "\"\"\"\n    Writes summary for a list of scalars.\n    :param writer:\n    :param names:\n    :param values:\n    :param global_step:\n    :return:\n    \"\"\"", "\n", "for", "name", ",", "value", "in", "zip", "(", "names", ",", "values", ")", ":", "\n", "        ", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "summary_value", "=", "summary", ".", "value", ".", "add", "(", ")", "\n", "summary_value", ".", "simple_value", "=", "value", "\n", "summary_value", ".", "tag", "=", "name", "\n", "writer", ".", "add_summary", "(", "summary", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.calculate_normalized_laplacian": [[83, 98], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "normalized_laplacian.todense.todense", "sp.coo_matrix.sum", "scipy.eye", "sp.coo_matrix.dot().transpose().dot().tocoo", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["None"], ["", "", "def", "calculate_normalized_laplacian", "(", "adj", ")", ":", "\n", "    ", "\"\"\"\n    # L = D^-1/2 (D-A) D^-1/2 = I - D^-1/2 A D^-1/2\n    # D = diag(A 1)\n    :param adj:\n    :return:\n    \"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "d", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "d", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "normalized_laplacian", "=", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "-", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "normalized_laplacian", "=", "normalized_laplacian", ".", "todense", "(", ")", "#SC usually not sparse ", "\n", "return", "normalized_laplacian", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.calculate_random_walk_matrix": [[100, 109], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot().tocoo", "random_walk_mx.todense.todense", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.diags.dot"], "function", ["None"], ["", "def", "calculate_random_walk_matrix", "(", "adj_mx", ")", ":", "\n", "    ", "adj_mx", "=", "sp", ".", "coo_matrix", "(", "adj_mx", ")", "\n", "d", "=", "np", ".", "array", "(", "adj_mx", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "d", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "random_walk_mx", "=", "d_mat_inv", ".", "dot", "(", "adj_mx", ")", ".", "tocoo", "(", ")", "\n", "random_walk_mx", "=", "random_walk_mx", ".", "todense", "(", ")", "#SC usually not sparse", "\n", "return", "random_walk_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.calculate_reverse_random_walk_matrix": [[111, 113], ["utils.calculate_random_walk_matrix", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.calculate_random_walk_matrix"], ["", "def", "calculate_reverse_random_walk_matrix", "(", "adj_mx", ")", ":", "\n", "    ", "return", "calculate_random_walk_matrix", "(", "np", ".", "transpose", "(", "adj_mx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.calculate_scaled_laplacian": [[115, 128], ["utils.calculate_normalized_laplacian", "scipy.csr_matrix", "scipy.identity", "L.todense.todense", "L.todense.astype", "numpy.maximum.reduce", "scipy.sparse.linalg.eigsh"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.calculate_normalized_laplacian"], ["", "def", "calculate_scaled_laplacian", "(", "adj_mx", ",", "lambda_max", "=", "2", ",", "undirected", "=", "True", ")", ":", "\n", "    ", "if", "undirected", ":", "\n", "        ", "adj_mx", "=", "np", ".", "maximum", ".", "reduce", "(", "[", "adj_mx", ",", "adj_mx", ".", "T", "]", ")", "\n", "", "L", "=", "calculate_normalized_laplacian", "(", "adj_mx", ")", "\n", "if", "lambda_max", "is", "None", ":", "\n", "        ", "lambda_max", ",", "_", "=", "linalg", ".", "eigsh", "(", "L", ",", "1", ",", "which", "=", "'LM'", ")", "\n", "lambda_max", "=", "lambda_max", "[", "0", "]", "\n", "", "L", "=", "sp", ".", "csr_matrix", "(", "L", ")", "\n", "M", ",", "_", "=", "L", ".", "shape", "\n", "I", "=", "sp", ".", "identity", "(", "M", ",", "format", "=", "'csr'", ",", "dtype", "=", "L", ".", "dtype", ")", "\n", "L", "=", "(", "2", "/", "lambda_max", "*", "L", ")", "-", "I", "\n", "L", "=", "L", ".", "todense", "(", ")", "#SC usually not sparse", "\n", "return", "L", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.config_logging": [[130, 147], ["logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.basicConfig", "os.makedirs", "os.path.join"], "function", ["None"], ["", "def", "config_logging", "(", "log_dir", ",", "log_filename", "=", "'info.log'", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "# Add file handler and stdout handler", "\n", "    ", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "# Create the log directory if necessary.", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "pass", "\n", "", "file_handler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "log_filename", ")", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "file_handler", ".", "setLevel", "(", "level", "=", "level", ")", "\n", "# Add console handler.", "\n", "console_formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(levelname)s - %(message)s'", ")", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setFormatter", "(", "console_formatter", ")", "\n", "console_handler", ".", "setLevel", "(", "level", "=", "level", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "file_handler", ",", "console_handler", "]", ",", "level", "=", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.get_logger": [[149, 165], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.info", "os.path.join"], "function", ["None"], ["", "def", "get_logger", "(", "log_dir", ",", "name", ",", "log_filename", "=", "'info.log'", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "# Add file handler and stdout handler", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "log_filename", ")", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "# Add console handler.", "\n", "console_formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(levelname)s - %(message)s'", ")", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setFormatter", "(", "console_formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "# Add google cloud log handler", "\n", "logger", ".", "info", "(", "'Log directory: %s'", ",", "log_dir", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.get_total_trainable_parameter_size": [[167, 177], ["tensorflow.trainable_variables", "numpy.product", "variable.get_shape"], "function", ["None"], ["", "def", "get_total_trainable_parameter_size", "(", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the total number of trainable parameters in the current graph.\n    :return:\n    \"\"\"", "\n", "total_parameters", "=", "0", "\n", "for", "variable", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "# shape is an array of tf.Dimension", "\n", "        ", "total_parameters", "+=", "np", ".", "product", "(", "[", "x", ".", "value", "for", "x", "in", "variable", ".", "get_shape", "(", ")", "]", ")", "\n", "", "return", "total_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.load_dataset": [[179, 196], ["utils.StandardScaler", "utils.DataLoader", "utils.DataLoader", "utils.DataLoader", "numpy.load", "utils.StandardScaler.transform", "utils.StandardScaler.transform", "os.path.join", "[].mean", "[].std"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.load", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.transform", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.transform"], ["", "def", "load_dataset", "(", "dataset_dir", ",", "batch_size", ",", "test_batch_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "for", "category", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "        ", "cat_data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "category", "+", "'.npz'", ")", ")", "\n", "data", "[", "'x_'", "+", "category", "]", "=", "cat_data", "[", "'x'", "]", "\n", "data", "[", "'y_'", "+", "category", "]", "=", "cat_data", "[", "'y'", "]", "\n", "", "scaler", "=", "StandardScaler", "(", "mean", "=", "data", "[", "'x_train'", "]", "[", "...", ",", "0", "]", ".", "mean", "(", ")", ",", "std", "=", "data", "[", "'x_train'", "]", "[", "...", ",", "0", "]", ".", "std", "(", ")", ")", "\n", "# Data format", "\n", "for", "category", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "        ", "data", "[", "'x_'", "+", "category", "]", "[", "...", ",", "0", "]", "=", "scaler", ".", "transform", "(", "data", "[", "'x_'", "+", "category", "]", "[", "...", ",", "0", "]", ")", "\n", "data", "[", "'y_'", "+", "category", "]", "[", "...", ",", "0", "]", "=", "scaler", ".", "transform", "(", "data", "[", "'y_'", "+", "category", "]", "[", "...", ",", "0", "]", ")", "\n", "", "data", "[", "'train_loader'", "]", "=", "DataLoader", "(", "data", "[", "'x_train'", "]", ",", "data", "[", "'y_train'", "]", ",", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "data", "[", "'val_loader'", "]", "=", "DataLoader", "(", "data", "[", "'x_val'", "]", ",", "data", "[", "'y_val'", "]", ",", "test_batch_size", ",", "shuffle", "=", "False", ")", "\n", "data", "[", "'test_loader'", "]", "=", "DataLoader", "(", "data", "[", "'x_test'", "]", ",", "data", "[", "'y_test'", "]", ",", "test_batch_size", ",", "shuffle", "=", "False", ")", "\n", "data", "[", "'scaler'", "]", "=", "scaler", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.load_graph_data": [[197, 205], ["numpy.load", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.load"], ["", "def", "load_graph_data", "(", "config", ")", ":", "\n", "    ", "'''\n    Load structural connectivity matrix from .npy file.\n    Read path from config file.\n    '''", "\n", "adj_mx", "=", "np", ".", "load", "(", "config", "[", "'data'", "]", "[", "'graph_filename'", "]", ")", "\n", "adj_mx", "=", "np", ".", "float32", "(", "adj_mx", ")", "\n", "return", "adj_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.load_pickle": [[206, 217], ["open", "pickle.load", "print", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.load", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.load"], ["", "def", "load_pickle", "(", "pickle_file", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "pickle_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pickle_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "except", "UnicodeDecodeError", "as", "e", ":", "\n", "        ", "with", "open", "(", "pickle_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pickle_data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'Unable to load data '", ",", "pickle_file", ",", "':'", ",", "e", ")", "\n", "raise", "\n", "", "return", "pickle_data", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.print_config": [[219, 229], ["config_file.items", "print", "isinstance", "value.items", "print", "print", "print"], "function", ["None"], ["", "def", "print_config", "(", "config_file", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "config_file", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "'###'", ",", "key", ",", "'###'", ")", "\n", "# Iterate over the nested dictionary.", "\n", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "for", "param", ",", "value_2", "in", "value", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "param", ",", "':'", ",", "value_2", ",", "end", "=", "\" | \"", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "value", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.AMSGrad.AMSGrad.__init__": [[16, 30], ["tensorflow.python.training.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "learning_rate", "=", "0.01", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.99", ",", "epsilon", "=", "1e-8", ",", "use_locking", "=", "False", ",", "name", "=", "\"AMSGrad\"", ")", ":", "\n", "        ", "super", "(", "AMSGrad", ",", "self", ")", ".", "__init__", "(", "use_locking", ",", "name", ")", "\n", "self", ".", "_lr", "=", "learning_rate", "\n", "self", ".", "_beta1", "=", "beta1", "\n", "self", ".", "_beta2", "=", "beta2", "\n", "self", ".", "_epsilon", "=", "epsilon", "\n", "\n", "self", ".", "_lr_t", "=", "None", "\n", "self", ".", "_beta1_t", "=", "None", "\n", "self", ".", "_beta2_t", "=", "None", "\n", "self", ".", "_epsilon_t", "=", "None", "\n", "\n", "self", ".", "_beta1_power", "=", "None", "\n", "self", ".", "_beta2_power", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.AMSGrad.AMSGrad._create_slots": [[31, 47], ["min", "tensorflow.python.eager.context.in_graph_mode", "AMSGrad.AMSGrad._zeros_slot", "AMSGrad.AMSGrad._zeros_slot", "AMSGrad.AMSGrad._zeros_slot", "tensorflow.python.framework.ops.colocate_with", "tensorflow.python.ops.variable_scope.variable", "tensorflow.python.ops.variable_scope.variable"], "methods", ["None"], ["", "def", "_create_slots", "(", "self", ",", "var_list", ")", ":", "\n", "        ", "first_var", "=", "min", "(", "var_list", ",", "key", "=", "lambda", "x", ":", "x", ".", "name", ")", "\n", "\n", "create_new", "=", "self", ".", "_beta1_power", "is", "None", "\n", "if", "not", "create_new", "and", "context", ".", "in_graph_mode", "(", ")", ":", "\n", "            ", "create_new", "=", "(", "self", ".", "_beta1_power", ".", "graph", "is", "not", "first_var", ".", "graph", ")", "\n", "\n", "", "if", "create_new", ":", "\n", "            ", "with", "ops", ".", "colocate_with", "(", "first_var", ")", ":", "\n", "                ", "self", ".", "_beta1_power", "=", "variable_scope", ".", "variable", "(", "self", ".", "_beta1", ",", "name", "=", "\"beta1_power\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_beta2_power", "=", "variable_scope", ".", "variable", "(", "self", ".", "_beta2", ",", "name", "=", "\"beta2_power\"", ",", "trainable", "=", "False", ")", "\n", "# Create slots for the first and second moments.", "\n", "", "", "for", "v", "in", "var_list", ":", "\n", "            ", "self", ".", "_zeros_slot", "(", "v", ",", "\"m\"", ",", "self", ".", "_name", ")", "\n", "self", ".", "_zeros_slot", "(", "v", ",", "\"v\"", ",", "self", ".", "_name", ")", "\n", "self", ".", "_zeros_slot", "(", "v", ",", "\"vhat\"", ",", "self", ".", "_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.AMSGrad.AMSGrad._prepare": [[48, 53], ["tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor"], "methods", ["None"], ["", "", "def", "_prepare", "(", "self", ")", ":", "\n", "        ", "self", ".", "_lr_t", "=", "ops", ".", "convert_to_tensor", "(", "self", ".", "_lr", ")", "\n", "self", ".", "_beta1_t", "=", "ops", ".", "convert_to_tensor", "(", "self", ".", "_beta1", ")", "\n", "self", ".", "_beta2_t", "=", "ops", ".", "convert_to_tensor", "(", "self", ".", "_beta2", ")", "\n", "self", ".", "_epsilon_t", "=", "ops", ".", "convert_to_tensor", "(", "self", ".", "_epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.AMSGrad.AMSGrad._apply_dense": [[54, 81], ["tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.state_ops.assign", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.state_ops.assign", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.state_ops.assign", "tensorflow.python.ops.math_ops.sqrt", "tensorflow.python.ops.state_ops.assign_sub", "tensorflow.python.ops.control_flow_ops.group", "tensorflow.python.ops.math_ops.maximum", "tensorflow.python.ops.math_ops.sqrt"], "methods", ["None"], ["", "def", "_apply_dense", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "        ", "beta1_power", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta1_power", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_power", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta2_power", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "lr_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_lr_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta1_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta1_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta2_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "epsilon_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_epsilon_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "\n", "lr", "=", "(", "lr_t", "*", "math_ops", ".", "sqrt", "(", "1", "-", "beta2_power", ")", "/", "(", "1", "-", "beta1_power", ")", ")", "\n", "\n", "# m_t = beta1 * m + (1 - beta1) * g_t", "\n", "m", "=", "self", ".", "get_slot", "(", "var", ",", "\"m\"", ")", "\n", "m_scaled_g_values", "=", "grad", "*", "(", "1", "-", "beta1_t", ")", "\n", "m_t", "=", "state_ops", ".", "assign", "(", "m", ",", "beta1_t", "*", "m", "+", "m_scaled_g_values", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "\n", "# v_t = beta2 * v + (1 - beta2) * (g_t * g_t)", "\n", "v", "=", "self", ".", "get_slot", "(", "var", ",", "\"v\"", ")", "\n", "v_scaled_g_values", "=", "(", "grad", "*", "grad", ")", "*", "(", "1", "-", "beta2_t", ")", "\n", "v_t", "=", "state_ops", ".", "assign", "(", "v", ",", "beta2_t", "*", "v", "+", "v_scaled_g_values", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "\n", "# amsgrad", "\n", "vhat", "=", "self", ".", "get_slot", "(", "var", ",", "\"vhat\"", ")", "\n", "vhat_t", "=", "state_ops", ".", "assign", "(", "vhat", ",", "math_ops", ".", "maximum", "(", "v_t", ",", "vhat", ")", ")", "\n", "v_sqrt", "=", "math_ops", ".", "sqrt", "(", "vhat_t", ")", "\n", "\n", "var_update", "=", "state_ops", ".", "assign_sub", "(", "var", ",", "lr", "*", "m_t", "/", "(", "v_sqrt", "+", "epsilon_t", ")", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "return", "control_flow_ops", ".", "group", "(", "*", "[", "var_update", ",", "m_t", ",", "v_t", ",", "vhat_t", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.AMSGrad.AMSGrad._resource_apply_dense": [[82, 110], ["tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.state_ops.assign", "tensorflow.python.ops.state_ops.assign", "tensorflow.python.ops.state_ops.assign", "tensorflow.python.ops.math_ops.sqrt", "tensorflow.python.ops.state_ops.assign_sub", "tensorflow.python.ops.control_flow_ops.group", "AMSGrad.AMSGrad.get_slot", "AMSGrad.AMSGrad.get_slot", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.math_ops.maximum", "tensorflow.python.ops.math_ops.sqrt"], "methods", ["None"], ["", "def", "_resource_apply_dense", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "        ", "var", "=", "var", ".", "handle", "\n", "beta1_power", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta1_power", ",", "grad", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_power", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta2_power", ",", "grad", ".", "dtype", ".", "base_dtype", ")", "\n", "lr_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_lr_t", ",", "grad", ".", "dtype", ".", "base_dtype", ")", "\n", "beta1_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta1_t", ",", "grad", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta2_t", ",", "grad", ".", "dtype", ".", "base_dtype", ")", "\n", "epsilon_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_epsilon_t", ",", "grad", ".", "dtype", ".", "base_dtype", ")", "\n", "\n", "lr", "=", "(", "lr_t", "*", "math_ops", ".", "sqrt", "(", "1", "-", "beta2_power", ")", "/", "(", "1", "-", "beta1_power", ")", ")", "\n", "\n", "# m_t = beta1 * m + (1 - beta1) * g_t", "\n", "m", "=", "self", ".", "get_slot", "(", "var", ",", "\"m\"", ")", ".", "handle", "\n", "m_scaled_g_values", "=", "grad", "*", "(", "1", "-", "beta1_t", ")", "\n", "m_t", "=", "state_ops", ".", "assign", "(", "m", ",", "beta1_t", "*", "m", "+", "m_scaled_g_values", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "\n", "# v_t = beta2 * v + (1 - beta2) * (g_t * g_t)", "\n", "v", "=", "self", ".", "get_slot", "(", "var", ",", "\"v\"", ")", ".", "handle", "\n", "v_scaled_g_values", "=", "(", "grad", "*", "grad", ")", "*", "(", "1", "-", "beta2_t", ")", "\n", "v_t", "=", "state_ops", ".", "assign", "(", "v", ",", "beta2_t", "*", "v", "+", "v_scaled_g_values", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "\n", "# amsgrad", "\n", "vhat", "=", "self", ".", "get_slot", "(", "var", ",", "\"vhat\"", ")", ".", "handle", "\n", "vhat_t", "=", "state_ops", ".", "assign", "(", "vhat", ",", "math_ops", ".", "maximum", "(", "v_t", ",", "vhat", ")", ")", "\n", "v_sqrt", "=", "math_ops", ".", "sqrt", "(", "vhat_t", ")", "\n", "\n", "var_update", "=", "state_ops", ".", "assign_sub", "(", "var", ",", "lr", "*", "m_t", "/", "(", "v_sqrt", "+", "epsilon_t", ")", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "return", "control_flow_ops", ".", "group", "(", "*", "[", "var_update", ",", "m_t", ",", "v_t", ",", "vhat_t", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.AMSGrad.AMSGrad._apply_sparse_shared": [[111, 141], ["tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.state_ops.assign", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.state_ops.assign", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.state_ops.assign", "tensorflow.python.ops.math_ops.sqrt", "tensorflow.python.ops.state_ops.assign_sub", "tensorflow.python.ops.control_flow_ops.group", "tensorflow.python.framework.ops.control_dependencies", "scatter_add", "tensorflow.python.framework.ops.control_dependencies", "scatter_add", "tensorflow.python.ops.math_ops.maximum", "tensorflow.python.ops.math_ops.sqrt"], "methods", ["None"], ["", "def", "_apply_sparse_shared", "(", "self", ",", "grad", ",", "var", ",", "indices", ",", "scatter_add", ")", ":", "\n", "        ", "beta1_power", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta1_power", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_power", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta2_power", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "lr_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_lr_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta1_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta1_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta2_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "epsilon_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_epsilon_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "\n", "lr", "=", "(", "lr_t", "*", "math_ops", ".", "sqrt", "(", "1", "-", "beta2_power", ")", "/", "(", "1", "-", "beta1_power", ")", ")", "\n", "\n", "# m_t = beta1 * m + (1 - beta1) * g_t", "\n", "m", "=", "self", ".", "get_slot", "(", "var", ",", "\"m\"", ")", "\n", "m_scaled_g_values", "=", "grad", "*", "(", "1", "-", "beta1_t", ")", "\n", "m_t", "=", "state_ops", ".", "assign", "(", "m", ",", "m", "*", "beta1_t", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "with", "ops", ".", "control_dependencies", "(", "[", "m_t", "]", ")", ":", "\n", "            ", "m_t", "=", "scatter_add", "(", "m", ",", "indices", ",", "m_scaled_g_values", ")", "\n", "\n", "# v_t = beta2 * v + (1 - beta2) * (g_t * g_t)", "\n", "", "v", "=", "self", ".", "get_slot", "(", "var", ",", "\"v\"", ")", "\n", "v_scaled_g_values", "=", "(", "grad", "*", "grad", ")", "*", "(", "1", "-", "beta2_t", ")", "\n", "v_t", "=", "state_ops", ".", "assign", "(", "v", ",", "v", "*", "beta2_t", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "with", "ops", ".", "control_dependencies", "(", "[", "v_t", "]", ")", ":", "\n", "            ", "v_t", "=", "scatter_add", "(", "v", ",", "indices", ",", "v_scaled_g_values", ")", "\n", "\n", "# amsgrad", "\n", "", "vhat", "=", "self", ".", "get_slot", "(", "var", ",", "\"vhat\"", ")", "\n", "vhat_t", "=", "state_ops", ".", "assign", "(", "vhat", ",", "math_ops", ".", "maximum", "(", "v_t", ",", "vhat", ")", ")", "\n", "v_sqrt", "=", "math_ops", ".", "sqrt", "(", "vhat_t", ")", "\n", "var_update", "=", "state_ops", ".", "assign_sub", "(", "var", ",", "lr", "*", "m_t", "/", "(", "v_sqrt", "+", "epsilon_t", ")", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "return", "control_flow_ops", ".", "group", "(", "*", "[", "var_update", ",", "m_t", ",", "v_t", ",", "vhat_t", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.AMSGrad.AMSGrad._apply_sparse": [[142, 147], ["AMSGrad.AMSGrad._apply_sparse_shared", "tensorflow.python.ops.state_ops.scatter_add"], "methods", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.AMSGrad.AMSGrad._apply_sparse_shared"], ["", "def", "_apply_sparse", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "        ", "return", "self", ".", "_apply_sparse_shared", "(", "\n", "grad", ".", "values", ",", "var", ",", "grad", ".", "indices", ",", "\n", "lambda", "x", ",", "i", ",", "v", ":", "state_ops", ".", "scatter_add", "(", "# pylint: disable=g-long-lambda", "\n", "x", ",", "i", ",", "v", ",", "use_locking", "=", "self", ".", "_use_locking", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.AMSGrad.AMSGrad._resource_scatter_add": [[148, 152], ["tensorflow.python.framework.ops.control_dependencies", "x.value", "tensorflow.python.ops.resource_variable_ops.resource_scatter_add"], "methods", ["None"], ["", "def", "_resource_scatter_add", "(", "self", ",", "x", ",", "i", ",", "v", ")", ":", "\n", "        ", "with", "ops", ".", "control_dependencies", "(", "\n", "[", "resource_variable_ops", ".", "resource_scatter_add", "(", "x", ".", "handle", ",", "i", ",", "v", ")", "]", ")", ":", "\n", "            ", "return", "x", ".", "value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.AMSGrad.AMSGrad._resource_apply_sparse": [[153, 156], ["AMSGrad.AMSGrad._apply_sparse_shared"], "methods", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.AMSGrad.AMSGrad._apply_sparse_shared"], ["", "", "def", "_resource_apply_sparse", "(", "self", ",", "grad", ",", "var", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "_apply_sparse_shared", "(", "\n", "grad", ",", "var", ",", "indices", ",", "self", ".", "_resource_scatter_add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.AMSGrad.AMSGrad._finish": [[157, 169], ["tensorflow.python.ops.control_flow_ops.group", "tensorflow.python.framework.ops.control_dependencies", "tensorflow.python.framework.ops.colocate_with", "AMSGrad.AMSGrad._beta1_power.assign", "AMSGrad.AMSGrad._beta2_power.assign"], "methods", ["None"], ["", "def", "_finish", "(", "self", ",", "update_ops", ",", "name_scope", ")", ":", "\n", "# Update the power accumulators.", "\n", "        ", "with", "ops", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "            ", "with", "ops", ".", "colocate_with", "(", "self", ".", "_beta1_power", ")", ":", "\n", "                ", "update_beta1", "=", "self", ".", "_beta1_power", ".", "assign", "(", "\n", "self", ".", "_beta1_power", "*", "self", ".", "_beta1_t", ",", "\n", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "update_beta2", "=", "self", ".", "_beta2_power", ".", "assign", "(", "\n", "self", ".", "_beta2_power", "*", "self", ".", "_beta2_t", ",", "\n", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "", "", "return", "control_flow_ops", ".", "group", "(", "*", "update_ops", "+", "[", "update_beta1", ",", "update_beta2", "]", ",", "\n", "name", "=", "name_scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_model.DCRNNModel.__init__": [[15, 84], ["int", "int", "model_kwargs.get", "int", "float", "int", "int", "int", "int", "bool", "int", "int", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.zeros", "model.dcrnn_cell.DCGRUCell", "model.dcrnn_cell.DCGRUCell", "tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.train.get_or_create_global_step", "tensorflow.stack", "tensorflow.reshape", "tensorflow.summary.merge_all", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "tensorflow.variable_scope", "tensorflow.unstack", "tensorflow.unstack", "tensorflow.unstack.insert", "tensorflow.contrib.rnn.static_rnn", "tensorflow.contrib.legacy_seq2seq.rnn_decoder", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.random_uniform", "dcrnn_model.DCRNNModel._compute_sampling_threshold", "tensorflow.cond", "tensorflow.less"], "methods", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_model.DCRNNModel._compute_sampling_threshold"], ["    ", "def", "__init__", "(", "self", ",", "is_training", ",", "batch_size", ",", "scaler", ",", "adj_mx", ",", "**", "model_kwargs", ")", ":", "\n", "# Scaler for data normalization.", "\n", "        ", "self", ".", "_scaler", "=", "scaler", "\n", "\n", "# Train and loss", "\n", "self", ".", "_loss", "=", "None", "\n", "self", ".", "_mae", "=", "None", "\n", "self", ".", "_train_op", "=", "None", "\n", "\n", "max_diffusion_step", "=", "int", "(", "model_kwargs", ".", "get", "(", "'max_diffusion_step'", ",", "2", ")", ")", "\n", "cl_decay_steps", "=", "int", "(", "model_kwargs", ".", "get", "(", "'cl_decay_steps'", ",", "1000", ")", ")", "\n", "filter_type", "=", "model_kwargs", ".", "get", "(", "'filter_type'", ",", "'laplacian'", ")", "\n", "horizon", "=", "int", "(", "model_kwargs", ".", "get", "(", "'horizon'", ",", "1", ")", ")", "\n", "max_grad_norm", "=", "float", "(", "model_kwargs", ".", "get", "(", "'max_grad_norm'", ",", "5.0", ")", ")", "\n", "num_nodes", "=", "int", "(", "model_kwargs", ".", "get", "(", "'num_nodes'", ",", "1", ")", ")", "\n", "num_rnn_layers", "=", "int", "(", "model_kwargs", ".", "get", "(", "'num_rnn_layers'", ",", "1", ")", ")", "\n", "rnn_units", "=", "int", "(", "model_kwargs", ".", "get", "(", "'rnn_units'", ")", ")", "\n", "seq_len", "=", "int", "(", "model_kwargs", ".", "get", "(", "'seq_len'", ")", ")", "\n", "use_curriculum_learning", "=", "bool", "(", "model_kwargs", ".", "get", "(", "'use_curriculum_learning'", ",", "False", ")", ")", "\n", "input_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'input_dim'", ",", "1", ")", ")", "\n", "output_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'output_dim'", ",", "1", ")", ")", "\n", "\n", "# Input (batch_size, timesteps, num_sensor, input_dim)", "\n", "self", ".", "_inputs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "seq_len", ",", "num_nodes", ",", "input_dim", ")", ",", "name", "=", "'inputs'", ")", "\n", "# Labels: (batch_size, timesteps, num_sensor, input_dim), same format with input except the temporal dimension.", "\n", "self", ".", "_labels", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "batch_size", ",", "horizon", ",", "num_nodes", ",", "input_dim", ")", ",", "name", "=", "'labels'", ")", "\n", "\n", "# GO_SYMBOL = tf.zeros(shape=(batch_size, num_nodes * input_dim))", "\n", "GO_SYMBOL", "=", "tf", ".", "zeros", "(", "shape", "=", "(", "batch_size", ",", "num_nodes", "*", "output_dim", ")", ")", "\n", "\n", "cell", "=", "DCGRUCell", "(", "rnn_units", ",", "adj_mx", ",", "max_diffusion_step", "=", "max_diffusion_step", ",", "num_nodes", "=", "num_nodes", ",", "\n", "filter_type", "=", "filter_type", ")", "\n", "cell_with_projection", "=", "DCGRUCell", "(", "rnn_units", ",", "adj_mx", ",", "max_diffusion_step", "=", "max_diffusion_step", ",", "num_nodes", "=", "num_nodes", ",", "\n", "num_proj", "=", "output_dim", ",", "filter_type", "=", "filter_type", ")", "\n", "encoding_cells", "=", "[", "cell", "]", "*", "num_rnn_layers", "\n", "decoding_cells", "=", "[", "cell", "]", "*", "(", "num_rnn_layers", "-", "1", ")", "+", "[", "cell_with_projection", "]", "\n", "encoding_cells", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "encoding_cells", ",", "state_is_tuple", "=", "True", ")", "\n", "decoding_cells", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "decoding_cells", ",", "state_is_tuple", "=", "True", ")", "\n", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "# Outputs: (batch_size, timesteps, num_nodes, output_dim)", "\n", "with", "tf", ".", "variable_scope", "(", "'DCRNN_SEQ'", ")", ":", "\n", "            ", "inputs", "=", "tf", ".", "unstack", "(", "tf", ".", "reshape", "(", "self", ".", "_inputs", ",", "(", "batch_size", ",", "seq_len", ",", "num_nodes", "*", "input_dim", ")", ")", ",", "axis", "=", "1", ")", "\n", "labels", "=", "tf", ".", "unstack", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "_labels", "[", "...", ",", ":", "output_dim", "]", ",", "(", "batch_size", ",", "horizon", ",", "num_nodes", "*", "output_dim", ")", ")", ",", "axis", "=", "1", ")", "\n", "labels", ".", "insert", "(", "0", ",", "GO_SYMBOL", ")", "\n", "\n", "def", "_loop_function", "(", "prev", ",", "i", ")", ":", "\n", "                ", "if", "is_training", ":", "\n", "# Return either the model's prediction or the previous ground truth in training.", "\n", "                    ", "if", "use_curriculum_learning", ":", "\n", "                        ", "c", "=", "tf", ".", "random_uniform", "(", "(", ")", ",", "minval", "=", "0", ",", "maxval", "=", "1.", ")", "\n", "threshold", "=", "self", ".", "_compute_sampling_threshold", "(", "global_step", ",", "cl_decay_steps", ")", "\n", "result", "=", "tf", ".", "cond", "(", "tf", ".", "less", "(", "c", ",", "threshold", ")", ",", "lambda", ":", "labels", "[", "i", "]", ",", "lambda", ":", "prev", ")", "\n", "", "else", ":", "\n", "                        ", "result", "=", "labels", "[", "i", "]", "\n", "", "", "else", ":", "\n", "# Return the prediction of the model in testing.", "\n", "                    ", "result", "=", "prev", "\n", "", "return", "result", "\n", "\n", "", "_", ",", "enc_state", "=", "tf", ".", "contrib", ".", "rnn", ".", "static_rnn", "(", "encoding_cells", ",", "inputs", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "outputs", ",", "final_state", "=", "legacy_seq2seq", ".", "rnn_decoder", "(", "labels", ",", "enc_state", ",", "decoding_cells", ",", "\n", "loop_function", "=", "_loop_function", ")", "\n", "\n", "# Project the output to output_dim.", "\n", "", "outputs", "=", "tf", ".", "stack", "(", "outputs", "[", ":", "-", "1", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "_outputs", "=", "tf", ".", "reshape", "(", "outputs", ",", "(", "batch_size", ",", "horizon", ",", "num_nodes", ",", "output_dim", ")", ",", "name", "=", "'outputs'", ")", "\n", "self", ".", "_merged", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_model.DCRNNModel._compute_sampling_threshold": [[85, 94], ["tensorflow.cast", "tensorflow.exp"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_compute_sampling_threshold", "(", "global_step", ",", "k", ")", ":", "\n", "        ", "\"\"\"\n        Computes the sampling probability for scheduled sampling using inverse sigmoid.\n        :param global_step:\n        :param k:\n        :return:\n        \"\"\"", "\n", "return", "tf", ".", "cast", "(", "k", "/", "(", "k", "+", "tf", ".", "exp", "(", "global_step", "/", "k", ")", ")", ",", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_model.DCRNNModel.inputs": [[95, 98], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "inputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_model.DCRNNModel.labels": [[99, 102], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_model.DCRNNModel.loss": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "loss", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_model.DCRNNModel.mae": [[107, 110], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mae", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_mae", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_model.DCRNNModel.merged": [[111, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "merged", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_merged", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_model.DCRNNModel.outputs": [[115, 118], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell.call": [[18, 20], ["None"], "methods", ["None"], ["def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell.compute_output_shape": [[21, 23], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell.__init__": [[24, 53], ["tensorflow.contrib.rnn.RNNCell.__init__", "lib.utils.calculate_scaled_laplacian", "lib.utils.calculate_random_walk_matrix", "lib.utils.calculate_scaled_laplacian"], "methods", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.__init__", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.calculate_scaled_laplacian", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.calculate_random_walk_matrix", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.calculate_scaled_laplacian"], ["", "def", "__init__", "(", "self", ",", "num_units", ",", "adj_mx", ",", "max_diffusion_step", ",", "num_nodes", ",", "num_proj", "=", "None", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "tanh", ",", "reuse", "=", "None", ",", "filter_type", "=", "\"random_walk\"", ",", "use_gc_for_ru", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param num_units:\n        :param adj_mx:\n        :param max_diffusion_step:\n        :param num_nodes:\n        :param input_size:\n        :param num_proj:\n        :param activation:\n        :param reuse:\n        :param filter_type: \"laplacian\", \"random_walk\", \"dual_random_walk\".\n        :param use_gc_for_ru: whether to use Graph convolution to calculate the reset and update gates.\n        \"\"\"", "\n", "super", "(", "DCGRUCell", ",", "self", ")", ".", "__init__", "(", "_reuse", "=", "reuse", ")", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_num_nodes", "=", "num_nodes", "\n", "self", ".", "_num_proj", "=", "num_proj", "\n", "self", ".", "_num_units", "=", "num_units", "\n", "self", ".", "_max_diffusion_step", "=", "max_diffusion_step", "\n", "self", ".", "_use_gc_for_ru", "=", "use_gc_for_ru", "\n", "if", "filter_type", "==", "\"laplacian\"", ":", "\n", "            ", "support", "=", "utils", ".", "calculate_scaled_laplacian", "(", "adj_mx", ",", "lambda_max", "=", "None", ")", "\n", "", "elif", "filter_type", "==", "\"random_walk\"", ":", "\n", "            ", "support", "=", "utils", ".", "calculate_random_walk_matrix", "(", "adj_mx", ")", "\n", "", "else", ":", "\n", "            ", "support", "=", "utils", ".", "calculate_scaled_laplacian", "(", "adj_mx", ")", "\n", "# self._support = self._build_sparse_matrix(support)  # Usually SC not sparse", "\n", "", "self", ".", "_support", "=", "support", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell._build_sparse_matrix": [[54, 60], ["tensorflow.SparseTensor.tocoo", "numpy.column_stack", "tensorflow.SparseTensor", "tensorflow.sparse_reorder"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_build_sparse_matrix", "(", "L", ")", ":", "\n", "        ", "L", "=", "L", ".", "tocoo", "(", ")", "\n", "indices", "=", "np", ".", "column_stack", "(", "(", "L", ".", "row", ",", "L", ".", "col", ")", ")", "\n", "L", "=", "tf", ".", "SparseTensor", "(", "indices", ",", "L", ".", "data", ",", "L", ".", "shape", ")", "\n", "return", "tf", ".", "sparse_reorder", "(", "L", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell.state_size": [[61, 64], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_nodes", "*", "self", ".", "_num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell.output_size": [[65, 71], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "output_size", "=", "self", ".", "_num_nodes", "*", "self", ".", "_num_units", "\n", "if", "self", ".", "_num_proj", "is", "not", "None", ":", "\n", "            ", "output_size", "=", "self", ".", "_num_nodes", "*", "self", ".", "_num_proj", "\n", "", "return", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell.__call__": [[72, 106], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.nn.sigmoid", "tensorflow.reshape", "tensorflow.split", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.variable_scope", "dcrnn_cell.DCGRUCell._gconv", "fn", "dcrnn_cell.DCGRUCell._activation", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "inputs.get_shape"], "methods", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell._gconv"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "        ", "\"\"\"Gated recurrent unit (GRU) with Graph Convolution.\n        :param inputs: (B, num_nodes * input_dim)\n\n        :return\n        - Output: A `2-D` tensor with shape `[batch_size x self.output_size]`.\n        - New state: Either a single `2-D` tensor, or a tuple of tensors matching\n            the arity and shapes of `state`\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"dcgru_cell\"", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"gates\"", ")", ":", "# Reset gate and update gate.", "\n", "                ", "output_size", "=", "2", "*", "self", ".", "_num_units", "\n", "# We start with bias of 1.0 to not reset and not update.", "\n", "if", "self", ".", "_use_gc_for_ru", ":", "\n", "                    ", "fn", "=", "self", ".", "_gconv", "\n", "", "else", ":", "\n", "                    ", "fn", "=", "self", ".", "_fc", "\n", "", "value", "=", "tf", ".", "nn", ".", "sigmoid", "(", "fn", "(", "inputs", ",", "state", ",", "output_size", ",", "bias_start", "=", "1.0", ")", ")", "\n", "value", "=", "tf", ".", "reshape", "(", "value", ",", "(", "-", "1", ",", "self", ".", "_num_nodes", ",", "output_size", ")", ")", "\n", "r", ",", "u", "=", "tf", ".", "split", "(", "value", "=", "value", ",", "num_or_size_splits", "=", "2", ",", "axis", "=", "-", "1", ")", "#split into reset and update gate", "\n", "r", "=", "tf", ".", "reshape", "(", "r", ",", "(", "-", "1", ",", "self", ".", "_num_nodes", "*", "self", ".", "_num_units", ")", ")", "\n", "u", "=", "tf", ".", "reshape", "(", "u", ",", "(", "-", "1", ",", "self", ".", "_num_nodes", "*", "self", ".", "_num_units", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"candidate\"", ")", ":", "\n", "                ", "c", "=", "self", ".", "_gconv", "(", "inputs", ",", "r", "*", "state", ",", "self", ".", "_num_units", ")", "\n", "if", "self", ".", "_activation", "is", "not", "None", ":", "\n", "                    ", "c", "=", "self", ".", "_activation", "(", "c", ")", "\n", "", "", "output", "=", "new_state", "=", "u", "*", "state", "+", "(", "1", "-", "u", ")", "*", "c", "\n", "if", "self", ".", "_num_proj", "is", "not", "None", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "\"projection\"", ")", ":", "\n", "                    ", "w", "=", "tf", ".", "get_variable", "(", "'w'", ",", "shape", "=", "(", "self", ".", "_num_units", ",", "self", ".", "_num_proj", ")", ")", "\n", "batch_size", "=", "inputs", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "output", "=", "tf", ".", "reshape", "(", "new_state", ",", "shape", "=", "(", "-", "1", ",", "self", ".", "_num_units", ")", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "output", ",", "w", ")", ",", "shape", "=", "(", "batch_size", ",", "self", ".", "output_size", ")", ")", "\n", "", "", "", "return", "output", ",", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell._concat": [[107, 111], ["tensorflow.expand_dims", "tensorflow.concat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_concat", "(", "x", ",", "x_", ")", ":", "\n", "        ", "x_", "=", "tf", ".", "expand_dims", "(", "x_", ",", "0", ")", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "x_", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell._fc": [[112, 127], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.nn.sigmoid", "tensorflow.get_variable", "tensorflow.nn.bias_add", "tensorflow.matmul", "tensorflow.reshape.get_shape", "tensorflow.concat.get_shape", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "_fc", "(", "self", ",", "inputs", ",", "state", ",", "output_size", ",", "bias_start", "=", "0.0", ")", ":", "\n", "        ", "dtype", "=", "inputs", ".", "dtype", "\n", "batch_size", "=", "inputs", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "(", "batch_size", "*", "self", ".", "_num_nodes", ",", "-", "1", ")", ")", "\n", "state", "=", "tf", ".", "reshape", "(", "state", ",", "(", "batch_size", "*", "self", ".", "_num_nodes", ",", "-", "1", ")", ")", "\n", "inputs_and_state", "=", "tf", ".", "concat", "(", "[", "inputs", ",", "state", "]", ",", "axis", "=", "-", "1", ")", "\n", "input_size", "=", "inputs_and_state", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "weights", "=", "tf", ".", "get_variable", "(", "\n", "'weights'", ",", "[", "input_size", ",", "output_size", "]", ",", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "value", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "inputs_and_state", ",", "weights", ")", ")", "\n", "biases", "=", "tf", ".", "get_variable", "(", "\"biases\"", ",", "[", "output_size", "]", ",", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "bias_start", ",", "dtype", "=", "dtype", ")", ")", "\n", "value", "=", "tf", ".", "nn", ".", "bias_add", "(", "value", ",", "biases", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell._gconv": [[128, 181], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.get_variable_scope", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.nn.bias_add", "tensorflow.reshape.get_shape", "tensorflow.concat.get_shape", "tensorflow.matmul", "dcrnn_cell.DCGRUCell._concat", "range", "dcrnn_cell.DCGRUCell._concat", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell._concat", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_cell.DCGRUCell._concat"], ["", "def", "_gconv", "(", "self", ",", "inputs", ",", "state", ",", "output_size", ",", "bias_start", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Graph convolution between input and the graph matrix.\n\n        :param args: a 2D Tensor or a list of 2D, batch x n, Tensors.\n        :param output_size:\n        :param bias:\n        :param bias_start:\n        :param scope:\n        :return:\n        \"\"\"", "\n", "# Reshape input and state to (batch_size, num_nodes, input_dim/state_dim)", "\n", "batch_size", "=", "inputs", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "(", "batch_size", ",", "self", ".", "_num_nodes", ",", "-", "1", ")", ")", "\n", "state", "=", "tf", ".", "reshape", "(", "state", ",", "(", "batch_size", ",", "self", ".", "_num_nodes", ",", "-", "1", ")", ")", "\n", "inputs_and_state", "=", "tf", ".", "concat", "(", "[", "inputs", ",", "state", "]", ",", "axis", "=", "2", ")", "\n", "input_size", "=", "inputs_and_state", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "dtype", "=", "inputs", ".", "dtype", "\n", "\n", "x", "=", "inputs_and_state", "\n", "x0", "=", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "1", ",", "2", ",", "0", "]", ")", "# (num_nodes, total_arg_size, batch_size)", "\n", "x0", "=", "tf", ".", "reshape", "(", "x0", ",", "shape", "=", "[", "self", ".", "_num_nodes", ",", "input_size", "*", "batch_size", "]", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x0", ",", "axis", "=", "0", ")", "\n", "\n", "scope", "=", "tf", ".", "get_variable_scope", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "            ", "if", "self", ".", "_max_diffusion_step", "==", "0", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "#x1 = tf.sparse_tensor_dense_matmul(self._support, x0)", "\n", "                ", "x1", "=", "tf", ".", "matmul", "(", "self", ".", "_support", ",", "x0", ")", "\n", "x", "=", "self", ".", "_concat", "(", "x", ",", "x1", ")", "\n", "\n", "for", "k", "in", "range", "(", "2", ",", "self", ".", "_max_diffusion_step", "+", "1", ")", ":", "\n", "#x2 = 2 * tf.sparse_tensor_dense_matmul(self._support, x1) - x0", "\n", "                    ", "x2", "=", "2", "*", "tf", ".", "matmul", "(", "self", ".", "_support", ",", "x1", ")", "-", "x0", "\n", "x", "=", "self", ".", "_concat", "(", "x", ",", "x2", ")", "\n", "x1", ",", "x0", "=", "x2", ",", "x1", "\n", "\n", "", "", "num_matrices", "=", "self", ".", "_max_diffusion_step", "+", "1", "# Adds for x itself.", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "shape", "=", "[", "num_matrices", ",", "self", ".", "_num_nodes", ",", "input_size", ",", "batch_size", "]", ")", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "3", ",", "1", ",", "2", ",", "0", "]", ")", "# (batch_size, num_nodes, input_size, order)", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "shape", "=", "[", "batch_size", "*", "self", ".", "_num_nodes", ",", "input_size", "*", "num_matrices", "]", ")", "\n", "\n", "weights", "=", "tf", ".", "get_variable", "(", "\n", "'weights'", ",", "[", "input_size", "*", "num_matrices", ",", "output_size", "]", ",", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "x", "=", "tf", ".", "matmul", "(", "x", ",", "weights", ")", "# (batch_size * self._num_nodes, output_size)", "\n", "\n", "biases", "=", "tf", ".", "get_variable", "(", "\"biases\"", ",", "[", "output_size", "]", ",", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "bias_start", ",", "dtype", "=", "dtype", ")", ")", "\n", "x", "=", "tf", ".", "nn", ".", "bias_add", "(", "x", ",", "biases", ")", "\n", "# Reshape res back to 2D: (batch_size, num_node, state_dim) -> (batch_size, num_node * state_dim)", "\n", "", "return", "tf", ".", "reshape", "(", "x", ",", "[", "batch_size", ",", "self", ".", "_num_nodes", "*", "output_size", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.__init__": [[24, 98], ["kwargs.get", "kwargs.get", "kwargs.get", "dcrnn_supervisor.DCRNNSupervisor._get_log_dir", "dcrnn_supervisor.DCRNNSupervisor._kwargs.get", "lib.utils.get_logger", "tensorflow.summary.FileWriter", "dcrnn_supervisor.DCRNNSupervisor._logger.info", "lib.utils.load_dataset", "dcrnn_supervisor.DCRNNSupervisor._data.items", "tensorflow.get_variable", "tensorflow.placeholder", "tensorflow.assign", "dcrnn_supervisor.DCRNNSupervisor._train_kwargs.get().lower", "float", "tensorflow.train.AdamOptimizer", "dcrnn_supervisor.DCRNNSupervisor._model_kwargs.get", "lib.metrics.masked_mae_loss", "dcrnn_supervisor.DCRNNSupervisor._loss_fn", "tensorflow.trainable_variables", "tensorflow.gradients", "kwargs[].get", "tensorflow.clip_by_global_norm", "tensorflow.train.get_or_create_global_step", "lib.AMSGrad.AMSGrad.apply_gradients", "dcrnn_supervisor.DCRNNSupervisor._train_kwargs.get", "tensorflow.train.Saver", "lib.utils.get_total_trainable_parameter_size", "dcrnn_supervisor.DCRNNSupervisor._logger.info", "tensorflow.global_variables", "hasattr", "tensorflow.name_scope", "tensorflow.name_scope", "dcrnn_supervisor.DCRNNSupervisor._train_kwargs.get", "tensorflow.train.GradientDescentOptimizer", "zip", "tensorflow.global_variables", "dcrnn_supervisor.DCRNNSupervisor._logger.debug", "dcrnn_supervisor.DCRNNSupervisor._logger.info", "tensorflow.variable_scope", "model.dcrnn_model.DCRNNModel", "tensorflow.variable_scope", "model.dcrnn_model.DCRNNModel", "tensorflow.constant_initializer", "dcrnn_supervisor.DCRNNSupervisor._train_kwargs.get", "lib.AMSGrad.AMSGrad", "var.get_shape"], "methods", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor._get_log_dir", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.get_logger", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.load_dataset", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mae_loss", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.get_total_trainable_parameter_size"], ["def", "__init__", "(", "self", ",", "adj_mx", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "_kwargs", "=", "kwargs", "\n", "self", ".", "_data_kwargs", "=", "kwargs", ".", "get", "(", "'data'", ")", "\n", "self", ".", "_model_kwargs", "=", "kwargs", ".", "get", "(", "'model'", ")", "\n", "self", ".", "_train_kwargs", "=", "kwargs", ".", "get", "(", "'train'", ")", "\n", "\n", "# logging.", "\n", "self", ".", "_log_dir", "=", "self", ".", "_get_log_dir", "(", "kwargs", ")", "\n", "log_level", "=", "self", ".", "_kwargs", ".", "get", "(", "'log_level'", ",", "'INFO'", ")", "\n", "self", ".", "_logger", "=", "utils", ".", "get_logger", "(", "self", ".", "_log_dir", ",", "__name__", ",", "'info.log'", ",", "level", "=", "log_level", ")", "\n", "self", ".", "_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "_log_dir", ")", "\n", "self", ".", "_logger", ".", "info", "(", "kwargs", ")", "\n", "\n", "# Data preparation", "\n", "self", ".", "_data", "=", "utils", ".", "load_dataset", "(", "**", "self", ".", "_data_kwargs", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_data", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "'shape'", ")", ":", "\n", "                ", "self", ".", "_logger", ".", "info", "(", "(", "k", ",", "v", ".", "shape", ")", ")", "\n", "\n", "# Build models.", "\n", "", "", "scaler", "=", "self", ".", "_data", "[", "'scaler'", "]", "\n", "with", "tf", ".", "name_scope", "(", "'Train'", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'DCRNN'", ",", "reuse", "=", "False", ")", ":", "\n", "                ", "self", ".", "_train_model", "=", "DCRNNModel", "(", "is_training", "=", "True", ",", "scaler", "=", "scaler", ",", "\n", "batch_size", "=", "self", ".", "_data_kwargs", "[", "'batch_size'", "]", ",", "\n", "adj_mx", "=", "adj_mx", ",", "**", "self", ".", "_model_kwargs", ")", "\n", "\n", "", "", "with", "tf", ".", "name_scope", "(", "'Test'", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'DCRNN'", ",", "reuse", "=", "True", ")", ":", "\n", "                ", "self", ".", "_test_model", "=", "DCRNNModel", "(", "is_training", "=", "False", ",", "scaler", "=", "scaler", ",", "\n", "batch_size", "=", "self", ".", "_data_kwargs", "[", "'test_batch_size'", "]", ",", "\n", "adj_mx", "=", "adj_mx", ",", "**", "self", ".", "_model_kwargs", ")", "\n", "\n", "# Learning rate.", "\n", "", "", "self", ".", "_lr", "=", "tf", ".", "get_variable", "(", "'learning_rate'", ",", "shape", "=", "(", ")", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.01", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "self", ".", "_new_lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", ")", ",", "name", "=", "'new_learning_rate'", ")", "\n", "self", ".", "_lr_update", "=", "tf", ".", "assign", "(", "self", ".", "_lr", ",", "self", ".", "_new_lr", ",", "name", "=", "'lr_update'", ")", "\n", "\n", "# Configure optimizer", "\n", "optimizer_name", "=", "self", ".", "_train_kwargs", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", ".", "lower", "(", ")", "\n", "epsilon", "=", "float", "(", "self", ".", "_train_kwargs", ".", "get", "(", "'epsilon'", ",", "1e-3", ")", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "_lr", ",", "epsilon", "=", "epsilon", ")", "\n", "if", "optimizer_name", "==", "'sgd'", ":", "\n", "            ", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "_lr", ",", ")", "\n", "", "elif", "optimizer_name", "==", "'amsgrad'", ":", "\n", "            ", "optimizer", "=", "AMSGrad", "(", "self", ".", "_lr", ",", "epsilon", "=", "epsilon", ")", "\n", "\n", "# Calculate loss", "\n", "", "output_dim", "=", "self", ".", "_model_kwargs", ".", "get", "(", "'output_dim'", ")", "\n", "preds", "=", "self", ".", "_train_model", ".", "outputs", "\n", "labels", "=", "self", ".", "_train_model", ".", "labels", "[", "...", ",", ":", "output_dim", "]", "\n", "\n", "null_val", "=", "0.", "\n", "self", ".", "_loss_fn", "=", "masked_mae_loss", "(", "scaler", ",", "null_val", ")", "\n", "self", ".", "_train_loss", "=", "self", ".", "_loss_fn", "(", "preds", "=", "preds", ",", "labels", "=", "labels", ")", "\n", "\n", "tvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads", "=", "tf", ".", "gradients", "(", "self", ".", "_train_loss", ",", "tvars", ")", "\n", "max_grad_norm", "=", "kwargs", "[", "'train'", "]", ".", "get", "(", "'max_grad_norm'", ",", "1.", ")", "\n", "grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "grads", ",", "max_grad_norm", ")", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "self", ".", "_train_op", "=", "optimizer", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "tvars", ")", ",", "global_step", "=", "global_step", ",", "name", "=", "'train_op'", ")", "\n", "\n", "max_to_keep", "=", "self", ".", "_train_kwargs", ".", "get", "(", "'max_to_keep'", ",", "100", ")", "\n", "self", ".", "_epoch", "=", "0", "\n", "self", ".", "_saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "global_variables", "(", ")", ",", "max_to_keep", "=", "max_to_keep", ")", "\n", "\n", "# Log model statistics.", "\n", "total_trainable_parameter", "=", "utils", ".", "get_total_trainable_parameter_size", "(", ")", "\n", "self", ".", "_logger", ".", "info", "(", "'Total number of trainable parameters: {:d}'", ".", "format", "(", "total_trainable_parameter", ")", ")", "\n", "for", "var", "in", "tf", ".", "global_variables", "(", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "debug", "(", "'{}, {}'", ".", "format", "(", "var", ".", "name", ",", "var", ".", "get_shape", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor._get_log_dir": [[99, 126], ["kwargs[].get", "kwargs[].get", "kwargs[].get", "kwargs[].get", "kwargs[].get", "kwargs[].get", "kwargs[].get", "kwargs[].get", "kwargs.get", "os.path.join", "os.path.exists", "os.makedirs", "time.strftime", "range"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_log_dir", "(", "kwargs", ")", ":", "\n", "        ", "log_dir", "=", "kwargs", "[", "'train'", "]", ".", "get", "(", "'log_dir'", ")", "\n", "if", "log_dir", "is", "None", ":", "\n", "            ", "batch_size", "=", "kwargs", "[", "'data'", "]", ".", "get", "(", "'batch_size'", ")", "\n", "learning_rate", "=", "kwargs", "[", "'train'", "]", ".", "get", "(", "'base_lr'", ")", "\n", "max_diffusion_step", "=", "kwargs", "[", "'model'", "]", ".", "get", "(", "'max_diffusion_step'", ")", "\n", "num_rnn_layers", "=", "kwargs", "[", "'model'", "]", ".", "get", "(", "'num_rnn_layers'", ")", "\n", "rnn_units", "=", "kwargs", "[", "'model'", "]", ".", "get", "(", "'rnn_units'", ")", "\n", "structure", "=", "'-'", ".", "join", "(", "\n", "[", "'%d'", "%", "rnn_units", "for", "_", "in", "range", "(", "num_rnn_layers", ")", "]", ")", "\n", "horizon", "=", "kwargs", "[", "'model'", "]", ".", "get", "(", "'horizon'", ")", "\n", "filter_type", "=", "kwargs", "[", "'model'", "]", ".", "get", "(", "'filter_type'", ")", "\n", "filter_type_abbr", "=", "'L'", "\n", "if", "filter_type", "==", "'random_walk'", ":", "\n", "                ", "filter_type_abbr", "=", "'R'", "\n", "", "elif", "filter_type", "==", "'dual_random_walk'", ":", "\n", "                ", "filter_type_abbr", "=", "'DR'", "\n", "", "run_id", "=", "'dcrnn_%s_%d_h_%d_%s_lr_%g_bs_%d_%s/'", "%", "(", "\n", "filter_type_abbr", ",", "max_diffusion_step", ",", "horizon", ",", "\n", "structure", ",", "learning_rate", ",", "batch_size", ",", "\n", "time", ".", "strftime", "(", "'%m%d%H%M%S'", ")", ")", "\n", "base_dir", "=", "kwargs", ".", "get", "(", "'base_dir'", ")", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "run_id", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.run_epoch_generator": [[127, 175], ["dcrnn_supervisor.DCRNNSupervisor._model_kwargs.get", "dcrnn_supervisor.DCRNNSupervisor._loss_fn", "enumerate", "tensorflow.train.get_or_create_global_step", "fetches.update", "fetches.update", "sess.run", "losses.append", "maes.append", "numpy.mean", "numpy.mean", "fetches.update", "writer.add_summary", "outputs.append"], "methods", ["None"], ["", "def", "run_epoch_generator", "(", "self", ",", "sess", ",", "model", ",", "data_generator", ",", "return_output", "=", "False", ",", "training", "=", "False", ",", "writer", "=", "None", ")", ":", "\n", "        ", "losses", "=", "[", "]", "\n", "maes", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "output_dim", "=", "self", ".", "_model_kwargs", ".", "get", "(", "'output_dim'", ")", "\n", "preds", "=", "model", ".", "outputs", "\n", "labels", "=", "model", ".", "labels", "[", "...", ",", ":", "output_dim", "]", "\n", "loss", "=", "self", ".", "_loss_fn", "(", "preds", "=", "preds", ",", "labels", "=", "labels", ")", "\n", "fetches", "=", "{", "\n", "'loss'", ":", "loss", ",", "\n", "'mae'", ":", "loss", ",", "\n", "'global_step'", ":", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "}", "\n", "if", "training", ":", "\n", "            ", "fetches", ".", "update", "(", "{", "\n", "'train_op'", ":", "self", ".", "_train_op", "\n", "}", ")", "\n", "merged", "=", "model", ".", "merged", "\n", "if", "merged", "is", "not", "None", ":", "\n", "                ", "fetches", ".", "update", "(", "{", "'merged'", ":", "merged", "}", ")", "\n", "\n", "", "", "if", "return_output", ":", "\n", "            ", "fetches", ".", "update", "(", "{", "\n", "'outputs'", ":", "model", ".", "outputs", "\n", "}", ")", "\n", "\n", "", "for", "_", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "data_generator", ")", ":", "\n", "            ", "feed_dict", "=", "{", "\n", "model", ".", "inputs", ":", "x", ",", "\n", "model", ".", "labels", ":", "y", ",", "\n", "}", "\n", "\n", "vals", "=", "sess", ".", "run", "(", "fetches", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "losses", ".", "append", "(", "vals", "[", "'loss'", "]", ")", "\n", "maes", ".", "append", "(", "vals", "[", "'mae'", "]", ")", "\n", "if", "writer", "is", "not", "None", "and", "'merged'", "in", "vals", ":", "\n", "                ", "writer", ".", "add_summary", "(", "vals", "[", "'merged'", "]", ",", "global_step", "=", "vals", "[", "'global_step'", "]", ")", "\n", "", "if", "return_output", ":", "\n", "                ", "outputs", ".", "append", "(", "vals", "[", "'outputs'", "]", ")", "\n", "\n", "", "", "results", "=", "{", "\n", "'loss'", ":", "np", ".", "mean", "(", "losses", ")", ",", "\n", "'mae'", ":", "np", ".", "mean", "(", "maes", ")", "\n", "}", "\n", "if", "return_output", ":", "\n", "            ", "results", "[", "'outputs'", "]", "=", "outputs", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.get_lr": [[176, 178], ["numpy.asscalar", "sess.run"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "sess", ")", ":", "\n", "        ", "return", "np", ".", "asscalar", "(", "sess", ".", "run", "(", "self", ".", "_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.set_lr": [[179, 182], ["sess.run"], "methods", ["None"], ["", "def", "set_lr", "(", "self", ",", "sess", ",", "lr", ")", ":", "\n", "        ", "sess", ".", "run", "(", "self", ".", "_lr_update", ",", "feed_dict", "=", "{", "\n", "self", ".", "_new_lr", ":", "lr", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.train": [[184, 187], ["kwargs.update", "dcrnn_supervisor.DCRNNSupervisor._train"], "methods", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor._train"], ["", "def", "train", "(", "self", ",", "sess", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "update", "(", "self", ".", "_train_kwargs", ")", "\n", "return", "self", ".", "_train", "(", "sess", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor._train": [[188, 268], ["float", "steps.append", "train_kwargs.get", "dcrnn_supervisor.DCRNNSupervisor._model_kwargs.get", "tensorflow.train.Saver", "train_kwargs.get", "dcrnn_supervisor.DCRNNSupervisor._logger.info", "float", "tensorflow.global_variables", "tensorflow.train.Saver.restore", "float", "sess.run", "max", "dcrnn_supervisor.DCRNNSupervisor.set_lr", "time.time", "dcrnn_supervisor.DCRNNSupervisor.run_epoch_generator", "sess.run", "dcrnn_supervisor.DCRNNSupervisor.run_epoch_generator", "lib.utils.add_simple_summary", "time.time", "dcrnn_supervisor.DCRNNSupervisor._train_model._compute_sampling_threshold().eval", "dcrnn_supervisor.DCRNNSupervisor._logger.info", "val_history.append", "train_history.append", "sys.stdout.flush", "tensorflow.global_variables_initializer", "dcrnn_supervisor.DCRNNSupervisor._data[].get_iterator", "dcrnn_supervisor.DCRNNSupervisor._logger.warning", "tensorflow.train.get_or_create_global_step", "dcrnn_supervisor.DCRNNSupervisor._data[].get_iterator", "numpy.asscalar", "numpy.asscalar", "dcrnn_supervisor.DCRNNSupervisor.evaluate", "dcrnn_supervisor.DCRNNSupervisor._logger.info", "dcrnn_supervisor.DCRNNSupervisor._logger.info", "tensorflow.train.Saver.restore", "os.path.basename().split", "dcrnn_supervisor.DCRNNSupervisor._train_model._compute_sampling_threshold", "dcrnn_supervisor.DCRNNSupervisor.save", "dcrnn_supervisor.DCRNNSupervisor._logger.warning", "numpy.sum", "os.path.basename", "numpy.sum", "os.path.basename", "numpy.sum", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.set_lr", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.run_epoch_generator", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.run_epoch_generator", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.add_simple_summary", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.DataLoader.get_iterator", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.DataLoader.get_iterator", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.evaluate", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_model.DCRNNModel._compute_sampling_threshold", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.save"], ["", "def", "_train", "(", "self", ",", "sess", ",", "base_lr", ",", "epoch", ",", "steps", ",", "patience", "=", "50", ",", "epochs", "=", "100", ",", "\n", "min_learning_rate", "=", "2e-6", ",", "lr_decay_ratio", "=", "0.1", ",", "save_model", "=", "1", ",", "\n", "test_every_n_epochs", "=", "10", ",", "**", "train_kwargs", ")", ":", "\n", "        ", "val_history", ",", "train_history", "=", "[", "]", ",", "[", "]", "\n", "min_val_loss", "=", "float", "(", "'inf'", ")", "\n", "wait", "=", "0", "\n", "steps", ".", "append", "(", "float", "(", "'inf'", ")", ")", "# to keep finial learning rate up to the end", "\n", "\n", "max_to_keep", "=", "train_kwargs", ".", "get", "(", "'max_to_keep'", ",", "100", ")", "\n", "cl_decay_steps", "=", "self", ".", "_model_kwargs", ".", "get", "(", "'cl_decay_steps'", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "global_variables", "(", ")", ",", "max_to_keep", "=", "max_to_keep", ")", "\n", "model_filename", "=", "train_kwargs", ".", "get", "(", "'model_filename'", ")", "\n", "if", "model_filename", "is", "not", "None", ":", "\n", "            ", "saver", ".", "restore", "(", "sess", ",", "model_filename", ")", "\n", "self", ".", "_epoch", "=", "epoch", "+", "1", "\n", "min_val_loss", "=", "float", "(", "os", ".", "path", ".", "basename", "(", "model_filename", ")", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "", "self", ".", "_logger", ".", "info", "(", "'Start training ...'", ")", "\n", "\n", "while", "self", ".", "_epoch", "<", "epochs", ":", "\n", "# Learning rate schedule.", "\n", "            ", "new_lr", "=", "max", "(", "min_learning_rate", ",", "base_lr", "*", "(", "lr_decay_ratio", "**", "np", ".", "sum", "(", "self", ".", "_epoch", ">=", "np", ".", "array", "(", "steps", ")", ")", ")", ")", "\n", "self", ".", "set_lr", "(", "sess", "=", "sess", ",", "lr", "=", "new_lr", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train_results", "=", "self", ".", "run_epoch_generator", "(", "sess", ",", "self", ".", "_train_model", ",", "\n", "self", ".", "_data", "[", "'train_loader'", "]", ".", "get_iterator", "(", ")", ",", "\n", "training", "=", "True", ",", "\n", "writer", "=", "self", ".", "_writer", ")", "\n", "train_loss", ",", "train_mae", "=", "train_results", "[", "'loss'", "]", ",", "train_results", "[", "'mae'", "]", "\n", "if", "train_loss", ">", "1e5", ":", "\n", "                ", "self", ".", "_logger", ".", "warning", "(", "'Gradient explosion detected. Ending...'", ")", "\n", "break", "\n", "\n", "", "global_step", "=", "sess", ".", "run", "(", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", ")", "\n", "# Compute validation error.", "\n", "val_results", "=", "self", ".", "run_epoch_generator", "(", "sess", ",", "self", ".", "_test_model", ",", "\n", "self", ".", "_data", "[", "'val_loader'", "]", ".", "get_iterator", "(", ")", ",", "\n", "training", "=", "False", ")", "\n", "val_loss", ",", "val_mae", "=", "np", ".", "asscalar", "(", "val_results", "[", "'loss'", "]", ")", ",", "np", ".", "asscalar", "(", "val_results", "[", "'mae'", "]", ")", "\n", "\n", "utils", ".", "add_simple_summary", "(", "self", ".", "_writer", ",", "\n", "[", "'loss/train_loss'", ",", "'metric/train_mae'", ",", "'loss/val_loss'", ",", "'metric/val_mae'", "]", ",", "\n", "[", "train_loss", ",", "train_mae", ",", "val_loss", ",", "val_mae", "]", ",", "global_step", "=", "global_step", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "cl_threshold", "=", "self", ".", "_train_model", ".", "_compute_sampling_threshold", "(", "global_step", ",", "cl_decay_steps", ")", ".", "eval", "(", ")", "# current sampling probability of cl", "\n", "message", "=", "'Epoch [{}/{}] ({}) train_mae: {:.5f}, val_mae: {:.5f}, lr: {:.5f}, cl_thres: {:.3f}, t: {:.1f}min'", ".", "format", "(", "\n", "self", ".", "_epoch", ",", "epochs", ",", "global_step", ",", "train_mae", ",", "val_mae", ",", "new_lr", ",", "cl_threshold", ",", "(", "end_time", "-", "start_time", ")", "/", "60", ")", "\n", "self", ".", "_logger", ".", "info", "(", "message", ")", "\n", "if", "self", ".", "_epoch", "%", "test_every_n_epochs", "==", "test_every_n_epochs", "-", "1", ":", "\n", "                ", "self", ".", "evaluate", "(", "sess", ")", "\n", "", "if", "val_loss", "<=", "min_val_loss", ":", "\n", "                ", "wait", "=", "0", "\n", "if", "save_model", ">", "0", ":", "\n", "                    ", "model_filename", "=", "self", ".", "save", "(", "sess", ",", "val_loss", ")", "\n", "", "self", ".", "_logger", ".", "info", "(", "\n", "'Val loss decrease from %.4f to %.4f, saving to %s'", "%", "(", "min_val_loss", ",", "val_loss", ",", "model_filename", ")", ")", "\n", "min_val_loss", "=", "val_loss", "\n", "", "else", ":", "\n", "                ", "wait", "+=", "1", "\n", "if", "wait", ">=", "patience", ":", "\n", "                    ", "self", ".", "_logger", ".", "warning", "(", "'Lowering learning rate preliminary.'", ")", "\n", "\n", "", "", "val_history", ".", "append", "(", "val_mae", ")", "\n", "train_history", ".", "append", "(", "train_mae", ")", "\n", "\n", "# Restore best weights before lowering lr in next epoch.", "\n", "if", "steps", "[", "np", ".", "sum", "(", "self", ".", "_epoch", ">=", "np", ".", "array", "(", "steps", ")", ")", "]", "==", "self", ".", "_epoch", "+", "1", "or", "wait", ">=", "patience", ":", "\n", "                    ", "self", ".", "_logger", ".", "info", "(", "'Restore model from epoch {}: {}'", ".", "format", "(", "(", "self", ".", "_epoch", "-", "wait", ")", ",", "os", ".", "path", ".", "basename", "(", "model_filename", ")", ")", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "model_filename", ")", "\n", "self", ".", "_epoch", "=", "self", ".", "_epoch", "-", "wait", "# Go back to epoch...", "\n", "steps", "[", "np", ".", "sum", "(", "self", ".", "_epoch", ">=", "np", ".", "array", "(", "steps", ")", ")", "]", "=", "self", ".", "_epoch", "+", "1", "\n", "wait", "=", "0", "# Reset patience iterator.", "\n", "\n", "# Increases epoch.", "\n", "", "self", ".", "_epoch", "+=", "1", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "return", "val_history", ",", "train_history", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.evaluate": [[269, 311], ["sess.run", "dcrnn_supervisor.DCRNNSupervisor.run_epoch_generator", "lib.utils.add_simple_summary", "numpy.concatenate", "range", "tensorflow.train.get_or_create_global_step", "dcrnn_supervisor.DCRNNSupervisor._data[].get_iterator", "scaler.inverse_transform", "y_truths.append", "scaler.inverse_transform", "predictions.append", "lib.metrics.masked_mae_np", "lib.metrics.masked_mape_np", "lib.metrics.masked_rmse_np", "test_mae.append", "dcrnn_supervisor.DCRNNSupervisor._logger.info", "lib.utils.add_simple_summary"], "methods", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.run_epoch_generator", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.add_simple_summary", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.DataLoader.get_iterator", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mae_np", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_mape_np", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.metrics.masked_rmse_np", "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.lib.utils.add_simple_summary"], ["", "def", "evaluate", "(", "self", ",", "sess", ",", "**", "kwargs", ")", ":", "\n", "        ", "global_step", "=", "sess", ".", "run", "(", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", ")", "\n", "test_results", "=", "self", ".", "run_epoch_generator", "(", "sess", ",", "self", ".", "_test_model", ",", "\n", "self", ".", "_data", "[", "'test_loader'", "]", ".", "get_iterator", "(", ")", ",", "\n", "return_output", "=", "True", ",", "\n", "training", "=", "False", ")", "\n", "\n", "# y_preds:  a list of (batch_size, horizon, num_nodes, output_dim)", "\n", "test_loss", ",", "y_preds", "=", "test_results", "[", "'loss'", "]", ",", "test_results", "[", "'outputs'", "]", "\n", "utils", ".", "add_simple_summary", "(", "self", ".", "_writer", ",", "[", "'loss/test_loss'", "]", ",", "[", "test_loss", "]", ",", "global_step", "=", "global_step", ")", "\n", "\n", "y_preds", "=", "np", ".", "concatenate", "(", "y_preds", ",", "axis", "=", "0", ")", "\n", "scaler", "=", "self", ".", "_data", "[", "'scaler'", "]", "\n", "predictions", "=", "[", "]", "\n", "y_truths", "=", "[", "]", "\n", "test_mae", "=", "[", "]", "\n", "for", "horizon_i", "in", "range", "(", "self", ".", "_data", "[", "'y_test'", "]", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "y_truth", "=", "scaler", ".", "inverse_transform", "(", "self", ".", "_data", "[", "'y_test'", "]", "[", ":", ",", "horizon_i", ",", ":", ",", "0", "]", ")", "\n", "y_truths", ".", "append", "(", "y_truth", ")", "\n", "\n", "y_pred", "=", "scaler", ".", "inverse_transform", "(", "y_preds", "[", ":", "y_truth", ".", "shape", "[", "0", "]", ",", "horizon_i", ",", ":", ",", "0", "]", ")", "\n", "predictions", ".", "append", "(", "y_pred", ")", "\n", "\n", "mae", "=", "metrics", ".", "masked_mae_np", "(", "y_pred", ",", "y_truth", ",", "null_val", "=", "0", ")", "\n", "mape", "=", "metrics", ".", "masked_mape_np", "(", "y_pred", ",", "y_truth", ",", "null_val", "=", "0", ")", "\n", "rmse", "=", "metrics", ".", "masked_rmse_np", "(", "y_pred", ",", "y_truth", ",", "null_val", "=", "0", ")", "\n", "test_mae", ".", "append", "(", "mae", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\n", "\"Horizon {:02d}, MAE: {:.5f}, MAPE: {:.5f}, RMSE: {:.5f}\"", ".", "format", "(", "\n", "horizon_i", "+", "1", ",", "mae", ",", "mape", ",", "rmse", "\n", ")", "\n", ")", "\n", "utils", ".", "add_simple_summary", "(", "self", ".", "_writer", ",", "\n", "[", "'%s_%d'", "%", "(", "item", ",", "horizon_i", "+", "1", ")", "for", "item", "in", "\n", "[", "'metric/rmse'", ",", "'metric/mape'", ",", "'metric/mae'", "]", "]", ",", "\n", "[", "rmse", ",", "mape", ",", "mae", "]", ",", "\n", "global_step", "=", "global_step", ")", "\n", "", "outputs", "=", "{", "\n", "'predictions'", ":", "predictions", ",", "\n", "'groundtruth'", ":", "y_truths", "\n", "}", "\n", "return", "outputs", ",", "test_mae", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.load": [[312, 320], ["dcrnn_supervisor.DCRNNSupervisor._saver.restore"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "sess", ",", "model_filename", ")", ":", "\n", "        ", "\"\"\"\n        Restore from saved model.\n        :param sess:\n        :param model_filename:\n        :return:\n        \"\"\"", "\n", "self", ".", "_saver", ".", "restore", "(", "sess", ",", "model_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.save": [[321, 334], ["dict", "numpy.asscalar", "os.path.join", "dcrnn_supervisor.DCRNNSupervisor._saver.save", "sess.run", "open", "yaml.dump", "tensorflow.train.get_or_create_global_step", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.simonvino_DCRNN_brain_connectivity.model.dcrnn_supervisor.DCRNNSupervisor.save"], ["", "def", "save", "(", "self", ",", "sess", ",", "val_loss", ")", ":", "\n", "        ", "config", "=", "dict", "(", "self", ".", "_kwargs", ")", "\n", "global_step", "=", "np", ".", "asscalar", "(", "sess", ".", "run", "(", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", ")", ")", "\n", "prefix", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_log_dir", ",", "'models-{:.4f}'", ".", "format", "(", "val_loss", ")", ")", "\n", "config", "[", "'train'", "]", "[", "'epoch'", "]", "=", "self", ".", "_epoch", "\n", "config", "[", "'train'", "]", "[", "'global_step'", "]", "=", "global_step", "\n", "config", "[", "'train'", "]", "[", "'log_dir'", "]", "=", "self", ".", "_log_dir", "\n", "config", "[", "'train'", "]", "[", "'model_filename'", "]", "=", "self", ".", "_saver", ".", "save", "(", "sess", ",", "prefix", ",", "global_step", "=", "global_step", ",", "\n", "write_meta_graph", "=", "False", ")", "\n", "config_filename", "=", "'config_{}.yaml'", ".", "format", "(", "self", ".", "_epoch", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_log_dir", ",", "config_filename", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "config", ",", "f", ",", "default_flow_style", "=", "False", ")", "\n", "", "return", "config", "[", "'train'", "]", "[", "'model_filename'", "]", "", "", "", ""]]}