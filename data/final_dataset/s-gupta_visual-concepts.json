{"home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.__init__": [[10, 30], ["os.path.join", "coco_voc.coco_voc._load_image_set_index", "pycoco.coco.COCO", "os.path.exists", "os.path.exists", "coco_voc.coco_voc._get_default_path", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc._load_image_set_index", "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc._get_default_path"], ["  ", "def", "__init__", "(", "self", ",", "image_set", ",", "devkit_path", "=", "None", ",", "image_path", "=", "None", ")", ":", "\n", "    ", "self", ".", "_name", "=", "'coco'", "+", "'_'", "+", "image_set", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_devkit_path", "=", "self", ".", "_get_default_path", "(", ")", "if", "devkit_path", "is", "None", "else", "devkit_path", "\n", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ")", "\n", "\n", "self", ".", "_image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'images'", ")", "if", "image_path", "is", "None", "else", "image_path", ";", "\n", "\n", "self", ".", "_image_ext", "=", "'.jpg'", "\n", "image_index_str", ",", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "\n", "# Load the annotation file", "\n", "self", ".", "_coco_caption_data", "=", "COCO", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations'", ",", "'captions_trainval2014.json'", ")", ")", ";", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_devkit_path", ")", ",", "'COCO path does not exist: {}'", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "'COCO does not exist: {}'", ".", "format", "(", "self", ".", "_data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.get_file_name": [[31, 36], ["os.path.join", "int", "math.floor", "int"], "methods", ["None"], ["", "def", "get_file_name", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Returns the file name with the folder in the beginning.\n    \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "'{:02d}'", ".", "format", "(", "int", "(", "math", ".", "floor", "(", "int", "(", "index", ")", "/", "1e4", ")", ")", ")", ",", "'{}'", ".", "format", "(", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.image_path_at": [[37, 42], ["coco_voc.coco_voc.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.image_path_from_index": [[43, 51], ["os.path.join", "int", "math.floor", "coco_voc.coco_voc.get_file_name", "int"], "methods", ["home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.get_file_name"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "pre_fix", "=", "'%02d'", "%", "int", "(", "math", ".", "floor", "(", "int", "(", "index", ")", "/", "1e4", ")", ")", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_image_path", ",", "self", ".", "get_file_name", "(", "index", ")", "+", "self", ".", "_image_ext", ")", "\n", "# assert os.path.exists(image_path), 'Path does not exist: {}'.format(image_path)", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc._load_image_set_index": [[52, 65], ["os.path.join", "os.path.exists", "open", "int", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Load the indexes listed in this dataset's image set file.\n    \"\"\"", "\n", "# Example path to image set file:", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'splits'", ",", "\n", "self", ".", "_image_set", "+", "'.ids'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_set_file", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "      ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "imlist", "=", "[", "int", "(", "x", ")", "for", "x", "in", "image_index", "]", "\n", "return", "image_index", ",", "imlist", "#[:100]", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc._get_default_path": [[66, 71], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the default path where COCO is expected to be installed.\n    \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "'..'", ",", "'data'", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.name": [[72, 75], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.coco_caption_data": [[76, 79], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "coco_caption_data", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_coco_caption_data", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.num_classes": [[80, 83], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.classes": [[84, 87], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.class_to_ind": [[88, 91], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "class_to_ind", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_class_to_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.image_index": [[92, 95], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_index", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.coco_voc.coco_voc.num_images": [[96, 99], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_images", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "image_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.cap_eval_utils.calc_pr_ovr": [[7, 47], ["numpy.float64", "numpy.hstack", "numpy.argsort", "numpy.array", "numpy.array", "np.array.copy", "xrange", "numpy.array", "numpy.sum", "cap_eval_utils.voc_ap", "numpy.cumsum", "numpy.sum", "range", "numpy.cumsum", "counts[].astype", "out[].astype", "numpy.cumsum", "numpy.cumsum", "xrange", "len", "numpy.array", "int", "max"], "function", ["home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.cap_eval_utils.voc_ap"], ["def", "calc_pr_ovr", "(", "counts", ",", "out", ",", "K", ")", ":", "\n", "  ", "\"\"\"\n  [P, R, score, ap] = calc_pr_ovr(counts, out, K)\n  Input    :\n    counts : number of occurrences of this word in the ith image\n    out    : score for this image\n    K      : number of references\n  Output   :\n    P, R   : precision and recall\n    score  : score which corresponds to the particular precision and recall\n    ap     : average precision\n  \"\"\"", "\n", "K", "=", "np", ".", "float64", "(", "K", ")", "\n", "tog", "=", "np", ".", "hstack", "(", "(", "counts", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float64", ")", ",", "out", "[", ":", ",", "np", ".", "newaxis", "]", ".", "astype", "(", "np", ".", "float64", ")", ")", ")", "\n", "ind", "=", "np", ".", "argsort", "(", "out", ")", "\n", "ind", "=", "ind", "[", ":", ":", "-", "1", "]", "\n", "score", "=", "np", ".", "array", "(", "[", "tog", "[", "i", ",", "1", "]", "for", "i", "in", "ind", "]", ")", "\n", "sortcounts", "=", "np", ".", "array", "(", "[", "tog", "[", "i", ",", "0", "]", "for", "i", "in", "ind", "]", ")", "\n", "\n", "tp", "=", "sortcounts", "*", "(", "1.", "-", "1.", "/", "K", ")", ";", "\n", "fp", "=", "sortcounts", ".", "copy", "(", ")", ";", "\n", "for", "i", "in", "xrange", "(", "sortcounts", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "if", "sortcounts", "[", "i", "]", ">", "1", ":", "\n", "      ", "fp", "[", "i", "]", "=", "0.", ";", "\n", "", "elif", "sortcounts", "[", "i", "]", "==", "0", ":", "\n", "      ", "fp", "[", "i", "]", "=", "1.", ";", "\n", "", "elif", "sortcounts", "[", "i", "]", "==", "1", ":", "\n", "      ", "fp", "[", "i", "]", "=", "1.", "/", "K", ";", "\n", "\n", "", "", "P", "=", "np", ".", "cumsum", "(", "tp", ")", "/", "(", "np", ".", "cumsum", "(", "tp", ")", "+", "np", ".", "cumsum", "(", "fp", ")", ")", ";", "\n", "\n", "# c = accumarray(sortcounts(:)+1, 1);", "\n", "c", "=", "[", "np", ".", "sum", "(", "np", ".", "array", "(", "sortcounts", ")", "==", "i", ")", "for", "i", "in", "xrange", "(", "int", "(", "max", "(", "sortcounts", ")", "+", "1", ")", ")", "]", "\n", "ind", "=", "np", ".", "array", "(", "range", "(", "0", ",", "len", "(", "c", ")", ")", ")", ";", "\n", "numinst", "=", "ind", "*", "c", "*", "(", "K", "-", "1.", ")", "/", "K", ";", "\n", "numinst", "=", "np", ".", "sum", "(", "numinst", ",", "axis", "=", "0", ")", "\n", "R", "=", "np", ".", "cumsum", "(", "tp", ")", "/", "numinst", "\n", "\n", "ap", "=", "voc_ap", "(", "R", ",", "P", ")", "\n", "return", "P", ",", "R", ",", "score", ",", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.cap_eval_utils.voc_ap": [[49, 67], ["rec.reshape.reshape", "prec.reshape.reshape", "numpy.zeros", "numpy.ones", "numpy.vstack", "numpy.vstack", "range", "max", "len", "numpy.where"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ")", ":", "\n", "  ", "\"\"\"\n  ap = voc_ap(rec, prec)\n  Computes the AP under the precision recall curve.\n  \"\"\"", "\n", "\n", "rec", "=", "rec", ".", "reshape", "(", "rec", ".", "size", ",", "1", ")", ";", "prec", "=", "prec", ".", "reshape", "(", "prec", ".", "size", ",", "1", ")", "\n", "z", "=", "np", ".", "zeros", "(", "(", "1", ",", "1", ")", ")", ";", "o", "=", "np", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ";", "\n", "mrec", "=", "np", ".", "vstack", "(", "(", "z", ",", "rec", ",", "o", ")", ")", "\n", "mpre", "=", "np", ".", "vstack", "(", "(", "z", ",", "prec", ",", "z", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mpre", ")", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "    ", "mpre", "[", "i", "]", "=", "max", "(", "mpre", "[", "i", "]", ",", "mpre", "[", "i", "+", "1", "]", ")", "\n", "\n", "", "I", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", "0", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", ";", "\n", "ap", "=", "0", ";", "\n", "for", "i", "in", "I", ":", "\n", "    ", "ap", "=", "ap", "+", "(", "mrec", "[", "i", "]", "-", "mrec", "[", "i", "-", "1", "]", ")", "*", "mpre", "[", "i", "]", ";", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.cap_eval_utils.compute_precision_score_mapping": [[68, 86], ["numpy.argsort", "xrange", "numpy.sort", "numpy.vstack", "numpy.vstack", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d.", "len", "max", "numpy.unique", "min", "max", "min", "max"], "function", ["None"], ["", "def", "compute_precision_score_mapping", "(", "thresh", ",", "prec", ",", "score", ")", ":", "\n", "  ", "ind", "=", "np", ".", "argsort", "(", "thresh", ")", ";", "\n", "thresh", "=", "thresh", "[", "ind", "]", ";", "\n", "prec", "=", "prec", "[", "ind", "]", ";", "\n", "for", "i", "in", "xrange", "(", "1", ",", "len", "(", "prec", ")", ")", ":", "\n", "    ", "prec", "[", "i", "]", "=", "max", "(", "prec", "[", "i", "]", ",", "prec", "[", "i", "-", "1", "]", ")", ";", "\n", "\n", "", "indexes", "=", "np", ".", "unique", "(", "thresh", ",", "return_index", "=", "True", ")", "[", "1", "]", "\n", "indexes", "=", "np", ".", "sort", "(", "indexes", ")", ";", "\n", "thresh", "=", "thresh", "[", "indexes", "]", "\n", "prec", "=", "prec", "[", "indexes", "]", "\n", "\n", "thresh", "=", "np", ".", "vstack", "(", "(", "min", "(", "-", "1000", ",", "min", "(", "thresh", ")", "-", "1", ")", ",", "thresh", "[", ":", ",", "np", ".", "newaxis", "]", ",", "max", "(", "1000", ",", "max", "(", "thresh", ")", "+", "1", ")", ")", ")", ";", "\n", "prec", "=", "np", ".", "vstack", "(", "(", "prec", "[", "0", "]", ",", "prec", "[", ":", ",", "np", ".", "newaxis", "]", ",", "prec", "[", "-", "1", "]", ")", ")", ";", "\n", "\n", "f", "=", "interp1d", "(", "thresh", "[", ":", ",", "0", "]", ",", "prec", "[", ":", ",", "0", "]", ")", "\n", "val", "=", "f", "(", "score", ")", "\n", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.cap_eval_utils.human_agreement": [[87, 105], ["numpy.zeros", "xrange", "len", "numpy.sum", "numpy.array", "sum", "numpy.sum", "range", "len"], "function", ["None"], ["", "def", "human_agreement", "(", "gt", ",", "K", ")", ":", "\n", "  ", "\"\"\"\n  function [prec, recall] = human_agreement(gt, K)\n  \"\"\"", "\n", "c", "=", "np", ".", "zeros", "(", "(", "K", "+", "1", ",", "1", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "for", "i", "in", "xrange", "(", "len", "(", "gt", ")", ")", ":", "\n", "    ", "c", "[", "gt", "[", "i", "]", "]", "+=", "1", ";", "\n", "\n", "", "c", "=", "c", "/", "np", ".", "sum", "(", "c", ")", ";", "\n", "ind", "=", "np", ".", "array", "(", "range", "(", "len", "(", "c", ")", ")", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "n_tp", "=", "sum", "(", "ind", "*", "(", "ind", "-", "1", ")", "*", "c", ")", "/", "K", ";", "\n", "n_fp", "=", "c", "[", "1", "]", "/", "K", ";", "\n", "numinst", "=", "np", ".", "sum", "(", "c", "*", "(", "K", "-", "1", ")", "*", "ind", ")", "/", "K", ";", "\n", "prec", "=", "n_tp", "/", "(", "n_tp", "+", "n_fp", ")", ";", "\n", "recall", "=", "n_tp", "/", "numinst", ";", "\n", "\n", "return", "prec", ",", "recall", "\n", "", ""]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.preprocess.get_vocab_top_k": [[7, 12], ["dict", "vocab.keys"], "function", ["None"], ["def", "get_vocab_top_k", "(", "vocab", ",", "k", ")", ":", "\n", "  ", "v", "=", "dict", "(", ")", ";", "\n", "for", "key", "in", "vocab", ".", "keys", "(", ")", ":", "\n", "    ", "v", "[", "key", "]", "=", "vocab", "[", "key", "]", "[", ":", "k", "]", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.preprocess.get_vocab_counts": [[13, 27], ["numpy.zeros", "xrange", "len", "coco_caps.getAnnIds", "coco_caps.getAnnIds.sort", "coco_caps.loadAnns", "enumerate", "len", "len", "len", "nltk.word_tokenize", "list", "str().lower", "vocab[].index", "set", "str"], "function", ["None"], ["", "def", "get_vocab_counts", "(", "image_ids", ",", "coco_caps", ",", "max_cap", ",", "vocab", ")", ":", "\n", "  ", "counts", "=", "np", ".", "zeros", "(", "(", "len", "(", "image_ids", ")", ",", "len", "(", "vocab", "[", "'words'", "]", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", "in", "xrange", "(", "len", "(", "image_ids", ")", ")", ":", "\n", "    ", "ann_ids", "=", "coco_caps", ".", "getAnnIds", "(", "image_ids", "[", "i", "]", ")", "\n", "assert", "(", "len", "(", "ann_ids", ")", ">=", "max_cap", ")", ",", "'less than {:d} number of captions for image {:d}'", ".", "format", "(", "max_cap", ",", "image_ids", "[", "i", "]", ")", "\n", "ann_ids", ".", "sort", "(", ")", "\n", "ann_ids", "=", "ann_ids", "[", ":", "max_cap", "]", "\n", "anns", "=", "coco_caps", ".", "loadAnns", "(", "ann_ids", ")", "\n", "tmp", "=", "[", "word_tokenize", "(", "str", "(", "a", "[", "'caption'", "]", ")", ".", "lower", "(", ")", ")", "for", "a", "in", "anns", "]", "\n", "for", "(", "j", ",", "tmp_j", ")", "in", "enumerate", "(", "tmp", ")", ":", "\n", "      ", "pos", "=", "[", "vocab", "[", "'words'", "]", ".", "index", "(", "tmp_j_k", ")", "for", "tmp_j_k", "in", "tmp_j", "if", "tmp_j_k", "in", "vocab", "[", "'words'", "]", "]", "\n", "pos", "=", "list", "(", "set", "(", "pos", ")", ")", "\n", "counts", "[", "i", ",", "pos", "]", "=", "counts", "[", "i", ",", "pos", "]", "+", "1", "\n", "", "", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.s-gupta_visual-concepts.None.preprocess.get_vocab": [[28, 74], ["coco_caps.getImgIds", "coco_caps.getImgIds.sort", "xrange", "collections.Counter", "vcb.most_common.most_common", "sorted", "xrange", "numpy.argsort", "len", "coco_caps.getAnnIds", "coco_caps.loadAnns", "t.append", "set", "len", "numpy.argmax", "poss.append", "counts.append", "nltk.pos_tag", "sum", "enumerate", "nltk.word_tokenize", "mapping.get", "enumerate", "str().lower", "str"], "function", ["None"], ["", "def", "get_vocab", "(", "imset", ",", "coco_caps", ",", "punctuations", ",", "mapping", ")", ":", "\n", "  ", "image_ids", "=", "coco_caps", ".", "getImgIds", "(", ")", "\n", "image_ids", ".", "sort", "(", ")", ";", "t", "=", "[", "]", "\n", "\n", "for", "i", "in", "xrange", "(", "len", "(", "image_ids", ")", ")", ":", "\n", "    ", "annIds", "=", "coco_caps", ".", "getAnnIds", "(", "image_ids", "[", "i", "]", ")", ";", "\n", "anns", "=", "coco_caps", ".", "loadAnns", "(", "annIds", ")", ";", "\n", "tmp", "=", "[", "pos_tag", "(", "word_tokenize", "(", "str", "(", "a", "[", "'caption'", "]", ")", ".", "lower", "(", ")", ")", ")", "for", "a", "in", "anns", "]", "\n", "t", ".", "append", "(", "tmp", ")", "\n", "\n", "# Make a vocabulary by computing counts of words over the whole dataset.", "\n", "", "t", "=", "[", "t3", "for", "t1", "in", "t", "for", "t2", "in", "t1", "for", "t3", "in", "t2", "]", "\n", "t", "=", "[", "(", "l", ",", "'other'", ")", "if", "mapping", ".", "get", "(", "r", ")", "is", "None", "else", "(", "l", ",", "mapping", "[", "r", "]", ")", "for", "(", "l", ",", "r", ")", "in", "t", "]", "\n", "vcb", "=", "Counter", "(", "elem", "for", "elem", "in", "t", ")", "\n", "vcb", "=", "vcb", ".", "most_common", "(", ")", "\n", "\n", "# Merge things that are in the same or similar pos", "\n", "word", "=", "[", "l", "for", "(", "(", "l", ",", "r", ")", ",", "c", ")", "in", "vcb", "]", ";", "\n", "pos", "=", "[", "r", "for", "(", "(", "l", ",", "r", ")", ",", "c", ")", "in", "vcb", "]", ";", "\n", "count", "=", "[", "c", "for", "(", "(", "l", ",", "r", ")", ",", "c", ")", "in", "vcb", "]", ";", "\n", "\n", "poss", "=", "[", "]", ";", "\n", "counts", "=", "[", "]", ";", "\n", "words", "=", "sorted", "(", "set", "(", "word", ")", ")", "\n", "for", "j", "in", "xrange", "(", "len", "(", "words", ")", ")", ":", "\n", "    ", "indexes", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "word", ")", "if", "x", "==", "words", "[", "j", "]", "]", "\n", "pos_tmp", "=", "[", "pos", "[", "i", "]", "for", "i", "in", "indexes", "]", "\n", "count_tmp", "=", "[", "count", "[", "i", "]", "for", "i", "in", "indexes", "]", "\n", "ind", "=", "np", ".", "argmax", "(", "count_tmp", ")", "\n", "poss", ".", "append", "(", "pos_tmp", "[", "ind", "]", ")", "\n", "counts", ".", "append", "(", "sum", "(", "count_tmp", ")", ")", "\n", "\n", "", "ind", "=", "np", ".", "argsort", "(", "counts", ")", "\n", "ind", "=", "ind", "[", ":", ":", "-", "1", "]", "\n", "words", "=", "[", "words", "[", "i", "]", "for", "i", "in", "ind", "]", "\n", "poss", "=", "[", "poss", "[", "i", "]", "for", "i", "in", "ind", "]", "\n", "counts", "=", "[", "counts", "[", "i", "]", "for", "i", "in", "ind", "]", "\n", "\n", "# Remove punctuations", "\n", "non_punct", "=", "[", "i", "for", "(", "i", ",", "x", ")", "in", "enumerate", "(", "words", ")", "if", "x", "not", "in", "punctuations", "]", "\n", "words", "=", "[", "words", "[", "i", "]", "for", "i", "in", "non_punct", "]", "\n", "counts", "=", "[", "counts", "[", "i", "]", "for", "i", "in", "non_punct", "]", "\n", "poss", "=", "[", "poss", "[", "i", "]", "for", "i", "in", "non_punct", "]", "\n", "\n", "vocab", "=", "{", "'words'", ":", "words", ",", "'counts'", ":", "counts", ",", "'poss'", ":", "poss", "}", ";", "\n", "return", "vocab", "\n", "", ""]]}