{"home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Compose.__init__": [[131, 133], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Compose.__call__": [[134, 138], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", ",", "label", "=", "t", "(", "img", ",", "label", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.ToTensor.__call__": [[142, 144], ["torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "img.copy", "label.copy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "img", ".", "copy", "(", ")", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "label", ".", "copy", "(", ")", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Normalize.__init__": [[149, 152], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Normalize.__call__": [[153, 167], ["tensor.clone.clone.clone", "zip", "t.sub_().div_", "transforms.Normalize.mean.append", "transforms.Normalize.std.append", "t.mean", "t.std", "t.sub_"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "def", "__call__", "(", "self", ",", "tensor", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "mean", "is", "None", ":", "\n", "            ", "self", ".", "mean", "=", "[", "]", "\n", "for", "t", "in", "tensor", ":", "\n", "                ", "self", ".", "mean", ".", "append", "(", "t", ".", "mean", "(", ")", ")", "\n", "", "", "if", "self", ".", "std", "is", "None", ":", "\n", "            ", "self", ".", "std", "=", "[", "]", "\n", "for", "t", "in", "tensor", ":", "\n", "                ", "self", ".", "std", ".", "append", "(", "t", ".", "std", "(", ")", ")", "\n", "\n", "", "", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "return", "tensor", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Scale.__init__": [[177, 179], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Scale.__call__": [[180, 182], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Pad.__init__": [[185, 192], ["len", "transforms.Pad3d", "len", "transforms.Pad2d", "RuntimeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "pad_value", "=", "0", ")", ":", "\n", "        ", "if", "len", "(", "size", ")", "==", "3", ":", "\n", "            ", "self", ".", "padder", "=", "Pad3d", "(", "size", ",", "pad_value", ")", "\n", "", "elif", "len", "(", "size", ")", "==", "2", ":", "\n", "            ", "self", ".", "padder", "=", "Pad2d", "(", "size", ",", "pad_value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid center crop size.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Pad.__call__": [[193, 196], ["transforms.Pad.padder"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "img_new", ",", "label_new", "=", "self", ".", "padder", "(", "img", ",", "label", ")", "\n", "return", "img_new", ",", "label_new", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Pad3d.__init__": [[199, 202], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "pad_value", "=", "0", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "pad_value", "=", "pad_value", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Pad3d.__call__": [[203, 220], ["torch.zeros().long", "numpy.array", "numpy.array", "label.size", "torch.zeros", "torch.ones", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "img_new", "=", "(", "torch", ".", "ones", "(", "img", ".", "size", "(", "0", ")", ",", "*", "self", ".", "size", ")", "*", "self", ".", "pad_value", ")", ".", "float", "(", ")", "\n", "label_new", "=", "torch", ".", "zeros", "(", "*", "self", ".", "size", ")", ".", "long", "(", ")", "\n", "new_size", "=", "np", ".", "array", "(", "self", ".", "size", ")", "\n", "size", "=", "np", ".", "array", "(", "label", ".", "size", "(", ")", ")", "\n", "start_pos", "=", "(", "new_size", "-", "size", ")", "//", "2", "\n", "end_pos", "=", "start_pos", "+", "size", "\n", "#        print('new size is', new_size)", "\n", "#        print('start_pos is', start_pos)", "\n", "#        print('end_pos is', end_pos)", "\n", "#        print('img_new size is', img_new.size())", "\n", "#        print('img size is', img.size())", "\n", "img_new", "[", "...", ",", "start_pos", "[", "0", "]", ":", "end_pos", "[", "0", "]", ",", "start_pos", "[", "1", "]", ":", "end_pos", "[", "1", "]", ",", "\n", "start_pos", "[", "2", "]", ":", "end_pos", "[", "2", "]", "]", "=", "img", "\n", "label_new", "[", "...", ",", "start_pos", "[", "0", "]", ":", "end_pos", "[", "0", "]", ",", "start_pos", "[", "1", "]", ":", "end_pos", "[", "1", "]", ",", "\n", "start_pos", "[", "2", "]", ":", "end_pos", "[", "2", "]", "]", "=", "label", "\n", "return", "img_new", ",", "label_new", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Pad2d.__init__": [[223, 226], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "pad_value", "=", "0", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "pad_value", "=", "pad_value", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Pad2d.__call__": [[227, 237], ["torch.zeros().long", "numpy.array", "numpy.array", "label.size", "torch.zeros", "torch.ones", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "img_new", "=", "(", "torch", ".", "ones", "(", "img", ".", "size", "(", "0", ")", ",", "*", "self", ".", "size", ")", "*", "self", ".", "pad_value", ")", ".", "float", "(", ")", "\n", "label_new", "=", "torch", ".", "zeros", "(", "*", "self", ".", "size", ")", ".", "long", "(", ")", "\n", "new_size", "=", "np", ".", "array", "(", "self", ".", "size", ")", "\n", "size", "=", "np", ".", "array", "(", "label", ".", "size", "(", ")", ")", "\n", "start_pos", "=", "(", "new_size", "-", "size", ")", "//", "2", "\n", "end_pos", "=", "start_pos", "+", "size", "\n", "img_new", "[", "...", ",", "start_pos", "[", "0", "]", ":", "end_pos", "[", "0", "]", ",", "start_pos", "[", "1", "]", ":", "end_pos", "[", "1", "]", "]", "=", "img", "\n", "label_new", "[", "...", ",", "start_pos", "[", "0", "]", ":", "end_pos", "[", "0", "]", ",", "start_pos", "[", "1", "]", ":", "end_pos", "[", "1", "]", "]", "=", "label", "\n", "return", "img_new", ",", "label_new", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Lambda.__init__": [[240, 243], ["type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "assert", "type", "(", "lambd", ")", "is", "types", ".", "LambdaType", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.Lambda.__call__": [[244, 246], ["transforms.Lambda.lambd"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "img", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.CenterCrop.__init__": [[248, 255], ["len", "transforms.CenterCrop3d", "len", "transforms.CenterCrop2d", "RuntimeError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "size_label", ")", ":", "\n", "        ", "if", "len", "(", "size", ")", "==", "3", ":", "\n", "            ", "self", ".", "cropper", "=", "CenterCrop3d", "(", "size", ",", "size_label", ")", "\n", "", "elif", "len", "(", "size", ")", "==", "2", ":", "\n", "            ", "self", ".", "cropper", "=", "CenterCrop2d", "(", "size", ",", "size_label", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid center crop size.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.CenterCrop.__call__": [[256, 258], ["transforms.CenterCrop.cropper"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "return", "self", ".", "cropper", "(", "img", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.CenterCrop3d.__init__": [[260, 271], ["isinstance", "isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "size_label", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", ")", "*", "3", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "if", "size_label", "is", "None", ":", "\n", "            ", "self", ".", "size_label", "=", "self", ".", "size", "\n", "", "elif", "isinstance", "(", "size_label", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size_label", "=", "(", "int", "(", "size_label", ")", ",", ")", "*", "3", "\n", "", "else", ":", "\n", "            ", "self", ".", "size_label", "=", "size_label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.CenterCrop3d.__call__": [[272, 275], ["transforms.center_crop", "transforms.center_crop"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.center_crop", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.center_crop"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "return", "center_crop", "(", "img", ",", "self", ".", "size", ")", ",", "center_crop", "(", "label", ",", "self", ".", "size_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.CenterCrop2d.__init__": [[277, 288], ["isinstance", "isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "size_label", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", ")", "*", "2", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "if", "size_label", "is", "None", ":", "\n", "            ", "self", ".", "size_label", "=", "self", ".", "size", "\n", "", "elif", "isinstance", "(", "size_label", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size_label", "=", "(", "int", "(", "size_label", ")", ",", ")", "*", "2", "\n", "", "else", ":", "\n", "            ", "self", ".", "size_label", "=", "size_label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.CenterCrop2d.__call__": [[289, 292], ["transforms.center_crop", "transforms.center_crop"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.center_crop", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.center_crop"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "return", "center_crop", "(", "img", ",", "self", ".", "size", ")", ",", "center_crop", "(", "label", ",", "self", ".", "size_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomCrop.__init__": [[299, 306], ["len", "transforms.RandomCrop3d", "len", "transforms.RandomCrop2d", "RuntimeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "len", "(", "size", ")", "==", "3", ":", "\n", "            ", "self", ".", "cropper", "=", "RandomCrop3d", "(", "size", ")", "\n", "", "elif", "len", "(", "size", ")", "==", "2", ":", "\n", "            ", "self", ".", "cropper", "=", "RandomCrop2d", "(", "size", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid random crop size.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomCrop.__call__": [[307, 309], ["transforms.RandomCrop.cropper"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "return", "self", ".", "cropper", "(", "img", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomCropMinSize.__init__": [[317, 325], ["len", "transforms.RandomCrop3d", "len", "transforms.RandomCrop2d", "RuntimeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "mini_positive", "=", "0", ")", ":", "\n", "        ", "self", ".", "mini_positive", "=", "mini_positive", "\n", "if", "len", "(", "size", ")", "==", "3", ":", "\n", "            ", "self", ".", "cropper", "=", "RandomCrop3d", "(", "size", ")", "\n", "", "elif", "len", "(", "size", ")", "==", "2", ":", "\n", "            ", "self", ".", "cropper", "=", "RandomCrop2d", "(", "size", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid random crop size.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomCropMinSize.__call__": [[326, 335], ["transforms.RandomCropMinSize.cropper", "labelc.sum", "transforms.RandomCropMinSize.cropper", "print"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "imgc", ",", "labelc", "=", "self", ".", "cropper", "(", "img", ",", "label", ")", "\n", "count", "=", "0", "\n", "while", "(", "0", "<", "labelc", ".", "sum", "(", ")", "<", "self", ".", "mini_positive", ")", ":", "\n", "            ", "imgc", ",", "labelc", "=", "self", ".", "cropper", "(", "img", ",", "label", ")", "\n", "count", "+=", "1", "\n", "", "if", "count", ">", "0", ":", "\n", "            ", "print", "(", "'Crop %d times for a valid positive size.'", "%", "count", ")", "\n", "", "return", "imgc", ",", "labelc", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomCrop3d.__init__": [[341, 346], ["isinstance", "int", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomCrop3d.__call__": [[347, 358], ["random.randint", "random.randint", "random.randint", "img.size", "transforms.crop", "transforms.crop"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "d", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "[", "-", "3", ":", "]", "\n", "td", ",", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "d", "==", "td", "and", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "label", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "z1", "=", "random", ".", "randint", "(", "0", ",", "d", "-", "td", ")", "\n", "loc", "=", "(", "x1", ",", "y1", ",", "z1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ",", "z1", "+", "td", ")", "\n", "return", "crop", "(", "img", ",", "loc", ")", ",", "crop", "(", "label", ",", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomCrop2d.__init__": [[364, 369], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomCrop2d.__call__": [[370, 380], ["random.randint", "random.randint", "img.size", "transforms.crop", "transforms.crop"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "label", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "loc", "=", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", "\n", "return", "crop", "(", "img", ",", "loc", ")", ",", "crop", "(", "label", ",", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.BalanceCrop.__init__": [[384, 396], ["isinstance", "isinstance", "torch.LongTensor", "torch.LongTensor", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", ",", "img_size", ",", "label_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "if", "label_size", "is", "None", ":", "\n", "            ", "label_size", "=", "img_size", "\n", "", "if", "isinstance", "(", "img_size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "img_size", "=", "(", "int", "(", "img_size", ")", ",", ")", "*", "3", "\n", "", "if", "isinstance", "(", "label_size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "label_size", "=", "(", "int", "(", "label_size", ")", ",", ")", "*", "3", "\n", "\n", "", "self", ".", "img_size", "=", "torch", ".", "LongTensor", "(", "img_size", ")", "\n", "self", ".", "label_size", "=", "torch", ".", "LongTensor", "(", "label_size", ")", "\n", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.BalanceCrop.__call__": [[397, 425], ["torch.nonzero", "torch.eq().long", "torch.nonzero", "RuntimeError", "random.randint", "random.randint", "transforms.crop_centroid", "transforms.crop_centroid", "torch.eq", "len", "len", "len", "len", "len", "len", "random.random"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop_centroid", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop_centroid"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "# Note: img is CxDxHxW, label is DxHxW", "\n", "#        if self.mask is None or self.mask.size() != img.size():", "\n", "#            self._make_mask(label.size())", "\n", "\n", "        ", "positive_loc", "=", "torch", ".", "nonzero", "(", "label", ")", "#*self.mask", "\n", "\n", "inverse_label", "=", "torch", ".", "eq", "(", "label", ",", "0", ")", ".", "long", "(", ")", "\n", "negative_loc", "=", "torch", ".", "nonzero", "(", "inverse_label", ")", "#*self.mask", "\n", "\n", "if", "len", "(", "negative_loc", ")", "==", "0", "and", "len", "(", "positive_loc", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid patch size.'", ")", "\n", "", "elif", "len", "(", "negative_loc", ")", "==", "0", ":", "\n", "            ", "is_positive", "=", "True", "\n", "", "elif", "len", "(", "positive_loc", ")", "==", "0", ":", "\n", "            ", "is_positive", "=", "False", "\n", "", "else", ":", "\n", "            ", "is_positive", "=", "random", ".", "random", "(", ")", "<=", "self", ".", "prob", "\n", "\n", "", "if", "is_positive", ":", "\n", "            ", "i", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "positive_loc", ")", "-", "1", ")", "\n", "center_loc", "=", "positive_loc", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "i", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "negative_loc", ")", "-", "1", ")", "\n", "center_loc", "=", "negative_loc", "[", "i", "]", "\n", "\n", "", "return", "crop_centroid", "(", "img", ",", "center_loc", ",", "self", ".", "img_size", ")", ",", "crop_centroid", "(", "label", ",", "center_loc", ",", "self", ".", "label_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.BalanceCrop._make_mask": [[426, 444], ["torch.ones().long", "len", "torch.ones", "len", "RuntimeError"], "methods", ["None"], ["", "def", "_make_mask", "(", "self", ",", "input_size", ")", ":", "\n", "        ", "mask", "=", "torch", ".", "ones", "(", "input_size", ")", ".", "long", "(", ")", "\n", "half_img_size", "=", "self", ".", "img_size", "/", "2", "\n", "if", "len", "(", "input_size", ")", "==", "3", ":", "\n", "            ", "mask", "[", ":", "half_img_size", "[", "0", "]", "]", "=", "0", "\n", "mask", "[", "-", "half_img_size", "[", "0", "]", ":", "]", "=", "0", "\n", "mask", "[", ":", ",", ":", "half_img_size", "[", "1", "]", "]", "=", "0", "\n", "mask", "[", ":", ",", "-", "half_img_size", "[", "1", "]", ":", "]", "=", "0", "\n", "mask", "[", ":", ",", ":", ",", ":", "half_img_size", "[", "2", "]", "]", "=", "0", "\n", "mask", "[", ":", ",", ":", ",", "-", "half_img_size", "[", "2", "]", ":", "]", "=", "0", "\n", "", "elif", "len", "(", "input_size", ")", "==", "2", ":", "\n", "            ", "mask", "[", ":", "half_img_size", "[", "0", "]", "]", "=", "0", "\n", "mask", "[", "-", "half_img_size", "[", "0", "]", ":", "]", "=", "0", "\n", "mask", "[", ":", ",", ":", "half_img_size", "[", "1", "]", "]", "=", "0", "\n", "mask", "[", ":", ",", "-", "half_img_size", "[", "1", "]", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Unknown label dimension.'", ")", "\n", "", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomTransverseFlip.__call__": [[448, 450], ["transforms.flip_tensor", "transforms.flip_tensor"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor"], ["def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "return", "flip_tensor", "(", "img", ",", "-", "1", ")", ",", "flip_tensor", "(", "label", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomSagittalFlip.__call__": [[454, 456], ["transforms.flip_tensor", "transforms.flip_tensor"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor"], ["def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "return", "flip_tensor", "(", "img", ",", "-", "2", ")", ",", "flip_tensor", "(", "label", ",", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomVerticalFlip.__call__": [[460, 462], ["transforms.flip_tensor", "transforms.flip_tensor"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor"], ["def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "return", "flip_tensor", "(", "img", ",", "-", "3", ")", ",", "flip_tensor", "(", "label", ",", "-", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomFlip.__init__": [[464, 473], ["len", "transforms.RandomFlip3d", "len", "transforms.RandomFlip2d", "RuntimeError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "axis_switch", "=", "None", ")", ":", "\n", "        ", "if", "len", "(", "axis_switch", ")", "==", "3", ":", "\n", "            ", "self", ".", "flipper", "=", "RandomFlip3d", "(", "axis_switch", ")", "\n", "", "elif", "len", "(", "axis_switch", ")", "==", "2", ":", "\n", "            ", "self", ".", "flipper", "=", "RandomFlip2d", "(", "axis_switch", ")", "\n", "", "elif", "axis_switch", "==", "None", ":", "\n", "            ", "self", ".", "flipper", "=", "passthrough", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid random flip controller.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomFlip.__call__": [[474, 476], ["transforms.RandomFlip.flipper"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "return", "self", ".", "flipper", "(", "img", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomFlip3d.__init__": [[478, 480], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "axis_switch", "=", "(", "1", ",", "1", ",", "1", ")", ")", ":", "\n", "        ", "self", ".", "axis_switch", "=", "axis_switch", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomFlip3d.__call__": [[481, 495], ["random.randint", "transforms.flip_tensor", "transforms.flip_tensor", "random.randint", "transforms.flip_tensor", "transforms.flip_tensor", "random.randint", "transforms.flip_tensor", "transforms.flip_tensor"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "axis_switch", "[", "0", "]", ":", "\n", "            ", "if", "random", ".", "randint", "(", "0", ",", "1", ")", "==", "1", ":", "\n", "                ", "img", "=", "flip_tensor", "(", "img", ",", "-", "3", ")", "\n", "label", "=", "flip_tensor", "(", "label", ",", "-", "3", ")", "\n", "", "", "if", "self", ".", "axis_switch", "[", "1", "]", ":", "\n", "            ", "if", "random", ".", "randint", "(", "0", ",", "1", ")", "==", "1", ":", "\n", "                ", "img", "=", "flip_tensor", "(", "img", ",", "-", "2", ")", "\n", "label", "=", "flip_tensor", "(", "label", ",", "-", "2", ")", "\n", "", "", "if", "self", ".", "axis_switch", "[", "2", "]", ":", "\n", "            ", "if", "random", ".", "randint", "(", "0", ",", "1", ")", "==", "1", ":", "\n", "                ", "img", "=", "flip_tensor", "(", "img", ",", "-", "1", ")", "\n", "label", "=", "flip_tensor", "(", "label", ",", "-", "1", ")", "\n", "", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomFlip2d.__init__": [[497, 499], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "axis_switch", "=", "(", "1", ",", "1", ")", ")", ":", "\n", "        ", "self", ".", "axis_switch", "=", "axis_switch", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomFlip2d.__call__": [[500, 510], ["random.randint", "transforms.flip_tensor", "transforms.flip_tensor", "random.randint", "transforms.flip_tensor", "transforms.flip_tensor"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "axis_switch", "[", "0", "]", ":", "\n", "            ", "if", "random", ".", "randint", "(", "0", ",", "1", ")", "==", "1", ":", "\n", "                ", "img", "=", "flip_tensor", "(", "img", ",", "-", "2", ")", "\n", "label", "=", "flip_tensor", "(", "label", ",", "-", "2", ")", "\n", "", "", "if", "self", ".", "axis_switch", "[", "1", "]", ":", "\n", "            ", "if", "random", ".", "randint", "(", "0", ",", "1", ")", "==", "1", ":", "\n", "                ", "img", "=", "flip_tensor", "(", "img", ",", "-", "1", ")", "\n", "label", "=", "flip_tensor", "(", "label", ",", "-", "1", ")", "\n", "", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomSizedCrop.__init__": [[519, 521], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomSizedCrop.__call__": [[522, 524], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomRotate2d.__init__": [[527, 529], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomRotate2d.__call__": [[530, 535], ["random.randint", "transforms.rot90_tensor", "transforms.rot90_tensor"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.rot90_tensor", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.rot90_tensor"], ["", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "k", "=", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "if", "k", "==", "0", ":", "\n", "            ", "return", "img", ",", "label", "\n", "", "return", "rot90_tensor", "(", "img", ",", "k", ")", ",", "rot90_tensor", "(", "label", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomDropout.__init__": [[539, 541], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "drop_rate", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomDropout.__call__": [[542, 562], ["tensor.size", "numpy.random.random", "all", "range", "RuntimeError", "random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "drop_rate", "<=", "0", ":", "\n", "            ", "return", "tensor", ",", "label", "\n", "", "elif", "self", ".", "drop_rate", ">", "1", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dropout rate greater than 1.'", ")", "\n", "\n", "", "C", "=", "tensor", ".", "size", "(", "0", ")", "\n", "drop_count", "=", "0", "\n", "rand_flag", "=", "np", ".", "random", ".", "random", "(", "C", ")", "\n", "rand_flag", "=", "rand_flag", "<", "self", ".", "drop_rate", "\n", "if", "all", "(", "rand_flag", ")", ":", "\n", "            ", "rand_flag", "[", "random", ".", "randint", "(", "0", ",", "C", "-", "1", ")", "]", "=", "False", "\n", "", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "            ", "if", "rand_flag", "[", "c", "]", ":", "\n", "                ", "drop_count", "+=", "1", "\n", "tensor", "[", "c", ",", "...", "]", "=", "0.0", "\n", "#        print(rand_flag)", "\n", "#        print(drop_count)", "\n", "", "", "tensor", "*=", "C", "/", "(", "C", "-", "drop_count", ")", "\n", "return", "tensor", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomBlack.__init__": [[566, 576], ["len", "transforms.RandomBlack2d", "len", "transforms.RandomBlack3d", "RuntimeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "black_patch_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "black_patch_size", "=", "black_patch_size", "\n", "if", "black_patch_size", "is", "None", ":", "\n", "            ", "self", ".", "blacker", "=", "passthrough", "\n", "", "elif", "len", "(", "black_patch_size", ")", "==", "2", ":", "\n", "            ", "self", ".", "blacker", "=", "RandomBlack2d", "(", "black_patch_size", ")", "\n", "", "elif", "len", "(", "black_patch_size", ")", "==", "3", ":", "\n", "            ", "self", ".", "blacker", "=", "RandomBlack3d", "(", "black_patch_size", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid length of black_patch_size.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomBlack.__call__": [[577, 579], ["transforms.RandomBlack.blacker"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "tensor", ",", "label", ")", ":", "\n", "        ", "return", "self", ".", "blacker", "(", "tensor", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomBlack2d.__init__": [[583, 585], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "black_patch_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "black_patch_size", "=", "black_patch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomBlack2d.__call__": [[586, 595], ["random.randint", "random.randint", "tensor.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ",", "label", ")", ":", "\n", "        ", "th", ",", "tw", "=", "self", ".", "black_patch_size", "\n", "h", ",", "w", "=", "tensor", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "tensor", "[", "...", ",", "x1", ":", "x1", "+", "th", ",", "y1", ":", "y1", "+", "tw", "]", "=", "0", "\n", "label", "[", "...", ",", "x1", ":", "x1", "+", "th", ",", "y1", ":", "y1", "+", "tw", "]", "=", "0", "\n", "\n", "return", "tensor", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomBlack3d.__init__": [[599, 601], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "black_patch_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "black_patch_size", "=", "black_patch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomBlack3d.__call__": [[602, 612], ["random.randint", "random.randint", "random.randint", "tensor.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ",", "label", ")", ":", "\n", "        ", "td", ",", "th", ",", "tw", "=", "self", ".", "black_patch_size", "\n", "d", ",", "h", ",", "w", "=", "tensor", ".", "size", "(", ")", "[", "-", "3", ":", "]", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "d", "-", "td", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "z1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "tensor", "[", "...", ",", "x1", ":", "x1", "+", "td", ",", "y1", ":", "y1", "+", "th", ",", "z1", ":", "z1", "+", "tw", "]", "=", "0", "\n", "label", "[", "...", ",", "x1", ":", "x1", "+", "td", ",", "y1", ":", "y1", "+", "th", ",", "z1", ":", "z1", "+", "tw", "]", "=", "0", "\n", "\n", "return", "tensor", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomCrop_bak.__init__": [[620, 625], ["isinstance", "int", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.RandomCrop_bak.__call__": [[626, 637], ["random.randint", "random.randint", "random.randint", "img.size", "transforms.crop", "transforms.crop"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "label", ")", ":", "\n", "        ", "d", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "[", "-", "3", ":", "]", "\n", "td", ",", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "d", "==", "td", "and", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "label", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "z1", "=", "random", ".", "randint", "(", "0", ",", "d", "-", "td", ")", "\n", "loc", "=", "(", "x1", ",", "y1", ",", "z1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ",", "z1", "+", "td", ")", "\n", "return", "crop", "(", "img", ",", "loc", ")", ",", "crop", "(", "label", ",", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.passthrough": [[20, 22], ["None"], "function", ["None"], ["def", "passthrough", "(", "img", ",", "label", ")", ":", "\n", "    ", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.has_even": [[23, 28], ["None"], "function", ["None"], ["", "def", "has_even", "(", "intseq", ")", ":", "\n", "    ", "for", "i", "in", "intseq", ":", "\n", "        ", "if", "i", "%", "2", "is", "0", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop_size_correct": [[29, 39], ["None"], "function", ["None"], ["", "def", "crop_size_correct", "(", "sp", ",", "ep", ",", "this_size", ")", ":", "\n", "    ", "assert", "ep", "-", "sp", "<=", "this_size", ",", "'Invalid crop size.'", "\n", "if", "sp", "<", "0", ":", "\n", "        ", "ep", "-=", "sp", "\n", "sp", "-=", "sp", "\n", "", "elif", "ep", ">", "this_size", ":", "\n", "        ", "sp", "-=", "(", "ep", "-", "this_size", ")", "\n", "ep", "-=", "(", "ep", "-", "this_size", ")", "\n", "\n", "", "return", "sp", ",", "ep", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop": [[40, 58], ["tensor.size", "len", "transforms.crop_size_correct", "transforms.crop_size_correct", "transforms.crop_size_correct", "len", "transforms.crop_size_correct", "transforms.crop_size_correct", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop_size_correct", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop_size_correct", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop_size_correct", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop_size_correct", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop_size_correct"], ["", "def", "crop", "(", "tensor", ",", "locations", ")", ":", "\n", "    ", "\"\"\" Crop on the inner-most 2 or 3 dimensions\n    ''location'' is a tuple indicating locations of start and end points\n    \"\"\"", "\n", "s", "=", "tensor", ".", "size", "(", ")", "\n", "if", "len", "(", "locations", ")", "==", "6", ":", "\n", "        ", "x1", ",", "y1", ",", "z1", ",", "x2", ",", "y2", ",", "z2", "=", "locations", "\n", "x1", ",", "x2", "=", "crop_size_correct", "(", "x1", ",", "x2", ",", "s", "[", "-", "1", "]", ")", "\n", "y1", ",", "y2", "=", "crop_size_correct", "(", "y1", ",", "y2", ",", "s", "[", "-", "2", "]", ")", "\n", "z1", ",", "z2", "=", "crop_size_correct", "(", "z1", ",", "z2", ",", "s", "[", "-", "3", "]", ")", "\n", "return", "tensor", "[", "...", ",", "z1", ":", "z2", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "", "elif", "len", "(", "locations", ")", "==", "4", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "locations", "\n", "x1", ",", "x2", "=", "crop_size_correct", "(", "x1", ",", "x2", ",", "s", "[", "-", "1", "]", ")", "\n", "y1", ",", "y2", "=", "crop_size_correct", "(", "y1", ",", "y2", ",", "s", "[", "-", "2", "]", ")", "\n", "return", "tensor", "[", "...", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Invalid crop size dimension.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.center_crop": [[59, 83], ["len", "transforms.crop", "tensor.size", "len", "transforms.crop", "RuntimeError", "tensor.size"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop"], ["", "", "def", "center_crop", "(", "tensor", ",", "size", ")", ":", "\n", "    ", "if", "len", "(", "size", ")", "==", "3", ":", "\n", "        ", "d", ",", "h", ",", "w", "=", "tensor", ".", "size", "(", ")", "[", "-", "3", ":", "]", "\n", "td", ",", "th", ",", "tw", "=", "size", "\n", "if", "d", "==", "td", "and", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "tensor", "\n", "\n", "", "x1", "=", "(", "w", "-", "tw", ")", "//", "2", "\n", "y1", "=", "(", "h", "-", "th", ")", "//", "2", "\n", "z1", "=", "(", "d", "-", "td", ")", "//", "2", "\n", "loc", "=", "(", "x1", ",", "y1", ",", "z1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ",", "z1", "+", "td", ")", "\n", "return", "crop", "(", "tensor", ",", "loc", ")", "\n", "", "elif", "len", "(", "size", ")", "==", "2", ":", "\n", "        ", "h", ",", "w", "=", "tensor", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "th", ",", "tw", "=", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "tensor", "\n", "\n", "", "x1", "=", "(", "w", "-", "tw", ")", "//", "2", "\n", "y1", "=", "(", "h", "-", "th", ")", "//", "2", "\n", "loc", "=", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", "\n", "return", "crop", "(", "tensor", ",", "loc", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Invalid center crop size.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop_centroid": [[84, 104], ["len", "len", "len", "transforms.crop", "len", "int", "zip", "zip", "transforms.crop", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.crop"], ["", "", "def", "crop_centroid", "(", "tensor", ",", "centroid", ",", "size", ")", ":", "\n", "    ", "\"\"\" Crop on the inner-most 2 or 3 dimensions\n    ''centroid'' is a tuple indicating locations of the centroid\n    ''size'' is a tuple indicating the size of the cropped patch\n    \"\"\"", "\n", "assert", "len", "(", "centroid", ")", "==", "len", "(", "size", ")", ",", "'Mismatched centroid and size.'", "\n", "#    if has_even(size):", "\n", "#        raise RuntimeWarning('Even crop size. May lead to one-voxel shift of the centroid.')", "\n", "\n", "s", "=", "[", "int", "(", "ss", ")", "//", "2", "for", "ss", "in", "size", "]", "\n", "start_pos", "=", "[", "ci", "-", "si", "for", "ci", ",", "si", "in", "zip", "(", "centroid", ",", "s", ")", "]", "\n", "end_pos", "=", "[", "start_pos_i", "+", "size_i", "for", "start_pos_i", ",", "size_i", "in", "zip", "(", "start_pos", ",", "size", ")", "]", "\n", "if", "len", "(", "centroid", ")", "==", "3", ":", "\n", "        ", "locations", "=", "(", "start_pos", "[", "2", "]", ",", "start_pos", "[", "1", "]", ",", "start_pos", "[", "0", "]", ",", "end_pos", "[", "2", "]", ",", "end_pos", "[", "1", "]", ",", "end_pos", "[", "0", "]", ")", "\n", "return", "crop", "(", "tensor", ",", "locations", ")", "\n", "", "elif", "len", "(", "centroid", "==", "2", ")", ":", "\n", "        ", "locations", "=", "(", "start_pos", "[", "1", "]", ",", "start_pos", "[", "0", "]", ",", "end_pos", "[", "1", "]", ",", "end_pos", "[", "0", "]", ")", "\n", "return", "crop", "(", "tensor", ",", "locations", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Invalid centroid crop size.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.flip_tensor": [[106, 111], ["numpy.flip().copy", "torch.from_numpy", "len", "tensor.size", "numpy.flip", "tensor.numpy"], "function", ["None"], ["", "", "def", "flip_tensor", "(", "tensor", ",", "axis", ")", ":", "\n", "    ", "if", "len", "(", "tensor", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "        ", "return", "tensor", "\n", "", "tNp", "=", "np", ".", "flip", "(", "tensor", ".", "numpy", "(", ")", ",", "axis", ")", ".", "copy", "(", ")", "\n", "return", "torch", ".", "from_numpy", "(", "tNp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.transforms.rot90_tensor": [[113, 121], ["torch.from_numpy", "len", "numpy.rot90().copy", "tensor.size", "len", "numpy.rot90().copy", "tensor.numpy", "numpy.rot90", "tensor.size", "tensor.numpy", "numpy.rot90", "tensor.numpy"], "function", ["None"], ["", "def", "rot90_tensor", "(", "tensor", ",", "k", "=", "1", ")", ":", "\n", "    ", "if", "len", "(", "tensor", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "tNp", "=", "np", ".", "rot90", "(", "tensor", ".", "numpy", "(", ")", ",", "k", ")", ".", "copy", "(", ")", "\n", "", "elif", "len", "(", "tensor", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "        ", "tNp", "=", "np", ".", "rot90", "(", "tensor", ".", "numpy", "(", ")", ",", "k", ",", "(", "1", ",", "2", ")", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "tNp", "=", "tensor", ".", "numpy", "(", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "tNp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.SegMetric.__init__": [[124, 164], ["dict", "dict", "RuntimeError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sn_list", "=", "None", ",", "metric_names", "=", "None", ",", "is_cc", "=", "False", ")", ":", "\n", "        ", "self", ".", "ACC", "=", "'acc'", "\n", "self", ".", "DSC", "=", "'dsc'", "\n", "self", ".", "SENS", "=", "'sens'", "\n", "self", ".", "SPEC", "=", "'spec'", "\n", "self", ".", "SIZEL", "=", "'sizeL'", "\n", "self", ".", "SIZEP", "=", "'sizeP'", "\n", "self", ".", "FPL", "=", "'fpl'", "\n", "self", ".", "FNL", "=", "'fnl'", "\n", "self", ".", "TOTALL", "=", "'totall'", "\n", "self", ".", "ALL_METRIC", "=", "(", "self", ".", "ACC", ",", "self", ".", "DSC", ",", "self", ".", "SENS", ",", "self", ".", "SPEC", ",", "self", ".", "SIZEL", ",", "self", ".", "SIZEP", ")", "\n", "self", ".", "is_cc", "=", "is_cc", "\n", "if", "is_cc", ":", "\n", "            ", "self", ".", "ALL_METRIC", "=", "self", ".", "ALL_METRIC", "+", "(", "self", ".", "FPL", ",", "self", ".", "FNL", ",", "self", ".", "TOTALL", ")", "\n", "", "self", ".", "calculator", "=", "{", "\n", "self", ".", "ACC", ":", "accuracy", ",", "\n", "self", ".", "DSC", ":", "dice", ",", "\n", "self", ".", "SENS", ":", "sensitivity", ",", "\n", "self", ".", "SPEC", ":", "specificity", ",", "\n", "self", ".", "SIZEL", ":", "sizeL", ",", "\n", "self", ".", "SIZEP", ":", "sizeP", ",", "\n", "self", ".", "FPL", ":", "num_false_positive", ",", "\n", "self", ".", "FNL", ":", "num_false_negative", ",", "\n", "self", ".", "TOTALL", ":", "num_positive", ",", "\n", "}", "\n", "if", "metric_names", "==", "None", ":", "\n", "            ", "self", ".", "metric_names", "=", "self", ".", "ALL_METRIC", "\n", "", "else", ":", "\n", "            ", "for", "m", "in", "metric_names", ":", "\n", "                ", "if", "m", "not", "in", "self", ".", "ALL_METRIC", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Unknown specified metric type: %s'", "%", "m", ")", "\n", "", "", "self", ".", "metric_names", "=", "metric_names", "\n", "\n", "", "self", ".", "sn_list", "=", "sn_list", "if", "sn_list", "else", "[", "]", "\n", "self", ".", "buffer", "=", "dict", "(", ")", "\n", "self", ".", "metric", "=", "dict", "(", ")", "\n", "for", "m", "in", "self", ".", "metric_names", ":", "\n", "            ", "self", ".", "buffer", "[", "m", "]", "=", "[", "]", "\n", "self", ".", "metric", "[", "m", "]", "=", "0", "\n", "", "self", ".", "buffer_changed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.SegMetric._buffer2metric": [[165, 176], ["len", "float", "len", "len", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "_buffer2metric", "(", "self", ",", "is_strict", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "buffer_changed", ":", "\n", "            ", "if", "len", "(", "self", ")", "==", "0", ":", "\n", "                ", "self", ".", "buffer_changed", "=", "False", "\n", "return", "\n", "", "if", "is_strict", ":", "\n", "                ", "assert", "len", "(", "self", ".", "sn_list", ")", "==", "len", "(", "self", ".", "buffer", "[", "self", ".", "metric_names", "[", "0", "]", "]", ")", ",", "'Unmatch: lengths of sn_list and buffer.'", "\n", "", "for", "m", "in", "self", ".", "metric_names", ":", "\n", "                ", "self", ".", "metric", "[", "m", "]", "=", "float", "(", "torch", ".", "stack", "(", "self", ".", "buffer", "[", "m", "]", ")", ".", "mean", "(", ")", ")", "\n", "", "", "self", ".", "buffer_changed", "=", "False", "\n", "return", "self", ".", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.SegMetric.get_metric": [[177, 179], ["validate.SegMetric._buffer2metric"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric._buffer2metric"], ["", "def", "get_metric", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_buffer2metric", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.SegMetric.write_metric": [[180, 210], ["validate.SegMetric._buffer2metric", "validate.SegMetric.metric.items", "fid.write", "fid.write", "validate.is_float", "metric_str.append", "fid.write", "enumerate", "str.upper", "validate.SegMetric.buffer.items", "fid.write", "validate.is_float"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric._buffer2metric", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.is_float", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.is_float"], ["", "def", "write_metric", "(", "self", ",", "fid", ",", "preline", "=", "None", ",", "is_indiv", "=", "False", ")", ":", "\n", "        ", "'''Write (final) detailed metrics to file'''", "\n", "self", ".", "_buffer2metric", "(", ")", "\n", "if", "preline", ":", "\n", "            ", "fid", ".", "write", "(", "preline", "+", "'\\n'", ")", "\n", "# Construct total_line and title_line", "\n", "", "metric_str", "=", "[", "]", "\n", "title_line", "=", "'|%12s|'", "%", "'SN'", "\n", "for", "k", ",", "v", "in", "self", ".", "metric", ".", "items", "(", ")", ":", "\n", "            ", "title_line", "+=", "'%8s|'", "%", "str", ".", "upper", "(", "k", ")", "\n", "if", "is_float", "(", "v", ")", ":", "\n", "                ", "s", "=", "'%s = %.4f'", "%", "(", "k", ",", "v", ")", "\n", "", "else", ":", "\n", "                ", "s", "=", "'%s = %d'", "%", "(", "k", ",", "v", ")", "\n", "", "metric_str", ".", "append", "(", "s", ")", "\n", "", "total_line", "=", "', '", ".", "join", "(", "metric_str", ")", "\n", "fid", ".", "write", "(", "total_line", "+", "'\\n'", ")", "\n", "if", "is_indiv", ":", "\n", "            ", "fid", ".", "write", "(", "title_line", "+", "'\\n'", ")", "\n", "# Construct individual lines", "\n", "for", "i", ",", "sn", "in", "enumerate", "(", "self", ".", "sn_list", ")", ":", "\n", "                ", "line", "=", "'|%12s|'", "%", "sn", "\n", "for", "_", ",", "v", "in", "self", ".", "buffer", ".", "items", "(", ")", ":", "\n", "                    ", "w", "=", "v", "[", "i", "]", "\n", "if", "is_float", "(", "w", ")", ":", "\n", "                        ", "s", "=", "'%8.4f|'", "%", "w", "\n", "", "else", ":", "\n", "                        ", "s", "=", "'%8d|'", "%", "w", "\n", "", "line", "+=", "s", "\n", "", "fid", ".", "write", "(", "line", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.SegMetric.print_metric": [[211, 243], ["validate.SegMetric._buffer2metric", "validate.SegMetric.metric.items", "print", "print", "print", "validate.is_float", "metric_str.append", "print", "enumerate", "str.upper", "validate.SegMetric.buffer.items", "print", "validate.is_float"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric._buffer2metric", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.is_float", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.is_float"], ["", "", "", "def", "print_metric", "(", "self", ",", "preword", "=", "None", ",", "is_indiv", "=", "False", ")", ":", "\n", "        ", "'''Print (final, detailed) metrics to stdout'''", "\n", "self", ".", "_buffer2metric", "(", ")", "\n", "if", "preword", ":", "\n", "            ", "print", "(", "'%s Segmentation Metrics:'", "%", "preword", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Segmentation Metrics:'", ")", "\n", "# Construct total_line and title_line", "\n", "", "metric_str", "=", "[", "]", "\n", "title_line", "=", "'|%12s|'", "%", "'SN'", "\n", "for", "k", ",", "v", "in", "self", ".", "metric", ".", "items", "(", ")", ":", "\n", "            ", "title_line", "+=", "'%8s|'", "%", "str", ".", "upper", "(", "k", ")", "\n", "if", "is_float", "(", "v", ")", ":", "\n", "                ", "s", "=", "'%s = %.4f'", "%", "(", "k", ",", "v", ")", "\n", "", "else", ":", "\n", "                ", "s", "=", "'%s = %d'", "%", "(", "k", ",", "v", ")", "\n", "", "metric_str", ".", "append", "(", "s", ")", "\n", "", "total_line", "=", "', '", ".", "join", "(", "metric_str", ")", "\n", "print", "(", "total_line", ")", "\n", "if", "is_indiv", ":", "\n", "            ", "print", "(", "title_line", ")", "\n", "# Construct individual lines", "\n", "for", "i", ",", "sn", "in", "enumerate", "(", "self", ".", "sn_list", ")", ":", "\n", "                ", "line", "=", "'|%12s|'", "%", "sn", "\n", "for", "_", ",", "v", "in", "self", ".", "buffer", ".", "items", "(", ")", ":", "\n", "                    ", "w", "=", "v", "[", "i", "]", "\n", "if", "is_float", "(", "w", ")", ":", "\n", "                        ", "s", "=", "'%8.4f|'", "%", "w", "\n", "", "else", ":", "\n", "                        ", "s", "=", "'%8d|'", "%", "w", "\n", "", "line", "+=", "s", "\n", "", "print", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.SegMetric.evaluate_append": [[244, 253], ["validate.SegMetric.buffer[].append", "len", "len", "RuntimeWarning", "validate.SegMetric.sn_list.append"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "", "", "def", "evaluate_append", "(", "self", ",", "pred", ",", "label", ",", "sn", "=", "None", ")", ":", "\n", "        ", "self", ".", "buffer_changed", "=", "True", "\n", "if", "sn", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "self", ".", "sn_list", ")", "!=", "len", "(", "self", ".", "buffer", "[", "self", ".", "metric_names", "[", "0", "]", "]", ")", ":", "\n", "                ", "raise", "RuntimeWarning", "(", "'SN is specified but the lengths of sn_list and buffer do not match.'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "sn_list", ".", "append", "(", "sn", ")", "\n", "", "", "for", "m", "in", "self", ".", "metric_names", ":", "\n", "            ", "self", ".", "buffer", "[", "m", "]", ".", "append", "(", "self", ".", "calculator", "[", "m", "]", "(", "pred", ",", "label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.SegMetric.append": [[254, 259], ["validate.SegMetric.sn_list.append", "enumerate", "validate.SegMetric.buffer[].append"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "", "def", "append", "(", "self", ",", "sn", ",", "metrics", ")", ":", "\n", "        ", "self", ".", "buffer_changed", "=", "True", "\n", "self", ".", "sn_list", ".", "append", "(", "sn", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "metrics", ")", ":", "\n", "            ", "self", ".", "buffer", "[", "self", ".", "ALL_METRIC", "[", "i", "]", "]", ".", "append", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.SegMetric.__len__": [[260, 262], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "buffer", "[", "self", ".", "metric_names", "[", "0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.__init__": [[265, 292], ["dict", "dict", "RuntimeError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sn_list", "=", "None", ",", "metric_names", "=", "None", ")", ":", "\n", "        ", "self", ".", "ACC", "=", "'acc'", "\n", "self", ".", "F1", "=", "'f1'", "\n", "self", ".", "RECL", "=", "'recl'", "\n", "self", ".", "PREC", "=", "'prec'", "\n", "self", ".", "AUC", "=", "'auc'", "\n", "self", ".", "ALL_METRIC", "=", "(", "self", ".", "ACC", ",", "self", ".", "F1", ",", "self", ".", "RECL", ",", "self", ".", "PREC", ",", "self", ".", "AUC", ")", "\n", "self", ".", "calculator", "=", "{", "\n", "self", ".", "ACC", ":", "accuracy", ",", "\n", "self", ".", "F1", ":", "dice", ",", "\n", "self", ".", "RECL", ":", "sensitivity", ",", "\n", "self", ".", "PREC", ":", "precision", ",", "\n", "self", ".", "AUC", ":", "auc", "}", "\n", "if", "metric_names", "==", "None", ":", "\n", "            ", "self", ".", "metric_names", "=", "self", ".", "ALL_METRIC", "\n", "", "else", ":", "\n", "            ", "for", "m", "in", "metric_names", ":", "\n", "                ", "if", "m", "not", "in", "self", ".", "ALL_METRIC", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Unknown specified metric type: %s'", "%", "m", ")", "\n", "", "", "self", ".", "metric_names", "=", "metric_names", "\n", "\n", "", "self", ".", "sn_list", "=", "sn_list", "if", "sn_list", "else", "[", "]", "\n", "self", ".", "buffer", "=", "dict", "(", "pred", "=", "[", "]", ",", "prob", "=", "[", "]", ",", "target", "=", "[", "]", ")", "\n", "self", ".", "metric", "=", "dict", "(", ")", "\n", "for", "m", "in", "self", ".", "metric_names", ":", "\n", "            ", "self", ".", "metric", "[", "m", "]", "=", "0", "\n", "", "self", ".", "buffer_changed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric._buffer2metric": [[293, 305], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "float", "float"], "methods", ["None"], ["", "def", "_buffer2metric", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "buffer_changed", ":", "\n", "            ", "prob_tensor", "=", "torch", ".", "stack", "(", "self", ".", "buffer", "[", "'prob'", "]", ")", "\n", "pred_tensor", "=", "torch", ".", "stack", "(", "self", ".", "buffer", "[", "'pred'", "]", ")", "\n", "target_tensor", "=", "torch", ".", "stack", "(", "self", ".", "buffer", "[", "'target'", "]", ")", "\n", "for", "m", "in", "self", ".", "metric_names", ":", "\n", "                ", "if", "m", "==", "self", ".", "AUC", ":", "\n", "                    ", "self", ".", "metric", "[", "m", "]", "=", "float", "(", "self", ".", "calculator", "[", "m", "]", "(", "prob_tensor", ",", "target_tensor", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "metric", "[", "m", "]", "=", "float", "(", "self", ".", "calculator", "[", "m", "]", "(", "pred_tensor", ",", "target_tensor", ")", ")", "\n", "", "", "", "self", ".", "buffer_changed", "=", "False", "\n", "return", "self", ".", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.get_metric": [[306, 308], ["validate.ClsMetric._buffer2metric"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric._buffer2metric"], ["", "def", "get_metric", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_buffer2metric", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.write_metric": [[309, 335], ["validate.ClsMetric._buffer2metric", "validate.ClsMetric.metric.items", "fid.write", "fid.write", "validate.is_float", "metric_str.append", "fid.write", "enumerate", "validate.ClsMetric.buffer.items", "fid.write"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric._buffer2metric", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.is_float", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "def", "write_metric", "(", "self", ",", "fid", ",", "preline", "=", "None", ",", "is_indiv", "=", "False", ")", ":", "\n", "        ", "'''Write (final) detailed metrics to file'''", "\n", "self", ".", "_buffer2metric", "(", ")", "\n", "if", "preline", ":", "\n", "            ", "fid", ".", "write", "(", "preline", "+", "'\\n'", ")", "\n", "# Construct total_line and title_line", "\n", "", "metric_str", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "metric", ".", "items", "(", ")", ":", "\n", "            ", "if", "is_float", "(", "v", ")", ":", "\n", "                ", "s", "=", "'%s = %.4f'", "%", "(", "k", ",", "v", ")", "\n", "", "else", ":", "\n", "                ", "s", "=", "'%s = %d'", "%", "(", "k", ",", "v", ")", "\n", "", "metric_str", ".", "append", "(", "s", ")", "\n", "", "total_line", "=", "', '", ".", "join", "(", "metric_str", ")", "\n", "title_line", "=", "'|%12s|%8s|%8s|'", "%", "(", "'SN'", ",", "'Predict'", ",", "'Truth'", ")", "\n", "fid", ".", "write", "(", "total_line", "+", "'\\n'", ")", "\n", "if", "is_indiv", ":", "\n", "            ", "fid", ".", "write", "(", "title_line", "+", "'\\n'", ")", "\n", "# Construct individual lines", "\n", "for", "i", ",", "sn", "in", "enumerate", "(", "self", ".", "sn_list", ")", ":", "\n", "                ", "line", "=", "'|%12s|'", "%", "sn", "\n", "for", "_", ",", "v", "in", "self", ".", "buffer", ".", "items", "(", ")", ":", "\n", "                    ", "w", "=", "v", "[", "i", "]", "\n", "s", "=", "'%8d|'", "%", "w", "\n", "line", "+=", "s", "\n", "", "fid", ".", "write", "(", "line", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.print_metric": [[336, 364], ["validate.ClsMetric._buffer2metric", "validate.ClsMetric.metric.items", "print", "print", "print", "validate.is_float", "metric_str.append", "print", "enumerate", "validate.ClsMetric.buffer.items", "print"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric._buffer2metric", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.is_float", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "", "", "def", "print_metric", "(", "self", ",", "preword", "=", "None", ",", "is_indiv", "=", "False", ")", ":", "\n", "        ", "'''Print (final, detailed) metrics to stdout'''", "\n", "self", ".", "_buffer2metric", "(", ")", "\n", "if", "preword", ":", "\n", "            ", "print", "(", "'%s Classification Metrics:'", "%", "preword", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Classification Metrics:'", ")", "\n", "# Construct total_line and title_line", "\n", "", "metric_str", "=", "[", "]", "\n", "title_line", "=", "'|%12s|%8s|%8s|'", "%", "(", "'SN'", ",", "'Predict'", ",", "'Truth'", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "metric", ".", "items", "(", ")", ":", "\n", "            ", "if", "is_float", "(", "v", ")", ":", "\n", "                ", "s", "=", "'%s = %.4f'", "%", "(", "k", ",", "v", ")", "\n", "", "else", ":", "\n", "                ", "s", "=", "'%s = %d'", "%", "(", "k", ",", "v", ")", "\n", "", "metric_str", ".", "append", "(", "s", ")", "\n", "", "total_line", "=", "', '", ".", "join", "(", "metric_str", ")", "\n", "print", "(", "total_line", ")", "\n", "if", "is_indiv", ":", "\n", "            ", "print", "(", "title_line", ")", "\n", "# Construct individual lines", "\n", "for", "i", ",", "sn", "in", "enumerate", "(", "self", ".", "sn_list", ")", ":", "\n", "                ", "line", "=", "'|%12s|'", "%", "sn", "\n", "for", "_", ",", "v", "in", "self", ".", "buffer", ".", "items", "(", ")", ":", "\n", "                    ", "w", "=", "v", "[", "i", "]", "\n", "s", "=", "'%8d|'", "%", "w", "\n", "line", "+=", "s", "\n", "", "print", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.evaluate_append": [[365, 375], ["validate.ClsMetric.buffer[].append", "validate.ClsMetric.buffer[].append", "validate.ClsMetric.buffer[].append", "len", "len", "RuntimeWarning", "validate.ClsMetric.sn_list.append"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "", "", "def", "evaluate_append", "(", "self", ",", "prob", ",", "label", ",", "sn", "=", "None", ",", "thres", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "buffer_changed", "=", "True", "\n", "if", "sn", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "self", ".", "sn_list", ")", "!=", "len", "(", "self", ".", "buffer", "[", "'pred'", "]", ")", ":", "\n", "                ", "raise", "RuntimeWarning", "(", "'SN is specified but the lengths of sn_list and buffer do not match.'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "sn_list", ".", "append", "(", "sn", ")", "\n", "", "", "self", ".", "buffer", "[", "'prob'", "]", ".", "append", "(", "prob", ")", "\n", "self", ".", "buffer", "[", "'pred'", "]", ".", "append", "(", "(", "prob", ">", "thres", ")", ".", "long", "(", ")", ")", "\n", "self", ".", "buffer", "[", "'target'", "]", ".", "append", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append": [[376, 378], ["validate.ClsMetric.evaluate_append"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.evaluate_append"], ["", "def", "append", "(", "self", ",", "sn", ",", "prob", ",", "label", ")", ":", "\n", "        ", "self", ".", "evaluate_append", "(", "prob", ",", "label", ",", "sn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.__len__": [[379, 381], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "buffer", "[", "'target'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.is_float": [[19, 23], ["isinstance", "isinstance", "value.is_floating_point"], "function", ["None"], ["def", "is_float", "(", "value", ")", ":", "\n", "    ", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "value", ".", "is_floating_point", "(", ")", "\n", "", "return", "isinstance", "(", "value", ",", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.dice": [[25, 30], ["pred_b.sum().float", "target_b.sum().float", "pred_b.sum", "target_b.sum"], "function", ["None"], ["def", "dice", "(", "pred_b", ",", "target_b", ")", ":", "\n", "    ", "'''Calculate Dice index of the binary prediction'''", "\n", "eps", "=", "1e-6", "\n", "dice_index", "=", "(", "2", "*", "(", "pred_b", "*", "target_b", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "eps", ")", "/", "(", "pred_b", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "target_b", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "eps", ")", "\n", "return", "dice_index", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.accuracy": [[31, 35], ["torch.tensor", "torch.tensor", "target_b.numel"], "function", ["None"], ["", "def", "accuracy", "(", "pred_b", ",", "target_b", ")", ":", "\n", "    ", "'''Calculate accuracy of the binary prediction'''", "\n", "accuracy", "=", "(", "(", "pred_b", "==", "target_b", ")", ".", "sum", "(", ")", ".", "float", "(", ")", ")", "/", "torch", ".", "tensor", "(", "target_b", ".", "numel", "(", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "target_b", ".", "device", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.sensitivity": [[36, 41], ["target_b.sum().float", "target_b.sum"], "function", ["None"], ["", "def", "sensitivity", "(", "pred_b", ",", "target_b", ")", ":", "\n", "    ", "'''Calculate sensitivity of the binary prediction'''", "\n", "eps", "=", "1e-6", "\n", "sensitivity_index", "=", "(", "(", "pred_b", "*", "target_b", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "eps", ")", "/", "(", "target_b", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "eps", ")", "\n", "return", "sensitivity_index", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.specificity": [[42, 51], ["torch.where", "torch.where", "torch.where", "torch.where", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.where.sum().float", "torch.where.sum"], "function", ["None"], ["", "def", "specificity", "(", "pred_b", ",", "target_b", ")", ":", "\n", "    ", "'''Calculate specificity of the binary prediction'''", "\n", "device", "=", "pred_b", ".", "device", "\n", "zero", ",", "one", "=", "torch", ".", "tensor", "(", "0", ",", "device", "=", "device", ")", ",", "torch", ".", "tensor", "(", "1", ",", "device", "=", "device", ")", "\n", "eps", "=", "1e-6", "\n", "pred_bn", "=", "torch", ".", "where", "(", "pred_b", ">", "0", ",", "zero", ",", "one", ")", "\n", "target_bn", "=", "torch", ".", "where", "(", "target_b", ">", "0", ",", "zero", ",", "one", ")", "\n", "specificity_index", "=", "(", "(", "pred_bn", "*", "target_bn", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "eps", ")", "/", "(", "target_bn", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "eps", ")", "\n", "return", "specificity_index", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.sizeL": [[52, 54], ["target_b.sum().float", "target_b.sum"], "function", ["None"], ["", "def", "sizeL", "(", "pred_b", ",", "target_b", ")", ":", "\n", "    ", "return", "target_b", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.sizeP": [[55, 57], ["pred_b.sum().float", "pred_b.sum"], "function", ["None"], ["", "def", "sizeP", "(", "pred_b", ",", "target_b", ")", ":", "\n", "    ", "return", "pred_b", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.precision": [[58, 63], ["pred_b.sum().float", "pred_b.sum"], "function", ["None"], ["", "def", "precision", "(", "pred_b", ",", "target_b", ")", ":", "\n", "    ", "'''Calculate precision of the binary prediction'''", "\n", "eps", "=", "1e-6", "\n", "prec", "=", "(", "(", "pred_b", "*", "target_b", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "eps", ")", "/", "(", "pred_b", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "eps", ")", "\n", "return", "prec", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.auc": [[64, 72], ["prob.cpu().numpy", "target_b.cpu().numpy", "sklearn.metrics.roc_auc_score", "prob.cpu", "target_b.cpu"], "function", ["None"], ["", "def", "auc", "(", "prob", ",", "target_b", ")", ":", "\n", "    ", "'''Calculate area under ROC curve (AUC) score'''", "\n", "prob_np", "=", "prob", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target_np", "=", "target_b", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "try", ":", "\n", "        ", "return", "roc_auc_score", "(", "target_np", ",", "prob_np", ")", "\n", "", "except", "ValueError", ":", "# In case only one class present", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.num_component": [[73, 78], ["mask.cpu().numpy", "scipy.ndimage.label", "torch.tensor", "torch.tensor", "numpy.ones", "mask.cpu"], "function", ["None"], ["", "", "def", "num_component", "(", "mask", ")", ":", "\n", "    ", "mask_np", "=", "mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "_", ",", "num_compo", "=", "ndimage", ".", "label", "(", "mask_np", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ")", ")", "\n", "num_compo", "=", "torch", ".", "tensor", "(", "num_compo", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "mask", ".", "device", ")", "\n", "return", "num_compo", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.num_false_positive": [[79, 90], ["pred_b.cpu().numpy", "target_b.cpu().numpy", "scipy.ndimage.label", "range", "torch.tensor", "torch.tensor", "numpy.ones", "numpy.where", "pred_b.cpu", "target_b.cpu", "overlap.any"], "function", ["None"], ["", "def", "num_false_positive", "(", "pred_b", ",", "target_b", ")", ":", "\n", "    ", "pred_np", "=", "pred_b", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "target_np", "=", "target_b", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "false_counter", "=", "0", "\n", "pred_compo", ",", "num_compo", "=", "ndimage", ".", "label", "(", "pred_np", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_compo", "+", "1", ")", ":", "\n", "        ", "current_pred", "=", "np", ".", "where", "(", "pred_compo", "==", "i", ",", "1", ",", "0", ")", "\n", "overlap", "=", "target_np", "*", "current_pred", "\n", "if", "~", "overlap", ".", "any", "(", ")", ":", "\n", "            ", "false_counter", "+=", "1", "\n", "", "", "return", "torch", ".", "tensor", "(", "false_counter", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "target_b", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.num_positive": [[91, 93], ["validate.num_component"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.num_component"], ["", "def", "num_positive", "(", "pred_b", ",", "target_b", ")", ":", "\n", "    ", "return", "num_component", "(", "target_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.num_false_negative": [[94, 96], ["validate.num_false_positive"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.num_false_positive"], ["", "def", "num_false_negative", "(", "pred_b", ",", "target_b", ")", ":", "\n", "    ", "return", "num_false_positive", "(", "target_b", ",", "pred_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.num_true_positive": [[97, 99], ["validate.num_positive", "validate.num_false_negative"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.num_positive", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.num_false_negative"], ["", "def", "num_true_positive", "(", "pred_b", ",", "target_b", ")", ":", "\n", "    ", "return", "num_positive", "(", "pred_b", ",", "target_b", ")", "-", "num_false_negative", "(", "pred_b", ",", "target_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.prob2label": [[100, 110], ["pred.view.view", "torch.argmin", "torch.argmin", "torch.argmax", "torch.argmax", "len", "torch.max", "torch.max", "pred.view.size", "pred.view.size"], "function", ["None"], ["", "def", "prob2label", "(", "pred", ")", ":", "\n", "    ", "'''Retrieve image-wise label from the raw network output (can be of (C,) for CNN, \n    or (C,H,W) for multi-instance learning CNN)'''", "\n", "if", "len", "(", "pred", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "        ", "_", ",", "label", "=", "torch", ".", "max", "(", "pred", ",", "dim", "=", "0", ")", "\n", "return", "label", "\n", "", "pred", "=", "pred", ".", "view", "(", "pred", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "mini_nega_loc", "=", "torch", ".", "argmin", "(", "pred", "[", "0", "]", ")", "\n", "label", "=", "torch", ".", "argmax", "(", "pred", "[", ":", ",", "mini_nega_loc", "]", ")", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.raw2prob": [[111, 121], ["pred.view.view", "torch.argmin", "torch.argmin", "len", "pred.view.size", "torch.softmax", "pred.view.size", "torch.softmax"], "function", ["None"], ["", "def", "raw2prob", "(", "pred", ")", ":", "\n", "    ", "'''Retrieve image-wise label probability from the raw network output (can be of (C,) for CNN, \n    or (C,H,W) for multi-instance learning CNN)'''", "\n", "if", "len", "(", "pred", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "        ", "prob", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "0", ")", "[", "1", "]", "\n", "return", "prob", "\n", "", "pred", "=", "pred", ".", "view", "(", "pred", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "mini_nega_loc", "=", "torch", ".", "argmin", "(", "pred", "[", "0", "]", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "pred", "[", ":", ",", "mini_nega_loc", "]", ",", "dim", "=", "0", ")", "[", "1", "]", "\n", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.validate_cs": [[383, 438], ["list", "range", "sm.append", "cm.append", "sn_counter.append", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "torch.no_grad", "torch.no_grad", "model.to", "model.eval", "iter", "s.get_metric", "c.get_metric", "validate.SegMetric", "validate.ClsMetric", "os.join", "os.join", "images.to.to", "model", "masks.to", "labels.to", "range", "len", "torch.softmax", "sm[].evaluate_append", "validate.raw2prob", "cm[].evaluate_append", "cm[].evaluate_append", "scipy.misc.toimage().save", "torch.sigmoid().cpu().numpy", "scipy.misc.toimage().save", "seg_prob[].max", "scipy.misc.toimage().save", "scipy.misc.toimage().save", "os.join", "os.join", "len", "torch.sigmoid().cpu().numpy", "scipy.ndimage.zoom", "scipy.misc.toimage().save", "os.join", "os.join", "scipy.misc.toimage", "torch.sigmoid().cpu", "scipy.misc.toimage", "cls_out.size", "os.join", "scipy.misc.toimage", "scipy.misc.toimage", "seg_mask.cpu().numpy", "torch.sigmoid().cpu", "scipy.misc.toimage", "[].cpu().numpy", "masks[].cpu().numpy", "torch.sigmoid", "seg_mask.cpu", "torch.sigmoid", "[].cpu", "masks[].cpu"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.get_metric", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.get_metric", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.evaluate_append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.raw2prob", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.evaluate_append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.evaluate_append"], ["", "", "def", "validate_cs", "(", "model", ",", "dataloader", ",", "sn_list", ",", "device", ",", "num_mo", "=", "1", ",", "save_dir", "=", "None", ",", "seg_thres", "=", "0.5", ",", "\n", "cls_thres", "=", "0.5", ",", "is_cc", "=", "False", ",", "clsfromseg", "=", "False", ")", ":", "\n", "    ", "'''Validate multi-ouput model's seg and cls performance on specified dataloader\n    \n    Arguements:\n        Output: a SegMetric array and a ClsMetric array, elements in each array \n        correspond to multiple model outputs.\n    '''", "\n", "sm", ",", "cm", ",", "sn_counter", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "mo_ind", "=", "list", "(", "range", "(", "-", "num_mo", ",", "0", ")", ")", "\n", "for", "_", "in", "mo_ind", ":", "\n", "        ", "sm", ".", "append", "(", "SegMetric", "(", "sn_list", ",", "is_cc", "=", "is_cc", ")", ")", "\n", "cm", ".", "append", "(", "ClsMetric", "(", "sn_list", ")", ")", "\n", "sn_counter", ".", "append", "(", "-", "1", ")", "\n", "", "if", "save_dir", ":", "\n", "        ", "seg_dir", ",", "cls_dir", "=", "P", ".", "join", "(", "save_dir", ",", "'seg'", ")", ",", "P", ".", "join", "(", "save_dir", ",", "'cls'", ")", "\n", "os", ".", "makedirs", "(", "seg_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "cls_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "images", ",", "masks", ",", "labels", "in", "iter", "(", "dataloader", ")", ":", "\n", "            ", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "masks", ",", "labels", "=", "masks", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "preds_seg", ",", "preds_cls", "=", "model", "(", "images", ")", "\n", "for", "i", "in", "mo_ind", ":", "# for each of the multiple outputs (heads)", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "preds_seg", "[", "i", "]", ")", ")", ":", "# within each mini-batch", "\n", "                    ", "idx", "=", "sn_counter", "[", "i", "]", "=", "sn_counter", "[", "i", "]", "+", "1", "\n", "seg_out", "=", "preds_seg", "[", "i", ",", "j", "]", "\n", "#                    _, seg_mask = torch.max(seg_out, dim=0)", "\n", "seg_prob", "=", "F", ".", "softmax", "(", "seg_out", ",", "dim", "=", "0", ")", "\n", "seg_mask", "=", "(", "seg_prob", "[", "1", "]", ">", "seg_thres", ")", ".", "long", "(", ")", "\n", "sm", "[", "i", "]", ".", "evaluate_append", "(", "seg_mask", ",", "masks", "[", "j", "]", ")", "\n", "cls_out", "=", "preds_cls", "[", "i", ",", "j", "]", "\n", "cls_prob", "=", "raw2prob", "(", "cls_out", ")", "\n", "if", "clsfromseg", ":", "\n", "                        ", "cm", "[", "i", "]", ".", "evaluate_append", "(", "seg_prob", "[", "1", "]", ".", "max", "(", ")", ",", "labels", "[", "j", "]", ",", "thres", "=", "cls_thres", ")", "\n", "", "else", ":", "\n", "                        ", "cm", "[", "i", "]", ".", "evaluate_append", "(", "cls_prob", ",", "labels", "[", "j", "]", ",", "thres", "=", "cls_thres", ")", "\n", "", "if", "save_dir", ":", "\n", "                        ", "if", "i", "==", "-", "1", ":", "\n", "                            ", "toimage", "(", "images", "[", "j", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "save", "(", "P", ".", "join", "(", "seg_dir", ",", "'%s.png'", "%", "(", "sn_list", "[", "idx", "]", ")", ")", ")", "\n", "toimage", "(", "masks", "[", "j", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "save", "(", "P", ".", "join", "(", "seg_dir", ",", "'%sagt.png'", "%", "(", "sn_list", "[", "idx", "]", ")", ")", ")", "\n", "", "toimage", "(", "seg_mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "save", "(", "P", ".", "join", "(", "seg_dir", ",", "'%s_%d_seg.png'", "%", "(", "sn_list", "[", "idx", "]", ",", "i", ")", ")", ")", "\n", "seg_prob", "=", "F", ".", "sigmoid", "(", "seg_out", "[", "1", "]", "-", "seg_out", "[", "0", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "toimage", "(", "seg_prob", ",", "cmin", "=", "0.", ",", "cmax", "=", "1.", ")", ".", "save", "(", "P", ".", "join", "(", "seg_dir", ",", "'%s_%d_float.png'", "%", "(", "sn_list", "[", "idx", "]", ",", "i", ")", ")", ")", "\n", "if", "len", "(", "cls_out", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "                            ", "img", "=", "F", ".", "sigmoid", "(", "cls_out", "[", "1", "]", "-", "cls_out", "[", "0", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img", "=", "zoom", "(", "img", ",", "1024", "/", "img", ".", "shape", "[", "0", "]", ")", "\n", "toimage", "(", "img", ",", "cmin", "=", "0.", ",", "cmax", "=", "1.", ")", ".", "save", "(", "P", ".", "join", "(", "cls_dir", ",", "'%s_%d_mil.png'", "%", "(", "sn_list", "[", "idx", "]", ",", "i", ")", ")", ")", "\n", "", "", "", "", "", "", "for", "s", "in", "sm", ":", "\n", "        ", "s", ".", "get_metric", "(", ")", "\n", "", "for", "c", "in", "cm", ":", "\n", "        ", "c", ".", "get_metric", "(", ")", "\n", "", "return", "sm", ",", "cm", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.adjust.adjust_lr": [[10, 47], ["kw.get", "kw.get", "isinstance", "isinstance", "kw.get", "kw.get", "kw.get", "math.floor", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "kw.get", "RuntimeError", "math.exp"], "function", ["None"], ["def", "adjust_lr", "(", "i", ",", "epoch", ",", "max_epoch", ",", "**", "kw", ")", ":", "\n", "    ", "lr_policy", "=", "kw", ".", "get", "(", "'lr_policy'", ")", "\n", "base_lr", "=", "kw", ".", "get", "(", "'base_lr'", ")", "\n", "lr_policy", "=", "lr_policy", "[", "i", "]", "if", "isinstance", "(", "lr_policy", ",", "(", "tuple", ",", "list", ")", ")", "else", "lr_policy", "\n", "base_lr", "=", "base_lr", "[", "i", "]", "if", "isinstance", "(", "base_lr", ",", "(", "tuple", ",", "list", ")", ")", "else", "base_lr", "\n", "if", "lr_policy", "==", "'fixed'", ":", "\n", "        ", "return", "base_lr", "\n", "", "elif", "lr_policy", "==", "'step'", ":", "\n", "        ", "gamma", "=", "kw", ".", "get", "(", "'gamma'", ")", "\n", "stepsize", "=", "kw", ".", "get", "(", "'stepsize'", ")", "\n", "return", "base_lr", "*", "gamma", "**", "math", ".", "floor", "(", "epoch", "/", "stepsize", ")", "\n", "", "elif", "lr_policy", "==", "'exp'", ":", "\n", "        ", "gamma", "=", "kw", ".", "get", "(", "'gamma'", ")", "\n", "return", "base_lr", "*", "gamma", "**", "epoch", "\n", "", "elif", "lr_policy", "==", "'inv'", ":", "\n", "        ", "gamma", "=", "kw", ".", "get", "(", "'gamma'", ")", "\n", "power", "=", "kw", ".", "get", "(", "'power'", ")", "\n", "return", "base_lr", "*", "(", "1", "+", "gamma", "*", "epoch", ")", "**", "(", "-", "power", ")", "\n", "", "elif", "lr_policy", "==", "'multistep'", ":", "\n", "        ", "gamma", "=", "kw", ".", "get", "(", "'gamma'", ")", "\n", "stepvalue", "=", "kw", ".", "get", "(", "'stepvalue'", ")", "\n", "lr", "=", "base_lr", "\n", "for", "value", "in", "stepvalue", ":", "\n", "            ", "if", "epoch", ">=", "value", ":", "\n", "                ", "lr", "*=", "gamma", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "return", "lr", "\n", "", "elif", "lr_policy", "==", "'poly'", ":", "\n", "        ", "power", "=", "kw", ".", "get", "(", "'power'", ")", "\n", "return", "base_lr", "*", "(", "1", "-", "epoch", "/", "max_epoch", ")", "**", "power", "\n", "", "elif", "lr_policy", "==", "'sigmoid'", ":", "\n", "        ", "gamma", "=", "kw", ".", "get", "(", "'gamma'", ")", "\n", "stepsize", "=", "kw", ".", "get", "(", "'stepsize'", ")", "\n", "return", "base_lr", "*", "(", "1", "/", "(", "1", "+", "math", ".", "exp", "(", "-", "gamma", "*", "(", "epoch", "-", "stepsize", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Unknown lr_policy: %s'", "%", "lr_policy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.adjust.adjust_opt": [[48, 51], ["enumerate", "adjust.adjust_lr"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.adjust.adjust_lr"], ["", "", "def", "adjust_opt", "(", "optimizer", ",", "epoch", ",", "max_epoch", ",", "**", "kw", ")", ":", "\n", "    ", "for", "i", ",", "param", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "        ", "param", "[", "'lr'", "]", "=", "adjust_lr", "(", "i", ",", "epoch", ",", "max_epoch", ",", "**", "kw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Tester.__init__": [[20, 23], ["trainer.Trainer"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model_cube", ",", "data_cube", ",", "snapshot_scheme", ",", "device", ")", ":", "\n", "        ", "self", ".", "_trainer", "=", "Trainer", "(", "model_cube", ",", "data_cube", ",", "None", ",", "None", ",", "None", ",", "\n", "snapshot_scheme", ",", "device", ",", "True", ")", "\n", "", "def", "test", "(", "self", ",", "state_suffix", ",", "foldername", ",", "is_indiv", "=", "False", ",", "is_save_png", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Tester.test": [[23, 25], ["trainer.Tester._trainer.test"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.test"], ["", "def", "test", "(", "self", ",", "state_suffix", ",", "foldername", ",", "is_indiv", "=", "False", ",", "is_save_png", "=", "False", ")", ":", "\n", "        ", "self", ".", "_trainer", ".", "test", "(", "state_suffix", ",", "foldername", ",", "is_indiv", ",", "is_save_png", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.__init__": [[28, 47], ["trainer.Trainer.init_model", "trainer.Trainer.parse_dataloader", "trainer.Trainer.parse_criterion", "trainer.Trainer.model.to", "open", "f.write", "os.join", "os.join", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.init_model", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.parse_dataloader", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.parse_criterion"], ["def", "__init__", "(", "self", ",", "model_cube", ",", "data_cube", ",", "criterion_cube", ",", "lr_scheme", ",", "\n", "snapshot_scheme", ",", "device", ",", "wrap_test", "=", "False", ",", "clsfromseg", "=", "False", ")", ":", "\n", "        ", "self", ".", "model", ",", "self", ".", "optimizer", ",", "self", ".", "start_epoch", ",", "self", ".", "num_mo", "=", "self", ".", "init_model", "(", "model_cube", ")", "# Initialize model", "\n", "#        if model_cube['resume']:", "\n", "#            self._optim_device(device)", "\n", "self", ".", "parse_dataloader", "(", "data_cube", ")", "\n", "self", ".", "parse_criterion", "(", "criterion_cube", ")", "\n", "self", ".", "lr_scheme", "=", "lr_scheme", "\n", "self", ".", "snapshot_scheme", "=", "snapshot_scheme", "\n", "self", ".", "max_epoch", "=", "lr_scheme", "[", "'max_epoch'", "]", "if", "not", "wrap_test", "else", "0", "\n", "self", ".", "root", "=", "snapshot_scheme", "[", "'root'", "]", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "clsfromseg", "=", "clsfromseg", "\n", "\n", "if", "not", "wrap_test", ":", "\n", "            ", "with", "open", "(", "P", ".", "join", "(", "self", ".", "root", ",", "'description.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "lr_scheme", ")", "+", "'\\n'", "+", "str", "(", "snapshot_scheme", ")", "+", "'\\n'", "+", "str", "(", "self", ".", "model", ")", ")", "\n", "", "", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.train": [[48, 87], ["open", "print", "range", "trainer.Trainer._snapshot", "open.close", "os.join", "os.join", "misc.timestr", "adjust.adjust_opt", "trainer.Trainer.train_epoch", "loss_all.append", "open.write", "open.flush", "trainer.Trainer.criterion_seg.decay_loss_weight", "trainer.Trainer.criterion_cls.decay_loss_weight", "str", "numpy.array().mean", "print", "trainer.Trainer._snapshot", "trainer.Trainer.validate_online", "trainer.Trainer._snapshot", "trainer.Trainer._snapshot", "numpy.array", "misc.timestr", "trainer.Trainer._get_lr"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer._snapshot", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.timestr", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.adjust.adjust_opt", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.train_epoch", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.loss.MultiOutputLoss.decay_loss_weight", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.loss.MultiOutputLoss.decay_loss_weight", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer._snapshot", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.validate_online", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer._snapshot", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer._snapshot", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.timestr", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer._get_lr"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "'''Cordinate the whole training phase, mainly recording of losses and metrics, \n        lr and loss weight decay, snapshotting, etc.'''", "\n", "loss_all", "=", "[", "]", "\n", "max_seg_metric", ",", "max_cls_metric", "=", "0", ",", "0", "\n", "lossF", "=", "open", "(", "P", ".", "join", "(", "self", ".", "root", ",", "'loss.txt'", ")", ",", "'a'", ")", "\n", "print", "(", "timestr", "(", ")", ",", "'Optimization Begin'", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "max_epoch", "+", "1", ")", ":", "\n", "# Adjust learning rate", "\n", "            ", "adjust_opt", "(", "self", ".", "optimizer", ",", "epoch", "-", "1", ",", "**", "self", ".", "lr_scheme", ")", "\n", "loss_dict", "=", "self", ".", "train_epoch", "(", ")", "\n", "loss_all", ".", "append", "(", "loss_dict", "[", "'loss'", "]", ")", "\n", "lossF", ".", "write", "(", "'%d,%.7f\\n'", "%", "(", "epoch", ",", "loss_all", "[", "-", "1", "]", ")", ")", "\n", "lossF", ".", "flush", "(", ")", "\n", "\n", "if", "epoch", "%", "self", ".", "snapshot_scheme", "[", "'display_interval'", "]", "==", "0", "or", "epoch", "==", "self", ".", "start_epoch", ":", "\n", "                ", "N", "=", "self", ".", "snapshot_scheme", "[", "'display_interval'", "]", "\n", "loss_avg", "=", "np", ".", "array", "(", "loss_all", "[", "-", "N", ":", "]", ")", ".", "mean", "(", ")", "\n", "first_epoch", "=", "epoch", "if", "epoch", "==", "self", ".", "start_epoch", "else", "epoch", "+", "1", "-", "N", "\n", "print", "(", "'%s Epoch %d ~ %d: loss = %.7f, current lr = %.7e'", "%", "\n", "(", "timestr", "(", ")", ",", "first_epoch", ",", "epoch", ",", "loss_avg", ",", "self", ".", "_get_lr", "(", ")", ")", ")", "\n", "\n", "", "if", "epoch", "%", "self", ".", "snapshot_scheme", "[", "'snapshot_interval'", "]", "==", "0", "or", "epoch", "==", "self", ".", "start_epoch", ":", "\n", "                ", "self", ".", "_snapshot", "(", "epoch", ")", "\n", "\n", "", "if", "epoch", "%", "self", ".", "snapshot_scheme", "[", "'test_interval'", "]", "==", "0", "or", "epoch", "==", "self", ".", "start_epoch", ":", "\n", "                ", "metric_dict", "=", "self", ".", "validate_online", "(", ")", "\n", "if", "max_seg_metric", "<=", "metric_dict", "[", "'val/seg_dsc'", "]", "and", "epoch", ">", "10", ":", "\n", "                    ", "max_seg_metric", "=", "metric_dict", "[", "'val/seg_dsc'", "]", "\n", "self", ".", "_snapshot", "(", "epoch", ",", "'seg_max'", ")", "\n", "", "if", "max_cls_metric", "<=", "metric_dict", "[", "'val/cls_acc'", "]", "and", "epoch", ">", "10", ":", "\n", "                    ", "max_cls_metric", "=", "metric_dict", "[", "'val/cls_acc'", "]", "\n", "self", ".", "_snapshot", "(", "epoch", ",", "'cls_max'", ")", "\n", "\n", "", "", "self", ".", "criterion_seg", ".", "decay_loss_weight", "(", ")", "\n", "self", ".", "criterion_cls", ".", "decay_loss_weight", "(", ")", "\n", "\n", "", "self", ".", "_snapshot", "(", "epoch", ",", "str", "(", "epoch", ")", ")", "\n", "lossF", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.train_epoch": [[88, 109], ["trainer.Trainer.model.train", "iter", "trainer.Trainer.format_loss_buffer", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "trainer.Trainer.criterion_seg", "trainer.Trainer.criterion_cls", "loss.backward", "trainer.Trainer.optimizer.step", "loss_buf.append", "loss_seg_buf.append", "loss_cls_buf.append", "loss_seg_arr_buf.append", "loss_cls_arr_buf.append", "images.to", "masks.to", "labels.to", "loss.item", "loss_seg.item", "loss_cls.item", "v.item", "v.item"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.format_loss_buffer", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "def", "train_epoch", "(", "self", ")", ":", "\n", "        ", "'''Train the model for one epoch, loss information is recorded'''", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "loss_buf", ",", "loss_seg_buf", ",", "loss_cls_buf", ",", "loss_seg_arr_buf", ",", "loss_cls_arr_buf", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "images", ",", "masks", ",", "labels", "in", "iter", "(", "self", ".", "trainloader", ")", ":", "\n", "            ", "images", ",", "masks", ",", "labels", "=", "images", ".", "to", "(", "self", ".", "device", ")", ",", "masks", ".", "to", "(", "self", ".", "device", ")", ",", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "seg_output", ",", "cls_output", "=", "self", ".", "model", "(", "images", ")", "\n", "loss_seg", ",", "loss_seg_arr", "=", "self", ".", "criterion_seg", "(", "seg_output", ",", "masks", ")", "\n", "loss_cls", ",", "loss_cls_arr", "=", "self", ".", "criterion_cls", "(", "cls_output", ",", "labels", ")", "\n", "loss", "=", "self", ".", "segcls_weight", "[", "0", "]", "*", "loss_seg", "+", "self", ".", "segcls_weight", "[", "1", "]", "*", "loss_cls", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "loss_buf", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss_seg_buf", ".", "append", "(", "loss_seg", ".", "item", "(", ")", ")", "\n", "loss_cls_buf", ".", "append", "(", "loss_cls", ".", "item", "(", ")", ")", "\n", "loss_seg_arr_buf", ".", "append", "(", "[", "v", ".", "item", "(", ")", "for", "v", "in", "loss_seg_arr", "]", ")", "\n", "loss_cls_arr_buf", ".", "append", "(", "[", "v", ".", "item", "(", ")", "for", "v", "in", "loss_cls_arr", "]", ")", "\n", "", "loss_dict", "=", "self", ".", "format_loss_buffer", "(", "loss_buf", ",", "loss_seg_buf", ",", "loss_cls_buf", ",", "loss_seg_arr_buf", ",", "loss_cls_arr_buf", ")", "\n", "\n", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.test": [[110, 117], ["os.join", "os.join", "os.join", "os.join", "trainer.Trainer._load_pretrain", "trainer.Trainer.validate_final"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer._load_pretrain", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.validate_final"], ["", "def", "test", "(", "self", ",", "state_suffix", ",", "foldername", ",", "is_indiv", "=", "False", ",", "is_save_png", "=", "False", ",", "\n", "seg_thres", "=", "0.5", ",", "cls_thres", "=", "0.5", ")", ":", "\n", "        ", "'''Cordinate the testing of the model after training'''", "\n", "save_dir", "=", "P", ".", "join", "(", "self", ".", "root", ",", "foldername", ")", "\n", "pretrain", "=", "P", ".", "join", "(", "self", ".", "root", ",", "'state_%s.pkl'", "%", "state_suffix", ")", "\n", "self", ".", "_load_pretrain", "(", "pretrain", ")", "\n", "self", ".", "validate_final", "(", "save_dir", ",", "is_indiv", ",", "is_save_png", ",", "seg_thres", ",", "cls_thres", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.validate_final": [[118, 143], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "trainer.Trainer.validate_final.validate_split"], "methods", ["None"], ["", "def", "validate_final", "(", "self", ",", "save_dir", ",", "is_indiv", ",", "is_save_png", ",", "seg_thres", "=", "0.5", ",", "\n", "cls_thres", "=", "0.5", ")", ":", "\n", "        ", "'''Validate the model after training finished, detailed metrics would be recorded'''", "\n", "def", "validate_split", "(", "dataloader", ",", "sn_list", ",", "split", ")", ":", "\n", "            ", "png_dir", "=", "P", ".", "join", "(", "save_dir", ",", "split", ")", "if", "is_save_png", "else", "None", "\n", "sm_arr", ",", "cm_arr", "=", "validate_cs", "(", "self", ".", "model", ",", "dataloader", ",", "sn_list", ",", "self", ".", "device", ",", "self", ".", "num_mo", ",", "\n", "png_dir", ",", "seg_thres", ",", "cls_thres", ",", "True", ",", "clsfromseg", "=", "self", ".", "clsfromseg", ")", "\n", "max_name", "=", "save_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "sm_arr", "[", "-", "1", "]", ".", "print_metric", "(", "max_name", "+", "'-'", "+", "split", ")", "\n", "cm_arr", "[", "-", "1", "]", ".", "print_metric", "(", "max_name", "+", "'-'", "+", "split", ")", "\n", "\n", "split_segF", "=", "open", "(", "P", ".", "join", "(", "save_dir", ",", "'%s_seg.txt'", "%", "split", ")", ",", "'w'", ")", "\n", "split_clsF", "=", "open", "(", "P", ".", "join", "(", "save_dir", ",", "'%s_cls.txt'", "%", "split", ")", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "-", "1", ",", "-", "self", ".", "num_mo", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "sm", ",", "cm", "=", "sm_arr", "[", "i", "]", ",", "cm_arr", "[", "i", "]", "\n", "sm", ".", "write_metric", "(", "split_segF", ",", "'Output %d:'", "%", "i", ",", "is_indiv", ")", "\n", "cm", ".", "write_metric", "(", "split_clsF", ",", "'Output %d:'", "%", "i", ",", "is_indiv", ")", "\n", "", "split_segF", ".", "close", "(", ")", "\n", "split_clsF", ".", "close", "(", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "validate_split", "(", "self", ".", "trainseqloader", ",", "self", ".", "train_sn", ",", "'train'", ")", "\n", "validate_split", "(", "self", ".", "valloader", ",", "self", ".", "val_sn", ",", "'val'", ")", "\n", "validate_split", "(", "self", ".", "testloader", ",", "self", ".", "test_sn", ",", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.validate_online": [[144, 170], ["dict", "trainer.Trainer.validate_final.validate_split"], "methods", ["None"], ["", "def", "validate_online", "(", "self", ")", ":", "\n", "        ", "'''Validate the model during training, record a minimal number of metrics'''", "\n", "def", "validate_split", "(", "dataloader", ",", "sn_list", ",", "split", ")", ":", "\n", "            ", "sm_arr", ",", "cm_arr", "=", "validate_cs", "(", "self", ".", "model", ",", "dataloader", ",", "sn_list", ",", "self", ".", "device", ",", "self", ".", "num_mo", ",", "None", ",", "\n", "clsfromseg", "=", "self", ".", "clsfromseg", ")", "\n", "\n", "return", "sm_arr", ",", "cm_arr", "\n", "\n", "", "metric_dict", "=", "dict", "(", ")", "\n", "def", "convert_metric_dict", "(", "prefix", ",", "sm_arr", ",", "cm_arr", ")", ":", "\n", "            ", "'''Convert metrics in the last output'''", "\n", "for", "k", ",", "v", "in", "sm_arr", "[", "-", "1", "]", ".", "metric", ".", "items", "(", ")", ":", "\n", "                ", "metric_dict", "[", "'%s/seg_%s'", "%", "(", "prefix", ",", "k", ")", "]", "=", "v", "\n", "", "for", "k", ",", "v", "in", "cm_arr", "[", "-", "1", "]", ".", "metric", ".", "items", "(", ")", ":", "\n", "                ", "metric_dict", "[", "'%s/cls_%s'", "%", "(", "prefix", ",", "k", ")", "]", "=", "v", "\n", "\n", "", "", "sm_arr_train", ",", "cm_arr_train", "=", "validate_split", "(", "self", ".", "trainseqloader", ",", "self", ".", "train_sn", ",", "'Train'", ")", "\n", "convert_metric_dict", "(", "'train'", ",", "sm_arr_train", ",", "cm_arr_train", ")", "\n", "\n", "sm_arr_val", ",", "cm_arr_val", "=", "validate_split", "(", "self", ".", "valloader", ",", "self", ".", "val_sn", ",", "'Validation'", ")", "\n", "convert_metric_dict", "(", "'val'", ",", "sm_arr_val", ",", "cm_arr_val", ")", "\n", "\n", "return", "metric_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.format_loss_buffer": [[171, 188], ["numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "dict", "range", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "format_loss_buffer", "(", "loss_buf", ",", "loss_seg_buf", ",", "loss_cls_buf", ",", "loss_seg_arr_buf", ",", "loss_cls_arr_buf", ")", ":", "\n", "        ", "'''Gather all different losses into a dictionary with clear-named keys'''", "\n", "loss", "=", "np", ".", "array", "(", "loss_buf", ")", ".", "mean", "(", ")", "\n", "loss_seg", "=", "np", ".", "array", "(", "loss_seg_buf", ")", ".", "mean", "(", ")", "\n", "loss_cls", "=", "np", ".", "array", "(", "loss_cls_buf", ")", ".", "mean", "(", ")", "\n", "loss_seg_arr", "=", "np", ".", "array", "(", "loss_seg_arr_buf", ")", ".", "mean", "(", "0", ")", "\n", "loss_cls_arr", "=", "np", ".", "array", "(", "loss_cls_arr_buf", ")", ".", "mean", "(", "0", ")", "\n", "loss_dict", "=", "dict", "(", ")", "\n", "loss_dict", "[", "'loss'", "]", "=", "loss", "\n", "loss_dict", "[", "'loss_seg'", "]", "=", "loss_seg", "\n", "loss_dict", "[", "'loss_cls'", "]", "=", "loss_cls", "\n", "for", "i", "in", "range", "(", "-", "1", ",", "-", "len", "(", "loss_seg_arr", ")", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "loss_dict", "[", "'loss_seg/%d'", "%", "i", "]", "=", "loss_seg_arr", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "-", "1", ",", "-", "len", "(", "loss_cls_arr", ")", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "loss_dict", "[", "'loss_cls/%d'", "%", "i", "]", "=", "loss_cls_arr", "[", "i", "]", "\n", "", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.init_model": [[190, 219], ["os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "model.cpu", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "RuntimeError", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "model.apply", "model.cpu", "torch.load", "model.load_state_dict", "RuntimeError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "init_model", "(", "model_cube", ")", ":", "\n", "        ", "'''Initialize the model, optimizer and related variables according to model_cube'''", "\n", "model", "=", "model_cube", "[", "'model'", "]", "\n", "optimizer", "=", "model_cube", "[", "'optimizer'", "]", "\n", "pretrain", "=", "model_cube", "[", "'pretrain'", "]", "\n", "resume", "=", "model_cube", "[", "'resume'", "]", "\n", "num_mo", "=", "model_cube", "[", "'num_mo'", "]", "\n", "start_epoch", "=", "1", "\n", "if", "resume", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "resume", ")", ":", "\n", "                ", "model", ".", "cpu", "(", ")", "\n", "state", "=", "torch", ".", "load", "(", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "state", "[", "'optimizer'", "]", ")", "\n", "start_epoch", "=", "state", "[", "'epoch'", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'No checkpoint found at %s'", "%", "pretrain", ")", "\n", "", "", "elif", "pretrain", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "pretrain", ")", ":", "\n", "                ", "model", ".", "cpu", "(", ")", "\n", "state", "=", "torch", ".", "load", "(", "pretrain", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'No checkpoint found at %s'", "%", "pretrain", ")", "\n", "", "", "else", ":", "\n", "            ", "weight_init_func", "=", "model_cube", "[", "'init_func'", "]", "\n", "model", ".", "apply", "(", "weight_init_func", ")", "\n", "", "return", "model", ",", "optimizer", ",", "start_epoch", ",", "num_mo", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.parse_dataloader": [[220, 228], ["data_cube.trainloader", "data_cube.valloader", "data_cube.testloader", "data_cube.trainseqloader", "data_cube.val_sn", "data_cube.test_sn", "data_cube.train_sn"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.trainloader", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.valloader", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.testloader", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.trainseqloader", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.val_sn", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.test_sn", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.train_sn"], ["", "def", "parse_dataloader", "(", "self", ",", "data_cube", ")", ":", "\n", "        ", "self", ".", "trainloader", "=", "data_cube", ".", "trainloader", "(", ")", "\n", "self", ".", "valloader", "=", "data_cube", ".", "valloader", "(", ")", "\n", "self", ".", "testloader", "=", "data_cube", ".", "testloader", "(", ")", "\n", "self", ".", "trainseqloader", "=", "data_cube", ".", "trainseqloader", "(", ")", "\n", "self", ".", "val_sn", "=", "data_cube", ".", "val_sn", "(", ")", "\n", "self", ".", "test_sn", "=", "data_cube", ".", "test_sn", "(", ")", "\n", "self", ".", "train_sn", "=", "data_cube", ".", "train_sn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer.parse_criterion": [[229, 235], ["None"], "methods", ["None"], ["", "def", "parse_criterion", "(", "self", ",", "criterion_cube", ")", ":", "\n", "        ", "if", "criterion_cube", "is", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "criterion_seg", "=", "criterion_cube", "[", "'criterion_seg'", "]", "\n", "self", ".", "criterion_cls", "=", "criterion_cube", "[", "'criterion_cls'", "]", "\n", "self", ".", "segcls_weight", "=", "criterion_cube", "[", "'segcls_weight'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer._load_pretrain": [[236, 241], ["torch.load", "trainer.Trainer.model.load_state_dict", "trainer.Trainer.model.to"], "methods", ["None"], ["", "def", "_load_pretrain", "(", "self", ",", "pretrain", ")", ":", "\n", "#        self.model.cpu()", "\n", "        ", "state", "=", "torch", ".", "load", "(", "pretrain", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer._get_lr": [[242, 244], ["None"], "methods", ["None"], ["", "def", "_get_lr", "(", "self", ",", "group", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "optimizer", ".", "param_groups", "[", "group", "]", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer._snapshot": [[245, 257], ["print", "torch.save", "trainer.Trainer.model.state_dict", "trainer.Trainer.optimizer.state_dict", "misc.timestr"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.timestr"], ["", "def", "_snapshot", "(", "self", ",", "epoch", ",", "name", "=", "None", ")", ":", "\n", "        ", "'''Take snapshot of the model, save to root dir'''", "\n", "#        self.model.to(torch.device('cpu'))", "\n", "state_dict", "=", "{", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", "}", "\n", "if", "name", "is", "None", ":", "\n", "            ", "filename", "=", "'%s/state_%04d.pkl'", "%", "(", "self", ".", "root", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "'%s/state_%s.pkl'", "%", "(", "self", ".", "root", ",", "name", ")", "\n", "", "print", "(", "'%s Snapshotting to %s'", "%", "(", "timestr", "(", ")", ",", "filename", ")", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "filename", ")", "\n", "#        self.model.to(self.device)", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.trainer.Trainer._optim_device": [[259, 263], ["trainer.Trainer.optimizer.state.items", "v.items", "vv.to"], "methods", ["None"], ["", "def", "_optim_device", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "self", ".", "optimizer", ".", "state", ".", "items", "(", ")", ":", "\n", "            ", "for", "kk", ",", "vv", "in", "v", ".", "items", "(", ")", ":", "\n", "                ", "v", "[", "kk", "]", "=", "vv", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.loss.MultiOutputLoss.__init__": [[22, 26], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loss_func", ",", "loss_weight", ",", "device", ",", "decay_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "loss_func", "=", "loss_func", "\n", "self", ".", "loss_weight", "=", "torch", ".", "FloatTensor", "(", "loss_weight", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "decay_factor", "=", "decay_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.loss.MultiOutputLoss.__call__": [[27, 36], ["range", "len", "loss.MultiOutputLoss.loss_func", "loss_arr.append"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "loss_arr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "input", ")", ")", ":", "\n", "            ", "loss_so", "=", "self", ".", "loss_func", "(", "input", "[", "i", "]", ",", "target", ")", "\n", "loss_arr", ".", "append", "(", "loss_so", ")", "\n", "loss", "+=", "self", ".", "loss_weight", "[", "i", "]", "*", "loss_so", "\n", "\n", "", "return", "loss", ",", "loss_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.loss.MultiOutputLoss.change_loss_weight": [[37, 39], ["None"], "methods", ["None"], ["", "def", "change_loss_weight", "(", "self", ",", "loss_weight", ")", ":", "\n", "        ", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.loss.MultiOutputLoss.decay_loss_weight": [[40, 44], ["range", "len"], "methods", ["None"], ["", "def", "decay_loss_weight", "(", "self", ",", "decay_factor", "=", "None", ")", ":", "\n", "        ", "df", "=", "decay_factor", "if", "decay_factor", "else", "self", ".", "decay_factor", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "loss_weight", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "loss_weight", "[", "i", "]", "*=", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.loss.MultiOutputLoss.decay_loss_weight_epoch": [[45, 49], ["range", "len"], "methods", ["None"], ["", "", "def", "decay_loss_weight_epoch", "(", "self", ",", "epoch", ",", "decay_factor", "=", "None", ")", ":", "\n", "        ", "df", "=", "decay_factor", "if", "decay_factor", "else", "self", ".", "decay_factor", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "loss_weight", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "loss_weight", "[", "i", "]", "*=", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.loss.SparseMILLoss.__init__": [[52, 55], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sparse_factor", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "ignore_index", "=", "-", "100", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "self", ".", "sparse_factor", "=", "sparse_factor", "\n", "self", ".", "CELoss", "=", "nn", ".", "CrossEntropyLoss", "(", "torch", ".", "tensor", "(", "weight", ")", ",", "size_average", ",", "ignore_index", ",", "reduce", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.loss.SparseMILLoss.__call__": [[56, 64], ["input.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "loss.map2label", "loss.SparseMILLoss.CELoss", "input.view.view.size", "input.view.view.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "input.view.view.size"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.loss.map2label"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# Size: NxCxHxW -> NxCxP", "\n", "prob_input", "=", "F", ".", "softmax", "(", "input", ",", "dim", "=", "1", ")", "# Size: NxCxP", "\n", "sparse_penalty", "=", "torch", ".", "sum", "(", "prob_input", "[", ":", ",", "1", ":", ",", ":", "]", ")", "/", "input", ".", "size", "(", "0", ")", "\n", "predicted", "=", "map2label", "(", "input", ")", "# NxC", "\n", "ce_loss", "=", "self", ".", "CELoss", "(", "predicted", ",", "target", ")", "\n", "loss", "=", "ce_loss", "+", "self", ".", "sparse_factor", "*", "sparse_penalty", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.loss.map2label": [[13, 20], ["input.view.view", "p.detach.detach", "torch.stack", "torch.stack", "torch.stack", "input.view.size", "input.view.size", "torch.min", "torch.min", "torch.min", "range", "len"], "function", ["None"], ["def", "map2label", "(", "input", ")", ":", "\n", "    ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# Size: NxCxHxW -> NxCxP", "\n", "# eigen patch position: the position with smallest background probability", "\n", "p", "=", "torch", ".", "min", "(", "input", "[", ":", ",", "0", ",", ":", "]", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "p", "=", "p", ".", "detach", "(", ")", "\n", "predicted", "=", "torch", ".", "stack", "(", "[", "input", "[", "i", ",", ":", ",", "p", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "p", ")", ")", "]", ")", "# NxC", "\n", "return", "predicted", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.BNNLAConv.__init__": [[104, 110], ["factory.ReLU", "torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "nla", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.MMDataset_memmap.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inChans", ",", "outChans", ",", "kernel", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "nla", "=", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "super", "(", "BNNLAConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "inChans", ")", ",", "\n", "nla", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inChans", ",", "outChans", ",", "kernel", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.BNNLAConv.forward": [[111, 113], ["factory.BNNLAConv.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.SumFusion2d.__init__": [[116, 120], ["factory.ReLU", "torch.Module.__init__", "factory.BNNLAConv", "factory.BNNLAConv"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.MMDataset_memmap.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inChans", ",", "skipChans", ",", "outChans", ",", "nla", "=", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "super", "(", "SumFusion2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "BNNLAConv", "(", "skipChans", ",", "outChans", ",", "1", ",", "1", ",", "0", ",", "nla", "=", "nla", ")", "\n", "self", ".", "conv2", "=", "BNNLAConv", "(", "inChans", ",", "outChans", ",", "1", ",", "1", ",", "0", ",", "nla", "=", "nla", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.SumFusion2d.forward": [[121, 126], ["factory.SumFusion2d.conv1", "factory.SumFusion2d.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "skipx", ")", ":", "\n", "        ", "skipx", "=", "self", ".", "conv1", "(", "skipx", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "out", "=", "skipx", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.CatFusion2d.__init__": [[129, 138], ["factory.ReLU", "torch.Module.__init__", "factory.BNNLAConv", "factory.BNNLAConv"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.MMDataset_memmap.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inChans", ",", "skipChans", ",", "outChans", ",", "nla", "=", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "super", "(", "CatFusion2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "skipChans", ">", "inChans", ":", "\n", "            ", "self", ".", "conv1", "=", "BNNLAConv", "(", "skipChans", ",", "inChans", ",", "1", ",", "1", ",", "0", ",", "nla", "=", "nla", ")", "\n", "allChans", "=", "2", "*", "inChans", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "passthrough", "\n", "allChans", "=", "skipChans", "+", "outChans", "\n", "", "self", ".", "conv2", "=", "BNNLAConv", "(", "allChans", ",", "outChans", ",", "1", ",", "1", ",", "0", ",", "nla", "=", "nla", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.CatFusion2d.forward": [[139, 144], ["factory.CatFusion2d.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "factory.CatFusion2d.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "skipx", ")", ":", "\n", "        ", "skipx", "=", "self", ".", "conv1", "(", "skipx", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "skipx", ")", ",", "1", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.passthrough": [[12, 14], ["None"], "function", ["None"], ["def", "passthrough", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU": [[15, 19], ["torch.ReLU"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU"], ["", "def", "ReLU", "(", "inplace", "=", "True", ")", ":", "\n", "    ", "def", "nla", "(", ")", ":", "\n", "        ", "return", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "", "return", "nla", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.LeakyReLU": [[20, 24], ["torch.LeakyReLU"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.LeakyReLU"], ["", "def", "LeakyReLU", "(", "negative_slope", "=", "1e-2", ",", "inplace", "=", "True", ")", ":", "\n", "    ", "def", "nla", "(", ")", ":", "\n", "        ", "return", "nn", ".", "LeakyReLU", "(", "negative_slope", ",", "inplace", ")", "\n", "", "return", "nla", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.PReLU": [[25, 30], ["torch.PReLU"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.PReLU"], ["", "def", "PReLU", "(", "num_parameters", "=", "1", ",", "init", "=", "0.25", ")", ":", "\n", "    ", "'''num_parameter = 1 or nChannels (learn 1 parameter for each channel)'''", "\n", "def", "nla", "(", ")", ":", "\n", "        ", "return", "nn", ".", "PReLU", "(", "num_parameters", ",", "init", ")", "\n", "", "return", "nla", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ELU": [[31, 36], ["torch.ELU"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ELU"], ["", "def", "ELU", "(", "alpha", "=", "1.", ",", "inplace", "=", "True", ")", ":", "\n", "    ", "'''ELU(x) = max(0,x) + min(0,\u03b1\u2217(exp(x)\u22121))'''", "\n", "def", "nla", "(", ")", ":", "\n", "        ", "return", "nn", ".", "ELU", "(", "alpha", ",", "inplace", ")", "\n", "", "return", "nla", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ConvDown2d": [[38, 49], ["factory.ReLU", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "factory.ReLU.nla", "torch.Conv2d"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU"], ["", "def", "ConvDown2d", "(", "kernel", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "def", "down", "(", "inChans", ",", "outChans", ",", "nla", "=", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "if", "nla", "!=", "None", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "inChans", ")", ",", "\n", "nla", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inChans", ",", "outChans", ",", "kernel", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "nn", ".", "Conv2d", "(", "inChans", ",", "outChans", ",", "kernel", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "", "", "return", "down", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.MaxDown2d": [[51, 69], ["factory.ReLU", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "factory.ReLU.nla", "torch.Conv2d", "torch.MaxPool2d", "torch.Conv2d", "torch.MaxPool2d"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU"], ["", "def", "MaxDown2d", "(", "kernel", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "return_indices", "=", "False", ",", "ceil_mode", "=", "False", ")", ":", "\n", "    ", "def", "down", "(", "inChans", ",", "outChans", ",", "nla", "=", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "if", "inChans", "==", "outChans", ":", "\n", "            ", "return", "nn", ".", "MaxPool2d", "(", "kernel", ",", "stride", ",", "padding", ",", "dilation", ",", "return_indices", ",", "ceil_mode", ")", "\n", "", "elif", "nla", "!=", "None", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "inChans", ")", ",", "\n", "nla", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inChans", ",", "outChans", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel", ",", "stride", ",", "padding", ",", "dilation", ",", "return_indices", ",", "ceil_mode", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inChans", ",", "outChans", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel", ",", "stride", ",", "padding", ",", "dilation", ",", "return_indices", ",", "ceil_mode", ")", "\n", ")", "\n", "\n", "", "", "return", "down", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.DeconvUp2d": [[71, 82], ["factory.ReLU", "torch.Sequential", "torch.ConvTranspose2d", "torch.BatchNorm2d", "factory.ReLU.nla", "torch.ConvTranspose2d"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU"], ["", "def", "DeconvUp2d", "(", "kernel", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "def", "upsample", "(", "inChans", ",", "outChans", ",", "nla", "=", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "if", "nla", "!=", "None", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "inChans", ")", ",", "\n", "nla", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "inChans", ",", "outChans", ",", "kernel", ",", "stride", ",", "padding", ",", "0", ",", "groups", ",", "bias", ",", "dilation", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "nn", ".", "ConvTranspose2d", "(", "inChans", ",", "outChans", ",", "kernel", ",", "stride", ",", "padding", ",", "0", ",", "groups", ",", "bias", ",", "dilation", ")", "\n", "", "", "return", "upsample", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.BilinearUp2d": [[84, 101], ["factory.ReLU", "torch.UpsamplingBilinear2d", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "factory.ReLU.nla", "torch.Conv2d", "torch.UpsamplingBilinear2d", "torch.Conv2d", "torch.UpsamplingBilinear2d"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU"], ["", "def", "BilinearUp2d", "(", "scale_factor", "=", "2", ")", ":", "\n", "    ", "def", "upsample", "(", "inChans", ",", "outChans", ",", "nla", "=", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "if", "inChans", "==", "outChans", ":", "\n", "            ", "return", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "scale_factor", ")", "\n", "", "elif", "nla", "!=", "None", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "inChans", ")", ",", "\n", "nla", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inChans", ",", "outChans", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "scale_factor", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inChans", ",", "outChans", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "scale_factor", ")", "\n", ")", "\n", "", "", "return", "upsample", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.ResBlock.__init__": [[21, 33], ["factory.ReLU", "torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "nla", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "nla", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.MMDataset_memmap.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inChans", ",", "outChans", ",", "drop_rate", "=", "0.5", ",", "nla", "=", "fm", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "change_dim", "=", "inChans", "!=", "outChans", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inChans", ")", "\n", "self", ".", "relu1", "=", "nla", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inChans", ",", "outChans", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "outChans", ")", "\n", "self", ".", "relu2", "=", "nla", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "outChans", ",", "outChans", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "do", "=", "fm", ".", "passthrough", "if", "drop_rate", "==", "0", "else", "nn", ".", "Dropout2d", "(", "drop_rate", ")", "\n", "self", ".", "projection", "=", "nn", ".", "Conv2d", "(", "inChans", ",", "outChans", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "if", "self", ".", "change_dim", "else", "fm", ".", "passthrough", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.ResBlock.forward": [[34, 40], ["model.ResBlock.conv1", "model.ResBlock.relu2", "model.ResBlock.conv2", "model.ResBlock.projection", "model.ResBlock.relu1", "model.ResBlock.bn2", "model.ResBlock.do", "model.ResBlock.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "self", ".", "do", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "projection", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.UResNet_Trunk.__init__": [[51, 76], ["factory.ReLU", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "range", "range", "len", "len", "len", "len", "model.UResNet_Trunk.blocks.append", "model.UResNet_Trunk.downs.append", "model.UResNet_Trunk.ups.append", "model.UResNet_Trunk.fusions.append", "model.make_nBlocks", "downsampler", "upsampler", "Fusion"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.MMDataset_memmap.__init__", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.make_nBlocks"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "depth", ",", "nMod", ",", "nClass", ",", "drop_rate", ",", "downsampler", ",", "\n", "upsampler", ",", "initStride", "=", "1", ",", "nla", "=", "fm", ".", "ReLU", "(", "True", ")", ",", "fuse", "=", "'cat'", ")", ":", "\n", "        ", "super", "(", "UResNet_Trunk", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "width", ")", "==", "len", "(", "depth", ")", "==", "len", "(", "drop_rate", ")", ",", "'Please check the lengths of width, depth and drop_rate.'", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "downs", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "ups", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "fusions", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "if", "fuse", "==", "'cat'", ":", "\n", "            ", "Fusion", "=", "fm", ".", "CatFusion2d", "\n", "", "else", ":", "\n", "            ", "Fusion", "=", "fm", ".", "SumFusion2d", "\n", "", "d", ",", "w", "=", "depth", ",", "width", "\n", "ew", "=", "w", "\n", "N", "=", "len", "(", "d", ")", "//", "2", "\n", "self", ".", "N", "=", "N", "\n", "\n", "self", ".", "inconv", "=", "nn", ".", "Conv2d", "(", "nMod", ",", "w", "[", "0", "]", ",", "3", ",", "initStride", ",", "1", ",", "bias", "=", "False", ")", "\n", "for", "i", "in", "range", "(", "2", "*", "N", "+", "1", ")", ":", "# 2N+1 blocks", "\n", "            ", "self", ".", "blocks", ".", "append", "(", "make_nBlocks", "(", "d", "[", "i", "]", ",", "w", "[", "i", "]", ",", "w", "[", "i", "]", ",", "drop_rate", "[", "i", "]", ",", "nla", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "N", ")", ":", "# N down/up-samplings and fusions", "\n", "            ", "self", ".", "downs", ".", "append", "(", "downsampler", "(", "ew", "[", "i", "]", ",", "w", "[", "i", "+", "1", "]", ",", "nla", "=", "nla", ")", ")", "\n", "self", ".", "ups", ".", "append", "(", "upsampler", "(", "ew", "[", "N", "+", "i", "]", ",", "w", "[", "N", "+", "i", "+", "1", "]", ",", "nla", "=", "nla", ")", ")", "\n", "self", ".", "fusions", ".", "append", "(", "Fusion", "(", "w", "[", "N", "+", "i", "+", "1", "]", ",", "ew", "[", "N", "-", "i", "-", "1", "]", ",", "w", "[", "N", "+", "i", "+", "1", "]", ",", "nla", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.UResNet_Trunk.forward": [[77, 93], ["model.UResNet_Trunk.inconv", "range", "range", "outs.append", "skips.append", "outs.append"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", "=", "self", ".", "N", "\n", "out", "=", "self", ".", "inconv", "(", "x", ")", "\n", "skips", ",", "outs", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "out", "=", "self", ".", "blocks", "[", "i", "]", "(", "out", ")", "\n", "skips", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "downs", "[", "i", "]", "(", "out", ")", "\n", "", "out", "=", "self", ".", "blocks", "[", "N", "]", "(", "out", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "outs", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "ups", "[", "i", "]", "(", "out", ")", "\n", "out", "=", "self", ".", "fusions", "[", "i", "]", "(", "out", ",", "skips", "[", "-", "i", "-", "1", "]", ")", "\n", "out", "=", "self", ".", "blocks", "[", "N", "+", "i", "+", "1", "]", "(", "out", ")", "\n", "", "outs", ".", "append", "(", "out", ")", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.UResNet_HDS.__init__": [[96, 139], ["factory.ReLU", "torch.Module.__init__", "model.UResNet_Trunk", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "round", "range", "len", "math.log2", "t_seg.append", "range", "model.UResNet_HDS.exit_seg.append", "model.UResNet_HDS.exit_cls.append", "model.ResBlock", "factory.BNNLAConv", "t_seg.append", "t_seg.append", "torch.Sequential", "torch.Sequential", "range", "range", "t_cls.append", "range", "torch.Sequential", "torch.Sequential", "upsampler", "t_cls.append", "factory.BNNLAConv", "torch.AvgPool2d", "torch.AvgPool2d", "factory.BNNLAConv", "factory.BilinearUp2d", "model.fold_ceil", "model.fold_ceil", "downsampler", "model.ResBlock", "model.fold_ceil", "model.fold_ceil", "model.ResBlock", "model.fold_ceil", "model.fold_ceil", "model.fold_ceil", "downsampler", "model.ResBlock", "model.fold_ceil"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.MMDataset_memmap.__init__", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.BilinearUp2d", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.fold_ceil", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.fold_ceil", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.fold_ceil", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.fold_ceil", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.fold_ceil", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.fold_ceil", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.fold_ceil", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.fold_ceil"], ["    ", "def", "__init__", "(", "self", ",", "width", ",", "depth", ",", "nMod", ",", "nClass", ",", "drop_rate", ",", "mil_downfactor", ",", "downsampler", ",", "\n", "upsampler", ",", "initStride", "=", "1", ",", "nla", "=", "fm", ".", "ReLU", "(", "True", ")", ",", "fuse", "=", "'cat'", ")", ":", "\n", "        ", "super", "(", "UResNet_HDS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "trunk", "=", "UResNet_Trunk", "(", "width", ",", "depth", ",", "nMod", ",", "nClass", ",", "drop_rate", ",", "downsampler", ",", "\n", "upsampler", ",", "initStride", ",", "nla", ",", "fuse", ")", "\n", "self", ".", "exit_seg", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "exit_cls", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "d", ",", "w", "=", "depth", ",", "width", "\n", "ew", "=", "w", "\n", "N", "=", "len", "(", "d", ")", "//", "2", "\n", "self", ".", "N", "=", "N", "\n", "num_mildown", "=", "round", "(", "math", ".", "log2", "(", "mil_downfactor", ")", ")", "\n", "assert", "num_mildown", ">=", "N", ",", "'Invalid mil_downfactor: too small.'", "\n", "tail_len", "=", "2", "\n", "\n", "for", "i", "in", "range", "(", "N", "+", "1", ")", ":", "# N+1 exit pathways", "\n", "            ", "t_seg", "=", "[", "ResBlock", "(", "ew", "[", "N", "+", "i", "]", ",", "ew", "[", "N", "+", "i", "]", ",", "drop_rate", "[", "N", "+", "i", "]", ",", "nla", ")", "]", "\n", "t_seg", ".", "append", "(", "fm", ".", "BNNLAConv", "(", "ew", "[", "N", "+", "i", "]", ",", "nClass", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ",", "nla", "=", "nla", ")", ")", "\n", "for", "k", "in", "range", "(", "N", "-", "i", ")", ":", "\n", "                ", "t_seg", ".", "append", "(", "upsampler", "(", "nClass", ",", "nClass", ",", "nla", ")", ")", "\n", "", "if", "initStride", "!=", "1", ":", "\n", "                ", "t_seg", ".", "append", "(", "fm", ".", "BilinearUp2d", "(", "initStride", ")", "(", "nClass", ",", "nClass", ",", "nla", ")", ")", "\n", "", "self", ".", "exit_seg", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "t_seg", ")", ")", "\n", "\n", "t_cls", "=", "[", "]", "\n", "down_order", "=", "num_mildown", "-", "N", "+", "i", "\n", "if", "down_order", "<=", "tail_len", ":", "\n", "                ", "for", "j", "in", "range", "(", "down_order", ")", ":", "\n", "                    ", "inChans", ",", "outChans", "=", "fold_ceil", "(", "ew", "[", "N", "+", "i", "]", ",", "j", ",", "ew", "[", "N", "]", ")", ",", "fold_ceil", "(", "ew", "[", "N", "+", "i", "]", ",", "j", "+", "1", ",", "ew", "[", "N", "]", ")", "\n", "t_cls", "+=", "[", "downsampler", "(", "inChans", ",", "outChans", ",", "nla", ")", ",", "\n", "ResBlock", "(", "outChans", ",", "outChans", ",", "drop_rate", "[", "N", "+", "i", "]", ",", "nla", ")", "]", "\n", "", "for", "j", "in", "range", "(", "down_order", ",", "tail_len", ")", ":", "\n", "                    ", "inChans", ",", "outChans", "=", "fold_ceil", "(", "ew", "[", "N", "+", "i", "]", ",", "j", ",", "ew", "[", "N", "]", ")", ",", "fold_ceil", "(", "ew", "[", "N", "+", "i", "]", ",", "j", "+", "1", ",", "ew", "[", "N", "]", ")", "\n", "t_cls", ".", "append", "(", "ResBlock", "(", "inChans", ",", "outChans", ",", "drop_rate", "[", "N", "+", "i", "]", ",", "nla", ")", ")", "\n", "", "t_cls", ".", "append", "(", "fm", ".", "BNNLAConv", "(", "fold_ceil", "(", "ew", "[", "N", "+", "i", "]", ",", "tail_len", ",", "ew", "[", "N", "]", ")", ",", "nClass", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ",", "nla", "=", "nla", ")", ")", "\n", "", "else", ":", "\n", "                ", "for", "j", "in", "range", "(", "tail_len", ")", ":", "\n", "                    ", "inChans", ",", "outChans", "=", "fold_ceil", "(", "ew", "[", "N", "+", "i", "]", ",", "j", ",", "ew", "[", "N", "]", ")", ",", "fold_ceil", "(", "ew", "[", "N", "+", "i", "]", ",", "j", "+", "1", ",", "ew", "[", "N", "]", ")", "\n", "t_cls", "+=", "[", "downsampler", "(", "inChans", ",", "outChans", ",", "nla", ")", ",", "\n", "ResBlock", "(", "outChans", ",", "outChans", ",", "drop_rate", "[", "N", "+", "i", "]", ",", "nla", ")", "]", "\n", "", "t_cls", "+=", "[", "nn", ".", "AvgPool2d", "(", "2", "**", "(", "down_order", "-", "tail_len", ")", ")", ",", "\n", "fm", ".", "BNNLAConv", "(", "fold_ceil", "(", "ew", "[", "N", "+", "i", "]", ",", "tail_len", ",", "ew", "[", "N", "]", ")", ",", "nClass", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ",", "nla", "=", "nla", ")", "]", "\n", "", "self", ".", "exit_cls", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "t_cls", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.UResNet_HDS.forward": [[140, 151], ["model.UResNet_HDS.trunk", "range", "segs.append", "clses.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", "=", "self", ".", "N", "\n", "outs", "=", "self", ".", "trunk", "(", "x", ")", "\n", "segs", ",", "clses", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "N", "+", "1", ")", ":", "\n", "            ", "seg", "=", "self", ".", "exit_seg", "[", "i", "]", "(", "outs", "[", "i", "]", ")", "\n", "segs", ".", "append", "(", "seg", ")", "\n", "cls", "=", "self", ".", "exit_cls", "[", "i", "]", "(", "outs", "[", "i", "]", ")", "\n", "clses", ".", "append", "(", "cls", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "segs", ")", ",", "torch", ".", "stack", "(", "clses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.fold_ceil": [[17, 19], ["min"], "function", ["None"], ["def", "fold_ceil", "(", "base", ",", "num_fold", ",", "ceil", ")", ":", "\n", "    ", "return", "min", "(", "base", "*", "2", "**", "num_fold", ",", "ceil", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.make_nBlocks": [[42, 48], ["factory.ReLU", "range", "torch.Sequential", "rb", "blocklist.append", "rb"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "", "def", "make_nBlocks", "(", "nBlocks", ",", "inChans", ",", "outChans", ",", "drop_rate", "=", "0.5", ",", "nla", "=", "fm", ".", "ReLU", "(", "True", ")", ",", "rb", "=", "ResBlock", ")", ":", "\n", "# change dimension at the first convolution", "\n", "    ", "blocklist", "=", "[", "rb", "(", "inChans", ",", "outChans", ",", "drop_rate", ",", "nla", ")", "]", "\n", "for", "_", "in", "range", "(", "nBlocks", "-", "1", ")", ":", "\n", "        ", "blocklist", ".", "append", "(", "rb", "(", "outChans", ",", "outChans", ",", "drop_rate", ",", "nla", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "blocklist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.model.uresnet_16x11x2": [[152, 157], ["factory.ReLU", "factory.MaxDown2d", "factory.DeconvUp2d", "model.UResNet_HDS"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.ReLU", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.MaxDown2d", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.factory.DeconvUp2d"], ["", "", "def", "uresnet_16x11x2", "(", "nMod", ",", "nClass", ",", "drop_rate", ",", "mil_downfactor", ",", "nla", "=", "fm", ".", "ReLU", "(", "True", ")", ",", "\n", "downsampler", "=", "fm", ".", "MaxDown2d", "(", ")", ",", "upsampler", "=", "fm", ".", "DeconvUp2d", "(", ")", ")", ":", "\n", "    ", "model", "=", "UResNet_HDS", "(", "(", "16", ",", "32", ",", "64", ",", "128", ",", "128", ",", "128", ",", "128", ",", "128", ",", "64", ",", "32", ",", "16", ")", ",", "(", "2", ",", ")", "*", "11", ",", "nMod", ",", "nClass", ",", "\n", "drop_rate", ",", "mil_downfactor", ",", "downsampler", ",", "upsampler", ",", "nla", "=", "nla", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.__init__": [[87, 162], ["os.exists", "misc.DataHub._make_train_transform", "misc.DataHub._make_test_transform", "misc.DataHub._make_dataloader", "misc.DataHub._make_dataloader", "misc.DataHub._make_dataloader", "misc.DataHub._make_dataloader", "misc.DataHub._make_labelloader", "misc.DataHub._make_labelloader", "misc.DataHub._make_labelloader", "os.join", "print", "print", "transforms.ToTensor", "transforms.Normalize", "open", "f.read().splitlines", "open", "f.read().splitlines", "open", "f.read().splitlines", "open", "f.read().splitlines", "float", "float", "os.join", "os.join", "os.join", "os.join", "f.read", "f.read", "f.read", "f.read", "lines[].split", "lines[].split", "str", "str"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_train_transform", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_test_transform", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_dataloader", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_dataloader", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_dataloader", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_dataloader", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_labelloader", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_labelloader", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_labelloader"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "train_split", ",", "val_split", ",", "test_split", ",", "datapath", ",", "train_batchsize", ",", "\n", "test_batchsize", ",", "modalities", ",", "std", "=", "1", ",", "mean", "=", "0", ",", "modal_test", "=", "None", ",", "datapath_test", "=", "None", ",", "\n", "rand_flip", "=", "None", ",", "crop_type", "=", "None", ",", "crop_size_img", "=", "None", ",", "crop_size_label", "=", "None", ",", "\n", "balance_rate", "=", "0.5", ",", "train_pad_size", "=", "None", ",", "test_pad_size", "=", "None", ",", "mod_drop_rate", "=", "0", ",", "\n", "train_drop_last", "=", "False", ",", "crop_type_test", "=", "None", ",", "crop_size_img_test", "=", "None", ",", "\n", "crop_size_label_test", "=", "None", ",", "DataSet", "=", "datasets", ".", "Dataset_SEGCLS_png", ",", "TestDataSet", "=", "None", ",", "\n", "label_loader_path", "=", "None", ",", "weighted_sample_rate", "=", "None", ",", "rand_rot90", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "mem_shape", "=", "None", ",", "random_black_patch_size", "=", "None", ",", "\n", "mini_positive", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "mem_shape", "=", "mem_shape", "\n", "if", "TestDataSet", "is", "None", ":", "\n", "            ", "TestDataSet", "=", "DataSet", "\n", "", "if", "datapath_test", "is", "None", ":", "\n", "            ", "datapath_test", "=", "datapath", "\n", "", "if", "modal_test", "is", "None", ":", "\n", "            ", "modal_test", "=", "modalities", "\n", "\n", "", "if", "train_split", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "root", ",", "train_split", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_train_sn", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "", "if", "val_split", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "root", ",", "val_split", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_val_sn", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "", "if", "test_split", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "root", ",", "test_split", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_test_sn", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "", "if", "osp", ".", "exists", "(", "osp", ".", "join", "(", "root", ",", "datapath", ",", "'meanstd.txt'", ")", ")", ":", "\n", "            ", "with", "open", "(", "osp", ".", "join", "(", "root", ",", "datapath", ",", "'meanstd.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "self", ".", "mean", "=", "[", "float", "(", "x", ")", "for", "x", "in", "lines", "[", "0", "]", ".", "split", "(", ")", "[", "1", ":", "]", "]", "\n", "self", ".", "std", "=", "[", "float", "(", "x", ")", "for", "x", "in", "lines", "[", "1", "]", ".", "split", "(", ")", "[", "1", ":", "]", "]", "\n", "print", "(", "'import mean and std value from file \\'meanstd.txt\\''", ")", "\n", "print", "(", "'mean = %s, std = %s'", "%", "(", "str", "(", "self", ".", "mean", ")", ",", "str", "(", "self", ".", "std", ")", ")", ")", "\n", "\n", "", "self", ".", "basic_transform_ops", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "]", "\n", "\n", "train_transform", "=", "self", ".", "_make_train_transform", "(", "crop_type", ",", "crop_size_img", ",", "crop_size_label", ",", "\n", "rand_flip", ",", "mod_drop_rate", ",", "balance_rate", ",", "\n", "train_pad_size", ",", "rand_rot90", ",", "random_black_patch_size", ",", "\n", "mini_positive", ")", "\n", "test_transform", "=", "self", ".", "_make_test_transform", "(", "crop_type_test", ",", "crop_size_img_test", ",", "\n", "crop_size_label_test", ",", "test_pad_size", ")", "\n", "\n", "self", ".", "_trainloader", "=", "self", ".", "_make_dataloader", "(", "DataSet", ",", "train_split", ",", "datapath", ",", "train_batchsize", ",", "train_transform", ",", "\n", "modalities", ",", "shuffle", "=", "True", ",", "drop_last", "=", "train_drop_last", ",", "\n", "weighted_sample_rate", "=", "weighted_sample_rate", ")", "\n", "\n", "self", ".", "_trainseqloader", "=", "self", ".", "_make_dataloader", "(", "TestDataSet", ",", "train_split", ",", "datapath_test", ",", "test_batchsize", ",", "\n", "test_transform", ",", "modal_test", ",", "shuffle", "=", "False", ")", "\n", "\n", "self", ".", "_valloader", "=", "self", ".", "_make_dataloader", "(", "TestDataSet", ",", "val_split", ",", "datapath_test", ",", "test_batchsize", ",", "\n", "test_transform", ",", "modal_test", ",", "shuffle", "=", "False", ")", "\n", "\n", "self", ".", "_testloader", "=", "self", ".", "_make_dataloader", "(", "TestDataSet", ",", "test_split", ",", "datapath_test", ",", "test_batchsize", ",", "\n", "test_transform", ",", "modal_test", ",", "shuffle", "=", "False", ")", "\n", "\n", "self", ".", "_trainseqloader_label", "=", "self", ".", "_make_labelloader", "(", "train_split", ",", "label_loader_path", ",", "test_batchsize", ")", "\n", "\n", "self", ".", "_valloader_label", "=", "self", ".", "_make_labelloader", "(", "val_split", ",", "label_loader_path", ",", "test_batchsize", ")", "\n", "\n", "self", ".", "_testloader_label", "=", "self", ".", "_make_labelloader", "(", "test_split", ",", "label_loader_path", ",", "test_batchsize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_dataloader": [[164, 183], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "DataSet", "DataSet", "numpy.where().tolist", "torch.utils.data.sampler.WeightedRandomSampler", "torch.utils.data.sampler.WeightedRandomSampler", "len", "numpy.where", "DataSet.get_mask"], "methods", ["None"], ["", "def", "_make_dataloader", "(", "self", ",", "DataSet", ",", "split", ",", "datapath", ",", "batch_size", ",", "transform", ",", "modalities", ",", "\n", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "weighted_sample_rate", "=", "None", ")", ":", "\n", "        ", "if", "split", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "(", "self", ".", "mem_shape", "is", "not", "None", ")", "and", "DataSet", "==", "datasets", ".", "MMDataset_memmap", ":", "\n", "            ", "data_set", "=", "DataSet", "(", "self", ".", "root", ",", "split", ",", "datapath", ",", "modalities", ",", "transform", ",", "self", ".", "mem_shape", ")", "\n", "", "else", ":", "\n", "            ", "data_set", "=", "DataSet", "(", "self", ".", "root", ",", "split", ",", "datapath", ",", "modalities", ",", "transform", ")", "\n", "", "sampler", "=", "None", "\n", "if", "weighted_sample_rate", "is", "not", "None", ":", "\n", "            ", "weights", "=", "np", ".", "where", "(", "data_set", ".", "get_mask", "(", ")", "==", "1", ",", "weighted_sample_rate", "[", "1", "]", ",", "\n", "weighted_sample_rate", "[", "0", "]", ")", ".", "tolist", "(", ")", "\n", "#            weights = torch.from_numpy(weights).float()", "\n", "sampler", "=", "WeightedRandomSampler", "(", "weights", ",", "len", "(", "data_set", ")", ",", "replacement", "=", "True", ")", "\n", "shuffle", "=", "False", "\n", "", "data_loader", "=", "DataLoader", "(", "data_set", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "self", ".", "num_workers", ",", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "drop_last", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_labelloader": [[184, 191], ["general_dataset.VanillaDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "_make_labelloader", "(", "self", ",", "split", ",", "datapath", ",", "batch_size", ")", ":", "\n", "        ", "if", "datapath", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "data_set", "=", "datasets", ".", "VanillaDataset", "(", "self", ".", "root", ",", "split", ",", "datapath", ")", "\n", "data_loader", "=", "DataLoader", "(", "data_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "pin_memory", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_train_transform": [[192, 223], ["misc.DataHub.basic_transform_ops.copy", "transforms.Compose", "transforms.RandomBlack", "transforms.RandomDropout", "transforms.RandomFlip", "misc.DataHub.append", "misc.DataHub.append", "transforms.Pad", "transforms.RandomRotate2d", "misc.DataHub.append", "misc.DataHub.append", "misc.DataHub.append", "transforms.RandomCropMinSize", "transforms.RandomCrop", "transforms.BalanceCrop", "misc.DataHub.append", "transforms.CenterCrop", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "def", "_make_train_transform", "(", "self", ",", "crop_type", ",", "crop_size_img", ",", "crop_size_label", ",", "\n", "rand_flip", ",", "mod_drop_rate", ",", "balance_rate", ",", "pad_size", ",", "\n", "rand_rot90", ",", "random_black_patch_size", ",", "mini_positive", ")", ":", "\n", "        ", "train_transform_ops", "=", "self", ".", "basic_transform_ops", ".", "copy", "(", ")", "\n", "\n", "train_transform_ops", "+=", "[", "transforms", ".", "RandomBlack", "(", "random_black_patch_size", ")", ",", "\n", "transforms", ".", "RandomDropout", "(", "mod_drop_rate", ")", ",", "\n", "transforms", ".", "RandomFlip", "(", "rand_flip", ")", "]", "\n", "if", "pad_size", "is", "not", "None", ":", "\n", "            ", "train_transform_ops", ".", "append", "(", "transforms", ".", "Pad", "(", "pad_size", ",", "0", ")", ")", "\n", "\n", "", "if", "rand_rot90", ":", "\n", "            ", "train_transform_ops", ".", "append", "(", "transforms", ".", "RandomRotate2d", "(", ")", ")", "\n", "\n", "", "if", "crop_type", "==", "'random'", ":", "\n", "            ", "if", "mini_positive", ":", "\n", "                ", "train_transform_ops", ".", "append", "(", "transforms", ".", "RandomCropMinSize", "(", "crop_size_img", ",", "mini_positive", ")", ")", "\n", "", "else", ":", "\n", "                ", "train_transform_ops", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "crop_size_img", ")", ")", "\n", "", "", "elif", "crop_type", "==", "'balance'", ":", "\n", "            ", "train_transform_ops", ".", "append", "(", "transforms", ".", "BalanceCrop", "(", "balance_rate", ",", "crop_size_img", ",", "\n", "crop_size_label", ")", ")", "\n", "", "elif", "crop_type", "==", "'center'", ":", "\n", "            ", "train_transform_ops", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "crop_size_img", ",", "\n", "crop_size_label", ")", ")", "\n", "", "elif", "crop_type", "is", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Unknown train crop type.'", ")", "\n", "\n", "", "return", "transforms", ".", "Compose", "(", "train_transform_ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub._make_test_transform": [[224, 237], ["misc.DataHub.basic_transform_ops.copy", "transforms.Compose", "misc.DataHub.append", "misc.DataHub.append", "transforms.Pad", "transforms.CenterCrop", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["", "def", "_make_test_transform", "(", "self", ",", "crop_type", ",", "crop_size_img", ",", "crop_size_label", ",", "pad_size", ")", ":", "\n", "        ", "test_transform_ops", "=", "self", ".", "basic_transform_ops", ".", "copy", "(", ")", "\n", "if", "pad_size", "is", "not", "None", ":", "\n", "            ", "test_transform_ops", ".", "append", "(", "transforms", ".", "Pad", "(", "pad_size", ",", "0", ")", ")", "\n", "", "if", "crop_type", "==", "'center'", ":", "\n", "            ", "test_transform_ops", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "crop_size_img", ",", "\n", "crop_size_label", ")", ")", "\n", "", "elif", "crop_type", "is", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Unknown test crop type.'", ")", "\n", "\n", "", "return", "transforms", ".", "Compose", "(", "test_transform_ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.trainloader": [[238, 240], ["None"], "methods", ["None"], ["", "def", "trainloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.valloader": [[241, 243], ["None"], "methods", ["None"], ["", "def", "valloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_valloader", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.testloader": [[244, 246], ["None"], "methods", ["None"], ["", "def", "testloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.trainseqloader": [[247, 249], ["None"], "methods", ["None"], ["", "def", "trainseqloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_trainseqloader", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.valloader_label": [[250, 252], ["None"], "methods", ["None"], ["", "def", "valloader_label", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_valloader_label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.testloader_label": [[253, 255], ["None"], "methods", ["None"], ["", "def", "testloader_label", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_testloader_label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.trainseqloader_label": [[256, 258], ["None"], "methods", ["None"], ["", "def", "trainseqloader_label", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_trainseqloader_label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.train_sn": [[259, 261], ["None"], "methods", ["None"], ["", "def", "train_sn", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_train_sn", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.val_sn": [[262, 264], ["None"], "methods", ["None"], ["", "def", "val_sn", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_val_sn", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.DataHub.test_sn": [[265, 267], ["None"], "methods", ["None"], ["", "def", "test_sn", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_test_sn", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.timestr": [[21, 26], ["time.strftime", "time.strftime", "time.localtime", "time.localtime"], "function", ["None"], ["def", "timestr", "(", "form", "=", "None", ")", ":", "\n", "    ", "if", "form", "is", "None", ":", "\n", "        ", "return", "time", ".", "strftime", "(", "\"<%Y-%m-%d %H:%M:%S>\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "", "if", "form", "==", "'mdhm'", ":", "\n", "        ", "return", "time", ".", "strftime", "(", "'%m%d%H%M'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.bilinear_init3d": [[27, 48], ["m.weight.size", "method", "torch.zeros", "torch.zeros", "math.ceil", "math.ceil", "math.ceil", "range", "range", "m.bias.data.zero_", "range", "range", "math.fabs", "math.fabs", "math.fabs"], "function", ["None"], ["", "", "def", "bilinear_init3d", "(", "m", ",", "method", "=", "nn", ".", "init", ".", "kaiming_normal", ")", ":", "\n", "    ", "inC", ",", "outC", ",", "d", ",", "h", ",", "w", "=", "m", ".", "weight", ".", "size", "(", ")", "\n", "if", "not", "(", "outC", "==", "1", "and", "inC", "==", "m", ".", "groups", "and", "h", "==", "w", "==", "4", ")", ":", "\n", "        ", "method", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "kernel", "=", "torch", ".", "zeros", "(", "d", ",", "h", ",", "w", ")", "\n", "f_d", "=", "math", ".", "ceil", "(", "d", "/", "2.", ")", "\n", "f_h", "=", "math", ".", "ceil", "(", "h", "/", "2.", ")", "\n", "f_w", "=", "math", ".", "ceil", "(", "w", "/", "2.", ")", "\n", "c_d", "=", "(", "2", "*", "f_d", "-", "1", "-", "f_d", "%", "2", ")", "/", "(", "2.", "*", "f_d", ")", "\n", "c_h", "=", "(", "2", "*", "f_h", "-", "1", "-", "f_h", "%", "2", ")", "/", "(", "2.", "*", "f_h", ")", "\n", "c_w", "=", "(", "2", "*", "f_w", "-", "1", "-", "f_w", "%", "2", ")", "/", "(", "2.", "*", "f_w", ")", "\n", "for", "i", "in", "range", "(", "d", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "h", ")", ":", "\n", "                ", "for", "k", "in", "range", "(", "w", ")", ":", "\n", "                    ", "kernel", "[", "i", ",", "j", ",", "k", "]", "=", "(", "1", "-", "math", ".", "fabs", "(", "i", "/", "f_d", "-", "c_d", ")", ")", "*", "(", "1", "-", "math", ".", "fabs", "(", "j", "/", "f_h", "-", "c_h", ")", ")", "*", "(", "1", "-", "math", ".", "fabs", "(", "k", "/", "f_w", "-", "c_w", ")", ")", "\n", "", "", "", "for", "i", "in", "range", "(", "inC", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", "[", "i", "]", "=", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.bilinear_init2d": [[49, 66], ["m.weight.size", "method", "torch.zeros", "torch.zeros", "math.ceil", "math.ceil", "range", "range", "m.bias.data.zero_", "range", "math.fabs", "math.fabs"], "function", ["None"], ["", "", "", "def", "bilinear_init2d", "(", "m", ",", "method", "=", "nn", ".", "init", ".", "kaiming_normal", ")", ":", "\n", "    ", "inC", ",", "outC", ",", "h", ",", "w", "=", "m", ".", "weight", ".", "size", "(", ")", "\n", "if", "not", "(", "outC", "==", "1", "and", "inC", "==", "m", ".", "groups", "and", "h", "==", "w", "==", "4", ")", ":", "\n", "        ", "method", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "kernel", "=", "torch", ".", "zeros", "(", "h", ",", "w", ")", "\n", "f_h", "=", "math", ".", "ceil", "(", "h", "/", "2.", ")", "\n", "f_w", "=", "math", ".", "ceil", "(", "w", "/", "2.", ")", "\n", "c_h", "=", "(", "2", "*", "f_h", "-", "1", "-", "f_h", "%", "2", ")", "/", "(", "2.", "*", "f_h", ")", "\n", "c_w", "=", "(", "2", "*", "f_w", "-", "1", "-", "f_w", "%", "2", ")", "/", "(", "2.", "*", "f_w", ")", "\n", "for", "j", "in", "range", "(", "h", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "w", ")", ":", "\n", "                ", "kernel", "[", "j", ",", "k", "]", "=", "(", "1", "-", "math", ".", "fabs", "(", "j", "/", "f_h", "-", "c_h", ")", ")", "*", "(", "1", "-", "math", ".", "fabs", "(", "k", "/", "f_w", "-", "c_w", ")", ")", "\n", "", "", "for", "i", "in", "range", "(", "inC", ")", ":", "\n", "            ", "m", ".", "weight", ".", "data", "[", "i", "]", "=", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.weights_init": [[67, 85], ["method", "classname.find", "classname.find", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.fill_", "classname.find", "classname.find", "classname.find", "misc.bilinear_init3d", "classname.find", "misc.bilinear_init2d"], "function", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.bilinear_init3d", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.misc.bilinear_init2d"], ["", "", "", "def", "weights_init", "(", "m", ",", "method", "=", "nn", ".", "init", ".", "kaiming_normal", ")", ":", "\n", "    ", "'''\n    ConvXd: kaiming_normal (weight), zeros (bias)\n    BatchNormXd: ones (weight), zeros (bias)\n    ConvTransposedXd: bilinear (weight), no bias\n    '''", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv3d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", ":", "\n", "        ", "method", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm3d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'ConvTranspose3d'", ")", "!=", "-", "1", ":", "\n", "        ", "bilinear_init3d", "(", "m", ",", "method", ")", "\n", "", "elif", "classname", ".", "find", "(", "'ConvTranspose2d'", ")", "!=", "-", "1", ":", "\n", "        ", "bilinear_init2d", "(", "m", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.General_Dataset_SEGCLS.__init__": [[39, 58], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "open().read().splitlines", "general_dataset.General_Dataset_SEGCLS.access_data", "general_dataset.General_Dataset_SEGCLS.label.append", "numpy.stack", "general_dataset.General_Dataset_SEGCLS.data.append", "open().read", "general_dataset.General_Dataset_SEGCLS.access_data", "numpy.stack.append", "open"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.Dataset_SEGCLS_png.access_data", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.Dataset_SEGCLS_png.access_data", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["def", "__init__", "(", "self", ",", "root", ",", "split", ",", "datapath", ",", "modalities", ",", "transform", "=", "None", ",", "shape", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "label", "=", "[", "]", "\n", "\n", "# Load subject names into a list", "\n", "split_fname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "split", ")", "\n", "sn_list", "=", "open", "(", "split_fname", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "for", "sn", "in", "sn_list", ":", "\n", "            ", "label_", "=", "self", ".", "access_data", "(", "root", ",", "datapath", ",", "modalities", "[", "0", "]", ",", "sn", ",", "'uint8'", ",", "shape", ")", "\n", "self", ".", "label", ".", "append", "(", "label_", ")", "\n", "\n", "img_", "=", "[", "]", "\n", "for", "mod", "in", "modalities", "[", "1", ":", "]", ":", "\n", "                ", "image", "=", "self", ".", "access_data", "(", "root", ",", "datapath", ",", "mod", ",", "sn", ",", "'float32'", ",", "shape", ")", "\n", "img_", ".", "append", "(", "image", ")", "\n", "", "img_", "=", "np", ".", "stack", "(", "img_", ")", "\n", "self", ".", "data", ".", "append", "(", "img_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.General_Dataset_SEGCLS.access_data": [[59, 61], ["None"], "methods", ["None"], ["", "", "def", "access_data", "(", "self", ",", "root", ",", "datapath", ",", "mod", ",", "sn", ",", "dtype", ",", "shape", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.General_Dataset_SEGCLS.__getitem__": [[62, 74], ["general_dataset.General_Dataset_SEGCLS.transform", "label.sum"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "label", "[", "index", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "transform", "(", "img", ",", "label", ")", "\n", "\n", "", "if", "label", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "cls_label", "=", "1", "\n", "", "else", ":", "\n", "            ", "cls_label", "=", "0", "\n", "\n", "", "return", "img", ",", "label", ",", "cls_label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.General_Dataset_SEGCLS.__len__": [[75, 77], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.Dataset_SEGCLS_png.access_data": [[80, 84], ["os.join", "os.join", "scipy.misc.imread", "scipy.misc.imread.astype"], "methods", ["None"], ["    ", "def", "access_data", "(", "self", ",", "root", ",", "datapath", ",", "mod", ",", "sn", ",", "dtype", ",", "shape", "=", "None", ")", ":", "\n", "        ", "fname", "=", "P", ".", "join", "(", "root", ",", "datapath", ",", "mod", ",", "'%s.png'", "%", "sn", ")", "\n", "data", "=", "scipy", ".", "misc", ".", "imread", "(", "fname", ")", "\n", "return", "data", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.MMDataset_memmap.__init__": [[104, 123], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "open().read().splitlines", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.memmap", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.memmap", "general_dataset.MMDataset_memmap.data.append", "general_dataset.MMDataset_memmap.label.append", "open().read", "open"], "methods", ["home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append", "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.validate.ClsMetric.append"], ["def", "__init__", "(", "self", ",", "root", ",", "split", ",", "datapath", ",", "modalities", ",", "transform", "=", "None", ",", "shape", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "label", "=", "[", "]", "\n", "\n", "# Load subject names into a list", "\n", "split_fname", "=", "os", ".", "path", ".", "join", "(", "root", ",", "split", ")", "\n", "sn_list", "=", "open", "(", "split_fname", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "# Load images and labels", "\n", "for", "sn", "in", "sn_list", ":", "\n", "            ", "label_fn", "=", "os", ".", "path", ".", "join", "(", "root", ",", "datapath", ",", "modalities", "[", "0", "]", ",", "'%s.dat'", "%", "sn", ")", "\n", "label_", "=", "np", ".", "memmap", "(", "label_fn", ",", "dtype", "=", "'uint8'", ",", "mode", "=", "'r'", ",", "shape", "=", "shape", "[", "1", ":", "]", ")", "\n", "\n", "img_fn", "=", "os", ".", "path", ".", "join", "(", "root", ",", "datapath", ",", "modalities", "[", "1", "]", ",", "'%s.dat'", "%", "sn", ")", "\n", "img_", "=", "np", ".", "memmap", "(", "img_fn", ",", "dtype", "=", "'float32'", ",", "mode", "=", "'r'", ",", "shape", "=", "shape", ")", "\n", "\n", "self", ".", "data", ".", "append", "(", "img_", ")", "\n", "self", ".", "label", ".", "append", "(", "label_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.MMDataset_memmap.__getitem__": [[129, 136], ["general_dataset.MMDataset_memmap.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "label", "[", "index", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "transform", "(", "img", ",", "label", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.angrypudding_hybrid-ds.None.general_dataset.MMDataset_memmap.__len__": [[137, 139], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]]}