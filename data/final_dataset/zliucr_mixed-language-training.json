{"home.repos.pwc.inspect_result.zliucr_mixed-language-training.None.config.get_params": [[3, 55], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.parse_args"], ["def", "get_params", "(", ")", ":", "\n", "# parse parameters", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Cross-lingual Task-Oriented Dialog\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp_name\"", ",", "type", "=", "str", ",", "default", "=", "\"default\"", ",", "help", "=", "\"Experiment name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--logger_filename\"", ",", "type", "=", "str", ",", "default", "=", "\"multilingual_dst.log\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dump_path\"", ",", "type", "=", "str", ",", "default", "=", "\"experiments\"", ",", "help", "=", "\"Experiment saved root path\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp_id\"", ",", "type", "=", "str", ",", "default", "=", "\"1\"", ",", "help", "=", "\"Experiment id\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--trans_lang\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Choose a language to transfer\"", ")", "\n", "\n", "# binarize data", "\n", "parser", ".", "add_argument", "(", "\"--vocab_path_en\"", ",", "type", "=", "str", ",", "default", "=", "\"data/dst/dst_vocab/vocab.en\"", ",", "help", "=", "\"Path of vocabulary\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--vocab_path_trans\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Path of vocabulary\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--ontology_class_path\"", ",", "type", "=", "str", ",", "default", "=", "\"data/dst/dst_data/ontology_classes.json\"", ",", "help", "=", "\"Path of ontology classes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ontology_mapping_path\"", ",", "type", "=", "str", ",", "default", "=", "\"data/dst/dst_data/ontology-mapping.json\"", ",", "help", "=", "\"Path of ontology mapping\"", ")", "\n", "\n", "# model parameters", "\n", "parser", ".", "add_argument", "(", "\"--bidirection\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Bidirectional lstm\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"Dropout rate for lstm\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--emb_dim\"", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "\"Embedding dimension\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--hidden_dim\"", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "\"Hidden layer dimension\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "\"Batch size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "\"Learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "\"Weight decay\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epoch\"", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "\"Number of epoch\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--emb_file_en\"", ",", "type", "=", "str", ",", "default", "=", "\"data/dst/dst_emb/embedding_en.npy\"", ",", "help", "=", "\"Path of pretrained embeddings in English\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--emb_file_trans\"", ",", "type", "=", "str", ",", "default", "=", "\"data/dst/dst_emb/embedding_de.npy\"", ",", "help", "=", "\"Path of pretrained embeddings in transfer language\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ontology_emb_file\"", ",", "type", "=", "str", ",", "default", "=", "\"data/dst/dst_data/ontology_embeddings_en.npy\"", ",", "help", "=", "\"Path of ontology embedding file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gate_size\"", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "\"Gate size (should be same as embedding dimension)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--early_stop\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"No improvement after several epoch, we stop training\"", ")", "\n", "# number of classes for slots and request", "\n", "parser", ".", "add_argument", "(", "\"--food_class\"", ",", "type", "=", "int", ",", "default", "=", "76", ",", "help", "=", "\"the number of classes for food slot (include none)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--price_range_class\"", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "\"the number of classes for price range slot (include none)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--area_class\"", ",", "type", "=", "int", ",", "default", "=", "7", ",", "help", "=", "\"the number of classes for area slot (include none)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--request_class\"", ",", "type", "=", "int", ",", "default", "=", "7", ",", "help", "=", "\"the number of classes for request\"", ")", "\n", "\n", "# mix languages training", "\n", "parser", ".", "add_argument", "(", "\"--mix_train\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Mix language training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--mapping_for_mix\"", ",", "type", "=", "str", ",", "default", "=", "\"data/dst/dst_vocab/en2de_onto_for_mix.dict\"", ",", "help", "=", "\"mapping for mix language training\"", ")", "\n", "\n", "# run nlu dataset", "\n", "parser", ".", "add_argument", "(", "\"--run_nlu\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Run NLU dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_layer\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Number of lstm layer\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_intent\"", ",", "type", "=", "int", ",", "default", "=", "12", ",", "help", "=", "\"Number of intent in the dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_slot\"", ",", "type", "=", "int", ",", "default", "=", "24", ",", "help", "=", "\"Number of slot in the dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--clean_txt\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Clean text if store true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--filtered\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"filter attention selected words data samples\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--filter_scale\"", ",", "type", "=", "str", ",", "default", "=", "\"20\"", ",", "help", "=", "\"filter based on how many attention selected words\"", ")", "\n", "\n", "params", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.None.main.train_dst": [[18, 72], ["src.utils.init_experiment", "src.dst_loader.get_dst_dataloader", "src.dst_model.DialogueStateTracker", "src.dst_model.DialogueStateTracker.cuda", "src.trainer.DST_Trainer", "range", "src.utils.init_experiment.info", "src.trainer.DST_Trainer.evaluate", "src.utils.init_experiment.info", "codecs.open", "json.load", "open", "pickle.load", "open", "pickle.load", "src.utils.init_experiment.info", "tqdm.tqdm", "src.utils.init_experiment.info", "src.utils.init_experiment.info", "src.trainer.DST_Trainer.evaluate", "src.utils.init_experiment.info", "src.trainer.DST_Trainer.evaluate", "src.utils.init_experiment.info", "enumerate", "src.trainer.DST_Trainer.train_step", "food_loss_list.append", "price_loss_list.append", "area_loss_list.append", "request_loss_list.append", "tqdm.tqdm.set_description", "len", "turn_slot_labels.cuda", "turn_request_labels.cuda", "utters.cuda", "lengths.cuda", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.init_experiment", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_loader.get_dst_dataloader", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.evaluate", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.evaluate", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.evaluate", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.train_step"], ["def", "train_dst", "(", "params", ")", ":", "\n", "# initialize experiment", "\n", "    ", "logger", "=", "init_experiment", "(", "params", ",", "logger_filename", "=", "params", ".", "logger_filename", ")", "\n", "\n", "with", "codecs", ".", "open", "(", "params", ".", "ontology_class_path", ",", "'r'", ",", "'utf8'", ")", "as", "f", ":", "\n", "        ", "dialogue_ontology", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# get vocab and dialogue_ontology", "\n", "", "with", "open", "(", "params", ".", "vocab_path_en", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "vocab_en", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "params", ".", "vocab_path_trans", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "vocab_trans", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# dataloader", "\n", "", "dataloader_tr", ",", "dataloader_val", ",", "dataloader_test", "=", "get_dst_dataloader", "(", "params", ",", "vocab_en", ",", "vocab_trans", ",", "dialogue_ontology", ")", "\n", "dst_model", "=", "DialogueStateTracker", "(", "params", ",", "vocab_en", ",", "vocab_trans", ")", "\n", "dst_model", ".", "cuda", "(", ")", "\n", "\n", "# build trainer", "\n", "dst_trainer", "=", "DST_Trainer", "(", "params", ",", "dst_model", ")", "\n", "\n", "for", "e", "in", "range", "(", "params", ".", "epoch", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"============== epoch {} ==============\"", ".", "format", "(", "e", "+", "1", ")", ")", "\n", "food_loss_list", ",", "price_loss_list", ",", "area_loss_list", ",", "request_loss_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "pbar", "=", "tqdm", "(", "enumerate", "(", "dataloader_tr", ")", ",", "total", "=", "len", "(", "dataloader_tr", ")", ")", "\n", "for", "i", ",", "(", "_", ",", "utters", ",", "lengths", ",", "acts_request", ",", "acts_slot", ",", "acts_values", ",", "slot_names", ",", "turn_slot_labels", ",", "turn_request_labels", ")", "in", "pbar", ":", "\n", "            ", "turn_slot_labels", ",", "turn_request_labels", "=", "turn_slot_labels", ".", "cuda", "(", ")", ",", "turn_request_labels", ".", "cuda", "(", ")", "\n", "utters", ",", "lengths", "=", "utters", ".", "cuda", "(", ")", ",", "lengths", ".", "cuda", "(", ")", "\n", "\n", "food_loss", ",", "price_loss", ",", "area_loss", ",", "request_loss", "=", "dst_trainer", ".", "train_step", "(", "utters", ",", "lengths", ",", "acts_request", ",", "acts_slot", ",", "acts_values", ",", "slot_names", ",", "turn_slot_labels", ",", "turn_request_labels", ")", "\n", "\n", "food_loss_list", ".", "append", "(", "food_loss", ")", "\n", "price_loss_list", ".", "append", "(", "price_loss", ")", "\n", "area_loss_list", ".", "append", "(", "area_loss", ")", "\n", "request_loss_list", ".", "append", "(", "request_loss", ")", "\n", "\n", "pbar", ".", "set_description", "(", "\"(Epoch {}) FOOD:{:.4f} PRICE:{:.4f} AREA:{:.4f} REQUEST:{:.4f}\"", ".", "format", "(", "e", "+", "1", ",", "np", ".", "mean", "(", "food_loss", ")", ",", "np", ".", "mean", "(", "price_loss", ")", ",", "np", ".", "mean", "(", "area_loss", ")", ",", "np", ".", "mean", "(", "request_loss", ")", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Finish training epoch {}. FOOD:{:.4f} PRICE:{:.4f} AREA:{:.4f} REQUEST:{:.4f}\"", ".", "format", "(", "e", "+", "1", ",", "np", ".", "mean", "(", "food_loss", ")", ",", "np", ".", "mean", "(", "price_loss", ")", ",", "np", ".", "mean", "(", "area_loss", ")", ",", "np", ".", "mean", "(", "request_loss", ")", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"============== Evaluate {} ==============\"", ".", "format", "(", "e", "+", "1", ")", ")", "\n", "goal_acc", ",", "request_acc", ",", "joint_goal_acc", ",", "avg_acc", ",", "stop_training_flag", "=", "dst_trainer", ".", "evaluate", "(", "dataloader_val", ",", "isTestset", "=", "False", ")", "\n", "logger", ".", "info", "(", "\"({}) Goal ACC: {:.4f}. Joint ACC: {:.4f}. Request ACC: {:.4f}. Avg ACC: {:.4f} (Best Avg Acc: {:.4f})\"", ".", "format", "(", "params", ".", "trans_lang", ",", "goal_acc", ",", "joint_goal_acc", ",", "request_acc", ",", "avg_acc", ",", "dst_trainer", ".", "best_avg_acc", ")", ")", "\n", "\n", "goal_acc", ",", "request_acc", ",", "joint_goal_acc", ",", "avg_acc", ",", "_", "=", "dst_trainer", ".", "evaluate", "(", "dataloader_test", ",", "isTestset", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"({}) Goal ACC: {:.4f}. Joint ACC: {:.4f}. Request ACC: {:.4f}. Avg ACC: {:.4f}\"", ".", "format", "(", "params", ".", "trans_lang", ",", "goal_acc", ",", "joint_goal_acc", ",", "request_acc", ",", "avg_acc", ")", ")", "\n", "\n", "if", "stop_training_flag", "==", "True", ":", "\n", "            ", "break", "\n", "\n", "", "", "logger", ".", "info", "(", "\"============== Final Test ==============\"", ")", "\n", "goal_acc", ",", "request_acc", ",", "joint_goal_acc", ",", "avg_acc", ",", "_", "=", "dst_trainer", ".", "evaluate", "(", "dataloader_test", ",", "isTestset", "=", "True", ",", "load_best_model", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Goal ACC: {:.4f}. Joint ACC: {:.4f}. Request ACC: {:.4f}. Avg ACC: {:.4f})\"", ".", "format", "(", "goal_acc", ",", "joint_goal_acc", ",", "request_acc", ",", "avg_acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.None.main.train_nlu": [[74, 122], ["src.utils.init_experiment", "src.nlu_loader.get_nlu_dataloader", "src.nlu_model.Lstm_nlu", "src.nlu_model.IntentPredictor", "src.nlu_model.SlotPredictor", "src.nlu_model.Lstm_nlu.cuda", "src.nlu_model.IntentPredictor.cuda", "src.nlu_model.SlotPredictor.cuda", "src.trainer.NLU_Trainer", "range", "src.utils.init_experiment.info", "src.trainer.NLU_Trainer.evaluate", "src.utils.init_experiment.info", "src.utils.init_experiment.info", "tqdm.tqdm", "src.utils.init_experiment.info", "src.utils.init_experiment.info", "src.trainer.NLU_Trainer.evaluate", "src.utils.init_experiment.info", "src.trainer.NLU_Trainer.evaluate", "src.utils.init_experiment.info", "enumerate", "src.trainer.NLU_Trainer.train_step", "intent_loss_list.append", "slot_loss_list.append", "tqdm.tqdm.set_description", "len", "X.cuda", "lengths.cuda", "y1.cuda", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.init_experiment", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_loader.get_nlu_dataloader", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.evaluate", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.evaluate", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.evaluate", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.train_step"], ["", "def", "train_nlu", "(", "params", ")", ":", "\n", "# initialize experiment", "\n", "    ", "logger", "=", "init_experiment", "(", "params", ",", "logger_filename", "=", "params", ".", "logger_filename", ")", "\n", "\n", "# dataloader", "\n", "dataloader_tr", ",", "dataloader_val", ",", "dataloader_test", ",", "vocab_en", ",", "vocab_trans", "=", "get_nlu_dataloader", "(", "params", ")", "\n", "\n", "# build model", "\n", "lstm", "=", "Lstm_nlu", "(", "params", ",", "vocab_en", ",", "vocab_trans", ")", "\n", "\n", "intent_predictor", "=", "IntentPredictor", "(", "params", ")", "\n", "slot_predictor", "=", "SlotPredictor", "(", "params", ")", "\n", "lstm", ".", "cuda", "(", ")", "\n", "intent_predictor", ".", "cuda", "(", ")", "\n", "slot_predictor", ".", "cuda", "(", ")", "\n", "\n", "# build trainer", "\n", "nlu_trainer", "=", "NLU_Trainer", "(", "params", ",", "lstm", ",", "intent_predictor", ",", "slot_predictor", ")", "\n", "\n", "for", "e", "in", "range", "(", "params", ".", "epoch", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"============== epoch {} ==============\"", ".", "format", "(", "e", "+", "1", ")", ")", "\n", "intent_loss_list", ",", "slot_loss_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "pbar", "=", "tqdm", "(", "enumerate", "(", "dataloader_tr", ")", ",", "total", "=", "len", "(", "dataloader_tr", ")", ")", "\n", "for", "i", ",", "(", "X", ",", "lengths", ",", "y1", ",", "y2", ")", "in", "pbar", ":", "\n", "            ", "X", ",", "lengths", ",", "y1", "=", "X", ".", "cuda", "(", ")", ",", "lengths", ".", "cuda", "(", ")", ",", "y1", ".", "cuda", "(", ")", "# the length of y2 is different for each sequence", "\n", "\n", "intent_loss", ",", "slot_loss", "=", "nlu_trainer", ".", "train_step", "(", "X", ",", "lengths", ",", "y1", ",", "y2", ")", "\n", "intent_loss_list", ".", "append", "(", "intent_loss", ")", "\n", "slot_loss_list", ".", "append", "(", "slot_loss", ")", "\n", "\n", "pbar", ".", "set_description", "(", "\"(Epoch {}) INTENT LOSS:{:.4f} SLOT LOSS:{:.4f}\"", ".", "format", "(", "e", "+", "1", ",", "np", ".", "mean", "(", "intent_loss_list", ")", ",", "np", ".", "mean", "(", "slot_loss_list", ")", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Finish training epoch {}. Intent loss: {:.4f}. Slot loss: {:.4f}\"", ".", "format", "(", "e", "+", "1", ",", "np", ".", "mean", "(", "intent_loss_list", ")", ",", "np", ".", "mean", "(", "slot_loss_list", ")", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"============== Evaluate %d ==============\"", "%", "e", ")", "\n", "intent_acc", ",", "slot_f1", ",", "stop_training_flag", "=", "nlu_trainer", ".", "evaluate", "(", "dataloader_val", ")", "\n", "logger", ".", "info", "(", "\"({}) Intent ACC: {:.4f} (Best Acc: {:.4f}). Slot F1: {:.4f}. (Best F1: {:.4f})\"", ".", "format", "(", "params", ".", "trans_lang", ",", "intent_acc", ",", "nlu_trainer", ".", "best_intent_acc", ",", "slot_f1", ",", "nlu_trainer", ".", "best_slot_f1", ")", ")", "\n", "\n", "intent_acc", ",", "slot_f1", ",", "_", "=", "nlu_trainer", ".", "evaluate", "(", "dataloader_test", ",", "istestset", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"({}) Intent ACC: {:.4f}. Slot F1: {:.4f}.\"", ".", "format", "(", "params", ".", "trans_lang", ",", "intent_acc", ",", "slot_f1", ")", ")", "\n", "\n", "if", "stop_training_flag", "==", "True", ":", "\n", "            ", "break", "\n", "\n", "", "", "logger", ".", "info", "(", "\"============== Final Test ==============\"", ")", "\n", "intent_acc", ",", "slot_f1", ",", "_", "=", "nlu_trainer", ".", "evaluate", "(", "dataloader_test", ",", "istestset", "=", "True", ",", "load_best_model", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Intent ACC: {:.4f}. Slot F1: {:.4f}.\"", ".", "format", "(", "intent_acc", ",", "slot_f1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preparation.Vocab.__init__": [[6, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2index", "=", "{", "\"PAD\"", ":", "PAD_INDEX", ",", "\"UNK\"", ":", "UNK_INDEX", "}", "\n", "self", ".", "word2count", "=", "{", "}", "\n", "self", ".", "index2word", "=", "{", "PAD_INDEX", ":", "\"PAD\"", ",", "UNK_INDEX", ":", "\"UNK\"", "}", "\n", "self", ".", "n_words", "=", "2", "\n", "self", ".", "word_num", "=", "0", "\n", "", "def", "index_words", "(", "self", ",", "sentence", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preparation.Vocab.index_words": [[12, 22], ["None"], "methods", ["None"], ["", "def", "index_words", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "for", "word", "in", "sentence", ":", "\n", "            ", "self", ".", "word_num", "+=", "1", "\n", "if", "word", "not", "in", "self", ".", "word2index", ":", "\n", "                ", "self", ".", "word2index", "[", "word", "]", "=", "self", ".", "n_words", "\n", "self", ".", "index2word", "[", "self", ".", "n_words", "]", "=", "word", "\n", "self", ".", "word2count", "[", "word", "]", "=", "1", "\n", "self", ".", "n_words", "+=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "word2count", "[", "word", "]", "+=", "1", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.EvalCounts.__init__": [[25, 36], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "correct_chunk", "=", "0", "# number of correctly identified chunks", "\n", "self", ".", "correct_tags", "=", "0", "# number of correct chunk tags", "\n", "self", ".", "found_correct", "=", "0", "# number of chunks in corpus", "\n", "self", ".", "found_guessed", "=", "0", "# number of identified chunks", "\n", "self", ".", "token_counter", "=", "0", "# token counter (ignores sentence breaks)", "\n", "\n", "# counts by type", "\n", "self", ".", "t_correct_chunk", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "t_found_correct", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "t_found_guessed", "=", "defaultdict", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.parse_args": [[37, 52], ["argparse.ArgumentParser", "arg", "arg", "arg", "arg", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.parse_args"], ["", "", "def", "parse_args", "(", "argv", ")", ":", "\n", "    ", "import", "argparse", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'evaluate tagging results using CoNLL criteria'", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", "\n", ")", "\n", "arg", "=", "parser", ".", "add_argument", "\n", "arg", "(", "'-b'", ",", "'--boundary'", ",", "metavar", "=", "'STR'", ",", "default", "=", "'-X-'", ",", "\n", "help", "=", "'sentence boundary'", ")", "\n", "arg", "(", "'-d'", ",", "'--delimiter'", ",", "metavar", "=", "'CHAR'", ",", "default", "=", "ANY_SPACE", ",", "\n", "help", "=", "'character delimiting items in input'", ")", "\n", "arg", "(", "'-o'", ",", "'--otag'", ",", "metavar", "=", "'CHAR'", ",", "default", "=", "'O'", ",", "\n", "help", "=", "'alternative outside tag'", ")", "\n", "arg", "(", "'file'", ",", "nargs", "=", "'?'", ",", "default", "=", "None", ")", "\n", "return", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.parse_tag": [[53, 56], ["re.match", "re.match.groups"], "function", ["None"], ["", "def", "parse_tag", "(", "t", ")", ":", "\n", "    ", "m", "=", "re", ".", "match", "(", "r'^([^-]*)-(.*)$'", ",", "t", ")", "\n", "return", "m", ".", "groups", "(", ")", "if", "m", "else", "(", "t", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.evaluate": [[138, 218], ["conll2002_metrics.EvalCounts", "conll2002_metrics.parse_args", "line.rstrip.rstrip", "conll2002_metrics.parse_tag", "conll2002_metrics.parse_tag", "line.split.pop", "conll2002_metrics.end_of_chunk", "conll2002_metrics.end_of_chunk", "conll2002_metrics.start_of_chunk", "conll2002_metrics.start_of_chunk", "line.rstrip.split", "line.rstrip.split", "len", "len", "conll2002_metrics.FormatError", "line.split.pop", "line.split.pop", "conll2002_metrics.FormatError", "len", "len", "len", "len", "sys.stdin"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.parse_args", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.parse_tag", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.parse_tag", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.end_of_chunk", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.end_of_chunk", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.start_of_chunk", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.start_of_chunk"], ["", "def", "evaluate", "(", "lines", ",", "options", "=", "None", ")", ":", "\n", "    ", "if", "options", "is", "None", ":", "\n", "        ", "options", "=", "parse_args", "(", "[", "]", ")", "# use defaults", "\n", "\n", "", "counts", "=", "EvalCounts", "(", ")", "\n", "num_features", "=", "None", "# number of features per line", "\n", "in_correct", "=", "False", "# currently processed chunks is correct until now", "\n", "last_correct", "=", "'O'", "# previous chunk tag in corpus", "\n", "last_correct_type", "=", "''", "# type of previously identified chunk tag", "\n", "last_guessed", "=", "'O'", "# previously identified chunk tag", "\n", "last_guessed_type", "=", "''", "# type of previous chunk tag in corpus", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "rstrip", "(", "'\\r\\n'", ")", "\n", "\n", "if", "options", ".", "delimiter", "==", "ANY_SPACE", ":", "\n", "            ", "features", "=", "line", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "line", ".", "split", "(", "options", ".", "delimiter", ")", "\n", "\n", "", "if", "num_features", "is", "None", ":", "\n", "            ", "num_features", "=", "len", "(", "features", ")", "\n", "", "elif", "num_features", "!=", "len", "(", "features", ")", "and", "len", "(", "features", ")", "!=", "0", ":", "\n", "            ", "raise", "FormatError", "(", "'unexpected number of features: %d (%d)'", "%", "\n", "(", "len", "(", "features", ")", ",", "num_features", ")", ")", "\n", "\n", "", "if", "len", "(", "features", ")", "==", "0", "or", "features", "[", "0", "]", "==", "options", ".", "boundary", ":", "\n", "            ", "features", "=", "[", "options", ".", "boundary", ",", "'O'", ",", "'O'", "]", "\n", "", "if", "len", "(", "features", ")", "<", "3", ":", "\n", "            ", "raise", "FormatError", "(", "'unexpected number of features in line %s'", "%", "line", ")", "\n", "\n", "", "guessed", ",", "guessed_type", "=", "parse_tag", "(", "features", ".", "pop", "(", ")", ")", "\n", "correct", ",", "correct_type", "=", "parse_tag", "(", "features", ".", "pop", "(", ")", ")", "\n", "first_item", "=", "features", ".", "pop", "(", "0", ")", "\n", "\n", "if", "first_item", "==", "options", ".", "boundary", ":", "\n", "            ", "guessed", "=", "'O'", "\n", "\n", "", "end_correct", "=", "end_of_chunk", "(", "last_correct", ",", "correct", ",", "\n", "last_correct_type", ",", "correct_type", ")", "\n", "end_guessed", "=", "end_of_chunk", "(", "last_guessed", ",", "guessed", ",", "\n", "last_guessed_type", ",", "guessed_type", ")", "\n", "start_correct", "=", "start_of_chunk", "(", "last_correct", ",", "correct", ",", "\n", "last_correct_type", ",", "correct_type", ")", "\n", "start_guessed", "=", "start_of_chunk", "(", "last_guessed", ",", "guessed", ",", "\n", "last_guessed_type", ",", "guessed_type", ")", "\n", "\n", "if", "in_correct", ":", "\n", "            ", "if", "(", "end_correct", "and", "end_guessed", "and", "\n", "last_guessed_type", "==", "last_correct_type", ")", ":", "\n", "                ", "in_correct", "=", "False", "\n", "counts", ".", "correct_chunk", "+=", "1", "\n", "counts", ".", "t_correct_chunk", "[", "last_correct_type", "]", "+=", "1", "\n", "", "elif", "(", "end_correct", "!=", "end_guessed", "or", "guessed_type", "!=", "correct_type", ")", ":", "\n", "                ", "in_correct", "=", "False", "\n", "\n", "", "", "if", "start_correct", "and", "start_guessed", "and", "guessed_type", "==", "correct_type", ":", "\n", "            ", "in_correct", "=", "True", "\n", "\n", "", "if", "start_correct", ":", "\n", "            ", "counts", ".", "found_correct", "+=", "1", "\n", "counts", ".", "t_found_correct", "[", "correct_type", "]", "+=", "1", "\n", "", "if", "start_guessed", ":", "\n", "            ", "counts", ".", "found_guessed", "+=", "1", "\n", "counts", ".", "t_found_guessed", "[", "guessed_type", "]", "+=", "1", "\n", "", "if", "first_item", "!=", "options", ".", "boundary", ":", "\n", "            ", "if", "correct", "==", "guessed", "and", "guessed_type", "==", "correct_type", ":", "\n", "                ", "counts", ".", "correct_tags", "+=", "1", "\n", "", "counts", ".", "token_counter", "+=", "1", "\n", "\n", "", "last_guessed", "=", "guessed", "\n", "last_correct", "=", "correct", "\n", "last_guessed_type", "=", "guessed_type", "\n", "last_correct_type", "=", "correct_type", "\n", "\n", "", "if", "in_correct", ":", "\n", "        ", "counts", ".", "correct_chunk", "+=", "1", "\n", "counts", ".", "t_correct_chunk", "[", "last_correct_type", "]", "+=", "1", "\n", "\n", "", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.uniq": [[219, 222], ["set", "set.add"], "function", ["None"], ["", "def", "uniq", "(", "iterable", ")", ":", "\n", "  ", "seen", "=", "set", "(", ")", "\n", "return", "[", "i", "for", "i", "in", "iterable", "if", "not", "(", "i", "in", "seen", "or", "seen", ".", "add", "(", "i", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.calculate_metrics": [[223, 229], ["Metrics"], "function", ["None"], ["", "def", "calculate_metrics", "(", "correct", ",", "guessed", ",", "total", ")", ":", "\n", "    ", "tp", ",", "fp", ",", "fn", "=", "correct", ",", "guessed", "-", "correct", ",", "total", "-", "correct", "\n", "p", "=", "0", "if", "tp", "+", "fp", "==", "0", "else", "1.", "*", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "r", "=", "0", "if", "tp", "+", "fn", "==", "0", "else", "1.", "*", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "f", "=", "0", "if", "p", "+", "r", "==", "0", "else", "2", "*", "p", "*", "r", "/", "(", "p", "+", "r", ")", "\n", "return", "Metrics", "(", "tp", ",", "fp", ",", "fn", ",", "p", ",", "r", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.metrics": [[230, 241], ["conll2002_metrics.calculate_metrics", "conll2002_metrics.uniq", "conll2002_metrics.calculate_metrics", "list", "list"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.calculate_metrics", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.uniq", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.calculate_metrics"], ["", "def", "metrics", "(", "counts", ")", ":", "\n", "    ", "c", "=", "counts", "\n", "overall", "=", "calculate_metrics", "(", "\n", "c", ".", "correct_chunk", ",", "c", ".", "found_guessed", ",", "c", ".", "found_correct", "\n", ")", "\n", "by_type", "=", "{", "}", "\n", "for", "t", "in", "uniq", "(", "list", "(", "c", ".", "t_found_correct", ")", "+", "list", "(", "c", ".", "t_found_guessed", ")", ")", ":", "\n", "        ", "by_type", "[", "t", "]", "=", "calculate_metrics", "(", "\n", "c", ".", "t_correct_chunk", "[", "t", "]", ",", "c", ".", "t_found_guessed", "[", "t", "]", ",", "c", ".", "t_found_correct", "[", "t", "]", "\n", ")", "\n", "", "return", "overall", ",", "by_type", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.report": [[267, 289], ["conll2002_metrics.metrics", "out.write", "out.write"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.metrics"], ["", "def", "report", "(", "counts", ",", "out", "=", "None", ")", ":", "\n", "    ", "if", "out", "is", "None", ":", "\n", "        ", "out", "=", "sys", ".", "stdout", "\n", "\n", "", "overall", ",", "by_type", "=", "metrics", "(", "counts", ")", "\n", "\n", "c", "=", "counts", "\n", "out", ".", "write", "(", "'processed %d tokens with %d phrases; '", "%", "\n", "(", "c", ".", "token_counter", ",", "c", ".", "found_correct", ")", ")", "\n", "out", ".", "write", "(", "'found: %d phrases; correct: %d.\\n'", "%", "\n", "(", "c", ".", "found_guessed", ",", "c", ".", "correct_chunk", ")", ")", "\n", "\n", "results", "=", "{", "}", "\n", "if", "c", ".", "token_counter", ">", "0", ":", "\n", "        ", "results", "[", "\"fb1\"", "]", "=", "100.", "*", "overall", ".", "fscore", "\n", "\n", "# comment it to not print details", "\n", "# for i, m in sorted(by_type.items()):", "\n", "#     print('%17s: ' % i)", "\n", "#     print('precision: %6.2f%%; recall: %6.2f%%; FB1: %6.2f  %d\\n' % (100.*m.prec, 100.*m.rec, 100.*m.fscore, c.t_found_guessed[i]))", "\n", "\n", "", "return", "results", "\n", "# out.write('accuracy: %6.2f%%; ' %", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.end_of_chunk": [[301, 324], ["None"], "function", ["None"], ["", "def", "end_of_chunk", "(", "prev_tag", ",", "tag", ",", "prev_type", ",", "type_", ")", ":", "\n", "# check if a chunk ended between the previous and current word", "\n", "# arguments: previous and current chunk tags, previous and current types", "\n", "    ", "chunk_end", "=", "False", "\n", "\n", "if", "prev_tag", "==", "'E'", ":", "chunk_end", "=", "True", "\n", "if", "prev_tag", "==", "'S'", ":", "chunk_end", "=", "True", "\n", "\n", "if", "prev_tag", "==", "'B'", "and", "tag", "==", "'B'", ":", "chunk_end", "=", "True", "\n", "if", "prev_tag", "==", "'B'", "and", "tag", "==", "'S'", ":", "chunk_end", "=", "True", "\n", "if", "prev_tag", "==", "'B'", "and", "tag", "==", "'O'", ":", "chunk_end", "=", "True", "\n", "if", "prev_tag", "==", "'I'", "and", "tag", "==", "'B'", ":", "chunk_end", "=", "True", "\n", "if", "prev_tag", "==", "'I'", "and", "tag", "==", "'S'", ":", "chunk_end", "=", "True", "\n", "if", "prev_tag", "==", "'I'", "and", "tag", "==", "'O'", ":", "chunk_end", "=", "True", "\n", "\n", "if", "prev_tag", "!=", "'O'", "and", "prev_tag", "!=", "'.'", "and", "prev_type", "!=", "type_", ":", "\n", "        ", "chunk_end", "=", "True", "\n", "\n", "# these chunks are assumed to have length 1", "\n", "", "if", "prev_tag", "==", "']'", ":", "chunk_end", "=", "True", "\n", "if", "prev_tag", "==", "'['", ":", "chunk_end", "=", "True", "\n", "\n", "return", "chunk_end", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.start_of_chunk": [[325, 348], ["None"], "function", ["None"], ["", "def", "start_of_chunk", "(", "prev_tag", ",", "tag", ",", "prev_type", ",", "type_", ")", ":", "\n", "# check if a chunk started between the previous and current word", "\n", "# arguments: previous and current chunk tags, previous and current types", "\n", "    ", "chunk_start", "=", "False", "\n", "\n", "if", "tag", "==", "'B'", ":", "chunk_start", "=", "True", "\n", "if", "tag", "==", "'S'", ":", "chunk_start", "=", "True", "\n", "\n", "if", "prev_tag", "==", "'E'", "and", "tag", "==", "'E'", ":", "chunk_start", "=", "True", "\n", "if", "prev_tag", "==", "'E'", "and", "tag", "==", "'I'", ":", "chunk_start", "=", "True", "\n", "if", "prev_tag", "==", "'S'", "and", "tag", "==", "'E'", ":", "chunk_start", "=", "True", "\n", "if", "prev_tag", "==", "'S'", "and", "tag", "==", "'I'", ":", "chunk_start", "=", "True", "\n", "if", "prev_tag", "==", "'O'", "and", "tag", "==", "'E'", ":", "chunk_start", "=", "True", "\n", "if", "prev_tag", "==", "'O'", "and", "tag", "==", "'I'", ":", "chunk_start", "=", "True", "\n", "\n", "if", "tag", "!=", "'O'", "and", "tag", "!=", "'.'", "and", "prev_type", "!=", "type_", ":", "\n", "        ", "chunk_start", "=", "True", "\n", "\n", "# these chunks are assumed to have length 1", "\n", "", "if", "tag", "==", "'['", ":", "chunk_start", "=", "True", "\n", "if", "tag", "==", "']'", ":", "chunk_start", "=", "True", "\n", "\n", "return", "chunk_start", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.main": [[349, 358], ["conll2002_metrics.parse_args", "conll2002_metrics.report", "conll2002_metrics.evaluate", "open", "conll2002_metrics.evaluate"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.parse_args", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.report", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.evaluate", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.evaluate"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", "argv", "[", "1", ":", "]", ")", "\n", "\n", "if", "args", ".", "file", "is", "None", ":", "\n", "        ", "counts", "=", "evaluate", "(", "sys", ".", "stdin", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "args", ".", "file", ")", "as", "f", ":", "\n", "            ", "counts", "=", "evaluate", "(", "f", ",", "args", ")", "\n", "", "", "report", "(", "counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.conll2002_measure": [[359, 362], ["conll2002_metrics.evaluate", "conll2002_metrics.report"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.evaluate", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.report"], ["", "def", "conll2002_measure", "(", "lines", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "counts", "=", "evaluate", "(", "lines", ",", "None", ")", "\n", "return", "report", "(", "counts", ")", "", "", ""]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF.__init__": [[14, 23], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.LogFormatter.__init__"], ["def", "__init__", "(", "self", ",", "num_tags", ")", ":", "\n", "        ", "super", "(", "CRF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_tags", "=", "num_tags", "\n", "self", ".", "transitions", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_tags", ",", "num_tags", ")", ")", "\n", "self", ".", "start_transitions", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_tags", ")", ")", "\n", "self", ".", "stop_transitions", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_tags", ")", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "transitions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF.forward": [[24, 30], ["crf.CRF._viterbi", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF._viterbi"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "# Shape checks", "\n", "        ", "if", "len", "(", "feats", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"feats must be 3-d got {}-d\"", ".", "format", "(", "feats", ".", "shape", ")", ")", "\n", "\n", "", "return", "self", ".", "_viterbi", "(", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF.loss": [[31, 60], ["crf.CRF._sequence_score", "crf.CRF._partition_function", "len", "ValueError", "len", "ValueError", "ValueError", "log_probability.mean"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF._sequence_score", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF._partition_function"], ["", "def", "loss", "(", "self", ",", "feats", ",", "tags", ")", ":", "\n", "        ", "\"\"\"\n        Computes negative log likelihood between features and tags.\n        Essentially difference between individual sequence scores and \n        sum of all possible sequence scores (partition function)\n        Parameters:\n            feats: Input features [batch size, sequence length, number of tags]\n            tags: Target tag indices [batch size, sequence length]. Should be between\n                    0 and num_tags\n        Returns:\n            Negative log likelihood [a scalar] \n        \"\"\"", "\n", "# Shape checks", "\n", "if", "len", "(", "feats", ".", "shape", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"feats must be 3-d got {}-d\"", ".", "format", "(", "feats", ".", "shape", ")", ")", "\n", "\n", "", "if", "len", "(", "tags", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'tags must be 2-d but got {}-d'", ".", "format", "(", "tags", ".", "shape", ")", ")", "\n", "\n", "", "if", "feats", ".", "shape", "[", ":", "2", "]", "!=", "tags", ".", "shape", ":", "\n", "            ", "raise", "ValueError", "(", "'First two dimensions of feats and tags must match '", ",", "feats", ".", "shape", ",", "tags", ".", "shape", ")", "\n", "\n", "", "sequence_score", "=", "self", ".", "_sequence_score", "(", "feats", ",", "tags", ")", "\n", "partition_function", "=", "self", ".", "_partition_function", "(", "feats", ")", "\n", "log_probability", "=", "sequence_score", "-", "partition_function", "\n", "\n", "# -ve of l()", "\n", "# Average across batch", "\n", "return", "-", "log_probability", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF._sequence_score": [[61, 90], ["feats.gather().squeeze().sum", "tags.unfold", "tags.unfold.permute().chunk", "crf.CRF.transitions[].squeeze().sum", "feats.gather().squeeze", "tags.unfold.permute", "crf.CRF.transitions[].squeeze", "feats.gather", "tags.unsqueeze"], "methods", ["None"], ["", "def", "_sequence_score", "(", "self", ",", "feats", ",", "tags", ")", ":", "\n", "        ", "\"\"\"\n        Parameters:\n            feats: Input features [batch size, sequence length, number of tags]\n            tags: Target tag indices [batch size, sequence length]. Should be between\n                    0 and num_tags\n        Returns: Sequence score of shape [batch size]\n        \"\"\"", "\n", "\n", "batch_size", "=", "feats", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute feature scores", "\n", "feat_score", "=", "feats", ".", "gather", "(", "2", ",", "tags", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# print(feat_score.size())", "\n", "\n", "# Compute transition scores", "\n", "# Unfold to get [from, to] tag index pairs", "\n", "tags_pairs", "=", "tags", ".", "unfold", "(", "1", ",", "2", ",", "1", ")", "\n", "\n", "# Use advanced indexing to pull out required transition scores", "\n", "indices", "=", "tags_pairs", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "chunk", "(", "2", ")", "\n", "trans_score", "=", "self", ".", "transitions", "[", "indices", "]", ".", "squeeze", "(", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# Compute start and stop scores", "\n", "start_score", "=", "self", ".", "start_transitions", "[", "tags", "[", ":", ",", "0", "]", "]", "\n", "stop_score", "=", "self", ".", "stop_transitions", "[", "tags", "[", ":", ",", "-", "1", "]", "]", "\n", "\n", "return", "feat_score", "+", "start_score", "+", "trans_score", "+", "stop_score", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF._partition_function": [[91, 114], ["crf.CRF.transitions.unsqueeze", "range", "crf.CRF._log_sum_exp", "ValueError", "crf.CRF.start_transitions.unsqueeze", "feats[].unsqueeze", "crf.CRF._log_sum_exp", "crf.CRF.stop_transitions.unsqueeze", "crf.CRF.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF._log_sum_exp", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF._log_sum_exp"], ["", "def", "_partition_function", "(", "self", ",", "feats", ")", ":", "\n", "        ", "\"\"\"\n        Computes the partitition function for CRF using the forward algorithm.\n        Basically calculate scores for all possible tag sequences for \n        the given feature vector sequence\n        Parameters:\n            feats: Input features [batch size, sequence length, number of tags]\n        Returns:\n            Total scores of shape [batch size]\n        \"\"\"", "\n", "_", ",", "seq_size", ",", "num_tags", "=", "feats", ".", "shape", "\n", "\n", "if", "self", ".", "num_tags", "!=", "num_tags", ":", "\n", "            ", "raise", "ValueError", "(", "'num_tags should be {} but got {}'", ".", "format", "(", "self", ".", "num_tags", ",", "num_tags", ")", ")", "\n", "\n", "", "a", "=", "feats", "[", ":", ",", "0", "]", "+", "self", ".", "start_transitions", ".", "unsqueeze", "(", "0", ")", "# [batch_size, num_tags]", "\n", "transitions", "=", "self", ".", "transitions", ".", "unsqueeze", "(", "0", ")", "# [1, num_tags, num_tags] from -> to", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "seq_size", ")", ":", "\n", "            ", "feat", "=", "feats", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", "# [batch_size, 1, num_tags]", "\n", "a", "=", "self", ".", "_log_sum_exp", "(", "a", ".", "unsqueeze", "(", "-", "1", ")", "+", "transitions", "+", "feat", ",", "1", ")", "# [batch_size, num_tags]", "\n", "\n", "", "return", "self", ".", "_log_sum_exp", "(", "a", "+", "self", ".", "stop_transitions", ".", "unsqueeze", "(", "0", ")", ",", "1", ")", "# [batch_size]", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF._viterbi": [[115, 149], ["crf.CRF.transitions.unsqueeze", "range", "reversed", "tags.reverse", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ValueError", "crf.CRF.start_transitions.unsqueeze", "paths.append", "idx.gather", "tags.append", "crf.CRF.stop_transitions.unsqueeze", "v.unsqueeze"], "methods", ["None"], ["", "def", "_viterbi", "(", "self", ",", "feats", ")", ":", "\n", "        ", "\"\"\"\n        Uses Viterbi algorithm to predict the best sequence\n        Parameters:\n            feats: Input features [batch size, sequence length, number of tags]\n        Returns: Best tag sequence [batch size, sequence length]\n        \"\"\"", "\n", "_", ",", "seq_size", ",", "num_tags", "=", "feats", ".", "shape", "\n", "\n", "if", "self", ".", "num_tags", "!=", "num_tags", ":", "\n", "            ", "raise", "ValueError", "(", "'num_tags should be {} but got {}'", ".", "format", "(", "self", ".", "num_tags", ",", "num_tags", ")", ")", "\n", "\n", "", "v", "=", "feats", "[", ":", ",", "0", "]", "+", "self", ".", "start_transitions", ".", "unsqueeze", "(", "0", ")", "# [batch_size, num_tags]", "\n", "transitions", "=", "self", ".", "transitions", ".", "unsqueeze", "(", "0", ")", "# [1, num_tags, num_tags] from -> to", "\n", "paths", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "seq_size", ")", ":", "\n", "            ", "feat", "=", "feats", "[", ":", ",", "i", "]", "# [batch_size, num_tags]", "\n", "v", ",", "idx", "=", "(", "v", ".", "unsqueeze", "(", "-", "1", ")", "+", "transitions", ")", ".", "max", "(", "1", ")", "# [batch_size, num_tags], [batch_size, num_tags]", "\n", "\n", "paths", ".", "append", "(", "idx", ")", "\n", "v", "=", "(", "v", "+", "feat", ")", "# [batch_size, num_tags]", "\n", "\n", "\n", "", "v", ",", "tag", "=", "(", "v", "+", "self", ".", "stop_transitions", ".", "unsqueeze", "(", "0", ")", ")", ".", "max", "(", "1", ",", "True", ")", "\n", "\n", "# Backtrack", "\n", "tags", "=", "[", "tag", "]", "\n", "for", "idx", "in", "reversed", "(", "paths", ")", ":", "\n", "            ", "tag", "=", "idx", ".", "gather", "(", "1", ",", "tag", ")", "\n", "tags", ".", "append", "(", "tag", ")", "\n", "\n", "", "tags", ".", "reverse", "(", ")", "\n", "return", "torch", ".", "cat", "(", "tags", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF._log_sum_exp": [[151, 157], ["logits.max", "max_val.unsqueeze"], "methods", ["None"], ["", "def", "_log_sum_exp", "(", "self", ",", "logits", ",", "dim", ")", ":", "\n", "        ", "\"\"\"\n        Computes log-sum-exp in a stable way\n        \"\"\"", "\n", "max_val", ",", "_", "=", "logits", ".", "max", "(", "dim", ")", "\n", "return", "max_val", "+", "(", "logits", "-", "max_val", ".", "unsqueeze", "(", "dim", ")", ")", ".", "exp", "(", ")", ".", "sum", "(", "dim", ")", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.DST_Trainer.__init__": [[15, 29], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.MSELoss", "torch.MSELoss", "dst_model.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "dst_model", ")", ":", "\n", "        ", "self", ".", "dst_model", "=", "dst_model", "\n", "self", ".", "lr", "=", "params", ".", "lr", "\n", "self", ".", "params", "=", "params", "\n", "\n", "# Adam optimizer", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "dst_model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "params", ".", "weight_decay", ")", "\n", "self", ".", "loss_fn1", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "loss_fn2", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "self", ".", "early_stop", "=", "params", ".", "early_stop", "\n", "self", ".", "no_improvement_num", "=", "0", "\n", "self", ".", "stop_training_flag", "=", "False", "\n", "self", ".", "best_avg_acc", "=", "0", "\n", "# self.best_goal_acc = 0", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.DST_Trainer.train_step": [[31, 64], ["trainer.DST_Trainer.dst_model.train", "trainer.DST_Trainer.dst_model", "trainer.DST_Trainer.optimizer.zero_grad", "trainer.DST_Trainer.loss_fn1", "trainer.DST_Trainer.backward", "trainer.DST_Trainer.optimizer.step", "trainer.DST_Trainer.optimizer.zero_grad", "trainer.DST_Trainer.loss_fn1", "trainer.DST_Trainer.backward", "trainer.DST_Trainer.optimizer.step", "trainer.DST_Trainer.optimizer.zero_grad", "trainer.DST_Trainer.loss_fn1", "trainer.DST_Trainer.backward", "trainer.DST_Trainer.optimizer.step", "trainer.DST_Trainer.optimizer.zero_grad", "trainer.DST_Trainer.loss_fn2", "trainer.DST_Trainer.backward", "trainer.DST_Trainer.optimizer.step", "trainer.DST_Trainer.item", "trainer.DST_Trainer.item", "trainer.DST_Trainer.item", "trainer.DST_Trainer.item"], "methods", ["None"], ["", "def", "train_step", "(", "self", ",", "utters", ",", "lengths", ",", "acts_request", ",", "acts_slot", ",", "acts_value", ",", "slot_name", ",", "slot_labels", ",", "request_labels", ")", ":", "\n", "        ", "self", ".", "dst_model", ".", "train", "(", ")", "\n", "\n", "food_value_pred", ",", "price_range_value_pred", ",", "area_value_pred", ",", "request_value_pred", "=", "self", ".", "dst_model", "(", "utters", ",", "lengths", ",", "acts_request", ",", "acts_slot", ",", "acts_value", ",", "slot_name", ",", "\"en\"", ")", "\n", "\n", "# slot value labels", "\n", "# slot_labels: (bsz, 3)", "\n", "food_label", "=", "slot_labels", "[", ":", ",", "0", "]", "# (bsz, 1)", "\n", "price_range_label", "=", "slot_labels", "[", ":", ",", "1", "]", "# (bsz, 1)", "\n", "area_label", "=", "slot_labels", "[", ":", ",", "2", "]", "# (bsz, 1)", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "food_pred_loss", "=", "self", ".", "loss_fn1", "(", "food_value_pred", ",", "food_label", ")", "\n", "food_pred_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "price_range_pred_loss", "=", "self", ".", "loss_fn1", "(", "price_range_value_pred", ",", "price_range_label", ")", "\n", "price_range_pred_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "area_pred_loss", "=", "self", ".", "loss_fn1", "(", "area_value_pred", ",", "area_label", ")", "\n", "area_pred_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# request label", "\n", "# request_labels: (bsz, 7)", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "request_pred_loss", "=", "self", ".", "loss_fn2", "(", "request_value_pred", ",", "request_labels", ")", "\n", "request_pred_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "food_pred_loss", ".", "item", "(", ")", ",", "price_range_pred_loss", ".", "item", "(", ")", ",", "area_pred_loss", ".", "item", "(", ")", ",", "request_pred_loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.DST_Trainer.evaluate": [[65, 186], ["trainer.DST_Trainer.dst_model.eval", "tqdm.tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.argmax", "numpy.concatenate", "numpy.argmax", "numpy.concatenate", "numpy.argmax", "numpy.concatenate", "range", "os.path.join", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "enumerate", "turn_slot_labels.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "turn_request_labels.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "numpy.concatenate.append", "trainer.DST_Trainer.dst_model", "dialogue_indices.extend", "numpy.argmax.append", "numpy.argmax.append", "numpy.argmax.append", "numpy.concatenate.append", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "utters.cuda", "lengths.cuda", "food_value_pred.detach().data.cpu().numpy", "price_range_value_pred.detach().data.cpu().numpy", "area_value_pred.detach().data.cpu().numpy", "request_value_pred.detach().data.cpu().numpy", "numpy.array_equal", "trainer.DST_Trainer.save_model", "logger.info", "turn_slot_labels.data.cpu().numpy.data.cpu().numpy.data.cpu", "turn_request_labels.data.cpu().numpy.data.cpu().numpy.data.cpu", "food_value_pred.detach().data.cpu", "price_range_value_pred.detach().data.cpu", "area_value_pred.detach().data.cpu", "request_value_pred.detach().data.cpu", "food_value_pred.detach", "price_range_value_pred.detach", "area_value_pred.detach", "request_value_pred.detach"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.save_model"], ["", "def", "evaluate", "(", "self", ",", "dataloader", ",", "isTestset", "=", "False", ",", "load_best_model", "=", "False", ")", ":", "\n", "        ", "if", "load_best_model", "==", "True", ":", "\n", "# load best model", "\n", "            ", "best_model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", ".", "dump_path", ",", "\"best_model.pth\"", ")", "\n", "logger", ".", "info", "(", "\"Loading best model from %s\"", "%", "best_model_path", ")", "\n", "best_model", "=", "torch", ".", "load", "(", "best_model_path", ")", "\n", "self", ".", "dst_model", "=", "best_model", "[", "\"dialog_state_tracker\"", "]", "\n", "\n", "", "self", ".", "dst_model", ".", "eval", "(", ")", "\n", "\n", "# collect predictions and labels", "\n", "y_food", ",", "y_price", ",", "y_area", ",", "y_request", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "pred_food", ",", "pred_price", ",", "pred_area", ",", "pred_request", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "dialogue_indices", "=", "[", "]", "\n", "pbar", "=", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "total", "=", "len", "(", "dataloader", ")", ")", "\n", "for", "i", ",", "(", "dialgue_idx", ",", "utters", ",", "lengths", ",", "acts_request", ",", "acts_slot", ",", "acts_values", ",", "slot_names", ",", "turn_slot_labels", ",", "turn_request_labels", ")", "in", "pbar", ":", "\n", "# slot labels", "\n", "            ", "turn_slot_labels", "=", "turn_slot_labels", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_food", ".", "append", "(", "turn_slot_labels", "[", ":", ",", "0", "]", ")", "\n", "y_price", ".", "append", "(", "turn_slot_labels", "[", ":", ",", "1", "]", ")", "\n", "y_area", ".", "append", "(", "turn_slot_labels", "[", ":", ",", "2", "]", ")", "\n", "# request labels", "\n", "turn_request_labels", "=", "turn_request_labels", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_request", ".", "append", "(", "turn_request_labels", ")", "\n", "utters", ",", "lengths", "=", "utters", ".", "cuda", "(", ")", ",", "lengths", ".", "cuda", "(", ")", "\n", "\n", "food_value_pred", ",", "price_range_value_pred", ",", "area_value_pred", ",", "request_value_pred", "=", "self", ".", "dst_model", "(", "utters", ",", "lengths", ",", "acts_request", ",", "acts_slot", ",", "acts_values", ",", "slot_names", ",", "self", ".", "params", ".", "trans_lang", ")", "\n", "\n", "# slot value prediction", "\n", "dialogue_indices", ".", "extend", "(", "dialgue_idx", ")", "\n", "pred_food", ".", "append", "(", "food_value_pred", ".", "detach", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pred_price", ".", "append", "(", "price_range_value_pred", ".", "detach", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pred_area", ".", "append", "(", "area_value_pred", ".", "detach", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pred_request", ".", "append", "(", "request_value_pred", ".", "detach", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# evaluate", "\n", "", "y_food", "=", "np", ".", "concatenate", "(", "y_food", ",", "axis", "=", "0", ")", "\n", "y_price", "=", "np", ".", "concatenate", "(", "y_price", ",", "axis", "=", "0", ")", "\n", "y_area", "=", "np", ".", "concatenate", "(", "y_area", ",", "axis", "=", "0", ")", "\n", "y_request", "=", "np", ".", "concatenate", "(", "y_request", ",", "axis", "=", "0", ")", "\n", "pred_food", "=", "np", ".", "concatenate", "(", "pred_food", ",", "axis", "=", "0", ")", "\n", "pred_food", "=", "np", ".", "argmax", "(", "pred_food", ",", "axis", "=", "1", ")", "\n", "pred_price", "=", "np", ".", "concatenate", "(", "pred_price", ",", "axis", "=", "0", ")", "\n", "pred_price", "=", "np", ".", "argmax", "(", "pred_price", ",", "axis", "=", "1", ")", "\n", "pred_area", "=", "np", ".", "concatenate", "(", "pred_area", ",", "axis", "=", "0", ")", "\n", "pred_area", "=", "np", ".", "argmax", "(", "pred_area", ",", "axis", "=", "1", ")", "\n", "\n", "pred_request", "=", "np", ".", "concatenate", "(", "pred_request", ",", "axis", "=", "0", ")", "\n", "pred_request", "=", "(", "pred_request", ">", "0.5", ")", "*", "1.0", "\n", "\n", "assert", "len", "(", "y_food", ")", "==", "len", "(", "y_price", ")", "==", "len", "(", "y_area", ")", "==", "len", "(", "y_request", ")", "==", "len", "(", "pred_food", ")", "==", "len", "(", "pred_price", ")", "==", "len", "(", "pred_area", ")", "==", "len", "(", "pred_request", ")", "==", "len", "(", "dialogue_indices", ")", "\n", "\n", "joint_goal_total", ",", "joint_goal_correct", "=", "0", ",", "0", "\n", "goal_total", ",", "goal_correct", "=", "0", ",", "0", "\n", "request_total", ",", "request_correct", "=", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "y_food", ")", ")", ":", "\n", "            ", "y_food_", "=", "y_food", "[", "i", "]", "\n", "y_price_", "=", "y_price", "[", "i", "]", "\n", "y_area_", "=", "y_area", "[", "i", "]", "\n", "\n", "dialog_idx", "=", "dialogue_indices", "[", "i", "]", "\n", "pred_food_", "=", "pred_food", "[", "i", "]", "\n", "pred_price_", "=", "pred_price", "[", "i", "]", "\n", "pred_area_", "=", "pred_area", "[", "i", "]", "\n", "\n", "if", "i", "==", "0", ":", "assert", "dialog_idx", "==", "0", "\n", "\n", "if", "dialog_idx", "!=", "0", ":", "\n", "                ", "if", "pre_pred_food_", "!=", "self", ".", "params", ".", "food_class", "-", "1", "and", "pred_food_", "==", "self", ".", "params", ".", "food_class", "-", "1", ":", "\n", "                    ", "pred_food_", "=", "pre_pred_food_", "\n", "\n", "", "if", "pre_pred_price_", "!=", "self", ".", "params", ".", "price_range_class", "-", "1", "and", "pred_price_", "==", "self", ".", "params", ".", "price_range_class", "-", "1", ":", "\n", "                    ", "pred_price_", "=", "pre_pred_price_", "\n", "\n", "", "if", "pre_pred_area_", "!=", "self", ".", "params", ".", "area_class", "-", "1", "and", "pred_area_", "==", "self", ".", "params", ".", "area_class", "-", "1", ":", "\n", "                    ", "pred_area_", "=", "pre_pred_area_", "\n", "\n", "", "", "joint_goal_total", "+=", "1", "\n", "if", "y_food_", "==", "pred_food_", "and", "y_price_", "==", "pred_price_", "and", "y_area_", "==", "pred_area_", ":", "\n", "                ", "joint_goal_correct", "+=", "1", "\n", "\n", "", "goal_total", "+=", "1", "\n", "if", "y_food_", "==", "pred_food_", ":", "\n", "                ", "goal_correct", "+=", "1", "\n", "\n", "", "goal_total", "+=", "1", "\n", "if", "y_price_", "==", "pred_price_", ":", "\n", "                ", "goal_correct", "+=", "1", "\n", "\n", "", "goal_total", "+=", "1", "\n", "if", "y_area_", "==", "pred_area_", ":", "\n", "                ", "goal_correct", "+=", "1", "\n", "\n", "", "pre_pred_food_", "=", "pred_food_", "\n", "pre_pred_price_", "=", "pred_price_", "\n", "pre_pred_area_", "=", "pred_area_", "\n", "\n", "y_request_", "=", "y_request", "[", "i", "]", "\n", "pred_request_", "=", "pred_request", "[", "i", "]", "\n", "request_total", "+=", "1", "\n", "if", "np", ".", "array_equal", "(", "y_request_", ",", "pred_request_", ")", "==", "True", ":", "\n", "                ", "request_correct", "+=", "1", "\n", "\n", "", "", "joint_goal_acc", "=", "joint_goal_correct", "*", "1.0", "/", "joint_goal_total", "\n", "goal_acc", "=", "goal_correct", "*", "1.0", "/", "goal_total", "\n", "request_acc", "=", "request_correct", "*", "1.0", "/", "request_total", "\n", "avg_acc", "=", "(", "joint_goal_acc", "+", "request_acc", ")", "/", "2", "\n", "\n", "if", "isTestset", "==", "False", ":", "\n", "            ", "if", "avg_acc", ">", "self", ".", "best_avg_acc", ":", "\n", "                ", "self", ".", "best_avg_acc", "=", "avg_acc", "\n", "self", ".", "no_improvement_num", "=", "0", "\n", "self", ".", "save_model", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "no_improvement_num", "+=", "1", "\n", "logger", ".", "info", "(", "\"No better model found (%d/%d)\"", "%", "(", "self", ".", "no_improvement_num", ",", "self", ".", "early_stop", ")", ")", "\n", "\n", "", "", "if", "self", ".", "no_improvement_num", ">=", "self", ".", "early_stop", ":", "\n", "            ", "self", ".", "stop_training_flag", "=", "True", "\n", "\n", "", "return", "goal_acc", ",", "request_acc", ",", "joint_goal_acc", ",", "avg_acc", ",", "self", ".", "stop_training_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.DST_Trainer.save_model": [[187, 197], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "logger.info"], "methods", ["None"], ["", "def", "save_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        save the best model (achieve best f1 on slot prediction)\n        \"\"\"", "\n", "saved_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", ".", "dump_path", ",", "\"best_model.pth\"", ")", "\n", "torch", ".", "save", "(", "{", "\n", "\"dialog_state_tracker\"", ":", "self", ".", "dst_model", "\n", "}", ",", "saved_path", ")", "\n", "\n", "logger", ".", "info", "(", "\"Best model has been saved to %s\"", "%", "saved_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.__init__": [[202, 224], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "trainer.NLU_Trainer.lstm.parameters", "trainer.NLU_Trainer.intent_predictor.parameters", "trainer.NLU_Trainer.slot_predictor.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lstm", ",", "intent_predictor", ",", "slot_predictor", ")", ":", "\n", "        ", "self", ".", "lstm", "=", "lstm", "\n", "self", ".", "intent_predictor", "=", "intent_predictor", "\n", "self", ".", "slot_predictor", "=", "slot_predictor", "\n", "self", ".", "lr", "=", "params", ".", "lr", "\n", "self", ".", "params", "=", "params", "\n", "\n", "model", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "lstm", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "intent_predictor", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "slot_predictor", ".", "parameters", "(", ")", "}", "\n", "]", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ",", "lr", "=", "self", ".", "lr", ")", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "self", ".", "early_stop", "=", "params", ".", "early_stop", "\n", "self", ".", "no_improvement_num", "=", "0", "\n", "self", ".", "best_intent_acc", "=", "0", "\n", "self", ".", "best_slot_f1", "=", "0", "\n", "\n", "self", ".", "stop_training_flag", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.train_step": [[225, 247], ["trainer.NLU_Trainer.lstm.train", "trainer.NLU_Trainer.intent_predictor.train", "trainer.NLU_Trainer.slot_predictor.train", "trainer.NLU_Trainer.lstm", "trainer.NLU_Trainer.intent_predictor", "trainer.NLU_Trainer.optimizer.zero_grad", "trainer.NLU_Trainer.loss_fn", "trainer.NLU_Trainer.backward", "trainer.NLU_Trainer.optimizer.step", "trainer.NLU_Trainer.slot_predictor", "trainer.NLU_Trainer.slot_predictor.crf_loss", "trainer.NLU_Trainer.optimizer.zero_grad", "trainer.NLU_Trainer.backward", "trainer.NLU_Trainer.optimizer.step", "trainer.NLU_Trainer.item", "trainer.NLU_Trainer.item"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.SlotPredictor.crf_loss"], ["", "def", "train_step", "(", "self", ",", "X", ",", "lengths", ",", "y1", ",", "y2", ")", ":", "\n", "        ", "self", ".", "lstm", ".", "train", "(", ")", "\n", "self", ".", "intent_predictor", ".", "train", "(", ")", "\n", "self", ".", "slot_predictor", ".", "train", "(", ")", "\n", "\n", "lstm_layer", "=", "self", ".", "lstm", "(", "X", ",", "\"en\"", ")", "\n", "intent_prediction", "=", "self", ".", "intent_predictor", "(", "lstm_layer", ",", "lengths", ")", "\n", "\n", "# train IntentPredictor", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "intent_loss", "=", "self", ".", "loss_fn", "(", "intent_prediction", ",", "y1", ")", "\n", "intent_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# train SlotPredictor", "\n", "slot_prediction", "=", "self", ".", "slot_predictor", "(", "lstm_layer", ")", "\n", "slot_loss", "=", "self", ".", "slot_predictor", ".", "crf_loss", "(", "slot_prediction", ",", "lengths", ",", "y2", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "slot_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "intent_loss", ".", "item", "(", ")", ",", "slot_loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.evaluate": [[248, 314], ["trainer.NLU_Trainer.lstm.eval", "trainer.NLU_Trainer.intent_predictor.eval", "trainer.NLU_Trainer.slot_predictor.eval", "tqdm.tqdm.tqdm", "numpy.concatenate", "numpy.argmax", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "sklearn.metrics.accuracy_score", "list", "list", "zip", "conll2002_measure", "os.path.join", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "enumerate", "numpy.concatenate.append", "list.extend", "trainer.NLU_Trainer.lstm", "trainer.NLU_Trainer.intent_predictor", "numpy.argmax.append", "trainer.NLU_Trainer.slot_predictor", "trainer.NLU_Trainer.slot_predictor.crf_decode", "list.extend", "lines.append", "len", "y1.data.cpu().numpy", "X.cuda", "lengths.cuda", "trainer.NLU_Trainer.data.cpu().numpy", "trainer.NLU_Trainer.save_model", "logger.info", "y1.data.cpu", "trainer.NLU_Trainer.data.cpu"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.conll2002_metrics.conll2002_measure", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.SlotPredictor.crf_decode", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.save_model"], ["", "def", "evaluate", "(", "self", ",", "dataloader", ",", "istestset", "=", "False", ",", "load_best_model", "=", "False", ")", ":", "\n", "        ", "if", "load_best_model", "==", "True", ":", "\n", "# load best model", "\n", "            ", "best_model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", ".", "dump_path", ",", "\"best_model.pth\"", ")", "\n", "logger", ".", "info", "(", "\"Loading best model from %s\"", "%", "best_model_path", ")", "\n", "best_model", "=", "torch", ".", "load", "(", "best_model_path", ")", "\n", "self", ".", "lstm", "=", "best_model", "[", "\"text_encoder\"", "]", "\n", "self", ".", "intent_predictor", "=", "best_model", "[", "\"intent_predictor\"", "]", "\n", "self", ".", "slot_predictor", "=", "best_model", "[", "\"slot_predictor\"", "]", "\n", "\n", "", "self", ".", "lstm", ".", "eval", "(", ")", "\n", "self", ".", "intent_predictor", ".", "eval", "(", ")", "\n", "self", ".", "slot_predictor", ".", "eval", "(", ")", "\n", "intent_pred", ",", "slot_pred", "=", "[", "]", ",", "[", "]", "\n", "y1_list", ",", "y2_list", "=", "[", "]", ",", "[", "]", "\n", "pbar", "=", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "total", "=", "len", "(", "dataloader", ")", ")", "\n", "for", "i", ",", "(", "X", ",", "lengths", ",", "y1", ",", "y2", ")", "in", "pbar", ":", "\n", "            ", "y1_list", ".", "append", "(", "y1", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "y2_list", ".", "extend", "(", "y2", ")", "# y2 is a list", "\n", "X", ",", "lengths", "=", "X", ".", "cuda", "(", ")", ",", "lengths", ".", "cuda", "(", ")", "\n", "\n", "lstm_layer", "=", "self", ".", "lstm", "(", "X", ",", "self", ".", "params", ".", "trans_lang", ")", "\n", "intent_prediction", "=", "self", ".", "intent_predictor", "(", "lstm_layer", ",", "lengths", ")", "\n", "# for intent_pred", "\n", "intent_pred", ".", "append", "(", "intent_prediction", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# for slot_pred", "\n", "slot_prediction", "=", "self", ".", "slot_predictor", "(", "lstm_layer", ")", "\n", "slot_pred_batch", "=", "self", ".", "slot_predictor", ".", "crf_decode", "(", "slot_prediction", ",", "lengths", ")", "\n", "slot_pred", ".", "extend", "(", "slot_pred_batch", ")", "\n", "\n", "# concatenation", "\n", "", "intent_pred", "=", "np", ".", "concatenate", "(", "intent_pred", ",", "axis", "=", "0", ")", "\n", "intent_pred", "=", "np", ".", "argmax", "(", "intent_pred", ",", "axis", "=", "1", ")", "\n", "slot_pred", "=", "np", ".", "concatenate", "(", "slot_pred", ",", "axis", "=", "0", ")", "\n", "y1_list", "=", "np", ".", "concatenate", "(", "y1_list", ",", "axis", "=", "0", ")", "\n", "y2_list", "=", "np", ".", "concatenate", "(", "y2_list", ",", "axis", "=", "0", ")", "\n", "intent_acc", "=", "accuracy_score", "(", "y1_list", ",", "intent_pred", ")", "\n", "\n", "# calcuate f1 score", "\n", "# slot_f1 = f1_score(y2_list, slot_pred, average=\"macro\")", "\n", "y2_list", "=", "list", "(", "y2_list", ")", "\n", "slot_pred", "=", "list", "(", "slot_pred", ")", "\n", "lines", "=", "[", "]", "\n", "for", "pred_index", ",", "gold_index", "in", "zip", "(", "slot_pred", ",", "y2_list", ")", ":", "\n", "            ", "pred_slot", "=", "index2slot", "[", "pred_index", "]", "\n", "gold_slot", "=", "index2slot", "[", "gold_index", "]", "\n", "lines", ".", "append", "(", "\"w\"", "+", "\" \"", "+", "pred_slot", "+", "\" \"", "+", "gold_slot", ")", "\n", "", "results", "=", "conll2002_measure", "(", "lines", ")", "\n", "slot_f1", "=", "results", "[", "\"fb1\"", "]", "\n", "\n", "if", "istestset", "==", "False", ":", "\n", "            ", "if", "intent_acc", ">", "self", ".", "best_intent_acc", ":", "\n", "                ", "self", ".", "best_intent_acc", "=", "intent_acc", "\n", "", "if", "slot_f1", ">", "self", ".", "best_slot_f1", ":", "\n", "                ", "self", ".", "best_slot_f1", "=", "slot_f1", "\n", "self", ".", "no_improvement_num", "=", "0", "\n", "# only when best slot_f1 is found, we save the model", "\n", "self", ".", "save_model", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "no_improvement_num", "+=", "1", "\n", "logger", ".", "info", "(", "\"No better model found (%d/%d)\"", "%", "(", "self", ".", "no_improvement_num", ",", "self", ".", "early_stop", ")", ")", "\n", "\n", "", "", "if", "self", ".", "no_improvement_num", ">=", "self", ".", "early_stop", ":", "\n", "            ", "self", ".", "stop_training_flag", "=", "True", "\n", "\n", "", "return", "intent_acc", ",", "slot_f1", ",", "self", ".", "stop_training_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.trainer.NLU_Trainer.save_model": [[315, 327], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "logger.info"], "methods", ["None"], ["", "def", "save_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        save the best model (achieve best f1 on slot prediction)\n        \"\"\"", "\n", "saved_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", ".", "dump_path", ",", "\"best_model.pth\"", ")", "\n", "torch", ".", "save", "(", "{", "\n", "\"text_encoder\"", ":", "self", ".", "lstm", ",", "\n", "\"intent_predictor\"", ":", "self", ".", "intent_predictor", ",", "\n", "\"slot_predictor\"", ":", "self", ".", "slot_predictor", "\n", "}", ",", "saved_path", ")", "\n", "\n", "logger", ".", "info", "(", "\"Best model has been saved to %s\"", "%", "saved_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.Lstm_nlu.__init__": [[13, 40], ["torch.nn.Module.__init__", "torch.nn.Embedding", "src.utils.load_embedding", "nlu_model.Lstm_nlu.embedding_en.weight.data.copy_", "torch.nn.Embedding", "src.utils.load_embedding", "nlu_model.Lstm_nlu.embedding_trans.weight.data.copy_", "torch.nn.LSTM", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.LogFormatter.__init__", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.load_embedding", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.load_embedding"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "vocab_en", ",", "vocab_trans", ")", ":", "\n", "        ", "super", "(", "Lstm_nlu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_layer", "=", "params", ".", "n_layer", "\n", "self", ".", "emb_dim", "=", "params", ".", "emb_dim", "\n", "self", ".", "hidden_dim", "=", "params", ".", "hidden_dim", "\n", "self", ".", "dropout", "=", "params", ".", "dropout", "\n", "self", ".", "bidirection", "=", "params", ".", "bidirection", "\n", "\n", "self", ".", "emb_file_en", "=", "params", ".", "emb_file_en", "\n", "self", ".", "emb_file_trans", "=", "params", ".", "emb_file_trans", "\n", "self", ".", "n_words_en", "=", "vocab_en", ".", "n_words", "\n", "self", ".", "n_words_trans", "=", "vocab_trans", ".", "n_words", "\n", "\n", "# English embedding layer", "\n", "self", ".", "embedding_en", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words_en", ",", "self", ".", "emb_dim", ",", "padding_idx", "=", "PAD_INDEX", ")", "\n", "# load embedding", "\n", "embedding_en", "=", "load_embedding", "(", "self", ".", "emb_file_en", ")", "\n", "self", ".", "embedding_en", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "FloatTensor", "(", "embedding_en", ")", ")", "\n", "\n", "# Transfer language embeddings layer", "\n", "self", ".", "embedding_trans", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words_trans", ",", "self", ".", "emb_dim", ",", "padding_idx", "=", "PAD_INDEX", ")", "\n", "# load embedding", "\n", "embedding_trans", "=", "load_embedding", "(", "self", ".", "emb_file_trans", ")", "\n", "self", ".", "embedding_trans", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "FloatTensor", "(", "embedding_trans", ")", ")", "\n", "\n", "# LSTM layers", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "self", ".", "emb_dim", ",", "self", ".", "hidden_dim", ",", "num_layers", "=", "self", ".", "n_layer", ",", "dropout", "=", "self", ".", "dropout", ",", "bidirectional", "=", "self", ".", "bidirection", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.Lstm_nlu.forward": [[41, 57], ["torch.nn.functional.dropout.detach", "torch.nn.functional.dropout", "nlu_model.Lstm_nlu.lstm", "nlu_model.Lstm_nlu.embedding_en", "nlu_model.Lstm_nlu.embedding_trans"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "lang", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            x: text (bsz, seq_len)\n        Output:\n            lstm_output: (bsz, seq_len, hidden_dim)\n        \"\"\"", "\n", "embeddings", "=", "self", ".", "embedding_en", "(", "x", ")", "if", "lang", "==", "\"en\"", "else", "self", ".", "embedding_trans", "(", "x", ")", "\n", "embeddings", "=", "embeddings", ".", "detach", "(", ")", "\n", "embeddings", "=", "F", ".", "dropout", "(", "embeddings", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# LSTM", "\n", "# lstm_output (batch_first): (bsz, seq_len, hidden_dim)", "\n", "lstm_output", ",", "(", "_", ",", "_", ")", "=", "self", ".", "lstm", "(", "embeddings", ")", "\n", "\n", "return", "lstm_output", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.IntentPredictor.__init__": [[60, 67], ["torch.nn.Module.__init__", "src.dst_model.Attention", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.LogFormatter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "IntentPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_intent", "=", "params", ".", "num_intent", "\n", "self", ".", "attention_size", "=", "params", ".", "hidden_dim", "*", "2", "if", "params", ".", "bidirection", "else", "params", ".", "hidden_dim", "\n", "self", ".", "atten_layer", "=", "Attention", "(", "attention_size", "=", "self", ".", "attention_size", ",", "return_attention", "=", "False", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "attention_size", ",", "self", ".", "num_intent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.IntentPredictor.forward": [[68, 80], ["nlu_model.IntentPredictor.atten_layer", "nlu_model.IntentPredictor.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "lengths", ")", ":", "\n", "        ", "\"\"\" forward pass\n        Inputs:\n            inputs: lstm hidden layer (bsz, seq_len, hidden_dim)\n            lengths: lengths of x (bsz, )\n        Output:\n            prediction: Intent prediction (bsz, num_intent)\n        \"\"\"", "\n", "atten_layer", ",", "_", "=", "self", ".", "atten_layer", "(", "inputs", ",", "lengths", ")", "\n", "prediction", "=", "self", ".", "linear", "(", "atten_layer", ")", "\n", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.SlotPredictor.__init__": [[82, 89], ["torch.nn.Module.__init__", "torch.nn.Linear", "CRF"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.LogFormatter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "SlotPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_slot", "=", "params", ".", "num_slot", "\n", "self", ".", "hidden_dim", "=", "params", ".", "hidden_dim", "*", "2", "if", "params", ".", "bidirection", "else", "params", ".", "hidden_dim", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "num_slot", ")", "\n", "self", ".", "crf_layer", "=", "CRF", "(", "self", ".", "num_slot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.SlotPredictor.forward": [[90, 99], ["nlu_model.SlotPredictor.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" forward pass\n        Input:\n            inputs: lstm hidden layer (bsz, seq_len, hidden_dim)\n        Output:\n            prediction: slot prediction (bsz, seq_len, num_slot)\n        \"\"\"", "\n", "prediction", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.SlotPredictor.out_vae_layer": [[100, 104], ["nlu_model.SlotPredictor.vae_layer"], "methods", ["None"], ["", "def", "out_vae_layer", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "assert", "self", ".", "vae", "==", "True", "\n", "vae_layer", ",", "_", "=", "self", ".", "vae_layer", "(", "inputs", ")", "\n", "return", "vae_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.SlotPredictor.crf_loss": [[105, 119], ["nlu_model.SlotPredictor.pad_label", "nlu_model.SlotPredictor.make_mask", "nlu_model.SlotPredictor.crf_layer.loss"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.SlotPredictor.pad_label", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.SlotPredictor.make_mask", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.crf.CRF.loss"], ["", "def", "crf_loss", "(", "self", ",", "inputs", ",", "lengths", ",", "y", ")", ":", "\n", "        ", "\"\"\" create crf loss\n        Input:\n            inputs: output of SlotPredictor (bsz, seq_len, num_slot)\n            lengths: lengths of x (bsz, )\n            y: label of slot value (bsz, seq_len)\n        Ouput:\n            crf_loss: loss of crf\n        \"\"\"", "\n", "padded_y", "=", "self", ".", "pad_label", "(", "lengths", ",", "y", ")", "\n", "mask", "=", "self", ".", "make_mask", "(", "lengths", ")", "\n", "crf_loss", "=", "self", ".", "crf_layer", ".", "loss", "(", "inputs", ",", "padded_y", ")", "\n", "\n", "return", "crf_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.SlotPredictor.crf_decode": [[120, 133], ["nlu_model.SlotPredictor.make_mask", "nlu_model.SlotPredictor.crf_layer", "prediction[].data.cpu().numpy", "enumerate", "prediction[].data.cpu"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.SlotPredictor.make_mask"], ["", "def", "crf_decode", "(", "self", ",", "inputs", ",", "lengths", ")", ":", "\n", "        ", "\"\"\" crf decode\n        Input:\n            inputs: output of SlotPredictor (bsz, seq_len, num_slot)\n            lengths: lengths of x (bsz, )\n        Ouput:\n            crf_loss: loss of crf\n        \"\"\"", "\n", "mask", "=", "self", ".", "make_mask", "(", "lengths", ")", "\n", "prediction", "=", "self", ".", "crf_layer", "(", "inputs", ")", "\n", "prediction", "=", "[", "prediction", "[", "i", ",", ":", "length", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "i", ",", "length", "in", "enumerate", "(", "lengths", ")", "]", "\n", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.SlotPredictor.make_mask": [[134, 143], ["len", "torch.max", "torch.LongTensor().fill_", "range", "mask.cuda.cuda.cuda", "torch.LongTensor"], "methods", ["None"], ["", "def", "make_mask", "(", "self", ",", "lengths", ")", ":", "\n", "        ", "bsz", "=", "len", "(", "lengths", ")", "\n", "max_len", "=", "torch", ".", "max", "(", "lengths", ")", "\n", "mask", "=", "torch", ".", "LongTensor", "(", "bsz", ",", "max_len", ")", ".", "fill_", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "length", "=", "lengths", "[", "i", "]", "\n", "mask", "[", "i", ",", "length", ":", "max_len", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "cuda", "(", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_model.SlotPredictor.pad_label": [[144, 155], ["len", "torch.max", "torch.LongTensor().fill_", "range", "padded_y.cuda.cuda.cuda", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "pad_label", "(", "self", ",", "lengths", ",", "y", ")", ":", "\n", "        ", "bsz", "=", "len", "(", "lengths", ")", "\n", "max_len", "=", "torch", ".", "max", "(", "lengths", ")", "\n", "padded_y", "=", "torch", ".", "LongTensor", "(", "bsz", ",", "max_len", ")", ".", "fill_", "(", "SLOT_PAD", ")", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "length", "=", "lengths", "[", "i", "]", "\n", "y_i", "=", "y", "[", "i", "]", "\n", "padded_y", "[", "i", ",", "0", ":", "length", "]", "=", "torch", ".", "LongTensor", "(", "y_i", ")", "\n", "\n", "", "padded_y", "=", "padded_y", ".", "cuda", "(", ")", "\n", "return", "padded_y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_loader.Dataset.__init__": [[13, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "X", "=", "data", "[", "\"text\"", "]", "\n", "self", ".", "y1", "=", "data", "[", "\"intent\"", "]", "\n", "self", ".", "y2", "=", "data", "[", "\"slot\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_loader.Dataset.__getitem__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "X", "[", "index", "]", ",", "self", ".", "y1", "[", "index", "]", ",", "self", ".", "y2", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_loader.Dataset.__len__": [[21, 23], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_loader.collate_fn": [[24, 35], ["zip", "max", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "enumerate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len"], "function", ["None"], ["", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "    ", "X", ",", "y1", ",", "y2", "=", "zip", "(", "*", "data", ")", "\n", "lengths", "=", "[", "len", "(", "bs_x", ")", "for", "bs_x", "in", "X", "]", "\n", "max_lengths", "=", "max", "(", "lengths", ")", "\n", "padded_seqs", "=", "torch", ".", "LongTensor", "(", "len", "(", "X", ")", ",", "max_lengths", ")", ".", "fill_", "(", "PAD_INDEX", ")", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "X", ")", ":", "\n", "        ", "length", "=", "lengths", "[", "i", "]", "\n", "padded_seqs", "[", "i", ",", ":", "length", "]", "=", "torch", ".", "LongTensor", "(", "seq", ")", "\n", "", "lengths", "=", "torch", ".", "LongTensor", "(", "lengths", ")", "\n", "y1", "=", "torch", ".", "LongTensor", "(", "y1", ")", "\n", "return", "padded_seqs", ",", "lengths", ",", "y1", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_loader.load_data": [[36, 50], ["src.preprocess.preprocess_nlu_data", "src.preprocess.preprocess_nlu_data", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.preprocess_nlu_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.preprocess_nlu_data"], ["", "def", "load_data", "(", "params", ")", ":", "\n", "    ", "data", "=", "{", "\"en\"", ":", "{", "}", ",", "\"es\"", ":", "{", "}", ",", "\"th\"", ":", "{", "}", "}", "\n", "if", "params", ".", "mix_train", "==", "True", ":", "\n", "# load mapping for mix training", "\n", "        ", "with", "open", "(", "params", ".", "mapping_for_mix", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "token_mapping", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "token_mapping", "=", "None", "\n", "# load English data", "\n", "", "preprocess_nlu_data", "(", "data", ",", "\"en\"", ",", "params", ".", "clean_txt", ",", "token_mapping", "=", "token_mapping", ",", "vocab_path", "=", "params", ".", "vocab_path_en", ")", "\n", "# load Transfer language data", "\n", "preprocess_nlu_data", "(", "data", ",", "params", ".", "trans_lang", ",", "params", ".", "clean_txt", ",", "vocab_path", "=", "params", ".", "vocab_path_trans", ",", "filtered", "=", "params", ".", "filtered", ",", "filtered_scale", "=", "params", ".", "filter_scale", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.nlu_loader.get_nlu_dataloader": [[51, 63], ["nlu_loader.load_data", "nlu_loader.Dataset", "nlu_loader.Dataset", "nlu_loader.Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_loader.load_data"], ["", "def", "get_nlu_dataloader", "(", "params", ")", ":", "\n", "    ", "data", "=", "load_data", "(", "params", ")", "\n", "\n", "dataset_tr", "=", "Dataset", "(", "data", "[", "\"en\"", "]", "[", "\"train\"", "]", ")", "\n", "dataset_val", "=", "Dataset", "(", "data", "[", "params", ".", "trans_lang", "]", "[", "\"eval\"", "]", ")", "\n", "dataset_test", "=", "Dataset", "(", "data", "[", "params", ".", "trans_lang", "]", "[", "\"test\"", "]", ")", "\n", "\n", "dataloader_tr", "=", "DataLoader", "(", "dataset", "=", "dataset_tr", ",", "batch_size", "=", "params", ".", "batch_size", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "dataloader_val", "=", "DataLoader", "(", "dataset", "=", "dataset_val", ",", "batch_size", "=", "params", ".", "batch_size", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_fn", ")", "\n", "dataloader_test", "=", "DataLoader", "(", "dataset", "=", "dataset_test", ",", "batch_size", "=", "params", ".", "batch_size", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "return", "dataloader_tr", ",", "dataloader_val", ",", "dataloader_test", ",", "data", "[", "\"en\"", "]", "[", "\"vocab\"", "]", ",", "data", "[", "params", ".", "trans_lang", "]", "[", "\"vocab\"", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_model.Lstm.__init__": [[12, 38], ["torch.nn.Module.__init__", "torch.nn.Embedding", "src.utils.load_embedding", "dst_model.Lstm.embedding_en.weight.data.copy_", "torch.nn.Embedding", "src.utils.load_embedding", "dst_model.Lstm.embedding_trans.weight.data.copy_", "torch.nn.LSTM", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.LogFormatter.__init__", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.load_embedding", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.load_embedding"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "vocab_en", ",", "vocab_trans", ")", ":", "\n", "        ", "super", "(", "Lstm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dim", "=", "params", ".", "emb_dim", "\n", "self", ".", "hidden_dim", "=", "params", ".", "hidden_dim", "\n", "self", ".", "dropout", "=", "params", ".", "dropout", "\n", "self", ".", "bidirection", "=", "params", ".", "bidirection", "\n", "\n", "self", ".", "emb_file_en", "=", "params", ".", "emb_file_en", "\n", "self", ".", "emb_file_trans", "=", "params", ".", "emb_file_trans", "\n", "self", ".", "n_words_en", "=", "vocab_en", ".", "n_words", "\n", "self", ".", "n_words_trans", "=", "vocab_trans", ".", "n_words", "\n", "\n", "# English embedding layer", "\n", "self", ".", "embedding_en", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words_en", ",", "self", ".", "emb_dim", ",", "padding_idx", "=", "PAD_INDEX", ")", "\n", "# load English embedding", "\n", "embedding_en", "=", "load_embedding", "(", "self", ".", "emb_file_en", ")", "\n", "self", ".", "embedding_en", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "FloatTensor", "(", "embedding_en", ")", ")", "\n", "\n", "# Transfer language embeddings", "\n", "self", ".", "embedding_trans", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words_trans", ",", "self", ".", "emb_dim", ",", "padding_idx", "=", "PAD_INDEX", ")", "\n", "# load transfer language embedding", "\n", "embedding_trans", "=", "load_embedding", "(", "self", ".", "emb_file_trans", ")", "\n", "self", ".", "embedding_trans", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "FloatTensor", "(", "embedding_trans", ")", ")", "\n", "\n", "# LSTM layers", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "self", ".", "emb_dim", ",", "self", ".", "hidden_dim", ",", "dropout", "=", "self", ".", "dropout", ",", "bidirectional", "=", "self", ".", "bidirection", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_model.Lstm.forward": [[39, 54], ["torch.nn.functional.dropout.detach", "torch.nn.functional.dropout", "dst_model.Lstm.lstm", "dst_model.Lstm.embedding_en", "dst_model.Lstm.embedding_trans"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "lang", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            x: text (bsz, seq_len)\n        Output:\n            last_layer: last layer of lstm (bsz, seq_len, hidden_dim)\n        \"\"\"", "\n", "embeddings", "=", "self", ".", "embedding_en", "(", "x", ")", "if", "lang", "==", "\"en\"", "else", "self", ".", "embedding_trans", "(", "x", ")", "\n", "embeddings", "=", "embeddings", ".", "detach", "(", ")", "\n", "embeddings", "=", "F", ".", "dropout", "(", "embeddings", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# lstm_output (batch_first): (bsz, seq_len, hidden_dim)", "\n", "lstm_output", ",", "(", "_", ",", "_", ")", "=", "self", ".", "lstm", "(", "embeddings", ")", "\n", "\n", "return", "lstm_output", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_model.Attention.__init__": [[60, 72], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.init.uniform", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.LogFormatter.__init__"], ["def", "__init__", "(", "self", ",", "attention_size", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "\"\"\" Initialize the attention layer\n        # Arguments:\n            attention_size: Size of the attention vector.\n            return_attention: If true, output will include the weight for each input token\n                              used for the prediction\n        \"\"\"", "\n", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "return_attention", "=", "return_attention", "\n", "self", ".", "attention_size", "=", "attention_size", "\n", "self", ".", "attention_vector", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "attention_size", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "uniform", "(", "self", ".", "attention_vector", ".", "data", ",", "-", "0.01", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_model.Attention.__repr__": [[73, 76], ["s.format"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.LogFormatter.format"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "'{name}({attention_size}, return attention={return_attention})'", "\n", "return", "s", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_model.Attention.forward": [[77, 107], ["inputs.matmul", "unnorm_ai.size", "torch.arange().unsqueeze", "idxes.cuda.cuda.cuda", "torch.autograd.Variable", "masked_weights.sum", "masked_weights.div", "torch.mul", "torch.mul.sum", "masked_weights.div.unsqueeze().expand_as", "torch.arange", "inputs.matmul.max", "masked_weights.div.unsqueeze", "torch.LongTensor", "input_lengths.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "input_lengths", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "\"\"\" Forward pass.\n        # Arguments:\n            inputs (Torch.Variable): Tensor of input sequences\n            input_lengths (torch.LongTensor): Lengths of the sequences\n        # Return:\n            Tuple with (representations and attentions if self.return_attention else None).\n        \"\"\"", "\n", "logits", "=", "inputs", ".", "matmul", "(", "self", ".", "attention_vector", ")", "\n", "unnorm_ai", "=", "(", "logits", "-", "logits", ".", "max", "(", ")", ")", ".", "exp", "(", ")", "\n", "# Compute a mask for the attention on the padded sequences", "\n", "# See e.g. https://discuss.pytorch.org/t/self-attention-on-words-and-masking/5671/5", "\n", "max_len", "=", "unnorm_ai", ".", "size", "(", "1", ")", "\n", "\n", "idxes", "=", "torch", ".", "arange", "(", "\n", "0", ",", "max_len", ",", "out", "=", "torch", ".", "LongTensor", "(", "max_len", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "idxes", "=", "idxes", ".", "cuda", "(", ")", "\n", "mask", "=", "Variable", "(", "(", "idxes", "<", "input_lengths", ".", "unsqueeze", "(", "1", ")", ")", ".", "float", "(", ")", ")", "\n", "\n", "# apply mask and renormalize attention scores (weights)", "\n", "masked_weights", "=", "unnorm_ai", "*", "mask", "\n", "att_sums", "=", "masked_weights", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# sums per sequence", "\n", "attentions", "=", "masked_weights", ".", "div", "(", "att_sums", ")", "\n", "\n", "# apply attention weights", "\n", "weighted", "=", "torch", ".", "mul", "(", "\n", "inputs", ",", "attentions", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "inputs", ")", ")", "\n", "# get the final fixed vector representations of the sentences", "\n", "representations", "=", "weighted", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "(", "representations", ",", "attentions", "if", "self", ".", "return_attention", "or", "return_attention", "else", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_model.SlotGate.__init__": [[111, 122], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.init.uniform", "torch.nn.parameter.Parameter", "torch.nn.init.uniform", "torch.nn.Sigmoid", "src.utils.load_ontology_embedding", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.LogFormatter.__init__", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.load_ontology_embedding"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "SlotGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dim", "=", "params", ".", "emb_dim", "\n", "self", ".", "gate_size", "=", "params", ".", "gate_size", "# gate_size should be the same as embedding dimension", "\n", "self", ".", "w1", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "gate_size", ",", "self", ".", "gate_size", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "uniform", "(", "self", ".", "w1", ".", "data", ",", "-", "0.01", ",", "0.01", ")", "\n", "self", ".", "w2", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "gate_size", ",", "self", ".", "gate_size", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "uniform", "(", "self", ".", "w2", ".", "data", ",", "-", "0.01", ",", "0.01", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "ontology_emb_file", "=", "params", ".", "ontology_emb_file", "\n", "self", ".", "ontology_emb", "=", "load_ontology_embedding", "(", "self", ".", "ontology_emb_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_model.SlotGate.forward": [[123, 182], ["len", "range", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "torch.cat.unsqueeze", "torch.cat.size", "torch.Size", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda.unsqueeze", "dst_model.SlotGate.sigmoid().unsqueeze", "dst_model.SlotGate.sigmoid().unsqueeze", "torch.cat.size", "torch.Size", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.cat", "torch.FloatTensor", "dst_model.SlotGate.sigmoid", "dst_model.SlotGate.sigmoid", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "acts_request", ",", "acts_slot", ",", "acts_value", ",", "slot_names", ")", ":", "\n", "        ", "'''\n        Inputs:\n            acts_request: (bsz, var_length)\n            acts_slot: (bsz, var_length)\n            acts_value: (bsz, var_length)\n            slot_names: (bsz, 4) (food, price range, area, request)\n        outputs:\n            gates: (bsz, 4, gate_size)\n        '''", "\n", "gates", "=", "[", "]", "\n", "batch_size", "=", "len", "(", "acts_request", ")", "\n", "\n", "for", "batch_id", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "t_q", "=", "torch", ".", "zeros", "(", "self", ".", "emb_dim", ")", ".", "cuda", "(", ")", "\n", "t_s", "=", "torch", ".", "zeros", "(", "self", ".", "emb_dim", ")", ".", "cuda", "(", ")", "\n", "t_v", "=", "torch", ".", "zeros", "(", "self", ".", "emb_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "# system acts request", "\n", "req_list", "=", "acts_request", "[", "batch_id", "]", "\n", "for", "req", "in", "req_list", ":", "\n", "                ", "t_q", "=", "t_q", "+", "torch", ".", "FloatTensor", "(", "self", ".", "ontology_emb", "[", "req", "]", ")", ".", "cuda", "(", ")", "\n", "# system acts slot_type", "\n", "", "slot_type_list", "=", "acts_slot", "[", "batch_id", "]", "\n", "for", "slot_type", "in", "slot_type_list", ":", "\n", "                ", "t_s", "=", "t_s", "+", "torch", ".", "FloatTensor", "(", "self", ".", "ontology_emb", "[", "slot_type", "]", ")", ".", "cuda", "(", ")", "\n", "# system acts slot_value", "\n", "", "slot_value_list", "=", "acts_value", "[", "batch_id", "]", "\n", "for", "slot_value", "in", "slot_value_list", ":", "\n", "                ", "t_v", "=", "t_v", "+", "torch", ".", "FloatTensor", "(", "self", ".", "ontology_emb", "[", "slot_value", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "", "slot_name", "=", "slot_names", "[", "batch_id", "]", "\n", "# slot name: (food, price range, area, request)", "\n", "for", "id_", ",", "slot", "in", "enumerate", "(", "slot_name", ")", ":", "\n", "                ", "c_s", "=", "torch", ".", "FloatTensor", "(", "self", ".", "ontology_emb", "[", "slot", "]", ")", ".", "cuda", "(", ")", "\n", "# gate1", "\n", "gate1", "=", "c_s", ".", "unsqueeze", "(", "0", ")", "\n", "# gate2", "\n", "gate2", "=", "self", ".", "sigmoid", "(", "c_s", "*", "torch", ".", "matmul", "(", "self", ".", "w1", ",", "t_q", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "# gate3", "\n", "gate3", "=", "self", ".", "sigmoid", "(", "c_s", "*", "torch", ".", "matmul", "(", "self", ".", "w2", ",", "(", "t_s", "+", "t_v", ")", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "gate", "=", "gate1", "+", "gate2", "+", "gate3", "\n", "if", "id_", "==", "0", ":", "\n", "                    ", "gates_each", "=", "gate", "\n", "", "else", ":", "\n", "                    ", "gates_each", "=", "torch", ".", "cat", "(", "(", "gates_each", ",", "gate", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "assert", "gates_each", ".", "size", "(", ")", "==", "torch", ".", "Size", "(", "[", "4", ",", "self", ".", "emb_dim", "]", ")", "\n", "gates_each", "=", "gates_each", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "batch_id", "==", "0", ":", "\n", "                ", "gates", "=", "gates_each", "\n", "", "else", ":", "\n", "                ", "gates", "=", "torch", ".", "cat", "(", "(", "gates", ",", "gates_each", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "assert", "gates", ".", "size", "(", ")", "==", "torch", ".", "Size", "(", "[", "batch_size", ",", "4", ",", "self", ".", "emb_dim", "]", ")", "\n", "\n", "return", "gates", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_model.Predictor.__init__": [[184, 198], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.LogFormatter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "params", ".", "hidden_dim", "*", "2", "+", "params", ".", "gate_size", "if", "params", ".", "bidirection", "else", "params", ".", "hidden_dim", "+", "params", ".", "gate_size", "\n", "self", ".", "food_class", "=", "params", ".", "food_class", "\n", "self", ".", "price_range_class", "=", "params", ".", "price_range_class", "\n", "self", ".", "area_class", "=", "params", ".", "area_class", "\n", "self", ".", "request_class", "=", "params", ".", "request_class", "\n", "\n", "self", ".", "linear_food", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "food_class", ")", "\n", "self", ".", "linear_price_range", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "price_range_class", ")", "\n", "self", ".", "linear_area", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "area_class", ")", "\n", "self", ".", "linear_request", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "request_class", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_model.Predictor.forward": [[199, 231], ["torch.cat", "dst_model.Predictor.linear_food", "torch.cat", "dst_model.Predictor.linear_price_range", "torch.cat", "dst_model.Predictor.linear_area", "torch.cat", "dst_model.Predictor.sigmoid", "dst_model.Predictor.linear_request"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "utter_representation", ",", "gates", ")", ":", "\n", "        ", "'''\n        Inputs:\n            utter_representation: (bsz, hidden_dim*2)\n            gates: (bsz, 4, gate_size)\n        Outputs:\n            food_class prediction: (bsz,)\n            price_range_class prediction: (bsz,)\n            area_class prediction: (bsz,)\n            request_class prediction: (bsz,)\n        '''", "\n", "# food slot", "\n", "food_gates", "=", "gates", "[", ":", ",", "0", ",", ":", "]", "# bsz, gate_size", "\n", "feature_food", "=", "torch", ".", "cat", "(", "(", "utter_representation", ",", "food_gates", ")", ",", "dim", "=", "1", ")", "\n", "food_value_pred", "=", "self", ".", "linear_food", "(", "feature_food", ")", "\n", "\n", "# price range slot", "\n", "price_range_gates", "=", "gates", "[", ":", ",", "1", ",", ":", "]", "\n", "feature_price_range", "=", "torch", ".", "cat", "(", "(", "utter_representation", ",", "price_range_gates", ")", ",", "dim", "=", "1", ")", "\n", "price_range_value_pred", "=", "self", ".", "linear_price_range", "(", "feature_price_range", ")", "\n", "\n", "# area slot", "\n", "area_gates", "=", "gates", "[", ":", ",", "2", ",", ":", "]", "\n", "feature_area", "=", "torch", ".", "cat", "(", "(", "utter_representation", ",", "area_gates", ")", ",", "dim", "=", "1", ")", "\n", "area_value_pred", "=", "self", ".", "linear_area", "(", "feature_area", ")", "\n", "\n", "# request", "\n", "request_gates", "=", "gates", "[", ":", ",", "3", ",", ":", "]", "\n", "feature_request", "=", "torch", ".", "cat", "(", "(", "utter_representation", ",", "request_gates", ")", ",", "dim", "=", "1", ")", "\n", "request_value_pred", "=", "self", ".", "sigmoid", "(", "self", ".", "linear_request", "(", "feature_request", ")", ")", "\n", "\n", "return", "food_value_pred", ",", "price_range_value_pred", ",", "area_value_pred", ",", "request_value_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_model.DialogueStateTracker.__init__": [[233, 241], ["torch.nn.Module.__init__", "dst_model.Lstm", "dst_model.Attention", "dst_model.SlotGate", "dst_model.Predictor"], "methods", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.LogFormatter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "vocab_en", ",", "vocab_trans", ")", ":", "\n", "        ", "super", "(", "DialogueStateTracker", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# build model", "\n", "self", ".", "lstm", "=", "Lstm", "(", "params", ",", "vocab_en", ",", "vocab_trans", ")", "\n", "self", ".", "attention_size", "=", "params", ".", "hidden_dim", "*", "2", "if", "params", ".", "bidirection", "else", "params", ".", "hidden_dim", "\n", "self", ".", "atten_layer", "=", "Attention", "(", "attention_size", "=", "self", ".", "attention_size", ",", "return_attention", "=", "False", ")", "\n", "self", ".", "slot_gate", "=", "SlotGate", "(", "params", ")", "\n", "self", ".", "predictor", "=", "Predictor", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_model.DialogueStateTracker.forward": [[242, 265], ["dst_model.DialogueStateTracker.lstm", "dst_model.DialogueStateTracker.atten_layer", "dst_model.DialogueStateTracker.slot_gate", "dst_model.DialogueStateTracker.predictor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "utters", ",", "lengths", ",", "acts_request", ",", "acts_slot", ",", "acts_value", ",", "slot_name", ",", "lang", ")", ":", "\n", "        ", "'''\n        Inputs:\n            utters: (bsz, seq_len)\n            acts_request: (bsz, var_length)\n            acts_slot: (bsz, var_length)\n            acts_value: (bsz, var_length)\n            slot_name: (bsz, 4) (food, price range, area, request)\n        Outputs:\n            food_class prediction: (bsz, 75)\n            price_range_class prediction: (bsz, 4)\n            area_class prediction: (bsz, 6)\n            request_class prediction: (bsz, 7)\n        '''", "\n", "# utterance representation", "\n", "lstm_out", "=", "self", ".", "lstm", "(", "utters", ",", "lang", ")", "\n", "utter_repre", ",", "_", "=", "self", ".", "atten_layer", "(", "lstm_out", ",", "lengths", ")", "\n", "# gates", "\n", "gates", "=", "self", ".", "slot_gate", "(", "acts_request", ",", "acts_slot", ",", "acts_value", ",", "slot_name", ")", "\n", "# predictions", "\n", "food_value_pred", ",", "price_range_value_pred", ",", "area_value_pred", ",", "request_value_pred", "=", "self", ".", "predictor", "(", "utter_repre", ",", "gates", ")", "\n", "\n", "return", "food_value_pred", ",", "price_range_value_pred", ",", "area_value_pred", ",", "request_value_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.load_woz_data": [[17, 36], ["len", "logger.info", "range", "codecs.open", "json.load", "preprocess.process_woz_dialogue", "turns.extend"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.process_woz_dialogue"], ["def", "load_woz_data", "(", "file_path", ",", "language", ",", "dialogue_ontology", ",", "mapping", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This method loads WOZ dataset as a collection of utterances.\n\n    Testing means load everything, no split.\n    \"\"\"", "\n", "with", "codecs", ".", "open", "(", "file_path", ",", "'r'", ",", "'utf8'", ")", "as", "f", ":", "\n", "        ", "woz_json", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "turns", "=", "[", "]", "\n", "dialogue_count", "=", "len", "(", "woz_json", ")", "\n", "\n", "logger", ".", "info", "(", "\"loading from file {} totally {} dialogues\"", ".", "format", "(", "file_path", ",", "dialogue_count", ")", ")", "\n", "\n", "for", "idx", "in", "range", "(", "0", ",", "dialogue_count", ")", ":", "\n", "        ", "current_dialogue", "=", "process_woz_dialogue", "(", "woz_json", "[", "idx", "]", "[", "\"dialogue\"", "]", ",", "language", ",", "dialogue_ontology", ",", "mapping", "=", "mapping", ")", "\n", "turns", ".", "extend", "(", "current_dialogue", ")", "\n", "\n", "", "return", "turns", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.process_woz_dialogue": [[37, 149], ["copy.deepcopy", "enumerate", "copy.deepcopy", "copy.deepcopy", "current_transcription.replace.lower", "mapping.items", "c_value.strip.strip", "dialogue_representation.append", "copy.deepcopy", "current_req.append", "current_conf_slot.append", "current_conf_value.append", "len", "current_transcription.replace.replace", "current_transcription.replace.split", "enumerate", "current_bs[].append", "turn_bs[].append", "copy.deepcopy", "copy.deepcopy", "type", "current_conf_slot.append", "current_conf_value.append", "key.split", "current_transcription.replace.replace"], "function", ["None"], ["", "def", "process_woz_dialogue", "(", "woz_dialogue", ",", "language", ",", "dialogue_ontology", ",", "mapping", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Returns a list of (tuple, belief_state) for each turn in the dialogue.\n    \"\"\"", "\n", "# initial belief state", "\n", "# belief state to be given at each turn", "\n", "if", "language", "==", "\"english\"", "or", "language", "==", "\"en\"", ":", "\n", "        ", "null_bs", "=", "{", "}", "\n", "null_bs", "[", "\"food\"", "]", "=", "\"none\"", "\n", "null_bs", "[", "\"price range\"", "]", "=", "\"none\"", "\n", "null_bs", "[", "\"area\"", "]", "=", "\"none\"", "\n", "null_bs", "[", "\"request\"", "]", "=", "[", "]", "\n", "informable_slots", "=", "[", "\"food\"", ",", "\"price range\"", ",", "\"area\"", "]", "\n", "pure_requestables", "=", "[", "\"address\"", ",", "\"phone\"", ",", "\"postcode\"", "]", "\n", "\n", "", "elif", "(", "language", "==", "\"italian\"", "or", "language", "==", "\"it\"", ")", ":", "\n", "        ", "null_bs", "=", "{", "}", "\n", "null_bs", "[", "\"cibo\"", "]", "=", "\"none\"", "\n", "null_bs", "[", "\"prezzo\"", "]", "=", "\"none\"", "\n", "null_bs", "[", "\"area\"", "]", "=", "\"none\"", "\n", "null_bs", "[", "\"request\"", "]", "=", "[", "]", "\n", "informable_slots", "=", "[", "\"cibo\"", ",", "\"prezzo\"", ",", "\"area\"", "]", "\n", "pure_requestables", "=", "[", "\"codice postale\"", ",", "\"telefono\"", ",", "\"indirizzo\"", "]", "\n", "\n", "", "elif", "(", "language", "==", "\"german\"", "or", "language", "==", "\"de\"", ")", ":", "\n", "        ", "null_bs", "=", "{", "}", "\n", "null_bs", "[", "\"essen\"", "]", "=", "\"none\"", "\n", "null_bs", "[", "\"preisklasse\"", "]", "=", "\"none\"", "\n", "null_bs", "[", "\"gegend\"", "]", "=", "\"none\"", "\n", "null_bs", "[", "\"request\"", "]", "=", "[", "]", "\n", "informable_slots", "=", "[", "\"essen\"", ",", "\"preisklasse\"", ",", "\"gegend\"", "]", "\n", "pure_requestables", "=", "[", "\"postleitzahl\"", ",", "\"telefon\"", ",", "\"adresse\"", "]", "\n", "", "else", ":", "\n", "        ", "null_bs", "=", "{", "}", "\n", "pure_requestables", "=", "None", "\n", "\n", "", "prev_belief_state", "=", "deepcopy", "(", "null_bs", ")", "\n", "dialogue_representation", "=", "[", "]", "\n", "\n", "for", "idx", ",", "turn", "in", "enumerate", "(", "woz_dialogue", ")", ":", "\n", "\n", "        ", "current_DA", "=", "turn", "[", "\"system_acts\"", "]", "\n", "\n", "current_req", "=", "[", "]", "\n", "current_conf_slot", "=", "[", "]", "\n", "current_conf_value", "=", "[", "]", "\n", "\n", "for", "each_da", "in", "current_DA", ":", "\n", "            ", "if", "each_da", "in", "informable_slots", ":", "\n", "                ", "current_req", ".", "append", "(", "each_da", ")", "\n", "", "elif", "each_da", "in", "pure_requestables", ":", "\n", "                ", "current_conf_slot", ".", "append", "(", "\"request\"", ")", "\n", "current_conf_value", ".", "append", "(", "each_da", ")", "\n", "", "else", ":", "\n", "                ", "if", "type", "(", "each_da", ")", "is", "list", ":", "\n", "                    ", "current_conf_slot", ".", "append", "(", "each_da", "[", "0", "]", ")", "\n", "current_conf_value", ".", "append", "(", "each_da", "[", "1", "]", ")", "\n", "\n", "", "", "", "current_transcription", "=", "turn", "[", "\"transcript\"", "]", "\n", "\n", "# exclude = set(string.punctuation)", "\n", "# exclude.remove(\"'\")", "\n", "\n", "# current_transcription = ''.join(ch for ch in current_transcription if ch not in exclude)", "\n", "if", "mapping", "==", "None", "or", "language", "!=", "\"en\"", ":", "\n", "            ", "current_transcription", "=", "current_transcription", ".", "lower", "(", ")", "\n", "", "else", ":", "\n", "            ", "for", "key", ",", "value", "in", "mapping", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "key", ".", "split", "(", ")", ")", ">", "1", ":", "\n", "                    ", "if", "key", "==", "\"price range\"", ":", "## could be price ranges in the utterance", "\n", "                        ", "current_transcription", "=", "current_transcription", ".", "replace", "(", "\"price ranges\"", ",", "value", ")", "\n", "", "current_transcription", "=", "current_transcription", ".", "replace", "(", "key", ",", "value", ")", "\n", "", "else", ":", "\n", "                    ", "splits", "=", "current_transcription", ".", "split", "(", ")", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "splits", ")", ":", "\n", "                        ", "if", "word", "==", "key", ":", "splits", "[", "i", "]", "=", "value", "\n", "", "current_transcription", "=", "\" \"", ".", "join", "(", "splits", ")", "\n", "\n", "", "", "", "current_labels", "=", "turn", "[", "\"turn_label\"", "]", "\n", "\n", "turn_bs", "=", "deepcopy", "(", "null_bs", ")", "\n", "current_bs", "=", "deepcopy", "(", "prev_belief_state", ")", "\n", "\n", "# print \"=====\", prev_belief_state", "\n", "if", "\"request\"", "in", "prev_belief_state", ":", "\n", "            ", "del", "prev_belief_state", "[", "\"request\"", "]", "\n", "\n", "", "current_bs", "[", "\"request\"", "]", "=", "[", "]", "# reset requestables at each turn", "\n", "\n", "legal_flag", "=", "True", "\n", "for", "label", "in", "current_labels", ":", "\n", "            ", "(", "c_slot", ",", "c_value", ")", "=", "label", "\n", "c_value", "=", "c_value", ".", "strip", "(", ")", "\n", "\n", "# remove those illegal slot value", "\n", "if", "language", "==", "\"en\"", "and", "(", "c_value", "not", "in", "dialogue_ontology", "[", "c_slot", "]", "[", "\"en\"", "]", ")", ":", "\n", "                ", "legal_flag", "=", "False", "\n", "break", "\n", "\n", "", "if", "c_slot", "in", "informable_slots", ":", "\n", "                ", "current_bs", "[", "c_slot", "]", "=", "c_value", "\n", "turn_bs", "[", "c_slot", "]", "=", "c_value", "\n", "", "elif", "c_slot", "==", "\"request\"", ":", "\n", "                ", "current_bs", "[", "\"request\"", "]", ".", "append", "(", "c_value", ")", "\n", "turn_bs", "[", "\"request\"", "]", ".", "append", "(", "c_value", ")", "\n", "\n", "", "", "if", "legal_flag", "==", "True", ":", "\n", "            ", "dialogue_representation", ".", "append", "(", "(", "idx", ",", "current_transcription", ",", "current_req", ",", "current_conf_slot", ",", "current_conf_value", ",", "deepcopy", "(", "current_bs", ")", ",", "deepcopy", "(", "turn_bs", ")", ")", ")", "\n", "\n", "prev_belief_state", "=", "deepcopy", "(", "current_bs", ")", "\n", "\n", "", "", "return", "dialogue_representation", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.get_vocab": [[152, 156], ["src.preparation.Vocab", "src.preparation.Vocab.index_words"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preparation.Vocab.index_words"], ["", "def", "get_vocab", "(", "word_set", ")", ":", "\n", "    ", "vocab", "=", "Vocab", "(", ")", "\n", "vocab", ".", "index_words", "(", "word_set", ")", "\n", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.parse_tsv": [[158, 240], ["open", "csv.reader", "enumerate", "line[].split", "json.loads", "data_tsv[].append", "data_tsv[].append", "data_tsv[].append", "intent_set.append", "intent_set.append", "len", "len", "item.split", "slot_line.append", "slots.append", "len", "int", "int", "slots.append", "slots.append", "slot_set.append", "int", "int", "int", "int", "slot_set.append"], "function", ["None"], ["", "def", "parse_tsv", "(", "data_path", ",", "intent_set", "=", "[", "]", ",", "slot_set", "=", "[", "\"O\"", "]", ",", "istrain", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Input: \n        data_path: the path of data\n        intent_set: set of intent (empty if it is train data)\n        slot_set: set of slot type (empty if it is train data)\n    Output:\n        data_tsv: {\"text\": [[token1, token2, ...], ...], \"slot\": [[slot_type1, slot_type2, ...], ...], \"intent\": [intent_type, ...]}\n        intent_set: set of intent\n        slot_set: set of slot type\n    \"\"\"", "\n", "slot_type_list", "=", "[", "\"alarm\"", ",", "\"datetime\"", ",", "\"location\"", ",", "\"reminder\"", ",", "\"weather\"", "]", "\n", "data_tsv", "=", "{", "\"text\"", ":", "[", "]", ",", "\"slot\"", ":", "[", "]", ",", "\"intent\"", ":", "[", "]", "}", "\n", "with", "open", "(", "data_path", ")", "as", "tsv_file", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "tsv_file", ",", "delimiter", "=", "\"\\t\"", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "reader", ")", ":", "\n", "            ", "intent", "=", "line", "[", "0", "]", "\n", "if", "istrain", "==", "True", "and", "intent", "not", "in", "intent_set", ":", "intent_set", ".", "append", "(", "intent", ")", "\n", "if", "istrain", "==", "False", "and", "intent", "not", "in", "intent_set", ":", "\n", "                ", "intent_set", ".", "append", "(", "intent", ")", "\n", "# logger.info(\"Found intent %s not in train data\" % intent)", "\n", "# print(\"Found intent %s not in train data\" % intent)", "\n", "", "slot_splits", "=", "line", "[", "1", "]", ".", "split", "(", "\",\"", ")", "\n", "slot_line", "=", "[", "]", "\n", "slot_flag", "=", "True", "\n", "if", "line", "[", "1", "]", "!=", "''", ":", "\n", "                ", "for", "item", "in", "slot_splits", ":", "\n", "                    ", "item_splits", "=", "item", ".", "split", "(", "\":\"", ")", "\n", "assert", "len", "(", "item_splits", ")", "==", "3", "\n", "# slot_item = {\"start\": item_splits[0], \"end\": item_splits[1], \"slot\": item_splits[2].split(\"/\")[0]}", "\n", "slot_item", "=", "{", "\"start\"", ":", "item_splits", "[", "0", "]", ",", "\"end\"", ":", "item_splits", "[", "1", "]", ",", "\"slot\"", ":", "item_splits", "[", "2", "]", "}", "\n", "flag", "=", "False", "\n", "for", "slot_type", "in", "slot_type_list", ":", "\n", "                        ", "if", "slot_type", "in", "slot_item", "[", "\"slot\"", "]", ":", "\n", "                            ", "flag", "=", "True", "\n", "\n", "", "", "if", "flag", "==", "False", ":", "\n", "                        ", "slot_flag", "=", "False", "\n", "break", "\n", "# if istrain == True and slot_item[\"slot\"] not in slot_set: slot_set.append(slot_item[\"slot\"])", "\n", "# if istrain == False and slot_item[\"slot\"] not in slot_set:", "\n", "#     slot_set.append(slot_item[\"slot\"])", "\n", "#     # logger.info(\"Found slot %s not in train data\" % item_splits[2])", "\n", "#     # print(\"Found slot %s not in train data\" % item_splits[2])", "\n", "", "slot_line", ".", "append", "(", "slot_item", ")", "\n", "\n", "", "", "if", "slot_flag", "==", "False", ":", "\n", "# slot flag not correct", "\n", "                ", "continue", "\n", "\n", "", "token_part", "=", "json", ".", "loads", "(", "line", "[", "4", "]", ")", "\n", "tokens", "=", "token_part", "[", "\"tokenizations\"", "]", "[", "0", "]", "[", "\"tokens\"", "]", "\n", "tokenSpans", "=", "token_part", "[", "\"tokenizations\"", "]", "[", "0", "]", "[", "\"tokenSpans\"", "]", "\n", "\n", "data_tsv", "[", "\"text\"", "]", ".", "append", "(", "tokens", ")", "\n", "data_tsv", "[", "\"intent\"", "]", ".", "append", "(", "intent", ")", "\n", "slots", "=", "[", "]", "\n", "for", "tokenspan", "in", "tokenSpans", ":", "\n", "                ", "nolabel", "=", "True", "\n", "for", "slot_item", "in", "slot_line", ":", "\n", "                    ", "start", "=", "tokenspan", "[", "\"start\"", "]", "\n", "# if int(start) >= int(slot_item[\"start\"]) and int(start) < int(slot_item[\"end\"]):", "\n", "if", "int", "(", "start", ")", "==", "int", "(", "slot_item", "[", "\"start\"", "]", ")", ":", "\n", "                        ", "nolabel", "=", "False", "\n", "slot_", "=", "\"B-\"", "+", "slot_item", "[", "\"slot\"", "]", "\n", "slots", ".", "append", "(", "slot_", ")", "\n", "if", "slot_", "not", "in", "slot_set", ":", "\n", "                            ", "slot_set", ".", "append", "(", "slot_", ")", "\n", "", "break", "\n", "", "if", "int", "(", "start", ")", ">", "int", "(", "slot_item", "[", "\"start\"", "]", ")", "and", "int", "(", "start", ")", "<", "int", "(", "slot_item", "[", "\"end\"", "]", ")", ":", "\n", "                        ", "nolabel", "=", "False", "\n", "slot_", "=", "\"I-\"", "+", "slot_item", "[", "\"slot\"", "]", "\n", "slots", ".", "append", "(", "slot_", ")", "\n", "if", "slot_", "not", "in", "slot_set", ":", "\n", "                            ", "slot_set", ".", "append", "(", "slot_", ")", "\n", "", "break", "\n", "", "", "if", "nolabel", "==", "True", ":", "slots", ".", "append", "(", "\"O\"", ")", "\n", "", "data_tsv", "[", "\"slot\"", "]", ".", "append", "(", "slots", ")", "\n", "\n", "assert", "len", "(", "slots", ")", "==", "len", "(", "tokens", ")", "\n", "\n", "", "", "return", "data_tsv", ",", "intent_set", ",", "slot_set", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.clean_text": [[242, 326], ["re.compile", "re.compile", "re.compile", "range", "re.compile", "re.compile", "re.compile", "re.compile", "re.compile", "re.compile", "re.compile", "re.compile", "re.compile", "re.compile", "data_clean[].append", "token.isdigit", "token_list_clean.append", "len", "len", "token_list_clean.append", "token_list_clean.append", "token_list_clean.append", "token_list_clean.append", "token_list_clean.append", "token_list_clean.append", "token_list_clean.append", "bool", "bool", "bool", "bool", "bool", "bool", "bool", "bool", "bool", "bool", "bool", "bool", "bool", "token.isdigit", "re.match", "re.match", "re.match", "token.isdigit", "re.match", "re.match", "re.match", "re.match", "re.match", "re.match", "re.match", "re.match", "re.match", "re.match", "len", "token.replace", "len"], "function", ["None"], ["", "def", "clean_text", "(", "data", ",", "lang", ")", ":", "\n", "# detect pattern", "\n", "# detect <TIME>", "\n", "    ", "pattern_time1", "=", "re", ".", "compile", "(", "r\"[0-9]+[ap]\"", ")", "\n", "pattern_time2", "=", "re", ".", "compile", "(", "r\"[0-9]+[;.h][0-9]+\"", ")", "\n", "pattern_time3", "=", "re", ".", "compile", "(", "r\"[ap][.][am]\"", ")", "\n", "pattern_time4", "=", "range", "(", "2000", ",", "2020", ")", "\n", "# pattern_time5: token.isdigit() and len(token) == 3", "\n", "\n", "pattern_time_th1", "=", "re", ".", "compile", "(", "r\"[\\u0E00-\\u0E7F]+[0-9]+\"", ")", "\n", "pattern_time_th2", "=", "re", ".", "compile", "(", "r\"[0-9]+[.]*[0-9]*[\\u0E00-\\u0E7F]+\"", ")", "\n", "pattern_time_th3", "=", "re", ".", "compile", "(", "r\"[0-9]+[.][0-9]+\"", ")", "\n", "\n", "# detect <LAST>", "\n", "pattern_last1", "=", "re", ".", "compile", "(", "r\"[0-9]+min\"", ")", "\n", "pattern_last2", "=", "re", ".", "compile", "(", "r\"[0-9]+h\"", ")", "\n", "pattern_last3", "=", "re", ".", "compile", "(", "r\"[0-9]+sec\"", ")", "\n", "\n", "# detect <DATE>", "\n", "pattern_date1", "=", "re", ".", "compile", "(", "r\"[0-9]+st\"", ")", "\n", "pattern_date2", "=", "re", ".", "compile", "(", "r\"[0-9]+nd\"", ")", "\n", "pattern_date3", "=", "re", ".", "compile", "(", "r\"[0-9]+rd\"", ")", "\n", "pattern_date4", "=", "re", ".", "compile", "(", "r\"[0-9]+th\"", ")", "\n", "\n", "# detect <LOCATION>: token.isdigit() and len(token) == 5", "\n", "\n", "# detect <NUMBER>: token.isdigit()", "\n", "\n", "# for English: replace contain n't with not", "\n", "# for English: remove 's, 'll, 've, 'd, 'm", "\n", "remove_list", "=", "[", "\"'s\"", ",", "\"'ll\"", ",", "\"'ve\"", ",", "\"'d\"", ",", "\"'m\"", "]", "\n", "\n", "data_clean", "=", "{", "\"text\"", ":", "[", "]", ",", "\"slot\"", ":", "[", "]", ",", "\"intent\"", ":", "[", "]", "}", "\n", "data_clean", "[", "\"slot\"", "]", "=", "data", "[", "\"slot\"", "]", "\n", "data_clean", "[", "\"intent\"", "]", "=", "data", "[", "\"intent\"", "]", "\n", "for", "token_list", "in", "data", "[", "\"text\"", "]", ":", "\n", "        ", "token_list_clean", "=", "[", "]", "\n", "for", "token", "in", "token_list", ":", "\n", "            ", "new_token", "=", "token", "\n", "# detect <TIME>", "\n", "if", "lang", "!=", "\"th\"", "and", "(", "bool", "(", "re", ".", "match", "(", "pattern_time1", ",", "token", ")", ")", "or", "bool", "(", "re", ".", "match", "(", "pattern_time2", ",", "token", ")", ")", "or", "bool", "(", "re", ".", "match", "(", "pattern_time3", ",", "token", ")", ")", "or", "token", "in", "pattern_time4", "or", "(", "token", ".", "isdigit", "(", ")", "and", "len", "(", "token", ")", "==", "3", ")", ")", ":", "\n", "                ", "new_token", "=", "\"<TIME>\"", "\n", "token_list_clean", ".", "append", "(", "new_token", ")", "\n", "continue", "\n", "", "if", "lang", "==", "\"th\"", "and", "(", "bool", "(", "re", ".", "match", "(", "pattern_time_th1", ",", "token", ")", ")", "or", "bool", "(", "re", ".", "match", "(", "pattern_time_th2", ",", "token", ")", ")", "or", "bool", "(", "re", ".", "match", "(", "pattern_time_th3", ",", "token", ")", ")", ")", ":", "\n", "                ", "new_token", "=", "\"<TIME>\"", "\n", "token_list_clean", ".", "append", "(", "new_token", ")", "\n", "continue", "\n", "# detect <LAST>", "\n", "", "if", "lang", "==", "\"en\"", "and", "(", "bool", "(", "re", ".", "match", "(", "pattern_last1", ",", "token", ")", ")", "or", "bool", "(", "re", ".", "match", "(", "pattern_last2", ",", "token", ")", ")", "or", "bool", "(", "re", ".", "match", "(", "pattern_last3", ",", "token", ")", ")", ")", ":", "\n", "                ", "new_token", "=", "\"<LAST>\"", "\n", "token_list_clean", ".", "append", "(", "new_token", ")", "\n", "continue", "\n", "# detect <DATE>", "\n", "", "if", "lang", "==", "\"en\"", "and", "(", "bool", "(", "re", ".", "match", "(", "pattern_date1", ",", "token", ")", ")", "or", "bool", "(", "re", ".", "match", "(", "pattern_date2", ",", "token", ")", ")", "or", "bool", "(", "re", ".", "match", "(", "pattern_date3", ",", "token", ")", ")", "or", "bool", "(", "re", ".", "match", "(", "pattern_date4", ",", "token", ")", ")", ")", ":", "\n", "                ", "new_token", "=", "\"<DATE>\"", "\n", "token_list_clean", ".", "append", "(", "new_token", ")", "\n", "continue", "\n", "# detect <LOCATION>", "\n", "", "if", "lang", "!=", "\"th\"", "and", "(", "token", ".", "isdigit", "(", ")", "and", "len", "(", "token", ")", "==", "5", ")", ":", "\n", "                ", "new_token", "=", "\"<LOCATION>\"", "\n", "token_list_clean", ".", "append", "(", "new_token", ")", "\n", "continue", "\n", "# detect <NUMBER>", "\n", "", "if", "token", ".", "isdigit", "(", ")", ":", "\n", "                ", "new_token", "=", "\"<NUMBER>\"", "\n", "token_list_clean", ".", "append", "(", "new_token", ")", "\n", "continue", "\n", "", "if", "lang", "==", "\"en\"", "and", "(", "\"n't\"", "in", "token", ")", ":", "\n", "                ", "new_token", "=", "\"not\"", "\n", "token_list_clean", ".", "append", "(", "new_token", ")", "\n", "continue", "\n", "", "if", "lang", "==", "\"en\"", ":", "\n", "                ", "for", "item", "in", "remove_list", ":", "\n", "                    ", "if", "item", "in", "token", ":", "\n", "                        ", "new_token", "=", "token", ".", "replace", "(", "item", ",", "\"\"", ")", "\n", "break", "\n", "\n", "", "", "", "token_list_clean", ".", "append", "(", "new_token", ")", "\n", "\n", "", "assert", "len", "(", "token_list_clean", ")", "==", "len", "(", "token_list", ")", "\n", "data_clean", "[", "\"text\"", "]", ".", "append", "(", "token_list_clean", ")", "\n", "\n", "", "return", "data_clean", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.gen_mix_lang_data": [[327, 342], ["data_new[].append", "token_list_new.append", "len", "len"], "function", ["None"], ["", "def", "gen_mix_lang_data", "(", "data", ",", "token_mapping", ")", ":", "\n", "    ", "data_new", "=", "{", "\"text\"", ":", "[", "]", ",", "\"slot\"", ":", "[", "]", ",", "\"intent\"", ":", "[", "]", "}", "\n", "data_new", "[", "\"slot\"", "]", "=", "data", "[", "\"slot\"", "]", "\n", "data_new", "[", "\"intent\"", "]", "=", "data", "[", "\"intent\"", "]", "\n", "for", "token_list", "in", "data", "[", "\"text\"", "]", ":", "\n", "        ", "token_list_new", "=", "[", "]", "\n", "for", "token", "in", "token_list", ":", "\n", "            ", "if", "token", "in", "token_mapping", ":", "\n", "                ", "token", "=", "token_mapping", "[", "token", "]", "\n", "", "token_list_new", ".", "append", "(", "token", ")", "\n", "\n", "", "assert", "len", "(", "token_list_new", ")", "==", "len", "(", "token_list", ")", "\n", "data_new", "[", "\"text\"", "]", ".", "append", "(", "token_list_new", ")", "\n", "\n", "", "return", "data_new", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.preprocess_nlu_data": [[344, 395], ["logger.info", "os.path.join", "os.path.join", "os.path.join", "preprocess.parse_tsv", "preprocess.parse_tsv", "preprocess.parse_tsv", "logger.info", "src.utils.binarize_nlu_data", "src.utils.binarize_nlu_data", "src.utils.binarize_nlu_data", "print", "os.path.join", "os.path.join", "len", "len", "len", "len", "logger.info", "preprocess.gen_mix_lang_data", "preprocess.gen_mix_lang_data", "preprocess.gen_mix_lang_data", "logger.info", "preprocess.clean_text", "preprocess.clean_text", "preprocess.clean_text", "open", "pickle.load", "set", "set"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.parse_tsv", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.parse_tsv", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.parse_tsv", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.binarize_nlu_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.binarize_nlu_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.binarize_nlu_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.gen_mix_lang_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.gen_mix_lang_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.gen_mix_lang_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.clean_text", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.clean_text", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.clean_text"], ["", "def", "preprocess_nlu_data", "(", "data", ",", "lang", ",", "clean_txt", "=", "True", ",", "token_mapping", "=", "None", ",", "vocab_path", "=", "None", ",", "filtered", "=", "False", ",", "filtered_scale", "=", "None", ")", ":", "\n", "# preprocess from raw (lang) data", "\n", "# print(\"============ Preprocess %s data ============\" % lang)", "\n", "    ", "logger", ".", "info", "(", "\"============ Preprocess %s data ============\"", "%", "lang", ")", "\n", "\n", "data_folder", "=", "os", ".", "path", ".", "join", "(", "'./data/nlu/nlu_data/'", ",", "lang", ")", "\n", "train_path", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "\"train-%s.tsv\"", "%", "lang", ")", "\n", "eval_path", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "\"eval-%s.tsv\"", "%", "lang", ")", "\n", "# test_path = os.path.join(data_folder, \"test-%s.tsv\" % lang)", "\n", "if", "lang", "!=", "\"en\"", "and", "filtered", "==", "True", ":", "\n", "        ", "print", "(", "\"testing filtering data\"", ")", "\n", "test_path", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "\"test-%s.filter.%s.tsv\"", "%", "(", "lang", ",", "filtered_scale", ")", ")", "\n", "", "else", ":", "\n", "        ", "test_path", "=", "os", ".", "path", ".", "join", "(", "data_folder", ",", "\"test-%s.tsv\"", "%", "lang", ")", "\n", "\n", "", "data_train", ",", "intent_set", ",", "slot_set", "=", "parse_tsv", "(", "train_path", ")", "\n", "data_eval", ",", "intent_set", ",", "slot_set", "=", "parse_tsv", "(", "eval_path", ",", "intent_set", "=", "intent_set", ",", "slot_set", "=", "slot_set", ",", "istrain", "=", "False", ")", "\n", "data_test", ",", "intent_set", ",", "slot_set", "=", "parse_tsv", "(", "test_path", ",", "intent_set", "=", "intent_set", ",", "slot_set", "=", "slot_set", ",", "istrain", "=", "False", ")", "\n", "\n", "assert", "len", "(", "intent_set", ")", "==", "len", "(", "set", "(", "intent_set", ")", ")", "\n", "assert", "len", "(", "slot_set", ")", "==", "len", "(", "set", "(", "slot_set", ")", ")", "\n", "\n", "# logger.info(\"number of intent in %s is %s\" % (lang, len(intent_set)))", "\n", "# logger.info(\"number of slot in %s is %s\" % (lang, len(slot_set)))", "\n", "# print(\"number of intent in %s is %s\" % (lang, len(intent_set)))", "\n", "# print(\"number of slot in %s is %s\" % (lang, len(slot_set)))", "\n", "\n", "if", "lang", "==", "\"en\"", "and", "token_mapping", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"generating mixed language training data\"", ")", "\n", "data_train", "=", "gen_mix_lang_data", "(", "data_train", ",", "token_mapping", ")", "\n", "data_eval", "=", "gen_mix_lang_data", "(", "data_eval", ",", "token_mapping", ")", "\n", "data_eval", "=", "gen_mix_lang_data", "(", "data_eval", ",", "token_mapping", ")", "\n", "\n", "", "if", "clean_txt", "==", "True", ":", "\n", "# clean_data", "\n", "        ", "logger", ".", "info", "(", "\"cleaning data on %s language\"", "%", "lang", ")", "\n", "data_train", "=", "clean_text", "(", "data_train", ",", "lang", ")", "\n", "data_eval", "=", "clean_text", "(", "data_eval", ",", "lang", ")", "\n", "data_test", "=", "clean_text", "(", "data_test", ",", "lang", ")", "\n", "\n", "", "assert", "vocab_path", "is", "not", "None", "\n", "logger", ".", "info", "(", "\"Loading vocab from %s\"", "%", "vocab_path", ")", "\n", "with", "open", "(", "vocab_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "vocab", "=", "pickle", ".", "load", "(", "f", ")", "\n", "# logger.info(\"vocab size of %s is %d\" % (lang, vocab.word_num))", "\n", "# print(\"vocab size of %s is %d\" % (lang, vocab.word_num))", "\n", "\n", "", "data_train_bin", "=", "binarize_nlu_data", "(", "data_train", ",", "intent_set", ",", "slot_set", ",", "vocab", ")", "\n", "data_eval_bin", "=", "binarize_nlu_data", "(", "data_eval", ",", "intent_set", ",", "slot_set", ",", "vocab", ")", "\n", "data_test_bin", "=", "binarize_nlu_data", "(", "data_test", ",", "intent_set", ",", "slot_set", ",", "vocab", ")", "\n", "data", "[", "lang", "]", "=", "{", "\"train\"", ":", "data_train_bin", ",", "\"eval\"", ":", "data_eval_bin", ",", "\"test\"", ":", "data_test_bin", ",", "\"vocab\"", ":", "vocab", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_loader.Dataset.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "turns", ")", ":", "\n", "        ", "self", ".", "turns", "=", "turns", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_loader.Dataset.__getitem__": [[17, 20], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# dialog_idx, utterance, acts_request, acts_slot_type, acts_slot_value, turn_slot, turn_slot_label, turn_request_label", "\n", "        ", "return", "self", ".", "turns", "[", "index", "]", "[", "0", "]", ",", "self", ".", "turns", "[", "index", "]", "[", "1", "]", ",", "self", ".", "turns", "[", "index", "]", "[", "2", "]", ",", "self", ".", "turns", "[", "index", "]", "[", "3", "]", ",", "self", ".", "turns", "[", "index", "]", "[", "4", "]", ",", "self", ".", "turns", "[", "index", "]", "[", "5", "]", ",", "self", ".", "turns", "[", "index", "]", "[", "6", "]", ",", "self", ".", "turns", "[", "index", "]", "[", "7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_loader.Dataset.__len__": [[21, 23], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "turns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_loader.collate_fn": [[24, 39], ["zip", "max", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "enumerate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len"], "function", ["None"], ["", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "    ", "dialogu_idx", ",", "utterances", ",", "acts_request", ",", "acts_slot", ",", "acts_values", ",", "slot_names", ",", "turn_slot_labels", ",", "turn_request_labels", "=", "zip", "(", "*", "data", ")", "\n", "\n", "lengths", "=", "[", "len", "(", "utter", ")", "for", "utter", "in", "utterances", "]", "\n", "max_lengths", "=", "max", "(", "lengths", ")", "\n", "padded_seqs", "=", "torch", ".", "LongTensor", "(", "len", "(", "utterances", ")", ",", "max_lengths", ")", ".", "fill_", "(", "PAD_INDEX", ")", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "utterances", ")", ":", "\n", "        ", "length", "=", "lengths", "[", "i", "]", "\n", "padded_seqs", "[", "i", ",", ":", "length", "]", "=", "torch", ".", "LongTensor", "(", "seq", ")", "\n", "", "lengths", "=", "torch", ".", "LongTensor", "(", "lengths", ")", "\n", "\n", "turn_slot_labels", "=", "torch", ".", "LongTensor", "(", "turn_slot_labels", ")", "\n", "turn_request_labels", "=", "torch", ".", "FloatTensor", "(", "turn_request_labels", ")", "\n", "\n", "return", "dialogu_idx", ",", "padded_seqs", ",", "lengths", ",", "acts_request", ",", "acts_slot", ",", "acts_values", ",", "slot_names", ",", "turn_slot_labels", ",", "turn_request_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_loader.load_data": [[40, 50], ["src.preprocess.load_woz_data", "src.preprocess.load_woz_data", "len", "src.preprocess.load_woz_data", "src.preprocess.load_woz_data", "int"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.load_woz_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.load_woz_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.load_woz_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.preprocess.load_woz_data"], ["", "def", "load_data", "(", "params", ",", "dialogue_ontology", ",", "mapping", "=", "None", ")", ":", "\n", "    ", "pri_turns_train", "=", "load_woz_data", "(", "\"data/dst/dst_data/tok_woz_train_en.json\"", ",", "\"en\"", ",", "dialogue_ontology", ",", "mapping", "=", "mapping", ")", "\n", "pri_turns_val", "=", "load_woz_data", "(", "\"data/dst/dst_data/tok_woz_validate_en.json\"", ",", "\"en\"", ",", "dialogue_ontology", ",", "mapping", "=", "mapping", ")", "\n", "val_count", "=", "len", "(", "pri_turns_val", ")", "\n", "pri_turns_train", "=", "pri_turns_train", "+", "pri_turns_val", "[", "0", ":", "int", "(", "0.75", "*", "val_count", ")", "]", "\n", "\n", "tgt_pri_turns_val", "=", "load_woz_data", "(", "\"data/dst/dst_data/tok_woz_validate_\"", "+", "params", ".", "trans_lang", "+", "\".json\"", ",", "params", ".", "trans_lang", ",", "dialogue_ontology", ",", "mapping", "=", "mapping", ")", "\n", "tgt_pri_turns_test", "=", "load_woz_data", "(", "\"data/dst/dst_data/tok_woz_test_\"", "+", "params", ".", "trans_lang", "+", "\".json\"", ",", "params", ".", "trans_lang", ",", "dialogue_ontology", ",", "mapping", "=", "mapping", ")", "\n", "\n", "return", "pri_turns_train", ",", "tgt_pri_turns_val", ",", "tgt_pri_turns_test", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_loader.get_dst_dataloader": [[51, 73], ["dst_loader.load_data", "src.utils.binarize_dst_data", "src.utils.binarize_dst_data", "src.utils.binarize_dst_data", "dst_loader.Dataset", "dst_loader.Dataset", "dst_loader.Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.dst_loader.load_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.binarize_dst_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.binarize_dst_data", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.binarize_dst_data"], ["", "def", "get_dst_dataloader", "(", "params", ",", "vocab_en", ",", "vocab_trans", ",", "dialogue_ontology", ")", ":", "\n", "    ", "if", "params", ".", "mix_train", "==", "True", ":", "\n", "# load mapping for mix training", "\n", "        ", "with", "open", "(", "params", ".", "mapping_for_mix", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "mapping_for_mix", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "mapping_for_mix", "=", "None", "\n", "", "train_turns", ",", "tgt_val_turns", ",", "tgt_test_turns", "=", "load_data", "(", "params", ",", "dialogue_ontology", ",", "mapping", "=", "mapping_for_mix", ")", "\n", "\n", "train_turns_bin", "=", "binarize_dst_data", "(", "params", ",", "train_turns", ",", "vocab_en", ",", "dialogue_ontology", ",", "lang", "=", "\"en\"", ",", "isTestset", "=", "False", ")", "\n", "tgt_turns_val_bin", "=", "binarize_dst_data", "(", "params", ",", "tgt_val_turns", ",", "vocab_trans", ",", "dialogue_ontology", ",", "lang", "=", "params", ".", "trans_lang", ",", "isTestset", "=", "True", ")", "\n", "tgt_turns_test_bin", "=", "binarize_dst_data", "(", "params", ",", "tgt_test_turns", ",", "vocab_trans", ",", "dialogue_ontology", ",", "lang", "=", "params", ".", "trans_lang", ",", "isTestset", "=", "True", ")", "\n", "\n", "dataset_tr", "=", "Dataset", "(", "train_turns_bin", ")", "\n", "dataset_val", "=", "Dataset", "(", "tgt_turns_val_bin", ")", "\n", "dataset_test", "=", "Dataset", "(", "tgt_turns_test_bin", ")", "\n", "\n", "dataloader_tr", "=", "DataLoader", "(", "dataset", "=", "dataset_tr", ",", "batch_size", "=", "params", ".", "batch_size", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "dataloader_val", "=", "DataLoader", "(", "dataset", "=", "dataset_val", ",", "batch_size", "=", "params", ".", "batch_size", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_fn", ")", "\n", "dataloader_test", "=", "DataLoader", "(", "dataset", "=", "dataset_test", ",", "batch_size", "=", "params", ".", "batch_size", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "return", "dataloader_tr", ",", "dataloader_val", ",", "dataloader_test", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.LogFormatter.__init__": [[39, 41], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.LogFormatter.format": [[42, 53], ["round", "record.getMessage", "message.replace.replace.replace", "time.strftime", "datetime.timedelta", "len"], "methods", ["None"], ["", "def", "format", "(", "self", ",", "record", ")", ":", "\n", "        ", "elapsed_seconds", "=", "round", "(", "record", ".", "created", "-", "self", ".", "start_time", ")", "\n", "\n", "prefix", "=", "\"%s - %s - %s\"", "%", "(", "\n", "record", ".", "levelname", ",", "\n", "time", ".", "strftime", "(", "'%x %X'", ")", ",", "\n", "timedelta", "(", "seconds", "=", "elapsed_seconds", ")", "\n", ")", "\n", "message", "=", "record", ".", "getMessage", "(", ")", "\n", "message", "=", "message", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "(", "len", "(", "prefix", ")", "+", "3", ")", ")", "\n", "return", "\"%s - %s\"", "%", "(", "prefix", ",", "message", ")", "if", "message", "else", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.init_experiment": [[18, 36], ["utils.get_saved_path", "pickle.dump", "utils.create_logger", "create_logger.info", "create_logger.info", "create_logger.info", "open", "os.path.join", "os.path.join", "sorted", "str", "dict().items", "dict", "vars"], "function", ["home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.get_saved_path", "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.create_logger"], ["def", "init_experiment", "(", "params", ",", "logger_filename", ")", ":", "\n", "    ", "\"\"\"\n    Initialize the experiment:\n    - save parameters\n    - create a logger\n    \"\"\"", "\n", "# save parameters", "\n", "get_saved_path", "(", "params", ")", "\n", "pickle", ".", "dump", "(", "params", ",", "open", "(", "os", ".", "path", ".", "join", "(", "params", ".", "dump_path", ",", "\"params.pkl\"", ")", ",", "\"wb\"", ")", ")", "\n", "\n", "# create a logger", "\n", "logger", "=", "create_logger", "(", "os", ".", "path", ".", "join", "(", "params", ".", "dump_path", ",", "logger_filename", ")", ")", "\n", "logger", ".", "info", "(", "'============ Initialized logger ============'", ")", "\n", "logger", ".", "info", "(", "'\\n'", ".", "join", "(", "'%s: %s'", "%", "(", "k", ",", "str", "(", "v", ")", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "dict", "(", "vars", "(", "params", ")", ")", ".", "items", "(", ")", ")", ")", ")", "\n", "logger", ".", "info", "(", "'The experiment will be stored in %s\\n'", "%", "params", ".", "dump_path", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.create_logger": [[54, 84], ["utils.LogFormatter", "logging.StreamHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "time.time"], "function", ["None"], ["", "", "def", "create_logger", "(", "filepath", ")", ":", "\n", "# create log formatter", "\n", "    ", "log_formatter", "=", "LogFormatter", "(", ")", "\n", "\n", "# create file handler and set level to debug", "\n", "if", "filepath", "is", "not", "None", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "filepath", ",", "\"a\"", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "file_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "\n", "# create console handler and set level to info", "\n", "", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "\n", "# create logger and set level to debug", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "handlers", "=", "[", "]", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "if", "filepath", "is", "not", "None", ":", "\n", "        ", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n", "# reset logger elapsed time", "\n", "def", "reset_time", "(", ")", ":", "\n", "        ", "log_formatter", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "logger", ".", "reset_time", "=", "reset_time", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.get_saved_path": [[85, 113], ["os.path.isdir", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isdir", "subprocess.Popen().wait", "os.path.exists", "subprocess.Popen().wait", "os.path.isdir", "subprocess.Popen().wait", "subprocess.Popen", "subprocess.Popen", "os.path.isdir", "subprocess.Popen", "random.choice", "os.path.join", "range"], "function", ["None"], ["", "def", "get_saved_path", "(", "params", ")", ":", "\n", "    ", "\"\"\"\n    create a directory to store the experiment\n    \"\"\"", "\n", "dump_path", "=", "\"./\"", "if", "params", ".", "dump_path", "==", "\"\"", "else", "params", ".", "dump_path", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dump_path", ")", ":", "\n", "        ", "subprocess", ".", "Popen", "(", "\"mkdir -p %s\"", "%", "dump_path", ",", "shell", "=", "True", ")", ".", "wait", "(", ")", "\n", "", "assert", "os", ".", "path", ".", "isdir", "(", "dump_path", ")", "\n", "\n", "# create experiment path if it does not exist", "\n", "exp_path", "=", "os", ".", "path", ".", "join", "(", "dump_path", ",", "params", ".", "exp_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "exp_path", ")", ":", "\n", "        ", "subprocess", ".", "Popen", "(", "\"mkdir -p %s\"", "%", "exp_path", ",", "shell", "=", "True", ")", ".", "wait", "(", ")", "\n", "\n", "# generate id for this experiment", "\n", "", "if", "params", ".", "exp_id", "==", "\"\"", ":", "\n", "        ", "chars", "=", "\"0123456789\"", "\n", "while", "True", ":", "\n", "            ", "exp_id", "=", "\"\"", ".", "join", "(", "random", ".", "choice", "(", "chars", ")", "for", "_", "in", "range", "(", "0", ",", "3", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "exp_path", ",", "exp_id", ")", ")", ":", "\n", "                ", "break", "\n", "", "", "", "else", ":", "\n", "        ", "exp_id", "=", "params", ".", "exp_id", "\n", "# update dump_path", "\n", "", "params", ".", "dump_path", "=", "os", ".", "path", ".", "join", "(", "exp_path", ",", "exp_id", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "params", ".", "dump_path", ")", ":", "\n", "        ", "subprocess", ".", "Popen", "(", "\"mkdir -p %s\"", "%", "params", ".", "dump_path", ",", "shell", "=", "True", ")", ".", "wait", "(", ")", "\n", "", "assert", "os", ".", "path", ".", "isdir", "(", "params", ".", "dump_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.binarize_dst_data": [[114, 178], ["class_type_dict.keys", "logger.info", "enumerate", "codecs.open", "json.load", "ontology_vocab.append", "utterance.split", "labels.items", "binarized_turns.append", "ontology_vocab.index", "ontology_vocab.index", "ontology_vocab.index", "binarized_slots.append", "ontology_vocab.index", "binarized_slot_values.append", "len", "type", "binarized_slot_values.append", "class_type_dict[].index", "class_type_dict[].index"], "function", ["None"], ["", "def", "binarize_dst_data", "(", "params", ",", "turns", ",", "vocab", ",", "dialogue_ontology", ",", "lang", ",", "isTestset", "=", "False", ")", ":", "\n", "    ", "if", "lang", "==", "\"en\"", ":", "\n", "        ", "class_type_dict", "=", "{", "\"food\"", ":", "[", "]", ",", "\"price range\"", ":", "[", "]", ",", "\"area\"", ":", "[", "]", ",", "\"request\"", ":", "[", "]", "}", "\n", "", "elif", "lang", "==", "\"de\"", ":", "\n", "        ", "class_type_dict", "=", "{", "\"essen\"", ":", "[", "]", ",", "\"preisklasse\"", ":", "[", "]", ",", "\"gegend\"", ":", "[", "]", ",", "\"request\"", ":", "[", "]", "}", "\n", "de2en_mapping", "=", "{", "\"essen\"", ":", "\"food\"", ",", "\"preisklasse\"", ":", "\"price range\"", ",", "\"gegend\"", ":", "\"area\"", ",", "\"request\"", ":", "\"request\"", "}", "\n", "", "elif", "lang", "==", "\"it\"", ":", "\n", "        ", "class_type_dict", "=", "{", "\"cibo\"", ":", "[", "]", ",", "\"prezzo\"", ":", "[", "]", ",", "\"area\"", ":", "[", "]", ",", "\"request\"", ":", "[", "]", "}", "\n", "it2en_mapping", "=", "{", "\"cibo\"", ":", "\"food\"", ",", "\"prezzo\"", ":", "\"price range\"", ",", "\"area\"", ":", "\"area\"", ",", "\"request\"", ":", "\"request\"", "}", "\n", "\n", "", "for", "slot_type", "in", "class_type_dict", ".", "keys", "(", ")", ":", "\n", "        ", "if", "lang", "==", "\"de\"", ":", "\n", "            ", "slot_type_", "=", "de2en_mapping", "[", "slot_type", "]", "\n", "", "elif", "lang", "==", "\"it\"", ":", "\n", "            ", "slot_type_", "=", "it2en_mapping", "[", "slot_type", "]", "\n", "", "else", ":", "\n", "            ", "slot_type_", "=", "slot_type", "\n", "", "class_type_dict", "[", "slot_type", "]", "=", "dialogue_ontology", "[", "slot_type_", "]", "[", "lang", "]", "\n", "\n", "", "with", "codecs", ".", "open", "(", "params", ".", "ontology_mapping_path", ",", "'r'", ",", "'utf8'", ")", "as", "f", ":", "\n", "        ", "ontology_mapping", "=", "json", ".", "load", "(", "f", ")", "\n", "", "lang_dict", "=", "{", "\"en\"", ":", "0", ",", "\"de\"", ":", "1", ",", "\"it\"", ":", "2", "}", "\n", "ontology_vocab", "=", "[", "]", "\n", "lang_id", "=", "lang_dict", "[", "lang", "]", "\n", "for", "item", "in", "ontology_mapping", ":", "\n", "        ", "ontology_vocab", ".", "append", "(", "item", "[", "lang_id", "]", ")", "\n", "\n", "", "binarized_turns", "=", "[", "]", "\n", "\n", "logger", ".", "info", "(", "\"Binarizing data ...\"", ")", "\n", "for", "i", ",", "each_turn", "in", "enumerate", "(", "turns", ")", ":", "\n", "        ", "binarized_utter", ",", "binarized_acts_inform_slot", ",", "binarized_acts_slot_type", ",", "binarized_acts_slot_value", ",", "binarized_slots", ",", "binarized_slot_values", ",", "binarized_request_values", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "dialogue_idx", ",", "utterance", ",", "acts_inform_slots", ",", "acts_slot_type", ",", "acts_slot_value", ",", "test_label", ",", "turn_label", "=", "each_turn", "\n", "\n", "labels", "=", "test_label", "if", "isTestset", "==", "True", "else", "turn_label", "\n", "\n", "# binarize data", "\n", "utter_splits", "=", "utterance", ".", "split", "(", ")", "\n", "binarized_utter", "=", "[", "vocab", ".", "word2index", "[", "tok", "]", "for", "tok", "in", "utter_splits", "]", "\n", "binarized_acts_inform_slot", "=", "[", "ontology_vocab", ".", "index", "(", "slot", ")", "for", "slot", "in", "acts_inform_slots", "]", "\n", "binarized_acts_slot_type", "=", "[", "ontology_vocab", ".", "index", "(", "s_type", ")", "for", "s_type", "in", "acts_slot_type", "]", "\n", "binarized_acts_slot_value", "=", "[", "ontology_vocab", ".", "index", "(", "s_value", ")", "for", "s_value", "in", "acts_slot_value", "]", "\n", "\n", "for", "label_slot", ",", "label_value", "in", "labels", ".", "items", "(", ")", ":", "\n", "\n", "            ", "binarized_slots", ".", "append", "(", "ontology_vocab", ".", "index", "(", "label_slot", ")", ")", "\n", "if", "label_value", "==", "\"none\"", ":", "\n", "                ", "binarized_slot_values", ".", "append", "(", "len", "(", "class_type_dict", "[", "label_slot", "]", ")", ")", "# label for none", "\n", "", "else", ":", "\n", "                ", "if", "type", "(", "label_value", ")", "is", "list", ":", "\n", "                    ", "r_label", "=", "[", "0", "]", "*", "params", ".", "request_class", "\n", "r_indices", "=", "[", "class_type_dict", "[", "label_slot", "]", ".", "index", "(", "item", ")", "for", "item", "in", "label_value", "]", "\n", "for", "idx", "in", "r_indices", ":", "\n", "                        ", "r_label", "[", "idx", "]", "=", "1", "\n", "", "binarized_request_values", "=", "r_label", "\n", "", "else", ":", "\n", "                    ", "binarized_slot_values", ".", "append", "(", "class_type_dict", "[", "label_slot", "]", ".", "index", "(", "label_value", ")", ")", "\n", "\n", "", "", "", "current_turn", "=", "(", "dialogue_idx", ",", "binarized_utter", ",", "binarized_acts_inform_slot", ",", "binarized_acts_slot_type", ",", "binarized_acts_slot_value", ",", "binarized_slots", ",", "binarized_slot_values", ",", "binarized_request_values", ")", "\n", "\n", "binarized_turns", ".", "append", "(", "current_turn", ")", "\n", "\n", "", "return", "binarized_turns", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.binarize_nlu_data": [[184, 209], ["zip", "intent_set.index", "data_bin[].append", "data_bin[].append", "data_bin[].append", "len", "len", "len", "text_bin.append", "slot_set.index", "slot_bin.append", "len", "len"], "function", ["None"], ["def", "binarize_nlu_data", "(", "data", ",", "intent_set", ",", "slot_set", ",", "vocab", ")", ":", "\n", "    ", "data_bin", "=", "{", "\"text\"", ":", "[", "]", ",", "\"slot\"", ":", "[", "]", ",", "\"intent\"", ":", "[", "]", "}", "\n", "# binarize intent", "\n", "for", "intent", "in", "data", "[", "\"intent\"", "]", ":", "\n", "        ", "index", "=", "intent_set", ".", "index", "(", "intent", ")", "\n", "data_bin", "[", "\"intent\"", "]", ".", "append", "(", "index", ")", "\n", "# binarize text", "\n", "", "for", "text_tokens", "in", "data", "[", "\"text\"", "]", ":", "\n", "        ", "text_bin", "=", "[", "]", "\n", "for", "token", "in", "text_tokens", ":", "\n", "            ", "text_bin", ".", "append", "(", "vocab", ".", "word2index", "[", "token", "]", ")", "\n", "", "data_bin", "[", "\"text\"", "]", ".", "append", "(", "text_bin", ")", "\n", "# binarize slot", "\n", "", "for", "slot", "in", "data", "[", "\"slot\"", "]", ":", "\n", "        ", "slot_bin", "=", "[", "]", "\n", "for", "slot_item", "in", "slot", ":", "\n", "            ", "index", "=", "slot_set", ".", "index", "(", "slot_item", ")", "\n", "slot_bin", ".", "append", "(", "index", ")", "\n", "", "data_bin", "[", "\"slot\"", "]", ".", "append", "(", "slot_bin", ")", "\n", "\n", "", "assert", "len", "(", "data_bin", "[", "\"slot\"", "]", ")", "==", "len", "(", "data_bin", "[", "\"text\"", "]", ")", "==", "len", "(", "data_bin", "[", "\"intent\"", "]", ")", "\n", "for", "text", ",", "slot", "in", "zip", "(", "data_bin", "[", "\"text\"", "]", ",", "data_bin", "[", "\"slot\"", "]", ")", ":", "\n", "        ", "assert", "len", "(", "text", ")", "==", "len", "(", "slot", ")", "\n", "\n", "", "return", "data_bin", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.load_embedding": [[210, 217], ["logging.getLogger", "logging.getLogger", "logging.getLogger.info", "numpy.load"], "function", ["None"], ["", "def", "load_embedding", "(", "emb_file", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "'Loading embedding file: %s'", "%", "emb_file", ")", "\n", "\n", "embedding", "=", "np", ".", "load", "(", "emb_file", ")", "\n", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.load_embedding2": [[218, 242], ["logging.getLogger", "logging.getLogger", "numpy.zeros", "logging.getLogger.info", "open", "logging.getLogger.info", "enumerate", "logging.getLogger.info", "line.strip.strip", "line.strip.split", "embedded_words.append", "len", "float"], "function", ["None"], ["", "def", "load_embedding2", "(", "vocab", ",", "emb_dim", ",", "emb_file", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "embedding", "=", "np", ".", "zeros", "(", "(", "vocab", ".", "n_words", ",", "emb_dim", ")", ")", "\n", "logger", ".", "info", "(", "\"embedding: %d x %d\"", "%", "(", "vocab", ".", "n_words", ",", "emb_dim", ")", ")", "\n", "assert", "emb_file", "is", "not", "None", "\n", "with", "open", "(", "emb_file", ",", "\"r\"", ")", "as", "ef", ":", "\n", "        ", "logger", ".", "info", "(", "'Loading embedding file: %s'", "%", "emb_file", ")", "\n", "pre_trained", "=", "0", "\n", "embedded_words", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "ef", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "continue", "# first line would be \"num of words and dimention\"", "\n", "line", "=", "line", ".", "strip", "(", ")", "\n", "sp", "=", "line", ".", "split", "(", ")", "\n", "try", ":", "\n", "                ", "assert", "len", "(", "sp", ")", "==", "emb_dim", "+", "1", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "if", "sp", "[", "0", "]", "in", "vocab", ".", "word2index", "and", "sp", "[", "0", "]", "not", "in", "embedded_words", ":", "\n", "                ", "pre_trained", "+=", "1", "\n", "embedding", "[", "vocab", ".", "word2index", "[", "sp", "[", "0", "]", "]", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "sp", "[", "1", ":", "]", "]", "\n", "embedded_words", ".", "append", "(", "sp", "[", "0", "]", ")", "\n", "", "", "logger", ".", "info", "(", "\"Pre-train: %d / %d (%.2f)\"", "%", "(", "pre_trained", ",", "vocab", ".", "n_words", ",", "pre_trained", "/", "vocab", ".", "n_words", ")", ")", "\n", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.zliucr_mixed-language-training.src.utils.load_ontology_embedding": [[243, 250], ["logging.getLogger", "logging.getLogger", "logging.getLogger.info", "numpy.load"], "function", ["None"], ["", "def", "load_ontology_embedding", "(", "ontology_emb_file", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "'Loading ontology embedding file: %s'", "%", "ontology_emb_file", ")", "\n", "\n", "ontology_embeddings", "=", "np", ".", "load", "(", "ontology_emb_file", ")", "\n", "\n", "return", "ontology_embeddings", "\n", "", ""]]}