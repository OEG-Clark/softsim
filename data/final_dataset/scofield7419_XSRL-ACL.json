{"home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.main.start_train": [[29, 34], ["train.Train", "train.Train.train", "config.logger.info"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.train", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["def", "start_train", "(", "train_iter", ",", "dev_iter", ",", "test_iter", ",", "model", ",", "config", ")", ":", "\n", "    ", "t", "=", "Train", "(", "train_iter", "=", "train_iter", ",", "dev_iter", "=", "dev_iter", ",", "test_iter", "=", "test_iter", ",", "model", "=", "model", ",", "config", "=", "config", ")", "\n", "t", ".", "train", "(", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"Finish Train.\"", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.main.start_test": [[36, 43], ["config.logger.info", "inference.load_test_data", "inference.Inference", "inference.Inference.infer2file", "config.logger.info"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.load_test_data", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.infer2file", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "start_test", "(", "train_iter", ",", "dev_iter", ",", "test_iter", ",", "model", ",", "alphabet", ",", "config", ")", ":", "\n", "    ", "config", ".", "logger", ".", "info", "(", "\"\\nTesting Start......\"", ")", "\n", "data", ",", "path_source", ",", "path_result", "=", "load_test_data", "(", "train_iter", ",", "dev_iter", ",", "test_iter", ",", "config", ")", "\n", "infer", "=", "Inference", "(", "model", "=", "model", ",", "data", "=", "data", ",", "path_source", "=", "path_source", ",", "path_result", "=", "path_result", ",", "alphabet", "=", "alphabet", ",", "\n", "use_crf", "=", "config", ".", "use_crf", ",", "config", "=", "config", ")", "\n", "infer", ".", "infer2file", "(", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"Finished Test.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.main.load_vocab_elmo": [[45, 49], ["open", "item.strip", "f.readlines"], "function", ["None"], ["", "def", "load_vocab_elmo", "(", "elmo_vocab_path", ")", ":", "\n", "    ", "with", "open", "(", "elmo_vocab_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "elmo_vocab", "=", "[", "item", ".", "strip", "(", ")", "for", "item", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "elmo_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.main.main": [[51, 109], ["main.load_vocab_elmo", "DataUtils.mainHelp.prepare_data", "DataUtils.mainHelp.get_learning_algorithm", "DataUtils.mainHelp.load_model", "os.path.exists", "os.mkdir", "config.logger.info", "DataLoader", "DataLoader.load", "config.logger.info", "Iterators", "Iterators.createSetIterator", "Iterators.createSetIterator", "Iterators.createSetIterator", "train.Train", "train.Train.train", "config.logger.info", "main.multi_lingual_eval", "enumerate", "DataUtils.mainHelp.get_file_path", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.main.load_vocab_elmo", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.prepare_data", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.get_learning_algorithm", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.load_model", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators.createSetIterator", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators.createSetIterator", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators.createSetIterator", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.train", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.main.multi_lingual_eval", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.get_file_path"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "save_model_dir", ")", ":", "os", ".", "mkdir", "(", "config", ".", "save_model_dir", ")", "\n", "\n", "s_domains", "=", "[", "\n", "'UP_English'", ",", "\n", "'UP_German'", ",", "\n", "'UP_French'", ",", "\n", "'UP_Finnish'", ",", "\n", "'UP_Italian'", ",", "\n", "'UP_Portuguese'", ",", "\n", "'UP_Spanish'", ",", "\n", "]", "\n", "lang2id", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "s_domains", ")", "}", "\n", "\n", "t_domain", "=", "s_domains", "[", "1", "]", "\n", "\n", "config", ".", "elmo_vocab", "=", "load_vocab_elmo", "(", "config", ".", "elmo_vocab_path", ")", "\n", "\n", "prepare_data", "(", "config", ",", "s_domains", ")", "\n", "\n", "config", ".", "learning_algorithm", "=", "get_learning_algorithm", "(", "config", ")", "\n", "\n", "model", "=", "load_model", "(", "config", ",", "lang2id", ")", "\n", "\n", "\n", "if", "config", ".", "mode", "==", "'train'", ":", "\n", "# loading digitalized data for English", "\n", "        ", "config", ".", "logger", ".", "info", "(", "'loading for [%s] .'", "%", "','", ".", "join", "(", "s_domains", ")", ")", "\n", "\n", "training_paths", ",", "eval_paths", ",", "test_paths", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "for", "s_domain", "in", "s_domains", ":", "\n", "            ", "training_path", ",", "eval_path", ",", "test_path", "=", "get_file_path", "(", "config", ",", "s_domain", ")", "\n", "training_paths", "[", "s_domain", "]", "=", "training_path", "\n", "eval_paths", "[", "s_domain", "]", "=", "eval_path", "\n", "test_paths", "[", "s_domain", "]", "=", "test_path", "\n", "\n", "", "data_loader", "=", "DataLoader", "(", "domains", "=", "s_domains", ",", "path", "=", "[", "training_paths", ",", "eval_paths", ",", "test_paths", "]", ",", "shuffle", "=", "True", ",", "\n", "config", "=", "config", ")", "\n", "train_data", ",", "dev_data", ",", "test_data", "=", "data_loader", ".", "load", "(", ")", "\n", "\n", "config", ".", "logger", ".", "info", "(", "\"train sentence {}, dev sentence {}, test sentence {}.\"", ".", "\n", "format", "(", "len", "(", "train_data", ")", ",", "len", "(", "dev_data", ")", ",", "len", "(", "test_data", ")", ")", ")", "\n", "\n", "create_iter", "=", "Iterators", "(", "domains", "=", "s_domains", ",", "lang2id", "=", "lang2id", ",", "\n", "batch_size", "=", "[", "config", ".", "batch_size", ",", "config", ".", "dev_batch_size", ",", "config", ".", "test_batch_size", "]", ",", "\n", "data", "=", "[", "train_data", ",", "dev_data", ",", "test_data", "]", ",", "device", "=", "config", ".", "device", ",", "config", "=", "config", ")", "\n", "\n", "train_iter", "=", "create_iter", ".", "createSetIterator", "(", "0", ")", "\n", "dev_iter", "=", "create_iter", ".", "createSetIterator", "(", "1", ",", "T_domain", "=", "t_domain", ",", "isTrain", "=", "False", ")", "\n", "test_iter", "=", "create_iter", ".", "createSetIterator", "(", "2", ",", "T_domain", "=", "t_domain", ",", "isTrain", "=", "False", ")", "\n", "\n", "\n", "trainer", "=", "Train", "(", "target", "=", "t_domain", ",", "train_iter", "=", "train_iter", ",", "dev_iter", "=", "dev_iter", ",", "test_iter", "=", "test_iter", ",", "model", "=", "model", ",", "config", "=", "config", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"Finish Train.\"", ")", "\n", "\n", "multi_lingual_eval", "(", "trainer", ",", "[", "t_domain", "]", ",", "model", ",", "lang2id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.main.multi_lingual_eval": [[112, 147], ["config.logger.info", "config.logger.info", "config.logger.info", "DataUtils.mainHelp.get_file_path", "DataLoader", "DataLoader.load_single", "config.logger.info", "config.logger.info", "Iterators", "Iterators.createSetIterator", "config.logger.info", "config.logger.info", "trainer.eval_external_batch", "config.logger.info", "Iterators.createSetIterator", "trainer.eval_external_batch", "config.logger.info", "Iterators.createSetIterator", "trainer.eval_external_batch", "config.logger.info", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.get_file_path", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoader.load_single", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators.createSetIterator", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train.eval_external_batch", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators.createSetIterator", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train.eval_external_batch", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators.createSetIterator", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train.eval_external_batch", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "", "def", "multi_lingual_eval", "(", "trainer", ",", "ordered_domains", ",", "model", ",", "lang2id", ")", ":", "\n", "    ", "config", ".", "logger", ".", "info", "(", "'\\n\\n'", ")", "\n", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "50", ")", "\n", "\n", "for", "domain", "in", "ordered_domains", ":", "\n", "        ", "config", ".", "logger", ".", "info", "(", "'evaluate for %s .'", "%", "domain", ")", "\n", "\n", "training_path", ",", "eval_path", ",", "test_path", "=", "get_file_path", "(", "config", ",", "domain", ")", "\n", "data_loader", "=", "DataLoader", "(", "domains", "=", "[", "domain", "]", ",", "path", "=", "[", "training_path", ",", "eval_path", ",", "test_path", "]", ",", "shuffle", "=", "True", ",", "\n", "config", "=", "config", ")", "\n", "train_data", ",", "dev_data", ",", "test_data", "=", "data_loader", ".", "load_single", "(", "domain", ")", "\n", "config", ".", "logger", ".", "info", "(", "'done for loading data.'", ")", "\n", "\n", "config", ".", "logger", ".", "info", "(", "\"train sentence {}, dev sentence {}, test sentence {}.\"", ".", "\n", "format", "(", "len", "(", "train_data", ")", ",", "len", "(", "dev_data", ")", ",", "len", "(", "test_data", ")", ")", ")", "\n", "\n", "create_iter", "=", "Iterators", "(", "domains", "=", "[", "domain", "]", ",", "lang2id", "=", "lang2id", ",", "\n", "batch_size", "=", "[", "config", ".", "batch_size", ",", "config", ".", "dev_batch_size", ",", "config", ".", "test_batch_size", "]", ",", "\n", "data", "=", "[", "train_data", ",", "dev_data", ",", "test_data", "]", ",", "device", "=", "config", ".", "device", ",", "config", "=", "config", ")", "\n", "\n", "train_iter", "=", "create_iter", ".", "createSetIterator", "(", "0", ",", "T_domain", "=", "domain", ",", "isTrain", "=", "False", ")", "\n", "\n", "config", ".", "logger", ".", "info", "(", "\"evaluation on dev on %s...\"", "%", "domain", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"evaluation on train on %s...\"", "%", "domain", ")", "\n", "trainer", ".", "eval_external_batch", "(", "train_iter", ",", "config", ",", "domain", ")", "\n", "\n", "config", ".", "logger", ".", "info", "(", "\"evaluation on dev on %s...\"", "%", "domain", ")", "\n", "dev_iter", "=", "create_iter", ".", "createSetIterator", "(", "1", ",", "T_domain", "=", "domain", ",", "isTrain", "=", "False", ")", "\n", "trainer", ".", "eval_external_batch", "(", "dev_iter", ",", "config", ",", "domain", ")", "\n", "\n", "config", ".", "logger", ".", "info", "(", "\"evaluation on test on %s...\"", "%", "domain", ")", "\n", "test_iter", "=", "create_iter", ".", "createSetIterator", "(", "2", ",", "T_domain", "=", "domain", ",", "isTrain", "=", "False", ")", "\n", "trainer", ".", "eval_external_batch", "(", "test_iter", ",", "config", ",", "domain", ")", "\n", "\n", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.main.get_logger": [[149, 169], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler"], "function", ["None"], ["", "", "def", "get_logger", "(", "log_dir", ")", ":", "\n", "    ", "log_file", "=", "log_dir", "# + \"/\" + (datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S.log'))", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(message)s'", ")", "\n", "\n", "# log into file", "\n", "handler", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "\n", "# log into terminal", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "console", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.main.parse_argument": [[171, 194], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "Config.Configurable", "datetime.datetime.now().strftime", "os.path.join", "os.path.join", "main.get_logger", "os.path.isdir", "os.makedirs", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.get_logger"], ["", "def", "parse_argument", "(", ")", ":", "\n", "    ", "\"\"\"\n    :argument\n    :return:\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"multi-SRL\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "\"--config\"", ",", "dest", "=", "\"config_file\"", ",", "type", "=", "str", ",", "default", "=", "\"./Config/config.cfg\"", ",", "\n", "help", "=", "\"config path\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", "=", "configurable", ".", "Configurable", "(", "config_file", "=", "args", ".", "config_file", ")", "\n", "\n", "# save file", "\n", "config", ".", "mulu", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d_%H-%M-%S'", ")", "\n", "\n", "subset_name_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "save_checkpoint", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "subset_name_dir", ")", ":", "os", ".", "makedirs", "(", "subset_name_dir", ")", "\n", "\n", "config", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "subset_name_dir", ",", "config", ".", "mulu", "+", "'.log'", ")", "\n", "\n", "logger", "=", "get_logger", "(", "config", ".", "save_dir", ")", "\n", "config", ".", "logger", "=", "logger", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.main.set_cuda": [[196, 205], ["config.logger.info", "print", "torch.cuda.set_device", "config.logger.info", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "config.logger.info", "int", "torch.cuda.initial_seed", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "set_cuda", "(", ")", ":", "\n", "    ", "config", ".", "logger", ".", "info", "(", "\"\\nUsing GPU To Train......\"", ")", "\n", "device_number", "=", "config", ".", "device", "[", "-", "1", "]", "\n", "print", "(", "device_number", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "int", "(", "device_number", ")", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"Current Cuda Device {}\"", ".", "format", "(", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed_num", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed_num", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"torch.cuda.initial_seed\"", ",", "torch", ".", "cuda", ".", "initial_seed", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.inference.Inference.__init__": [[69, 88], ["config.logger.info"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["def", "__init__", "(", "self", ",", "model", ",", "data", ",", "path_source", ",", "path_result", ",", "alphabet", ",", "use_crf", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        :param model:  nn model\n        :param data:  infer data\n        :param path_source:  source data path\n        :param path_result:  result data path\n        :param alphabet:  alphabet\n        :param config:  config\n        \"\"\"", "\n", "self", ".", "config", "=", "config", "\n", "\n", "config", ".", "logger", ".", "info", "(", "\"Initialize T_Inference\"", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "path_source", "=", "path_source", "\n", "self", ".", "path_result", "=", "path_result", "\n", "self", ".", "alphabet", "=", "alphabet", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "use_crf", "=", "use_crf", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.inference.Inference.infer2file": [[89, 124], ["inference.Inference.config.logger.info", "inference.Inference.config.logger.info", "inference.Inference.config.logger.info", "inference.Inference.model.eval", "len", "inference.Inference.config.logger.info", "inference.Inference.write2file", "inference.Inference.config.logger.info", "inference.Inference._get_model_args", "inference.Inference.model", "DataUtils.utils.torch_max", "range", "inference.Inference.model.crf_layer", "range", "range", "predict_label.append", "best_paths[].cpu().data.numpy", "predict_label.append", "inference.Inference.alphabet.label_alphabet.from_id", "inference.Inference.alphabet.label_alphabet.from_id", "best_paths[].cpu"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.write2file", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference._get_model_args", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.torch_max", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_id", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_id"], ["", "def", "infer2file", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: None\n        \"\"\"", "\n", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'\\n\\n'", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "20", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"infer.....\"", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "predict_labels", "=", "[", "]", "\n", "predict_label", "=", "[", "]", "\n", "all_count", "=", "len", "(", "self", ".", "data", ")", "\n", "now_count", "=", "0", "\n", "for", "data", "in", "self", ".", "data", ":", "\n", "            ", "now_count", "+=", "1", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"infer with batch number {}/{} .\"", ".", "format", "(", "now_count", ",", "all_count", ")", ")", "\n", "word", ",", "char", ",", "mask", ",", "sentence_length", ",", "tags", "=", "self", ".", "_get_model_args", "(", "data", ")", "\n", "logit", "=", "self", ".", "model", "(", "word", ",", "char", ",", "sentence_length", ",", "train", "=", "False", ")", "\n", "if", "self", ".", "use_crf", "is", "False", ":", "\n", "                ", "predict_ids", "=", "torch_max", "(", "logit", ")", "\n", "for", "id_batch", "in", "range", "(", "data", ".", "batch_length", ")", ":", "\n", "                    ", "inst", "=", "data", ".", "inst", "[", "id_batch", "]", "\n", "label_ids", "=", "predict_ids", "[", "id_batch", "]", "\n", "for", "id_word", "in", "range", "(", "inst", ".", "words_size", ")", ":", "\n", "                        ", "predict_label", ".", "append", "(", "self", ".", "alphabet", ".", "label_alphabet", ".", "from_id", "(", "label_ids", "[", "id_word", "]", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "path_score", ",", "best_paths", "=", "self", ".", "model", ".", "crf_layer", "(", "logit", ",", "mask", ")", "\n", "for", "id_batch", "in", "range", "(", "data", ".", "batch_length", ")", ":", "\n", "                    ", "inst", "=", "data", ".", "inst", "[", "id_batch", "]", "\n", "label_ids", "=", "best_paths", "[", "id_batch", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", "inst", ".", "words_size", "]", "\n", "for", "i", "in", "label_ids", ":", "\n", "                        ", "predict_label", ".", "append", "(", "self", ".", "alphabet", ".", "label_alphabet", ".", "from_id", "(", "i", ")", ")", "\n", "\n", "", "", "", "", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\ninfer finished.\"", ")", "\n", "self", ".", "write2file", "(", "self", ".", "config", ",", "result", "=", "predict_label", ",", "path_source", "=", "self", ".", "path_source", ",", "path_result", "=", "self", ".", "path_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.inference.Inference.write2file": [[125, 155], ["config.logger.info", "config.logger.info", "config.logger.info", "os.path.exists", "open", "open.close", "config.logger.info", "os.path.exists", "config.logger.info", "os.remove", "open", "file.readlines", "line.strip().split.strip().split.strip().split", "line.strip().split.strip().split.append", "open.write", "open.write", "len", "line.strip().split.strip().split.strip"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "@", "staticmethod", "\n", "def", "write2file", "(", "config", ",", "result", ",", "path_source", ",", "path_result", ")", ":", "\n", "        ", "\"\"\"\n        :param result:\n        :param path_source:\n        :param path_result:\n        :return:\n        \"\"\"", "\n", "config", ".", "logger", ".", "info", "(", "'\\n\\n'", ")", "\n", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "20", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"write result to file {}\"", ".", "format", "(", "path_result", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path_source", ")", "is", "False", ":", "\n", "            ", "config", ".", "logger", ".", "info", "(", "\"source data path[path_source] is not exist.\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "path_result", ")", ":", "\n", "            ", "os", ".", "remove", "(", "path_result", ")", "\n", "", "file_out", "=", "open", "(", "path_result", ",", "encoding", "=", "\"UTF-8\"", ",", "mode", "=", "\"w\"", ")", "\n", "with", "open", "(", "path_source", ",", "encoding", "=", "\"UTF-8\"", ")", "as", "file", ":", "\n", "            ", "id", "=", "0", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "line", "==", "\"\\n\"", ":", "\n", "                    ", "file_out", ".", "write", "(", "\"\\n\"", ")", "\n", "continue", "\n", "", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "line", ".", "append", "(", "result", "[", "id", "]", ")", "\n", "id", "+=", "1", "\n", "file_out", ".", "write", "(", "\" \"", ".", "join", "(", "line", ")", "+", "\"\\n\"", ")", "\n", "if", "id", ">=", "len", "(", "result", ")", ":", "\n", "                    ", "break", "\n", "", "", "", "file_out", ".", "close", "(", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"\\nfinished.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.inference.Inference._get_model_args": [[156, 168], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_model_args", "(", "batch_features", ")", ":", "\n", "        ", "\"\"\"\n        :param batch_features:  Batch Instance\n        :return:\n        \"\"\"", "\n", "word", "=", "batch_features", ".", "word_features", "\n", "char", "=", "batch_features", ".", "char_features", "\n", "mask", "=", "word", ">", "0", "\n", "sentence_length", "=", "batch_features", ".", "sentence_length", "\n", "tags", "=", "batch_features", ".", "label_features", "\n", "return", "word", ",", "char", ",", "mask", ",", "sentence_length", ",", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.inference.load_test_model": [[7, 28], ["model.load_state_dict", "os.path.join", "os.path.isfile", "config.logger.info", "torch.load", "config.logger.info", "config.logger.info", "exit"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["def", "load_test_model", "(", "model", ",", "config", ")", ":", "\n", "    ", "\"\"\"\n    :param model:  initial model\n    :param config:  config\n    :return:  loaded model\n    \"\"\"", "\n", "if", "config", ".", "t_model", "is", "None", ":", "\n", "        ", "test_model_dir", "=", "config", ".", "save_model_dir", "\n", "test_model_name", "=", "\"{}.pt\"", ".", "format", "(", "config", ".", "model_name", ")", "\n", "test_model_path", "=", "os", ".", "path", ".", "join", "(", "test_model_dir", ",", "test_model_name", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "test_model_path", ")", ":", "\n", "            ", "config", ".", "logger", ".", "info", "(", "\"load default best model from {}\"", ".", "format", "(", "test_model_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "config", ".", "logger", ".", "info", "(", "\"please specify the pre-trained model\"", ")", "\n", "exit", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "test_model_path", "=", "config", ".", "t_model", "\n", "config", ".", "logger", ".", "info", "(", "\"load user model from {}\"", ".", "format", "(", "test_model_path", ")", ")", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "test_model_path", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.inference.load_test_data": [[30, 63], ["config.logger.info", "config.logger.info", "config.logger.info", "config.logger.info", "config.logger.info", "exit"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "load_test_data", "(", "train_iter", "=", "None", ",", "dev_iter", "=", "None", ",", "test_iter", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param train_iter:  train data\n    :param dev_iter:  dev data\n    :param test_iter:  test data\n    :param config:  config\n    :return:  data for test\n    \"\"\"", "\n", "data", ",", "path_source", ",", "path_result", "=", "None", ",", "None", ",", "None", "\n", "if", "config", ".", "t_data", "is", "None", ":", "\n", "        ", "config", ".", "logger", ".", "info", "(", "\"default[test] for model test.\"", ")", "\n", "data", "=", "test_iter", "\n", "path_source", "=", "\".\"", ".", "join", "(", "[", "config", ".", "test_file", ",", "shuffle", "]", ")", "\n", "path_result", "=", "\"{}.out\"", ".", "format", "(", "path_source", ")", "\n", "", "elif", "config", ".", "t_data", "==", "\"train\"", ":", "\n", "        ", "config", ".", "logger", ".", "info", "(", "\"train data for model test.\"", ")", "\n", "data", "=", "train_iter", "\n", "path_source", "=", "\".\"", ".", "join", "(", "[", "config", ".", "train_file", ",", "shuffle", "]", ")", "\n", "path_result", "=", "\"{}.out\"", ".", "format", "(", "path_source", ")", "\n", "", "elif", "config", ".", "t_data", "==", "\"dev\"", ":", "\n", "        ", "config", ".", "logger", ".", "info", "(", "\"dev data for model test.\"", ")", "\n", "data", "=", "dev_iter", "\n", "path_source", "=", "\".\"", ".", "join", "(", "[", "config", ".", "dev_file", ",", "shuffle", "]", ")", "\n", "path_result", "=", "\"{}.out\"", ".", "format", "(", "path_source", ")", "\n", "", "elif", "config", ".", "t_data", "==", "\"test\"", ":", "\n", "        ", "config", ".", "logger", ".", "info", "(", "\"test data for model test.\"", ")", "\n", "data", "=", "test_iter", "\n", "path_source", "=", "\".\"", ".", "join", "(", "[", "config", ".", "test_file", ",", "shuffle", "]", ")", "\n", "path_result", "=", "\"{}.out\"", ".", "format", "(", "path_source", ")", "\n", "", "else", ":", "\n", "        ", "config", ".", "logger", ".", "info", "(", "\"Error value --- t_data = {}, must in [None, 'train', 'dev', 'test'].\"", ".", "format", "(", "config", ".", "t_data", ")", ")", "\n", "exit", "(", ")", "\n", "", "return", "data", ",", "path_source", ",", "path_result", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train.__init__": [[17, 36], ["train.Train.config.logger.info", "DataUtils.Optim.Optimizer", "train.Train._loss", "train.Train.config.logger.info", "train.Train.config.logger.info", "DataUtils.utils.Best_Result", "DataUtils.eval.Eval", "DataUtils.eval.Eval", "DataUtils.eval.Eval"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._loss", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "config", "=", "kwargs", "[", "\"config\"", "]", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Training Start......\"", ")", "\n", "self", ".", "train_iter", "=", "kwargs", "[", "\"train_iter\"", "]", "\n", "self", ".", "dev_iter", "=", "kwargs", "[", "\"dev_iter\"", "]", "\n", "self", ".", "test_iter", "=", "kwargs", "[", "\"test_iter\"", "]", "\n", "self", ".", "model", "=", "kwargs", "[", "\"model\"", "]", "\n", "self", ".", "use_crf", "=", "self", ".", "config", ".", "use_crf", "\n", "self", ".", "target", "=", "kwargs", "[", "\"target\"", "]", "\n", "self", ".", "average_batch", "=", "self", ".", "config", ".", "average_batch", "\n", "self", ".", "early_max_patience", "=", "self", ".", "config", ".", "early_max_patience", "\n", "self", ".", "optimizer", "=", "Optimizer", "(", "name", "=", "self", ".", "config", ".", "learning_algorithm", ",", "model", "=", "self", ".", "model", ",", "lr", "=", "self", ".", "config", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", ",", "grad_clip", "=", "self", ".", "config", ".", "clip_max_norm", ")", "\n", "self", ".", "loss_function", "=", "self", ".", "_loss", "(", "learning_algorithm", "=", "self", ".", "config", ".", "learning_algorithm", ",", "\n", "label_paddingId", "=", "self", ".", "config", ".", "arg_paddingId", ",", "use_crf", "=", "self", ".", "use_crf", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "self", ".", "loss_function", ")", "\n", "self", ".", "best_score", "=", "Best_Result", "(", ")", "\n", "self", ".", "train_eval", ",", "self", ".", "dev_eval", ",", "self", ".", "test_eval", "=", "Eval", "(", ")", ",", "Eval", "(", ")", ",", "Eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train._loss": [[38, 54], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["", "def", "_loss", "(", "self", ",", "learning_algorithm", ",", "label_paddingId", ",", "use_crf", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param learning_algorithm:\n        :param label_paddingId:\n        :param use_crf:\n        :return:\n        \"\"\"", "\n", "if", "use_crf", ":", "\n", "            ", "loss_function", "=", "self", ".", "model", ".", "crf_layer", ".", "neg_log_likelihood_loss", "\n", "return", "loss_function", "\n", "", "elif", "learning_algorithm", "==", "\"SGD\"", ":", "\n", "            ", "loss_function", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "label_paddingId", ",", "reduction", "=", "\"sum\"", ")", "\n", "return", "loss_function", "\n", "", "else", ":", "\n", "            ", "loss_function", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "label_paddingId", ",", "reduction", "=", "\"mean\"", ")", "\n", "return", "loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train._clip_model_norm": [[55, 65], ["isinstance", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "float", "train.Train.model.parameters"], "methods", ["None"], ["", "", "def", "_clip_model_norm", "(", "self", ",", "clip_max_norm_use", ",", "clip_max_norm", ")", ":", "\n", "        ", "\"\"\"\n        :param clip_max_norm_use:  whether to use clip max norm for nn model\n        :param clip_max_norm: clip max norm max values [float or None]\n        :return:\n        \"\"\"", "\n", "if", "clip_max_norm_use", "is", "True", ":", "\n", "            ", "gclip", "=", "None", "if", "clip_max_norm", "==", "\"None\"", "else", "float", "(", "clip_max_norm", ")", "\n", "assert", "isinstance", "(", "gclip", ",", "float", ")", "\n", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "max_norm", "=", "gclip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train._dynamic_lr": [[66, 78], ["max", "DataUtils.utils.set_lrate"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.set_lrate"], ["", "", "def", "_dynamic_lr", "(", "self", ",", "config", ",", "epoch", ",", "new_lr", ")", ":", "\n", "        ", "\"\"\"\n        :param config:  config\n        :param epoch:  epoch\n        :param new_lr:  learning rate\n        :return:\n        \"\"\"", "\n", "if", "config", ".", "use_lr_decay", "is", "True", "and", "epoch", ">", "config", ".", "max_patience", "and", "(", "\n", "epoch", "-", "1", ")", "%", "config", ".", "max_patience", "==", "0", "and", "new_lr", ">", "config", ".", "min_lrate", ":", "\n", "            ", "new_lr", "=", "max", "(", "new_lr", "*", "config", ".", "lr_rate_decay", ",", "config", ".", "min_lrate", ")", "\n", "set_lrate", "(", "self", ".", "optimizer", ",", "new_lr", ")", "\n", "", "return", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train._decay_learning_rate": [[79, 90], ["None"], "methods", ["None"], ["", "def", "_decay_learning_rate", "(", "self", ",", "epoch", ",", "init_lr", ")", ":", "\n", "        ", "\"\"\"lr decay \n\n        Args:\n            epoch: int, epoch \n            init_lr:  initial lr\n        \"\"\"", "\n", "lr", "=", "init_lr", "/", "(", "1", "+", "self", ".", "config", ".", "lr_rate_decay", "*", "epoch", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "self", ".", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train._optimizer_batch_step": [[91, 100], ["train.Train.optimizer.step", "train.Train.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.step", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.zero_grad"], ["", "def", "_optimizer_batch_step", "(", "self", ",", "config", ",", "backward_count", ")", ":", "\n", "        ", "\"\"\"\n        :param config:\n        :param backward_count:\n        :return:\n        \"\"\"", "\n", "if", "backward_count", "%", "config", ".", "backward_batch_size", "==", "0", ":", "# or backward_count == self.train_iter_len:", "\n", "            ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train._early_stop": [[101, 121], ["train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.save_training_summary"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.save_training_summary"], ["", "", "def", "_early_stop", "(", "self", ",", "epoch", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        :param epoch:\n        :return:\n        \"\"\"", "\n", "best_epoch", "=", "self", ".", "best_score", ".", "best_epoch", "\n", "if", "epoch", ">", "best_epoch", ":", "\n", "            ", "self", ".", "best_score", ".", "early_current_patience", "+=", "1", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"Dev Has Not Promote {} / {}\"", ".", "format", "(", "self", ".", "best_score", ".", "early_current_patience", ",", "self", ".", "early_max_patience", ")", ")", "\n", "if", "self", ".", "best_score", ".", "early_current_patience", ">=", "self", ".", "early_max_patience", ":", "\n", "                ", "self", ".", "end_of_epoch", "=", "epoch", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"\\n\\nEarly Stop Train. Best Score Locate on {} Epoch.\"", ".", "format", "(", "self", ".", "best_score", ".", "best_epoch", ")", ")", "\n", "self", ".", "save_training_summary", "(", ")", "\n", "return", "True", "# exit()", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train._get_model_args": [[122, 139], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_model_args", "(", "batch_features", ")", ":", "\n", "        ", "\"\"\"\n        :param batch_features:  Batch Instance\n        :return:\n        \"\"\"", "\n", "elmo_char_seqs", "=", "batch_features", ".", "elmo_char_seqs", "\n", "elmo_word_seqs", "=", "batch_features", ".", "elmo_word_seqs", "\n", "word", "=", "batch_features", ".", "word_features", "\n", "lang", "=", "batch_features", ".", "lang", "\n", "pos", "=", "batch_features", ".", "pos_features", "\n", "prd", "=", "batch_features", ".", "prd_features", "\n", "x_prd_posi", "=", "batch_features", ".", "prd_posi_features", "\n", "mask", "=", "batch_features", ".", "mask", "\n", "sentence_length", "=", "batch_features", ".", "sentence_length", "\n", "tags", "=", "batch_features", ".", "label_features", "\n", "return", "elmo_char_seqs", ",", "elmo_word_seqs", ",", "word", ",", "lang", ",", "pos", ",", "prd", ",", "x_prd_posi", ",", "mask", ",", "sentence_length", ",", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train._calculate_loss": [[140, 158], ["feats.view", "tags.view.view.view", "train.Train.loss_function", "train.Train.loss_function", "feats.size", "float", "feats.size", "feats.size"], "methods", ["None"], ["", "def", "_calculate_loss", "(", "self", ",", "feats", ",", "mask", ",", "tags", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            feats: size = (batch_size, seq_len, tag_size)\n            mask: size = (batch_size, seq_len)\n            tags: size = (batch_size, seq_len)\n        \"\"\"", "\n", "if", "not", "self", ".", "use_crf", ":", "\n", "            ", "batch_size", ",", "max_len", "=", "feats", ".", "size", "(", "0", ")", ",", "feats", ".", "size", "(", "1", ")", "\n", "lstm_feats", "=", "feats", ".", "view", "(", "batch_size", "*", "max_len", ",", "-", "1", ")", "\n", "tags", "=", "tags", ".", "view", "(", "-", "1", ")", "\n", "return", "self", ".", "loss_function", "(", "lstm_feats", ",", "tags", ")", "\n", "", "else", ":", "\n", "            ", "loss_value", "=", "self", ".", "loss_function", "(", "feats", ",", "mask", ",", "tags", ")", "\n", "", "if", "self", ".", "average_batch", ":", "\n", "            ", "batch_size", "=", "feats", ".", "size", "(", "0", ")", "\n", "loss_value", "/=", "float", "(", "batch_size", ")", "\n", "", "return", "loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train.train": [[159, 212], ["train.Train.config.logger.info", "train.Train.config.logger.info", "range", "train.Train.save_training_summary", "train.Train.train_iter.reset_flag4trainset", "train.Train.config.logger.info", "train.Train._decay_learning_rate", "train.Train.config.logger.info", "time.time", "train.Train.model.train", "train.Train.optimizer.zero_grad", "train.Train.config.logger.info", "tqdm.tqdm", "train.Train.config.logger.info", "time.time", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.eval", "train.Train.config.logger.info", "train.Train._early_stop", "train.Train.config.logger.info", "train.Train._get_model_args", "train.Train.model", "train.Train._calculate_loss", "train.Train.backward", "train.Train._clip_model_norm", "train.Train._optimizer_batch_step", "train.Train.getAccCRF", "train.Train.getAcc", "train.Train.optimizer.param_groups[].get", "train.Train.item"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.save_training_summary", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators.reset_flag4trainset", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._decay_learning_rate", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.train", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.zero_grad", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._early_stop", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference._get_model_args", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._calculate_loss", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._clip_model_norm", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._optimizer_batch_step", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train.getAccCRF", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.getAcc"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "epochs", "=", "self", ".", "config", ".", "epochs", "\n", "clip_max_norm_use", "=", "self", ".", "config", ".", "clip_max_norm_use", "\n", "clip_max_norm", "=", "self", ".", "config", ".", "clip_max_norm", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'\\n\\n'", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "50", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", "+", "1", ")", ":", "\n", "            ", "self", ".", "train_iter", ".", "reset_flag4trainset", "(", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\n\\n### Epoch: {}/{} ###\"", ".", "format", "(", "epoch", ",", "epochs", ")", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "_decay_learning_rate", "(", "epoch", "=", "epoch", "-", "1", ",", "init_lr", "=", "self", ".", "config", ".", "learning_rate", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"current lr: {}\"", ".", "format", "(", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", ".", "get", "(", "\"lr\"", ")", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "steps", "=", "1", "\n", "backward_count", "=", "0", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "10", ")", "\n", "batch_count", "=", "0", "\n", "for", "batch_features", "in", "tqdm", ".", "tqdm", "(", "self", ".", "train_iter", ")", ":", "\n", "                ", "batch_count", "+=", "1", "\n", "backward_count", "+=", "1", "\n", "elmo_char_seqs", ",", "elmo_word_seqs", ",", "word", ",", "lang", ",", "pos", ",", "prd", ",", "x_prd_posi", ",", "mask", ",", "sentence_length", ",", "tags", "=", "self", ".", "_get_model_args", "(", "\n", "batch_features", ")", "\n", "logit", "=", "self", ".", "model", "(", "elmo_char_seqs", ",", "elmo_word_seqs", ",", "word", ",", "lang", ",", "pos", ",", "prd", ",", "x_prd_posi", ",", "mask", ",", "sentence_length", ",", "\n", "train", "=", "True", ")", "\n", "loss", "=", "self", ".", "_calculate_loss", "(", "logit", ",", "mask", ",", "tags", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "_clip_model_norm", "(", "clip_max_norm_use", ",", "clip_max_norm", ")", "\n", "self", ".", "_optimizer_batch_step", "(", "config", "=", "self", ".", "config", ",", "backward_count", "=", "backward_count", ")", "\n", "steps", "+=", "1", "\n", "\n", "", "if", "self", ".", "use_crf", "is", "True", ":", "\n", "                ", "p", ",", "r", ",", "f", ",", "acc_", "=", "self", ".", "getAccCRF", "(", "self", ".", "train_eval", ",", "batch_features", ",", "logit", ",", "mask", ",", "self", ".", "config", ")", "\n", "", "else", ":", "\n", "                ", "p", ",", "r", ",", "f", ",", "acc_", "=", "self", ".", "getAcc", "(", "self", ".", "train_eval", ",", "batch_features", ",", "logit", ",", "self", ".", "config", ")", "\n", "", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"batch_count:{} , loss: {:.4f}, p: {:.4f}%  r: {:.4f}% , f: {:.4f}%, ACC: {:.4f}%\"", ".", "format", "(", "\n", "batch_count", ",", "loss", ".", "item", "(", ")", ",", "p", ",", "r", ",", "f", ",", "acc_", ")", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Train Time {:.3f}\"", ".", "format", "(", "end_time", "-", "start_time", ")", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "10", ")", "\n", "self", ".", "eval", "(", "model", "=", "self", ".", "model", ",", "epoch", "=", "epoch", ",", "config", "=", "self", ".", "config", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "10", ")", "\n", "if", "self", ".", "_early_stop", "(", "epoch", "=", "epoch", ",", "config", "=", "self", ".", "config", ")", ":", "\n", "                ", "return", "\n", "", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "15", ")", "\n", "\n", "", "self", ".", "save_training_summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train.save_training_summary": [[213, 248], ["train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.config.logger.info"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "save_training_summary", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Copy the last model ckps to {} as backup.\"", ".", "format", "(", "self", ".", "config", ".", "save_dir", ")", ")", "\n", "\n", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"save the training summary at end of the log file.\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\n\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*\"", "*", "25", ")", "\n", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*\"", "*", "10", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"features:\"", ")", "\n", "if", "self", ".", "config", ".", "is_predicate", ":", "\n", "            ", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\tpredicate, dim: %d\"", "%", "self", ".", "config", ".", "prd_embed_dim", ")", "\n", "\n", "\n", "", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*\"", "*", "10", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"model:\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "self", ".", "model", ")", "\n", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*\"", "*", "10", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"training:\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'\\tbatch size: %d'", "%", "self", ".", "config", ".", "batch_size", ")", "\n", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*\"", "*", "10", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"best performance:\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\tbest at epoch: %d\"", "%", "self", ".", "best_score", ".", "best_epoch", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\tdev(%):\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\t\\tprecision, %.5f\"", "%", "self", ".", "best_score", ".", "best_dev_p_score", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\t\\trecall, %.5f\"", "%", "self", ".", "best_score", ".", "best_dev_r_score", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\t\\tf1, %.5f\"", "%", "self", ".", "best_score", ".", "best_dev_f1_score", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\ttest(%):\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\t\\tprecision, %.5f\"", "%", "self", ".", "best_score", ".", "p", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\t\\trecall, %.5f\"", "%", "self", ".", "best_score", ".", "r", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\t\\tf1, %.5f\"", "%", "self", ".", "best_score", ".", "f", ")", "\n", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*\"", "*", "25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train.eval": [[249, 269], ["train.Train.dev_eval.clear_PRF", "time.time", "train.Train.eval_batch", "time.time", "train.Train.config.logger.info", "train.Train.config.logger.info", "train.Train.test_eval.clear_PRF", "time.time", "train.Train.eval_batch", "time.time", "train.Train.config.logger.info"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.clear_PRF", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval_batch", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.clear_PRF", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval_batch", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "eval", "(", "self", ",", "model", ",", "epoch", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        :param model: nn model\n        :param epoch:  epoch\n        :param config:  config\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "dev_eval", ".", "clear_PRF", "(", ")", "\n", "eval_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "eval_batch", "(", "self", ".", "dev_iter", ",", "model", ",", "self", ".", "dev_eval", ",", "self", ".", "best_score", ",", "epoch", ",", "config", ",", "test", "=", "False", ")", "\n", "eval_end_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Dev Time: {:.3f}\"", ".", "format", "(", "eval_end_time", "-", "eval_start_time", ")", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "10", ")", "\n", "\n", "self", ".", "test_eval", ".", "clear_PRF", "(", ")", "\n", "eval_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "eval_batch", "(", "self", ".", "test_iter", ",", "model", ",", "self", ".", "test_eval", ",", "self", ".", "best_score", ",", "epoch", ",", "config", ",", "test", "=", "True", ")", "\n", "eval_end_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Test Time: {:.3f}\"", ".", "format", "(", "eval_end_time", "-", "eval_start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train._model2file": [[270, 283], ["DataUtils.utils.save_model_all", "DataUtils.utils.save_best_model", "train.Train.config.logger.info"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.save_model_all", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.save_best_model", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "_model2file", "(", "self", ",", "model", ",", "config", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        :param model:  nn model\n        :param config:  config\n        :param epoch:  epoch\n        :return:\n        \"\"\"", "\n", "if", "config", ".", "save_model", "and", "config", ".", "save_all_model", ":", "\n", "            ", "save_model_all", "(", "model", ",", "config", ",", "config", ".", "save_model_dir", ",", "config", ".", "model_name", ",", "epoch", ")", "\n", "", "elif", "config", ".", "save_model", "and", "config", ".", "save_best_model", ":", "\n", "            ", "save_best_model", "(", "model", ",", "config", ",", "config", ".", "save_model_dir", ",", "config", ".", "model_name", ",", "self", ".", "best_score", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", ".", "logger", ".", "info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train.eval_batch": [[284, 361], ["model.eval", "tqdm.tqdm", "eval_instance.getFscore", "train.Train.config.logger.info", "train.Train._get_model_args", "model", "all_sentence_length.extend", "train.Train.config.logger.info", "DataUtils.utils.torch_max", "range", "model.crf_layer", "range", "train.Train.config.logger.info", "range", "gold_labels.append", "predict_labels.append", "gold_labels.append", "predict_labels.append", "predict_label.append", "best_paths[].cpu().data.numpy", "label.append", "int", "best_paths[].cpu", "int"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.getFscore", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference._get_model_args", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.torch_max", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "", "def", "eval_batch", "(", "self", ",", "data_iter", ",", "model", ",", "eval_instance", ",", "best_score", ",", "epoch", ",", "config", ",", "test", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param data_iter:  eval batch data iterator\n        :param model: eval model\n        :param eval_instance:\n        :param best_score:\n        :param epoch:\n        :param config: config\n        :param test:  whether to test\n        :return: None\n        \"\"\"", "\n", "test_flag", "=", "\"Test\"", "\n", "if", "test", "is", "False", ":", "\n", "            ", "test_flag", "=", "\"Dev\"", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "gold_labels", "=", "[", "]", "\n", "predict_labels", "=", "[", "]", "\n", "all_sentence_length", "=", "[", "]", "\n", "for", "batch_features", "in", "tqdm", ".", "tqdm", "(", "data_iter", ")", ":", "\n", "            ", "elmo_char_seqs", ",", "elmo_word_seqs", ",", "word", ",", "lang", ",", "pos", ",", "prd", ",", "x_prd_posi", ",", "mask", ",", "sentence_length", ",", "tags", "=", "self", ".", "_get_model_args", "(", "\n", "batch_features", ")", "\n", "logit", "=", "model", "(", "elmo_char_seqs", ",", "elmo_word_seqs", ",", "word", ",", "lang", ",", "pos", ",", "prd", ",", "x_prd_posi", ",", "mask", ",", "sentence_length", ",", "train", "=", "False", ")", "\n", "all_sentence_length", ".", "extend", "(", "sentence_length", ")", "\n", "\n", "if", "self", ".", "use_crf", "is", "False", ":", "\n", "                ", "predict_ids", "=", "torch_max", "(", "logit", ")", "\n", "for", "id_batch", "in", "range", "(", "batch_features", ".", "batch_length", ")", ":", "\n", "                    ", "inst", "=", "batch_features", ".", "inst", "[", "id_batch", "]", "\n", "label_ids", "=", "predict_ids", "[", "id_batch", "]", "\n", "predict_label", "=", "[", "]", "\n", "for", "id_word", "in", "range", "(", "inst", ".", "words_size", ")", ":", "\n", "                        ", "predict_label", ".", "append", "(", "config", ".", "argvocab", ".", "i2c", "[", "int", "(", "i", ")", "]", ")", "\n", "", "gold_labels", ".", "append", "(", "inst", ".", "labels", ")", "\n", "predict_labels", ".", "append", "(", "predict_label", ")", "\n", "", "", "else", ":", "\n", "                ", "path_score", ",", "best_paths", "=", "model", ".", "crf_layer", "(", "logit", ",", "mask", ")", "\n", "for", "id_batch", "in", "range", "(", "batch_features", ".", "batch_length", ")", ":", "\n", "                    ", "inst", "=", "batch_features", ".", "inst", "[", "id_batch", "]", "\n", "gold_labels", ".", "append", "(", "inst", ".", "labels", ")", "\n", "label_ids", "=", "best_paths", "[", "id_batch", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", "inst", ".", "words_size", "]", "\n", "label", "=", "[", "]", "\n", "for", "i", "in", "label_ids", ":", "\n", "                        ", "label", ".", "append", "(", "config", ".", "argvocab", ".", "i2c", "[", "int", "(", "i", ")", "]", ")", "\n", "", "predict_labels", ".", "append", "(", "label", ")", "\n", "\n", "", "", "", "p", ",", "r", ",", "f", ",", "acc_", "=", "eval_instance", ".", "getFscore", "(", "predict_labels", ",", "gold_labels", ",", "all_sentence_length", ")", "\n", "\n", "if", "test", "is", "False", ":", "\n", "\n", "            ", "best_score", ".", "current_dev_score", "=", "f", "\n", "if", "f", ">=", "best_score", ".", "best_dev_f1_score", ":", "\n", "                ", "best_score", ".", "best_dev_f1_score", "=", "f", "\n", "best_score", ".", "best_dev_p_score", "=", "p", "\n", "best_score", ".", "best_dev_r_score", "=", "r", "\n", "best_score", ".", "best_epoch", "=", "epoch", "\n", "best_score", ".", "best_test", "=", "True", "\n", "\n", "", "", "if", "test", "is", "True", "and", "best_score", ".", "best_test", "is", "True", ":", "# test", "\n", "            ", "best_score", ".", "p", "=", "p", "\n", "best_score", ".", "r", "=", "r", "\n", "best_score", ".", "f", "=", "f", "\n", "\n", "", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"{} at current epoch, p: {:.4f}%  r: {:.4f}% , f: {:.4f}%,  ACC: {:.3f}%\"", ".", "format", "(", "\n", "test_flag", ",", "p", ",", "r", ",", "f", ",", "acc_", ")", ")", "\n", "\n", "if", "test", "is", "False", ":", "\n", "            ", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"Till now, The Best Dev Result: p: {:.4f}%  r: {:.4f}% , f: {:.4f}%, Locate on {} Epoch.\"", ".", "format", "(", "\n", "best_score", ".", "best_dev_p_score", ",", "best_score", ".", "best_dev_r_score", ",", "best_score", ".", "best_dev_f1_score", ",", "\n", "best_score", ".", "best_epoch", ")", ")", "\n", "", "elif", "test", "is", "True", ":", "\n", "            ", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"Till now, The Best Test Result: p: {:.4f}%  r: {:.4f}% , f: {:.4f}%, Locate on {} Epoch.\"", ".", "format", "(", "\n", "best_score", ".", "p", ",", "best_score", ".", "r", ",", "best_score", ".", "f", ",", "best_score", ".", "best_epoch", ")", ")", "\n", "best_score", ".", "best_test", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train.eval_external_batch": [[363, 414], ["DataUtils.eval.Eval", "train.Train.model.eval", "tqdm.tqdm", "DataUtils.eval.Eval.getFscore", "train.Train.config.logger.info", "train.Train._get_model_args", "train.Train.model", "all_sentence_length.extend", "DataUtils.utils.torch_max", "range", "train.Train.model.crf_layer", "range", "range", "gold_labels.append", "predict_labels.append", "gold_labels.append", "predict_labels.append", "predict_label.append", "best_paths[].cpu().data.numpy", "label.append", "int", "best_paths[].cpu", "int"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.getFscore", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference._get_model_args", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.torch_max"], ["", "", "def", "eval_external_batch", "(", "self", ",", "data_iter", ",", "config", ",", "meta_info", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        :param data_iter:  eval batch data iterator\n        :param model: eval model\n        :param eval_instance:\n        :param best_score:\n        :param epoch:\n        :param config: config\n        :param test:  whether to test\n        :return: None\n        \"\"\"", "\n", "eval", "=", "Eval", "(", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "gold_labels", "=", "[", "]", "\n", "predict_labels", "=", "[", "]", "\n", "all_sentence_length", "=", "[", "]", "\n", "for", "batch_features", "in", "tqdm", ".", "tqdm", "(", "data_iter", ")", ":", "\n", "            ", "elmo_char_seqs", ",", "elmo_word_seqs", ",", "word", ",", "lang", ",", "pos", ",", "prd", ",", "x_prd_posi", ",", "mask", ",", "sentence_length", ",", "tags", "=", "self", ".", "_get_model_args", "(", "\n", "batch_features", ")", "\n", "logit", "=", "self", ".", "model", "(", "elmo_char_seqs", ",", "elmo_word_seqs", ",", "word", ",", "lang", ",", "pos", ",", "prd", ",", "x_prd_posi", ",", "mask", ",", "sentence_length", ",", "\n", "train", "=", "False", ")", "\n", "all_sentence_length", ".", "extend", "(", "sentence_length", ")", "\n", "\n", "if", "self", ".", "use_crf", "is", "False", ":", "\n", "                ", "predict_ids", "=", "torch_max", "(", "logit", ")", "\n", "for", "id_batch", "in", "range", "(", "batch_features", ".", "batch_length", ")", ":", "\n", "                    ", "inst", "=", "batch_features", ".", "inst", "[", "id_batch", "]", "\n", "label_ids", "=", "predict_ids", "[", "id_batch", "]", "\n", "predict_label", "=", "[", "]", "\n", "for", "id_word", "in", "range", "(", "inst", ".", "words_size", ")", ":", "\n", "                        ", "predict_label", ".", "append", "(", "config", ".", "argvocab", ".", "i2c", "[", "int", "(", "i", ")", "]", ")", "\n", "", "gold_labels", ".", "append", "(", "inst", ".", "labels", ")", "\n", "predict_labels", ".", "append", "(", "predict_label", ")", "\n", "", "", "else", ":", "\n", "                ", "path_score", ",", "best_paths", "=", "self", ".", "model", ".", "crf_layer", "(", "logit", ",", "mask", ")", "\n", "for", "id_batch", "in", "range", "(", "batch_features", ".", "batch_length", ")", ":", "\n", "                    ", "inst", "=", "batch_features", ".", "inst", "[", "id_batch", "]", "\n", "gold_labels", ".", "append", "(", "inst", ".", "labels", ")", "\n", "label_ids", "=", "best_paths", "[", "id_batch", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", "inst", ".", "words_size", "]", "\n", "label", "=", "[", "]", "\n", "for", "i", "in", "label_ids", ":", "\n", "                        ", "label", ".", "append", "(", "config", ".", "argvocab", ".", "i2c", "[", "int", "(", "i", ")", "]", ")", "\n", "", "predict_labels", ".", "append", "(", "label", ")", "\n", "\n", "", "", "", "p", ",", "r", ",", "f", ",", "acc_", "=", "eval", ".", "getFscore", "(", "predict_labels", ",", "gold_labels", ",", "all_sentence_length", ")", "\n", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"eval on {}%, p: {:.4f}%  r: {:.4f}% , f: {:.4f}%, ACC: {:.4f}%\"", ".", "format", "(", "\n", "meta_info", ",", "p", ",", "r", ",", "f", ",", "acc_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train.getAcc": [[415, 447], ["eval_train.clear_PRF", "DataUtils.utils.torch_max", "range", "eval_train.getFscore", "range", "predict_labels.append", "gold_labels.append", "batch_length.append", "predict_label.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.clear_PRF", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.torch_max", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.getFscore"], ["", "@", "staticmethod", "\n", "def", "getAcc", "(", "eval_train", ",", "batch_features", ",", "logit", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        :param eval_acc:  eval instance\n        :param batch_features:  batch data feature\n        :param logit:  model output\n        :param config:  config\n        :return:\n        \"\"\"", "\n", "eval_train", ".", "clear_PRF", "(", ")", "\n", "predict_ids", "=", "torch_max", "(", "logit", ")", "\n", "\n", "predict_labels", "=", "[", "]", "\n", "gold_labels", "=", "[", "]", "\n", "batch_length", "=", "[", "]", "\n", "\n", "for", "id_batch", "in", "range", "(", "batch_features", ".", "batch_length", ")", ":", "\n", "            ", "inst", "=", "batch_features", ".", "inst", "[", "id_batch", "]", "\n", "label_ids", "=", "predict_ids", "[", "id_batch", "]", "\n", "predict_label", "=", "[", "]", "\n", "gold_label", "=", "inst", ".", "labels", "\n", "for", "id_word", "in", "range", "(", "inst", ".", "words_size", ")", ":", "\n", "                ", "predict_label", ".", "append", "(", "config", ".", "argvocab", ".", "i2c", "[", "label_ids", "[", "id_word", "]", "]", ")", "\n", "\n", "", "predict_labels", ".", "append", "(", "predict_label", ")", "\n", "gold_labels", ".", "append", "(", "gold_label", ")", "\n", "batch_length", ".", "append", "(", "inst", ".", "words_size", ")", "\n", "\n", "assert", "len", "(", "predict_label", ")", "==", "len", "(", "gold_label", ")", "\n", "\n", "", "p", ",", "r", ",", "f", ",", "acc_", "=", "eval_train", ".", "getFscore", "(", "predict_labels", ",", "gold_labels", ",", "batch_length", ")", "\n", "return", "p", ",", "r", ",", "f", ",", "acc_", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.PGNLSTM-SRLer.train.Train.getAccCRF": [[448, 471], ["eval_train.clear_PRF", "train.Train.model.crf_layer", "range", "eval_train.getFscore", "gold_labels.append", "predict_labels.append", "batch_length.append", "best_paths[].cpu().data.numpy", "label.append", "len", "len", "best_paths[].cpu", "int"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.clear_PRF", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.getFscore"], ["", "def", "getAccCRF", "(", "self", ",", "eval_train", ",", "batch_features", ",", "logit", ",", "mask", ",", "config", ")", ":", "\n", "\n", "        ", "eval_train", ".", "clear_PRF", "(", ")", "\n", "\n", "predict_labels", "=", "[", "]", "\n", "gold_labels", "=", "[", "]", "\n", "batch_length", "=", "[", "]", "\n", "\n", "path_score", ",", "best_paths", "=", "self", ".", "model", ".", "crf_layer", "(", "logit", ",", "mask", ")", "\n", "for", "id_batch", "in", "range", "(", "batch_features", ".", "batch_length", ")", ":", "\n", "            ", "inst", "=", "batch_features", ".", "inst", "[", "id_batch", "]", "\n", "gold_labels", ".", "append", "(", "inst", ".", "labels", ")", "\n", "label_ids", "=", "best_paths", "[", "id_batch", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", "inst", ".", "words_size", "]", "\n", "label", "=", "[", "]", "\n", "for", "i", "in", "label_ids", ":", "\n", "                ", "label", ".", "append", "(", "config", ".", "argvocab", ".", "i2c", "[", "int", "(", "i", ")", "]", ")", "\n", "", "predict_labels", ".", "append", "(", "label", ")", "\n", "batch_length", ".", "append", "(", "inst", ".", "words_size", ")", "\n", "\n", "assert", "len", "(", "label", ")", "==", "len", "(", "inst", ".", "labels", ")", "\n", "\n", "", "p", ",", "r", ",", "f", ",", "acc_", "=", "eval_train", ".", "getFscore", "(", "predict_labels", ",", "gold_labels", ",", "batch_length", ")", "\n", "return", "p", ",", "r", ",", "f", ",", "acc_", "\n", "", "", ""]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.myconf.__init__": [[6, 9], ["configparser.ConfigParser.__init__"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.__init__"], ["    ", "def", "__init__", "(", "self", ",", "defaults", "=", "None", ")", ":", "\n", "        ", "ConfigParser", ".", "__init__", "(", "self", ",", "defaults", "=", "defaults", ")", "\n", "self", ".", "add_sec", "=", "\"Additional\"", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.myconf.optionxform": [[10, 12], ["None"], "methods", ["None"], ["", "def", "optionxform", "(", "self", ",", "optionstr", ")", ":", "\n", "        ", "return", "optionstr", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.__init__": [[15, 31], ["myconf.myconf.__init__", "myconf.myconf", "myconf.read", "myconf.write", "os.path.isdir", "os.mkdir", "open"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config_file", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "test", "=", "None", "\n", "self", ".", "train", "=", "None", "\n", "self", ".", "logger", "=", "None", "\n", "config", "=", "myconf", "(", ")", "\n", "config", ".", "read", "(", "config_file", ")", "\n", "self", ".", "_config", "=", "config", "\n", "self", ".", "config_file", "=", "config_file", "\n", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "save_checkpoint", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "save_checkpoint", ")", "\n", "", "config", ".", "write", "(", "open", "(", "config_file", ",", "'w'", ")", ")", "\n", "\n", "", "def", "add_args", "(", "self", ",", "key", ",", "value", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.add_args": [[32, 35], ["config.Configurable._config.set", "config.Configurable._config.write", "open"], "methods", ["None"], ["        ", "self", ".", "_config", ".", "set", "(", "self", ".", "add_sec", ",", "key", ",", "value", ")", "\n", "self", ".", "_config", ".", "write", "(", "open", "(", "self", ".", "config_file", ",", "'w'", ")", ")", "\n", "\n", "", "def", "print_args", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.print_args": [[36, 41], ["config.Configurable.logger.info", "config.Configurable._config.sections", "config.Configurable._config.items", "config.Configurable.logger.info", "str", "str"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["        ", "self", ".", "logger", ".", "info", "(", "'Loaded config file sucessfully.'", ")", "\n", "for", "section", "in", "self", ".", "_config", ".", "sections", "(", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "_config", ".", "items", "(", "section", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "str", "(", "k", ")", "+", "\":\"", "+", "str", "(", "v", ")", ")", "\n", "# Embed", "\n", "", "", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.pretrained_embed": [[42, 45], ["config.Configurable._config.getboolean"], "methods", ["None"], ["def", "pretrained_embed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Embed'", ",", "'pretrained_embed'", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros": [[46, 49], ["config.Configurable._config.getboolean"], "methods", ["None"], ["def", "zeros", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Embed'", ",", "'zeros'", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.avg": [[50, 53], ["config.Configurable._config.getboolean"], "methods", ["None"], ["def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Embed'", ",", "'avg'", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.uniform": [[54, 57], ["config.Configurable._config.getboolean"], "methods", ["None"], ["def", "uniform", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Embed'", ",", "'uniform'", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.nnembed": [[58, 61], ["config.Configurable._config.getboolean"], "methods", ["None"], ["def", "nnembed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Embed'", ",", "'nnembed'", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.pretrained_embed_file": [[62, 65], ["config.Configurable._config.get"], "methods", ["None"], ["def", "pretrained_embed_file", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Embed'", ",", "'pretrained_embed_file'", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.embed_dim": [[191, 194], ["config.Configurable._config.getint"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'prd_dict'", ")", "\n", "\n", "", "@", "property", "\n", "def", "dep_dict", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.options_file": [[70, 73], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "options_file", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Embed'", ",", "'options_file'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.weight_file": [[75, 78], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "weight_file", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Embed'", ",", "'weight_file'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.elmo_vocab_path": [[80, 83], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "elmo_vocab_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Embed'", ",", "'elmo_vocab_path'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.is_elmo": [[84, 87], ["config.Configurable._config.getboolean"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_elmo", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Embed'", ",", "'is_elmo'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.elmo_dim": [[88, 91], ["config.Configurable._config.getint"], "methods", ["None"], ["", "@", "property", "\n", "def", "elmo_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "'Embed'", ",", "'elmo_dim'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.base_data_path": [[92, 95], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_data_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Data'", ",", "'base_data_path'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.max_count": [[79, 82], ["config.Configurable._config.getint"], "methods", ["None"], ["# Data", "\n", "", "@", "property", "\n", "def", "elmo_vocab_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Embed'", ",", "'elmo_vocab_path'", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.min_freq": [[83, 86], ["config.Configurable._config.getint"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "is_elmo", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Embed'", ",", "'is_elmo'", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.shuffle": [[87, 90], ["config.Configurable._config.getboolean"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "elmo_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "'Embed'", ",", "'elmo_dim'", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.epochs_shuffle": [[91, 94], ["config.Configurable._config.getboolean"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "base_data_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Data'", ",", "'base_data_path'", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.is_predicate": [[113, 116], ["config.Configurable._config.getboolean"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_predicate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Features'", ",", "'is_predicate'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.prd_embed_dim": [[117, 120], ["config.Configurable._config.getint"], "methods", ["None"], ["", "@", "property", "\n", "def", "prd_embed_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "'Features'", ",", "'prd_embed_dim'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.is_predicate_position": [[121, 123], ["config.Configurable._config.getboolean"], "methods", ["None"], ["", "def", "is_predicate_position", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Features'", ",", "'is_predicate_position'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.is_pos": [[124, 127], ["config.Configurable._config.getboolean"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Features'", ",", "'is_pos'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.pos_embed_dim": [[128, 131], ["config.Configurable._config.getint"], "methods", ["None"], ["", "@", "property", "\n", "def", "pos_embed_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "'Features'", ",", "'pos_embed_dim'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.lang_emb_dim": [[132, 135], ["config.Configurable._config.getint"], "methods", ["None"], ["", "@", "property", "\n", "def", "lang_emb_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "'Features'", ",", "'lang_emb_dim'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.save_pkl": [[96, 99], ["config.Configurable._config.getboolean"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "'Data'", ",", "'max_count'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.pkl_directory": [[100, 103], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "min_freq", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "'Data'", ",", "'min_freq'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.pkl_data": [[104, 107], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Data'", ",", "'shuffle'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.pkl_alphabet": [[108, 111], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "epochs_shuffle", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Data'", ",", "'epochs_shuffle'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.pkl_iter": [[112, 115], ["config.Configurable._config.get"], "methods", ["None"], ["# Features", "\n", "", "@", "property", "\n", "def", "is_predicate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Features'", ",", "'is_predicate'", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.word_embed": [[157, 160], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "word_embed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'word_embed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.loaded_word_embed": [[161, 164], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "loaded_word_embed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'loaded_word_embed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.other_data_embed": [[165, 168], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "other_data_embed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'other_data_embed'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.save_dict": [[120, 123], ["config.Configurable._config.getboolean"], "methods", ["None"], ["\n", "", "def", "is_predicate_position", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Features'", ",", "'is_predicate_position'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.save_checkpoint": [[124, 127], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Features'", ",", "'is_pos'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.dict_directory": [[128, 131], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "pos_embed_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "'Features'", ",", "'pos_embed_dim'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.word_dict": [[132, 135], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "lang_emb_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "'Features'", ",", "'lang_emb_dim'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.pos_dict": [[185, 188], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "pos_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'pos_dict'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.prd_dict": [[189, 192], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "prd_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'prd_dict'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.dep_dict": [[193, 196], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "dep_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'dep_dict'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.arg_dict": [[197, 200], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "arg_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'arg_dict'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.model_name": [[140, 143], ["config.Configurable._config.get"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "pkl_directory", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'pkl_directory'", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.save_model_dir": [[144, 147], ["config.Configurable._config.get"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "pkl_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'pkl_data'", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.save_model": [[148, 151], ["config.Configurable._config.getboolean"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "pkl_alphabet", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'pkl_alphabet'", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.save_all_model": [[152, 158], ["config.Configurable._config.get"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "pkl_iter", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'pkl_iter'", ")", "\n", "\n", "", "@", "property", "\n", "def", "word_embed", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.save_best_model": [[159, 165], ["config.Configurable._config.get"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'word_embed'", ")", "\n", "\n", "", "@", "property", "\n", "def", "loaded_word_embed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'loaded_word_embed'", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.average_batch": [[167, 170], ["config.Configurable._config.getboolean"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'other_data_embed'", ")", "\n", "\n", "", "@", "property", "\n", "def", "save_dict", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.use_crf": [[171, 174], ["config.Configurable._config.getboolean"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Save'", ",", "'save_dict'", ")", "\n", "\n", "", "@", "property", "\n", "def", "save_checkpoint", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.use_char": [[175, 178], ["config.Configurable._config.getboolean"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'save_checkpoint'", ")", "\n", "\n", "", "@", "property", "\n", "def", "dict_directory", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.model_bilstm": [[179, 182], ["config.Configurable._config.getboolean"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'dict_directory'", ")", "\n", "\n", "", "@", "property", "\n", "def", "word_dict", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.model_bilstm_context": [[183, 186], ["config.Configurable._config.getboolean"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'word_dict'", ")", "\n", "\n", "", "@", "property", "\n", "def", "pos_dict", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.lstm_layers": [[187, 190], ["config.Configurable._config.getint"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'pos_dict'", ")", "\n", "\n", "", "@", "property", "\n", "def", "prd_dict", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.lstm_hiddens": [[195, 198], ["config.Configurable._config.getint"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'dep_dict'", ")", "\n", "\n", "", "@", "property", "\n", "def", "arg_dict", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.dropout_emb": [[199, 202], ["config.Configurable._config.getfloat"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'arg_dict'", ")", "\n", "\n", "", "@", "property", "\n", "def", "model_name", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.dropout": [[203, 206], ["config.Configurable._config.getfloat"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'model_name'", ")", "\n", "\n", "", "@", "property", "\n", "def", "save_model_dir", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.max_char_len": [[207, 210], ["config.Configurable._config.getint"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'save_model_dir'", ")", "\n", "\n", "", "@", "property", "\n", "def", "save_model", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.char_dim": [[211, 214], ["config.Configurable._config.getint"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Save'", ",", "'save_model'", ")", "\n", "\n", "", "@", "property", "\n", "def", "save_all_model", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.conv_filter_sizes": [[215, 218], ["config.Configurable._config.get"], "methods", ["None"], ["        ", "if", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'save_all_best_model'", ")", "==", "'all'", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.conv_filter_nums": [[219, 222], ["config.Configurable._config.get"], "methods", ["None"], ["\n", "", "", "@", "property", "\n", "def", "save_best_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_config", ".", "get", "(", "'Save'", ",", "'save_all_best_model'", ")", "==", "'best'", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.windows_size": [[223, 226], ["config.Configurable._config.getint"], "methods", ["None"], ["            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.adam": [[228, 231], ["config.Configurable._config.getboolean"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "average_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "\"Model\"", ",", "\"average_batch\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.sgd": [[232, 235], ["config.Configurable._config.getboolean"], "methods", ["None"], ["", "@", "property", "\n", "def", "use_crf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "\"Model\"", ",", "\"use_crf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.learning_rate": [[236, 239], ["config.Configurable._config.getfloat"], "methods", ["None"], ["", "@", "property", "\n", "def", "use_char", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "\"Model\"", ",", "\"use_char\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.weight_decay": [[240, 243], ["config.Configurable._config.getfloat"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_bilstm", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "\"Model\"", ",", "\"model_bilstm\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.momentum": [[244, 247], ["config.Configurable._config.getfloat"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_bilstm_context", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "\"Model\"", ",", "\"model_bilstm_context\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.clip_max_norm_use": [[248, 251], ["config.Configurable._config.getboolean"], "methods", ["None"], ["", "@", "property", "\n", "def", "lstm_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "\"Model\"", ",", "\"lstm_layers\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.clip_max_norm": [[252, 255], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "lstm_hiddens", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "\"Model\"", ",", "\"lstm_hiddens\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.use_lr_decay": [[256, 259], ["config.Configurable._config.getboolean"], "methods", ["None"], ["", "@", "property", "\n", "def", "dropout_emb", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getfloat", "(", "\"Model\"", ",", "\"dropout_emb\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.lr_rate_decay": [[260, 263], ["config.Configurable._config.getfloat"], "methods", ["None"], ["", "@", "property", "\n", "def", "dropout", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getfloat", "(", "\"Model\"", ",", "\"dropout\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.min_lrate": [[264, 267], ["config.Configurable._config.getfloat"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_char_len", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "\"Model\"", ",", "\"max_char_len\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.max_patience": [[268, 271], ["config.Configurable._config.getint"], "methods", ["None"], ["", "@", "property", "\n", "def", "char_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "\"Model\"", ",", "\"char_dim\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.restore_pkl": [[273, 276], ["config.Configurable._config.getboolean"], "methods", ["None"], ["def", "conv_filter_sizes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "\"Model\"", ",", "\"conv_filter_sizes\"", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.num_threads": [[277, 280], ["config.Configurable._config.getint"], "methods", ["None"], ["def", "conv_filter_nums", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "\"Model\"", ",", "\"conv_filter_nums\"", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.epochs": [[281, 284], ["config.Configurable._config.getint"], "methods", ["None"], ["def", "windows_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "\"Model\"", ",", "\"windows_size\"", ")", "\n", "\n", "# Optimizer", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.early_max_patience": [[285, 288], ["config.Configurable._config.getint"], "methods", ["None"], ["", "@", "property", "\n", "def", "adam", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "\"Optimizer\"", ",", "\"adam\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.backward_batch_size": [[289, 292], ["config.Configurable._config.getint"], "methods", ["None"], ["", "@", "property", "\n", "def", "sgd", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "\"Optimizer\"", ",", "\"sgd\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.batch_size": [[293, 296], ["config.Configurable._config.getint"], "methods", ["None"], ["", "@", "property", "\n", "def", "learning_rate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getfloat", "(", "\"Optimizer\"", ",", "\"learning_rate\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.dev_batch_size": [[297, 300], ["config.Configurable._config.getint"], "methods", ["None"], ["", "@", "property", "\n", "def", "weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getfloat", "(", "\"Optimizer\"", ",", "\"weight_decay\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.test_batch_size": [[301, 304], ["config.Configurable._config.getint"], "methods", ["None"], ["", "@", "property", "\n", "def", "momentum", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getfloat", "(", "\"Optimizer\"", ",", "\"momentum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.log_interval": [[305, 308], ["config.Configurable._config.getint"], "methods", ["None"], ["", "@", "property", "\n", "def", "clip_max_norm_use", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "\"Optimizer\"", ",", "\"clip_max_norm_use\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.mode": [[311, 314], ["config.Configurable._config.get"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "get", "(", "\"Optimizer\"", ",", "\"clip_max_norm\"", ")", "\n", "\n", "", "@", "property", "\n", "def", "use_lr_decay", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.device": [[316, 319], ["config.Configurable._config.get"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "lr_rate_decay", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getfloat", "(", "\"Optimizer\"", ",", "\"lr_rate_decay\"", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.t_model": [[321, 324], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "min_lrate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getfloat", "(", "\"Optimizer\"", ",", "\"min_lrate\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.t_data": [[325, 328], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_patience", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "\"Optimizer\"", ",", "\"max_patience\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.train_file": [[67, 70], ["config.Configurable._config.get"], "methods", ["None"], ["        ", "return", "self", ".", "_config", ".", "getint", "(", "'Embed'", ",", "'embed_dim'", ")", "\n", "\n", "# Data", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.dev_file": [[71, 74], ["config.Configurable._config.get"], "methods", ["None"], ["def", "options_file", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Embed'", ",", "'options_file'", ")", "\n", "\n", "# Data", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.test_file": [[75, 78], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "weight_file", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "get", "(", "'Embed'", ",", "'weight_file'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.pkl_embed": [[116, 119], ["config.Configurable._config.get"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "prd_embed_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "'Features'", ",", "'prd_embed_dim'", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.label_dict": [[136, 139], ["config.Configurable._config.get"], "methods", ["None"], ["# Save", "\n", "", "@", "property", "\n", "def", "save_pkl", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Save'", ",", "'save_pkl'", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.alpha": [[330, 333], ["config.Configurable._config.getint"], "methods", ["None"], ["", "@", "property", "\n", "def", "restore_pkl", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getboolean", "(", "'Train'", ",", "'restore_pkl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.parallel_path_root_path": [[334, 337], ["config.Configurable._config.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_threads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", ".", "getint", "(", "\"Train\"", ",", "\"num_threads\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embeddings.__init__": [[20, 38], ["isinstance", "list", "len", "index2word.values", "enumerate", "index2word.items"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dim", ",", "index2word", ",", "word2index", "=", "None", ",", "embeddings", "=", "None", ")", ":", "\n", "        ", "if", "embeddings", "is", "not", "None", ":", "\n", "            ", "self", ".", "embeddings", "=", "embeddings", "\n", "\n", "", "if", "isinstance", "(", "index2word", ",", "list", ")", ":", "\n", "            ", "index2word", "=", "{", "i", ":", "item", "for", "i", ",", "item", "in", "enumerate", "(", "index2word", ")", "}", "\n", "", "self", ".", "word_set", "=", "list", "(", "index2word", ".", "values", "(", ")", ")", "\n", "\n", "if", "word2index", "==", "None", ":", "\n", "            ", "word2index", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "index2word", ".", "items", "(", ")", "}", "\n", "\n", "", "self", ".", "w2i", "=", "word2index", "\n", "self", ".", "i2w", "=", "index2word", "\n", "\n", "self", ".", "emb_num", "=", "len", "(", "self", ".", "w2i", ")", "\n", "self", ".", "emb_dim", "=", "dim", "\n", "\n", "self", ".", "pad_id", "=", "self", ".", "w2i", "[", "paddingkey", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.__init__": [[19, 30], ["isinstance", "Embed.Embed._list2dict", "Embed.Embed._get_dim", "len"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._list2dict", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._get_dim"], ["\n", "def", "__init__", "(", "self", ",", "dim", ",", "index2word", ",", "word2index", "=", "None", ",", "embeddings", "=", "None", ")", ":", "\n", "        ", "if", "embeddings", "is", "not", "None", ":", "\n", "            ", "self", ".", "embeddings", "=", "embeddings", "\n", "\n", "", "if", "isinstance", "(", "index2word", ",", "list", ")", ":", "\n", "            ", "index2word", "=", "{", "i", ":", "item", "for", "i", ",", "item", "in", "enumerate", "(", "index2word", ")", "}", "\n", "", "self", ".", "word_set", "=", "list", "(", "index2word", ".", "values", "(", ")", ")", "\n", "\n", "if", "word2index", "==", "None", ":", "\n", "            ", "word2index", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "index2word", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.get_embed": [[31, 50], ["Embed.Embed.info", "Embed.Embed._read_file", "print", "exit", "Embed.Embed._nn_embed", "Embed.Embed._zeros_embed", "Embed.Embed._uniform_embed", "Embed.Embed._avg_embed"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._read_file", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._nn_embed", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._zeros_embed", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._uniform_embed", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._avg_embed"], ["", "self", ".", "w2i", "=", "word2index", "\n", "self", ".", "i2w", "=", "index2word", "\n", "\n", "self", ".", "emb_num", "=", "len", "(", "self", ".", "w2i", ")", "\n", "self", ".", "emb_dim", "=", "dim", "\n", "\n", "self", ".", "pad_id", "=", "self", ".", "w2i", "[", "paddingkey", "]", "\n", "\n", "\n", "", "", "class", "Embed", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    Embed\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "path", ",", "words_dict", ",", "embed_type", ",", "pad", ")", ":", "\n", "        ", "self", ".", "embed_type_enum", "=", "[", "\"zero\"", ",", "\"avg\"", ",", "\"uniform\"", ",", "\"nn\"", "]", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "words_dict", "=", "words_dict", "\n", "self", ".", "embed_type", "=", "embed_type", "\n", "self", ".", "pad", "=", "pad", "\n", "if", "not", "isinstance", "(", "self", ".", "words_dict", ",", "dict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._zeros_embed": [[51, 66], ["print", "numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "int", "int", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "word.lower", "numpy.array", "float", "float", "word.lower"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros"], ["            ", "self", ".", "words_dict", ",", "self", ".", "words_list", "=", "self", ".", "_list2dict", "(", "self", ".", "words_dict", ")", "\n", "", "if", "pad", "is", "not", "None", ":", "self", ".", "padID", "=", "self", ".", "words_dict", "[", "pad", "]", "\n", "self", ".", "dim", ",", "self", ".", "words_count", "=", "self", ".", "_get_dim", "(", "path", "=", "self", ".", "path", ")", ",", "len", "(", "self", ".", "words_dict", ")", "\n", "self", ".", "exact_count", ",", "self", ".", "fuzzy_count", ",", "self", ".", "oov_count", "=", "0", ",", "0", ",", "0", "\n", "\n", "", "def", "get_embed", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "embed_dict", "=", "None", "\n", "if", "self", ".", "embed_type", "in", "self", ".", "embed_type_enum", ":", "\n", "            ", "embed_dict", "=", "self", ".", "_read_file", "(", "path", "=", "self", ".", "path", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"embed_type illegal, must be in {}\"", ".", "format", "(", "self", ".", "embed_type_enum", ")", ")", "\n", "exit", "(", ")", "\n", "", "embed", "=", "None", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._nn_embed": [[67, 85], ["print", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.xavier_uniform_", "torch.xavier_uniform_", "torch.xavier_uniform_", "numpy.array", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "int", "int", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "word.lower", "numpy.array", "float", "float", "word.lower"], "methods", ["None"], ["if", "self", ".", "embed_type", "==", "\"nn\"", ":", "\n", "            ", "embed", "=", "self", ".", "_nn_embed", "(", "embed_dict", "=", "embed_dict", ",", "words_dict", "=", "self", ".", "words_dict", ")", "\n", "", "elif", "self", ".", "embed_type", "==", "\"zero\"", ":", "\n", "            ", "embed", "=", "self", ".", "_zeros_embed", "(", "embed_dict", "=", "embed_dict", ",", "words_dict", "=", "self", ".", "words_dict", ")", "\n", "", "elif", "self", ".", "embed_type", "==", "\"uniform\"", ":", "\n", "            ", "embed", "=", "self", ".", "_uniform_embed", "(", "embed_dict", "=", "embed_dict", ",", "words_dict", "=", "self", ".", "words_dict", ")", "\n", "", "elif", "self", ".", "embed_type", "==", "\"avg\"", ":", "\n", "            ", "embed", "=", "self", ".", "_avg_embed", "(", "embed_dict", "=", "embed_dict", ",", "words_dict", "=", "self", ".", "words_dict", ")", "\n", "", "self", ".", "info", "(", ")", "\n", "return", "embed", "\n", "\n", "", "def", "_zeros_embed", "(", "self", ",", "embed_dict", ",", "words_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param embed_dict:\n        :param words_dict:\n        \"\"\"", "\n", "print", "(", "\"loading pre_train embedding by zeros for out of vocabulary.\"", ")", "\n", "embeddings", "=", "np", ".", "zeros", "(", "(", "int", "(", "self", ".", "words_count", ")", ",", "int", "(", "self", ".", "dim", ")", ")", ")", "\n", "for", "word", "in", "words_dict", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._uniform_embed": [[86, 111], ["print", "numpy.zeros", "numpy.random.uniform().round", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "len", "int", "int", "numpy.array", "numpy.random.uniform", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "word.lower", "numpy.array", "int", "float", "float", "word.lower"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.uniform"], ["            ", "if", "word", "in", "embed_dict", ":", "\n", "                ", "embeddings", "[", "words_dict", "[", "word", "]", "]", "=", "np", ".", "array", "(", "[", "float", "(", "i", ")", "for", "i", "in", "embed_dict", "[", "word", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "exact_count", "+=", "1", "\n", "", "elif", "word", ".", "lower", "(", ")", "in", "embed_dict", ":", "\n", "                ", "embeddings", "[", "words_dict", "[", "word", "]", "]", "=", "np", ".", "array", "(", "[", "float", "(", "i", ")", "for", "i", "in", "embed_dict", "[", "word", ".", "lower", "(", ")", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "fuzzy_count", "+=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "oov_count", "+=", "1", "\n", "", "", "final_embed", "=", "torch", ".", "from_numpy", "(", "embeddings", ")", ".", "float", "(", ")", "\n", "return", "final_embed", "\n", "\n", "", "def", "_nn_embed", "(", "self", ",", "embed_dict", ",", "words_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param embed_dict:\n        :param words_dict:\n        \"\"\"", "\n", "print", "(", "\"loading pre_train embedding by nn.Embedding for out of vocabulary.\"", ")", "\n", "embed", "=", "nn", ".", "Embedding", "(", "int", "(", "self", ".", "words_count", ")", ",", "int", "(", "self", ".", "dim", ")", ")", "\n", "init", ".", "xavier_uniform_", "(", "embed", ".", "weight", ".", "data", ")", "\n", "embeddings", "=", "np", ".", "array", "(", "embed", ".", "weight", ".", "data", ")", "\n", "for", "word", "in", "words_dict", ":", "\n", "            ", "if", "word", "in", "embed_dict", ":", "\n", "                ", "embeddings", "[", "words_dict", "[", "word", "]", "]", "=", "np", ".", "array", "(", "[", "float", "(", "i", ")", "for", "i", "in", "embed_dict", "[", "word", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "exact_count", "+=", "1", "\n", "", "elif", "word", ".", "lower", "(", ")", "in", "embed_dict", ":", "\n", "                ", "embeddings", "[", "words_dict", "[", "word", "]", "]", "=", "np", ".", "array", "(", "[", "float", "(", "i", ")", "for", "i", "in", "embed_dict", "[", "word", ".", "lower", "(", ")", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._avg_embed": [[112, 137], ["print", "numpy.zeros", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.sum", "len", "len", "int", "int", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "word.lower", "numpy.array", "float", "float", "word.lower"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros"], ["self", ".", "fuzzy_count", "+=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "oov_count", "+=", "1", "\n", "", "", "embeddings", "[", "self", ".", "padID", "]", "=", "0", "\n", "final_embed", "=", "torch", ".", "from_numpy", "(", "embeddings", ")", ".", "float", "(", ")", "\n", "return", "final_embed", "\n", "\n", "", "def", "_uniform_embed", "(", "self", ",", "embed_dict", ",", "words_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param embed_dict:\n        :param words_dict:\n        \"\"\"", "\n", "print", "(", "\"loading pre_train embedding by uniform for out of vocabulary.\"", ")", "\n", "embeddings", "=", "np", ".", "zeros", "(", "(", "int", "(", "self", ".", "words_count", ")", ",", "int", "(", "self", ".", "dim", ")", ")", ")", "\n", "inword_list", "=", "{", "}", "\n", "for", "word", "in", "words_dict", ":", "\n", "            ", "if", "word", "in", "embed_dict", ":", "\n", "                ", "embeddings", "[", "words_dict", "[", "word", "]", "]", "=", "np", ".", "array", "(", "[", "float", "(", "i", ")", "for", "i", "in", "embed_dict", "[", "word", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "inword_list", "[", "words_dict", "[", "word", "]", "]", "=", "1", "\n", "self", ".", "exact_count", "+=", "1", "\n", "", "elif", "word", ".", "lower", "(", ")", "in", "embed_dict", ":", "\n", "                ", "embeddings", "[", "words_dict", "[", "word", "]", "]", "=", "np", ".", "array", "(", "[", "float", "(", "i", ")", "for", "i", "in", "embed_dict", "[", "word", ".", "lower", "(", ")", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "inword_list", "[", "words_dict", "[", "word", "]", "]", "=", "1", "\n", "self", ".", "fuzzy_count", "+=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "oov_count", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._read_file": [[138, 155], ["open", "f.readlines", "tqdm.tqdm", "line.strip().split", "line.strip", "len", "len", "len"], "methods", ["None"], ["", "", "uniform_col", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "int", "(", "self", ".", "dim", ")", ")", ".", "round", "(", "6", ")", "# uniform", "\n", "for", "i", "in", "range", "(", "len", "(", "words_dict", ")", ")", ":", "\n", "            ", "if", "i", "not", "in", "inword_list", "and", "i", "!=", "self", ".", "padID", ":", "\n", "                ", "embeddings", "[", "i", "]", "=", "uniform_col", "\n", "", "", "final_embed", "=", "torch", ".", "from_numpy", "(", "embeddings", ")", ".", "float", "(", ")", "\n", "return", "final_embed", "\n", "\n", "", "def", "_avg_embed", "(", "self", ",", "embed_dict", ",", "words_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param embed_dict:\n        :param words_dict:\n        \"\"\"", "\n", "print", "(", "\"loading pre_train embedding by avg for out of vocabulary.\"", ")", "\n", "embeddings", "=", "np", ".", "zeros", "(", "(", "int", "(", "self", ".", "words_count", ")", ",", "int", "(", "self", ".", "dim", ")", ")", ")", "\n", "inword_list", "=", "{", "}", "\n", "for", "word", "in", "words_dict", ":", "\n", "            ", "if", "word", "in", "embed_dict", ":", "\n", "                ", "embeddings", "[", "words_dict", "[", "word", "]", "]", "=", "np", ".", "array", "(", "[", "float", "(", "i", ")", "for", "i", "in", "embed_dict", "[", "word", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info": [[156, 168], ["print", "print", "print", "print", "print", "print", "print", "numpy.round"], "methods", ["None"], ["inword_list", "[", "words_dict", "[", "word", "]", "]", "=", "1", "\n", "self", ".", "exact_count", "+=", "1", "\n", "", "elif", "word", ".", "lower", "(", ")", "in", "embed_dict", ":", "\n", "                ", "embeddings", "[", "words_dict", "[", "word", "]", "]", "=", "np", ".", "array", "(", "[", "float", "(", "i", ")", "for", "i", "in", "embed_dict", "[", "word", ".", "lower", "(", ")", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "inword_list", "[", "words_dict", "[", "word", "]", "]", "=", "1", "\n", "self", ".", "fuzzy_count", "+=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "oov_count", "+=", "1", "\n", "", "", "sum_col", "=", "np", ".", "sum", "(", "embeddings", ",", "axis", "=", "0", ")", "/", "len", "(", "inword_list", ")", "# avg", "\n", "for", "i", "in", "range", "(", "len", "(", "words_dict", ")", ")", ":", "\n", "            ", "if", "i", "not", "in", "inword_list", "and", "i", "!=", "self", ".", "padID", ":", "\n", "                ", "embeddings", "[", "i", "]", "=", "sum_col", "\n", "", "", "final_embed", "=", "torch", ".", "from_numpy", "(", "embeddings", ")", ".", "float", "(", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._get_dim": [[169, 189], ["open", "line.strip().split", "len", "line.strip", "len", "len"], "methods", ["None"], ["return", "final_embed", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_read_file", "(", "path", ")", ":", "\n", "        ", "\"\"\"\n        :param path: embed file path\n        :return:\n        \"\"\"", "\n", "embed_dict", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "lines", "=", "tqdm", ".", "tqdm", "(", "lines", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "values", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "values", ")", "==", "1", "or", "len", "(", "values", ")", "==", "2", "or", "len", "(", "values", ")", "==", "3", ":", "\n", "                    ", "continue", "\n", "", "w", ",", "v", "=", "values", "[", "0", "]", ",", "values", "[", "1", ":", "]", "\n", "embed_dict", "[", "w", "]", "=", "v", "\n", "", "", "return", "embed_dict", "\n", "\n", "", "def", "info", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed._list2dict": [[190, 203], ["collections.OrderedDict", "enumerate", "list_lower.append", "len", "len", "word.lower"], "methods", ["None"], ["        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "total_count", "=", "self", ".", "exact_count", "+", "self", ".", "fuzzy_count", "\n", "print", "(", "\"Words count {}, Embed dim {}.\"", ".", "format", "(", "self", ".", "words_count", ",", "self", ".", "dim", ")", ")", "\n", "print", "(", "\"Exact count {} / {}\"", ".", "format", "(", "self", ".", "exact_count", ",", "self", ".", "words_count", ")", ")", "\n", "print", "(", "\"Fuzzy count {} / {}\"", ".", "format", "(", "self", ".", "fuzzy_count", ",", "self", ".", "words_count", ")", ")", "\n", "print", "(", "\"  INV count {} / {}\"", ".", "format", "(", "total_count", ",", "self", ".", "words_count", ")", ")", "\n", "print", "(", "\"  OOV count {} / {}\"", ".", "format", "(", "self", ".", "oov_count", ",", "self", ".", "words_count", ")", ")", "\n", "print", "(", "\"  OOV radio ===> {}%\"", ".", "format", "(", "np", ".", "round", "(", "(", "self", ".", "oov_count", "/", "self", ".", "words_count", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "print", "(", "40", "*", "\"*\"", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_get_dim", "(", "path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Vocab.__init__": [[11, 19], ["len", "Alphabet.Vocab.addclass"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Vocab.addclass"], ["    ", "def", "__init__", "(", "self", ",", "word_vocab", ")", ":", "\n", "        ", "self", ".", "word_vocab", "=", "word_vocab", "\n", "self", ".", "c2i", "=", "{", "}", "\n", "self", ".", "i2c", "=", "{", "}", "\n", "for", "c", "in", "word_vocab", ":", "\n", "            ", "self", ".", "addclass", "(", "c", ")", "\n", "", "self", ".", "size", "=", "len", "(", "self", ".", "i2c", ")", "\n", "self", ".", "pad_id", "=", "self", ".", "c2i", "[", "paddingkey", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Vocab.addclass": [[20, 27], ["isinstance", "Exception", "len", "len"], "methods", ["None"], ["", "def", "addclass", "(", "self", ",", "newclass", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "newclass", ",", "str", ")", ":", "\n", "            ", "raise", "Exception", "(", "'new item must be a string'", ")", "\n", "\n", "", "if", "newclass", "not", "in", "self", ".", "c2i", ":", "\n", "            ", "self", ".", "c2i", "[", "newclass", "]", "=", "len", "(", "self", ".", "i2c", ")", "\n", "self", ".", "i2c", "[", "len", "(", "self", ".", "i2c", ")", "]", "=", "newclass", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.CreateAlphabet.__init__": [[14, 40], ["collections.OrderedDict", "collections.OrderedDict", "Alphabet.Alphabet", "Alphabet.Alphabet"], "methods", ["None"], ["self", ".", "i2c", "=", "{", "}", "\n", "for", "c", "in", "word_vocab", ":", "\n", "            ", "self", ".", "addclass", "(", "c", ")", "\n", "", "self", ".", "size", "=", "len", "(", "self", ".", "i2c", ")", "\n", "self", ".", "pad_id", "=", "self", ".", "c2i", "[", "paddingkey", "]", "\n", "\n", "", "def", "addclass", "(", "self", ",", "newclass", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "newclass", ",", "str", ")", ":", "\n", "            ", "raise", "Exception", "(", "'new item must be a string'", ")", "\n", "\n", "", "if", "newclass", "not", "in", "self", ".", "c2i", ":", "\n", "            ", "self", ".", "c2i", "[", "newclass", "]", "=", "len", "(", "self", ".", "i2c", ")", "\n", "self", ".", "i2c", "[", "len", "(", "self", ".", "i2c", ")", "]", "=", "newclass", "\n", "\n", "\n", "", "", "", "class", "CreateAlphabet", ":", "\n", "    ", "\"\"\"\n        Class:      Create_Alphabet\n        Function:   Build Alphabet By Alphabet Class\n        Notice:     The Class Need To Change So That Complete All Kinds Of Tasks\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "min_freq", "=", "1", ",", "train_data", "=", "None", ",", "dev_data", "=", "None", ",", "test_data", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "\n", "# minimum vocab size", "\n", "        ", "self", ".", "min_freq", "=", "min_freq", "\n", "self", ".", "config", "=", "config", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.CreateAlphabet._build_data": [[41, 55], ["datasets.extend", "config.logger.info", "config.logger.info", "config.logger.info", "datasets.extend", "config.logger.info", "datasets.extend", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["self", ".", "train_data", "=", "train_data", "\n", "self", ".", "dev_data", "=", "dev_data", "\n", "self", ".", "test_data", "=", "test_data", "\n", "\n", "# storage word and label", "\n", "self", ".", "word_state", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "label_state", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "pos_state", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "dep_state", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "# unk and pad", "\n", "self", ".", "word_state", "[", "unkkey", "]", "=", "self", ".", "min_freq", "\n", "self", ".", "word_state", "[", "paddingkey", "]", "=", "self", ".", "min_freq", "\n", "\n", "self", ".", "pos_state", "[", "paddingkey", "]", "=", "self", ".", "min_freq", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.CreateAlphabet.build_vocab": [[56, 89], ["Alphabet.CreateAlphabet.config.logger.info", "Alphabet.CreateAlphabet._build_data", "enumerate", "Alphabet.CreateAlphabet.word_alphabet.initial", "Alphabet.CreateAlphabet.label_alphabet.initial", "Alphabet.CreateAlphabet.word_alphabet.from_string", "Alphabet.CreateAlphabet.word_alphabet.from_string", "Alphabet.CreateAlphabet.label_alphabet.from_string", "Alphabet.CreateAlphabet.word_alphabet.set_fixed_flag", "Alphabet.CreateAlphabet.label_alphabet.set_fixed_flag"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.CreateAlphabet._build_data", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.initial", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.initial", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_string", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_string", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_string", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.set_fixed_flag", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.set_fixed_flag"], ["self", ".", "dep_state", "[", "paddingkey", "]", "=", "self", ".", "min_freq", "\n", "\n", "self", ".", "label_state", "[", "paddingkey", "]", "=", "1", "\n", "\n", "# word and label Alphabet", "\n", "self", ".", "word_alphabet", "=", "Alphabet", "(", "self", ".", "config", ",", "min_freq", "=", "self", ".", "min_freq", ")", "\n", "self", ".", "pos_alphabet", "=", "Alphabet", "(", "self", ".", "config", ",", "min_freq", "=", "self", ".", "min_freq", ")", "\n", "self", ".", "dep_alphabet", "=", "Alphabet", "(", "self", ".", "config", ",", "min_freq", "=", "self", ".", "min_freq", ")", "\n", "self", ".", "label_alphabet", "=", "Alphabet", "(", "self", ".", "config", ")", "\n", "\n", "# unk key", "\n", "self", ".", "word_unkId", "=", "0", "\n", "self", ".", "label_unkId", "=", "0", "\n", "\n", "# padding key", "\n", "self", ".", "word_paddingId", "=", "0", "\n", "self", ".", "pos_paddingId", "=", "0", "\n", "self", ".", "dep_paddingId", "=", "0", "\n", "self", ".", "label_paddingId", "=", "0", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_build_data", "(", "config", ",", "train_data", "=", "None", ",", "dev_data", "=", "None", ",", "test_data", "=", "None", ")", ":", "\n", "        ", "assert", "train_data", "is", "not", "None", ",", "\"The Train Data Is Not Allow Empty.\"", "\n", "datasets", "=", "[", "]", "\n", "datasets", ".", "extend", "(", "train_data", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"the length of train data {}\"", ".", "format", "(", "len", "(", "datasets", ")", ")", ")", "\n", "if", "dev_data", "is", "not", "None", ":", "\n", "            ", "config", ".", "logger", ".", "info", "(", "\"the length of dev data {}\"", ".", "format", "(", "len", "(", "dev_data", ")", ")", ")", "\n", "datasets", ".", "extend", "(", "dev_data", ")", "\n", "", "if", "test_data", "is", "not", "None", ":", "\n", "            ", "config", ".", "logger", ".", "info", "(", "\"the length of test data {}\"", ".", "format", "(", "len", "(", "test_data", ")", ")", ")", "\n", "datasets", ".", "extend", "(", "test_data", ")", "\n", "", "config", ".", "logger", ".", "info", "(", "\"the length of data that create Alphabet {}\"", ".", "format", "(", "len", "(", "datasets", ")", ")", ")", "\n", "return", "datasets", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.__init__": [[92, 100], ["collections.OrderedDict"], "methods", ["None"], ["        ", "\"\"\"\n        :param train_data:\n        :param dev_data:\n        :param test_data:\n        :param debug_index:\n        :return:\n        \"\"\"", "\n", "train_data", "=", "self", ".", "train_data", "\n", "dev_data", "=", "self", ".", "dev_data", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.initial": [[101, 107], ["Alphabet.Alphabet.set_fixed_flag", "Alphabet.Alphabet.from_string"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.set_fixed_flag", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_string"], ["test_data", "=", "self", ".", "test_data", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Build Vocab Start...... \"", ")", "\n", "datasets", "=", "self", ".", "_build_data", "(", "self", ".", "config", ",", "train_data", "=", "train_data", ",", "dev_data", "=", "dev_data", ",", "test_data", "=", "test_data", ")", "\n", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "datasets", ")", ":", "\n", "# word", "\n", "            ", "for", "word", "in", "data", ".", "words", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.set_fixed_flag": [[108, 113], ["None"], "methods", ["None"], ["                ", "if", "word", "not", "in", "self", ".", "word_state", ":", "\n", "                    ", "self", ".", "word_state", "[", "word", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "word_state", "[", "word", "]", "+=", "1", "\n", "\n", "# pos", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_string": [[114, 129], ["Alphabet.Alphabet.id2words.append"], "methods", ["None"], ["", "", "for", "pos_", "in", "data", ".", "pos", ":", "\n", "                ", "if", "pos_", "not", "in", "self", ".", "pos_state", ":", "\n", "                    ", "self", ".", "pos_state", "[", "pos_", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "pos_state", "[", "pos_", "]", "+=", "1", "\n", "\n", "# dep", "\n", "", "", "for", "dep_", "in", "data", ".", "dep", ":", "\n", "                ", "if", "dep_", "not", "in", "self", ".", "dep_state", ":", "\n", "                    ", "self", ".", "dep_state", "[", "dep_", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "dep_state", "[", "dep_", "]", "+=", "1", "\n", "\n", "# label", "\n", "", "", "for", "label", "in", "data", ".", "labels", ":", "\n", "                ", "if", "label", "not", "in", "self", ".", "label_state", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_id": [[130, 136], ["int"], "methods", ["None"], ["                    ", "self", ".", "label_state", "[", "label", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "label_state", "[", "label", "]", "+=", "1", "\n", "\n", "# Create id2words and words2id by the Alphabet Class", "\n", "", "", "", "self", ".", "word_alphabet", ".", "initial", "(", "self", ".", "word_state", ")", "\n", "self", ".", "pos_alphabet", ".", "initial", "(", "self", ".", "pos_state", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.initial_from_pretrain": [[137, 151], ["Alphabet.Alphabet.config.logger.info", "Alphabet.Alphabet.from_string", "Alphabet.Alphabet.from_string", "f.close", "Alphabet.Alphabet.config.logger.info", "open", "f.readlines", "sys.stdout.write", "line.split", "Alphabet.Alphabet.from_string"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_string", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_string", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_string"], ["self", ".", "dep_alphabet", ".", "initial", "(", "self", ".", "dep_state", ")", "\n", "self", ".", "label_alphabet", ".", "initial", "(", "self", ".", "label_state", ")", "\n", "\n", "# unkId and paddingId", "\n", "self", ".", "word_unkId", "=", "self", ".", "word_alphabet", ".", "from_string", "(", "unkkey", ")", "\n", "self", ".", "word_paddingId", "=", "self", ".", "word_alphabet", ".", "from_string", "(", "paddingkey", ")", "\n", "self", ".", "pos_paddingId", "=", "self", ".", "pos_alphabet", ".", "from_string", "(", "paddingkey", ")", "\n", "self", ".", "dep_paddingId", "=", "self", ".", "dep_alphabet", ".", "from_string", "(", "paddingkey", ")", "\n", "self", ".", "label_paddingId", "=", "self", ".", "label_alphabet", ".", "from_string", "(", "paddingkey", ")", "\n", "\n", "# fix the vocab", "\n", "self", ".", "word_alphabet", ".", "set_fixed_flag", "(", "True", ")", "\n", "self", ".", "label_alphabet", ".", "set_fixed_flag", "(", "True", ")", "\n", "self", ".", "pos_alphabet", ".", "set_fixed_flag", "(", "True", ")", "\n", "self", ".", "dep_alphabet", ".", "set_fixed_flag", "(", "True", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.get_params": [[26, 31], ["list", "filter", "model.named_parameters"], "methods", ["None"], ["        ", "\"\"\"Returns all name, parameter pairs with requires_grad=True.\"\"\"", "\n", "\n", "return", "list", "(", "\n", "filter", "(", "lambda", "p", ":", "p", "[", "1", "]", ".", "requires_grad", ",", "model", ".", "named_parameters", "(", ")", ")", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.__init__": [[32, 108], ["Optim.Optimizer.get_params", "len", "float", "len"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.get_params"], ["name", ",", "\n", "model", ",", "\n", "lr", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "\n", "grad_clip", "=", "None", ",", "\n", "optim_args", "=", "None", ",", "\n", "momentum", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param decay_method: Method of learning rate decay.\n\n        \"\"\"", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "init_lr", "=", "lr", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "gclip", "=", "None", "if", "grad_clip", "==", "\"None\"", "else", "float", "(", "grad_clip", ")", "\n", "\n", "self", ".", "_count", "=", "0", "\n", "\n", "if", "optim_args", "is", "None", ":", "\n", "            ", "optim_args", "=", "{", "}", "\n", "\n", "", "self", ".", "optim_args", "=", "optim_args", "\n", "\n", "# If an explicit lr given, pass it to torch optimizer", "\n", "if", "self", ".", "init_lr", ">", "0", ":", "\n", "            ", "self", ".", "optim_args", "[", "'lr'", "]", "=", "self", ".", "init_lr", "\n", "\n", "", "if", "self", ".", "name", "==", "\"SGD\"", "and", "self", ".", "momentum", "is", "not", "None", ":", "\n", "            ", "self", ".", "optim_args", "[", "'momentum'", "]", "=", "self", ".", "momentum", "\n", "\n", "# Get all parameters that require grads", "\n", "", "self", ".", "named_params", "=", "self", ".", "get_params", "(", "self", ".", "model", ")", "\n", "\n", "# Filter out names for gradient clipping", "\n", "self", ".", "params", "=", "[", "param", "for", "(", "name", ",", "param", ")", "in", "self", ".", "named_params", "]", "\n", "\n", "if", "self", ".", "weight_decay", ">", "0", ":", "\n", "            ", "weight_group", "=", "{", "\n", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "self", ".", "named_params", "if", "'bias'", "not", "in", "n", "]", ",", "\n", "'weight_decay'", ":", "self", ".", "weight_decay", ",", "\n", "}", "\n", "bias_group", "=", "{", "\n", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "self", ".", "named_params", "if", "'bias'", "in", "n", "]", ",", "\n", "}", "\n", "self", ".", "param_groups", "=", "[", "weight_group", ",", "bias_group", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "param_groups", "=", "[", "{", "'params'", ":", "self", ".", "params", "}", "]", "\n", "\n", "# Safety check", "\n", "", "n_params", "=", "len", "(", "self", ".", "params", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "n_params", "-=", "len", "(", "group", "[", "'params'", "]", ")", "\n", "", "assert", "n_params", "==", "0", ",", "\"Not all params are passed to the optimizer.\"", "\n", "\n", "# Create the actual optimizer", "\n", "self", ".", "optim", "=", "self", ".", "methods", "[", "self", ".", "name", "]", "(", "self", ".", "param_groups", ",", "\n", "**", "self", ".", "optim_args", ")", "\n", "\n", "# Assign shortcuts", "\n", "self", ".", "zero_grad", "=", "self", ".", "optim", ".", "zero_grad", "\n", "\n", "\n", "# Skip useless if evaluation logic if gradient_clip not requested", "\n", "if", "self", ".", "gclip", "==", "0", "or", "self", ".", "gclip", "is", "None", ":", "\n", "            ", "self", ".", "step", "=", "self", ".", "optim", ".", "step", "\n", "\n", "", "", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Gradient clipping aware step().\"\"\"", "\n", "if", "self", ".", "gclip", "is", "not", "None", "and", "self", ".", "gclip", ">", "0", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.zero_grad": [[109, 111], ["Optim.Optimizer.optim.zero_grad"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.zero_grad"], ["# print(\"aaaa\")", "\n", "            ", "clip_grad_norm", "(", "self", ".", "params", ",", "self", ".", "gclip", ")", "\n", "", "self", ".", "optim", ".", "step", "(", "closure", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.step": [[112, 118], ["Optim.Optimizer.optim.step", "torch.nn.utils.clip_grad_norm"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.step"], ["\n", "", "def", "rescale_lrate", "(", "self", ",", "scale", ",", "min_lrate", "=", "-", "1.0", ")", ":", "\n", "        ", "if", "isinstance", "(", "scale", ",", "list", ")", ":", "\n", "            ", "for", "scale_", ",", "group", "in", "zip", "(", "scale", ",", "self", ".", "optim", ".", "param_groups", ")", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "max", "(", "group", "[", "'lr'", "]", "*", "scale_", ",", "min_lrate", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "group", "in", "self", ".", "optim", ".", "param_groups", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.rescale_lrate": [[119, 126], ["isinstance", "zip", "max", "max"], "methods", ["None"], ["                ", "group", "[", "'lr'", "]", "=", "max", "(", "group", "[", "'lr'", "]", "*", "scale", ",", "min_lrate", ")", "\n", "\n", "", "", "", "def", "get_lrate", "(", "self", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "optim", ".", "param_groups", ":", "\n", "            ", "yield", "group", "[", "'lr'", "]", "\n", "\n", "", "", "def", "set_lrate", "(", "self", ",", "lr", ")", ":", "\n", "        ", "if", "isinstance", "(", "lr", ",", "list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.get_lrate": [[127, 130], ["None"], "methods", ["None"], ["            ", "for", "lr_", ",", "group", "in", "zip", "(", "lr", ",", "self", ".", "optim", ".", "param_groups", ")", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "lr_", "\n", "", "", "else", ":", "\n", "            ", "for", "group", "in", "self", ".", "optim", ".", "param_groups", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.set_lrate": [[131, 138], ["isinstance", "zip"], "methods", ["None"], ["                ", "group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "\"Optimizer => {} (lr: {}, weight_decay: {}, g_clip: {})\"", ".", "format", "(", "\n", "self", ".", "name", ",", "self", ".", "init_lr", ",", "self", ".", "weight_decay", ",", "self", ".", "gclip", ")", "\n", "return", "s", "", "", "", ""]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.__repr__": [[139, 143], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.decay_learning_rate": [[5, 12], ["print"], "function", ["None"], ["def", "decay_learning_rate", "(", "optimizer", ",", "epoch", ",", "init_lr", ",", "lr_decay", ")", ":", "\n", "    ", "lr", "=", "init_lr", "/", "(", "1", "+", "lr_decay", "*", "epoch", ")", "\n", "print", "(", "'learning rate: {0}'", ".", "format", "(", "lr", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "optimizer", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.__init__": [[2, 12], ["None"], "methods", ["None"], ["\n", "class", "Eval", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "predict_num", "=", "0", "\n", "self", ".", "correct_num", "=", "0", "\n", "self", ".", "gold_num", "=", "0", "\n", "\n", "self", ".", "precision", "=", "0", "\n", "self", ".", "recall", "=", "0", "\n", "self", ".", "fscore", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.clear_PRF": [[13, 21], ["None"], "methods", ["None"], ["self", ".", "acc", "=", "0", "\n", "\n", "", "def", "clear_PRF", "(", "self", ")", ":", "\n", "        ", "self", ".", "predict_num", "=", "0", "\n", "self", ".", "correct_num", "=", "0", "\n", "self", ".", "gold_num", "=", "0", "\n", "\n", "self", ".", "precision", "=", "0", "\n", "self", ".", "recall", "=", "0", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.getFscore": [[22, 54], ["range", "eval.Eval.accuracy", "len", "zip", "len", "len"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.accuracy"], ["self", ".", "fscore", "=", "0", "\n", "\n", "", "def", "getFscore", "(", "self", ",", "y_pred", ",", "y_true", ",", "all_sentence_length", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "            ", "sentence_length", "=", "all_sentence_length", "[", "i", "]", "\n", "\n", "for", "g_lable", "in", "y_true", "[", "i", "]", "[", ":", "sentence_length", "]", ":", "\n", "                ", "for", "p_lable", "in", "y_pred", "[", "i", "]", "[", ":", "sentence_length", "]", ":", "\n", "                    ", "if", "(", "p_lable", "==", "g_lable", ")", "and", "(", "p_lable", "!=", "'_'", ")", ":", "self", ".", "correct_num", "+=", "1", "\n", "\n", "", "", "true_labels", "=", "[", "item", "for", "item", "in", "y_true", "[", "i", "]", "[", ":", "sentence_length", "]", "if", "item", "!=", "'_'", "]", "\n", "pred_labels", "=", "[", "item", "for", "item", "in", "y_pred", "[", "i", "]", "[", ":", "sentence_length", "]", "if", "item", "!=", "'_'", "]", "\n", "self", ".", "predict_num", "+=", "len", "(", "pred_labels", ")", "\n", "self", ".", "gold_num", "+=", "len", "(", "true_labels", ")", "\n", "\n", "", "if", "self", ".", "predict_num", "==", "0", ":", "\n", "            ", "self", ".", "precision", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "precision", "=", "(", "self", ".", "correct_num", "/", "self", ".", "predict_num", ")", "*", "100", "\n", "\n", "", "if", "self", ".", "gold_num", "==", "0", ":", "\n", "            ", "self", ".", "recall", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "recall", "=", "(", "self", ".", "correct_num", "/", "self", ".", "gold_num", ")", "*", "100", "\n", "\n", "", "if", "self", ".", "precision", "+", "self", ".", "recall", "==", "0", ":", "\n", "            ", "self", ".", "fscore", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "fscore", "=", "(", "2", "*", "(", "self", ".", "precision", "*", "self", ".", "recall", ")", ")", "/", "(", "self", ".", "precision", "+", "self", ".", "recall", ")", "\n", "\n", "", "self", ".", "accuracy", "(", "y_pred", ",", "y_true", ",", "all_sentence_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.accuracy": [[55, 67], ["sum", "zip", "zip", "len"], "methods", ["None"], ["return", "self", ".", "precision", ",", "self", ".", "recall", ",", "self", ".", "fscore", ",", "self", ".", "acc", "\n", "\n", "", "def", "accuracy", "(", "self", ",", "predict_labels", ",", "gold_labels", ",", "all_sentence_length", ")", ":", "\n", "        ", "cor", "=", "0", "\n", "totol_leng", "=", "sum", "(", "[", "len", "(", "predict_label", ")", "for", "predict_label", "in", "predict_labels", "]", ")", "\n", "\n", "for", "p_lable", ",", "g_lable", ",", "sentence_length", "in", "zip", "(", "predict_labels", ",", "gold_labels", ",", "all_sentence_length", ")", ":", "\n", "            ", "for", "p_lable_", ",", "g_lable_", "in", "zip", "(", "p_lable", "[", ":", "sentence_length", "]", ",", "g_lable", "[", ":", "sentence_length", "]", ")", ":", "\n", "                ", "if", "p_lable_", "==", "g_lable_", ":", "\n", "                    ", "cor", "+=", "1", "\n", "\n", "", "", "", "self", ".", "acc", "=", "cor", "/", "totol_leng", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Instance.Instance.__init__": [[13, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "words", "=", "[", "]", "\n", "self", ".", "pos", "=", "[", "]", "\n", "self", ".", "prd", "=", "[", "]", "\n", "self", ".", "prd_posi", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "\n", "self", ".", "elmo_token_index", "=", "[", "]", "\n", "self", ".", "elmo_char_index", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoaderHelp._write_shuffle_inst_to_file": [[68, 83], ["os.path.exists", "open", "enumerate", "config.logger.info", "os.remove", "zip", "open.write", "open.write", "str"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["insts", "=", "self", ".", "_Load_Each_Data", "(", "path", "=", "sub_data", ")", "\n", "this_insts", "[", "sub_name", "]", "=", "insts", "\n", "\n", "", "self", ".", "data_list", ".", "append", "(", "this_insts", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "data_list", ")", "==", "3", ":", "\n", "            ", "self", ".", "config", ".", "train_cnt", "=", "len", "(", "self", ".", "data_list", "[", "0", "]", ")", "\n", "self", ".", "config", ".", "dev_cnt", "=", "len", "(", "self", ".", "data_list", "[", "1", "]", ")", "\n", "self", ".", "config", ".", "test_cnt", "=", "len", "(", "self", ".", "data_list", "[", "2", "]", ")", "\n", "return", "self", ".", "data_list", "[", "0", "]", ",", "self", ".", "data_list", "[", "1", "]", ",", "self", ".", "data_list", "[", "2", "]", "\n", "\n", "", "", "def", "load_single", "(", "self", ",", "domain", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "paths", "=", "self", ".", "path", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoader.__init__": [[90, 102], ["DataLoader.DataLoader.config.logger.info"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["            ", "this_insts", "=", "{", "sub_name", ":", "list", "(", ")", "for", "sub_name", "in", "self", ".", "domains", "}", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Loading Data From {}\"", ".", "format", "(", "paths", "[", "id_data", "]", ")", ")", "\n", "insts", "=", "self", ".", "_Load_Each_Data", "(", "path", "=", "paths", "[", "id_data", "]", ")", "\n", "this_insts", "[", "domain", "]", "=", "insts", "\n", "self", ".", "data_list", ".", "append", "(", "this_insts", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "data_list", ")", "==", "3", ":", "\n", "            ", "self", ".", "config", ".", "train_cnt", "=", "len", "(", "self", ".", "data_list", "[", "0", "]", ")", "\n", "self", ".", "config", ".", "dev_cnt", "=", "len", "(", "self", ".", "data_list", "[", "1", "]", ")", "\n", "self", ".", "config", ".", "test_cnt", "=", "len", "(", "self", ".", "data_list", "[", "2", "]", ")", "\n", "return", "self", ".", "data_list", "[", "0", "]", ",", "self", ".", "data_list", "[", "1", "]", ",", "self", ".", "data_list", "[", "2", "]", "\n", "\n", "", "", "def", "_Load_Each_Data", "(", "self", ",", "path", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoader.load": [[53, 78], ["isinstance", "range", "DataLoader.DataLoader.config.logger.info", "DataLoader.DataLoader.config.logger.info", "len", "DataLoader.DataLoader.data_list.append", "len", "len", "len", "len", "list", "DataLoader.DataLoader.config.logger.info", "DataLoader.DataLoader._Load_Each_Data"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoader._Load_Each_Data"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "paths", "=", "self", ".", "path", "\n", "assert", "isinstance", "(", "paths", ",", "list", ")", ",", "\"Path Must Be In List\"", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Data Path {}\"", ".", "format", "(", "path", ")", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "''", ")", "\n", "\n", "", "for", "id_data", "in", "range", "(", "len", "(", "paths", ")", ")", ":", "\n", "            ", "this_insts", "=", "{", "sub_name", ":", "list", "(", ")", "for", "sub_name", "in", "self", ".", "domains", "}", "\n", "for", "sub_name", "in", "self", ".", "domains", ":", "\n", "                ", "sub_data", "=", "paths", "[", "id_data", "]", "[", "sub_name", "]", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Loading Data From {}\"", ".", "format", "(", "sub_data", ")", ")", "\n", "insts", "=", "self", ".", "_Load_Each_Data", "(", "path", "=", "sub_data", ")", "\n", "this_insts", "[", "sub_name", "]", "=", "insts", "\n", "\n", "", "self", ".", "data_list", ".", "append", "(", "this_insts", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "data_list", ")", "==", "3", ":", "\n", "            ", "self", ".", "config", ".", "train_cnt", "=", "len", "(", "self", ".", "data_list", "[", "0", "]", ")", "\n", "self", ".", "config", ".", "dev_cnt", "=", "len", "(", "self", ".", "data_list", "[", "1", "]", ")", "\n", "self", ".", "config", ".", "test_cnt", "=", "len", "(", "self", ".", "data_list", "[", "2", "]", ")", "\n", "return", "self", ".", "data_list", "[", "0", "]", ",", "self", ".", "data_list", "[", "1", "]", ",", "self", ".", "data_list", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoader.load_single": [[79, 101], ["isinstance", "range", "DataLoader.DataLoader.config.logger.info", "DataLoader.DataLoader.config.logger.info", "len", "DataLoader.DataLoader.config.logger.info", "DataLoader.DataLoader._Load_Each_Data", "DataLoader.DataLoader.data_list.append", "len", "len", "len", "len", "list"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoader._Load_Each_Data"], ["", "", "def", "load_single", "(", "self", ",", "domain", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "paths", "=", "self", ".", "path", "\n", "assert", "isinstance", "(", "paths", ",", "list", ")", ",", "\"Path Must Be In List\"", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Data Path {}\"", ".", "format", "(", "path", ")", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "''", ")", "\n", "\n", "", "for", "id_data", "in", "range", "(", "len", "(", "paths", ")", ")", ":", "\n", "            ", "this_insts", "=", "{", "sub_name", ":", "list", "(", ")", "for", "sub_name", "in", "self", ".", "domains", "}", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Loading Data From {}\"", ".", "format", "(", "paths", "[", "id_data", "]", ")", ")", "\n", "insts", "=", "self", ".", "_Load_Each_Data", "(", "path", "=", "paths", "[", "id_data", "]", ")", "\n", "this_insts", "[", "domain", "]", "=", "insts", "\n", "self", ".", "data_list", ".", "append", "(", "this_insts", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "data_list", ")", "==", "3", ":", "\n", "            ", "self", ".", "config", ".", "train_cnt", "=", "len", "(", "self", ".", "data_list", "[", "0", "]", ")", "\n", "self", ".", "config", ".", "dev_cnt", "=", "len", "(", "self", ".", "data_list", "[", "1", "]", ")", "\n", "self", ".", "config", ".", "test_cnt", "=", "len", "(", "self", ".", "data_list", "[", "2", "]", ")", "\n", "return", "self", ".", "data_list", "[", "0", "]", ",", "self", ".", "data_list", "[", "1", "]", ",", "self", ".", "data_list", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoader._Load_Each_Data": [[122, 149], ["open", "DataUtils.Instance.Instance", "enumerate", "f.readlines", "line.strip().split.strip().split.strip", "len", "len", "insts.append", "len", "insts.append", "DataUtils.Instance.Instance", "line.strip().split.strip().split.strip().split", "DataUtils.Instance.Instance.words.append", "DataUtils.Instance.Instance.labels.append", "len", "len", "line.strip().split.strip().split.strip"], "methods", ["None"], ["inst", ".", "words", ".", "append", "(", "line", "[", "0", "]", ")", "\n", "inst", ".", "pos", ".", "append", "(", "line", "[", "1", "]", ")", "\n", "inst", ".", "prd", ".", "append", "(", "line", "[", "2", "]", ")", "\n", "inst", ".", "prd_posi", ".", "append", "(", "1", "if", "line", "[", "2", "]", "!=", "nullkey", "else", "0", ")", "\n", "inst", ".", "labels", ".", "append", "(", "line", "[", "3", "]", ")", "\n", "", "if", "len", "(", "insts", ")", "==", "self", ".", "max_count", ":", "\n", "                    ", "break", "\n", "", "", "if", "len", "(", "inst", ".", "words", ")", "!=", "0", ":", "\n", "                ", "inst", ".", "words_size", "=", "len", "(", "inst", ".", "words", ")", "\n", "insts", ".", "append", "(", "inst", ")", "\n", "", "", "random", ".", "shuffle", "(", "insts", ")", "\n", "return", "insts", "\n", "", "", ""]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.BatchFeatures.__init__": [[13, 21], ["None"], "methods", ["None"], ["        ", "self", ".", "batch_length", "=", "0", "\n", "self", ".", "inst", "=", "None", "\n", "self", ".", "lang", "=", "None", "\n", "self", ".", "mask", "=", "None", "\n", "self", ".", "word_features", "=", "None", "\n", "self", ".", "pos_features", "=", "None", "\n", "self", ".", "elmo_char_seqs", "=", "None", "\n", "self", ".", "elmo_word_seqs", "=", "None", "\n", "self", ".", "prd_features", "=", "None", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.BatchFeatures.cuda": [[22, 27], ["features.word_features.cuda", "features.label_features.cuda"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.BatchFeatures.cuda", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.BatchFeatures.cuda"], ["self", ".", "prd_posi_features", "=", "None", "\n", "self", ".", "label_features", "=", "None", "\n", "self", ".", "sentence_length", "=", "[", "]", "\n", "self", ".", "desorted_indices", "=", "None", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators.__init__": [[33, 44], ["None"], "methods", ["None"], ["features", ".", "word_features", "=", "features", ".", "word_features", ".", "cuda", "(", ")", "\n", "features", ".", "elmo_char_seqs", "=", "features", ".", "elmo_char_seqs", ".", "cuda", "(", ")", "\n", "features", ".", "elmo_word_seqs", "=", "features", ".", "elmo_word_seqs", ".", "cuda", "(", ")", "\n", "features", ".", "label_features", "=", "features", ".", "label_features", ".", "cuda", "(", ")", "\n", "features", ".", "pos_features", "=", "features", ".", "pos_features", ".", "cuda", "(", ")", "\n", "features", ".", "prd_posi_features", "=", "features", ".", "prd_posi_features", ".", "cuda", "(", ")", "\n", "features", ".", "prd_posi_features", ".", "requires_grad", "=", "False", "\n", "features", ".", "mask", "=", "features", ".", "mask", ".", "cuda", "(", ")", "\n", "features", ".", "mask", ".", "requires_grad", "=", "False", "\n", "features", ".", "lang", "=", "features", ".", "lang", ".", "cuda", "(", ")", "\n", "features", ".", "lang", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators.createIterator": [[45, 66], ["isinstance", "isinstance", "range", "len", "BatchIterator.Iterators.config.logger.info", "BatchIterator.Iterators._convert_word2id", "BatchIterator.Iterators._Create_Each_Iterator", "BatchIterator.Iterators.data_iter.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators._convert_word2id", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators._Create_Each_Iterator"], ["features", ".", "prd_features", "=", "features", ".", "prd_features", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "", "class", "Iterators", ":", "\n", "    ", "\"\"\"\n    Iterators\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "domains", "=", "None", ",", "batch_size", "=", "None", ",", "data", "=", "None", ",", "operator", "=", "None", ",", "lang2id", "=", "None", ",", "device", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "domains", "=", "domains", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "elmo_toten_vocab", "=", "{", "}", "\n", "self", ".", "elmo_char_vocab", "=", "{", "paddingkey", ":", "k", "for", "k", "in", "range", "(", "262", ")", "}", "\n", "for", "id_", ",", "token", "in", "enumerate", "(", "config", ".", "elmo_vocab", ")", ":", "\n", "            ", "self", ".", "elmo_toten_vocab", "[", "token", "]", "=", "id_", "\n", "\n", "", "self", ".", "iterator", "=", "[", "]", "\n", "self", ".", "batch", "=", "[", "]", "\n", "self", ".", "features", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators.reset_flag4trainset": [[107, 109], ["None"], "methods", ["None"], ["", "", "def", "reset_flag4trainset", "(", "self", ")", ":", "\n", "        ", "self", ".", "flag", "=", "{", "sub_name", ":", "True", "for", "sub_name", "in", "self", ".", "domains", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators.createSetIterator": [[110, 168], ["BatchIterator.Iterators.config.logger.info", "BatchIterator.Iterators._convert_word2id", "random.choice", "BatchIterator.Iterators._Create_Each_Batch", "enumerate", "random.choice", "insts.extend", "batch.append", "len", "random.sample", "len", "BatchIterator.Iterators._Create_Each_Batch", "len", "BatchIterator.Iterators._Create_Each_Batch", "len", "len"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators._convert_word2id", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators._Create_Each_Batch", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators._Create_Each_Batch", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators._Create_Each_Batch"], ["", "def", "createSetIterator", "(", "self", ",", "setIndex", "=", "0", ",", "T_domain", "=", "None", ",", "isTrain", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*****************    create {train} iterator    **************\"", ")", "\n", "for", "domain", "in", "self", ".", "domains", ":", "\n", "            ", "self", ".", "_convert_word2id", "(", "self", ".", "data", "[", "setIndex", "]", "[", "domain", "]", ")", "\n", "\n", "", "batch_size", "=", "self", ".", "batch_size", "[", "setIndex", "]", "\n", "\n", "if", "T_domain", "==", "None", ":", "\n", "            ", "domain", "=", "random", ".", "choice", "(", "self", ".", "domains", ")", "\n", "\n", "k", "=", "0", "\n", "while", "not", "self", ".", "flag", "[", "domain", "]", ":", "\n", "                ", "domain", "=", "random", ".", "choice", "(", "self", ".", "domains", ")", "\n", "k", "+=", "1", "\n", "\n", "if", "k", ">", "len", "(", "self", ".", "flag", ")", ":", "\n", "                    ", "return", "\n", "", "", "", "else", ":", "\n", "            ", "domain", "=", "T_domain", "\n", "\n", "", "if", "isTrain", ":", "\n", "            ", "cur_start_pointer", "=", "self", ".", "pointers", "[", "setIndex", "]", "[", "domain", "]", "\n", "\n", "if", "(", "cur_start_pointer", "%", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", ")", "<=", "(", "\n", "(", "cur_start_pointer", "+", "batch_size", ")", "%", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", ")", ":", "\n", "                ", "insts", "=", "self", ".", "data", "[", "setIndex", "]", "[", "domain", "]", "[", "cur_start_pointer", "%", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", ":", "\n", "(", "cur_start_pointer", "+", "batch_size", ")", "%", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", "]", "\n", "self", ".", "pointers", "[", "setIndex", "]", "[", "domain", "]", "=", "(", "cur_start_pointer", "+", "batch_size", ")", "%", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", "\n", "\n", "", "else", ":", "\n", "                ", "insts", "=", "self", ".", "data", "[", "setIndex", "]", "[", "domain", "]", "[", "\n", "cur_start_pointer", "%", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", ":", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", "]", "\n", "insts", ".", "extend", "(", "random", ".", "sample", "(", "self", ".", "data", "[", "setIndex", "]", "[", "domain", "]", ",", "k", "=", "(", "batch_size", "-", "len", "(", "insts", ")", ")", ")", ")", "\n", "self", ".", "pointers", "[", "setIndex", "]", "[", "domain", "]", "=", "0", "\n", "self", ".", "flag", "[", "domain", "]", "=", "False", "\n", "\n", "", "one_batch", "=", "self", ".", "_Create_Each_Batch", "(", "domain", "=", "domain", ",", "insts", "=", "insts", ",", "batch_size", "=", "self", ".", "batch_size", "[", "setIndex", "]", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "yield", "one_batch", "\n", "", "else", ":", "\n", "            ", "batch", "=", "[", "]", "\n", "count_inst", "=", "0", "\n", "for", "index", ",", "inst", "in", "enumerate", "(", "self", ".", "data", "[", "setIndex", "]", "[", "domain", "]", ")", ":", "\n", "                ", "batch", ".", "append", "(", "inst", ")", "\n", "count_inst", "+=", "1", "\n", "if", "len", "(", "batch", ")", "==", "self", ".", "batch_size", "[", "setIndex", "]", ":", "\n", "                    ", "one_batch", "=", "self", ".", "_Create_Each_Batch", "(", "domain", "=", "domain", ",", "insts", "=", "batch", ",", "\n", "batch_size", "=", "self", ".", "batch_size", "[", "setIndex", "]", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "\n", "yield", "one_batch", "\n", "batch", "=", "[", "]", "\n", "", "if", "count_inst", "==", "len", "(", "self", ".", "data", "[", "setIndex", "]", ")", ":", "\n", "                    ", "one_batch", "=", "self", ".", "_Create_Each_Batch", "(", "domain", "=", "domain", ",", "insts", "=", "batch", ",", "batch_size", "=", "len", "(", "batch", ")", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "yield", "one_batch", "\n", "batch", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators._convert_word2id": [[67, 82], ["range", "operator.word_alphabet.from_string", "inst.words_index.append", "operator.label_alphabet.from_string", "inst.label_index.append"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_string", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_string"], ["self", ".", "data_iter", "=", "[", "]", "\n", "\n", "self", ".", "lang2id", "=", "lang2id", "\n", "\n", "self", ".", "w2i_word", "=", "config", ".", "wordembeddings", ".", "w2i", "\n", "self", ".", "w2i_pos", "=", "config", ".", "posembeddings", ".", "w2i", "\n", "self", ".", "w2i_prd", "=", "config", ".", "predembeddings", ".", "w2i", "\n", "self", ".", "w2i_arg", "=", "config", ".", "argvocab", ".", "c2i", "\n", "\n", "self", ".", "word_paddingId", "=", "config", ".", "word_paddingId", "\n", "self", ".", "pos_paddingId", "=", "config", ".", "pos_paddingId", "\n", "self", ".", "prd_paddingId", "=", "config", ".", "prd_paddingId", "\n", "self", ".", "arg_paddingId", "=", "config", ".", "arg_paddingId", "\n", "\n", "self", ".", "pointers", "=", "{", "ind", ":", "dict", "(", "{", "sub_name", ":", "0", "for", "sub_name", "in", "self", ".", "domains", "}", ")", "for", "ind", "in", "range", "(", "3", ")", "}", "\n", "self", ".", "lengths", "=", "{", "ind", ":", "dict", "(", "{", "sub_name", ":", "len", "(", "self", ".", "data", "[", "ind", "]", "[", "sub_name", "]", ")", "for", "sub_name", "in", "self", ".", "domains", "}", ")", "for", "ind", "in", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators._Create_Each_Iterator": [[84, 102], ["enumerate", "BatchIterator.Iterators.config.logger.info", "batch.append", "BatchIterator.Iterators._Create_Each_Batch", "BatchIterator.Iterators.features.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators._Create_Each_Batch"], ["\n", "", "def", "createIterator", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :param batch_size:  batch size\n        :param data:  data\n        :param operator:\n        :param config:\n        :return:\n        \"\"\"", "\n", "assert", "isinstance", "(", "self", ".", "data", ",", "list", ")", ",", "\"ERROR: data must be in list [train_data,dev_data]\"", "\n", "assert", "isinstance", "(", "self", ".", "batch_size", ",", "list", ")", ",", "\"ERROR: batch_size must be in list [16,1,1]\"", "\n", "for", "id_data", "in", "range", "(", "len", "(", "self", ".", "data", ")", ")", ":", "\n", "            ", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*****************    create {} iterator    **************\"", ".", "format", "(", "id_data", "+", "1", ")", ")", "\n", "self", ".", "_convert_word2id", "(", "self", ".", "data", "[", "id_data", "]", ")", "\n", "self", ".", "features", "=", "self", ".", "_Create_Each_Iterator", "(", "insts", "=", "self", ".", "data", "[", "id_data", "]", ",", "batch_size", "=", "self", ".", "batch_size", "[", "id_data", "]", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "data_iter", ".", "append", "(", "self", ".", "features", ")", "\n", "self", ".", "features", "=", "[", "]", "\n", "", "if", "len", "(", "self", ".", "data_iter", ")", "==", "2", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators._Create_Each_Batch": [[103, 157], ["len", "numpy.zeros", "numpy.zeros", "range", "torch.from_numpy().long", "torch.from_numpy().long", "BatchIterator.BatchFeatures", "sentence_length.append", "range", "BatchIterator.BatchFeatures.cuda", "len", "len", "torch.from_numpy", "torch.from_numpy", "len"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.BatchFeatures.cuda"], ["            ", "return", "self", ".", "data_iter", "[", "0", "]", ",", "self", ".", "data_iter", "[", "1", "]", "\n", "", "if", "len", "(", "self", ".", "data_iter", ")", "==", "3", ":", "\n", "            ", "return", "self", ".", "data_iter", "[", "0", "]", ",", "self", ".", "data_iter", "[", "1", "]", ",", "self", ".", "data_iter", "[", "2", "]", "\n", "\n", "", "", "def", "reset_flag4trainset", "(", "self", ")", ":", "\n", "        ", "self", ".", "flag", "=", "{", "sub_name", ":", "True", "for", "sub_name", "in", "self", ".", "domains", "}", "\n", "\n", "", "def", "createSetIterator", "(", "self", ",", "setIndex", "=", "0", ",", "T_domain", "=", "None", ",", "isTrain", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*****************    create {train} iterator    **************\"", ")", "\n", "for", "domain", "in", "self", ".", "domains", ":", "\n", "            ", "self", ".", "_convert_word2id", "(", "self", ".", "data", "[", "setIndex", "]", "[", "domain", "]", ")", "\n", "\n", "", "batch_size", "=", "self", ".", "batch_size", "[", "setIndex", "]", "\n", "\n", "if", "T_domain", "==", "None", ":", "\n", "            ", "domain", "=", "random", ".", "choice", "(", "self", ".", "domains", ")", "\n", "\n", "k", "=", "0", "\n", "while", "not", "self", ".", "flag", "[", "domain", "]", ":", "\n", "                ", "domain", "=", "random", ".", "choice", "(", "self", ".", "domains", ")", "\n", "k", "+=", "1", "\n", "\n", "if", "k", ">", "len", "(", "self", ".", "flag", ")", ":", "\n", "                    ", "return", "\n", "", "", "", "else", ":", "\n", "            ", "domain", "=", "T_domain", "\n", "\n", "", "if", "isTrain", ":", "\n", "            ", "cur_start_pointer", "=", "self", ".", "pointers", "[", "setIndex", "]", "[", "domain", "]", "\n", "\n", "if", "(", "cur_start_pointer", "%", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", ")", "<=", "(", "\n", "(", "cur_start_pointer", "+", "batch_size", ")", "%", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", ")", ":", "\n", "                ", "insts", "=", "self", ".", "data", "[", "setIndex", "]", "[", "domain", "]", "[", "cur_start_pointer", "%", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", ":", "\n", "(", "cur_start_pointer", "+", "batch_size", ")", "%", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", "]", "\n", "self", ".", "pointers", "[", "setIndex", "]", "[", "domain", "]", "=", "(", "cur_start_pointer", "+", "batch_size", ")", "%", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", "\n", "\n", "", "else", ":", "\n", "                ", "insts", "=", "self", ".", "data", "[", "setIndex", "]", "[", "domain", "]", "[", "\n", "cur_start_pointer", "%", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", ":", "self", ".", "lengths", "[", "setIndex", "]", "[", "domain", "]", "]", "\n", "insts", ".", "extend", "(", "random", ".", "sample", "(", "self", ".", "data", "[", "setIndex", "]", "[", "domain", "]", ",", "k", "=", "(", "batch_size", "-", "len", "(", "insts", ")", ")", ")", ")", "\n", "self", ".", "pointers", "[", "setIndex", "]", "[", "domain", "]", "=", "0", "\n", "self", ".", "flag", "[", "domain", "]", "=", "False", "\n", "\n", "", "one_batch", "=", "self", ".", "_Create_Each_Batch", "(", "domain", "=", "domain", ",", "insts", "=", "insts", ",", "batch_size", "=", "self", ".", "batch_size", "[", "setIndex", "]", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "yield", "one_batch", "\n", "", "else", ":", "\n", "            ", "batch", "=", "[", "]", "\n", "count_inst", "=", "0", "\n", "for", "index", ",", "inst", "in", "enumerate", "(", "self", ".", "data", "[", "setIndex", "]", "[", "domain", "]", ")", ":", "\n", "                ", "batch", ".", "append", "(", "inst", ")", "\n", "count_inst", "+=", "1", "\n", "if", "len", "(", "batch", ")", "==", "self", ".", "batch_size", "[", "setIndex", "]", ":", "\n", "                    ", "one_batch", "=", "self", ".", "_Create_Each_Batch", "(", "domain", "=", "domain", ",", "insts", "=", "batch", ",", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.get_learning_algorithm": [[22, 34], ["config.logger.info"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["if", "config", ".", "adam", "is", "True", ":", "\n", "        ", "algorithm", "=", "\"Adam\"", "\n", "", "elif", "config", ".", "sgd", "is", "True", ":", "\n", "        ", "algorithm", "=", "\"SGD\"", "\n", "", "config", ".", "logger", ".", "info", "(", "\"learning algorithm is {}.\"", ".", "format", "(", "algorithm", ")", ")", "\n", "return", "algorithm", "\n", "\n", "", "def", "save_dict2file", "(", "config", ",", "dict", ",", "path", ")", ":", "\n", "    ", "\"\"\"\n    :param dict:  dict\n    :param path:  path to save dict\n    :return:\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.save_dict2file": [[56, 71], ["config.logger.info", "os.path.exists", "open", "dict.items", "open.close", "config.logger.info", "config.logger.info", "open.write", "str", "str"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "config", ".", "word_dict_path", "=", "\"/\"", ".", "join", "(", "[", "config", ".", "dict_directory", ",", "config", ".", "word_dict", "]", ")", "\n", "config", ".", "label_dict_path", "=", "\"/\"", ".", "join", "(", "[", "config", ".", "dict_directory", ",", "config", ".", "label_dict", "]", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"word_dict_path : {}\"", ".", "format", "(", "config", ".", "word_dict_path", ")", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"label_dict_path : {}\"", ".", "format", "(", "config", ".", "label_dict_path", ")", ")", "\n", "\n", "save_dict2file", "(", "config", ",", "config", ".", "create_alphabet", ".", "word_alphabet", ".", "words2id", ",", "config", ".", "word_dict_path", ")", "\n", "save_dict2file", "(", "config", ",", "config", ".", "create_alphabet", ".", "label_alphabet", ".", "words2id", ",", "config", ".", "label_dict_path", ")", "\n", "\n", "config", ".", "logger", ".", "info", "(", "\"copy dictionary to {}\"", ".", "format", "(", "config", ".", "save_dir", ")", ")", "\n", "shutil", ".", "copytree", "(", "config", ".", "dict_directory", ",", "\"/\"", ".", "join", "(", "[", "config", ".", "save_dir", ",", "config", ".", "dict_directory", "+", "\"_bak\"", "]", ")", ")", "\n", "\n", "", "", "def", "create_all_embeds_and_vocabs_v2", "(", "config", ",", "logger", ",", "embedding_file_path_pa", ",", "multi_lingual_embed_dict", ",", "ordered_domains", ")", ":", "\n", "    ", "pos_set", "=", "list", "(", "[", "paddingkey", ",", "nullkey", "]", ")", "\n", "pred_set", "=", "list", "(", "[", "paddingkey", ",", "nullkey", ",", "unkkey", "]", ")", "\n", "arg_set", "=", "list", "(", "[", "paddingkey", ",", "nullkey", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.save_dictionary": [[73, 93], ["os.path.exists", "config.logger.info", "config.logger.info", "mainHelp.save_dict2file", "mainHelp.save_dict2file", "config.logger.info", "shutil.copytree", "shutil.rmtree", "os.path.isdir", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.save_dict2file", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.save_dict2file", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["id2word_dict", "=", "dict", "(", "{", "0", ":", "paddingkey", ",", "1", ":", "unkkey", "}", ")", "\n", "word2id_dict", "=", "dict", "(", "{", "paddingkey", ":", "0", ",", "unkkey", ":", "1", "}", ")", "\n", "\n", "for", "domain", "in", "ordered_domains", ":", "\n", "        ", "logger", ".", "info", "(", "'loading for %s .'", "%", "domain", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "cur_word_set", "=", "list", "(", ")", "\n", "cur_valid_word_set", "=", "list", "(", ")", "\n", "\n", "input_filenames", "=", "get_file_path", "(", "config", ",", "domain", ")", "\n", "for", "input_filename", "in", "input_filenames", ":", "\n", "\n", "            ", "with", "open", "(", "input_filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "                ", "def", "_add_", "(", "coll", ",", "obj", ")", ":", "\n", "                    ", "if", "obj", "not", "in", "coll", ":", "\n", "                        ", "coll", ".", "append", "(", "obj", ")", "\n", "\n", "", "", "ind", "=", "0", "\n", "for", "row", "in", "file", ":", "\n", "                    ", "ind", "+=", "1", "\n", "if", "ind", "==", "1", ":", "continue", "# columns, skip first line", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.create_all_embeds_and_vocabs_v2": [[67, 127], ["list", "list", "list", "list", "dict", "dict", "DataUtils.Embed.Embeddings", "DataUtils.Embed.Embeddings", "DataUtils.Embed.Embeddings", "Vocab", "logger.info", "time.time", "list", "list", "mainHelp.get_file_path", "logger.info", "logger.info", "open", "len", "len", "list.append", "list.append", "len", "row.strip", "row.strip.split", "mainHelp.create_all_embeds_and_vocabs_v2._add_"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.get_file_path", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "", "def", "create_all_embeds_and_vocabs_v2", "(", "config", ",", "logger", ",", "embedding_file_path_pa", ",", "multi_lingual_embed_dict", ",", "ordered_domains", ")", ":", "\n", "    ", "pos_set", "=", "list", "(", "[", "paddingkey", ",", "nullkey", "]", ")", "\n", "pred_set", "=", "list", "(", "[", "paddingkey", ",", "nullkey", ",", "unkkey", "]", ")", "\n", "arg_set", "=", "list", "(", "[", "paddingkey", ",", "nullkey", "]", ")", "\n", "\n", "word_set", "=", "list", "(", "[", "paddingkey", ",", "unkkey", "]", ")", "\n", "id2word_dict", "=", "dict", "(", "{", "0", ":", "paddingkey", ",", "1", ":", "unkkey", "}", ")", "\n", "word2id_dict", "=", "dict", "(", "{", "paddingkey", ":", "0", ",", "unkkey", ":", "1", "}", ")", "\n", "\n", "for", "domain", "in", "ordered_domains", ":", "\n", "        ", "logger", ".", "info", "(", "'loading for %s .'", "%", "domain", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "cur_word_set", "=", "list", "(", ")", "\n", "cur_valid_word_set", "=", "list", "(", ")", "\n", "\n", "input_filenames", "=", "get_file_path", "(", "config", ",", "domain", ")", "\n", "for", "input_filename", "in", "input_filenames", ":", "\n", "\n", "            ", "with", "open", "(", "input_filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "                ", "def", "_add_", "(", "coll", ",", "obj", ")", ":", "\n", "                    ", "if", "obj", "not", "in", "coll", ":", "\n", "                        ", "coll", ".", "append", "(", "obj", ")", "\n", "\n", "", "", "ind", "=", "0", "\n", "for", "row", "in", "file", ":", "\n", "                    ", "ind", "+=", "1", "\n", "if", "ind", "==", "1", ":", "continue", "# columns, skip first line", "\n", "\n", "line", "=", "row", ".", "strip", "(", ")", "\n", "\n", "if", "line", "==", "\"\"", ":", "continue", "\n", "\n", "tokens", "=", "line", ".", "split", "(", ")", "\n", "\n", "word_", "=", "tokens", "[", "0", "]", "\n", "_add_", "(", "cur_word_set", ",", "word_", ")", "\n", "\n", "pos", "=", "tokens", "[", "1", "]", "\n", "_add_", "(", "pos_set", ",", "pos", ")", "\n", "pred", "=", "tokens", "[", "2", "]", "\n", "_add_", "(", "pred_set", ",", "pred", ")", "\n", "\n", "arg", "=", "tokens", "[", "3", "]", "\n", "_add_", "(", "arg_set", ",", "arg", ")", "\n", "\n", "", "", "", "logger", ".", "info", "(", "'cur_word_set: %d'", "%", "len", "(", "cur_word_set", ")", ")", "\n", "for", "item", "in", "cur_word_set", ":", "\n", "            ", "if", "item", "not", "in", "word_set", ":", "\n", "                ", "id2word_dict", "[", "len", "(", "word_set", ")", "]", "=", "item", "\n", "word2id_dict", "[", "item", "]", "=", "len", "(", "word_set", ")", "\n", "word_set", ".", "append", "(", "item", ")", "\n", "cur_valid_word_set", ".", "append", "(", "item", ")", "\n", "", "", "logger", ".", "info", "(", "'cur_valid_word_set: %d'", "%", "len", "(", "cur_valid_word_set", ")", ")", "\n", "\n", "", "wordembeddings", "=", "Embeddings", "(", "config", ".", "embed_dim", ",", "word_set", ")", "\n", "posembeddings", "=", "Embeddings", "(", "config", ".", "pos_embed_dim", ",", "pos_set", ")", "\n", "predembeddings", "=", "Embeddings", "(", "config", ".", "prd_embed_dim", ",", "pred_set", ")", "\n", "argvocab", "=", "Vocab", "(", "arg_set", ")", "\n", "\n", "return", "wordembeddings", ",", "posembeddings", ",", "predembeddings", ",", "argvocab", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.create_all_embeds_and_vocabs": [[129, 224], ["list", "list", "list", "dict", "dict", "np.random.normal", "logger.info", "DataUtils.Embed.Embeddings", "DataUtils.Embed.Embeddings", "Vocab", "logger.info", "time.time", "list", "list", "mainHelp.get_file_path", "logger.info", "logger.info", "os.path.join", "open", "file.readlines", "tqdm.tqdm", "logger.info", "time.time", "logger.info", "logger.info", "len", "open", "len", "len", "list.append", "list.append", "len", "row.strip.split", "len", "row.strip", "row.strip.split", "mainHelp.create_all_embeds_and_vocabs_v2._add_"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.get_file_path", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "create_all_embeds_and_vocabs", "(", "config", ",", "logger", ",", "embedding_file_path_pa", ",", "multi_lingual_embed_dict", ",", "ordered_domains", ")", ":", "\n", "    ", "pred_set", "=", "list", "(", "[", "paddingkey", ",", "nullkey", ",", "unkkey", "]", ")", "\n", "arg_set", "=", "list", "(", "[", "paddingkey", ",", "nullkey", "]", ")", "\n", "word_set", "=", "list", "(", "[", "paddingkey", ",", "unkkey", "]", ")", "\n", "id2word_dict", "=", "dict", "(", "{", "0", ":", "paddingkey", ",", "1", ":", "unkkey", "}", ")", "\n", "word2id_dict", "=", "dict", "(", "{", "paddingkey", ":", "0", ",", "unkkey", ":", "1", "}", ")", "\n", "\n", "id2vec_embed_big", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "[", "350000", ",", "config", ".", "embed_dim", "]", ")", "\n", "\n", "total_ling_word_loading_cnt", "=", "0", "\n", "for", "domain", "in", "ordered_domains", ":", "\n", "        ", "logger", ".", "info", "(", "'loading for %s .'", "%", "domain", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "cur_word_set", "=", "list", "(", ")", "\n", "cur_valid_word_set", "=", "list", "(", ")", "\n", "\n", "input_filenames", "=", "get_file_path", "(", "config", ",", "domain", ")", "\n", "for", "input_filename", "in", "input_filenames", ":", "\n", "\n", "            ", "with", "open", "(", "input_filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "                ", "def", "_add_", "(", "coll", ",", "obj", ")", ":", "\n", "                    ", "if", "obj", "not", "in", "coll", ":", "\n", "                        ", "coll", ".", "append", "(", "obj", ")", "\n", "\n", "", "", "ind", "=", "0", "\n", "for", "row", "in", "file", ":", "\n", "                    ", "ind", "+=", "1", "\n", "if", "ind", "==", "1", ":", "continue", "## columns, skip first line", "\n", "\n", "line", "=", "row", ".", "strip", "(", ")", "\n", "\n", "if", "line", "==", "\"\"", ":", "continue", "\n", "\n", "tokens", "=", "line", ".", "split", "(", ")", "\n", "word_", "=", "tokens", "[", "0", "]", "\n", "_add_", "(", "cur_word_set", ",", "word_", ")", "\n", "\n", "pred", "=", "tokens", "[", "1", "]", "\n", "_add_", "(", "pred_set", ",", "pred", ")", "\n", "\n", "arg", "=", "tokens", "[", "-", "1", "]", "\n", "_add_", "(", "arg_set", ",", "arg", ")", "\n", "\n", "", "", "", "logger", ".", "info", "(", "'cur_word_set: %d'", "%", "len", "(", "cur_word_set", ")", ")", "\n", "for", "item", "in", "cur_word_set", ":", "\n", "            ", "if", "item", "not", "in", "word_set", ":", "\n", "                ", "id2word_dict", "[", "len", "(", "word_set", ")", "]", "=", "item", "\n", "word2id_dict", "[", "item", "]", "=", "len", "(", "word_set", ")", "\n", "word_set", ".", "append", "(", "item", ")", "\n", "cur_valid_word_set", ".", "append", "(", "item", ")", "\n", "", "", "logger", ".", "info", "(", "'cur_valid_word_set: %d'", "%", "len", "(", "cur_valid_word_set", ")", ")", "\n", "\n", "cur_ling_word_loading_cnt", "=", "0", "\n", "shortcut", "=", "multi_lingual_embed_dict", "[", "domain", "]", "\n", "embedding_file_path_path", "=", "os", ".", "path", ".", "join", "(", "embedding_file_path_pa", ",", "shortcut", ")", "\n", "with", "open", "(", "embedding_file_path_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "            ", "emb_lines", "=", "file", ".", "readlines", "(", ")", "\n", "\n", "for", "line", "in", "tqdm", ".", "tqdm", "(", "emb_lines", ")", ":", "\n", "\n", "                ", "line_", "=", "line", ".", "split", "(", ")", "\n", "try", ":", "\n", "                    ", "word", "=", "line_", "[", "0", "]", "\n", "vec", "=", "line_", "[", "1", ":", "]", "\n", "\n", "if", "len", "(", "vec", ")", "!=", "config", ".", "embed_dim", ":", "continue", "\n", "if", "word", "in", "cur_valid_word_set", ":", "\n", "                        ", "vec", "=", "np", ".", "asarray", "(", "vec", ")", "\n", "id2vec_embed_big", "[", "word2id_dict", "[", "word", "]", "]", "=", "vec", "\n", "cur_ling_word_loading_cnt", "+=", "1", "\n", "\n", "", "", "except", ":", "\n", "                    ", "logger", ".", "info", "(", "'errors when loading embedding.'", ")", "\n", "logger", ".", "info", "(", "domain", ")", "\n", "logger", ".", "info", "(", "embedding_file_path_path", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "", "total_ling_word_loading_cnt", "+=", "cur_ling_word_loading_cnt", "\n", "logger", ".", "info", "(", "'loading %d word from %s, total %d valid words in vocab.'", "\n", "%", "(", "cur_ling_word_loading_cnt", ",", "shortcut", ",", "len", "(", "cur_valid_word_set", ")", ")", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "'time spending %.3f min.'", "%", "(", "(", "end_time", "-", "start_time", ")", "/", "60", ")", ")", "\n", "logger", ".", "info", "(", "'\\n'", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "'%d words from multi-lingual embeddings, total %d words in vocab.'", "\n", "%", "(", "total_ling_word_loading_cnt", ",", "len", "(", "id2word_dict", ")", ")", ")", "\n", "\n", "id2vec_embed_big", "=", "id2vec_embed_big", "[", ":", "len", "(", "id2word_dict", ")", "]", "\n", "\n", "wordembeddings", "=", "Embeddings", "(", "config", ".", "embed_dim", ",", "id2word_dict", ",", "word2id_dict", ",", "id2vec_embed_big", ")", "\n", "predembeddings", "=", "Embeddings", "(", "config", ".", "prd_embed_dim", ",", "pred_set", ")", "\n", "\n", "argvocab", "=", "Vocab", "(", "arg_set", ")", "\n", "\n", "return", "wordembeddings", ",", "predembeddings", ",", "argvocab", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.initial_those_embeds": [[226, 257], ["mainHelp.save_", "mainHelp.save_", "mainHelp.save_", "mainHelp.save_", "len", "len", "len", "len", "config.logger.info", "config.logger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.save_", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.save_", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.save_", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.save_", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "initial_those_embeds", "(", "config", ",", "wordembeddings", ",", "posembeddings", ",", "predembeddings", ",", "argvocab", ")", ":", "\n", "    ", "word_set", "=", "wordembeddings", ".", "word_set", "\n", "pos_set", "=", "posembeddings", ".", "word_set", "\n", "pred_set", "=", "predembeddings", ".", "word_set", "\n", "arg_set", "=", "argvocab", ".", "word_vocab", "\n", "\n", "save_", "(", "word_set", ",", "os", ".", "path", ".", "join", "(", "config", ".", "dict_directory", ",", "config", ".", "word_dict", ")", ")", "\n", "save_", "(", "pos_set", ",", "os", ".", "path", ".", "join", "(", "config", ".", "dict_directory", ",", "config", ".", "pos_dict", ")", ")", "\n", "save_", "(", "pred_set", ",", "os", ".", "path", ".", "join", "(", "config", ".", "dict_directory", ",", "config", ".", "prd_dict", ")", ")", "\n", "save_", "(", "arg_set", ",", "os", ".", "path", ".", "join", "(", "config", ".", "dict_directory", ",", "config", ".", "arg_dict", ")", ")", "\n", "\n", "config", ".", "posembeddings", "=", "posembeddings", "\n", "config", ".", "predembeddings", "=", "predembeddings", "\n", "config", ".", "argvocab", "=", "argvocab", "\n", "\n", "config", ".", "embed_num", "=", "len", "(", "word_set", ")", "\n", "config", ".", "pos_embed_num", "=", "len", "(", "pos_set", ")", "\n", "config", ".", "prd_embed_num", "=", "len", "(", "pred_set", ")", "\n", "config", ".", "class_num", "=", "len", "(", "arg_set", ")", "\n", "\n", "config", ".", "word_paddingId", "=", "wordembeddings", ".", "pad_id", "\n", "config", ".", "pos_paddingId", "=", "posembeddings", ".", "pad_id", "\n", "config", ".", "prd_paddingId", "=", "predembeddings", ".", "pad_id", "\n", "config", ".", "arg_paddingId", "=", "argvocab", ".", "pad_id", "\n", "\n", "config", ".", "logger", ".", "info", "(", "\"embed_num : {}, prd_embed_num: {}, arg_num : {}\"", ".", "format", "(", "\n", "config", ".", "embed_num", ",", "\n", "config", ".", "prd_embed_num", ",", "\n", "config", ".", "class_num", ")", ")", "\n", "\n", "config", ".", "logger", ".", "info", "(", "'initalized with all embeddings.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.save_": [[259, 262], ["open", "f.write"], "function", ["None"], ["", "def", "save_", "(", "list_", ",", "file_", ")", ":", "\n", "    ", "with", "open", "(", "file_", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'\\n'", ".", "join", "(", "list_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.get_file_path": [[264, 276], ["os.listdir", "training_data.replace.replace", "eval_data.replace.replace", "training_data.replace.replace", "test_data.replace.replace"], "function", ["None"], ["", "", "def", "get_file_path", "(", "config", ",", "s_domain", ")", ":", "\n", "    ", "training_data", "=", "config", ".", "base_data_path", "+", "'/%s/train'", "%", "s_domain", "\n", "eval_data", "=", "config", ".", "base_data_path", "+", "'/%s/dev'", "%", "s_domain", "\n", "test_data", "=", "config", ".", "base_data_path", "+", "'/%s/test'", "%", "s_domain", "\n", "for", "item", "in", "os", ".", "listdir", "(", "training_data", ".", "replace", "(", "'/train'", ",", "''", ")", ")", ":", "\n", "        ", "if", "'-dev-pos.conllu'", "in", "item", ":", "\n", "            ", "eval_data", "=", "eval_data", ".", "replace", "(", "'dev'", ",", "item", ")", "\n", "", "if", "'-train-pos.conllu'", "in", "item", ":", "\n", "            ", "training_data", "=", "training_data", ".", "replace", "(", "'train'", ",", "item", ")", "\n", "", "if", "'-test-pos.conllu'", "in", "item", ":", "\n", "            ", "test_data", "=", "test_data", ".", "replace", "(", "'test'", ",", "item", ")", "\n", "", "", "return", "training_data", ",", "eval_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.prepare_data": [[278, 317], ["config.logger.info", "mainHelp.initial_those_embeds", "os.path.exists", "os.path.exists", "torch.load", "torch.load", "mainHelp.create_all_embeds_and_vocabs_v2", "torch.save", "torch.save", "os.path.join", "os.path.join", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.initial_those_embeds", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.create_all_embeds_and_vocabs_v2", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.save", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.save"], ["", "def", "prepare_data", "(", "config", ",", "domains", ")", ":", "\n", "    ", "\"\"\"\n    :param config: config\n    :return:\n    \"\"\"", "\n", "config", ".", "logger", ".", "info", "(", "\"Processing All Data......\"", ")", "\n", "\n", "base_file_name", "=", "'wiki.%s.align.vec'", "\n", "multi_lingual_embed_dict", "=", "{", "\n", "'UP_English'", ":", "base_file_name", "%", "'en'", ",", "\n", "'UP_Finnish'", ":", "base_file_name", "%", "'fi'", ",", "\n", "'UP_French'", ":", "base_file_name", "%", "'fr'", ",", "\n", "'UP_German'", ":", "base_file_name", "%", "'de'", ",", "\n", "'UP_Italian'", ":", "base_file_name", "%", "'it'", ",", "\n", "'UP_Portuguese-Bosque'", ":", "base_file_name", "%", "'pt'", ",", "\n", "'UP_Spanish'", ":", "base_file_name", "%", "'es'", ",", "\n", "'UP_Spanish-AnCora'", ":", "base_file_name", "%", "'es'", ",", "\n", "'UP_Chinese'", ":", "base_file_name", "%", "'zh'", ",", "\n", "}", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "config", ".", "pkl_directory", ",", "config", ".", "loaded_word_embed", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "config", ".", "pkl_directory", ",", "config", ".", "other_data_embed", ")", ")", ":", "\n", "        ", "wordembeddings", "=", "torch", ".", "load", "(", "f", "=", "os", ".", "path", ".", "join", "(", "config", ".", "pkl_directory", ",", "config", ".", "loaded_word_embed", ")", ")", "\n", "other_data_embed", "=", "torch", ".", "load", "(", "f", "=", "os", ".", "path", ".", "join", "(", "config", ".", "pkl_directory", ",", "config", ".", "other_data_embed", ")", ")", "\n", "(", "posembeddings", ",", "predembeddings", ",", "argvocab", ")", "=", "other_data_embed", "\n", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "pkl_directory", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "config", ".", "pkl_directory", ")", "\n", "\n", "", "wordembeddings", ",", "posembeddings", ",", "predembeddings", ",", "argvocab", "=", "create_all_embeds_and_vocabs_v2", "(", "config", ",", "config", ".", "logger", ",", "config", ".", "pretrained_embed_file", ",", "multi_lingual_embed_dict", ",", "\n", "domains", ")", "\n", "\n", "other_data_embed", "=", "(", "posembeddings", ",", "predembeddings", ",", "argvocab", ")", "\n", "torch", ".", "save", "(", "obj", "=", "wordembeddings", ",", "f", "=", "os", ".", "path", ".", "join", "(", "config", ".", "pkl_directory", ",", "config", ".", "loaded_word_embed", ")", ")", "\n", "torch", ".", "save", "(", "obj", "=", "other_data_embed", ",", "f", "=", "os", ".", "path", ".", "join", "(", "config", ".", "pkl_directory", ",", "config", ".", "other_data_embed", ")", ")", "\n", "\n", "", "initial_those_embeds", "(", "config", ",", "wordembeddings", ",", "posembeddings", ",", "predembeddings", ",", "argvocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.load_model": [[183, 199], ["config.logger.info", "Engines.SequenceLabeler.SequenceLabeler", "config.logger.info", "load_test_model.cuda", "mainHelp.load_test_model", "os.path.exists", "shutil.rmtree"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.BatchFeatures.cuda", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.load_test_model"], ["embedding_file_path_path", "=", "os", ".", "path", ".", "join", "(", "embedding_file_path_pa", ",", "shortcut", ")", "\n", "with", "open", "(", "embedding_file_path_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "            ", "emb_lines", "=", "file", ".", "readlines", "(", ")", "\n", "\n", "for", "line", "in", "tqdm", ".", "tqdm", "(", "emb_lines", ")", ":", "\n", "\n", "                ", "line_", "=", "line", ".", "split", "(", ")", "\n", "try", ":", "\n", "                    ", "word", "=", "line_", "[", "0", "]", "\n", "vec", "=", "line_", "[", "1", ":", "]", "\n", "\n", "if", "len", "(", "vec", ")", "!=", "config", ".", "embed_dim", ":", "continue", "\n", "if", "word", "in", "cur_valid_word_set", ":", "\n", "                        ", "vec", "=", "np", ".", "asarray", "(", "vec", ")", "\n", "id2vec_embed_big", "[", "word2id_dict", "[", "word", "]", "]", "=", "vec", "\n", "cur_ling_word_loading_cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.pre_embed": [[134, 161], ["config.logger.info", "DataUtils.Embed.Embed", "DataUtils.Embed.Embed.get_embed", "torch.save", "os.path.join"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.get_embed", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.save"], ["word2id_dict", "=", "dict", "(", "{", "paddingkey", ":", "0", ",", "unkkey", ":", "1", "}", ")", "\n", "\n", "id2vec_embed_big", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "[", "350000", ",", "config", ".", "embed_dim", "]", ")", "\n", "\n", "total_ling_word_loading_cnt", "=", "0", "\n", "for", "domain", "in", "ordered_domains", ":", "\n", "        ", "logger", ".", "info", "(", "'loading for %s .'", "%", "domain", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "cur_word_set", "=", "list", "(", ")", "\n", "cur_valid_word_set", "=", "list", "(", ")", "\n", "\n", "input_filenames", "=", "get_file_path", "(", "config", ",", "domain", ")", "\n", "for", "input_filename", "in", "input_filenames", ":", "\n", "\n", "            ", "with", "open", "(", "input_filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "                ", "def", "_add_", "(", "coll", ",", "obj", ")", ":", "\n", "                    ", "if", "obj", "not", "in", "coll", ":", "\n", "                        ", "coll", ".", "append", "(", "obj", ")", "\n", "\n", "", "", "ind", "=", "0", "\n", "for", "row", "in", "file", ":", "\n", "                    ", "ind", "+=", "1", "\n", "if", "ind", "==", "1", ":", "continue", "## columns, skip first line", "\n", "\n", "line", "=", "row", ".", "strip", "(", ")", "\n", "\n", "if", "line", "==", "\"\"", ":", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.Best_Result.__init__": [[10, 22], ["None"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_dev_score", "=", "-", "1", "\n", "self", ".", "best_dev_p_score", "=", "-", "1", "\n", "self", ".", "best_dev_r_score", "=", "-", "1", "\n", "self", ".", "best_dev_f1_score", "=", "-", "1", "\n", "self", ".", "best_score", "=", "-", "1", "\n", "self", ".", "best_epoch", "=", "1", "\n", "self", ".", "best_test", "=", "False", "\n", "self", ".", "early_current_patience", "=", "0", "\n", "self", ".", "p", "=", "-", "1", "\n", "self", ".", "r", "=", "-", "1", "\n", "self", ".", "f", "=", "-", "1", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.getMaxindex": [[24, 38], ["range"], "function", ["None"], ["\n", "", "", "def", "getMaxindex", "(", "model_out", ",", "label_size", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    :param model_out: model output\n    :param label_size: label size\n    :param args: argument\n    :return: max index for predict\n    \"\"\"", "\n", "max", "=", "model_out", ".", "data", "[", "0", "]", "\n", "maxIndex", "=", "0", "\n", "for", "idx", "in", "range", "(", "1", ",", "label_size", ")", ":", "\n", "        ", "if", "model_out", ".", "data", "[", "idx", "]", ">", "max", ":", "\n", "            ", "max", "=", "model_out", ".", "data", "[", "idx", "]", "\n", "maxIndex", "=", "idx", "\n", "", "", "return", "maxIndex", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.getMaxindex_np": [[40, 48], ["model_out.data.tolist", "model_out.data.tolist.index", "numpy.max"], "function", ["None"], ["\n", "", "def", "getMaxindex_np", "(", "model_out", ")", ":", "\n", "    ", "\"\"\"\n    :param model_out: model output\n    :return: max index for predict\n    \"\"\"", "\n", "model_out_list", "=", "model_out", ".", "data", ".", "tolist", "(", ")", "\n", "maxIndex", "=", "model_out_list", ".", "index", "(", "np", ".", "max", "(", "model_out_list", ")", ")", "\n", "return", "maxIndex", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.getMaxindex_batch": [[50, 61], ["model_out.data.tolist", "maxIndex_batch.append", "l.index", "numpy.max"], "function", ["None"], ["\n", "", "def", "getMaxindex_batch", "(", "model_out", ")", ":", "\n", "    ", "\"\"\"\n    :param model_out: model output\n    :return: max index for predict\n    \"\"\"", "\n", "model_out_list", "=", "model_out", ".", "data", ".", "tolist", "(", ")", "\n", "maxIndex_batch", "=", "[", "]", "\n", "for", "l", "in", "model_out_list", ":", "\n", "        ", "maxIndex_batch", ".", "append", "(", "l", ".", "index", "(", "np", ".", "max", "(", "l", ")", ")", ")", "\n", "\n", "", "return", "maxIndex_batch", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.torch_max": [[63, 74], ["output.size", "torch.max", "range", "label.append", "arg_max[].cpu().data.numpy", "arg_max[].cpu"], "function", ["None"], ["\n", "", "def", "torch_max", "(", "output", ")", ":", "\n", "    ", "\"\"\"\n    :param output: batch * seq_len * label_num\n    :return:\n    \"\"\"", "\n", "batch_size", "=", "output", ".", "size", "(", "0", ")", "\n", "_", ",", "arg_max", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "2", ")", "\n", "label", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "label", ".", "append", "(", "arg_max", "[", "i", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "", "return", "label", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.save_model_all": [[76, 92], ["os.path.join", "config.logger.info", "open", "torch.save", "open.close", "os.path.isdir", "os.makedirs", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.save"], ["\n", "", "def", "save_model_all", "(", "model", ",", "config", ",", "save_dir", ",", "model_name", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"\n    :param model:  nn model\n    :param save_dir: save model direction\n    :param model_name:  model name\n    :param epoch:  epoch\n    :return:  None\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "save_prefix", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "model_name", ")", "\n", "save_path", "=", "'{}_epoch_{}.pt'", ".", "format", "(", "save_prefix", ",", "epoch", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"save all model to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "output", "=", "open", "(", "save_path", ",", "mode", "=", "\"wb\"", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "output", ")", "\n", "output", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.save_best_model": [[94, 113], ["os.path.join", "config.logger.info", "open", "torch.save", "open.close", "os.path.isdir", "os.makedirs", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.save"], ["\n", "", "def", "save_best_model", "(", "model", ",", "config", ",", "save_dir", ",", "model_name", ",", "best_eval", ")", ":", "\n", "    ", "\"\"\"\n    :param model:  nn model\n    :param save_dir:  save model direction\n    :param model_name:  model name\n    :param best_eval:  eval best\n    :return:  None\n    \"\"\"", "\n", "if", "best_eval", ".", "current_dev_score", ">=", "best_eval", ".", "best_dev_f1_score", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "model_name", "=", "\"{}.pt\"", ".", "format", "(", "model_name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "model_name", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"save best model to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "output", "=", "open", "(", "save_path", ",", "mode", "=", "\"wb\"", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "output", ")", "\n", "output", ".", "close", "(", ")", "\n", "best_eval", ".", "early_current_patience", "=", "0", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.get_lrate": [[115, 122], ["None"], "function", ["None"], ["    ", "\"\"\"\n    :param optim: optimizer\n    :return:\n    \"\"\"", "\n", "for", "group", "in", "optim", ".", "param_groups", ":", "\n", "        ", "yield", "group", "[", "'lr'", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.set_lrate": [[124, 132], ["None"], "function", ["None"], ["    ", "\"\"\"\n    :param optim:  optimizer\n    :param lr:  learning rate\n    :return:\n    \"\"\"", "\n", "for", "group", "in", "optim", ".", "param_groups", ":", "\n", "        ", "group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.__init__": [[7, 10], ["print"], "methods", ["None"], ["        ", "print", "(", "\"Pickle\"", ")", "\n", "self", ".", "obj_count", "=", "0", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.save": [[11, 26], ["print", "isinstance", "os.path.exists", "open", "pickle.dump", "open.close", "os.remove"], "methods", ["None"], ["def", "save", "(", "obj", ",", "path", ",", "mode", "=", "\"wb\"", ")", ":", "\n", "        ", "\"\"\"\n        :param obj:  obj dict to dump\n        :param path: save path\n        :param mode:  file mode\n        \"\"\"", "\n", "print", "(", "\"save obj to {}\"", ".", "format", "(", "path", ")", ")", "\n", "assert", "isinstance", "(", "obj", ",", "dict", ")", ",", "\"The type of obj must be a dict type.\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "remove", "(", "path", ")", "\n", "", "pkl_file", "=", "open", "(", "path", ",", "mode", "=", "mode", ")", "\n", "pickle", ".", "dump", "(", "obj", ",", "pkl_file", ")", "\n", "pkl_file", ".", "close", "(", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "load", "(", "path", ",", "mode", "=", "\"rb\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load": [[27, 41], ["print", "open", "pickle.load", "open.close", "os.path.exists", "print"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load"], ["        ", "\"\"\"\n        :param path:  pkl path\n        :param mode: file mode\n        :return: data dict\n        \"\"\"", "\n", "print", "(", "\"load obj from {}\"", ".", "format", "(", "path", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", "is", "False", ":", "\n", "            ", "print", "(", "\"Path {} illegal.\"", ".", "format", "(", "path", ")", ")", "\n", "", "pkl_file", "=", "open", "(", "path", ",", "mode", "=", "mode", ")", "\n", "data", "=", "pickle", ".", "load", "(", "pkl_file", ")", "\n", "pkl_file", ".", "close", "(", ")", "\n", "return", "data", "\n", "\n", "", "", "pcl", "=", "Pickle", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoaderHelp._clean_str": [[17, 37], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip"], "methods", ["None"], ["\n", "@", "staticmethod", "\n", "def", "_write_shuffle_inst_to_file", "(", "config", ",", "insts", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "w_path", "=", "\".\"", ".", "join", "(", "[", "path", ",", "shuffle", "]", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "w_path", ")", ":", "\n", "            ", "os", ".", "remove", "(", "w_path", ")", "\n", "", "file", "=", "open", "(", "w_path", ",", "encoding", "=", "\"UTF-8\"", ",", "mode", "=", "\"w\"", ")", "\n", "for", "id", ",", "inst", "in", "enumerate", "(", "insts", ")", ":", "\n", "            ", "for", "word", ",", "po", ",", "dps", ",", "cot", ",", "prd", ",", "label", "in", "zip", "(", "inst", ".", "words", ",", "inst", ".", "pos", ",", "inst", ".", "dep", ",", "inst", ".", "dep_head", ",", "inst", ".", "prd", ",", "\n", "inst", ".", "labels", ")", ":", "\n", "                ", "file", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "word", ",", "po", ",", "dps", ",", "str", "(", "cot", ")", ",", "prd", ",", "label", ",", "\"\\n\"", "]", ")", ")", "\n", "", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "", "config", ".", "logger", ".", "info", "(", "\"write shuffle insts to file {}\"", ".", "format", "(", "w_path", ")", ")", "\n", "\n", "\n", "", "", "class", "DataLoader", "(", "DataLoaderHelp", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoaderHelp._normalize_word": [[38, 51], ["char.isdigit"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "domains", ",", "path", ",", "shuffle", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        :param path: data path list\n        :param shuffle:  shuffle bool\n        :param config:  config\n        \"\"\"", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "domains", "=", "domains", "\n", "self", ".", "data_list", "=", "[", "]", "\n", "self", ".", "max_count", "=", "config", ".", "max_count", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "shuffle", "=", "shuffle", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoaderHelp._sort": [[52, 67], ["enumerate", "sorted", "sorted_dict.items", "sorted_insts.append"], "methods", ["None"], ["\n", "", "def", "load", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "paths", "=", "self", ".", "path", "\n", "assert", "isinstance", "(", "paths", ",", "list", ")", ",", "\"Path Must Be In List\"", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Data Path {}\"", ".", "format", "(", "path", ")", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "''", ")", "\n", "\n", "", "for", "id_data", "in", "range", "(", "len", "(", "paths", ")", ")", ":", "\n", "            ", "this_insts", "=", "{", "sub_name", ":", "list", "(", ")", "for", "sub_name", "in", "self", ".", "domains", "}", "\n", "for", "sub_name", "in", "self", ".", "domains", ":", "\n", "                ", "sub_data", "=", "paths", "[", "id_data", "]", "[", "sub_name", "]", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Loading Data From {}\"", ".", "format", "(", "sub_data", ")", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoader.dataLoader": [[103, 121], ["isinstance", "DataLoader.DataLoader.config.logger.info", "range", "len", "DataLoader.DataLoader.config.logger.info", "DataLoader.DataLoader._Load_Each_Data", "random.shuffle", "DataLoader.DataLoader._write_shuffle_inst_to_file", "DataLoader.DataLoader.data_list.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoader._Load_Each_Data", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.shuffle", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoaderHelp._write_shuffle_inst_to_file"], ["        ", "\"\"\"\n        :param path:\n        :param shuffle:\n        :return:\n        \"\"\"", "\n", "assert", "path", "is", "not", "None", ",", "\"The Data Path Is Not Allow Empty.\"", "\n", "insts", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "encoding", "=", "\"UTF-8\"", ")", "as", "f", ":", "\n", "            ", "inst", "=", "Instance", "(", ")", "\n", "for", "ind", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n", "                ", "if", "ind", "==", "0", ":", "continue", "\n", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "==", "\"\"", "and", "len", "(", "inst", ".", "words", ")", "!=", "0", ":", "\n", "                    ", "inst", ".", "words_size", "=", "len", "(", "inst", ".", "words", ")", "\n", "insts", ".", "append", "(", "inst", ")", "\n", "inst", "=", "Instance", "(", ")", "\n", "", "else", ":", "\n", "                    ", "line", "=", "line", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.get_params": [[36, 54], ["mainHelp.get_learning_algorithm", "config.logger.info", "config.logger.info", "config.logger.info"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.get_learning_algorithm", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "config", ".", "logger", ".", "info", "(", "\"path {} is exist, deleted.\"", ".", "format", "(", "path", ")", ")", "\n", "", "file", "=", "open", "(", "path", ",", "encoding", "=", "\"UTF-8\"", ",", "mode", "=", "\"w\"", ")", "\n", "for", "word", ",", "index", "in", "dict", ".", "items", "(", ")", ":", "\n", "        ", "file", ".", "write", "(", "str", "(", "word", ")", "+", "\"\\t\"", "+", "str", "(", "index", ")", "+", "\"\\n\"", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"Save dictionary finished.\"", ")", "\n", "\n", "\n", "", "def", "save_dictionary", "(", "config", ")", ":", "\n", "    ", "\"\"\"\n    :param config: config\n    :return:\n    \"\"\"", "\n", "if", "config", ".", "save_dict", "is", "True", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "config", ".", "dict_directory", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "config", ".", "dict_directory", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "config", ".", "dict_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "config", ".", "dict_directory", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.preprocessing": [[96, 132], ["config.logger.info", "DataUtils.DataLoader.DataLoader", "DataUtils.DataLoader.DataLoader.dataLoader", "config.logger.info", "len", "len", "len", "CreateAlphabet", "CreateAlphabet.build_vocab", "Iterators", "Iterators.createIterator", "torch.save", "torch.save", "torch.save", "len", "len", "len", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.DataLoader.DataLoader.dataLoader", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.CreateAlphabet.build_vocab", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.Iterators.createIterator", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.save", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.save", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.save"], ["\n", "if", "line", "==", "\"\"", ":", "continue", "\n", "\n", "tokens", "=", "line", ".", "split", "(", ")", "\n", "\n", "word_", "=", "tokens", "[", "0", "]", "\n", "_add_", "(", "cur_word_set", ",", "word_", ")", "\n", "\n", "pos", "=", "tokens", "[", "1", "]", "\n", "_add_", "(", "pos_set", ",", "pos", ")", "\n", "pred", "=", "tokens", "[", "2", "]", "\n", "_add_", "(", "pred_set", ",", "pred", ")", "\n", "\n", "arg", "=", "tokens", "[", "3", "]", "\n", "_add_", "(", "arg_set", ",", "arg", ")", "\n", "\n", "", "", "", "logger", ".", "info", "(", "'cur_word_set: %d'", "%", "len", "(", "cur_word_set", ")", ")", "\n", "for", "item", "in", "cur_word_set", ":", "\n", "            ", "if", "item", "not", "in", "word_set", ":", "\n", "                ", "id2word_dict", "[", "len", "(", "word_set", ")", "]", "=", "item", "\n", "word2id_dict", "[", "item", "]", "=", "len", "(", "word_set", ")", "\n", "word_set", ".", "append", "(", "item", ")", "\n", "cur_valid_word_set", ".", "append", "(", "item", ")", "\n", "", "", "logger", ".", "info", "(", "'cur_valid_word_set: %d'", "%", "len", "(", "cur_valid_word_set", ")", ")", "\n", "\n", "", "wordembeddings", "=", "Embeddings", "(", "config", ".", "embed_dim", ",", "word_set", ")", "\n", "posembeddings", "=", "Embeddings", "(", "config", ".", "pos_embed_dim", ",", "pos_set", ")", "\n", "predembeddings", "=", "Embeddings", "(", "config", ".", "prd_embed_dim", ",", "pred_set", ")", "\n", "argvocab", "=", "Vocab", "(", "arg_set", ")", "\n", "\n", "return", "wordembeddings", ",", "posembeddings", ",", "predembeddings", ",", "argvocab", "\n", "\n", "\n", "", "def", "create_all_embeds_and_vocabs", "(", "config", ",", "logger", ",", "embedding_file_path_pa", ",", "multi_lingual_embed_dict", ",", "ordered_domains", ")", ":", "\n", "    ", "pred_set", "=", "list", "(", "[", "paddingkey", ",", "nullkey", ",", "unkkey", "]", ")", "\n", "arg_set", "=", "list", "(", "[", "paddingkey", ",", "nullkey", "]", ")", "\n", "word_set", "=", "list", "(", "[", "paddingkey", ",", "unkkey", "]", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.load_test_model": [[164, 181], ["model.load_state_dict", "os.path.join", "os.path.isfile", "config.logger.info", "torch.load", "config.logger.info", "config.logger.info", "exit"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["_add_", "(", "cur_word_set", ",", "word_", ")", "\n", "\n", "pred", "=", "tokens", "[", "1", "]", "\n", "_add_", "(", "pred_set", ",", "pred", ")", "\n", "\n", "arg", "=", "tokens", "[", "-", "1", "]", "\n", "_add_", "(", "arg_set", ",", "arg", ")", "\n", "\n", "", "", "", "logger", ".", "info", "(", "'cur_word_set: %d'", "%", "len", "(", "cur_word_set", ")", ")", "\n", "for", "item", "in", "cur_word_set", ":", "\n", "            ", "if", "item", "not", "in", "word_set", ":", "\n", "                ", "id2word_dict", "[", "len", "(", "word_set", ")", "]", "=", "item", "\n", "word2id_dict", "[", "item", "]", "=", "len", "(", "word_set", ")", "\n", "word_set", ".", "append", "(", "item", ")", "\n", "cur_valid_word_set", ".", "append", "(", "item", ")", "\n", "", "", "logger", ".", "info", "(", "'cur_valid_word_set: %d'", "%", "len", "(", "cur_valid_word_set", ")", ")", "\n", "\n", "cur_ling_word_loading_cnt", "=", "0", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.load_data": [[201, 238], ["config.logger.info", "time.time", "time.time", "config.logger.info", "config.logger.info", "config.logger.info", "mainHelp.preprocessing", "mainHelp.pre_embed", "os.path.exists", "config.logger.info", "torch.load", "config.logger.info", "torch.load", "config.logger.info", "torch.load.values", "os.path.exists", "shutil.rmtree", "os.path.isdir", "os.makedirs", "torch.load.keys", "torch.load.keys", "os.path.join", "torch.load", "config.logger.info", "os.path.join", "os.path.join", "torch.load.keys", "os.path.join"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.preprocessing", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.pre_embed", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["                    ", "logger", ".", "info", "(", "'errors when loading embedding.'", ")", "\n", "logger", ".", "info", "(", "domain", ")", "\n", "logger", ".", "info", "(", "embedding_file_path_path", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "", "total_ling_word_loading_cnt", "+=", "cur_ling_word_loading_cnt", "\n", "logger", ".", "info", "(", "'loading %d word from %s, total %d valid words in vocab.'", "\n", "%", "(", "cur_ling_word_loading_cnt", ",", "shortcut", ",", "len", "(", "cur_valid_word_set", ")", ")", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "'time spending %.3f min.'", "%", "(", "(", "end_time", "-", "start_time", ")", "/", "60", ")", ")", "\n", "logger", ".", "info", "(", "'\\n'", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "'%d words from multi-lingual embeddings, total %d words in vocab.'", "\n", "%", "(", "total_ling_word_loading_cnt", ",", "len", "(", "id2word_dict", ")", ")", ")", "\n", "\n", "id2vec_embed_big", "=", "id2vec_embed_big", "[", ":", "len", "(", "id2word_dict", ")", "]", "\n", "\n", "wordembeddings", "=", "Embeddings", "(", "config", ".", "embed_dim", ",", "id2word_dict", ",", "word2id_dict", ",", "id2vec_embed_big", ")", "\n", "predembeddings", "=", "Embeddings", "(", "config", ".", "prd_embed_dim", ",", "pred_set", ")", "\n", "\n", "argvocab", "=", "Vocab", "(", "arg_set", ")", "\n", "\n", "return", "wordembeddings", ",", "predembeddings", ",", "argvocab", "\n", "\n", "\n", "", "def", "initial_those_embeds", "(", "config", ",", "wordembeddings", ",", "posembeddings", ",", "predembeddings", ",", "argvocab", ")", ":", "\n", "    ", "word_set", "=", "wordembeddings", ".", "word_set", "\n", "pos_set", "=", "posembeddings", ".", "word_set", "\n", "pred_set", "=", "predembeddings", ".", "word_set", "\n", "arg_set", "=", "argvocab", ".", "word_vocab", "\n", "\n", "save_", "(", "word_set", ",", "os", ".", "path", ".", "join", "(", "config", ".", "dict_directory", ",", "config", ".", "word_dict", ")", ")", "\n", "save_", "(", "pos_set", ",", "os", ".", "path", ".", "join", "(", "config", ".", "dict_directory", ",", "config", ".", "pos_dict", ")", ")", "\n", "save_", "(", "pred_set", ",", "os", ".", "path", ".", "join", "(", "config", ".", "dict_directory", ",", "config", ".", "prd_dict", ")", ")", "\n", "save_", "(", "arg_set", ",", "os", ".", "path", ".", "join", "(", "config", ".", "dict_directory", ",", "config", ".", "arg_dict", ")", ")", "\n", "\n", "config", ".", "posembeddings", "=", "posembeddings", "\n", "config", ".", "predembeddings", "=", "predembeddings", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.SequenceLabeler.SequenceLabeler.__init__": [[14, 53], ["torch.Module.__init__", "Engines.BiLSTM.BiLSTM", "dict", "Engines.CRF.CRF"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "lang2id", ")", ":", "\n", "        ", "super", "(", "SequenceLabeler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "embed_num", "=", "config", ".", "embed_num", "\n", "self", ".", "embed_dim", "=", "config", ".", "embed_dim", "\n", "self", ".", "word_paddingId", "=", "config", ".", "word_paddingId", "\n", "\n", "self", ".", "is_predicate_position", "=", "config", ".", "is_predicate_position", "\n", "\n", "self", ".", "is_predicate", "=", "config", ".", "is_predicate", "\n", "self", ".", "prd_embed_num", "=", "config", ".", "prd_embed_num", "\n", "self", ".", "prd_embed_dim", "=", "config", ".", "prd_embed_dim", "\n", "self", ".", "prd_paddingId", "=", "config", ".", "prd_paddingId", "\n", "\n", "self", ".", "is_pos", "=", "config", ".", "is_pos", "\n", "self", ".", "pos_embed_num", "=", "config", ".", "pos_embed_num", "\n", "self", ".", "pos_embed_dim", "=", "config", ".", "pos_embed_dim", "\n", "self", ".", "pos_paddingId", "=", "config", ".", "pos_paddingId", "\n", "\n", "self", ".", "label_num", "=", "config", ".", "class_num", "\n", "self", ".", "lang_emb_dim", "=", "config", ".", "lang_emb_dim", "\n", "\n", "self", ".", "dropout_emb", "=", "config", ".", "dropout_emb", "\n", "self", ".", "dropout", "=", "config", ".", "dropout", "\n", "\n", "self", ".", "lstm_hiddens", "=", "config", ".", "lstm_hiddens", "\n", "self", ".", "lstm_layers", "=", "config", ".", "lstm_layers", "\n", "\n", "self", ".", "use_crf", "=", "config", ".", "use_crf", "\n", "\n", "self", ".", "device", "=", "config", ".", "device", "\n", "print", "(", "'self.device'", ",", "self", ".", "device", ")", "\n", "\n", "self", ".", "target_size", "=", "self", ".", "label_num", "if", "self", ".", "use_crf", "is", "False", "else", "self", ".", "label_num", "+", "2", "\n", "\n", "self", ".", "encoder_model", "=", "Encoder", "(", "embed_num", "=", "self", ".", "embed_num", ",", "embed_dim", "=", "self", ".", "embed_dim", ",", "\n", "lang2id", "=", "lang2id", ",", "lang_emb_dim", "=", "self", ".", "lang_emb_dim", ",", "\n", "is_predicate_position", "=", "self", ".", "is_predicate_position", ",", "\n", "is_predicate", "=", "self", ".", "is_predicate", ",", "prd_embed_num", "=", "self", ".", "prd_embed_num", ",", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.SequenceLabeler.SequenceLabeler._conv_filter": [[54, 62], ["str_list.split.split.split", "int_list.append", "int"], "methods", ["None"], ["prd_embed_dim", "=", "self", ".", "prd_embed_dim", ",", "prd_paddingId", "=", "self", ".", "prd_paddingId", ",", "\n", "is_pos", "=", "self", ".", "is_pos", ",", "pos_embed_num", "=", "self", ".", "pos_embed_num", ",", "\n", "pos_embed_dim", "=", "self", ".", "pos_embed_dim", ",", "pos_paddingId", "=", "self", ".", "pos_paddingId", ",", "\n", "weight_file", "=", "config", ".", "weight_file", ",", "options_file", "=", "config", ".", "options_file", ",", "is_elmo", "=", "config", ".", "is_elmo", ",", "\n", "label_num", "=", "self", ".", "target_size", ",", "\n", "elmo_vocab", "=", "config", ".", "elmo_vocab", ",", "\n", "word_paddingId", "=", "self", ".", "word_paddingId", ",", "\n", "dropout_emb", "=", "self", ".", "dropout_emb", ",", "dropout", "=", "self", ".", "dropout", ",", "\n", "lstm_hiddens", "=", "self", ".", "lstm_hiddens", ",", "lstm_layers", "=", "self", ".", "lstm_layers", ",", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.SequenceLabeler.SequenceLabeler.forward": [[63, 67], ["SequenceLabeler.SequenceLabeler.encoder_model"], "methods", ["None"], ["pretrained_embed", "=", "self", ".", "pretrained_embed", ",", "\n", "pretrained_weight", "=", "self", ".", "pretrained_weight", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "use_crf", "is", "True", ":", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.CRF.CRF.__init__": [[24, 41], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "CRF.CRF.__setattr__"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.__init__", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros"], ["self", ".", "START_TAG", ",", "self", ".", "STOP_TAG", "=", "-", "2", ",", "-", "1", "\n", "init_transitions", "=", "torch", ".", "zeros", "(", "self", ".", "target_size", "+", "2", ",", "self", ".", "target_size", "+", "2", ",", "device", "=", "device", ")", "\n", "init_transitions", "[", ":", ",", "self", ".", "START_TAG", "]", "=", "-", "10000.0", "\n", "init_transitions", "[", "self", ".", "STOP_TAG", ",", ":", "]", "=", "-", "10000.0", "\n", "self", ".", "transitions", "=", "nn", ".", "Parameter", "(", "init_transitions", ")", "\n", "\n", "", "def", "_forward_alg", "(", "self", ",", "feats", ",", "mask", ")", ":", "\n", "\n", "        ", "batch_size", "=", "feats", ".", "size", "(", "0", ")", "\n", "seq_len", "=", "feats", ".", "size", "(", "1", ")", "\n", "tag_size", "=", "feats", ".", "size", "(", "2", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "ins_num", "=", "seq_len", "*", "batch_size", "\n", "feats", "=", "feats", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "ins_num", ",", "1", ",", "tag_size", ")", ".", "expand", "(", "ins_num", ",", "tag_size", ",", "tag_size", ")", "\n", "scores", "=", "feats", "+", "self", ".", "transitions", ".", "view", "(", "1", ",", "tag_size", ",", "tag_size", ")", ".", "expand", "(", "ins_num", ",", "tag_size", ",", "tag_size", ")", "\n", "scores", "=", "scores", ".", "view", "(", "seq_len", ",", "batch_size", ",", "tag_size", ",", "tag_size", ")", "\n", "# build iter", "\n", "seq_iter", "=", "enumerate", "(", "scores", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.CRF.CRF._forward_alg": [[42, 101], ["feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.size", "feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.size", "feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.size", "mask.transpose().contiguous.transpose().contiguous.transpose().contiguous", "feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.transpose().contiguous().view().expand", "scores.view.view.view", "enumerate", "next", "inivalues[].clone().view", "CRF.log_sum_exp", "CRF.CRF.transitions.view().expand", "CRF.log_sum_exp", "mask[].view().expand", "torch.autograd.variable.Variable", "torch.autograd.variable.Variable", "log_sum_exp.masked_select", "mask_idx.contiguous().view.contiguous().view.contiguous().view", "inivalues[].clone().view.masked_scatter_", "CRF.CRF.transitions.view().expand", "inivalues[].clone().view.contiguous().view().expand", "final_partition.sum", "mask.transpose().contiguous.transpose().contiguous.transpose", "feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.transpose().contiguous().view", "inivalues[].clone", "inivalues[].clone().view.contiguous().view().expand", "CRF.CRF.transitions.view", "mask[].view", "mask_idx.contiguous().view.contiguous().view.contiguous", "CRF.CRF.transitions.view", "inivalues[].clone().view.contiguous().view", "feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.transpose().contiguous", "inivalues[].clone().view.contiguous().view", "inivalues[].clone().view.contiguous", "feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.transpose", "inivalues[].clone().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.CRF.log_sum_exp", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.CRF.log_sum_exp"], ["_", ",", "inivalues", "=", "next", "(", "seq_iter", ")", "# bat_size * from_target_size * to_target_size", "\n", "partition", "=", "inivalues", "[", ":", ",", "self", ".", "START_TAG", ",", ":", "]", ".", "clone", "(", ")", ".", "view", "(", "batch_size", ",", "tag_size", ",", "1", ")", "# bat_size * to_target_size", "\n", "\n", "for", "idx", ",", "cur_values", "in", "seq_iter", ":", "\n", "\n", "            ", "cur_values", "=", "cur_values", "+", "partition", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "tag_size", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "tag_size", ",", "tag_size", ")", "\n", "cur_partition", "=", "log_sum_exp", "(", "cur_values", ",", "tag_size", ")", "\n", "\n", "mask_idx", "=", "mask", "[", "idx", ",", ":", "]", ".", "view", "(", "batch_size", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "tag_size", ")", "\n", "\n", "mask_idx", "=", "Variable", "(", "mask_idx", ")", "\n", "masked_cur_partition", "=", "cur_partition", ".", "masked_select", "(", "mask_idx", ")", "\n", "mask_idx", "=", "mask_idx", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "tag_size", ",", "1", ")", "\n", "\n", "partition", ".", "masked_scatter_", "(", "mask_idx", ",", "masked_cur_partition", ")", "\n", "\n", "", "cur_values", "=", "self", ".", "transitions", ".", "view", "(", "1", ",", "tag_size", ",", "tag_size", ")", ".", "expand", "(", "batch_size", ",", "tag_size", ",", "tag_size", ")", "+", "partition", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "tag_size", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "tag_size", ",", "tag_size", ")", "\n", "cur_partition", "=", "log_sum_exp", "(", "cur_values", ",", "tag_size", ")", "\n", "final_partition", "=", "cur_partition", "[", ":", ",", "self", ".", "STOP_TAG", "]", "\n", "return", "final_partition", ".", "sum", "(", ")", ",", "scores", "\n", "\n", "", "def", "_viterbi_decode", "(", "self", ",", "feats", ",", "mask", ")", ":", "\n", "\n", "        ", "batch_size", "=", "feats", ".", "size", "(", "0", ")", "\n", "seq_len", "=", "feats", ".", "size", "(", "1", ")", "\n", "tag_size", "=", "feats", ".", "size", "(", "2", ")", "\n", "length_mask", "=", "torch", ".", "sum", "(", "mask", ".", "long", "(", ")", ",", "dim", "=", "1", ")", ".", "view", "(", "batch_size", ",", "1", ")", ".", "long", "(", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "ins_num", "=", "seq_len", "*", "batch_size", "\n", "feats", "=", "feats", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "ins_num", ",", "1", ",", "tag_size", ")", ".", "expand", "(", "ins_num", ",", "tag_size", ",", "tag_size", ")", "\n", "scores", "=", "feats", "+", "self", ".", "transitions", ".", "view", "(", "1", ",", "tag_size", ",", "tag_size", ")", ".", "expand", "(", "ins_num", ",", "tag_size", ",", "tag_size", ")", "\n", "scores", "=", "scores", ".", "view", "(", "seq_len", ",", "batch_size", ",", "tag_size", ",", "tag_size", ")", "\n", "\n", "seq_iter", "=", "enumerate", "(", "scores", ")", "\n", "back_points", "=", "list", "(", ")", "\n", "partition_history", "=", "list", "(", ")", "\n", "mask", "=", "(", "1", "-", "mask", ".", "long", "(", ")", ")", ".", "byte", "(", ")", "\n", "_", ",", "inivalues", "=", "next", "(", "seq_iter", ")", "\n", "partition", "=", "inivalues", "[", ":", ",", "self", ".", "START_TAG", ",", ":", "]", ".", "clone", "(", ")", ".", "view", "(", "batch_size", ",", "tag_size", ")", "# bat_size * to_target_size", "\n", "partition_history", ".", "append", "(", "partition", ")", "\n", "\n", "# iter over last scores", "\n", "for", "idx", ",", "cur_values", "in", "seq_iter", ":", "\n", "            ", "cur_values", "=", "cur_values", "+", "partition", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "tag_size", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "tag_size", ",", "tag_size", ")", "\n", "partition", ",", "cur_bp", "=", "torch", ".", "max", "(", "cur_values", ",", "1", ")", "\n", "partition_history", ".", "append", "(", "partition", ")", "\n", "cur_bp", ".", "masked_fill_", "(", "mask", "[", "idx", "]", ".", "view", "(", "batch_size", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "tag_size", ")", ",", "0", ")", "\n", "back_points", ".", "append", "(", "cur_bp", ")", "\n", "", "partition_history", "=", "torch", ".", "cat", "(", "partition_history", ",", "0", ")", ".", "view", "(", "seq_len", ",", "batch_size", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "## (batch_size, seq_len. tag_size)", "\n", "last_position", "=", "length_mask", ".", "view", "(", "batch_size", ",", "1", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "1", ",", "tag_size", ")", "-", "1", "\n", "last_partition", "=", "torch", ".", "gather", "(", "partition_history", ",", "1", ",", "last_position", ")", ".", "view", "(", "batch_size", ",", "tag_size", ",", "1", ")", "\n", "last_values", "=", "last_partition", ".", "expand", "(", "batch_size", ",", "tag_size", ",", "tag_size", ")", "+", "self", ".", "transitions", ".", "view", "(", "1", ",", "tag_size", ",", "tag_size", ")", ".", "expand", "(", "batch_size", ",", "tag_size", ",", "tag_size", ")", "\n", "_", ",", "last_bp", "=", "torch", ".", "max", "(", "last_values", ",", "1", ")", "\n", "pad_zero", "=", "torch", ".", "zeros", "(", "batch_size", ",", "tag_size", ",", "device", "=", "self", ".", "device", ",", "requires_grad", "=", "True", ")", ".", "long", "(", ")", "\n", "back_points", ".", "append", "(", "pad_zero", ")", "\n", "back_points", "=", "torch", ".", "cat", "(", "back_points", ")", ".", "view", "(", "seq_len", ",", "batch_size", ",", "tag_size", ")", "\n", "\n", "pointer", "=", "last_bp", "[", ":", ",", "self", ".", "STOP_TAG", "]", "\n", "insert_last", "=", "pointer", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "1", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "1", ",", "tag_size", ")", "\n", "back_points", "=", "back_points", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.CRF.CRF._viterbi_decode": [[102, 185], ["feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.size", "feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.size", "feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.size", "torch.sum().view().long", "torch.sum().view().long", "torch.sum().view().long", "torch.sum().view().long", "mask.transpose().contiguous.transpose().contiguous.transpose().contiguous", "feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.transpose().contiguous().view().expand", "scores.view.view.view", "enumerate", "list", "list", "next", "inivalues[].clone().view", "torch.cat().view().transpose().contiguous.append", "torch.cat().view().transpose().contiguous.append", "torch.cat().view().transpose().contiguous", "torch.cat().view().transpose().contiguous", "torch.cat().view().transpose().contiguous", "torch.cat().view().transpose().contiguous", "torch.gather().view", "torch.gather().view", "torch.gather().view", "torch.gather().view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "back_points.transpose().contiguous.transpose().contiguous.append", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.gather.contiguous().view().expand", "torch.gather.contiguous().view().expand", "back_points.transpose().contiguous.transpose().contiguous.transpose().contiguous", "back_points.transpose().contiguous.transpose().contiguous.scatter_", "back_points.transpose().contiguous.transpose().contiguous.transpose().contiguous", "torch.empty().long", "torch.empty().long", "torch.empty().long", "torch.empty().long", "torch.gather.detach", "torch.gather.detach", "range", "decode_idx.transpose.transpose.transpose", "CRF.CRF.transitions.view().expand", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat().view().transpose().contiguous.append", "torch.cat().view().transpose().contiguous.append", "cur_bp.masked_fill_", "back_points.transpose().contiguous.transpose().contiguous.append", "torch.sum().view().long.view().expand", "torch.sum().view().long.view().expand", "torch.gather().view.expand", "torch.gather().view.expand", "CRF.CRF.transitions.view().expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.detach().view", "torch.gather.detach().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "mask.transpose().contiguous.transpose().contiguous.transpose", "feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.transpose().contiguous().view", "inivalues[].clone", "inivalues[].clone().view.contiguous().view().expand", "mask[].view().expand", "torch.cat().view().transpose", "torch.cat().view().transpose", "torch.cat().view().transpose", "torch.cat().view().transpose", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.gather.contiguous().view", "torch.gather.contiguous().view", "back_points.transpose().contiguous.transpose().contiguous.transpose", "back_points.transpose().contiguous.transpose().contiguous.transpose", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "len", "torch.gather.contiguous().view", "torch.gather.contiguous().view", "CRF.CRF.transitions.view", "mask.transpose().contiguous.transpose().contiguous.long", "torch.sum().view().long.view", "torch.sum().view().long.view", "CRF.CRF.transitions.view", "torch.gather.detach", "torch.gather.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.transpose().contiguous", "inivalues[].clone().view.contiguous().view", "mask[].view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.gather.contiguous", "torch.gather.contiguous", "torch.gather.contiguous", "torch.gather.contiguous", "mask.transpose().contiguous.transpose().contiguous.long", "feats.transpose().contiguous().view().expand.transpose().contiguous().view().expand.transpose", "inivalues[].clone().view.contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros"], ["back_points", ".", "scatter_", "(", "1", ",", "last_position", ",", "insert_last", ")", "\n", "back_points", "=", "back_points", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "decode_idx", "=", "torch", ".", "empty", "(", "seq_len", ",", "batch_size", ",", "device", "=", "self", ".", "device", ",", "requires_grad", "=", "True", ")", ".", "long", "(", ")", "\n", "decode_idx", "[", "-", "1", "]", "=", "pointer", ".", "detach", "(", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "back_points", ")", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "pointer", "=", "torch", ".", "gather", "(", "back_points", "[", "idx", "]", ",", "1", ",", "pointer", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "1", ")", ")", "\n", "decode_idx", "[", "idx", "]", "=", "pointer", ".", "detach", "(", ")", ".", "view", "(", "batch_size", ")", "\n", "", "path_score", "=", "None", "\n", "decode_idx", "=", "decode_idx", ".", "transpose", "(", "1", ",", "0", ")", "\n", "return", "path_score", ",", "decode_idx", "\n", "\n", "", "def", "forward", "(", "self", ",", "feats", ",", "mask", ")", ":", "\n", "        ", "path_score", ",", "best_path", "=", "self", ".", "_viterbi_decode", "(", "feats", ",", "mask", ")", "\n", "return", "path_score", ",", "best_path", "\n", "\n", "", "def", "_score_sentence", "(", "self", ",", "scores", ",", "mask", ",", "tags", ")", ":", "\n", "        ", "batch_size", "=", "scores", ".", "size", "(", "1", ")", "\n", "seq_len", "=", "scores", ".", "size", "(", "0", ")", "\n", "tag_size", "=", "scores", ".", "size", "(", "-", "1", ")", "\n", "tags", "=", "tags", ".", "view", "(", "batch_size", ",", "seq_len", ")", "\n", "new_tags", "=", "torch", ".", "empty", "(", "batch_size", ",", "seq_len", ",", "device", "=", "self", ".", "device", ",", "requires_grad", "=", "True", ")", ".", "long", "(", ")", "\n", "for", "idx", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "                ", "new_tags", "[", ":", ",", "0", "]", "=", "(", "tag_size", "-", "2", ")", "*", "tag_size", "+", "tags", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "                ", "new_tags", "[", ":", ",", "idx", "]", "=", "tags", "[", ":", ",", "idx", "-", "1", "]", "*", "tag_size", "+", "tags", "[", ":", ",", "idx", "]", "\n", "\n", "", "", "end_transition", "=", "self", ".", "transitions", "[", ":", ",", "self", ".", "STOP_TAG", "]", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "tag_size", ")", ".", "expand", "(", "batch_size", ",", "tag_size", ")", "\n", "length_mask", "=", "torch", ".", "sum", "(", "mask", ",", "dim", "=", "1", ")", ".", "view", "(", "batch_size", ",", "1", ")", ".", "long", "(", ")", "\n", "end_ids", "=", "torch", ".", "gather", "(", "tags", ",", "1", ",", "length_mask", "-", "1", ")", "\n", "\n", "end_energy", "=", "torch", ".", "gather", "(", "end_transition", ",", "1", ",", "end_ids", ")", "\n", "\n", "new_tags", "=", "new_tags", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "seq_len", ",", "batch_size", ",", "1", ")", "\n", "tg_energy", "=", "torch", ".", "gather", "(", "scores", ".", "view", "(", "seq_len", ",", "batch_size", ",", "-", "1", ")", ",", "2", ",", "new_tags", ")", ".", "view", "(", "seq_len", ",", "batch_size", ")", "\n", "tg_energy", "=", "tg_energy", ".", "masked_select", "(", "mask", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "\n", "gold_score", "=", "tg_energy", ".", "sum", "(", ")", "+", "end_energy", ".", "sum", "(", ")", "\n", "\n", "return", "gold_score", "\n", "\n", "", "def", "neg_log_likelihood_loss", "(", "self", ",", "feats", ",", "mask", ",", "tags", ")", ":", "\n", "\n", "        ", "forward_score", ",", "scores", "=", "self", ".", "_forward_alg", "(", "feats", ",", "mask", ")", "\n", "gold_score", "=", "self", ".", "_score_sentence", "(", "scores", ",", "mask", ",", "tags", ")", "\n", "return", "forward_score", "-", "gold_score", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.CRF.CRF.forward": [[186, 194], ["CRF.CRF._viterbi_decode"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.CRF.CRF._viterbi_decode"], []], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.CRF.CRF._score_sentence": [[195, 242], ["scores.size", "scores.size", "scores.size", "tags.view.view.view", "torch.empty().long", "torch.empty().long", "torch.empty().long", "torch.empty().long", "range", "CRF.CRF.transitions[].contiguous().view().expand", "torch.sum().view().long", "torch.sum().view().long", "torch.sum().view().long", "torch.sum().view().long", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "new_tags.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "torch.gather().view", "torch.gather().view", "torch.gather().view", "torch.gather().view", "tg_energy.masked_select.masked_select.masked_select", "mask.transpose", "tg_energy.masked_select.masked_select.sum", "torch.gather.sum", "torch.gather.sum", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "CRF.CRF.transitions[].contiguous().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "new_tags.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "scores.view", "CRF.CRF.transitions[].contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "new_tags.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], []], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.CRF.CRF.neg_log_likelihood_loss": [[243, 254], ["feats.size", "CRF.CRF._forward_alg", "CRF.CRF._score_sentence"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.CRF.CRF._forward_alg", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.CRF.CRF._score_sentence"], []], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.CRF.log_sum_exp": [[5, 18], ["torch.max", "torch.max", "torch.gather().view", "torch.gather().view", "torch.gather().view.view", "torch.log().view", "torch.log().view", "torch.gather", "torch.gather", "idx.view", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.gather().view.expand_as"], "function", ["None"], ["\n", "def", "log_sum_exp", "(", "vec", ",", "m_size", ")", ":", "\n", "\n", "    ", "_", ",", "idx", "=", "torch", ".", "max", "(", "vec", ",", "1", ")", "# B * 1 * M", "\n", "max_score", "=", "torch", ".", "gather", "(", "vec", ",", "1", ",", "idx", ".", "view", "(", "-", "1", ",", "1", ",", "m_size", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "m_size", ")", "# B * M", "\n", "return", "max_score", ".", "view", "(", "-", "1", ",", "m_size", ")", "+", "torch", ".", "log", "(", "torch", ".", "sum", "(", "\n", "torch", ".", "exp", "(", "vec", "-", "max_score", ".", "expand_as", "(", "vec", ")", ")", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "m_size", ")", "\n", "\n", "\n", "", "class", "CRF", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "CRF", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.initialize.init_cnn_weight": [[6, 14], ["cnn_layer.weight.size", "numpy.sqrt", "torch.manual_seed", "torch.manual_seed", "torch.init.normal", "cnn_layer.bias.data.zero_", "cnn_layer.weight.size", "numpy.prod"], "function", ["None"], ["def", "init_cnn_weight", "(", "cnn_layer", ",", "seed", "=", "1337", ")", ":", "\n", "\n", "    ", "filter_nums", "=", "cnn_layer", ".", "weight", ".", "size", "(", "0", ")", "\n", "kernel_size", "=", "cnn_layer", ".", "weight", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "scope", "=", "np", ".", "sqrt", "(", "2.", "/", "(", "filter_nums", "*", "np", ".", "prod", "(", "kernel_size", ")", ")", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "nn", ".", "init", ".", "normal", "(", "cnn_layer", ".", "weight", ",", "-", "scope", ",", "scope", ")", "\n", "cnn_layer", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.initialize.init_cnn": [[16, 24], ["cnn_layer.weight.size", "numpy.sqrt", "torch.manual_seed", "torch.manual_seed", "torch.init.xavier_normal", "cnn_layer.bias.data.uniform_", "cnn_layer.weight.size", "numpy.prod"], "function", ["None"], ["", "def", "init_cnn", "(", "cnn_layer", ",", "seed", "=", "1337", ")", ":", "\n", "\n", "    ", "filter_nums", "=", "cnn_layer", ".", "weight", ".", "size", "(", "0", ")", "\n", "kernel_size", "=", "cnn_layer", ".", "weight", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "scope", "=", "np", ".", "sqrt", "(", "2.", "/", "(", "filter_nums", "*", "np", ".", "prod", "(", "kernel_size", ")", ")", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "nn", ".", "init", ".", "xavier_normal", "(", "cnn_layer", ".", "weight", ")", "\n", "cnn_layer", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "scope", ",", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.initialize.init_lstm_weight": [[26, 47], ["range", "getattr", "numpy.sqrt", "torch.manual_seed", "torch.manual_seed", "torch.init.uniform", "getattr", "numpy.sqrt", "torch.manual_seed", "torch.manual_seed", "torch.init.uniform", "range", "getattr", "getattr", "getattr", "getattr.data.zero_", "getattr", "getattr.data.zero_", "getattr.size", "getattr.size", "getattr.size", "getattr.size"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.uniform", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.uniform"], ["", "def", "init_lstm_weight", "(", "lstm", ",", "num_layer", "=", "1", ",", "seed", "=", "1337", ")", ":", "\n", "\n", "    ", "for", "i", "in", "range", "(", "num_layer", ")", ":", "\n", "        ", "weight_h", "=", "getattr", "(", "lstm", ",", "'weight_hh_l{0}'", ".", "format", "(", "i", ")", ")", "\n", "scope", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "weight_h", ".", "size", "(", "0", ")", "/", "4.", "+", "weight_h", ".", "size", "(", "1", ")", ")", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "getattr", "(", "lstm", ",", "'weight_hh_l{0}'", ".", "format", "(", "i", ")", ")", ",", "-", "scope", ",", "scope", ")", "\n", "\n", "weight_i", "=", "getattr", "(", "lstm", ",", "'weight_ih_l{0}'", ".", "format", "(", "i", ")", ")", "\n", "scope", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "weight_i", ".", "size", "(", "0", ")", "/", "4.", "+", "weight_i", ".", "size", "(", "1", ")", ")", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "nn", ".", "init", ".", "uniform", "(", "getattr", "(", "lstm", ",", "'weight_ih_l{0}'", ".", "format", "(", "i", ")", ")", ",", "-", "scope", ",", "scope", ")", "\n", "\n", "", "if", "lstm", ".", "bias", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_layer", ")", ":", "\n", "            ", "weight_h", "=", "getattr", "(", "lstm", ",", "'bias_hh_l{0}'", ".", "format", "(", "i", ")", ")", "\n", "weight_h", ".", "data", ".", "zero_", "(", ")", "\n", "weight_h", ".", "data", "[", "lstm", ".", "hidden_size", ":", "2", "*", "lstm", ".", "hidden_size", "]", "=", "1", "\n", "weight_i", "=", "getattr", "(", "lstm", ",", "'bias_ih_l{0}'", ".", "format", "(", "i", ")", ")", "\n", "weight_i", ".", "data", ".", "zero_", "(", ")", "\n", "weight_i", ".", "data", "[", "lstm", ".", "hidden_size", ":", "2", "*", "lstm", ".", "hidden_size", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.initialize.init_linear": [[49, 56], ["torch.manual_seed", "torch.manual_seed", "numpy.sqrt", "torch.init.uniform_", "input_linear.bias.data.zero_", "input_linear.weight.size", "input_linear.weight.size"], "function", ["None"], ["", "", "", "def", "init_linear", "(", "input_linear", ",", "seed", "=", "1337", ")", ":", "\n", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "scope", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "input_linear", ".", "weight", ".", "size", "(", "0", ")", "+", "input_linear", ".", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "input_linear", ".", "weight", ",", "-", "scope", ",", "scope", ")", "\n", "# nn.init.uniform(input_linear.bias, -scope, scope)", "\n", "if", "input_linear", ".", "bias", "is", "not", "None", ":", "\n", "        ", "input_linear", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.initialize.init_linear_weight_bias": [[58, 65], ["torch.manual_seed", "torch.manual_seed", "torch.init.xavier_uniform_", "numpy.sqrt", "input_linear.bias.data.uniform_", "input_linear.weight.size"], "function", ["None"], ["\n", "", "", "def", "init_linear_weight_bias", "(", "input_linear", ",", "seed", "=", "1337", ")", ":", "\n", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "input_linear", ".", "weight", ")", "\n", "scope", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "input_linear", ".", "weight", ".", "size", "(", "0", ")", "+", "1", ")", ")", "\n", "if", "input_linear", ".", "bias", "is", "not", "None", ":", "\n", "        ", "input_linear", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "scope", ",", "scope", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.initialize.init_embedding": [[67, 72], ["torch.manual_seed", "torch.manual_seed", "numpy.sqrt", "torch.init.uniform_", "input_embedding.size"], "function", ["None"], ["\n", "", "", "def", "init_embedding", "(", "input_embedding", ",", "seed", "=", "666", ")", ":", "\n", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "scope", "=", "np", ".", "sqrt", "(", "3.0", "/", "input_embedding", ".", "size", "(", "1", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "input_embedding", ",", "-", "scope", ",", "scope", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.initialize.init_embed": [[74, 78], ["torch.manual_seed", "torch.manual_seed", "torch.init.xavier_uniform_"], "function", ["None"], ["\n", "", "def", "init_embed", "(", "input_embedding", ",", "seed", "=", "656", ")", ":", "\n", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "input_embedding", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.Encoder.Encoder.__init__": [[14, 53], ["nn.Module.__init__", "allennlp.modules.elmo.Elmo", "nn.Embedding", "nn.Dropout", "nn.Dropout", "PGNLSTM", "nn.Linear", "init_linear", "Encoder.Encoder.__setattr__", "nn.Embedding", "init_embedding", "nn.Embedding", "len", "len"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.__init__", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.initialize.init_linear", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.initialize.init_embedding"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "k", "in", "kwargs", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "", "total_dim", "=", "0", "\n", "\n", "self", ".", "elmo", "=", "Elmo", "(", "self", ".", "options_file", ",", "self", ".", "weight_file", ",", "3", ",", "vocab_to_cache", "=", "self", ".", "elmo_vocab", ",", "\n", "requires_grad", "=", "False", ",", "dropout", "=", "0", ")", "\n", "total_dim", "+=", "1024", "\n", "\n", "if", "self", ".", "is_predicate_position", ":", "\n", "            ", "total_dim", "+=", "1", "\n", "\n", "", "if", "self", ".", "is_predicate", ":", "\n", "            ", "prd_paddingId", "=", "self", ".", "prd_paddingId", "\n", "prd_embed_num", "=", "self", ".", "prd_embed_num", "\n", "prd_embed_dim", "=", "self", ".", "prd_embed_dim", "\n", "total_dim", "+=", "prd_embed_dim", "\n", "self", ".", "prd_embed", "=", "nn", ".", "Embedding", "(", "prd_embed_num", ",", "prd_embed_dim", ",", "padding_idx", "=", "prd_paddingId", ")", "\n", "\n", "", "if", "self", ".", "is_pos", ":", "\n", "            ", "pos_paddingId", "=", "self", ".", "pos_paddingId", "\n", "pos_embed_num", "=", "self", ".", "pos_embed_num", "\n", "pos_embed_dim", "=", "self", ".", "pos_embed_dim", "\n", "total_dim", "+=", "pos_embed_dim", "\n", "init_embedding", "(", "self", ".", "pos_embed", ".", "weight", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Embedding", "(", "pos_embed_num", ",", "pos_embed_dim", ",", "padding_idx", "=", "pos_paddingId", ")", "\n", "\n", "", "self", ".", "lang_embed", "=", "nn", ".", "Embedding", "(", "len", "(", "self", ".", "lang2id", ")", "+", "1", ",", "self", ".", "lang_emb_dim", ",", "padding_idx", "=", "len", "(", "self", ".", "lang2id", ")", ")", "\n", "\n", "C", "=", "self", ".", "label_num", "\n", "\n", "self", ".", "dropout_embed", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_emb", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_emb", ")", "\n", "\n", "self", ".", "pgn", "=", "PGNLSTM", "(", "input_size", "=", "total_dim", ",", "hidden_size", "=", "self", ".", "lstm_hiddens", ",", "num_layers", "=", "self", ".", "lstm_layers", ",", "\n", "task_dim_size", "=", "self", ".", "lang_emb_dim", ",", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "lstm_hiddens", "*", "2", ",", "out_features", "=", "C", ",", "bias", "=", "True", ")", "\n", "init_linear", "(", "self", ".", "linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.Encoder.Encoder.forward": [[54, 85], ["Encoder.Encoder.elmo", "torch.cat", "Encoder.Encoder.lang_embed", "Encoder.Encoder.pgn", "torch.cat.transpose", "Encoder.Encoder.dropout", "torch.tanh", "Encoder.Encoder.linear", "x_prd_posi.unsqueeze.unsqueeze.float", "x_prd_posi.unsqueeze.unsqueeze.unsqueeze", "Encoder.Encoder.prd_embed", "Encoder.Encoder.dropout_embed", "torch.cat", "Encoder.Encoder.pos_embed", "Encoder.Encoder.dropout_embed", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.dropout"], ["", "def", "forward", "(", "self", ",", "elmo_char_seqs", ",", "elmo_word_seqs", ",", "word", ",", "lang", ",", "pos", ",", "prd", ",", "x_prd_posi", ",", "mask", ",", "sentence_length", ")", ":", "\n", "\n", "        ", "if", "self", ".", "is_predicate_position", ":", "\n", "            ", "x_prd_posi", "=", "x_prd_posi", ".", "float", "(", ")", "\n", "x_prd_posi", "=", "x_prd_posi", ".", "unsqueeze", "(", "2", ")", "\n", "x", "=", "x_prd_posi", "\n", "\n", "", "if", "self", ".", "is_predicate", ":", "\n", "            ", "x_prd", "=", "self", ".", "prd_embed", "(", "prd", ")", "\n", "x_prd", "=", "self", ".", "dropout_embed", "(", "x_prd", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_prd", ")", ",", "2", ")", "\n", "\n", "", "if", "self", ".", "is_pos", ":", "\n", "            ", "x_pos", "=", "self", ".", "pos_embed", "(", "pos", ")", "\n", "x_pos", "=", "self", ".", "dropout_embed", "(", "x_pos", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_pos", ")", ",", "2", ")", "\n", "\n", "", "x_elmo_pack", "=", "self", ".", "elmo", "(", "elmo_char_seqs", ",", "elmo_word_seqs", ")", "\n", "x_elmo_embeddings", "=", "x_elmo_pack", "[", "'elmo_representations'", "]", "\n", "x_elmo", "=", "(", "x_elmo_embeddings", "[", "0", "]", "+", "x_elmo_embeddings", "[", "1", "]", "+", "x_elmo_embeddings", "[", "2", "]", ")", "/", "3.0", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x_elmo", ")", ",", "2", ")", "\n", "\n", "x_lang", "=", "self", ".", "lang_embed", "(", "lang", ")", "\n", "\n", "x", ",", "_", "=", "self", ".", "pgn", "(", "x_lang", ",", "x", ",", "mask", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "0", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "logit", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "return", "logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.modelHelp.prepare_pack_padded_sequence": [[8, 17], ["torch.sort", "indices.numpy().tolist", "torch.sort", "torch.Tensor().long", "sorted_seq_lengths.cpu().numpy", "indices.numpy", "torch.Tensor", "sorted_seq_lengths.cpu"], "function", ["None"], ["\n", "def", "prepare_pack_padded_sequence", "(", "inputs_words", ",", "pos", ",", "dep", ",", "dep_head", ",", "prd", ",", "seq_lengths", ",", "device", "=", "\"cpu\"", ",", "descending", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    :param device:\n    :param inputs_words:\n    :param seq_lengths:\n    :param descending:\n    :return:\n    \"\"\"", "\n", "sorted_seq_lengths", ",", "indices", "=", "torch", ".", "sort", "(", "torch", ".", "Tensor", "(", "seq_lengths", ")", ".", "long", "(", ")", ",", "descending", "=", "descending", ")", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.PGNLSTM.__init__": [[88, 155], ["torch.nn.Module.__init__", "range", "len", "torch.nn.parameter.Parameter", "PGNLSTM.PGNLSTM._all_name_weights.append", "PGNLSTM.PGNLSTM._all_weights.append", "setattr", "torch.nn.parameter.Parameter", "PGNLSTM.PGNLSTM._all_name_weights.append", "PGNLSTM.PGNLSTM._all_weights.append", "setattr", "torch.nn.parameter.Parameter", "PGNLSTM.PGNLSTM._all_name_weights.append", "PGNLSTM.PGNLSTM._all_weights.append", "setattr", "torch.nn.parameter.Parameter", "PGNLSTM.PGNLSTM._all_name_weights.append", "PGNLSTM.PGNLSTM._all_weights.append", "setattr", "PGNLSTM.PGNLSTM.reset_parameters", "range", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "torch.nn.parameter.Parameter", "PGNLSTM.PGNLSTM._all_name_weights.append", "PGNLSTM.PGNLSTM._all_weights.append", "setattr", "torch.nn.parameter.Parameter", "PGNLSTM.PGNLSTM._all_name_weights.append", "PGNLSTM.PGNLSTM._all_weights.append", "setattr", "torch.nn.parameter.Parameter", "PGNLSTM.PGNLSTM._all_name_weights.append", "PGNLSTM.PGNLSTM._all_weights.append", "setattr", "torch.nn.parameter.Parameter", "PGNLSTM.PGNLSTM._all_name_weights.append", "PGNLSTM.PGNLSTM._all_weights.append", "setattr", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.__init__", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.PGNLSTM.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "task_dim_size", ",", "num_layers", "=", "1", ",", "batch_first", "=", "False", ",", "bidirectional", "=", "False", ",", "dropout_in", "=", "0", ",", "dropout_out", "=", "0", ")", ":", "\n", "        ", "super", "(", "PGNLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "dropout_in", "=", "dropout_in", "\n", "self", ".", "dropout_out", "=", "dropout_out", "\n", "self", ".", "num_directions", "=", "2", "if", "bidirectional", "else", "1", "\n", "self", ".", "task_dim_size", "=", "task_dim_size", "\n", "\n", "self", ".", "_all_name_weights", ",", "self", ".", "_all_weights", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "fparam_indices", "=", "[", "-", "1", "for", "idx", "in", "range", "(", "num_layers", ")", "]", "\n", "self", ".", "bparam_indices", "=", "[", "-", "1", "for", "idx", "in", "range", "(", "num_layers", ")", "]", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer_input_size", "=", "input_size", "if", "layer", "==", "0", "else", "hidden_size", "*", "self", ".", "num_directions", "\n", "self", ".", "fparam_indices", "[", "layer", "]", "=", "len", "(", "self", ".", "_all_weights", ")", "\n", "\n", "param_ih", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "4", "*", "hidden_size", ",", "layer_input_size", ",", "task_dim_size", ")", ")", "\n", "param_ih_name", "=", "'fweights_ih_l{}'", ".", "format", "(", "layer", ")", "\n", "self", ".", "_all_name_weights", ".", "append", "(", "param_ih_name", ")", "\n", "self", ".", "_all_weights", ".", "append", "(", "param_ih", ")", "\n", "setattr", "(", "self", ",", "param_ih_name", ",", "param_ih", ")", "\n", "param_hh", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "4", "*", "hidden_size", ",", "hidden_size", ",", "task_dim_size", ")", ")", "\n", "param_hh_name", "=", "'fweights_hh_l{}'", ".", "format", "(", "layer", ")", "\n", "self", ".", "_all_name_weights", ".", "append", "(", "param_hh_name", ")", "\n", "self", ".", "_all_weights", ".", "append", "(", "param_hh", ")", "\n", "setattr", "(", "self", ",", "param_hh_name", ",", "param_hh", ")", "\n", "bias_ih", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "4", "*", "hidden_size", ",", "task_dim_size", ")", ")", "\n", "bias_ih_name", "=", "'fbias_ih_l{}'", ".", "format", "(", "layer", ")", "\n", "self", ".", "_all_name_weights", ".", "append", "(", "bias_ih_name", ")", "\n", "self", ".", "_all_weights", ".", "append", "(", "bias_ih", ")", "\n", "setattr", "(", "self", ",", "bias_ih_name", ",", "bias_ih", ")", "\n", "bias_hh", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "4", "*", "hidden_size", ",", "task_dim_size", ")", ")", "\n", "bias_hh_name", "=", "'fbias_hh_l{}'", ".", "format", "(", "layer", ")", "\n", "self", ".", "_all_name_weights", ".", "append", "(", "bias_hh_name", ")", "\n", "self", ".", "_all_weights", ".", "append", "(", "bias_hh", ")", "\n", "setattr", "(", "self", ",", "bias_hh_name", ",", "bias_hh", ")", "\n", "\n", "if", "self", ".", "bidirectional", ":", "\n", "                ", "self", ".", "bparam_indices", "[", "layer", "]", "=", "len", "(", "self", ".", "_all_weights", ")", "\n", "\n", "param_ih", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "4", "*", "hidden_size", ",", "layer_input_size", ",", "task_dim_size", ")", ")", "\n", "param_ih_name", "=", "'bweights_ih_l{}'", ".", "format", "(", "layer", ")", "\n", "self", ".", "_all_name_weights", ".", "append", "(", "param_ih_name", ")", "\n", "self", ".", "_all_weights", ".", "append", "(", "param_ih", ")", "\n", "setattr", "(", "self", ",", "param_ih_name", ",", "param_ih", ")", "\n", "param_hh", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "4", "*", "hidden_size", ",", "hidden_size", ",", "task_dim_size", ")", ")", "\n", "param_hh_name", "=", "'bweights_hh_l{}'", ".", "format", "(", "layer", ")", "\n", "self", ".", "_all_name_weights", ".", "append", "(", "param_hh_name", ")", "\n", "self", ".", "_all_weights", ".", "append", "(", "param_hh", ")", "\n", "setattr", "(", "self", ",", "param_hh_name", ",", "param_hh", ")", "\n", "bias_ih", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "4", "*", "hidden_size", ",", "task_dim_size", ")", ")", "\n", "bias_ih_name", "=", "'bbias_ih_l{}'", ".", "format", "(", "layer", ")", "\n", "self", ".", "_all_name_weights", ".", "append", "(", "bias_ih_name", ")", "\n", "self", ".", "_all_weights", ".", "append", "(", "bias_ih", ")", "\n", "setattr", "(", "self", ",", "bias_ih_name", ",", "bias_ih", ")", "\n", "bias_hh", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "4", "*", "hidden_size", ",", "task_dim_size", ")", ")", "\n", "bias_hh_name", "=", "'bbias_hh_l{}'", ".", "format", "(", "layer", ")", "\n", "self", ".", "_all_name_weights", ".", "append", "(", "bias_hh_name", ")", "\n", "self", ".", "_all_weights", ".", "append", "(", "bias_hh", ")", "\n", "setattr", "(", "self", ",", "bias_hh_name", ",", "bias_hh", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.PGNLSTM.reset_parameters": [[156, 189], ["range", "PGNLSTM.PGNLSTM.named_parameters", "PGNLSTM.PGNLSTM.__getattr__", "PGNLSTM.PGNLSTM.__getattr__", "PGNLSTM.orthonormal_initializer", "torch.from_numpy().unsqueeze", "py_w_h.expand.expand.expand", "torch.from_numpy().unsqueeze", "py_w_x.expand.expand.expand", "PGNLSTM.PGNLSTM.data.copy_", "PGNLSTM.PGNLSTM.data.copy_", "PGNLSTM.PGNLSTM.__getattr__", "PGNLSTM.PGNLSTM.__getattr__", "PGNLSTM.orthonormal_initializer", "torch.from_numpy().unsqueeze", "py_w_h.expand.expand.expand", "torch.from_numpy().unsqueeze", "py_w_x.expand.expand.expand", "PGNLSTM.PGNLSTM.data.copy_", "PGNLSTM.PGNLSTM.data.copy_", "torch.nn.init.constant_", "torch.from_numpy", "torch.from_numpy", "PGNLSTM.PGNLSTM.__getattr__", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy", "torch.from_numpy", "numpy.concatenate", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.orthonormal_initializer", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.orthonormal_initializer"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer_input_size", "=", "self", ".", "input_size", "if", "layer", "==", "0", "else", "self", ".", "hidden_size", "*", "self", ".", "num_directions", "\n", "param_ih_name", "=", "'fweights_ih_l{}'", ".", "format", "(", "layer", ")", "\n", "param_hh_name", "=", "'fweights_hh_l{}'", ".", "format", "(", "layer", ")", "\n", "param_ih", "=", "self", ".", "__getattr__", "(", "param_ih_name", ")", "\n", "param_hh", "=", "self", ".", "__getattr__", "(", "param_hh_name", ")", "\n", "W", "=", "orthonormal_initializer", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", "+", "layer_input_size", ")", "\n", "W_h", ",", "W_x", "=", "W", "[", ":", ",", ":", "self", ".", "hidden_size", "]", ",", "W", "[", ":", ",", "self", ".", "hidden_size", ":", "]", "\n", "py_w_h", "=", "torch", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "[", "W_h", "]", "*", "4", ",", "0", ")", ")", ".", "unsqueeze", "(", "dim", "=", "2", ")", "\n", "py_w_h", "=", "py_w_h", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "task_dim_size", ")", "\n", "py_w_x", "=", "torch", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "[", "W_x", "]", "*", "4", ",", "0", ")", ")", ".", "unsqueeze", "(", "dim", "=", "2", ")", "\n", "py_w_x", "=", "py_w_x", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "task_dim_size", ")", "\n", "param_hh", ".", "data", ".", "copy_", "(", "py_w_h", ")", "\n", "param_ih", ".", "data", ".", "copy_", "(", "py_w_x", ")", "\n", "\n", "if", "self", ".", "bidirectional", ":", "\n", "                ", "param_ih_name", "=", "'bweights_ih_l{}'", ".", "format", "(", "layer", ")", "\n", "param_hh_name", "=", "'bweights_hh_l{}'", ".", "format", "(", "layer", ")", "\n", "param_ih", "=", "self", ".", "__getattr__", "(", "param_ih_name", ")", "\n", "param_hh", "=", "self", ".", "__getattr__", "(", "param_hh_name", ")", "\n", "W", "=", "orthonormal_initializer", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", "+", "layer_input_size", ")", "\n", "W_h", ",", "W_x", "=", "W", "[", ":", ",", ":", "self", ".", "hidden_size", "]", ",", "W", "[", ":", ",", "self", ".", "hidden_size", ":", "]", "\n", "py_w_h", "=", "torch", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "[", "W_h", "]", "*", "4", ",", "0", ")", ")", ".", "unsqueeze", "(", "dim", "=", "2", ")", "\n", "py_w_h", "=", "py_w_h", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "task_dim_size", ")", "\n", "py_w_x", "=", "torch", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "[", "W_x", "]", "*", "4", ",", "0", ")", ")", ".", "unsqueeze", "(", "dim", "=", "2", ")", "\n", "py_w_x", "=", "py_w_x", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "task_dim_size", ")", "\n", "param_hh", ".", "data", ".", "copy_", "(", "py_w_h", ")", "\n", "param_ih", ".", "data", ".", "copy_", "(", "py_w_x", ")", "\n", "\n", "", "", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"bias\"", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "__getattr__", "(", "name", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.PGNLSTM.forward": [[190, 250], ["input.transpose.transpose.size", "torch.unsqueeze.expand", "task_emb.reshape.reshape.reshape", "zip", "range", "torch.stack", "torch.stack", "input.transpose.transpose.transpose", "torch.unsqueeze", "torch.autograd.Variable", "torch.mm", "all_weights.append", "input.transpose.transpose.size", "PGNLSTM.left2right_lstm", "torch.stack.append", "torch.stack.append", "torch.unsqueeze.transpose", "input.transpose.transpose.data.new().zero_", "cur_weight.reshape", "domain_task_lstm.reshape.reshape.reshape", "domain_task_lstm.reshape.reshape.reshape", "input.transpose.transpose.data.new().fill_", "torch.autograd.Variable", "torch.unsqueeze().expand().permute", "input.transpose.transpose.data.new().fill_", "torch.autograd.Variable", "PGNLSTM.right2left_lstm", "torch.cat", "torch.bernoulli", "torch.bernoulli", "torch.cat", "torch.cat", "input.transpose.transpose.data.new", "input.transpose.transpose.data.new", "torch.unsqueeze().expand", "input.transpose.transpose.data.new", "torch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.left2right_lstm", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.right2left_lstm"], ["", "", "", "def", "forward", "(", "self", ",", "task_emb", ",", "input", ",", "masks", ",", "initial", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "batch_first", ":", "\n", "            ", "input", "=", "input", ".", "transpose", "(", "0", ",", "1", ")", "\n", "masks", "=", "torch", ".", "unsqueeze", "(", "masks", ".", "transpose", "(", "0", ",", "1", ")", ",", "dim", "=", "2", ")", "\n", "", "max_time", ",", "batch_size", ",", "_", "=", "input", ".", "size", "(", ")", "\n", "masks", "=", "masks", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "hidden_size", ")", "\n", "\n", "if", "initial", "is", "None", ":", "\n", "            ", "initial", "=", "Variable", "(", "input", ".", "data", ".", "new", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "zero_", "(", ")", ")", "\n", "initial", "=", "(", "initial", ",", "initial", ")", "\n", "", "h_n", "=", "[", "]", "\n", "c_n", "=", "[", "]", "\n", "\n", "all_weights", "=", "[", "]", "\n", "task_emb", "=", "task_emb", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "for", "cur_name_weight", ",", "cur_weight", "in", "zip", "(", "self", ".", "_all_name_weights", ",", "self", ".", "_all_weights", ")", ":", "\n", "            ", "domain_task_lstm", "=", "torch", ".", "mm", "(", "cur_weight", ".", "reshape", "(", "-", "1", ",", "self", ".", "task_dim_size", ")", ",", "task_emb", ")", "\n", "if", "\"bias\"", "in", "cur_name_weight", ":", "\n", "                ", "domain_task_lstm", "=", "domain_task_lstm", ".", "reshape", "(", "4", "*", "self", ".", "hidden_size", ")", "\n", "", "else", ":", "\n", "                ", "domain_task_lstm", "=", "domain_task_lstm", ".", "reshape", "(", "4", "*", "self", ".", "hidden_size", ",", "-", "1", ")", "\n", "", "all_weights", ".", "append", "(", "domain_task_lstm", ")", "\n", "\n", "", "for", "layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "max_time", ",", "batch_size", ",", "input_size", "=", "input", ".", "size", "(", ")", "\n", "input_mask", ",", "hidden_mask", "=", "None", ",", "None", "\n", "if", "self", ".", "training", ":", "\n", "                ", "input_mask", "=", "input", ".", "data", ".", "new", "(", "batch_size", ",", "input_size", ")", ".", "fill_", "(", "1", "-", "self", ".", "dropout_in", ")", "\n", "input_mask", "=", "Variable", "(", "torch", ".", "bernoulli", "(", "input_mask", ")", ",", "requires_grad", "=", "False", ")", "\n", "input_mask", "=", "input_mask", "/", "(", "1", "-", "self", ".", "dropout_in", ")", "\n", "input_mask", "=", "torch", ".", "unsqueeze", "(", "input_mask", ",", "dim", "=", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "max_time", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "input", "=", "input", "*", "input_mask", "\n", "\n", "hidden_mask", "=", "input", ".", "data", ".", "new", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "fill_", "(", "1", "-", "self", ".", "dropout_out", ")", "\n", "hidden_mask", "=", "Variable", "(", "torch", ".", "bernoulli", "(", "hidden_mask", ")", ",", "requires_grad", "=", "False", ")", "\n", "hidden_mask", "=", "hidden_mask", "/", "(", "1", "-", "self", ".", "dropout_out", ")", "\n", "\n", "", "findex", "=", "self", ".", "fparam_indices", "[", "layer", "]", "\n", "fparams", "=", "all_weights", "[", "findex", "]", ",", "all_weights", "[", "findex", "+", "1", "]", ",", "all_weights", "[", "findex", "+", "2", "]", ",", "all_weights", "[", "findex", "+", "3", "]", "\n", "layer_output", ",", "(", "layer_h_n", ",", "layer_c_n", ")", "=", "left2right_lstm", "(", "params", "=", "fparams", ",", "input", "=", "input", ",", "masks", "=", "masks", ",", "initial", "=", "initial", ",", "\n", "drop_masks", "=", "hidden_mask", ")", "\n", "\n", "if", "self", ".", "bidirectional", ":", "\n", "                ", "bindex", "=", "self", ".", "bparam_indices", "[", "layer", "]", "\n", "bparams", "=", "all_weights", "[", "bindex", "]", ",", "all_weights", "[", "bindex", "+", "1", "]", ",", "all_weights", "[", "bindex", "+", "2", "]", ",", "all_weights", "[", "bindex", "+", "3", "]", "\n", "blayer_output", ",", "(", "blayer_h_n", ",", "blayer_c_n", ")", "=", "right2left_lstm", "(", "params", "=", "bparams", ",", "input", "=", "input", ",", "masks", "=", "masks", ",", "initial", "=", "initial", ",", "\n", "drop_masks", "=", "hidden_mask", ")", "\n", "\n", "", "h_n", ".", "append", "(", "torch", ".", "cat", "(", "[", "layer_h_n", ",", "blayer_h_n", "]", ",", "1", ")", "if", "self", ".", "bidirectional", "else", "layer_h_n", ")", "\n", "c_n", ".", "append", "(", "torch", ".", "cat", "(", "[", "layer_c_n", ",", "blayer_c_n", "]", ",", "1", ")", "if", "self", ".", "bidirectional", "else", "layer_c_n", ")", "\n", "input", "=", "torch", ".", "cat", "(", "[", "layer_output", ",", "blayer_output", "]", ",", "2", ")", "if", "self", ".", "bidirectional", "else", "layer_output", "\n", "\n", "", "h_n", "=", "torch", ".", "stack", "(", "h_n", ",", "0", ")", "\n", "c_n", "=", "torch", ".", "stack", "(", "c_n", ",", "0", ")", "\n", "\n", "return", "input", ",", "(", "h_n", ",", "c_n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.orthonormal_initializer": [[8, 35], ["numpy.eye", "numpy.transpose", "range", "Q.astype", "numpy.random.randn", "numpy.sqrt", "numpy.sum", "numpy.random.randn", "numpy.sqrt", "Q.T.dot", "Q.dot", "numpy.abs", "numpy.max", "numpy.isfinite", "Q2.sum", "Q2.sum"], "function", ["None"], ["def", "orthonormal_initializer", "(", "output_size", ",", "input_size", ")", ":", "\n", "    ", "\"\"\"\n    adopted from Timothy Dozat https://github.com/tdozat/Parser/blob/master/lib/linalg.py\n    \"\"\"", "\n", "I", "=", "np", ".", "eye", "(", "output_size", ")", "\n", "lr", "=", ".1", "\n", "eps", "=", ".05", "/", "(", "output_size", "+", "input_size", ")", "\n", "success", "=", "False", "\n", "tries", "=", "0", "\n", "while", "not", "success", "and", "tries", "<", "10", ":", "\n", "        ", "Q", "=", "np", ".", "random", ".", "randn", "(", "input_size", ",", "output_size", ")", "/", "np", ".", "sqrt", "(", "output_size", ")", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "            ", "QTQmI", "=", "Q", ".", "T", ".", "dot", "(", "Q", ")", "-", "I", "\n", "loss", "=", "np", ".", "sum", "(", "QTQmI", "**", "2", "/", "2", ")", "\n", "Q2", "=", "Q", "**", "2", "\n", "Q", "-=", "lr", "*", "Q", ".", "dot", "(", "QTQmI", ")", "/", "(", "\n", "np", ".", "abs", "(", "Q2", "+", "Q2", ".", "sum", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "Q2", ".", "sum", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "-", "1", ")", "+", "eps", ")", "\n", "if", "np", ".", "max", "(", "Q", ")", ">", "1e6", "or", "loss", ">", "1e6", "or", "not", "np", ".", "isfinite", "(", "loss", ")", ":", "\n", "                ", "tries", "+=", "1", "\n", "lr", "/=", "2", "\n", "break", "\n", "", "", "success", "=", "True", "\n", "", "if", "success", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "Q", "=", "np", ".", "random", ".", "randn", "(", "input_size", ",", "output_size", ")", "/", "np", ".", "sqrt", "(", "output_size", ")", "\n", "", "return", "np", ".", "transpose", "(", "Q", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.lstm_cell": [[37, 52], ["gates.chunk", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.sigmoid", "torch.tanh", "torch.mm", "torch.mm", "w_ih.t", "w_hh.t"], "function", ["None"], ["", "def", "lstm_cell", "(", "input", ",", "hidden", ",", "w_ih", ",", "w_hh", ",", "b_ih", ",", "b_hh", ")", ":", "\n", "    ", "hx", ",", "cx", "=", "hidden", "\n", "gates", "=", "torch", ".", "mm", "(", "input", ",", "w_ih", ".", "t", "(", ")", ")", "+", "torch", ".", "mm", "(", "hx", ",", "w_hh", ".", "t", "(", ")", ")", "+", "b_ih", "+", "b_hh", "\n", "\n", "ingate", ",", "forgetgate", ",", "cellgate", ",", "outgate", "=", "gates", ".", "chunk", "(", "4", ",", "1", ")", "\n", "\n", "ingate", "=", "torch", ".", "sigmoid", "(", "ingate", ")", "\n", "forgetgate", "=", "torch", ".", "sigmoid", "(", "forgetgate", ")", "\n", "cellgate", "=", "torch", ".", "tanh", "(", "cellgate", ")", "\n", "outgate", "=", "torch", ".", "sigmoid", "(", "outgate", ")", "\n", "\n", "cy", "=", "(", "forgetgate", "*", "cx", ")", "+", "(", "ingate", "*", "cellgate", ")", "\n", "hy", "=", "outgate", "*", "torch", ".", "tanh", "(", "cy", ")", "\n", "\n", "return", "hy", ",", "cy", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.left2right_lstm": [[54, 68], ["input.size", "range", "torch.stack", "PGNLSTM.lstm_cell", "torch.stack.append"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.lstm_cell"], ["", "def", "left2right_lstm", "(", "params", ",", "input", ",", "masks", ",", "initial", ",", "drop_masks", ")", ":", "\n", "    ", "w_ih", ",", "w_hh", ",", "b_ih", ",", "b_hh", "=", "params", "\n", "max_time", "=", "input", ".", "size", "(", "0", ")", "\n", "output", "=", "[", "]", "\n", "hx", "=", "initial", "\n", "for", "time", "in", "range", "(", "max_time", ")", ":", "\n", "        ", "h_next", ",", "c_next", "=", "lstm_cell", "(", "input", "[", "time", "]", ",", "hx", ",", "w_ih", ",", "w_hh", ",", "b_ih", ",", "b_hh", ")", "\n", "h_next", "=", "h_next", "*", "masks", "[", "time", "]", "+", "initial", "[", "0", "]", "*", "(", "1", "-", "masks", "[", "time", "]", ")", "\n", "c_next", "=", "c_next", "*", "masks", "[", "time", "]", "+", "initial", "[", "1", "]", "*", "(", "1", "-", "masks", "[", "time", "]", ")", "\n", "output", ".", "append", "(", "h_next", ")", "\n", "if", "drop_masks", "is", "not", "None", ":", "h_next", "=", "h_next", "*", "drop_masks", "\n", "hx", "=", "(", "h_next", ",", "c_next", ")", "\n", "", "output", "=", "torch", ".", "stack", "(", "output", ",", "0", ")", "\n", "return", "output", ",", "hx", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.right2left_lstm": [[70, 85], ["input.size", "reversed", "torch.stack.reverse", "torch.stack", "range", "PGNLSTM.lstm_cell", "torch.stack.append"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.PGNLSTM.lstm_cell"], ["", "def", "right2left_lstm", "(", "params", ",", "input", ",", "masks", ",", "initial", ",", "drop_masks", ")", ":", "\n", "    ", "w_ih", ",", "w_hh", ",", "b_ih", ",", "b_hh", "=", "params", "\n", "max_time", "=", "input", ".", "size", "(", "0", ")", "\n", "output", "=", "[", "]", "\n", "hx", "=", "initial", "\n", "for", "time", "in", "reversed", "(", "range", "(", "max_time", ")", ")", ":", "\n", "        ", "h_next", ",", "c_next", "=", "lstm_cell", "(", "input", "[", "time", "]", ",", "hx", ",", "w_ih", ",", "w_hh", ",", "b_ih", ",", "b_hh", ")", "\n", "h_next", "=", "h_next", "*", "masks", "[", "time", "]", "+", "initial", "[", "0", "]", "*", "(", "1", "-", "masks", "[", "time", "]", ")", "\n", "c_next", "=", "c_next", "*", "masks", "[", "time", "]", "+", "initial", "[", "1", "]", "*", "(", "1", "-", "masks", "[", "time", "]", ")", "\n", "output", ".", "append", "(", "h_next", ")", "\n", "if", "drop_masks", "is", "not", "None", ":", "h_next", "=", "h_next", "*", "drop_masks", "\n", "hx", "=", "(", "h_next", ",", "c_next", ")", "\n", "", "output", ".", "reverse", "(", ")", "\n", "output", "=", "torch", ".", "stack", "(", "output", ",", "0", ")", "\n", "return", "output", ",", "hx", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.BiLSTM.BiLSTM.__init__": [[18, 47], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "init_linear", "BiLSTM.BiLSTM.__setattr__", "BiLSTM.BiLSTM.embed.weight.data.copy_", "init_embedding"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.__init__", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.initialize.init_linear", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.initialize.init_embedding"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BiLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "k", "in", "kwargs", ":", "\n", "            ", "self", ".", "__setattr__", "(", "k", ",", "kwargs", "[", "k", "]", ")", "\n", "", "total_dim", "=", "0", "\n", "\n", "word_paddingId", "=", "self", ".", "word_paddingId", "\n", "word_embed_num", "=", "self", ".", "embed_num", "\n", "word_embed_dim", "=", "self", ".", "embed_dim", "\n", "total_dim", "+=", "word_embed_dim", "\n", "self", ".", "word_embedding_dim", "=", "word_embed_dim", "\n", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "word_embed_num", ",", "word_embed_dim", ",", "padding_idx", "=", "word_paddingId", ")", "\n", "\n", "if", "self", ".", "pretrained_embed", ":", "\n", "            ", "self", ".", "embed", ".", "weight", ".", "data", ".", "copy_", "(", "self", ".", "pretrained_weight", ")", "\n", "", "else", ":", "\n", "            ", "init_embedding", "(", "self", ".", "embed", ".", "weight", ")", "\n", "\n", "", "C", "=", "self", ".", "label_num", "\n", "\n", "self", ".", "dropout_embed", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_emb", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_emb", ")", "\n", "\n", "\n", "self", ".", "bilstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "total_dim", ",", "hidden_size", "=", "self", ".", "lstm_hiddens", ",", "num_layers", "=", "self", ".", "lstm_layers", ",", "\n", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ",", "bias", "=", "True", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "lstm_hiddens", "*", "2", ",", "out_features", "=", "C", ",", "bias", "=", "True", ")", "\n", "init_linear", "(", "self", ".", "linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.BiLSTM.BiLSTM.forward": [[48, 64], ["Engines.modelHelp.prepare_pack_padded_sequence", "BiLSTM.BiLSTM.embed", "BiLSTM.BiLSTM.dropout_embed", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "BiLSTM.BiLSTM.bilstm", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "BiLSTM.BiLSTM.dropout", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "BiLSTM.BiLSTM.linear"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Engines.modelHelp.prepare_pack_padded_sequence", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.dropout"], ["", "def", "forward", "(", "self", ",", "word", ",", "sentence_length", ")", ":", "\n", "\n", "        ", "word", ",", "sentence_length", ",", "desorted_indices", "=", "prepare_pack_padded_sequence", "(", "word", ",", "sentence_length", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "x_word", "=", "self", ".", "embed", "(", "word", ")", "# (N,W,D)", "\n", "x", "=", "self", ".", "dropout_embed", "(", "x_word", ")", "\n", "\n", "packed_embed", "=", "pack_padded_sequence", "(", "x", ",", "sentence_length", ",", "batch_first", "=", "True", ")", "\n", "x", ",", "_", "=", "self", ".", "bilstm", "(", "packed_embed", ")", "\n", "x", ",", "_", "=", "pad_packed_sequence", "(", "x", ",", "batch_first", "=", "True", ")", "\n", "x", "=", "x", "[", "desorted_indices", "]", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "logit", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "return", "logit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.__init__": [[28, 48], ["trainPOS.Train.config.logger.info", "DataUtils.Optim.Optimizer", "trainPOS.Train._loss", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "DataUtils.utils.Best_Result", "len", "DataUtils.eval.Eval", "DataUtils.eval.Eval", "DataUtils.eval.Eval"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._loss", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "config", "=", "kwargs", "[", "\"config\"", "]", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Training Start......\"", ")", "\n", "self", ".", "train_iter", "=", "kwargs", "[", "\"train_iter\"", "]", "\n", "self", ".", "dev_iter", "=", "kwargs", "[", "\"dev_iter\"", "]", "\n", "self", ".", "test_iter", "=", "kwargs", "[", "\"test_iter\"", "]", "\n", "self", ".", "model", "=", "kwargs", "[", "\"model\"", "]", "\n", "self", ".", "use_crf", "=", "self", ".", "config", ".", "use_crf", "\n", "self", ".", "average_batch", "=", "self", ".", "config", ".", "average_batch", "\n", "self", ".", "early_max_patience", "=", "self", ".", "config", ".", "early_max_patience", "\n", "self", ".", "optimizer", "=", "Optimizer", "(", "name", "=", "self", ".", "config", ".", "learning_algorithm", ",", "model", "=", "self", ".", "model", ",", "lr", "=", "self", ".", "config", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", ",", "grad_clip", "=", "self", ".", "config", ".", "clip_max_norm", ")", "\n", "self", ".", "loss_function", "=", "self", ".", "_loss", "(", "learning_algorithm", "=", "self", ".", "config", ".", "learning_algorithm", ",", "\n", "label_paddingId", "=", "self", ".", "config", ".", "label_paddingId", ",", "use_crf", "=", "self", ".", "use_crf", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "self", ".", "loss_function", ")", "\n", "self", ".", "best_score", "=", "Best_Result", "(", ")", "\n", "self", ".", "train_eval", ",", "self", ".", "dev_eval", ",", "self", ".", "test_eval", "=", "Eval", "(", ")", ",", "Eval", "(", ")", ",", "Eval", "(", ")", "\n", "self", ".", "train_iter_len", "=", "len", "(", "self", ".", "train_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._loss": [[49, 60], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["", "def", "_loss", "(", "self", ",", "learning_algorithm", ",", "label_paddingId", ",", "use_crf", "=", "False", ")", ":", "\n", "\n", "        ", "if", "use_crf", ":", "\n", "            ", "loss_function", "=", "self", ".", "model", ".", "crf_layer", ".", "neg_log_likelihood_loss", "\n", "return", "loss_function", "\n", "", "elif", "learning_algorithm", "==", "\"SGD\"", ":", "\n", "            ", "loss_function", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "label_paddingId", ",", "reduction", "=", "\"sum\"", ")", "\n", "return", "loss_function", "\n", "", "else", ":", "\n", "            ", "loss_function", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "label_paddingId", ",", "reduction", "=", "\"mean\"", ")", "\n", "return", "loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._clip_model_norm": [[61, 67], ["isinstance", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "torch.clip_grad_norm_", "float", "trainPOS.Train.model.parameters"], "methods", ["None"], ["", "", "def", "_clip_model_norm", "(", "self", ",", "clip_max_norm_use", ",", "clip_max_norm", ")", ":", "\n", "\n", "        ", "if", "clip_max_norm_use", "is", "True", ":", "\n", "            ", "gclip", "=", "None", "if", "clip_max_norm", "==", "\"None\"", "else", "float", "(", "clip_max_norm", ")", "\n", "assert", "isinstance", "(", "gclip", ",", "float", ")", "\n", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "max_norm", "=", "gclip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._dynamic_lr": [[68, 75], ["max", "DataUtils.utils.set_lrate"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.set_lrate"], ["", "", "def", "_dynamic_lr", "(", "self", ",", "config", ",", "epoch", ",", "new_lr", ")", ":", "\n", "\n", "        ", "if", "config", ".", "use_lr_decay", "is", "True", "and", "epoch", ">", "config", ".", "max_patience", "and", "(", "\n", "epoch", "-", "1", ")", "%", "config", ".", "max_patience", "==", "0", "and", "new_lr", ">", "config", ".", "min_lrate", ":", "\n", "            ", "new_lr", "=", "max", "(", "new_lr", "*", "config", ".", "lr_rate_decay", ",", "config", ".", "min_lrate", ")", "\n", "set_lrate", "(", "self", ".", "optimizer", ",", "new_lr", ")", "\n", "", "return", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._decay_learning_rate": [[76, 82], ["None"], "methods", ["None"], ["", "def", "_decay_learning_rate", "(", "self", ",", "epoch", ",", "init_lr", ")", ":", "\n", "\n", "        ", "lr", "=", "init_lr", "/", "(", "1", "+", "self", ".", "config", ".", "lr_rate_decay", "*", "epoch", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "self", ".", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._optimizer_batch_step": [[83, 88], ["trainPOS.Train.optimizer.step", "trainPOS.Train.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.step", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.zero_grad"], ["", "def", "_optimizer_batch_step", "(", "self", ",", "config", ",", "backward_count", ")", ":", "\n", "\n", "        ", "if", "backward_count", "%", "config", ".", "backward_batch_size", "==", "0", "or", "backward_count", "==", "self", ".", "train_iter_len", ":", "\n", "            ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._early_stop": [[89, 102], ["trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.save_training_summary", "exit"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.save_training_summary"], ["", "", "def", "_early_stop", "(", "self", ",", "epoch", ",", "config", ")", ":", "\n", "\n", "        ", "best_epoch", "=", "self", ".", "best_score", ".", "best_epoch", "\n", "if", "epoch", ">", "best_epoch", ":", "\n", "            ", "self", ".", "best_score", ".", "early_current_patience", "+=", "1", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"Dev Has Not Promote {} / {}\"", ".", "format", "(", "self", ".", "best_score", ".", "early_current_patience", ",", "self", ".", "early_max_patience", ")", ")", "\n", "if", "self", ".", "best_score", ".", "early_current_patience", ">=", "self", ".", "early_max_patience", ":", "\n", "                ", "self", ".", "end_of_epoch", "=", "epoch", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"\\n\\nEarly Stop Train. Best Score Locate on {} Epoch.\"", ".", "format", "(", "self", ".", "best_score", ".", "best_epoch", ")", ")", "\n", "self", ".", "save_training_summary", "(", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._get_model_args": [[103, 111], ["None"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "_get_model_args", "(", "batch_features", ")", ":", "\n", "\n", "        ", "word", "=", "batch_features", ".", "word_features", "\n", "mask", "=", "word", ">", "0", "\n", "sentence_length", "=", "batch_features", ".", "sentence_length", "\n", "tags", "=", "batch_features", ".", "label_features", "\n", "return", "word", ",", "mask", ",", "sentence_length", ",", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._calculate_loss": [[112, 125], ["feats.view", "tags.view.view.view", "trainPOS.Train.loss_function", "trainPOS.Train.loss_function", "feats.size", "float", "feats.size", "feats.size"], "methods", ["None"], ["", "def", "_calculate_loss", "(", "self", ",", "feats", ",", "mask", ",", "tags", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "use_crf", ":", "\n", "            ", "batch_size", ",", "max_len", "=", "feats", ".", "size", "(", "0", ")", ",", "feats", ".", "size", "(", "1", ")", "\n", "lstm_feats", "=", "feats", ".", "view", "(", "batch_size", "*", "max_len", ",", "-", "1", ")", "\n", "tags", "=", "tags", ".", "view", "(", "-", "1", ")", "\n", "return", "self", ".", "loss_function", "(", "lstm_feats", ",", "tags", ")", "\n", "", "else", ":", "\n", "            ", "loss_value", "=", "self", ".", "loss_function", "(", "feats", ",", "mask", ",", "tags", ")", "\n", "", "if", "self", ".", "average_batch", ":", "\n", "            ", "batch_size", "=", "feats", ".", "size", "(", "0", ")", "\n", "loss_value", "/=", "float", "(", "batch_size", ")", "\n", "", "return", "loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.train": [[126, 171], ["trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "range", "trainPOS.Train.save_training_summary", "trainPOS.Train.config.logger.info", "trainPOS.Train._decay_learning_rate", "trainPOS.Train.config.logger.info", "time.time", "random.shuffle", "trainPOS.Train.model.train", "trainPOS.Train.optimizer.zero_grad", "trainPOS.Train.config.logger.info", "enumerate", "time.time", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.eval", "trainPOS.Train.config.logger.info", "trainPOS.Train._model2file", "trainPOS.Train._early_stop", "trainPOS.Train.config.logger.info", "len", "trainPOS.Train._get_model_args", "trainPOS.Train.model", "trainPOS.Train._calculate_loss", "trainPOS.Train.backward", "trainPOS.Train._clip_model_norm", "trainPOS.Train._optimizer_batch_step", "trainPOS.Train.optimizer.param_groups[].get", "trainPOS.Train.getAcc", "trainPOS.Train.config.logger.info", "trainPOS.Train.item", "trainPOS.Train.train_eval.acc"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.save_training_summary", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._decay_learning_rate", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.shuffle", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.train", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Optim.Optimizer.zero_grad", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._model2file", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._early_stop", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference._get_model_args", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._calculate_loss", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._clip_model_norm", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._optimizer_batch_step", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.getAcc", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "epochs", "=", "self", ".", "config", ".", "epochs", "\n", "clip_max_norm_use", "=", "self", ".", "config", ".", "clip_max_norm_use", "\n", "clip_max_norm", "=", "self", ".", "config", ".", "clip_max_norm", "\n", "new_lr", "=", "self", ".", "config", ".", "learning_rate", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'\\n\\n'", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "50", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'batch number: %d'", "%", "len", "(", "self", ".", "train_iter", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "epochs", "+", "1", ")", ":", "\n", "            ", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\n\\n### Epoch: {}/{} ###\"", ".", "format", "(", "epoch", ",", "epochs", ")", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "_decay_learning_rate", "(", "epoch", "=", "epoch", "-", "1", ",", "init_lr", "=", "self", ".", "config", ".", "learning_rate", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"current lr: {}\"", ".", "format", "(", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", ".", "get", "(", "\"lr\"", ")", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "train_iter", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "steps", "=", "1", "\n", "backward_count", "=", "0", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "10", ")", "\n", "for", "batch_count", ",", "batch_features", "in", "enumerate", "(", "self", ".", "train_iter", ")", ":", "\n", "                ", "backward_count", "+=", "1", "\n", "word", ",", "mask", ",", "sentence_length", ",", "tags", "=", "self", ".", "_get_model_args", "(", "batch_features", ")", "\n", "logit", "=", "self", ".", "model", "(", "word", ",", "sentence_length", ",", "train", "=", "True", ")", "\n", "loss", "=", "self", ".", "_calculate_loss", "(", "logit", ",", "mask", ",", "tags", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "_clip_model_norm", "(", "clip_max_norm_use", ",", "clip_max_norm", ")", "\n", "self", ".", "_optimizer_batch_step", "(", "config", "=", "self", ".", "config", ",", "backward_count", "=", "backward_count", ")", "\n", "steps", "+=", "1", "\n", "if", "(", "steps", "-", "1", ")", "%", "self", ".", "config", ".", "log_interval", "==", "0", ":", "\n", "                    ", "self", ".", "getAcc", "(", "self", ".", "train_eval", ",", "batch_features", ",", "logit", ",", "self", ".", "config", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"batch_count:{} , loss: {:.4f}, [TAG-ACC: {:.4f}%]\"", ".", "format", "(", "batch_count", "+", "1", ",", "\n", "loss", ".", "item", "(", ")", ",", "\n", "self", ".", "train_eval", ".", "acc", "(", ")", ")", ")", "\n", "", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Train Time {:.3f}\"", ".", "format", "(", "end_time", "-", "start_time", ")", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "10", ")", "\n", "self", ".", "eval", "(", "model", "=", "self", ".", "model", ",", "epoch", "=", "epoch", ",", "config", "=", "self", ".", "config", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "10", ")", "\n", "self", ".", "_model2file", "(", "model", "=", "self", ".", "model", ",", "config", "=", "self", ".", "config", ",", "epoch", "=", "epoch", ")", "\n", "self", ".", "_early_stop", "(", "epoch", "=", "epoch", ",", "config", "=", "self", ".", "config", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "15", ")", "\n", "", "self", ".", "save_training_summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.save_training_summary": [[172, 210], ["trainPOS.Train.config.logger.info", "shutil.copytree", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "os.path.dirname", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "len"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "save_training_summary", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Copy the last model ckps to {} as backup.\"", ".", "format", "(", "self", ".", "config", ".", "save_dir", ")", ")", "\n", "shutil", ".", "copytree", "(", "self", ".", "config", ".", "save_model_dir", ",", "\n", "\"/\"", ".", "join", "(", "[", "self", ".", "config", ".", "save_dir", ",", "self", ".", "config", ".", "save_model_dir", "+", "\"_bak\"", "]", ")", ")", "\n", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"save the training summary at end of the log file.\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\n\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*\"", "*", "25", ")", "\n", "\n", "par_path", "=", "os", ".", "path", ".", "dirname", "(", "self", ".", "config", ".", "train_file", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"dataset:\\n\\t %s\"", "%", "par_path", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\ttrain set count: %d\"", "%", "self", ".", "config", ".", "train_cnt", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\tdev set count: %d\"", "%", "self", ".", "config", ".", "dev_cnt", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\ttest set count: %d\"", "%", "self", ".", "config", ".", "test_cnt", ")", "\n", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*\"", "*", "10", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"model:\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "self", ".", "model", ")", "\n", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*\"", "*", "10", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"training:\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'\\tbatch size: %d'", "%", "self", ".", "config", ".", "batch_size", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'\\tbatch count: %d'", "%", "len", "(", "self", ".", "train_iter", ")", ")", "\n", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*\"", "*", "10", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"best performance:\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\tend at epoch: %d\"", "%", "self", ".", "end_of_epoch", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\tbest at epoch: %d\"", "%", "self", ".", "best_score", ".", "best_epoch", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\tdev(%):\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\t\\tprecision, %.5f\"", "%", "self", ".", "best_score", ".", "best_dev_p_score", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\t\\trecall, %.5f\"", "%", "self", ".", "best_score", ".", "best_dev_r_score", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\t\\tf1, %.5f\"", "%", "self", ".", "best_score", ".", "best_dev_f1_score", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\ttest(%):\"", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\t\\tprecision, %.5f\"", "%", "self", ".", "best_score", ".", "p", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\t\\trecall, %.5f\"", "%", "self", ".", "best_score", ".", "r", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\t\\tf1, %.5f\"", "%", "self", ".", "best_score", ".", "f", ")", "\n", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"*\"", "*", "25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval": [[211, 225], ["trainPOS.Train.dev_eval.clear_PRF", "time.time", "trainPOS.Train.eval_batch", "time.time", "trainPOS.Train.config.logger.info", "trainPOS.Train.config.logger.info", "trainPOS.Train.test_eval.clear_PRF", "time.time", "trainPOS.Train.eval_batch", "time.time", "trainPOS.Train.config.logger.info"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.clear_PRF", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval_batch", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.clear_PRF", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval_batch", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "eval", "(", "self", ",", "model", ",", "epoch", ",", "config", ")", ":", "\n", "\n", "        ", "self", ".", "dev_eval", ".", "clear_PRF", "(", ")", "\n", "eval_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "eval_batch", "(", "self", ".", "dev_iter", ",", "model", ",", "self", ".", "dev_eval", ",", "self", ".", "best_score", ",", "epoch", ",", "config", ",", "test", "=", "False", ")", "\n", "eval_end_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Dev Time: {:.3f}\"", ".", "format", "(", "eval_end_time", "-", "eval_start_time", ")", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "10", ")", "\n", "\n", "self", ".", "test_eval", ".", "clear_PRF", "(", ")", "\n", "eval_start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "eval_batch", "(", "self", ".", "test_iter", ",", "model", ",", "self", ".", "test_eval", ",", "self", ".", "best_score", ",", "epoch", ",", "config", ",", "test", "=", "True", ")", "\n", "eval_end_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"Test Time: {:.3f}\"", ".", "format", "(", "eval_end_time", "-", "eval_start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train._model2file": [[226, 234], ["DataUtils.utils.save_model_all", "DataUtils.utils.save_best_model", "trainPOS.Train.config.logger.info"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.save_model_all", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.save_best_model", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "_model2file", "(", "self", ",", "model", ",", "config", ",", "epoch", ")", ":", "\n", "\n", "        ", "if", "config", ".", "save_model", "and", "config", ".", "save_all_model", ":", "\n", "            ", "save_model_all", "(", "model", ",", "config", ",", "config", ".", "save_model_dir", ",", "config", ".", "model_name", ",", "epoch", ")", "\n", "", "elif", "config", ".", "save_model", "and", "config", ".", "save_best_model", ":", "\n", "            ", "save_best_model", "(", "model", ",", "config", ",", "config", ".", "save_model_dir", ",", "config", ".", "model_name", ",", "self", ".", "best_score", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "config", ".", "logger", ".", "info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval_batch": [[235, 309], ["model.eval", "DataUtils.eval.EvalPRF", "zip", "sum", "zip", "eval_instance.getFscore", "trainPOS.Train.config.logger.info", "trainPOS.Train._get_model_args", "model", "DataUtils.eval.EvalPRF.evalPRF", "zip", "trainPOS.Train.config.logger.info", "DataUtils.utils.torch_max", "range", "model.crf_layer", "range", "len", "trainPOS.Train.config.logger.info", "range", "gold_labels.append", "predict_labels.append", "gold_labels.append", "predict_labels.append", "predict_label.append", "best_paths[].cpu().data.numpy", "label.append", "config.create_alphabet.label_alphabet.from_id", "config.create_alphabet.label_alphabet.from_id", "int", "best_paths[].cpu"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.getFscore", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference._get_model_args", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.torch_max", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_id", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_id"], ["", "", "def", "eval_batch", "(", "self", ",", "data_iter", ",", "model", ",", "eval_instance", ",", "best_score", ",", "epoch", ",", "config", ",", "test", "=", "False", ")", ":", "\n", "\n", "        ", "test_flag", "=", "\"Test\"", "\n", "if", "test", "is", "False", ":", "# dev", "\n", "            ", "test_flag", "=", "\"Dev\"", "\n", "\n", "", "model", ".", "eval", "(", ")", "# set flag for pytorch", "\n", "eval_PRF", "=", "EvalPRF", "(", ")", "\n", "gold_labels", "=", "[", "]", "\n", "predict_labels", "=", "[", "]", "\n", "for", "batch_features", "in", "data_iter", ":", "\n", "            ", "word", ",", "mask", ",", "sentence_length", ",", "tags", "=", "self", ".", "_get_model_args", "(", "batch_features", ")", "\n", "logit", "=", "model", "(", "word", ",", "sentence_length", ",", "train", "=", "False", ")", "\n", "\n", "if", "self", ".", "use_crf", "is", "False", ":", "\n", "                ", "predict_ids", "=", "torch_max", "(", "logit", ")", "\n", "for", "id_batch", "in", "range", "(", "batch_features", ".", "batch_length", ")", ":", "\n", "                    ", "inst", "=", "batch_features", ".", "inst", "[", "id_batch", "]", "\n", "label_ids", "=", "predict_ids", "[", "id_batch", "]", "\n", "predict_label", "=", "[", "]", "\n", "for", "id_word", "in", "range", "(", "inst", ".", "words_size", ")", ":", "\n", "                        ", "predict_label", ".", "append", "(", "config", ".", "create_alphabet", ".", "label_alphabet", ".", "from_id", "(", "label_ids", "[", "id_word", "]", ")", ")", "\n", "", "gold_labels", ".", "append", "(", "inst", ".", "labels", ")", "\n", "predict_labels", ".", "append", "(", "predict_label", ")", "\n", "", "", "else", ":", "\n", "                ", "path_score", ",", "best_paths", "=", "model", ".", "crf_layer", "(", "logit", ",", "mask", ")", "\n", "for", "id_batch", "in", "range", "(", "batch_features", ".", "batch_length", ")", ":", "\n", "                    ", "inst", "=", "batch_features", ".", "inst", "[", "id_batch", "]", "\n", "gold_labels", ".", "append", "(", "inst", ".", "labels", ")", "\n", "label_ids", "=", "best_paths", "[", "id_batch", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", "inst", ".", "words_size", "]", "\n", "label", "=", "[", "]", "\n", "for", "i", "in", "label_ids", ":", "\n", "# self.config.logger.info(\"\\n\", i)", "\n", "                        ", "label", ".", "append", "(", "config", ".", "create_alphabet", ".", "label_alphabet", ".", "from_id", "(", "int", "(", "i", ")", ")", ")", "\n", "", "predict_labels", ".", "append", "(", "label", ")", "\n", "\n", "", "", "", "for", "p_label", ",", "g_label", "in", "zip", "(", "predict_labels", ",", "gold_labels", ")", ":", "\n", "            ", "eval_PRF", ".", "evalPRF", "(", "predict_labels", "=", "p_label", ",", "gold_labels", "=", "g_label", ",", "eval", "=", "eval_instance", ")", "\n", "\n", "", "cor", "=", "0", "\n", "totol_leng", "=", "sum", "(", "[", "len", "(", "predict_label", ")", "for", "predict_label", "in", "predict_labels", "]", ")", "\n", "for", "p_lable", ",", "g_lable", "in", "zip", "(", "predict_labels", ",", "gold_labels", ")", ":", "\n", "            ", "for", "p_lable_", ",", "g_lable_", "in", "zip", "(", "p_lable", ",", "g_lable", ")", ":", "\n", "                ", "if", "p_lable_", "==", "g_lable_", ":", "\n", "                    ", "cor", "+=", "1", "\n", "", "", "", "acc_", "=", "cor", "/", "totol_leng", "*", "100", "\n", "\n", "p", ",", "r", ",", "f", "=", "eval_instance", ".", "getFscore", "(", ")", "\n", "\n", "if", "test", "is", "False", ":", "# dev", "\n", "            ", "best_score", ".", "current_dev_score", "=", "f", "\n", "if", "f", ">=", "best_score", ".", "best_dev_f1_score", ":", "\n", "                ", "best_score", ".", "best_dev_f1_score", "=", "f", "\n", "best_score", ".", "best_dev_p_score", "=", "p", "\n", "best_score", ".", "best_dev_r_score", "=", "r", "\n", "best_score", ".", "best_epoch", "=", "epoch", "\n", "best_score", ".", "best_test", "=", "True", "\n", "", "", "if", "test", "is", "True", "and", "best_score", ".", "best_test", "is", "True", ":", "# test", "\n", "            ", "best_score", ".", "p", "=", "p", "\n", "best_score", ".", "r", "=", "r", "\n", "best_score", ".", "f", "=", "f", "\n", "", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"{} at current epoch, precision: {:.4f}%  recall: {:.4f}% , f-score: {:.4f}%,  [TAG-ACC: {:.3f}%]\"", ".", "format", "(", "\n", "test_flag", ",", "p", ",", "r", ",", "f", ",", "acc_", ")", ")", "\n", "if", "test", "is", "False", ":", "\n", "            ", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"Till now, The Best Dev Result: precision: {:.4f}%  recall: {:.4f}% , f-score: {:.4f}%, Locate on {} Epoch.\"", ".", "format", "(", "\n", "best_score", ".", "best_dev_p_score", ",", "best_score", ".", "best_dev_r_score", ",", "best_score", ".", "best_dev_f1_score", ",", "\n", "best_score", ".", "best_epoch", ")", ")", "\n", "", "elif", "test", "is", "True", ":", "\n", "            ", "self", ".", "config", ".", "logger", ".", "info", "(", "\n", "\"Till now, The Best Test Result: precision: {:.4f}%  recall: {:.4f}% , f-score: {:.4f}%, Locate on {} Epoch.\"", ".", "format", "(", "\n", "best_score", ".", "p", ",", "best_score", ".", "r", ",", "best_score", ".", "f", ",", "best_score", ".", "best_epoch", ")", ")", "\n", "best_score", ".", "best_test", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.getAcc": [[310, 329], ["eval_acc.clear_PRF", "DataUtils.utils.torch_max", "range", "range", "zip", "len", "predict_label.append", "len", "len", "config.create_alphabet.label_alphabet.from_id"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.eval.Eval.clear_PRF", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.torch_max", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_id"], ["", "", "@", "staticmethod", "\n", "def", "getAcc", "(", "eval_acc", ",", "batch_features", ",", "logit", ",", "config", ")", ":", "\n", "\n", "        ", "eval_acc", ".", "clear_PRF", "(", ")", "\n", "predict_ids", "=", "torch_max", "(", "logit", ")", "\n", "for", "id_batch", "in", "range", "(", "batch_features", ".", "batch_length", ")", ":", "\n", "            ", "inst", "=", "batch_features", ".", "inst", "[", "id_batch", "]", "\n", "label_ids", "=", "predict_ids", "[", "id_batch", "]", "\n", "predict_label", "=", "[", "]", "\n", "gold_lable", "=", "inst", ".", "labels", "\n", "for", "id_word", "in", "range", "(", "inst", ".", "words_size", ")", ":", "\n", "                ", "predict_label", ".", "append", "(", "config", ".", "create_alphabet", ".", "label_alphabet", ".", "from_id", "(", "label_ids", "[", "id_word", "]", ")", ")", "\n", "", "assert", "len", "(", "predict_label", ")", "==", "len", "(", "gold_lable", ")", "\n", "cor", "=", "0", "\n", "for", "p_lable", ",", "g_lable", "in", "zip", "(", "predict_label", ",", "gold_lable", ")", ":", "\n", "                ", "if", "p_lable", "==", "g_lable", ":", "\n", "                    ", "cor", "+=", "1", "\n", "", "", "eval_acc", ".", "correct_num", "+=", "cor", "\n", "eval_acc", ".", "gold_num", "+=", "len", "(", "gold_lable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.__init__": [[363, 375], ["config.logger.info"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "data", ",", "path_source", ",", "path_result", ",", "alphabet", ",", "use_crf", ",", "config", ")", ":", "\n", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "config", ".", "logger", ".", "info", "(", "\"Initialize T_Inference\"", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "path_source", "=", "path_source", "\n", "self", ".", "path_result", "=", "path_result", "\n", "self", ".", "alphabet", "=", "alphabet", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "use_crf", "=", "use_crf", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.infer2file": [[376, 407], ["trainPOS.Inference.config.logger.info", "trainPOS.Inference.config.logger.info", "trainPOS.Inference.config.logger.info", "trainPOS.Inference.model.eval", "len", "trainPOS.Inference.config.logger.info", "trainPOS.Inference.write2file", "trainPOS.Inference.config.logger.info", "trainPOS.Inference._get_model_args", "trainPOS.Inference.model", "DataUtils.utils.torch_max", "range", "trainPOS.Inference.model.crf_layer", "range", "range", "predict_label.append", "best_paths[].cpu().data.numpy", "predict_label.append", "trainPOS.Inference.alphabet.label_alphabet.from_id", "trainPOS.Inference.alphabet.label_alphabet.from_id", "best_paths[].cpu"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.eval", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.write2file", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference._get_model_args", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.utils.torch_max", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_id", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_id"], ["", "def", "infer2file", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "config", ".", "logger", ".", "info", "(", "'\\n\\n'", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "20", ")", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"infer.....\"", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "predict_label", "=", "[", "]", "\n", "all_count", "=", "len", "(", "self", ".", "data", ")", "\n", "now_count", "=", "0", "\n", "for", "data", "in", "self", ".", "data", ":", "\n", "            ", "now_count", "+=", "1", "\n", "self", ".", "config", ".", "logger", ".", "info", "(", "\"infer with batch number {}/{} .\"", ".", "format", "(", "now_count", ",", "all_count", ")", ")", "\n", "word", ",", "mask", ",", "sentence_length", ",", "tags", "=", "self", ".", "_get_model_args", "(", "data", ")", "\n", "logit", "=", "self", ".", "model", "(", "word", ",", "sentence_length", ",", "train", "=", "False", ")", "\n", "if", "self", ".", "use_crf", "is", "False", ":", "\n", "                ", "predict_ids", "=", "torch_max", "(", "logit", ")", "\n", "for", "id_batch", "in", "range", "(", "data", ".", "batch_length", ")", ":", "\n", "                    ", "inst", "=", "data", ".", "inst", "[", "id_batch", "]", "\n", "label_ids", "=", "predict_ids", "[", "id_batch", "]", "\n", "for", "id_word", "in", "range", "(", "inst", ".", "words_size", ")", ":", "\n", "                        ", "predict_label", ".", "append", "(", "self", ".", "alphabet", ".", "label_alphabet", ".", "from_id", "(", "label_ids", "[", "id_word", "]", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "path_score", ",", "best_paths", "=", "self", ".", "model", ".", "crf_layer", "(", "logit", ",", "mask", ")", "\n", "for", "id_batch", "in", "range", "(", "data", ".", "batch_length", ")", ":", "\n", "                    ", "inst", "=", "data", ".", "inst", "[", "id_batch", "]", "\n", "label_ids", "=", "best_paths", "[", "id_batch", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", "inst", ".", "words_size", "]", "\n", "for", "i", "in", "label_ids", ":", "\n", "                        ", "predict_label", ".", "append", "(", "self", ".", "alphabet", ".", "label_alphabet", ".", "from_id", "(", "i", ")", ")", "\n", "\n", "", "", "", "", "self", ".", "config", ".", "logger", ".", "info", "(", "\"\\ninfer finished.\"", ")", "\n", "self", ".", "write2file", "(", "self", ".", "config", ",", "result", "=", "predict_label", ",", "path_source", "=", "self", ".", "path_source", ",", "path_result", "=", "self", ".", "path_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.write2file": [[408, 434], ["config.logger.info", "config.logger.info", "config.logger.info", "os.path.exists", "open", "open.close", "config.logger.info", "os.path.exists", "config.logger.info", "os.remove", "open", "file.readlines", "line.strip().split.strip().split.strip().split", "line.strip().split.strip().split.append", "open.write", "open.write", "len", "line.strip().split.strip().split.strip"], "methods", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "@", "staticmethod", "\n", "def", "write2file", "(", "config", ",", "result", ",", "path_source", ",", "path_result", ")", ":", "\n", "\n", "        ", "config", ".", "logger", ".", "info", "(", "'\\n\\n'", ")", "\n", "config", ".", "logger", ".", "info", "(", "'=-'", "*", "20", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"write result to file {}\"", ".", "format", "(", "path_result", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path_source", ")", "is", "False", ":", "\n", "            ", "config", ".", "logger", ".", "info", "(", "\"source data path[path_source] is not exist.\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "path_result", ")", ":", "\n", "            ", "os", ".", "remove", "(", "path_result", ")", "\n", "", "file_out", "=", "open", "(", "path_result", ",", "encoding", "=", "\"UTF-8\"", ",", "mode", "=", "\"w\"", ")", "\n", "with", "open", "(", "path_source", ",", "encoding", "=", "\"UTF-8\"", ")", "as", "file", ":", "\n", "            ", "id", "=", "0", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "line", "==", "\"\\n\"", ":", "\n", "                    ", "file_out", ".", "write", "(", "\"\\n\"", ")", "\n", "continue", "\n", "", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "line", ".", "append", "(", "result", "[", "id", "]", ")", "\n", "id", "+=", "1", "\n", "file_out", ".", "write", "(", "\" \"", ".", "join", "(", "line", ")", "+", "\"\\n\"", ")", "\n", "if", "id", ">=", "len", "(", "result", ")", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "file_out", ".", "close", "(", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"\\nfinished.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference._get_model_args": [[435, 443], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_model_args", "(", "batch_features", ")", ":", "\n", "\n", "        ", "word", "=", "batch_features", ".", "word_features", "\n", "mask", "=", "word", ">", "0", "\n", "sentence_length", "=", "batch_features", ".", "sentence_length", "\n", "tags", "=", "batch_features", ".", "label_features", "\n", "return", "word", ",", "mask", ",", "sentence_length", ",", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.load_test_data": [[332, 359], ["config.logger.info", "config.logger.info", "config.logger.info", "config.logger.info", "config.logger.info", "exit"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "", "", "def", "load_test_data", "(", "train_iter", "=", "None", ",", "dev_iter", "=", "None", ",", "test_iter", "=", "None", ",", "config", "=", "None", ")", ":", "\n", "\n", "    ", "data", ",", "path_source", ",", "path_result", "=", "None", ",", "None", ",", "None", "\n", "if", "config", ".", "t_data", "is", "None", ":", "\n", "        ", "config", ".", "logger", ".", "info", "(", "\"default[test] for model test.\"", ")", "\n", "data", "=", "test_iter", "\n", "path_source", "=", "\".\"", ".", "join", "(", "[", "config", ".", "test_file", ",", "shuffle", "]", ")", "\n", "path_result", "=", "\"{}.out\"", ".", "format", "(", "path_source", ")", "\n", "", "elif", "config", ".", "t_data", "==", "\"train\"", ":", "\n", "        ", "config", ".", "logger", ".", "info", "(", "\"train data for model test.\"", ")", "\n", "data", "=", "train_iter", "\n", "path_source", "=", "\".\"", ".", "join", "(", "[", "config", ".", "train_file", ",", "shuffle", "]", ")", "\n", "path_result", "=", "\"{}.out\"", ".", "format", "(", "path_source", ")", "\n", "", "elif", "config", ".", "t_data", "==", "\"dev\"", ":", "\n", "        ", "config", ".", "logger", ".", "info", "(", "\"dev data for model test.\"", ")", "\n", "data", "=", "dev_iter", "\n", "path_source", "=", "\".\"", ".", "join", "(", "[", "config", ".", "dev_file", ",", "shuffle", "]", ")", "\n", "path_result", "=", "\"{}.out\"", ".", "format", "(", "path_source", ")", "\n", "", "elif", "config", ".", "t_data", "==", "\"test\"", ":", "\n", "        ", "config", ".", "logger", ".", "info", "(", "\"test data for model test.\"", ")", "\n", "data", "=", "test_iter", "\n", "path_source", "=", "\".\"", ".", "join", "(", "[", "config", ".", "test_file", ",", "shuffle", "]", ")", "\n", "path_result", "=", "\"{}.out\"", ".", "format", "(", "path_source", ")", "\n", "", "else", ":", "\n", "        ", "config", ".", "logger", ".", "info", "(", "\"Error value --- t_data = {}, must in [None, 'train', 'dev', 'test'].\"", ".", "format", "(", "config", ".", "t_data", ")", ")", "\n", "exit", "(", ")", "\n", "", "return", "data", ",", "path_source", ",", "path_result", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.start_train": [[445, 450], ["trainPOS.Train", "trainPOS.Train.train", "config.logger.info"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Train.train", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "", "def", "start_train", "(", "train_iter", ",", "dev_iter", ",", "test_iter", ",", "model", ",", "config", ")", ":", "\n", "\n", "    ", "t", "=", "Train", "(", "train_iter", "=", "train_iter", ",", "dev_iter", "=", "dev_iter", ",", "test_iter", "=", "test_iter", ",", "model", "=", "model", ",", "config", "=", "config", ")", "\n", "t", ".", "train", "(", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"Finish Train.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.start_test": [[452, 460], ["config.logger.info", "trainPOS.load_test_data", "trainPOS.Inference", "trainPOS.Inference.infer2file", "config.logger.info"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.load_test_data", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.Inference.infer2file", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "start_test", "(", "train_iter", ",", "dev_iter", ",", "test_iter", ",", "model", ",", "alphabet", ",", "config", ")", ":", "\n", "\n", "    ", "config", ".", "logger", ".", "info", "(", "\"\\nTesting Start......\"", ")", "\n", "data", ",", "path_source", ",", "path_result", "=", "load_test_data", "(", "train_iter", ",", "dev_iter", ",", "test_iter", ",", "config", ")", "\n", "infer", "=", "Inference", "(", "model", "=", "model", ",", "data", "=", "data", ",", "path_source", "=", "path_source", ",", "path_result", "=", "path_result", ",", "alphabet", "=", "alphabet", ",", "\n", "use_crf", "=", "config", ".", "use_crf", ",", "config", "=", "config", ")", "\n", "infer", ".", "infer2file", "(", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"Finished Test.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.main": [[462, 480], ["DataUtils.mainHelp.load_data", "DataUtils.mainHelp.get_params", "DataUtils.mainHelp.save_dictionary", "DataUtils.mainHelp.load_model", "os.path.exists", "os.mkdir", "trainPOS.start_train", "exit", "trainPOS.start_test", "exit"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.load_data", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.get_params", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.save_dictionary", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.load_model", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.start_train", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.start_test"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "save_model_dir", ")", ":", "os", ".", "mkdir", "(", "config", ".", "save_model_dir", ")", "\n", "\n", "train_iter", ",", "dev_iter", ",", "test_iter", ",", "alphabet", "=", "load_data", "(", "config", "=", "config", ")", "\n", "\n", "get_params", "(", "config", "=", "config", ",", "alphabet", "=", "alphabet", ")", "\n", "\n", "save_dictionary", "(", "config", "=", "config", ")", "\n", "\n", "model", "=", "load_model", "(", "config", ")", "\n", "\n", "if", "config", ".", "mode", "==", "'train'", ":", "\n", "        ", "start_train", "(", "train_iter", ",", "dev_iter", ",", "test_iter", ",", "model", ",", "config", ")", "\n", "exit", "(", ")", "\n", "", "elif", "config", ".", "mode", "==", "'test'", ":", "\n", "        ", "start_test", "(", "train_iter", ",", "dev_iter", ",", "test_iter", ",", "model", ",", "alphabet", ",", "config", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.get_logger": [[482, 500], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler"], "function", ["None"], ["", "", "def", "get_logger", "(", "log_dir", ")", ":", "\n", "    ", "log_file", "=", "log_dir", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(message)s'", ")", "\n", "\n", "handler", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "console", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.parse_argument": [[502, 523], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "Config.Configurable", "datetime.datetime.now().strftime", "os.path.join", "os.path.join", "trainPOS.get_logger", "configurable.Configurable.train_file.split", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.join", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.get_logger"], ["", "def", "parse_argument", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"POS tagging\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "\"--config\"", ",", "dest", "=", "\"config_file\"", ",", "type", "=", "str", ",", "default", "=", "\"./Config/config.cfg\"", ",", "\n", "help", "=", "\"config path\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", "=", "configurable", ".", "Configurable", "(", "config_file", "=", "args", ".", "config_file", ")", "\n", "\n", "# save file", "\n", "config", ".", "mulu", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d_%H-%M-%S'", ")", "\n", "subset_name", "=", "config", ".", "train_file", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "subset_name_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "save_checkpoint", ",", "subset_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "subset_name_dir", ")", ":", "os", ".", "makedirs", "(", "subset_name_dir", ")", "\n", "\n", "config", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "subset_name_dir", ",", "config", ".", "mulu", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "config", ".", "save_dir", ")", ":", "os", ".", "makedirs", "(", "config", ".", "save_dir", ")", "\n", "\n", "logger", "=", "get_logger", "(", "os", ".", "path", ".", "join", "(", "config", ".", "save_dir", ",", "'system.log'", ")", ")", "\n", "config", ".", "logger", "=", "logger", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.trainPOS.set_cuda": [[525, 533], ["config.logger.info", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "config.logger.info", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "config.logger.info", "int", "torch.cuda.initial_seed", "torch.cuda.initial_seed", "torch.cuda.initial_seed", "torch.cuda.initial_seed", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "set_cuda", "(", ")", ":", "\n", "    ", "config", ".", "logger", ".", "info", "(", "\"\\nUsing GPU To Train......\"", ")", "\n", "device_number", "=", "config", ".", "device", "[", "-", "1", "]", "\n", "torch", ".", "cuda", ".", "set_device", "(", "int", "(", "device_number", ")", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"Current Cuda Device {}\"", ".", "format", "(", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed_num", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed_num", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"torch.cuda.initial_seed\"", ",", "torch", ".", "cuda", ".", "initial_seed", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.get_logger": [[22, 40], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler"], "function", ["None"], ["def", "get_logger", "(", "log_dir", ")", ":", "\n", "    ", "log_file", "=", "log_dir", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(message)s'", ")", "\n", "\n", "handler", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "console", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.parse_argument": [[42, 62], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "Config.Configurable", "datetime.datetime.now().strftime", "os.path.join", "os.path.join", "project.get_logger", "configurable.Configurable.train_file.split", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.join", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.get_logger"], ["", "def", "parse_argument", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"POS tagging\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "\"--config\"", ",", "dest", "=", "\"config_file\"", ",", "type", "=", "str", ",", "default", "=", "\"./Config/config.cfg\"", ",", "\n", "help", "=", "\"config path\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", "=", "configurable", ".", "Configurable", "(", "config_file", "=", "args", ".", "config_file", ")", "\n", "\n", "# save file", "\n", "config", ".", "mulu", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d_%H-%M-%S'", ")", "\n", "subset_name", "=", "config", ".", "train_file", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "subset_name_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "save_checkpoint", ",", "subset_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "subset_name_dir", ")", ":", "os", ".", "makedirs", "(", "subset_name_dir", ")", "\n", "\n", "config", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "subset_name_dir", ",", "config", ".", "mulu", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "config", ".", "save_dir", ")", ":", "os", ".", "makedirs", "(", "config", ".", "save_dir", ")", "\n", "\n", "logger", "=", "get_logger", "(", "os", ".", "path", ".", "join", "(", "config", ".", "save_dir", ",", "'system.log'", ")", ")", "\n", "config", ".", "logger", "=", "logger", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.load_meta_data": [[64, 73], ["config.logger.info", "time.time", "torch.load", "torch.load", "torch.load", "torch.load", "config.logger.info", "time.time", "torch.load.keys", "os.path.join"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "load_meta_data", "(", "config", ")", ":", "\n", "    ", "config", ".", "logger", ".", "info", "(", "\"load meta data for checkpoint file.\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# load alphabet from pkl", "\n", "alphabet_dict", "=", "torch", ".", "load", "(", "f", "=", "os", ".", "path", ".", "join", "(", "config", ".", "pkl_directory", ",", "config", ".", "pkl_alphabet", ")", ")", "\n", "config", ".", "logger", ".", "info", "(", "alphabet_dict", ".", "keys", "(", ")", ")", "\n", "alphabet", "=", "alphabet_dict", "[", "\"alphabet\"", "]", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "return", "alphabet", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.load_model": [[75, 98], ["config.logger.info", "Engines.SequenceLabeler.SequenceLabeler", "model.cuda.load_state_dict", "config.logger.info", "model.cuda.cuda", "os.path.join", "os.path.isfile", "config.logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "config.logger.info", "config.logger.info", "exit"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.BatchIterator.BatchFeatures.cuda", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Pickle.Pickle.load", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "load_model", "(", "config", ")", ":", "\n", "    ", "config", ".", "logger", ".", "info", "(", "\"***************************************\"", ")", "\n", "model", "=", "SequenceLabeler", "(", "config", ")", "\n", "if", "config", ".", "device", "!=", "cpu_device", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "if", "config", ".", "t_model", "is", "None", ":", "\n", "        ", "test_model_dir", "=", "config", ".", "save_model_dir", "\n", "test_model_name", "=", "\"{}.pt\"", ".", "format", "(", "config", ".", "model_name", ")", "\n", "test_model_path", "=", "os", ".", "path", ".", "join", "(", "test_model_dir", ",", "test_model_name", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "test_model_path", ")", ":", "\n", "            ", "config", ".", "logger", ".", "info", "(", "\"load default best model from {}\"", ".", "format", "(", "test_model_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "config", ".", "logger", ".", "info", "(", "\"please specify the pre-trained model\"", ")", "\n", "exit", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "test_model_path", "=", "config", ".", "t_model", "\n", "config", ".", "logger", ".", "info", "(", "\"load user model from {}\"", ".", "format", "(", "test_model_path", ")", ")", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "test_model_path", ")", ")", "\n", "\n", "config", ".", "logger", ".", "info", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.load_tagger": [[100, 106], ["project.load_meta_data", "DataUtils.mainHelp.get_params", "DataUtils.mainHelp.load_model", "config.logger.info"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.load_meta_data", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.mainHelp.get_params", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.load_model", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Embed.Embed.info"], ["", "def", "load_tagger", "(", "config", ")", ":", "\n", "    ", "alphabet", "=", "load_meta_data", "(", "config", ")", "\n", "get_params", "(", "config", "=", "config", ",", "alphabet", "=", "alphabet", ")", "\n", "model", "=", "load_model", "(", "config", ")", "\n", "config", ".", "logger", ".", "info", "(", "\"model loaded successfully......\"", ")", "\n", "return", "model", ",", "alphabet", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.load_parallel_data": [[108, 210], ["list", "list", "list", "list", "list", "enumerate", "list", "list", "list", "enumerate", "open", "f.readlines", "li.strip.strip", "open", "f.readlines", "enumerate", "np.full", "int", "range", "open", "f.readlines", "li.strip.strip", "list.append", "list", "list", "list", "li.strip.split", "cols[].strip", "cols[].strip", "cols[].strip", "list.append", "list.append", "list.append", "li.strip.strip", "line.split", "int", "range", "len", "len", "project.load_parallel_data.read_align"], "function", ["None"], ["", "def", "load_parallel_data", "(", "source_file_path", ",", "target_file_path", ",", "aligning_file_path", ")", ":", "\n", "    ", "with", "open", "(", "source_file_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "''' \n    Src: upb of conllu style\n    token\tlemma\tpos\tdep_head\tdep_lb\tis_predicate  predicate\targument\n    \n    Tgt:\n    token\n    '''", "\n", "source_dataset", "=", "list", "(", ")", "\n", "target_dataset", "=", "list", "(", ")", "\n", "text_new_line", "=", "list", "(", ")", "\n", "prd_new_line", "=", "list", "(", ")", "\n", "arg_new_line", "=", "list", "(", ")", "\n", "\n", "for", "index", ",", "li", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "if", "index", "==", "0", ":", "continue", "\n", "li", "=", "li", ".", "strip", "(", ")", "\n", "if", "li", "==", "''", ":", "\n", "            ", "source_dataset", ".", "append", "(", "(", "text_new_line", ",", "prd_new_line", ",", "arg_new_line", ")", ")", "\n", "text_new_line", "=", "list", "(", ")", "\n", "prd_new_line", "=", "list", "(", ")", "\n", "arg_new_line", "=", "list", "(", ")", "\n", "", "else", ":", "\n", "            ", "cols", "=", "li", ".", "split", "(", "'\\t'", ")", "\n", "token", "=", "cols", "[", "0", "]", ".", "strip", "(", ")", "\n", "predicate", "=", "cols", "[", "5", "]", ".", "strip", "(", ")", "\n", "argument", "=", "cols", "[", "6", "]", ".", "strip", "(", ")", "\n", "\n", "text_new_line", ".", "append", "(", "token", ")", "\n", "prd_new_line", ".", "append", "(", "predicate", ")", "\n", "arg_new_line", ".", "append", "(", "argument", ")", "\n", "\n", "# print('length of %s: %i' % (mode, len(dataset)))", "\n", "\n", "# --------", "\n", "", "", "text_new_line", "=", "list", "(", ")", "\n", "\n", "with", "open", "(", "target_file_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "for", "index", ",", "li", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "continue", "\n", "li", "=", "li", ".", "strip", "(", ")", "\n", "if", "li", "==", "''", ":", "\n", "                ", "target_dataset", ".", "append", "(", "text_new_line", ")", "\n", "text_new_line", "=", "list", "(", ")", "\n", "", "else", ":", "\n", "                ", "cols", "=", "li", ".", "split", "(", "'\\t'", ")", "\n", "token", "=", "cols", "[", "0", "]", ".", "strip", "(", ")", "\n", "text_new_line", ".", "append", "(", "token", ")", "\n", "\n", "# --------", "\n", "### core aligning probabilities", "\n", "", "", "", "def", "read_align", "(", "aligning_sentence", ",", "src_len", ",", "tgt_len", ")", ":", "\n", "        ", "align_probs", "=", "np", ".", "full", "(", "(", "tgt_len", ",", "src_len", ")", ",", "0.0", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "index", "=", "int", "(", "0", ")", "\n", "# while index < tgt_len:", "\n", "for", "line", "in", "aligning_sentence", ":", "\n", "            ", "content_pieces", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "content_index", "=", "int", "(", "content_pieces", "[", "0", "]", ")", "\n", "if", "content_index", "!=", "index", ":", "\n", "                ", "raise", "Exception", "(", "'align file error: content_index %d, actual_index %d'", "%", "(", "content_index", ",", "index", ")", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "len", "(", "content_pieces", ")", "-", "1", ")", ":", "\n", "                ", "atom_values", "=", "content_pieces", "[", "i", "]", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "atom_values", ")", "!=", "2", ":", "\n", "                    ", "raise", "Exception", "(", "'invalid source index and prob: '", "+", "content_pieces", "[", "i", "]", ")", "\n", "", "src_index", "=", "int", "(", "atom_values", "[", "0", "]", ")", "\n", "src_prob", "=", "float", "(", "atom_values", "[", "1", "]", ")", "\n", "if", "src_index", "==", "-", "1", ":", "\n", "                    ", "src_index", "=", "src_len", "\n", "", "align_probs", "[", "index", ",", "src_index", "]", "=", "src_prob", "\n", "", "index", "=", "index", "+", "1", "\n", "\n", "", "for", "index", "in", "range", "(", "1", ",", "tgt_len", ")", ":", "\n", "            ", "align_probs", "[", "index", ",", "0", "]", "=", "-", "1.0", "\n", "\n", "", "return", "align_probs", "\n", "\n", "\n", "", "aligning_probs_sentences", "=", "list", "(", ")", "\n", "aligning_sentence", "=", "list", "(", ")", "\n", "with", "open", "(", "aligning_file_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "for", "index", ",", "li", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "li", "=", "li", ".", "strip", "(", ")", "\n", "if", "li", "==", "''", ":", "\n", "# aligning_sentences.append(aligning_sentence)", "\n", "            ", "src_len", "=", "len", "(", "source_dataset", "[", "index", "]", ")", "\n", "tgt_len", "=", "len", "(", "target_dataset", "[", "index", "]", ")", "\n", "if", "tgt_len", "!=", "len", "(", "aligning_sentence", ")", ":", "raise", "Exception", "(", "'bad alignment error! aligned length does not equal to target setence.'", ")", "\n", "align_probs", "=", "read_align", "(", "aligning_sentence", ",", "src_len", ",", "tgt_len", ")", "\n", "aligning_probs_sentences", ".", "append", "(", "align_probs", ")", "\n", "\n", "aligning_sentence", "=", "list", "(", ")", "\n", "", "else", ":", "\n", "            ", "aligning_sentence", ".", "append", "(", "li", ")", "\n", "\n", "", "", "return", "aligning_probs_sentences", ",", "source_dataset", ",", "target_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.infer_prob": [[215, 235], ["len", "np.zeros", "range", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "tagger", "torch.softmax", "torch.max", "torch.max", "torch.max", "torch.max", "values[].cpu().data.numpy", "alphabet.word_alphabet.from_string", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "values[].cpu"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Config.config.Configurable.zeros", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.DataUtils.Alphabet.Alphabet.from_string"], ["def", "infer_prob", "(", "tagger", ",", "alphabet", ",", "text_new_line", ")", ":", "\n", "# create instanace", "\n", "    ", "words_size", "=", "len", "(", "text_new_line", ")", "\n", "word_features", "=", "np", ".", "zeros", "(", "(", "1", ",", "words_size", ")", ")", "\n", "for", "index", "in", "range", "(", "words_size", ")", ":", "\n", "        ", "word", "=", "text_new_line", "[", "index", "]", "\n", "wordId", "=", "alphabet", ".", "word_alphabet", ".", "from_string", "(", "word", ")", "\n", "if", "wordId", "==", "-", "1", ":", "wordId", "=", "alphabet", ".", "word_unkId", "# if wordID is None:", "\n", "word_features", "[", "0", "]", "[", "index", "]", "=", "wordId", "\n", "", "mask", "=", "word_features", ">", "0", "\n", "sentence_length", "=", "words_size", "\n", "batch_word_features", "=", "torch", ".", "from_numpy", "(", "word_features", ")", ".", "long", "(", ")", "\n", "\n", "logit", "=", "tagger", "(", "batch_word_features", ",", "sentence_length", ",", "train", "=", "False", ")", "\n", "output", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "values", ",", "arg_max", "=", "torch", ".", "max", "(", "output", ",", "dim", "=", "2", ")", "\n", "pos_probs", "=", "values", "[", "0", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "# tagger.infer_prob()", "\n", "return", "pos_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.projecting": [[237, 338], ["len", "zip", "project.infer_prob", "np.argmax", "range", "tgt_alignment_dict.keys", "tgt_alignment_dict.keys", "tgt_alignment_dict.keys", "pseudo_target_dataset.append", "print", "len", "zip", "zip", "zip", "zip", "len", "len", "range", "range", "range", "range", "tgt_alignment_dict[].append", "set", "set", "len", "tgt_alignment_dict.pop", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.infer_prob"], ["", "def", "projecting", "(", "source_dataset", ",", "target_dataset", ",", "align_probs", ",", "tagger", ",", "alphabet", ",", "config", ")", ":", "\n", "    ", "sucess", "=", "0", "\n", "all_cnt", "=", "len", "(", "source_dataset", ")", "\n", "pseudo_target_dataset", "=", "[", "]", "\n", "\n", "index", "=", "0", "\n", "for", "src_sentence", ",", "tgt_sentence", ",", "align_prob", "in", "zip", "(", "source_dataset", ",", "target_dataset", ",", "align_probs", ")", ":", "\n", "\n", "        ", "text_new_line", ",", "prd_new_line", ",", "arg_new_line", "=", "src_sentence", "\n", "\n", "# POS prob", "\n", "pos_probs", "=", "infer_prob", "(", "tagger", ",", "alphabet", ",", "tgt_sentence", ")", "\n", "\n", "\n", "# prd, arg labels at src side", "\n", "src_prd_indexs", "=", "[", "ind", "for", "ind", ",", "item", ",", "tk", "in", "zip", "(", "range", "(", "len", "(", "prd_new_line", ")", ")", ",", "prd_new_line", ",", "text_new_line", ")", "if", "\n", "item", "!=", "'_'", "]", "\n", "src_prd_labels", "=", "[", "item", "for", "item", ",", "tk", "in", "zip", "(", "prd_new_line", ",", "text_new_line", ")", "]", "# if item != '_']", "\n", "\n", "src_arg_indexs", "=", "[", "ind", "for", "ind", ",", "item", ",", "tk", "in", "zip", "(", "range", "(", "len", "(", "prd_new_line", ")", ")", ",", "arg_new_line", ",", "text_new_line", ")", "if", "\n", "item", "!=", "'_'", "]", "\n", "src_arg_labels", "=", "[", "item", "for", "item", ",", "tk", "in", "zip", "(", "arg_new_line", ",", "text_new_line", ")", "]", "# if item != '_']", "\n", "\n", "\n", "src_alignment_dict", "=", "{", "}", "\n", "tgt_alignment_dict", "=", "{", "}", "\n", "\n", "# get confidence scores", "\n", "max_src_alignment", "=", "np", ".", "argmax", "(", "align_prob", ",", "axis", "=", "0", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "prd_new_line", ")", ")", ":", "\n", "            ", "if", "ind", "in", "src_prd_indexs", "or", "ind", "in", "src_arg_indexs", ":", "\n", "                ", "max_tgt_index", "=", "max_src_alignment", "[", "ind", "]", "\n", "src_alignment_dict", "[", "ind", "]", "=", "(", "max_tgt_index", ",", "align_prob", "[", "max_tgt_index", "]", "[", "ind", "]", "*", "pos_probs", "[", "max_tgt_index", "]", ")", "\n", "if", "max_tgt_index", "not", "in", "tgt_alignment_dict", ":", "\n", "                    ", "tgt_alignment_dict", "[", "max_tgt_index", "]", "=", "[", "ind", "]", "\n", "", "else", ":", "\n", "                    ", "tgt_alignment_dict", "[", "max_tgt_index", "]", ".", "append", "(", "ind", ")", "\n", "\n", "\n", "# handle collision, thereafter only one element in each list in tgt_alignment_dict. ", "\n", "", "", "", "for", "tgt_ind", "in", "tgt_alignment_dict", ".", "keys", "(", ")", ":", "\n", "            ", "src_prd_args", "=", "tgt_alignment_dict", "[", "tgt_ind", "]", "\n", "if", "len", "(", "src_prd_args", ")", ">", "1", ":", "\n", "                ", "intersect", "=", "set", "(", "src_prd_indexs", ")", "&", "set", "(", "src_prd_args", ")", "\n", "if", "len", "(", "intersect", ")", ">=", "1", ":", "#there prd for tgt_ind from src, and let it be", "\n", "                    ", "assert", "len", "(", "intersect", ")", "==", "1", "\n", "tgt_alignment_dict", "[", "tgt_ind", "]", "=", "intersect", "\n", "", "else", ":", "# no prd, solve the arg-arg collision", "\n", "                    ", "max_conf", "=", "-", "1", "\n", "best_src_", "=", "-", "1", "\n", "for", "src_", "in", "src_prd_args", ":", "\n", "                        ", "tgt_d_", ",", "confid_score", "=", "src_alignment_dict", "[", "src_", "]", "\n", "if", "confid_score", ">", "max_conf", ":", "max_conf", "=", "confid_score", ";", "best_src_", "=", "src_", "\n", "", "tgt_alignment_dict", "[", "tgt_ind", "]", "=", "[", "(", "max_conf", ",", "best_src_", ")", "]", "\n", "", "", "else", ":", "\n", "                ", "tgt_d_", ",", "confid_score", "=", "src_alignment_dict", "[", "src_prd_args", "[", "0", "]", "]", "\n", "tgt_alignment_dict", "[", "tgt_ind", "]", "=", "[", "(", "confid_score", ",", "src_prd_args", "[", "0", "]", ")", "]", "\n", "\n", "# handle other outliers:", "\n", "# 1) must at least and only with one prd, no limitation for args.", "\n", "# 2) p(prd), p(arg) > alpha,", "\n", "", "", "prd_cnt", "=", "0", "\n", "for", "tgt_ind", "in", "tgt_alignment_dict", ".", "keys", "(", ")", ":", "\n", "            ", "src_prd_args", "=", "tgt_alignment_dict", "[", "tgt_ind", "]", "\n", "# if len(src_prd_args) == 0: continue", "\n", "assert", "len", "(", "src_prd_args", ")", "==", "1", "\n", "confid_score", ",", "src_ind", "=", "src_prd_args", "[", "0", "]", "\n", "if", "src_ind", "in", "src_prd_indexs", ":", "\n", "                ", "if", "confid_score", "<", "config", ".", "alpha", ":", "\n", "                    ", "prd_cnt", "=", "0", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "prd_cnt", "+=", "1", "\n", "", "", "if", "src_ind", "in", "src_arg_indexs", ":", "\n", "                ", "if", "confid_score", "<", "config", ".", "alpha", ":", "\n", "                    ", "tgt_alignment_dict", ".", "pop", "(", "tgt_ind", ")", "\n", "\n", "\n", "# assert prd_cnt == 1, 'prd number does not equal to 1.'", "\n", "\n", "# transfer the prd&arg labels", "\n", "", "", "", "tgt_prd_labels", "=", "[", "'_'", "for", "_", "in", "range", "(", "len", "(", "tgt_sentence", ")", ")", "]", "\n", "tgt_arg_labels", "=", "[", "'_'", "for", "_", "in", "range", "(", "len", "(", "tgt_sentence", ")", ")", "]", "\n", "for", "tgt_ind", "in", "tgt_alignment_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "prd_cnt", "==", "1", ":", "# the only valid situation ", "\n", "                ", "src_prd_args", "=", "tgt_alignment_dict", "[", "tgt_ind", "]", "\n", "if", "len", "(", "src_prd_args", ")", "==", "0", ":", "continue", "\n", "score", ",", "src_ind", "=", "src_prd_args", "[", "0", "]", "\n", "if", "src_ind", "in", "src_prd_indexs", ":", "\n", "                    ", "tgt_prd_labels", "[", "tgt_ind", "]", "=", "src_prd_labels", "[", "src_ind", "]", "\n", "", "if", "src_ind", "in", "src_arg_indexs", ":", "\n", "                    ", "tgt_arg_labels", "[", "tgt_ind", "]", "=", "src_arg_labels", "[", "src_ind", "]", "\n", "\n", "\n", "", "", "", "pseudo_target_dataset", ".", "append", "(", "(", "tgt_sentence", ",", "tgt_prd_labels", ",", "tgt_arg_labels", ")", ")", "\n", "sucess", "+=", "1", "\n", "\n", "print", "(", "'[%d/%d], success: %d'", "%", "(", "index", ",", "all_cnt", ",", "sucess", ")", ")", "\n", "index", "+=", "1", "\n", "\n", "", "return", "pseudo_target_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.save_data": [[339, 351], ["list", "zip", "list.append", "open", "f.write", "list.append"], "function", ["None"], ["", "def", "save_data", "(", "data", ",", "file_name", ")", ":", "\n", "    ", "'''\n    token\tpredicate\targument\n    '''", "\n", "text_new_line", "=", "list", "(", ")", "\n", "for", "text", ",", "prd", ",", "arg", "in", "data", ":", "\n", "        ", "for", "tk_text", ",", "tk_prd", ",", "tk_arg", "in", "zip", "(", "text", ",", "prd", ",", "arg", ")", ":", "\n", "            ", "text_new_line", ".", "append", "(", "tk_text", "+", "'\\t'", "+", "tk_prd", "+", "'\\t'", "+", "tk_arg", ")", "\n", "", "text_new_line", ".", "append", "(", "''", ")", "\n", "\n", "", "with", "open", "(", "file_name", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'\\n'", ".", "join", "(", "text_new_line", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.main": [[354, 390], ["project.parse_argument", "project.load_tagger", "os.listdir", "os.path.join", "os.listdir", "primary_key_names.append", "os.path.join", "item.replace", "os.path.join", "item.replace().replace", "os.path.join", "item.replace", "os.path.join", "project.load_parallel_data", "project.projecting", "project.save_data", "item.replace"], "function", ["home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.parse_argument", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.load_tagger", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.load_parallel_data", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.projecting", "home.repos.pwc.inspect_result.scofield7419_XSRL-ACL.Projection.project.save_data"], ["", "", "def", "main", "(", ")", ":", "\n", "### loading configuration", "\n", "    ", "config", "=", "parse_argument", "(", ")", "\n", "\n", "### loading POS tagger", "\n", "tagger", ",", "alphabet", "=", "load_tagger", "(", "config", ")", "\n", "\n", "modes", "=", "[", "'train'", ",", "'test'", ",", "'dev'", "]", "\n", "for", "lan_pair", "in", "os", ".", "listdir", "(", "config", ".", "parallel_path_root_path", ")", ":", "\n", "        ", "cur_lan", "=", "os", ".", "path", ".", "join", "(", "config", ".", "parallel_path_root_path", ",", "lan_pair", ")", "\n", "for", "item", "in", "os", ".", "listdir", "(", "cur_lan", ")", ":", "\n", "            ", "primary_key_names", "=", "[", "]", "\n", "for", "mode", "in", "modes", ":", "\n", "                ", "if", "(", "mode", "not", "in", "item", ")", "or", "(", "'src'", "not", "in", "item", ")", ":", "continue", "\n", "primary_key_names", ".", "append", "(", "item", ")", "\n", "\n", "", "for", "item", "in", "primary_key_names", ":", "\n", "                ", "assert", "'src'", "in", "item", "\n", "\n", "source_file_name", "=", "item", "\n", "source_file_path", "=", "os", ".", "path", ".", "join", "(", "cur_lan", ",", "source_file_name", ")", "\n", "target_file_name", "=", "item", ".", "replace", "(", "'src'", ",", "'tgt'", ")", "\n", "target_file_path", "=", "os", ".", "path", ".", "join", "(", "cur_lan", ",", "target_file_name", ")", "\n", "aligning_file_name", "=", "item", ".", "replace", "(", "'src'", ",", "'src2tgt-align'", ")", ".", "replace", "(", "'conllu'", ",", "'prob'", ")", "\n", "aligning_file_path", "=", "os", ".", "path", ".", "join", "(", "cur_lan", ",", "aligning_file_name", ")", "\n", "pseudo_target_file_name", "=", "item", ".", "replace", "(", "'src'", ",", "'pseudo_tgt'", ")", "\n", "pseudo_target_file_path", "=", "os", ".", "path", ".", "join", "(", "pseudo_target_file_name", ",", "target_file_name", ")", "\n", "\n", "\n", "### loading parallel data", "\n", "align_probs", ",", "source_dataset", ",", "target_dataset", "=", "load_parallel_data", "(", "source_file_path", ",", "target_file_path", ",", "aligning_file_path", ")", "\n", "\n", "### annotation projection", "\n", "pseudo_target_dataset", "=", "projecting", "(", "source_dataset", ",", "target_dataset", ",", "align_probs", ",", "tagger", ",", "alphabet", ",", "config", ")", "\n", "\n", "save_data", "(", "pseudo_target_dataset", ",", "pseudo_target_file_path", ")", "\n", "\n"]]}