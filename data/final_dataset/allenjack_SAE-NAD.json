{"home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.eval_metrics.precision_at_k_per_sample": [[4, 10], ["None"], "function", ["None"], ["def", "precision_at_k_per_sample", "(", "actual", ",", "predicted", ",", "topk", ")", ":", "\n", "    ", "num_hits", "=", "0", "\n", "for", "place", "in", "predicted", ":", "\n", "        ", "if", "place", "in", "actual", ":", "\n", "            ", "num_hits", "+=", "1", "\n", "", "", "return", "num_hits", "/", "(", "topk", "+", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.eval_metrics.precision_at_k": [[12, 21], ["len", "range", "set", "set", "len", "float"], "function", ["None"], ["", "def", "precision_at_k", "(", "actual", ",", "predicted", ",", "topk", ")", ":", "\n", "    ", "sum_precision", "=", "0.0", "\n", "num_users", "=", "len", "(", "predicted", ")", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "act_set", "=", "set", "(", "actual", "[", "i", "]", ")", "\n", "pred_set", "=", "set", "(", "predicted", "[", "i", "]", "[", ":", "topk", "]", ")", "\n", "sum_precision", "+=", "len", "(", "act_set", "&", "pred_set", ")", "/", "float", "(", "topk", ")", "\n", "\n", "", "return", "sum_precision", "/", "num_users", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.eval_metrics.recall_at_k": [[23, 34], ["len", "range", "set", "set", "len", "len", "float", "len"], "function", ["None"], ["", "def", "recall_at_k", "(", "actual", ",", "predicted", ",", "topk", ")", ":", "\n", "    ", "sum_recall", "=", "0.0", "\n", "num_users", "=", "len", "(", "predicted", ")", "\n", "true_users", "=", "0", "\n", "for", "i", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "act_set", "=", "set", "(", "actual", "[", "i", "]", ")", "\n", "pred_set", "=", "set", "(", "predicted", "[", "i", "]", "[", ":", "topk", "]", ")", "\n", "if", "len", "(", "act_set", ")", "!=", "0", ":", "\n", "            ", "sum_recall", "+=", "len", "(", "act_set", "&", "pred_set", ")", "/", "float", "(", "len", "(", "act_set", ")", ")", "\n", "true_users", "+=", "1", "\n", "", "", "return", "sum_recall", "/", "true_users", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.eval_metrics.apk": [[36, 69], ["enumerate", "len", "min", "len"], "function", ["None"], ["", "def", "apk", "(", "actual", ",", "predicted", ",", "k", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Computes the average precision at k.\n    This function computes the average precision at k between two lists of\n    items.\n    Parameters\n    ----------\n    actual : list\n             A list of elements that are to be predicted (order doesn't matter)\n    predicted : list\n                A list of predicted elements (order does matter)\n    k : int, optional\n        The maximum number of predicted elements\n    Returns\n    -------\n    score : double\n            The average precision at k over the input lists\n    \"\"\"", "\n", "if", "len", "(", "predicted", ")", ">", "k", ":", "\n", "        ", "predicted", "=", "predicted", "[", ":", "k", "]", "\n", "\n", "", "score", "=", "0.0", "\n", "num_hits", "=", "0.0", "\n", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "predicted", ")", ":", "\n", "        ", "if", "p", "in", "actual", "and", "p", "not", "in", "predicted", "[", ":", "i", "]", ":", "\n", "            ", "num_hits", "+=", "1.0", "\n", "score", "+=", "num_hits", "/", "(", "i", "+", "1.0", ")", "\n", "\n", "", "", "if", "not", "actual", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "return", "score", "/", "min", "(", "len", "(", "actual", ")", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.eval_metrics.mapk": [[71, 92], ["numpy.mean", "eval_metrics.apk", "zip"], "function", ["home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.eval_metrics.apk"], ["", "def", "mapk", "(", "actual", ",", "predicted", ",", "k", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Computes the mean average precision at k.\n    This function computes the mean average prescision at k between two lists\n    of lists of items.\n    Parameters\n    ----------\n    actual : list\n             A list of lists of elements that are to be predicted\n             (order doesn't matter in the lists)\n    predicted : list\n                A list of lists of predicted elements\n                (order matters in the lists)\n    k : int, optional\n        The maximum number of predicted elements\n    Returns\n    -------\n    score : double\n            The mean average precision at k over the input lists\n    \"\"\"", "\n", "return", "np", ".", "mean", "(", "[", "apk", "(", "a", ",", "p", ",", "k", ")", "for", "a", ",", "p", "in", "zip", "(", "actual", ",", "predicted", ")", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.cal_poi_pairwise_relation.cal_place_pairwise_dist": [[8, 17], ["sklearn.metrics.pairwise.rbf_kernel", "numpy.fill_diagonal", "scipy.sparse.csr_matrix"], "function", ["None"], ["def", "cal_place_pairwise_dist", "(", "place_coordinates", ")", ":", "\n", "# this method calculates the pair-wise rbf distance", "\n", "    ", "gamma", "=", "60", "\n", "place_correlation", "=", "rbf_kernel", "(", "place_coordinates", ",", "gamma", "=", "gamma", ")", "\n", "np", ".", "fill_diagonal", "(", "place_correlation", ",", "0", ")", "\n", "place_correlation", "[", "place_correlation", "<", "0.1", "]", "=", "0", "\n", "place_correlation", "=", "csr_matrix", "(", "place_correlation", ")", "\n", "\n", "return", "place_correlation", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.cal_poi_pairwise_relation.main": [[19, 24], ["dataset.Foursquare().generate_data", "cal_poi_pairwise_relation.cal_place_pairwise_dist", "scipy.sparse.save_npz", "dataset.Foursquare"], "function", ["home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.dataset.Foursquare.generate_data", "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.cal_poi_pairwise_relation.cal_place_pairwise_dist"], ["", "def", "main", "(", ")", ":", "\n", "# try attention model", "\n", "    ", "train_matrix", ",", "test_set", ",", "place_coords", "=", "Foursquare", "(", ")", ".", "generate_data", "(", ")", "\n", "place_correlation", "=", "cal_place_pairwise_dist", "(", "place_coords", ")", "\n", "scipy", ".", "sparse", ".", "save_npz", "(", "'./data/Foursquare/place_correlation_gamma60.npz'", ",", "place_correlation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.dataset.Foursquare.__init__": [[6, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "user_num", "=", "24941", "\n", "self", ".", "poi_num", "=", "28593", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.dataset.Foursquare.read_raw_data": [[10, 21], ["open().readlines", "scipy.dok_matrix", "scipy.dok_matrix.tocsr", "eachline.strip().split", "open", "int", "int", "eachline.strip"], "methods", ["None"], ["", "def", "read_raw_data", "(", "self", ")", ":", "\n", "        ", "directory_path", "=", "'./data/Foursquare/'", "\n", "checkin_file", "=", "'Foursquare_checkins.txt'", "\n", "all_data", "=", "open", "(", "directory_path", "+", "checkin_file", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "sparse_raw_matrix", "=", "sparse", ".", "dok_matrix", "(", "(", "self", ".", "user_num", ",", "self", ".", "poi_num", ")", ")", "\n", "for", "eachline", "in", "all_data", ":", "\n", "            ", "uid", ",", "lid", ",", "time", "=", "eachline", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "uid", ",", "lid", "=", "int", "(", "uid", ")", ",", "int", "(", "lid", ")", "\n", "sparse_raw_matrix", "[", "uid", ",", "lid", "]", "=", "sparse_raw_matrix", "[", "uid", ",", "lid", "]", "+", "1", "\n", "\n", "", "return", "sparse_raw_matrix", ".", "tocsr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.dataset.Foursquare.split_data": [[22, 35], ["scipy.dok_matrix", "range", "sklearn.model_selection.train_test_split", "range", "test_set.append", "scipy.dok_matrix.tocsr", "raw_matrix.getrow", "raw_matrix.getrow", "len", "test_place.tolist"], "methods", ["None"], ["", "def", "split_data", "(", "self", ",", "raw_matrix", ",", "random_seed", "=", "0", ")", ":", "\n", "        ", "train_matrix", "=", "sparse", ".", "dok_matrix", "(", "(", "self", ".", "user_num", ",", "self", ".", "poi_num", ")", ")", "\n", "test_set", "=", "[", "]", "\n", "for", "user_id", "in", "range", "(", "self", ".", "user_num", ")", ":", "\n", "            ", "place_list", "=", "raw_matrix", ".", "getrow", "(", "user_id", ")", ".", "indices", "\n", "freq_list", "=", "raw_matrix", ".", "getrow", "(", "user_id", ")", ".", "data", "\n", "train_place", ",", "test_place", ",", "train_freq", ",", "test_freq", "=", "train_test_split", "(", "place_list", ",", "freq_list", ",", "test_size", "=", "0.2", ",", "random_state", "=", "random_seed", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_place", ")", ")", ":", "\n", "                ", "train_matrix", "[", "user_id", ",", "train_place", "[", "i", "]", "]", "=", "train_freq", "[", "i", "]", "\n", "", "test_set", ".", "append", "(", "test_place", ".", "tolist", "(", ")", ")", "\n", "\n", "", "return", "train_matrix", ".", "tocsr", "(", ")", ",", "test_set", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.dataset.Foursquare.read_poi_coos": [[36, 51], ["open().readlines", "poi_coos.items", "eachline.strip().split", "place_coords.append", "open", "int", "float", "float", "eachline.strip"], "methods", ["None"], ["", "def", "read_poi_coos", "(", "self", ")", ":", "\n", "        ", "directory_path", "=", "'./data/Foursquare/'", "\n", "poi_file", "=", "'Foursquare_poi_coos.txt'", "\n", "poi_coos", "=", "{", "}", "\n", "poi_data", "=", "open", "(", "directory_path", "+", "poi_file", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "for", "eachline", "in", "poi_data", ":", "\n", "            ", "lid", ",", "lat", ",", "lng", "=", "eachline", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "lid", ",", "lat", ",", "lng", "=", "int", "(", "lid", ")", ",", "float", "(", "lat", ")", ",", "float", "(", "lng", ")", "\n", "poi_coos", "[", "lid", "]", "=", "(", "lat", ",", "lng", ")", "\n", "\n", "", "place_coords", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "poi_coos", ".", "items", "(", ")", ":", "\n", "            ", "place_coords", ".", "append", "(", "[", "v", "[", "0", "]", ",", "v", "[", "1", "]", "]", ")", "\n", "\n", "", "return", "place_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.dataset.Foursquare.generate_data": [[52, 57], ["dataset.Foursquare.read_raw_data", "dataset.Foursquare.split_data", "dataset.Foursquare.read_poi_coos"], "methods", ["home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.dataset.Foursquare.read_raw_data", "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.dataset.Foursquare.split_data", "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.dataset.Foursquare.read_poi_coos"], ["", "def", "generate_data", "(", "self", ",", "random_seed", "=", "0", ")", ":", "\n", "        ", "raw_matrix", "=", "self", ".", "read_raw_data", "(", ")", "\n", "train_matrix", ",", "test_set", "=", "self", ".", "split_data", "(", "raw_matrix", ",", "random_seed", ")", "\n", "place_coords", "=", "self", ".", "read_poi_coos", "(", ")", "\n", "return", "train_matrix", ",", "test_set", ",", "place_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.model.AutoEncoder.__init__": [[13, 48], ["super().__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.autograd.Variable", "torch.autograd.Variable", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.model.AutoEncoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "D_in", ",", "H", ",", "D_out", ",", "da", "=", "20", ",", "dropout_rate", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the model configurations and parameters.\n        In the model, the network structure is like [D_in, H1, H, H1, D_out], and D_in equals to D_out.\n\n        :param D_in: the dimension of the input\n        :param H: the dimension of the bottleneck layer\n        :param D_out: the dimension of the output\n        :param H1: the dimension of the first hidden layer\n        :param da: the dimension of the attention model\n        \"\"\"", "\n", "super", "(", "AutoEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "H1", "=", "H", "[", "0", "]", "\n", "self", ".", "H", "=", "H", "[", "1", "]", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "linear1", "=", "torch", ".", "nn", ".", "Linear", "(", "D_in", ",", "self", ".", "H1", ",", "bias", "=", "False", ")", ".", "cuda", "(", ")", "\n", "self", ".", "linear2", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "H1", ",", "self", ".", "H", ")", ".", "cuda", "(", ")", "\n", "self", ".", "linear3", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "H", ",", "self", ".", "H1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "linear4", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "H1", ",", "D_out", ")", ".", "cuda", "(", ")", "\n", "self", ".", "attention_matrix1", "=", "Variable", "(", "torch", ".", "zeros", "(", "da", ",", "self", ".", "H1", ")", ".", "type", "(", "T", ".", "FloatTensor", ")", ",", "requires_grad", "=", "True", ")", "\n", "# self.attention_matrix2 = Variable(torch.zeros(20, 30).type(T.FloatTensor), requires_grad=True)", "\n", "self", ".", "attention_matrix1", "=", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "attention_matrix1", ")", "\n", "# self.attention_matrix2 = torch.nn.init.xavier_uniform(self.attention_matrix2)", "\n", "self", ".", "self_attention", "=", "torch", ".", "nn", ".", "Linear", "(", "da", ",", "1", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "torch", ".", "nn", ".", "Linear", "(", "D_in", ",", "self", ".", "H1", ",", "bias", "=", "False", ")", "\n", "self", ".", "linear2", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "H1", ",", "self", ".", "H", ")", "\n", "self", ".", "linear3", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "H", ",", "self", ".", "H1", ")", "\n", "self", ".", "linear4", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "H1", ",", "D_out", ")", "\n", "self", ".", "attention_matrix1", "=", "Variable", "(", "torch", ".", "zeros", "(", "da", ",", "self", ".", "H1", ")", ".", "type", "(", "T", ".", "FloatTensor", ")", ",", "requires_grad", "=", "True", ")", "\n", "# self.attention_matrix2 = Variable(torch.zeros(20, 30).type(T.FloatTensor), requires_grad=True)", "\n", "self", ".", "attention_matrix1", "=", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "attention_matrix1", ")", "\n", "# self.attention_matrix2 = torch.nn.init.xavier_uniform(self.attention_matrix2)", "\n", "self", ".", "self_attention", "=", "torch", ".", "nn", ".", "Linear", "(", "da", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.model.AutoEncoder.forward": [[49, 97], ["item_vector.t().mm", "torch.autograd.Variable", "torch.autograd.Variable", "inner_product.sum().unsqueeze.sum().unsqueeze.sum().unsqueeze", "torch.tanh", "torch.tanh", "torch.softmax", "torch.softmax", "torch.softmax.mm", "model.AutoEncoder.self_attention().t", "range", "torch.tanh", "torch.tanh", "torch.dropout", "torch.dropout", "torch.tanh", "torch.tanh", "torch.dropout", "torch.dropout", "torch.tanh", "torch.tanh", "torch.dropout", "torch.dropout", "torch.sigmoid", "torch.sigmoid", "model.AutoEncoder.linear4.weight.t", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "model.AutoEncoder.attention_matrix1.mm", "item_vector.t", "len", "item_vector.t().mm", "torch.autograd.Variable", "torch.autograd.Variable", "inner_product.sum().unsqueeze.sum().unsqueeze.sum().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.softmax", "torch.softmax", "torch.softmax.mm", "model.AutoEncoder.self_attention().t", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.AutoEncoder.linear2", "model.AutoEncoder.linear3", "item_vector.t", "inner_product.sum().unsqueeze.sum().unsqueeze.sum", "model.AutoEncoder.self_attention", "model.AutoEncoder.linear4.weight.t", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "model.AutoEncoder.attention_matrix1.mm", "item_vector.t", "model.AutoEncoder.linear4", "T.LongTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "F.softmax.mm.t", "item_vector.t", "inner_product.sum().unsqueeze.sum().unsqueeze.sum", "model.AutoEncoder.self_attention", "batch_item_index[].astype", "place_correlation[].toarray", "T.LongTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "F.softmax.mm.t", "batch_item_index[].astype", "place_correlation[].toarray"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "batch_item_index", ",", "place_correlation", ")", ":", "\n", "        ", "\"\"\"\n        The forward pass of the autoencoder.\n        :param batch_item_index: a list of arrays that each array stores the place id a user has been to\n        :param place_correlation: the pairwise poi relation matrix\n        :return: the predicted ratings\n        \"\"\"", "\n", "item_vector", "=", "self", ".", "linear1", ".", "weight", "[", ":", ",", "T", ".", "LongTensor", "(", "batch_item_index", "[", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", ")", "]", "\n", "# Compute the neighbor inner products", "\n", "inner_product", "=", "item_vector", ".", "t", "(", ")", ".", "mm", "(", "self", ".", "linear4", ".", "weight", ".", "t", "(", ")", ")", "\n", "item_corr", "=", "Variable", "(", "\n", "torch", ".", "from_numpy", "(", "place_correlation", "[", "batch_item_index", "[", "0", "]", "]", ".", "toarray", "(", ")", ")", ".", "type", "(", "T", ".", "FloatTensor", ")", ")", "\n", "inner_product", "=", "inner_product", "*", "item_corr", "\n", "neighbor_product", "=", "inner_product", ".", "sum", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# Compute the self attention score", "\n", "score", "=", "F", ".", "tanh", "(", "self", ".", "attention_matrix1", ".", "mm", "(", "item_vector", ")", ")", "\n", "score", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "1", ")", "\n", "embedding_matrix", "=", "score", ".", "mm", "(", "item_vector", ".", "t", "(", ")", ")", "\n", "linear_z", "=", "self", ".", "self_attention", "(", "embedding_matrix", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "\n", "# print score", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "batch_item_index", ")", ")", ":", "\n", "            ", "item_vector", "=", "self", ".", "linear1", ".", "weight", "[", ":", ",", "T", ".", "LongTensor", "(", "batch_item_index", "[", "i", "]", ".", "astype", "(", "np", ".", "int32", ")", ")", "]", "\n", "# Compute the neighbor inner products", "\n", "inner_product", "=", "item_vector", ".", "t", "(", ")", ".", "mm", "(", "self", ".", "linear4", ".", "weight", ".", "t", "(", ")", ")", "\n", "item_corr", "=", "Variable", "(", "\n", "torch", ".", "from_numpy", "(", "place_correlation", "[", "batch_item_index", "[", "i", "]", "]", ".", "toarray", "(", ")", ")", ".", "type", "(", "T", ".", "FloatTensor", ")", ")", "\n", "inner_product", "=", "inner_product", "*", "item_corr", "\n", "inner_product", "=", "inner_product", ".", "sum", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "neighbor_product", "=", "torch", ".", "cat", "(", "(", "neighbor_product", ",", "inner_product", ")", ",", "0", ")", "\n", "\n", "# Compute the self attention score", "\n", "score", "=", "F", ".", "tanh", "(", "self", ".", "attention_matrix1", ".", "mm", "(", "item_vector", ")", ")", "\n", "score", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "1", ")", "\n", "embedding_matrix", "=", "score", ".", "mm", "(", "item_vector", ".", "t", "(", ")", ")", "\n", "tmp_z", "=", "self", ".", "self_attention", "(", "embedding_matrix", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "linear_z", "=", "torch", ".", "cat", "(", "(", "linear_z", ",", "tmp_z", ")", ",", "0", ")", "\n", "\n", "", "z", "=", "F", ".", "tanh", "(", "linear_z", ")", "\n", "z", "=", "F", ".", "dropout", "(", "z", ",", "training", "=", "self", ".", "training", ",", "p", "=", "self", ".", "dropout_rate", ")", "\n", "z", "=", "F", ".", "tanh", "(", "self", ".", "linear2", "(", "z", ")", ")", "\n", "z", "=", "F", ".", "dropout", "(", "z", ",", "training", "=", "self", ".", "training", ",", "p", "=", "self", ".", "dropout_rate", ")", "\n", "d_z", "=", "F", ".", "tanh", "(", "self", ".", "linear3", "(", "z", ")", ")", "\n", "d_z", "=", "F", ".", "dropout", "(", "d_z", ",", "training", "=", "self", ".", "training", ",", "p", "=", "self", ".", "dropout_rate", ")", "\n", "y_pred", "=", "F", ".", "sigmoid", "(", "self", ".", "linear4", "(", "d_z", ")", "+", "neighbor_product", ")", "\n", "\n", "return", "y_pred", "", "", "", ""]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.run.get_mini_batch": [[33, 38], ["batch_item_index.append", "X[].toarray", "weight_mask[].toarray", "X.getrow"], "function", ["None"], ["def", "get_mini_batch", "(", "X", ",", "weight_mask", ",", "batch_user_index", ")", ":", "\n", "    ", "batch_item_index", "=", "[", "]", "\n", "for", "user_id", "in", "batch_user_index", ":", "\n", "        ", "batch_item_index", ".", "append", "(", "X", ".", "getrow", "(", "user_id", ")", ".", "indices", ")", "\n", "", "return", "X", "[", "batch_user_index", "]", ".", "toarray", "(", ")", ",", "weight_mask", "[", "batch_user_index", "]", ".", "toarray", "(", ")", ",", "batch_item_index", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.run.log_surplus_confidence_matrix": [[40, 46], ["B.copy", "numpy.log"], "function", ["None"], ["", "def", "log_surplus_confidence_matrix", "(", "B", ",", "alpha", ",", "epsilon", ")", ":", "\n", "# To construct the surplus confidence matrix, we need to operate only on the nonzero elements.", "\n", "# This is not possible: S = alpha * np.log(1 + B / epsilon)", "\n", "    ", "S", "=", "B", ".", "copy", "(", ")", "\n", "S", ".", "data", "=", "alpha", "*", "np", ".", "log", "(", "1", "+", "S", ".", "data", "/", "epsilon", ")", "\n", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.run.train_autoencoder": [[48, 141], ["run.log_surplus_confidence_matrix", "scipy.sparse.load_npz", "print", "model.AutoEncoder", "torch.cuda.is_available", "torch.nn.MSELoss", "torch.optim.Adam", "numpy.arange", "model.AutoEncoder.train", "range", "model.AutoEncoder.eval", "range", "print", "print", "print", "model.AutoEncoder.cuda", "model.AutoEncoder.parameters", "print", "numpy.random.shuffle", "range", "print", "print", "print", "train_matrix.getrow().toarray", "model.AutoEncoder.", "pred_rating_vector.cpu().data.numpy.cpu().data.numpy", "dict", "enumerate", "heapq.nlargest", "recommended_list.append", "print", "print", "print", "precision.append", "recall.append", "MAP.append", "int", "run.get_mini_batch", "torch.autograd.Variable", "model.AutoEncoder.", "torch.autograd.Variable", "print", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "model.AutoEncoder.", "eval_metrics.precision_at_k", "eval_metrics.recall_at_k", "eval_metrics.mapk", "torch.from_numpy().type", "torch.from_numpy().type", "model.AutoEncoder.", "train_matrix.getrow", "train_matrix.getrow", "pred_rating_vector.cpu().data.numpy.cpu", "eval_metrics.precision_at_k_per_sample", "eval_metrics.precision_at_k_per_sample", "torch.from_numpy", "torch.from_numpy", "T.LongTensor", "train_matrix.getrow", "torch.nn.MSELoss.", "train_matrix.getrow", "train_matrix.getrow().indices.astype", "train_matrix.getrow"], "function", ["home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.run.log_surplus_confidence_matrix", "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.run.get_mini_batch", "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.eval_metrics.precision_at_k", "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.eval_metrics.recall_at_k", "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.eval_metrics.mapk", "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.eval_metrics.precision_at_k_per_sample", "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.eval_metrics.precision_at_k_per_sample"], ["", "def", "train_autoencoder", "(", "train_matrix", ",", "test_set", ")", ":", "\n", "    ", "num_users", ",", "num_items", "=", "train_matrix", ".", "shape", "\n", "weight_matrix", "=", "log_surplus_confidence_matrix", "(", "train_matrix", ",", "alpha", "=", "args", ".", "alpha", ",", "epsilon", "=", "args", ".", "epsilon", ")", "\n", "train_matrix", "[", "train_matrix", ">", "0", "]", "=", "1.0", "\n", "place_correlation", "=", "scipy", ".", "sparse", ".", "load_npz", "(", "'./data/Foursquare/place_correlation_gamma60.npz'", ")", "\n", "\n", "assert", "num_items", "==", "place_correlation", ".", "shape", "[", "0", "]", "\n", "print", "(", "train_matrix", ".", "shape", ")", "\n", "\n", "# Construct the model by instantiating the class defined in model.py", "\n", "model", "=", "AutoEncoder", "(", "num_items", ",", "args", ".", "inner_layers", ",", "num_items", ",", "da", "=", "args", ".", "num_attention", ",", "dropout_rate", "=", "args", ".", "dropout_rate", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", "size_average", "=", "False", ",", "reduce", "=", "False", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", "user_indexes", "=", "np", ".", "arange", "(", "num_users", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "for", "t", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "        ", "print", "(", "\"epoch:{}\"", ".", "format", "(", "t", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "user_indexes", ")", "\n", "avg_cost", "=", "0.", "\n", "for", "batchID", "in", "range", "(", "int", "(", "num_users", "/", "batch_size", ")", ")", ":", "\n", "            ", "start", "=", "batchID", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "\n", "batch_user_index", "=", "user_indexes", "[", "start", ":", "end", "]", "\n", "\n", "batch_x", ",", "batch_x_weight", ",", "batch_item_index", "=", "get_mini_batch", "(", "train_matrix", ",", "weight_matrix", ",", "batch_user_index", ")", "\n", "batch_x_weight", "+=", "1", "\n", "batch_x", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "batch_x", ")", ".", "type", "(", "T", ".", "FloatTensor", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "y_pred", "=", "model", "(", "batch_item_index", ",", "place_correlation", ")", "\n", "\n", "# Compute and print loss", "\n", "batch_x_weight", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "batch_x_weight", ")", ".", "type", "(", "T", ".", "FloatTensor", ")", ",", "requires_grad", "=", "False", ")", "\n", "loss", "=", "(", "batch_x_weight", "*", "criterion", "(", "y_pred", ",", "batch_x", ")", ")", ".", "sum", "(", ")", "/", "batch_size", "\n", "\n", "print", "(", "batchID", ",", "loss", ".", "data", ")", "\n", "\n", "# Zero gradients, perform a backward pass, and update the weights.", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "avg_cost", "+=", "loss", "/", "num_users", "*", "batch_size", "\n", "\n", "", "print", "(", "\"Avg loss:{}\"", ".", "format", "(", "avg_cost", ")", ")", "\n", "\n", "# print the prediction score for the user 0", "\n", "print", "(", "model", "(", "\n", "[", "train_matrix", ".", "getrow", "(", "0", ")", ".", "indices", "]", ",", "\n", "place_correlation", ")", "[", ":", ",", "T", ".", "LongTensor", "(", "train_matrix", ".", "getrow", "(", "0", ")", ".", "indices", ".", "astype", "(", "np", ".", "int32", ")", ")", "]", ")", "\n", "print", "(", "model", "(", "[", "train_matrix", ".", "getrow", "(", "0", ")", ".", "indices", "]", ",", "place_correlation", ")", ")", "\n", "\n", "# Evaluation", "\n", "", "model", ".", "eval", "(", ")", "\n", "topk", "=", "20", "\n", "recommended_list", "=", "[", "]", "\n", "for", "user_id", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "user_rating_vector", "=", "train_matrix", ".", "getrow", "(", "user_id", ")", ".", "toarray", "(", ")", "\n", "pred_rating_vector", "=", "model", "(", "[", "train_matrix", ".", "getrow", "(", "user_id", ")", ".", "indices", "]", ",", "place_correlation", ")", "\n", "pred_rating_vector", "=", "pred_rating_vector", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "user_rating_vector", "=", "user_rating_vector", "[", "0", "]", "\n", "pred_rating_vector", "=", "pred_rating_vector", "[", "0", "]", "\n", "pred_rating_vector", "[", "user_rating_vector", ">", "0", "]", "=", "0", "\n", "\n", "item_recommended_dict", "=", "dict", "(", ")", "\n", "for", "item_inner_id", ",", "score", "in", "enumerate", "(", "pred_rating_vector", ")", ":", "\n", "            ", "item_recommended_dict", "[", "item_inner_id", "]", "=", "score", "\n", "\n", "", "sorted_item", "=", "heapq", ".", "nlargest", "(", "topk", ",", "item_recommended_dict", ",", "key", "=", "item_recommended_dict", ".", "get", ")", "\n", "recommended_list", ".", "append", "(", "sorted_item", ")", "\n", "\n", "print", "(", "test_set", "[", "user_id", "]", ",", "sorted_item", "[", ":", "topk", "]", ")", "\n", "print", "(", "pred_rating_vector", "[", "sorted_item", "[", "0", "]", "]", ",", "pred_rating_vector", "[", "sorted_item", "[", "1", "]", "]", ",", "\n", "pred_rating_vector", "[", "sorted_item", "[", "2", "]", "]", ",", "pred_rating_vector", "[", "sorted_item", "[", "3", "]", "]", ",", "\n", "pred_rating_vector", "[", "sorted_item", "[", "4", "]", "]", ")", "\n", "print", "(", "\"user:%d, precision@5:%f, precision@10:%f\"", "%", "(", "\n", "user_id", ",", "eval_metrics", ".", "precision_at_k_per_sample", "(", "test_set", "[", "user_id", "]", ",", "sorted_item", "[", ":", "5", "]", ",", "5", ")", ",", "\n", "eval_metrics", ".", "precision_at_k_per_sample", "(", "test_set", "[", "user_id", "]", ",", "sorted_item", "[", ":", "topk", "]", ",", "topk", ")", ")", ")", "\n", "\n", "", "precision", ",", "recall", ",", "MAP", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "k", "in", "[", "5", ",", "10", ",", "15", ",", "20", "]", ":", "\n", "        ", "precision", ".", "append", "(", "eval_metrics", ".", "precision_at_k", "(", "test_set", ",", "recommended_list", ",", "k", ")", ")", "\n", "recall", ".", "append", "(", "eval_metrics", ".", "recall_at_k", "(", "test_set", ",", "recommended_list", ",", "k", ")", ")", "\n", "MAP", ".", "append", "(", "eval_metrics", ".", "mapk", "(", "test_set", ",", "recommended_list", ",", "k", ")", ")", "\n", "\n", "", "print", "(", "precision", ")", "\n", "print", "(", "recall", ")", "\n", "print", "(", "MAP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.run.main": [[143, 146], ["dataset.Foursquare().generate_data", "run.train_autoencoder", "dataset.Foursquare"], "function", ["home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.dataset.Foursquare.generate_data", "home.repos.pwc.inspect_result.allenjack_SAE-NAD.None.run.train_autoencoder"], ["", "def", "main", "(", ")", ":", "\n", "    ", "train_matrix", ",", "test_set", ",", "place_coords", "=", "dataset", ".", "Foursquare", "(", ")", ".", "generate_data", "(", "args", ".", "seed", ")", "\n", "train_autoencoder", "(", "train_matrix", ",", "test_set", ")", "\n", "\n"]]}