{"home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.cfg.str2bool": [[10, 17], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.cfg.parse_args": [[19, 285], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--world-size'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of nodes for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--rank'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'node rank for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--loca_rank'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'node rank for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-url'", ",", "default", "=", "'tcp://224.66.41.62:23456'", ",", "type", "=", "str", ",", "\n", "help", "=", "'url used to set up distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist-backend'", ",", "default", "=", "'nccl'", ",", "type", "=", "str", ",", "\n", "help", "=", "'distributed backend'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "12345", ",", "type", "=", "int", ",", "\n", "help", "=", "'seed for initializing training. '", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'GPU id to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--multiprocessing-distributed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use multi-processing distributed training to launch '", "\n", "'N processes per node, which has N GPUs. This is the '", "\n", "'fastest way to use PyTorch for either single node or '", "\n", "'multi node data parallel training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max_epoch'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "200", ",", "\n", "help", "=", "'number of epochs of training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max_iter'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'set the max iteration number'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-gen_bs'", ",", "\n", "'--gen_batch_size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "64", ",", "\n", "help", "=", "'size of the batches'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-dis_bs'", ",", "\n", "'--dis_batch_size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "64", ",", "\n", "help", "=", "'size of the batches'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--g_lr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0002", ",", "\n", "help", "=", "'adam: gen learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--wd'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "'adamw: gen weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--d_lr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0002", ",", "\n", "help", "=", "'adam: disc learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--ctrl_lr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "3.5e-4", ",", "\n", "help", "=", "'adam: ctrl learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--lr_decay'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'learning rate decay or not'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--beta1'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "'adam: decay of first order momentum of gradient'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--beta2'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.9", ",", "\n", "help", "=", "'adam: decay of first order momentum of gradient'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_workers'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "8", ",", "\n", "help", "=", "'number of cpu threads to use during batch generation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--latent_dim'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "128", ",", "\n", "help", "=", "'dimensionality of the latent space'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--img_size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", "help", "=", "'size of each image dimension'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--channels'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "3", ",", "\n", "help", "=", "'number of image channels'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--n_critic'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of training steps for discriminator per iter'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--val_freq'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "20", ",", "\n", "help", "=", "'interval between each validation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--print_freq'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "'interval between each verbose'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--load_path'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'The reload model path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--exp_name'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'The name of exp'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--d_spectral_norm'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'add spectral_norm on discriminator?'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--g_spectral_norm'", ",", "\n", "type", "=", "str2bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'add spectral_norm on generator?'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'cifar10'", ",", "\n", "help", "=", "'dataset type'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'./data'", ",", "\n", "help", "=", "'The path of data set'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "\n", "choices", "=", "[", "'normal'", ",", "'orth'", ",", "'xavier_uniform'", ",", "'false'", "]", ",", "\n", "help", "=", "'The init type'", ")", "\n", "parser", ".", "add_argument", "(", "'--gf_dim'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'The base channel num of gen'", ")", "\n", "parser", ".", "add_argument", "(", "'--df_dim'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'The base channel num of disc'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gen_model'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'path of gen model'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dis_model'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'path of dis model'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--controller'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'controller'", ",", "\n", "help", "=", "'path of controller'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_batch_size'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--num_eval_imgs'", ",", "type", "=", "int", ",", "default", "=", "50000", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--bottom_width'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "\"the base resolution of the GAN\"", ")", "\n", "parser", ".", "add_argument", "(", "'--random_seed'", ",", "type", "=", "int", ",", "default", "=", "12345", ")", "\n", "\n", "# search", "\n", "parser", ".", "add_argument", "(", "'--shared_epoch'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'the number of epoch to train the shared gan at each search iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--grow_step1'", ",", "type", "=", "int", ",", "default", "=", "25", ",", "\n", "help", "=", "'which iteration to grow the image size from 8 to 16'", ")", "\n", "parser", ".", "add_argument", "(", "'--grow_step2'", ",", "type", "=", "int", ",", "default", "=", "55", ",", "\n", "help", "=", "'which iteration to grow the image size from 16 to 32'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_search_iter'", ",", "type", "=", "int", ",", "default", "=", "90", ",", "\n", "help", "=", "'max search iterations of this algorithm'", ")", "\n", "parser", ".", "add_argument", "(", "'--ctrl_step'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "\n", "help", "=", "'number of steps to train the controller at each search iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--ctrl_sample_batch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'sample size of controller of each step'", ")", "\n", "parser", ".", "add_argument", "(", "'--hid_size'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'the size of hidden vector'", ")", "\n", "parser", ".", "add_argument", "(", "'--baseline_decay'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'baseline decay rate in RL'", ")", "\n", "parser", ".", "add_argument", "(", "'--rl_num_eval_img'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "\n", "help", "=", "'number of images to be sampled in order to get the reward'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_candidate'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'number of candidate architectures to be sampled'", ")", "\n", "parser", ".", "add_argument", "(", "'--topk'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'preserve topk models architectures after each stage'", ")", "\n", "parser", ".", "add_argument", "(", "'--entropy_coeff'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "'to encourage the exploration'", ")", "\n", "parser", ".", "add_argument", "(", "'--dynamic_reset_threshold'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "'var threshold'", ")", "\n", "parser", ".", "add_argument", "(", "'--dynamic_reset_window'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "'the window size'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "\n", "help", "=", "'the vector of a discovered architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "\"adam\"", ",", "\n", "help", "=", "'optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "type", "=", "str", ",", "default", "=", "\"hinge\"", ",", "\n", "help", "=", "'loss function'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_classes'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--phi'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'wgan-gp phi'", ")", "\n", "parser", ".", "add_argument", "(", "'--grow_steps'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "\n", "help", "=", "'the vector of a discovered architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--D_downsample'", ",", "type", "=", "str", ",", "default", "=", "\"avg\"", ",", "\n", "help", "=", "'downsampling type'", ")", "\n", "parser", ".", "add_argument", "(", "'--fade_in'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'fade in step'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_depth'", ",", "type", "=", "int", ",", "default", "=", "7", ",", "\n", "help", "=", "'Discriminator Depth'", ")", "\n", "parser", ".", "add_argument", "(", "'--g_depth'", ",", "type", "=", "str", ",", "default", "=", "\"5,4,2\"", ",", "\n", "help", "=", "'Generator Depth'", ")", "\n", "parser", ".", "add_argument", "(", "'--g_norm'", ",", "type", "=", "str", ",", "default", "=", "\"ln\"", ",", "\n", "help", "=", "'Generator Normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_norm'", ",", "type", "=", "str", ",", "default", "=", "\"ln\"", ",", "\n", "help", "=", "'Discriminator Normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--g_act'", ",", "type", "=", "str", ",", "default", "=", "\"gelu\"", ",", "\n", "help", "=", "'Generator activation Layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_act'", ",", "type", "=", "str", ",", "default", "=", "\"gelu\"", ",", "\n", "help", "=", "'Discriminator activation layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--patch_size'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'Discriminator Depth'", ")", "\n", "parser", ".", "add_argument", "(", "'--fid_stat'", ",", "type", "=", "str", ",", "default", "=", "\"None\"", ",", "\n", "help", "=", "'Discriminator Depth'", ")", "\n", "parser", ".", "add_argument", "(", "'--diff_aug'", ",", "type", "=", "str", ",", "default", "=", "\"None\"", ",", "\n", "help", "=", "'differentiable augmentation type'", ")", "\n", "parser", ".", "add_argument", "(", "'--accumulated_times'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'gradient accumulation'", ")", "\n", "parser", ".", "add_argument", "(", "'--g_accumulated_times'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'gradient accumulation'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_landmarks'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'number of landmarks'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_heads'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'number of heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.", ",", "\n", "help", "=", "'dropout ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema'", ",", "type", "=", "float", ",", "default", "=", "0.995", ",", "\n", "help", "=", "'ema'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_warmup'", ",", "type", "=", "float", ",", "default", "=", "0.", ",", "\n", "help", "=", "'ema warm up'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_kimg'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "'ema thousand images'", ")", "\n", "parser", ".", "add_argument", "(", "'--latent_norm'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'latent vector normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--ministd'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'mini batch std'", ")", "\n", "parser", ".", "add_argument", "(", "'--g_mlp'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'generator mlp ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_mlp'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'discriminator mlp ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--g_window_size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'generator mlp ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_window_size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'discriminator mlp ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'show'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "opt", "\n", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.adamw.AdamW.__init__": [[36, 49], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "1e-2", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.adamw.AdamW.__setstate__": [[50, 54], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.adamw.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsgrad'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.adamw.AdamW.step": [[55, 118], ["closure", "p.data.mul_", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.max", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "max_exp_avg_sq.sqrt", "math.sqrt", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "# Perform stepweight decay", "\n", "", "p", ".", "data", ".", "mul_", "(", "1", "-", "group", "[", "'lr'", "]", "*", "group", "[", "'weight_decay'", "]", ")", "\n", "\n", "# Perform optimization step", "\n", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "(", "max_exp_avg_sq", ".", "sqrt", "(", ")", "/", "math", ".", "sqrt", "(", "bias_correction2", ")", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "(", "exp_avg_sq", ".", "sqrt", "(", ")", "/", "math", ".", "sqrt", "(", "bias_correction2", ")", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "/", "bias_correction1", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.flops.main": [[34, 60], ["cfg.parse_args", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "gen_net.set_arch", "thop.profile", "thop.clever_format", "print", "print", "eval", "eval", "torch.randn().cuda", "torch.randn().cuda", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Generator.set_arch"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cfg", ".", "parse_args", "(", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "random_seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "random_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "\n", "# set tf env", "\n", "# _init_inception()", "\n", "# inception_path = check_or_download_inception(None)", "\n", "# create_inception_graph(inception_path)", "\n", "\n", "# # import network", "\n", "gen_net", "=", "eval", "(", "'models_search.'", "+", "args", ".", "gen_model", "+", "'.Generator'", ")", "(", "args", "=", "args", ")", ".", "cuda", "(", ")", "\n", "dis_net", "=", "eval", "(", "'models_search.'", "+", "args", ".", "dis_model", "+", "'.Discriminator'", ")", "(", "args", "=", "args", ")", ".", "cuda", "(", ")", "\n", "gen_net", ".", "set_arch", "(", "args", ".", "arch", ",", "cur_stage", "=", "2", ")", "\n", "\n", "import", "thop", ",", "math", "\n", "dummy_data", "=", "(", "1", ",", "1024", ")", "\n", "macs", ",", "params", "=", "thop", ".", "profile", "(", "gen_net", ",", "inputs", "=", "(", "torch", ".", "randn", "(", "dummy_data", ")", ".", "cuda", "(", ")", ",", ")", ",", "\n", "custom_ops", "=", "{", "matmul", ":", "count_matmul", "}", ")", "\n", "flops", ",", "params", "=", "thop", ".", "clever_format", "(", "[", "macs", ",", "params", "]", ",", "\"%.3f\"", ")", "\n", "print", "(", "'Flops (GB):\\t'", ",", "flops", ")", "\n", "print", "(", "'Params Size (MB):\\t'", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.celeba.CelebA.__setup_files": [[21, 36], ["os.listdir", "os.path.join", "os.path.isfile", "files.append"], "methods", ["None"], ["def", "__setup_files", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        private helper for setting up the files_list\n        :return: files => list of paths of files\n        \"\"\"", "\n", "file_names", "=", "os", ".", "listdir", "(", "self", ".", "data_dir", ")", "\n", "files", "=", "[", "]", "# initialize to empty list", "\n", "\n", "for", "file_name", "in", "file_names", ":", "\n", "            ", "possible_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "file_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "possible_file", ")", ":", "\n", "                ", "files", ".", "append", "(", "possible_file", ")", "\n", "\n", "# return the files list", "\n", "", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.celeba.CelebA.__init__": [[37, 49], ["celeba.CelebA.__setup_files"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.celeba.FFHQ.__setup_files"], ["", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        constructor for the class\n        :param data_dir: path to the directory containing the data\n        :param transform: transforms to be applied to the images\n        \"\"\"", "\n", "# define the state of the object", "\n", "self", ".", "data_dir", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "# setup the files for reading", "\n", "self", ".", "files", "=", "self", ".", "__setup_files", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.celeba.CelebA.__len__": [[50, 56], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the length of the dataset\n        :return: len => length of dataset\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.celeba.CelebA.__getitem__": [[57, 79], ["np.load", "Image.fromarray", "Image.open", "celeba.CelebA.transform", "celeba.CelebA.squeeze().transpose", "celeba.CelebA.squeeze"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        obtain the image (read and transform)\n        :param idx: index of the file required\n        :return: img => image array\n        \"\"\"", "\n", "from", "PIL", "import", "Image", "\n", "\n", "# read the image:", "\n", "img_name", "=", "self", ".", "files", "[", "idx", "]", "\n", "if", "img_name", "[", "-", "4", ":", "]", "==", "\".npy\"", ":", "\n", "            ", "img", "=", "np", ".", "load", "(", "img_name", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "squeeze", "(", "0", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img_name", ")", "\n", "\n", "# apply the transforms on the image", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "# return the image:", "\n", "", "return", "img", ",", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.celeba.FFHQ.__setup_files": [[84, 101], ["os.path.join", "os.path.isfile", "glob.glob", "glob.glob", "files.append", "os.path.join", "os.path.join", "os.walk", "glob.glob", "os.path.join"], "methods", ["None"], ["def", "__setup_files", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        private helper for setting up the files_list\n        :return: files => list of paths of files\n        \"\"\"", "\n", "file_names", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"./*/*.png\"", ")", ")", "+", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"./*.jpg\"", ")", ")", "+", "[", "y", "for", "x", "in", "os", ".", "walk", "(", "self", ".", "data_dir", ")", "for", "y", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "x", "[", "0", "]", ",", "\"*.webp\"", ")", ")", "]", "\n", "files", "=", "[", "]", "# initialize to empty list", "\n", "\n", "for", "file_name", "in", "file_names", ":", "\n", "            ", "possible_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "file_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "possible_file", ")", ":", "\n", "                ", "files", ".", "append", "(", "possible_file", ")", "\n", "\n", "# return the files list", "\n", "", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.celeba.FFHQ.__init__": [[102, 114], ["celeba.FFHQ.__setup_files"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.celeba.FFHQ.__setup_files"], ["", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        constructor for the class\n        :param data_dir: path to the directory containing the data\n        :param transform: transforms to be applied to the images\n        \"\"\"", "\n", "# define the state of the object", "\n", "self", ".", "data_dir", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "# setup the files for reading", "\n", "self", ".", "files", "=", "self", ".", "__setup_files", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.celeba.FFHQ.__len__": [[115, 121], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        compute the length of the dataset\n        :return: len => length of dataset\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.celeba.FFHQ.__getitem__": [[122, 144], ["np.load", "Image.fromarray", "Image.open", "celeba.FFHQ.transform", "celeba.FFHQ.squeeze().transpose", "celeba.FFHQ.squeeze"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        obtain the image (read and transform)\n        :param idx: index of the file required\n        :return: img => image array\n        \"\"\"", "\n", "from", "PIL", "import", "Image", "\n", "\n", "# read the image:", "\n", "img_name", "=", "self", ".", "files", "[", "idx", "]", "\n", "if", "img_name", "[", "-", "4", ":", "]", "==", "\".npy\"", ":", "\n", "            ", "img", "=", "np", ".", "load", "(", "img_name", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "squeeze", "(", "0", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img_name", ")", "\n", "\n", "# apply the transforms on the image", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "# return the image:", "\n", "", "return", "img", ",", "img", "", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.train_derived.main": [[30, 66], ["cfg.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "warnings.warn", "int", "torch.spawn", "train_derived.main_worker"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.train_derived.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cfg", ".", "parse_args", "(", ")", "\n", "\n", "#     _init_inception()", "\n", "#     inception_path = check_or_download_inception(None)", "\n", "#     create_inception_graph(inception_path)", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "args", ".", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "random_seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "random_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.train_derived.main_worker": [[67, 293], ["functions.LinearLrDecay", "functions.LinearLrDecay", "os.path.exists", "datasets.ImageDataset", "print", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "copy.deepcopy().cpu", "functions.copy_params", "range", "print", "torch.init_process_group", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "print", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "args.dataset.lower", "len", "numpy.ceil", "numpy.random.normal", "print", "os.path.exists", "os.path.join", "os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "adamw.AdamW.load_state_dict", "adamw.AdamW.load_state_dict", "torch.nn.DataParallel().cuda.load_state_dict", "functions.copy_params", "torch.nn.DataParallel().cuda.load_state_dict", "print", "utils.utils.create_logger.info", "int", "int", "train_sampler.set_epoch", "functions.cur_stages", "functions.train", "copy.deepcopy", "functions.load_params", "int", "classname.find", "filter", "filter", "adamw.AdamW", "adamw.AdamW", "args.dataset.lower", "copy.deepcopy", "utils.utils.create_logger", "tensorboardX.SummaryWriter", "utils.utils.set_log_dir", "utils.utils.create_logger", "tensorboardX.SummaryWriter", "len", "print", "print", "functions.copy_params", "functions.load_params", "functions.save_samples", "functions.load_params", "functions.copy_params", "functions.load_params", "functions.validate", "functions.load_params", "utils.utils.save_checkpoint", "torch.init.normal_", "classname.find", "torch.init.normal_", "torch.init.constant_", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.apply", "torch.nn.DataParallel().cuda.apply", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "int", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "filter", "filter", "NotImplementedError", "len", "utils.utils.create_logger.info", "torch.init.orthogonal_", "eval", "eval", "torch.nn.DataParallel().cuda.parameters", "torch.nn.DataParallel().cuda.parameters", "str", "int", "torch.nn.DataParallel().cuda.state_dict", "torch.nn.DataParallel().cuda.state_dict", "copy.deepcopy.state_dict", "adamw.AdamW.state_dict", "adamw.AdamW.state_dict", "torch.init.xavier_uniform", "NotImplementedError", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "args.dataset.lower"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.copy_params", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.copy_params", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.cur_stages", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.train", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.load_params", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.create_logger", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.set_log_dir", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.create_logger", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.copy_params", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.load_params", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.save_samples", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.load_params", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.copy_params", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.load_params", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.test.validate", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.load_params", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# weight init", "\n", "", "def", "weights_init", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "args", ".", "init_type", "==", "'normal'", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "args", ".", "init_type", "==", "'orth'", ":", "\n", "                ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "args", ".", "init_type", "==", "'xavier_uniform'", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ".", "data", ",", "1.", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'{} unknown inital type'", ".", "format", "(", "args", ".", "init_type", ")", ")", "\n", "#         elif classname.find('Linear') != -1:", "\n", "#             if args.init_type == 'normal':", "\n", "#                 nn.init.normal_(m.weight.data, 0.0, 0.02)", "\n", "#             elif args.init_type == 'orth':", "\n", "#                 nn.init.orthogonal_(m.weight.data)", "\n", "#             elif args.init_type == 'xavier_uniform':", "\n", "#                 nn.init.xavier_uniform(m.weight.data, 1.)", "\n", "#             else:", "\n", "#                 raise NotImplementedError('{} unknown inital type'.format(args.init_type))", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "# import network", "\n", "\n", "\n", "", "", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'using CPU, this will be slow'", ")", "\n", "", "elif", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "gen_net", "=", "eval", "(", "'models_search.'", "+", "args", ".", "gen_model", "+", "'.Generator'", ")", "(", "args", "=", "args", ")", "\n", "dis_net", "=", "eval", "(", "'models_search.'", "+", "args", ".", "dis_model", "+", "'.Discriminator'", ")", "(", "args", "=", "args", ")", "\n", "\n", "gen_net", ".", "apply", "(", "weights_init", ")", "\n", "dis_net", ".", "apply", "(", "weights_init", ")", "\n", "gen_net", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "dis_net", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "dis_batch_size", "=", "int", "(", "args", ".", "dis_batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "gen_batch_size", "=", "int", "(", "args", ".", "gen_batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "batch_size", "=", "args", ".", "dis_batch_size", "\n", "\n", "args", ".", "num_workers", "=", "int", "(", "(", "args", ".", "num_workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "gen_net", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "gen_net", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "dis_net", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "dis_net", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "gen_net", ".", "cuda", "(", ")", "\n", "dis_net", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "gen_net", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "gen_net", ")", "\n", "dis_net", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "dis_net", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "gen_net", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "dis_net", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "        ", "gen_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "gen_net", ")", ".", "cuda", "(", ")", "\n", "dis_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "dis_net", ")", ".", "cuda", "(", ")", "\n", "", "print", "(", "dis_net", ")", "if", "args", ".", "rank", "==", "0", "else", "0", "\n", "\n", "\n", "# set optimizer", "\n", "if", "args", ".", "optimizer", "==", "\"adam\"", ":", "\n", "        ", "gen_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "gen_net", ".", "parameters", "(", ")", ")", ",", "\n", "args", ".", "g_lr", ",", "(", "args", ".", "beta1", ",", "args", ".", "beta2", ")", ")", "\n", "dis_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "dis_net", ".", "parameters", "(", ")", ")", ",", "\n", "args", ".", "d_lr", ",", "(", "args", ".", "beta1", ",", "args", ".", "beta2", ")", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "\"adamw\"", ":", "\n", "        ", "gen_optimizer", "=", "AdamW", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "gen_net", ".", "parameters", "(", ")", ")", ",", "\n", "args", ".", "g_lr", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "dis_optimizer", "=", "AdamW", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "dis_net", ".", "parameters", "(", ")", ")", ",", "\n", "args", ".", "g_lr", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "", "gen_scheduler", "=", "LinearLrDecay", "(", "gen_optimizer", ",", "args", ".", "g_lr", ",", "0.0", ",", "0", ",", "args", ".", "max_iter", "*", "args", ".", "n_critic", ")", "\n", "dis_scheduler", "=", "LinearLrDecay", "(", "dis_optimizer", ",", "args", ".", "d_lr", ",", "0.0", ",", "0", ",", "args", ".", "max_iter", "*", "args", ".", "n_critic", ")", "\n", "\n", "# fid stat", "\n", "if", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "        ", "fid_stat", "=", "'fid_stat/fid_stats_cifar10_train.npz'", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'stl10'", ":", "\n", "        ", "fid_stat", "=", "'fid_stat/stl10_train_unlabeled_fid_stats_48.npz'", "\n", "", "elif", "args", ".", "fid_stat", "is", "not", "None", ":", "\n", "        ", "fid_stat", "=", "args", ".", "fid_stat", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'no fid stat for {args.dataset.lower()}'", ")", "\n", "", "assert", "os", ".", "path", ".", "exists", "(", "fid_stat", ")", "\n", "\n", "\n", "# epoch number for dis_net", "\n", "args", ".", "max_epoch", "=", "args", ".", "max_epoch", "*", "args", ".", "n_critic", "\n", "dataset", "=", "datasets", ".", "ImageDataset", "(", "args", ",", "cur_img_size", "=", "8", ")", "\n", "train_loader", "=", "dataset", ".", "train", "\n", "train_sampler", "=", "dataset", ".", "train_sampler", "\n", "print", "(", "len", "(", "train_loader", ")", ")", "\n", "if", "args", ".", "max_iter", ":", "\n", "        ", "args", ".", "max_epoch", "=", "np", ".", "ceil", "(", "args", ".", "max_iter", "*", "args", ".", "n_critic", "/", "len", "(", "train_loader", ")", ")", "\n", "\n", "# initial", "\n", "", "fixed_z", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "100", ",", "args", ".", "latent_dim", ")", ")", ")", "\n", "avg_gen_net", "=", "deepcopy", "(", "gen_net", ")", ".", "cpu", "(", ")", "\n", "gen_avg_param", "=", "copy_params", "(", "avg_gen_net", ")", "\n", "del", "avg_gen_net", "\n", "start_epoch", "=", "0", "\n", "best_fid", "=", "1e4", "\n", "\n", "# set writer", "\n", "writer", "=", "None", "\n", "if", "args", ".", "load_path", ":", "\n", "        ", "print", "(", "f'=> resuming from {args.load_path}'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "load_path", ")", "\n", "checkpoint_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "load_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "checkpoint_file", ")", "\n", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_file", ",", "map_location", "=", "loc", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_fid", "=", "checkpoint", "[", "'best_fid'", "]", "\n", "\n", "\n", "dis_net", ".", "load_state_dict", "(", "checkpoint", "[", "'dis_state_dict'", "]", ")", "\n", "gen_optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'gen_optimizer'", "]", ")", "\n", "dis_optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'dis_optimizer'", "]", ")", "\n", "\n", "#         avg_gen_net = deepcopy(gen_net)", "\n", "gen_net", ".", "load_state_dict", "(", "checkpoint", "[", "'avg_gen_state_dict'", "]", ")", "\n", "gen_avg_param", "=", "copy_params", "(", "gen_net", ",", "mode", "=", "'gpu'", ")", "\n", "gen_net", ".", "load_state_dict", "(", "checkpoint", "[", "'gen_state_dict'", "]", ")", "\n", "fixed_z", "=", "checkpoint", "[", "'fixed_z'", "]", "\n", "#         del avg_gen_net", "\n", "#         gen_avg_param = list(p.cuda().to(f\"cuda:{args.gpu}\") for p in gen_avg_param)", "\n", "\n", "\n", "\n", "args", ".", "path_helper", "=", "checkpoint", "[", "'path_helper'", "]", "\n", "logger", "=", "create_logger", "(", "args", ".", "path_helper", "[", "'log_path'", "]", ")", "if", "args", ".", "rank", "==", "0", "else", "None", "\n", "print", "(", "f'=> loaded checkpoint {checkpoint_file} (epoch {start_epoch})'", ")", "\n", "writer", "=", "SummaryWriter", "(", "args", ".", "path_helper", "[", "'log_path'", "]", ")", "if", "args", ".", "rank", "==", "0", "else", "None", "\n", "del", "checkpoint", "\n", "", "else", ":", "\n", "# create new log dir", "\n", "        ", "assert", "args", ".", "exp_name", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "args", ".", "path_helper", "=", "set_log_dir", "(", "'logs'", ",", "args", ".", "exp_name", ")", "\n", "logger", "=", "create_logger", "(", "args", ".", "path_helper", "[", "'log_path'", "]", ")", "\n", "writer", "=", "SummaryWriter", "(", "args", ".", "path_helper", "[", "'log_path'", "]", ")", "\n", "\n", "", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "args", ")", "\n", "", "writer_dict", "=", "{", "\n", "'writer'", ":", "writer", ",", "\n", "'train_global_steps'", ":", "start_epoch", "*", "len", "(", "train_loader", ")", ",", "\n", "'valid_global_steps'", ":", "start_epoch", "//", "args", ".", "val_freq", ",", "\n", "}", "\n", "\n", "# train loop", "\n", "for", "epoch", "in", "range", "(", "int", "(", "start_epoch", ")", ",", "int", "(", "args", ".", "max_epoch", ")", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "lr_schedulers", "=", "(", "gen_scheduler", ",", "dis_scheduler", ")", "if", "args", ".", "lr_decay", "else", "None", "\n", "cur_stage", "=", "cur_stages", "(", "epoch", ",", "args", ")", "\n", "print", "(", "\"cur_stage \"", "+", "str", "(", "cur_stage", ")", ")", "if", "args", ".", "rank", "==", "0", "else", "0", "\n", "print", "(", "f\"path: {args.path_helper['prefix']}\"", ")", "if", "args", ".", "rank", "==", "0", "else", "0", "\n", "train", "(", "args", ",", "gen_net", ",", "dis_net", ",", "gen_optimizer", ",", "dis_optimizer", ",", "gen_avg_param", ",", "train_loader", ",", "epoch", ",", "writer_dict", ",", "fixed_z", ",", "\n", "lr_schedulers", ")", "\n", "\n", "if", "args", ".", "rank", "==", "0", "and", "args", ".", "show", ":", "\n", "            ", "backup_param", "=", "copy_params", "(", "gen_net", ")", "\n", "load_params", "(", "gen_net", ",", "gen_avg_param", ",", "args", ",", "mode", "=", "\"cpu\"", ")", "\n", "save_samples", "(", "args", ",", "fixed_z", ",", "fid_stat", ",", "epoch", ",", "gen_net", ",", "writer_dict", ")", "\n", "load_params", "(", "gen_net", ",", "backup_param", ",", "args", ")", "\n", "\n", "", "if", "epoch", "and", "epoch", "%", "args", ".", "val_freq", "==", "0", "or", "epoch", "==", "int", "(", "args", ".", "max_epoch", ")", "-", "1", ":", "\n", "            ", "backup_param", "=", "copy_params", "(", "gen_net", ")", "\n", "load_params", "(", "gen_net", ",", "gen_avg_param", ",", "args", ",", "mode", "=", "\"cpu\"", ")", "\n", "inception_score", ",", "fid_score", "=", "validate", "(", "args", ",", "fixed_z", ",", "fid_stat", ",", "epoch", ",", "gen_net", ",", "writer_dict", ")", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "f'Inception score: {inception_score}, FID score: {fid_score} || @ epoch {epoch}.'", ")", "\n", "", "load_params", "(", "gen_net", ",", "backup_param", ",", "args", ")", "\n", "if", "fid_score", "<", "best_fid", ":", "\n", "                ", "best_fid", "=", "fid_score", "\n", "is_best", "=", "True", "\n", "", "else", ":", "\n", "                ", "is_best", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "is_best", "=", "False", "\n", "\n", "", "avg_gen_net", "=", "deepcopy", "(", "gen_net", ")", "\n", "load_params", "(", "avg_gen_net", ",", "gen_avg_param", ",", "args", ")", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "==", "0", ")", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'gen_model'", ":", "args", ".", "gen_model", ",", "\n", "'dis_model'", ":", "args", ".", "dis_model", ",", "\n", "'gen_state_dict'", ":", "gen_net", ".", "state_dict", "(", ")", ",", "\n", "'dis_state_dict'", ":", "dis_net", ".", "state_dict", "(", ")", ",", "\n", "'avg_gen_state_dict'", ":", "avg_gen_net", ".", "state_dict", "(", ")", ",", "\n", "'gen_optimizer'", ":", "gen_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'dis_optimizer'", ":", "dis_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_fid'", ":", "best_fid", ",", "\n", "'path_helper'", ":", "args", ".", "path_helper", ",", "\n", "'fixed_z'", ":", "fixed_z", "\n", "}", ",", "is_best", ",", "args", ".", "path_helper", "[", "'ckpt_path'", "]", ",", "filename", "=", "\"checkpoint\"", ")", "\n", "", "del", "avg_gen_net", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.LinearLrDecay.__init__": [[398, 407], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "start_lr", ",", "end_lr", ",", "decay_start_step", ",", "decay_end_step", ")", ":", "\n", "\n", "        ", "assert", "start_lr", ">", "end_lr", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "delta", "=", "(", "start_lr", "-", "end_lr", ")", "/", "(", "decay_end_step", "-", "decay_start_step", ")", "\n", "self", ".", "decay_start_step", "=", "decay_start_step", "\n", "self", ".", "decay_end_step", "=", "decay_end_step", "\n", "self", ".", "start_lr", "=", "start_lr", "\n", "self", ".", "end_lr", "=", "end_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.LinearLrDecay.step": [[408, 418], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<=", "self", ".", "decay_start_step", ":", "\n", "            ", "lr", "=", "self", ".", "start_lr", "\n", "", "elif", "current_step", ">=", "self", ".", "decay_end_step", ":", "\n", "            ", "lr", "=", "self", ".", "end_lr", "\n", "", "else", ":", "\n", "            ", "lr", "=", "self", ".", "start_lr", "-", "self", ".", "delta", "*", "(", "current_step", "-", "self", ".", "decay_start_step", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.cur_stages": [[26, 47], ["range", "len"], "function", ["None"], ["def", "cur_stages", "(", "iter", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Return current stage.\n        :param epoch: current epoch.\n        :return: current stage\n        \"\"\"", "\n", "# if search_iter < self.grow_step1:", "\n", "#     return 0", "\n", "# elif self.grow_step1 <= search_iter < self.grow_step2:", "\n", "#     return 1", "\n", "# else:", "\n", "#     return 2", "\n", "# for idx, grow_step in enumerate(args.grow_steps):", "\n", "#     if iter < grow_step:", "\n", "#         return idx", "\n", "# return len(args.grow_steps)", "\n", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ".", "grow_steps", ")", ")", ":", "\n", "            ", "if", "iter", ">=", "args", ".", "grow_steps", "[", "i", "]", ":", "\n", "                ", "idx", "=", "i", "+", "1", "\n", "", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.compute_gradient_penalty": [[48, 68], ["torch.Tensor().to", "torch.Tensor().to", "D", "torch.ones().to", "torch.ones().to", "gradients.reshape.reshape", "real_samples.get_device", "real_samples.get_device", "torch.autograd.grad", "torch.autograd.grad", "gradients.reshape.size", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "numpy.random.random", "gradients.reshape.norm", "real_samples.size"], "function", ["None"], ["", "def", "compute_gradient_penalty", "(", "D", ",", "real_samples", ",", "fake_samples", ",", "phi", ")", ":", "\n", "    ", "\"\"\"Calculates the gradient penalty loss for WGAN GP\"\"\"", "\n", "# Random weight term for interpolation between real and fake samples", "\n", "alpha", "=", "torch", ".", "Tensor", "(", "np", ".", "random", ".", "random", "(", "(", "real_samples", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ")", ")", ".", "to", "(", "real_samples", ".", "get_device", "(", ")", ")", "\n", "# Get random interpolation between real and fake samples", "\n", "interpolates", "=", "(", "alpha", "*", "real_samples", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_samples", ")", ")", ".", "requires_grad_", "(", "True", ")", "\n", "d_interpolates", "=", "D", "(", "interpolates", ")", "\n", "fake", "=", "torch", ".", "ones", "(", "[", "real_samples", ".", "shape", "[", "0", "]", ",", "1", "]", ",", "requires_grad", "=", "False", ")", ".", "to", "(", "real_samples", ".", "get_device", "(", ")", ")", "\n", "# Get gradient w.r.t. interpolates", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "d_interpolates", ",", "\n", "inputs", "=", "interpolates", ",", "\n", "grad_outputs", "=", "fake", ",", "\n", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ",", "\n", ")", "[", "0", "]", "\n", "gradients", "=", "gradients", ".", "reshape", "(", "gradients", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "gradient_penalty", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "phi", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.train": [[70, 242], ["gen_net.train", "dis_net.train", "dis_optimizer.zero_grad", "gen_optimizer.zero_grad", "enumerate", "tqdm.tqdm", "imgs.type().cuda", "torch.cuda.FloatTensor().cuda", "torch.cuda.FloatTensor().cuda", "dis_net", "gen_net().detach", "dis_net", "d_loss.backward", "gen_net().detach.size", "imgs.type().cuda.size", "float", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "dis_optimizer.step", "dis_optimizer.zero_grad", "range", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "gen_optimizer.step", "gen_optimizer.zero_grad", "zip", "torch.cat", "torch.cat", "tqdm.tqdm.write", "imgs.type", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "gen_net", "gen_net().detach.size", "imgs.type().cuda.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.full", "torch.full", "torch.full", "torch.full", "dis_net.parameters", "writer.add_scalar", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "gen_net", "dis_net", "torch.tensor", "torch.tensor", "g_loss.backward", "gen_net.parameters", "gen_scheduler.step", "dis_scheduler.step", "writer.add_scalar", "writer.add_scalar", "min", "gen_net.parameters", "copy.deepcopy", "avg_p.mul_().add_", "writer.add_scalar", "numpy.random.normal", "torch.Sigmoid", "dis_net.view", "torch.Sigmoid", "dis_net.view", "torch.BCELoss", "torch.BCELoss", "isinstance", "d_loss.item", "numpy.random.normal", "torch.full", "torch.full", "isinstance", "float", "g_loss.item", "torch.ReLU", "torch.ReLU", "imgs.type().cuda.get_device", "imgs.type().cuda.get_device", "zip", "torch.full", "torch.full", "torch.full", "torch.full", "functions.compute_gradient_penalty", "torch.Sigmoid", "dis_net.view", "torch.BCELoss", "dis_net.view", "torch.full", "torch.full", "float", "max", "avg_p.mul_", "copy.deepcopy.cpu", "len", "d_loss.item", "g_loss.item", "torch.full", "torch.full", "torch.full", "torch.full", "torch.MSELoss", "torch.MSELoss", "gen_net().detach.detach", "functions.compute_gradient_penalty", "imgs.type().cuda.get_device", "torch.full", "torch.full", "torch.MSELoss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.MSELoss", "torch.MSELoss", "imgs.type().cuda.get_device", "imgs.type().cuda.get_device", "torch.mean", "torch.mean", "gen_net().detach.detach", "functions.compute_gradient_penalty", "NotImplementedError", "torch.MSELoss", "imgs.type().cuda.get_device", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "imgs.type().cuda.get_device", "imgs.type().cuda.get_device", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "gen_net().detach.detach", "imgs.type().cuda.get_device", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.train", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.train", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.LinearLrDecay.step", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.LinearLrDecay.step", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.fma._FusedMultiplyAdd.backward", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.LinearLrDecay.step", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.LinearLrDecay.step", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.compute_gradient_penalty", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.compute_gradient_penalty", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.compute_gradient_penalty", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "train", "(", "args", ",", "gen_net", ":", "nn", ".", "Module", ",", "dis_net", ":", "nn", ".", "Module", ",", "gen_optimizer", ",", "dis_optimizer", ",", "gen_avg_param", ",", "train_loader", ",", "\n", "epoch", ",", "writer_dict", ",", "fixed_z", ",", "schedulers", "=", "None", ")", ":", "\n", "    ", "writer", "=", "writer_dict", "[", "'writer'", "]", "\n", "gen_step", "=", "0", "\n", "# train mode", "\n", "gen_net", ".", "train", "(", ")", "\n", "dis_net", ".", "train", "(", ")", "\n", "\n", "dis_optimizer", ".", "zero_grad", "(", ")", "\n", "gen_optimizer", ".", "zero_grad", "(", ")", "\n", "for", "iter_idx", ",", "(", "imgs", ",", "_", ")", "in", "enumerate", "(", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "        ", "global_steps", "=", "writer_dict", "[", "'train_global_steps'", "]", "\n", "\n", "\n", "# Adversarial ground truths", "\n", "real_imgs", "=", "imgs", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# Sample noise as generator input", "\n", "z", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "imgs", ".", "shape", "[", "0", "]", ",", "args", ".", "latent_dim", ")", ")", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# ---------------------", "\n", "#  Train Discriminator", "\n", "# ---------------------", "\n", "\n", "\n", "real_validity", "=", "dis_net", "(", "real_imgs", ")", "\n", "fake_imgs", "=", "gen_net", "(", "z", ",", "epoch", ")", ".", "detach", "(", ")", "\n", "assert", "fake_imgs", ".", "size", "(", ")", "==", "real_imgs", ".", "size", "(", ")", ",", "f\"fake_imgs.size(): {fake_imgs.size()} real_imgs.size(): {real_imgs.size()}\"", "\n", "\n", "fake_validity", "=", "dis_net", "(", "fake_imgs", ")", "\n", "\n", "# cal loss", "\n", "if", "args", ".", "loss", "==", "'hinge'", ":", "\n", "            ", "d_loss", "=", "0", "\n", "d_loss", "=", "torch", ".", "mean", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "(", "1.0", "-", "real_validity", ")", ")", "+", "torch", ".", "mean", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "(", "1", "+", "fake_validity", ")", ")", "\n", "", "elif", "args", ".", "loss", "==", "'standard'", ":", "\n", "            ", "real_label", "=", "torch", ".", "full", "(", "(", "imgs", ".", "shape", "[", "0", "]", ",", ")", ",", "1.", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "real_imgs", ".", "get_device", "(", ")", ")", "\n", "fake_label", "=", "torch", ".", "full", "(", "(", "imgs", ".", "shape", "[", "0", "]", ",", ")", ",", "0.", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "real_imgs", ".", "get_device", "(", ")", ")", "\n", "real_validity", "=", "nn", ".", "Sigmoid", "(", ")", "(", "real_validity", ".", "view", "(", "-", "1", ")", ")", "\n", "fake_validity", "=", "nn", ".", "Sigmoid", "(", ")", "(", "fake_validity", ".", "view", "(", "-", "1", ")", ")", "\n", "d_real_loss", "=", "nn", ".", "BCELoss", "(", ")", "(", "real_validity", ",", "real_label", ")", "\n", "d_fake_loss", "=", "nn", ".", "BCELoss", "(", ")", "(", "fake_validity", ",", "fake_label", ")", "\n", "", "elif", "args", ".", "loss", "==", "'lsgan'", ":", "\n", "            ", "if", "isinstance", "(", "fake_validity", ",", "list", ")", ":", "\n", "                ", "d_loss", "=", "0", "\n", "for", "real_validity_item", ",", "fake_validity_item", "in", "zip", "(", "real_validity", ",", "fake_validity", ")", ":", "\n", "                    ", "real_label", "=", "torch", ".", "full", "(", "(", "real_validity_item", ".", "shape", "[", "0", "]", ",", "real_validity_item", ".", "shape", "[", "1", "]", ")", ",", "1.", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "real_imgs", ".", "get_device", "(", ")", ")", "\n", "fake_label", "=", "torch", ".", "full", "(", "(", "real_validity_item", ".", "shape", "[", "0", "]", ",", "real_validity_item", ".", "shape", "[", "1", "]", ")", ",", "0.", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "real_imgs", ".", "get_device", "(", ")", ")", "\n", "d_real_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "real_validity_item", ",", "real_label", ")", "\n", "d_fake_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "fake_validity_item", ",", "fake_label", ")", "\n", "d_loss", "+=", "d_real_loss", "+", "d_fake_loss", "\n", "", "", "else", ":", "\n", "                ", "real_label", "=", "torch", ".", "full", "(", "(", "real_validity", ".", "shape", "[", "0", "]", ",", "real_validity", ".", "shape", "[", "1", "]", ")", ",", "1.", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "real_imgs", ".", "get_device", "(", ")", ")", "\n", "fake_label", "=", "torch", ".", "full", "(", "(", "real_validity", ".", "shape", "[", "0", "]", ",", "real_validity", ".", "shape", "[", "1", "]", ")", ",", "0.", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "real_imgs", ".", "get_device", "(", ")", ")", "\n", "d_real_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "real_validity", ",", "real_label", ")", "\n", "d_fake_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "fake_validity", ",", "fake_label", ")", "\n", "d_loss", "=", "d_real_loss", "+", "d_fake_loss", "\n", "", "", "elif", "args", ".", "loss", "==", "'wgangp'", ":", "\n", "            ", "gradient_penalty", "=", "compute_gradient_penalty", "(", "dis_net", ",", "real_imgs", ",", "fake_imgs", ".", "detach", "(", ")", ",", "args", ".", "phi", ")", "\n", "d_loss", "=", "-", "torch", ".", "mean", "(", "real_validity", ")", "+", "torch", ".", "mean", "(", "fake_validity", ")", "+", "gradient_penalty", "*", "10", "/", "(", "\n", "args", ".", "phi", "**", "2", ")", "\n", "", "elif", "args", ".", "loss", "==", "'wgangp-mode'", ":", "\n", "            ", "gradient_penalty", "=", "compute_gradient_penalty", "(", "dis_net", ",", "real_imgs", ",", "fake_imgs", ".", "detach", "(", ")", ",", "args", ".", "phi", ")", "\n", "d_loss", "=", "-", "torch", ".", "mean", "(", "real_validity", ")", "+", "torch", ".", "mean", "(", "fake_validity", ")", "+", "gradient_penalty", "*", "10", "/", "(", "\n", "args", ".", "phi", "**", "2", ")", "\n", "", "elif", "args", ".", "loss", "==", "'wgangp-eps'", ":", "\n", "            ", "gradient_penalty", "=", "compute_gradient_penalty", "(", "dis_net", ",", "real_imgs", ",", "fake_imgs", ".", "detach", "(", ")", ",", "args", ".", "phi", ")", "\n", "d_loss", "=", "-", "torch", ".", "mean", "(", "real_validity", ")", "+", "torch", ".", "mean", "(", "fake_validity", ")", "+", "gradient_penalty", "*", "10", "/", "(", "\n", "args", ".", "phi", "**", "2", ")", "\n", "d_loss", "+=", "(", "torch", ".", "mean", "(", "real_validity", ")", "**", "2", ")", "*", "1e-3", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "args", ".", "loss", ")", "\n", "", "d_loss", "=", "d_loss", "/", "float", "(", "args", ".", "accumulated_times", ")", "\n", "d_loss", ".", "backward", "(", ")", "\n", "\n", "if", "(", "iter_idx", "+", "1", ")", "%", "args", ".", "accumulated_times", "==", "0", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "dis_net", ".", "parameters", "(", ")", ",", "5.", ")", "\n", "dis_optimizer", ".", "step", "(", ")", "\n", "dis_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'d_loss'", ",", "d_loss", ".", "item", "(", ")", ",", "global_steps", ")", "if", "args", ".", "rank", "==", "0", "else", "0", "\n", "\n", "# -----------------", "\n", "#  Train Generator", "\n", "# -----------------", "\n", "", "if", "global_steps", "%", "(", "args", ".", "n_critic", "*", "args", ".", "accumulated_times", ")", "==", "0", ":", "\n", "\n", "            ", "for", "accumulated_idx", "in", "range", "(", "args", ".", "g_accumulated_times", ")", ":", "\n", "                ", "gen_z", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "args", ".", "gen_batch_size", ",", "args", ".", "latent_dim", ")", ")", ")", "\n", "gen_imgs", "=", "gen_net", "(", "gen_z", ",", "epoch", ")", "\n", "fake_validity", "=", "dis_net", "(", "gen_imgs", ")", "\n", "\n", "# cal loss", "\n", "loss_lz", "=", "torch", ".", "tensor", "(", "0", ")", "\n", "if", "args", ".", "loss", "==", "\"standard\"", ":", "\n", "                    ", "real_label", "=", "torch", ".", "full", "(", "(", "args", ".", "gen_batch_size", ",", ")", ",", "1.", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "real_imgs", ".", "get_device", "(", ")", ")", "\n", "fake_validity", "=", "nn", ".", "Sigmoid", "(", ")", "(", "fake_validity", ".", "view", "(", "-", "1", ")", ")", "\n", "g_loss", "=", "nn", ".", "BCELoss", "(", ")", "(", "fake_validity", ".", "view", "(", "-", "1", ")", ",", "real_label", ")", "\n", "", "if", "args", ".", "loss", "==", "\"lsgan\"", ":", "\n", "                    ", "if", "isinstance", "(", "fake_validity", ",", "list", ")", ":", "\n", "                        ", "g_loss", "=", "0", "\n", "for", "fake_validity_item", "in", "fake_validity", ":", "\n", "                            ", "real_label", "=", "torch", ".", "full", "(", "(", "fake_validity_item", ".", "shape", "[", "0", "]", ",", "fake_validity_item", ".", "shape", "[", "1", "]", ")", ",", "1.", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "real_imgs", ".", "get_device", "(", ")", ")", "\n", "g_loss", "+=", "nn", ".", "MSELoss", "(", ")", "(", "fake_validity_item", ",", "real_label", ")", "\n", "", "", "else", ":", "\n", "                        ", "real_label", "=", "torch", ".", "full", "(", "(", "fake_validity", ".", "shape", "[", "0", "]", ",", "fake_validity", ".", "shape", "[", "1", "]", ")", ",", "1.", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "real_imgs", ".", "get_device", "(", ")", ")", "\n", "# fake_validity = nn.Sigmoid()(fake_validity.view(-1))", "\n", "g_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "fake_validity", ",", "real_label", ")", "\n", "", "", "elif", "args", ".", "loss", "==", "'wgangp-mode'", ":", "\n", "                    ", "fake_image1", ",", "fake_image2", "=", "gen_imgs", "[", ":", "args", ".", "gen_batch_size", "//", "2", "]", ",", "gen_imgs", "[", "args", ".", "gen_batch_size", "//", "2", ":", "]", "\n", "z_random1", ",", "z_random2", "=", "gen_z", "[", ":", "args", ".", "gen_batch_size", "//", "2", "]", ",", "gen_z", "[", "args", ".", "gen_batch_size", "//", "2", ":", "]", "\n", "lz", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "fake_image2", "-", "fake_image1", ")", ")", "/", "torch", ".", "mean", "(", "\n", "torch", ".", "abs", "(", "z_random2", "-", "z_random1", ")", ")", "\n", "eps", "=", "1", "*", "1e-5", "\n", "loss_lz", "=", "1", "/", "(", "lz", "+", "eps", ")", "\n", "\n", "g_loss", "=", "-", "torch", ".", "mean", "(", "fake_validity", ")", "+", "loss_lz", "\n", "", "else", ":", "\n", "                    ", "g_loss", "=", "-", "torch", ".", "mean", "(", "fake_validity", ")", "\n", "", "g_loss", "=", "g_loss", "/", "float", "(", "args", ".", "g_accumulated_times", ")", "\n", "g_loss", ".", "backward", "(", ")", "\n", "\n", "", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "gen_net", ".", "parameters", "(", ")", ",", "5.", ")", "\n", "gen_optimizer", ".", "step", "(", ")", "\n", "gen_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# adjust learning rate", "\n", "if", "schedulers", ":", "\n", "                ", "gen_scheduler", ",", "dis_scheduler", "=", "schedulers", "\n", "g_lr", "=", "gen_scheduler", ".", "step", "(", "global_steps", ")", "\n", "d_lr", "=", "dis_scheduler", ".", "step", "(", "global_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'LR/g_lr'", ",", "g_lr", ",", "global_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'LR/d_lr'", ",", "d_lr", ",", "global_steps", ")", "\n", "\n", "# moving average weight", "\n", "", "ema_nimg", "=", "args", ".", "ema_kimg", "*", "1000", "\n", "cur_nimg", "=", "args", ".", "dis_batch_size", "*", "args", ".", "world_size", "*", "global_steps", "\n", "if", "args", ".", "ema_warmup", "!=", "0", ":", "\n", "                ", "ema_nimg", "=", "min", "(", "ema_nimg", ",", "cur_nimg", "*", "args", ".", "ema_warmup", ")", "\n", "ema_beta", "=", "0.5", "**", "(", "float", "(", "args", ".", "dis_batch_size", "*", "args", ".", "world_size", ")", "/", "max", "(", "ema_nimg", ",", "1e-8", ")", ")", "\n", "", "else", ":", "\n", "                ", "ema_beta", "=", "args", ".", "ema", "\n", "\n", "# moving average weight", "\n", "", "for", "p", ",", "avg_p", "in", "zip", "(", "gen_net", ".", "parameters", "(", ")", ",", "gen_avg_param", ")", ":", "\n", "                ", "cpu_p", "=", "deepcopy", "(", "p", ")", "\n", "avg_p", ".", "mul_", "(", "ema_beta", ")", ".", "add_", "(", "1.", "-", "ema_beta", ",", "cpu_p", ".", "cpu", "(", ")", ".", "data", ")", "\n", "del", "cpu_p", "\n", "\n", "", "writer", ".", "add_scalar", "(", "'g_loss'", ",", "g_loss", ".", "item", "(", ")", ",", "global_steps", ")", "if", "args", ".", "rank", "==", "0", "else", "0", "\n", "gen_step", "+=", "1", "\n", "\n", "# verbose", "\n", "", "if", "gen_step", "and", "iter_idx", "%", "args", ".", "print_freq", "==", "0", "and", "args", ".", "rank", "==", "0", ":", "\n", "            ", "sample_imgs", "=", "torch", ".", "cat", "(", "(", "gen_imgs", "[", ":", "16", "]", ",", "real_imgs", "[", ":", "16", "]", ")", ",", "dim", "=", "0", ")", "\n", "#             scale_factor = args.img_size // int(sample_imgs.size(3))", "\n", "#             sample_imgs = torch.nn.functional.interpolate(sample_imgs, scale_factor=2)", "\n", "#             img_grid = make_grid(sample_imgs, nrow=4, normalize=True, scale_each=True)", "\n", "#             save_image(sample_imgs, f'sampled_images_{args.exp_name}.jpg', nrow=4, normalize=True, scale_each=True)", "\n", "# writer.add_image(f'sampled_images_{args.exp_name}', img_grid, global_steps)", "\n", "tqdm", ".", "write", "(", "\n", "\"[Epoch %d/%d] [Batch %d/%d] [D loss: %f] [G loss: %f] [ema: %f] \"", "%", "\n", "(", "epoch", ",", "args", ".", "max_epoch", ",", "iter_idx", "%", "len", "(", "train_loader", ")", ",", "len", "(", "train_loader", ")", ",", "d_loss", ".", "item", "(", ")", ",", "g_loss", ".", "item", "(", ")", ",", "ema_beta", ")", ")", "\n", "del", "gen_imgs", "\n", "del", "real_imgs", "\n", "del", "fake_validity", "\n", "del", "real_validity", "\n", "del", "g_loss", "\n", "del", "d_loss", "\n", "\n", "", "writer_dict", "[", "'train_global_steps'", "]", "=", "global_steps", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.get_is": [[247, 274], ["gen_net.eval.eval", "list", "range", "logger.info", "get_inception_score", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "gen_net.eval.mul_().add_().clamp_().permute().to().numpy", "list.extend", "numpy.random.normal", "list", "gen_net.eval.mul_().add_().clamp_().permute().to", "gen_net.eval.mul_().add_().clamp_().permute", "gen_net.eval.mul_().add_().clamp_", "gen_net.eval.mul_().add_", "gen_net.eval.mul_", "gen_net.eval."], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_score.get_inception_score"], ["", "", "def", "get_is", "(", "args", ",", "gen_net", ":", "nn", ".", "Module", ",", "num_img", ")", ":", "\n", "    ", "\"\"\"\n    Get inception score.\n    :param args:\n    :param gen_net:\n    :param num_img:\n    :return: Inception score\n    \"\"\"", "\n", "\n", "# eval mode", "\n", "gen_net", "=", "gen_net", ".", "eval", "(", ")", "\n", "\n", "eval_iter", "=", "num_img", "//", "args", ".", "eval_batch_size", "\n", "img_list", "=", "list", "(", ")", "\n", "for", "_", "in", "range", "(", "eval_iter", ")", ":", "\n", "        ", "z", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "args", ".", "eval_batch_size", ",", "args", ".", "latent_dim", ")", ")", ")", "\n", "\n", "# Generate a batch of images", "\n", "gen_imgs", "=", "gen_net", "(", "z", ")", ".", "mul_", "(", "127.5", ")", ".", "add_", "(", "127.5", ")", ".", "clamp_", "(", "0.0", ",", "255.0", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "to", "(", "'cpu'", ",", "\n", "torch", ".", "uint8", ")", ".", "numpy", "(", ")", "\n", "img_list", ".", "extend", "(", "list", "(", "gen_imgs", ")", ")", "\n", "\n", "# get inception score", "\n", "", "logger", ".", "info", "(", "'calculate Inception score...'", ")", "\n", "mean", ",", "std", "=", "get_inception_score", "(", "img_list", ")", "\n", "\n", "return", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.validate": [[276, 339], ["gen_net.eval", "logger.info", "print", "print", "utils.torch_fid_score.get_fid", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score.get_fid"], ["", "def", "validate", "(", "args", ",", "fixed_z", ",", "fid_stat", ",", "epoch", ",", "gen_net", ":", "nn", ".", "Module", ",", "writer_dict", ",", "clean_dir", "=", "True", ")", ":", "\n", "    ", "writer", "=", "writer_dict", "[", "'writer'", "]", "\n", "global_steps", "=", "writer_dict", "[", "'valid_global_steps'", "]", "\n", "\n", "# eval mode", "\n", "gen_net", ".", "eval", "(", ")", "\n", "\n", "#     generate images", "\n", "#     with torch.no_grad():", "\n", "#         sample_imgs = gen_net(fixed_z, epoch)", "\n", "#     img_grid = make_grid(sample_imgs, nrow=5, normalize=True, scale_each=True)", "\n", "\n", "#     get fid and inception score", "\n", "#     if args.gpu == 0:", "\n", "#         fid_buffer_dir = os.path.join(args.path_helper['sample_path'], 'fid_buffer')", "\n", "#         os.makedirs(fid_buffer_dir, exist_ok=True) if args.gpu == 0 else 0", "\n", "\n", "#     eval_iter = args.num_eval_imgs // args.eval_batch_size", "\n", "#     img_list = list()", "\n", "#     for iter_idx in tqdm(range(eval_iter), desc='sample images'):", "\n", "#         z = torch.cuda.FloatTensor(np.random.normal(0, 1, (args.eval_batch_size, args.latent_dim)))", "\n", "\n", "#         # Generate a batch of images", "\n", "#         gen_imgs = gen_net(z, epoch).mul_(127.5).add_(127.5).clamp_(0.0, 255.0).permute(0, 2, 3, 1).to('cpu',", "\n", "#                                                                                                 torch.uint8).numpy()", "\n", "#         for img_idx, img in enumerate(gen_imgs):", "\n", "#             file_name = os.path.join(fid_buffer_dir, f'iter{iter_idx}_b{img_idx}.png')", "\n", "#             imsave(file_name, img)", "\n", "#         img_list.extend(list(gen_imgs))", "\n", "\n", "#     get inception score", "\n", "logger", ".", "info", "(", "'=> calculate inception score'", ")", "if", "args", ".", "rank", "==", "0", "else", "0", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "#         mean, std = get_inception_score(img_list)", "\n", "        ", "mean", ",", "std", "=", "0", ",", "0", "\n", "", "else", ":", "\n", "        ", "mean", ",", "std", "=", "0", ",", "0", "\n", "", "print", "(", "f\"Inception score: {mean}\"", ")", "if", "args", ".", "rank", "==", "0", "else", "0", "\n", "#     mean, std = 0, 0", "\n", "# get fid score", "\n", "print", "(", "'=> calculate fid score'", ")", "if", "args", ".", "rank", "==", "0", "else", "0", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "fid_score", "=", "get_fid", "(", "args", ",", "fid_stat", ",", "epoch", ",", "gen_net", ",", "args", ".", "num_eval_imgs", ",", "args", ".", "gen_batch_size", ",", "args", ".", "eval_batch_size", ",", "writer_dict", "=", "writer_dict", ",", "cls_idx", "=", "None", ")", "\n", "", "else", ":", "\n", "        ", "fid_score", "=", "10000", "\n", "# fid_score = 10000", "\n", "", "print", "(", "f\"FID score: {fid_score}\"", ")", "if", "args", ".", "rank", "==", "0", "else", "0", "\n", "\n", "#     if args.gpu == 0:", "\n", "#         if clean_dir:", "\n", "#             os.system('rm -r {}'.format(fid_buffer_dir))", "\n", "#         else:", "\n", "#             logger.info(f'=> sampled images are saved to {fid_buffer_dir}')", "\n", "\n", "#     writer.add_image('sampled_images', img_grid, global_steps)", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'Inception_score/mean'", ",", "mean", ",", "global_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'Inception_score/std'", ",", "std", ",", "global_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'FID_score'", ",", "fid_score", ",", "global_steps", ")", "\n", "\n", "writer_dict", "[", "'valid_global_steps'", "]", "=", "global_steps", "+", "1", "\n", "\n", "", "return", "mean", ",", "fid_score", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.save_samples": [[341, 356], ["gen_net.eval", "torch.no_grad", "torch.no_grad", "fixed_z.size", "range", "torch.cat", "torch.cat", "os.makedirs", "utils.utils.save_image", "fixed_z.size", "gen_net", "torch.cat.append"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.save_image"], ["", "def", "save_samples", "(", "args", ",", "fixed_z", ",", "fid_stat", ",", "epoch", ",", "gen_net", ":", "nn", ".", "Module", ",", "writer_dict", ",", "clean_dir", "=", "True", ")", ":", "\n", "\n", "# eval mode", "\n", "    ", "gen_net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# generate images", "\n", "        ", "batch_size", "=", "fixed_z", ".", "size", "(", "0", ")", "\n", "sample_imgs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "fixed_z", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "sample_img", "=", "gen_net", "(", "fixed_z", "[", "i", ":", "(", "i", "+", "1", ")", "]", ",", "epoch", ")", "\n", "sample_imgs", ".", "append", "(", "sample_img", ")", "\n", "", "sample_imgs", "=", "torch", ".", "cat", "(", "sample_imgs", ",", "dim", "=", "0", ")", "\n", "os", ".", "makedirs", "(", "f\"./samples/{args.exp_name}\"", ",", "exist_ok", "=", "True", ")", "\n", "save_image", "(", "sample_imgs", ",", "f'./samples/{args.exp_name}/sampled_images_{epoch}.png'", ",", "nrow", "=", "10", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.get_topk_arch_hidden": [[358, 395], ["logger.info", "controller.eval", "controller.sample", "range", "logger.info", "len", "logger.info", "gen_net.set_arch", "functions.get_is", "logger.info", "logger.info", "topk_archs.append", "topk_hxs.append", "topk_cxs.append", "sorted", "hxs[].detach().requires_grad_", "cxs[].detach().requires_grad_", "arch_idx_perf_table.items", "operator.itemgetter", "hxs[].detach", "cxs[].detach"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Generator.set_arch", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.get_is"], ["", "def", "get_topk_arch_hidden", "(", "args", ",", "controller", ",", "gen_net", ",", "prev_archs", ",", "prev_hiddens", ")", ":", "\n", "    ", "\"\"\"\n    ~\n    :param args:\n    :param controller:\n    :param gen_net:\n    :param prev_archs: previous architecture\n    :param prev_hiddens: previous hidden vector\n    :return: a list of topk archs and hiddens.\n    \"\"\"", "\n", "logger", ".", "info", "(", "f'=> get top{args.topk} archs out of {args.num_candidate} candidate archs...'", ")", "\n", "assert", "args", ".", "num_candidate", ">=", "args", ".", "topk", "\n", "controller", ".", "eval", "(", ")", "\n", "cur_stage", "=", "controller", ".", "cur_stage", "\n", "archs", ",", "_", ",", "_", ",", "hiddens", "=", "controller", ".", "sample", "(", "args", ".", "num_candidate", ",", "with_hidden", "=", "True", ",", "prev_archs", "=", "prev_archs", ",", "\n", "prev_hiddens", "=", "prev_hiddens", ")", "\n", "hxs", ",", "cxs", "=", "hiddens", "\n", "arch_idx_perf_table", "=", "{", "}", "\n", "for", "arch_idx", "in", "range", "(", "len", "(", "archs", ")", ")", ":", "\n", "        ", "logger", ".", "info", "(", "f'arch: {archs[arch_idx]}'", ")", "\n", "gen_net", ".", "set_arch", "(", "archs", "[", "arch_idx", "]", ",", "cur_stage", ")", "\n", "is_score", "=", "get_is", "(", "args", ",", "gen_net", ",", "args", ".", "rl_num_eval_img", ")", "\n", "logger", ".", "info", "(", "f'get Inception score of {is_score}'", ")", "\n", "arch_idx_perf_table", "[", "arch_idx", "]", "=", "is_score", "\n", "", "topk_arch_idx_perf", "=", "sorted", "(", "arch_idx_perf_table", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", "[", ":", ":", "-", "1", "]", "[", ":", "args", ".", "topk", "]", "\n", "topk_archs", "=", "[", "]", "\n", "topk_hxs", "=", "[", "]", "\n", "topk_cxs", "=", "[", "]", "\n", "logger", ".", "info", "(", "f'top{args.topk} archs:'", ")", "\n", "for", "arch_idx_perf", "in", "topk_arch_idx_perf", ":", "\n", "        ", "logger", ".", "info", "(", "arch_idx_perf", ")", "\n", "arch_idx", "=", "arch_idx_perf", "[", "0", "]", "\n", "topk_archs", ".", "append", "(", "archs", "[", "arch_idx", "]", ")", "\n", "topk_hxs", ".", "append", "(", "hxs", "[", "arch_idx", "]", ".", "detach", "(", ")", ".", "requires_grad_", "(", "False", ")", ")", "\n", "topk_cxs", ".", "append", "(", "cxs", "[", "arch_idx", "]", ".", "detach", "(", ")", ".", "requires_grad_", "(", "False", ")", ")", "\n", "\n", "", "return", "topk_archs", ",", "(", "topk_hxs", ",", "topk_cxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.load_params": [[419, 429], ["zip", "zip", "model.parameters", "copy.deepcopy", "p.data.copy_", "model.parameters", "p.data.copy_", "copy.deepcopy.cuda().to", "copy.deepcopy.cuda"], "function", ["None"], ["", "", "def", "load_params", "(", "model", ",", "new_param", ",", "args", ",", "mode", "=", "\"gpu\"", ")", ":", "\n", "    ", "if", "mode", "==", "\"cpu\"", ":", "\n", "        ", "for", "p", ",", "new_p", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "new_param", ")", ":", "\n", "            ", "cpu_p", "=", "deepcopy", "(", "new_p", ")", "\n", "p", ".", "data", ".", "copy_", "(", "cpu_p", ".", "cuda", "(", ")", ".", "to", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "del", "cpu_p", "\n", "\n", "", "", "else", ":", "\n", "        ", "for", "p", ",", "new_p", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "new_param", ")", ":", "\n", "            ", "p", ".", "data", ".", "copy_", "(", "new_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.functions.copy_params": [[431, 440], ["model.parameters", "copy.deepcopy", "copy.deepcopy().cpu", "copy.deepcopy.append", "list", "copy.deepcopy", "model.parameters"], "function", ["None"], ["", "", "", "def", "copy_params", "(", "model", ",", "mode", "=", "'cpu'", ")", ":", "\n", "    ", "if", "mode", "==", "'gpu'", ":", "\n", "        ", "flatten", "=", "[", "]", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "cpu_p", "=", "deepcopy", "(", "p", ")", ".", "cpu", "(", ")", "\n", "flatten", ".", "append", "(", "cpu_p", ".", "data", ")", "\n", "", "", "else", ":", "\n", "        ", "flatten", "=", "deepcopy", "(", "list", "(", "p", ".", "data", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", ")", "\n", "", "return", "flatten", "\n", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.test.validate": [[41, 82], ["gen_net.eval", "utils.fid_score.calculate_fid_given_paths", "torch.no_grad", "torch.no_grad", "torch.no_grad", "list", "tqdm.tqdm", "print", "print", "open", "print", "writer.add_scalar", "range", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "gen_net().mul_().add_().clamp_().permute().to().numpy", "list.extend", "numpy.random.normal", "list", "str", "gen_net().mul_().add_().clamp_().permute().to", "str", "gen_net().mul_().add_().clamp_().permute", "gen_net().mul_().add_().clamp_", "gen_net().mul_().add_", "gen_net().mul_", "gen_net"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.calculate_fid_given_paths"], ["def", "validate", "(", "args", ",", "fixed_z", ",", "fid_stat", ",", "epoch", ",", "gen_net", ":", "nn", ".", "Module", ",", "writer_dict", ",", "clean_dir", "=", "True", ")", ":", "\n", "    ", "writer", "=", "writer_dict", "[", "'writer'", "]", "\n", "global_steps", "=", "writer_dict", "[", "'valid_global_steps'", "]", "\n", "\n", "# eval mode", "\n", "gen_net", ".", "eval", "(", ")", "\n", "\n", "#     generate images", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#         sample_imgs = gen_net(fixed_z, epoch)", "\n", "#         img_grid = make_grid(sample_imgs, nrow=5, normalize=True, scale_each=True)", "\n", "\n", "\n", "        ", "eval_iter", "=", "args", ".", "num_eval_imgs", "//", "args", ".", "eval_batch_size", "\n", "img_list", "=", "list", "(", ")", "\n", "for", "iter_idx", "in", "tqdm", "(", "range", "(", "eval_iter", ")", ",", "desc", "=", "'sample images'", ")", ":", "\n", "            ", "z", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "args", ".", "eval_batch_size", ",", "args", ".", "latent_dim", ")", ")", ")", "\n", "\n", "# Generate a batch of images", "\n", "gen_imgs", "=", "gen_net", "(", "z", ",", "epoch", ")", ".", "mul_", "(", "127.5", ")", ".", "add_", "(", "127.5", ")", ".", "clamp_", "(", "0.0", ",", "255.0", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "to", "(", "'cpu'", ",", "torch", ".", "uint8", ")", ".", "numpy", "(", ")", "\n", "img_list", ".", "extend", "(", "list", "(", "gen_imgs", ")", ")", "\n", "\n", "#     mean, std = 0, 0", "\n", "# get fid score", "\n", "#     mean, std = get_inception_score(img_list)", "\n", "#     print(f\"IS score: {mean}\")", "\n", "", "", "print", "(", "'=> calculate fid score'", ")", "if", "args", ".", "rank", "==", "0", "else", "0", "\n", "fid_score", "=", "calculate_fid_given_paths", "(", "[", "img_list", ",", "fid_stat", "]", ",", "inception_path", "=", "None", ")", "\n", "# fid_score = 10000", "\n", "print", "(", "f\"FID score: {fid_score}\"", ")", "if", "args", ".", "rank", "==", "0", "else", "0", "\n", "with", "open", "(", "f'output/{args.exp_name}.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "print", "(", "'fid:'", "+", "str", "(", "fid_score", ")", "+", "'epoch'", "+", "str", "(", "epoch", ")", ",", "file", "=", "f", ")", "\n", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "#         writer.add_scalar('Inception_score/mean', mean, global_steps)", "\n", "#         writer.add_scalar('Inception_score/std', std, global_steps)", "\n", "        ", "writer", ".", "add_scalar", "(", "'FID_score'", ",", "fid_score", ",", "global_steps", ")", "\n", "\n", "#         writer_dict['valid_global_steps'] = global_steps + 1", "\n", "\n", "", "return", "0", ",", "fid_score", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.test.main": [[83, 138], ["cfg.parse_args", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "os.path.exists", "os.path.exists", "utils.utils.set_log_dir", "utils.utils.create_logger", "utils.inception_score._init_inception", "utils.fid_score.check_or_download_inception", "utils.fid_score.create_inception_graph", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "os.path.exists", "os.path.exists", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "utils.utils.create_logger.info", "os.path.exists", "os.path.exists", "torch.load", "torch.load", "torch.load", "utils.utils.create_logger.info", "functions.validate", "utils.utils.create_logger.info", "torch.nn.DataParallel.to", "cfg.parse_args.dataset.lower", "numpy.random.normal", "torch.nn.DataParallel.load_state_dict", "utils.utils.create_logger.info", "torch.nn.DataParallel.load_state_dict", "utils.utils.create_logger.info", "tensorboardX.SummaryWriter", "cfg.parse_args.dataset.lower", "eval", "cfg.parse_args.dataset.lower", "NotImplementedError", "cfg.parse_args.dataset.lower"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.set_log_dir", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.create_logger", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_score._init_inception", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.check_or_download_inception", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.create_inception_graph", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.test.validate"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "cfg", ".", "parse_args", "(", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "random_seed", ")", "\n", "assert", "args", ".", "exp_name", "\n", "#     assert args.load_path.endswith('.pth')", "\n", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "load_path", ")", "\n", "args", ".", "path_helper", "=", "set_log_dir", "(", "'logs_eval'", ",", "args", ".", "exp_name", ")", "\n", "logger", "=", "create_logger", "(", "args", ".", "path_helper", "[", "'log_path'", "]", ",", "phase", "=", "'test'", ")", "\n", "\n", "# set tf env", "\n", "_init_inception", "(", ")", "\n", "inception_path", "=", "check_or_download_inception", "(", "None", ")", "\n", "create_inception_graph", "(", "inception_path", ")", "\n", "\n", "# import network", "\n", "gen_net", "=", "eval", "(", "'models_search.'", "+", "args", ".", "gen_model", "+", "'.Generator'", ")", "(", "args", "=", "args", ")", ".", "cuda", "(", ")", "\n", "gen_net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "gen_net", ".", "to", "(", "\"cuda:0\"", ")", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "# fid stat", "\n", "if", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "        ", "fid_stat", "=", "'fid_stat/fid_stats_cifar10_train.npz'", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10_flip'", ":", "\n", "        ", "fid_stat", "=", "'fid_stat/fid_stats_cifar10_train.npz'", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'stl10'", ":", "\n", "        ", "fid_stat", "=", "'fid_stat/stl10_train_unlabeled_fid_stats_48.npz'", "\n", "", "elif", "args", ".", "fid_stat", "is", "not", "None", ":", "\n", "        ", "fid_stat", "=", "args", ".", "fid_stat", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'no fid stat for {args.dataset.lower()}'", ")", "\n", "", "assert", "os", ".", "path", ".", "exists", "(", "fid_stat", ")", "\n", "\n", "# initial", "\n", "fixed_z", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "4", ",", "args", ".", "latent_dim", ")", ")", ")", "\n", "\n", "# set writer", "\n", "logger", ".", "info", "(", "f'=> resuming from {args.load_path}'", ")", "\n", "checkpoint_file", "=", "args", ".", "load_path", "\n", "assert", "os", ".", "path", ".", "exists", "(", "checkpoint_file", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_file", ")", "\n", "\n", "if", "'avg_gen_state_dict'", "in", "checkpoint", ":", "\n", "        ", "gen_net", ".", "load_state_dict", "(", "checkpoint", "[", "'avg_gen_state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "logger", ".", "info", "(", "f'=> loaded checkpoint {checkpoint_file} (epoch {epoch})'", ")", "\n", "", "else", ":", "\n", "        ", "gen_net", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "logger", ".", "info", "(", "f'=> loaded checkpoint {checkpoint_file}'", ")", "\n", "\n", "", "logger", ".", "info", "(", "args", ")", "\n", "writer_dict", "=", "{", "\n", "'writer'", ":", "SummaryWriter", "(", "args", ".", "path_helper", "[", "'log_path'", "]", ")", ",", "\n", "'valid_global_steps'", ":", "0", ",", "\n", "}", "\n", "inception_score", ",", "fid_score", "=", "validate", "(", "args", ",", "fixed_z", ",", "fid_stat", ",", "epoch", ",", "gen_net", ",", "writer_dict", ",", "clean_dir", "=", "False", ")", "\n", "logger", ".", "info", "(", "f'Inception score: {inception_score}, FID score: {fid_score}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.None.datasets.ImageDataset.__init__": [[14, 193], ["args.dataset.lower", "torchvision.Compose", "torchvision.Compose", "Dt", "Dt", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "args.dataset.lower", "torchvision.Compose", "torchvision.Compose", "Dt", "Dt", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Resize", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "args.dataset.lower", "torchvision.Compose", "torchvision.Compose", "Dt", "Dt", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Resize", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "args.dataset.lower", "torchvision.Compose", "torchvision.Compose", "Dt", "Dt", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Resize", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "args.dataset.lower", "torchvision.Compose", "torchvision.Compose", "Dt", "Dt", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Resize", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "args.dataset.lower", "torchvision.Compose", "torchvision.Compose", "Dt", "Dt", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "NotImplementedError", "torchvision.Resize", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Resize", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "cur_img_size", "=", "None", ",", "bs", "=", "None", ")", ":", "\n", "        ", "bs", "=", "args", ".", "dis_batch_size", "if", "bs", "==", "None", "else", "bs", "\n", "img_size", "=", "cur_img_size", "if", "args", ".", "fade_in", ">", "0", "else", "args", ".", "img_size", "\n", "if", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'cifar10'", ":", "\n", "            ", "Dt", "=", "datasets", ".", "CIFAR10", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "size", "=", "(", "img_size", ",", "img_size", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "args", ".", "n_classes", "=", "0", "\n", "train_dataset", "=", "Dt", "(", "root", "=", "args", ".", "data_path", ",", "train", "=", "True", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "val_dataset", "=", "Dt", "(", "root", "=", "args", ".", "data_path", ",", "train", "=", "False", ",", "transform", "=", "transform", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "self", ".", "train_sampler", "=", "train_sampler", "\n", "self", ".", "train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "self", ".", "valid", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ")", "\n", "\n", "self", ".", "test", "=", "self", ".", "valid", "\n", "\n", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'stl10'", ":", "\n", "            ", "Dt", "=", "datasets", ".", "STL10", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "img_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "\n", "train_dataset", "=", "Dt", "(", "root", "=", "args", ".", "data_path", ",", "split", "=", "'train+unlabeled'", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "val_dataset", "=", "Dt", "(", "root", "=", "args", ".", "data_path", ",", "split", "=", "'test'", ",", "transform", "=", "transform", ")", "\n", "if", "args", ".", "distributed", ":", "\n", "                ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "", "else", ":", "\n", "                ", "train_sampler", "=", "None", "\n", "val_sampler", "=", "None", "\n", "", "self", ".", "train_sampler", "=", "train_sampler", "\n", "self", ".", "train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "self", ".", "valid", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ")", "\n", "\n", "self", ".", "test", "=", "self", ".", "valid", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'celeba'", ":", "\n", "            ", "Dt", "=", "CelebA", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "size", "=", "(", "img_size", ",", "img_size", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "\n", "train_dataset", "=", "Dt", "(", "root", "=", "args", ".", "data_path", ",", "transform", "=", "transform", ")", "\n", "val_dataset", "=", "Dt", "(", "root", "=", "args", ".", "data_path", ",", "transform", "=", "transform", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "self", ".", "train_sampler", "=", "train_sampler", "\n", "self", ".", "train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "self", ".", "valid", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ")", "\n", "\n", "self", ".", "test", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ")", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'ffhq'", ":", "\n", "            ", "Dt", "=", "FFHQ", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "size", "=", "(", "img_size", ",", "img_size", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "\n", "train_dataset", "=", "Dt", "(", "root", "=", "args", ".", "data_path", ",", "transform", "=", "transform", ")", "\n", "val_dataset", "=", "Dt", "(", "root", "=", "args", ".", "data_path", ",", "transform", "=", "transform", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "self", ".", "train_sampler", "=", "train_sampler", "\n", "\n", "self", ".", "train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "self", ".", "valid", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ")", "\n", "\n", "self", ".", "test", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ")", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'bedroom'", ":", "\n", "            ", "Dt", "=", "datasets", ".", "LSUN", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "size", "=", "(", "img_size", ",", "img_size", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "\n", "train_dataset", "=", "Dt", "(", "root", "=", "args", ".", "data_path", ",", "classes", "=", "[", "\"bedroom_train\"", "]", ",", "transform", "=", "transform", ")", "\n", "val_dataset", "=", "Dt", "(", "root", "=", "args", ".", "data_path", ",", "classes", "=", "[", "\"bedroom_val\"", "]", ",", "transform", "=", "transform", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "self", ".", "train_sampler", "=", "train_sampler", "\n", "self", ".", "train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "self", ".", "valid", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ")", "\n", "\n", "self", ".", "test", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ")", "\n", "", "elif", "args", ".", "dataset", ".", "lower", "(", ")", "==", "'church'", ":", "\n", "            ", "Dt", "=", "datasets", ".", "LSUN", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "size", "=", "(", "img_size", ",", "img_size", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ",", "\n", "]", ")", "\n", "\n", "train_dataset", "=", "Dt", "(", "root", "=", "args", ".", "data_path", ",", "classes", "=", "[", "\"church_outdoor_train\"", "]", ",", "transform", "=", "transform", ")", "\n", "val_dataset", "=", "Dt", "(", "root", "=", "args", ".", "data_path", ",", "classes", "=", "[", "\"church_outdoor_val\"", "]", ",", "transform", "=", "transform", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "self", ".", "train_sampler", "=", "train_sampler", "\n", "self", ".", "train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "self", ".", "valid", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ")", "\n", "\n", "self", ".", "test", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "dis_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "val_sampler", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Unknown dataset: {}'", ".", "format", "(", "args", ".", "dataset", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_score.get_inception_score": [[31, 61], ["type", "type", "len", "numpy.max", "numpy.min", "img.astype.astype", "inps.append", "tensorflow.Session", "int", "tqdm.tqdm", "numpy.concatenate", "range", "sess.close", "numpy.mean", "numpy.std", "numpy.expand_dims", "math.ceil", "range", "sys.stdout.flush", "numpy.concatenate", "sess.run", "np.concatenate.append", "numpy.mean", "scores.append", "numpy.sum", "numpy.exp", "float", "float", "min", "numpy.log", "numpy.log", "len", "len", "numpy.expand_dims", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.close", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.std", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["def", "get_inception_score", "(", "images", ",", "splits", "=", "10", ")", ":", "\n", "    ", "assert", "(", "type", "(", "images", ")", "==", "list", ")", "\n", "assert", "(", "type", "(", "images", "[", "0", "]", ")", "==", "np", ".", "ndarray", ")", "\n", "assert", "(", "len", "(", "images", "[", "0", "]", ".", "shape", ")", "==", "3", ")", "\n", "assert", "(", "np", ".", "max", "(", "images", "[", "0", "]", ")", ">", "10", ")", "\n", "assert", "(", "np", ".", "min", "(", "images", "[", "0", "]", ")", ">=", "0.0", ")", "\n", "inps", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inps", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "bs", "=", "128", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "preds", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "inps", ")", ")", "/", "float", "(", "bs", ")", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "n_batches", ")", ",", "desc", "=", "\"Calculate inception score\"", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "inp", "=", "inps", "[", "(", "i", "*", "bs", ")", ":", "min", "(", "(", "i", "+", "1", ")", "*", "bs", ",", "len", "(", "inps", ")", ")", "]", "\n", "inp", "=", "np", ".", "concatenate", "(", "inp", ",", "0", ")", "\n", "pred", "=", "sess", ".", "run", "(", "softmax", ",", "{", "'ExpandDims:0'", ":", "inp", "}", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "", "preds", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "            ", "part", "=", "preds", "[", "(", "i", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "\n", "", "sess", ".", "close", "(", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_score._init_inception": [[64, 106], ["os.path.join", "os.path.join", "tarfile.open().extractall", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "DATA_URL.split", "os.path.exists", "os.path.exists", "six.moves.urllib.request.urlretrieve", "print", "os.stat", "os.stat", "print", "tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "tensorflow.Session", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name.graph.get_operations", "enumerate", "tensorflow.matmul", "tensorflow.nn.softmax", "sess.close", "sys.stdout.write", "sys.stdout.flush", "tarfile.open", "os.path.join", "os.path.join", "f.read", "tensorflow.squeeze", "o.get_shape", "sess.graph.get_operation_by_name", "enumerate", "tensorflow.TensorShape", "new_shape.append", "new_shape.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.close", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.flush"], ["", "def", "_init_inception", "(", ")", ":", "\n", "    ", "global", "softmax", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "MODEL_DIR", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "\n", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "MODEL_DIR", ")", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "\n", "MODEL_DIR", ",", "'classify_image_graph_def.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "# Works with an arbitrary minibatch size.", "\n", "", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'pool_3:0'", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "            ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "                ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "if", "shape", ".", "_dims", "!=", "[", "]", ":", "\n", "                    ", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "                        ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "                            ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                            ", "new_shape", ".", "append", "(", "s", ")", "\n", "", "", "o", ".", "__dict__", "[", "'_shape_val'", "]", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "\n", "", "", "", "w", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "\"softmax/logits/MatMul\"", ")", ".", "inputs", "[", "1", "]", "\n", "logits", "=", "tf", ".", "matmul", "(", "tf", ".", "squeeze", "(", "pool3", ",", "[", "1", ",", "2", "]", ")", ",", "w", ")", "\n", "softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "sess", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception.InceptionV3.__init__": [[31, 127], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.parameters", "inception.fid_inception_v3", "torchvision.models.inception_v3", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.fid_inception_v3"], ["def", "__init__", "(", "self", ",", "\n", "output_blocks", "=", "[", "DEFAULT_BLOCK_INDEX", "]", ",", "\n", "resize_input", "=", "True", ",", "\n", "normalize_input", "=", "True", ",", "\n", "requires_grad", "=", "False", ",", "\n", "use_fid_inception", "=", "True", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n        Parameters\n        ----------\n        output_blocks : list of int\n            Indices of blocks to return features of. Possible values are:\n                - 0: corresponds to output of first max pooling\n                - 1: corresponds to output of second max pooling\n                - 2: corresponds to output which is fed to aux classifier\n                - 3: corresponds to output of final average pooling\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, scales the input from range (0, 1) to the range the\n            pretrained Inception network expects, namely (-1, 1)\n        requires_grad : bool\n            If true, parameters of the model require gradients. Possibly useful\n            for finetuning the network\n        use_fid_inception : bool\n            If true, uses the pretrained Inception model used in Tensorflow's\n            FID implementation. If false, uses the pretrained Inception model\n            available in torchvision. The FID Inception model has different\n            weights and a slightly different structure from torchvision's\n            Inception model. If you want to compute FID scores, you are\n            strongly advised to set this parameter to true to get comparable\n            results.\n        \"\"\"", "\n", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "use_fid_inception", ":", "\n", "            ", "inception", "=", "fid_inception_v3", "(", ")", "\n", "", "else", ":", "\n", "            ", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception.InceptionV3.forward": [[128, 161], ["enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block", "outp.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "\n", "size", "=", "(", "299", ",", "299", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception.FIDInceptionA.__init__": [[192, 194], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ")", ":", "\n", "        ", "super", "(", "FIDInceptionA", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "pool_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception.FIDInceptionA.forward": [[195, 213], ["inception.FIDInceptionA.branch1x1", "inception.FIDInceptionA.branch5x5_1", "inception.FIDInceptionA.branch5x5_2", "inception.FIDInceptionA.branch3x3dbl_1", "inception.FIDInceptionA.branch3x3dbl_2", "inception.FIDInceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception.FIDInceptionC.__init__": [[218, 220], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ")", ":", "\n", "        ", "super", "(", "FIDInceptionC", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "channels_7x7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception.FIDInceptionC.forward": [[221, 242], ["inception.FIDInceptionC.branch1x1", "inception.FIDInceptionC.branch7x7_1", "inception.FIDInceptionC.branch7x7_2", "inception.FIDInceptionC.branch7x7_3", "inception.FIDInceptionC.branch7x7dbl_1", "inception.FIDInceptionC.branch7x7dbl_2", "inception.FIDInceptionC.branch7x7dbl_3", "inception.FIDInceptionC.branch7x7dbl_4", "inception.FIDInceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch7x7", "=", "self", ".", "branch7x7_1", "(", "x", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_2", "(", "branch7x7", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_3", "(", "branch7x7", ")", "\n", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception.FIDInceptionE_1.__init__": [[247, 249], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_1", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception.FIDInceptionE_1.forward": [[250, 276], ["inception.FIDInceptionE_1.branch1x1", "inception.FIDInceptionE_1.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3dbl_1", "inception.FIDInceptionE_1.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionE_1.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3_2a", "inception.FIDInceptionE_1.branch3x3_2b", "inception.FIDInceptionE_1.branch3x3dbl_3a", "inception.FIDInceptionE_1.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception.FIDInceptionE_2.__init__": [[281, 283], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_2", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception.FIDInceptionE_2.forward": [[284, 311], ["inception.FIDInceptionE_2.branch1x1", "inception.FIDInceptionE_2.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3dbl_1", "inception.FIDInceptionE_2.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception.FIDInceptionE_2.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3_2a", "inception.FIDInceptionE_2.branch3x3_2b", "inception.FIDInceptionE_2.branch3x3dbl_3a", "inception.FIDInceptionE_2.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: The FID Inception model uses max pooling instead of average", "\n", "# pooling. This is likely an error in this specific Inception", "\n", "# implementation, as other Inception models use average pooling here", "\n", "# (which matches the description in the paper).", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception.fid_inception_v3": [[163, 187], ["torchvision.models.inception_v3", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionE_1", "inception.FIDInceptionE_2", "load_state_dict_from_url", "models.inception_v3.load_state_dict"], "function", ["None"], ["", "", "def", "fid_inception_v3", "(", ")", ":", "\n", "    ", "\"\"\"Build pretrained Inception model for FID computation\n    The Inception model for FID computation uses a different set of weights\n    and has a slightly different structure than torchvision's Inception.\n    This method first constructs torchvision's Inception and then patches the\n    necessary parts that are different in the FID Inception model.\n    \"\"\"", "\n", "inception", "=", "models", ".", "inception_v3", "(", "num_classes", "=", "1008", ",", "\n", "aux_logits", "=", "False", ",", "\n", "pretrained", "=", "False", ",", "\n", "init_weights", "=", "False", ")", "\n", "inception", ".", "Mixed_5b", "=", "FIDInceptionA", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "inception", ".", "Mixed_5c", "=", "FIDInceptionA", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_5d", "=", "FIDInceptionA", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_6b", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "inception", ".", "Mixed_6c", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6d", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6e", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "inception", ".", "Mixed_7b", "=", "FIDInceptionE_1", "(", "1280", ")", "\n", "inception", ".", "Mixed_7c", "=", "FIDInceptionE_2", "(", "2048", ")", "\n", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "FID_WEIGHTS_URL", ",", "progress", "=", "True", ")", "\n", "inception", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "inception", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score._get_no_grad_ctx_mgr": [[54, 62], ["contextlib.suppress", "torch.no_grad", "float"], "function", ["None"], ["def", "_get_no_grad_ctx_mgr", "(", "require_grad", ")", ":", "\n", "    ", "\"\"\"Returns a the `torch.no_grad` context manager for PyTorch version >=\n    0.4, or a no-op context manager otherwise.\n    \"\"\"", "\n", "if", "not", "require_grad", "and", "float", "(", "torch", ".", "__version__", "[", "0", ":", "3", "]", ")", ">=", "0.4", ":", "\n", "        ", "return", "torch", ".", "no_grad", "(", ")", "\n", "\n", "", "return", "contextlib", ".", "suppress", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score.sqrt_newton_schulz": [[65, 80], ["A.mul().sum().sum().sqrt", "A.div().to", "torch.eye().view().repeat().type().to", "torch.eye().view().repeat().type().to", "range", "A.type", "Y.bmm.bmm", "T.bmm", "torch.sqrt().view().expand_as", "A.mul().sum().sum", "A.div", "torch.eye().view().repeat().type", "torch.eye().view().repeat().type", "A.mul().sum().sum().sqrt.view().expand_as", "T.bmm.bmm", "torch.sqrt().view", "A.mul().sum", "torch.eye().view().repeat", "torch.eye().view().repeat", "A.mul().sum().sum().sqrt.view", "torch.sqrt", "A.mul", "torch.eye().view", "torch.eye().view", "torch.eye", "torch.eye"], "function", ["None"], ["", "def", "sqrt_newton_schulz", "(", "A", ",", "numIters", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "if", "dtype", "is", "None", ":", "\n", "        ", "dtype", "=", "A", ".", "type", "(", ")", "\n", "", "batchSize", "=", "A", ".", "shape", "[", "0", "]", "\n", "dim", "=", "A", ".", "shape", "[", "1", "]", "\n", "normA", "=", "A", ".", "mul", "(", "A", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "sqrt", "(", ")", "\n", "Y", "=", "A", ".", "div", "(", "normA", ".", "view", "(", "batchSize", ",", "1", ",", "1", ")", ".", "expand_as", "(", "A", ")", ")", ".", "to", "(", "\"cuda:0\"", ")", "\n", "I", "=", "torch", ".", "eye", "(", "dim", ",", "dim", ")", ".", "view", "(", "1", ",", "dim", ",", "dim", ")", ".", "repeat", "(", "batchSize", ",", "1", ",", "1", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "\"cuda:0\"", ")", "\n", "Z", "=", "torch", ".", "eye", "(", "dim", ",", "dim", ")", ".", "view", "(", "1", ",", "dim", ",", "dim", ")", ".", "repeat", "(", "batchSize", ",", "1", ",", "1", ")", ".", "type", "(", "dtype", ")", ".", "to", "(", "\"cuda:0\"", ")", "\n", "for", "i", "in", "range", "(", "numIters", ")", ":", "\n", "        ", "T", "=", "0.5", "*", "(", "3.0", "*", "I", "-", "Z", ".", "bmm", "(", "Y", ")", ")", "\n", "Y", "=", "Y", ".", "bmm", "(", "T", ")", "\n", "Z", "=", "T", ".", "bmm", "(", "Z", ")", "\n", "", "sA", "=", "Y", "*", "torch", ".", "sqrt", "(", "normA", ")", ".", "view", "(", "batchSize", ",", "1", ",", "1", ")", ".", "expand_as", "(", "A", ")", "\n", "return", "sA", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score.torch_cov": [[84, 112], ["torch.mean", "m.t.t", "m.t.dim", "ValueError", "m.t.dim", "m.t.view", "m.t.t", "m.t.matmul().squeeze", "m.t.size", "m.t.size", "m.t.matmul"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "torch_cov", "(", "m", ",", "rowvar", "=", "False", ")", ":", "\n", "    ", "'''Estimate a covariance matrix given data.\n    Covariance indicates the level to which two variables vary together.\n    If we examine N-dimensional samples, `X = [x_1, x_2, ... x_N]^T`,\n    then the covariance matrix element `C_{ij}` is the covariance of\n    `x_i` and `x_j`. The element `C_{ii}` is the variance of `x_i`.\n    Args:\n        m: A 1-D or 2-D array containing multiple variables and observations.\n            Each row of `m` represents a variable, and each column a single\n            observation of all those variables.\n        rowvar: If `rowvar` is True, then each row represents a\n            variable, with observations in the columns. Otherwise, the\n            relationship is transposed: each column represents a variable,\n            while the rows contain observations.\n    Returns:\n        The covariance matrix of the variables.\n    '''", "\n", "if", "m", ".", "dim", "(", ")", ">", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'m has more than 2 dimensions'", ")", "\n", "", "if", "m", ".", "dim", "(", ")", "<", "2", ":", "\n", "        ", "m", "=", "m", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "if", "not", "rowvar", "and", "m", ".", "size", "(", "0", ")", "!=", "1", ":", "\n", "        ", "m", "=", "m", ".", "t", "(", ")", "\n", "# m = m.type(torch.double)  # uncomment this line if desired", "\n", "", "fact", "=", "1.0", "/", "(", "m", ".", "size", "(", "1", ")", "-", "1", ")", "\n", "m", "-=", "torch", ".", "mean", "(", "m", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "mt", "=", "m", ".", "t", "(", ")", "# if complex: mt = m.t().conj()", "\n", "return", "fact", "*", "m", ".", "matmul", "(", "mt", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score.get_activations": [[114, 177], ["torch.cat", "torch.no_grad", "gen_net.eval", "model.eval", "tqdm", "range", "torch.cuda.FloatTensor", "gen_net", "model.to", "print", "numpy.random.normal", "print", "model", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d.view", "images.to"], "function", ["None"], ["", "def", "get_activations", "(", "args", ",", "gen_net", ",", "model", ",", "batch_size", "=", "50", ",", "dims", "=", "2048", ",", "\n", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : Batch size of images for the model to process at once.\n                     Make sure that the number of samples is a multiple of\n                     the batch size, otherwise some samples are ignored. This\n                     behavior is retained to match the original FID score\n                     implementation.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the number\n                     of calculated batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "gen_net", ".", "eval", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "#         if gen_imgs.shape[0] % batch_size != 0:", "\n", "#             print(('Warning: number of images is not a multiple of the '", "\n", "#                    'batch size. Some samples are going to be ignored.'))", "\n", "#         if batch_size > gen_imgs.shape[0]:", "\n", "#             print(('Warning: batch size is bigger than the data size. '", "\n", "#                    'Setting batch size to data size'))", "\n", "#             batch_size = gen_imgs.shape[0]", "\n", "\n", "n_batches", "=", "args", ".", "num_eval_imgs", "//", "batch_size", "\n", "\n", "# normalize", "\n", "\n", "pred_arr", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "n_batches", ")", ")", ":", "\n", "            ", "z", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "(", "batch_size", ",", "args", ".", "latent_dim", ")", ")", ")", "\n", "gen_imgs", "=", "gen_net", "(", "z", ",", "200", ")", "\n", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "'\\rPropagating batch %d/%d'", "%", "(", "i", "+", "1", ",", "n_batches", ")", ",", "\n", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "\n", "images", "=", "(", "gen_imgs", "+", "1.0", ")", "/", "2.0", "\n", "model", ".", "to", "(", "\"cuda:0\"", ")", "\n", "pred", "=", "model", "(", "images", ".", "to", "(", "\"cuda:0\"", ")", ")", "[", "0", "]", "\n", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "if", "pred", ".", "shape", "[", "2", "]", "!=", "1", "or", "pred", ".", "shape", "[", "3", "]", "!=", "1", ":", "\n", "                ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "pred_arr", "+=", "[", "pred", ".", "view", "(", "batch_size", ",", "-", "1", ")", "]", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "'done'", ")", "\n", "", "del", "images", "\n", "\n", "", "return", "torch", ".", "cat", "(", "pred_arr", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score.torch_calculate_frechet_distance": [[179, 210], ["sqrt_newton_schulz().squeeze", "torch_fid_score.sqrt_newton_schulz", "torch.trace", "torch.trace", "sigma1.mm().unsqueeze", "diff.dot", "torch.trace", "sigma1.mm"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score.sqrt_newton_schulz"], ["", "def", "torch_calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Pytorch implementation of the Frechet Distance.\n    Taken from https://github.com/bioinf-jku/TTUR\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n    Stable version by Dougal J. Sutherland.\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representive data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representive data set.\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "# Run 50 itrs of newton-schulz to get the matrix sqrt of sigma1 dot sigma2", "\n", "covmean", "=", "sqrt_newton_schulz", "(", "sigma1", ".", "mm", "(", "sigma2", ")", ".", "unsqueeze", "(", "0", ")", ",", "50", ")", ".", "squeeze", "(", ")", "\n", "out", "=", "(", "diff", ".", "dot", "(", "diff", ")", "+", "torch", ".", "trace", "(", "sigma1", ")", "+", "torch", ".", "trace", "(", "sigma2", ")", "\n", "-", "2", "*", "torch", ".", "trace", "(", "covmean", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score.calculate_activation_statistics": [[212, 235], ["torch_fid_score.get_activations", "torch.mean", "torch_fid_score.torch_cov"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.get_activations", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score.torch_cov"], ["", "def", "calculate_activation_statistics", "(", "gen_net", ",", "model", ",", "batch_size", "=", "50", ",", "\n", "dims", "=", "2048", ",", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- gen_imgs    : gen_imgs, tensor\n    -- model       : Instance of inception model\n    -- batch_size  : The images numpy array is split into batches with\n                     batch size batch_size. A reasonable batch size\n                     depends on the hardware.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the\n                     number of calculated batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the inception model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the inception model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "gen_net", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ",", "verbose", ")", "\n", "mu", "=", "torch", ".", "mean", "(", "act", ",", "dim", "=", "0", ")", "\n", "sigma", "=", "torch_cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score._compute_statistics_of_path": [[237, 253], ["isinstance", "path.endswith", "numpy.load", "np.load.close", "torch_fid_score.calculate_activation_statistics"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.close", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.calculate_activation_statistics"], ["", "def", "_compute_statistics_of_path", "(", "args", ",", "path", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", ":", "\n", "    ", "if", "isinstance", "(", "path", ",", "str", ")", ":", "\n", "        ", "assert", "path", ".", "endswith", "(", "'.npz'", ")", "\n", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "if", "'mean'", "in", "f", ":", "\n", "            ", "m", ",", "s", "=", "f", "[", "'mean'", "]", "[", ":", "]", ",", "f", "[", "'cov'", "]", "[", ":", "]", "\n", "", "else", ":", "\n", "            ", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "# a tensor", "\n", "        ", "gen_net", "=", "path", "\n", "m", ",", "s", "=", "calculate_activation_statistics", "(", "args", ",", "gen_net", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "\n", "", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score.calculate_fid_given_paths_torch": [[255, 289], ["os.path.exists", "RuntimeError", "torch_fid_score._get_no_grad_ctx_mgr", "utils.inception.InceptionV3", "torch_fid_score._compute_statistics_of_path", "torch_fid_score._compute_statistics_of_path", "torch_fid_score.torch_calculate_frechet_distance", "utils.inception.InceptionV3.cuda", "m1.to", "s1.to", "torch.tensor().float().cuda().to", "torch.tensor().float().cuda().to", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score._get_no_grad_ctx_mgr", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score._compute_statistics_of_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score._compute_statistics_of_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score.torch_calculate_frechet_distance"], ["", "def", "calculate_fid_given_paths_torch", "(", "args", ",", "gen_net", ",", "path", ",", "require_grad", "=", "False", ",", "gen_batch_size", "=", "1", ",", "batch_size", "=", "1", ",", "cuda", "=", "True", ",", "dims", "=", "2048", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the FID of two paths\n    :param gen_imgs: The value range of gen_imgs should be (-1, 1). Just the output of tanh.\n    :param path: fid file path. *.npz.\n    :param batch_size:\n    :param cuda:\n    :param dims:\n    :return:\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Invalid path: %s'", "%", "path", ")", "\n", "\n", "", "assert", "args", ".", "num_eval_imgs", ">=", "dims", ",", "f'gen_imgs size: {args.num_eval_imgs}'", "# or will lead to nan", "\n", "\n", "with", "_get_no_grad_ctx_mgr", "(", "require_grad", "=", "require_grad", ")", ":", "\n", "\n", "        ", "block_idx", "=", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "\n", "model", "=", "InceptionV3", "(", "[", "block_idx", "]", ")", "\n", "if", "cuda", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "m1", ",", "s1", "=", "_compute_statistics_of_path", "(", "args", ",", "gen_net", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "# print(f'generated stat: {m1}, {s1}')", "\n", "m2", ",", "s2", "=", "_compute_statistics_of_path", "(", "args", ",", "path", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "# print(f'GT stat: {m2}, {s2}')", "\n", "fid_value", "=", "torch_calculate_frechet_distance", "(", "m1", ".", "to", "(", "\"cuda:0\"", ")", ",", "s1", ".", "to", "(", "\"cuda:0\"", ")", ",", "torch", ".", "tensor", "(", "m2", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ".", "to", "(", "\"cuda:0\"", ")", ",", "\n", "torch", ".", "tensor", "(", "s2", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ".", "to", "(", "\"cuda:0\"", ")", ")", "\n", "del", "model", "\n", "\n", "", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score.get_fid": [[291, 326], ["gen_net.eval", "torch.no_grad", "gen_net.eval", "torch_fid_score.calculate_fid_given_paths_torch", "writer.add_scalar"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.torch_fid_score.calculate_fid_given_paths_torch"], ["", "def", "get_fid", "(", "args", ",", "fid_stat", ",", "epoch", ",", "gen_net", ",", "num_img", ",", "gen_batch_size", ",", "val_batch_size", ",", "writer_dict", "=", "None", ",", "cls_idx", "=", "None", ")", ":", "\n", "    ", "gen_net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# eval mode", "\n", "        ", "gen_net", ".", "eval", "(", ")", "\n", "\n", "#         eval_iter = num_img // gen_batch_size", "\n", "#         img_list = []", "\n", "#         for _ in tqdm(range(eval_iter), desc='sample images'):", "\n", "#             z = torch.cuda.FloatTensor(np.random.normal(0, 1, (gen_batch_size, args.latent_dim)))", "\n", "\n", "#             # Generate a batch of images", "\n", "#             if args.n_classes > 0:", "\n", "#                 if cls_idx is not None:", "\n", "#                     label = torch.ones(z.shape[0]) * cls_idx", "\n", "#                     label = label.type(torch.cuda.LongTensor)", "\n", "#                 else:", "\n", "#                     label = torch.randint(low=0, high=args.n_classes, size=(z.shape[0],), device='cuda')", "\n", "#                 gen_imgs = gen_net(z, epoch)", "\n", "#             else:", "\n", "#                 gen_imgs = gen_net(z, epoch)", "\n", "#             if isinstance(gen_imgs, tuple):", "\n", "#                 gen_imgs = gen_imgs[0]", "\n", "#             img_list += [gen_imgs]", "\n", "\n", "#         img_list = torch.cat(img_list, 0)", "\n", "fid_score", "=", "calculate_fid_given_paths_torch", "(", "args", ",", "gen_net", ",", "fid_stat", ",", "gen_batch_size", "=", "gen_batch_size", ",", "batch_size", "=", "val_batch_size", ")", "\n", "\n", "", "if", "writer_dict", ":", "\n", "        ", "writer", "=", "writer_dict", "[", "'writer'", "]", "\n", "global_steps", "=", "writer_dict", "[", "'valid_global_steps'", "]", "\n", "writer", ".", "add_scalar", "(", "'FID_score'", ",", "fid_score", ",", "global_steps", ")", "\n", "writer_dict", "[", "'valid_global_steps'", "]", "=", "global_steps", "+", "1", "\n", "\n", "", "return", "fid_score", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.create_inception_graph": [[40, 47], ["tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "f.read"], "function", ["None"], ["", "def", "create_inception_graph", "(", "pth", ")", ":", "\n", "    ", "\"\"\"Creates a graph from saved GraphDef file.\"\"\"", "\n", "# Creates graph from saved graph_def.pb.", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "pth", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "'FID_Inception_Net'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score._get_inception_layer": [[54, 72], ["sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name.graph.get_operations", "enumerate", "o.get_shape", "enumerate", "tensorflow.TensorShape", "new_shape.append", "new_shape.append"], "function", ["None"], ["", "", "def", "_get_inception_layer", "(", "sess", ")", ":", "\n", "    ", "\"\"\"Prepares inception net for batched usage and returns pool_3 layer. \"\"\"", "\n", "layername", "=", "'FID_Inception_Net/pool_3:0'", "\n", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "layername", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "            ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "if", "shape", ".", "_dims", "!=", "[", "]", ":", "\n", "                ", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "                    ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "                        ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                        ", "new_shape", ".", "append", "(", "s", ")", "\n", "", "", "o", ".", "__dict__", "[", "'_shape_val'", "]", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "\n", "", "", "", "return", "pool3", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.get_activations": [[77, 111], ["fid_score._get_inception_layer", "len", "numpy.empty", "tqdm.tqdm", "print", "range", "sess.run", "sess.run.reshape", "print", "print"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score._get_inception_layer"], ["", "def", "get_activations", "(", "images", ",", "sess", ",", "batch_size", "=", "16", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n\n    Params:\n    -- images      : Numpy array of dimension (n_images, hi, wi, 3). The values\n                     must lie between 0 and 256.\n    -- sess        : current session\n    -- batch_size  : the images numpy array is split into batches with batch size\n                     batch_size. A reasonable batch size depends on the disposable hardware.\n    -- verbose    : If set to True and parameter out_step is given, the number of calculated\n                     batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, 2048) that contains the\n       activations of the given tensor when feeding inception with the query tensor.\n    \"\"\"", "\n", "inception_layer", "=", "_get_inception_layer", "(", "sess", ")", "\n", "d0", "=", "len", "(", "images", ")", "\n", "if", "batch_size", ">", "d0", ":", "\n", "        ", "print", "(", "\"warning: batch size is bigger than the data size. setting batch size to data size\"", ")", "\n", "batch_size", "=", "d0", "\n", "", "n_batches", "=", "d0", "//", "batch_size", "\n", "n_used_imgs", "=", "n_batches", "*", "batch_size", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "n_used_imgs", ",", "2048", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "n_batches", ")", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"\\rPropagating batch %d/%d\"", "%", "(", "i", "+", "1", ",", "n_batches", ")", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "batch", "=", "images", "[", "start", ":", "end", "]", "\n", "pred", "=", "sess", ".", "run", "(", "inception_layer", ",", "{", "'FID_Inception_Net/ExpandDims:0'", ":", "batch", "}", ")", "\n", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\" done\"", ")", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.calculate_frechet_distance": [[116, 168], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "warnings.warn", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n\n    Stable version by Dougal J. Sutherland.\n\n    Params:\n    -- mu1 : Numpy array containing the activations of the pool_3 layer of the\n             inception net ( like returned by the function 'get_predictions')\n             for generated samples.\n    -- mu2   : The sample mean over activations of the pool_3 layer, precalcualted\n               on an representive data set.\n    -- sigma1: The covariance matrix over activations of the pool_3 layer for\n               generated samples.\n    -- sigma2: The covariance matrix over activations of the pool_3 layer,\n               precalcualted on an representive data set.\n\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "\"Training and test mean vectors have different lengths\"", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "\"Training and test covariances have different dimensions\"", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "\"fid calculation produces singular product; adding %s to diagonal of cov estimates\"", "%", "eps", "\n", "warnings", ".", "warn", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "\"Imaginary component {}\"", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.calculate_activation_statistics": [[173, 193], ["fid_score.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.get_activations", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "calculate_activation_statistics", "(", "images", ",", "sess", ",", "batch_size", "=", "16", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- images      : Numpy array of dimension (n_images, hi, wi, 3). The values\n                     must lie between 0 and 255.\n    -- sess        : current session\n    -- batch_size  : the images numpy array is split into batches with batch size\n                     batch_size. A reasonable batch size depends on the available hardware.\n    -- verbose     : If set to True and parameter out_step is given, the number of calculated\n                     batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the incption model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the incption model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "images", ",", "sess", ",", "batch_size", ",", "verbose", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.load_image_batch": [[202, 210], ["numpy.array", "imageio.imread().astype", "imageio.imread", "str"], "function", ["None"], ["", "def", "load_image_batch", "(", "files", ")", ":", "\n", "    ", "\"\"\"Convenience method for batch-loading images\n    Params:\n    -- files    : list of paths to image files. Images need to have same dimensions for all files.\n    Returns:\n    -- A numpy array of dimensions (num_images,hi, wi, 3) representing the image pixel values.\n    \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "imread", "(", "str", "(", "fn", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "for", "fn", "in", "files", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.get_activations_from_files": [[212, 246], ["fid_score._get_inception_layer", "len", "numpy.empty", "range", "print", "fid_score.load_image_batch", "sess.run", "sess.run.reshape", "print", "print"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score._get_inception_layer", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.load_image_batch"], ["", "def", "get_activations_from_files", "(", "files", ",", "sess", ",", "batch_size", "=", "16", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n\n    Params:\n    -- files      : list of paths to image files. Images need to have same dimensions for all files.\n    -- sess        : current session\n    -- batch_size  : the images numpy array is split into batches with batch size\n                     batch_size. A reasonable batch size depends on the disposable hardware.\n    -- verbose    : If set to True and parameter out_step is given, the number of calculated\n                     batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, 2048) that contains the\n       activations of the given tensor when feeding inception with the query tensor.\n    \"\"\"", "\n", "inception_layer", "=", "_get_inception_layer", "(", "sess", ")", "\n", "d0", "=", "len", "(", "files", ")", "\n", "if", "batch_size", ">", "d0", ":", "\n", "        ", "print", "(", "\"warning: batch size is bigger than the data size. setting batch size to data size\"", ")", "\n", "batch_size", "=", "d0", "\n", "", "n_batches", "=", "d0", "//", "batch_size", "\n", "n_used_imgs", "=", "n_batches", "*", "batch_size", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "n_used_imgs", ",", "2048", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"\\rPropagating batch %d/%d\"", "%", "(", "i", "+", "1", ",", "n_batches", ")", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "batch", "=", "load_image_batch", "(", "files", "[", "start", ":", "end", "]", ")", "\n", "pred", "=", "sess", ".", "run", "(", "inception_layer", ",", "{", "'FID_Inception_Net/ExpandDims:0'", ":", "batch", "}", ")", "\n", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "del", "batch", "# clean up memory", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\" done\"", ")", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.calculate_activation_statistics_from_files": [[248, 267], ["fid_score.get_activations_from_files", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.get_activations_from_files", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "calculate_activation_statistics_from_files", "(", "files", ",", "sess", ",", "batch_size", "=", "1", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- files      : list of paths to image files. Images need to have same dimensions for all files.\n    -- sess        : current session\n    -- batch_size  : the images numpy array is split into batches with batch size\n                     batch_size. A reasonable batch size depends on the available hardware.\n    -- verbose     : If set to True and parameter out_step is given, the number of calculated\n                     batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the incption model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the incption model.\n    \"\"\"", "\n", "act", "=", "get_activations_from_files", "(", "files", ",", "sess", ",", "batch_size", ",", "verbose", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.check_or_download_inception": [[277, 293], ["pathlib.Path", "str", "model_file.exists", "print", "request.urlretrieve", "tarfile.open", "f.extract", "str"], "function", ["None"], ["", "def", "check_or_download_inception", "(", "inception_path", ")", ":", "\n", "    ", "\"\"\" Checks if the path to the inception file is valid, or downloads\n        the file if it is not present. \"\"\"", "\n", "INCEPTION_URL", "=", "'http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz'", "\n", "if", "inception_path", "is", "None", ":", "\n", "        ", "inception_path", "=", "'/tmp'", "\n", "", "inception_path", "=", "pathlib", ".", "Path", "(", "inception_path", ")", "\n", "model_file", "=", "inception_path", "/", "'classify_image_graph_def.pb'", "\n", "if", "not", "model_file", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "\"Downloading Inception model\"", ")", "\n", "from", "urllib", "import", "request", "\n", "import", "tarfile", "\n", "fn", ",", "_", "=", "request", ".", "urlretrieve", "(", "INCEPTION_URL", ")", "\n", "with", "tarfile", ".", "open", "(", "fn", ",", "mode", "=", "'r'", ")", "as", "f", ":", "\n", "            ", "f", ".", "extract", "(", "'classify_image_graph_def.pb'", ",", "str", "(", "model_file", ".", "parent", ")", ")", "\n", "", "", "return", "str", "(", "model_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score._handle_path": [[295, 311], ["isinstance", "numpy.load", "np.load.close", "fid_score.calculate_activation_statistics_from_files", "fid_score.calculate_activation_statistics"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.close", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.calculate_activation_statistics_from_files", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.calculate_activation_statistics"], ["", "def", "_handle_path", "(", "path", ",", "sess", ",", "low_profile", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "path", ",", "str", ")", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "#         path = pathlib.Path(path)", "\n", "        ", "files", "=", "path", "\n", "if", "low_profile", ":", "\n", "            ", "m", ",", "s", "=", "calculate_activation_statistics_from_files", "(", "files", ",", "sess", ")", "\n", "", "else", ":", "\n", "#             x = np.array([imread(str(fn)).astype(np.float32) for fn in files])", "\n", "            ", "x", "=", "path", "\n", "m", ",", "s", "=", "calculate_activation_statistics", "(", "x", ",", "sess", ")", "\n", "del", "x", "# clean up memory", "\n", "", "", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.calculate_fid_given_paths": [[313, 331], ["tensorflow.ConfigProto", "sess.close", "tensorflow.Session", "sess.run", "fid_score._handle_path", "fid_score._handle_path", "fid_score.calculate_frechet_distance", "tensorflow.global_variables_initializer"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.close", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score._handle_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score._handle_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.calculate_frechet_distance"], ["", "def", "calculate_fid_given_paths", "(", "paths", ",", "inception_path", ",", "low_profile", "=", "False", ")", ":", "\n", "    ", "\"\"\" Calculates the FID of two paths. \"\"\"", "\n", "# inception_path = check_or_download_inception(inception_path)", "\n", "\n", "#     for p in paths:", "\n", "#         if not os.path.exists(p):", "\n", "#             raise RuntimeError(\"Invalid path: %s\" % p)", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "m1", ",", "s1", "=", "_handle_path", "(", "paths", "[", "0", "]", ",", "sess", ",", "low_profile", "=", "low_profile", ")", "\n", "m2", ",", "s2", "=", "_handle_path", "(", "paths", "[", "1", "]", ",", "sess", ",", "low_profile", "=", "low_profile", ")", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "", "sess", ".", "close", "(", ")", "\n", "\n", "return", "fid_value", "\n", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.cal_fid_stat.parse_args": [[18, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--data_path'", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "'set path to training set jpg images dir'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'fid_stat/fid_stats_cifar10_train.npz'", ",", "\n", "help", "=", "'path for where to store the statistics'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "opt", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.cal_fid_stat.main": [[36, 71], ["cal_fid_stat.parse_args", "print", "utils.check_or_download_inception", "print", "print", "glob.glob", "numpy.array", "print", "print", "utils.create_inception_graph", "print", "print", "tensorflow.ConfigProto", "print", "os.path.join", "tensorflow.Session", "sess.run", "utils.calculate_activation_statistics", "numpy.savez_compressed", "imageio.imread().astype", "len", "tensorflow.global_variables_initializer", "imageio.imread", "str"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.check_or_download_inception", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.create_inception_graph", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.fid_score.calculate_activation_statistics"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "########", "\n", "# PATHS", "\n", "########", "\n", "data_path", "=", "args", ".", "data_path", "\n", "output_path", "=", "args", ".", "output_file", "\n", "# if you have downloaded and extracted", "\n", "#   http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz", "\n", "# set this path to the directory where the extracted files are, otherwise", "\n", "# just set it to None and the script will later download the files for you", "\n", "inception_path", "=", "None", "\n", "print", "(", "\"check for inception model..\"", ",", "end", "=", "\" \"", ",", "flush", "=", "True", ")", "\n", "inception_path", "=", "fid", ".", "check_or_download_inception", "(", "inception_path", ")", "# download inception if necessary", "\n", "print", "(", "\"ok\"", ")", "\n", "\n", "# loads all images into memory (this might require a lot of RAM!)", "\n", "print", "(", "\"load images..\"", ",", "end", "=", "\" \"", ",", "flush", "=", "True", ")", "\n", "image_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'*.jpg'", ")", ")", "\n", "images", "=", "np", ".", "array", "(", "[", "imread", "(", "str", "(", "fn", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "for", "fn", "in", "image_list", "]", ")", "\n", "print", "(", "\"%d images found and loaded\"", "%", "len", "(", "images", ")", ")", "\n", "\n", "print", "(", "\"create inception graph..\"", ",", "end", "=", "\" \"", ",", "flush", "=", "True", ")", "\n", "fid", ".", "create_inception_graph", "(", "inception_path", ")", "# load the graph into the current TF graph", "\n", "print", "(", "\"ok\"", ")", "\n", "\n", "print", "(", "\"calculte FID stats..\"", ",", "end", "=", "\" \"", ",", "flush", "=", "True", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "mu", ",", "sigma", "=", "fid", ".", "calculate_activation_statistics", "(", "images", ",", "sess", ",", "batch_size", "=", "100", ")", "\n", "np", ".", "savez_compressed", "(", "output_path", ",", "mu", "=", "mu", ",", "sigma", "=", "sigma", ")", "\n", "", "print", "(", "\"finished\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.InceptionV3.__init__": [[31, 127], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "inception_model.InceptionV3.blocks.append", "inception_model.InceptionV3.parameters", "inception_model.fid_inception_v3", "torchvision.models.inception_v3", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "inception_model.InceptionV3.blocks.append", "inception_model.InceptionV3.blocks.append", "inception_model.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.fid_inception_v3"], ["def", "__init__", "(", "self", ",", "\n", "output_blocks", "=", "[", "DEFAULT_BLOCK_INDEX", "]", ",", "\n", "resize_input", "=", "True", ",", "\n", "normalize_input", "=", "True", ",", "\n", "requires_grad", "=", "False", ",", "\n", "use_fid_inception", "=", "True", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n        Parameters\n        ----------\n        output_blocks : list of int\n            Indices of blocks to return features of. Possible values are:\n                - 0: corresponds to output of first max pooling\n                - 1: corresponds to output of second max pooling\n                - 2: corresponds to output which is fed to aux classifier\n                - 3: corresponds to output of final average pooling\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, scales the input from range (0, 1) to the range the\n            pretrained Inception network expects, namely (-1, 1)\n        requires_grad : bool\n            If true, parameters of the model require gradients. Possibly useful\n            for finetuning the network\n        use_fid_inception : bool\n            If true, uses the pretrained Inception model used in Tensorflow's\n            FID implementation. If false, uses the pretrained Inception model\n            available in torchvision. The FID Inception model has different\n            weights and a slightly different structure from torchvision's\n            Inception model. If you want to compute FID scores, you are\n            strongly advised to set this parameter to true to get comparable\n            results.\n        \"\"\"", "\n", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "use_fid_inception", ":", "\n", "            ", "inception", "=", "fid_inception_v3", "(", ")", "\n", "", "else", ":", "\n", "            ", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.InceptionV3.forward": [[128, 161], ["enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block", "outp.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "\n", "size", "=", "(", "299", ",", "299", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.FIDInceptionA.__init__": [[191, 193], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ")", ":", "\n", "        ", "super", "(", "FIDInceptionA", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "pool_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.FIDInceptionA.forward": [[194, 212], ["inception_model.FIDInceptionA.branch1x1", "inception_model.FIDInceptionA.branch5x5_1", "inception_model.FIDInceptionA.branch5x5_2", "inception_model.FIDInceptionA.branch3x3dbl_1", "inception_model.FIDInceptionA.branch3x3dbl_2", "inception_model.FIDInceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception_model.FIDInceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.FIDInceptionC.__init__": [[217, 219], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ")", ":", "\n", "        ", "super", "(", "FIDInceptionC", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "channels_7x7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.FIDInceptionC.forward": [[220, 241], ["inception_model.FIDInceptionC.branch1x1", "inception_model.FIDInceptionC.branch7x7_1", "inception_model.FIDInceptionC.branch7x7_2", "inception_model.FIDInceptionC.branch7x7_3", "inception_model.FIDInceptionC.branch7x7dbl_1", "inception_model.FIDInceptionC.branch7x7dbl_2", "inception_model.FIDInceptionC.branch7x7dbl_3", "inception_model.FIDInceptionC.branch7x7dbl_4", "inception_model.FIDInceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception_model.FIDInceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch7x7", "=", "self", ".", "branch7x7_1", "(", "x", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_2", "(", "branch7x7", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_3", "(", "branch7x7", ")", "\n", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.FIDInceptionE_1.__init__": [[246, 248], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_1", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.FIDInceptionE_1.forward": [[249, 275], ["inception_model.FIDInceptionE_1.branch1x1", "inception_model.FIDInceptionE_1.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception_model.FIDInceptionE_1.branch3x3dbl_1", "inception_model.FIDInceptionE_1.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception_model.FIDInceptionE_1.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception_model.FIDInceptionE_1.branch3x3_2a", "inception_model.FIDInceptionE_1.branch3x3_2b", "inception_model.FIDInceptionE_1.branch3x3dbl_3a", "inception_model.FIDInceptionE_1.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.FIDInceptionE_2.__init__": [[280, 282], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_2", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.FIDInceptionE_2.forward": [[283, 310], ["inception_model.FIDInceptionE_2.branch1x1", "inception_model.FIDInceptionE_2.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception_model.FIDInceptionE_2.branch3x3dbl_1", "inception_model.FIDInceptionE_2.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception_model.FIDInceptionE_2.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception_model.FIDInceptionE_2.branch3x3_2a", "inception_model.FIDInceptionE_2.branch3x3_2b", "inception_model.FIDInceptionE_2.branch3x3dbl_3a", "inception_model.FIDInceptionE_2.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: The FID Inception model uses max pooling instead of average", "\n", "# pooling. This is likely an error in this specific Inception", "\n", "# implementation, as other Inception models use average pooling here", "\n", "# (which matches the description in the paper).", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.inception_model.fid_inception_v3": [[163, 186], ["torchvision.models.inception_v3", "inception_model.FIDInceptionA", "inception_model.FIDInceptionA", "inception_model.FIDInceptionA", "inception_model.FIDInceptionC", "inception_model.FIDInceptionC", "inception_model.FIDInceptionC", "inception_model.FIDInceptionC", "inception_model.FIDInceptionE_1", "inception_model.FIDInceptionE_2", "load_state_dict_from_url", "models.inception_v3.load_state_dict"], "function", ["None"], ["", "", "def", "fid_inception_v3", "(", ")", ":", "\n", "    ", "\"\"\"Build pretrained Inception model for FID computation\n    The Inception model for FID computation uses a different set of weights\n    and has a slightly different structure than torchvision's Inception.\n    This method first constructs torchvision's Inception and then patches the\n    necessary parts that are different in the FID Inception model.\n    \"\"\"", "\n", "inception", "=", "models", ".", "inception_v3", "(", "num_classes", "=", "1008", ",", "\n", "aux_logits", "=", "False", ",", "\n", "pretrained", "=", "False", ")", "\n", "inception", ".", "Mixed_5b", "=", "FIDInceptionA", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "inception", ".", "Mixed_5c", "=", "FIDInceptionA", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_5d", "=", "FIDInceptionA", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_6b", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "inception", ".", "Mixed_6c", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6d", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6e", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "inception", ".", "Mixed_7b", "=", "FIDInceptionE_1", "(", "1280", ")", "\n", "inception", ".", "Mixed_7c", "=", "FIDInceptionE_2", "(", "2048", ")", "\n", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "FID_WEIGHTS_URL", ",", "progress", "=", "True", ")", "\n", "inception", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "inception", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.__init__": [[204, 210], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "WIN_SIZE", ")", ":", "\n", "        ", "self", ".", "mean", "=", "0", "\n", "self", ".", "run_var", "=", "0", "\n", "self", ".", "WIN_SIZE", "=", "WIN_SIZE", "\n", "\n", "self", ".", "window", "=", "collections", ".", "deque", "(", "maxlen", "=", "WIN_SIZE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.clear": [[211, 215], ["utils.RunningStats.window.clear"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "window", ".", "clear", "(", ")", "\n", "self", ".", "mean", "=", "0", "\n", "self", ".", "run_var", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.is_full": [[216, 218], ["len"], "methods", ["None"], ["", "def", "is_full", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "window", ")", "==", "self", ".", "WIN_SIZE", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.push": [[219, 234], ["len", "utils.RunningStats.window.popleft", "utils.RunningStats.window.append", "utils.RunningStats.window.append", "len"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "len", "(", "self", ".", "window", ")", "==", "self", ".", "WIN_SIZE", ":", "\n", "# Adjusting variance", "\n", "            ", "x_removed", "=", "self", ".", "window", ".", "popleft", "(", ")", "\n", "self", ".", "window", ".", "append", "(", "x", ")", "\n", "old_m", "=", "self", ".", "mean", "\n", "self", ".", "mean", "+=", "(", "x", "-", "x_removed", ")", "/", "self", ".", "WIN_SIZE", "\n", "self", ".", "run_var", "+=", "(", "x", "+", "x_removed", "-", "old_m", "-", "self", ".", "mean", ")", "*", "(", "x", "-", "x_removed", ")", "\n", "", "else", ":", "\n", "# Calculating first variance", "\n", "            ", "self", ".", "window", ".", "append", "(", "x", ")", "\n", "delta", "=", "x", "-", "self", ".", "mean", "\n", "self", ".", "mean", "+=", "delta", "/", "len", "(", "self", ".", "window", ")", "\n", "self", ".", "run_var", "+=", "delta", "*", "(", "x", "-", "self", ".", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.get_mean": [[235, 237], ["len"], "methods", ["None"], ["", "", "def", "get_mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "if", "len", "(", "self", ".", "window", ")", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.get_var": [[238, 240], ["len", "len"], "methods", ["None"], ["", "def", "get_var", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "run_var", "/", "len", "(", "self", ".", "window", ")", "if", "len", "(", "self", ".", "window", ")", ">", "1", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.get_std": [[241, 243], ["math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "utils.RunningStats.get_var"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.get_var"], ["", "def", "get_std", "(", "self", ")", ":", "\n", "        ", "return", "math", ".", "sqrt", "(", "self", ".", "get_var", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.get_all": [[244, 246], ["list"], "methods", ["None"], ["", "def", "get_all", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.__str__": [[247, 249], ["list"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Current window values: {}\"", ".", "format", "(", "list", "(", "self", ".", "window", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.make_grid": [[25, 125], ["torch.no_grad", "torch.no_grad", "isinstance", "torch.cat.size", "min", "int", "torch.cat.size", "torch.cat.new_full", "range", "TypeError", "kwargs.keys", "warnings.warn", "torch.stack", "torch.stack", "torch.cat.dim", "torch.cat.unsqueeze", "torch.cat.dim", "torch.cat.unsqueeze", "torch.cat", "torch.cat", "torch.cat.clone", "torch.cat.size", "torch.cat.squeeze", "math.ceil", "math.ceil", "int", "int", "range", "torch.is_tensor", "torch.is_tensor", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat.dim", "torch.cat.size", "isinstance", "img.clamp", "img.sub_().div_", "utils.make_grid.norm_range", "torch.uint8", "torch.uint8"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "make_grid", "(", "\n", "tensor", ":", "Union", "[", "torch", ".", "Tensor", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "nrow", ":", "int", "=", "8", ",", "\n", "padding", ":", "int", "=", "2", ",", "\n", "normalize", ":", "bool", "=", "False", ",", "\n", "value_range", ":", "Optional", "[", "Tuple", "[", "int", ",", "int", "]", "]", "=", "None", ",", "\n", "scale_each", ":", "bool", "=", "False", ",", "\n", "pad_value", ":", "int", "=", "0", ",", "\n", "**", "kwargs", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Make a grid of images.\n    Args:\n        tensor (Tensor or list): 4D mini-batch Tensor of shape (B x C x H x W)\n            or a list of images all of the same size.\n        nrow (int, optional): Number of images displayed in each row of the grid.\n            The final grid size is ``(B / nrow, nrow)``. Default: ``8``.\n        padding (int, optional): amount of padding. Default: ``2``.\n        normalize (bool, optional): If True, shift the image to the range (0, 1),\n            by the min and max values specified by :attr:`range`. Default: ``False``.\n        value_range (tuple, optional): tuple (min, max) where min and max are numbers,\n            then these numbers are used to normalize the image. By default, min and max\n            are computed from the tensor.\n        scale_each (bool, optional): If ``True``, scale each image in the batch of\n            images separately rather than the (min, max) over all images. Default: ``False``.\n        pad_value (float, optional): Value for the padded pixels. Default: ``0``.\n    Returns:\n        grid (Tensor): the tensor containing grid of images.\n    Example:\n        See this notebook\n        `here <https://github.com/pytorch/vision/blob/master/examples/python/visualization_utils.ipynb>`_\n    \"\"\"", "\n", "if", "not", "(", "torch", ".", "is_tensor", "(", "tensor", ")", "or", "\n", "(", "isinstance", "(", "tensor", ",", "list", ")", "and", "all", "(", "torch", ".", "is_tensor", "(", "t", ")", "for", "t", "in", "tensor", ")", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "f'tensor or list of tensors expected, got {type(tensor)}'", ")", "\n", "\n", "", "if", "\"range\"", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "        ", "warning", "=", "\"range will be deprecated, please use value_range instead.\"", "\n", "warnings", ".", "warn", "(", "warning", ")", "\n", "value_range", "=", "kwargs", "[", "\"range\"", "]", "\n", "\n", "# if list of tensors, convert to a 4D mini-batch Tensor", "\n", "", "if", "isinstance", "(", "tensor", ",", "list", ")", ":", "\n", "        ", "tensor", "=", "torch", ".", "stack", "(", "tensor", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "tensor", ".", "dim", "(", ")", "==", "2", ":", "# single image H x W", "\n", "        ", "tensor", "=", "tensor", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "tensor", ".", "dim", "(", ")", "==", "3", ":", "# single image", "\n", "        ", "if", "tensor", ".", "size", "(", "0", ")", "==", "1", ":", "# if single-channel, convert to 3-channel", "\n", "            ", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "tensor", ",", "tensor", ")", ",", "0", ")", "\n", "", "tensor", "=", "tensor", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "if", "tensor", ".", "dim", "(", ")", "==", "4", "and", "tensor", ".", "size", "(", "1", ")", "==", "1", ":", "# single-channel images", "\n", "        ", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "tensor", ",", "tensor", ")", ",", "1", ")", "\n", "\n", "", "if", "normalize", "is", "True", ":", "\n", "        ", "tensor", "=", "tensor", ".", "clone", "(", ")", "# avoid modifying tensor in-place", "\n", "if", "value_range", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "value_range", ",", "tuple", ")", ",", "\"value_range has to be a tuple (min, max) if specified. min and max are numbers\"", "\n", "\n", "", "def", "norm_ip", "(", "img", ",", "low", ",", "high", ")", ":", "\n", "            ", "img", ".", "clamp", "(", "min", "=", "low", ",", "max", "=", "high", ")", "\n", "img", ".", "sub_", "(", "low", ")", ".", "div_", "(", "max", "(", "high", "-", "low", ",", "1e-5", ")", ")", "\n", "\n", "", "def", "norm_range", "(", "t", ",", "value_range", ")", ":", "\n", "            ", "if", "value_range", "is", "not", "None", ":", "\n", "                ", "norm_ip", "(", "t", ",", "value_range", "[", "0", "]", ",", "value_range", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "norm_ip", "(", "t", ",", "float", "(", "t", ".", "min", "(", ")", ")", ",", "float", "(", "t", ".", "max", "(", ")", ")", ")", "\n", "\n", "", "", "if", "scale_each", "is", "True", ":", "\n", "            ", "for", "t", "in", "tensor", ":", "# loop over mini-batch dimension", "\n", "                ", "norm_range", "(", "t", ",", "value_range", ")", "\n", "", "", "else", ":", "\n", "            ", "norm_range", "(", "tensor", ",", "value_range", ")", "\n", "\n", "", "", "if", "tensor", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "        ", "return", "tensor", ".", "squeeze", "(", "0", ")", "\n", "\n", "# make the mini-batch of images into a grid", "\n", "", "nmaps", "=", "tensor", ".", "size", "(", "0", ")", "\n", "xmaps", "=", "min", "(", "nrow", ",", "nmaps", ")", "\n", "ymaps", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "nmaps", ")", "/", "xmaps", ")", ")", "\n", "height", ",", "width", "=", "int", "(", "tensor", ".", "size", "(", "2", ")", "+", "padding", ")", ",", "int", "(", "tensor", ".", "size", "(", "3", ")", "+", "padding", ")", "\n", "num_channels", "=", "tensor", ".", "size", "(", "1", ")", "\n", "grid", "=", "tensor", ".", "new_full", "(", "(", "num_channels", ",", "height", "*", "ymaps", "+", "padding", ",", "width", "*", "xmaps", "+", "padding", ")", ",", "pad_value", ")", "\n", "k", "=", "0", "\n", "for", "y", "in", "range", "(", "ymaps", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "xmaps", ")", ":", "\n", "            ", "if", "k", ">=", "nmaps", ":", "\n", "                ", "break", "\n", "# Tensor.copy_() is a valid method but seems to be missing from the stubs", "\n", "# https://pytorch.org/docs/stable/tensors.html#torch.Tensor.copy_", "\n", "", "grid", ".", "narrow", "(", "1", ",", "y", "*", "height", "+", "padding", ",", "height", "-", "padding", ")", ".", "narrow", "(", "# type: ignore[attr-defined]", "\n", "2", ",", "x", "*", "width", "+", "padding", ",", "width", "-", "padding", "\n", ")", ".", "copy_", "(", "tensor", "[", "k", "]", ")", "\n", "k", "=", "k", "+", "1", "\n", "", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.save_image": [[127, 150], ["torch.no_grad", "torch.no_grad", "utils.make_grid", "make_grid.mul().add_().clamp_().permute().to().numpy", "PIL.Image.fromarray", "Image.fromarray.save", "make_grid.mul().add_().clamp_().permute().to", "make_grid.mul().add_().clamp_().permute", "make_grid.mul().add_().clamp_", "make_grid.mul().add_", "make_grid.mul"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.make_grid"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "save_image", "(", "\n", "tensor", ":", "Union", "[", "torch", ".", "Tensor", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "fp", ":", "Union", "[", "Text", ",", "pathlib", ".", "Path", ",", "BinaryIO", "]", ",", "\n", "format", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Save a given Tensor into an image file.\n    Args:\n        tensor (Tensor or list): Image to be saved. If given a mini-batch tensor,\n            saves the tensor as a grid of images by calling ``make_grid``.\n        fp (string or file object): A filename or a file object\n        format(Optional):  If omitted, the format to use is determined from the filename extension.\n            If a file object was used instead of a filename, this parameter should always be used.\n        **kwargs: Other arguments are documented in ``make_grid``.\n    \"\"\"", "\n", "\n", "grid", "=", "make_grid", "(", "tensor", ",", "**", "kwargs", ")", "\n", "# Add 0.5 after unnormalizing to [0, 255] to round to nearest integer", "\n", "ndarr", "=", "grid", ".", "mul", "(", "255", ")", ".", "add_", "(", "0.5", ")", ".", "clamp_", "(", "0", ",", "255", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "to", "(", "'cpu'", ",", "torch", ".", "uint8", ")", ".", "numpy", "(", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "ndarr", ")", "\n", "im", ".", "save", "(", "fp", ",", "format", "=", "format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.create_logger": [[152, 165], ["time.strftime", "os.path.join", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.getLogger().addHandler", "str", "logging.getLogger"], "function", ["None"], ["", "def", "create_logger", "(", "log_dir", ",", "phase", "=", "'train'", ")", ":", "\n", "    ", "time_str", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ")", "\n", "log_file", "=", "'{}_{}.log'", ".", "format", "(", "time_str", ",", "phase", ")", "\n", "final_log_file", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "log_file", ")", "\n", "head", "=", "'%(asctime)-15s %(message)s'", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "str", "(", "final_log_file", ")", ",", "\n", "format", "=", "head", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.set_log_dir": [[167, 194], ["os.makedirs", "os.path.join", "datetime.datetime.now", "datetime.now.strftime", "os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "dateutil.tz.tzlocal"], "function", ["None"], ["", "def", "set_log_dir", "(", "root_dir", ",", "exp_name", ")", ":", "\n", "    ", "path_dict", "=", "{", "}", "\n", "os", ".", "makedirs", "(", "root_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# set log path", "\n", "exp_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "exp_name", ")", "\n", "now", "=", "datetime", ".", "now", "(", "dateutil", ".", "tz", ".", "tzlocal", "(", ")", ")", "\n", "timestamp", "=", "now", ".", "strftime", "(", "'%Y_%m_%d_%H_%M_%S'", ")", "\n", "prefix", "=", "exp_path", "+", "'_'", "+", "timestamp", "\n", "os", ".", "makedirs", "(", "prefix", ")", "\n", "path_dict", "[", "'prefix'", "]", "=", "prefix", "\n", "\n", "# set checkpoint path", "\n", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Model'", ")", "\n", "os", ".", "makedirs", "(", "ckpt_path", ")", "\n", "path_dict", "[", "'ckpt_path'", "]", "=", "ckpt_path", "\n", "\n", "log_path", "=", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Log'", ")", "\n", "os", ".", "makedirs", "(", "log_path", ")", "\n", "path_dict", "[", "'log_path'", "]", "=", "log_path", "\n", "\n", "# set sample image path for fid calculation", "\n", "sample_path", "=", "os", ".", "path", ".", "join", "(", "prefix", ",", "'Samples'", ")", "\n", "os", ".", "makedirs", "(", "sample_path", ")", "\n", "path_dict", "[", "'sample_path'", "]", "=", "sample_path", "\n", "\n", "return", "path_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.save_checkpoint": [[196, 201], ["torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "states", ",", "is_best", ",", "output_dir", ",", "\n", "filename", "=", "'checkpoint.pth'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "states", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "torch", ".", "save", "(", "states", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'checkpoint_best.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.matmul.__init__": [[35, 37], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.matmul.forward": [[38, 41], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.PixelNorm.__init__": [[48, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.PixelNorm.forward": [[51, 53], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.CustomAct.__init__": [[66, 72], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.CustomAct.forward": [[73, 75], ["ViT_custom_scale2_rp_noise.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Mlp.__init__": [[77, 85], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "ViT_custom_scale2_rp_noise.CustomAct", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Mlp.forward": [[86, 93], ["ViT_custom_scale2_rp_noise.Mlp.fc1", "ViT_custom_scale2_rp_noise.Mlp.act", "ViT_custom_scale2_rp_noise.Mlp.drop", "ViT_custom_scale2_rp_noise.Mlp.fc2", "ViT_custom_scale2_rp_noise.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Attention.__init__": [[96, 128], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ViT_custom_scale2_rp_noise.matmul", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "ViT_custom_scale2_rp_noise.Attention.register_buffer", "models_search.ViT_helper.trunc_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "noise_strength_1", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "]", ")", ")", "\n", "if", "self", ".", "window_size", "!=", "0", ":", "\n", "            ", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "2", "*", "window_size", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "window_size", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "window_size", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "window_size", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Attention.forward": [[129, 147], ["ViT_custom_scale2_rp_noise.Attention.qkv().reshape().permute", "ViT_custom_scale2_rp_noise.Attention.softmax", "ViT_custom_scale2_rp_noise.Attention.attn_drop", "ViT_custom_scale2_rp_noise.Attention.mat().transpose().reshape", "ViT_custom_scale2_rp_noise.Attention.proj", "ViT_custom_scale2_rp_noise.Attention.proj_drop", "ViT_custom_scale2_rp_noise.Attention.mat", "ViT_custom_scale2_rp_noise.Attention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "ViT_custom_scale2_rp_noise.Attention.qkv().reshape", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "ViT_custom_scale2_rp_noise.Attention.mat().transpose", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "ViT_custom_scale2_rp_noise.Attention.size", "ViT_custom_scale2_rp_noise.Attention.size", "ViT_custom_scale2_rp_noise.Attention.qkv", "ViT_custom_scale2_rp_noise.Attention.mat", "ViT_custom_scale2_rp_noise.Attention.relative_position_index.view().clone", "ViT_custom_scale2_rp_noise.Attention.relative_position_index.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", "+", "torch", ".", "randn", "(", "[", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "*", "self", ".", "noise_strength_1", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "if", "self", ".", "window_size", "!=", "0", ":", "\n", "            ", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", ".", "clone", "(", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.CustomNorm.__init__": [[149, 160], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "ViT_custom_scale2_rp_noise.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.CustomNorm.forward": [[161, 169], ["ViT_custom_scale2_rp_noise.CustomNorm.norm().permute", "ViT_custom_scale2_rp_noise.CustomNorm.norm", "ViT_custom_scale2_rp_noise.CustomNorm.norm", "ViT_custom_scale2_rp_noise.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Block.__init__": [[204, 215], ["torch.Module.__init__", "ViT_custom_scale2_rp_noise.CustomNorm", "ViT_custom_scale2_rp_noise.Attention", "ViT_custom_scale2_rp_noise.CustomNorm", "int", "ViT_custom_scale2_rp_noise.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Block.forward": [[216, 220], ["ViT_custom_scale2_rp_noise.Block.drop_path", "ViT_custom_scale2_rp_noise.Block.drop_path", "ViT_custom_scale2_rp_noise.Block.attn", "ViT_custom_scale2_rp_noise.Block.mlp", "ViT_custom_scale2_rp_noise.Block.norm1", "ViT_custom_scale2_rp_noise.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.StageBlock.__init__": [[223, 240], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ViT_custom_scale2_rp_noise.Block", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "window_size", ",", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.StageBlock.forward": [[241, 245], ["blk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "block", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Generator.__init__": [[258, 335], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ViT_custom_scale2_rp_noise.StageBlock", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "models_search.ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "args.g_depth.split", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom_scale2_rp_noise.StageBlock", "ViT_custom_scale2_rp_noise.StageBlock"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "args", ".", "bottom_width", "\n", "self", ".", "embed_dim", "=", "embed_dim", "=", "args", ".", "gf_dim", "\n", "norm_layer", "=", "args", ".", "g_norm", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "g_depth", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "args", ".", "g_act", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "8", ",", "\n", ")", "\n", "self", ".", "upsample_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "16", ",", "\n", ")", ",", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "32", ",", "\n", ")", "\n", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "tRGB_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "self", ".", "tRGB_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "4", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "self", ".", "tRGB_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "16", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Generator._init_weights": [[337, 351], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Generator.set_arch": [[352, 354], ["None"], "methods", ["None"], ["", "", "def", "set_arch", "(", "self", ",", "x", ",", "cur_stage", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Generator.forward": [[355, 375], ["ViT_custom_scale2_rp_noise.Generator.l1().view", "ViT_custom_scale2_rp_noise.Generator.size", "ViT_custom_scale2_rp_noise.Generator.blocks", "ViT_custom_scale2_rp_noise.Generator.tRGB_1", "ViT_custom_scale2_rp_noise.pixel_upsample", "ViT_custom_scale2_rp_noise.Generator.tRGB_2", "ViT_custom_scale2_rp_noise.pixel_upsample", "ViT_custom_scale2_rp_noise.Generator.tRGB_3", "ViT_custom_scale2_rp_noise.Generator.pos_embed[].to", "ViT_custom_scale2_rp_noise.Generator.permute().view", "ViT_custom_scale2_rp_noise.Generator.pos_embed[].to", "ViT_custom_scale2_rp_noise.Generator.permute().view", "ViT_custom_scale2_rp_noise.Generator.pos_embed[].to", "ViT_custom_scale2_rp_noise.Generator.permute().view", "ViT_custom_scale2_rp_noise.Generator.l1", "ViT_custom_scale2_rp_noise.Generator.get_device", "ViT_custom_scale2_rp_noise.Generator.get_device", "ViT_custom_scale2_rp_noise.Generator.get_device", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ViT_custom_scale2_rp_noise.Generator.permute", "ViT_custom_scale2_rp_noise.Generator.permute", "ViT_custom_scale2_rp_noise.Generator.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample"], ["", "def", "forward", "(", "self", ",", "z", ",", "epoch", ")", ":", "\n", "        ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "\n", "x_1", "=", "self", ".", "tRGB_1", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", ",", "H", ",", "W", ")", ")", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "1", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "self", ".", "upsample_blocks", "[", "0", "]", "(", "x", ")", "\n", "\n", "x_2", "=", "self", ".", "tRGB_2", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", "//", "4", ",", "H", ",", "W", ")", ")", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "2", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "self", ".", "upsample_blocks", "[", "1", "]", "(", "x", ")", "\n", "\n", "x_3", "=", "self", ".", "tRGB_3", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", "//", "16", ",", "H", ",", "W", ")", ")", "\n", "output", "=", "F", ".", "interpolate", "(", "x_1", ",", "scale_factor", "=", "4", ")", "+", "F", ".", "interpolate", "(", "x_2", ",", "scale_factor", "=", "2", ")", "+", "x_3", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.SpaceToDepth.__init__": [[382, 386], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "block_size", "in", "{", "2", ",", "4", "}", ",", "\"Space2Depth only supports blocks size = 4 or 2\"", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.SpaceToDepth.forward": [[387, 394], ["x.view.view.size", "x.view.view.view", "x.view.view.permute().contiguous", "x.view.view.view", "x.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "S", "=", "self", ".", "block_size", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "H", "//", "S", ",", "S", ",", "W", "//", "S", ",", "S", ")", "# (N, C, H//bs, bs, W//bs, bs)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "# (N, bs, bs, C, H//bs, W//bs)", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", "*", "S", "*", "S", ",", "H", "//", "S", ",", "W", "//", "S", ")", "# (N, C*bs^2, H//bs, W//bs)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.DisBlock.__init__": [[397, 409], ["torch.Module.__init__", "ViT_custom_scale2_rp_noise.CustomNorm", "ViT_custom_scale2_rp_noise.Attention", "ViT_custom_scale2_rp_noise.CustomNorm", "int", "ViT_custom_scale2_rp_noise.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.DisBlock.forward": [[410, 414], ["ViT_custom_scale2_rp_noise.DisBlock.drop_path", "ViT_custom_scale2_rp_noise.DisBlock.drop_path", "ViT_custom_scale2_rp_noise.DisBlock.attn", "ViT_custom_scale2_rp_noise.DisBlock.mlp", "ViT_custom_scale2_rp_noise.DisBlock.norm1", "ViT_custom_scale2_rp_noise.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Discriminator.__init__": [[417, 493], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_custom_scale2_rp_noise.CustomNorm", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "ViT_custom_scale2_rp_noise.Discriminator.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "ViT_custom_scale2_rp_noise.DisBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.asarray", "numpy.eye", "range", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "ViT_custom_scale2_rp_noise.Discriminator.register_buffer", "ViT_custom_scale2_rp_noise.Discriminator.register_buffer", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom_scale2_rp_noise.DisBlock", "ViT_custom_scale2_rp_noise.DisBlock", "numpy.convolve", "numpy.convolve", "scipy.signal.convolve", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch_utils.ops.upfirdn2d.setup_filter", "range", "range", "numpy.arange", "numpy.dstack().reshape", "numpy.dstack", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "32", ",", "patch_size", "=", "None", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "None", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "args", ".", "df_dim", "\n", "\n", "depth", "=", "args", ".", "d_depth", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "patch_size", "=", "patch_size", "=", "args", ".", "patch_size", "\n", "norm_layer", "=", "args", ".", "d_norm", "\n", "self", ".", "window_size", "=", "args", ".", "d_window_size", "\n", "\n", "act_layer", "=", "args", ".", "d_act", "\n", "self", ".", "fRGB_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", "*", "3", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_2", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "patch_size", "*", "2", ",", "stride", "=", "patch_size", "*", "2", ",", "padding", "=", "0", ")", "\n", "#         self.fRGB_4 = nn.Conv2d(3, embed_dim//2, kernel_size=patch_size, stride=patch_size, padding=0)", "\n", "\n", "num_patches_1", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "num_patches_2", "=", "(", "(", "args", ".", "img_size", "//", "2", ")", "//", "patch_size", ")", "**", "2", "\n", "#         num_patches_4 = ((args.img_size//8) // patch_size)**2", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_1", ",", "embed_dim", "//", "4", "*", "3", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_2", ",", "embed_dim", ")", ")", "\n", "#         self.pos_embed_4 = nn.Parameter(torch.zeros(1, num_patches_4, embed_dim))", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", "*", "3", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "args", ".", "bottom_width", "*", "4", "//", "2", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_2", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "args", ".", "bottom_width", "*", "4", "//", "4", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "last_block", "=", "nn", ".", "Sequential", "(", "\n", "#             Block(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer),", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "0", "]", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "0", ")", "\n", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_2", ",", "std", "=", ".02", ")", "\n", "#         trunc_normal_(self.pos_embed_4, std=.02)", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "if", "'filter'", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "Hz_lo", "=", "np", ".", "asarray", "(", "wavelets", "[", "'sym2'", "]", ")", "# H(z)", "\n", "Hz_hi", "=", "Hz_lo", "*", "(", "(", "-", "1", ")", "**", "np", ".", "arange", "(", "Hz_lo", ".", "size", ")", ")", "# H(-z)", "\n", "Hz_lo2", "=", "np", ".", "convolve", "(", "Hz_lo", ",", "Hz_lo", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(z) * H(z^-1) / 2", "\n", "Hz_hi2", "=", "np", ".", "convolve", "(", "Hz_hi", ",", "Hz_hi", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(-z) * H(-z^-1) / 2", "\n", "Hz_fbank", "=", "np", ".", "eye", "(", "4", ",", "1", ")", "# Bandpass(H(z), b_i)", "\n", "for", "i", "in", "range", "(", "1", ",", "Hz_fbank", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "Hz_fbank", "=", "np", ".", "dstack", "(", "[", "Hz_fbank", ",", "np", ".", "zeros_like", "(", "Hz_fbank", ")", "]", ")", ".", "reshape", "(", "Hz_fbank", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "Hz_fbank", "=", "scipy", ".", "signal", ".", "convolve", "(", "Hz_fbank", ",", "[", "Hz_lo2", "]", ")", "\n", "Hz_fbank", "[", "i", ",", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "-", "Hz_hi2", ".", "size", ")", "//", "2", ":", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "+", "Hz_hi2", ".", "size", ")", "//", "2", "]", "+=", "Hz_hi2", "\n", "", "Hz_fbank", "=", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "self", ".", "register_buffer", "(", "'Hz_fbank'", ",", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_fbank", "=", "None", "\n", "", "if", "'geo'", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'Hz_geom'", ",", "upfirdn2d", ".", "setup_filter", "(", "wavelets", "[", "'sym6'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_geom", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Discriminator._init_weights": [[494, 502], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Discriminator.forward_features": [[504, 544], ["blk.size", "ViT_custom_scale2_rp_noise.Discriminator.fRGB_1().flatten().permute", "ViT_custom_scale2_rp_noise.Discriminator.fRGB_2().flatten().permute", "blk.size", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_scale2_rp_noise.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_scale2_rp_noise.Discriminator.last_block", "ViT_custom_scale2_rp_noise.Discriminator.norm", "models_search.diff_aug.DiffAugment", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "ViT_custom_scale2_rp_noise.Discriminator.fRGB_1().flatten", "ViT_custom_scale2_rp_noise.Discriminator.fRGB_2().flatten", "blk.permute", "blk.flatten", "ViT_custom_scale2_rp_noise.Discriminator.fRGB_1", "ViT_custom_scale2_rp_noise.Discriminator.fRGB_2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.DiffAugment"], ["", "", "def", "forward_features", "(", "self", ",", "x", ",", "aug", "=", "True", ",", "epoch", "=", "400", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", "and", "aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "args", ".", "diff_aug", ",", "True", ",", "[", "self", ".", "Hz_geom", ",", "self", ".", "Hz_fbank", "]", ")", "\n", "#         with torch.no_grad():", "\n", "#             save_image(x.clone(), f'in_{self.args.rank}.png', nrow=4, padding=1, normalize=True, scale_each=True)", "\n", "#         import time", "\n", "#         time.sleep(5)", "\n", "", "B", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "H", "=", "W", "=", "H", "//", "self", ".", "patch_size", "\n", "\n", "x_1", "=", "self", ".", "fRGB_1", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_2", "=", "self", ".", "fRGB_2", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#         x_4 = self.fRGB_4(nn.AvgPool2d(8)(x)).flatten(2).permute(0,2,1)", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "x", "=", "x_1", "+", "self", ".", "pos_embed_1", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "for", "blk", "in", "self", ".", "blocks_1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_2", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "\n", "\n", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "last_block", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.Discriminator.forward": [[545, 549], ["ViT_custom_scale2_rp_noise.Discriminator.forward_features", "ViT_custom_scale2_rp_noise.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "aug", "=", "True", ",", "epoch", "=", "400", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ",", "aug", "=", "aug", ",", "epoch", "=", "epoch", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.count_matmul": [[42, 46], ["torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.gelu": [[54, 61], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.leakyrelu": [[62, 64], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.window_partition": [[172, 184], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.window_reverse": [[186, 200], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise.pixel_upsample": [[246, 256], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2_rp_noise._downsample": [[377, 380], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.matmul.__init__": [[35, 37], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.matmul.forward": [[38, 41], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.PixelNorm.__init__": [[48, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.PixelNorm.forward": [[51, 53], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.CustomAct.__init__": [[66, 72], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.CustomAct.forward": [[73, 75], ["ViT_scale3_local_new_rp.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Mlp.__init__": [[77, 85], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "ViT_scale3_local_new_rp.CustomAct", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Mlp.forward": [[86, 93], ["ViT_scale3_local_new_rp.Mlp.fc1", "ViT_scale3_local_new_rp.Mlp.act", "ViT_scale3_local_new_rp.Mlp.drop", "ViT_scale3_local_new_rp.Mlp.fc2", "ViT_scale3_local_new_rp.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Attention.__init__": [[96, 126], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ViT_scale3_local_new_rp.matmul", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "ViT_scale3_local_new_rp.Attention.register_buffer", "models_search.ViT_helper.trunc_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "if", "self", ".", "window_size", "!=", "0", ":", "\n", "            ", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "2", "*", "window_size", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "window_size", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "window_size", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "window_size", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Attention.forward": [[127, 144], ["ViT_scale3_local_new_rp.Attention.qkv().reshape().permute", "ViT_scale3_local_new_rp.Attention.softmax", "ViT_scale3_local_new_rp.Attention.attn_drop", "ViT_scale3_local_new_rp.Attention.mat().transpose().reshape", "ViT_scale3_local_new_rp.Attention.proj", "ViT_scale3_local_new_rp.Attention.proj_drop", "ViT_scale3_local_new_rp.Attention.mat", "ViT_scale3_local_new_rp.Attention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "ViT_scale3_local_new_rp.Attention.qkv().reshape", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "ViT_scale3_local_new_rp.Attention.mat().transpose", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "ViT_scale3_local_new_rp.Attention.qkv", "ViT_scale3_local_new_rp.Attention.mat", "ViT_scale3_local_new_rp.Attention.relative_position_index.view().clone", "ViT_scale3_local_new_rp.Attention.relative_position_index.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "if", "self", ".", "window_size", "!=", "0", ":", "\n", "            ", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", ".", "clone", "(", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.CustomNorm.__init__": [[146, 157], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "ViT_scale3_local_new_rp.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.CustomNorm.forward": [[158, 166], ["ViT_scale3_local_new_rp.CustomNorm.norm().permute", "ViT_scale3_local_new_rp.CustomNorm.norm", "ViT_scale3_local_new_rp.CustomNorm.norm", "ViT_scale3_local_new_rp.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Block.__init__": [[201, 212], ["torch.Module.__init__", "ViT_scale3_local_new_rp.CustomNorm", "ViT_scale3_local_new_rp.Attention", "ViT_scale3_local_new_rp.CustomNorm", "int", "ViT_scale3_local_new_rp.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Block.forward": [[213, 217], ["ViT_scale3_local_new_rp.Block.drop_path", "ViT_scale3_local_new_rp.Block.drop_path", "ViT_scale3_local_new_rp.Block.attn", "ViT_scale3_local_new_rp.Block.mlp", "ViT_scale3_local_new_rp.Block.norm1", "ViT_scale3_local_new_rp.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.StageBlock.__init__": [[220, 236], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ViT_scale3_local_new_rp.Block", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.StageBlock.forward": [[237, 241], ["blk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "block", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Generator.__init__": [[254, 328], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ViT_scale3_local_new_rp.StageBlock", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "models_search.ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "args.g_depth.split", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_scale3_local_new_rp.StageBlock", "ViT_scale3_local_new_rp.StageBlock"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "args", ".", "bottom_width", "\n", "self", ".", "embed_dim", "=", "embed_dim", "=", "args", ".", "gf_dim", "\n", "norm_layer", "=", "args", ".", "g_norm", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "g_depth", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "args", ".", "g_act", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "self", ".", "upsample_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", ",", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "tRGB_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "self", ".", "tRGB_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "4", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "self", ".", "tRGB_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "16", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Generator._init_weights": [[330, 344], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Generator.set_arch": [[345, 347], ["None"], "methods", ["None"], ["", "", "def", "set_arch", "(", "self", ",", "x", ",", "cur_stage", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Generator.forward": [[348, 368], ["ViT_scale3_local_new_rp.Generator.l1().view", "ViT_scale3_local_new_rp.Generator.size", "ViT_scale3_local_new_rp.Generator.blocks", "ViT_scale3_local_new_rp.Generator.tRGB_1", "ViT_scale3_local_new_rp.pixel_upsample", "ViT_scale3_local_new_rp.Generator.tRGB_2", "ViT_scale3_local_new_rp.pixel_upsample", "ViT_scale3_local_new_rp.Generator.tRGB_3", "ViT_scale3_local_new_rp.Generator.pos_embed[].to", "ViT_scale3_local_new_rp.Generator.permute().view", "ViT_scale3_local_new_rp.Generator.pos_embed[].to", "ViT_scale3_local_new_rp.Generator.permute().view", "ViT_scale3_local_new_rp.Generator.pos_embed[].to", "ViT_scale3_local_new_rp.Generator.permute().view", "ViT_scale3_local_new_rp.Generator.l1", "ViT_scale3_local_new_rp.Generator.get_device", "ViT_scale3_local_new_rp.Generator.get_device", "ViT_scale3_local_new_rp.Generator.get_device", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ViT_scale3_local_new_rp.Generator.permute", "ViT_scale3_local_new_rp.Generator.permute", "ViT_scale3_local_new_rp.Generator.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample"], ["", "def", "forward", "(", "self", ",", "z", ",", "epoch", ")", ":", "\n", "        ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "\n", "x_1", "=", "self", ".", "tRGB_1", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", ",", "H", ",", "W", ")", ")", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "1", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "self", ".", "upsample_blocks", "[", "0", "]", "(", "x", ")", "\n", "\n", "x_2", "=", "self", ".", "tRGB_2", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", "//", "4", ",", "H", ",", "W", ")", ")", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "2", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "self", ".", "upsample_blocks", "[", "1", "]", "(", "x", ")", "\n", "\n", "x_3", "=", "self", ".", "tRGB_3", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", "//", "16", ",", "H", ",", "W", ")", ")", "\n", "output", "=", "F", ".", "interpolate", "(", "x_1", ",", "scale_factor", "=", "4", ")", "+", "F", ".", "interpolate", "(", "x_2", ",", "scale_factor", "=", "2", ")", "+", "x_3", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.SpaceToDepth.__init__": [[375, 379], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "block_size", "in", "{", "2", ",", "4", "}", ",", "\"Space2Depth only supports blocks size = 4 or 2\"", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.SpaceToDepth.forward": [[380, 387], ["x.view.view.size", "x.view.view.view", "x.view.view.permute().contiguous", "x.view.view.view", "x.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "S", "=", "self", ".", "block_size", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "H", "//", "S", ",", "S", ",", "W", "//", "S", ",", "S", ")", "# (N, C, H//bs, bs, W//bs, bs)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "# (N, bs, bs, C, H//bs, W//bs)", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", "*", "S", "*", "S", ",", "H", "//", "S", ",", "W", "//", "S", ")", "# (N, C*bs^2, H//bs, W//bs)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.DisBlock.__init__": [[390, 402], ["torch.Module.__init__", "ViT_scale3_local_new_rp.CustomNorm", "ViT_scale3_local_new_rp.Attention", "ViT_scale3_local_new_rp.CustomNorm", "int", "ViT_scale3_local_new_rp.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.DisBlock.forward": [[403, 407], ["ViT_scale3_local_new_rp.DisBlock.drop_path", "ViT_scale3_local_new_rp.DisBlock.drop_path", "ViT_scale3_local_new_rp.DisBlock.attn", "ViT_scale3_local_new_rp.DisBlock.mlp", "ViT_scale3_local_new_rp.DisBlock.norm1", "ViT_scale3_local_new_rp.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Discriminator.__init__": [[410, 504], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_scale3_local_new_rp.CustomNorm", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "ViT_scale3_local_new_rp.Discriminator.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "ViT_scale3_local_new_rp.DisBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.asarray", "numpy.eye", "range", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "ViT_scale3_local_new_rp.Discriminator.register_buffer", "ViT_scale3_local_new_rp.Discriminator.register_buffer", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_scale3_local_new_rp.DisBlock", "ViT_scale3_local_new_rp.DisBlock", "ViT_scale3_local_new_rp.DisBlock", "ViT_scale3_local_new_rp.DisBlock", "numpy.convolve", "numpy.convolve", "scipy.signal.convolve", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch_utils.ops.upfirdn2d.setup_filter", "range", "range", "range", "range", "numpy.arange", "numpy.dstack().reshape", "numpy.dstack", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "32", ",", "patch_size", "=", "None", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "None", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "args", ".", "df_dim", "\n", "\n", "depth", "=", "args", ".", "d_depth", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "patch_size", "=", "patch_size", "=", "args", ".", "patch_size", "\n", "norm_layer", "=", "args", ".", "d_norm", "\n", "self", ".", "window_size", "=", "args", ".", "d_window_size", "\n", "\n", "act_layer", "=", "args", ".", "d_act", "\n", "self", ".", "fRGB_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", "*", "3", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_2", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", "*", "2", ",", "stride", "=", "patch_size", "*", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_3", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", "*", "4", ",", "stride", "=", "patch_size", "*", "4", ",", "padding", "=", "0", ")", "\n", "#         self.fRGB_4 = nn.Conv2d(3, embed_dim//2, kernel_size=patch_size, stride=patch_size, padding=0)", "\n", "\n", "num_patches_1", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "num_patches_2", "=", "(", "(", "args", ".", "img_size", "//", "2", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_3", "=", "(", "(", "args", ".", "img_size", "//", "4", ")", "//", "patch_size", ")", "**", "2", "\n", "#         num_patches_4 = ((args.img_size//8) // patch_size)**2", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_1", ",", "embed_dim", "//", "4", "*", "3", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_2", ",", "embed_dim", "//", "8", "*", "7", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_3", ",", "embed_dim", ")", ")", "\n", "#         self.pos_embed_4 = nn.Parameter(torch.zeros(1, num_patches_4, embed_dim))", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", "*", "3", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "self", ".", "window_size", ")", "\n", "for", "i", "in", "range", "(", "depth", "-", "1", ")", "]", ")", "\n", "self", ".", "blocks_11", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", "*", "3", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "64", ")", "\n", "for", "i", "in", "range", "(", "1", ")", "]", ")", "\n", "self", ".", "blocks_2", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "8", "*", "7", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "32", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_3", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "16", ")", "\n", "for", "i", "in", "range", "(", "depth", "+", "1", ")", "]", ")", "\n", "#         self.blocks_4 = nn.ModuleList([", "\n", "#             DisBlock(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer)", "\n", "#             for i in range(depth)])", "\n", "self", ".", "last_block", "=", "nn", ".", "Sequential", "(", "\n", "#             Block(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer),", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "0", "]", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "0", ")", "\n", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_2", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_3", ",", "std", "=", ".02", ")", "\n", "#         trunc_normal_(self.pos_embed_4, std=.02)", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "if", "'filter'", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "Hz_lo", "=", "np", ".", "asarray", "(", "wavelets", "[", "'sym2'", "]", ")", "# H(z)", "\n", "Hz_hi", "=", "Hz_lo", "*", "(", "(", "-", "1", ")", "**", "np", ".", "arange", "(", "Hz_lo", ".", "size", ")", ")", "# H(-z)", "\n", "Hz_lo2", "=", "np", ".", "convolve", "(", "Hz_lo", ",", "Hz_lo", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(z) * H(z^-1) / 2", "\n", "Hz_hi2", "=", "np", ".", "convolve", "(", "Hz_hi", ",", "Hz_hi", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(-z) * H(-z^-1) / 2", "\n", "Hz_fbank", "=", "np", ".", "eye", "(", "4", ",", "1", ")", "# Bandpass(H(z), b_i)", "\n", "for", "i", "in", "range", "(", "1", ",", "Hz_fbank", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "Hz_fbank", "=", "np", ".", "dstack", "(", "[", "Hz_fbank", ",", "np", ".", "zeros_like", "(", "Hz_fbank", ")", "]", ")", ".", "reshape", "(", "Hz_fbank", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "Hz_fbank", "=", "scipy", ".", "signal", ".", "convolve", "(", "Hz_fbank", ",", "[", "Hz_lo2", "]", ")", "\n", "Hz_fbank", "[", "i", ",", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "-", "Hz_hi2", ".", "size", ")", "//", "2", ":", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "+", "Hz_hi2", ".", "size", ")", "//", "2", "]", "+=", "Hz_hi2", "\n", "", "Hz_fbank", "=", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "self", ".", "register_buffer", "(", "'Hz_fbank'", ",", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_fbank", "=", "None", "\n", "", "if", "'geo'", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'Hz_geom'", ",", "upfirdn2d", ".", "setup_filter", "(", "wavelets", "[", "'sym6'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_geom", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Discriminator._init_weights": [[505, 513], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Discriminator.forward_features": [[515, 585], ["blk.size", "ViT_scale3_local_new_rp.Discriminator.fRGB_1().flatten().permute", "ViT_scale3_local_new_rp.Discriminator.fRGB_2().flatten().permute", "ViT_scale3_local_new_rp.Discriminator.fRGB_3().flatten().permute", "blk.size", "blk.view", "ViT_scale3_local_new_rp.window_partition", "blk.view", "blk.view", "window_reverse().view", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_scale3_local_new_rp.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_scale3_local_new_rp.Discriminator.last_block", "ViT_scale3_local_new_rp.Discriminator.norm", "models_search.diff_aug.DiffAugment", "blk", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "ViT_scale3_local_new_rp.Discriminator.fRGB_1().flatten", "ViT_scale3_local_new_rp.Discriminator.fRGB_2().flatten", "ViT_scale3_local_new_rp.Discriminator.fRGB_3().flatten", "ViT_scale3_local_new_rp.window_reverse", "blk.permute", "blk.flatten", "blk.permute", "blk.flatten", "ViT_scale3_local_new_rp.Discriminator.fRGB_1", "ViT_scale3_local_new_rp.Discriminator.fRGB_2", "ViT_scale3_local_new_rp.Discriminator.fRGB_3"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "args", ".", "diff_aug", ",", "True", ",", "[", "self", ".", "Hz_geom", ",", "self", ".", "Hz_fbank", "]", ")", "\n", "#         with torch.no_grad():", "\n", "#             save_image(x.clone(), f'in_{self.args.rank}.png', nrow=4, padding=1, normalize=True, scale_each=True)", "\n", "#         import time", "\n", "#         time.sleep(10)", "\n", "", "B", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "H", "=", "W", "=", "H", "//", "self", ".", "patch_size", "\n", "\n", "x_1", "=", "self", ".", "fRGB_1", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_2", "=", "self", ".", "fRGB_2", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_3", "=", "self", ".", "fRGB_3", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#         x_4 = self.fRGB_4(nn.AvgPool2d(8)(x)).flatten(2).permute(0,2,1)", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "x", "=", "x_1", "+", "self", ".", "pos_embed_1", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_11", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_2", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_3", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_3", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_3", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "#         _, _, C = x.shape", "\n", "#         x = x.permute(0, 2, 1).view(B, C, H, W)", "\n", "# #         x = SpaceToDepth(2)(x)", "\n", "#         x = nn.AvgPool2d(2)(x)", "\n", "#         _, _, H, W = x.shape", "\n", "#         x = x.flatten(2).permute(0, 2, 1)", "\n", "#         x = torch.cat([x, x_4], dim=-1)", "\n", "#         x = x + self.pos_embed_4", "\n", "\n", "#         for blk in self.blocks_4:", "\n", "#             x = blk(x)", "\n", "\n", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "last_block", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.Discriminator.forward": [[586, 590], ["ViT_scale3_local_new_rp.Discriminator.forward_features", "ViT_scale3_local_new_rp.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.count_matmul": [[42, 46], ["torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.gelu": [[54, 61], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.leakyrelu": [[62, 64], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.window_partition": [[169, 181], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.window_reverse": [[183, 197], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp.pixel_upsample": [[242, 252], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_scale3_local_new_rp._downsample": [[370, 373], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.matmul.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.matmul.forward": [[14, 17], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.PixelNorm.__init__": [[24, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.PixelNorm.forward": [[27, 29], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.CustomAct.__init__": [[42, 48], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.CustomAct.forward": [[49, 51], ["ViT_custom.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Mlp.__init__": [[53, 61], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "ViT_custom.CustomAct", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Mlp.forward": [[62, 69], ["ViT_custom.Mlp.fc1", "ViT_custom.Mlp.act", "ViT_custom.Mlp.drop", "ViT_custom.Mlp.fc2", "ViT_custom.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Attention.__init__": [[72, 85], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "ViT_custom.matmul", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "noise_strength_1", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Attention.forward": [[86, 100], ["ViT_custom.Attention.qkv().reshape().permute", "ViT_custom.Attention.softmax", "ViT_custom.Attention.attn_drop", "ViT_custom.Attention.mat().transpose().reshape", "ViT_custom.Attention.proj", "ViT_custom.Attention.proj_drop", "ViT_custom.Attention.mat", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "ViT_custom.Attention.qkv().reshape", "k.transpose", "ViT_custom.Attention.mat().transpose", "ViT_custom.Attention.size", "ViT_custom.Attention.size", "ViT_custom.Attention.qkv", "ViT_custom.Attention.mat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", "+", "torch", ".", "randn", "(", "[", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "*", "self", ".", "noise_strength_1", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.CustomNorm.__init__": [[102, 113], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "ViT_custom.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.CustomNorm.forward": [[114, 122], ["ViT_custom.CustomNorm.norm().permute", "ViT_custom.CustomNorm.norm", "ViT_custom.CustomNorm.norm", "ViT_custom.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Block.__init__": [[125, 136], ["torch.Module.__init__", "ViT_custom.CustomNorm", "ViT_custom.Attention", "ViT_custom.CustomNorm", "int", "ViT_custom.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Block.forward": [[137, 141], ["ViT_custom.Block.drop_path", "ViT_custom.Block.drop_path", "ViT_custom.Block.attn", "ViT_custom.Block.mlp", "ViT_custom.Block.norm1", "ViT_custom.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.StageBlock.__init__": [[144, 160], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "ViT_custom.Block", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.StageBlock.forward": [[161, 165], ["blk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "block", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Generator.__init__": [[178, 247], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ViT_custom.StageBlock", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "models_search.ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "args.g_depth.split", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom.StageBlock", "ViT_custom.StageBlock"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "args", ".", "bottom_width", "\n", "self", ".", "embed_dim", "=", "embed_dim", "=", "args", ".", "gf_dim", "\n", "norm_layer", "=", "args", ".", "g_norm", "\n", "mlp_ratio", "=", "args", ".", "g_mlp", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "g_depth", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "args", ".", "g_act", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "self", ".", "upsample_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", ",", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "16", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Generator.set_arch": [[269, 271], ["None"], "methods", ["None"], ["", "def", "set_arch", "(", "self", ",", "x", ",", "cur_stage", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Generator.forward": [[272, 292], ["ViT_custom.Generator.l1().view", "blk.size", "ViT_custom.Generator.blocks", "enumerate", "ViT_custom.Generator.deconv", "z.size", "ViT_custom.Generator.pos_embed[].to", "ViT_custom.pixel_upsample", "blk", "blk.permute().view", "ViT_custom.Generator.l1", "blk.get_device", "ViT_custom.Generator.pos_embed[].to", "z.norm", "blk.get_device", "blk.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample"], ["", "def", "forward", "(", "self", ",", "z", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "latent_norm", ":", "\n", "            ", "latent_size", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "z", "=", "(", "z", "/", "z", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "(", "latent_size", "**", "0.5", ")", ")", "\n", "", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", "=", "x", ".", "size", "(", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "for", "index", ",", "blk", "in", "enumerate", "(", "self", ".", "upsample_blocks", ")", ":", "\n", "# x = x.permute(0,2,1)", "\n", "# x = x.view(-1, self.embed_dim, H, W)", "\n", "            ", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "index", "+", "1", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "blk", "(", "x", ")", "\n", "# _, _, H, W = x.size()", "\n", "# x = x.view(-1, self.embed_dim, H*W)", "\n", "# x = x.permute(0,2,1)", "\n", "", "output", "=", "self", ".", "deconv", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", "//", "16", ",", "H", ",", "W", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.DisBlock.__init__": [[300, 312], ["torch.Module.__init__", "ViT_custom.CustomNorm", "ViT_custom.Attention", "ViT_custom.CustomNorm", "int", "ViT_custom.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.DisBlock.forward": [[313, 317], ["ViT_custom.DisBlock.drop_path", "ViT_custom.DisBlock.drop_path", "ViT_custom.DisBlock.attn", "ViT_custom.DisBlock.mlp", "ViT_custom.DisBlock.norm1", "ViT_custom.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Discriminator.__init__": [[322, 368], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "ViT_custom.CustomNorm", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "ViT_custom.Discriminator.apply", "HybridEmbed", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom.DisBlock", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "32", ",", "patch_size", "=", "None", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "None", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "args", ".", "df_dim", "\n", "\n", "depth", "=", "args", ".", "d_depth", "\n", "self", ".", "args", "=", "args", "\n", "patch_size", "=", "args", ".", "patch_size", "\n", "norm_layer", "=", "args", ".", "d_norm", "\n", "act_layer", "=", "args", ".", "d_act", "\n", "mlp_ratio", "=", "args", ".", "d_mlp", "\n", "if", "hybrid_backbone", "is", "not", "None", ":", "\n", "            ", "self", ".", "patch_embed", "=", "HybridEmbed", "(", "\n", "hybrid_backbone", ",", "img_size", "=", "img_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "patch_embed", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "", "num_patches", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "i", "]", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Discriminator._init_weights": [[369, 381], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "#         elif isinstance(m, nn.Conv2d):", "\n", "#             trunc_normal_(m.weight, std=.02)", "\n", "#             if isinstance(m, nn.Conv2d) and m.bias is not None:", "\n", "#                 nn.init.constant_(m.bias, 0)", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Discriminator.forward_features": [[383, 398], ["ViT_custom.Discriminator.patch_embed().flatten().permute", "ViT_custom.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom.Discriminator.pos_drop", "ViT_custom.Discriminator.norm", "models_search.diff_aug.DiffAugment", "blk", "ViT_custom.Discriminator.patch_embed().flatten", "ViT_custom.Discriminator.patch_embed"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.DiffAugment"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "args", ".", "diff_aug", ",", "True", ")", "\n", "", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.Discriminator.forward": [[399, 403], ["ViT_custom.Discriminator.forward_features", "ViT_custom.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.count_matmul": [[18, 22], ["torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.gelu": [[30, 37], ["torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.leakyrelu": [[38, 40], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom.pixel_upsample": [[166, 176], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom._downsample": [[294, 297], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.DiffAugment": [[48, 59], ["policy.split", "f.contiguous", "f.permute", "f.permute", "f"], "function", ["None"], ["def", "DiffAugment", "(", "x", ",", "policy", "=", "''", ",", "channels_first", "=", "True", ",", "affine", "=", "None", ")", ":", "\n", "    ", "if", "policy", ":", "\n", "        ", "if", "not", "channels_first", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "for", "p", "in", "policy", ".", "split", "(", "','", ")", ":", "\n", "            ", "for", "f", "in", "AUGMENT_FNS", "[", "p", "]", ":", "\n", "                ", "x", "=", "f", "(", "x", ",", "affine", "=", "affine", ")", "\n", "", "", "if", "not", "channels_first", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_crop": [[60, 69], ["torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate.size", "torch.where", "torch.where", "random.randint", "random.randint", "x_crop.size", "x.size", "torch.rand", "torch.rand"], "function", ["None"], ["", "def", "rand_crop", "(", "x", ",", "affine", "=", "None", ")", ":", "\n", "    ", "b", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x_large", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "1.2", ",", "mode", "=", "'bicubic'", ")", "\n", "_", ",", "_", ",", "h_large", ",", "w_large", "=", "x_large", ".", "size", "(", ")", "\n", "h_start", ",", "w_start", "=", "random", ".", "randint", "(", "0", ",", "(", "h_large", "-", "h", ")", ")", ",", "random", ".", "randint", "(", "0", ",", "(", "w_large", "-", "w", ")", ")", "\n", "x_crop", "=", "x_large", "[", ":", ",", ":", ",", "h_start", ":", "h_start", "+", "h", ",", "w_start", ":", "w_start", "+", "w", "]", "\n", "assert", "x_crop", ".", "size", "(", ")", "==", "x", ".", "size", "(", ")", "\n", "output", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "b", ",", "1", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "<", "0.2", ",", "x_crop", ",", "x", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_filter": [[71, 109], ["Hz_fbank.to.to", "constant", "torch.ones", "torch.ones", "enumerate", "Hz_prime.reshape.unsqueeze().repeat", "Hz_prime.reshape.reshape", "images.reshape.reshape", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch_utils.ops.conv2d_gradfix.conv2d", "torch_utils.ops.conv2d_gradfix.conv2d", "images.reshape.reshape", "len", "torch.exp2", "torch.exp2", "torch.where", "torch.where", "torch.ones", "torch.ones", "numpy.array", "torch.ones_like", "torch.ones_like", "Hz_prime.reshape.unsqueeze", "Hz_prime.reshape.unsqueeze", "Hz_prime.reshape.unsqueeze", "torch.randn", "torch.randn", "torch.rand", "torch.rand", "torch.ones.square"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.constant", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.conv2d"], ["", "def", "rand_filter", "(", "images", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio", "=", "0.25", "\n", "\n", "\n", "_", ",", "Hz_fbank", "=", "affine", "\n", "Hz_fbank", "=", "Hz_fbank", ".", "to", "(", "images", ".", "device", ")", "\n", "imgfilter_bands", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "batch_size", ",", "num_channels", ",", "height", ",", "width", "=", "images", ".", "shape", "\n", "device", "=", "images", ".", "device", "\n", "num_bands", "=", "Hz_fbank", ".", "shape", "[", "0", "]", "\n", "assert", "len", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "==", "num_bands", "\n", "expected_power", "=", "constant", "(", "np", ".", "array", "(", "[", "10", ",", "1", ",", "1", ",", "1", "]", ")", "/", "13", ",", "device", "=", "device", ")", "# Expected power spectrum (1/f).", "\n", "\n", "# Apply amplification for each band with probability (imgfilter * strength * band_strength).", "\n", "g", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "num_bands", "]", ",", "device", "=", "device", ")", "# Global gain vector (identity).", "\n", "for", "i", ",", "band_strength", "in", "enumerate", "(", "imgfilter_bands", ")", ":", "\n", "        ", "t_i", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "1", ")", "\n", "t_i", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "ratio", "*", "band_strength", ",", "t_i", ",", "torch", ".", "ones_like", "(", "t_i", ")", ")", "\n", "#         if debug_percentile is not None:", "\n", "#             t_i = torch.full_like(t_i, torch.exp2(torch.erfinv(debug_percentile * 2 - 1) * 1)) if band_strength > 0 else torch.ones_like(t_i)", "\n", "t", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "num_bands", "]", ",", "device", "=", "device", ")", "# Temporary gain vector.", "\n", "t", "[", ":", ",", "i", "]", "=", "t_i", "# Replace i'th element.", "\n", "t", "=", "t", "/", "(", "expected_power", "*", "t", ".", "square", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdims", "=", "True", ")", ".", "sqrt", "(", ")", "# Normalize power.", "\n", "g", "=", "g", "*", "t", "# Accumulate into global gain.", "\n", "\n", "# Construct combined amplification filter.", "\n", "", "Hz_prime", "=", "g", "@", "Hz_fbank", "# [batch, tap]", "\n", "Hz_prime", "=", "Hz_prime", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "[", "1", ",", "num_channels", ",", "1", "]", ")", "# [batch, channels, tap]", "\n", "Hz_prime", "=", "Hz_prime", ".", "reshape", "(", "[", "batch_size", "*", "num_channels", ",", "1", ",", "-", "1", "]", ")", "# [batch * channels, 1, tap]", "\n", "\n", "# Apply filter.", "\n", "p", "=", "Hz_fbank", ".", "shape", "[", "1", "]", "//", "2", "\n", "images", "=", "images", ".", "reshape", "(", "[", "1", ",", "batch_size", "*", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "images", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "images", ",", "pad", "=", "[", "p", ",", "p", ",", "p", ",", "p", "]", ",", "mode", "=", "'reflect'", ")", "\n", "images", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "images", ",", "weight", "=", "Hz_prime", ".", "unsqueeze", "(", "2", ")", ",", "groups", "=", "batch_size", "*", "num_channels", ")", "\n", "images", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "images", ",", "weight", "=", "Hz_prime", ".", "unsqueeze", "(", "3", ")", ",", "groups", "=", "batch_size", "*", "num_channels", ")", "\n", "images", "=", "images", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_hue": [[110, 149], ["torch.eye", "torch.eye", "constant", "torch.where", "torch.where", "images.reshape.reshape", "images.reshape.reshape", "numpy.asarray", "numpy.sqrt", "torch.zeros_like", "torch.zeros_like", "rotate3d", "torch.rand", "torch.rand", "C[].mean", "ValueError", "torch.rand", "torch.rand", "C[].sum"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.constant", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.rotate3d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "rand_hue", "(", "images", ",", "affine", "=", "None", ")", ":", "\n", "    ", "batch_size", ",", "num_channels", ",", "height", ",", "width", "=", "images", ".", "shape", "\n", "device", "=", "images", ".", "device", "\n", "I_4", "=", "torch", ".", "eye", "(", "4", ",", "device", "=", "device", ")", "\n", "C", "=", "I_4", "\n", "v", "=", "constant", "(", "np", ".", "asarray", "(", "[", "1", ",", "1", ",", "1", ",", "0", "]", ")", "/", "np", ".", "sqrt", "(", "3", ")", ",", "device", "=", "device", ")", "# Luma axis.", "\n", "\n", "# Apply hue rotation with probability (hue * strength).", "\n", "if", "num_channels", ">", "1", ":", "\n", "        ", "theta", "=", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "2", "-", "1", ")", "*", "np", ".", "pi", "*", "1", "\n", "theta", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "0.5", ",", "theta", ",", "torch", ".", "zeros_like", "(", "theta", ")", ")", "\n", "#         if debug_percentile is not None:", "\n", "#             theta = torch.full_like(theta, (debug_percentile * 2 - 1) * np.pi * 1)", "\n", "C", "=", "rotate3d", "(", "v", ",", "theta", ")", "@", "C", "# Rotate around v.", "\n", "\n", "# Apply saturation with probability (saturation * strength).", "\n", "#     if self.saturation > 0 and num_channels > 1:", "\n", "#         s = torch.exp2(torch.randn([batch_size, 1, 1], device=device) * self.saturation_std)", "\n", "#         s = torch.where(torch.rand([batch_size, 1, 1], device=device) < self.saturation * self.p, s, torch.ones_like(s))", "\n", "#         if debug_percentile is not None:", "\n", "#             s = torch.full_like(s, torch.exp2(torch.erfinv(debug_percentile * 2 - 1) * self.saturation_std))", "\n", "#         C = (v.ger(v) + (I_4 - v.ger(v)) * s) @ C", "\n", "\n", "# ------------------------------", "\n", "# Execute color transformations.", "\n", "# ------------------------------", "\n", "\n", "# Execute if the transform is not identity.", "\n", "", "if", "C", "is", "not", "I_4", ":", "\n", "        ", "images", "=", "images", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "height", "*", "width", "]", ")", "\n", "if", "num_channels", "==", "3", ":", "\n", "            ", "images", "=", "C", "[", ":", ",", ":", "3", ",", ":", "3", "]", "@", "images", "+", "C", "[", ":", ",", ":", "3", ",", "3", ":", "]", "\n", "", "elif", "num_channels", "==", "1", ":", "\n", "            ", "C", "=", "C", "[", ":", ",", ":", "3", ",", ":", "]", ".", "mean", "(", "dim", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "images", "=", "images", "*", "C", "[", ":", ",", ":", ",", ":", "3", "]", ".", "sum", "(", "dim", "=", "2", ",", "keepdims", "=", "True", ")", "+", "C", "[", ":", ",", ":", ",", "3", ":", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Image must be RGB (3 channels) or L (1 channel)'", ")", "\n", "", "images", "=", "images", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "height", ",", "width", "]", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_geo": [[150, 267], ["Hz_geom.to.to", "torch.eye", "torch.eye", "torch.floor", "torch.floor", "torch.where", "torch.where", "torch.exp2", "torch.exp2", "torch.where", "torch.where", "torch.exp2", "torch.exp2", "torch.where", "torch.where", "torch.where", "torch.where", "matrix", "cp[].permute().flatten", "margin.min.max", "margin.min.min", "margin.min.ceil().to", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch_utils.ops.upfirdn2d.upsample2d", "torch.nn.functional.affine_grid", "torch.nn.functional.affine_grid", "torch_utils.ops.grid_sample_gradfix.grid_sample", "torch_utils.ops.upfirdn2d.downsample2d", "torch.zeros_like", "torch.zeros_like", "scale2d_inv", "torch.ones_like", "torch.ones_like", "scale2d_inv", "torch.ones_like", "torch.ones_like", "scale2d_inv", "torch.randn", "torch.randn", "torch.zeros_like", "torch.zeros_like", "translate2d_inv", "matrix.t", "torch.cat().max", "torch.cat().max", "constant", "constant", "constant", "translate2d", "scale2d_inv", "translate2d_inv", "scale2d_inv", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.randn", "torch.randn", "torch.rand", "torch.rand", "torch.randn", "torch.randn", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "cp[].permute", "margin.min.ceil", "scale2d", "translate2d", "scale2d", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.matrix", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upsample2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.grid_sample_gradfix.grid_sample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.downsample2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.scale2d_inv", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.scale2d_inv", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.scale2d_inv", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.translate2d_inv", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.constant", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.constant", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.constant", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.translate2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.scale2d_inv", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.translate2d_inv", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.scale2d_inv", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.scale2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.translate2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.scale2d"], ["", "def", "rand_geo", "(", "images", ",", "affine", "=", "None", ")", ":", "\n", "    ", "batch_size", ",", "num_channels", ",", "height", ",", "width", "=", "images", ".", "shape", "\n", "device", "=", "images", ".", "device", "\n", "\n", "Hz_geom", ",", "_", "=", "affine", "\n", "Hz_geom", "=", "Hz_geom", ".", "to", "(", "images", ".", "device", ")", "\n", "\n", "I_3", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "device", ")", "\n", "G_inv", "=", "I_3", "\n", "\n", "# Apply x-flip with probability (xflip * strength).", "\n", "if", "1", ":", "\n", "        ", "i", "=", "torch", ".", "floor", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "2", ")", "\n", "i", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "1", ",", "i", ",", "torch", ".", "zeros_like", "(", "i", ")", ")", "\n", "#         if debug_percentile is not None:", "\n", "#             i = torch.full_like(i, torch.floor(debug_percentile * 2))", "\n", "G_inv", "=", "G_inv", "@", "scale2d_inv", "(", "1", "-", "2", "*", "i", ",", "1", ")", "\n", "\n", "#     # Apply 90 degree rotations with probability (rotate90 * strength).", "\n", "#     if self.rotate90 > 0:", "\n", "#         i = torch.floor(torch.rand([batch_size], device=device) * 4)", "\n", "#         i = torch.where(torch.rand([batch_size], device=device) < self.rotate90 * P, i, torch.zeros_like(i))", "\n", "#         if debug_percentile is not None:", "\n", "#             i = torch.full_like(i, torch.floor(debug_percentile * 4))", "\n", "#         G_inv = G_inv @ rotate2d_inv(-np.pi / 2 * i)", "\n", "\n", "# Apply integer translation with probability (xint * strength).", "\n", "#     if self.xint > 0:", "\n", "#         t = (torch.rand([batch_size, 2], device=device) * 2 - 1) * self.xint_max", "\n", "#         t = torch.where(torch.rand([batch_size, 1], device=device) < self.xint * P, t, torch.zeros_like(t))", "\n", "#         if debug_percentile is not None:", "\n", "#             t = torch.full_like(t, (debug_percentile * 2 - 1) * self.xint_max)", "\n", "#         G_inv = G_inv @ translate2d_inv(torch.round(t[:,0] * width), torch.round(t[:,1] * height))", "\n", "\n", "# --------------------------------------------------------", "\n", "# Select parameters for general geometric transformations.", "\n", "# --------------------------------------------------------", "\n", "\n", "# Apply isotropic scaling with probability (scale * strength).", "\n", "", "if", "1", ":", "\n", "        ", "s", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "0.2", ")", "\n", "s", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "0.3", ",", "s", ",", "torch", ".", "ones_like", "(", "s", ")", ")", "\n", "#         if debug_percentile is not None:", "\n", "#             s = torch.full_like(s, torch.exp2(torch.erfinv(debug_percentile * 2 - 1) * self.scale_std))", "\n", "G_inv", "=", "G_inv", "@", "scale2d_inv", "(", "s", ",", "s", ")", "\n", "\n", "#     # Apply pre-rotation with probability p_rot.", "\n", "#     p_rot = 1 - torch.sqrt((1 - self.rotate * self.p).clamp(0, 1)) # P(pre OR post) = p", "\n", "#     if self.rotate > 0:", "\n", "#         theta = (torch.rand([batch_size], device=device) * 2 - 1) * np.pi * self.rotate_max", "\n", "#         theta = torch.where(torch.rand([batch_size], device=device) < p_rot, theta, torch.zeros_like(theta))", "\n", "#         if debug_percentile is not None:", "\n", "#             theta = torch.full_like(theta, (debug_percentile * 2 - 1) * np.pi * self.rotate_max)", "\n", "#         G_inv = G_inv @ rotate2d_inv(-theta) # Before anisotropic scaling.", "\n", "\n", "#     Apply anisotropic scaling with probability (aniso * strength).", "\n", "", "if", "1", ":", "\n", "        ", "s", "=", "torch", ".", "exp2", "(", "torch", ".", "randn", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "*", "0.2", ")", "\n", "s", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", "]", ",", "device", "=", "device", ")", "<", "0.3", ",", "s", ",", "torch", ".", "ones_like", "(", "s", ")", ")", "\n", "#         if debug_percentile is not None:", "\n", "#             s = torch.full_like(s, torch.exp2(torch.erfinv(debug_percentile * 2 - 1) * self.aniso_std))", "\n", "G_inv", "=", "G_inv", "@", "scale2d_inv", "(", "s", ",", "1", "/", "s", ")", "\n", "\n", "#     # Apply post-rotation with probability p_rot.", "\n", "#     if self.rotate > 0:", "\n", "#         theta = (torch.rand([batch_size], device=device) * 2 - 1) * np.pi * self.rotate_max", "\n", "#         theta = torch.where(torch.rand([batch_size], device=device) < p_rot, theta, torch.zeros_like(theta))", "\n", "#         if debug_percentile is not None:", "\n", "#             theta = torch.zeros_like(theta)", "\n", "#         G_inv = G_inv @ rotate2d_inv(-theta) # After anisotropic scaling.", "\n", "\n", "# Apply fractional translation with probability (xfrac * strength).", "\n", "", "if", "1", ":", "\n", "        ", "t", "=", "torch", ".", "randn", "(", "[", "batch_size", ",", "2", "]", ",", "device", "=", "device", ")", "*", "0.125", "\n", "t", "=", "torch", ".", "where", "(", "torch", ".", "rand", "(", "[", "batch_size", ",", "1", "]", ",", "device", "=", "device", ")", "<", "0.3", ",", "t", ",", "torch", ".", "zeros_like", "(", "t", ")", ")", "\n", "#         if debug_percentile is not None:", "\n", "#             t = torch.full_like(t, torch.erfinv(debug_percentile * 2 - 1) * 0.125)", "\n", "G_inv", "=", "G_inv", "@", "translate2d_inv", "(", "t", "[", ":", ",", "0", "]", "*", "width", ",", "t", "[", ":", ",", "1", "]", "*", "height", ")", "\n", "\n", "# ----------------------------------", "\n", "# Execute geometric transformations.", "\n", "# ----------------------------------", "\n", "\n", "# Execute if the transform is not identity.", "\n", "", "if", "G_inv", "is", "not", "I_3", ":", "\n", "\n", "# Calculate padding.", "\n", "        ", "cx", "=", "(", "width", "-", "1", ")", "/", "2", "\n", "cy", "=", "(", "height", "-", "1", ")", "/", "2", "\n", "cp", "=", "matrix", "(", "[", "-", "cx", ",", "-", "cy", ",", "1", "]", ",", "[", "cx", ",", "-", "cy", ",", "1", "]", ",", "[", "cx", ",", "cy", ",", "1", "]", ",", "[", "-", "cx", ",", "cy", ",", "1", "]", ",", "device", "=", "device", ")", "# [idx, xyz]", "\n", "cp", "=", "G_inv", "@", "cp", ".", "t", "(", ")", "# [batch, xyz, idx]", "\n", "Hz_pad", "=", "Hz_geom", ".", "shape", "[", "0", "]", "//", "4", "\n", "margin", "=", "cp", "[", ":", ",", ":", "2", ",", ":", "]", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "flatten", "(", "1", ")", "# [xy, batch * idx]", "\n", "margin", "=", "torch", ".", "cat", "(", "[", "-", "margin", ",", "margin", "]", ")", ".", "max", "(", "dim", "=", "1", ")", ".", "values", "# [x0, y0, x1, y1]", "\n", "margin", "=", "margin", "+", "constant", "(", "[", "Hz_pad", "*", "2", "-", "cx", ",", "Hz_pad", "*", "2", "-", "cy", "]", "*", "2", ",", "device", "=", "device", ")", "\n", "margin", "=", "margin", ".", "max", "(", "constant", "(", "[", "0", ",", "0", "]", "*", "2", ",", "device", "=", "device", ")", ")", "\n", "margin", "=", "margin", ".", "min", "(", "constant", "(", "[", "width", "-", "1", ",", "height", "-", "1", "]", "*", "2", ",", "device", "=", "device", ")", ")", "\n", "mx0", ",", "my0", ",", "mx1", ",", "my1", "=", "margin", ".", "ceil", "(", ")", ".", "to", "(", "torch", ".", "int32", ")", "\n", "\n", "# Pad image and adjust origin.", "\n", "images", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "input", "=", "images", ",", "pad", "=", "[", "mx0", ",", "mx1", ",", "my0", ",", "my1", "]", ",", "mode", "=", "'reflect'", ")", "\n", "G_inv", "=", "translate2d", "(", "(", "mx0", "-", "mx1", ")", "/", "2", ",", "(", "my0", "-", "my1", ")", "/", "2", ")", "@", "G_inv", "\n", "\n", "# Upsample.", "\n", "images", "=", "upfirdn2d", ".", "upsample2d", "(", "x", "=", "images", ",", "f", "=", "Hz_geom", ",", "up", "=", "2", ")", "\n", "G_inv", "=", "scale2d", "(", "2", ",", "2", ",", "device", "=", "device", ")", "@", "G_inv", "@", "scale2d_inv", "(", "2", ",", "2", ",", "device", "=", "device", ")", "\n", "G_inv", "=", "translate2d", "(", "-", "0.5", ",", "-", "0.5", ",", "device", "=", "device", ")", "@", "G_inv", "@", "translate2d_inv", "(", "-", "0.5", ",", "-", "0.5", ",", "device", "=", "device", ")", "\n", "\n", "# Execute transformation.", "\n", "shape", "=", "[", "batch_size", ",", "num_channels", ",", "(", "height", "+", "Hz_pad", "*", "2", ")", "*", "2", ",", "(", "width", "+", "Hz_pad", "*", "2", ")", "*", "2", "]", "\n", "G_inv", "=", "scale2d", "(", "2", "/", "images", ".", "shape", "[", "3", "]", ",", "2", "/", "images", ".", "shape", "[", "2", "]", ",", "device", "=", "device", ")", "@", "G_inv", "@", "scale2d_inv", "(", "2", "/", "shape", "[", "3", "]", ",", "2", "/", "shape", "[", "2", "]", ",", "device", "=", "device", ")", "\n", "grid", "=", "torch", ".", "nn", ".", "functional", ".", "affine_grid", "(", "theta", "=", "G_inv", "[", ":", ",", ":", "2", ",", ":", "]", ",", "size", "=", "shape", ",", "align_corners", "=", "False", ")", "\n", "images", "=", "grid_sample_gradfix", ".", "grid_sample", "(", "images", ",", "grid", ")", "\n", "\n", "# Downsample and crop.", "\n", "images", "=", "upfirdn2d", ".", "downsample2d", "(", "x", "=", "images", ",", "f", "=", "Hz_geom", ",", "down", "=", "2", ",", "padding", "=", "-", "Hz_pad", "*", "2", ",", "flip_filter", "=", "True", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_brightness": [[271, 274], ["torch.rand", "torch.rand", "x.size"], "function", ["None"], ["", "def", "rand_brightness", "(", "x", ",", "affine", "=", "None", ")", ":", "\n", "    ", "x", "=", "x", "+", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "-", "0.5", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_saturation": [[276, 280], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "rand_saturation", "(", "x", ",", "affine", "=", "None", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "*", "2", ")", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_contrast": [[282, 286], ["x.mean", "torch.rand", "torch.rand", "x.size"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "rand_contrast", "(", "x", ",", "affine", "=", "None", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "x_mean", ")", "*", "(", "torch", ".", "rand", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "+", "0.5", ")", "+", "x_mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_translation": [[288, 302], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "F.pad.permute().contiguous", "[].permute.size", "[].permute.size", "F.pad.permute"], "function", ["None"], ["", "def", "rand_translation", "(", "x", ",", "ratio", "=", "0.2", ",", "affine", "=", "None", ")", ":", "\n", "    ", "shift_x", ",", "shift_y", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "translation_x", "=", "torch", ".", "randint", "(", "-", "shift_x", ",", "shift_x", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_y", "=", "torch", ".", "randint", "(", "-", "shift_y", ",", "shift_y", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "translation_x", "+", "1", ",", "0", ",", "x", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "translation_y", "+", "1", ",", "0", ",", "x", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_translation_1": [[303, 319], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "F.pad.permute().contiguous", "[].permute.size", "[].permute.size", "F.pad.permute"], "function", ["None"], ["", "def", "rand_translation_1", "(", "x", ",", "ratio", "=", "0.1", ",", "affine", "=", "None", ")", ":", "\n", "    ", "shift_x", ",", "shift_y", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "translation_x", "=", "torch", ".", "randint", "(", "-", "shift_x", ",", "shift_x", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_y", "=", "torch", ".", "randint", "(", "-", "shift_y", ",", "shift_y", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_x", "=", "translation_x", "*", "2", "-", "1", "\n", "translation_y", "=", "translation_y", "*", "2", "-", "1", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "translation_x", "+", "1", ",", "0", ",", "x", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "translation_y", "+", "1", ",", "0", ",", "x", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_strong_translation": [[320, 335], ["torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.pad", "[].permute", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "[].permute.size", "F.pad.permute().contiguous", "[].permute.size", "[].permute.size", "F.pad.permute"], "function", ["None"], ["", "def", "rand_strong_translation", "(", "x", ",", "ratio", "=", "0.125", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio", "=", "0.125", "\n", "shift_x", ",", "shift_y", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "translation_x", "=", "torch", ".", "randint", "(", "-", "shift_x", ",", "shift_x", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "translation_y", "=", "torch", ".", "randint", "(", "-", "shift_y", ",", "shift_y", "+", "1", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "2", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "translation_x", "+", "1", ",", "0", ",", "x", ".", "size", "(", "2", ")", "+", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "translation_y", "+", "1", ",", "0", ",", "x", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "x_pad", "=", "F", ".", "pad", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "x", "=", "x_pad", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_cutout": [[337, 359], ["random.random", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_cutout", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "        ", "cutout_size", "=", "int", "(", "x", ".", "size", "(", "2", ")", "*", "ratio", "+", "0.5", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "ratio", "+", "0.5", ")", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "del", "offset_x", "\n", "del", "offset_y", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "del", "mask", "\n", "del", "grid_x", "\n", "del", "grid_y", "\n", "del", "grid_batch", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_erase": [[360, 385], ["random.randint", "random.randint", "random.random", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_erase", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio_x", "=", "random", ".", "randint", "(", "20", ",", "x", ".", "size", "(", "2", ")", "//", "2", "+", "20", ")", "\n", "ratio_y", "=", "random", ".", "randint", "(", "20", ",", "x", ".", "size", "(", "3", ")", "//", "2", "+", "20", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "#         cutout_size = int(x.size(2) * ratio_x + 0.5), int(x.size(3) * ratio_y + 0.5)", "\n", "        ", "cutout_size", "=", "ratio_x", ",", "ratio_y", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "del", "offset_x", "\n", "del", "offset_y", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "del", "mask", "\n", "del", "grid_x", "\n", "del", "grid_y", "\n", "del", "grid_batch", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_erase_ratio": [[386, 411], ["random.randint", "random.randint", "int", "int", "int", "int", "random.random", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_erase_ratio", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio_x", "=", "random", ".", "randint", "(", "int", "(", "x", ".", "size", "(", "2", ")", "*", "0.2", ")", ",", "int", "(", "x", ".", "size", "(", "2", ")", "*", "0.7", ")", ")", "\n", "ratio_y", "=", "random", ".", "randint", "(", "int", "(", "x", ".", "size", "(", "3", ")", "*", "0.2", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "0.7", ")", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "#         cutout_size = int(x.size(2) * ratio_x + 0.5), int(x.size(3) * ratio_y + 0.5)", "\n", "        ", "cutout_size", "=", "ratio_x", ",", "ratio_y", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "del", "offset_x", "\n", "del", "offset_y", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "del", "mask", "\n", "del", "grid_x", "\n", "del", "grid_y", "\n", "del", "grid_batch", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_stl_erase_ratio": [[412, 437], ["random.randint", "random.randint", "random.random", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_stl_erase_ratio", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio_x", "=", "random", ".", "randint", "(", "20", ",", "x", ".", "size", "(", "2", ")", "//", "2", "+", "20", ")", "\n", "ratio_y", "=", "random", ".", "randint", "(", "20", ",", "x", ".", "size", "(", "3", ")", "//", "2", "+", "20", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "#         cutout_size = int(x.size(2) * ratio_x + 0.5), int(x.size(3) * ratio_y + 0.5)", "\n", "        ", "cutout_size", "=", "ratio_x", ",", "ratio_y", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "del", "offset_x", "\n", "del", "offset_y", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "del", "mask", "\n", "del", "grid_x", "\n", "del", "grid_y", "\n", "del", "grid_batch", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_erase2_ratio": [[438, 483], ["random.randint", "random.randint", "int", "int", "int", "int", "random.random", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "torch.ones.unsqueeze", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "function", ["None"], ["", "def", "rand_erase2_ratio", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio_x", "=", "random", ".", "randint", "(", "int", "(", "x", ".", "size", "(", "2", ")", "*", "0.2", ")", ",", "int", "(", "x", ".", "size", "(", "2", ")", "*", "0.7", ")", ")", "\n", "ratio_y", "=", "random", ".", "randint", "(", "int", "(", "x", ".", "size", "(", "3", ")", "*", "0.2", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "0.7", ")", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "#         cutout_size = int(x.size(2) * ratio_x + 0.5), int(x.size(3) * ratio_y + 0.5)", "\n", "        ", "cutout_size", "=", "ratio_x", ",", "ratio_y", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "del", "offset_x", "\n", "del", "offset_y", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "del", "mask", "\n", "del", "grid_x", "\n", "del", "grid_y", "\n", "del", "grid_batch", "\n", "\n", "cutout_size", "=", "ratio_x", ",", "ratio_y", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "del", "offset_x", "\n", "del", "offset_y", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "del", "mask", "\n", "del", "grid_x", "\n", "del", "grid_y", "\n", "del", "grid_batch", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_rand_erase_ratio": [[484, 503], ["random.randint", "random.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.meshgrid", "torch.meshgrid", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ones", "torch.ones", "int", "int", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.size", "x.size", "x.size", "mask[].unsqueeze", "x.size", "x.size", "x.size", "int", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size", "int", "x.size", "x.size", "int", "x.size"], "function", ["None"], ["", "def", "rand_rand_erase_ratio", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "ratio_x", "=", "random", ".", "randint", "(", "int", "(", "x", ".", "size", "(", "2", ")", "*", "0.2", ")", ",", "int", "(", "x", ".", "size", "(", "2", ")", "*", "0.7", ")", ")", "\n", "ratio_y", "=", "random", ".", "randint", "(", "int", "(", "x", ".", "size", "(", "3", ")", "*", "0.2", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", "*", "0.7", ")", ")", "\n", "#     if random.random() < 0.3:", "\n", "#         cutout_size = int(x.size(2) * ratio_x + 0.5), int(x.size(3) * ratio_y + 0.5)", "\n", "cutout_size", "=", "ratio_x", ",", "ratio_y", "\n", "offset_x", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "2", ")", "+", "(", "1", "-", "cutout_size", "[", "0", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "offset_y", "=", "torch", ".", "randint", "(", "0", ",", "x", ".", "size", "(", "3", ")", "+", "(", "1", "-", "cutout_size", "[", "1", "]", "%", "2", ")", ",", "size", "=", "[", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "grid_batch", ",", "grid_x", ",", "grid_y", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", "torch", ".", "arange", "(", "cutout_size", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", ",", "\n", ")", "\n", "grid_x", "=", "torch", ".", "clamp", "(", "grid_x", "+", "offset_x", "-", "cutout_size", "[", "0", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "2", ")", "-", "1", ")", "\n", "grid_y", "=", "torch", ".", "clamp", "(", "grid_y", "+", "offset_y", "-", "cutout_size", "[", "1", "]", "//", "2", ",", "min", "=", "0", ",", "max", "=", "x", ".", "size", "(", "3", ")", "-", "1", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", "[", "grid_batch", ",", "grid_x", ",", "grid_y", "]", "=", "0", "\n", "x", "[", ":", "int", "(", "x", ".", "size", "(", "0", ")", "*", "0.3", ")", "]", "=", "x", "[", ":", "int", "(", "x", ".", "size", "(", "0", ")", "*", "0.3", ")", "]", "*", "mask", "[", ":", "int", "(", "x", ".", "size", "(", "0", ")", "*", "0.3", ")", "]", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_cutmix": [[504, 542], ["torch.randperm().cuda", "torch.randperm().cuda", "diff_aug.rand_cutmix.rand_bbox"], "function", ["None"], ["", "def", "rand_cutmix", "(", "x", ",", "affine", "=", "None", ")", ":", "\n", "    ", "def", "rand_bbox", "(", "size", ",", "lam", ")", ":", "\n", "        ", "W", "=", "size", "[", "2", "]", "\n", "H", "=", "size", "[", "3", "]", "\n", "cut_rat", "=", "lam", "\n", "cut_w", "=", "np", ".", "int", "(", "W", "*", "cut_rat", ")", "\n", "cut_h", "=", "np", ".", "int", "(", "H", "*", "cut_rat", ")", "\n", "\n", "# uniform", "\n", "#         if random.random()<0.5:", "\n", "#             cx = 0", "\n", "#         else:", "\n", "#             cx = int(W*0.6)", "\n", "#         if random.random()<0.5:", "\n", "#             cy = 0", "\n", "#         else:", "\n", "#             cy = int(H*0.6)", "\n", "\n", "cx", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "\n", "bbx1", "=", "np", ".", "clip", "(", "cx", ",", "0", ",", "W", ")", "\n", "bby1", "=", "np", ".", "clip", "(", "cy", ",", "0", ",", "H", ")", "\n", "bbx2", "=", "np", ".", "clip", "(", "cx", "+", "cut_w", ",", "0", ",", "W", ")", "\n", "bby2", "=", "np", ".", "clip", "(", "cy", "+", "cut_h", ",", "0", ",", "H", ")", "\n", "\n", "return", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "\n", "\n", "", "lam", "=", "0.45", "+", "0.1", "*", "random", ".", "random", "(", ")", "\n", "rand_index", "=", "torch", ".", "randperm", "(", "x", ".", "size", "(", ")", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "#     for i in range(10000):", "\n", "#         if rand_index[0].item() == 0:", "\n", "#             rand_index = torch.randperm(x.size()[0]).cuda()", "\n", "#         else:", "\n", "#             break", "\n", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "=", "rand_bbox", "(", "x", ".", "size", "(", ")", ",", "lam", ")", "\n", "x", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "=", "x", "[", "rand_index", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.rand_rotate": [[573, 578], ["random.randint", "random.random", "torch.rot90", "torch.rot90"], "function", ["None"], ["", "def", "rand_rotate", "(", "x", ",", "ratio", "=", "0.5", ",", "affine", "=", "None", ")", ":", "\n", "    ", "k", "=", "random", ".", "randint", "(", "1", ",", "3", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "ratio", ":", "\n", "        ", "x", "=", "torch", ".", "rot90", "(", "x", ",", "k", ",", "[", "2", ",", "3", "]", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.matmul.__init__": [[35, 37], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.matmul.forward": [[38, 41], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.PixelNorm.__init__": [[48, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.PixelNorm.forward": [[51, 53], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.CustomAct.__init__": [[66, 72], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.CustomAct.forward": [[73, 75], ["ViT_custom_scale2.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Mlp.__init__": [[77, 85], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "ViT_custom_scale2.CustomAct", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Mlp.forward": [[86, 93], ["ViT_custom_scale2.Mlp.fc1", "ViT_custom_scale2.Mlp.act", "ViT_custom_scale2.Mlp.drop", "ViT_custom_scale2.Mlp.fc2", "ViT_custom_scale2.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Attention.__init__": [[96, 126], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ViT_custom_scale2.matmul", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "ViT_custom_scale2.Attention.register_buffer", "models_search.ViT_helper.trunc_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "if", "self", ".", "window_size", "!=", "0", ":", "\n", "            ", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "2", "*", "window_size", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "window_size", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "window_size", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "window_size", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Attention.forward": [[127, 144], ["ViT_custom_scale2.Attention.qkv().reshape().permute", "ViT_custom_scale2.Attention.softmax", "ViT_custom_scale2.Attention.attn_drop", "ViT_custom_scale2.Attention.mat().transpose().reshape", "ViT_custom_scale2.Attention.proj", "ViT_custom_scale2.Attention.proj_drop", "ViT_custom_scale2.Attention.mat", "ViT_custom_scale2.Attention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "ViT_custom_scale2.Attention.qkv().reshape", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "ViT_custom_scale2.Attention.mat().transpose", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "ViT_custom_scale2.Attention.qkv", "ViT_custom_scale2.Attention.mat", "ViT_custom_scale2.Attention.relative_position_index.view().clone", "ViT_custom_scale2.Attention.relative_position_index.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "if", "self", ".", "window_size", "!=", "0", ":", "\n", "            ", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", ".", "clone", "(", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.CustomNorm.__init__": [[146, 157], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "ViT_custom_scale2.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.CustomNorm.forward": [[158, 166], ["ViT_custom_scale2.CustomNorm.norm().permute", "ViT_custom_scale2.CustomNorm.norm", "ViT_custom_scale2.CustomNorm.norm", "ViT_custom_scale2.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Block.__init__": [[201, 212], ["torch.Module.__init__", "ViT_custom_scale2.CustomNorm", "ViT_custom_scale2.Attention", "ViT_custom_scale2.CustomNorm", "int", "ViT_custom_scale2.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Block.forward": [[213, 217], ["ViT_custom_scale2.Block.drop_path", "ViT_custom_scale2.Block.drop_path", "ViT_custom_scale2.Block.attn", "ViT_custom_scale2.Block.mlp", "ViT_custom_scale2.Block.norm1", "ViT_custom_scale2.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.StageBlock.__init__": [[220, 236], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ViT_custom_scale2.Block", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.StageBlock.forward": [[237, 241], ["blk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "block", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Generator.__init__": [[254, 328], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ViT_custom_scale2.StageBlock", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "models_search.ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "args.g_depth.split", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom_scale2.StageBlock", "ViT_custom_scale2.StageBlock"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "args", ".", "bottom_width", "\n", "self", ".", "embed_dim", "=", "embed_dim", "=", "args", ".", "gf_dim", "\n", "norm_layer", "=", "args", ".", "g_norm", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "g_depth", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "args", ".", "g_act", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "self", ".", "upsample_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", ",", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "tRGB_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "self", ".", "tRGB_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "4", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "self", ".", "tRGB_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "16", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Generator._init_weights": [[330, 344], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Generator.set_arch": [[345, 347], ["None"], "methods", ["None"], ["", "", "def", "set_arch", "(", "self", ",", "x", ",", "cur_stage", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Generator.forward": [[348, 368], ["ViT_custom_scale2.Generator.l1().view", "ViT_custom_scale2.Generator.size", "ViT_custom_scale2.Generator.blocks", "ViT_custom_scale2.Generator.tRGB_1", "ViT_custom_scale2.pixel_upsample", "ViT_custom_scale2.Generator.tRGB_2", "ViT_custom_scale2.pixel_upsample", "ViT_custom_scale2.Generator.tRGB_3", "ViT_custom_scale2.Generator.pos_embed[].to", "ViT_custom_scale2.Generator.permute().view", "ViT_custom_scale2.Generator.pos_embed[].to", "ViT_custom_scale2.Generator.permute().view", "ViT_custom_scale2.Generator.pos_embed[].to", "ViT_custom_scale2.Generator.permute().view", "ViT_custom_scale2.Generator.l1", "ViT_custom_scale2.Generator.get_device", "ViT_custom_scale2.Generator.get_device", "ViT_custom_scale2.Generator.get_device", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ViT_custom_scale2.Generator.permute", "ViT_custom_scale2.Generator.permute", "ViT_custom_scale2.Generator.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample"], ["", "def", "forward", "(", "self", ",", "z", ",", "epoch", ")", ":", "\n", "        ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "\n", "x_1", "=", "self", ".", "tRGB_1", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", ",", "H", ",", "W", ")", ")", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "1", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "self", ".", "upsample_blocks", "[", "0", "]", "(", "x", ")", "\n", "\n", "x_2", "=", "self", ".", "tRGB_2", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", "//", "4", ",", "H", ",", "W", ")", ")", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "2", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "self", ".", "upsample_blocks", "[", "1", "]", "(", "x", ")", "\n", "\n", "x_3", "=", "self", ".", "tRGB_3", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", "//", "16", ",", "H", ",", "W", ")", ")", "\n", "output", "=", "F", ".", "interpolate", "(", "x_1", ",", "scale_factor", "=", "4", ")", "+", "F", ".", "interpolate", "(", "x_2", ",", "scale_factor", "=", "2", ")", "+", "x_3", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.SpaceToDepth.__init__": [[375, 379], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "block_size", "in", "{", "2", ",", "4", "}", ",", "\"Space2Depth only supports blocks size = 4 or 2\"", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.SpaceToDepth.forward": [[380, 387], ["x.view.view.size", "x.view.view.view", "x.view.view.permute().contiguous", "x.view.view.view", "x.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "S", "=", "self", ".", "block_size", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "H", "//", "S", ",", "S", ",", "W", "//", "S", ",", "S", ")", "# (N, C, H//bs, bs, W//bs, bs)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "# (N, bs, bs, C, H//bs, W//bs)", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", "*", "S", "*", "S", ",", "H", "//", "S", ",", "W", "//", "S", ")", "# (N, C*bs^2, H//bs, W//bs)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.DisBlock.__init__": [[390, 402], ["torch.Module.__init__", "ViT_custom_scale2.CustomNorm", "ViT_custom_scale2.Attention", "ViT_custom_scale2.CustomNorm", "int", "ViT_custom_scale2.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.DisBlock.forward": [[403, 407], ["ViT_custom_scale2.DisBlock.drop_path", "ViT_custom_scale2.DisBlock.drop_path", "ViT_custom_scale2.DisBlock.attn", "ViT_custom_scale2.DisBlock.mlp", "ViT_custom_scale2.DisBlock.norm1", "ViT_custom_scale2.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Discriminator.__init__": [[410, 486], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_custom_scale2.CustomNorm", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "ViT_custom_scale2.Discriminator.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "ViT_custom_scale2.DisBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.asarray", "numpy.eye", "range", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "ViT_custom_scale2.Discriminator.register_buffer", "ViT_custom_scale2.Discriminator.register_buffer", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom_scale2.DisBlock", "ViT_custom_scale2.DisBlock", "numpy.convolve", "numpy.convolve", "scipy.signal.convolve", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch_utils.ops.upfirdn2d.setup_filter", "range", "range", "numpy.arange", "numpy.dstack().reshape", "numpy.dstack", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "32", ",", "patch_size", "=", "None", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "None", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "args", ".", "df_dim", "\n", "\n", "depth", "=", "args", ".", "d_depth", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "patch_size", "=", "patch_size", "=", "args", ".", "patch_size", "\n", "norm_layer", "=", "args", ".", "d_norm", "\n", "self", ".", "window_size", "=", "args", ".", "d_window_size", "\n", "\n", "act_layer", "=", "args", ".", "d_act", "\n", "self", ".", "fRGB_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", "*", "3", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_2", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "patch_size", "*", "2", ",", "stride", "=", "patch_size", "*", "2", ",", "padding", "=", "0", ")", "\n", "#         self.fRGB_4 = nn.Conv2d(3, embed_dim//2, kernel_size=patch_size, stride=patch_size, padding=0)", "\n", "\n", "num_patches_1", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "num_patches_2", "=", "(", "(", "args", ".", "img_size", "//", "2", ")", "//", "patch_size", ")", "**", "2", "\n", "#         num_patches_4 = ((args.img_size//8) // patch_size)**2", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_1", ",", "embed_dim", "//", "4", "*", "3", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_2", ",", "embed_dim", ")", ")", "\n", "#         self.pos_embed_4 = nn.Parameter(torch.zeros(1, num_patches_4, embed_dim))", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", "*", "3", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "args", ".", "bottom_width", "*", "4", "//", "2", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_2", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "args", ".", "bottom_width", "*", "4", "//", "4", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "last_block", "=", "nn", ".", "Sequential", "(", "\n", "#             Block(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer),", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "0", "]", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "window_size", "=", "0", ")", "\n", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_2", ",", "std", "=", ".02", ")", "\n", "#         trunc_normal_(self.pos_embed_4, std=.02)", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "if", "'filter'", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "Hz_lo", "=", "np", ".", "asarray", "(", "wavelets", "[", "'sym2'", "]", ")", "# H(z)", "\n", "Hz_hi", "=", "Hz_lo", "*", "(", "(", "-", "1", ")", "**", "np", ".", "arange", "(", "Hz_lo", ".", "size", ")", ")", "# H(-z)", "\n", "Hz_lo2", "=", "np", ".", "convolve", "(", "Hz_lo", ",", "Hz_lo", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(z) * H(z^-1) / 2", "\n", "Hz_hi2", "=", "np", ".", "convolve", "(", "Hz_hi", ",", "Hz_hi", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(-z) * H(-z^-1) / 2", "\n", "Hz_fbank", "=", "np", ".", "eye", "(", "4", ",", "1", ")", "# Bandpass(H(z), b_i)", "\n", "for", "i", "in", "range", "(", "1", ",", "Hz_fbank", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "Hz_fbank", "=", "np", ".", "dstack", "(", "[", "Hz_fbank", ",", "np", ".", "zeros_like", "(", "Hz_fbank", ")", "]", ")", ".", "reshape", "(", "Hz_fbank", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "Hz_fbank", "=", "scipy", ".", "signal", ".", "convolve", "(", "Hz_fbank", ",", "[", "Hz_lo2", "]", ")", "\n", "Hz_fbank", "[", "i", ",", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "-", "Hz_hi2", ".", "size", ")", "//", "2", ":", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "+", "Hz_hi2", ".", "size", ")", "//", "2", "]", "+=", "Hz_hi2", "\n", "", "Hz_fbank", "=", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "self", ".", "register_buffer", "(", "'Hz_fbank'", ",", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_fbank", "=", "None", "\n", "", "if", "'geo'", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'Hz_geom'", ",", "upfirdn2d", ".", "setup_filter", "(", "wavelets", "[", "'sym6'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_geom", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Discriminator._init_weights": [[487, 495], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Discriminator.forward_features": [[497, 537], ["blk.size", "ViT_custom_scale2.Discriminator.fRGB_1().flatten().permute", "ViT_custom_scale2.Discriminator.fRGB_2().flatten().permute", "blk.size", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_scale2.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_scale2.Discriminator.last_block", "ViT_custom_scale2.Discriminator.norm", "models_search.diff_aug.DiffAugment", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "ViT_custom_scale2.Discriminator.fRGB_1().flatten", "ViT_custom_scale2.Discriminator.fRGB_2().flatten", "blk.permute", "blk.flatten", "ViT_custom_scale2.Discriminator.fRGB_1", "ViT_custom_scale2.Discriminator.fRGB_2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.DiffAugment"], ["", "", "def", "forward_features", "(", "self", ",", "x", ",", "aug", "=", "True", ",", "epoch", "=", "400", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", "and", "aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "args", ".", "diff_aug", ",", "True", ",", "[", "self", ".", "Hz_geom", ",", "self", ".", "Hz_fbank", "]", ")", "\n", "#         with torch.no_grad():", "\n", "#             save_image(x.clone(), f'in_{self.args.rank}.png', nrow=4, padding=1, normalize=True, scale_each=True)", "\n", "#         import time", "\n", "#         time.sleep(5)", "\n", "", "B", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "H", "=", "W", "=", "H", "//", "self", ".", "patch_size", "\n", "\n", "x_1", "=", "self", ".", "fRGB_1", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_2", "=", "self", ".", "fRGB_2", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#         x_4 = self.fRGB_4(nn.AvgPool2d(8)(x)).flatten(2).permute(0,2,1)", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "x", "=", "x_1", "+", "self", ".", "pos_embed_1", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "for", "blk", "in", "self", ".", "blocks_1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_2", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "\n", "\n", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "last_block", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.Discriminator.forward": [[538, 542], ["ViT_custom_scale2.Discriminator.forward_features", "ViT_custom_scale2.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "aug", "=", "True", ",", "epoch", "=", "400", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ",", "aug", "=", "aug", ",", "epoch", "=", "epoch", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.count_matmul": [[42, 46], ["torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.gelu": [[54, 61], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.leakyrelu": [[62, 64], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.window_partition": [[169, 181], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.window_reverse": [[183, 197], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2.pixel_upsample": [[242, 252], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_scale2._downsample": [[370, 373], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.matmul.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.matmul.forward": [[14, 17], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.PixelNorm.__init__": [[23, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.PixelNorm.forward": [[25, 27], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "", "", "def", "gelu", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.CustomAct.__init__": [[37, 43], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.CustomAct.forward": [[44, 46], ["ViT_custom_local544444_256_rp.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.Mlp.__init__": [[48, 56], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "ViT_custom_local544444_256_rp.CustomAct", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.Mlp.forward": [[56, 63], ["ViT_custom_local544444_256_rp.Mlp.fc1", "ViT_custom_local544444_256_rp.Mlp.act", "ViT_custom_local544444_256_rp.Mlp.drop", "ViT_custom_local544444_256_rp.Mlp.fc2", "ViT_custom_local544444_256_rp.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.Attention.__init__": [[67, 97], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ViT_custom_local544444_256_rp.matmul", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "ViT_custom_local544444_256_rp.Attention.register_buffer", "models_search.ViT_helper.trunc_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "2", "*", "window_size", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "window_size", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "window_size", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "window_size", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.Attention.forward": [[98, 114], ["ViT_custom_local544444_256_rp.Attention.qkv().reshape().permute", "ViT_custom_local544444_256_rp.Attention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "ViT_custom_local544444_256_rp.Attention.softmax", "ViT_custom_local544444_256_rp.Attention.attn_drop", "ViT_custom_local544444_256_rp.Attention.mat().transpose().reshape", "ViT_custom_local544444_256_rp.Attention.proj", "ViT_custom_local544444_256_rp.Attention.proj_drop", "ViT_custom_local544444_256_rp.Attention.mat", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "ViT_custom_local544444_256_rp.Attention.qkv().reshape", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "ViT_custom_local544444_256_rp.Attention.mat().transpose", "ViT_custom_local544444_256_rp.Attention.qkv", "ViT_custom_local544444_256_rp.Attention.relative_position_index.view", "ViT_custom_local544444_256_rp.Attention.mat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.CustomNorm.__init__": [[118, 129], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "ViT_custom_local544444_256_rp.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.CustomNorm.forward": [[130, 138], ["ViT_custom_local544444_256_rp.CustomNorm.norm().permute", "ViT_custom_local544444_256_rp.CustomNorm.norm", "ViT_custom_local544444_256_rp.CustomNorm.norm", "ViT_custom_local544444_256_rp.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.Block.__init__": [[140, 151], ["torch.Module.__init__", "ViT_custom_local544444_256_rp.CustomNorm", "ViT_custom_local544444_256_rp.Attention", "ViT_custom_local544444_256_rp.CustomNorm", "int", "ViT_custom_local544444_256_rp.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.Block.forward": [[151, 155], ["ViT_custom_local544444_256_rp.Block.drop_path", "ViT_custom_local544444_256_rp.Block.drop_path", "ViT_custom_local544444_256_rp.Block.attn", "ViT_custom_local544444_256_rp.Block.mlp", "ViT_custom_local544444_256_rp.Block.norm1", "ViT_custom_local544444_256_rp.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.StageBlock.__init__": [[157, 174], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_custom_local544444_256_rp.Block", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "models", "=", "[", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "window_size", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "*", "models", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.StageBlock.forward": [[174, 181], ["ViT_custom_local544444_256_rp.StageBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#         for blk in self.block:", "\n", "#             # x = blk(x)", "\n", "#             checkpoint.checkpoint(blk, x)", "\n", "#         x = checkpoint.checkpoint(self.block, x)", "\n", "        ", "x", "=", "self", ".", "block", "(", "x", ")", "\n", "return", "x", "\n", "", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.Generator.__init__": [[230, 361], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ViT_custom_local544444_256_rp.StageBlock", "ViT_custom_local544444_256_rp.StageBlock", "ViT_custom_local544444_256_rp.StageBlock", "ViT_custom_local544444_256_rp.StageBlock", "ViT_custom_local544444_256_rp.StageBlock", "ViT_custom_local544444_256_rp.StageBlock", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "models_search.ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "args.g_depth.split", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "args", ".", "bottom_width", "\n", "self", ".", "embed_dim", "=", "embed_dim", "=", "args", ".", "gf_dim", "\n", "self", ".", "window_size", "=", "args", ".", "g_window_size", "\n", "norm_layer", "=", "args", ".", "g_norm", "\n", "mlp_ratio", "=", "args", ".", "g_mlp", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "g_depth", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "args", ".", "g_act", "\n", "self", ".", "l2_size", "=", "0", "\n", "\n", "if", "self", ".", "l2_size", "==", "0", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "", "elif", "self", ".", "l2_size", ">", "1000", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "l2_size", "//", "16", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "l2_size", "//", "16", ",", "self", ".", "l2_size", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "l2_size", ",", "self", ".", "embed_dim", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "l2_size", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "self", ".", "l2_size", ",", "self", ".", "embed_dim", ")", "\n", "", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_4", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "8", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_5", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "16", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed_6", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "32", ")", "**", "2", ",", "embed_dim", "//", "64", ")", ")", "\n", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", ",", "\n", "self", ".", "pos_embed_4", ",", "\n", "self", ".", "pos_embed_5", ",", "\n", "self", ".", "pos_embed_6", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "8", "\n", ")", "\n", "self", ".", "blocks_2", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "16", "\n", ")", "\n", "self", ".", "blocks_3", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "32", "\n", ")", "\n", "self", ".", "blocks_4", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "3", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "self", ".", "blocks_5", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "4", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "self", ".", "blocks_6", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "5", "]", ",", "\n", "dim", "=", "embed_dim", "//", "64", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "64", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.Generator.forward": [[382, 446], ["ViT_custom_local544444_256_rp.Generator.size", "ViT_custom_local544444_256_rp.Generator.blocks_1", "ViT_custom_local544444_256_rp.bicubic_upsample", "ViT_custom_local544444_256_rp.Generator.size", "ViT_custom_local544444_256_rp.Generator.blocks_2", "ViT_custom_local544444_256_rp.bicubic_upsample", "ViT_custom_local544444_256_rp.Generator.size", "ViT_custom_local544444_256_rp.Generator.blocks_3", "ViT_custom_local544444_256_rp.pixel_upsample", "ViT_custom_local544444_256_rp.Generator.size", "ViT_custom_local544444_256_rp.Generator.view", "ViT_custom_local544444_256_rp.window_partition", "ViT_custom_local544444_256_rp.Generator.view", "ViT_custom_local544444_256_rp.Generator.blocks_4", "ViT_custom_local544444_256_rp.Generator.view", "window_reverse().view", "ViT_custom_local544444_256_rp.pixel_upsample", "ViT_custom_local544444_256_rp.Generator.size", "ViT_custom_local544444_256_rp.Generator.view", "ViT_custom_local544444_256_rp.window_partition", "ViT_custom_local544444_256_rp.Generator.view", "ViT_custom_local544444_256_rp.Generator.blocks_5", "ViT_custom_local544444_256_rp.Generator.view", "window_reverse().view", "ViT_custom_local544444_256_rp.pixel_upsample", "ViT_custom_local544444_256_rp.Generator.size", "ViT_custom_local544444_256_rp.Generator.view", "ViT_custom_local544444_256_rp.window_partition", "ViT_custom_local544444_256_rp.Generator.view", "ViT_custom_local544444_256_rp.Generator.blocks_6", "ViT_custom_local544444_256_rp.Generator.view", "window_reverse().view().permute", "ViT_custom_local544444_256_rp.Generator.deconv", "z.size", "z.size", "ViT_custom_local544444_256_rp.Generator.l1().view", "ViT_custom_local544444_256_rp.Generator.l1().view", "ViT_custom_local544444_256_rp.Generator.l2", "ViT_custom_local544444_256_rp.Generator.l1().view", "ViT_custom_local544444_256_rp.Generator.l2", "ViT_custom_local544444_256_rp.window_reverse", "ViT_custom_local544444_256_rp.window_reverse", "window_reverse().view", "z.norm", "z.norm", "ViT_custom_local544444_256_rp.Generator.l1", "ViT_custom_local544444_256_rp.Generator.l1", "ViT_custom_local544444_256_rp.Generator.l1", "ViT_custom_local544444_256_rp.window_reverse"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.bicubic_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.bicubic_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse"], ["", "def", "forward", "(", "self", ",", "z", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "latent_norm", ":", "\n", "            ", "latent_size", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "z", "=", "(", "z", "/", "z", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "(", "latent_size", "**", "0.5", ")", ")", "\n", "", "if", "self", ".", "args", ".", "latent_norm", ":", "\n", "            ", "latent_size", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "z", "=", "(", "z", "/", "z", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "(", "latent_size", "**", "0.5", ")", ")", "\n", "", "if", "self", ".", "l2_size", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "", "elif", "self", ".", "l2_size", ">", "1000", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "l2_size", "//", "16", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "l2_size", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "\n", "", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", "\n", "B", "=", "x", ".", "size", "(", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "x", "=", "self", ".", "blocks_1", "(", "x", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "1", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "blocks_2", "(", "x", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "2", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "blocks_3", "(", "x", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "3", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "self", ".", "blocks_4", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "4", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "self", ".", "blocks_5", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "5", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "self", ".", "blocks_6", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "\n", "output", "=", "self", ".", "deconv", "(", "x", ")", "\n", "return", "output", "\n", "", "", "def", "_downsample", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.DisBlock.__init__": [[451, 463], ["torch.Module.__init__", "ViT_custom_local544444_256_rp.CustomNorm", "ViT_custom_local544444_256_rp.Attention", "ViT_custom_local544444_256_rp.CustomNorm", "int", "ViT_custom_local544444_256_rp.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "separate", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.DisBlock.forward": [[464, 468], ["ViT_custom_local544444_256_rp.DisBlock.drop_path", "ViT_custom_local544444_256_rp.DisBlock.drop_path", "ViT_custom_local544444_256_rp.DisBlock.attn", "ViT_custom_local544444_256_rp.DisBlock.mlp", "ViT_custom_local544444_256_rp.DisBlock.norm1", "ViT_custom_local544444_256_rp.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.Discriminator.__init__": [[471, 542], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_custom_local544444_256_rp.CustomNorm", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "ViT_custom_local544444_256_rp.Discriminator.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "ViT_custom_local544444_256_rp.Block", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom_local544444_256_rp.DisBlock", "ViT_custom_local544444_256_rp.DisBlock", "ViT_custom_local544444_256_rp.DisBlock", "ViT_custom_local544444_256_rp.DisBlock", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "32", ",", "patch_size", "=", "None", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "None", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "args", ".", "df_dim", "\n", "\n", "depth", "=", "args", ".", "d_depth", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "patch_size", "=", "patch_size", "=", "args", ".", "patch_size", "\n", "norm_layer", "=", "args", ".", "d_norm", "\n", "act_layer", "=", "args", ".", "d_act", "\n", "self", ".", "window_size", "=", "args", ".", "d_window_size", "\n", "\n", "self", ".", "fRGB_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_2", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_3", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_4", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "2", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "\n", "num_patches_1", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "num_patches_2", "=", "(", "(", "args", ".", "img_size", "//", "2", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_3", "=", "(", "(", "args", ".", "img_size", "//", "4", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_4", "=", "(", "(", "args", ".", "img_size", "//", "8", ")", "//", "patch_size", ")", "**", "2", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_1", ",", "embed_dim", "//", "8", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_3", ",", "embed_dim", "//", "2", ")", ")", "\n", "self", ".", "pos_embed_4", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_4", ",", "embed_dim", ")", ")", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "8", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", "+", "1", ")", "]", ")", "\n", "self", ".", "blocks_2", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_3", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "2", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_4", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "last_block", "=", "nn", ".", "Sequential", "(", "\n", "#             Block(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer),", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "0", "]", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_2", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_3", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_4", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.Discriminator._init_weights": [[543, 551], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.Discriminator.forward_features": [[553, 616], ["ViT_custom_local544444_256_rp.Discriminator.fRGB_1().flatten().permute", "ViT_custom_local544444_256_rp.Discriminator.fRGB_2().flatten().permute", "ViT_custom_local544444_256_rp.Discriminator.fRGB_3().flatten().permute", "ViT_custom_local544444_256_rp.Discriminator.fRGB_4().flatten().permute", "ViT_custom_local544444_256_rp.Discriminator.pos_drop", "blk.size", "blk.view", "ViT_custom_local544444_256_rp.window_partition", "blk.view", "blk.view", "window_reverse().view", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_local544444_256_rp.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_local544444_256_rp.Discriminator.last_block", "ViT_custom_local544444_256_rp.Discriminator.norm", "models_search.diff_aug.DiffAugment", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "ViT_custom_local544444_256_rp.Discriminator.fRGB_1().flatten", "ViT_custom_local544444_256_rp.Discriminator.fRGB_2().flatten", "ViT_custom_local544444_256_rp.Discriminator.fRGB_3().flatten", "ViT_custom_local544444_256_rp.Discriminator.fRGB_4().flatten", "ViT_custom_local544444_256_rp.window_reverse", "blk.permute", "blk.flatten", "blk.permute", "blk.flatten", "blk.permute", "blk.flatten", "ViT_custom_local544444_256_rp.Discriminator.fRGB_1", "ViT_custom_local544444_256_rp.Discriminator.fRGB_2", "ViT_custom_local544444_256_rp.Discriminator.fRGB_3", "ViT_custom_local544444_256_rp.Discriminator.fRGB_4", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "args", ".", "diff_aug", ",", "True", ")", "\n", "\n", "", "x_1", "=", "self", ".", "fRGB_1", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_2", "=", "self", ".", "fRGB_2", "(", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_3", "=", "self", ".", "fRGB_3", "(", "nn", ".", "AvgPool2d", "(", "4", ")", "(", "x", ")", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_4", "=", "self", ".", "fRGB_4", "(", "nn", ".", "AvgPool2d", "(", "8", ")", "(", "x", ")", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "x", "=", "x_1", "+", "self", ".", "pos_embed_1", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "H", "=", "W", "=", "self", ".", "args", ".", "img_size", "//", "self", ".", "patch_size", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_2", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_3", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_3", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_3", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_4", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_4", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_4", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "last_block", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.Discriminator.forward": [[617, 621], ["ViT_custom_local544444_256_rp.Discriminator.forward_features", "ViT_custom_local544444_256_rp.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.count_matmul": [[17, 21], ["torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.gelu": [[27, 34], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "", "def", "leakyrelu", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.leakyrelu": [[34, 36], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "", "class", "CustomAct", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.pixel_upsample": [[181, 191], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.bicubic_upsample": [[192, 202], ["x.permute.size", "x.permute.permute", "x.permute.view", "torch.functional.interpolate", "x.permute.size", "x.permute.view", "x.permute.permute"], "function", ["None"], ["", "def", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bicubic'", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.window_partition": [[203, 215], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp.window_reverse": [[215, 229], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "", "class", "Generator", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp._downsample": [[446, 449], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "", "class", "DisBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.matmul.__init__": [[37, 39], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.matmul.forward": [[40, 43], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.PixelNorm.__init__": [[50, 52], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.PixelNorm.forward": [[53, 55], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.CustomAct.__init__": [[68, 74], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.CustomAct.forward": [[75, 77], ["Celeba256_dis.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Mlp.__init__": [[79, 87], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "Celeba256_dis.CustomAct", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Mlp.forward": [[88, 95], ["Celeba256_dis.Mlp.fc1", "Celeba256_dis.Mlp.act", "Celeba256_dis.Mlp.drop", "Celeba256_dis.Mlp.fc2", "Celeba256_dis.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Attention.__init__": [[98, 111], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "Celeba256_dis.matmul"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "is_mask", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "is_mask", "=", "is_mask", "\n", "#         self.remove_mask = False", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Attention.forward": [[119, 160], ["int", "Celeba256_dis.Attention.view().view", "Celeba256_dis.Attention.qkv().reshape().permute", "Celeba256_dis.Attention.softmax", "Celeba256_dis.Attention.attn_drop", "Celeba256_dis.Attention.mat().transpose", "Celeba256_dis.Attention.reshape().view().view", "Celeba256_dis.Attention.proj", "Celeba256_dis.Attention.proj_drop", "math.sqrt", "Celeba256_dis.Attention.mat", "int", "Celeba256_dis.Attention.view().permute().reshape", "Celeba256_dis.Attention.qkv().reshape().permute", "Celeba256_dis.Attention.softmax", "Celeba256_dis.Attention.attn_drop", "Celeba256_dis.Attention.mat().transpose().reshape().view().permute().reshape", "Celeba256_dis.Attention.proj", "Celeba256_dis.Attention.proj_drop", "Celeba256_dis.Attention.qkv().reshape().permute", "Celeba256_dis.Attention.softmax", "Celeba256_dis.Attention.attn_drop", "Celeba256_dis.Attention.mat().transpose().reshape", "Celeba256_dis.Attention.proj", "Celeba256_dis.Attention.proj_drop", "Celeba256_dis.Attention.view", "Celeba256_dis.Attention.qkv().reshape", "k.transpose", "Celeba256_dis.Attention.mat", "Celeba256_dis.Attention.reshape().view", "math.sqrt", "Celeba256_dis.Attention.mat", "Celeba256_dis.Attention.mat", "Celeba256_dis.Attention.view().permute", "Celeba256_dis.Attention.qkv().reshape", "k.transpose", "Celeba256_dis.Attention.mat().transpose().reshape().view().permute", "Celeba256_dis.Attention.qkv().reshape", "k.transpose", "Celeba256_dis.Attention.mat().transpose", "Celeba256_dis.Attention.qkv", "Celeba256_dis.Attention.reshape", "Celeba256_dis.Attention.view", "Celeba256_dis.Attention.qkv", "Celeba256_dis.Attention.mat().transpose().reshape().view", "Celeba256_dis.Attention.qkv", "Celeba256_dis.Attention.mat", "Celeba256_dis.Attention.mat().transpose().reshape", "Celeba256_dis.Attention.mat().transpose", "Celeba256_dis.Attention.mat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "if", "self", ".", "is_mask", "==", "1", ":", "\n", "            ", "H", "=", "W", "=", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", "\n", "image", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", ".", "view", "(", "B", "*", "H", ",", "W", ",", "C", ")", "\n", "qkv", "=", "self", ".", "qkv", "(", "image", ")", ".", "reshape", "(", "B", "*", "H", ",", "W", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", "*", "H", ",", "W", ",", "C", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", ".", "view", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "", "elif", "self", ".", "is_mask", "==", "2", ":", "\n", "            ", "H", "=", "W", "=", "int", "(", "math", ".", "sqrt", "(", "N", ")", ")", "\n", "image", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "reshape", "(", "B", "*", "W", ",", "H", ",", "C", ")", "\n", "qkv", "=", "self", ".", "qkv", "(", "image", ")", ".", "reshape", "(", "B", "*", "W", ",", "H", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", "*", "W", ",", "H", ",", "C", ")", ".", "view", "(", "B", ",", "W", ",", "H", ",", "C", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.CustomNorm.__init__": [[162, 173], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "Celeba256_dis.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.CustomNorm.forward": [[174, 182], ["Celeba256_dis.CustomNorm.norm().permute", "Celeba256_dis.CustomNorm.norm", "Celeba256_dis.CustomNorm.norm", "Celeba256_dis.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Block.__init__": [[217, 228], ["torch.Module.__init__", "Celeba256_dis.CustomNorm", "Celeba256_dis.Attention", "Celeba256_dis.CustomNorm", "int", "Celeba256_dis.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Block.forward": [[229, 233], ["Celeba256_dis.Block.drop_path", "Celeba256_dis.Block.drop_path", "Celeba256_dis.Block.attn", "Celeba256_dis.Block.mlp", "Celeba256_dis.Block.norm1", "Celeba256_dis.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.StageBlock.__init__": [[236, 252], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "Celeba256_dis.Block", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.StageBlock.forward": [[253, 257], ["blk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "block", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Generator.__init__": [[270, 344], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "Celeba256_dis.StageBlock", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "models_search.ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "args.g_depth.split", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "Celeba256_dis.StageBlock", "Celeba256_dis.StageBlock"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "args", ".", "bottom_width", "\n", "self", ".", "embed_dim", "=", "embed_dim", "=", "args", ".", "gf_dim", "\n", "norm_layer", "=", "args", ".", "g_norm", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "g_depth", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "args", ".", "g_act", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "self", ".", "upsample_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", ",", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "tRGB_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "self", ".", "tRGB_2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "4", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n", "self", ".", "tRGB_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "16", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Generator._init_weights": [[346, 360], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Generator.set_arch": [[361, 363], ["None"], "methods", ["None"], ["", "", "def", "set_arch", "(", "self", ",", "x", ",", "cur_stage", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Generator.forward": [[364, 384], ["Celeba256_dis.Generator.l1().view", "Celeba256_dis.Generator.size", "Celeba256_dis.Generator.blocks", "Celeba256_dis.Generator.tRGB_1", "Celeba256_dis.pixel_upsample", "Celeba256_dis.Generator.tRGB_2", "Celeba256_dis.pixel_upsample", "Celeba256_dis.Generator.tRGB_3", "Celeba256_dis.Generator.pos_embed[].to", "Celeba256_dis.Generator.permute().view", "Celeba256_dis.Generator.pos_embed[].to", "Celeba256_dis.Generator.permute().view", "Celeba256_dis.Generator.pos_embed[].to", "Celeba256_dis.Generator.permute().view", "Celeba256_dis.Generator.l1", "Celeba256_dis.Generator.get_device", "Celeba256_dis.Generator.get_device", "Celeba256_dis.Generator.get_device", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "Celeba256_dis.Generator.permute", "Celeba256_dis.Generator.permute", "Celeba256_dis.Generator.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample"], ["", "def", "forward", "(", "self", ",", "z", ",", "epoch", ")", ":", "\n", "        ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "\n", "x_1", "=", "self", ".", "tRGB_1", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", ",", "H", ",", "W", ")", ")", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "1", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "self", ".", "upsample_blocks", "[", "0", "]", "(", "x", ")", "\n", "\n", "x_2", "=", "self", ".", "tRGB_2", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", "//", "4", ",", "H", ",", "W", ")", ")", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "2", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "self", ".", "upsample_blocks", "[", "1", "]", "(", "x", ")", "\n", "\n", "x_3", "=", "self", ".", "tRGB_3", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "self", ".", "embed_dim", "//", "16", ",", "H", ",", "W", ")", ")", "\n", "output", "=", "F", ".", "interpolate", "(", "x_1", ",", "scale_factor", "=", "4", ")", "+", "F", ".", "interpolate", "(", "x_2", ",", "scale_factor", "=", "2", ")", "+", "x_3", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.SpaceToDepth.__init__": [[391, 395], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "block_size", "in", "{", "2", ",", "4", "}", ",", "\"Space2Depth only supports blocks size = 4 or 2\"", "\n", "self", ".", "block_size", "=", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.SpaceToDepth.forward": [[396, 403], ["x.view.view.size", "x.view.view.view", "x.view.view.permute().contiguous", "x.view.view.view", "x.view.view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "S", "=", "self", ".", "block_size", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ",", "H", "//", "S", ",", "S", ",", "W", "//", "S", ",", "S", ")", "# (N, C, H//bs, bs, W//bs, bs)", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "5", ",", "1", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "# (N, bs, bs, C, H//bs, W//bs)", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", "*", "S", "*", "S", ",", "H", "//", "S", ",", "W", "//", "S", ")", "# (N, C*bs^2, H//bs, W//bs)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.DisBlock.__init__": [[406, 418], ["torch.Module.__init__", "Celeba256_dis.CustomNorm", "Celeba256_dis.Attention", "Celeba256_dis.CustomNorm", "int", "Celeba256_dis.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "separate", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "is_mask", "=", "separate", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.DisBlock.forward": [[419, 423], ["Celeba256_dis.DisBlock.drop_path", "Celeba256_dis.DisBlock.drop_path", "Celeba256_dis.DisBlock.attn", "Celeba256_dis.DisBlock.mlp", "Celeba256_dis.DisBlock.norm1", "Celeba256_dis.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Discriminator.__init__": [[426, 531], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "Celeba256_dis.CustomNorm", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "Celeba256_dis.Discriminator.apply", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "Celeba256_dis.Block", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.asarray", "numpy.eye", "range", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "Celeba256_dis.Discriminator.register_buffer", "Celeba256_dis.Discriminator.register_buffer", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "Celeba256_dis.DisBlock", "Celeba256_dis.DisBlock", "Celeba256_dis.DisBlock", "Celeba256_dis.DisBlock", "numpy.convolve", "numpy.convolve", "scipy.signal.convolve", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch_utils.ops.upfirdn2d.setup_filter", "range", "range", "range", "range", "numpy.arange", "numpy.dstack().reshape", "numpy.dstack", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.setup_filter"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "32", ",", "patch_size", "=", "None", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "None", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "args", ".", "df_dim", "\n", "\n", "depth", "=", "args", ".", "d_depth", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "patch_size", "=", "patch_size", "=", "args", ".", "patch_size", "\n", "norm_layer", "=", "args", ".", "d_norm", "\n", "self", ".", "window_size", "=", "args", ".", "d_window_size", "\n", "\n", "act_layer", "=", "args", ".", "d_act", "\n", "if", "patch_size", "!=", "6", ":", "\n", "            ", "self", ".", "fRGB_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "patch_size", "*", "2", ",", "stride", "=", "patch_size", ",", "padding", "=", "patch_size", "//", "2", ")", "\n", "self", ".", "fRGB_2", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "patch_size", "*", "2", ",", "stride", "=", "patch_size", "*", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_3", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "2", ",", "kernel_size", "=", "patch_size", "*", "4", ",", "stride", "=", "patch_size", "*", "4", ",", "padding", "=", "0", ")", "\n", "num_patches_1", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "num_patches_2", "=", "(", "(", "args", ".", "img_size", "//", "2", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_3", "=", "(", "(", "args", ".", "img_size", "//", "4", ")", "//", "patch_size", ")", "**", "2", "\n", "", "else", ":", "\n", "            ", "self", ".", "fRGB_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "6", ",", "stride", "=", "4", ",", "padding", "=", "1", ")", "\n", "self", ".", "fRGB_2", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "10", ",", "stride", "=", "8", ",", "padding", "=", "1", ")", "\n", "self", ".", "fRGB_3", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "2", ",", "kernel_size", "=", "18", ",", "stride", "=", "16", ",", "padding", "=", "1", ")", "\n", "num_patches_1", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "num_patches_2", "=", "(", "(", "args", ".", "img_size", "//", "2", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_3", "=", "(", "(", "args", ".", "img_size", "//", "4", ")", "//", "patch_size", ")", "**", "2", "\n", "self", ".", "patch_size", "=", "4", "\n", "#         self.fRGB_4 = nn.Conv2d(3, embed_dim//2, kernel_size=patch_size, stride=patch_size, padding=0)", "\n", "\n", "\n", "#         num_patches_4 = ((args.img_size//8) // patch_size)**2", "\n", "\n", "", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_1", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_2", ",", "embed_dim", "//", "2", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_3", ",", "embed_dim", ")", ")", "\n", "#         self.pos_embed_4 = nn.Parameter(torch.zeros(1, num_patches_4, embed_dim))", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_2", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "2", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", "-", "1", ")", "]", ")", "\n", "self", ".", "blocks_21", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "2", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "1", ")", "]", ")", "\n", "self", ".", "blocks_3", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", "+", "1", ")", "]", ")", "\n", "#         self.blocks_4 = nn.ModuleList([", "\n", "#             DisBlock(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer)", "\n", "#             for i in range(depth)])", "\n", "self", ".", "last_block", "=", "nn", ".", "Sequential", "(", "\n", "#             Block(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer),", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "0", "]", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_2", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_3", ",", "std", "=", ".02", ")", "\n", "#         trunc_normal_(self.pos_embed_4, std=.02)", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "if", "'filter'", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "Hz_lo", "=", "np", ".", "asarray", "(", "wavelets", "[", "'sym2'", "]", ")", "# H(z)", "\n", "Hz_hi", "=", "Hz_lo", "*", "(", "(", "-", "1", ")", "**", "np", ".", "arange", "(", "Hz_lo", ".", "size", ")", ")", "# H(-z)", "\n", "Hz_lo2", "=", "np", ".", "convolve", "(", "Hz_lo", ",", "Hz_lo", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(z) * H(z^-1) / 2", "\n", "Hz_hi2", "=", "np", ".", "convolve", "(", "Hz_hi", ",", "Hz_hi", "[", ":", ":", "-", "1", "]", ")", "/", "2", "# H(-z) * H(-z^-1) / 2", "\n", "Hz_fbank", "=", "np", ".", "eye", "(", "4", ",", "1", ")", "# Bandpass(H(z), b_i)", "\n", "for", "i", "in", "range", "(", "1", ",", "Hz_fbank", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "Hz_fbank", "=", "np", ".", "dstack", "(", "[", "Hz_fbank", ",", "np", ".", "zeros_like", "(", "Hz_fbank", ")", "]", ")", ".", "reshape", "(", "Hz_fbank", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "Hz_fbank", "=", "scipy", ".", "signal", ".", "convolve", "(", "Hz_fbank", ",", "[", "Hz_lo2", "]", ")", "\n", "Hz_fbank", "[", "i", ",", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "-", "Hz_hi2", ".", "size", ")", "//", "2", ":", "(", "Hz_fbank", ".", "shape", "[", "1", "]", "+", "Hz_hi2", ".", "size", ")", "//", "2", "]", "+=", "Hz_hi2", "\n", "", "Hz_fbank", "=", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "self", ".", "register_buffer", "(", "'Hz_fbank'", ",", "torch", ".", "as_tensor", "(", "Hz_fbank", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_fbank", "=", "None", "\n", "", "if", "'geo'", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'Hz_geom'", ",", "upfirdn2d", ".", "setup_filter", "(", "wavelets", "[", "'sym6'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Hz_geom", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Discriminator._init_weights": [[532, 540], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Discriminator.forward_features": [[542, 618], ["models_search.diff_aug.DiffAugment.size", "Celeba256_dis.Discriminator.fRGB_1().flatten().permute", "Celeba256_dis.Discriminator.fRGB_2().flatten().permute", "Celeba256_dis.Discriminator.fRGB_3().flatten().permute", "models_search.diff_aug.DiffAugment.size", "models_search.diff_aug.DiffAugment.view", "Celeba256_dis.window_partition", "models_search.diff_aug.DiffAugment.view", "models_search.diff_aug.DiffAugment.view", "window_reverse().view", "models_search.diff_aug.DiffAugment.permute().view", "models_search.diff_aug.DiffAugment.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models_search.diff_aug.DiffAugment.size", "models_search.diff_aug.DiffAugment.view", "Celeba256_dis.window_partition", "models_search.diff_aug.DiffAugment.view", "models_search.diff_aug.DiffAugment.view", "window_reverse().view", "models_search.diff_aug.DiffAugment.permute().view", "models_search.diff_aug.DiffAugment.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Celeba256_dis.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Celeba256_dis.Discriminator.last_block", "Celeba256_dis.Discriminator.norm", "models_search.diff_aug.DiffAugment", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "models_search.diff_aug.DiffAugment", "Celeba256_dis.Discriminator.fRGB_1().flatten", "Celeba256_dis.Discriminator.fRGB_2().flatten", "Celeba256_dis.Discriminator.fRGB_3().flatten", "Celeba256_dis.window_reverse", "models_search.diff_aug.DiffAugment.permute", "models_search.diff_aug.DiffAugment.flatten", "Celeba256_dis.window_reverse", "models_search.diff_aug.DiffAugment.permute", "models_search.diff_aug.DiffAugment.flatten", "Celeba256_dis.Discriminator.fRGB_1", "Celeba256_dis.Discriminator.fRGB_2", "Celeba256_dis.Discriminator.fRGB_3"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse"], ["", "", "def", "forward_features", "(", "self", ",", "x", ",", "aug", "=", "True", ",", "epoch", "=", "400", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", "and", "aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "args", ".", "diff_aug", ",", "True", ",", "[", "self", ".", "Hz_geom", ",", "self", ".", "Hz_fbank", "]", ")", "\n", "", "elif", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "\"translation\"", ",", "True", ",", "[", "self", ".", "Hz_geom", ",", "self", ".", "Hz_fbank", "]", ")", "\n", "", "B", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "H", "=", "W", "=", "H", "//", "self", ".", "patch_size", "\n", "\n", "x_1", "=", "self", ".", "fRGB_1", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_2", "=", "self", ".", "fRGB_2", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_3", "=", "self", ".", "fRGB_3", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#         x_4 = self.fRGB_4(nn.AvgPool2d(8)(x)).flatten(2).permute(0,2,1)", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "x", "=", "x_1", "+", "self", ".", "pos_embed_1", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "\n", "\n", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_2", "\n", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_21", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_3", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_3", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_3", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "#         _, _, C = x.shape", "\n", "#         x = x.permute(0, 2, 1).view(B, C, H, W)", "\n", "# #         x = SpaceToDepth(2)(x)", "\n", "#         x = nn.AvgPool2d(2)(x)", "\n", "#         _, _, H, W = x.shape", "\n", "#         x = x.flatten(2).permute(0, 2, 1)", "\n", "#         x = torch.cat([x, x_4], dim=-1)", "\n", "#         x = x + self.pos_embed_4", "\n", "\n", "#         for blk in self.blocks_4:", "\n", "#             x = blk(x)", "\n", "\n", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "last_block", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.Discriminator.forward": [[619, 623], ["Celeba256_dis.Discriminator.forward_features", "Celeba256_dis.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "aug", "=", "True", ",", "epoch", "=", "400", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ",", "aug", "=", "aug", ",", "epoch", "=", "epoch", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.count_matmul": [[44, 48], ["torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.gelu": [[56, 63], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.leakyrelu": [[64, 66], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.window_partition": [[185, 197], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.window_reverse": [[199, 213], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis.pixel_upsample": [[258, 268], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_dis._downsample": [[386, 389], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.matmul.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.matmul.forward": [[14, 17], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.PixelNorm.__init__": [[23, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.PixelNorm.forward": [[25, 27], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "", "", "def", "gelu", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.CustomAct.__init__": [[37, 43], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.CustomAct.forward": [[44, 46], ["ViT_custom_local544444_256_rp_noise.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.Mlp.__init__": [[48, 56], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "ViT_custom_local544444_256_rp_noise.CustomAct", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "#         self.noise_strength_1 = torch.nn.Parameter(torch.zeros([]))", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.Mlp.forward": [[58, 67], ["ViT_custom_local544444_256_rp_noise.Mlp.fc1", "ViT_custom_local544444_256_rp_noise.Mlp.act", "ViT_custom_local544444_256_rp_noise.Mlp.drop", "ViT_custom_local544444_256_rp_noise.Mlp.fc2", "ViT_custom_local544444_256_rp_noise.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#         x = x + torch.randn([x.size(0), x.size(1), 1], device=x.device) * self.noise_strength_1", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "#         x = x + torch.randn([x.size(0), x.size(1), 1], device=x.device) * self.noise_strength_2", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.Attention.__init__": [[71, 103], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ViT_custom_local544444_256_rp_noise.matmul", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "ViT_custom_local544444_256_rp_noise.Attention.register_buffer", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "models_search.ViT_helper.trunc_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "2", "*", "window_size", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "window_size", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "window_size", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "window_size", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "self", ".", "noise_strength_1", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "]", ")", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.Attention.forward": [[104, 121], ["ViT_custom_local544444_256_rp_noise.Attention.qkv().reshape().permute", "ViT_custom_local544444_256_rp_noise.Attention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "ViT_custom_local544444_256_rp_noise.Attention.softmax", "ViT_custom_local544444_256_rp_noise.Attention.attn_drop", "ViT_custom_local544444_256_rp_noise.Attention.mat().transpose().reshape", "ViT_custom_local544444_256_rp_noise.Attention.proj", "ViT_custom_local544444_256_rp_noise.Attention.proj_drop", "ViT_custom_local544444_256_rp_noise.Attention.mat", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "ViT_custom_local544444_256_rp_noise.Attention.qkv().reshape", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "ViT_custom_local544444_256_rp_noise.Attention.mat().transpose", "ViT_custom_local544444_256_rp_noise.Attention.size", "ViT_custom_local544444_256_rp_noise.Attention.size", "ViT_custom_local544444_256_rp_noise.Attention.qkv", "ViT_custom_local544444_256_rp_noise.Attention.relative_position_index.view", "ViT_custom_local544444_256_rp_noise.Attention.mat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", "+", "torch", ".", "randn", "(", "[", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "*", "self", ".", "noise_strength_1", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.CustomNorm.__init__": [[125, 136], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "ViT_custom_local544444_256_rp_noise.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.CustomNorm.forward": [[137, 145], ["ViT_custom_local544444_256_rp_noise.CustomNorm.norm().permute", "ViT_custom_local544444_256_rp_noise.CustomNorm.norm", "ViT_custom_local544444_256_rp_noise.CustomNorm.norm", "ViT_custom_local544444_256_rp_noise.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.Block.__init__": [[147, 158], ["torch.Module.__init__", "ViT_custom_local544444_256_rp_noise.CustomNorm", "ViT_custom_local544444_256_rp_noise.Attention", "ViT_custom_local544444_256_rp_noise.CustomNorm", "int", "ViT_custom_local544444_256_rp_noise.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.Block.forward": [[158, 162], ["ViT_custom_local544444_256_rp_noise.Block.drop_path", "ViT_custom_local544444_256_rp_noise.Block.drop_path", "ViT_custom_local544444_256_rp_noise.Block.attn", "ViT_custom_local544444_256_rp_noise.Block.mlp", "ViT_custom_local544444_256_rp_noise.Block.norm1", "ViT_custom_local544444_256_rp_noise.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.StageBlock.__init__": [[164, 181], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_custom_local544444_256_rp_noise.Block", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "models", "=", "[", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "window_size", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "*", "models", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.StageBlock.forward": [[181, 188], ["ViT_custom_local544444_256_rp_noise.StageBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#         for blk in self.block:", "\n", "#             # x = blk(x)", "\n", "#             checkpoint.checkpoint(blk, x)", "\n", "#         x = checkpoint.checkpoint(self.block, x)", "\n", "        ", "x", "=", "self", ".", "block", "(", "x", ")", "\n", "return", "x", "\n", "", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.Generator.__init__": [[237, 368], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ViT_custom_local544444_256_rp_noise.StageBlock", "ViT_custom_local544444_256_rp_noise.StageBlock", "ViT_custom_local544444_256_rp_noise.StageBlock", "ViT_custom_local544444_256_rp_noise.StageBlock", "ViT_custom_local544444_256_rp_noise.StageBlock", "ViT_custom_local544444_256_rp_noise.StageBlock", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "models_search.ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "args.g_depth.split", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "args", ".", "bottom_width", "\n", "self", ".", "embed_dim", "=", "embed_dim", "=", "args", ".", "gf_dim", "\n", "self", ".", "window_size", "=", "args", ".", "g_window_size", "\n", "norm_layer", "=", "args", ".", "g_norm", "\n", "mlp_ratio", "=", "args", ".", "g_mlp", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "g_depth", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "args", ".", "g_act", "\n", "self", ".", "l2_size", "=", "0", "\n", "\n", "if", "self", ".", "l2_size", "==", "0", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "", "elif", "self", ".", "l2_size", ">", "1000", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "l2_size", "//", "16", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "l2_size", "//", "16", ",", "self", ".", "l2_size", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "l2_size", ",", "self", ".", "embed_dim", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "l2_size", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "self", ".", "l2_size", ",", "self", ".", "embed_dim", ")", "\n", "", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_4", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "8", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_5", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "16", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed_6", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "32", ")", "**", "2", ",", "embed_dim", "//", "64", ")", ")", "\n", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", ",", "\n", "self", ".", "pos_embed_4", ",", "\n", "self", ".", "pos_embed_5", ",", "\n", "self", ".", "pos_embed_6", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "8", "\n", ")", "\n", "self", ".", "blocks_2", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "16", "\n", ")", "\n", "self", ".", "blocks_3", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "32", "\n", ")", "\n", "self", ".", "blocks_4", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "3", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "self", ".", "blocks_5", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "4", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "self", ".", "blocks_6", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "5", "]", ",", "\n", "dim", "=", "embed_dim", "//", "64", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "64", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.Generator.forward": [[389, 453], ["ViT_custom_local544444_256_rp_noise.Generator.size", "ViT_custom_local544444_256_rp_noise.Generator.blocks_1", "ViT_custom_local544444_256_rp_noise.bicubic_upsample", "ViT_custom_local544444_256_rp_noise.Generator.size", "ViT_custom_local544444_256_rp_noise.Generator.blocks_2", "ViT_custom_local544444_256_rp_noise.bicubic_upsample", "ViT_custom_local544444_256_rp_noise.Generator.size", "ViT_custom_local544444_256_rp_noise.Generator.blocks_3", "ViT_custom_local544444_256_rp_noise.pixel_upsample", "ViT_custom_local544444_256_rp_noise.Generator.size", "ViT_custom_local544444_256_rp_noise.Generator.view", "ViT_custom_local544444_256_rp_noise.window_partition", "ViT_custom_local544444_256_rp_noise.Generator.view", "ViT_custom_local544444_256_rp_noise.Generator.blocks_4", "ViT_custom_local544444_256_rp_noise.Generator.view", "window_reverse().view", "ViT_custom_local544444_256_rp_noise.pixel_upsample", "ViT_custom_local544444_256_rp_noise.Generator.size", "ViT_custom_local544444_256_rp_noise.Generator.view", "ViT_custom_local544444_256_rp_noise.window_partition", "ViT_custom_local544444_256_rp_noise.Generator.view", "ViT_custom_local544444_256_rp_noise.Generator.blocks_5", "ViT_custom_local544444_256_rp_noise.Generator.view", "window_reverse().view", "ViT_custom_local544444_256_rp_noise.pixel_upsample", "ViT_custom_local544444_256_rp_noise.Generator.size", "ViT_custom_local544444_256_rp_noise.Generator.view", "ViT_custom_local544444_256_rp_noise.window_partition", "ViT_custom_local544444_256_rp_noise.Generator.view", "ViT_custom_local544444_256_rp_noise.Generator.blocks_6", "ViT_custom_local544444_256_rp_noise.Generator.view", "window_reverse().view().permute", "ViT_custom_local544444_256_rp_noise.Generator.deconv", "z.size", "z.size", "ViT_custom_local544444_256_rp_noise.Generator.l1().view", "ViT_custom_local544444_256_rp_noise.Generator.l1().view", "ViT_custom_local544444_256_rp_noise.Generator.l2", "ViT_custom_local544444_256_rp_noise.Generator.l1().view", "ViT_custom_local544444_256_rp_noise.Generator.l2", "ViT_custom_local544444_256_rp_noise.window_reverse", "ViT_custom_local544444_256_rp_noise.window_reverse", "window_reverse().view", "z.norm", "z.norm", "ViT_custom_local544444_256_rp_noise.Generator.l1", "ViT_custom_local544444_256_rp_noise.Generator.l1", "ViT_custom_local544444_256_rp_noise.Generator.l1", "ViT_custom_local544444_256_rp_noise.window_reverse"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.bicubic_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.bicubic_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse"], ["", "def", "forward", "(", "self", ",", "z", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "latent_norm", ":", "\n", "            ", "latent_size", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "z", "=", "(", "z", "/", "z", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "(", "latent_size", "**", "0.5", ")", ")", "\n", "", "if", "self", ".", "args", ".", "latent_norm", ":", "\n", "            ", "latent_size", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "z", "=", "(", "z", "/", "z", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "(", "latent_size", "**", "0.5", ")", ")", "\n", "", "if", "self", ".", "l2_size", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "", "elif", "self", ".", "l2_size", ">", "1000", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "l2_size", "//", "16", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "l2_size", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "\n", "", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", "\n", "B", "=", "x", ".", "size", "(", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "x", "=", "self", ".", "blocks_1", "(", "x", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "1", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "blocks_2", "(", "x", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "2", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "self", ".", "blocks_3", "(", "x", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "3", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "self", ".", "blocks_4", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "4", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "self", ".", "blocks_5", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "5", "]", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "self", ".", "blocks_6", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "\n", "output", "=", "self", ".", "deconv", "(", "x", ")", "\n", "return", "output", "\n", "", "", "def", "_downsample", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.DisBlock.__init__": [[458, 470], ["torch.Module.__init__", "ViT_custom_local544444_256_rp_noise.CustomNorm", "ViT_custom_local544444_256_rp_noise.Attention", "ViT_custom_local544444_256_rp_noise.CustomNorm", "int", "ViT_custom_local544444_256_rp_noise.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "separate", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.DisBlock.forward": [[471, 475], ["ViT_custom_local544444_256_rp_noise.DisBlock.drop_path", "ViT_custom_local544444_256_rp_noise.DisBlock.drop_path", "ViT_custom_local544444_256_rp_noise.DisBlock.attn", "ViT_custom_local544444_256_rp_noise.DisBlock.mlp", "ViT_custom_local544444_256_rp_noise.DisBlock.norm1", "ViT_custom_local544444_256_rp_noise.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.Discriminator.__init__": [[478, 549], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ViT_custom_local544444_256_rp_noise.CustomNorm", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "ViT_custom_local544444_256_rp_noise.Discriminator.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "ViT_custom_local544444_256_rp_noise.Block", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom_local544444_256_rp_noise.DisBlock", "ViT_custom_local544444_256_rp_noise.DisBlock", "ViT_custom_local544444_256_rp_noise.DisBlock", "ViT_custom_local544444_256_rp_noise.DisBlock", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "32", ",", "patch_size", "=", "None", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "None", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "args", ".", "df_dim", "\n", "\n", "depth", "=", "args", ".", "d_depth", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "patch_size", "=", "patch_size", "=", "args", ".", "patch_size", "\n", "norm_layer", "=", "args", ".", "d_norm", "\n", "act_layer", "=", "args", ".", "d_act", "\n", "self", ".", "window_size", "=", "args", ".", "d_window_size", "\n", "\n", "self", ".", "fRGB_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_2", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_3", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_4", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "2", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "\n", "num_patches_1", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "num_patches_2", "=", "(", "(", "args", ".", "img_size", "//", "2", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_3", "=", "(", "(", "args", ".", "img_size", "//", "4", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_4", "=", "(", "(", "args", ".", "img_size", "//", "8", ")", "//", "patch_size", ")", "**", "2", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_1", ",", "embed_dim", "//", "8", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_3", ",", "embed_dim", "//", "2", ")", ")", "\n", "self", ".", "pos_embed_4", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_4", ",", "embed_dim", ")", ")", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "8", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", "+", "1", ")", "]", ")", "\n", "self", ".", "blocks_2", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_3", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "2", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_4", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "last_block", "=", "nn", ".", "Sequential", "(", "\n", "#             Block(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer),", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "0", "]", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_2", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_3", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_4", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.Discriminator._init_weights": [[550, 558], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.Discriminator.forward_features": [[560, 623], ["ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_1().flatten().permute", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_2().flatten().permute", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_3().flatten().permute", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_4().flatten().permute", "ViT_custom_local544444_256_rp_noise.Discriminator.pos_drop", "blk.size", "blk.view", "ViT_custom_local544444_256_rp_noise.window_partition", "blk.view", "blk.view", "window_reverse().view", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_local544444_256_rp_noise.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_local544444_256_rp_noise.Discriminator.last_block", "ViT_custom_local544444_256_rp_noise.Discriminator.norm", "models_search.diff_aug.DiffAugment", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_1().flatten", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_2().flatten", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_3().flatten", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_4().flatten", "ViT_custom_local544444_256_rp_noise.window_reverse", "blk.permute", "blk.flatten", "blk.permute", "blk.flatten", "blk.permute", "blk.flatten", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_1", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_2", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_3", "ViT_custom_local544444_256_rp_noise.Discriminator.fRGB_4", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "args", ".", "diff_aug", ",", "True", ")", "\n", "\n", "", "x_1", "=", "self", ".", "fRGB_1", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_2", "=", "self", ".", "fRGB_2", "(", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_3", "=", "self", ".", "fRGB_3", "(", "nn", ".", "AvgPool2d", "(", "4", ")", "(", "x", ")", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_4", "=", "self", ".", "fRGB_4", "(", "nn", ".", "AvgPool2d", "(", "8", ")", "(", "x", ")", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "x", "=", "x_1", "+", "self", ".", "pos_embed_1", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "H", "=", "W", "=", "self", ".", "args", ".", "img_size", "//", "self", ".", "patch_size", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_2", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_3", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_3", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_3", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_4", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_4", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_4", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "last_block", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.Discriminator.forward": [[624, 628], ["ViT_custom_local544444_256_rp_noise.Discriminator.forward_features", "ViT_custom_local544444_256_rp_noise.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.count_matmul": [[17, 21], ["torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.gelu": [[27, 34], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "", "def", "leakyrelu", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.leakyrelu": [[34, 36], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "", "class", "CustomAct", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.pixel_upsample": [[188, 198], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.bicubic_upsample": [[199, 209], ["x.permute.size", "x.permute.permute", "x.permute.view", "torch.functional.interpolate", "x.permute.size", "x.permute.view", "x.permute.permute"], "function", ["None"], ["", "def", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bicubic'", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.window_partition": [[210, 222], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise.window_reverse": [[222, 236], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "", "class", "Generator", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_local544444_256_rp_noise._downsample": [[453, 456], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "", "class", "DisBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.matmul.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.matmul.forward": [[14, 17], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.PixelNorm.__init__": [[23, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.PixelNorm.forward": [[25, 27], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.CustomAct.__init__": [[40, 46], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.CustomAct.forward": [[47, 49], ["Celeba256_gen.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.Mlp.__init__": [[51, 59], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "Celeba256_gen.CustomAct", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "#         self.noise_strength_1 = torch.nn.Parameter(torch.zeros([]))", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.Mlp.forward": [[61, 70], ["Celeba256_gen.Mlp.fc1", "Celeba256_gen.Mlp.act", "Celeba256_gen.Mlp.drop", "Celeba256_gen.Mlp.fc2", "Celeba256_gen.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#         x = x + torch.randn([x.size(0), x.size(1), 1], device=x.device) * self.noise_strength_1", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "#         x = x + torch.randn([x.size(0), x.size(1), 1], device=x.device) * self.noise_strength_2", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.CrossAttention.__init__": [[72, 91], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "Celeba256_gen.matmul", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "que_dim", ",", "key_dim", ",", "num_heads", "=", "4", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "que_dim", "=", "que_dim", "\n", "self", ".", "key_dim", "=", "key_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "que_dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "#         self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)", "\n", "self", ".", "q_transform", "=", "nn", ".", "Linear", "(", "que_dim", ",", "que_dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "k_transform", "=", "nn", ".", "Linear", "(", "key_dim", ",", "que_dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "v_transform", "=", "nn", ".", "Linear", "(", "key_dim", ",", "que_dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "que_dim", ",", "que_dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "\n", "\n", "self", ".", "noise_strength_1", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.CrossAttention.forward": [[92, 114], ["Celeba256_gen.CrossAttention.q_transform", "Celeba256_gen.CrossAttention.k_transform", "Celeba256_gen.CrossAttention.v_transform", "q.reshape().permute.reshape().permute.reshape().permute", "k.reshape().permute.reshape().permute.reshape().permute", "v.reshape().permute.reshape().permute.reshape().permute", "Celeba256_gen.CrossAttention.softmax", "Celeba256_gen.CrossAttention.attn_drop", "Celeba256_gen.CrossAttention.mat().transpose().reshape", "Celeba256_gen.CrossAttention.proj", "Celeba256_gen.CrossAttention.proj_drop", "Celeba256_gen.CrossAttention.mat", "Celeba256_gen.CrossAttention.size", "v.reshape().permute.reshape().permute.size", "q.reshape().permute.reshape().permute.reshape", "k.reshape().permute.reshape().permute.reshape", "v.reshape().permute.reshape().permute.reshape", "k.reshape().permute.reshape().permute.transpose", "Celeba256_gen.CrossAttention.size", "v.reshape().permute.reshape().permute.size", "Celeba256_gen.CrossAttention.mat().transpose", "Celeba256_gen.CrossAttention.mat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "embedding", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "B", ",", "E_N", ",", "E_C", "=", "embedding", ".", "shape", "\n", "\n", "# transform", "\n", "q", "=", "self", ".", "q_transform", "(", "x", ")", "\n", "k", "=", "self", ".", "k_transform", "(", "embedding", ")", "\n", "v", "=", "self", ".", "v_transform", "(", "embedding", ")", "\n", "# reshape", "\n", "q", "=", "q", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "self", ".", "que_dim", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (B, H, N, C)", "\n", "k", "=", "k", ".", "reshape", "(", "B", ",", "E_N", ",", "self", ".", "num_heads", ",", "self", ".", "que_dim", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (B, H, N, C)", "\n", "v", "=", "v", ".", "reshape", "(", "B", ",", "E_N", ",", "self", ".", "num_heads", ",", "self", ".", "que_dim", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (B, H, N, C)", "\n", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "assert", "attn", ".", "size", "(", "-", "1", ")", "==", "v", ".", "size", "(", "-", "2", ")", ",", "f\"attn.size: {attn.size()}, v.size:{v.size()}\"", "\n", "output", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "que_dim", ")", "\n", "output", "=", "self", ".", "proj", "(", "output", ")", "\n", "output", "=", "self", ".", "proj_drop", "(", "output", ")", "\n", "return", "x", "+", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.Attention.__init__": [[116, 148], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "Celeba256_gen.matmul", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "Celeba256_gen.Attention.register_buffer", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "models_search.ViT_helper.trunc_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "2", "*", "window_size", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "window_size", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "window_size", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "window_size", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "self", ".", "noise_strength_1", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "]", ")", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.Attention.forward": [[149, 166], ["Celeba256_gen.Attention.qkv().reshape().permute", "Celeba256_gen.Attention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "Celeba256_gen.Attention.softmax", "Celeba256_gen.Attention.attn_drop", "Celeba256_gen.Attention.mat().transpose().reshape", "Celeba256_gen.Attention.proj", "Celeba256_gen.Attention.proj_drop", "Celeba256_gen.Attention.mat", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "Celeba256_gen.Attention.qkv().reshape", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "Celeba256_gen.Attention.mat().transpose", "Celeba256_gen.Attention.size", "Celeba256_gen.Attention.size", "Celeba256_gen.Attention.qkv", "Celeba256_gen.Attention.relative_position_index.view", "Celeba256_gen.Attention.mat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", "+", "torch", ".", "randn", "(", "[", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "1", "]", ",", "device", "=", "x", ".", "device", ")", "*", "self", ".", "noise_strength_1", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.CustomNorm.__init__": [[170, 181], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "Celeba256_gen.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.CustomNorm.forward": [[182, 190], ["Celeba256_gen.CustomNorm.norm().permute", "Celeba256_gen.CustomNorm.norm", "Celeba256_gen.CustomNorm.norm", "Celeba256_gen.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.Block.__init__": [[192, 205], ["torch.Module.__init__", "Celeba256_gen.CustomNorm", "Celeba256_gen.Attention", "Celeba256_gen.CustomNorm", "int", "Celeba256_gen.Mlp", "Celeba256_gen.CrossAttention", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "embedding_dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "cross_attention", "=", "CrossAttention", "(", "que_dim", "=", "dim", ",", "key_dim", "=", "embedding_dim", ",", "num_heads", "=", "num_heads", ")", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.Block.forward": [[205, 219], ["Celeba256_gen.Block.cross_attention", "window_reverse().view.size", "int", "window_reverse().view.view", "Celeba256_gen.window_partition", "window_reverse().view.view", "window_reverse().view.view", "window_reverse().view", "numpy.sqrt", "Celeba256_gen.Block.drop_path", "Celeba256_gen.Block.drop_path", "Celeba256_gen.Block.attn", "Celeba256_gen.window_reverse", "Celeba256_gen.Block.mlp", "Celeba256_gen.Block.norm1", "Celeba256_gen.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", ",", "embedding", "=", "inputs", "\n", "x", "=", "self", ".", "cross_attention", "(", "x", ",", "embedding", ")", "\n", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "H", "=", "W", "=", "int", "(", "np", ".", "sqrt", "(", "N", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "N", ",", "C", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "[", "x", ",", "embedding", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.StageBlock.__init__": [[221, 239], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "Celeba256_gen.Block", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "embedding_dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "models", "=", "[", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "embedding_dim", "=", "embedding_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "window_size", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "*", "models", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "embedding", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.StageBlock.forward": [[239, 246], ["Celeba256_gen.StageBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "embedding", ")", ":", "\n", "#         for blk in self.block:", "\n", "#             # x = blk(x)", "\n", "#             checkpoint.checkpoint(blk, x)", "\n", "#         x = checkpoint.checkpoint(self.block, x)", "\n", "        ", "x", "=", "self", ".", "block", "(", "[", "x", ",", "embedding", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.Generator.__init__": [[308, 449], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "Celeba256_gen.StageBlock", "Celeba256_gen.StageBlock", "Celeba256_gen.StageBlock", "Celeba256_gen.StageBlock", "Celeba256_gen.StageBlock", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "models_search.ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "args.g_depth.split", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "args", ".", "bottom_width", "\n", "self", ".", "embed_dim", "=", "embed_dim", "=", "args", ".", "gf_dim", "\n", "self", ".", "window_size", "=", "args", ".", "g_window_size", "\n", "norm_layer", "=", "args", ".", "g_norm", "\n", "mlp_ratio", "=", "args", ".", "g_mlp", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "g_depth", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "args", ".", "g_act", "\n", "self", ".", "l2_size", "=", "0", "\n", "\n", "if", "self", ".", "l2_size", "==", "0", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "", "elif", "self", ".", "l2_size", ">", "1000", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "l2_size", "//", "16", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "l2_size", "//", "16", ",", "self", ".", "l2_size", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "l2_size", ",", "self", ".", "embed_dim", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "l2_size", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "self", ".", "l2_size", ",", "self", ".", "embed_dim", ")", "\n", "", "self", ".", "embedding_transform", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_4", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "8", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_5", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "16", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed_6", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "32", ")", "**", "2", ",", "embed_dim", "//", "64", ")", ")", "\n", "\n", "self", ".", "embed_pos", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", ",", "\n", "self", ".", "pos_embed_4", ",", "\n", "self", ".", "pos_embed_5", ",", "\n", "self", ".", "pos_embed_6", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "#         self.blocks_1 = StageBlock(", "\n", "#                         depth=depth[0],", "\n", "#                         dim=embed_dim, ", "\n", "#                         embedding_dim=embed_dim,", "\n", "#                         num_heads=num_heads, ", "\n", "#                         mlp_ratio=mlp_ratio, ", "\n", "#                         qkv_bias=qkv_bias, ", "\n", "#                         qk_scale=qk_scale,", "\n", "#                         drop=drop_rate, ", "\n", "#                         attn_drop=attn_drop_rate, ", "\n", "#                         drop_path=0,", "\n", "#                         act_layer=act_layer,", "\n", "#                         norm_layer=norm_layer,", "\n", "#                         window_size=8", "\n", "#                         )", "\n", "self", ".", "blocks_2", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "embedding_dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "16", "\n", ")", "\n", "self", ".", "blocks_3", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "embedding_dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "32", "\n", ")", "\n", "self", ".", "blocks_4", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "3", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "embedding_dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "self", ".", "blocks_5", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "4", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "embedding_dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "self", ".", "blocks_6", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "5", "]", ",", "\n", "dim", "=", "embed_dim", "//", "64", ",", "\n", "embedding_dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "self", ".", "window_size", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "64", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.Generator.forward": [[451, 528], ["Celeba256_gen.Generator.size", "Celeba256_gen.Generator.embedding_transform().view", "Celeba256_gen.bicubic_upsample", "Celeba256_gen.Generator.size", "Celeba256_gen.Generator.blocks_2", "Celeba256_gen.bicubic_upsample", "Celeba256_gen.Generator.size", "Celeba256_gen.Generator.blocks_3", "Celeba256_gen.pixel_upsample", "Celeba256_gen.Generator.size", "Celeba256_gen.Generator.blocks_4", "Celeba256_gen.updown", "Celeba256_gen.pixel_upsample", "Celeba256_gen.Generator.size", "Celeba256_gen.Generator.blocks_5", "Celeba256_gen.updown", "Celeba256_gen.pixel_upsample", "Celeba256_gen.Generator.size", "Celeba256_gen.Generator.blocks_6", "Celeba256_gen.Generator.permute().view", "Celeba256_gen.Generator.deconv", "z.size", "Celeba256_gen.Generator.l1().view", "Celeba256_gen.Generator.pos_embed[].to", "Celeba256_gen.Generator.embed_pos.to", "Celeba256_gen.Generator.pos_embed[].to", "Celeba256_gen.Generator.pos_embed[].to", "Celeba256_gen.Generator.pos_embed[].to", "Celeba256_gen.Generator.pos_embed[].to", "Celeba256_gen.Generator.pos_embed[].to", "Celeba256_gen.Generator.l1().view", "Celeba256_gen.Generator.l2", "Celeba256_gen.Generator.l1().view", "Celeba256_gen.Generator.l2", "Celeba256_gen.Generator.get_device", "Celeba256_gen.Generator.embedding_transform", "Celeba256_gen.Generator.get_device", "Celeba256_gen.Generator.get_device", "Celeba256_gen.Generator.get_device", "Celeba256_gen.Generator.get_device", "Celeba256_gen.Generator.get_device", "Celeba256_gen.Generator.get_device", "Celeba256_gen.Generator.permute", "z.norm", "Celeba256_gen.Generator.l1", "Celeba256_gen.Generator.l1", "Celeba256_gen.Generator.l1"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.bicubic_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.bicubic_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.updown", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.updown", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample"], ["", "def", "forward", "(", "self", ",", "z", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "latent_norm", ":", "\n", "            ", "latent_size", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "z", "=", "(", "z", "/", "z", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "(", "latent_size", "**", "0.5", ")", ")", "\n", "", "if", "self", ".", "l2_size", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "", "elif", "self", ".", "l2_size", ">", "1000", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "l2_size", "//", "16", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "l2_size", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "\n", "# input noise", "\n", "", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", "=", "x", ".", "size", "(", "0", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "\n", "# embedding", "\n", "embedding", "=", "self", ".", "embedding_transform", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "embedding", "=", "embedding", "+", "self", ".", "embed_pos", ".", "to", "(", "embedding", ".", "get_device", "(", ")", ")", "\n", "\n", "\n", "#         x = x + self.pos_embed[0].to(x.get_device())", "\n", "#         B = x.size()", "\n", "#         H, W = self.bottom_width, self.bottom_width", "\n", "#         x, _ = self.blocks_1(x, embedding)", "\n", "\n", "x", ",", "H", ",", "W", "=", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "1", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", ",", "_", "=", "self", ".", "blocks_2", "(", "x", ",", "embedding", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "2", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", ",", "_", "=", "self", ".", "blocks_3", "(", "x", ",", "embedding", ")", "\n", "\n", "#         x, H, W = updown(x, H, W)", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "3", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "#         x = x.view(B, H, W, C)", "\n", "#         x = window_partition(x, self.window_size)", "\n", "#         x = x.view(-1, self.window_size*self.window_size, C)", "\n", "x", ",", "_", "=", "self", ".", "blocks_4", "(", "x", ",", "embedding", ")", "\n", "#         x = x.view(-1, self.window_size, self.window_size, C)", "\n", "#         x = window_reverse(x, self.window_size, H, W).view(B,H*W,C)", "\n", "\n", "x", ",", "H", ",", "W", "=", "updown", "(", "x", ",", "H", ",", "W", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "4", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "#         x = x.view(B, H, W, C)", "\n", "#         x = window_partition(x, self.window_size)", "\n", "#         x = x.view(-1, self.window_size*self.window_size, C)", "\n", "x", ",", "_", "=", "self", ".", "blocks_5", "(", "x", ",", "embedding", ")", "\n", "#         x = x.view(-1, self.window_size, self.window_size, C)", "\n", "#         x = window_reverse(x, self.window_size, H, W).view(B,H*W,C)", "\n", "\n", "x", ",", "H", ",", "W", "=", "updown", "(", "x", ",", "H", ",", "W", ")", "\n", "\n", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "5", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "#         x = x.view(B, H, W, C)", "\n", "#         x = window_partition(x, self.window_size)", "\n", "#         x = x.view(-1, self.window_size*self.window_size, C)", "\n", "x", ",", "_", "=", "self", ".", "blocks_6", "(", "x", ",", "embedding", ")", "\n", "#         x = x.view(-1, self.window_size, self.window_size, C)", "\n", "#         x = window_reverse(x, self.window_size, H, W).view(B,H,W,C).permute(0,3,1,2)", "\n", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "256", ",", "256", ")", "\n", "output", "=", "self", ".", "deconv", "(", "x", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.DisBlock.__init__": [[535, 547], ["torch.Module.__init__", "Celeba256_gen.CustomNorm", "Celeba256_gen.Attention", "Celeba256_gen.CustomNorm", "int", "Celeba256_gen.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "separate", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.DisBlock.forward": [[548, 552], ["Celeba256_gen.DisBlock.drop_path", "Celeba256_gen.DisBlock.drop_path", "Celeba256_gen.DisBlock.attn", "Celeba256_gen.DisBlock.mlp", "Celeba256_gen.DisBlock.norm1", "Celeba256_gen.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.Discriminator.__init__": [[555, 626], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "Celeba256_gen.CustomNorm", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "Celeba256_gen.Discriminator.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "Celeba256_gen.Block", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "Celeba256_gen.DisBlock", "Celeba256_gen.DisBlock", "Celeba256_gen.DisBlock", "Celeba256_gen.DisBlock", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "32", ",", "patch_size", "=", "None", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "None", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "args", ".", "df_dim", "\n", "\n", "depth", "=", "args", ".", "d_depth", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "patch_size", "=", "patch_size", "=", "args", ".", "patch_size", "\n", "norm_layer", "=", "args", ".", "d_norm", "\n", "act_layer", "=", "args", ".", "d_act", "\n", "self", ".", "window_size", "=", "args", ".", "d_window_size", "\n", "\n", "self", ".", "fRGB_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_2", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "8", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_3", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "4", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "self", ".", "fRGB_4", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", "//", "2", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "\n", "num_patches_1", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "num_patches_2", "=", "(", "(", "args", ".", "img_size", "//", "2", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_3", "=", "(", "(", "args", ".", "img_size", "//", "4", ")", "//", "patch_size", ")", "**", "2", "\n", "num_patches_4", "=", "(", "(", "args", ".", "img_size", "//", "8", ")", "//", "patch_size", ")", "**", "2", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_1", ",", "embed_dim", "//", "8", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_3", ",", "embed_dim", "//", "2", ")", ")", "\n", "self", ".", "pos_embed_4", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches_4", ",", "embed_dim", ")", ")", "\n", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks_1", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "8", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", "+", "1", ")", "]", ")", "\n", "self", ".", "blocks_2", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "4", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_3", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", "//", "2", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "blocks_4", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "0", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "self", ".", "last_block", "=", "nn", ".", "Sequential", "(", "\n", "#             Block(", "\n", "#                 dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,", "\n", "#                 drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], norm_layer=norm_layer),", "\n", "Block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "0", "]", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ")", "\n", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_1", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_2", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_3", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "pos_embed_4", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.Discriminator._init_weights": [[627, 635], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.Discriminator.forward_features": [[637, 700], ["Celeba256_gen.Discriminator.fRGB_1().flatten().permute", "Celeba256_gen.Discriminator.fRGB_2().flatten().permute", "Celeba256_gen.Discriminator.fRGB_3().flatten().permute", "Celeba256_gen.Discriminator.fRGB_4().flatten().permute", "Celeba256_gen.Discriminator.pos_drop", "blk.size", "blk.view", "Celeba256_gen.window_partition", "blk.view", "blk.view", "window_reverse().view", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "blk.permute().view", "blk.flatten().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Celeba256_gen.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Celeba256_gen.Discriminator.last_block", "Celeba256_gen.Discriminator.norm", "models_search.diff_aug.DiffAugment", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "blk", "Celeba256_gen.Discriminator.fRGB_1().flatten", "Celeba256_gen.Discriminator.fRGB_2().flatten", "Celeba256_gen.Discriminator.fRGB_3().flatten", "Celeba256_gen.Discriminator.fRGB_4().flatten", "Celeba256_gen.window_reverse", "blk.permute", "blk.flatten", "blk.permute", "blk.flatten", "blk.permute", "blk.flatten", "Celeba256_gen.Discriminator.fRGB_1", "Celeba256_gen.Discriminator.fRGB_2", "Celeba256_gen.Discriminator.fRGB_3", "Celeba256_gen.Discriminator.fRGB_4", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.DiffAugment", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "args", ".", "diff_aug", ",", "True", ")", "\n", "\n", "", "x_1", "=", "self", ".", "fRGB_1", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_2", "=", "self", ".", "fRGB_2", "(", "nn", ".", "AvgPool2d", "(", "2", ")", "(", "x", ")", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_3", "=", "self", ".", "fRGB_3", "(", "nn", ".", "AvgPool2d", "(", "4", ")", "(", "x", ")", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_4", "=", "self", ".", "fRGB_4", "(", "nn", ".", "AvgPool2d", "(", "8", ")", "(", "x", ")", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "x", "=", "x_1", "+", "self", ".", "pos_embed_1", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "H", "=", "W", "=", "self", ".", "args", ".", "img_size", "//", "self", ".", "patch_size", "\n", "B", ",", "_", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "x", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "for", "blk", "in", "self", ".", "blocks_1", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "x", "=", "window_reverse", "(", "x", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "2", ",", "1", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_2", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_2", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "2", ",", "1", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_3", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_3", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_3", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "_", ",", "_", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "#         x = SpaceToDepth(2)(x)", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "2", ",", "1", ")", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_4", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed_4", "\n", "\n", "for", "blk", "in", "self", ".", "blocks_4", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "last_block", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.Discriminator.forward": [[701, 705], ["Celeba256_gen.Discriminator.forward_features", "Celeba256_gen.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.count_matmul": [[17, 21], ["torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.gelu": [[28, 35], ["torch.erf", "torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.leakyrelu": [[36, 38], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.pixel_upsample": [[247, 257], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.bicubic_upsample": [[258, 268], ["x.permute.size", "x.permute.permute", "x.permute.view", "torch.functional.interpolate", "x.permute.size", "x.permute.view", "x.permute.permute"], "function", ["None"], ["", "def", "bicubic_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bicubic'", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.updown": [[269, 280], ["x.permute.size", "x.permute.permute", "x.permute.view", "torch.functional.interpolate", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.AvgPool2d"], "function", ["None"], ["", "def", "updown", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "4", ",", "mode", "=", "'bicubic'", ")", "\n", "x", "=", "nn", ".", "AvgPool2d", "(", "4", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_partition": [[281, 293], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen.window_reverse": [[293, 307], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "", "class", "Generator", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.Celeba256_gen._downsample": [[529, 532], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.constant": [[6, 26], ["numpy.asarray", "_constant_cache.get", "tuple", "torch.get_default_dtype", "torch.device", "np.asarray.tobytes", "torch.as_tensor", "tensor.contiguous.contiguous", "np.asarray.copy", "torch.broadcast_tensors", "torch.empty"], "function", ["None"], ["def", "constant", "(", "value", ",", "shape", "=", "None", ",", "dtype", "=", "None", ",", "device", "=", "None", ",", "memory_format", "=", "None", ")", ":", "\n", "    ", "value", "=", "np", ".", "asarray", "(", "value", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "", "if", "dtype", "is", "None", ":", "\n", "        ", "dtype", "=", "torch", ".", "get_default_dtype", "(", ")", "\n", "", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "if", "memory_format", "is", "None", ":", "\n", "        ", "memory_format", "=", "torch", ".", "contiguous_format", "\n", "\n", "", "key", "=", "(", "value", ".", "shape", ",", "value", ".", "dtype", ",", "value", ".", "tobytes", "(", ")", ",", "shape", ",", "dtype", ",", "device", ",", "memory_format", ")", "\n", "tensor", "=", "_constant_cache", ".", "get", "(", "key", ",", "None", ")", "\n", "if", "tensor", "is", "None", ":", "\n", "        ", "tensor", "=", "torch", ".", "as_tensor", "(", "value", ".", "copy", "(", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "            ", "tensor", ",", "_", "=", "torch", ".", "broadcast_tensors", "(", "tensor", ",", "torch", ".", "empty", "(", "shape", ")", ")", "\n", "", "tensor", "=", "tensor", ".", "contiguous", "(", "memory_format", "=", "memory_format", ")", "\n", "_constant_cache", "[", "key", "]", "=", "tensor", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.matrix": [[27, 36], ["all", "torch.stack().reshape", "len", "ada.constant", "isinstance", "numpy.asarray", "isinstance", "ada.constant", "torch.stack", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.constant", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.constant"], ["", "def", "matrix", "(", "*", "rows", ",", "device", "=", "None", ")", ":", "\n", "    ", "assert", "all", "(", "len", "(", "row", ")", "==", "len", "(", "rows", "[", "0", "]", ")", "for", "row", "in", "rows", ")", "\n", "elems", "=", "[", "x", "for", "row", "in", "rows", "for", "x", "in", "row", "]", "\n", "ref", "=", "[", "x", "for", "x", "in", "elems", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "]", "\n", "if", "len", "(", "ref", ")", "==", "0", ":", "\n", "        ", "return", "constant", "(", "np", ".", "asarray", "(", "rows", ")", ",", "device", "=", "device", ")", "\n", "", "assert", "device", "is", "None", "or", "device", "==", "ref", "[", "0", "]", ".", "device", "\n", "elems", "=", "[", "x", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "else", "constant", "(", "x", ",", "shape", "=", "ref", "[", "0", "]", ".", "shape", ",", "device", "=", "ref", "[", "0", "]", ".", "device", ")", "for", "x", "in", "elems", "]", "\n", "return", "torch", ".", "stack", "(", "elems", ",", "dim", "=", "-", "1", ")", ".", "reshape", "(", "ref", "[", "0", "]", ".", "shape", "+", "(", "len", "(", "rows", ")", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.translate2d": [[37, 43], ["ada.matrix"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.matrix"], ["", "def", "translate2d", "(", "tx", ",", "ty", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "1", ",", "0", ",", "tx", "]", ",", "\n", "[", "0", ",", "1", ",", "ty", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.translate3d": [[44, 51], ["ada.matrix"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.matrix"], ["", "def", "translate3d", "(", "tx", ",", "ty", ",", "tz", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "1", ",", "0", ",", "0", ",", "tx", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "ty", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "tz", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.scale2d": [[52, 58], ["ada.matrix"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.matrix"], ["", "def", "scale2d", "(", "sx", ",", "sy", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "sx", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "sy", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.scale3d": [[59, 66], ["ada.matrix"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.matrix"], ["", "def", "scale3d", "(", "sx", ",", "sy", ",", "sz", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "sx", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "sy", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "sz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.rotate2d": [[67, 73], ["ada.matrix", "torch.cos", "torch.sin", "torch.sin", "torch.cos"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.matrix"], ["", "def", "rotate2d", "(", "theta", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "matrix", "(", "\n", "[", "torch", ".", "cos", "(", "theta", ")", ",", "torch", ".", "sin", "(", "-", "theta", ")", ",", "0", "]", ",", "\n", "[", "torch", ".", "sin", "(", "theta", ")", ",", "torch", ".", "cos", "(", "theta", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.rotate3d": [[74, 83], ["torch.sin", "torch.cos", "ada.matrix"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.matrix"], ["", "def", "rotate3d", "(", "v", ",", "theta", ",", "**", "kwargs", ")", ":", "\n", "    ", "vx", "=", "v", "[", "...", ",", "0", "]", ";", "vy", "=", "v", "[", "...", ",", "1", "]", ";", "vz", "=", "v", "[", "...", ",", "2", "]", "\n", "s", "=", "torch", ".", "sin", "(", "theta", ")", ";", "c", "=", "torch", ".", "cos", "(", "theta", ")", ";", "cc", "=", "1", "-", "c", "\n", "return", "matrix", "(", "\n", "[", "vx", "*", "vx", "*", "cc", "+", "c", ",", "vx", "*", "vy", "*", "cc", "-", "vz", "*", "s", ",", "vx", "*", "vz", "*", "cc", "+", "vy", "*", "s", ",", "0", "]", ",", "\n", "[", "vy", "*", "vx", "*", "cc", "+", "vz", "*", "s", ",", "vy", "*", "vy", "*", "cc", "+", "c", ",", "vy", "*", "vz", "*", "cc", "-", "vx", "*", "s", ",", "0", "]", ",", "\n", "[", "vz", "*", "vx", "*", "cc", "-", "vy", "*", "s", ",", "vz", "*", "vy", "*", "cc", "+", "vx", "*", "s", ",", "vz", "*", "vz", "*", "cc", "+", "c", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.translate2d_inv": [[84, 86], ["ada.translate2d"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.translate2d"], ["", "def", "translate2d_inv", "(", "tx", ",", "ty", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "translate2d", "(", "-", "tx", ",", "-", "ty", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.scale2d_inv": [[87, 89], ["ada.scale2d"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.scale2d"], ["", "def", "scale2d_inv", "(", "sx", ",", "sy", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "scale2d", "(", "1", "/", "sx", ",", "1", "/", "sy", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.rotate2d_inv": [[90, 92], ["ada.rotate2d"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ada.rotate2d"], ["", "def", "rotate2d_inv", "(", "theta", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "rotate2d", "(", "-", "theta", ",", "**", "kwargs", ")", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.matmul.__init__": [[11, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.matmul.forward": [[14, 17], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x", "=", "x1", "@", "x2", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.PixelNorm.__init__": [[24, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.PixelNorm.forward": [[27, 29], ["torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "torch", ".", "rsqrt", "(", "torch", ".", "mean", "(", "input", "**", "2", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.CustomAct.__init__": [[42, 48], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "act_layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "act_layer", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "gelu", "\n", "", "elif", "act_layer", "==", "\"leakyrelu\"", ":", "\n", "            ", "self", ".", "act_layer", "=", "leakyrelu", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.CustomAct.forward": [[49, 51], ["ViT_custom_rp.CustomAct.act_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "act_layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Mlp.__init__": [[53, 61], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "ViT_custom_rp.CustomAct", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "gelu", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "CustomAct", "(", "act_layer", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Mlp.forward": [[62, 69], ["ViT_custom_rp.Mlp.fc1", "ViT_custom_rp.Mlp.act", "ViT_custom_rp.Mlp.drop", "ViT_custom_rp.Mlp.fc2", "ViT_custom_rp.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Attention.__init__": [[72, 102], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "ViT_custom_rp.matmul", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "ViT_custom_rp.Attention.register_buffer", "models_search.ViT_helper.trunc_normal_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "window_size", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "self", ".", "mat", "=", "matmul", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "if", "self", ".", "window_size", "!=", "0", ":", "\n", "            ", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "-", "1", ")", "*", "(", "2", "*", "window_size", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "window_size", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "window_size", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "window_size", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "window_size", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Attention.forward": [[103, 120], ["ViT_custom_rp.Attention.qkv().reshape().permute", "ViT_custom_rp.Attention.softmax", "ViT_custom_rp.Attention.attn_drop", "ViT_custom_rp.Attention.mat().transpose().reshape", "ViT_custom_rp.Attention.proj", "ViT_custom_rp.Attention.proj_drop", "ViT_custom_rp.Attention.mat", "ViT_custom_rp.Attention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "ViT_custom_rp.Attention.qkv().reshape", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "ViT_custom_rp.Attention.mat().transpose", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "ViT_custom_rp.Attention.qkv", "ViT_custom_rp.Attention.mat", "ViT_custom_rp.Attention.relative_position_index.view().clone", "ViT_custom_rp.Attention.relative_position_index.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "attn", "=", "(", "self", ".", "mat", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", ")", "*", "self", ".", "scale", "\n", "if", "self", ".", "window_size", "!=", "0", ":", "\n", "            ", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", ".", "clone", "(", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "self", ".", "mat", "(", "attn", ",", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.CustomNorm.__init__": [[122, 133], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "ViT_custom_rp.PixelNorm"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm_layer", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_type", "=", "norm_layer", "\n", "if", "norm_layer", "==", "\"ln\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"bn\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"in\"", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "dim", ")", "\n", "", "elif", "norm_layer", "==", "\"pn\"", ":", "\n", "            ", "self", ".", "norm", "=", "PixelNorm", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.CustomNorm.forward": [[134, 142], ["ViT_custom_rp.CustomNorm.norm().permute", "ViT_custom_rp.CustomNorm.norm", "ViT_custom_rp.CustomNorm.norm", "ViT_custom_rp.CustomNorm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm_type", "==", "\"bn\"", "or", "self", ".", "norm_type", "==", "\"in\"", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "norm_type", "==", "\"none\"", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Block.__init__": [[145, 156], ["torch.Module.__init__", "ViT_custom_rp.CustomNorm", "ViT_custom_rp.Attention", "ViT_custom_rp.CustomNorm", "int", "ViT_custom_rp.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "window_size", "=", "window_size", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Block.forward": [[157, 161], ["ViT_custom_rp.Block.drop_path", "ViT_custom_rp.Block.drop_path", "ViT_custom_rp.Block.attn", "ViT_custom_rp.Block.mlp", "ViT_custom_rp.Block.norm1", "ViT_custom_rp.Block.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.StageBlock.__init__": [[164, 181], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "ViT_custom_rp.Block", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "gelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "window_size", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block", "=", "nn", ".", "ModuleList", "(", "[", "\n", "Block", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "window_size", "\n", ")", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.StageBlock.forward": [[182, 186], ["blk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "blk", "in", "self", ".", "block", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Generator.__init__": [[199, 271], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ViT_custom_rp.StageBlock", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "len", "models_search.ViT_helper.trunc_normal_", "torch.Conv2d", "torch.Conv2d", "args.g_depth.split", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom_rp.StageBlock", "ViT_custom_rp.StageBlock"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "10", ",", "embed_dim", "=", "384", ",", "depth", "=", "5", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "ch", "=", "embed_dim", "\n", "self", ".", "bottom_width", "=", "args", ".", "bottom_width", "\n", "self", ".", "embed_dim", "=", "embed_dim", "=", "args", ".", "gf_dim", "\n", "norm_layer", "=", "args", ".", "g_norm", "\n", "mlp_ratio", "=", "args", ".", "g_mlp", "\n", "depth", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "g_depth", ".", "split", "(", "\",\"", ")", "]", "\n", "act_layer", "=", "args", ".", "g_act", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "args", ".", "latent_dim", ",", "(", "self", ".", "bottom_width", "**", "2", ")", "*", "self", ".", "embed_dim", ")", "\n", "self", ".", "pos_embed_1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "2", ")", "**", "2", ",", "embed_dim", "//", "4", ")", ")", "\n", "self", ".", "pos_embed_3", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "(", "self", ".", "bottom_width", "*", "4", ")", "**", "2", ",", "embed_dim", "//", "16", ")", ")", "\n", "self", ".", "pos_embed", "=", "[", "\n", "self", ".", "pos_embed_1", ",", "\n", "self", ".", "pos_embed_2", ",", "\n", "self", ".", "pos_embed_3", "\n", "]", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", "[", "0", "]", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "0", "]", ",", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "args", ".", "bottom_width", ",", "\n", ")", "\n", "self", ".", "upsample_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "1", "]", ",", "\n", "dim", "=", "embed_dim", "//", "4", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "args", ".", "bottom_width", "*", "2", ",", "\n", ")", ",", "\n", "StageBlock", "(", "\n", "depth", "=", "depth", "[", "2", "]", ",", "\n", "dim", "=", "embed_dim", "//", "16", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "0", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "window_size", "=", "args", ".", "bottom_width", "*", "4", ",", "\n", ")", "\n", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pos_embed", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "self", ".", "pos_embed", "[", "i", "]", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "deconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "embed_dim", "//", "16", ",", "3", ",", "1", ",", "1", ",", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Generator.set_arch": [[293, 295], ["None"], "methods", ["None"], ["", "def", "set_arch", "(", "self", ",", "x", ",", "cur_stage", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Generator.forward": [[296, 316], ["ViT_custom_rp.Generator.l1().view", "blk.size", "ViT_custom_rp.Generator.blocks", "enumerate", "ViT_custom_rp.Generator.deconv", "z.size", "ViT_custom_rp.Generator.pos_embed[].to", "ViT_custom_rp.pixel_upsample", "blk", "blk.permute().view", "ViT_custom_rp.Generator.l1", "blk.get_device", "ViT_custom_rp.Generator.pos_embed[].to", "z.norm", "blk.get_device", "blk.permute"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample"], ["", "def", "forward", "(", "self", ",", "z", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "latent_norm", ":", "\n", "            ", "latent_size", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "z", "=", "(", "z", "/", "z", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "*", "(", "latent_size", "**", "0.5", ")", ")", "\n", "", "x", "=", "self", ".", "l1", "(", "z", ")", ".", "view", "(", "-", "1", ",", "self", ".", "bottom_width", "**", "2", ",", "self", ".", "embed_dim", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "0", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "B", "=", "x", ".", "size", "(", ")", "\n", "H", ",", "W", "=", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "for", "index", ",", "blk", "in", "enumerate", "(", "self", ".", "upsample_blocks", ")", ":", "\n", "# x = x.permute(0,2,1)", "\n", "# x = x.view(-1, self.embed_dim, H, W)", "\n", "            ", "x", ",", "H", ",", "W", "=", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "[", "index", "+", "1", "]", ".", "to", "(", "x", ".", "get_device", "(", ")", ")", "\n", "x", "=", "blk", "(", "x", ")", "\n", "# _, _, H, W = x.size()", "\n", "# x = x.view(-1, self.embed_dim, H*W)", "\n", "# x = x.permute(0,2,1)", "\n", "", "output", "=", "self", ".", "deconv", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", "//", "16", ",", "H", ",", "W", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.DisBlock.__init__": [[324, 336], ["torch.Module.__init__", "ViT_custom_rp.CustomNorm", "ViT_custom_rp.Attention", "ViT_custom_rp.CustomNorm", "int", "ViT_custom_rp.Mlp", "models_search.ViT_helper.DropPath", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "leakyrelu", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "CustomNorm", "(", "norm_layer", ",", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "gain", "=", "np", ".", "sqrt", "(", "0.5", ")", "if", "norm_layer", "==", "\"none\"", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.DisBlock.forward": [[337, 341], ["ViT_custom_rp.DisBlock.drop_path", "ViT_custom_rp.DisBlock.drop_path", "ViT_custom_rp.DisBlock.attn", "ViT_custom_rp.DisBlock.mlp", "ViT_custom_rp.DisBlock.norm1", "ViT_custom_rp.DisBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "x", "=", "x", "*", "self", ".", "gain", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "*", "self", ".", "gain", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator.__init__": [[346, 392], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "ViT_custom_rp.CustomNorm", "models_search.ViT_helper.trunc_normal_", "models_search.ViT_helper.trunc_normal_", "ViT_custom_rp.Discriminator.apply", "HybridEmbed", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x.item", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "ViT_custom_rp.DisBlock", "range"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["def", "__init__", "(", "self", ",", "args", ",", "img_size", "=", "32", ",", "patch_size", "=", "None", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1", ",", "embed_dim", "=", "None", ",", "depth", "=", "7", ",", "\n", "num_heads", "=", "4", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.", ",", "hybrid_backbone", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "embed_dim", "=", "self", ".", "embed_dim", "=", "args", ".", "df_dim", "\n", "\n", "depth", "=", "args", ".", "d_depth", "\n", "self", ".", "args", "=", "args", "\n", "patch_size", "=", "args", ".", "patch_size", "\n", "norm_layer", "=", "args", ".", "d_norm", "\n", "act_layer", "=", "args", ".", "d_act", "\n", "mlp_ratio", "=", "args", ".", "d_mlp", "\n", "if", "hybrid_backbone", "is", "not", "None", ":", "\n", "            ", "self", ".", "patch_embed", "=", "HybridEmbed", "(", "\n", "hybrid_backbone", ",", "img_size", "=", "img_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "patch_embed", "=", "nn", ".", "Conv2d", "(", "3", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "padding", "=", "0", ")", "\n", "", "num_patches", "=", "(", "args", ".", "img_size", "//", "patch_size", ")", "**", "2", "\n", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "num_patches", "+", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "# stochastic depth decay rule", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DisBlock", "(", "\n", "dim", "=", "embed_dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "i", "]", ",", "\n", "act_layer", "=", "act_layer", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "norm", "=", "CustomNorm", "(", "norm_layer", ",", "embed_dim", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "pos_embed", ",", "std", "=", ".02", ")", "\n", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator._init_weights": [[393, 405], ["isinstance", "models_search.ViT_helper.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "#         elif isinstance(m, nn.Conv2d):", "\n", "#             trunc_normal_(m.weight, std=.02)", "\n", "#             if isinstance(m, nn.Conv2d) and m.bias is not None:", "\n", "#                 nn.init.constant_(m.bias, 0)", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator.forward_features": [[407, 422], ["ViT_custom_rp.Discriminator.patch_embed().flatten().permute", "ViT_custom_rp.Discriminator.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ViT_custom_rp.Discriminator.pos_drop", "ViT_custom_rp.Discriminator.norm", "models_search.diff_aug.DiffAugment", "blk", "ViT_custom_rp.Discriminator.patch_embed().flatten", "ViT_custom_rp.Discriminator.patch_embed"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.diff_aug.DiffAugment"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "\"None\"", "not", "in", "self", ".", "args", ".", "diff_aug", ":", "\n", "            ", "x", "=", "DiffAugment", "(", "x", ",", "self", ".", "args", ".", "diff_aug", ",", "True", ")", "\n", "", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "pos_embed", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator.forward": [[423, 427], ["ViT_custom_rp.Discriminator.forward_features", "ViT_custom_rp.Discriminator.head"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.Discriminator.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.count_matmul": [[18, 22], ["torch.DoubleTensor", "torch.DoubleTensor", "x[].numel", "x[].size", "int"], "function", ["None"], ["", "", "def", "count_matmul", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_mul", "=", "x", "[", "0", "]", ".", "numel", "(", ")", "*", "x", "[", "1", "]", ".", "size", "(", "-", "1", ")", "\n", "# m.total_ops += torch.DoubleTensor([int(num_mul)])", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.gelu": [[30, 37], ["torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initialy created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.leakyrelu": [[38, 40], ["torch.functional.leaky_relu_"], "function", ["None"], ["", "def", "leakyrelu", "(", "x", ")", ":", "\n", "    ", "return", "nn", ".", "functional", ".", "leaky_relu_", "(", "x", ",", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp.pixel_upsample": [[187, 197], ["x.permute.size", "x.permute.permute", "x.permute.view", "x.permute.size", "x.permute.view", "x.permute.permute", "torch.PixelShuffle"], "function", ["None"], ["", "", "def", "pixel_upsample", "(", "x", ",", "H", ",", "W", ")", ":", "\n", "    ", "B", ",", "N", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "assert", "N", "==", "H", "*", "W", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "nn", ".", "PixelShuffle", "(", "2", ")", "(", "x", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "C", ",", "H", "*", "W", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_custom_rp._downsample": [[318, 321], ["torch.AvgPool2d"], "function", ["None"], ["", "", "def", "_downsample", "(", "x", ")", ":", "\n", "# Downsample (Mean Avg Pooling with 2x2 kernel)", "\n", "    ", "return", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.DropPath.__init__": [[25, 28], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.DropPath.forward": [[29, 31], ["ViT_helper.drop_path"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.drop_path": [[4, 20], ["random_tensor.floor_", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper._ntuple": [[37, 43], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["def", "_ntuple", "(", "n", ")", ":", "\n", "    ", "def", "parse", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "container_abcs", ".", "Iterable", ")", ":", "\n", "            ", "return", "x", "\n", "", "return", "tuple", "(", "repeat", "(", "x", ",", "n", ")", ")", "\n", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper._no_grad_trunc_normal_": [[57, 91], ["warnings.warn", "torch.no_grad", "torch.no_grad", "ViT_helper._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper.trunc_normal_": [[93, 112], ["ViT_helper._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.models_search.ViT_helper._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.EasyDict.__getattr__": [[43, 48], ["AttributeError"], "methods", ["None"], ["def", "__getattr__", "(", "self", ",", "name", ":", "str", ")", "->", "Any", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.EasyDict.__setattr__": [[49, 51], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ":", "str", ",", "value", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.EasyDict.__delattr__": [[52, 54], ["None"], "methods", ["None"], ["", "def", "__delattr__", "(", "self", ",", "name", ":", "str", ")", "->", "None", ":", "\n", "        ", "del", "self", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.__init__": [[59, 71], ["open"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_name", ":", "str", "=", "None", ",", "file_mode", ":", "str", "=", "\"w\"", ",", "should_flush", ":", "bool", "=", "True", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "\n", "if", "file_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "file_name", ",", "file_mode", ")", "\n", "\n", "", "self", ".", "should_flush", "=", "should_flush", "\n", "self", ".", "stdout", "=", "sys", ".", "stdout", "\n", "self", ".", "stderr", "=", "sys", ".", "stderr", "\n", "\n", "sys", ".", "stdout", "=", "self", "\n", "sys", ".", "stderr", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.__enter__": [[72, 74], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", "->", "\"Logger\"", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.__exit__": [[75, 77], ["util.Logger.close"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ":", "Any", ",", "exc_value", ":", "Any", ",", "traceback", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.write": [[78, 92], ["isinstance", "util.Logger.stdout.write", "text.decode.decode.decode", "len", "util.Logger.file.write", "util.Logger.flush"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.flush"], ["", "def", "write", "(", "self", ",", "text", ":", "Union", "[", "str", ",", "bytes", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Write text to stdout (and a file) and optionally flush.\"\"\"", "\n", "if", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "            ", "text", "=", "text", ".", "decode", "(", ")", "\n", "", "if", "len", "(", "text", ")", "==", "0", ":", "# workaround for a bug in VSCode debugger: sys.stdout.write(''); sys.stdout.flush() => crash", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "text", ")", "\n", "\n", "", "self", ".", "stdout", ".", "write", "(", "text", ")", "\n", "\n", "if", "self", ".", "should_flush", ":", "\n", "            ", "self", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.flush": [[93, 99], ["util.Logger.stdout.flush", "util.Logger.file.flush"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Flush written text to both stdout and a file, if open.\"\"\"", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n", "", "self", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.close": [[100, 113], ["util.Logger.flush", "util.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Flush, close possible files, and remove stdout/stderr mirroring.\"\"\"", "\n", "self", ".", "flush", "(", ")", "\n", "\n", "# if using multiple loggers, prevent closing in wrong order", "\n", "if", "sys", ".", "stdout", "is", "self", ":", "\n", "            ", "sys", ".", "stdout", "=", "self", ".", "stdout", "\n", "", "if", "sys", ".", "stderr", "is", "self", ":", "\n", "            ", "sys", ".", "stderr", "=", "self", ".", "stderr", "\n", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.set_cache_dir": [[120, 123], ["None"], "function", ["None"], ["def", "set_cache_dir", "(", "path", ":", "str", ")", "->", "None", ":", "\n", "    ", "global", "_dnnlib_cache_dir", "\n", "_dnnlib_cache_dir", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.make_cache_dir_path": [[124, 134], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tempfile.gettempdir"], "function", ["None"], ["", "def", "make_cache_dir_path", "(", "*", "paths", ":", "str", ")", "->", "str", ":", "\n", "    ", "if", "_dnnlib_cache_dir", "is", "not", "None", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "_dnnlib_cache_dir", ",", "*", "paths", ")", "\n", "", "if", "'DNNLIB_CACHE_DIR'", "in", "os", ".", "environ", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'DNNLIB_CACHE_DIR'", "]", ",", "*", "paths", ")", "\n", "", "if", "'HOME'", "in", "os", ".", "environ", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'HOME'", "]", ",", "'.cache'", ",", "'dnnlib'", ",", "*", "paths", ")", "\n", "", "if", "'USERPROFILE'", "in", "os", ".", "environ", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'USERPROFILE'", "]", ",", "'.cache'", ",", "'dnnlib'", ",", "*", "paths", ")", "\n", "", "return", "os", ".", "path", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "'.cache'", ",", "'dnnlib'", ",", "*", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.format_time": [[139, 151], ["int", "numpy.rint"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ":", "Union", "[", "int", ",", "float", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"Convert the seconds to human readable string with days, hours, minutes and seconds.\"\"\"", "\n", "s", "=", "int", "(", "np", ".", "rint", "(", "seconds", ")", ")", "\n", "\n", "if", "s", "<", "60", ":", "\n", "        ", "return", "\"{0}s\"", ".", "format", "(", "s", ")", "\n", "", "elif", "s", "<", "60", "*", "60", ":", "\n", "        ", "return", "\"{0}m {1:02}s\"", ".", "format", "(", "s", "//", "60", ",", "s", "%", "60", ")", "\n", "", "elif", "s", "<", "24", "*", "60", "*", "60", ":", "\n", "        ", "return", "\"{0}h {1:02}m {2:02}s\"", ".", "format", "(", "s", "//", "(", "60", "*", "60", ")", ",", "(", "s", "//", "60", ")", "%", "60", ",", "s", "%", "60", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"{0}d {1:02}h {2:02}m\"", ".", "format", "(", "s", "//", "(", "24", "*", "60", "*", "60", ")", ",", "(", "s", "//", "(", "60", "*", "60", ")", ")", "%", "24", ",", "(", "s", "//", "60", ")", "%", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.ask_yes_no": [[153, 161], ["print", "distutils.util.strtobool", "input().lower", "input"], "function", ["None"], ["", "", "def", "ask_yes_no", "(", "question", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Ask the user the question until the user inputs a valid answer.\"\"\"", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "\"{0} [y/n]\"", ".", "format", "(", "question", ")", ")", "\n", "return", "strtobool", "(", "input", "(", ")", ".", "lower", "(", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.tuple_product": [[163, 171], ["None"], "function", ["None"], ["", "", "", "def", "tuple_product", "(", "t", ":", "Tuple", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Calculate the product of the tuple elements.\"\"\"", "\n", "result", "=", "1", "\n", "\n", "for", "v", "in", "t", ":", "\n", "        ", "result", "*=", "v", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.get_dtype_and_ctype": [[187, 208], ["isinstance", "numpy.dtype", "hasattr", "_str_to_ctype.keys", "ctypes.sizeof", "hasattr", "RuntimeError"], "function", ["None"], ["def", "get_dtype_and_ctype", "(", "type_obj", ":", "Any", ")", "->", "Tuple", "[", "np", ".", "dtype", ",", "Any", "]", ":", "\n", "    ", "\"\"\"Given a type name string (or an object having a __name__ attribute), return matching Numpy and ctypes types that have the same size in bytes.\"\"\"", "\n", "type_str", "=", "None", "\n", "\n", "if", "isinstance", "(", "type_obj", ",", "str", ")", ":", "\n", "        ", "type_str", "=", "type_obj", "\n", "", "elif", "hasattr", "(", "type_obj", ",", "\"__name__\"", ")", ":", "\n", "        ", "type_str", "=", "type_obj", ".", "__name__", "\n", "", "elif", "hasattr", "(", "type_obj", ",", "\"name\"", ")", ":", "\n", "        ", "type_str", "=", "type_obj", ".", "name", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Cannot infer type name from input\"", ")", "\n", "\n", "", "assert", "type_str", "in", "_str_to_ctype", ".", "keys", "(", ")", "\n", "\n", "my_dtype", "=", "np", ".", "dtype", "(", "type_str", ")", "\n", "my_ctype", "=", "_str_to_ctype", "[", "type_str", "]", "\n", "\n", "assert", "my_dtype", ".", "itemsize", "==", "ctypes", ".", "sizeof", "(", "my_ctype", ")", "\n", "\n", "return", "my_dtype", ",", "my_ctype", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.is_pickleable": [[210, 217], ["io.BytesIO", "pickle.dump"], "function", ["None"], ["", "def", "is_pickleable", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "io", ".", "BytesIO", "(", ")", "as", "stream", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "stream", ")", "\n", "", "return", "True", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.get_module_from_obj_name": [[222, 261], ["re.sub", "re.sub", "re.sub.split", "ImportError", "range", "importlib.import_module", "util.get_obj_from_module", "importlib.import_module", "importlib.import_module", "util.get_obj_from_module", "len", "str().startswith", "str", "sys.exc_info"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.get_obj_from_module", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.get_obj_from_module"], ["", "", "def", "get_module_from_obj_name", "(", "obj_name", ":", "str", ")", "->", "Tuple", "[", "types", ".", "ModuleType", ",", "str", "]", ":", "\n", "    ", "\"\"\"Searches for the underlying module behind the name to some python object.\n    Returns the module and the object name (original name with module part removed).\"\"\"", "\n", "\n", "# allow convenience shorthands, substitute them by full names", "\n", "obj_name", "=", "re", ".", "sub", "(", "\"^np.\"", ",", "\"numpy.\"", ",", "obj_name", ")", "\n", "obj_name", "=", "re", ".", "sub", "(", "\"^tf.\"", ",", "\"tensorflow.\"", ",", "obj_name", ")", "\n", "\n", "# list alternatives for (module_name, local_obj_name)", "\n", "parts", "=", "obj_name", ".", "split", "(", "\".\"", ")", "\n", "name_pairs", "=", "[", "(", "\".\"", ".", "join", "(", "parts", "[", ":", "i", "]", ")", ",", "\".\"", ".", "join", "(", "parts", "[", "i", ":", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "parts", ")", ",", "0", ",", "-", "1", ")", "]", "\n", "\n", "# try each alternative in turn", "\n", "for", "module_name", ",", "local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "get_obj_from_module", "(", "module", ",", "local_obj_name", ")", "# may raise AttributeError", "\n", "return", "module", ",", "local_obj_name", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "# maybe some of the modules themselves contain errors?", "\n", "", "", "for", "module_name", ",", "_local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "", "except", "ImportError", ":", "\n", "            ", "if", "not", "str", "(", "sys", ".", "exc_info", "(", ")", "[", "1", "]", ")", ".", "startswith", "(", "\"No module named '\"", "+", "module_name", "+", "\"'\"", ")", ":", "\n", "                ", "raise", "\n", "\n", "# maybe the requested attribute is missing?", "\n", "", "", "", "for", "module_name", ",", "local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "get_obj_from_module", "(", "module", ",", "local_obj_name", ")", "# may raise AttributeError", "\n", "", "except", "ImportError", ":", "\n", "            ", "pass", "\n", "\n", "# we are out of luck, but we have no idea why", "\n", "", "", "raise", "ImportError", "(", "obj_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.get_obj_from_module": [[263, 271], ["obj_name.split", "getattr"], "function", ["None"], ["", "def", "get_obj_from_module", "(", "module", ":", "types", ".", "ModuleType", ",", "obj_name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Traverses the object name and returns the last (rightmost) python object.\"\"\"", "\n", "if", "obj_name", "==", "''", ":", "\n", "        ", "return", "module", "\n", "", "obj", "=", "module", "\n", "for", "part", "in", "obj_name", ".", "split", "(", "\".\"", ")", ":", "\n", "        ", "obj", "=", "getattr", "(", "obj", ",", "part", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.get_obj_by_name": [[273, 277], ["util.get_module_from_obj_name", "util.get_obj_from_module"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.get_module_from_obj_name", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.get_obj_from_module"], ["", "def", "get_obj_by_name", "(", "name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python object with the given name.\"\"\"", "\n", "module", ",", "obj_name", "=", "get_module_from_obj_name", "(", "name", ")", "\n", "return", "get_obj_from_module", "(", "module", ",", "obj_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.call_func_by_name": [[279, 285], ["util.get_obj_by_name", "callable", "get_obj_by_name."], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.get_obj_by_name"], ["", "def", "call_func_by_name", "(", "*", "args", ",", "func_name", ":", "str", "=", "None", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python object with the given name and calls it as a function.\"\"\"", "\n", "assert", "func_name", "is", "not", "None", "\n", "func_obj", "=", "get_obj_by_name", "(", "func_name", ")", "\n", "assert", "callable", "(", "func_obj", ")", "\n", "return", "func_obj", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.construct_class_by_name": [[287, 290], ["util.call_func_by_name"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.call_func_by_name"], ["", "def", "construct_class_by_name", "(", "*", "args", ",", "class_name", ":", "str", "=", "None", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python class with the given name and constructs it with the given arguments.\"\"\"", "\n", "return", "call_func_by_name", "(", "*", "args", ",", "func_name", "=", "class_name", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.get_module_dir_by_obj_name": [[292, 296], ["util.get_module_from_obj_name", "os.path.dirname", "inspect.getfile"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.get_module_from_obj_name"], ["", "def", "get_module_dir_by_obj_name", "(", "obj_name", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Get the directory path of the module containing the given object name.\"\"\"", "\n", "module", ",", "_", "=", "get_module_from_obj_name", "(", "obj_name", ")", "\n", "return", "os", ".", "path", ".", "dirname", "(", "inspect", ".", "getfile", "(", "module", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.is_top_level_function": [[298, 301], ["callable"], "function", ["None"], ["", "def", "is_top_level_function", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a top-level function, i.e., defined at module scope using 'def'.\"\"\"", "\n", "return", "callable", "(", "obj", ")", "and", "obj", ".", "__name__", "in", "sys", ".", "modules", "[", "obj", ".", "__module__", "]", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.get_top_level_function_name": [[303, 310], ["util.is_top_level_function", "os.path.splitext", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.is_top_level_function"], ["", "def", "get_top_level_function_name", "(", "obj", ":", "Any", ")", "->", "str", ":", "\n", "    ", "\"\"\"Return the fully-qualified name of a top-level function.\"\"\"", "\n", "assert", "is_top_level_function", "(", "obj", ")", "\n", "module", "=", "obj", ".", "__module__", "\n", "if", "module", "==", "'__main__'", ":", "\n", "        ", "module", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "sys", ".", "modules", "[", "module", "]", ".", "__file__", ")", ")", "[", "0", "]", "\n", "", "return", "module", "+", "\".\"", "+", "obj", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.list_dir_recursively_with_ignore": [[315, 346], ["os.path.isdir", "os.path.basename", "os.walk", "os.path.normpath", "zip", "os.path.join", "os.path.relpath", "len", "len", "dirs.remove", "os.path.join", "fnmatch.fnmatch", "fnmatch.fnmatch"], "function", ["None"], ["", "def", "list_dir_recursively_with_ignore", "(", "dir_path", ":", "str", ",", "ignores", ":", "List", "[", "str", "]", "=", "None", ",", "add_base_to_relative", ":", "bool", "=", "False", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "\"\"\"List all files recursively in a given directory while ignoring given file and directory names.\n    Returns list of tuples containing both absolute and relative paths.\"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", "\n", "base_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "dir_path", ")", ")", "\n", "\n", "if", "ignores", "is", "None", ":", "\n", "        ", "ignores", "=", "[", "]", "\n", "\n", "", "result", "=", "[", "]", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "dir_path", ",", "topdown", "=", "True", ")", ":", "\n", "        ", "for", "ignore_", "in", "ignores", ":", "\n", "            ", "dirs_to_remove", "=", "[", "d", "for", "d", "in", "dirs", "if", "fnmatch", ".", "fnmatch", "(", "d", ",", "ignore_", ")", "]", "\n", "\n", "# dirs need to be edited in-place", "\n", "for", "d", "in", "dirs_to_remove", ":", "\n", "                ", "dirs", ".", "remove", "(", "d", ")", "\n", "\n", "", "files", "=", "[", "f", "for", "f", "in", "files", "if", "not", "fnmatch", ".", "fnmatch", "(", "f", ",", "ignore_", ")", "]", "\n", "\n", "", "absolute_paths", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", "for", "f", "in", "files", "]", "\n", "relative_paths", "=", "[", "os", ".", "path", ".", "relpath", "(", "p", ",", "dir_path", ")", "for", "p", "in", "absolute_paths", "]", "\n", "\n", "if", "add_base_to_relative", ":", "\n", "            ", "relative_paths", "=", "[", "os", ".", "path", ".", "join", "(", "base_name", ",", "p", ")", "for", "p", "in", "relative_paths", "]", "\n", "\n", "", "assert", "len", "(", "absolute_paths", ")", "==", "len", "(", "relative_paths", ")", "\n", "result", "+=", "zip", "(", "absolute_paths", ",", "relative_paths", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.copy_files_and_create_dirs": [[348, 359], ["os.path.dirname", "shutil.copyfile", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "copy_files_and_create_dirs", "(", "files", ":", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ")", "->", "None", ":", "\n", "    ", "\"\"\"Takes in a list of tuples of (src, dst) paths and copies files.\n    Will create all necessary directories.\"\"\"", "\n", "for", "file", "in", "files", ":", "\n", "        ", "target_dir_name", "=", "os", ".", "path", ".", "dirname", "(", "file", "[", "1", "]", ")", "\n", "\n", "# will create all intermediate-level directories", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "target_dir_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "target_dir_name", ")", "\n", "\n", "", "shutil", ".", "copyfile", "(", "file", "[", "0", "]", ",", "file", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.is_url": [[364, 380], ["obj.startswith", "requests.compat.urlparse", "requests.compat.urlparse", "isinstance", "requests.compat.urljoin"], "function", ["None"], ["", "", "def", "is_url", "(", "obj", ":", "Any", ",", "allow_file_urls", ":", "bool", "=", "False", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a valid URL string.\"\"\"", "\n", "if", "not", "isinstance", "(", "obj", ",", "str", ")", "or", "not", "\"://\"", "in", "obj", ":", "\n", "        ", "return", "False", "\n", "", "if", "allow_file_urls", "and", "obj", ".", "startswith", "(", "'file://'", ")", ":", "\n", "        ", "return", "True", "\n", "", "try", ":", "\n", "        ", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "obj", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "requests", ".", "compat", ".", "urljoin", "(", "obj", ",", "\"/\"", ")", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "", "except", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.open_url": [[382, 478], ["requests.compat.urljoin.startswith", "util.is_url", "hashlib.md5().hexdigest", "io.BytesIO", "re.match", "re.match", "util.make_cache_dir_path", "glob.glob", "requests.Session", "reversed", "re.sub", "os.path.join", "os.path.join", "os.makedirs", "os.replace", "open", "urllib.parse.urlparse", "urllib.parse.urlparse", "open", "hashlib.md5", "os.path.join", "len", "print", "range", "open", "f.write", "requests.compat.urljoin.encode", "open", "session.get", "res.raise_for_status", "re.search", "len", "IOError", "len", "res.content.decode", "res.headers.get", "print", "print", "res.headers.get", "IOError", "print", "html.unescape", "len", "requests.compat.urljoin", "IOError", "res.content.decode.split", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.is_url", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.make_cache_dir_path", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.dnnlib.util.Logger.write"], ["", "def", "open_url", "(", "url", ":", "str", ",", "cache_dir", ":", "str", "=", "None", ",", "num_attempts", ":", "int", "=", "10", ",", "verbose", ":", "bool", "=", "True", ",", "return_filename", ":", "bool", "=", "False", ",", "cache", ":", "bool", "=", "True", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Download the given URL and return a binary-mode file object to access the data.\"\"\"", "\n", "assert", "num_attempts", ">=", "1", "\n", "assert", "not", "(", "return_filename", "and", "(", "not", "cache", ")", ")", "\n", "\n", "# Doesn't look like an URL scheme so interpret it as a local filename.", "\n", "if", "not", "re", ".", "match", "(", "'^[a-z]+://'", ",", "url", ")", ":", "\n", "        ", "return", "url", "if", "return_filename", "else", "open", "(", "url", ",", "\"rb\"", ")", "\n", "\n", "# Handle file URLs.  This code handles unusual file:// patterns that", "\n", "# arise on Windows:", "\n", "#", "\n", "# file:///c:/foo.txt", "\n", "#", "\n", "# which would translate to a local '/c:/foo.txt' filename that's", "\n", "# invalid.  Drop the forward slash for such pathnames.", "\n", "#", "\n", "# If you touch this code path, you should test it on both Linux and", "\n", "# Windows.", "\n", "#", "\n", "# Some internet resources suggest using urllib.request.url2pathname() but", "\n", "# but that converts forward slashes to backslashes and this causes", "\n", "# its own set of problems.", "\n", "", "if", "url", ".", "startswith", "(", "'file://'", ")", ":", "\n", "        ", "filename", "=", "urllib", ".", "parse", ".", "urlparse", "(", "url", ")", ".", "path", "\n", "if", "re", ".", "match", "(", "r'^/[a-zA-Z]:'", ",", "filename", ")", ":", "\n", "            ", "filename", "=", "filename", "[", "1", ":", "]", "\n", "", "return", "filename", "if", "return_filename", "else", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "\n", "", "assert", "is_url", "(", "url", ")", "\n", "\n", "# Lookup from cache.", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "make_cache_dir_path", "(", "'downloads'", ")", "\n", "\n", "", "url_md5", "=", "hashlib", ".", "md5", "(", "url", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n", "if", "cache", ":", "\n", "        ", "cache_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_*\"", ")", ")", "\n", "if", "len", "(", "cache_files", ")", "==", "1", ":", "\n", "            ", "filename", "=", "cache_files", "[", "0", "]", "\n", "return", "filename", "if", "return_filename", "else", "open", "(", "filename", ",", "\"rb\"", ")", "\n", "\n", "# Download.", "\n", "", "", "url_name", "=", "None", "\n", "url_data", "=", "None", "\n", "with", "requests", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Downloading %s ...\"", "%", "url", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "for", "attempts_left", "in", "reversed", "(", "range", "(", "num_attempts", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "with", "session", ".", "get", "(", "url", ")", "as", "res", ":", "\n", "                    ", "res", ".", "raise_for_status", "(", ")", "\n", "if", "len", "(", "res", ".", "content", ")", "==", "0", ":", "\n", "                        ", "raise", "IOError", "(", "\"No data received\"", ")", "\n", "\n", "", "if", "len", "(", "res", ".", "content", ")", "<", "8192", ":", "\n", "                        ", "content_str", "=", "res", ".", "content", ".", "decode", "(", "\"utf-8\"", ")", "\n", "if", "\"download_warning\"", "in", "res", ".", "headers", ".", "get", "(", "\"Set-Cookie\"", ",", "\"\"", ")", ":", "\n", "                            ", "links", "=", "[", "html", ".", "unescape", "(", "link", ")", "for", "link", "in", "content_str", ".", "split", "(", "'\"'", ")", "if", "\"export=download\"", "in", "link", "]", "\n", "if", "len", "(", "links", ")", "==", "1", ":", "\n", "                                ", "url", "=", "requests", ".", "compat", ".", "urljoin", "(", "url", ",", "links", "[", "0", "]", ")", "\n", "raise", "IOError", "(", "\"Google Drive virus checker nag\"", ")", "\n", "", "", "if", "\"Google Drive - Quota exceeded\"", "in", "content_str", ":", "\n", "                            ", "raise", "IOError", "(", "\"Google Drive download quota exceeded -- please try again later\"", ")", "\n", "\n", "", "", "match", "=", "re", ".", "search", "(", "r'filename=\"([^\"]*)\"'", ",", "res", ".", "headers", ".", "get", "(", "\"Content-Disposition\"", ",", "\"\"", ")", ")", "\n", "url_name", "=", "match", "[", "1", "]", "if", "match", "else", "url", "\n", "url_data", "=", "res", ".", "content", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" done\"", ")", "\n", "", "break", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "                ", "raise", "\n", "", "except", ":", "\n", "                ", "if", "not", "attempts_left", ":", "\n", "                    ", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" failed\"", ")", "\n", "", "raise", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "\".\"", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Save to cache.", "\n", "", "", "", "", "if", "cache", ":", "\n", "        ", "safe_name", "=", "re", ".", "sub", "(", "r\"[^0-9a-zA-Z-._]\"", ",", "\"_\"", ",", "url_name", ")", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "temp_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "\"tmp_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "+", "\"_\"", "+", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "temp_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "url_data", ")", "\n", "", "os", ".", "replace", "(", "temp_file", ",", "cache_file", ")", "# atomic", "\n", "if", "return_filename", ":", "\n", "            ", "return", "cache_file", "\n", "\n", "# Return data as file object.", "\n", "", "", "assert", "not", "return_filename", "\n", "return", "io", ".", "BytesIO", "(", "url_data", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.stl_train.parse_args": [[6, 13], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--rank'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ",", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "opt", "\n", "", "args", "=", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_train.parse_args": [[6, 13], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--rank'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ")", "\n", "parser", ".", "add_argument", "(", "'--node'", ",", "type", "=", "str", ",", "default", "=", "\"0015\"", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "opt", "\n", "", "args", "=", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.church_256_train.parse_args": [[6, 13], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--rank'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ")", "\n", "parser", ".", "add_argument", "(", "'--node'", ",", "type", "=", "str", ",", "default", "=", "\"0015\"", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "opt", "\n", "", "args", "=", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.cifar_train.parse_args": [[6, 13], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--rank'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ")", "\n", "parser", ".", "add_argument", "(", "'--node'", ",", "type", "=", "str", ",", "default", "=", "\"0015\"", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "opt", "\n", "", "args", "=", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.cifar_test.parse_args": [[6, 13], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--rank'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ")", "\n", "parser", ".", "add_argument", "(", "'--node'", ",", "type", "=", "str", ",", "default", "=", "\"0015\"", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "opt", "\n", "", "args", "=", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args": [[6, 13], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.exps.celeba_hq_256_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--rank'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ")", "\n", "parser", ".", "add_argument", "(", "'--node'", ",", "type", "=", "str", ",", "default", "=", "\"0015\"", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "opt", "\n", "", "args", "=", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.suppress_tracer_warnings.__enter__": [[70, 74], ["super().__enter__", "warnings.simplefilter"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.suppress_tracer_warnings.__enter__"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__enter__", "(", ")", "\n", "warnings", ".", "simplefilter", "(", "'ignore'", ",", "category", "=", "torch", ".", "jit", ".", "TracerWarning", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.InfiniteSampler.__init__": [[110, 122], ["super().__init__", "len"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "rank", "=", "0", ",", "num_replicas", "=", "1", ",", "shuffle", "=", "True", ",", "seed", "=", "0", ",", "window_size", "=", "0.5", ")", ":", "\n", "        ", "assert", "len", "(", "dataset", ")", ">", "0", "\n", "assert", "num_replicas", ">", "0", "\n", "assert", "0", "<=", "rank", "<", "num_replicas", "\n", "assert", "0", "<=", "window_size", "<=", "1", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "window_size", "=", "window_size", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.InfiniteSampler.__iter__": [[123, 141], ["numpy.arange", "len", "numpy.random.RandomState", "numpy.random.RandomState.shuffle", "int", "numpy.rint", "numpy.random.RandomState.randint"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "order", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "rnd", "=", "None", "\n", "window", "=", "0", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "rnd", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "rnd", ".", "shuffle", "(", "order", ")", "\n", "window", "=", "int", "(", "np", ".", "rint", "(", "order", ".", "size", "*", "self", ".", "window_size", ")", ")", "\n", "\n", "", "idx", "=", "0", "\n", "while", "True", ":", "\n", "            ", "i", "=", "idx", "%", "order", ".", "size", "\n", "if", "idx", "%", "self", ".", "num_replicas", "==", "self", ".", "rank", ":", "\n", "                ", "yield", "order", "[", "i", "]", "\n", "", "if", "window", ">=", "2", ":", "\n", "                ", "j", "=", "(", "i", "-", "rnd", ".", "randint", "(", "window", ")", ")", "%", "order", ".", "size", "\n", "order", "[", "i", "]", ",", "order", "[", "j", "]", "=", "order", "[", "j", "]", ",", "order", "[", "i", "]", "\n", "", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.constant": [[22, 42], ["numpy.asarray", "_constant_cache.get", "tuple", "torch.get_default_dtype", "torch.device", "np.asarray.tobytes", "torch.as_tensor", "tensor.contiguous.contiguous", "np.asarray.copy", "torch.broadcast_tensors", "torch.empty"], "function", ["None"], ["def", "constant", "(", "value", ",", "shape", "=", "None", ",", "dtype", "=", "None", ",", "device", "=", "None", ",", "memory_format", "=", "None", ")", ":", "\n", "    ", "value", "=", "np", ".", "asarray", "(", "value", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "", "if", "dtype", "is", "None", ":", "\n", "        ", "dtype", "=", "torch", ".", "get_default_dtype", "(", ")", "\n", "", "if", "device", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "if", "memory_format", "is", "None", ":", "\n", "        ", "memory_format", "=", "torch", ".", "contiguous_format", "\n", "\n", "", "key", "=", "(", "value", ".", "shape", ",", "value", ".", "dtype", ",", "value", ".", "tobytes", "(", ")", ",", "shape", ",", "dtype", ",", "device", ",", "memory_format", ")", "\n", "tensor", "=", "_constant_cache", ".", "get", "(", "key", ",", "None", ")", "\n", "if", "tensor", "is", "None", ":", "\n", "        ", "tensor", "=", "torch", ".", "as_tensor", "(", "value", ".", "copy", "(", ")", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "            ", "tensor", ",", "_", "=", "torch", ".", "broadcast_tensors", "(", "tensor", ",", "torch", ".", "empty", "(", "shape", ")", ")", "\n", "", "tensor", "=", "tensor", ".", "contiguous", "(", "memory_format", "=", "memory_format", ")", "\n", "_constant_cache", "[", "key", "]", "=", "tensor", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.assert_shape": [[80, 94], ["enumerate", "len", "AssertionError", "zip", "isinstance", "isinstance", "len", "misc.suppress_tracer_warnings", "symbolic_assert", "torch.equal", "misc.suppress_tracer_warnings", "symbolic_assert", "AssertionError", "torch.as_tensor", "torch.equal", "torch.as_tensor"], "function", ["None"], ["", "", "def", "assert_shape", "(", "tensor", ",", "ref_shape", ")", ":", "\n", "    ", "if", "tensor", ".", "ndim", "!=", "len", "(", "ref_shape", ")", ":", "\n", "        ", "raise", "AssertionError", "(", "f'Wrong number of dimensions: got {tensor.ndim}, expected {len(ref_shape)}'", ")", "\n", "", "for", "idx", ",", "(", "size", ",", "ref_size", ")", "in", "enumerate", "(", "zip", "(", "tensor", ".", "shape", ",", "ref_shape", ")", ")", ":", "\n", "        ", "if", "ref_size", "is", "None", ":", "\n", "            ", "pass", "\n", "", "elif", "isinstance", "(", "ref_size", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "with", "suppress_tracer_warnings", "(", ")", ":", "# as_tensor results are registered as constants", "\n", "                ", "symbolic_assert", "(", "torch", ".", "equal", "(", "torch", ".", "as_tensor", "(", "size", ")", ",", "ref_size", ")", ",", "f'Wrong size for dimension {idx}'", ")", "\n", "", "", "elif", "isinstance", "(", "size", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "with", "suppress_tracer_warnings", "(", ")", ":", "# as_tensor results are registered as constants", "\n", "                ", "symbolic_assert", "(", "torch", ".", "equal", "(", "size", ",", "torch", ".", "as_tensor", "(", "ref_size", ")", ")", ",", "f'Wrong size for dimension {idx}: expected {ref_size}'", ")", "\n", "", "", "elif", "size", "!=", "ref_size", ":", "\n", "            ", "raise", "AssertionError", "(", "f'Wrong size for dimension {idx}: got {size}, expected {ref_size}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.profiled_function": [[98, 104], ["torch.autograd.profiler.record_function", "fn"], "function", ["None"], ["", "", "", "def", "profiled_function", "(", "fn", ")", ":", "\n", "    ", "def", "decorator", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "autograd", ".", "profiler", ".", "record_function", "(", "fn", ".", "__name__", ")", ":", "\n", "            ", "return", "fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "decorator", ".", "__name__", "=", "fn", ".", "__name__", "\n", "return", "decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.params_and_buffers": [[145, 148], ["isinstance", "list", "list", "module.parameters", "module.buffers"], "function", ["None"], ["", "", "", "def", "params_and_buffers", "(", "module", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "return", "list", "(", "module", ".", "parameters", "(", ")", ")", "+", "list", "(", "module", ".", "buffers", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.named_params_and_buffers": [[149, 152], ["isinstance", "list", "list", "module.named_parameters", "module.named_buffers"], "function", ["None"], ["", "def", "named_params_and_buffers", "(", "module", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "return", "list", "(", "module", ".", "named_parameters", "(", ")", ")", "+", "list", "(", "module", ".", "named_buffers", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.copy_params_and_buffers": [[153, 161], ["isinstance", "isinstance", "misc.named_params_and_buffers", "misc.named_params_and_buffers", "tensor.copy_().requires_grad_", "tensor.copy_", "src_tensors[].detach"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.named_params_and_buffers", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.named_params_and_buffers"], ["", "def", "copy_params_and_buffers", "(", "src_module", ",", "dst_module", ",", "require_all", "=", "False", ")", ":", "\n", "    ", "assert", "isinstance", "(", "src_module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "assert", "isinstance", "(", "dst_module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "src_tensors", "=", "{", "name", ":", "tensor", "for", "name", ",", "tensor", "in", "named_params_and_buffers", "(", "src_module", ")", "}", "\n", "for", "name", ",", "tensor", "in", "named_params_and_buffers", "(", "dst_module", ")", ":", "\n", "        ", "assert", "(", "name", "in", "src_tensors", ")", "or", "(", "not", "require_all", ")", "\n", "if", "name", "in", "src_tensors", ":", "\n", "            ", "tensor", ".", "copy_", "(", "src_tensors", "[", "name", "]", ".", "detach", "(", ")", ")", ".", "requires_grad_", "(", "tensor", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.ddp_sync": [[166, 174], ["isinstance", "isinstance", "module.no_sync"], "function", ["None"], ["", "", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "ddp_sync", "(", "module", ",", "sync", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "if", "sync", "or", "not", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "        ", "yield", "\n", "", "else", ":", "\n", "        ", "with", "module", ".", "no_sync", "(", ")", ":", "\n", "            ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.check_ddp_consistency": [[178, 188], ["isinstance", "misc.named_params_and_buffers", "tensor.detach.detach", "tensor.detach.clone", "torch.distributed.broadcast", "re.fullmatch", "type", "nan_to_num", "nan_to_num"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.named_params_and_buffers"], ["", "", "", "def", "check_ddp_consistency", "(", "module", ",", "ignore_regex", "=", "None", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "for", "name", ",", "tensor", "in", "named_params_and_buffers", "(", "module", ")", ":", "\n", "        ", "fullname", "=", "type", "(", "module", ")", ".", "__name__", "+", "'.'", "+", "name", "\n", "if", "ignore_regex", "is", "not", "None", "and", "re", ".", "fullmatch", "(", "ignore_regex", ",", "fullname", ")", ":", "\n", "            ", "continue", "\n", "", "tensor", "=", "tensor", ".", "detach", "(", ")", "\n", "other", "=", "tensor", ".", "clone", "(", ")", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "tensor", "=", "other", ",", "src", "=", "0", ")", "\n", "assert", "(", "nan_to_num", "(", "tensor", ")", "==", "nan_to_num", "(", "other", ")", ")", ".", "all", "(", ")", ",", "fullname", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.print_module_summary": [[192, 261], ["isinstance", "isinstance", "module", "set", "print", "print", "isinstance", "mod.register_forward_pre_hook", "mod.register_forward_hook", "hook.remove", "sum", "sum", "range", "max", "print", "entries.append", "module.modules", "module.modules", "id", "len", "module.named_modules", "str", "len", "len", "str", "str", "zip", "isinstance", "list", "dnnlib.EasyDict", "e.mod.parameters", "e.mod.buffers", "type", "t.numel", "t.numel", "list", "str().split", "len", "isinstance", "id", "id", "id", "len", "len", "len", "str", "str", "str", "zip", "len", "len"], "function", ["None"], ["", "", "def", "print_module_summary", "(", "module", ",", "inputs", ",", "max_nesting", "=", "3", ",", "skip_redundant", "=", "True", ")", ":", "\n", "    ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "assert", "not", "isinstance", "(", "module", ",", "torch", ".", "jit", ".", "ScriptModule", ")", "\n", "assert", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", "\n", "\n", "# Register hooks.", "\n", "entries", "=", "[", "]", "\n", "nesting", "=", "[", "0", "]", "\n", "def", "pre_hook", "(", "_mod", ",", "_inputs", ")", ":", "\n", "        ", "nesting", "[", "0", "]", "+=", "1", "\n", "", "def", "post_hook", "(", "mod", ",", "_inputs", ",", "outputs", ")", ":", "\n", "        ", "nesting", "[", "0", "]", "-=", "1", "\n", "if", "nesting", "[", "0", "]", "<=", "max_nesting", ":", "\n", "            ", "outputs", "=", "list", "(", "outputs", ")", "if", "isinstance", "(", "outputs", ",", "(", "tuple", ",", "list", ")", ")", "else", "[", "outputs", "]", "\n", "outputs", "=", "[", "t", "for", "t", "in", "outputs", "if", "isinstance", "(", "t", ",", "torch", ".", "Tensor", ")", "]", "\n", "entries", ".", "append", "(", "dnnlib", ".", "EasyDict", "(", "mod", "=", "mod", ",", "outputs", "=", "outputs", ")", ")", "\n", "", "", "hooks", "=", "[", "mod", ".", "register_forward_pre_hook", "(", "pre_hook", ")", "for", "mod", "in", "module", ".", "modules", "(", ")", "]", "\n", "hooks", "+=", "[", "mod", ".", "register_forward_hook", "(", "post_hook", ")", "for", "mod", "in", "module", ".", "modules", "(", ")", "]", "\n", "\n", "# Run module.", "\n", "outputs", "=", "module", "(", "*", "inputs", ")", "\n", "for", "hook", "in", "hooks", ":", "\n", "        ", "hook", ".", "remove", "(", ")", "\n", "\n", "# Identify unique outputs, parameters, and buffers.", "\n", "", "tensors_seen", "=", "set", "(", ")", "\n", "for", "e", "in", "entries", ":", "\n", "        ", "e", ".", "unique_params", "=", "[", "t", "for", "t", "in", "e", ".", "mod", ".", "parameters", "(", ")", "if", "id", "(", "t", ")", "not", "in", "tensors_seen", "]", "\n", "e", ".", "unique_buffers", "=", "[", "t", "for", "t", "in", "e", ".", "mod", ".", "buffers", "(", ")", "if", "id", "(", "t", ")", "not", "in", "tensors_seen", "]", "\n", "e", ".", "unique_outputs", "=", "[", "t", "for", "t", "in", "e", ".", "outputs", "if", "id", "(", "t", ")", "not", "in", "tensors_seen", "]", "\n", "tensors_seen", "|=", "{", "id", "(", "t", ")", "for", "t", "in", "e", ".", "unique_params", "+", "e", ".", "unique_buffers", "+", "e", ".", "unique_outputs", "}", "\n", "\n", "# Filter out redundant entries.", "\n", "", "if", "skip_redundant", ":", "\n", "        ", "entries", "=", "[", "e", "for", "e", "in", "entries", "if", "len", "(", "e", ".", "unique_params", ")", "or", "len", "(", "e", ".", "unique_buffers", ")", "or", "len", "(", "e", ".", "unique_outputs", ")", "]", "\n", "\n", "# Construct table.", "\n", "", "rows", "=", "[", "[", "type", "(", "module", ")", ".", "__name__", ",", "'Parameters'", ",", "'Buffers'", ",", "'Output shape'", ",", "'Datatype'", "]", "]", "\n", "rows", "+=", "[", "[", "'---'", "]", "*", "len", "(", "rows", "[", "0", "]", ")", "]", "\n", "param_total", "=", "0", "\n", "buffer_total", "=", "0", "\n", "submodule_names", "=", "{", "mod", ":", "name", "for", "name", ",", "mod", "in", "module", ".", "named_modules", "(", ")", "}", "\n", "for", "e", "in", "entries", ":", "\n", "        ", "name", "=", "'<top-level>'", "if", "e", ".", "mod", "is", "module", "else", "submodule_names", "[", "e", ".", "mod", "]", "\n", "param_size", "=", "sum", "(", "t", ".", "numel", "(", ")", "for", "t", "in", "e", ".", "unique_params", ")", "\n", "buffer_size", "=", "sum", "(", "t", ".", "numel", "(", ")", "for", "t", "in", "e", ".", "unique_buffers", ")", "\n", "output_shapes", "=", "[", "str", "(", "list", "(", "e", ".", "outputs", "[", "0", "]", ".", "shape", ")", ")", "for", "t", "in", "e", ".", "outputs", "]", "\n", "output_dtypes", "=", "[", "str", "(", "t", ".", "dtype", ")", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "for", "t", "in", "e", ".", "outputs", "]", "\n", "rows", "+=", "[", "[", "\n", "name", "+", "(", "':0'", "if", "len", "(", "e", ".", "outputs", ")", ">=", "2", "else", "''", ")", ",", "\n", "str", "(", "param_size", ")", "if", "param_size", "else", "'-'", ",", "\n", "str", "(", "buffer_size", ")", "if", "buffer_size", "else", "'-'", ",", "\n", "(", "output_shapes", "+", "[", "'-'", "]", ")", "[", "0", "]", ",", "\n", "(", "output_dtypes", "+", "[", "'-'", "]", ")", "[", "0", "]", ",", "\n", "]", "]", "\n", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "e", ".", "outputs", ")", ")", ":", "\n", "            ", "rows", "+=", "[", "[", "name", "+", "f':{idx}'", ",", "'-'", ",", "'-'", ",", "output_shapes", "[", "idx", "]", ",", "output_dtypes", "[", "idx", "]", "]", "]", "\n", "", "param_total", "+=", "param_size", "\n", "buffer_total", "+=", "buffer_size", "\n", "", "rows", "+=", "[", "[", "'---'", "]", "*", "len", "(", "rows", "[", "0", "]", ")", "]", "\n", "rows", "+=", "[", "[", "'Total'", ",", "str", "(", "param_total", ")", ",", "str", "(", "buffer_total", ")", ",", "'-'", ",", "'-'", "]", "]", "\n", "\n", "# Print table.", "\n", "widths", "=", "[", "max", "(", "len", "(", "cell", ")", "for", "cell", "in", "column", ")", "for", "column", "in", "zip", "(", "*", "rows", ")", "]", "\n", "print", "(", ")", "\n", "for", "row", "in", "rows", ":", "\n", "        ", "print", "(", "'  '", ".", "join", "(", "cell", "+", "' '", "*", "(", "width", "-", "len", "(", "cell", ")", ")", "for", "cell", ",", "width", "in", "zip", "(", "row", ",", "widths", ")", ")", ")", "\n", "", "print", "(", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__": [[133, 140], ["re.compile", "dict", "dict", "training_stats.Collector.update", "training_stats.Collector._moments.clear"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.update", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.clear"], ["def", "__init__", "(", "self", ",", "regex", "=", "'.*'", ",", "keep_previous", "=", "True", ")", ":", "\n", "        ", "self", ".", "_regex", "=", "re", ".", "compile", "(", "regex", ")", "\n", "self", ".", "_keep_previous", "=", "keep_previous", "\n", "self", ".", "_cumulative", "=", "dict", "(", ")", "\n", "self", ".", "_moments", "=", "dict", "(", ")", "\n", "self", ".", "update", "(", ")", "\n", "self", ".", "_moments", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.names": [[141, 146], ["training_stats.Collector._regex.fullmatch"], "methods", ["None"], ["", "def", "names", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Returns the names of all statistics broadcasted so far that\n        match the regular expression specified at construction time.\n        \"\"\"", "\n", "return", "[", "name", "for", "name", "in", "_counters", "if", "self", ".", "_regex", ".", "fullmatch", "(", "name", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.update": [[147, 169], ["training_stats._sync", "training_stats.Collector._moments.clear", "training_stats.Collector.names", "training_stats.Collector._cumulative[].copy_", "torch.zeros", "float"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats._sync", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.utils.utils.RunningStats.clear", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.names"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Copies current values of the internal counters to the\n        user-visible state and resets them for the next round.\n\n        If `keep_previous=True` was specified at construction time, the\n        operation is skipped for statistics that have received no scalars\n        since the last update, retaining their previous averages.\n\n        This method performs a number of GPU-to-CPU transfers and one\n        `torch.distributed.all_reduce()`. It is intended to be called\n        periodically in the main training loop, typically once every\n        N training steps.\n        \"\"\"", "\n", "if", "not", "self", ".", "_keep_previous", ":", "\n", "            ", "self", ".", "_moments", ".", "clear", "(", ")", "\n", "", "for", "name", ",", "cumulative", "in", "_sync", "(", "self", ".", "names", "(", ")", ")", ":", "\n", "            ", "if", "name", "not", "in", "self", ".", "_cumulative", ":", "\n", "                ", "self", ".", "_cumulative", "[", "name", "]", "=", "torch", ".", "zeros", "(", "[", "_num_moments", "]", ",", "dtype", "=", "_counter_dtype", ")", "\n", "", "delta", "=", "cumulative", "-", "self", ".", "_cumulative", "[", "name", "]", "\n", "self", ".", "_cumulative", "[", "name", "]", ".", "copy_", "(", "cumulative", ")", "\n", "if", "float", "(", "delta", "[", "0", "]", ")", "!=", "0", ":", "\n", "                ", "self", ".", "_moments", "[", "name", "]", "=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector._get_delta": [[170, 179], ["training_stats.Collector._regex.fullmatch", "torch.zeros"], "methods", ["None"], ["", "", "", "def", "_get_delta", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Returns the raw moments that were accumulated for the given\n        statistic between the last two calls to `update()`, or zero if\n        no scalars were collected.\n        \"\"\"", "\n", "assert", "self", ".", "_regex", ".", "fullmatch", "(", "name", ")", "\n", "if", "name", "not", "in", "self", ".", "_moments", ":", "\n", "            ", "self", ".", "_moments", "[", "name", "]", "=", "torch", ".", "zeros", "(", "[", "_num_moments", "]", ",", "dtype", "=", "_counter_dtype", ")", "\n", "", "return", "self", ".", "_moments", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.num": [[180, 187], ["training_stats.Collector._get_delta", "int"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector._get_delta"], ["", "def", "num", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Returns the number of scalars that were accumulated for the given\n        statistic between the last two calls to `update()`, or zero if\n        no scalars were collected.\n        \"\"\"", "\n", "delta", "=", "self", ".", "_get_delta", "(", "name", ")", "\n", "return", "int", "(", "delta", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean": [[188, 197], ["training_stats.Collector._get_delta", "float", "int", "float"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector._get_delta"], ["", "def", "mean", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Returns the mean of the scalars that were accumulated for the\n        given statistic between the last two calls to `update()`, or NaN if\n        no scalars were collected.\n        \"\"\"", "\n", "delta", "=", "self", ".", "_get_delta", "(", "name", ")", "\n", "if", "int", "(", "delta", "[", "0", "]", ")", "==", "0", ":", "\n", "            ", "return", "float", "(", "'nan'", ")", "\n", "", "return", "float", "(", "delta", "[", "1", "]", "/", "delta", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.std": [[198, 211], ["training_stats.Collector._get_delta", "float", "float", "numpy.sqrt", "float", "int", "float", "max", "int", "numpy.isfinite", "float", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector._get_delta"], ["", "def", "std", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Returns the standard deviation of the scalars that were\n        accumulated for the given statistic between the last two calls to\n        `update()`, or NaN if no scalars were collected.\n        \"\"\"", "\n", "delta", "=", "self", ".", "_get_delta", "(", "name", ")", "\n", "if", "int", "(", "delta", "[", "0", "]", ")", "==", "0", "or", "not", "np", ".", "isfinite", "(", "float", "(", "delta", "[", "1", "]", ")", ")", ":", "\n", "            ", "return", "float", "(", "'nan'", ")", "\n", "", "if", "int", "(", "delta", "[", "0", "]", ")", "==", "1", ":", "\n", "            ", "return", "float", "(", "0", ")", "\n", "", "mean", "=", "float", "(", "delta", "[", "1", "]", "/", "delta", "[", "0", "]", ")", "\n", "raw_var", "=", "float", "(", "delta", "[", "2", "]", "/", "delta", "[", "0", "]", ")", "\n", "return", "np", ".", "sqrt", "(", "max", "(", "raw_var", "-", "np", ".", "square", "(", "mean", ")", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.as_dict": [[212, 225], ["dnnlib.EasyDict", "training_stats.Collector.names", "dnnlib.EasyDict", "training_stats.Collector.num", "training_stats.Collector.mean", "training_stats.Collector.std"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.names", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.num", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.std"], ["", "def", "as_dict", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Returns the averages accumulated between the last two calls to\n        `update()` as an `dnnlib.EasyDict`. The contents are as follows:\n\n            dnnlib.EasyDict(\n                NAME = dnnlib.EasyDict(num=FLOAT, mean=FLOAT, std=FLOAT),\n                ...\n            )\n        \"\"\"", "\n", "stats", "=", "dnnlib", ".", "EasyDict", "(", ")", "\n", "for", "name", "in", "self", ".", "names", "(", ")", ":", "\n", "            ", "stats", "[", "name", "]", "=", "dnnlib", ".", "EasyDict", "(", "num", "=", "self", ".", "num", "(", "name", ")", ",", "mean", "=", "self", ".", "mean", "(", "name", ")", ",", "std", "=", "self", ".", "std", "(", "name", ")", ")", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__getitem__": [[226, 231], ["training_stats.Collector.mean"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.mean"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Convenience getter.\n        `collector[name]` is a synonym for `collector.mean(name)`.\n        \"\"\"", "\n", "return", "self", ".", "mean", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.init_multiprocessing": [[34, 52], ["None"], "function", ["None"], ["def", "init_multiprocessing", "(", "rank", ",", "sync_device", ")", ":", "\n", "    ", "r\"\"\"Initializes `torch_utils.training_stats` for collecting statistics\n    across multiple processes.\n\n    This function must be called after\n    `torch.distributed.init_process_group()` and before `Collector.update()`.\n    The call is not necessary if multi-process collection is not needed.\n\n    Args:\n        rank:           Rank of the current process.\n        sync_device:    PyTorch device to use for inter-process\n                        communication, or None to disable multi-process\n                        collection. Typically `torch.device('cuda', rank)`.\n    \"\"\"", "\n", "global", "_rank", ",", "_sync_device", "\n", "assert", "not", "_sync_called", "\n", "_rank", "=", "rank", "\n", "_sync_device", "=", "sync_device", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.report": [[55, 100], ["torch.as_tensor", "elems.detach().flatten().to.detach().flatten().to", "torch.stack", "moments.to.to", "[].add_", "dict", "elems.detach().flatten().to.numel", "torch.zeros_like", "elems.detach().flatten().to.detach().flatten", "torch.ones_like().sum", "elems.detach().flatten().to.sum", "elems.detach().flatten().to.square().sum", "elems.detach().flatten().to.detach", "torch.ones_like", "elems.detach().flatten().to.square"], "function", ["None"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "report", "(", "name", ",", "value", ")", ":", "\n", "    ", "r\"\"\"Broadcasts the given set of scalars to all interested instances of\n    `Collector`, across device and process boundaries.\n\n    This function is expected to be extremely cheap and can be safely\n    called from anywhere in the training loop, loss function, or inside a\n    `torch.nn.Module`.\n\n    Warning: The current implementation expects the set of unique names to\n    be consistent across processes. Please make sure that `report()` is\n    called at least once for each unique name by each process, and in the\n    same order. If a given process has no scalars to broadcast, it can do\n    `report(name, [])` (empty list).\n\n    Args:\n        name:   Arbitrary string specifying the name of the statistic.\n                Averages are accumulated separately for each unique name.\n        value:  Arbitrary set of scalars. Can be a list, tuple,\n                NumPy array, PyTorch tensor, or Python scalar.\n\n    Returns:\n        The same `value` that was passed in.\n    \"\"\"", "\n", "if", "name", "not", "in", "_counters", ":", "\n", "        ", "_counters", "[", "name", "]", "=", "dict", "(", ")", "\n", "\n", "", "elems", "=", "torch", ".", "as_tensor", "(", "value", ")", "\n", "if", "elems", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "value", "\n", "\n", "", "elems", "=", "elems", ".", "detach", "(", ")", ".", "flatten", "(", ")", ".", "to", "(", "_reduce_dtype", ")", "\n", "moments", "=", "torch", ".", "stack", "(", "[", "\n", "torch", ".", "ones_like", "(", "elems", ")", ".", "sum", "(", ")", ",", "\n", "elems", ".", "sum", "(", ")", ",", "\n", "elems", ".", "square", "(", ")", ".", "sum", "(", ")", ",", "\n", "]", ")", "\n", "assert", "moments", ".", "ndim", "==", "1", "and", "moments", ".", "shape", "[", "0", "]", "==", "_num_moments", "\n", "moments", "=", "moments", ".", "to", "(", "_counter_dtype", ")", "\n", "\n", "device", "=", "moments", ".", "device", "\n", "if", "device", "not", "in", "_counters", "[", "name", "]", ":", "\n", "        ", "_counters", "[", "name", "]", "[", "device", "]", "=", "torch", ".", "zeros_like", "(", "moments", ")", "\n", "", "_counters", "[", "name", "]", "[", "device", "]", ".", "add_", "(", "moments", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.report0": [[103, 110], ["training_stats.report"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.report"], ["", "def", "report0", "(", "name", ",", "value", ")", ":", "\n", "    ", "r\"\"\"Broadcasts the given set of scalars by the first process (`rank = 0`),\n    but ignores any scalars provided by the other processes.\n    See `report()` for further details.\n    \"\"\"", "\n", "report", "(", "name", ",", "value", "if", "_rank", "==", "0", "else", "[", "]", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats._sync": [[234, 267], ["torch.stack", "deltas.cpu.cpu", "enumerate", "len", "torch.device", "torch.zeros", "_counters[].values", "deltas.cpu.append", "torch.distributed.all_reduce", "_cumulative[].add_", "torch.zeros.add_", "counter.copy_", "torch.zeros", "counter.to", "torch.zeros_like"], "function", ["None"], ["", "", "def", "_sync", "(", "names", ")", ":", "\n", "    ", "r\"\"\"Synchronize the global cumulative counters across devices and\n    processes. Called internally by `Collector.update()`.\n    \"\"\"", "\n", "if", "len", "(", "names", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "global", "_sync_called", "\n", "_sync_called", "=", "True", "\n", "\n", "# Collect deltas within current rank.", "\n", "deltas", "=", "[", "]", "\n", "device", "=", "_sync_device", "if", "_sync_device", "is", "not", "None", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "for", "name", "in", "names", ":", "\n", "        ", "delta", "=", "torch", ".", "zeros", "(", "[", "_num_moments", "]", ",", "dtype", "=", "_counter_dtype", ",", "device", "=", "device", ")", "\n", "for", "counter", "in", "_counters", "[", "name", "]", ".", "values", "(", ")", ":", "\n", "            ", "delta", ".", "add_", "(", "counter", ".", "to", "(", "device", ")", ")", "\n", "counter", ".", "copy_", "(", "torch", ".", "zeros_like", "(", "counter", ")", ")", "\n", "", "deltas", ".", "append", "(", "delta", ")", "\n", "", "deltas", "=", "torch", ".", "stack", "(", "deltas", ")", "\n", "\n", "# Sum deltas across ranks.", "\n", "if", "_sync_device", "is", "not", "None", ":", "\n", "        ", "torch", ".", "distributed", ".", "all_reduce", "(", "deltas", ")", "\n", "\n", "# Update cumulative values.", "\n", "", "deltas", "=", "deltas", ".", "cpu", "(", ")", "\n", "for", "idx", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "        ", "if", "name", "not", "in", "_cumulative", ":", "\n", "            ", "_cumulative", "[", "name", "]", "=", "torch", ".", "zeros", "(", "[", "_num_moments", "]", ",", "dtype", "=", "_counter_dtype", ")", "\n", "", "_cumulative", "[", "name", "]", ".", "add_", "(", "deltas", "[", "idx", "]", ")", "\n", "\n", "# Return name-value pairs.", "\n", "", "return", "[", "(", "name", ",", "_cumulative", "[", "name", "]", ")", "for", "name", "in", "names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.custom_ops._find_compiler_bindir": [[28, 40], ["sorted", "len", "glob.glob"], "function", ["None"], ["def", "_find_compiler_bindir", "(", ")", ":", "\n", "    ", "patterns", "=", "[", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio/*/Professional/VC/Tools/MSVC/*/bin/Hostx64/x64'", ",", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio/*/BuildTools/VC/Tools/MSVC/*/bin/Hostx64/x64'", ",", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio/*/Community/VC/Tools/MSVC/*/bin/Hostx64/x64'", ",", "\n", "'C:/Program Files (x86)/Microsoft Visual Studio */vc/bin'", ",", "\n", "]", "\n", "for", "pattern", "in", "patterns", ":", "\n", "        ", "matches", "=", "sorted", "(", "glob", ".", "glob", "(", "pattern", ")", ")", "\n", "if", "len", "(", "matches", ")", ":", "\n", "            ", "return", "matches", "[", "-", "1", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.custom_ops.get_plugin": [[46, 125], ["print", "set", "importlib.import_module", "print", "print", "custom_ops._find_compiler_bindir", "sorted", "hashlib.md5", "torch.utils.cpp_extension._get_build_directory", "torch.utils.cpp_extension._get_build_directory", "os.path.join", "torch.utils.cpp_extension.load", "torch.utils.cpp_extension.load", "torch.utils.cpp_extension.load", "torch.utils.cpp_extension.load", "print", "os.system", "RuntimeError", "os.path.dirname", "len", "list", "hashlib.md5.hexdigest", "os.path.isdir", "os.makedirs", "torch.utils.file_baton.FileBaton", "torch.utils.file_baton.FileBaton.try_acquire", "os.path.join", "print", "open", "hashlib.md5.update", "os.path.join", "torch.utils.file_baton.FileBaton.wait", "os.path.basename", "f.read", "torch.utils.file_baton.FileBaton.release", "pathlib.Path().iterdir", "x.is_file", "shutil.copyfile", "os.path.join", "pathlib.Path", "os.path.basename", "list"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.custom_ops._find_compiler_bindir", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.update"], ["def", "get_plugin", "(", "module_name", ",", "sources", ",", "**", "build_kwargs", ")", ":", "\n", "    ", "assert", "verbosity", "in", "[", "'none'", ",", "'brief'", ",", "'full'", "]", "\n", "\n", "# Already cached?", "\n", "if", "module_name", "in", "_cached_plugins", ":", "\n", "        ", "return", "_cached_plugins", "[", "module_name", "]", "\n", "\n", "# Print status.", "\n", "", "if", "verbosity", "==", "'full'", ":", "\n", "        ", "print", "(", "f'Setting up PyTorch plugin \"{module_name}\"...'", ")", "\n", "", "elif", "verbosity", "==", "'brief'", ":", "\n", "        ", "print", "(", "f'Setting up PyTorch plugin \"{module_name}\"... '", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "\n", "", "try", ":", "# pylint: disable=too-many-nested-blocks", "\n", "# Make sure we can find the necessary compiler binaries.", "\n", "        ", "if", "os", ".", "name", "==", "'nt'", "and", "os", ".", "system", "(", "\"where cl.exe >nul 2>nul\"", ")", "!=", "0", ":", "\n", "            ", "compiler_bindir", "=", "_find_compiler_bindir", "(", ")", "\n", "if", "compiler_bindir", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "f'Could not find MSVC/GCC/CLANG installation on this computer. Check _find_compiler_bindir() in \"{__file__}\".'", ")", "\n", "", "os", ".", "environ", "[", "'PATH'", "]", "+=", "';'", "+", "compiler_bindir", "\n", "\n", "# Compile and load.", "\n", "", "verbose_build", "=", "(", "verbosity", "==", "'full'", ")", "\n", "\n", "# Incremental build md5sum trickery.  Copies all the input source files", "\n", "# into a cached build directory under a combined md5 digest of the input", "\n", "# source files.  Copying is done only if the combined digest has changed.", "\n", "# This keeps input file timestamps and filenames the same as in previous", "\n", "# extension builds, allowing for fast incremental rebuilds.", "\n", "#", "\n", "# This optimization is done only in case all the source files reside in", "\n", "# a single directory (just for simplicity) and if the TORCH_EXTENSIONS_DIR", "\n", "# environment variable is set (we take this as a signal that the user", "\n", "# actually cares about this.)", "\n", "source_dirs_set", "=", "set", "(", "os", ".", "path", ".", "dirname", "(", "source", ")", "for", "source", "in", "sources", ")", "\n", "if", "len", "(", "source_dirs_set", ")", "==", "1", "and", "(", "'TORCH_EXTENSIONS_DIR'", "in", "os", ".", "environ", ")", ":", "\n", "            ", "all_source_files", "=", "sorted", "(", "list", "(", "x", "for", "x", "in", "Path", "(", "list", "(", "source_dirs_set", ")", "[", "0", "]", ")", ".", "iterdir", "(", ")", "if", "x", ".", "is_file", "(", ")", ")", ")", "\n", "\n", "# Compute a combined hash digest for all source files in the same", "\n", "# custom op directory (usually .cu, .cpp, .py and .h files).", "\n", "hash_md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "for", "src", "in", "all_source_files", ":", "\n", "                ", "with", "open", "(", "src", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "hash_md5", ".", "update", "(", "f", ".", "read", "(", ")", ")", "\n", "", "", "build_dir", "=", "torch", ".", "utils", ".", "cpp_extension", ".", "_get_build_directory", "(", "module_name", ",", "verbose", "=", "verbose_build", ")", "# pylint: disable=protected-access", "\n", "digest_build_dir", "=", "os", ".", "path", ".", "join", "(", "build_dir", ",", "hash_md5", ".", "hexdigest", "(", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "digest_build_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "digest_build_dir", ",", "exist_ok", "=", "True", ")", "\n", "baton", "=", "FileBaton", "(", "os", ".", "path", ".", "join", "(", "digest_build_dir", ",", "'lock'", ")", ")", "\n", "if", "baton", ".", "try_acquire", "(", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "for", "src", "in", "all_source_files", ":", "\n", "                            ", "shutil", ".", "copyfile", "(", "src", ",", "os", ".", "path", ".", "join", "(", "digest_build_dir", ",", "os", ".", "path", ".", "basename", "(", "src", ")", ")", ")", "\n", "", "", "finally", ":", "\n", "                        ", "baton", ".", "release", "(", ")", "\n", "", "", "else", ":", "\n", "# Someone else is copying source files under the digest dir,", "\n", "# wait until done and continue.", "\n", "                    ", "baton", ".", "wait", "(", ")", "\n", "", "", "digest_sources", "=", "[", "os", ".", "path", ".", "join", "(", "digest_build_dir", ",", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "for", "x", "in", "sources", "]", "\n", "torch", ".", "utils", ".", "cpp_extension", ".", "load", "(", "name", "=", "module_name", ",", "build_directory", "=", "build_dir", ",", "\n", "verbose", "=", "verbose_build", ",", "sources", "=", "digest_sources", ",", "**", "build_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "utils", ".", "cpp_extension", ".", "load", "(", "name", "=", "module_name", ",", "verbose", "=", "verbose_build", ",", "sources", "=", "sources", ",", "**", "build_kwargs", ")", "\n", "", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "\n", "\n", "", "except", ":", "\n", "        ", "if", "verbosity", "==", "'brief'", ":", "\n", "            ", "print", "(", "'Failed!'", ")", "\n", "", "raise", "\n", "\n", "# Print status and add to cache.", "\n", "", "if", "verbosity", "==", "'full'", ":", "\n", "        ", "print", "(", "f'Done setting up PyTorch plugin \"{module_name}\".'", ")", "\n", "", "elif", "verbosity", "==", "'brief'", ":", "\n", "        ", "print", "(", "'Done.'", ")", "\n", "", "_cached_plugins", "[", "module_name", "]", "=", "module", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence.persistent_class": [[35, 131], ["isinstance", "persistence.is_persistent", "persistence._module_to_src", "_decorators.add", "super().__init__", "copy.deepcopy", "copy.deepcopy", "persistence._check_pickleable", "copy.deepcopy", "dnnlib.EasyDict", "list", "tuple", "persistence..__reduce__", "copy.deepcopy", "super().__reduce__", "max", "dict", "len"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence.is_persistent", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence._module_to_src", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.__init__", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence._check_pickleable"], ["def", "persistent_class", "(", "orig_class", ")", ":", "\n", "    ", "r\"\"\"Class decorator that extends a given class to save its source code\n    when pickled.\n\n    Example:\n\n        from torch_utils import persistence\n\n        @persistence.persistent_class\n        class MyNetwork(torch.nn.Module):\n            def __init__(self, num_inputs, num_outputs):\n                super().__init__()\n                self.fc = MyLayer(num_inputs, num_outputs)\n                ...\n\n        @persistence.persistent_class\n        class MyLayer(torch.nn.Module):\n            ...\n\n    When pickled, any instance of `MyNetwork` and `MyLayer` will save its\n    source code alongside other internal state (e.g., parameters, buffers,\n    and submodules). This way, any previously exported pickle will remain\n    usable even if the class definitions have been modified or are no\n    longer available.\n\n    The decorator saves the source code of the entire Python module\n    containing the decorated class. It does *not* save the source code of\n    any imported modules. Thus, the imported modules must be available\n    during unpickling, also including `torch_utils.persistence` itself.\n\n    It is ok to call functions defined in the same module from the\n    decorated class. However, if the decorated class depends on other\n    classes defined in the same module, they must be decorated as well.\n    This is illustrated in the above example in the case of `MyLayer`.\n\n    It is also possible to employ the decorator just-in-time before\n    calling the constructor. For example:\n\n        cls = MyLayer\n        if want_to_make_it_persistent:\n            cls = persistence.persistent_class(cls)\n        layer = cls(num_inputs, num_outputs)\n\n    As an additional feature, the decorator also keeps track of the\n    arguments that were used to construct each instance of the decorated\n    class. The arguments can be queried via `obj.init_args` and\n    `obj.init_kwargs`, and they are automatically pickled alongside other\n    object state. A typical use case is to first unpickle a previous\n    instance of a persistent class, and then upgrade it to use the latest\n    version of the source code:\n\n        with open('old_pickle.pkl', 'rb') as f:\n            old_net = pickle.load(f)\n        new_net = MyNetwork(*old_obj.init_args, **old_obj.init_kwargs)\n        misc.copy_params_and_buffers(old_net, new_net, require_all=True)\n    \"\"\"", "\n", "assert", "isinstance", "(", "orig_class", ",", "type", ")", "\n", "if", "is_persistent", "(", "orig_class", ")", ":", "\n", "        ", "return", "orig_class", "\n", "\n", "", "assert", "orig_class", ".", "__module__", "in", "sys", ".", "modules", "\n", "orig_module", "=", "sys", ".", "modules", "[", "orig_class", ".", "__module__", "]", "\n", "orig_module_src", "=", "_module_to_src", "(", "orig_module", ")", "\n", "\n", "class", "Decorator", "(", "orig_class", ")", ":", "\n", "        ", "_orig_module_src", "=", "orig_module_src", "\n", "_orig_class_name", "=", "orig_class", ".", "__name__", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "_init_args", "=", "copy", ".", "deepcopy", "(", "args", ")", "\n", "self", ".", "_init_kwargs", "=", "copy", ".", "deepcopy", "(", "kwargs", ")", "\n", "assert", "orig_class", ".", "__name__", "in", "orig_module", ".", "__dict__", "\n", "_check_pickleable", "(", "self", ".", "__reduce__", "(", ")", ")", "\n", "\n", "", "@", "property", "\n", "def", "init_args", "(", "self", ")", ":", "\n", "            ", "return", "copy", ".", "deepcopy", "(", "self", ".", "_init_args", ")", "\n", "\n", "", "@", "property", "\n", "def", "init_kwargs", "(", "self", ")", ":", "\n", "            ", "return", "dnnlib", ".", "EasyDict", "(", "copy", ".", "deepcopy", "(", "self", ".", "_init_kwargs", ")", ")", "\n", "\n", "", "def", "__reduce__", "(", "self", ")", ":", "\n", "            ", "fields", "=", "list", "(", "super", "(", ")", ".", "__reduce__", "(", ")", ")", "\n", "fields", "+=", "[", "None", "]", "*", "max", "(", "3", "-", "len", "(", "fields", ")", ",", "0", ")", "\n", "if", "fields", "[", "0", "]", "is", "not", "_reconstruct_persistent_obj", ":", "\n", "                ", "meta", "=", "dict", "(", "type", "=", "'class'", ",", "version", "=", "_version", ",", "module_src", "=", "self", ".", "_orig_module_src", ",", "class_name", "=", "self", ".", "_orig_class_name", ",", "state", "=", "fields", "[", "2", "]", ")", "\n", "fields", "[", "0", "]", "=", "_reconstruct_persistent_obj", "# reconstruct func", "\n", "fields", "[", "1", "]", "=", "(", "meta", ",", ")", "# reconstruct args", "\n", "fields", "[", "2", "]", "=", "None", "# state dict", "\n", "", "return", "tuple", "(", "fields", ")", "\n", "\n", "", "", "Decorator", ".", "__name__", "=", "orig_class", ".", "__name__", "\n", "_decorators", ".", "add", "(", "Decorator", ")", "\n", "return", "Decorator", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence.is_persistent": [[134, 144], ["type"], "function", ["None"], ["", "def", "is_persistent", "(", "obj", ")", ":", "\n", "    ", "r\"\"\"Test whether the given object or class is persistent, i.e.,\n    whether it will save its source code when pickled.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "if", "obj", "in", "_decorators", ":", "\n", "            ", "return", "True", "\n", "", "", "except", "TypeError", ":", "\n", "        ", "pass", "\n", "", "return", "type", "(", "obj", ")", "in", "_decorators", "# pylint: disable=unidiomatic-typecheck", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence.import_hook": [[147, 176], ["callable", "_import_hooks.append"], "function", ["None"], ["", "def", "import_hook", "(", "hook", ")", ":", "\n", "    ", "r\"\"\"Register an import hook that is called whenever a persistent object\n    is being unpickled. A typical use case is to patch the pickled source\n    code to avoid errors and inconsistencies when the API of some imported\n    module has changed.\n\n    The hook should have the following signature:\n\n        hook(meta) -> modified meta\n\n    `meta` is an instance of `dnnlib.EasyDict` with the following fields:\n\n        type:       Type of the persistent object, e.g. `'class'`.\n        version:    Internal version number of `torch_utils.persistence`.\n        module_src  Original source code of the Python module.\n        class_name: Class name in the original Python module.\n        state:      Internal state of the object.\n\n    Example:\n\n        @persistence.import_hook\n        def wreck_my_network(meta):\n            if meta.class_name == 'MyNetwork':\n                print('MyNetwork is being imported. I will wreck it!')\n                meta.module_src = meta.module_src.replace(\"True\", \"False\")\n            return meta\n    \"\"\"", "\n", "assert", "callable", "(", "hook", ")", "\n", "_import_hooks", ".", "append", "(", "hook", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence._reconstruct_persistent_obj": [[179, 203], ["dnnlib.EasyDict", "dnnlib.EasyDict", "persistence._src_to_module", "persistence.persistent_class", "persistent_class.__new__", "getattr", "callable", "hook", "getattr.", "decorator_class.__new__.__dict__.update"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence._src_to_module", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence.persistent_class", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.training_stats.Collector.update"], ["", "def", "_reconstruct_persistent_obj", "(", "meta", ")", ":", "\n", "    ", "r\"\"\"Hook that is called internally by the `pickle` module to unpickle\n    a persistent object.\n    \"\"\"", "\n", "meta", "=", "dnnlib", ".", "EasyDict", "(", "meta", ")", "\n", "meta", ".", "state", "=", "dnnlib", ".", "EasyDict", "(", "meta", ".", "state", ")", "\n", "for", "hook", "in", "_import_hooks", ":", "\n", "        ", "meta", "=", "hook", "(", "meta", ")", "\n", "assert", "meta", "is", "not", "None", "\n", "\n", "", "assert", "meta", ".", "version", "==", "_version", "\n", "module", "=", "_src_to_module", "(", "meta", ".", "module_src", ")", "\n", "\n", "assert", "meta", ".", "type", "==", "'class'", "\n", "orig_class", "=", "module", ".", "__dict__", "[", "meta", ".", "class_name", "]", "\n", "decorator_class", "=", "persistent_class", "(", "orig_class", ")", "\n", "obj", "=", "decorator_class", ".", "__new__", "(", "decorator_class", ")", "\n", "\n", "setstate", "=", "getattr", "(", "obj", ",", "'__setstate__'", ",", "None", ")", "\n", "if", "callable", "(", "setstate", ")", ":", "\n", "        ", "setstate", "(", "meta", ".", "state", ")", "# pylint: disable=not-callable", "\n", "", "else", ":", "\n", "        ", "obj", ".", "__dict__", ".", "update", "(", "meta", ".", "state", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence._module_to_src": [[206, 215], ["_module_to_src_dict.get", "inspect.getsource"], "function", ["None"], ["", "def", "_module_to_src", "(", "module", ")", ":", "\n", "    ", "r\"\"\"Query the source code of a given Python module.\n    \"\"\"", "\n", "src", "=", "_module_to_src_dict", ".", "get", "(", "module", ",", "None", ")", "\n", "if", "src", "is", "None", ":", "\n", "        ", "src", "=", "inspect", ".", "getsource", "(", "module", ")", "\n", "_module_to_src_dict", "[", "module", "]", "=", "src", "\n", "_src_to_module_dict", "[", "src", "]", "=", "module", "\n", "", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence._src_to_module": [[216, 228], ["_src_to_module_dict.get", "types.ModuleType", "exec", "uuid.uuid4"], "function", ["None"], ["", "def", "_src_to_module", "(", "src", ")", ":", "\n", "    ", "r\"\"\"Get or create a Python module for the given source code.\n    \"\"\"", "\n", "module", "=", "_src_to_module_dict", ".", "get", "(", "src", ",", "None", ")", "\n", "if", "module", "is", "None", ":", "\n", "        ", "module_name", "=", "\"_imported_module_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "module", "=", "types", ".", "ModuleType", "(", "module_name", ")", "\n", "sys", ".", "modules", "[", "module_name", "]", "=", "module", "\n", "_module_to_src_dict", "[", "module", "]", "=", "src", "\n", "_src_to_module_dict", "[", "src", "]", "=", "module", "\n", "exec", "(", "src", ",", "module", ".", "__dict__", ")", "# pylint: disable=exec-used", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence._check_pickleable": [[231, 250], ["isinstance", "isinstance", "isinstance", "persistence.is_persistent", "io.BytesIO", "pickle.dump", "persistence._check_pickleable.recurse"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.persistence.is_persistent"], ["", "def", "_check_pickleable", "(", "obj", ")", ":", "\n", "    ", "r\"\"\"Check that the given object is pickleable, raising an exception if\n    it is not. This function is expected to be considerably more efficient\n    than actually pickling the object.\n    \"\"\"", "\n", "def", "recurse", "(", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "(", "list", ",", "tuple", ",", "set", ")", ")", ":", "\n", "            ", "return", "[", "recurse", "(", "x", ")", "for", "x", "in", "obj", "]", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "            ", "return", "[", "[", "recurse", "(", "x", ")", ",", "recurse", "(", "y", ")", "]", "for", "x", ",", "y", "in", "obj", ".", "items", "(", ")", "]", "\n", "", "if", "isinstance", "(", "obj", ",", "(", "str", ",", "int", ",", "float", ",", "bool", ",", "bytes", ",", "bytearray", ")", ")", ":", "\n", "            ", "return", "None", "# Python primitive types are pickleable.", "\n", "", "if", "f'{type(obj).__module__}.{type(obj).__name__}'", "in", "[", "'numpy.ndarray'", ",", "'torch.Tensor'", "]", ":", "\n", "            ", "return", "None", "# NumPy arrays and PyTorch tensors are pickleable.", "\n", "", "if", "is_persistent", "(", "obj", ")", ":", "\n", "            ", "return", "None", "# Persistent objects are pickleable, by virtue of the constructor check.", "\n", "", "return", "obj", "\n", "", "with", "io", ".", "BytesIO", "(", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "recurse", "(", "obj", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.bias_act._init": [[41, 52], ["os.path.join", "custom_ops.get_plugin", "os.path.dirname", "warnings.warn", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.custom_ops.get_plugin"], ["def", "_init", "(", ")", ":", "\n", "    ", "global", "_inited", ",", "_plugin", "\n", "if", "not", "_inited", ":", "\n", "        ", "_inited", "=", "True", "\n", "sources", "=", "[", "'bias_act.cpp'", ",", "'bias_act.cu'", "]", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "try", ":", "\n", "            ", "_plugin", "=", "custom_ops", ".", "get_plugin", "(", "'bias_act_plugin'", ",", "sources", "=", "sources", ",", "extra_cuda_cflags", "=", "[", "'--use_fast_math'", "]", ")", "\n", "", "except", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Failed to build CUDA kernels for bias_act. Falling back to slow reference implementation. Details:\\n\\n'", "+", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "", "return", "_plugin", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.bias_act.bias_act": [[55, 90], ["isinstance", "bias_act._bias_act_ref", "bias_act._init", "_bias_act_cuda().apply", "bias_act._bias_act_cuda"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.bias_act._bias_act_ref", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._init", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.bias_act._bias_act_cuda"], ["", "def", "bias_act", "(", "x", ",", "b", "=", "None", ",", "dim", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "clamp", "=", "None", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Fused bias and activation function.\n\n    Adds bias `b` to activation tensor `x`, evaluates activation function `act`,\n    and scales the result by `gain`. Each of the steps is optional. In most cases,\n    the fused op is considerably more efficient than performing the same calculation\n    using standard PyTorch ops. It supports first and second order gradients,\n    but not third order gradients.\n\n    Args:\n        x:      Input activation tensor. Can be of any shape.\n        b:      Bias vector, or `None` to disable. Must be a 1D tensor of the same type\n                as `x`. The shape must be known, and it must match the dimension of `x`\n                corresponding to `dim`.\n        dim:    The dimension in `x` corresponding to the elements of `b`.\n                The value of `dim` is ignored if `b` is not specified.\n        act:    Name of the activation function to evaluate, or `\"linear\"` to disable.\n                Can be e.g. `\"relu\"`, `\"lrelu\"`, `\"tanh\"`, `\"sigmoid\"`, `\"swish\"`, etc.\n                See `activation_funcs` for a full list. `None` is not allowed.\n        alpha:  Shape parameter for the activation function, or `None` to use the default.\n        gain:   Scaling factor for the output tensor, or `None` to use default.\n                See `activation_funcs` for the default scaling of each activation function.\n                If unsure, consider specifying 1.\n        clamp:  Clamp the output values to `[-clamp, +clamp]`, or `None` to disable\n                the clamping (default).\n        impl:   Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the same shape and datatype as `x`.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "impl", "in", "[", "'ref'", ",", "'cuda'", "]", "\n", "if", "impl", "==", "'cuda'", "and", "x", ".", "device", ".", "type", "==", "'cuda'", "and", "_init", "(", ")", ":", "\n", "        ", "return", "_bias_act_cuda", "(", "dim", "=", "dim", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ",", "clamp", "=", "clamp", ")", ".", "apply", "(", "x", ",", "b", ")", "\n", "", "return", "_bias_act_ref", "(", "x", "=", "x", ",", "b", "=", "b", ",", "dim", "=", "dim", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ",", "clamp", "=", "clamp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.bias_act._bias_act_ref": [[93, 124], ["isinstance", "float", "float", "float", "float", "spec.func", "float", "x.clamp.clamp", "isinstance", "b.reshape", "range"], "function", ["None"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "_bias_act_ref", "(", "x", ",", "b", "=", "None", ",", "dim", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "clamp", "=", "None", ")", ":", "\n", "    ", "\"\"\"Slow reference implementation of `bias_act()` using standard TensorFlow ops.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "clamp", "is", "None", "or", "clamp", ">=", "0", "\n", "spec", "=", "activation_funcs", "[", "act", "]", "\n", "alpha", "=", "float", "(", "alpha", "if", "alpha", "is", "not", "None", "else", "spec", ".", "def_alpha", ")", "\n", "gain", "=", "float", "(", "gain", "if", "gain", "is", "not", "None", "else", "spec", ".", "def_gain", ")", "\n", "clamp", "=", "float", "(", "clamp", "if", "clamp", "is", "not", "None", "else", "-", "1", ")", "\n", "\n", "# Add bias.", "\n", "if", "b", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "b", ",", "torch", ".", "Tensor", ")", "and", "b", ".", "ndim", "==", "1", "\n", "assert", "0", "<=", "dim", "<", "x", ".", "ndim", "\n", "assert", "b", ".", "shape", "[", "0", "]", "==", "x", ".", "shape", "[", "dim", "]", "\n", "x", "=", "x", "+", "b", ".", "reshape", "(", "[", "-", "1", "if", "i", "==", "dim", "else", "1", "for", "i", "in", "range", "(", "x", ".", "ndim", ")", "]", ")", "\n", "\n", "# Evaluate activation function.", "\n", "", "alpha", "=", "float", "(", "alpha", ")", "\n", "x", "=", "spec", ".", "func", "(", "x", ",", "alpha", "=", "alpha", ")", "\n", "\n", "# Scale by gain.", "\n", "gain", "=", "float", "(", "gain", ")", "\n", "if", "gain", "!=", "1", ":", "\n", "        ", "x", "=", "x", "*", "gain", "\n", "\n", "# Clamp.", "\n", "", "if", "clamp", ">=", "0", ":", "\n", "        ", "x", "=", "x", ".", "clamp", "(", "-", "clamp", ",", "clamp", ")", "# pylint: disable=invalid-unary-operand-type", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.bias_act._bias_act_cuda": [[129, 211], ["float", "float", "float", "x.contiguous.contiguous", "ctx.save_for_backward", "dy.contiguous.contiguous", "_plugin.bias_act", "ctx.save_for_backward", "d_dx.contiguous.contiguous", "b.contiguous", "_plugin.bias_act", "BiasActCudaGrad.apply.sum", "BiasActCudaGrad.apply", "_plugin.bias_act", "_plugin.bias_act.sum", "BiasActCudaGrad.apply", "x.contiguous.stride", "range", "dy.contiguous.stride", "range"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.bias_act.bias_act", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.bias_act.bias_act", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.bias_act.bias_act"], ["def", "_bias_act_cuda", "(", "dim", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "clamp", "=", "None", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `bias_act()` using custom ops.\n    \"\"\"", "\n", "# Parse arguments.", "\n", "assert", "clamp", "is", "None", "or", "clamp", ">=", "0", "\n", "spec", "=", "activation_funcs", "[", "act", "]", "\n", "alpha", "=", "float", "(", "alpha", "if", "alpha", "is", "not", "None", "else", "spec", ".", "def_alpha", ")", "\n", "gain", "=", "float", "(", "gain", "if", "gain", "is", "not", "None", "else", "spec", ".", "def_gain", ")", "\n", "clamp", "=", "float", "(", "clamp", "if", "clamp", "is", "not", "None", "else", "-", "1", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "dim", ",", "act", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "if", "key", "in", "_bias_act_cuda_cache", ":", "\n", "        ", "return", "_bias_act_cuda_cache", "[", "key", "]", "\n", "\n", "# Forward op.", "\n", "", "class", "BiasActCuda", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "b", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "ctx", ".", "memory_format", "=", "torch", ".", "channels_last", "if", "x", ".", "ndim", ">", "2", "and", "x", ".", "stride", "(", ")", "[", "1", "]", "==", "1", "else", "torch", ".", "contiguous_format", "\n", "x", "=", "x", ".", "contiguous", "(", "memory_format", "=", "ctx", ".", "memory_format", ")", "\n", "b", "=", "b", ".", "contiguous", "(", ")", "if", "b", "is", "not", "None", "else", "_null_tensor", "\n", "y", "=", "x", "\n", "if", "act", "!=", "'linear'", "or", "gain", "!=", "1", "or", "clamp", ">=", "0", "or", "b", "is", "not", "_null_tensor", ":", "\n", "                ", "y", "=", "_plugin", ".", "bias_act", "(", "x", ",", "b", ",", "_null_tensor", ",", "_null_tensor", ",", "_null_tensor", ",", "0", ",", "dim", ",", "spec", ".", "cuda_idx", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "", "ctx", ".", "save_for_backward", "(", "\n", "x", "if", "'x'", "in", "spec", ".", "ref", "or", "spec", ".", "has_2nd_grad", "else", "_null_tensor", ",", "\n", "b", "if", "'x'", "in", "spec", ".", "ref", "or", "spec", ".", "has_2nd_grad", "else", "_null_tensor", ",", "\n", "y", "if", "'y'", "in", "spec", ".", "ref", "else", "_null_tensor", ")", "\n", "return", "y", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dy", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "dy", "=", "dy", ".", "contiguous", "(", "memory_format", "=", "ctx", ".", "memory_format", ")", "\n", "x", ",", "b", ",", "y", "=", "ctx", ".", "saved_tensors", "\n", "dx", "=", "None", "\n", "db", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "dx", "=", "dy", "\n", "if", "act", "!=", "'linear'", "or", "gain", "!=", "1", "or", "clamp", ">=", "0", ":", "\n", "                    ", "dx", "=", "BiasActCudaGrad", ".", "apply", "(", "dy", ",", "x", ",", "b", ",", "y", ")", "\n", "\n", "", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "db", "=", "dx", ".", "sum", "(", "[", "i", "for", "i", "in", "range", "(", "dx", ".", "ndim", ")", "if", "i", "!=", "dim", "]", ")", "\n", "\n", "", "return", "dx", ",", "db", "\n", "\n", "# Backward op.", "\n", "", "", "class", "BiasActCudaGrad", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "dy", ",", "x", ",", "b", ",", "y", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "ctx", ".", "memory_format", "=", "torch", ".", "channels_last", "if", "dy", ".", "ndim", ">", "2", "and", "dy", ".", "stride", "(", ")", "[", "1", "]", "==", "1", "else", "torch", ".", "contiguous_format", "\n", "dx", "=", "_plugin", ".", "bias_act", "(", "dy", ",", "b", ",", "x", ",", "y", ",", "_null_tensor", ",", "1", ",", "dim", ",", "spec", ".", "cuda_idx", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "ctx", ".", "save_for_backward", "(", "\n", "dy", "if", "spec", ".", "has_2nd_grad", "else", "_null_tensor", ",", "\n", "x", ",", "b", ",", "y", ")", "\n", "return", "dx", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "d_dx", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "d_dx", "=", "d_dx", ".", "contiguous", "(", "memory_format", "=", "ctx", ".", "memory_format", ")", "\n", "dy", ",", "x", ",", "b", ",", "y", "=", "ctx", ".", "saved_tensors", "\n", "d_dy", "=", "None", "\n", "d_x", "=", "None", "\n", "d_b", "=", "None", "\n", "d_y", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "d_dy", "=", "BiasActCudaGrad", ".", "apply", "(", "d_dx", ",", "x", ",", "b", ",", "y", ")", "\n", "\n", "", "if", "spec", ".", "has_2nd_grad", "and", "(", "ctx", ".", "needs_input_grad", "[", "1", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ")", ":", "\n", "                ", "d_x", "=", "_plugin", ".", "bias_act", "(", "d_dx", ",", "b", ",", "x", ",", "y", ",", "dy", ",", "2", ",", "dim", ",", "spec", ".", "cuda_idx", ",", "alpha", ",", "gain", ",", "clamp", ")", "\n", "\n", "", "if", "spec", ".", "has_2nd_grad", "and", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "d_b", "=", "d_x", ".", "sum", "(", "[", "i", "for", "i", "in", "range", "(", "d_x", ".", "ndim", ")", "if", "i", "!=", "dim", "]", ")", "\n", "\n", "", "return", "d_dy", ",", "d_x", ",", "d_b", ",", "d_y", "\n", "\n", "# Add to cache.", "\n", "", "", "_bias_act_cuda_cache", "[", "key", "]", "=", "BiasActCuda", "\n", "return", "BiasActCuda", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_resample._get_weight_shape": [[21, 26], ["misc.assert_shape", "misc.suppress_tracer_warnings", "int"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.assert_shape"], ["def", "_get_weight_shape", "(", "w", ")", ":", "\n", "    ", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "# this value will be treated as a constant", "\n", "        ", "shape", "=", "[", "int", "(", "sz", ")", "for", "sz", "in", "w", ".", "shape", "]", "\n", "", "misc", ".", "assert_shape", "(", "w", ",", "shape", ")", "\n", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_resample._conv2d_wrapper": [[29, 55], ["conv2d_resample._get_weight_shape", "op", "w.to.flip", "conv2d_gradfix.conv2d.to", "min", "conv2d_gradfix.conv2d.reshape", "conv2d_gradfix.conv2d.to", "w.to.to", "conv2d_gradfix.conv2d", "conv2d_gradfix.conv2d.stride", "w.to.squeeze().squeeze", "conv2d_gradfix.conv2d.reshape", "w.to.squeeze"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_resample._get_weight_shape", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.conv2d"], ["", "def", "_conv2d_wrapper", "(", "x", ",", "w", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "1", ",", "transpose", "=", "False", ",", "flip_weight", "=", "True", ")", ":", "\n", "    ", "\"\"\"Wrapper for the underlying `conv2d()` and `conv_transpose2d()` implementations.\n    \"\"\"", "\n", "out_channels", ",", "in_channels_per_group", ",", "kh", ",", "kw", "=", "_get_weight_shape", "(", "w", ")", "\n", "\n", "# Flip weight if requested.", "\n", "if", "not", "flip_weight", ":", "# conv2d() actually performs correlation (flip_weight=True) not convolution (flip_weight=False).", "\n", "        ", "w", "=", "w", ".", "flip", "(", "[", "2", ",", "3", "]", ")", "\n", "\n", "# Workaround performance pitfall in cuDNN 8.0.5, triggered when using", "\n", "# 1x1 kernel + memory_format=channels_last + less than 64 channels.", "\n", "", "if", "kw", "==", "1", "and", "kh", "==", "1", "and", "stride", "==", "1", "and", "padding", "in", "[", "0", ",", "[", "0", ",", "0", "]", ",", "(", "0", ",", "0", ")", "]", "and", "not", "transpose", ":", "\n", "        ", "if", "x", ".", "stride", "(", ")", "[", "1", "]", "==", "1", "and", "min", "(", "out_channels", ",", "in_channels_per_group", ")", "<", "64", ":", "\n", "            ", "if", "out_channels", "<=", "4", "and", "groups", "==", "1", ":", "\n", "                ", "in_shape", "=", "x", ".", "shape", "\n", "x", "=", "w", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "2", ")", "@", "x", ".", "reshape", "(", "[", "in_shape", "[", "0", "]", ",", "in_channels_per_group", ",", "-", "1", "]", ")", "\n", "x", "=", "x", ".", "reshape", "(", "[", "in_shape", "[", "0", "]", ",", "out_channels", ",", "in_shape", "[", "2", "]", ",", "in_shape", "[", "3", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", ".", "to", "(", "memory_format", "=", "torch", ".", "contiguous_format", ")", "\n", "w", "=", "w", ".", "to", "(", "memory_format", "=", "torch", ".", "contiguous_format", ")", "\n", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "x", ",", "w", ",", "groups", "=", "groups", ")", "\n", "", "return", "x", ".", "to", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "# Otherwise => execute using conv2d_gradfix.", "\n", "", "", "op", "=", "conv2d_gradfix", ".", "conv_transpose2d", "if", "transpose", "else", "conv2d_gradfix", ".", "conv2d", "\n", "return", "op", "(", "x", ",", "w", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_resample.conv2d_resample": [[58, 155], ["conv2d_resample._get_weight_shape", "upfirdn2d._get_filter_size", "upfirdn2d._parse_padding", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper", "conv2d_resample._conv2d_wrapper", "upfirdn2d.upfirdn2d", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper", "max", "max", "conv2d_resample._conv2d_wrapper", "upfirdn2d.upfirdn2d", "upfirdn2d.upfirdn2d", "isinstance", "w.reshape.transpose", "w.reshape.reshape", "w.reshape.transpose", "w.reshape.reshape", "min", "min", "upfirdn2d.upfirdn2d", "conv2d_resample._conv2d_wrapper"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_resample._get_weight_shape", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_resample._conv2d_wrapper", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_resample._conv2d_wrapper"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "conv2d_resample", "(", "x", ",", "w", ",", "f", "=", "None", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "1", ",", "flip_weight", "=", "True", ",", "flip_filter", "=", "False", ")", ":", "\n", "    ", "r\"\"\"2D convolution with optional up/downsampling.\n\n    Padding is performed only once at the beginning, not between the operations.\n\n    Args:\n        x:              Input tensor of shape\n                        `[batch_size, in_channels, in_height, in_width]`.\n        w:              Weight tensor of shape\n                        `[out_channels, in_channels//groups, kernel_height, kernel_width]`.\n        f:              Low-pass filter for up/downsampling. Must be prepared beforehand by\n                        calling upfirdn2d.setup_filter(). None = identity (default).\n        up:             Integer upsampling factor (default: 1).\n        down:           Integer downsampling factor (default: 1).\n        padding:        Padding with respect to the upsampled image. Can be a single number\n                        or a list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                        (default: 0).\n        groups:         Split input channels into N groups (default: 1).\n        flip_weight:    False = convolution, True = correlation (default: True).\n        flip_filter:    False = convolution, True = correlation (default: False).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "# Validate arguments.", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "(", "x", ".", "ndim", "==", "4", ")", "\n", "assert", "isinstance", "(", "w", ",", "torch", ".", "Tensor", ")", "and", "(", "w", ".", "ndim", "==", "4", ")", "and", "(", "w", ".", "dtype", "==", "x", ".", "dtype", ")", "\n", "assert", "f", "is", "None", "or", "(", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "and", "f", ".", "dtype", "==", "torch", ".", "float32", ")", "\n", "assert", "isinstance", "(", "up", ",", "int", ")", "and", "(", "up", ">=", "1", ")", "\n", "assert", "isinstance", "(", "down", ",", "int", ")", "and", "(", "down", ">=", "1", ")", "\n", "assert", "isinstance", "(", "groups", ",", "int", ")", "and", "(", "groups", ">=", "1", ")", "\n", "out_channels", ",", "in_channels_per_group", ",", "kh", ",", "kw", "=", "_get_weight_shape", "(", "w", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "px0", ",", "px1", ",", "py0", ",", "py1", "=", "_parse_padding", "(", "padding", ")", "\n", "\n", "# Adjust padding to account for up/downsampling.", "\n", "if", "up", ">", "1", ":", "\n", "        ", "px0", "+=", "(", "fw", "+", "up", "-", "1", ")", "//", "2", "\n", "px1", "+=", "(", "fw", "-", "up", ")", "//", "2", "\n", "py0", "+=", "(", "fh", "+", "up", "-", "1", ")", "//", "2", "\n", "py1", "+=", "(", "fh", "-", "up", ")", "//", "2", "\n", "", "if", "down", ">", "1", ":", "\n", "        ", "px0", "+=", "(", "fw", "-", "down", "+", "1", ")", "//", "2", "\n", "px1", "+=", "(", "fw", "-", "down", ")", "//", "2", "\n", "py0", "+=", "(", "fh", "-", "down", "+", "1", ")", "//", "2", "\n", "py1", "+=", "(", "fh", "-", "down", ")", "//", "2", "\n", "\n", "# Fast path: 1x1 convolution with downsampling only => downsample first, then convolve.", "\n", "", "if", "kw", "==", "1", "and", "kh", "==", "1", "and", "(", "down", ">", "1", "and", "up", "==", "1", ")", ":", "\n", "        ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "down", "=", "down", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "flip_filter", "=", "flip_filter", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "return", "x", "\n", "\n", "# Fast path: 1x1 convolution with upsampling only => convolve first, then upsample.", "\n", "", "if", "kw", "==", "1", "and", "kh", "==", "1", "and", "(", "up", ">", "1", "and", "down", "==", "1", ")", ":", "\n", "        ", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "up", "=", "up", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "\n", "return", "x", "\n", "\n", "# Fast path: downsampling only => use strided convolution.", "\n", "", "if", "down", ">", "1", "and", "up", "==", "1", ":", "\n", "        ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "flip_filter", "=", "flip_filter", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "stride", "=", "down", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "return", "x", "\n", "\n", "# Fast path: upsampling with optional downsampling => use transpose strided convolution.", "\n", "", "if", "up", ">", "1", ":", "\n", "        ", "if", "groups", "==", "1", ":", "\n", "            ", "w", "=", "w", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "w", "=", "w", ".", "reshape", "(", "groups", ",", "out_channels", "//", "groups", ",", "in_channels_per_group", ",", "kh", ",", "kw", ")", "\n", "w", "=", "w", ".", "transpose", "(", "1", ",", "2", ")", "\n", "w", "=", "w", ".", "reshape", "(", "groups", "*", "in_channels_per_group", ",", "out_channels", "//", "groups", ",", "kh", ",", "kw", ")", "\n", "", "px0", "-=", "kw", "-", "1", "\n", "px1", "-=", "kw", "-", "up", "\n", "py0", "-=", "kh", "-", "1", "\n", "py1", "-=", "kh", "-", "up", "\n", "pxt", "=", "max", "(", "min", "(", "-", "px0", ",", "-", "px1", ")", ",", "0", ")", "\n", "pyt", "=", "max", "(", "min", "(", "-", "py0", ",", "-", "py1", ")", ",", "0", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "stride", "=", "up", ",", "padding", "=", "[", "pyt", ",", "pxt", "]", ",", "groups", "=", "groups", ",", "transpose", "=", "True", ",", "flip_weight", "=", "(", "not", "flip_weight", ")", ")", "\n", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "padding", "=", "[", "px0", "+", "pxt", ",", "px1", "+", "pxt", ",", "py0", "+", "pyt", ",", "py1", "+", "pyt", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "\n", "if", "down", ">", "1", ":", "\n", "            ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "down", "=", "down", ",", "flip_filter", "=", "flip_filter", ")", "\n", "", "return", "x", "\n", "\n", "# Fast path: no up/downsampling, padding supported by the underlying implementation => use plain conv2d.", "\n", "", "if", "up", "==", "1", "and", "down", "==", "1", ":", "\n", "        ", "if", "px0", "==", "px1", "and", "py0", "==", "py1", "and", "px0", ">=", "0", "and", "py0", ">=", "0", ":", "\n", "            ", "return", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "padding", "=", "[", "py0", ",", "px0", "]", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "\n", "# Fallback: Generic reference implementation.", "\n", "", "", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "(", "f", "if", "up", ">", "1", "else", "None", ")", ",", "up", "=", "up", ",", "padding", "=", "[", "px0", ",", "px1", ",", "py0", ",", "py1", "]", ",", "gain", "=", "up", "**", "2", ",", "flip_filter", "=", "flip_filter", ")", "\n", "x", "=", "_conv2d_wrapper", "(", "x", "=", "x", ",", "w", "=", "w", ",", "groups", "=", "groups", ",", "flip_weight", "=", "flip_weight", ")", "\n", "if", "down", ">", "1", ":", "\n", "        ", "x", "=", "upfirdn2d", ".", "upfirdn2d", "(", "x", "=", "x", ",", "f", "=", "f", ",", "down", "=", "down", ",", "flip_filter", "=", "flip_filter", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.no_weight_gradients": [[25, 32], ["None"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "no_weight_gradients", "(", ")", ":", "\n", "    ", "global", "weight_gradients_disabled", "\n", "old", "=", "weight_gradients_disabled", "\n", "weight_gradients_disabled", "=", "True", "\n", "yield", "\n", "weight_gradients_disabled", "=", "old", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.conv2d": [[35, 39], ["conv2d_gradfix._should_use_custom_op", "torch.nn.functional.conv2d", "_conv2d_gradfix().apply", "conv2d_gradfix._conv2d_gradfix"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.grid_sample_gradfix._should_use_custom_op", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix._conv2d_gradfix"], ["", "def", "conv2d", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "if", "_should_use_custom_op", "(", "input", ")", ":", "\n", "        ", "return", "_conv2d_gradfix", "(", "transpose", "=", "False", ",", "weight_shape", "=", "weight", ".", "shape", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", ".", "apply", "(", "input", ",", "weight", ",", "bias", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.conv_transpose2d": [[40, 44], ["conv2d_gradfix._should_use_custom_op", "torch.nn.functional.conv_transpose2d", "_conv2d_gradfix().apply", "conv2d_gradfix._conv2d_gradfix"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.grid_sample_gradfix._should_use_custom_op", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.conv_transpose2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix._conv2d_gradfix"], ["", "def", "conv_transpose2d", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "if", "_should_use_custom_op", "(", "input", ")", ":", "\n", "        ", "return", "_conv2d_gradfix", "(", "transpose", "=", "True", ",", "weight_shape", "=", "weight", ".", "shape", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "groups", "=", "groups", ",", "dilation", "=", "dilation", ")", ".", "apply", "(", "input", ",", "weight", ",", "bias", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "conv_transpose2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "groups", "=", "groups", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix._should_use_custom_op": [[47, 57], ["isinstance", "any", "warnings.warn", "torch.__version__.startswith"], "function", ["None"], ["", "def", "_should_use_custom_op", "(", "input", ")", ":", "\n", "    ", "assert", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", "\n", "if", "(", "not", "enabled", ")", "or", "(", "not", "torch", ".", "backends", ".", "cudnn", ".", "enabled", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "input", ".", "device", ".", "type", "!=", "'cuda'", ":", "\n", "        ", "return", "False", "\n", "", "if", "any", "(", "torch", ".", "__version__", ".", "startswith", "(", "x", ")", "for", "x", "in", "[", "'1.7.'", ",", "'1.8.'", ",", "'1.9'", "]", ")", ":", "\n", "        ", "return", "True", "\n", "", "warnings", ".", "warn", "(", "f'conv2d_gradfix not supported on PyTorch {torch.__version__}. Falling back to torch.nn.functional.conv2d().'", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix._tuple_of_ints": [[58, 63], ["all", "isinstance", "tuple", "len", "isinstance"], "function", ["None"], ["", "def", "_tuple_of_ints", "(", "xs", ",", "ndim", ")", ":", "\n", "    ", "xs", "=", "tuple", "(", "xs", ")", "if", "isinstance", "(", "xs", ",", "(", "tuple", ",", "list", ")", ")", "else", "(", "xs", ",", ")", "*", "ndim", "\n", "assert", "len", "(", "xs", ")", "==", "ndim", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "xs", ")", "\n", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix._conv2d_gradfix": [[68, 169], ["tuple", "conv2d_gradfix._tuple_of_ints", "conv2d_gradfix._tuple_of_ints", "conv2d_gradfix._tuple_of_ints", "conv2d_gradfix._tuple_of_ints", "all", "all", "all", "dict", "len", "all", "all", "ctx.save_for_backward", "torch._C._jit_get_operation", "torch._C._jit_get_operation.", "ctx.save_for_backward", "range", "range", "range", "range", "torch.nn.functional.conv2d", "torch.nn.functional.conv_transpose2d", "conv2d_gradfix._conv2d_gradfix.calc_output_padding"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix._tuple_of_ints", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.conv_transpose2d"], ["def", "_conv2d_gradfix", "(", "transpose", ",", "weight_shape", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ",", "groups", ")", ":", "\n", "# Parse arguments.", "\n", "    ", "ndim", "=", "2", "\n", "weight_shape", "=", "tuple", "(", "weight_shape", ")", "\n", "stride", "=", "_tuple_of_ints", "(", "stride", ",", "ndim", ")", "\n", "padding", "=", "_tuple_of_ints", "(", "padding", ",", "ndim", ")", "\n", "output_padding", "=", "_tuple_of_ints", "(", "output_padding", ",", "ndim", ")", "\n", "dilation", "=", "_tuple_of_ints", "(", "dilation", ",", "ndim", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "transpose", ",", "weight_shape", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ",", "groups", ")", "\n", "if", "key", "in", "_conv2d_gradfix_cache", ":", "\n", "        ", "return", "_conv2d_gradfix_cache", "[", "key", "]", "\n", "\n", "# Validate arguments.", "\n", "", "assert", "groups", ">=", "1", "\n", "assert", "len", "(", "weight_shape", ")", "==", "ndim", "+", "2", "\n", "assert", "all", "(", "stride", "[", "i", "]", ">=", "1", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "assert", "all", "(", "padding", "[", "i", "]", ">=", "0", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "assert", "all", "(", "dilation", "[", "i", "]", ">=", "0", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "if", "not", "transpose", ":", "\n", "        ", "assert", "all", "(", "output_padding", "[", "i", "]", "==", "0", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "", "else", ":", "# transpose", "\n", "        ", "assert", "all", "(", "0", "<=", "output_padding", "[", "i", "]", "<", "max", "(", "stride", "[", "i", "]", ",", "dilation", "[", "i", "]", ")", "for", "i", "in", "range", "(", "ndim", ")", ")", "\n", "\n", "# Helpers.", "\n", "", "common_kwargs", "=", "dict", "(", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "def", "calc_output_padding", "(", "input_shape", ",", "output_shape", ")", ":", "\n", "        ", "if", "transpose", ":", "\n", "            ", "return", "[", "0", ",", "0", "]", "\n", "", "return", "[", "\n", "input_shape", "[", "i", "+", "2", "]", "\n", "-", "(", "output_shape", "[", "i", "+", "2", "]", "-", "1", ")", "*", "stride", "[", "i", "]", "\n", "-", "(", "1", "-", "2", "*", "padding", "[", "i", "]", ")", "\n", "-", "dilation", "[", "i", "]", "*", "(", "weight_shape", "[", "i", "+", "2", "]", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "ndim", ")", "\n", "]", "\n", "\n", "# Forward & backward.", "\n", "", "class", "Conv2d", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "weight", ",", "bias", ")", ":", "\n", "            ", "assert", "weight", ".", "shape", "==", "weight_shape", "\n", "if", "not", "transpose", ":", "\n", "                ", "output", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "**", "common_kwargs", ")", "\n", "", "else", ":", "# transpose", "\n", "                ", "output", "=", "torch", ".", "nn", ".", "functional", ".", "conv_transpose2d", "(", "input", "=", "input", ",", "weight", "=", "weight", ",", "bias", "=", "bias", ",", "output_padding", "=", "output_padding", ",", "**", "common_kwargs", ")", "\n", "", "ctx", ".", "save_for_backward", "(", "input", ",", "weight", ")", "\n", "return", "output", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "            ", "input", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "None", "\n", "grad_weight", "=", "None", "\n", "grad_bias", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "p", "=", "calc_output_padding", "(", "input_shape", "=", "input", ".", "shape", ",", "output_shape", "=", "grad_output", ".", "shape", ")", "\n", "grad_input", "=", "_conv2d_gradfix", "(", "transpose", "=", "(", "not", "transpose", ")", ",", "weight_shape", "=", "weight_shape", ",", "output_padding", "=", "p", ",", "**", "common_kwargs", ")", ".", "apply", "(", "grad_output", ",", "weight", ",", "None", ")", "\n", "assert", "grad_input", ".", "shape", "==", "input", ".", "shape", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", "and", "not", "weight_gradients_disabled", ":", "\n", "                ", "grad_weight", "=", "Conv2dGradWeight", ".", "apply", "(", "grad_output", ",", "input", ")", "\n", "assert", "grad_weight", ".", "shape", "==", "weight_shape", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "grad_bias", "=", "grad_output", ".", "sum", "(", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_weight", ",", "grad_bias", "\n", "\n", "# Gradient with respect to the weights.", "\n", "", "", "class", "Conv2dGradWeight", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "input", ")", ":", "\n", "            ", "op", "=", "torch", ".", "_C", ".", "_jit_get_operation", "(", "'aten::cudnn_convolution_backward_weight'", "if", "not", "transpose", "else", "'aten::cudnn_convolution_transpose_backward_weight'", ")", "\n", "flags", "=", "[", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", ",", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", ",", "torch", ".", "backends", ".", "cudnn", ".", "allow_tf32", "]", "\n", "grad_weight", "=", "op", "(", "weight_shape", ",", "grad_output", ",", "input", ",", "padding", ",", "stride", ",", "dilation", ",", "groups", ",", "*", "flags", ")", "\n", "assert", "grad_weight", ".", "shape", "==", "weight_shape", "\n", "ctx", ".", "save_for_backward", "(", "grad_output", ",", "input", ")", "\n", "return", "grad_weight", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad2_grad_weight", ")", ":", "\n", "            ", "grad_output", ",", "input", "=", "ctx", ".", "saved_tensors", "\n", "grad2_grad_output", "=", "None", "\n", "grad2_input", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "grad2_grad_output", "=", "Conv2d", ".", "apply", "(", "input", ",", "grad2_grad_weight", ",", "None", ")", "\n", "assert", "grad2_grad_output", ".", "shape", "==", "grad_output", ".", "shape", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "p", "=", "calc_output_padding", "(", "input_shape", "=", "input", ".", "shape", ",", "output_shape", "=", "grad_output", ".", "shape", ")", "\n", "grad2_input", "=", "_conv2d_gradfix", "(", "transpose", "=", "(", "not", "transpose", ")", ",", "weight_shape", "=", "weight_shape", ",", "output_padding", "=", "p", ",", "**", "common_kwargs", ")", ".", "apply", "(", "grad_output", ",", "grad2_grad_weight", ",", "None", ")", "\n", "assert", "grad2_input", ".", "shape", "==", "input", ".", "shape", "\n", "\n", "", "return", "grad2_grad_output", ",", "grad2_input", "\n", "\n", "", "", "_conv2d_gradfix_cache", "[", "key", "]", "=", "Conv2d", "\n", "return", "Conv2d", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.grid_sample_gradfix._GridSample2dForward.forward": [[45, 52], ["torch.nn.functional.grid_sample", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.grid_sample_gradfix.grid_sample"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "grid", ")", ":", "\n", "        ", "assert", "input", ".", "ndim", "==", "4", "\n", "assert", "grid", ".", "ndim", "==", "4", "\n", "output", "=", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "input", "=", "input", ",", "grid", "=", "grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "grid", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.grid_sample_gradfix._GridSample2dForward.backward": [[53, 58], ["_GridSample2dBackward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "grid", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", ",", "grad_grid", "=", "_GridSample2dBackward", ".", "apply", "(", "grad_output", ",", "input", ",", "grid", ")", "\n", "return", "grad_input", ",", "grad_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.grid_sample_gradfix._GridSample2dBackward.forward": [[62, 68], ["torch._C._jit_get_operation", "torch._C._jit_get_operation.", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "grad_output", ",", "input", ",", "grid", ")", ":", "\n", "        ", "op", "=", "torch", ".", "_C", ".", "_jit_get_operation", "(", "'aten::grid_sampler_2d_backward'", ")", "\n", "grad_input", ",", "grad_grid", "=", "op", "(", "grad_output", ",", "input", ",", "grid", ",", "0", ",", "0", ",", "False", ")", "\n", "ctx", ".", "save_for_backward", "(", "grid", ")", "\n", "return", "grad_input", ",", "grad_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.grid_sample_gradfix._GridSample2dBackward.backward": [[69, 82], ["_GridSample2dForward.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad2_grad_input", ",", "grad2_grad_grid", ")", ":", "\n", "        ", "_", "=", "grad2_grad_grid", "# unused", "\n", "grid", ",", "=", "ctx", ".", "saved_tensors", "\n", "grad2_grad_output", "=", "None", "\n", "grad2_input", "=", "None", "\n", "grad2_grid", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad2_grad_output", "=", "_GridSample2dForward", ".", "apply", "(", "grad2_grad_input", ",", "grid", ")", "\n", "\n", "", "assert", "not", "ctx", ".", "needs_input_grad", "[", "2", "]", "\n", "return", "grad2_grad_output", ",", "grad2_input", ",", "grad2_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.grid_sample_gradfix.grid_sample": [[27, 31], ["grid_sample_gradfix._should_use_custom_op", "torch.nn.functional.grid_sample", "_GridSample2dForward.apply"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.grid_sample_gradfix._should_use_custom_op", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.grid_sample_gradfix.grid_sample"], ["def", "grid_sample", "(", "input", ",", "grid", ")", ":", "\n", "    ", "if", "_should_use_custom_op", "(", ")", ":", "\n", "        ", "return", "_GridSample2dForward", ".", "apply", "(", "input", ",", "grid", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "input", "=", "input", ",", "grid", "=", "grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'zeros'", ",", "align_corners", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.grid_sample_gradfix._should_use_custom_op": [[34, 41], ["any", "warnings.warn", "torch.__version__.startswith"], "function", ["None"], ["", "def", "_should_use_custom_op", "(", ")", ":", "\n", "    ", "if", "not", "enabled", ":", "\n", "        ", "return", "False", "\n", "", "if", "any", "(", "torch", ".", "__version__", ".", "startswith", "(", "x", ")", "for", "x", "in", "[", "'1.7.'", ",", "'1.8.'", ",", "'1.9'", "]", ")", ":", "\n", "        ", "return", "True", "\n", "", "warnings", ".", "warn", "(", "f'grid_sample_gradfix not supported on PyTorch {torch.__version__}. Falling back to torch.nn.functional.grid_sample().'", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.fma._FusedMultiplyAdd.forward": [[21, 27], ["torch.addcmul", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "a", ",", "b", ",", "c", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "out", "=", "torch", ".", "addcmul", "(", "c", ",", "a", ",", "b", ")", "\n", "ctx", ".", "save_for_backward", "(", "a", ",", "b", ")", "\n", "ctx", ".", "c_shape", "=", "c", ".", "shape", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.fma._FusedMultiplyAdd.backward": [[28, 46], ["fma._unbroadcast", "fma._unbroadcast", "fma._unbroadcast"], "methods", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.fma._unbroadcast", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.fma._unbroadcast", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.fma._unbroadcast"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dout", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "a", ",", "b", "=", "ctx", ".", "saved_tensors", "\n", "c_shape", "=", "ctx", ".", "c_shape", "\n", "da", "=", "None", "\n", "db", "=", "None", "\n", "dc", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "da", "=", "_unbroadcast", "(", "dout", "*", "b", ",", "a", ".", "shape", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "db", "=", "_unbroadcast", "(", "dout", "*", "a", ",", "b", ".", "shape", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "dc", "=", "_unbroadcast", "(", "dout", ",", "c_shape", ")", "\n", "\n", "", "return", "da", ",", "db", ",", "dc", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.fma.fma": [[15, 17], ["_FusedMultiplyAdd.apply"], "function", ["None"], ["def", "fma", "(", "a", ",", "b", ",", "c", ")", ":", "# => a * b + c", "\n", "    ", "return", "_FusedMultiplyAdd", ".", "apply", "(", "a", ",", "b", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.fma._unbroadcast": [[49, 59], ["len", "len", "x.reshape.sum", "x.reshape.reshape", "range"], "function", ["None"], ["", "", "def", "_unbroadcast", "(", "x", ",", "shape", ")", ":", "\n", "    ", "extra_dims", "=", "x", ".", "ndim", "-", "len", "(", "shape", ")", "\n", "assert", "extra_dims", ">=", "0", "\n", "dim", "=", "[", "i", "for", "i", "in", "range", "(", "x", ".", "ndim", ")", "if", "x", ".", "shape", "[", "i", "]", ">", "1", "and", "(", "i", "<", "extra_dims", "or", "shape", "[", "i", "-", "extra_dims", "]", "==", "1", ")", "]", "\n", "if", "len", "(", "dim", ")", ":", "\n", "        ", "x", "=", "x", ".", "sum", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "if", "extra_dims", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "*", "x", ".", "shape", "[", "extra_dims", "+", "1", ":", "]", ")", "\n", "", "assert", "x", ".", "shape", "==", "shape", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._init": [[26, 36], ["os.path.join", "custom_ops.get_plugin", "os.path.dirname", "warnings.warn", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.custom_ops.get_plugin"], ["def", "_init", "(", ")", ":", "\n", "    ", "global", "_inited", ",", "_plugin", "\n", "if", "not", "_inited", ":", "\n", "        ", "sources", "=", "[", "'upfirdn2d.cpp'", ",", "'upfirdn2d.cu'", "]", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "try", ":", "\n", "            ", "_plugin", "=", "custom_ops", ".", "get_plugin", "(", "'upfirdn2d_plugin'", ",", "sources", "=", "sources", ",", "extra_cuda_cflags", "=", "[", "'--use_fast_math'", "]", ")", "\n", "", "except", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Failed to build CUDA kernels for upfirdn2d. Falling back to slow reference implementation. Details:\\n\\n'", "+", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "", "return", "_plugin", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_scaling": [[37, 45], ["isinstance", "isinstance", "all", "isinstance"], "function", ["None"], ["", "def", "_parse_scaling", "(", "scaling", ")", ":", "\n", "    ", "if", "isinstance", "(", "scaling", ",", "int", ")", ":", "\n", "        ", "scaling", "=", "[", "scaling", ",", "scaling", "]", "\n", "", "assert", "isinstance", "(", "scaling", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "scaling", ")", "\n", "sx", ",", "sy", "=", "scaling", "\n", "assert", "sx", ">=", "1", "and", "sy", ">=", "1", "\n", "return", "sx", ",", "sy", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_padding": [[46, 56], ["isinstance", "isinstance", "all", "len", "isinstance"], "function", ["None"], ["", "def", "_parse_padding", "(", "padding", ")", ":", "\n", "    ", "if", "isinstance", "(", "padding", ",", "int", ")", ":", "\n", "        ", "padding", "=", "[", "padding", ",", "padding", "]", "\n", "", "assert", "isinstance", "(", "padding", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "padding", ")", "\n", "if", "len", "(", "padding", ")", "==", "2", ":", "\n", "        ", "padx", ",", "pady", "=", "padding", "\n", "padding", "=", "[", "padx", ",", "padx", ",", "pady", ",", "pady", "]", "\n", "", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "padding", "\n", "return", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._get_filter_size": [[57, 69], ["misc.assert_shape", "isinstance", "misc.suppress_tracer_warnings", "int", "int"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.torch_utils.misc.assert_shape"], ["", "def", "_get_filter_size", "(", "f", ")", ":", "\n", "    ", "if", "f", "is", "None", ":", "\n", "        ", "return", "1", ",", "1", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "fw", "=", "f", ".", "shape", "[", "-", "1", "]", "\n", "fh", "=", "f", ".", "shape", "[", "0", "]", "\n", "with", "misc", ".", "suppress_tracer_warnings", "(", ")", ":", "\n", "        ", "fw", "=", "int", "(", "fw", ")", "\n", "fh", "=", "int", "(", "fh", ")", "\n", "", "misc", ".", "assert_shape", "(", "f", ",", "[", "fh", ",", "fw", "]", "[", ":", "f", ".", "ndim", "]", ")", "\n", "assert", "fw", ">=", "1", "and", "fh", ">=", "1", "\n", "return", "fw", ",", "fh", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.setup_filter": [[72, 117], ["torch.device", "torch.as_tensor", "f.flip.to", "f.flip.numel", "f.flip.ger", "f.flip.sum", "f.flip.flip", "list", "f.flip.numel", "range"], "function", ["None"], ["", "def", "setup_filter", "(", "f", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "normalize", "=", "True", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "separable", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Convenience function to setup 2D FIR filter for `upfirdn2d()`.\n\n    Args:\n        f:           Torch tensor, numpy array, or python list of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable),\n                     `[]` (impulse), or\n                     `None` (identity).\n        device:      Result device (default: cpu).\n        normalize:   Normalize the filter so that it retains the magnitude\n                     for constant input signal (DC)? (default: True).\n        flip_filter: Flip the filter? (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        separable:   Return a separable filter? (default: select automatically).\n\n    Returns:\n        Float32 tensor of the shape\n        `[filter_height, filter_width]` (non-separable) or\n        `[filter_taps]` (separable).\n    \"\"\"", "\n", "# Validate.", "\n", "if", "f", "is", "None", ":", "\n", "        ", "f", "=", "1", "\n", "", "f", "=", "torch", ".", "as_tensor", "(", "f", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "assert", "f", ".", "ndim", "in", "[", "0", ",", "1", ",", "2", "]", "\n", "assert", "f", ".", "numel", "(", ")", ">", "0", "\n", "if", "f", ".", "ndim", "==", "0", ":", "\n", "        ", "f", "=", "f", "[", "np", ".", "newaxis", "]", "\n", "\n", "# Separable?", "\n", "", "if", "separable", "is", "None", ":", "\n", "        ", "separable", "=", "(", "f", ".", "ndim", "==", "1", "and", "f", ".", "numel", "(", ")", ">=", "8", ")", "\n", "", "if", "f", ".", "ndim", "==", "1", "and", "not", "separable", ":", "\n", "        ", "f", "=", "f", ".", "ger", "(", "f", ")", "\n", "", "assert", "f", ".", "ndim", "==", "(", "1", "if", "separable", "else", "2", ")", "\n", "\n", "# Apply normalize, flip, gain, and device.", "\n", "if", "normalize", ":", "\n", "        ", "f", "/=", "f", ".", "sum", "(", ")", "\n", "", "if", "flip_filter", ":", "\n", "        ", "f", "=", "f", ".", "flip", "(", "list", "(", "range", "(", "f", ".", "ndim", ")", ")", ")", "\n", "", "f", "=", "f", "*", "(", "gain", "**", "(", "f", ".", "ndim", "/", "2", ")", ")", "\n", "f", "=", "f", ".", "to", "(", "device", "=", "device", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d": [[120, 165], ["isinstance", "upfirdn2d._upfirdn2d_ref", "upfirdn2d._init", "_upfirdn2d_cuda().apply", "upfirdn2d._upfirdn2d_cuda"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._upfirdn2d_ref", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._init", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._upfirdn2d_cuda"], ["", "def", "upfirdn2d", "(", "x", ",", "f", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Pad, upsample, filter, and downsample a batch of 2D images.\n\n    Performs the following sequence of operations for each channel:\n\n    1. Upsample the image by inserting N-1 zeros after each pixel (`up`).\n\n    2. Pad the image with the specified number of zeros on each side (`padding`).\n       Negative padding corresponds to cropping the image.\n\n    3. Convolve the image with the specified 2D FIR filter (`f`), shrinking it\n       so that the footprint of all output pixels lies within the input image.\n\n    4. Downsample the image by keeping every Nth pixel (`down`).\n\n    This sequence of operations bears close resemblance to scipy.signal.upfirdn().\n    The fused op is considerably more efficient than performing the same calculation\n    using standard PyTorch ops. It supports gradients of arbitrary order.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        up:          Integer upsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        down:        Integer downsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        padding:     Padding with respect to the upsampled image. Can be a single number\n                     or a list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "\n", "assert", "impl", "in", "[", "'ref'", ",", "'cuda'", "]", "\n", "if", "impl", "==", "'cuda'", "and", "x", ".", "device", ".", "type", "==", "'cuda'", "and", "_init", "(", ")", ":", "\n", "        ", "return", "_upfirdn2d_cuda", "(", "up", "=", "up", ",", "down", "=", "down", ",", "padding", "=", "padding", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ")", ".", "apply", "(", "x", ",", "f", ")", "\n", "", "return", "_upfirdn2d_ref", "(", "x", ",", "f", ",", "up", "=", "up", ",", "down", "=", "down", ",", "padding", "=", "padding", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._upfirdn2d_ref": [[168, 209], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "conv2d_gradfix.conv2d.reshape", "torch.nn.functional.pad", "conv2d_gradfix.conv2d.reshape", "torch.nn.functional.pad", "f.flip.to", "f[].repeat", "isinstance", "torch.ones", "isinstance", "f.flip.flip", "conv2d_gradfix.conv2d", "conv2d_gradfix.conv2d", "conv2d_gradfix.conv2d", "max", "max", "max", "max", "list", "max", "max", "range", "f.flip.unsqueeze", "f.flip.unsqueeze", "max", "max"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.conv2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.conv2d_gradfix.conv2d"], ["", "@", "misc", ".", "profiled_function", "\n", "def", "_upfirdn2d_ref", "(", "x", ",", "f", ",", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ")", ":", "\n", "    ", "\"\"\"Slow reference implementation of `upfirdn2d()` using standard PyTorch ops.\n    \"\"\"", "\n", "# Validate arguments.", "\n", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "ndim", "==", "4", "\n", "if", "f", "is", "None", ":", "\n", "        ", "f", "=", "torch", ".", "ones", "(", "[", "1", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "assert", "f", ".", "dtype", "==", "torch", ".", "float32", "and", "not", "f", ".", "requires_grad", "\n", "batch_size", ",", "num_channels", ",", "in_height", ",", "in_width", "=", "x", ".", "shape", "\n", "upx", ",", "upy", "=", "_parse_scaling", "(", "up", ")", "\n", "downx", ",", "downy", "=", "_parse_scaling", "(", "down", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "\n", "# Upsample by inserting zeros.", "\n", "x", "=", "x", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "in_height", ",", "1", ",", "in_width", ",", "1", "]", ")", "\n", "x", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "x", ",", "[", "0", ",", "upx", "-", "1", ",", "0", ",", "0", ",", "0", ",", "upy", "-", "1", "]", ")", "\n", "x", "=", "x", ".", "reshape", "(", "[", "batch_size", ",", "num_channels", ",", "in_height", "*", "upy", ",", "in_width", "*", "upx", "]", ")", "\n", "\n", "# Pad or crop.", "\n", "x", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "x", ",", "[", "max", "(", "padx0", ",", "0", ")", ",", "max", "(", "padx1", ",", "0", ")", ",", "max", "(", "pady0", ",", "0", ")", ",", "max", "(", "pady1", ",", "0", ")", "]", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "max", "(", "-", "pady0", ",", "0", ")", ":", "x", ".", "shape", "[", "2", "]", "-", "max", "(", "-", "pady1", ",", "0", ")", ",", "max", "(", "-", "padx0", ",", "0", ")", ":", "x", ".", "shape", "[", "3", "]", "-", "max", "(", "-", "padx1", ",", "0", ")", "]", "\n", "\n", "# Setup filter.", "\n", "f", "=", "f", "*", "(", "gain", "**", "(", "f", ".", "ndim", "/", "2", ")", ")", "\n", "f", "=", "f", ".", "to", "(", "x", ".", "dtype", ")", "\n", "if", "not", "flip_filter", ":", "\n", "        ", "f", "=", "f", ".", "flip", "(", "list", "(", "range", "(", "f", ".", "ndim", ")", ")", ")", "\n", "\n", "# Convolve with the filter.", "\n", "", "f", "=", "f", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ".", "repeat", "(", "[", "num_channels", ",", "1", "]", "+", "[", "1", "]", "*", "f", ".", "ndim", ")", "\n", "if", "f", ".", "ndim", "==", "4", ":", "\n", "        ", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "f", ",", "groups", "=", "num_channels", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "f", ".", "unsqueeze", "(", "2", ")", ",", "groups", "=", "num_channels", ")", "\n", "x", "=", "conv2d_gradfix", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "f", ".", "unsqueeze", "(", "3", ")", ",", "groups", "=", "num_channels", ")", "\n", "\n", "# Downsample by throwing away pixels.", "\n", "", "x", "=", "x", "[", ":", ",", ":", ",", ":", ":", "downy", ",", ":", ":", "downx", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._upfirdn2d_cuda": [[214, 269], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "ctx.save_for_backward", "upfirdn2d._get_filter_size", "isinstance", "torch.ones", "isinstance", "_plugin.upfirdn2d", "_plugin.upfirdn2d", "_plugin.upfirdn2d", "_upfirdn2d_cuda().apply", "torch.ones.unsqueeze", "numpy.sqrt", "torch.ones.unsqueeze", "numpy.sqrt", "upfirdn2d._upfirdn2d_cuda"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._upfirdn2d_cuda"], ["def", "_upfirdn2d_cuda", "(", "up", "=", "1", ",", "down", "=", "1", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `upfirdn2d()` using custom ops.\n    \"\"\"", "\n", "# Parse arguments.", "\n", "upx", ",", "upy", "=", "_parse_scaling", "(", "up", ")", "\n", "downx", ",", "downy", "=", "_parse_scaling", "(", "down", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "\n", "# Lookup from cache.", "\n", "key", "=", "(", "upx", ",", "upy", ",", "downx", ",", "downy", ",", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", ",", "flip_filter", ",", "gain", ")", "\n", "if", "key", "in", "_upfirdn2d_cuda_cache", ":", "\n", "        ", "return", "_upfirdn2d_cuda_cache", "[", "key", "]", "\n", "\n", "# Forward op.", "\n", "", "class", "Upfirdn2dCuda", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "        ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "f", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "assert", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", "and", "x", ".", "ndim", "==", "4", "\n", "if", "f", "is", "None", ":", "\n", "                ", "f", "=", "torch", ".", "ones", "(", "[", "1", ",", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "x", ".", "device", ")", "\n", "", "assert", "isinstance", "(", "f", ",", "torch", ".", "Tensor", ")", "and", "f", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "y", "=", "x", "\n", "if", "f", ".", "ndim", "==", "2", ":", "\n", "                ", "y", "=", "_plugin", ".", "upfirdn2d", "(", "y", ",", "f", ",", "upx", ",", "upy", ",", "downx", ",", "downy", ",", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", ",", "flip_filter", ",", "gain", ")", "\n", "", "else", ":", "\n", "                ", "y", "=", "_plugin", ".", "upfirdn2d", "(", "y", ",", "f", ".", "unsqueeze", "(", "0", ")", ",", "upx", ",", "1", ",", "downx", ",", "1", ",", "padx0", ",", "padx1", ",", "0", ",", "0", ",", "flip_filter", ",", "np", ".", "sqrt", "(", "gain", ")", ")", "\n", "y", "=", "_plugin", ".", "upfirdn2d", "(", "y", ",", "f", ".", "unsqueeze", "(", "1", ")", ",", "1", ",", "upy", ",", "1", ",", "downy", ",", "0", ",", "0", ",", "pady0", ",", "pady1", ",", "flip_filter", ",", "np", ".", "sqrt", "(", "gain", ")", ")", "\n", "", "ctx", ".", "save_for_backward", "(", "f", ")", "\n", "ctx", ".", "x_shape", "=", "x", ".", "shape", "\n", "return", "y", "\n", "\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dy", ")", ":", "# pylint: disable=arguments-differ", "\n", "            ", "f", ",", "=", "ctx", ".", "saved_tensors", "\n", "_", ",", "_", ",", "ih", ",", "iw", "=", "ctx", ".", "x_shape", "\n", "_", ",", "_", ",", "oh", ",", "ow", "=", "dy", ".", "shape", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "fw", "-", "padx0", "-", "1", ",", "\n", "iw", "*", "upx", "-", "ow", "*", "downx", "+", "padx0", "-", "upx", "+", "1", ",", "\n", "fh", "-", "pady0", "-", "1", ",", "\n", "ih", "*", "upy", "-", "oh", "*", "downy", "+", "pady0", "-", "upy", "+", "1", ",", "\n", "]", "\n", "dx", "=", "None", "\n", "df", "=", "None", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "dx", "=", "_upfirdn2d_cuda", "(", "up", "=", "down", ",", "down", "=", "up", ",", "padding", "=", "p", ",", "flip_filter", "=", "(", "not", "flip_filter", ")", ",", "gain", "=", "gain", ")", ".", "apply", "(", "dy", ",", "f", ")", "\n", "\n", "", "assert", "not", "ctx", ".", "needs_input_grad", "[", "1", "]", "\n", "return", "dx", ",", "df", "\n", "\n", "# Add to cache.", "\n", "", "", "_upfirdn2d_cuda_cache", "[", "key", "]", "=", "Upfirdn2dCuda", "\n", "return", "Upfirdn2dCuda", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.filter2d": [[272, 305], ["upfirdn2d._parse_padding", "upfirdn2d._get_filter_size", "upfirdn2d.upfirdn2d"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d"], ["", "def", "filter2d", "(", "x", ",", "f", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Filter a batch of 2D images using the given 2D FIR filter.\n\n    By default, the result is padded so that its shape matches the input.\n    User-specified padding is applied on top of that, with negative values\n    indicating cropping. Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        padding:     Padding with respect to the output. Can be a single number or a\n                     list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "padx0", "+", "fw", "//", "2", ",", "\n", "padx1", "+", "(", "fw", "-", "1", ")", "//", "2", ",", "\n", "pady0", "+", "fh", "//", "2", ",", "\n", "pady1", "+", "(", "fh", "-", "1", ")", "//", "2", ",", "\n", "]", "\n", "return", "upfirdn2d", "(", "x", ",", "f", ",", "padding", "=", "p", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upsample2d": [[308, 344], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "upfirdn2d._get_filter_size", "upfirdn2d.upfirdn2d"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d"], ["", "def", "upsample2d", "(", "x", ",", "f", ",", "up", "=", "2", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Upsample a batch of 2D images using the given 2D FIR filter.\n\n    By default, the result is padded so that its shape is a multiple of the input.\n    User-specified padding is applied on top of that, with negative values\n    indicating cropping. Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        up:          Integer upsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        padding:     Padding with respect to the output. Can be a single number or a\n                     list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "upx", ",", "upy", "=", "_parse_scaling", "(", "up", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "padx0", "+", "(", "fw", "+", "upx", "-", "1", ")", "//", "2", ",", "\n", "padx1", "+", "(", "fw", "-", "upx", ")", "//", "2", ",", "\n", "pady0", "+", "(", "fh", "+", "upy", "-", "1", ")", "//", "2", ",", "\n", "pady1", "+", "(", "fh", "-", "upy", ")", "//", "2", ",", "\n", "]", "\n", "return", "upfirdn2d", "(", "x", ",", "f", ",", "up", "=", "up", ",", "padding", "=", "p", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", "*", "upx", "*", "upy", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.downsample2d": [[347, 383], ["upfirdn2d._parse_scaling", "upfirdn2d._parse_padding", "upfirdn2d._get_filter_size", "upfirdn2d.upfirdn2d"], "function", ["home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_scaling", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._parse_padding", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d._get_filter_size", "home.repos.pwc.inspect_result.VITA-Group_TransGAN.ops.upfirdn2d.upfirdn2d"], ["", "def", "downsample2d", "(", "x", ",", "f", ",", "down", "=", "2", ",", "padding", "=", "0", ",", "flip_filter", "=", "False", ",", "gain", "=", "1", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Downsample a batch of 2D images using the given 2D FIR filter.\n\n    By default, the result is padded so that its shape is a fraction of the input.\n    User-specified padding is applied on top of that, with negative values\n    indicating cropping. Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:           Float32/float64/float16 input tensor of the shape\n                     `[batch_size, num_channels, in_height, in_width]`.\n        f:           Float32 FIR filter of the shape\n                     `[filter_height, filter_width]` (non-separable),\n                     `[filter_taps]` (separable), or\n                     `None` (identity).\n        down:        Integer downsampling factor. Can be a single int or a list/tuple\n                     `[x, y]` (default: 1).\n        padding:     Padding with respect to the input. Can be a single number or a\n                     list/tuple `[x, y]` or `[x_before, x_after, y_before, y_after]`\n                     (default: 0).\n        flip_filter: False = convolution, True = correlation (default: False).\n        gain:        Overall scaling factor for signal magnitude (default: 1).\n        impl:        Implementation to use. Can be `'ref'` or `'cuda'` (default: `'cuda'`).\n\n    Returns:\n        Tensor of the shape `[batch_size, num_channels, out_height, out_width]`.\n    \"\"\"", "\n", "downx", ",", "downy", "=", "_parse_scaling", "(", "down", ")", "\n", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", "=", "_parse_padding", "(", "padding", ")", "\n", "fw", ",", "fh", "=", "_get_filter_size", "(", "f", ")", "\n", "p", "=", "[", "\n", "padx0", "+", "(", "fw", "-", "downx", "+", "1", ")", "//", "2", ",", "\n", "padx1", "+", "(", "fw", "-", "downx", ")", "//", "2", ",", "\n", "pady0", "+", "(", "fh", "-", "downy", "+", "1", ")", "//", "2", ",", "\n", "pady1", "+", "(", "fh", "-", "downy", ")", "//", "2", ",", "\n", "]", "\n", "return", "upfirdn2d", "(", "x", ",", "f", ",", "down", "=", "down", ",", "padding", "=", "p", ",", "flip_filter", "=", "flip_filter", ",", "gain", "=", "gain", ",", "impl", "=", "impl", ")", "\n", "\n"]]}