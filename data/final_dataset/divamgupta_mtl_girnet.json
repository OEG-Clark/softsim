{"home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_postag.free_tf_mem": [[1, 8], ["tf.reset_default_graph", "keras.backend.tensorflow_backend._SESSION.close"], "function", ["None"], ["def", "free_tf_mem", "(", ")", ":", "\n", "    ", "import", "keras", ".", "backend", ".", "tensorflow_backend", "\n", "if", "keras", ".", "backend", ".", "tensorflow_backend", ".", "_SESSION", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "keras", ".", "backend", ".", "tensorflow_backend", ".", "_SESSION", ".", "close", "(", ")", "\n", "keras", ".", "backend", ".", "tensorflow_backend", ".", "_SESSION", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_postag.action": [[10, 186], ["dict", "GIRNet_SeqLab", "Sluice_SeqLab.train", "dict", "CrossStitch_SeqLab", "Sluice_SeqLab.train", "dict", "CrossStitch_SeqLab", "Sluice_SeqLab.train", "dict", "HardShare_SeqLab", "Sluice_SeqLab.train", "dict", "HardShare_SeqLab", "Sluice_SeqLab.train", "dict", "SharedPrivate_SeqLab", "Sluice_SeqLab.train", "dict", "SharedPrivate_SeqLab", "Sluice_SeqLab.train", "dict", "LowSup_SeqLab", "Sluice_SeqLab.train", "dict", "LowSup_SeqLab", "Sluice_SeqLab.train", "dict", "Sluice_SeqLab", "Sluice_SeqLab.train"], "function", ["None"], ["", "", "def", "action", "(", "actset", ")", ":", "\n", "    ", "from", "sequence_labeling", "import", "GIRNet_SeqLab", ",", "CrossStitch_SeqLab", ",", "HardShare_SeqLab", ",", "SharedPrivate_SeqLab", ",", "LowSup_SeqLab", ",", "Sluice_SeqLab", "\n", "if", "0", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/postag_prepped.h5\"", "\n", "config", "[", "'exp_name'", "]", "=", "'pos_girnet_1l'", "\n", "config", "[", "'embed_dim'", "]", "=", "50", "\n", "config", "[", "'vocab_size'", "]", "=", "30003", "\n", "config", "[", "'nHidden'", "]", "=", "100", "\n", "config", "[", "'sent_len'", "]", "=", "150", "\n", "config", "[", "'n_class_en'", "]", "=", "45", "\n", "config", "[", "'n_class_hi'", "]", "=", "25", "\n", "config", "[", "'n_class_enhi'", "]", "=", "19", "\n", "model", "=", "GIRNet_SeqLab", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "1", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/postag_prepped.h5\"", "\n", "config", "[", "'exp_name'", "]", "=", "'pos_xstitch_1l'", "\n", "config", "[", "'embed_dim'", "]", "=", "50", "\n", "config", "[", "'vocab_size'", "]", "=", "30003", "\n", "config", "[", "'nHidden'", "]", "=", "100", "\n", "config", "[", "'sent_len'", "]", "=", "150", "\n", "config", "[", "'n_class_en'", "]", "=", "45", "\n", "config", "[", "'n_class_hi'", "]", "=", "25", "\n", "config", "[", "'n_class_enhi'", "]", "=", "19", "\n", "config", "[", "'n_layers'", "]", "=", "1", "# 1 or 2 ", "\n", "model", "=", "CrossStitch_SeqLab", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "2", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/postag_prepped.h5\"", "\n", "config", "[", "'exp_name'", "]", "=", "'pos_xstitch_2l'", "\n", "config", "[", "'embed_dim'", "]", "=", "50", "\n", "config", "[", "'vocab_size'", "]", "=", "30003", "\n", "config", "[", "'nHidden'", "]", "=", "100", "\n", "config", "[", "'sent_len'", "]", "=", "150", "\n", "config", "[", "'n_class_en'", "]", "=", "45", "\n", "config", "[", "'n_class_hi'", "]", "=", "25", "\n", "config", "[", "'n_class_enhi'", "]", "=", "19", "\n", "config", "[", "'n_layers'", "]", "=", "2", "# 1 or 2 ", "\n", "model", "=", "CrossStitch_SeqLab", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "3", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/postag_prepped.h5\"", "\n", "config", "[", "'exp_name'", "]", "=", "'pos_hardshare_1l'", "\n", "config", "[", "'embed_dim'", "]", "=", "50", "\n", "config", "[", "'vocab_size'", "]", "=", "30003", "\n", "config", "[", "'nHidden'", "]", "=", "100", "\n", "config", "[", "'sent_len'", "]", "=", "150", "\n", "config", "[", "'n_class_en'", "]", "=", "45", "\n", "config", "[", "'n_class_hi'", "]", "=", "25", "\n", "config", "[", "'n_class_enhi'", "]", "=", "19", "\n", "config", "[", "'n_layers'", "]", "=", "1", "\n", "model", "=", "HardShare_SeqLab", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "4", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/postag_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'pos_hardshare_2l'", "\n", "config", "[", "'embed_dim'", "]", "=", "50", "\n", "config", "[", "'vocab_size'", "]", "=", "30003", "\n", "config", "[", "'nHidden'", "]", "=", "100", "\n", "config", "[", "'sent_len'", "]", "=", "150", "\n", "config", "[", "'n_class_en'", "]", "=", "45", "\n", "config", "[", "'n_class_hi'", "]", "=", "25", "\n", "config", "[", "'n_class_enhi'", "]", "=", "19", "\n", "config", "[", "'n_layers'", "]", "=", "2", "\n", "model", "=", "HardShare_SeqLab", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "5", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/postag_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'pos_psp'", "\n", "config", "[", "'embed_dim'", "]", "=", "50", "\n", "config", "[", "'vocab_size'", "]", "=", "30003", "\n", "config", "[", "'nHidden'", "]", "=", "100", "\n", "config", "[", "'sent_len'", "]", "=", "150", "\n", "config", "[", "'n_class_en'", "]", "=", "45", "\n", "config", "[", "'n_class_hi'", "]", "=", "25", "\n", "config", "[", "'n_class_enhi'", "]", "=", "19", "\n", "config", "[", "'mode'", "]", "=", "\"parallel\"", "# 'parallel' or 'stacked'", "\n", "model", "=", "SharedPrivate_SeqLab", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "6", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/postag_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'pos_ssp'", "\n", "config", "[", "'embed_dim'", "]", "=", "50", "\n", "config", "[", "'vocab_size'", "]", "=", "30003", "\n", "config", "[", "'nHidden'", "]", "=", "100", "\n", "config", "[", "'sent_len'", "]", "=", "150", "\n", "config", "[", "'n_class_en'", "]", "=", "45", "\n", "config", "[", "'n_class_hi'", "]", "=", "25", "\n", "config", "[", "'n_class_enhi'", "]", "=", "19", "\n", "config", "[", "'mode'", "]", "=", "\"stacked\"", "# 'parallel' or 'stacked'", "\n", "model", "=", "SharedPrivate_SeqLab", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "7", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/postag_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'pos_lowsupconcat'", "\n", "config", "[", "'embed_dim'", "]", "=", "50", "\n", "config", "[", "'vocab_size'", "]", "=", "30003", "\n", "config", "[", "'nHidden'", "]", "=", "100", "\n", "config", "[", "'sent_len'", "]", "=", "150", "\n", "config", "[", "'n_class_en'", "]", "=", "45", "\n", "config", "[", "'n_class_hi'", "]", "=", "25", "\n", "config", "[", "'n_class_enhi'", "]", "=", "19", "\n", "config", "[", "'mode'", "]", "=", "\"concat\"", "# concat or share", "\n", "model", "=", "LowSup_SeqLab", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "8", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/postag_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'pos_lowsupshare'", "\n", "config", "[", "'embed_dim'", "]", "=", "50", "\n", "config", "[", "'vocab_size'", "]", "=", "30003", "\n", "config", "[", "'nHidden'", "]", "=", "100", "\n", "config", "[", "'sent_len'", "]", "=", "150", "\n", "config", "[", "'n_class_en'", "]", "=", "45", "\n", "config", "[", "'n_class_hi'", "]", "=", "25", "\n", "config", "[", "'n_class_enhi'", "]", "=", "19", "\n", "config", "[", "'mode'", "]", "=", "\"share\"", "# concat or share", "\n", "model", "=", "LowSup_SeqLab", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "9", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/postag_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'pos_sluice'", "\n", "config", "[", "'embed_dim'", "]", "=", "50", "\n", "config", "[", "'vocab_size'", "]", "=", "30003", "\n", "config", "[", "'nHidden'", "]", "=", "100", "\n", "config", "[", "'sent_len'", "]", "=", "150", "\n", "config", "[", "'n_class_en'", "]", "=", "45", "\n", "config", "[", "'n_class_hi'", "]", "=", "25", "\n", "config", "[", "'n_class_enhi'", "]", "=", "19", "\n", "\n", "model", "=", "Sluice_SeqLab", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_cmsenti.free_tf_mem": [[1, 8], ["tf.reset_default_graph", "keras.backend.tensorflow_backend._SESSION.close"], "function", ["None"], ["def", "free_tf_mem", "(", ")", ":", "\n", "    ", "import", "keras", ".", "backend", ".", "tensorflow_backend", "\n", "if", "keras", ".", "backend", ".", "tensorflow_backend", ".", "_SESSION", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "keras", ".", "backend", ".", "tensorflow_backend", ".", "_SESSION", ".", "close", "(", ")", "\n", "keras", ".", "backend", ".", "tensorflow_backend", ".", "_SESSION", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_cmsenti.action": [[10, 206], ["dict", "GIRNet_SeqClass", "Sluice_SeqClass.train", "dict", "HardShare_SeqClass", "Sluice_SeqClass.train", "dict", "HardShare_SeqClass", "Sluice_SeqClass.train", "dict", "LowSup_SeqClass", "Sluice_SeqClass.train", "dict", "LowSup_SeqClass", "Sluice_SeqClass.train", "dict", "SharedPrivate_SeqClass", "Sluice_SeqClass.train", "dict", "SharedPrivate_SeqClass", "Sluice_SeqClass.train", "dict", "CrossStitch_SeqClass", "Sluice_SeqClass.train", "dict", "CrossStitch_SeqClass", "Sluice_SeqClass.train", "dict", "Sluice_SeqClass", "Sluice_SeqClass.train"], "function", ["None"], ["", "", "def", "action", "(", "actset", ")", ":", "\n", "    ", "from", "sequence_classification", "import", "GIRNet_SeqClass", ",", "HardShare_SeqClass", ",", "LowSup_SeqClass", ",", "Sluice_SeqClass", ",", "SharedPrivate_SeqClass", ",", "CrossStitch_SeqClass", "\n", "\n", "if", "0", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "2", "\n", "config", "[", "'dataset'", "]", "=", "\"data/senti_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'cm_senti_girnet_1l'", "\n", "config", "[", "'embed_dim'", "]", "=", "300", "\n", "config", "[", "'vocab_size'", "]", "=", "35000", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'sent_len'", "]", "=", "50", "\n", "config", "[", "'n_class_en'", "]", "=", "3", "\n", "config", "[", "'n_class_es'", "]", "=", "3", "\n", "config", "[", "'n_class_enes'", "]", "=", "3", "\n", "\n", "model", "=", "GIRNet_SeqClass", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "\n", "del", "model", "\n", "\n", "", "if", "1", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "2", "\n", "config", "[", "'dataset'", "]", "=", "\"data/senti_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'cm_senti_harsdhare_1l'", "\n", "config", "[", "'embed_dim'", "]", "=", "300", "\n", "config", "[", "'vocab_size'", "]", "=", "35000", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'sent_len'", "]", "=", "50", "\n", "config", "[", "'n_class_en'", "]", "=", "3", "\n", "config", "[", "'n_class_es'", "]", "=", "3", "\n", "config", "[", "'n_class_enes'", "]", "=", "3", "\n", "config", "[", "'n_layers'", "]", "=", "1", "\n", "\n", "model", "=", "HardShare_SeqClass", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "del", "model", "\n", "\n", "", "if", "2", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "2", "\n", "config", "[", "'dataset'", "]", "=", "\"data/senti_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'cm_senti_harsdhare_2l'", "\n", "config", "[", "'embed_dim'", "]", "=", "300", "\n", "config", "[", "'vocab_size'", "]", "=", "35000", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'sent_len'", "]", "=", "50", "\n", "config", "[", "'n_class_en'", "]", "=", "3", "\n", "config", "[", "'n_class_es'", "]", "=", "3", "\n", "config", "[", "'n_class_enes'", "]", "=", "3", "\n", "config", "[", "'n_layers'", "]", "=", "2", "\n", "\n", "model", "=", "HardShare_SeqClass", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "del", "model", "\n", "\n", "", "if", "3", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "2", "\n", "config", "[", "'dataset'", "]", "=", "\"data/senti_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'cm_senti_lowsupconcat'", "\n", "config", "[", "'embed_dim'", "]", "=", "300", "\n", "config", "[", "'vocab_size'", "]", "=", "35000", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'sent_len'", "]", "=", "50", "\n", "config", "[", "'n_class_en'", "]", "=", "3", "\n", "config", "[", "'n_class_es'", "]", "=", "3", "\n", "config", "[", "'n_class_enes'", "]", "=", "3", "\n", "config", "[", "'mode'", "]", "=", "\"concat\"", "# share , concat", "\n", "\n", "model", "=", "LowSup_SeqClass", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "\n", "", "if", "4", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "2", "\n", "config", "[", "'dataset'", "]", "=", "\"data/senti_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'cm_senti_lowsupshare'", "\n", "config", "[", "'embed_dim'", "]", "=", "300", "\n", "config", "[", "'vocab_size'", "]", "=", "35000", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'sent_len'", "]", "=", "50", "\n", "config", "[", "'n_class_en'", "]", "=", "3", "\n", "config", "[", "'n_class_es'", "]", "=", "3", "\n", "config", "[", "'n_class_enes'", "]", "=", "3", "\n", "config", "[", "'mode'", "]", "=", "\"share\"", "# share , concat", "\n", "\n", "model", "=", "LowSup_SeqClass", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "5", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "2", "\n", "config", "[", "'dataset'", "]", "=", "\"data/senti_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'cm_senti_psp'", "\n", "config", "[", "'embed_dim'", "]", "=", "300", "\n", "config", "[", "'vocab_size'", "]", "=", "35000", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'sent_len'", "]", "=", "50", "\n", "config", "[", "'n_class_en'", "]", "=", "3", "\n", "config", "[", "'n_class_es'", "]", "=", "3", "\n", "config", "[", "'n_class_enes'", "]", "=", "3", "\n", "config", "[", "'mode'", "]", "=", "\"parallel\"", "# stacked , parallel", "\n", "\n", "model", "=", "SharedPrivate_SeqClass", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "6", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "2", "\n", "config", "[", "'dataset'", "]", "=", "\"data/senti_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'cm_senti_ssp'", "\n", "config", "[", "'embed_dim'", "]", "=", "300", "\n", "config", "[", "'vocab_size'", "]", "=", "35000", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'sent_len'", "]", "=", "50", "\n", "config", "[", "'n_class_en'", "]", "=", "3", "\n", "config", "[", "'n_class_es'", "]", "=", "3", "\n", "config", "[", "'n_class_enes'", "]", "=", "3", "\n", "config", "[", "'mode'", "]", "=", "\"stacked\"", "# stacked , parallel", "\n", "\n", "model", "=", "SharedPrivate_SeqClass", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "7", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "2", "\n", "config", "[", "'dataset'", "]", "=", "\"data/senti_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'cm_senti_xstitch1l'", "\n", "config", "[", "'embed_dim'", "]", "=", "300", "\n", "config", "[", "'vocab_size'", "]", "=", "35000", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'sent_len'", "]", "=", "50", "\n", "config", "[", "'n_class_en'", "]", "=", "3", "\n", "config", "[", "'n_class_es'", "]", "=", "3", "\n", "config", "[", "'n_class_enes'", "]", "=", "3", "\n", "config", "[", "'n_layers'", "]", "=", "1", "# 1 , 2 ", "\n", "\n", "model", "=", "CrossStitch_SeqClass", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "del", "model", "\n", "\n", "", "if", "8", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "2", "\n", "config", "[", "'dataset'", "]", "=", "\"data/senti_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'cm_senti_xstitch2l'", "\n", "config", "[", "'embed_dim'", "]", "=", "300", "\n", "config", "[", "'vocab_size'", "]", "=", "35000", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'sent_len'", "]", "=", "50", "\n", "config", "[", "'n_class_en'", "]", "=", "3", "\n", "config", "[", "'n_class_es'", "]", "=", "3", "\n", "config", "[", "'n_class_enes'", "]", "=", "3", "\n", "config", "[", "'n_layers'", "]", "=", "2", "# 1 , 2 ", "\n", "\n", "model", "=", "CrossStitch_SeqClass", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "\n", "", "if", "9", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "2", "\n", "config", "[", "'dataset'", "]", "=", "\"data/senti_prepped.h5\"", "\n", "\n", "config", "[", "'exp_name'", "]", "=", "'cm_senti_sluice'", "\n", "config", "[", "'embed_dim'", "]", "=", "300", "\n", "config", "[", "'vocab_size'", "]", "=", "35000", "\n", "config", "[", "'nHidden'", "]", "=", "100", "\n", "config", "[", "'sent_len'", "]", "=", "50", "\n", "config", "[", "'n_class_en'", "]", "=", "3", "\n", "config", "[", "'n_class_es'", "]", "=", "3", "\n", "config", "[", "'n_class_enes'", "]", "=", "3", "\n", "\n", "model", "=", "Sluice_SeqClass", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem": [[1, 8], ["tf.reset_default_graph", "keras.backend.tensorflow_backend._SESSION.close"], "function", ["None"], ["def", "free_tf_mem", "(", ")", ":", "\n", "    ", "import", "keras", ".", "backend", ".", "tensorflow_backend", "\n", "if", "keras", ".", "backend", ".", "tensorflow_backend", ".", "_SESSION", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "keras", ".", "backend", ".", "tensorflow_backend", ".", "_SESSION", ".", "close", "(", ")", "\n", "keras", ".", "backend", ".", "tensorflow_backend", ".", "_SESSION", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.action": [[10, 298], ["dict", "exps_absa.free_tf_mem", "CrossStitch_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "CrossStitch_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "CrossStitch_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "CrossStitch_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "SharedPrivate_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "SharedPrivate_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "SharedPrivate_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "SharedPrivate_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "Sluice_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "Sluice_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "LowSupShare_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "LowSupShare_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "HardShare_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "HardShare_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "HardShare_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "HardShare_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "GIRNet_ABSA", "GIRNet_ABSA.train", "dict", "exps_absa.free_tf_mem", "GIRNet_ABSA", "GIRNet_ABSA.train"], "function", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.None.exps_absa.free_tf_mem"], ["", "", "def", "action", "(", "actset", ")", ":", "\n", "    ", "from", "target_based_classification", "import", "CrossStitch_ABSA", ",", "SharedPrivate_ABSA", ",", "Sluice_ABSA", ",", "LowSupShare_ABSA", ",", "HardShare_ABSA", ",", "GIRNet_ABSA", "\n", "\n", "if", "0", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Laptop_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'n_layers'", "]", "=", "2", "\n", "config", "[", "'exp_name'", "]", "=", "'xstitch_2l_laptop'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "CrossStitch_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "1", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Restaurants_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'n_layers'", "]", "=", "2", "\n", "config", "[", "'exp_name'", "]", "=", "'xstitch_2l_restaurants'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "CrossStitch_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "2", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Laptop_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'n_layers'", "]", "=", "1", "\n", "config", "[", "'exp_name'", "]", "=", "'xstitch_1l_laptop'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "CrossStitch_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "3", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Restaurants_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'n_layers'", "]", "=", "1", "\n", "config", "[", "'exp_name'", "]", "=", "'xstitch_1l_restaurants'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "CrossStitch_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "4", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Laptop_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'sharing_scheme'", "]", "=", "'parallel'", "# 'parallel' or 'stacked'", "\n", "config", "[", "'exp_name'", "]", "=", "'psp_laptop'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "SharedPrivate_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "5", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Restaurants_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'sharing_scheme'", "]", "=", "'parallel'", "# 'parallel' or 'stacked'", "\n", "config", "[", "'exp_name'", "]", "=", "'psp_restaurent'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "SharedPrivate_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "6", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Laptop_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'sharing_scheme'", "]", "=", "'stacked'", "# 'parallel' or 'stacked'", "\n", "config", "[", "'exp_name'", "]", "=", "'ssp_laptop'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "SharedPrivate_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "7", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Restaurants_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'sharing_scheme'", "]", "=", "'stacked'", "# 'parallel' or 'stacked'", "\n", "config", "[", "'exp_name'", "]", "=", "'ssp_restaurent'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "SharedPrivate_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "8", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Restaurants_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'exp_name'", "]", "=", "'sluice_restaurent'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "Sluice_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "9", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Laptop_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'exp_name'", "]", "=", "'sluice_laptop'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "Sluice_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "10", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Laptop_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'exp_name'", "]", "=", "'lowsupshare_laptop'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "LowSupShare_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "11", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Restaurants_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'exp_name'", "]", "=", "'lowsupshare_restaurent'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "LowSupShare_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "12", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Restaurants_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'n_layers'", "]", "=", "1", "\n", "config", "[", "'exp_name'", "]", "=", "'hardshare1l_restraunt'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "HardShare_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "13", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Restaurants_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'n_layers'", "]", "=", "2", "\n", "config", "[", "'exp_name'", "]", "=", "'hardshare2l_restraunt'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "HardShare_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "14", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Laptop_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'n_layers'", "]", "=", "1", "\n", "config", "[", "'exp_name'", "]", "=", "'hardshare1l_laptop'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "HardShare_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "15", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Laptop_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'n_layers'", "]", "=", "2", "\n", "config", "[", "'exp_name'", "]", "=", "'hardshare2l_laptop'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "HardShare_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "16", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Restaurants_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'n_layers'", "]", "=", "1", "\n", "config", "[", "'exp_name'", "]", "=", "'girnet_1l_restraunt'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "GIRNet_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n", "", "if", "17", "in", "actset", ":", "\n", "        ", "config", "=", "dict", "(", ")", "\n", "config", "[", "'epochs'", "]", "=", "4", "\n", "config", "[", "'dataset'", "]", "=", "\"data/semival14_absa_Laptop_prepped_V2_gloved_42B.h5\"", "\n", "config", "[", "'maxSentenceL'", "]", "=", "80", "\n", "config", "[", "'maxTarLen'", "]", "=", "10", "\n", "config", "[", "'nHidden'", "]", "=", "64", "\n", "config", "[", "'dropout'", "]", "=", "0.2", "\n", "config", "[", "'recurrent_dropout'", "]", "=", "0.2", "\n", "config", "[", "'n_layers'", "]", "=", "1", "\n", "config", "[", "'exp_name'", "]", "=", "'girnet_1l_laptop'", "\n", "free_tf_mem", "(", ")", "\n", "model", "=", "GIRNet_ABSA", "(", "exp_location", "=", "\"outputs\"", ",", "config_args", "=", "config", ")", "\n", "model", ".", "train", "(", ")", "\n", "del", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.lowsup.LowSup_SeqLab.build_model": [[19, 74], ["Embedding", "Input", "Embedding.", "Input", "Embedding.", "Input", "Embedding.", "Model", "Utils.Trainer.build_model", "LSTM", "LSTM", "LSTM.", "LSTM.", "TimeDistributed", "LSTM.", "LSTM.", "TimeDistributed", "LSTM.", "LSTM.", "LSTM.", "LSTM.", "LSTM.", "TimeDistributed", "LSTM", "LSTM", "LSTM", "Dense", "Dense", "Concatenate", "Dense"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], ["    ", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'share'", ":", "\n", "            ", "rnn_hi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "", "elif", "self", ".", "config", "[", "'mode'", "]", "==", "'concat'", ":", "\n", "            ", "rnn_en", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_hi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "# hi", "\n", "\n", "", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_hi", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'share'", ":", "\n", "            ", "x", "=", "rnn_hi", "(", "x", ")", "\n", "", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'concat'", ":", "\n", "            ", "x", "=", "rnn_hi", "(", "x", ")", "\n", "", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "# en", "\n", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_en", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'share'", ":", "\n", "            ", "x", "=", "rnn_hi", "(", "x", ")", "\n", "", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'concat'", ":", "\n", "            ", "x", "=", "rnn_hi", "(", "x", ")", "\n", "", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_enhi", ")", "\n", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'share'", ":", "\n", "            ", "x_en", "=", "rnn_hi", "(", "x", ")", "\n", "x", "=", "x_en", "\n", "x", "=", "rnn_enhi", "(", "x", ")", "\n", "", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'concat'", ":", "\n", "            ", "x_en", "=", "rnn_en", "(", "x", ")", "\n", "x_hi", "=", "rnn_hi", "(", "x", ")", "\n", "x", "=", "Concatenate", "(", "-", "1", ")", "(", "[", "x_en", ",", "x_hi", "]", ")", "\n", "x", "=", "rnn_enhi", "(", "x", ")", "\n", "\n", "", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_hi", ",", "inp_en", ",", "inp_enhi", "]", ",", "[", "out_hi", ",", "out_en", ",", "out_enhi", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.sluice.Sluice_SeqLab.build_model": [[19, 112], ["Embedding", "LSTM", "LSTM", "LSTM", "LSTM", "LSTM", "LSTM", "SluiceUtils.CrossStitch", "SluiceUtils.OutPutSelector", "Input", "Input", "Input", "sluice.Sluice_SeqLab.build_model.cal_cs"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs"], ["    ", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "rnn_hi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_en", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "rnn_hi2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_en2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "stitch_layer", "=", "CrossStitch", "(", ")", "\n", "stitch_layer", ".", "supports_masking", "=", "True", "\n", "\n", "osel", "=", "OutPutSelector", "(", ")", "\n", "osel", ".", "supports_masking", "=", "True", "\n", "\n", "\n", "def", "desectOut", "(", "xx", ")", ":", "\n", "            ", "l", "=", "xx", ".", "shape", "[", "-", "1", "]", "\n", "return", "Lambda", "(", "lambda", "x", ":", "[", "x", "[", "...", ",", ":", "l", "/", "2", "]", ",", "x", "[", "...", ",", "l", "/", "2", ":", "]", "]", ")", "(", "xx", ")", "\n", "\n", "\n", "", "def", "cal_cs", "(", "inp", ")", ":", "\n", "            ", "x", "=", "embed", "(", "inp", ")", "\n", "x_hi", "=", "rnn_hi", "(", "x", ")", "\n", "\n", "# en ", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_en", "=", "rnn_en", "(", "x", ")", "\n", "\n", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_enhi", "=", "rnn_enhi", "(", "x", ")", "\n", "\n", "\n", "[", "x_hi1", ",", "x_hi2", "]", "=", "desectOut", "(", "x_hi", ")", "\n", "[", "x_en1", ",", "x_en2", "]", "=", "desectOut", "(", "x_en", ")", "\n", "[", "x_enhi1", ",", "x_enhi2", "]", "=", "desectOut", "(", "x_enhi", ")", "\n", "\n", "[", "x_hi1", ",", "x_en1", ",", "x_enhi1", ",", "x_hi2", ",", "x_en2", ",", "x_enhi2", "]", "=", "stitch_layer", "(", "[", "x_hi1", ",", "x_en1", ",", "x_enhi1", ",", "x_hi2", ",", "x_en2", ",", "x_enhi2", "]", ")", "\n", "\n", "x_hi", "=", "Concatenate", "(", ")", "(", "[", "x_hi1", ",", "x_hi2", "]", ")", "\n", "x_en", "=", "Concatenate", "(", ")", "(", "[", "x_en1", ",", "x_en2", "]", ")", "\n", "x_enhi", "=", "Concatenate", "(", ")", "(", "[", "x_enhi1", ",", "x_enhi2", "]", ")", "\n", "\n", "x_hi_p", "=", "x_hi", "\n", "x_en_p", "=", "x_en", "\n", "x_enhi_p", "=", "x_enhi", "\n", "\n", "x_hi", "=", "rnn_hi2", "(", "x_hi", ")", "\n", "x_en", "=", "rnn_en2", "(", "x_en", ")", "\n", "x_enhi", "=", "rnn_enhi2", "(", "x_enhi", ")", "\n", "\n", "[", "x_hi1", ",", "x_hi2", "]", "=", "desectOut", "(", "x_hi", ")", "\n", "[", "x_en1", ",", "x_en2", "]", "=", "desectOut", "(", "x_en", ")", "\n", "[", "x_enhi1", ",", "x_enhi2", "]", "=", "desectOut", "(", "x_enhi", ")", "\n", "\n", "[", "x_hi1", ",", "x_en1", ",", "x_enhi1", ",", "x_hi2", ",", "x_en2", ",", "x_enhi2", "]", "=", "stitch_layer", "(", "[", "x_hi1", ",", "x_en1", ",", "x_enhi1", ",", "x_hi2", ",", "x_en2", ",", "x_enhi2", "]", ")", "\n", "\n", "x_hi", "=", "Concatenate", "(", ")", "(", "[", "x_hi1", ",", "x_hi2", "]", ")", "\n", "x_en", "=", "Concatenate", "(", ")", "(", "[", "x_en1", ",", "x_en2", "]", ")", "\n", "x_enhi", "=", "Concatenate", "(", ")", "(", "[", "x_enhi1", ",", "x_enhi2", "]", ")", "\n", "\n", "x_hi", "=", "osel", "(", "[", "x_hi", ",", "x_hi_p", "]", ")", "\n", "x_en", "=", "osel", "(", "[", "x_en", ",", "x_en_p", "]", ")", "\n", "x_enhi", "=", "osel", "(", "[", "x_enhi", ",", "x_enhi_p", "]", ")", "\n", "\n", "\n", "return", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "\n", "\n", "\n", "\n", "# hi", "\n", "", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "# en ", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "\n", "[", "x_hi", ",", "_", ",", "_", "]", "=", "cal_cs", "(", "inp_hi", ")", "\n", "[", "_", ",", "x_en", ",", "_", "]", "=", "cal_cs", "(", "inp_en", ")", "\n", "[", "_", ",", "_", ",", "x_enhi", "]", "=", "cal_cs", "(", "inp_enhi", ")", "\n", "\n", "\n", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_enhi", ")", "\n", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_hi", ")", "\n", "\n", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_en", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_hi", ",", "inp_en", ",", "inp_enhi", "]", ",", "[", "out_hi", ",", "out_en", ",", "out_enhi", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.SluiceUtils.OutSelctorInitBiases.__call__": [[16, 23], ["tensorflow.convert_to_tensor.astype", "tensorflow.convert_to_tensor", "len", "np.zeros"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "shape", ")", "==", "1", "\n", "m", "=", "0.05", "+", "np", ".", "zeros", "(", "shape", ")", "\n", "m", "[", "-", "1", "]", "=", "0.95", "\n", "m", "=", "m", ".", "astype", "(", "np", ".", "float32", ")", "\n", "m", "=", "tf", ".", "convert_to_tensor", "(", "m", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.SluiceUtils.OutPutSelector.__init__": [[28, 30], ["Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OutPutSelector", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.SluiceUtils.OutPutSelector.build": [[31, 44], ["len", "SluiceUtils.OutPutSelector.add_weight", "super().build", "type", "SluiceUtils.OutSelctorInitBiases"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "type", "(", "input_shape", ")", "is", "list", "# we need a list of inputs ", "\n", "for", "ish", "in", "input_shape", ":", "\n", "            ", "assert", "ish", "==", "input_shape", "[", "0", "]", "\n", "\n", "", "self", ".", "n_inputs", "=", "len", "(", "input_shape", ")", "\n", "\n", "self", ".", "betas", "=", "self", ".", "add_weight", "(", "name", "=", "'betas'", ",", "\n", "shape", "=", "(", "self", ".", "n_inputs", ",", ")", ",", "\n", "initializer", "=", "OutSelctorInitBiases", "(", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "super", "(", "OutPutSelector", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this somewhere!", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.SluiceUtils.OutPutSelector.call": [[45, 52], ["range"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inp", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "self", ".", "n_inputs", ")", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "out_i", "=", "inp", "[", "j", "]", "*", "self", ".", "betas", "[", "j", "]", "\n", "", "else", ":", "\n", "                ", "out_i", "+=", "inp", "[", "j", "]", "*", "self", ".", "betas", "[", "j", "]", "\n", "", "", "return", "out_i", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.SluiceUtils.OutPutSelector.compute_output_shape": [[54, 56], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.SluiceUtils.CrossSelectInitBiased.__call__": [[64, 70], ["tensorflow.convert_to_tensor.astype", "tensorflow.convert_to_tensor", "len", "np.identity", "np.identity"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "shape", ")", "==", "2", "\n", "m", "=", "0.05", "*", "(", "1", "-", "np", ".", "identity", "(", "shape", "[", "0", "]", ")", ")", "+", "0.95", "*", "np", ".", "identity", "(", "shape", "[", "0", "]", ")", "\n", "m", "=", "m", ".", "astype", "(", "np", ".", "float32", ")", "\n", "m", "=", "tf", ".", "convert_to_tensor", "(", "m", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.SluiceUtils.CrossStitch.__init__": [[75, 77], ["Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CrossStitch", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.SluiceUtils.CrossStitch.build": [[78, 91], ["len", "SluiceUtils.CrossStitch.add_weight", "super().build", "type", "SluiceUtils.CrossSelectInitBiased"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "type", "(", "input_shape", ")", "is", "list", "# we need a list of inputs ", "\n", "for", "ish", "in", "input_shape", ":", "\n", "            ", "assert", "ish", "==", "input_shape", "[", "0", "]", "\n", "\n", "", "self", ".", "n_inputs", "=", "len", "(", "input_shape", ")", "\n", "\n", "self", ".", "alphas", "=", "self", ".", "add_weight", "(", "name", "=", "'alphas'", ",", "\n", "shape", "=", "(", "self", ".", "n_inputs", ",", "self", ".", "n_inputs", ")", ",", "\n", "initializer", "=", "CrossSelectInitBiased", "(", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "super", "(", "CrossStitch", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this somewhere!", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.SluiceUtils.CrossStitch.call": [[92, 102], ["range", "range", "outs.append"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inp", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_inputs", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "n_inputs", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "out_i", "=", "inp", "[", "j", "]", "*", "self", ".", "alphas", "[", "i", ",", "j", "]", "\n", "", "else", ":", "\n", "                    ", "out_i", "+=", "inp", "[", "j", "]", "*", "self", ".", "alphas", "[", "i", ",", "j", "]", "\n", "", "", "outs", ".", "append", "(", "out_i", ")", "\n", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.SluiceUtils.CrossStitch.compute_output_shape": [[103, 105], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "", "", ""]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.xstitch.CrossStitch_SeqLab.build_model": [[19, 109], ["Embedding", "LSTM", "LSTM", "LSTM", "SluiceUtils.CrossStitch", "Input", "Input", "Input", "cal_cs", "cal_cs", "cal_cs", "Model", "Utils.Trainer.build_model", "LSTM", "LSTM", "LSTM", "SluiceUtils.CrossStitch", "Embedding.", "LSTM.", "Embedding.", "LSTM.", "Embedding.", "LSTM.", "SluiceUtils.CrossStitch.", "Embedding.", "LSTM.", "Embedding.", "LSTM.", "Embedding.", "LSTM.", "SluiceUtils.CrossStitch.", "LSTM.", "LSTM.", "LSTM.", "SluiceUtils.CrossStitch.", "TimeDistributed", "TimeDistributed", "TimeDistributed", "Dense", "Dense", "Dense"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], ["    ", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "rnn_hi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_en", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "rnn_hi2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_en2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "", "stitch_layer", "=", "CrossStitch", "(", ")", "\n", "stitch_layer", ".", "supports_masking", "=", "True", "\n", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "stitch_layer2", "=", "CrossStitch", "(", ")", "\n", "stitch_layer2", ".", "supports_masking", "=", "True", "\n", "\n", "\n", "\n", "", "def", "cal_cs_1l", "(", "inp", ")", ":", "\n", "            ", "x", "=", "embed", "(", "inp", ")", "\n", "x_hi", "=", "rnn_hi", "(", "x", ")", "\n", "\n", "# en ", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_en", "=", "rnn_en", "(", "x", ")", "\n", "\n", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_enhi", "=", "rnn_enhi", "(", "x", ")", "\n", "\n", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "=", "stitch_layer", "(", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", ")", "\n", "\n", "return", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "\n", "\n", "\n", "", "def", "cal_cs_2l", "(", "inp", ")", ":", "\n", "            ", "x", "=", "embed", "(", "inp", ")", "\n", "x_hi", "=", "rnn_hi", "(", "x", ")", "\n", "\n", "# en ", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_en", "=", "rnn_en", "(", "x", ")", "\n", "\n", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_enhi", "=", "rnn_enhi", "(", "x", ")", "\n", "\n", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "=", "stitch_layer", "(", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", ")", "\n", "\n", "\n", "x_hi", "=", "rnn_hi2", "(", "x_hi", ")", "\n", "x_en", "=", "rnn_en2", "(", "x_en", ")", "\n", "x_enhi", "=", "rnn_enhi2", "(", "x_enhi", ")", "\n", "\n", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "=", "stitch_layer2", "(", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", ")", "\n", "\n", "return", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "\n", "\n", "\n", "", "if", "config", "[", "'n_layers'", "]", "==", "1", ":", "\n", "            ", "cal_cs", "=", "cal_cs_1l", "\n", "", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "cal_cs", "=", "cal_cs_2l", "\n", "\n", "\n", "\n", "# hi", "\n", "", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "# en ", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "\n", "[", "x_hi", ",", "_", ",", "_", "]", "=", "cal_cs", "(", "inp_hi", ")", "\n", "[", "_", ",", "x_en", ",", "_", "]", "=", "cal_cs", "(", "inp_en", ")", "\n", "[", "_", ",", "_", ",", "x_enhi", "]", "=", "cal_cs", "(", "inp_enhi", ")", "\n", "\n", "\n", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_enhi", ")", "\n", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_hi", ")", "\n", "\n", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_en", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_hi", ",", "inp_en", ",", "inp_enhi", "]", ",", "[", "out_hi", ",", "out_en", ",", "out_enhi", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.hardshare.HardShare_SeqLab.build_model": [[18, 61], ["Embedding", "LSTM", "Input", "Embedding.", "Input", "Embedding.", "Input", "Embedding.", "Model", "Utils.Trainer.build_model", "LSTM", "LSTM.", "LSTM.", "TimeDistributed", "LSTM.", "LSTM.", "TimeDistributed", "LSTM.", "LSTM.", "TimeDistributed", "LSTM.", "Dense", "LSTM.", "Dense", "LSTM.", "Dense"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], ["    ", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "rnn", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "rnn2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "# hi", "\n", "\n", "", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_hi", ")", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "x", "=", "rnn2", "(", "rnn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "rnn", "(", "x", ")", "\n", "", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "# en", "\n", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_en", ")", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "x", "=", "rnn2", "(", "rnn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "rnn", "(", "x", ")", "\n", "", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_enhi", ")", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "x", "=", "rnn2", "(", "rnn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "rnn", "(", "x", ")", "\n", "", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_hi", ",", "inp_en", ",", "inp_enhi", "]", ",", "[", "out_hi", ",", "out_en", ",", "out_enhi", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.girnet.GiretTwoCell.__init__": [[14, 20], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cell_1", ",", "cell_2", ",", "nHidden", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "cell_1", "=", "cell_1", "\n", "self", ".", "cell_2", "=", "cell_2", "\n", "self", ".", "nHidden", "=", "nHidden", "\n", "self", ".", "state_size", "=", "[", "nHidden", ",", "nHidden", "]", "\n", "super", "(", "GiretTwoCell", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.girnet.GiretTwoCell.build": [[21, 38], ["None"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "        ", "nHidden", "=", "self", ".", "nHidden", "\n", "\n", "input_shape_n", "=", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", "-", "2", ")", "\n", "#         print \"pp\", input_shape_n", "\n", "\n", "#         self.cell_1.build(input_shape_n)", "\n", "#         self.cell_2.build(input_shape_n)", "\n", "\n", "self", ".", "_trainable_weights", "+=", "(", "self", ".", "cell_1", ".", "trainable_weights", ")", "\n", "self", ".", "_trainable_weights", "+=", "(", "self", ".", "cell_2", ".", "trainable_weights", ")", "\n", "\n", "self", ".", "_non_trainable_weights", "+=", "(", "self", ".", "cell_1", ".", "non_trainable_weights", ")", "\n", "self", ".", "_non_trainable_weights", "+=", "(", "self", ".", "cell_2", ".", "non_trainable_weights", ")", "\n", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.girnet.GiretTwoCell.call": [[39, 58], ["K.repeat_elements", "K.repeat_elements", "girnet.GiretTwoCell.cell_1.call", "girnet.GiretTwoCell.cell_2.call"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.call", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.call"], ["", "def", "call", "(", "self", ",", "inputs", ",", "states", ")", ":", "\n", "\n", "        ", "nHidden", "=", "self", ".", "nHidden", "\n", "\n", "gate_val_1", "=", "inputs", "[", ":", ",", "0", ":", "1", "]", "\n", "gate_val_2", "=", "inputs", "[", ":", ",", "1", ":", "2", "]", "\n", "\n", "inputs", "=", "inputs", "[", ":", ",", "2", ":", "]", "\n", "\n", "gate_val_1", "=", "K", ".", "repeat_elements", "(", "gate_val_1", ",", "nHidden", ",", "-", "1", ")", "# shape # bs , hidden", "\n", "gate_val_2", "=", "K", ".", "repeat_elements", "(", "gate_val_2", ",", "nHidden", ",", "-", "1", ")", "# shape # bs , hidden", "\n", "\n", "_", ",", "[", "h1", ",", "c1", "]", "=", "self", ".", "cell_1", ".", "call", "(", "inputs", ",", "states", ")", "\n", "_", ",", "[", "h2", ",", "c2", "]", "=", "self", ".", "cell_2", ".", "call", "(", "inputs", ",", "states", ")", "\n", "\n", "h", "=", "gate_val_1", "*", "h1", "+", "gate_val_2", "*", "h2", "+", "(", "1", "-", "gate_val_1", "-", "gate_val_2", ")", "*", "states", "[", "0", "]", "\n", "c", "=", "gate_val_1", "*", "c1", "+", "gate_val_2", "*", "c2", "+", "(", "1", "-", "gate_val_1", "-", "gate_val_2", ")", "*", "states", "[", "1", "]", "\n", "\n", "return", "h", ",", "[", "h", ",", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.girnet.GIRNet_SeqLab.build_model": [[65, 106], ["Embedding", "LSTM", "LSTM", "Input", "Embedding.", "LSTM.", "Input", "Embedding.", "LSTM.", "girnet.GiretTwoCell", "Input", "Embedding.", "Model", "Utils.Trainer.build_model", "TimeDistributed", "TimeDistributed", "Bidirectional", "TimeDistributed", "Lambda", "Concatenate", "RNN", "TimeDistributed", "Dense", "Dense", "LSTM", "Dense", "Dense"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], ["    ", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "rnn_hi", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", "\n", "rnn_en", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", "\n", "\n", "# en", "\n", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_en", ")", "\n", "x", "=", "rnn_en", "(", "x", ")", "\n", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "# hi", "\n", "\n", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_hi", ")", "\n", "x", "=", "rnn_hi", "(", "x", ")", "\n", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "cell_combined", "=", "GiretTwoCell", "(", "rnn_hi", ".", "cell", ",", "rnn_en", ".", "cell", ",", "self", ".", "config", "[", "'nHidden'", "]", ")", "\n", "\n", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_enhi", ")", "\n", "\n", "x_att", "=", "x", "\n", "x_att", "=", "Bidirectional", "(", "LSTM", "(", "32", ",", "return_sequences", "=", "True", ")", ")", "(", "x", ")", "\n", "bider_h", "=", "x_att", "\n", "x_att", "=", "TimeDistributed", "(", "Dense", "(", "3", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_att", ")", "\n", "x_att", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "1", ":", "]", ")", "(", "x_att", ")", "\n", "\n", "x", "=", "Concatenate", "(", "-", "1", ")", "(", "[", "x_att", ",", "x", "]", ")", "\n", "\n", "x", "=", "RNN", "(", "cell_combined", ",", "return_sequences", "=", "True", ")", "(", "x", ")", "\n", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_hi", ",", "inp_en", ",", "inp_enhi", "]", ",", "[", "out_hi", ",", "out_en", ",", "out_enhi", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_labeling.sparedprivate.SharedPrivate_SeqLab.build_model": [[18, 69], ["Embedding", "LSTM", "LSTM", "LSTM", "LSTM", "Input", "Embedding.", "Input", "Embedding.", "Input", "Embedding.", "Model", "Utils.Trainer.build_model", "Embedding.", "LSTM.", "TimeDistributed", "Embedding.", "LSTM.", "TimeDistributed", "LSTM.", "TimeDistributed", "Concatenate", "Dense", "Concatenate", "Dense", "Concatenate", "Dense", "LSTM.", "LSTM.", "Concatenate", "LSTM.", "LSTM.", "Concatenate", "LSTM.", "LSTM.", "Concatenate", "LSTM.", "LSTM.", "LSTM."], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], ["    ", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "\n", "rnn_hi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_en", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_shared", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "\n", "\n", "# hi", "\n", "\n", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_hi", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'parallel'", ":", "\n", "            ", "x", "=", "embed", "(", "inp_hi", ")", "\n", "x", "=", "Concatenate", "(", "-", "1", ")", "(", "[", "rnn_shared", "(", "x", ")", ",", "rnn_hi", "(", "x", ")", "]", ")", "\n", "", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'stacked'", ":", "\n", "            ", "x", "=", "rnn_hi", "(", "Concatenate", "(", "-", "1", ")", "(", "[", "rnn_shared", "(", "x", ")", ",", "(", "x", ")", "]", ")", ")", "\n", "", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "# en", "\n", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_en", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'parallel'", ":", "\n", "            ", "x", "=", "embed", "(", "inp_en", ")", "\n", "x", "=", "Concatenate", "(", "-", "1", ")", "(", "[", "rnn_shared", "(", "x", ")", ",", "rnn_en", "(", "x", ")", "]", ")", "\n", "", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'stacked'", ":", "\n", "            ", "x", "=", "rnn_en", "(", "Concatenate", "(", "-", "1", ")", "(", "[", "rnn_shared", "(", "x", ")", ",", "(", "x", ")", "]", ")", ")", "\n", "", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "\n", "# en hi", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_enhi", ")", "\n", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'parallel'", ":", "\n", "            ", "x", "=", "Concatenate", "(", "-", "1", ")", "(", "[", "rnn_shared", "(", "x", ")", ",", "rnn_enhi", "(", "x", ")", "]", ")", "\n", "", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'stacked'", ":", "\n", "            ", "x", "=", "rnn_enhi", "(", "Concatenate", "(", "-", "1", ")", "(", "[", "rnn_shared", "(", "x", ")", ",", "(", "x", ")", "]", ")", ")", "\n", "", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_hi", ",", "inp_en", ",", "inp_enhi", "]", ",", "[", "out_hi", ",", "out_en", ",", "out_enhi", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.sigmoid_with_len_l": [[11, 26], ["tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.sigmoid", "len", "K.reverse", "tensorflow.cast", "tensorflow.shape", "K.reverse", "tensorflow.sequence_mask"], "function", ["None"], ["def", "sigmoid_with_len_l", "(", "inputs", ",", "length", ",", "max_len", ",", "padding", "=", "'right'", ")", ":", "\n", "    ", "assert", "len", "(", "inputs", ".", "shape", ")", "==", "2", "\n", "if", "padding", "==", "'left'", ":", "\n", "        ", "inputs", "=", "K", ".", "reverse", "(", "inputs", ",", "-", "1", ")", "\n", "\n", "", "inputs", "=", "tf", ".", "cast", "(", "inputs", ",", "tf", ".", "float32", ")", "\n", "length", "=", "tf", ".", "reshape", "(", "length", ",", "[", "-", "1", "]", ")", "\n", "mask", "=", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "tf", ".", "sequence_mask", "(", "length", ",", "max_len", ")", ",", "tf", ".", "float32", ")", ",", "tf", ".", "shape", "(", "inputs", ")", ")", "\n", "inputs", "=", "tf", ".", "sigmoid", "(", "inputs", ")", "\n", "inputs", "*=", "mask", "\n", "ret", "=", "inputs", "\n", "if", "padding", "==", "'left'", ":", "\n", "        ", "ret", "=", "K", ".", "reverse", "(", "ret", ",", "-", "1", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.softmax_with_len_l": [[28, 46], ["tensorflow.cast", "tensorflow.reduce_max", "tensorflow.exp", "tensorflow.reshape", "tensorflow.reshape", "len", "K.reverse", "tensorflow.cast", "tensorflow.shape", "tensorflow.reduce_sum", "K.reverse", "tensorflow.sequence_mask"], "function", ["None"], ["", "def", "softmax_with_len_l", "(", "inputs", ",", "length", ",", "max_len", ",", "padding", "=", "'right'", ")", ":", "\n", "    ", "assert", "len", "(", "inputs", ".", "shape", ")", "==", "2", "\n", "if", "padding", "==", "'left'", ":", "\n", "        ", "inputs", "=", "K", ".", "reverse", "(", "inputs", ",", "-", "1", ")", "\n", "\n", "", "inputs", "=", "tf", ".", "cast", "(", "inputs", ",", "tf", ".", "float32", ")", "\n", "max_axis", "=", "tf", ".", "reduce_max", "(", "inputs", ",", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "inputs", "=", "tf", ".", "exp", "(", "inputs", "-", "max_axis", ")", "\n", "length", "=", "tf", ".", "reshape", "(", "length", ",", "[", "-", "1", "]", ")", "\n", "mask", "=", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "tf", ".", "sequence_mask", "(", "length", ",", "max_len", ")", ",", "tf", ".", "float32", ")", ",", "tf", ".", "shape", "(", "inputs", ")", ")", "\n", "inputs", "*=", "mask", "\n", "_sum", "=", "tf", ".", "reduce_sum", "(", "inputs", ",", "reduction_indices", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "+", "1e-9", "\n", "ret", "=", "inputs", "/", "_sum", "\n", "\n", "if", "padding", "==", "'left'", ":", "\n", "        ", "ret", "=", "K", ".", "reverse", "(", "ret", ",", "-", "1", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_mean_with_len": [[49, 63], ["K.reverse", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reshape"], "function", ["None"], ["", "def", "reduce_mean_with_len", "(", "inputs", ",", "length", ",", "padding", "=", "'right'", ")", ":", "\n", "    ", "\"\"\"\n    :param inputs: 3-D tensor\n    :param length: the length of dim [1]\n    :return: 2-D tensor\n    \"\"\"", "\n", "\n", "if", "padding", "==", "'left'", ":", "\n", "        ", "inputs", "=", "K", ".", "reverse", "(", "inputs", ",", "1", ")", "\n", "\n", "", "length", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "length", ",", "[", "-", "1", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", "+", "1e-9", "\n", "inputs", "=", "tf", ".", "reduce_sum", "(", "inputs", ",", "1", ",", "keep_dims", "=", "False", ")", "/", "length", "\n", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention": [[66, 82], ["int", "Lambda", "Multiply", "Lambda", "len", "Lambda", "Lambda", "K.repeat_elements", "K.sum", "int", "K.sum", "tensorflow.divide"], "function", ["None"], ["", "def", "reduce_via_attention", "(", "inputs", ",", "att_vals", ",", "mean", "=", "True", ")", ":", "\n", "    ", "assert", "len", "(", "att_vals", ".", "shape", ")", "==", "3", "and", "att_vals", ".", "shape", "[", "-", "1", "]", "==", "1", "\n", "max_len", "=", "int", "(", "att_vals", ".", "shape", "[", "-", "1", "]", ")", "\n", "#     att_vals = Reshape(( max_len ,1 ) )( att_vals )", "\n", "att_vals", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "repeat_elements", "(", "x", ",", "int", "(", "inputs", ".", "shape", "[", "-", "1", "]", ")", ",", "-", "1", ")", ")", "(", "att_vals", ")", "\n", "\n", "att_mem_mul", "=", "Multiply", "(", ")", "(", "[", "att_vals", ",", "inputs", "]", ")", "\n", "attented_vec_sum_num", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "sum", "(", "x", ",", "1", ")", ")", "(", "att_mem_mul", ")", "\n", "\n", "if", "mean", ":", "\n", "        ", "sum_den", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "sum", "(", "x", ",", "1", ")", ")", "(", "att_vals", ")", "\n", "attented_vec", "=", "Lambda", "(", "lambda", "x", ":", "tf", ".", "divide", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", "+", "0.0000001", ")", ")", "(", "[", "attented_vec_sum_num", ",", "sum_den", "]", ")", "\n", "", "else", ":", "\n", "        ", "attented_vec", "=", "attented_vec_sum_num", "\n", "\n", "", "return", "attented_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.Sluice_ABSA.get_glove": [[29, 41], ["h5py.File", "np.array", "Embedding"], "methods", ["None"], ["rnn_enhi2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "stitch_layer", "=", "CrossStitch", "(", ")", "\n", "stitch_layer", ".", "supports_masking", "=", "True", "\n", "\n", "osel", "=", "OutPutSelector", "(", ")", "\n", "osel", ".", "supports_masking", "=", "True", "\n", "\n", "\n", "def", "desectOut", "(", "xx", ")", ":", "\n", "            ", "l", "=", "xx", ".", "shape", "[", "-", "1", "]", "\n", "return", "Lambda", "(", "lambda", "x", ":", "[", "x", "[", "...", ",", ":", "l", "/", "2", "]", ",", "x", "[", "...", ",", "l", "/", "2", ":", "]", "]", ")", "(", "xx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.Sluice_ABSA.get_document_level_rnn_weights": [[45, 73], ["Input", "Embedding", "sluice.Sluice_ABSA.glove_embed42", "GRU", "GRU", "sluice.Sluice_ABSA.rnn_left", "sluice.Sluice_ABSA.rnn_right", "Model", "Model.load_weights", "Lambda", "Lambda", "Concatenate", "GlobalAvgPool1D", "Dense", "Activation", "GRU.cell.get_weights", "GRU.cell.get_weights", "K.reverse", "K.reverse"], "methods", ["None"], ["x_hi", "=", "rnn_hi", "(", "x", ")", "\n", "\n", "# en ", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_en", "=", "rnn_en", "(", "x", ")", "\n", "\n", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_enhi", "=", "rnn_enhi", "(", "x", ")", "\n", "\n", "\n", "[", "x_hi1", ",", "x_hi2", "]", "=", "desectOut", "(", "x_hi", ")", "\n", "[", "x_en1", ",", "x_en2", "]", "=", "desectOut", "(", "x_en", ")", "\n", "[", "x_enhi1", ",", "x_enhi2", "]", "=", "desectOut", "(", "x_enhi", ")", "\n", "\n", "[", "x_hi1", ",", "x_en1", ",", "x_enhi1", ",", "x_hi2", ",", "x_en2", ",", "x_enhi2", "]", "=", "stitch_layer", "(", "[", "x_hi1", ",", "x_en1", ",", "x_enhi1", ",", "x_hi2", ",", "x_en2", ",", "x_enhi2", "]", ")", "\n", "\n", "x_hi", "=", "Concatenate", "(", ")", "(", "[", "x_hi1", ",", "x_hi2", "]", ")", "\n", "x_en", "=", "Concatenate", "(", ")", "(", "[", "x_en1", ",", "x_en2", "]", ")", "\n", "x_enhi", "=", "Concatenate", "(", ")", "(", "[", "x_enhi1", ",", "x_enhi2", "]", ")", "\n", "\n", "x_hi_p", "=", "x_hi", "\n", "x_en_p", "=", "x_en", "\n", "x_enhi_p", "=", "x_enhi", "\n", "\n", "x_hi", "=", "rnn_hi2", "(", "x_hi", ")", "\n", "x_en", "=", "rnn_en2", "(", "x_en", ")", "\n", "x_enhi", "=", "rnn_enhi2", "(", "x_enhi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.Sluice_ABSA.getAuxM": [[76, 95], ["Input", "sluice.Sluice_ABSA.cal_cs", "Lambda", "Lambda", "Concatenate", "GlobalAvgPool1D", "Dense", "Activation", "K.reverse", "K.reverse"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs"], ["[", "x_enhi1", ",", "x_enhi2", "]", "=", "desectOut", "(", "x_enhi", ")", "\n", "\n", "[", "x_hi1", ",", "x_en1", ",", "x_enhi1", ",", "x_hi2", ",", "x_en2", ",", "x_enhi2", "]", "=", "stitch_layer", "(", "[", "x_hi1", ",", "x_en1", ",", "x_enhi1", ",", "x_hi2", ",", "x_en2", ",", "x_enhi2", "]", ")", "\n", "\n", "x_hi", "=", "Concatenate", "(", ")", "(", "[", "x_hi1", ",", "x_hi2", "]", ")", "\n", "x_en", "=", "Concatenate", "(", ")", "(", "[", "x_en1", ",", "x_en2", "]", ")", "\n", "x_enhi", "=", "Concatenate", "(", ")", "(", "[", "x_enhi1", ",", "x_enhi2", "]", ")", "\n", "\n", "x_hi", "=", "osel", "(", "[", "x_hi", ",", "x_hi_p", "]", ")", "\n", "x_en", "=", "osel", "(", "[", "x_en", ",", "x_en_p", "]", ")", "\n", "x_enhi", "=", "osel", "(", "[", "x_enhi", ",", "x_enhi_p", "]", ")", "\n", "\n", "\n", "return", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "\n", "\n", "\n", "\n", "# hi", "\n", "", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "# en ", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.Sluice_ABSA.getPrimM": [[98, 166], ["Input", "Input", "Input", "sluice.Sluice_ABSA.cal_cs", "Input", "Input", "Input", "sluice.Sluice_ABSA.glove_embed42", "att_functions.reduce_via_attention", "att_functions.reduce_via_attention", "att_functions.reduce_via_attention", "att_functions.reduce_via_attention", "Dropout", "Bidirectional", "Lambda", "TimeDistributed", "TimeDistributed", "Reshape", "Lambda", "Reshape", "Reshape", "Lambda", "Reshape", "Concatenate", "Concatenate", "Dense", "Dense", "GRU", "Dense", "Dense", "att_functions.reduce_mean_with_len", "att_functions.sigmoid_with_len_l", "att_functions.sigmoid_with_len_l", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_with_len", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.sigmoid_with_len_l", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.sigmoid_with_len_l"], ["inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "\n", "[", "x_hi", ",", "_", ",", "_", "]", "=", "cal_cs", "(", "inp_hi", ")", "\n", "[", "_", ",", "x_en", ",", "_", "]", "=", "cal_cs", "(", "inp_en", ")", "\n", "[", "_", ",", "_", ",", "x_enhi", "]", "=", "cal_cs", "(", "inp_enhi", ")", "\n", "\n", "\n", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_enhi", ")", "\n", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_hi", ")", "\n", "\n", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_en", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_hi", ",", "inp_en", ",", "inp_enhi", "]", ",", "[", "out_hi", ",", "out_en", ",", "out_enhi", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "# jjj", "\n", "", "", "\"\"\"\nconfig = {}\nconfig['epochs'] = 4\nconfig['dataset'] = \"/tmp/postag_prepped.h5\"\n\nconfig['exp_name'] = 'pos_girnet_1l'\nconfig['embed_dim'] = 50\nconfig['vocab_size'] = 30003\nconfig['nHidden'] = 100\nconfig['sent_len'] = 150\nconfig['n_class_en'] = 45\nconfig['n_class_hi'] = 25\nconfig['n_class_enhi'] = 19\n\nmodel = Sluice_SeqLab( exp_location=\"./ttt\" , config_args = config )\nmodel.train()\n\n\n\"\"\"", "", ""]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.Sluice_ABSA.cal_cs": [[173, 211], ["sluice.Sluice_ABSA.glove_embed42", "sluice.Sluice_ABSA.glove_embed42", "sluice.Sluice_ABSA.rnn_left_2", "sluice.Sluice_ABSA.rnn_right_2", "sluice.Sluice_ABSA.rnn_left_", "sluice.Sluice_ABSA.rnn_right_", "sluice.Sluice_ABSA.stich_n_disect", "sluice.Sluice_ABSA.stich_n_disect", "sluice.Sluice_ABSA._rnn_left_2", "sluice.Sluice_ABSA._rnn_right_2", "sluice.Sluice_ABSA._rnn_left_", "sluice.Sluice_ABSA._rnn_right_", "sluice.Sluice_ABSA.stich_n_disect", "sluice.Sluice_ABSA.stich_n_disect", "sluice.Sluice_ABSA.osel", "sluice.Sluice_ABSA.osel", "sluice.Sluice_ABSA.osel", "sluice.Sluice_ABSA.osel"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.Sluice_ABSA.stich_n_disect", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.Sluice_ABSA.stich_n_disect", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.Sluice_ABSA.stich_n_disect", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.Sluice_ABSA.stich_n_disect"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.Sluice_ABSA.stich_n_disect": [[215, 224], ["sluice.desectOut", "sluice.desectOut", "sluice.Sluice_ABSA.stitch_layer", "Concatenate", "Concatenate"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.desectOut", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.desectOut"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.Sluice_ABSA.build_model": [[228, 259], ["sluice.Sluice_ABSA.get_glove", "GRU", "GRU", "GRU", "GRU", "GRU", "GRU", "GRU", "GRU", "SluiceUtils.CrossStitch", "SluiceUtils.OutPutSelector", "sluice.Sluice_ABSA.getAuxM", "sluice.Sluice_ABSA.getPrimM", "Model", "Utils.Trainer.build_model"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.get_glove", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getAuxM", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getPrimM", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sluice.desectOut": [[16, 19], ["Lambda"], "function", ["None"], ["\n", "\n", "\n", "    ", "def", "build_model", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.SluiceUtils.OutSelctorInitBiases.__call__": [[16, 23], ["tensorflow.convert_to_tensor.astype", "tensorflow.convert_to_tensor", "len", "np.zeros"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "shape", ")", "==", "1", "\n", "m", "=", "0.05", "+", "np", ".", "zeros", "(", "shape", ")", "\n", "m", "[", "-", "1", "]", "=", "0.95", "\n", "m", "=", "m", ".", "astype", "(", "np", ".", "float32", ")", "\n", "m", "=", "tf", ".", "convert_to_tensor", "(", "m", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.SluiceUtils.OutPutSelector.__init__": [[28, 30], ["Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OutPutSelector", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.SluiceUtils.OutPutSelector.build": [[31, 44], ["len", "SluiceUtils.OutPutSelector.add_weight", "super().build", "type", "SluiceUtils.OutSelctorInitBiases"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "type", "(", "input_shape", ")", "is", "list", "# we need a list of inputs ", "\n", "for", "ish", "in", "input_shape", ":", "\n", "            ", "assert", "ish", "==", "input_shape", "[", "0", "]", "\n", "\n", "", "self", ".", "n_inputs", "=", "len", "(", "input_shape", ")", "\n", "\n", "self", ".", "betas", "=", "self", ".", "add_weight", "(", "name", "=", "'betas'", ",", "\n", "shape", "=", "(", "self", ".", "n_inputs", ",", ")", ",", "\n", "initializer", "=", "OutSelctorInitBiases", "(", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "super", "(", "OutPutSelector", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this somewhere!", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.SluiceUtils.OutPutSelector.call": [[45, 52], ["range"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inp", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "self", ".", "n_inputs", ")", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "out_i", "=", "inp", "[", "j", "]", "*", "self", ".", "betas", "[", "j", "]", "\n", "", "else", ":", "\n", "                ", "out_i", "+=", "inp", "[", "j", "]", "*", "self", ".", "betas", "[", "j", "]", "\n", "", "", "return", "out_i", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.SluiceUtils.OutPutSelector.compute_output_shape": [[54, 56], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.SluiceUtils.CrossSelectInitBiased.__call__": [[64, 70], ["tensorflow.convert_to_tensor.astype", "tensorflow.convert_to_tensor", "len", "np.identity", "np.identity"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "shape", ")", "==", "2", "\n", "m", "=", "0.05", "*", "(", "1", "-", "np", ".", "identity", "(", "shape", "[", "0", "]", ")", ")", "+", "0.95", "*", "np", ".", "identity", "(", "shape", "[", "0", "]", ")", "\n", "m", "=", "m", ".", "astype", "(", "np", ".", "float32", ")", "\n", "m", "=", "tf", ".", "convert_to_tensor", "(", "m", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.SluiceUtils.CrossStitch.__init__": [[75, 77], ["Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CrossStitch", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.SluiceUtils.CrossStitch.build": [[78, 91], ["len", "SluiceUtils.CrossStitch.add_weight", "super().build", "type", "SluiceUtils.CrossSelectInitBiased"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "type", "(", "input_shape", ")", "is", "list", "# we need a list of inputs ", "\n", "for", "ish", "in", "input_shape", ":", "\n", "            ", "assert", "ish", "==", "input_shape", "[", "0", "]", "\n", "\n", "", "self", ".", "n_inputs", "=", "len", "(", "input_shape", ")", "\n", "\n", "self", ".", "alphas", "=", "self", ".", "add_weight", "(", "name", "=", "'alphas'", ",", "\n", "shape", "=", "(", "self", ".", "n_inputs", ",", "self", ".", "n_inputs", ")", ",", "\n", "initializer", "=", "CrossSelectInitBiased", "(", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "super", "(", "CrossStitch", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this somewhere!", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.SluiceUtils.CrossStitch.call": [[92, 102], ["range", "range", "outs.append"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inp", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_inputs", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "n_inputs", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "out_i", "=", "inp", "[", "j", "]", "*", "self", ".", "alphas", "[", "i", ",", "j", "]", "\n", "", "else", ":", "\n", "                    ", "out_i", "+=", "inp", "[", "j", "]", "*", "self", ".", "alphas", "[", "i", ",", "j", "]", "\n", "", "", "outs", ".", "append", "(", "out_i", ")", "\n", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.SluiceUtils.CrossStitch.compute_output_shape": [[103, 105], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "", "", ""]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.xstitch.CrossStitch_ABSA.get_glove": [[20, 32], ["h5py.File", "np.array", "Embedding"], "methods", ["None"], ["\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "rnn_hi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_en", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "rnn_hi2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_en2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.xstitch.CrossStitch_ABSA.get_document_level_rnn_weights": [[36, 64], ["Input", "Embedding", "xstitch.CrossStitch_ABSA.glove_embed42", "GRU", "GRU", "xstitch.CrossStitch_ABSA.rnn_left", "xstitch.CrossStitch_ABSA.rnn_right", "Model", "Model.load_weights", "Lambda", "Lambda", "Concatenate", "GlobalAvgPool1D", "Dense", "Activation", "GRU.cell.get_weights", "GRU.cell.get_weights", "K.reverse", "K.reverse"], "methods", ["None"], ["if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "stitch_layer2", "=", "CrossStitch", "(", ")", "\n", "stitch_layer2", ".", "supports_masking", "=", "True", "\n", "\n", "\n", "\n", "", "def", "cal_cs_1l", "(", "inp", ")", ":", "\n", "            ", "x", "=", "embed", "(", "inp", ")", "\n", "x_hi", "=", "rnn_hi", "(", "x", ")", "\n", "\n", "# en ", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_en", "=", "rnn_en", "(", "x", ")", "\n", "\n", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_enhi", "=", "rnn_enhi", "(", "x", ")", "\n", "\n", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "=", "stitch_layer", "(", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", ")", "\n", "\n", "return", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "\n", "\n", "\n", "", "def", "cal_cs_2l", "(", "inp", ")", ":", "\n", "            ", "x", "=", "embed", "(", "inp", ")", "\n", "x_hi", "=", "rnn_hi", "(", "x", ")", "\n", "\n", "# en ", "\n", "x", "=", "embed", "(", "inp", ")", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.xstitch.CrossStitch_ABSA.getAuxM": [[66, 83], ["Input", "xstitch.CrossStitch_ABSA.cal_cs", "Lambda", "Lambda", "Concatenate", "GlobalAvgPool1D", "Dense", "Activation", "K.reverse", "K.reverse"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs"], ["\n", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_enhi", "=", "rnn_enhi", "(", "x", ")", "\n", "\n", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "=", "stitch_layer", "(", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", ")", "\n", "\n", "\n", "x_hi", "=", "rnn_hi2", "(", "x_hi", ")", "\n", "x_en", "=", "rnn_en2", "(", "x_en", ")", "\n", "x_enhi", "=", "rnn_enhi2", "(", "x_enhi", ")", "\n", "\n", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "=", "stitch_layer2", "(", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", ")", "\n", "\n", "return", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "\n", "\n", "\n", "", "if", "config", "[", "'n_layers'", "]", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.xstitch.CrossStitch_ABSA.getPrimM": [[85, 151], ["Input", "Input", "Input", "xstitch.CrossStitch_ABSA.cal_cs", "Input", "Input", "Input", "xstitch.CrossStitch_ABSA.glove_embed42", "att_functions.reduce_via_attention", "att_functions.reduce_via_attention", "att_functions.reduce_via_attention", "att_functions.reduce_via_attention", "Dropout", "Bidirectional", "Lambda", "TimeDistributed", "TimeDistributed", "Reshape", "Lambda", "Reshape", "Reshape", "Lambda", "Reshape", "Concatenate", "Concatenate", "Dense", "Dense", "GRU", "Dense", "Dense", "att_functions.reduce_mean_with_len", "att_functions.sigmoid_with_len_l", "att_functions.sigmoid_with_len_l", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_with_len", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.sigmoid_with_len_l", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.sigmoid_with_len_l"], ["", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "cal_cs", "=", "cal_cs_2l", "\n", "\n", "\n", "\n", "# hi", "\n", "", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "# en ", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "\n", "[", "x_hi", ",", "_", ",", "_", "]", "=", "cal_cs", "(", "inp_hi", ")", "\n", "[", "_", ",", "x_en", ",", "_", "]", "=", "cal_cs", "(", "inp_en", ")", "\n", "[", "_", ",", "_", ",", "x_enhi", "]", "=", "cal_cs", "(", "inp_enhi", ")", "\n", "\n", "\n", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_enhi", ")", "\n", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_hi", ")", "\n", "\n", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_en", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_hi", ",", "inp_en", ",", "inp_enhi", "]", ",", "[", "out_hi", ",", "out_en", ",", "out_enhi", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "# jjj", "\n", "", "", "\"\"\"\nconfig = {}\nconfig['epochs'] = 4\nconfig['dataset'] = \"/tmp/postag_prepped.h5\"\n\nconfig['exp_name'] = 'pos_girnet_1l'\nconfig['embed_dim'] = 50\nconfig['vocab_size'] = 30003\nconfig['nHidden'] = 100\nconfig['sent_len'] = 150\nconfig['n_class_en'] = 45\nconfig['n_class_hi'] = 25\nconfig['n_class_enhi'] = 19\nconfig['n_layers'] = 1 # 1 or 2 \n\n\nmodel = CrossStitch_SeqLab( exp_location=\"./ttt\" , config_args = config )\nmodel.train()\n\n\n\"\"\"", "", ""]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.xstitch.CrossStitch_ABSA.cal_cs": [[156, 188], ["xstitch.CrossStitch_ABSA.glove_embed42", "xstitch.CrossStitch_ABSA.glove_embed42", "xstitch.CrossStitch_ABSA.rnn_left_2", "xstitch.CrossStitch_ABSA.rnn_right_2", "xstitch.CrossStitch_ABSA.rnn_left_", "xstitch.CrossStitch_ABSA.rnn_right_", "xstitch.CrossStitch_ABSA.stitch_layer", "xstitch.CrossStitch_ABSA.stitch_layer", "xstitch.CrossStitch_ABSA._rnn_left_2", "xstitch.CrossStitch_ABSA._rnn_right_2", "xstitch.CrossStitch_ABSA._rnn_left_", "xstitch.CrossStitch_ABSA._rnn_right_", "xstitch.CrossStitch_ABSA.stitch_layer2", "xstitch.CrossStitch_ABSA.stitch_layer2"], "methods", ["None"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.xstitch.CrossStitch_ABSA.build_model": [[191, 222], ["xstitch.CrossStitch_ABSA.get_glove", "GRU", "GRU", "GRU", "GRU", "SluiceUtils.CrossStitch", "xstitch.CrossStitch_ABSA.getAuxM", "xstitch.CrossStitch_ABSA.getPrimM", "Model", "Utils.Trainer.build_model", "print", "GRU", "GRU", "GRU", "GRU", "SluiceUtils.CrossStitch"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.get_glove", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getAuxM", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getPrimM", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.hardshare.HardShare_ABSA.get_glove": [[20, 29], ["h5py.File", "numpy.array", "att_functions.Embedding"], "methods", ["None"], ["        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "rnn", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "rnn2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "# hi", "\n", "\n", "", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.hardshare.HardShare_ABSA.get_document_level_rnn_weights": [[30, 58], ["att_functions.Input", "att_functions.Embedding", "hardshare.HardShare_ABSA.glove_embed42", "att_functions.GRU", "att_functions.GRU", "hardshare.HardShare_ABSA.rnn_left", "hardshare.HardShare_ABSA.rnn_right", "att_functions.Model", "att_functions.Model.load_weights", "att_functions.Lambda", "att_functions.Lambda", "att_functions.Concatenate", "att_functions.GlobalAvgPool1D", "att_functions.Dense", "att_functions.Activation", "att_functions.GRU.cell.get_weights", "att_functions.GRU.cell.get_weights", "keras.reverse", "keras.reverse"], "methods", ["None"], ["x", "=", "embed", "(", "inp_hi", ")", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "x", "=", "rnn2", "(", "rnn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "rnn", "(", "x", ")", "\n", "", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "# en", "\n", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_en", ")", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "x", "=", "rnn2", "(", "rnn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "rnn", "(", "x", ")", "\n", "", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_enhi", ")", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "x", "=", "rnn2", "(", "rnn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "rnn", "(", "x", ")", "\n", "", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.hardshare.HardShare_ABSA.getAuxM": [[60, 85], ["att_functions.Input", "hardshare.HardShare_ABSA.glove_embed42", "hardshare.HardShare_ABSA.glove_embed42", "att_functions.Lambda", "hardshare.HardShare_ABSA.rnn_left_2", "hardshare.HardShare_ABSA.rnn_right_2", "hardshare.HardShare_ABSA.rnn_left_", "hardshare.HardShare_ABSA.rnn_right_", "att_functions.Lambda", "att_functions.Concatenate", "att_functions.GlobalAvgPool1D", "att_functions.Dense", "att_functions.Activation", "hardshare.HardShare_ABSA.rnn_left_", "hardshare.HardShare_ABSA.rnn_right_", "keras.reverse", "keras.reverse"], "methods", ["None"], ["Trainer", ".", "build_model", "(", "self", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "# jjj", "\n", "", ""]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.hardshare.HardShare_ABSA.getPrimM": [[87, 118], ["att_functions.Input", "att_functions.Input", "att_functions.Input", "att_functions.Input", "att_functions.Input", "att_functions.Input", "hardshare.HardShare_ABSA.glove_embed42", "hardshare.HardShare_ABSA.rnn_left_", "hardshare.HardShare_ABSA.rnn_right_", "hardshare.HardShare_ABSA.rnn_left_2", "hardshare.HardShare_ABSA.rnn_right_2", "att_functions.Dropout", "att_functions.Bidirectional", "att_functions.Lambda", "att_functions.Lambda", "att_functions.Concatenate", "att_functions.Concatenate", "hardshare.HardShare_ABSA.glove_embed42", "hardshare.HardShare_ABSA.glove_embed42", "hardshare.HardShare_ABSA.rnn_left_", "hardshare.HardShare_ABSA.rnn_right_", "att_functions.GRU", "hardshare.HardShare_ABSA.glove_embed42", "hardshare.HardShare_ABSA.glove_embed42", "att_functions.reduce_mean_with_len", "att_functions.reduce_mean_with_len", "att_functions.Dense", "att_functions.Dense"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_with_len", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_with_len"], ["", ""]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.hardshare.HardShare_ABSA.build_model": [[119, 132], ["hardshare.HardShare_ABSA.get_glove", "att_functions.GRU", "att_functions.GRU", "hardshare.HardShare_ABSA.getAuxM", "hardshare.HardShare_ABSA.getPrimM", "att_functions.Model", "Utils.Trainer.build_model", "att_functions.GRU", "att_functions.GRU"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.get_glove", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getAuxM", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getPrimM", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.SkipStepCell.__init__": [[64, 68], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.__init__"], ["\n", "    ", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.SkipStepCell.build": [[69, 82], ["girnet.SkipStepCell.cell_1.build"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.build"], ["\n", "rnn_hi", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", "\n", "rnn_en", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", "\n", "\n", "# en", "\n", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_en", ")", "\n", "x", "=", "rnn_en", "(", "x", ")", "\n", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "# hi", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.SkipStepCell.call": [[83, 95], ["K.repeat_elements", "girnet.SkipStepCell.cell_1.call"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.call"], ["inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_hi", ")", "\n", "x", "=", "rnn_hi", "(", "x", ")", "\n", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "cell_combined", "=", "GiretTwoCell", "(", "rnn_hi", ".", "cell", ",", "rnn_en", ".", "cell", ",", "self", ".", "config", "[", "'nHidden'", "]", ")", "\n", "\n", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_enhi", ")", "\n", "\n", "x_att", "=", "x", "\n", "x_att", "=", "Bidirectional", "(", "LSTM", "(", "32", ",", "return_sequences", "=", "True", ")", ")", "(", "x", ")", "\n", "bider_h", "=", "x_att", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.GIRNet_ABSA.get_glove": [[105, 117], ["h5py.File", "np.array", "Embedding"], "methods", ["None"], ["Trainer", ".", "build_model", "(", "self", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "# jjj", "\n", "", ""]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.GIRNet_ABSA.get_document_level_rnn_weights": [[121, 149], ["Input", "Embedding", "girnet.GIRNet_ABSA.glove_embed42", "GRU", "GRU", "GRU.", "GRU.", "Model", "Model.load_weights", "Lambda", "Lambda", "Concatenate", "GlobalAvgPool1D", "Dense", "Activation", "GRU.cell.get_weights", "GRU.cell.get_weights", "K.reverse", "K.reverse"], "methods", ["None"], ["", ""]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.GIRNet_ABSA.getAuxM": [[151, 179], ["Input", "Embedding", "girnet.GIRNet_ABSA.glove_embed42", "RNN", "RNN", "RNN.", "RNN.", "girnet.GIRNet_ABSA.rnn_left_aux_cell__.set_weights", "girnet.GIRNet_ABSA.rnn_right_aux_cell__.set_weights", "Lambda", "Lambda", "Concatenate", "GlobalAvgPool1D", "Dense", "Activation", "K.reverse", "K.reverse"], "methods", ["None"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.GIRNet_ABSA.getPrimM": [[183, 263], ["Input", "Input", "Input", "Input", "Input", "Input", "girnet.GIRNet_ABSA.glove_embed42", "girnet.GIRNet_ABSA.glove_embed42", "girnet.GIRNet_ABSA.glove_embed42", "girnet.SkipStepCell", "girnet.SkipStepCell", "RNN", "RNN", "girnet.reduce_mean_weighted", "girnet.reduce_mean_weighted", "RNN.", "RNN.", "girnet.reduce_mean_weighted", "girnet.reduce_mean_weighted", "SkipStepCell.set_weights", "SkipStepCell.set_weights", "Dropout", "Dropout", "Dropout", "Bidirectional", "Bidirectional", "Bidirectional", "Lambda", "TimeDistributed", "TimeDistributed", "Reshape", "Lambda", "Reshape", "Reshape", "Lambda", "Reshape", "Concatenate", "Concatenate", "Concatenate", "Concatenate", "Dense", "Dense", "GRU", "GRU", "GRU", "Dense", "Dense", "att_functions.reduce_mean_with_len", "att_functions.sigmoid_with_len_l", "att_functions.sigmoid_with_len_l", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_weighted", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_weighted", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_weighted", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_weighted", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_with_len", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.sigmoid_with_len_l", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.sigmoid_with_len_l"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.GIRNet_ABSA.build_model": [[266, 280], ["girnet.GIRNet_ABSA.get_glove", "girnet.GIRNet_ABSA.get_document_level_rnn_weights", "GRUCell", "GRUCell", "girnet.GIRNet_ABSA.getAuxM", "girnet.GIRNet_ABSA.getPrimM", "Model", "Utils.Trainer.build_model"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.get_glove", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.get_document_level_rnn_weights", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getAuxM", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getPrimM", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.sigmoid_with_len_l": [[12, 28], ["tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.sigmoid", "len", "K.reverse", "tensorflow.cast", "tensorflow.shape", "K.reverse", "tensorflow.sequence_mask"], "function", ["None"], ["class", "GiretTwoCell", "(", "keras", ".", "layers", ".", "Layer", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "cell_1", ",", "cell_2", ",", "nHidden", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "cell_1", "=", "cell_1", "\n", "self", ".", "cell_2", "=", "cell_2", "\n", "self", ".", "nHidden", "=", "nHidden", "\n", "self", ".", "state_size", "=", "[", "nHidden", ",", "nHidden", "]", "\n", "super", "(", "GiretTwoCell", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "        ", "nHidden", "=", "self", ".", "nHidden", "\n", "\n", "input_shape_n", "=", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", "-", "2", ")", "\n", "#         print \"pp\", input_shape_n", "\n", "\n", "#         self.cell_1.build(input_shape_n)", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_with_len": [[30, 40], ["K.reverse", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reshape"], "function", ["None"], ["\n", "self", ".", "_trainable_weights", "+=", "(", "self", ".", "cell_1", ".", "trainable_weights", ")", "\n", "self", ".", "_trainable_weights", "+=", "(", "self", ".", "cell_2", ".", "trainable_weights", ")", "\n", "\n", "self", ".", "_non_trainable_weights", "+=", "(", "self", ".", "cell_1", ".", "non_trainable_weights", ")", "\n", "self", ".", "_non_trainable_weights", "+=", "(", "self", ".", "cell_2", ".", "non_trainable_weights", ")", "\n", "\n", "self", ".", "built", "=", "True", "\n", "\n", "", "def", "call", "(", "self", ",", "inputs", ",", "states", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_weighted": [[43, 58], ["int", "Lambda", "Multiply", "Lambda", "len", "Lambda", "Lambda", "K.repeat_elements", "K.sum", "int", "K.sum", "tensorflow.divide"], "function", ["None"], ["gate_val_1", "=", "inputs", "[", ":", ",", "0", ":", "1", "]", "\n", "gate_val_2", "=", "inputs", "[", ":", ",", "1", ":", "2", "]", "\n", "\n", "inputs", "=", "inputs", "[", ":", ",", "2", ":", "]", "\n", "\n", "gate_val_1", "=", "K", ".", "repeat_elements", "(", "gate_val_1", ",", "nHidden", ",", "-", "1", ")", "# shape # bs , hidden", "\n", "gate_val_2", "=", "K", ".", "repeat_elements", "(", "gate_val_2", ",", "nHidden", ",", "-", "1", ")", "# shape # bs , hidden", "\n", "\n", "_", ",", "[", "h1", ",", "c1", "]", "=", "self", ".", "cell_1", ".", "call", "(", "inputs", ",", "states", ")", "\n", "_", ",", "[", "h2", ",", "c2", "]", "=", "self", ".", "cell_2", ".", "call", "(", "inputs", ",", "states", ")", "\n", "\n", "h", "=", "gate_val_1", "*", "h1", "+", "gate_val_2", "*", "h2", "+", "(", "1", "-", "gate_val_1", "-", "gate_val_2", ")", "*", "states", "[", "0", "]", "\n", "c", "=", "gate_val_1", "*", "c1", "+", "gate_val_2", "*", "c2", "+", "(", "1", "-", "gate_val_1", "-", "gate_val_2", ")", "*", "states", "[", "1", "]", "\n", "\n", "return", "h", ",", "[", "h", ",", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.lowsupshare.LowSupShare_ABSA.get_glove": [[18, 30], ["h5py.File", "np.array", "Embedding"], "methods", ["None"], ["def", "get_glove", "(", "self", ")", ":", "\n", "\n", "        ", "import", "h5py", "\n", "gf", "=", "h5py", ".", "File", "(", "glove_path", ")", "\n", "gloveVecs_42", "=", "np", ".", "array", "(", "gf", "[", "'glove_common_42_vecs'", "]", ")", "\n", "gloveSize", "=", "gloveVecs_42", ".", "shape", "[", "-", "1", "]", "\n", "vocabSize", "=", "gloveVecs_42", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "gloveSize", "=", "gloveSize", "\n", "self", ".", "vocabSize", "=", "vocabSize", "\n", "\n", "self", ".", "glove_embed42", "=", "(", "Embedding", "(", "vocabSize", ",", "gloveSize", ",", "weights", "=", "[", "gloveVecs_42", "]", ",", "trainable", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.lowsupshare.LowSupShare_ABSA.get_document_level_rnn_weights": [[34, 62], ["Input", "Embedding", "lowsupshare.LowSupShare_ABSA.glove_embed42", "GRU", "GRU", "lowsupshare.LowSupShare_ABSA.rnn_left", "lowsupshare.LowSupShare_ABSA.rnn_right", "Model", "Model.load_weights", "Lambda", "Lambda", "Concatenate", "GlobalAvgPool1D", "Dense", "Activation", "GRU.cell.get_weights", "GRU.cell.get_weights", "K.reverse", "K.reverse"], "methods", ["None"], ["", "def", "get_document_level_rnn_weights", "(", "self", ")", ":", "\n", "\n", "        ", "inp", "=", "Input", "(", "(", "self", ".", "config", "[", "'maxSentenceL'", "]", ",", ")", ")", "# left", "\n", "inp_x", "=", "inp", "\n", "\n", "embed", "=", "(", "Embedding", "(", "self", ".", "vocabSize", ",", "self", ".", "gloveSize", ",", "trainable", "=", "False", ")", ")", "\n", "\n", "inp_x", "=", "self", ".", "glove_embed42", "(", "inp_x", ")", "\n", "\n", "inp_rev", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "reverse", "(", "x", ",", "axes", "=", "1", ")", ")", "(", "inp_x", ")", "# right", "\n", "\n", "rnn_left", "=", "GRU", "(", "64", ",", "return_sequences", "=", "True", ",", "dropout", "=", "self", ".", "config", "[", "'dropout'", "]", ",", "recurrent_dropout", "=", "self", ".", "config", "[", "'recurrent_dropout'", "]", ")", "\n", "rnn_right", "=", "GRU", "(", "64", ",", "return_sequences", "=", "True", ",", "dropout", "=", "self", ".", "config", "[", "'dropout'", "]", ",", "recurrent_dropout", "=", "self", ".", "config", "[", "'recurrent_dropout'", "]", ")", "\n", "\n", "left_x", "=", "self", ".", "rnn_left", "(", "inp_x", ")", "\n", "right_x", "=", "self", ".", "rnn_right", "(", "inp_rev", ")", "\n", "right_x", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "reverse", "(", "x", ",", "axes", "=", "1", ")", ")", "(", "right_x", ")", "\n", "\n", "c_x", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "left_x", ",", "right_x", "]", ")", "\n", "\n", "c_x", "=", "GlobalAvgPool1D", "(", ")", "(", "c_x", ")", "\n", "x", "=", "Dense", "(", "3", ")", "(", "c_x", ")", "\n", "out", "=", "Activation", "(", "'softmax'", ")", "(", "x", ")", "\n", "\n", "m", "=", "Model", "(", "inp", ",", "out", ")", "\n", "m", ".", "load_weights", "(", "\"./data/lr_lstm_glove_3.5_42B_ep1.h5\"", ")", "\n", "\n", "return", "rnn_left", ".", "cell", ".", "get_weights", "(", ")", ",", "rnn_right", ".", "cell", ".", "get_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.lowsupshare.LowSupShare_ABSA.getAuxM": [[64, 81], ["Input", "lowsupshare.LowSupShare_ABSA.cal_cs", "Lambda", "Lambda", "Concatenate", "GlobalAvgPool1D", "Dense", "Activation", "K.reverse", "K.reverse"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs"], ["", "def", "getAuxM", "(", "self", ")", ":", "\n", "\n", "        ", "inp", "=", "Input", "(", "(", "self", ".", "config", "[", "'maxSentenceL'", "]", ",", ")", ")", "# left", "\n", "\n", "\n", "inp_rev", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "reverse", "(", "x", ",", "axes", "=", "1", ")", ")", "(", "inp", ")", "# right", "\n", "\n", "[", "left_x_1", ",", "right_x_1", ",", "left_x_2", ",", "right_x_2", "]", "=", "self", ".", "cal_cs", "(", "inp", ",", "inp_rev", ")", "\n", "right_x_1", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "reverse", "(", "x", ",", "axes", "=", "1", ")", ")", "(", "right_x_1", ")", "\n", "\n", "c_x", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "left_x_1", ",", "right_x_1", "]", ")", "\n", "\n", "c_x", "=", "GlobalAvgPool1D", "(", ")", "(", "c_x", ")", "\n", "x", "=", "Dense", "(", "3", ")", "(", "c_x", ")", "\n", "out", "=", "Activation", "(", "'softmax'", ")", "(", "x", ")", "\n", "\n", "return", "[", "inp", "]", ",", "[", "out", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.lowsupshare.LowSupShare_ABSA.getPrimM": [[83, 149], ["Input", "Input", "Input", "lowsupshare.LowSupShare_ABSA.cal_cs", "Input", "Input", "Input", "lowsupshare.LowSupShare_ABSA.glove_embed42", "att_functions.reduce_via_attention", "att_functions.reduce_via_attention", "att_functions.reduce_via_attention", "att_functions.reduce_via_attention", "Dropout", "Bidirectional", "Lambda", "TimeDistributed", "TimeDistributed", "Reshape", "Lambda", "Reshape", "Reshape", "Lambda", "Reshape", "Concatenate", "Concatenate", "Dense", "Dense", "GRU", "Dense", "Dense", "att_functions.reduce_mean_with_len", "att_functions.sigmoid_with_len_l", "att_functions.sigmoid_with_len_l", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_with_len", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.sigmoid_with_len_l", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.sigmoid_with_len_l"], ["", "def", "getPrimM", "(", "self", ")", ":", "\n", "\n", "        ", "left_i", "=", "Input", "(", "(", "self", ".", "config", "[", "'maxSentenceL'", "]", ",", ")", ")", "\n", "right_i", "=", "Input", "(", "(", "self", ".", "config", "[", "'maxSentenceL'", "]", ",", ")", ")", "\n", "tar_i", "=", "Input", "(", "(", "self", ".", "config", "[", "'maxTarLen'", "]", ",", ")", ")", "\n", "\n", "\n", "[", "left_x_1", ",", "right_x_1", ",", "left_x_2", ",", "right_x_2", "]", "=", "self", ".", "cal_cs", "(", "left_i", ",", "right_i", ")", "\n", "\n", "sent_len_l", "=", "Input", "(", "(", "1", ",", ")", ")", "\n", "sent_len_r", "=", "Input", "(", "(", "1", ",", ")", ")", "\n", "sent_len_t", "=", "Input", "(", "(", "1", ",", ")", ")", "\n", "\n", "\n", "tar_x", "=", "self", ".", "glove_embed42", "(", "tar_i", ")", "\n", "tar_x", "=", "Dropout", "(", "0.5", ")", "(", "tar_x", ")", "\n", "\n", "\n", "\n", "hidden_l", "=", "left_x_2", "\n", "hidden_r", "=", "right_x_2", "\n", "hidden_t", "=", "Bidirectional", "(", "GRU", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "(", "tar_x", ")", "\n", "\n", "\n", "pool_t", "=", "Lambda", "(", "lambda", "x", ":", "reduce_mean_with_len", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "padding", "=", "'right'", ")", ")", "(", "[", "hidden_t", ",", "sent_len_t", "]", ")", "\n", "\n", "\n", "skip_cell_weights_left", "=", "TimeDistributed", "(", "Dense", "(", "1", "\n", ",", "bias_initializer", "=", "keras", ".", "initializers", ".", "RandomUniform", "(", "minval", "=", "-", "0.1", ",", "maxval", "=", "0.1", ",", "seed", "=", "None", ")", "\n", ",", "kernel_initializer", "=", "keras", ".", "initializers", ".", "RandomUniform", "(", "minval", "=", "-", "0.1", ",", "maxval", "=", "0.1", ",", "seed", "=", "None", ")", "\n", ",", "use_bias", "=", "True", ")", ")", "(", "hidden_l", ")", "\n", "\n", "skip_cell_weights_right", "=", "TimeDistributed", "(", "Dense", "(", "1", "\n", ",", "bias_initializer", "=", "keras", ".", "initializers", ".", "RandomUniform", "(", "minval", "=", "-", "0.1", ",", "maxval", "=", "0.1", ",", "seed", "=", "None", ")", "\n", ",", "kernel_initializer", "=", "keras", ".", "initializers", ".", "RandomUniform", "(", "minval", "=", "-", "0.1", ",", "maxval", "=", "0.1", ",", "seed", "=", "None", ")", "\n", ",", "use_bias", "=", "True", ")", ")", "(", "hidden_r", ")", "\n", "\n", "\n", "skip_cell_weights_left", "=", "Reshape", "(", "(", "self", ".", "config", "[", "'maxSentenceL'", "]", ",", ")", ")", "(", "skip_cell_weights_left", ")", "\n", "skip_cell_weights_left", "=", "Lambda", "(", "lambda", "x", ":", "sigmoid_with_len_l", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "self", ".", "config", "[", "'maxSentenceL'", "]", ",", "padding", "=", "'right'", ")", ")", "(", "[", "skip_cell_weights_left", ",", "sent_len_l", "]", ")", "\n", "skip_cell_weights_left", "=", "Reshape", "(", "(", "self", ".", "config", "[", "'maxSentenceL'", "]", ",", "1", ")", ")", "(", "skip_cell_weights_left", ")", "\n", "\n", "skip_cell_weights_right", "=", "Reshape", "(", "(", "self", ".", "config", "[", "'maxSentenceL'", "]", ",", ")", ")", "(", "skip_cell_weights_right", ")", "\n", "skip_cell_weights_right", "=", "Lambda", "(", "lambda", "x", ":", "sigmoid_with_len_l", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "self", ".", "config", "[", "'maxSentenceL'", "]", ",", "padding", "=", "'right'", ")", ")", "(", "[", "skip_cell_weights_right", ",", "sent_len_r", "]", ")", "\n", "skip_cell_weights_right", "=", "Reshape", "(", "(", "self", ".", "config", "[", "'maxSentenceL'", "]", ",", "1", ")", ")", "(", "skip_cell_weights_right", ")", "\n", "\n", "pool_right_prim", "=", "reduce_via_attention", "(", "hidden_r", ",", "skip_cell_weights_right", ",", "mean", "=", "True", ")", "\n", "pool_left_prim", "=", "reduce_via_attention", "(", "hidden_l", ",", "skip_cell_weights_left", ",", "mean", "=", "True", ")", "\n", "\n", "\n", "\n", "hidden_l_aux", "=", "left_x_1", "\n", "hidden_r_aux", "=", "right_x_1", "\n", "\n", "\n", "pool_right_aux", "=", "reduce_via_attention", "(", "hidden_r_aux", ",", "skip_cell_weights_right", ",", "mean", "=", "True", ")", "\n", "pool_left_aux", "=", "reduce_via_attention", "(", "hidden_l_aux", ",", "skip_cell_weights_left", ",", "mean", "=", "True", ")", "\n", "\n", "\n", "feats", "=", "Concatenate", "(", ")", "(", "[", "pool_left_prim", ",", "pool_right_prim", ",", "pool_right_aux", ",", "pool_left_aux", ",", "pool_t", "]", ")", "\n", "feats_juss_aux", "=", "Concatenate", "(", ")", "(", "[", "pool_right_aux", ",", "pool_left_aux", "]", ")", "\n", "\n", "out", "=", "Dense", "(", "3", ",", "activation", "=", "'softmax'", ")", "(", "feats", ")", "\n", "out_just_aux", "=", "Dense", "(", "3", ",", "activation", "=", "'softmax'", ")", "(", "feats_juss_aux", ")", "\n", "\n", "return", "[", "left_i", ",", "right_i", ",", "tar_i", ",", "sent_len_l", ",", "sent_len_r", ",", "sent_len_t", "]", ",", "[", "out", ",", "out_just_aux", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.lowsupshare.LowSupShare_ABSA.cal_cs": [[154, 166], ["lowsupshare.LowSupShare_ABSA.glove_embed42", "lowsupshare.LowSupShare_ABSA.glove_embed42", "lowsupshare.LowSupShare_ABSA.rnn_left_", "lowsupshare.LowSupShare_ABSA.rnn_right_", "lowsupshare.LowSupShare_ABSA.rnn_left_2", "lowsupshare.LowSupShare_ABSA.rnn_right_2"], "methods", ["None"], ["", "def", "cal_cs", "(", "self", ",", "inp_l", ",", "inp_r", ")", ":", "\n", "\n", "        ", "left_x", "=", "self", ".", "glove_embed42", "(", "inp_l", ")", "\n", "right_x", "=", "self", ".", "glove_embed42", "(", "inp_r", ")", "\n", "\n", "left_x_1", "=", "self", ".", "rnn_left_", "(", "left_x", ")", "\n", "right_x_1", "=", "self", ".", "rnn_right_", "(", "right_x", ")", "\n", "\n", "left_x_2", "=", "self", ".", "rnn_left_2", "(", "left_x_1", ")", "\n", "right_x_2", "=", "self", ".", "rnn_right_2", "(", "right_x_1", ")", "\n", "\n", "return", "[", "left_x_1", ",", "right_x_1", ",", "left_x_2", ",", "right_x_2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.lowsupshare.LowSupShare_ABSA.build_model": [[168, 183], ["lowsupshare.LowSupShare_ABSA.get_glove", "GRU", "GRU", "GRU", "GRU", "lowsupshare.LowSupShare_ABSA.getAuxM", "lowsupshare.LowSupShare_ABSA.getPrimM", "Model", "Utils.Trainer.build_model"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.get_glove", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getAuxM", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getPrimM", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "get_glove", "(", ")", "\n", "\n", "self", ".", "rnn_left_", "=", "GRU", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ",", "dropout", "=", "self", ".", "config", "[", "'dropout'", "]", ",", "recurrent_dropout", "=", "self", ".", "config", "[", "'recurrent_dropout'", "]", ",", "trainable", "=", "True", ")", "\n", "self", ".", "rnn_right_", "=", "GRU", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ",", "dropout", "=", "self", ".", "config", "[", "'dropout'", "]", ",", "recurrent_dropout", "=", "self", ".", "config", "[", "'recurrent_dropout'", "]", ",", "trainable", "=", "True", ")", "\n", "\n", "self", ".", "rnn_left_2", "=", "(", "GRU", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ",", "dropout", "=", "self", ".", "config", "[", "'dropout'", "]", ",", "recurrent_dropout", "=", "self", ".", "config", "[", "'recurrent_dropout'", "]", ",", "trainable", "=", "True", ")", ")", "\n", "self", ".", "rnn_right_2", "=", "(", "GRU", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ",", "dropout", "=", "self", ".", "config", "[", "'dropout'", "]", ",", "recurrent_dropout", "=", "self", ".", "config", "[", "'recurrent_dropout'", "]", ",", "trainable", "=", "True", ")", ")", "\n", "\n", "aux_inps", ",", "aux_outs", "=", "self", ".", "getAuxM", "(", ")", "\n", "prim_inps", ",", "prim_outs", "=", "self", ".", "getPrimM", "(", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "prim_inps", "+", "aux_inps", ",", "prim_outs", "+", "aux_outs", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.get_glove": [[19, 31], ["h5py.File", "np.array", "Embedding"], "methods", ["None"], ["\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "\n", "rnn_hi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_en", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_shared", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "\n", "\n", "# hi", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.get_document_level_rnn_weights": [[35, 63], ["Input", "Embedding", "sparedprivate.SharedPrivate_ABSA.glove_embed42", "GRU", "GRU", "sparedprivate.SharedPrivate_ABSA.rnn_left", "sparedprivate.SharedPrivate_ABSA.rnn_right", "Model", "Model.load_weights", "Lambda", "Lambda", "Concatenate", "GlobalAvgPool1D", "Dense", "Activation", "GRU.cell.get_weights", "GRU.cell.get_weights", "K.reverse", "K.reverse"], "methods", ["None"], ["if", "self", ".", "config", "[", "'mode'", "]", "==", "'parallel'", ":", "\n", "            ", "x", "=", "embed", "(", "inp_hi", ")", "\n", "x", "=", "Concatenate", "(", "-", "1", ")", "(", "[", "rnn_shared", "(", "x", ")", ",", "rnn_hi", "(", "x", ")", "]", ")", "\n", "", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'stacked'", ":", "\n", "            ", "x", "=", "rnn_hi", "(", "Concatenate", "(", "-", "1", ")", "(", "[", "rnn_shared", "(", "x", ")", ",", "(", "x", ")", "]", ")", ")", "\n", "", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "# en", "\n", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_en", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'parallel'", ":", "\n", "            ", "x", "=", "embed", "(", "inp_en", ")", "\n", "x", "=", "Concatenate", "(", "-", "1", ")", "(", "[", "rnn_shared", "(", "x", ")", ",", "rnn_en", "(", "x", ")", "]", ")", "\n", "", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'stacked'", ":", "\n", "            ", "x", "=", "rnn_en", "(", "Concatenate", "(", "-", "1", ")", "(", "[", "rnn_shared", "(", "x", ")", ",", "(", "x", ")", "]", ")", ")", "\n", "", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "\n", "# en hi", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_enhi", ")", "\n", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'parallel'", ":", "\n", "            ", "x", "=", "Concatenate", "(", "-", "1", ")", "(", "[", "rnn_shared", "(", "x", ")", ",", "rnn_enhi", "(", "x", ")", "]", ")", "\n", "", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'stacked'", ":", "\n", "            ", "x", "=", "rnn_enhi", "(", "Concatenate", "(", "-", "1", ")", "(", "[", "rnn_shared", "(", "x", ")", ",", "(", "x", ")", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getAuxM": [[65, 82], ["Input", "sparedprivate.SharedPrivate_ABSA.cal_cs", "Lambda", "Lambda", "Concatenate", "GlobalAvgPool1D", "Dense", "Activation", "K.reverse", "K.reverse"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs"], ["\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_hi", ",", "inp_en", ",", "inp_enhi", "]", ",", "[", "out_hi", ",", "out_en", ",", "out_enhi", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "# jjj", "\n", "", ""]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getPrimM": [[84, 150], ["Input", "Input", "Input", "sparedprivate.SharedPrivate_ABSA.cal_cs", "Input", "Input", "Input", "sparedprivate.SharedPrivate_ABSA.glove_embed42", "att_functions.reduce_via_attention", "att_functions.reduce_via_attention", "att_functions.reduce_via_attention", "att_functions.reduce_via_attention", "Dropout", "Bidirectional", "Lambda", "TimeDistributed", "TimeDistributed", "Reshape", "Lambda", "Reshape", "Reshape", "Lambda", "Reshape", "Concatenate", "Concatenate", "Dense", "Dense", "GRU", "Dense", "Dense", "att_functions.reduce_mean_with_len", "att_functions.sigmoid_with_len_l", "att_functions.sigmoid_with_len_l", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform", "keras.initializers.RandomUniform"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.att_functions.reduce_via_attention", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.reduce_mean_with_len", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.sigmoid_with_len_l", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.girnet.sigmoid_with_len_l"], ["", ""]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs_psp": [[152, 164], ["sparedprivate.SharedPrivate_ABSA.glove_embed42", "sparedprivate.SharedPrivate_ABSA.glove_embed42", "Concatenate", "Concatenate", "Concatenate", "Concatenate", "sparedprivate.SharedPrivate_ABSA.rnn_left_2", "sparedprivate.SharedPrivate_ABSA.rnn_left_shared", "sparedprivate.SharedPrivate_ABSA.rnn_right_2", "sparedprivate.SharedPrivate_ABSA.rnn_right_shared", "sparedprivate.SharedPrivate_ABSA.rnn_left_", "sparedprivate.SharedPrivate_ABSA.rnn_left_shared", "sparedprivate.SharedPrivate_ABSA.rnn_right_", "sparedprivate.SharedPrivate_ABSA.rnn_right_shared"], "methods", ["None"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs_ssp": [[166, 178], ["sparedprivate.SharedPrivate_ABSA.glove_embed42", "sparedprivate.SharedPrivate_ABSA.glove_embed42", "sparedprivate.SharedPrivate_ABSA.rnn_left_2", "sparedprivate.SharedPrivate_ABSA.rnn_right_2", "sparedprivate.SharedPrivate_ABSA.rnn_left_", "sparedprivate.SharedPrivate_ABSA.rnn_right_", "Concatenate", "Concatenate", "Concatenate", "Concatenate", "sparedprivate.SharedPrivate_ABSA.rnn_left_shared", "sparedprivate.SharedPrivate_ABSA.rnn_right_shared", "sparedprivate.SharedPrivate_ABSA.rnn_left_shared", "sparedprivate.SharedPrivate_ABSA.rnn_right_shared"], "methods", ["None"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs": [[180, 186], ["sparedprivate.SharedPrivate_ABSA.cal_cs_psp", "sparedprivate.SharedPrivate_ABSA.cal_cs_ssp"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs_psp", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs_ssp"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.build_model": [[188, 209], ["sparedprivate.SharedPrivate_ABSA.get_glove", "GRU", "GRU", "GRU", "GRU", "GRU", "GRU", "sparedprivate.SharedPrivate_ABSA.getAuxM", "sparedprivate.SharedPrivate_ABSA.getPrimM", "Model", "Utils.Trainer.build_model"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.get_glove", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getAuxM", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.getPrimM", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], []], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.sluice.Sluice_SeqClass.build_model": [[18, 118], ["Embedding", "LSTM", "LSTM", "LSTM", "LSTM", "LSTM", "LSTM", "SluiceUtils.CrossStitch", "SluiceUtils.OutPutSelector", "Input", "Input", "Input", "sluice.Sluice_SeqClass.build_model.cal_cs"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs"], ["\n", "    ", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "rnn_hi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_en", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "rnn_hi2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_en2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "stitch_layer", "=", "CrossStitch", "(", ")", "\n", "stitch_layer", ".", "supports_masking", "=", "True", "\n", "\n", "osel", "=", "OutPutSelector", "(", ")", "\n", "osel", ".", "supports_masking", "=", "True", "\n", "\n", "\n", "def", "desectOut", "(", "xx", ")", ":", "\n", "            ", "l", "=", "xx", ".", "shape", "[", "-", "1", "]", "\n", "return", "Lambda", "(", "lambda", "x", ":", "[", "x", "[", "...", ",", ":", "l", "/", "2", "]", ",", "x", "[", "...", ",", "l", "/", "2", ":", "]", "]", ")", "(", "xx", ")", "\n", "\n", "\n", "", "def", "cal_cs", "(", "inp", ")", ":", "\n", "            ", "x", "=", "embed", "(", "inp", ")", "\n", "x_hi", "=", "rnn_hi", "(", "x", ")", "\n", "\n", "# en ", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_en", "=", "rnn_en", "(", "x", ")", "\n", "\n", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_enhi", "=", "rnn_enhi", "(", "x", ")", "\n", "\n", "\n", "[", "x_hi1", ",", "x_hi2", "]", "=", "desectOut", "(", "x_hi", ")", "\n", "[", "x_en1", ",", "x_en2", "]", "=", "desectOut", "(", "x_en", ")", "\n", "[", "x_enhi1", ",", "x_enhi2", "]", "=", "desectOut", "(", "x_enhi", ")", "\n", "\n", "[", "x_hi1", ",", "x_en1", ",", "x_enhi1", ",", "x_hi2", ",", "x_en2", ",", "x_enhi2", "]", "=", "stitch_layer", "(", "[", "x_hi1", ",", "x_en1", ",", "x_enhi1", ",", "x_hi2", ",", "x_en2", ",", "x_enhi2", "]", ")", "\n", "\n", "x_hi", "=", "Concatenate", "(", ")", "(", "[", "x_hi1", ",", "x_hi2", "]", ")", "\n", "x_en", "=", "Concatenate", "(", ")", "(", "[", "x_en1", ",", "x_en2", "]", ")", "\n", "x_enhi", "=", "Concatenate", "(", ")", "(", "[", "x_enhi1", ",", "x_enhi2", "]", ")", "\n", "\n", "x_hi_p", "=", "x_hi", "\n", "x_en_p", "=", "x_en", "\n", "x_enhi_p", "=", "x_enhi", "\n", "\n", "x_hi", "=", "rnn_hi2", "(", "x_hi", ")", "\n", "x_en", "=", "rnn_en2", "(", "x_en", ")", "\n", "x_enhi", "=", "rnn_enhi2", "(", "x_enhi", ")", "\n", "\n", "[", "x_hi1", ",", "x_hi2", "]", "=", "desectOut", "(", "x_hi", ")", "\n", "[", "x_en1", ",", "x_en2", "]", "=", "desectOut", "(", "x_en", ")", "\n", "[", "x_enhi1", ",", "x_enhi2", "]", "=", "desectOut", "(", "x_enhi", ")", "\n", "\n", "[", "x_hi1", ",", "x_en1", ",", "x_enhi1", ",", "x_hi2", ",", "x_en2", ",", "x_enhi2", "]", "=", "stitch_layer", "(", "[", "x_hi1", ",", "x_en1", ",", "x_enhi1", ",", "x_hi2", ",", "x_en2", ",", "x_enhi2", "]", ")", "\n", "\n", "x_hi", "=", "Concatenate", "(", ")", "(", "[", "x_hi1", ",", "x_hi2", "]", ")", "\n", "x_en", "=", "Concatenate", "(", ")", "(", "[", "x_en1", ",", "x_en2", "]", ")", "\n", "x_enhi", "=", "Concatenate", "(", ")", "(", "[", "x_enhi1", ",", "x_enhi2", "]", ")", "\n", "\n", "x_hi", "=", "osel", "(", "[", "x_hi", ",", "x_hi_p", "]", ")", "\n", "x_en", "=", "osel", "(", "[", "x_en", ",", "x_en_p", "]", ")", "\n", "x_enhi", "=", "osel", "(", "[", "x_enhi", ",", "x_enhi_p", "]", ")", "\n", "\n", "\n", "return", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "\n", "\n", "\n", "\n", "# hi", "\n", "", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "# en ", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "\n", "[", "x_hi", ",", "_", ",", "_", "]", "=", "cal_cs", "(", "inp_hi", ")", "\n", "[", "_", ",", "x_en", ",", "_", "]", "=", "cal_cs", "(", "inp_en", ")", "\n", "[", "_", ",", "_", ",", "x_enhi", "]", "=", "cal_cs", "(", "inp_enhi", ")", "\n", "\n", "\n", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_enhi", ")", "\n", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_hi", ")", "\n", "\n", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_en", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_hi", ",", "inp_en", ",", "inp_enhi", "]", ",", "[", "out_hi", ",", "out_en", ",", "out_enhi", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.sharedprivate.SharedPrivate_SeqClass.build_model": [[15, 71], ["Embedding", "LSTM", "LSTM", "LSTM", "Input", "Embedding.", "Input", "Embedding.", "Input", "Embedding.", "Model", "Utils.Trainer.build_model", "LSTM", "LSTM", "LSTM.", "LSTM.", "LSTM.", "LSTM.", "LSTM.", "LSTM.", "LSTM.", "LSTM.", "LSTM.", "Dense", "Dense", "Dense", "Concatenate", "Concatenate", "Concatenate", "Concatenate", "Concatenate", "Concatenate", "LSTM.", "LSTM.", "LSTM."], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], ["    ", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ")", "\n", "\n", "rnn_es", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ")", "\n", "rnn_en", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ")", "\n", "rnn_enes", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'parallel'", ":", "\n", "            ", "rnn_shared", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "rnn_shared", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", "\n", "\n", "\n", "\n", "", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x_en", "=", "embed", "(", "inp_en", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'parallel'", ":", "\n", "\n", "            ", "x_en_1", "=", "rnn_en", "(", "x_en", ")", "\n", "x_en_2", "=", "rnn_shared", "(", "x_en", ")", "\n", "x_en", "=", "Concatenate", "(", ")", "(", "[", "x_en_1", ",", "x_en_2", "]", ")", "\n", "", "else", ":", "\n", "            ", "x_en", "=", "rnn_en", "(", "Concatenate", "(", ")", "(", "[", "x_en", ",", "rnn_shared", "(", "x_en", ")", "]", ")", ")", "\n", "\n", "\n", "\n", "", "inp_es", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x_es", "=", "embed", "(", "inp_es", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'parallel'", ":", "\n", "            ", "x_es_1", "=", "rnn_es", "(", "x_es", ")", "\n", "x_es_2", "=", "rnn_shared", "(", "x_es", ")", "\n", "x_es", "=", "Concatenate", "(", ")", "(", "[", "x_es_1", ",", "x_es_2", "]", ")", "\n", "", "else", ":", "\n", "            ", "x_es", "=", "rnn_es", "(", "Concatenate", "(", ")", "(", "[", "x_es", ",", "rnn_shared", "(", "x_es", ")", "]", ")", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "inp_enes", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x_enes", "=", "embed", "(", "inp_enes", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'parallel'", ":", "\n", "            ", "x_enes_1", "=", "rnn_enes", "(", "x_enes", ")", "\n", "x_enes_2", "=", "rnn_shared", "(", "x_enes", ")", "\n", "x_enes", "=", "Concatenate", "(", ")", "(", "[", "x_enes_1", ",", "x_enes_2", "]", ")", "\n", "", "else", ":", "\n", "            ", "x_enes", "=", "rnn_enes", "(", "Concatenate", "(", ")", "(", "[", "x_enes", ",", "rnn_shared", "(", "x_enes", ")", "]", ")", ")", "\n", "\n", "\n", "", "out_enes", "=", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enes'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_enes", ")", "\n", "out_es", "=", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_es'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_es", ")", "\n", "out_en", "=", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_en", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_en", ",", "inp_es", ",", "inp_enes", "]", ",", "[", "out_en", ",", "out_es", ",", "out_enes", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.SluiceUtils.OutSelctorInitBiases.__call__": [[16, 23], ["tensorflow.convert_to_tensor.astype", "tensorflow.convert_to_tensor", "len", "np.zeros"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "shape", ")", "==", "1", "\n", "m", "=", "0.05", "+", "np", ".", "zeros", "(", "shape", ")", "\n", "m", "[", "-", "1", "]", "=", "0.95", "\n", "m", "=", "m", ".", "astype", "(", "np", ".", "float32", ")", "\n", "m", "=", "tf", ".", "convert_to_tensor", "(", "m", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.SluiceUtils.OutPutSelector.__init__": [[28, 30], ["Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OutPutSelector", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.SluiceUtils.OutPutSelector.build": [[31, 44], ["len", "SluiceUtils.OutPutSelector.add_weight", "super().build", "type", "SluiceUtils.OutSelctorInitBiases"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "type", "(", "input_shape", ")", "is", "list", "# we need a list of inputs ", "\n", "for", "ish", "in", "input_shape", ":", "\n", "            ", "assert", "ish", "==", "input_shape", "[", "0", "]", "\n", "\n", "", "self", ".", "n_inputs", "=", "len", "(", "input_shape", ")", "\n", "\n", "self", ".", "betas", "=", "self", ".", "add_weight", "(", "name", "=", "'betas'", ",", "\n", "shape", "=", "(", "self", ".", "n_inputs", ",", ")", ",", "\n", "initializer", "=", "OutSelctorInitBiases", "(", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "super", "(", "OutPutSelector", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this somewhere!", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.SluiceUtils.OutPutSelector.call": [[45, 52], ["range"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inp", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "self", ".", "n_inputs", ")", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "out_i", "=", "inp", "[", "j", "]", "*", "self", ".", "betas", "[", "j", "]", "\n", "", "else", ":", "\n", "                ", "out_i", "+=", "inp", "[", "j", "]", "*", "self", ".", "betas", "[", "j", "]", "\n", "", "", "return", "out_i", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.SluiceUtils.OutPutSelector.compute_output_shape": [[54, 56], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.SluiceUtils.CrossSelectInitBiased.__call__": [[64, 70], ["tensorflow.convert_to_tensor.astype", "tensorflow.convert_to_tensor", "len", "np.identity", "np.identity"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "shape", ")", "==", "2", "\n", "m", "=", "0.05", "*", "(", "1", "-", "np", ".", "identity", "(", "shape", "[", "0", "]", ")", ")", "+", "0.95", "*", "np", ".", "identity", "(", "shape", "[", "0", "]", ")", "\n", "m", "=", "m", ".", "astype", "(", "np", ".", "float32", ")", "\n", "m", "=", "tf", ".", "convert_to_tensor", "(", "m", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.SluiceUtils.CrossStitch.__init__": [[75, 77], ["Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CrossStitch", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.SluiceUtils.CrossStitch.build": [[78, 91], ["len", "SluiceUtils.CrossStitch.add_weight", "super().build", "type", "SluiceUtils.CrossSelectInitBiased"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "type", "(", "input_shape", ")", "is", "list", "# we need a list of inputs ", "\n", "for", "ish", "in", "input_shape", ":", "\n", "            ", "assert", "ish", "==", "input_shape", "[", "0", "]", "\n", "\n", "", "self", ".", "n_inputs", "=", "len", "(", "input_shape", ")", "\n", "\n", "self", ".", "alphas", "=", "self", ".", "add_weight", "(", "name", "=", "'alphas'", ",", "\n", "shape", "=", "(", "self", ".", "n_inputs", ",", "self", ".", "n_inputs", ")", ",", "\n", "initializer", "=", "CrossSelectInitBiased", "(", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "super", "(", "CrossStitch", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this somewhere!", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.SluiceUtils.CrossStitch.call": [[92, 102], ["range", "range", "outs.append"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inp", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_inputs", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "n_inputs", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "out_i", "=", "inp", "[", "j", "]", "*", "self", ".", "alphas", "[", "i", ",", "j", "]", "\n", "", "else", ":", "\n", "                    ", "out_i", "+=", "inp", "[", "j", "]", "*", "self", ".", "alphas", "[", "i", ",", "j", "]", "\n", "", "", "outs", ".", "append", "(", "out_i", ")", "\n", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.SluiceUtils.CrossStitch.compute_output_shape": [[103, 105], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "\n", "", "", ""]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.xstitch.CrossStitch_SeqClass.build_model": [[18, 113], ["Embedding", "SluiceUtils.CrossStitch", "Input", "Input", "Input", "cal_cs", "cal_cs", "cal_cs", "Model", "Utils.Trainer.build_model", "LSTM", "LSTM", "LSTM", "LSTM", "LSTM", "LSTM", "LSTM", "LSTM", "LSTM", "SluiceUtils.CrossStitch", "Embedding.", "LSTM.", "Embedding.", "LSTM.", "Embedding.", "LSTM.", "SluiceUtils.CrossStitch.", "Embedding.", "LSTM.", "Embedding.", "LSTM.", "Embedding.", "LSTM.", "SluiceUtils.CrossStitch.", "LSTM.", "LSTM.", "LSTM.", "SluiceUtils.CrossStitch.", "Dense", "Dense", "Dense"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.target_based_classification.sparedprivate.SharedPrivate_ABSA.cal_cs", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], ["\n", "    ", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "rnn_hi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_en", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "rnn_hi2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_en2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "rnn_enhi2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "", "stitch_layer", "=", "CrossStitch", "(", ")", "\n", "stitch_layer", ".", "supports_masking", "=", "True", "\n", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "stitch_layer2", "=", "CrossStitch", "(", ")", "\n", "stitch_layer2", ".", "supports_masking", "=", "True", "\n", "\n", "\n", "\n", "", "def", "cal_cs_1l", "(", "inp", ")", ":", "\n", "            ", "x", "=", "embed", "(", "inp", ")", "\n", "x_hi", "=", "rnn_hi", "(", "x", ")", "\n", "\n", "# en ", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_en", "=", "rnn_en", "(", "x", ")", "\n", "\n", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_enhi", "=", "rnn_enhi", "(", "x", ")", "\n", "\n", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "=", "stitch_layer", "(", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", ")", "\n", "\n", "return", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "\n", "\n", "\n", "", "def", "cal_cs_2l", "(", "inp", ")", ":", "\n", "            ", "x", "=", "embed", "(", "inp", ")", "\n", "x_hi", "=", "rnn_hi", "(", "x", ")", "\n", "\n", "# en ", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_en", "=", "rnn_en", "(", "x", ")", "\n", "\n", "\n", "x", "=", "embed", "(", "inp", ")", "\n", "x_enhi", "=", "rnn_enhi", "(", "x", ")", "\n", "\n", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "=", "stitch_layer", "(", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", ")", "\n", "\n", "\n", "x_hi", "=", "rnn_hi2", "(", "x_hi", ")", "\n", "x_en", "=", "rnn_en2", "(", "x_en", ")", "\n", "x_enhi", "=", "rnn_enhi2", "(", "x_enhi", ")", "\n", "\n", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "=", "stitch_layer2", "(", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", ")", "\n", "\n", "return", "[", "x_hi", ",", "x_en", ",", "x_enhi", "]", "\n", "\n", "\n", "", "if", "config", "[", "'n_layers'", "]", "==", "1", ":", "\n", "            ", "cal_cs", "=", "cal_cs_1l", "\n", "", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "cal_cs", "=", "cal_cs_2l", "\n", "\n", "\n", "\n", "# hi", "\n", "", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "# en ", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "\n", "[", "x_hi", ",", "_", ",", "_", "]", "=", "cal_cs", "(", "inp_hi", ")", "\n", "[", "_", ",", "x_en", ",", "_", "]", "=", "cal_cs", "(", "inp_en", ")", "\n", "[", "_", ",", "_", ",", "x_enhi", "]", "=", "cal_cs", "(", "inp_enhi", ")", "\n", "\n", "\n", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_enhi", ")", "\n", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_hi", ")", "\n", "\n", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_en", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_hi", ",", "inp_en", ",", "inp_enhi", "]", ",", "[", "out_hi", ",", "out_en", ",", "out_enhi", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.hardshare.HardShare_SeqClass.build_model": [[15, 57], ["Embedding", "Input", "Embedding.", "Input", "Embedding.", "Input", "Embedding.", "Model", "Utils.Trainer.build_model", "LSTM", "LSTM", "LSTM", "LSTM.", "LSTM.", "Dense", "LSTM.", "LSTM.", "Dense", "LSTM.", "LSTM.", "Dense", "LSTM.", "LSTM.", "LSTM."], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], ["\n", "\n", "\n", "    ", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "rnn", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "rnn2", "=", "(", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", ")", "\n", "\n", "# hi", "\n", "\n", "", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_hi", ")", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "x", "=", "rnn2", "(", "rnn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "rnn", "(", "x", ")", "\n", "", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "# en", "\n", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_en", ")", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "x", "=", "rnn2", "(", "rnn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "rnn", "(", "x", ")", "\n", "", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_enhi", ")", "\n", "if", "config", "[", "'n_layers'", "]", "==", "2", ":", "\n", "            ", "x", "=", "rnn2", "(", "rnn", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "rnn", "(", "x", ")", "\n", "", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.girnet.GiretTwoCell.__init__": [[14, 20], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cell_1", ",", "cell_2", ",", "nHidden", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "cell_1", "=", "cell_1", "\n", "self", ".", "cell_2", "=", "cell_2", "\n", "self", ".", "nHidden", "=", "nHidden", "\n", "self", ".", "state_size", "=", "[", "nHidden", ",", "nHidden", "]", "\n", "super", "(", "GiretTwoCell", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.girnet.GiretTwoCell.build": [[21, 38], ["None"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "        ", "nHidden", "=", "self", ".", "nHidden", "\n", "\n", "input_shape_n", "=", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", "-", "2", ")", "\n", "#         print \"pp\", input_shape_n", "\n", "\n", "#         self.cell_1.build(input_shape_n)", "\n", "#         self.cell_2.build(input_shape_n)", "\n", "\n", "self", ".", "_trainable_weights", "+=", "(", "self", ".", "cell_1", ".", "trainable_weights", ")", "\n", "self", ".", "_trainable_weights", "+=", "(", "self", ".", "cell_2", ".", "trainable_weights", ")", "\n", "\n", "self", ".", "_non_trainable_weights", "+=", "(", "self", ".", "cell_1", ".", "non_trainable_weights", ")", "\n", "self", ".", "_non_trainable_weights", "+=", "(", "self", ".", "cell_2", ".", "non_trainable_weights", ")", "\n", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.girnet.GiretTwoCell.call": [[39, 58], ["K.repeat_elements", "K.repeat_elements", "girnet.GiretTwoCell.cell_1.call", "girnet.GiretTwoCell.cell_2.call"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.call", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.call"], ["", "def", "call", "(", "self", ",", "inputs", ",", "states", ")", ":", "\n", "\n", "        ", "nHidden", "=", "self", ".", "nHidden", "\n", "\n", "gate_val_1", "=", "inputs", "[", ":", ",", "0", ":", "1", "]", "\n", "gate_val_2", "=", "inputs", "[", ":", ",", "1", ":", "2", "]", "\n", "\n", "inputs", "=", "inputs", "[", ":", ",", "2", ":", "]", "\n", "\n", "gate_val_1", "=", "K", ".", "repeat_elements", "(", "gate_val_1", ",", "nHidden", ",", "-", "1", ")", "# shape # bs , hidden", "\n", "gate_val_2", "=", "K", ".", "repeat_elements", "(", "gate_val_2", ",", "nHidden", ",", "-", "1", ")", "# shape # bs , hidden", "\n", "\n", "_", ",", "[", "h1", ",", "c1", "]", "=", "self", ".", "cell_1", ".", "call", "(", "inputs", ",", "states", ")", "\n", "_", ",", "[", "h2", ",", "c2", "]", "=", "self", ".", "cell_2", ".", "call", "(", "inputs", ",", "states", ")", "\n", "\n", "h", "=", "gate_val_1", "*", "h1", "+", "gate_val_2", "*", "h2", "+", "(", "1", "-", "gate_val_1", "-", "gate_val_2", ")", "*", "states", "[", "0", "]", "\n", "c", "=", "gate_val_1", "*", "c1", "+", "gate_val_2", "*", "c2", "+", "(", "1", "-", "gate_val_1", "-", "gate_val_2", ")", "*", "states", "[", "1", "]", "\n", "\n", "return", "h", ",", "[", "h", ",", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.girnet.GIRNet_SeqClass.build_model": [[65, 112], ["Embedding", "LSTM", "LSTM", "Input", "Embedding.", "LSTM.", "Input", "Embedding.", "LSTM.", "girnet.GiretTwoCell", "Input", "Embedding.", "Model", "Utils.Trainer.build_model", "Dense", "Dense", "Bidirectional", "Lambda", "TimeDistributed", "Lambda", "Concatenate", "RNN", "Concatenate", "Dense", "LSTM", "Dense"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], ["    ", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "config", "=", "self", ".", "config", "\n", "embed", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ",", "mask_zero", "=", "True", ")", "\n", "\n", "rnn_hi", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", "\n", "rnn_en", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", "\n", "\n", "# en", "\n", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_en", ")", "\n", "x", "=", "rnn_en", "(", "x", ")", "\n", "out_en", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "# hi", "\n", "\n", "inp_hi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_hi", ")", "\n", "x", "=", "rnn_hi", "(", "x", ")", "\n", "out_hi", "=", "TimeDistributed", "(", "Dense", "(", "config", "[", "'n_class_hi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "cell_combined", "=", "GiretTwoCell", "(", "rnn_hi", ".", "cell", ",", "rnn_en", ".", "cell", ",", "self", ".", "config", "[", "'nHidden'", "]", ")", "\n", "\n", "\n", "inp_enhi", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "embed", "(", "inp_enhi", ")", "\n", "\n", "x_att", "=", "x", "\n", "x_att", "=", "Bidirectional", "(", "LSTM", "(", "32", ",", "return_sequences", "=", "True", ")", ")", "(", "x", ")", "\n", "bider_h", "=", "x_att", "\n", "x_att", "=", "TimeDistributed", "(", "Dense", "(", "3", ",", "activation", "=", "'softmax'", ")", ")", "(", "x_att", ")", "\n", "x_att", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "1", ":", "]", ")", "(", "x_att", ")", "\n", "\n", "x", "=", "Concatenate", "(", "-", "1", ")", "(", "[", "x_att", ",", "x", "]", ")", "\n", "\n", "x", "=", "RNN", "(", "cell_combined", ",", "return_sequences", "=", "True", ")", "(", "x", ")", "\n", "out_enhi", "=", "TimeDistributed", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enhi'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_hi", ",", "inp_en", ",", "inp_enhi", "]", ",", "[", "out_hi", ",", "out_en", ",", "out_enhi", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model": [[15, 71], ["Embedding", "LSTM", "LSTM", "Input", "Embedding.", "Input", "Embedding.", "Input", "Embedding.", "Model", "Utils.Trainer.build_model", "LSTM", "LSTM.", "LSTM.", "Dense", "LSTM.", "LSTM.", "Dense", "LSTM.", "LSTM.", "LSTM.", "LSTM.", "LSTM.", "Dense", "Lambda", "Lambda", "Lambda", "Lambda", "Concatenate"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.sequence_classification.lowsupervision.LowSup_SeqClass.build_model"], ["    ", "def", "build_model", "(", "self", ")", ":", "\n", "\n", "        ", "config", "=", "self", ".", "config", "\n", "emb", "=", "Embedding", "(", "self", ".", "config", "[", "'vocab_size'", "]", ",", "self", ".", "config", "[", "'embed_dim'", "]", ")", "\n", "\n", "rnn_en", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'concat'", ":", "\n", "            ", "rnn_es", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ",", "return_sequences", "=", "True", ")", "\n", "", "rnn_enes", "=", "LSTM", "(", "self", ".", "config", "[", "'nHidden'", "]", ")", "\n", "\n", "\n", "\n", "inp_en", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "emb", "(", "inp_en", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'share'", ":", "\n", "            ", "x", "=", "rnn_en", "(", "x", ")", "\n", "x", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", "-", "1", "]", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "rnn_en", "(", "x", ")", "\n", "x", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", "-", "1", "]", ")", "(", "x", ")", "\n", "", "out_en", "=", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_en'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "\n", "inp_es", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "emb", "(", "inp_es", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'share'", ":", "\n", "            ", "x", "=", "rnn_en", "(", "x", ")", "\n", "x", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", "-", "1", "]", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "rnn_es", "(", "x", ")", "\n", "x", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", "-", "1", "]", ")", "(", "x", ")", "\n", "", "out_es", "=", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_es'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "\n", "\n", "\n", "inp_enes", "=", "Input", "(", "(", "self", ".", "config", "[", "'sent_len'", "]", ",", ")", ")", "\n", "x", "=", "emb", "(", "inp_enes", ")", "\n", "if", "self", ".", "config", "[", "'mode'", "]", "==", "'share'", ":", "\n", "            ", "x_es1", "=", "rnn_en", "(", "x", ")", "\n", "x", "=", "x_es1", "\n", "x", "=", "rnn_enes", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x_es1", "=", "rnn_es", "(", "x", ")", "\n", "x_en1", "=", "rnn_en", "(", "x", ")", "\n", "x", "=", "Concatenate", "(", "-", "1", ")", "(", "[", "x_es1", ",", "x_en1", "]", ")", "\n", "x", "=", "rnn_enes", "(", "x", ")", "\n", "\n", "\n", "", "out_enes", "=", "(", "Dense", "(", "self", ".", "config", "[", "'n_class_enes'", "]", ",", "activation", "=", "'softmax'", ")", ")", "(", "x", ")", "\n", "\n", "\n", "self", ".", "model", "=", "Model", "(", "[", "inp_en", ",", "inp_es", ",", "inp_enes", "]", ",", "[", "out_en", ",", "out_es", ",", "out_enes", "]", ")", "\n", "Trainer", ".", "build_model", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.__init__": [[16, 21], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cells", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "cells", "=", "cells", "\n", "self", ".", "n_hidden", "=", "cells", "[", "0", "]", ".", "units", "\n", "self", ".", "state_size", "=", "[", "self", ".", "n_hidden", ",", "self", ".", "n_hidden", "]", "\n", "super", "(", "InterleaveLSTMCells", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.build": [[22, 33], ["len"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "# the input should concatenated by scalar gates", "\n", "        ", "input_shape_n", "=", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", "-", "len", "(", "self", ".", "cells", ")", ")", "\n", "\n", "for", "cell", "in", "self", ".", "cells", ":", "\n", "            ", "self", ".", "_trainable_weights", "+=", "(", "cell", ".", "trainable_weights", ")", "\n", "\n", "", "for", "cell", "in", "self", ".", "cells", ":", "\n", "            ", "self", ".", "_non_trainable_weights", "+=", "(", "cell", ".", "non_trainable_weights", ")", "\n", "\n", "", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.call": [[34, 63], ["range", "range", "range", "len", "keras.repeat_elements", "keras.repeat_elements", "len", "GIRNet.InterleaveLSTMCells.cells[].call", "len", "range", "range", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.InterleaveLSTMCells.call"], ["", "def", "call", "(", "self", ",", "inputs", ",", "states", ")", ":", "\n", "\n", "        ", "gate_vals", "=", "[", "inputs", "[", ":", ",", "i", ":", "i", "+", "1", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cells", ")", ")", "]", "\n", "inputs", "=", "inputs", "[", ":", ",", "len", "(", "self", ".", "cells", ")", ":", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cells", ")", ")", ":", "\n", "            ", "gate_vals", "[", "i", "]", "=", "K", ".", "repeat_elements", "(", "gate_vals", "[", "i", "]", ",", "self", ".", "n_hidden", ",", "-", "1", ")", "\n", "\n", "", "h_primaux", "=", "[", "None", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cells", ")", ")", "]", "\n", "c_primaux", "=", "[", "None", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cells", ")", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cells", ")", ")", ":", "\n", "            ", "_", ",", "[", "h_primaux", "[", "i", "]", ",", "c_primaux", "[", "i", "]", "]", "=", "self", ".", "cells", "[", "i", "]", ".", "call", "(", "inputs", ",", "states", ")", "\n", "\n", "", "gate_val_sum", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cells", ")", ")", ":", "\n", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "h", "=", "gate_vals", "[", "i", "]", "*", "h_primaux", "[", "i", "]", "\n", "c", "=", "gate_vals", "[", "i", "]", "*", "c_primaux", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "h", "=", "h", "+", "gate_vals", "[", "i", "]", "*", "h_primaux", "[", "i", "]", "\n", "c", "=", "c", "+", "gate_vals", "[", "i", "]", "*", "c_primaux", "[", "i", "]", "\n", "", "gate_val_sum", "+=", "gate_vals", "[", "i", "]", "\n", "\n", "", "h", "=", "h", "+", "(", "1", "-", "gate_val_sum", ")", "*", "states", "[", "0", "]", "\n", "c", "=", "c", "+", "(", "1", "-", "gate_val_sum", ")", "*", "states", "[", "1", "]", "\n", "\n", "return", "h", ",", "[", "h", ",", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.core.GIRNet.GIRNet": [[68, 88], ["GIRNet.InterleaveLSTMCells", "TimeDistributed", "Lambda", "Concatenate", "RNN", "Bidirectional", "LSTM", "Dense", "Lambda", "Lambda", "LSTM", "len"], "function", ["None"], ["", "", "def", "GIRNet", "(", "prim_imput", ",", "aux_lstms", ",", "bidirectional_gating", "=", "True", ",", "return_sequences", "=", "True", ")", ":", "\n", "\n", "    ", "aux_cells", "=", "[", "l", ".", "cell", "for", "l", "in", "aux_lstms", "]", "\n", "cell_combined", "=", "InterleaveLSTMCells", "(", "aux_cells", ")", "\n", "\n", "if", "bidirectional_gating", ":", "\n", "        ", "prime_out", "=", "Bidirectional", "(", "LSTM", "(", "32", ",", "return_sequences", "=", "True", ")", ")", "(", "prim_imput", ")", "\n", "", "else", ":", "\n", "        ", "prime_out", "=", "LSTM", "(", "32", ",", "return_sequences", "=", "True", ")", "(", "prim_imput", ")", "\n", "\n", "", "scalar_gates", "=", "TimeDistributed", "(", "Dense", "(", "1", "+", "len", "(", "aux_lstms", ")", ",", "activation", "=", "'softmax'", ")", ")", "(", "prime_out", ")", "\n", "scalar_gates", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", "...", ",", "1", ":", "]", ")", "(", "scalar_gates", ")", "\n", "x", "=", "Concatenate", "(", "-", "1", ")", "(", "[", "scalar_gates", ",", "prim_imput", "]", ")", "\n", "out_interleaved", "=", "RNN", "(", "cell_combined", ",", "return_sequences", "=", "True", ")", "(", "x", ")", "\n", "\n", "if", "not", "return_sequences", ":", "\n", "        ", "prime_out", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", "-", "1", ",", ":", "]", ")", "(", "prime_out", ")", "\n", "out_interleaved", "=", "Lambda", "(", "lambda", "x", ":", "x", "[", ":", ",", "-", "1", ",", ":", "]", ")", "(", "out_interleaved", ")", "\n", "\n", "", "return", "scalar_gates", ",", "prime_out", ",", "out_interleaved", "", "", ""]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.prep_absa_datasets.gloveDict": [[17, 22], ["None"], "function", ["None"], ["def", "gloveDict", "(", "w", ")", ":", "\n", "    ", "if", "w", "in", "glovevocab", ":", "\n", "        ", "return", "glovevocab", "[", "w", "]", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.prep_absa_datasets.getrestraunt": [[27, 44], ["map", "map", "zip", "print", "map", "open().read().split", "len", "len", "len", "open().read().split", "x.strip", "len", "len", "len", "len", "open().read", "open().read", "open", "open"], "function", ["None"], ["def", "getrestraunt", "(", "split", ")", ":", "\n", "    ", "if", "split", "==", "'train'", ":", "\n", "        ", "lines", "=", "open", "(", "raw_absa_path", "+", "\"restaurant/rest_2014_train.txt\"", ")", ".", "read", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "lines", "=", "open", "(", "raw_absa_path", "+", "\"restaurant/rest_2014_test.txt\"", ")", ".", "read", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "", "lines", "=", "lines", "[", ":", "-", "1", "]", "\n", "lines", "=", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "lines", ")", "\n", "train", "=", "[", "]", "\n", "sentences", "=", "lines", "[", "0", ":", ":", "3", "]", "\n", "entities", "=", "lines", "[", "1", ":", ":", "3", "]", "\n", "sentiments", "=", "lines", "[", "2", ":", ":", "3", "]", "\n", "sentiments", "=", "map", "(", "int", ",", "sentiments", ")", "\n", "dset", "=", "zip", "(", "sentences", ",", "entities", ",", "sentiments", ")", "\n", "print", "(", "len", "(", "sentiments", ")", ",", "len", "(", "entities", ")", ",", "len", "(", "sentences", ")", ")", "\n", "assert", "len", "(", "sentiments", ")", "==", "len", "(", "entities", ")", "and", "len", "(", "entities", ")", "==", "len", "(", "sentences", ")", "\n", "dset", "=", "map", "(", "lambda", "x", ":", "{", "\"sentence\"", ":", "x", "[", "0", "]", ",", "\"entities\"", ":", "[", "{", "\"entity\"", ":", "x", "[", "1", "]", ",", "\"sentiment\"", ":", "x", "[", "2", "]", "}", "]", "}", ",", "dset", ")", "\n", "return", "dset", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.prep_absa_datasets.getlaptop": [[47, 64], ["map", "map", "zip", "print", "map", "open().read().split", "len", "len", "len", "open().read().split", "x.strip", "len", "len", "len", "len", "open().read", "open().read", "open", "open"], "function", ["None"], ["", "def", "getlaptop", "(", "split", ")", ":", "\n", "    ", "if", "split", "==", "'train'", ":", "\n", "        ", "lines", "=", "open", "(", "raw_absa_path", "+", "\"laptop/laptop_2014_train.txt\"", ")", ".", "read", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "        ", "lines", "=", "open", "(", "raw_absa_path", "+", "\"laptop/laptop_2014_test.txt\"", ")", ".", "read", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "", "lines", "=", "lines", "[", ":", "-", "1", "]", "\n", "lines", "=", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "lines", ")", "\n", "train", "=", "[", "]", "\n", "sentences", "=", "lines", "[", "0", ":", ":", "3", "]", "\n", "entities", "=", "lines", "[", "1", ":", ":", "3", "]", "\n", "sentiments", "=", "lines", "[", "2", ":", ":", "3", "]", "\n", "sentiments", "=", "map", "(", "int", ",", "sentiments", ")", "\n", "dset", "=", "zip", "(", "sentences", ",", "entities", ",", "sentiments", ")", "\n", "print", "(", "len", "(", "sentiments", ")", ",", "len", "(", "entities", ")", ",", "len", "(", "sentences", ")", ")", "\n", "assert", "len", "(", "sentiments", ")", "==", "len", "(", "entities", ")", "and", "len", "(", "entities", ")", "==", "len", "(", "sentences", ")", "\n", "dset", "=", "map", "(", "lambda", "x", ":", "{", "\"sentence\"", ":", "x", "[", "0", "]", ",", "\"entities\"", ":", "[", "{", "\"entity\"", ":", "x", "[", "1", "]", ",", "\"sentiment\"", ":", "x", "[", "2", "]", "}", "]", "}", ",", "dset", ")", "\n", "return", "dset", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.prep_absa_datasets.vecc": [[69, 101], ["[].lower().strip().split", "[].lower().strip().split", "[].lower().strip().split", "map", "map", "map", "map", "dlblocks.pyutils.int64Arr", "dlblocks.pyutils.int64Arr", "dlblocks.pyutils.int64Arr", "len", "len", "dlblocks.pyutils.int64Arr", "len", "dlblocks.pyutils.floatArr", "dlblocks.pyutils.padList", "dlblocks.pyutils.padList", "dlblocks.pyutils.padList", "dlblocks.pyutils.padList", "dlblocks.pyutils.oneHotVec", "[].lower().strip", "[].lower().strip", "[].lower().strip", "len", "len", "len", "[].lower", "[].lower", "[].lower", "d[].split", "d[].split"], "function", ["None"], ["", "def", "vecc", "(", "d", ")", ":", "\n", "    ", "ret", "=", "{", "}", "\n", "\n", "entityWords", "=", "d", "[", "'entities'", "]", "[", "0", "]", "[", "'entity'", "]", ".", "lower", "(", ")", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "sentiment", "=", "d", "[", "'entities'", "]", "[", "0", "]", "[", "'sentiment'", "]", "\n", "\n", "leftWords", "=", "d", "[", "'sentence'", "]", ".", "split", "(", "\"$T$\"", ")", "[", "0", "]", ".", "lower", "(", ")", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "rightWords", "=", "d", "[", "'sentence'", "]", ".", "split", "(", "\"$T$\"", ")", "[", "1", "]", ".", "lower", "(", ")", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "\n", "words", "=", "leftWords", "+", "entityWords", "+", "rightWords", "\n", "entityMask", "=", "[", "0", "]", "*", "len", "(", "leftWords", ")", "+", "[", "1", "]", "*", "len", "(", "entityWords", ")", "+", "[", "0", "]", "*", "(", "len", "(", "rightWords", ")", ")", "\n", "\n", "wordids", "=", "map", "(", "gloveDict", ",", "words", ")", "\n", "wordIdsLeft", "=", "map", "(", "gloveDict", ",", "leftWords", ")", "\n", "wordIdsRight", "=", "map", "(", "gloveDict", ",", "rightWords", ")", "\n", "wordIdsEntities", "=", "map", "(", "gloveDict", ",", "entityWords", ")", "\n", "\n", "\n", "ret", "[", "'sentence_glove_rightpad'", "]", "=", "int64Arr", "(", "padList", "(", "wordids", ",", "maxSentenceL", ",", "0", ",", "'right'", ")", ")", "\n", "ret", "[", "'sentence_left_glove_rightpad'", "]", "=", "int64Arr", "(", "padList", "(", "wordIdsLeft", ",", "maxSentenceL", ",", "0", ",", "'right'", ")", ")", "\n", "ret", "[", "'sentence_right_glove_rightpad'", "]", "=", "int64Arr", "(", "padList", "(", "wordIdsRight", "[", ":", ":", "-", "1", "]", ",", "maxSentenceL", ",", "0", ",", "'right'", ")", ")", "\n", "\n", "ret", "[", "'sentence_right_len'", "]", "=", "len", "(", "wordIdsRight", ")", "\n", "ret", "[", "'sentence_left_len'", "]", "=", "len", "(", "wordIdsLeft", ")", "\n", "\n", "ret", "[", "'sentence_entity_glove_rightpad'", "]", "=", "int64Arr", "(", "padList", "(", "wordIdsEntities", ",", "20", ",", "0", ",", "'right'", ")", ")", "\n", "ret", "[", "'sentence_entity_len'", "]", "=", "len", "(", "wordIdsEntities", ")", "\n", "\n", "\n", "ret", "[", "'sentiment_onehot'", "]", "=", "floatArr", "(", "oneHotVec", "(", "sentiment", "+", "1", ",", "3", ")", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.regex_or": [[30, 32], ["None"], "function", ["None"], ["def", "regex_or", "(", "*", "items", ")", ":", "\n", "    ", "return", "'(?:'", "+", "'|'", ".", "join", "(", "items", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.splitEdgePunct": [[200, 204], ["EdgePunctLeft.sub", "EdgePunctRight.sub"], "function", ["None"], ["def", "splitEdgePunct", "(", "input", ")", ":", "\n", "    ", "input", "=", "EdgePunctLeft", ".", "sub", "(", "r\"\\1\\2 \\3\"", ",", "input", ")", "\n", "input", "=", "EdgePunctRight", ".", "sub", "(", "r\"\\1 \\2\\3\"", ",", "input", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.simpleTokenize": [[206, 263], ["twtokenize.splitEdgePunct", "len", "Protected.finditer", "indices.append", "range", "range", "twtokenize.addAllnonempty", "indices.append", "indices.append", "len", "goodstr.strip().split", "splitGoods.append", "len", "twtokenize.addAllnonempty", "twtokenize.addAllnonempty", "match.start", "match.end", "bads.append", "badSpans.append", "goodstr.strip", "len", "match.start", "match.end", "match.start", "match.end"], "function", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.splitEdgePunct", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.addAllnonempty", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.addAllnonempty", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.addAllnonempty"], ["", "def", "simpleTokenize", "(", "text", ")", ":", "\n", "\n", "# Do the no-brainers first", "\n", "    ", "splitPunctText", "=", "splitEdgePunct", "(", "text", ")", "\n", "\n", "textLength", "=", "len", "(", "splitPunctText", ")", "\n", "\n", "# BTO: the logic here got quite convoluted via the Scala porting detour", "\n", "# It would be good to switch back to a nice simple procedural style like in the Python version", "\n", "# ... Scala is such a pain.  Never again.", "\n", "\n", "# Find the matches for subsequences that should be protected,", "\n", "# e.g. URLs, 1.0, U.N.K.L.E., 12:53", "\n", "bads", "=", "[", "]", "\n", "badSpans", "=", "[", "]", "\n", "for", "match", "in", "Protected", ".", "finditer", "(", "splitPunctText", ")", ":", "\n", "# The spans of the \"bads\" should not be split.", "\n", "        ", "if", "(", "match", ".", "start", "(", ")", "!=", "match", ".", "end", "(", ")", ")", ":", "#unnecessary?", "\n", "            ", "bads", ".", "append", "(", "[", "splitPunctText", "[", "match", ".", "start", "(", ")", ":", "match", ".", "end", "(", ")", "]", "]", ")", "\n", "badSpans", ".", "append", "(", "(", "match", ".", "start", "(", ")", ",", "match", ".", "end", "(", ")", ")", ")", "\n", "\n", "# Create a list of indices to create the \"goods\", which can be", "\n", "# split. We are taking \"bad\" spans like ", "\n", "#     List((2,5), (8,10)) ", "\n", "# to create ", "\n", "#     List(0, 2, 5, 8, 10, 12)", "\n", "# where, e.g., \"12\" here would be the textLength", "\n", "# has an even length and no indices are the same", "\n", "", "", "indices", "=", "[", "0", "]", "\n", "for", "(", "first", ",", "second", ")", "in", "badSpans", ":", "\n", "        ", "indices", ".", "append", "(", "first", ")", "\n", "indices", ".", "append", "(", "second", ")", "\n", "", "indices", ".", "append", "(", "textLength", ")", "\n", "\n", "# Group the indices and map them to their respective portion of the string", "\n", "splitGoods", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "indices", ")", ",", "2", ")", ":", "\n", "        ", "goodstr", "=", "splitPunctText", "[", "indices", "[", "i", "]", ":", "indices", "[", "i", "+", "1", "]", "]", "\n", "splitstr", "=", "goodstr", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "splitGoods", ".", "append", "(", "splitstr", ")", "\n", "\n", "#  Reinterpolate the 'good' and 'bad' Lists, ensuring that", "\n", "#  additonal tokens from last good item get included", "\n", "", "zippedStr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bads", ")", ")", ":", "\n", "        ", "zippedStr", "=", "addAllnonempty", "(", "zippedStr", ",", "splitGoods", "[", "i", "]", ")", "\n", "zippedStr", "=", "addAllnonempty", "(", "zippedStr", ",", "bads", "[", "i", "]", ")", "\n", "", "zippedStr", "=", "addAllnonempty", "(", "zippedStr", ",", "splitGoods", "[", "len", "(", "bads", ")", "]", ")", "\n", "\n", "# BTO: our POS tagger wants \"ur\" and \"you're\" to both be one token.", "\n", "# Uncomment to get \"you 're\"", "\n", "#splitStr = []", "\n", "#for tok in zippedStr:", "\n", "#    splitStr.extend(splitToken(tok))", "\n", "#zippedStr = splitStr", "\n", "\n", "return", "zippedStr", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.addAllnonempty": [[264, 270], ["s.strip", "len", "master.append"], "function", ["None"], ["", "def", "addAllnonempty", "(", "master", ",", "smaller", ")", ":", "\n", "    ", "for", "s", "in", "smaller", ":", "\n", "        ", "strim", "=", "s", ".", "strip", "(", ")", "\n", "if", "(", "len", "(", "strim", ")", ">", "0", ")", ":", "\n", "            ", "master", ".", "append", "(", "strim", ")", "\n", "", "", "return", "master", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.squeezeWhitespace": [[272, 274], ["Whitespace.sub().strip", "Whitespace.sub"], "function", ["None"], ["", "def", "squeezeWhitespace", "(", "input", ")", ":", "\n", "    ", "return", "Whitespace", ".", "sub", "(", "\" \"", ",", "input", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.splitToken": [[276, 281], ["Contractions.search", "Contractions.search.group", "Contractions.search.group"], "function", ["None"], ["", "def", "splitToken", "(", "token", ")", ":", "\n", "    ", "m", "=", "Contractions", ".", "search", "(", "token", ")", "\n", "if", "m", ":", "\n", "        ", "return", "[", "m", ".", "group", "(", "1", ")", ",", "m", ".", "group", "(", "2", ")", "]", "\n", "", "return", "[", "token", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.tokenize": [[283, 285], ["twtokenize.simpleTokenize", "twtokenize.squeezeWhitespace"], "function", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.simpleTokenize", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.squeezeWhitespace"], ["", "def", "tokenize", "(", "text", ")", ":", "\n", "    ", "return", "simpleTokenize", "(", "squeezeWhitespace", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.normalizeTextForTagger": [[289, 293], ["HTMLParser.HTMLParser().unescape.replace", "HTMLParser.HTMLParser().unescape", "HTMLParser.HTMLParser"], "function", ["None"], ["", "def", "normalizeTextForTagger", "(", "text", ")", ":", "\n", "    ", "text", "=", "text", ".", "replace", "(", "\"&amp;\"", ",", "\"&\"", ")", "\n", "text", "=", "HTMLParser", ".", "HTMLParser", "(", ")", ".", "unescape", "(", "text", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.tokenizeRawTweetText": [[299, 302], ["twtokenize.tokenize", "twtokenize.normalizeTextForTagger"], "function", ["home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.tokenize", "home.repos.pwc.inspect_result.divamgupta_mtl_girnet.data_prep.twtokenize.normalizeTextForTagger"], ["", "def", "tokenizeRawTweetText", "(", "text", ")", ":", "\n", "    ", "tokens", "=", "tokenize", "(", "normalizeTextForTagger", "(", "text", ")", ")", "\n", "return", "tokens", "\n", "", ""]]}