{"home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.main.train": [[71, 135], ["enumerate", "data_generator.MiniImagenet", "os.path.exists", "os.makedirs", "range", "torch.stack().mean", "torch.stack().mean", "optimiser.zero_grad", "torch.stack().mean.backward", "optimiser.step", "data_generator.ISIC", "x_spt.squeeze().cuda", "y_spt.squeeze().cuda", "x_qry.squeeze().cuda", "y_qry.squeeze().cuda", "task_losses.append", "task_acc.append", "print", "torch.save", "data_generator.DermNet", "random.randint", "protonet", "torch.stack", "torch.stack", "protonet.learner.state_dict", "x_spt.squeeze", "y_spt.squeeze", "x_qry.squeeze", "y_qry.squeeze", "protonet.forward_crossmix", "protonet.forward_crossmix"], "function", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_crossmix", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_crossmix"], ["def", "train", "(", "args", ",", "protonet", ",", "optimiser", ")", ":", "\n", "    ", "Print_Iter", "=", "100", "\n", "Save_Iter", "=", "500", "\n", "print_loss", ",", "print_acc", "=", "0.0", ",", "0.0", "\n", "\n", "if", "args", ".", "datasource", "==", "'miniimagenet'", ":", "\n", "        ", "dataloader", "=", "MiniImagenet", "(", "args", ",", "'train'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'isic'", ":", "\n", "        ", "dataloader", "=", "ISIC", "(", "args", ",", "'train'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'dermnet'", ":", "\n", "        ", "dataloader", "=", "DermNet", "(", "args", ",", "'train'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "logdir", "+", "'/'", "+", "exp_string", "+", "'/'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "logdir", "+", "'/'", "+", "exp_string", "+", "'/'", ")", "\n", "\n", "", "for", "step", ",", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "step", ">", "args", ".", "metatrain_iterations", ":", "\n", "            ", "break", "\n", "\n", "", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "y_spt", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "x_qry", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "y_qry", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "task_losses", "=", "[", "]", "\n", "task_acc", "=", "[", "]", "\n", "\n", "for", "meta_batch", "in", "range", "(", "args", ".", "meta_batch_size", ")", ":", "\n", "            ", "if", "args", ".", "mix", ":", "\n", "                ", "mix_c", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "mix_c", "==", "1", ":", "\n", "                    ", "second_id", "=", "(", "meta_batch", "+", "1", ")", "%", "args", ".", "meta_batch_size", "\n", "loss_val", ",", "acc_val", "=", "protonet", ".", "forward_crossmix", "(", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "\n", "x_qry", "[", "meta_batch", "]", ",", "\n", "y_qry", "[", "meta_batch", "]", ",", "\n", "x_spt", "[", "second_id", "]", ",", "y_spt", "[", "second_id", "]", ",", "\n", "x_qry", "[", "second_id", "]", ",", "\n", "y_qry", "[", "second_id", "]", ")", "\n", "", "else", ":", "\n", "                    ", "loss_val", ",", "acc_val", "=", "protonet", ".", "forward_crossmix", "(", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "\n", "x_qry", "[", "meta_batch", "]", ",", "\n", "y_qry", "[", "meta_batch", "]", ",", "\n", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "\n", "x_qry", "[", "meta_batch", "]", ",", "\n", "y_qry", "[", "meta_batch", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "loss_val", ",", "acc_val", "=", "protonet", "(", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "x_qry", "[", "meta_batch", "]", ",", "y_qry", "[", "meta_batch", "]", ")", "\n", "", "task_losses", ".", "append", "(", "loss_val", ")", "\n", "task_acc", ".", "append", "(", "acc_val", ")", "\n", "\n", "", "meta_batch_loss", "=", "torch", ".", "stack", "(", "task_losses", ")", ".", "mean", "(", ")", "\n", "meta_batch_acc", "=", "torch", ".", "stack", "(", "task_acc", ")", ".", "mean", "(", ")", "\n", "\n", "optimiser", ".", "zero_grad", "(", ")", "\n", "meta_batch_loss", ".", "backward", "(", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "\n", "if", "step", "!=", "0", "and", "step", "%", "Print_Iter", "==", "0", ":", "\n", "            ", "print", "(", "'{}, {}, {}'", ".", "format", "(", "step", ",", "print_loss", ",", "print_acc", ")", ")", "\n", "print_loss", ",", "print_acc", "=", "0.0", ",", "0.0", "\n", "", "else", ":", "\n", "            ", "print_loss", "+=", "meta_batch_loss", "/", "Print_Iter", "\n", "print_acc", "+=", "meta_batch_acc", "/", "Print_Iter", "\n", "\n", "", "if", "step", "!=", "0", "and", "step", "%", "Save_Iter", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "protonet", ".", "learner", ".", "state_dict", "(", ")", ",", "\n", "'{0}/{2}/model{1}'", ".", "format", "(", "args", ".", "logdir", ",", "step", ",", "exp_string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.main.test": [[136, 166], ["protonet.eval", "enumerate", "numpy.array", "print", "data_generator.MiniImagenet", "data_generator.ISIC", "torch.no_grad", "protonet", "np.array.append", "numpy.mean", "data_generator.DermNet", "x_spt.to", "y_spt.to", "x_qry.to", "y_qry.to", "x_spt.squeeze().to", "y_spt.squeeze().to", "x_qry.squeeze().to", "y_qry.squeeze().to", "acc_val.item", "numpy.sqrt", "numpy.std", "x_spt.squeeze", "y_spt.squeeze", "x_qry.squeeze", "y_qry.squeeze"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "protonet", ")", ":", "\n", "    ", "protonet", ".", "eval", "(", ")", "\n", "res_acc", "=", "[", "]", "\n", "args", ".", "meta_batch_size", "=", "1", "\n", "\n", "if", "args", ".", "datasource", "==", "'miniimagenet'", ":", "\n", "        ", "dataloader", "=", "MiniImagenet", "(", "args", ",", "'test'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'isic'", ":", "\n", "        ", "dataloader", "=", "ISIC", "(", "args", ",", "'test'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'dermnet'", ":", "\n", "        ", "dataloader", "=", "DermNet", "(", "args", ",", "'test'", ")", "\n", "\n", "", "for", "step", ",", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "step", ">", "600", ":", "\n", "            ", "break", "\n", "", "if", "args", ".", "datasource", "in", "[", "'isic'", ",", "'dermnet'", "]", ":", "\n", "            ", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "to", "(", "\"cuda\"", ")", ",", "y_spt", ".", "to", "(", "\"cuda\"", ")", ",", "x_qry", ".", "to", "(", "\"cuda\"", ")", ",", "y_qry", ".", "to", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "            ", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "squeeze", "(", "0", ")", ".", "to", "(", "\"cuda\"", ")", ",", "y_spt", ".", "squeeze", "(", "0", ")", ".", "to", "(", "\"cuda\"", ")", ",", "x_qry", ".", "squeeze", "(", "0", ")", ".", "to", "(", "\"cuda\"", ")", ",", "y_qry", ".", "squeeze", "(", "0", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "acc_val", "=", "protonet", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "\n", "res_acc", ".", "append", "(", "acc_val", ".", "item", "(", ")", ")", "\n", "\n", "", "", "res_acc", "=", "np", ".", "array", "(", "res_acc", ")", "\n", "\n", "print", "(", "'acc is {}, ci95 is {}'", ".", "format", "(", "np", ".", "mean", "(", "res_acc", ")", ",", "1.96", "*", "np", ".", "std", "(", "res_acc", ")", "/", "np", ".", "sqrt", "(", "\n", "600", "*", "args", ".", "meta_batch_size", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.main.main": [[168, 188], ["learner.Conv_Standard().cuda", "protonet.Protonet", "torch.optim.Adam", "print", "Conv_Standard().cuda.load_state_dict", "list", "main.train", "protonet.Protonet.learner.load_state_dict", "main.test", "learner.Conv_Standard", "torch.load", "Conv_Standard().cuda.parameters", "torch.load"], "function", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.main.train", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.main.test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "learner", "=", "Conv_Standard", "(", "args", "=", "args", ",", "x_dim", "=", "3", ",", "hid_dim", "=", "args", ".", "num_filters", ",", "z_dim", "=", "args", ".", "num_filters", ")", ".", "cuda", "(", ")", "\n", "\n", "protonet", "=", "Protonet", "(", "args", ",", "learner", ")", "\n", "\n", "if", "args", ".", "resume", "==", "1", "and", "args", ".", "train", "==", "1", ":", "\n", "        ", "model_file", "=", "'{0}/{2}/model{1}'", ".", "format", "(", "args", ".", "logdir", ",", "args", ".", "test_epoch", ",", "exp_string", ")", "\n", "print", "(", "model_file", ")", "\n", "learner", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_file", ")", ")", "\n", "\n", "", "meta_optimiser", "=", "torch", ".", "optim", ".", "Adam", "(", "list", "(", "learner", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "args", ".", "meta_lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "\n", "if", "args", ".", "train", "==", "1", ":", "\n", "        ", "train", "(", "args", ",", "protonet", ",", "meta_optimiser", ")", "\n", "", "else", ":", "\n", "        ", "model_file", "=", "'{0}/{2}/model{1}'", ".", "format", "(", "args", ".", "logdir", ",", "args", ".", "test_epoch", ",", "exp_string", ")", "\n", "protonet", ".", "learner", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_file", ")", ")", "\n", "test", "(", "args", ",", "protonet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.protonet.Protonet.__init__": [[10, 15], ["torch.Module.__init__", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "learner", ")", ":", "\n", "        ", "super", "(", "Protonet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "learner", "=", "learner", "\n", "self", ".", "dist", "=", "Beta", "(", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.protonet.Protonet.forward": [[16, 42], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "protonet.Protonet.learner", "protonet.Protonet.size", "z[].view().mean", "utils.euclidean_dist", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.log_softmax.max", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "z[].view", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist"], ["", "def", "forward", "(", "self", ",", "xs", ",", "ys", ",", "xq", ",", "yq", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "xs", ",", "xq", "]", ",", "0", ")", "\n", "\n", "z", "=", "self", ".", "learner", "(", "x", ")", "\n", "\n", "z_dim", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "\n", "z_proto", "=", "z", "[", ":", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", "]", ".", "view", "(", "self", ".", "args", ".", "num_classes", ",", "\n", "self", ".", "args", ".", "update_batch_size", ",", "z_dim", ")", ".", "mean", "(", "1", ")", "\n", "zq", "=", "z", "[", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", ":", "]", "\n", "\n", "dists", "=", "euclidean_dist", "(", "zq", ",", "z_proto", ")", "\n", "\n", "log_p_y", "=", "F", ".", "log_softmax", "(", "-", "dists", ",", "dim", "=", "1", ")", "\n", "\n", "loss_val", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size_eval", ")", ":", "\n", "            ", "loss_val", ".", "append", "(", "-", "log_p_y", "[", "i", ",", "yq", "[", "i", "]", "]", ")", "\n", "\n", "", "loss_val", "=", "torch", ".", "stack", "(", "loss_val", ")", ".", "squeeze", "(", ")", ".", "mean", "(", ")", "\n", "\n", "_", ",", "y_hat", "=", "log_p_y", ".", "max", "(", "1", ")", "\n", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "yq", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss_val", ",", "acc_val", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.protonet.Protonet.rand_bbox": [[43, 60], ["numpy.sqrt", "numpy.int", "numpy.int", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "lam.cpu"], "methods", ["None"], ["", "def", "rand_bbox", "(", "self", ",", "size", ",", "lam", ")", ":", "\n", "        ", "W", "=", "size", "[", "2", "]", "\n", "H", "=", "size", "[", "3", "]", "\n", "cut_rat", "=", "np", ".", "sqrt", "(", "1.", "-", "lam", ".", "cpu", "(", ")", ")", "\n", "cut_w", "=", "np", ".", "int", "(", "W", "*", "cut_rat", ")", "\n", "cut_h", "=", "np", ".", "int", "(", "H", "*", "cut_rat", ")", "\n", "\n", "# uniform", "\n", "cx", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "\n", "bbx1", "=", "np", ".", "clip", "(", "cx", "-", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby1", "=", "np", ".", "clip", "(", "cy", "-", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "bbx2", "=", "np", ".", "clip", "(", "cx", "+", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby2", "=", "np", ".", "clip", "(", "cy", "+", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "\n", "return", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.protonet.Protonet.mixup_data": [[61, 70], ["xq.clone", "protonet.Protonet.rand_bbox", "xq.size", "xq.size", "xq.size"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.protonet.Protonet.rand_bbox"], ["", "def", "mixup_data", "(", "self", ",", "xs", ",", "xq", ",", "lam", ")", ":", "\n", "        ", "mixed_x", "=", "xq", ".", "clone", "(", ")", "\n", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "=", "self", ".", "rand_bbox", "(", "xq", ".", "size", "(", ")", ",", "lam", ")", "\n", "\n", "mixed_x", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "=", "xs", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "\n", "\n", "lam", "=", "1", "-", "(", "(", "bbx2", "-", "bbx1", ")", "*", "(", "bby2", "-", "bby1", ")", "/", "(", "xq", ".", "size", "(", ")", "[", "-", "1", "]", "*", "xq", ".", "size", "(", ")", "[", "-", "2", "]", ")", ")", "\n", "\n", "return", "mixed_x", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.protonet.Protonet.forward_crossmix": [[71, 116], ["protonet.Protonet.dist.sample().to", "numpy.arange", "numpy.random.shuffle", "numpy.array().flatten", "numpy.array().flatten", "protonet.Protonet.mixup_data", "protonet.Protonet.mixup_data", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "protonet.Protonet.learner", "protonet.Protonet.size", "z[].view().mean", "utils.euclidean_dist", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.log_softmax.max", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "protonet.Protonet.dist.sample", "numpy.array", "numpy.array", "z[].view", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "numpy.arange", "range", "numpy.arange", "range"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.mixup_data", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.mixup_data", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist"], ["", "def", "forward_crossmix", "(", "self", ",", "x1s", ",", "y1s", ",", "x1q", ",", "y1q", ",", "x2s", ",", "y2s", ",", "x2q", ",", "y2q", ")", ":", "\n", "        ", "lam_mix", "=", "self", ".", "dist", ".", "sample", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "task_2_shuffle_id", "=", "np", ".", "arange", "(", "self", ".", "args", ".", "num_classes", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "task_2_shuffle_id", ")", "\n", "task_2_shuffle_id_s", "=", "np", ".", "array", "(", "\n", "[", "np", ".", "arange", "(", "self", ".", "args", ".", "update_batch_size", ")", "+", "task_2_shuffle_id", "[", "idx", "]", "*", "self", ".", "args", ".", "update_batch_size", "for", "idx", "in", "\n", "range", "(", "self", ".", "args", ".", "num_classes", ")", "]", ")", ".", "flatten", "(", ")", "\n", "task_2_shuffle_id_q", "=", "np", ".", "array", "(", "\n", "[", "np", ".", "arange", "(", "self", ".", "args", ".", "update_batch_size_eval", ")", "+", "task_2_shuffle_id", "[", "idx", "]", "*", "self", ".", "args", ".", "update_batch_size_eval", "for", "\n", "idx", "in", "range", "(", "self", ".", "args", ".", "num_classes", ")", "]", ")", ".", "flatten", "(", ")", "\n", "\n", "x2s", "=", "x2s", "[", "task_2_shuffle_id_s", "]", "\n", "x2q", "=", "x2q", "[", "task_2_shuffle_id_q", "]", "\n", "\n", "x_mix_s", ",", "_", "=", "self", ".", "mixup_data", "(", "x1s", ",", "x2s", ",", "lam_mix", ")", "\n", "\n", "x_mix_q", ",", "_", "=", "self", ".", "mixup_data", "(", "x1q", ",", "x2q", ",", "lam_mix", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x_mix_s", ",", "x_mix_q", "]", ",", "0", ")", "\n", "\n", "z", "=", "self", ".", "learner", "(", "x", ")", "\n", "\n", "z_dim", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "\n", "z_proto", "=", "z", "[", ":", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", "]", ".", "view", "(", "self", ".", "args", ".", "num_classes", ",", "\n", "self", ".", "args", ".", "update_batch_size", ",", "z_dim", ")", ".", "mean", "(", "\n", "1", ")", "\n", "zq", "=", "z", "[", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", ":", "]", "\n", "\n", "dists", "=", "euclidean_dist", "(", "zq", ",", "z_proto", ")", "\n", "\n", "log_p_y", "=", "F", ".", "log_softmax", "(", "-", "dists", ",", "dim", "=", "1", ")", "\n", "\n", "loss_val", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size_eval", ")", ":", "\n", "            ", "loss_val", ".", "append", "(", "-", "log_p_y", "[", "i", ",", "y1q", "[", "i", "]", "]", ")", "\n", "\n", "", "loss_val", "=", "torch", ".", "stack", "(", "loss_val", ")", ".", "squeeze", "(", ")", ".", "mean", "(", ")", "\n", "\n", "_", ",", "y_hat", "=", "log_p_y", ".", "max", "(", "1", ")", "\n", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "y1q", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss_val", ",", "acc_val", "", "", "", ""]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.data_generator.DermNet.__init__": [[15, 42], ["torch.utils.data.Dataset.__init__", "pickle.load", "sorted", "data_generator.DermNet.data.keys", "open", "int", "print", "torch.tensor", "numpy.transpose", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "mode", ")", ":", "\n", "        ", "super", "(", "DermNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "nb_classes", "=", "args", ".", "num_classes", "\n", "self", ".", "nb_samples_per_class", "=", "args", ".", "update_batch_size", "+", "args", ".", "update_batch_size_eval", "\n", "self", ".", "n_way", "=", "args", ".", "num_classes", "\n", "self", ".", "k_shot", "=", "args", ".", "update_batch_size", "\n", "self", ".", "k_query", "=", "args", ".", "update_batch_size_eval", "\n", "self", ".", "set_size", "=", "self", ".", "n_way", "*", "self", ".", "k_shot", "\n", "self", ".", "query_size", "=", "self", ".", "n_way", "*", "self", ".", "k_query", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "data_file", "=", "'{}/DermNet/Dermnet_all_84.pkl'", ".", "format", "(", "args", ".", "datadir", ")", "\n", "\n", "self", ".", "data", "=", "pickle", ".", "load", "(", "open", "(", "self", ".", "data_file", ",", "'rb'", ")", ")", "\n", "num_data", "=", "[", "(", "eachkey", ",", "self", ".", "data", "[", "eachkey", "]", ".", "shape", "[", "0", "]", ")", "for", "eachkey", "in", "self", ".", "data", "]", "\n", "\n", "num_data", "=", "sorted", "(", "num_data", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "sel_class_num", "=", "int", "(", "self", ".", "args", ".", "ratio", "*", "150", ")", "\n", "print", "(", "sel_class_num", ")", "\n", "self", ".", "used_diseases", "=", "[", "eachid", "[", "0", "]", "for", "eachid", "in", "num_data", "[", ":", "sel_class_num", "]", "]", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "used_diseases", "=", "[", "eachid", "[", "0", "]", "for", "eachid", "in", "num_data", "[", "150", ":", "]", "]", "\n", "\n", "", "for", "eachkey", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "data", "[", "eachkey", "]", "=", "torch", ".", "tensor", "(", "np", ".", "transpose", "(", "self", ".", "data", "[", "eachkey", "]", "/", "np", ".", "float32", "(", "255", ")", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.data_generator.DermNet.__len__": [[43, 45], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "args", ".", "metatrain_iterations", "*", "self", ".", "args", ".", "meta_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.data_generator.DermNet.__getitem__": [[46, 101], ["numpy.array", "torch.FloatTensor", "torch.FloatTensor", "numpy.zeros", "numpy.zeros", "range", "torch.FloatTensor", "numpy.zeros", "numpy.random.choice", "torch.FloatTensor", "numpy.zeros", "range", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.zeros", "numpy.random.choice", "range", "torch.zeros", "sum", "torch.zeros", "sum", "numpy.arange", "numpy.random.shuffle", "numpy.arange", "numpy.random.shuffle", "range", "range", "range"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "classes_idx", "=", "np", ".", "array", "(", "self", ".", "used_diseases", ")", "\n", "\n", "if", "self", ".", "args", ".", "train", ":", "\n", "            ", "support_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "query_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "\n", "support_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", "]", ")", "\n", "query_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", "]", ")", "\n", "\n", "for", "meta_batch_id", "in", "range", "(", "self", ".", "args", ".", "meta_batch_size", ")", ":", "\n", "                ", "self", ".", "choose_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes_idx", ",", "size", "=", "self", ".", "nb_classes", ",", "replace", "=", "False", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", ":", "\n", "                    ", "self", ".", "samples_idx", "=", "np", ".", "arange", "(", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "samples_idx", ")", "\n", "choose_samples", "=", "self", ".", "samples_idx", "[", ":", "self", ".", "nb_samples_per_class", "]", "\n", "support_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", ":", "self", ".", "k_shot", "]", ",", "...", "]", "\n", "query_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", "self", ".", "k_shot", ":", "]", ",", "...", "]", "\n", "support_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "j", "\n", "query_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "j", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "support_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "set_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "support_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "set_size", "]", ")", "\n", "self", ".", "choose_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes_idx", ",", "size", "=", "self", ".", "nb_classes", ",", "replace", "=", "False", ")", "\n", "query_size_test", "=", "sum", "(", "[", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", "]", ")", "-", "self", ".", "set_size", "\n", "query_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "query_size_test", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "query_y", "=", "np", ".", "zeros", "(", "[", "query_size_test", "]", ")", "\n", "\n", "split_loc_pre", "=", "[", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", "-", "self", ".", "k_shot", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", "]", "\n", "\n", "query_split_loc_list", "=", "[", "sum", "(", "split_loc_pre", "[", ":", "j", "]", ")", "for", "j", "in", "range", "(", "self", ".", "nb_classes", "+", "1", ")", "]", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", ":", "\n", "                ", "self", ".", "samples_idx", "=", "np", ".", "arange", "(", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "samples_idx", ")", "\n", "choose_samples", "=", "self", ".", "samples_idx", "\n", "# idx1 = idx[0:self.k_shot + self.k_query]", "\n", "support_x", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", ":", "self", ".", "k_shot", "]", ",", "...", "]", "\n", "support_y", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "j", "\n", "\n", "query_x", "[", "query_split_loc_list", "[", "j", "]", ":", "query_split_loc_list", "[", "j", "+", "1", "]", "]", "=", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", "[", "\n", "choose_samples", "[", "self", ".", "k_shot", ":", "]", ",", "...", "]", "\n", "query_y", "[", "query_split_loc_list", "[", "j", "]", ":", "query_split_loc_list", "[", "j", "+", "1", "]", "]", "=", "j", "\n", "\n", "", "", "return", "support_x", ",", "torch", ".", "LongTensor", "(", "support_y", ")", ",", "query_x", ",", "torch", ".", "LongTensor", "(", "query_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.data_generator.ISIC.__init__": [[105, 125], ["torch.utils.data.Dataset.__init__", "pickle.load", "data_generator.ISIC.data.keys", "open", "torch.tensor", "numpy.transpose", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "mode", ")", ":", "\n", "        ", "super", "(", "ISIC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "nb_classes", "=", "args", ".", "num_classes", "\n", "self", ".", "nb_samples_per_class", "=", "args", ".", "update_batch_size", "+", "args", ".", "update_batch_size_eval", "\n", "self", ".", "n_way", "=", "args", ".", "num_classes", "\n", "self", ".", "k_shot", "=", "args", ".", "update_batch_size", "\n", "self", ".", "k_query", "=", "args", ".", "update_batch_size_eval", "\n", "self", ".", "set_size", "=", "self", ".", "n_way", "*", "self", ".", "k_shot", "\n", "self", ".", "query_size", "=", "self", ".", "n_way", "*", "self", ".", "k_query", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "data_file", "=", "'{}/ISIC/ISIC_train.pkl'", ".", "format", "(", "args", ".", "datadir", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "data_file", "=", "'{}/ISIC/ISIC_test.pkl'", ".", "format", "(", "args", ".", "datadir", ")", "\n", "\n", "", "self", ".", "data", "=", "pickle", ".", "load", "(", "open", "(", "self", ".", "data_file", ",", "'rb'", ")", ")", "\n", "\n", "for", "eachkey", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "data", "[", "eachkey", "]", "=", "torch", ".", "tensor", "(", "np", ".", "transpose", "(", "self", ".", "data", "[", "eachkey", "]", "/", "np", ".", "float32", "(", "255", ")", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.data_generator.ISIC.__len__": [[126, 128], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "args", ".", "metatrain_iterations", "*", "self", ".", "args", ".", "meta_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.data_generator.ISIC.__getitem__": [[129, 190], ["numpy.array", "list", "torch.FloatTensor", "torch.FloatTensor", "numpy.zeros", "numpy.zeros", "range", "torch.FloatTensor", "numpy.zeros", "numpy.random.choice", "torch.FloatTensor", "numpy.zeros", "range", "torch.LongTensor", "torch.LongTensor", "data_generator.ISIC.data.keys", "torch.zeros", "torch.zeros", "numpy.random.choice", "range", "torch.zeros", "torch.zeros", "numpy.arange", "numpy.random.shuffle", "numpy.arange", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "classes_idx", "=", "np", ".", "array", "(", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "train", ":", "\n", "            ", "support_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "query_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "\n", "support_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", "]", ")", "\n", "query_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", "]", ")", "\n", "\n", "for", "meta_batch_id", "in", "range", "(", "self", ".", "args", ".", "meta_batch_size", ")", ":", "\n", "                ", "self", ".", "choose_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes_idx", ",", "size", "=", "self", ".", "nb_classes", ",", "replace", "=", "False", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", ":", "\n", "                    ", "self", ".", "samples_idx", "=", "np", ".", "arange", "(", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "samples_idx", ")", "\n", "choose_samples", "=", "self", ".", "samples_idx", "[", ":", "self", ".", "nb_samples_per_class", "]", "\n", "# idx1 = idx[0:self.k_shot + self.k_query]", "\n", "support_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", ":", "self", ".", "k_shot", "]", ",", "...", "]", "\n", "query_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", "self", ".", "k_shot", ":", "]", ",", "...", "]", "\n", "support_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "j", "\n", "query_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "j", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "support_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "set_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "support_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "set_size", "]", ")", "\n", "self", ".", "choose_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes_idx", ",", "size", "=", "self", ".", "nb_classes", ",", "replace", "=", "False", ")", "\n", "query_size_test", "=", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "+", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "1", "]", "]", ".", "shape", "[", "\n", "0", "]", "-", "self", ".", "set_size", "\n", "# print(query_size_test, self.data[self.choose_classes[0]].shape[0], self.data[self.choose_classes[1]].shape[0])", "\n", "query_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "query_size_test", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "query_y", "=", "np", ".", "zeros", "(", "[", "query_size_test", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", ":", "\n", "                ", "self", ".", "samples_idx", "=", "np", ".", "arange", "(", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "samples_idx", ")", "\n", "choose_samples", "=", "self", ".", "samples_idx", "\n", "# idx1 = idx[0:self.k_shot + self.k_query]", "\n", "support_x", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", ":", "self", ".", "k_shot", "]", ",", "...", "]", "\n", "support_y", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "j", "\n", "\n", "query_split_loc", "=", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "0", "]", "]", ".", "shape", "[", "0", "]", "-", "self", ".", "k_shot", "\n", "\n", "if", "j", "==", "0", ":", "\n", "                    ", "query_x", "[", ":", "query_split_loc", "]", "=", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "0", "]", "]", "[", "\n", "choose_samples", "[", "self", ".", "k_shot", ":", "]", ",", "...", "]", "\n", "query_y", "[", ":", "query_split_loc", "]", "=", "j", "\n", "", "else", ":", "\n", "                    ", "query_x", "[", "query_split_loc", ":", "]", "=", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "1", "]", "]", "[", "\n", "choose_samples", "[", "self", ".", "k_shot", ":", "]", ",", "...", "]", "\n", "query_y", "[", "query_split_loc", ":", "]", "=", "j", "\n", "\n", "", "", "", "return", "support_x", ",", "torch", ".", "LongTensor", "(", "support_y", ")", ",", "query_x", ",", "torch", ".", "LongTensor", "(", "query_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.data_generator.MiniImagenet.__init__": [[193, 220], ["torch.utils.data.Dataset.__init__", "pickle.load", "numpy.array", "int", "torch.tensor", "open", "numpy.transpose", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "mode", ")", ":", "\n", "        ", "super", "(", "MiniImagenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "nb_classes", "=", "args", ".", "num_classes", "\n", "self", ".", "nb_samples_per_class", "=", "args", ".", "update_batch_size", "+", "args", ".", "update_batch_size_eval", "\n", "self", ".", "n_way", "=", "args", ".", "num_classes", "# n-way", "\n", "self", ".", "k_shot", "=", "args", ".", "update_batch_size", "# k-shot", "\n", "self", ".", "k_query", "=", "args", ".", "update_batch_size_eval", "# for evaluation", "\n", "self", ".", "set_size", "=", "self", ".", "n_way", "*", "self", ".", "k_shot", "# num of samples per set", "\n", "self", ".", "query_size", "=", "self", ".", "n_way", "*", "self", ".", "k_query", "# number of samples per set for evaluation", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "data_file", "=", "'{}/miniImagenet/mini_imagenet_train.pkl'", ".", "format", "(", "args", ".", "datadir", ")", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "self", ".", "data_file", "=", "'{}/miniImagenet/mini_imagenet_val.pkl'", ".", "format", "(", "args", ".", "datadir", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "data_file", "=", "'{}/miniImagenet/mini_imagenet_test.pkl'", ".", "format", "(", "args", ".", "datadir", ")", "\n", "\n", "", "self", ".", "data", "=", "pickle", ".", "load", "(", "open", "(", "self", ".", "data_file", ",", "'rb'", ")", ")", "\n", "\n", "self", ".", "all_train_classes", "=", "np", ".", "array", "(", "[", "26", ",", "59", ",", "14", ",", "16", ",", "17", ",", "52", ",", "8", ",", "39", ",", "46", ",", "32", ",", "20", ",", "57", ",", "34", ",", "25", ",", "63", ",", "31", ",", "30", ",", "\n", "40", ",", "0", ",", "43", ",", "7", ",", "33", ",", "12", ",", "6", ",", "22", ",", "23", ",", "49", ",", "50", ",", "15", ",", "13", ",", "51", ",", "10", ",", "24", ",", "27", ",", "\n", "47", ",", "55", ",", "9", ",", "5", ",", "18", ",", "36", ",", "44", ",", "35", ",", "4", ",", "21", ",", "61", ",", "42", ",", "11", ",", "3", ",", "45", ",", "58", ",", "60", ",", "\n", "56", ",", "1", ",", "28", ",", "48", ",", "54", ",", "37", ",", "19", ",", "62", ",", "41", ",", "38", ",", "2", ",", "53", ",", "29", "]", ")", "\n", "self", ".", "num_train_use_class", "=", "int", "(", "64", "*", "self", ".", "args", ".", "ratio", ")", "\n", "\n", "self", ".", "data", "=", "torch", ".", "tensor", "(", "np", ".", "transpose", "(", "self", ".", "data", "/", "np", ".", "float32", "(", "255", ")", ",", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.data_generator.MiniImagenet.__len__": [[223, 225], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "args", ".", "metatrain_iterations", "*", "self", ".", "args", ".", "meta_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.data_generator.MiniImagenet.__getitem__": [[226, 258], ["numpy.arange", "torch.FloatTensor", "torch.FloatTensor", "numpy.zeros", "numpy.zeros", "range", "numpy.arange", "torch.zeros", "torch.zeros", "numpy.random.choice", "range", "torch.LongTensor", "torch.LongTensor", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "classes_idx", "=", "self", ".", "all_train_classes", "[", ":", "self", ".", "num_train_use_class", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "classes_idx", "=", "np", ".", "arange", "(", "self", ".", "data", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# ipdb.set_trace()", "\n", "", "self", ".", "samples_idx", "=", "np", ".", "arange", "(", "self", ".", "data", ".", "shape", "[", "1", "]", ")", "\n", "\n", "support_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "query_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "\n", "support_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", "]", ")", "\n", "query_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", "]", ")", "\n", "\n", "for", "meta_batch_id", "in", "range", "(", "self", ".", "args", ".", "meta_batch_size", ")", ":", "\n", "            ", "self", ".", "choose_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes_idx", ",", "size", "=", "self", ".", "nb_classes", ",", "replace", "=", "False", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "samples_idx", ")", "\n", "choose_samples", "=", "self", ".", "samples_idx", "[", ":", "self", ".", "nb_samples_per_class", "]", "\n", "support_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", ",", "choose_samples", "[", "\n", ":", "self", ".", "k_shot", "]", ",", "...", "]", "\n", "query_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", ",", "choose_samples", "[", "\n", "self", ".", "k_shot", ":", "]", ",", "...", "]", "\n", "support_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "j", "\n", "query_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "j", "\n", "\n", "", "", "return", "support_x", ",", "torch", ".", "LongTensor", "(", "support_y", ")", ",", "query_x", ",", "torch", ".", "LongTensor", "(", "query_y", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.utils.euclidean_dist": [[3, 15], ["x.unsqueeze().expand.size", "y.unsqueeze().expand.size", "x.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand", "torch.pow().sum", "y.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze", "torch.pow"], "function", ["None"], ["def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "# x: N x D", "\n", "# y: M x D", "\n", "    ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "m", "=", "y", ".", "size", "(", "0", ")", "\n", "d", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "d", "==", "y", ".", "size", "(", "1", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "\n", "return", "torch", ".", "pow", "(", "x", "-", "y", ",", "2", ")", ".", "sum", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.utils.accuracy": [[16, 29], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "", "", ""]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.learner.Flatten.__init__": [[6, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.learner.Flatten.forward": [[9, 11], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.learner.Conv_Standard.__init__": [[19, 26], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.distributions.Beta", "torch.distributions.Beta", "learner.Conv_Standard.conv_block", "learner.Conv_Standard.conv_block", "learner.Conv_Standard.conv_block", "learner.Conv_Standard.conv_block", "learner.Flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__", "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Conv_Standard.conv_block", "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Conv_Standard.conv_block", "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Conv_Standard.conv_block", "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Conv_Standard.conv_block"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "x_dim", ",", "hid_dim", ",", "z_dim", ")", ":", "\n", "        ", "super", "(", "Conv_Standard", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "self", ".", "conv_block", "(", "x_dim", ",", "hid_dim", ")", ",", "self", ".", "conv_block", "(", "hid_dim", ",", "hid_dim", ")", ",", "\n", "self", ".", "conv_block", "(", "hid_dim", ",", "hid_dim", ")", ",", "self", ".", "conv_block", "(", "hid_dim", ",", "z_dim", ")", ",", "Flatten", "(", ")", ")", "\n", "self", ".", "dist", "=", "Beta", "(", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "hid_dim", "=", "hid_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.learner.Conv_Standard.conv_block": [[27, 33], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["None"], ["", "def", "conv_block", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.learner.Conv_Standard.forward": [[35, 37], ["learner.Conv_Standard.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Image_NLS.learner.conv3x3": [[13, 16], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.main.train": [[55, 111], ["data_generator.TM", "enumerate", "os.path.exists", "os.makedirs", "range", "torch.stack().mean", "torch.stack().mean", "optimiser.zero_grad", "torch.stack().mean.backward", "optimiser.step", "x_spt.squeeze().cuda", "y_spt.squeeze().cuda", "x_qry.squeeze().cuda", "y_qry.squeeze().cuda", "task_losses.append", "task_acc.append", "print", "torch.save", "random.randint", "protonet", "loss_val.squeeze", "torch.stack", "torch.stack", "protonet.state_dict", "x_spt.squeeze", "y_spt.squeeze", "x_qry.squeeze", "y_qry.squeeze", "protonet.forward_crossmix", "protonet.forward_within"], "function", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_crossmix", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_within"], ["exp_string", "=", "'ProtoNet_Cross'", "+", "'.data_'", "+", "str", "(", "args", ".", "datasource", ")", "+", "'.cls_'", "+", "str", "(", "args", ".", "num_classes", ")", "+", "'.mbs_'", "+", "str", "(", "\n", "args", ".", "meta_batch_size", ")", "+", "'.ubs_'", "+", "str", "(", "\n", "args", ".", "update_batch_size", ")", "+", "'.metalr'", "+", "str", "(", "args", ".", "meta_lr", ")", "\n", "\n", "if", "args", ".", "num_filters", "!=", "64", ":", "\n", "    ", "exp_string", "+=", "'.hidden'", "+", "str", "(", "args", ".", "num_filters", ")", "\n", "", "if", "args", ".", "mix", ":", "\n", "    ", "exp_string", "+=", "'.mix'", "\n", "", "if", "args", ".", "trial", ">", "0", ":", "\n", "    ", "exp_string", "+=", "'.trial{}'", ".", "format", "(", "args", ".", "trial", ")", "\n", "", "if", "args", ".", "ratio", "<", "1.0", ":", "\n", "    ", "exp_string", "+=", "'.ratio{}'", ".", "format", "(", "args", ".", "ratio", ")", "\n", "\n", "", "print", "(", "exp_string", ")", "\n", "\n", "\n", "def", "train", "(", "args", ",", "protonet", ",", "optimiser", ")", ":", "\n", "    ", "Print_Iter", "=", "100", "\n", "Save_Iter", "=", "500", "\n", "print_loss", ",", "print_acc", "=", "0.0", ",", "0.0", "\n", "\n", "if", "args", ".", "datasource", "==", "'miniimagenet'", ":", "\n", "        ", "dataloader", "=", "MiniImagenet", "(", "args", ",", "'train'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'isic'", ":", "\n", "        ", "dataloader", "=", "ISIC", "(", "args", ",", "'train'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'dermnet'", ":", "\n", "        ", "dataloader", "=", "DermNet", "(", "args", ",", "'train'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "logdir", "+", "'/'", "+", "exp_string", "+", "'/'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "logdir", "+", "'/'", "+", "exp_string", "+", "'/'", ")", "\n", "\n", "", "for", "step", ",", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "step", ">", "args", ".", "metatrain_iterations", ":", "\n", "            ", "break", "\n", "\n", "", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "y_spt", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "x_qry", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "y_qry", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "task_losses", "=", "[", "]", "\n", "task_acc", "=", "[", "]", "\n", "\n", "for", "meta_batch", "in", "range", "(", "args", ".", "meta_batch_size", ")", ":", "\n", "            ", "if", "args", ".", "mix", ":", "\n", "                ", "mix_c", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "mix_c", "==", "1", ":", "\n", "                    ", "second_id", "=", "(", "meta_batch", "+", "1", ")", "%", "args", ".", "meta_batch_size", "\n", "loss_val", ",", "acc_val", "=", "protonet", ".", "forward_crossmix", "(", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "\n", "x_qry", "[", "meta_batch", "]", ",", "\n", "y_qry", "[", "meta_batch", "]", ",", "\n", "x_spt", "[", "second_id", "]", ",", "y_spt", "[", "second_id", "]", ",", "\n", "x_qry", "[", "second_id", "]", ",", "\n", "y_qry", "[", "second_id", "]", ")", "\n", "", "else", ":", "\n", "                    ", "loss_val", ",", "acc_val", "=", "protonet", ".", "forward_crossmix", "(", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "\n", "x_qry", "[", "meta_batch", "]", ",", "\n", "y_qry", "[", "meta_batch", "]", ",", "\n", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "\n", "x_qry", "[", "meta_batch", "]", ",", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.main.test": [[113, 131], ["protonet.eval", "data_generator.TM", "enumerate", "numpy.array", "print", "protonet", "np.array.append", "x_spt.squeeze().to", "y_spt.squeeze().to", "x_qry.squeeze().to", "y_qry.squeeze().to", "acc_val.item", "numpy.mean", "numpy.sqrt", "x_spt.squeeze", "y_spt.squeeze", "x_qry.squeeze", "y_qry.squeeze", "numpy.std"], "function", ["None"], ["", "", "else", ":", "\n", "                ", "loss_val", ",", "acc_val", "=", "protonet", "(", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "x_qry", "[", "meta_batch", "]", ",", "y_qry", "[", "meta_batch", "]", ")", "\n", "", "task_losses", ".", "append", "(", "loss_val", ")", "\n", "task_acc", ".", "append", "(", "acc_val", ")", "\n", "\n", "", "meta_batch_loss", "=", "torch", ".", "stack", "(", "task_losses", ")", ".", "mean", "(", ")", "\n", "meta_batch_acc", "=", "torch", ".", "stack", "(", "task_acc", ")", ".", "mean", "(", ")", "\n", "\n", "optimiser", ".", "zero_grad", "(", ")", "\n", "meta_batch_loss", ".", "backward", "(", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "\n", "if", "step", "!=", "0", "and", "step", "%", "Print_Iter", "==", "0", ":", "\n", "            ", "print", "(", "'{}, {}, {}'", ".", "format", "(", "step", ",", "print_loss", ",", "print_acc", ")", ")", "\n", "print_loss", ",", "print_acc", "=", "0.0", ",", "0.0", "\n", "", "else", ":", "\n", "            ", "print_loss", "+=", "meta_batch_loss", "/", "Print_Iter", "\n", "print_acc", "+=", "meta_batch_acc", "/", "Print_Iter", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.main.main": [[133, 150], ["protonet.Protonet().cuda", "torch.optim.Adam", "print", "Protonet().cuda.load_state_dict", "list", "main.train", "Protonet().cuda.load_state_dict", "main.test", "protonet.Protonet", "torch.load", "Protonet().cuda.parameters", "torch.load"], "function", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.main.train", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.main.test"], ["            ", "torch", ".", "save", "(", "protonet", ".", "learner", ".", "state_dict", "(", ")", ",", "\n", "'{0}/{2}/model{1}'", ".", "format", "(", "args", ".", "logdir", ",", "step", ",", "exp_string", ")", ")", "\n", "\n", "", "", "", "def", "test", "(", "args", ",", "protonet", ")", ":", "\n", "    ", "protonet", ".", "eval", "(", ")", "\n", "res_acc", "=", "[", "]", "\n", "args", ".", "meta_batch_size", "=", "1", "\n", "\n", "if", "args", ".", "datasource", "==", "'miniimagenet'", ":", "\n", "        ", "dataloader", "=", "MiniImagenet", "(", "args", ",", "'test'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'isic'", ":", "\n", "        ", "dataloader", "=", "ISIC", "(", "args", ",", "'test'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'dermnet'", ":", "\n", "        ", "dataloader", "=", "DermNet", "(", "args", ",", "'test'", ")", "\n", "\n", "", "for", "step", ",", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "step", ">", "600", ":", "\n", "            ", "break", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.prepare_GO_data": [[17, 49], ["goatools.obo_parser.GODag", "set", "obo_parser.GODag.update_association", "map_GO.reverse_association", "print", "len", "map_GO.check_conditions", "len", "gene2go.keys", "obo_parser.GODag.get"], "function", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.reverse_association", "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.check_conditions"], ["def", "prepare_GO_data", "(", "adata", ",", "gene2go", ",", "GO_file", ",", "GO_min_genes", "=", "500", ",", "GO_max_genes", "=", "None", ",", "GO_min_level", "=", "3", ",", "GO_max_level", "=", "3", ")", ":", "\n", "    ", "\"\"\"\n    Preprocesses data .\n    GO terms are propagated to all parents categories so all GO terms satisfying conditions of \n    min and max genes are included.\n    gene2go: mapping of gene IDs to GO terms\n    count_data: anndata object containing raw count data\n    GO_file: GO ontology obo file\n    GO_min_genes: minimum number of genes assigned to GO required to keep GO term (default: 500)\n    GO_max_genes: maximum number of genes assigned to GO required to keep GO term (default: None)\n    GO_min_level: minimum level required to keep GO term (default: 3)\n    npcs: number of principal components\n    annotations: dictionary containing cell annotations (default: None)\n    return: dictionary of GO terms with processed anndata object with calculated knn graph\n            of only genes belonging to that GO term\n    \"\"\"", "\n", "GOdag", "=", "obo_parser", ".", "GODag", "(", "obo_file", "=", "GO_file", ")", "\n", "genes", "=", "set", "(", "adata", ".", "var_names", ")", "\n", "\n", "gene2go", "=", "{", "g", ":", "gene2go", "[", "g", "]", "for", "g", "in", "gene2go", ".", "keys", "(", ")", "if", "g", "in", "genes", "}", "\n", "GOdag", ".", "update_association", "(", "gene2go", ")", "# propagate through hierarchy", "\n", "go2gene", "=", "reverse_association", "(", "gene2go", ")", "\n", "# return go2gene", "\n", "filtered_go2gene", "=", "{", "}", "\n", "\n", "for", "GO", "in", "go2gene", ":", "\n", "        ", "ngenes", "=", "len", "(", "go2gene", "[", "GO", "]", ")", "\n", "if", "check_conditions", "(", "GOdag", ".", "get", "(", "GO", ")", ",", "ngenes", ",", "GO_min_genes", ",", "\n", "GO_max_genes", ",", "GO_min_level", ",", "GO_max_level", ")", ":", "\n", "            ", "filtered_go2gene", "[", "GO", "]", "=", "go2gene", "[", "GO", "]", "\n", "", "", "print", "(", "\"Num filtered GOs:\"", ",", "len", "(", "filtered_go2gene", ")", ")", "\n", "return", "filtered_go2gene", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.check_conditions": [[51, 67], ["None"], "function", ["None"], ["", "def", "check_conditions", "(", "GOterm", ",", "num_genes", ",", "min_genes", ",", "max_genes", ",", "min_level", ",", "max_level", ")", ":", "\n", "    ", "\"\"\"Check whether GO term satisfies required conditions.\"\"\"", "\n", "\n", "if", "min_genes", "!=", "None", ":", "\n", "        ", "if", "num_genes", "<", "min_genes", ":", "\n", "            ", "return", "False", "\n", "", "", "if", "max_genes", "!=", "None", ":", "\n", "        ", "if", "num_genes", ">", "max_genes", ":", "\n", "            ", "return", "False", "\n", "", "", "if", "min_level", "!=", "None", ":", "\n", "        ", "if", "GOterm", ".", "level", "<", "min_level", ":", "\n", "            ", "return", "False", "\n", "", "", "if", "min_level", "!=", "None", ":", "\n", "        ", "if", "GOterm", ".", "level", ">", "min_level", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.filter_cells": [[69, 78], ["scanpy.pp.filter_cells", "scanpy.pp.filter_cells"], "function", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.filter_cells", "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.filter_cells"], ["", "def", "filter_cells", "(", "adata", ",", "min_genes", "=", "501", ",", "min_counts", "=", "50001", ")", ":", "\n", "    ", "\"\"\"Removing cells which do not have min_genes and min_counts as done\n    in Tabula Muris preprocessing.\n    min_genes: minimum number of genes required to retain a cell\n    min_counts:  minimum number of counts required to retain a cell\n    \"\"\"", "\n", "sc", ".", "pp", ".", "filter_cells", "(", "adata", ",", "min_genes", "=", "min_genes", ")", "\n", "sc", ".", "pp", ".", "filter_cells", "(", "adata", ",", "min_counts", "=", "min_counts", ")", "\n", "return", "adata", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.remove_ERCC_genes": [[80, 89], ["enumerate", "enumerate", "g.startswith"], "function", ["None"], ["", "def", "remove_ERCC_genes", "(", "adata", ")", ":", "\n", "    ", "\"\"\"Removing ERCC genes as done in Tabula Muris preprocessing.\"\"\"", "\n", "genes", "=", "adata", ".", "var_names", "\n", "# remove genes starting with ERCC", "\n", "idx", "=", "[", "i", "for", "i", ",", "g", "in", "enumerate", "(", "genes", ")", "if", "not", "g", ".", "startswith", "(", "\"ERCC\"", ")", "]", "\n", "\n", "genes", "=", "[", "g", "for", "i", ",", "g", "in", "enumerate", "(", "genes", ")", "if", "i", "in", "idx", "]", "\n", "adata", "=", "adata", "[", ":", ",", "idx", "]", "\n", "return", "adata", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.anndata_to_df": [[91, 94], ["pandas.DataFrame().transpose", "pandas.DataFrame", "adata.X.toarray"], "function", ["None"], ["", "def", "anndata_to_df", "(", "adata", ")", ":", "\n", "    ", "return", "pd", ".", "DataFrame", "(", "adata", ".", "X", ".", "toarray", "(", ")", ",", "dtype", "=", "np", ".", "float32", ",", "index", "=", "adata", ".", "obs_names", ",", "\n", "columns", "=", "adata", ".", "var_names", ")", ".", "transpose", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.reverse_association": [[96, 108], ["collections.defaultdict", "gene2go.items", "go2gene[].add"], "function", ["None"], ["", "def", "reverse_association", "(", "gene2go", ")", ":", "\n", "    ", "\"\"\"\n    For given dictionary of genes mapped to set of GO\n    terms, creates mapping of GO terms to gene IDs.\n    gene2go: mapping of gene IDs to GO terms\n    return: mapping of GO terms to gene IDs\n    \"\"\"", "\n", "go2gene", "=", "defaultdict", "(", "set", ")", "\n", "for", "gene", ",", "go_set", "in", "gene2go", ".", "items", "(", ")", ":", "\n", "        ", "for", "go", "in", "go_set", ":", "\n", "            ", "go2gene", "[", "go", "]", ".", "add", "(", "gene", ")", "\n", "", "", "return", "go2gene", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.map_mgi2go": [[110, 132], ["collections.defaultdict", "open", "f.readlines", "line.split.split", "mgi2go[].add"], "function", ["None"], ["", "def", "map_mgi2go", "(", "filepath", ")", ":", "\n", "    ", "\"\"\"\n    Reads from file mapping of MGI mouse gene ID to GO. Takes only genes with\n    experimental and high throughput evidence codes.\n    filepath: file containing mapping\n    return: mapping of MGI to GO\n    \"\"\"", "\n", "supported_codes", "=", "{", "\"EXP\"", ",", "\"IDA\"", ",", "\"IPI\"", ",", "\"IMP\"", ",", "\"IGI\"", ",", "\"IEP\"", ",", "\n", "\"HTP\"", ",", "\"HDA\"", ",", "\"HMP\"", ",", "\"HGI\"", ",", "\"HEP\"", "}", "\n", "mgi2go", "=", "defaultdict", "(", "set", ")", "\n", "with", "open", "(", "filepath", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "if", "line", "[", "0", "]", "!=", "'!'", ":", "\n", "                ", "line", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "mgi", "=", "line", "[", "2", "]", "\n", "go", "=", "line", "[", "4", "]", "\n", "evidence_code", "=", "line", "[", "6", "]", "\n", "mgi2go", "[", "mgi", "]", ".", "add", "(", "go", ")", "\n", "# if evidence_code in supported_codes:", "\n", "#     mgi2go[mgi].add(go)", "\n", "# print(len(mgi2go))", "\n", "", "", "", "return", "mgi2go", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.get_go2gene": [[134, 160], ["map_GO.map_mgi2go", "set", "set", "print", "print", "print", "print", "map_GO.prepare_GO_data", "map_mgi2go.keys", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.map_mgi2go", "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.prepare_GO_data"], ["", "def", "get_go2gene", "(", "adata", ",", "GO_min_genes", "=", "500", ",", "GO_max_genes", "=", "None", ",", "GO_min_level", "=", "3", ",", "GO_max_level", "=", "3", ",", "\n", "data_dir", "=", "'/iris/u/huaxiu/Data/Gene_data/'", ")", ":", "\n", "    ", "\"\"\"\n    Returns processed tabula muris data in AnnData format.\n    GO_min_genes: minimum number of genes assigned to GO required to keep GO term, used only if data is separated by GO\n                 categories (default: 500)\n    GO_max_genes: maximum number of genes assigned to GO required to keep GO term, used only if data is separated by GO\n                 categories  (default: None)\n    GO_min_level: minimum level required to keep GO term, used only if data is separated by GO categories  (default: 3)\n    raw_data_dir: directory contaning raw data\n    \"\"\"", "\n", "\n", "mgi2go", "=", "map_mgi2go", "(", "data_dir", "+", "\"gene_association.mgi\"", ")", "\n", "mgi2go_set", "=", "set", "(", "mgi2go", ".", "keys", "(", ")", ")", "\n", "adata_set", "=", "set", "(", "adata", ".", "var_names", ")", "\n", "print", "(", "\"_________Gene count processed_________\"", ")", "\n", "print", "(", "\"mgi2go_set\"", ",", "len", "(", "mgi2go_set", ")", ")", "\n", "print", "(", "\"adata_set\"", ",", "len", "(", "adata_set", ")", ")", "\n", "print", "(", "\"union\"", ",", "len", "(", "adata_set", "&", "mgi2go_set", ")", ")", "\n", "# print(\"Not found\", adata_set - mgi2go_set)", "\n", "GOobo_file", "=", "data_dir", "+", "\"go-basic.obo\"", "\n", "\n", "go2gene", "=", "prepare_GO_data", "(", "adata", ",", "mgi2go", ",", "GO_file", "=", "GOobo_file", ",", "\n", "GO_min_genes", "=", "GO_min_genes", ",", "GO_max_genes", "=", "GO_max_genes", ",", "GO_min_level", "=", "GO_min_level", ",", "GO_max_level", "=", "GO_max_level", ")", "\n", "\n", "return", "go2gene", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.protonet.Protonet.__init__": [[11, 16], ["torch.Module.__init__", "learner.FCNet", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["        ", "super", "(", "Protonet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "learner", "=", "learner", "\n", "self", ".", "dist", "=", "Beta", "(", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "xs", ",", "ys", ",", "xq", ",", "yq", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.protonet.Protonet.forward": [[17, 43], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "protonet.Protonet.learner", "protonet.Protonet.size", "z[].view().mean", "utils.euclidean_dist", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.log_softmax.max", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "z[].view", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist"], ["        ", "x", "=", "torch", ".", "cat", "(", "[", "xs", ",", "xq", "]", ",", "0", ")", "\n", "\n", "z", "=", "self", ".", "learner", "(", "x", ")", "\n", "\n", "z_dim", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "\n", "z_proto", "=", "z", "[", ":", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", "]", ".", "view", "(", "self", ".", "args", ".", "num_classes", ",", "\n", "self", ".", "args", ".", "update_batch_size", ",", "z_dim", ")", ".", "mean", "(", "1", ")", "\n", "zq", "=", "z", "[", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", ":", "]", "\n", "\n", "dists", "=", "euclidean_dist", "(", "zq", ",", "z_proto", ")", "\n", "\n", "log_p_y", "=", "F", ".", "log_softmax", "(", "-", "dists", ",", "dim", "=", "1", ")", "\n", "\n", "loss_val", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size_eval", ")", ":", "\n", "            ", "loss_val", ".", "append", "(", "-", "log_p_y", "[", "i", ",", "yq", "[", "i", "]", "]", ")", "\n", "\n", "", "loss_val", "=", "torch", ".", "stack", "(", "loss_val", ")", ".", "squeeze", "(", ")", ".", "mean", "(", ")", "\n", "\n", "_", ",", "y_hat", "=", "log_p_y", ".", "max", "(", "1", ")", "\n", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "yq", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss_val", ",", "acc_val", "\n", "\n", "", "def", "rand_bbox", "(", "self", ",", "size", ",", "lam", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.protonet.Protonet.forward_within": [[44, 77], ["protonet.Protonet.dist.sample().to", "protonet.Protonet.learner", "protonet.Protonet.size", "protonet.Protonet.view().mean", "protonet.Protonet.learner.forward_within", "utils.euclidean_dist", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "protonet.Protonet.learner", "utils.euclidean_dist", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.max", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "protonet.Protonet.dist.sample", "protonet.Protonet.view", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_within", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist"], ["        ", "W", "=", "size", "[", "2", "]", "\n", "H", "=", "size", "[", "3", "]", "\n", "cut_rat", "=", "np", ".", "sqrt", "(", "1.", "-", "lam", ".", "cpu", "(", ")", ")", "\n", "cut_w", "=", "np", ".", "int", "(", "W", "*", "cut_rat", ")", "\n", "cut_h", "=", "np", ".", "int", "(", "H", "*", "cut_rat", ")", "\n", "\n", "# uniform", "\n", "cx", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "\n", "bbx1", "=", "np", ".", "clip", "(", "cx", "-", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby1", "=", "np", ".", "clip", "(", "cy", "-", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "bbx2", "=", "np", ".", "clip", "(", "cx", "+", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby2", "=", "np", ".", "clip", "(", "cy", "+", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "\n", "return", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "\n", "\n", "", "def", "mixup_data", "(", "self", ",", "xs", ",", "xq", ",", "lam", ")", ":", "\n", "        ", "mixed_x", "=", "xq", ".", "clone", "(", ")", "\n", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "=", "self", ".", "rand_bbox", "(", "xq", ".", "size", "(", ")", ",", "lam", ")", "\n", "\n", "mixed_x", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "=", "xs", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "\n", "\n", "lam", "=", "1", "-", "(", "(", "bbx2", "-", "bbx1", ")", "*", "(", "bby2", "-", "bby1", ")", "/", "(", "xq", ".", "size", "(", ")", "[", "-", "1", "]", "*", "xq", ".", "size", "(", ")", "[", "-", "2", "]", ")", ")", "\n", "\n", "return", "mixed_x", ",", "lam", "\n", "\n", "", "def", "forward_crossmix", "(", "self", ",", "x1s", ",", "y1s", ",", "x1q", ",", "y1q", ",", "x2s", ",", "y2s", ",", "x2q", ",", "y2q", ")", ":", "\n", "        ", "lam_mix", "=", "self", ".", "dist", ".", "sample", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "task_2_shuffle_id", "=", "np", ".", "arange", "(", "self", ".", "args", ".", "num_classes", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "task_2_shuffle_id", ")", "\n", "task_2_shuffle_id_s", "=", "np", ".", "array", "(", "\n", "[", "np", ".", "arange", "(", "self", ".", "args", ".", "update_batch_size", ")", "+", "task_2_shuffle_id", "[", "idx", "]", "*", "self", ".", "args", ".", "update_batch_size", "for", "idx", "in", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.protonet.Protonet.rand_bbox": [[78, 95], ["numpy.sqrt", "numpy.int", "numpy.int", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "lam.cpu"], "methods", ["None"], ["range", "(", "self", ".", "args", ".", "num_classes", ")", "]", ")", ".", "flatten", "(", ")", "\n", "task_2_shuffle_id_q", "=", "np", ".", "array", "(", "\n", "[", "np", ".", "arange", "(", "self", ".", "args", ".", "update_batch_size_eval", ")", "+", "task_2_shuffle_id", "[", "idx", "]", "*", "self", ".", "args", ".", "update_batch_size_eval", "for", "\n", "idx", "in", "range", "(", "self", ".", "args", ".", "num_classes", ")", "]", ")", ".", "flatten", "(", ")", "\n", "\n", "x2s", "=", "x2s", "[", "task_2_shuffle_id_s", "]", "\n", "x2q", "=", "x2q", "[", "task_2_shuffle_id_q", "]", "\n", "\n", "x_mix_s", ",", "_", "=", "self", ".", "mixup_data", "(", "x1s", ",", "x2s", ",", "lam_mix", ")", "\n", "\n", "x_mix_q", ",", "_", "=", "self", ".", "mixup_data", "(", "x1q", ",", "x2q", ",", "lam_mix", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x_mix_s", ",", "x_mix_q", "]", ",", "0", ")", "\n", "\n", "z", "=", "self", ".", "learner", "(", "x", ")", "\n", "\n", "z_dim", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.protonet.Protonet.mixup_data": [[96, 100], ["None"], "methods", ["None"], ["z_proto", "=", "z", "[", ":", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", "]", ".", "view", "(", "self", ".", "args", ".", "num_classes", ",", "\n", "self", ".", "args", ".", "update_batch_size", ",", "z_dim", ")", ".", "mean", "(", "\n", "1", ")", "\n", "zq", "=", "z", "[", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.protonet.Protonet.forward_crossmix": [[102, 147], ["protonet.Protonet.dist.sample().to", "numpy.arange", "numpy.random.shuffle", "numpy.array().flatten", "numpy.array().flatten", "protonet.Protonet.mixup_data", "protonet.Protonet.mixup_data", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "protonet.Protonet.learner.forward_crossmix", "protonet.Protonet.size", "z[].view().mean", "utils.euclidean_dist", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.log_softmax.max", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "protonet.Protonet.dist.sample", "numpy.array", "numpy.array", "z[].view", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "numpy.arange", "range", "numpy.arange", "range"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.mixup_data", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.mixup_data", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_crossmix", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist"], ["\n", "log_p_y", "=", "F", ".", "log_softmax", "(", "-", "dists", ",", "dim", "=", "1", ")", "\n", "\n", "loss_val", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size_eval", ")", ":", "\n", "            ", "loss_val", ".", "append", "(", "-", "log_p_y", "[", "i", ",", "y1q", "[", "i", "]", "]", ")", "\n", "\n", "", "loss_val", "=", "torch", ".", "stack", "(", "loss_val", ")", ".", "squeeze", "(", ")", ".", "mean", "(", ")", "\n", "\n", "_", ",", "y_hat", "=", "log_p_y", ".", "max", "(", "1", ")", "\n", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "y1q", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss_val", ",", "acc_val", "", "", "", ""]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.preprocess.MacaData.__init__": [[15, 33], ["anndata.read_h5ad", "preprocess.MacaData.adata.obs[].astype", "preprocess.MacaData.cellannotation2ID", "preprocess.MacaData.preprocess_data", "scanpy.pp.filter_genes"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.preprocess.MacaData.cellannotation2ID", "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.preprocess.MacaData.preprocess_data"], ["    ", "def", "__init__", "(", "self", ",", "annotation_type", "=", "'cell_ontology_class_reannotated'", ",", "src_file", "=", "'dataset/cell_data/tabula-muris-senis-facs-official-annotations.h5ad'", ",", "filter_genes", "=", "True", ")", ":", "\n", "\n", "        ", "\"\"\"\n        annotation type: cell_ontology_class, cell_ontology id or free_annotation\n        \"\"\"", "\n", "self", ".", "adata", "=", "read_h5ad", "(", "src_file", ")", "\n", "self", ".", "adata", ".", "obs", "[", "annotation_type", "]", "=", "self", ".", "adata", ".", "obs", "[", "annotation_type", "]", ".", "astype", "(", "str", ")", "\n", "self", ".", "adata", "=", "self", ".", "adata", "[", "self", ".", "adata", ".", "obs", "[", "annotation_type", "]", "!=", "'nan'", ",", ":", "]", "\n", "self", ".", "adata", "=", "self", ".", "adata", "[", "self", ".", "adata", ".", "obs", "[", "annotation_type", "]", "!=", "'NA'", ",", ":", "]", "\n", "\n", "#print(Counter(self.adata.obs.loc[self.adata.obs['age']=='18m', 'free_annotation']))", "\n", "\n", "self", ".", "cells2names", "=", "self", ".", "cellannotation2ID", "(", "annotation_type", ")", "\n", "\n", "if", "filter_genes", ":", "\n", "            ", "sc", ".", "pp", ".", "filter_genes", "(", "self", ".", "adata", ",", "min_cells", "=", "5", ")", "\n", "\n", "", "self", ".", "adata", "=", "self", ".", "preprocess_data", "(", "self", ".", "adata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.preprocess.MacaData.preprocess_data": [[35, 51], ["scanpy.pp.filter_cells", "scanpy.pp.filter_cells", "scanpy.pp.normalize_per_cell", "scanpy.pp.filter_genes_dispersion", "scanpy.pp.log1p", "scanpy.pp.scale", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.filter_cells", "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.filter_cells"], ["", "def", "preprocess_data", "(", "self", ",", "adata", ")", ":", "\n", "        ", "sc", ".", "pp", ".", "filter_cells", "(", "adata", ",", "min_counts", "=", "5000", ")", "\n", "sc", ".", "pp", ".", "filter_cells", "(", "adata", ",", "min_genes", "=", "500", ")", "\n", "\n", "sc", ".", "pp", ".", "normalize_per_cell", "(", "adata", ",", "counts_per_cell_after", "=", "1e4", ")", "#simple lib size normalization?", "\n", "adata", ".", "raw", "=", "adata", "\n", "adata", "=", "sc", ".", "pp", ".", "filter_genes_dispersion", "(", "adata", ",", "subset", "=", "False", ",", "min_disp", "=", ".5", ",", "max_disp", "=", "None", ",", "\n", "min_mean", "=", ".0125", ",", "max_mean", "=", "10", ",", "n_bins", "=", "20", ",", "n_top_genes", "=", "None", ",", "\n", "log", "=", "True", ",", "copy", "=", "True", ")", "\n", "adata", "=", "adata", "[", ":", ",", "adata", ".", "var", ".", "highly_variable", "]", "\n", "sc", ".", "pp", ".", "log1p", "(", "adata", ")", "\n", "sc", ".", "pp", ".", "scale", "(", "adata", ",", "max_value", "=", "10", ",", "zero_center", "=", "True", ")", "\n", "adata", ".", "X", "[", "np", ".", "isnan", "(", "adata", ".", "X", ")", "]", "=", "0", "\n", "#sc.tl.pca(self.adata)", "\n", "\n", "return", "adata", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.preprocess.MacaData.get_tissue_data": [[52, 64], ["None"], "methods", ["None"], ["", "def", "get_tissue_data", "(", "self", ",", "tissue", ",", "age", "=", "None", ")", ":", "\n", "        ", "\"\"\"Select data for given tissue.\n        filtered: if annotated return only cells with annotations, if unannotated return only cells without labels, else all\n        age: '3m','18m', '24m', if None all ages are included\n        \"\"\"", "\n", "\n", "tiss", "=", "self", ".", "adata", "[", "self", ".", "adata", ".", "obs", "[", "'tissue'", "]", "==", "tissue", ",", ":", "]", "\n", "\n", "if", "age", ":", "\n", "            ", "return", "tiss", "[", "tiss", ".", "obs", "[", "'age'", "]", "==", "age", "]", "\n", "\n", "", "return", "tiss", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.preprocess.MacaData.cellannotation2ID": [[66, 78], ["list", "sorted", "pandas.Categorical", "set", "enumerate"], "methods", ["None"], ["", "def", "cellannotation2ID", "(", "self", ",", "annotation_type", ")", ":", "\n", "        ", "\"\"\"Adds ground truth clusters data.\"\"\"", "\n", "annotations", "=", "list", "(", "self", ".", "adata", ".", "obs", "[", "annotation_type", "]", ")", "\n", "annotations_set", "=", "sorted", "(", "set", "(", "annotations", ")", ")", "\n", "\n", "mapping", "=", "{", "a", ":", "idx", "for", "idx", ",", "a", "in", "enumerate", "(", "annotations_set", ")", "}", "\n", "\n", "truth_labels", "=", "[", "mapping", "[", "a", "]", "for", "a", "in", "annotations", "]", "\n", "self", ".", "adata", ".", "obs", "[", "'label'", "]", "=", "pd", ".", "Categorical", "(", "values", "=", "truth_labels", ")", "\n", "#18m-unannotated", "\n", "#", "\n", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.data_generator.TM.__init__": [[23, 38], ["torch.utils.data.Dataset.__init__", "data_generator.TM.load_tabular_muris", "numpy.unique", "print", "len"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__", "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.data_generator.TM.load_tabular_muris"], ["self", ".", "set_size", "=", "self", ".", "n_way", "*", "self", ".", "k_shot", "\n", "self", ".", "query_size", "=", "self", ".", "n_way", "*", "self", ".", "k_query", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "data_file", "=", "'{}/DermNet/Dermnet_all_84.pkl'", ".", "format", "(", "args", ".", "datadir", ")", "\n", "\n", "self", ".", "data", "=", "pickle", ".", "load", "(", "open", "(", "self", ".", "data_file", ",", "'rb'", ")", ")", "\n", "num_data", "=", "[", "(", "eachkey", ",", "self", ".", "data", "[", "eachkey", "]", ".", "shape", "[", "0", "]", ")", "for", "eachkey", "in", "self", ".", "data", "]", "\n", "\n", "num_data", "=", "sorted", "(", "num_data", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "sel_class_num", "=", "int", "(", "self", ".", "args", ".", "ratio", "*", "150", ")", "\n", "print", "(", "sel_class_num", ")", "\n", "self", ".", "used_diseases", "=", "[", "eachid", "[", "0", "]", "for", "eachid", "in", "num_data", "[", ":", "sel_class_num", "]", "]", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "used_diseases", "=", "[", "eachid", "[", "0", "]", "for", "eachid", "in", "num_data", "[", "150", ":", "]", "]", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.data_generator.TM.load_tabular_muris": [[39, 68], ["adata.to_df().to_numpy", "adata.obs[].cat.codes.to_numpy", "map_GO.get_go2gene", "data_generator.create_go_mask", "preprocess.MacaData", "adata.obs.groupby().filter().reset_index", "adata.obs[].isin", "adata.to_df", "os.path.join", "adata.obs.groupby().filter", "adata.obs.groupby", "len"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.map_GO.get_go2gene", "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.data_generator.create_go_mask"], ["\n", "", "for", "eachkey", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "data", "[", "eachkey", "]", "=", "torch", ".", "tensor", "(", "np", ".", "transpose", "(", "self", ".", "data", "[", "eachkey", "]", "/", "np", ".", "float32", "(", "255", ")", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "args", ".", "metatrain_iterations", "*", "self", ".", "args", ".", "meta_batch_size", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "classes_idx", "=", "np", ".", "array", "(", "self", ".", "used_diseases", ")", "\n", "\n", "if", "self", ".", "args", ".", "train", ":", "\n", "            ", "support_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "query_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "\n", "support_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", "]", ")", "\n", "query_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", "]", ")", "\n", "\n", "for", "meta_batch_id", "in", "range", "(", "self", ".", "args", ".", "meta_batch_size", ")", ":", "\n", "                ", "self", ".", "choose_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes_idx", ",", "size", "=", "self", ".", "nb_classes", ",", "replace", "=", "False", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", ":", "\n", "                    ", "self", ".", "samples_idx", "=", "np", ".", "arange", "(", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "samples_idx", ")", "\n", "choose_samples", "=", "self", ".", "samples_idx", "[", ":", "self", ".", "nb_samples_per_class", "]", "\n", "support_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", ":", "self", ".", "k_shot", "]", ",", "...", "]", "\n", "query_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.data_generator.TM.__len__": [[69, 71], ["None"], "methods", ["None"], ["self", ".", "k_shot", ":", "]", ",", "...", "]", "\n", "support_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "j", "\n", "query_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "j", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.data_generator.TM.__getitem__": [[72, 97], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice", "range", "torch.FloatTensor", "torch.LongTensor", "torch.FloatTensor", "torch.LongTensor", "numpy.arange", "numpy.random.shuffle"], "methods", ["None"], ["\n", "", "", "", "else", ":", "\n", "            ", "support_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "set_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "support_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "set_size", "]", ")", "\n", "self", ".", "choose_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes_idx", ",", "size", "=", "self", ".", "nb_classes", ",", "replace", "=", "False", ")", "\n", "query_size_test", "=", "sum", "(", "[", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", "]", ")", "-", "self", ".", "set_size", "\n", "query_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "query_size_test", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "query_y", "=", "np", ".", "zeros", "(", "[", "query_size_test", "]", ")", "\n", "\n", "split_loc_pre", "=", "[", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", "-", "self", ".", "k_shot", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", "]", "\n", "\n", "query_split_loc_list", "=", "[", "sum", "(", "split_loc_pre", "[", ":", "j", "]", ")", "for", "j", "in", "range", "(", "self", ".", "nb_classes", "+", "1", ")", "]", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", ":", "\n", "                ", "self", ".", "samples_idx", "=", "np", ".", "arange", "(", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "samples_idx", ")", "\n", "choose_samples", "=", "self", ".", "samples_idx", "\n", "# idx1 = idx[0:self.k_shot + self.k_query]", "\n", "support_x", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", ":", "self", ".", "k_shot", "]", ",", "...", "]", "\n", "support_y", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "j", "\n", "\n", "query_x", "[", "query_split_loc_list", "[", "j", "]", ":", "query_split_loc_list", "[", "j", "+", "1", "]", "]", "=", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", "[", "\n", "choose_samples", "[", "self", ".", "k_shot", ":", "]", ",", "...", "]", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.data_generator.create_go_mask": [[11, 20], ["sorted", "go2gene.keys", "go_mask.append", "enumerate"], "function", ["None"], ["import", "ipdb", "\n", "\n", "class", "DermNet", "(", "Dataset", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "mode", ")", ":", "\n", "        ", "super", "(", "DermNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "nb_classes", "=", "args", ".", "num_classes", "\n", "self", ".", "nb_samples_per_class", "=", "args", ".", "update_batch_size", "+", "args", ".", "update_batch_size_eval", "\n", "self", ".", "n_way", "=", "args", ".", "num_classes", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.utils.euclidean_dist": [[3, 15], ["x.unsqueeze().expand.size", "y.unsqueeze().expand.size", "x.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand", "torch.pow().sum", "y.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze", "torch.pow"], "function", ["None"], ["def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "# x: N x D", "\n", "# y: M x D", "\n", "    ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "m", "=", "y", ".", "size", "(", "0", ")", "\n", "d", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "d", "==", "y", ".", "size", "(", "1", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "\n", "return", "torch", ".", "pow", "(", "x", "-", "y", ",", "2", ")", ".", "sum", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.utils.accuracy": [[16, 29], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "", "", ""]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.learner.Flatten.__init__": [[6, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.learner.Flatten.forward": [[9, 11], ["x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.learner.FCNet.__init__": [[13, 22], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.distributions.Beta", "torch.distributions.Beta", "learner.FCNet.fc_block", "learner.FCNet.fc_block", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.fc_block", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.fc_block"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "\n", "", "class", "Conv_Standard", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "x_dim", ",", "hid_dim", ",", "z_dim", ")", ":", "\n", "        ", "super", "(", "Conv_Standard", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "self", ".", "conv_block", "(", "x_dim", ",", "hid_dim", ")", ",", "self", ".", "conv_block", "(", "hid_dim", ",", "hid_dim", ")", ",", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.learner.FCNet.fc_block": [[23, 29], ["torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["None"], ["self", ".", "conv_block", "(", "hid_dim", ",", "hid_dim", ")", ",", "self", ".", "conv_block", "(", "hid_dim", ",", "z_dim", ")", ",", "Flatten", "(", ")", ")", "\n", "self", ".", "dist", "=", "Beta", "(", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "hid_dim", "=", "hid_dim", "\n", "\n", "", "def", "conv_block", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.learner.FCNet.mixup_data": [[31, 41], ["torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.learner.FCNet.forward": [[42, 44], ["learner.FCNet.net"], "methods", ["None"], []], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.learner.FCNet.forward_within": [[45, 61], ["learner.FCNet.mixup_data"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.mixup_data"], []], "home.repos.pwc.inspect_result.huaxiuyao_mlti.TabularMurris.learner.FCNet.forward_crossmix": [[63, 66], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.main.train": [[67, 125], ["data_generator.RainbowMNIST", "enumerate", "os.path.exists", "os.makedirs", "range", "torch.stack().mean", "torch.stack().mean", "optimiser.zero_grad", "torch.stack().mean.backward", "optimiser.step", "x_spt.squeeze().cuda", "y_spt.squeeze().cuda", "x_qry.squeeze().cuda", "y_qry.squeeze().cuda", "task_losses.append", "task_acc.append", "print", "torch.save", "random.randint", "protonet", "torch.stack", "torch.stack", "protonet.learner.state_dict", "x_spt.squeeze", "y_spt.squeeze", "x_qry.squeeze", "y_qry.squeeze", "protonet.forward_crossmix", "protonet.forward_crossmix"], "function", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_crossmix", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_crossmix"], ["\n", "", "print", "(", "exp_string", ")", "\n", "\n", "\n", "def", "train", "(", "args", ",", "protonet", ",", "optimiser", ")", ":", "\n", "    ", "Print_Iter", "=", "100", "\n", "Save_Iter", "=", "500", "\n", "print_loss", ",", "print_acc", "=", "0.0", ",", "0.0", "\n", "\n", "if", "args", ".", "datasource", "==", "'miniimagenet'", ":", "\n", "        ", "dataloader", "=", "MiniImagenet", "(", "args", ",", "'train'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'isic'", ":", "\n", "        ", "dataloader", "=", "ISIC", "(", "args", ",", "'train'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'dermnet'", ":", "\n", "        ", "dataloader", "=", "DermNet", "(", "args", ",", "'train'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "logdir", "+", "'/'", "+", "exp_string", "+", "'/'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "logdir", "+", "'/'", "+", "exp_string", "+", "'/'", ")", "\n", "\n", "", "for", "step", ",", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "step", ">", "args", ".", "metatrain_iterations", ":", "\n", "            ", "break", "\n", "\n", "", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "y_spt", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "x_qry", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "y_qry", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "task_losses", "=", "[", "]", "\n", "task_acc", "=", "[", "]", "\n", "\n", "for", "meta_batch", "in", "range", "(", "args", ".", "meta_batch_size", ")", ":", "\n", "            ", "if", "args", ".", "mix", ":", "\n", "                ", "mix_c", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "mix_c", "==", "1", ":", "\n", "                    ", "second_id", "=", "(", "meta_batch", "+", "1", ")", "%", "args", ".", "meta_batch_size", "\n", "loss_val", ",", "acc_val", "=", "protonet", ".", "forward_crossmix", "(", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "\n", "x_qry", "[", "meta_batch", "]", ",", "\n", "y_qry", "[", "meta_batch", "]", ",", "\n", "x_spt", "[", "second_id", "]", ",", "y_spt", "[", "second_id", "]", ",", "\n", "x_qry", "[", "second_id", "]", ",", "\n", "y_qry", "[", "second_id", "]", ")", "\n", "", "else", ":", "\n", "                    ", "loss_val", ",", "acc_val", "=", "protonet", ".", "forward_crossmix", "(", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "\n", "x_qry", "[", "meta_batch", "]", ",", "\n", "y_qry", "[", "meta_batch", "]", ",", "\n", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "\n", "x_qry", "[", "meta_batch", "]", ",", "\n", "y_qry", "[", "meta_batch", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "loss_val", ",", "acc_val", "=", "protonet", "(", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "x_qry", "[", "meta_batch", "]", ",", "y_qry", "[", "meta_batch", "]", ")", "\n", "", "task_losses", ".", "append", "(", "loss_val", ")", "\n", "task_acc", ".", "append", "(", "acc_val", ")", "\n", "\n", "", "meta_batch_loss", "=", "torch", ".", "stack", "(", "task_losses", ")", ".", "mean", "(", ")", "\n", "meta_batch_acc", "=", "torch", ".", "stack", "(", "task_acc", ")", ".", "mean", "(", ")", "\n", "\n", "optimiser", ".", "zero_grad", "(", ")", "\n", "meta_batch_loss", ".", "backward", "(", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "\n", "if", "step", "!=", "0", "and", "step", "%", "Print_Iter", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.main.test": [[127, 144], ["data_generator.RainbowMNIST", "enumerate", "numpy.array", "print", "protonet", "np.array.append", "x_spt.squeeze().to", "y_spt.squeeze().to", "x_qry.squeeze().to", "y_qry.squeeze().to", "acc_val.item", "numpy.mean", "numpy.sqrt", "x_spt.squeeze", "y_spt.squeeze", "x_qry.squeeze", "y_qry.squeeze", "numpy.std"], "function", ["None"], ["print_loss", ",", "print_acc", "=", "0.0", ",", "0.0", "\n", "", "else", ":", "\n", "            ", "print_loss", "+=", "meta_batch_loss", "/", "Print_Iter", "\n", "print_acc", "+=", "meta_batch_acc", "/", "Print_Iter", "\n", "\n", "", "if", "step", "!=", "0", "and", "step", "%", "Save_Iter", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "protonet", ".", "learner", ".", "state_dict", "(", ")", ",", "\n", "'{0}/{2}/model{1}'", ".", "format", "(", "args", ".", "logdir", ",", "step", ",", "exp_string", ")", ")", "\n", "\n", "", "", "", "def", "test", "(", "args", ",", "protonet", ")", ":", "\n", "    ", "protonet", ".", "eval", "(", ")", "\n", "res_acc", "=", "[", "]", "\n", "args", ".", "meta_batch_size", "=", "1", "\n", "\n", "if", "args", ".", "datasource", "==", "'miniimagenet'", ":", "\n", "        ", "dataloader", "=", "MiniImagenet", "(", "args", ",", "'test'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'isic'", ":", "\n", "        ", "dataloader", "=", "ISIC", "(", "args", ",", "'test'", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.main.main": [[146, 165], ["learner.Conv_Standard().cuda", "protonet.Protonet", "torch.optim.Adam", "print", "Conv_Standard().cuda.load_state_dict", "list", "main.train", "protonet.Protonet.learner.load_state_dict", "main.test", "learner.Conv_Standard", "torch.load", "Conv_Standard().cuda.parameters", "torch.load"], "function", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.main.train", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.main.test"], ["        ", "dataloader", "=", "DermNet", "(", "args", ",", "'test'", ")", "\n", "\n", "", "for", "step", ",", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "step", ">", "600", ":", "\n", "            ", "break", "\n", "", "if", "args", ".", "datasource", "in", "[", "'isic'", ",", "'dermnet'", "]", ":", "\n", "            ", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "to", "(", "\"cuda\"", ")", ",", "y_spt", ".", "to", "(", "\"cuda\"", ")", ",", "x_qry", ".", "to", "(", "\"cuda\"", ")", ",", "y_qry", ".", "to", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "            ", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "squeeze", "(", "0", ")", ".", "to", "(", "\"cuda\"", ")", ",", "y_spt", ".", "squeeze", "(", "0", ")", ".", "to", "(", "\"cuda\"", ")", ",", "x_qry", ".", "squeeze", "(", "0", ")", ".", "to", "(", "\"cuda\"", ")", ",", "y_qry", ".", "squeeze", "(", "0", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "acc_val", "=", "protonet", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "\n", "res_acc", ".", "append", "(", "acc_val", ".", "item", "(", ")", ")", "\n", "\n", "", "", "res_acc", "=", "np", ".", "array", "(", "res_acc", ")", "\n", "\n", "print", "(", "'acc is {}, ci95 is {}'", ".", "format", "(", "np", ".", "mean", "(", "res_acc", ")", ",", "1.96", "*", "np", ".", "std", "(", "res_acc", ")", "/", "np", ".", "sqrt", "(", "\n", "600", "*", "args", ".", "meta_batch_size", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.protonet.Protonet.__init__": [[10, 15], ["torch.Module.__init__", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "learner", ")", ":", "\n", "        ", "super", "(", "Protonet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "learner", "=", "learner", "\n", "self", ".", "dist", "=", "Beta", "(", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.protonet.Protonet.forward": [[16, 42], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "protonet.Protonet.learner", "protonet.Protonet.size", "z[].view().mean", "utils.euclidean_dist", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.log_softmax.max", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "z[].view", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist"], ["", "def", "forward", "(", "self", ",", "xs", ",", "ys", ",", "xq", ",", "yq", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "xs", ",", "xq", "]", ",", "0", ")", "\n", "\n", "z", "=", "self", ".", "learner", "(", "x", ")", "\n", "\n", "z_dim", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "\n", "z_proto", "=", "z", "[", ":", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", "]", ".", "view", "(", "self", ".", "args", ".", "num_classes", ",", "\n", "self", ".", "args", ".", "update_batch_size", ",", "z_dim", ")", ".", "mean", "(", "1", ")", "\n", "zq", "=", "z", "[", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", ":", "]", "\n", "\n", "dists", "=", "euclidean_dist", "(", "zq", ",", "z_proto", ")", "\n", "\n", "log_p_y", "=", "F", ".", "log_softmax", "(", "-", "dists", ",", "dim", "=", "1", ")", "\n", "\n", "loss_val", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size_eval", ")", ":", "\n", "            ", "loss_val", ".", "append", "(", "-", "log_p_y", "[", "i", ",", "yq", "[", "i", "]", "]", ")", "\n", "\n", "", "loss_val", "=", "torch", ".", "stack", "(", "loss_val", ")", ".", "squeeze", "(", ")", ".", "mean", "(", ")", "\n", "\n", "_", ",", "y_hat", "=", "log_p_y", ".", "max", "(", "1", ")", "\n", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "yq", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss_val", ",", "acc_val", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.protonet.Protonet.rand_bbox": [[43, 60], ["numpy.sqrt", "numpy.int", "numpy.int", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "lam.cpu"], "methods", ["None"], ["", "def", "rand_bbox", "(", "self", ",", "size", ",", "lam", ")", ":", "\n", "        ", "W", "=", "size", "[", "2", "]", "\n", "H", "=", "size", "[", "3", "]", "\n", "cut_rat", "=", "np", ".", "sqrt", "(", "1.", "-", "lam", ".", "cpu", "(", ")", ")", "\n", "cut_w", "=", "np", ".", "int", "(", "W", "*", "cut_rat", ")", "\n", "cut_h", "=", "np", ".", "int", "(", "H", "*", "cut_rat", ")", "\n", "\n", "# uniform", "\n", "cx", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "\n", "bbx1", "=", "np", ".", "clip", "(", "cx", "-", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby1", "=", "np", ".", "clip", "(", "cy", "-", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "bbx2", "=", "np", ".", "clip", "(", "cx", "+", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby2", "=", "np", ".", "clip", "(", "cy", "+", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "\n", "return", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.protonet.Protonet.mixup_data": [[61, 70], ["xq.clone", "protonet.Protonet.rand_bbox", "xq.size", "xq.size", "xq.size"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.protonet.Protonet.rand_bbox"], ["", "def", "mixup_data", "(", "self", ",", "xs", ",", "xq", ",", "lam", ")", ":", "\n", "        ", "mixed_x", "=", "xq", ".", "clone", "(", ")", "\n", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "=", "self", ".", "rand_bbox", "(", "xq", ".", "size", "(", ")", ",", "lam", ")", "\n", "\n", "mixed_x", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "=", "xs", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "\n", "\n", "lam", "=", "1", "-", "(", "(", "bbx2", "-", "bbx1", ")", "*", "(", "bby2", "-", "bby1", ")", "/", "(", "xq", ".", "size", "(", ")", "[", "-", "1", "]", "*", "xq", ".", "size", "(", ")", "[", "-", "2", "]", ")", ")", "\n", "\n", "return", "mixed_x", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.protonet.Protonet.forward_crossmix": [[71, 116], ["protonet.Protonet.dist.sample().to", "numpy.arange", "numpy.random.shuffle", "numpy.array().flatten", "numpy.array().flatten", "protonet.Protonet.mixup_data", "protonet.Protonet.mixup_data", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "protonet.Protonet.learner", "protonet.Protonet.size", "z[].view().mean", "utils.euclidean_dist", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.log_softmax.max", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "protonet.Protonet.dist.sample", "numpy.array", "numpy.array", "z[].view", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "numpy.arange", "range", "numpy.arange", "range"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.mixup_data", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.mixup_data", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist"], ["", "def", "forward_crossmix", "(", "self", ",", "x1s", ",", "y1s", ",", "x1q", ",", "y1q", ",", "x2s", ",", "y2s", ",", "x2q", ",", "y2q", ")", ":", "\n", "        ", "lam_mix", "=", "self", ".", "dist", ".", "sample", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "task_2_shuffle_id", "=", "np", ".", "arange", "(", "self", ".", "args", ".", "num_classes", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "task_2_shuffle_id", ")", "\n", "task_2_shuffle_id_s", "=", "np", ".", "array", "(", "\n", "[", "np", ".", "arange", "(", "self", ".", "args", ".", "update_batch_size", ")", "+", "task_2_shuffle_id", "[", "idx", "]", "*", "self", ".", "args", ".", "update_batch_size", "for", "idx", "in", "\n", "range", "(", "self", ".", "args", ".", "num_classes", ")", "]", ")", ".", "flatten", "(", ")", "\n", "task_2_shuffle_id_q", "=", "np", ".", "array", "(", "\n", "[", "np", ".", "arange", "(", "self", ".", "args", ".", "update_batch_size_eval", ")", "+", "task_2_shuffle_id", "[", "idx", "]", "*", "self", ".", "args", ".", "update_batch_size_eval", "for", "\n", "idx", "in", "range", "(", "self", ".", "args", ".", "num_classes", ")", "]", ")", ".", "flatten", "(", ")", "\n", "\n", "x2s", "=", "x2s", "[", "task_2_shuffle_id_s", "]", "\n", "x2q", "=", "x2q", "[", "task_2_shuffle_id_q", "]", "\n", "\n", "x_mix_s", ",", "_", "=", "self", ".", "mixup_data", "(", "x1s", ",", "x2s", ",", "lam_mix", ")", "\n", "\n", "x_mix_q", ",", "_", "=", "self", ".", "mixup_data", "(", "x1q", ",", "x2q", ",", "lam_mix", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x_mix_s", ",", "x_mix_q", "]", ",", "0", ")", "\n", "\n", "z", "=", "self", ".", "learner", "(", "x", ")", "\n", "\n", "z_dim", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "\n", "z_proto", "=", "z", "[", ":", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", "]", ".", "view", "(", "self", ".", "args", ".", "num_classes", ",", "\n", "self", ".", "args", ".", "update_batch_size", ",", "z_dim", ")", ".", "mean", "(", "\n", "1", ")", "\n", "zq", "=", "z", "[", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", ":", "]", "\n", "\n", "dists", "=", "euclidean_dist", "(", "zq", ",", "z_proto", ")", "\n", "\n", "log_p_y", "=", "F", ".", "log_softmax", "(", "-", "dists", ",", "dim", "=", "1", ")", "\n", "\n", "loss_val", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size_eval", ")", ":", "\n", "            ", "loss_val", ".", "append", "(", "-", "log_p_y", "[", "i", ",", "y1q", "[", "i", "]", "]", ")", "\n", "\n", "", "loss_val", "=", "torch", ".", "stack", "(", "loss_val", ")", ".", "squeeze", "(", ")", ".", "mean", "(", ")", "\n", "\n", "_", ",", "y_hat", "=", "log_p_y", ".", "max", "(", "1", ")", "\n", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "y1q", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss_val", ",", "acc_val", "", "", "", ""]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.data_generator.RainbowMNIST.__init__": [[8, 42], ["torch.utils.data.Dataset.__init__", "pickle.load", "len", "range", "open", "data_generator.RainbowMNIST.data.keys", "torch.tensor", "numpy.array", "[].reshape", "[].reshape", "numpy.transpose", "int", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["from", "torch", ".", "utils", ".", "data", "import", "Dataset", "\n", "from", "torchvision", ".", "transforms", "import", "transforms", "\n", "import", "pickle", "\n", "import", "ipdb", "\n", "\n", "class", "DermNet", "(", "Dataset", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "mode", ")", ":", "\n", "        ", "super", "(", "DermNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "nb_classes", "=", "args", ".", "num_classes", "\n", "self", ".", "nb_samples_per_class", "=", "args", ".", "update_batch_size", "+", "args", ".", "update_batch_size_eval", "\n", "self", ".", "n_way", "=", "args", ".", "num_classes", "\n", "self", ".", "k_shot", "=", "args", ".", "update_batch_size", "\n", "self", ".", "k_query", "=", "args", ".", "update_batch_size_eval", "\n", "self", ".", "set_size", "=", "self", ".", "n_way", "*", "self", ".", "k_shot", "\n", "self", ".", "query_size", "=", "self", ".", "n_way", "*", "self", ".", "k_query", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "data_file", "=", "'{}/DermNet/Dermnet_all_84.pkl'", ".", "format", "(", "args", ".", "datadir", ")", "\n", "\n", "self", ".", "data", "=", "pickle", ".", "load", "(", "open", "(", "self", ".", "data_file", ",", "'rb'", ")", ")", "\n", "num_data", "=", "[", "(", "eachkey", ",", "self", ".", "data", "[", "eachkey", "]", ".", "shape", "[", "0", "]", ")", "for", "eachkey", "in", "self", ".", "data", "]", "\n", "\n", "num_data", "=", "sorted", "(", "num_data", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "sel_class_num", "=", "int", "(", "self", ".", "args", ".", "ratio", "*", "150", ")", "\n", "print", "(", "sel_class_num", ")", "\n", "self", ".", "used_diseases", "=", "[", "eachid", "[", "0", "]", "for", "eachid", "in", "num_data", "[", ":", "sel_class_num", "]", "]", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "used_diseases", "=", "[", "eachid", "[", "0", "]", "for", "eachid", "in", "num_data", "[", "150", ":", "]", "]", "\n", "\n", "", "for", "eachkey", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "data", "[", "eachkey", "]", "=", "torch", ".", "tensor", "(", "np", ".", "transpose", "(", "self", ".", "data", "[", "eachkey", "]", "/", "np", ".", "float32", "(", "255", ")", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.data_generator.RainbowMNIST.__len__": [[44, 46], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "args", ".", "metatrain_iterations", "*", "self", ".", "args", ".", "meta_batch_size", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.data_generator.RainbowMNIST.__getitem__": [[47, 70], ["numpy.arange", "numpy.arange", "torch.FloatTensor", "torch.FloatTensor", "numpy.zeros", "numpy.zeros", "range", "torch.zeros", "torch.zeros", "numpy.random.choice().item", "range", "torch.LongTensor", "torch.LongTensor", "numpy.random.shuffle", "numpy.random.choice"], "methods", ["None"], ["        ", "self", ".", "classes_idx", "=", "np", ".", "array", "(", "self", ".", "used_diseases", ")", "\n", "\n", "if", "self", ".", "args", ".", "train", ":", "\n", "            ", "support_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "query_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "\n", "support_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", "]", ")", "\n", "query_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", "]", ")", "\n", "\n", "for", "meta_batch_id", "in", "range", "(", "self", ".", "args", ".", "meta_batch_size", ")", ":", "\n", "                ", "self", ".", "choose_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes_idx", ",", "size", "=", "self", ".", "nb_classes", ",", "replace", "=", "False", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", ":", "\n", "                    ", "self", ".", "samples_idx", "=", "np", ".", "arange", "(", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "samples_idx", ")", "\n", "choose_samples", "=", "self", ".", "samples_idx", "[", ":", "self", ".", "nb_samples_per_class", "]", "\n", "support_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", ":", "self", ".", "k_shot", "]", ",", "...", "]", "\n", "query_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", "self", ".", "k_shot", ":", "]", ",", "...", "]", "\n", "support_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "j", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.utils.euclidean_dist": [[8, 20], ["x.unsqueeze().expand.size", "y.unsqueeze().expand.size", "x.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand", "torch.pow().sum", "y.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze", "torch.pow"], "function", ["None"], ["d", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "d", "==", "y", ".", "size", "(", "1", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "\n", "return", "torch", ".", "pow", "(", "x", "-", "y", ",", "2", ")", ".", "sum", "(", "2", ")", "\n", "\n", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.utils.accuracy": [[21, 34], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "", "", ""]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Flatten.__init__": [[7, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Flatten.forward": [[10, 12], ["x.view", "x.size"], "methods", ["None"], ["        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Conv_Standard.__init__": [[15, 22], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.distributions.Beta", "torch.distributions.Beta", "learner.Conv_Standard.conv_block", "learner.Conv_Standard.conv_block", "learner.Conv_Standard.conv_block", "learner.Conv_Standard.conv_block", "learner.Flatten", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__", "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Conv_Standard.conv_block", "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Conv_Standard.conv_block", "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Conv_Standard.conv_block", "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Conv_Standard.conv_block"], ["padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "\n", "", "class", "Conv_Standard", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "x_dim", ",", "hid_dim", ",", "z_dim", ")", ":", "\n", "        ", "super", "(", "Conv_Standard", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "self", ".", "conv_block", "(", "x_dim", ",", "hid_dim", ")", ",", "self", ".", "conv_block", "(", "hid_dim", ",", "hid_dim", ")", ",", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Conv_Standard.conv_block": [[23, 29], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["None"], ["self", ".", "conv_block", "(", "hid_dim", ",", "hid_dim", ")", ",", "self", ".", "conv_block", "(", "hid_dim", ",", "z_dim", ")", ",", "Flatten", "(", ")", ")", "\n", "self", ".", "dist", "=", "Beta", "(", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "hid_dim", "=", "hid_dim", "\n", "\n", "", "def", "conv_block", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.RainbowMNIST.learner.Conv_Standard.forward": [[31, 33], ["learner.Conv_Standard.net"], "methods", ["None"], ["nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.main.train": [[68, 129], ["enumerate", "data_generator.NCI", "os.path.exists", "os.makedirs", "range", "torch.stack().mean", "torch.stack().mean", "optimiser.zero_grad", "torch.stack().mean.backward", "optimiser.step", "data_generator.Metabolism", "x_spt.squeeze().cuda", "y_spt.squeeze().cuda", "x_qry.squeeze().cuda", "y_qry.squeeze().cuda", "loss_val.squeeze.squeeze", "task_losses.append", "task_acc.append", "print", "torch.save", "random.randint", "protonet", "torch.stack", "torch.stack", "protonet.state_dict", "x_spt.squeeze", "y_spt.squeeze", "x_qry.squeeze", "y_qry.squeeze", "protonet.forward_crossmix", "protonet.forward_within"], "function", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_crossmix", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_within"], ["", "print", "(", "exp_string", ")", "\n", "\n", "\n", "def", "train", "(", "args", ",", "protonet", ",", "optimiser", ")", ":", "\n", "    ", "Print_Iter", "=", "100", "\n", "Save_Iter", "=", "500", "\n", "print_loss", ",", "print_acc", "=", "0.0", ",", "0.0", "\n", "\n", "if", "args", ".", "datasource", "==", "'miniimagenet'", ":", "\n", "        ", "dataloader", "=", "MiniImagenet", "(", "args", ",", "'train'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'isic'", ":", "\n", "        ", "dataloader", "=", "ISIC", "(", "args", ",", "'train'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'dermnet'", ":", "\n", "        ", "dataloader", "=", "DermNet", "(", "args", ",", "'train'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "logdir", "+", "'/'", "+", "exp_string", "+", "'/'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "logdir", "+", "'/'", "+", "exp_string", "+", "'/'", ")", "\n", "\n", "", "for", "step", ",", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "step", ">", "args", ".", "metatrain_iterations", ":", "\n", "            ", "break", "\n", "\n", "", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "y_spt", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "x_qry", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", ",", "y_qry", ".", "squeeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "task_losses", "=", "[", "]", "\n", "task_acc", "=", "[", "]", "\n", "\n", "for", "meta_batch", "in", "range", "(", "args", ".", "meta_batch_size", ")", ":", "\n", "            ", "if", "args", ".", "mix", ":", "\n", "                ", "mix_c", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "mix_c", "==", "1", ":", "\n", "                    ", "second_id", "=", "(", "meta_batch", "+", "1", ")", "%", "args", ".", "meta_batch_size", "\n", "loss_val", ",", "acc_val", "=", "protonet", ".", "forward_crossmix", "(", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "\n", "x_qry", "[", "meta_batch", "]", ",", "\n", "y_qry", "[", "meta_batch", "]", ",", "\n", "x_spt", "[", "second_id", "]", ",", "y_spt", "[", "second_id", "]", ",", "\n", "x_qry", "[", "second_id", "]", ",", "\n", "y_qry", "[", "second_id", "]", ")", "\n", "", "else", ":", "\n", "                    ", "loss_val", ",", "acc_val", "=", "protonet", ".", "forward_crossmix", "(", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "\n", "x_qry", "[", "meta_batch", "]", ",", "\n", "y_qry", "[", "meta_batch", "]", ",", "\n", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "\n", "x_qry", "[", "meta_batch", "]", ",", "\n", "y_qry", "[", "meta_batch", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "loss_val", ",", "acc_val", "=", "protonet", "(", "x_spt", "[", "meta_batch", "]", ",", "y_spt", "[", "meta_batch", "]", ",", "x_qry", "[", "meta_batch", "]", ",", "y_qry", "[", "meta_batch", "]", ")", "\n", "", "task_losses", ".", "append", "(", "loss_val", ")", "\n", "task_acc", ".", "append", "(", "acc_val", ")", "\n", "\n", "", "meta_batch_loss", "=", "torch", ".", "stack", "(", "task_losses", ")", ".", "mean", "(", ")", "\n", "meta_batch_acc", "=", "torch", ".", "stack", "(", "task_acc", ")", ".", "mean", "(", ")", "\n", "\n", "optimiser", ".", "zero_grad", "(", ")", "\n", "meta_batch_loss", ".", "backward", "(", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "\n", "if", "step", "!=", "0", "and", "step", "%", "Print_Iter", "==", "0", ":", "\n", "            ", "print", "(", "'{}, {}, {}'", ".", "format", "(", "step", ",", "print_loss", ",", "print_acc", ")", ")", "\n", "print_loss", ",", "print_acc", "=", "0.0", ",", "0.0", "\n", "", "else", ":", "\n", "            ", "print_loss", "+=", "meta_batch_loss", "/", "Print_Iter", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.main.test": [[131, 153], ["protonet.eval", "enumerate", "numpy.array", "print", "data_generator.NCI", "protonet", "np.array.append", "data_generator.Metabolism", "x_spt.squeeze().to", "y_spt.squeeze().to", "x_qry.squeeze().to", "y_qry.squeeze().to", "acc_val.item", "numpy.mean", "numpy.sqrt", "x_spt.squeeze", "y_spt.squeeze", "x_qry.squeeze", "y_qry.squeeze", "numpy.std"], "function", ["None"], ["\n", "", "if", "step", "!=", "0", "and", "step", "%", "Save_Iter", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "protonet", ".", "learner", ".", "state_dict", "(", ")", ",", "\n", "'{0}/{2}/model{1}'", ".", "format", "(", "args", ".", "logdir", ",", "step", ",", "exp_string", ")", ")", "\n", "\n", "", "", "", "def", "test", "(", "args", ",", "protonet", ")", ":", "\n", "    ", "protonet", ".", "eval", "(", ")", "\n", "res_acc", "=", "[", "]", "\n", "args", ".", "meta_batch_size", "=", "1", "\n", "\n", "if", "args", ".", "datasource", "==", "'miniimagenet'", ":", "\n", "        ", "dataloader", "=", "MiniImagenet", "(", "args", ",", "'test'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'isic'", ":", "\n", "        ", "dataloader", "=", "ISIC", "(", "args", ",", "'test'", ")", "\n", "", "elif", "args", ".", "datasource", "==", "'dermnet'", ":", "\n", "        ", "dataloader", "=", "DermNet", "(", "args", ",", "'test'", ")", "\n", "\n", "", "for", "step", ",", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "step", ">", "600", ":", "\n", "            ", "break", "\n", "", "if", "args", ".", "datasource", "in", "[", "'isic'", ",", "'dermnet'", "]", ":", "\n", "            ", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "to", "(", "\"cuda\"", ")", ",", "y_spt", ".", "to", "(", "\"cuda\"", ")", ",", "x_qry", ".", "to", "(", "\"cuda\"", ")", ",", "y_qry", ".", "to", "(", "\"cuda\"", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.main.main": [[155, 172], ["protonet.Protonet().cuda", "torch.optim.Adam", "print", "Protonet().cuda.load_state_dict", "list", "main.train", "Protonet().cuda.load_state_dict", "main.test", "protonet.Protonet", "torch.load", "Protonet().cuda.parameters", "torch.load"], "function", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.main.train", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.main.test"], ["            ", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", "=", "x_spt", ".", "squeeze", "(", "0", ")", ".", "to", "(", "\"cuda\"", ")", ",", "y_spt", ".", "squeeze", "(", "0", ")", ".", "to", "(", "\"cuda\"", ")", ",", "x_qry", ".", "squeeze", "(", "0", ")", ".", "to", "(", "\"cuda\"", ")", ",", "y_qry", ".", "squeeze", "(", "0", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "acc_val", "=", "protonet", "(", "x_spt", ",", "y_spt", ",", "x_qry", ",", "y_qry", ")", "\n", "res_acc", ".", "append", "(", "acc_val", ".", "item", "(", ")", ")", "\n", "\n", "", "", "res_acc", "=", "np", ".", "array", "(", "res_acc", ")", "\n", "\n", "print", "(", "'acc is {}, ci95 is {}'", ".", "format", "(", "np", ".", "mean", "(", "res_acc", ")", ",", "1.96", "*", "np", ".", "std", "(", "res_acc", ")", "/", "np", ".", "sqrt", "(", "\n", "600", "*", "args", ".", "meta_batch_size", ")", ")", ")", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "learner", "=", "Conv_Standard", "(", "args", "=", "args", ",", "x_dim", "=", "3", ",", "hid_dim", "=", "args", ".", "num_filters", ",", "z_dim", "=", "args", ".", "num_filters", ")", ".", "cuda", "(", ")", "\n", "\n", "protonet", "=", "Protonet", "(", "args", ",", "learner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.protonet.Protonet.__init__": [[11, 19], ["torch.Module.__init__", "learner.FCNet", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["        ", "super", "(", "Protonet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "learner", "=", "learner", "\n", "self", ".", "dist", "=", "Beta", "(", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "xs", ",", "ys", ",", "xq", ",", "yq", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "xs", ",", "xq", "]", ",", "0", ")", "\n", "\n", "z", "=", "self", ".", "learner", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.protonet.Protonet.forward": [[20, 46], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "protonet.Protonet.learner", "protonet.Protonet.size", "z[].view().mean", "utils.euclidean_dist", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.log_softmax.max", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "z[].view", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist"], ["\n", "z_dim", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "\n", "z_proto", "=", "z", "[", ":", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", "]", ".", "view", "(", "self", ".", "args", ".", "num_classes", ",", "\n", "self", ".", "args", ".", "update_batch_size", ",", "z_dim", ")", ".", "mean", "(", "1", ")", "\n", "zq", "=", "z", "[", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", ":", "]", "\n", "\n", "dists", "=", "euclidean_dist", "(", "zq", ",", "z_proto", ")", "\n", "\n", "log_p_y", "=", "F", ".", "log_softmax", "(", "-", "dists", ",", "dim", "=", "1", ")", "\n", "\n", "loss_val", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size_eval", ")", ":", "\n", "            ", "loss_val", ".", "append", "(", "-", "log_p_y", "[", "i", ",", "yq", "[", "i", "]", "]", ")", "\n", "\n", "", "loss_val", "=", "torch", ".", "stack", "(", "loss_val", ")", ".", "squeeze", "(", ")", ".", "mean", "(", ")", "\n", "\n", "_", ",", "y_hat", "=", "log_p_y", ".", "max", "(", "1", ")", "\n", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "yq", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss_val", ",", "acc_val", "\n", "\n", "", "def", "rand_bbox", "(", "self", ",", "size", ",", "lam", ")", ":", "\n", "        ", "W", "=", "size", "[", "2", "]", "\n", "H", "=", "size", "[", "3", "]", "\n", "cut_rat", "=", "np", ".", "sqrt", "(", "1.", "-", "lam", ".", "cpu", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.protonet.Protonet.forward_within": [[47, 80], ["protonet.Protonet.dist.sample().to", "protonet.Protonet.learner", "protonet.Protonet.size", "protonet.Protonet.view().mean", "protonet.Protonet.learner.forward_within", "utils.euclidean_dist", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "protonet.Protonet.learner", "utils.euclidean_dist", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.max", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "protonet.Protonet.dist.sample", "protonet.Protonet.view", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_within", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist"], ["cut_w", "=", "np", ".", "int", "(", "W", "*", "cut_rat", ")", "\n", "cut_h", "=", "np", ".", "int", "(", "H", "*", "cut_rat", ")", "\n", "\n", "# uniform", "\n", "cx", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "\n", "bbx1", "=", "np", ".", "clip", "(", "cx", "-", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby1", "=", "np", ".", "clip", "(", "cy", "-", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "bbx2", "=", "np", ".", "clip", "(", "cx", "+", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby2", "=", "np", ".", "clip", "(", "cy", "+", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "\n", "return", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "\n", "\n", "", "def", "mixup_data", "(", "self", ",", "xs", ",", "xq", ",", "lam", ")", ":", "\n", "        ", "mixed_x", "=", "xq", ".", "clone", "(", ")", "\n", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "=", "self", ".", "rand_bbox", "(", "xq", ".", "size", "(", ")", ",", "lam", ")", "\n", "\n", "mixed_x", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "=", "xs", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "\n", "\n", "lam", "=", "1", "-", "(", "(", "bbx2", "-", "bbx1", ")", "*", "(", "bby2", "-", "bby1", ")", "/", "(", "xq", ".", "size", "(", ")", "[", "-", "1", "]", "*", "xq", ".", "size", "(", ")", "[", "-", "2", "]", ")", ")", "\n", "\n", "return", "mixed_x", ",", "lam", "\n", "\n", "", "def", "forward_crossmix", "(", "self", ",", "x1s", ",", "y1s", ",", "x1q", ",", "y1q", ",", "x2s", ",", "y2s", ",", "x2q", ",", "y2q", ")", ":", "\n", "        ", "lam_mix", "=", "self", ".", "dist", ".", "sample", "(", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "task_2_shuffle_id", "=", "np", ".", "arange", "(", "self", ".", "args", ".", "num_classes", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "task_2_shuffle_id", ")", "\n", "task_2_shuffle_id_s", "=", "np", ".", "array", "(", "\n", "[", "np", ".", "arange", "(", "self", ".", "args", ".", "update_batch_size", ")", "+", "task_2_shuffle_id", "[", "idx", "]", "*", "self", ".", "args", ".", "update_batch_size", "for", "idx", "in", "\n", "range", "(", "self", ".", "args", ".", "num_classes", ")", "]", ")", ".", "flatten", "(", ")", "\n", "task_2_shuffle_id_q", "=", "np", ".", "array", "(", "\n", "[", "np", ".", "arange", "(", "self", ".", "args", ".", "update_batch_size_eval", ")", "+", "task_2_shuffle_id", "[", "idx", "]", "*", "self", ".", "args", ".", "update_batch_size_eval", "for", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.protonet.Protonet.rand_bbox": [[81, 98], ["numpy.sqrt", "numpy.int", "numpy.int", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "lam.cpu"], "methods", ["None"], ["idx", "in", "range", "(", "self", ".", "args", ".", "num_classes", ")", "]", ")", ".", "flatten", "(", ")", "\n", "\n", "x2s", "=", "x2s", "[", "task_2_shuffle_id_s", "]", "\n", "x2q", "=", "x2q", "[", "task_2_shuffle_id_q", "]", "\n", "\n", "x_mix_s", ",", "_", "=", "self", ".", "mixup_data", "(", "x1s", ",", "x2s", ",", "lam_mix", ")", "\n", "\n", "x_mix_q", ",", "_", "=", "self", ".", "mixup_data", "(", "x1q", ",", "x2q", ",", "lam_mix", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x_mix_s", ",", "x_mix_q", "]", ",", "0", ")", "\n", "\n", "z", "=", "self", ".", "learner", "(", "x", ")", "\n", "\n", "z_dim", "=", "z", ".", "size", "(", "-", "1", ")", "\n", "\n", "z_proto", "=", "z", "[", ":", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", "]", ".", "view", "(", "self", ".", "args", ".", "num_classes", ",", "\n", "self", ".", "args", ".", "update_batch_size", ",", "z_dim", ")", ".", "mean", "(", "\n", "1", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.protonet.Protonet.mixup_data": [[99, 103], ["None"], "methods", ["None"], ["zq", "=", "z", "[", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size", ":", "]", "\n", "\n", "dists", "=", "euclidean_dist", "(", "zq", ",", "z_proto", ")", "\n", "\n", "log_p_y", "=", "F", ".", "log_softmax", "(", "-", "dists", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.protonet.Protonet.forward_crossmix": [[104, 148], ["protonet.Protonet.dist.sample().to", "numpy.arange", "numpy.random.shuffle", "numpy.array().flatten", "numpy.array().flatten", "protonet.Protonet.mixup_data", "protonet.Protonet.mixup_data", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "protonet.Protonet.learner.forward_crossmix", "protonet.Protonet.size", "z[].view().mean", "utils.euclidean_dist", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.stack().squeeze().mean", "torch.log_softmax.max", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.eq().float().mean", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "torch.stack().squeeze().mean.append", "protonet.Protonet.dist.sample", "numpy.array", "numpy.array", "z[].view", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "numpy.arange", "range", "numpy.arange", "range"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.mixup_data", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.mixup_data", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_crossmix", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist"], ["\n", "loss_val", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", "*", "self", ".", "args", ".", "update_batch_size_eval", ")", ":", "\n", "            ", "loss_val", ".", "append", "(", "-", "log_p_y", "[", "i", ",", "y1q", "[", "i", "]", "]", ")", "\n", "\n", "", "loss_val", "=", "torch", ".", "stack", "(", "loss_val", ")", ".", "squeeze", "(", ")", ".", "mean", "(", ")", "\n", "\n", "_", ",", "y_hat", "=", "log_p_y", ".", "max", "(", "1", ")", "\n", "\n", "acc_val", "=", "torch", ".", "eq", "(", "y_hat", ",", "y1q", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss_val", ",", "acc_val", "", "", "", ""]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.data_generator.Metabolism.__init__": [[11, 53], ["torch.utils.data.Dataset.__init__", "pickle.load", "len", "open", "data_generator.Metabolism.data.keys", "numpy.array", "numpy.array", "numpy.array", "numpy.nonzero", "numpy.nonzero", "numpy.nonzero", "numpy.nonzero"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["import", "ipdb", "\n", "\n", "class", "DermNet", "(", "Dataset", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "mode", ")", ":", "\n", "        ", "super", "(", "DermNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "nb_classes", "=", "args", ".", "num_classes", "\n", "self", ".", "nb_samples_per_class", "=", "args", ".", "update_batch_size", "+", "args", ".", "update_batch_size_eval", "\n", "self", ".", "n_way", "=", "args", ".", "num_classes", "\n", "self", ".", "k_shot", "=", "args", ".", "update_batch_size", "\n", "self", ".", "k_query", "=", "args", ".", "update_batch_size_eval", "\n", "self", ".", "set_size", "=", "self", ".", "n_way", "*", "self", ".", "k_shot", "\n", "self", ".", "query_size", "=", "self", ".", "n_way", "*", "self", ".", "k_query", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "data_file", "=", "'{}/DermNet/Dermnet_all_84.pkl'", ".", "format", "(", "args", ".", "datadir", ")", "\n", "\n", "self", ".", "data", "=", "pickle", ".", "load", "(", "open", "(", "self", ".", "data_file", ",", "'rb'", ")", ")", "\n", "num_data", "=", "[", "(", "eachkey", ",", "self", ".", "data", "[", "eachkey", "]", ".", "shape", "[", "0", "]", ")", "for", "eachkey", "in", "self", ".", "data", "]", "\n", "\n", "num_data", "=", "sorted", "(", "num_data", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "sel_class_num", "=", "int", "(", "self", ".", "args", ".", "ratio", "*", "150", ")", "\n", "print", "(", "sel_class_num", ")", "\n", "self", ".", "used_diseases", "=", "[", "eachid", "[", "0", "]", "for", "eachid", "in", "num_data", "[", ":", "sel_class_num", "]", "]", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "used_diseases", "=", "[", "eachid", "[", "0", "]", "for", "eachid", "in", "num_data", "[", "150", ":", "]", "]", "\n", "\n", "", "for", "eachkey", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "data", "[", "eachkey", "]", "=", "torch", ".", "tensor", "(", "np", ".", "transpose", "(", "self", ".", "data", "[", "eachkey", "]", "/", "np", ".", "float32", "(", "255", ")", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "args", ".", "metatrain_iterations", "*", "self", ".", "args", ".", "meta_batch_size", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "classes_idx", "=", "np", ".", "array", "(", "self", ".", "used_diseases", ")", "\n", "\n", "if", "self", ".", "args", ".", "train", ":", "\n", "            ", "support_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "query_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "\n", "support_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", "]", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.data_generator.Metabolism.__len__": [[55, 57], ["None"], "methods", ["None"], ["\n", "for", "meta_batch_id", "in", "range", "(", "self", ".", "args", ".", "meta_batch_size", ")", ":", "\n", "                ", "self", ".", "choose_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes_idx", ",", "size", "=", "self", ".", "nb_classes", ",", "replace", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.data_generator.Metabolism.__getitem__": [[58, 82], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice().item", "range", "torch.FloatTensor", "torch.LongTensor", "torch.FloatTensor", "torch.LongTensor", "numpy.array", "numpy.random.shuffle", "[].astype", "[].astype", "numpy.random.choice"], "methods", ["None"], ["for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", ":", "\n", "                    ", "self", ".", "samples_idx", "=", "np", ".", "arange", "(", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "samples_idx", ")", "\n", "choose_samples", "=", "self", ".", "samples_idx", "[", ":", "self", ".", "nb_samples_per_class", "]", "\n", "support_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", ":", "self", ".", "k_shot", "]", ",", "...", "]", "\n", "query_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", "self", ".", "k_shot", ":", "]", ",", "...", "]", "\n", "support_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "j", "\n", "query_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "j", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "support_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "set_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "support_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "set_size", "]", ")", "\n", "self", ".", "choose_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes_idx", ",", "size", "=", "self", ".", "nb_classes", ",", "replace", "=", "False", ")", "\n", "query_size_test", "=", "sum", "(", "[", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", "]", ")", "-", "self", ".", "set_size", "\n", "query_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "query_size_test", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "query_y", "=", "np", ".", "zeros", "(", "[", "query_size_test", "]", ")", "\n", "\n", "split_loc_pre", "=", "[", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", "-", "self", ".", "k_shot", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.data_generator.NCI.__init__": [[88, 128], ["torch.utils.data.Dataset.__init__", "pickle.load", "len", "open", "data_generator.NCI.data.keys", "numpy.array", "numpy.array", "numpy.array", "numpy.nonzero", "numpy.nonzero", "numpy.nonzero", "numpy.nonzero"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["choose_samples", "=", "self", ".", "samples_idx", "\n", "# idx1 = idx[0:self.k_shot + self.k_query]", "\n", "support_x", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", ":", "self", ".", "k_shot", "]", ",", "...", "]", "\n", "support_y", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "j", "\n", "\n", "query_x", "[", "query_split_loc_list", "[", "j", "]", ":", "query_split_loc_list", "[", "j", "+", "1", "]", "]", "=", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", "[", "\n", "choose_samples", "[", "self", ".", "k_shot", ":", "]", ",", "...", "]", "\n", "query_y", "[", "query_split_loc_list", "[", "j", "]", ":", "query_split_loc_list", "[", "j", "+", "1", "]", "]", "=", "j", "\n", "\n", "", "", "return", "support_x", ",", "torch", ".", "LongTensor", "(", "support_y", ")", ",", "query_x", ",", "torch", ".", "LongTensor", "(", "query_y", ")", "\n", "\n", "\n", "", "", "class", "ISIC", "(", "Dataset", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "mode", ")", ":", "\n", "        ", "super", "(", "ISIC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "nb_classes", "=", "args", ".", "num_classes", "\n", "self", ".", "nb_samples_per_class", "=", "args", ".", "update_batch_size", "+", "args", ".", "update_batch_size_eval", "\n", "self", ".", "n_way", "=", "args", ".", "num_classes", "\n", "self", ".", "k_shot", "=", "args", ".", "update_batch_size", "\n", "self", ".", "k_query", "=", "args", ".", "update_batch_size_eval", "\n", "self", ".", "set_size", "=", "self", ".", "n_way", "*", "self", ".", "k_shot", "\n", "self", ".", "query_size", "=", "self", ".", "n_way", "*", "self", ".", "k_query", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "data_file", "=", "'{}/ISIC/ISIC_train.pkl'", ".", "format", "(", "args", ".", "datadir", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "data_file", "=", "'{}/ISIC/ISIC_test.pkl'", ".", "format", "(", "args", ".", "datadir", ")", "\n", "\n", "", "self", ".", "data", "=", "pickle", ".", "load", "(", "open", "(", "self", ".", "data_file", ",", "'rb'", ")", ")", "\n", "\n", "for", "eachkey", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "data", "[", "eachkey", "]", "=", "torch", ".", "tensor", "(", "np", ".", "transpose", "(", "self", ".", "data", "[", "eachkey", "]", "/", "np", ".", "float32", "(", "255", ")", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "args", ".", "metatrain_iterations", "*", "self", ".", "args", ".", "meta_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.data_generator.NCI.__len__": [[130, 132], ["None"], "methods", ["None"], ["        ", "self", ".", "classes_idx", "=", "np", ".", "array", "(", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "train", ":", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.data_generator.NCI.__getitem__": [[133, 156], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.random.choice().item", "range", "torch.FloatTensor", "torch.LongTensor", "torch.FloatTensor", "torch.LongTensor", "numpy.array", "numpy.random.shuffle", "[].astype", "[].astype", "numpy.random.choice"], "methods", ["None"], ["            ", "support_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "query_x", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "(", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", ",", "3", ",", "84", ",", "84", ")", ")", ")", "\n", "\n", "support_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "set_size", "]", ")", "\n", "query_y", "=", "np", ".", "zeros", "(", "[", "self", ".", "args", ".", "meta_batch_size", ",", "self", ".", "query_size", "]", ")", "\n", "\n", "for", "meta_batch_id", "in", "range", "(", "self", ".", "args", ".", "meta_batch_size", ")", ":", "\n", "                ", "self", ".", "choose_classes", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes_idx", ",", "size", "=", "self", ".", "nb_classes", ",", "replace", "=", "False", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "nb_classes", ")", ":", "\n", "                    ", "self", ".", "samples_idx", "=", "np", ".", "arange", "(", "self", ".", "data", "[", "self", ".", "choose_classes", "[", "j", "]", "]", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "samples_idx", ")", "\n", "choose_samples", "=", "self", ".", "samples_idx", "[", ":", "self", ".", "nb_samples_per_class", "]", "\n", "# idx1 = idx[0:self.k_shot + self.k_query]", "\n", "support_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", ":", "self", ".", "k_shot", "]", ",", "...", "]", "\n", "query_x", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "self", ".", "data", "[", "\n", "self", ".", "choose_classes", "[", "\n", "j", "]", "]", "[", "choose_samples", "[", "\n", "self", ".", "k_shot", ":", "]", ",", "...", "]", "\n", "support_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_shot", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_shot", "]", "=", "j", "\n", "query_y", "[", "meta_batch_id", "]", "[", "j", "*", "self", ".", "k_query", ":", "(", "j", "+", "1", ")", "*", "self", ".", "k_query", "]", "=", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.euclidean_dist": [[3, 15], ["x.unsqueeze().expand.size", "y.unsqueeze().expand.size", "x.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze().expand", "y.unsqueeze().expand.unsqueeze().expand", "torch.pow().sum", "y.unsqueeze().expand.size", "x.unsqueeze().expand.unsqueeze", "y.unsqueeze().expand.unsqueeze", "torch.pow"], "function", ["None"], ["def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "# x: N x D", "\n", "# y: M x D", "\n", "    ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "m", "=", "y", ".", "size", "(", "0", ")", "\n", "d", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "d", "==", "y", ".", "size", "(", "1", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "n", ",", "m", ",", "d", ")", "\n", "\n", "return", "torch", ".", "pow", "(", "x", "-", "y", ",", "2", ")", ".", "sum", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.utils.accuracy": [[16, 29], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "", "", ""]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.Flatten.__init__": [[13, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.Flatten.forward": [[16, 18], ["x.view", "x.size"], "methods", ["None"], ["\n", "\n", "", "class", "Conv_Standard", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__": [[20, 29], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.distributions.Beta", "torch.distributions.Beta", "torch.distributions.Beta", "learner.FCNet.fc_block", "learner.FCNet.fc_block", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.__init__", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.fc_block", "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.fc_block"], ["        ", "super", "(", "Conv_Standard", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "self", ".", "conv_block", "(", "x_dim", ",", "hid_dim", ")", ",", "self", ".", "conv_block", "(", "hid_dim", ",", "hid_dim", ")", ",", "\n", "self", ".", "conv_block", "(", "hid_dim", ",", "hid_dim", ")", ",", "self", ".", "conv_block", "(", "hid_dim", ",", "z_dim", ")", ",", "Flatten", "(", ")", ")", "\n", "self", ".", "dist", "=", "Beta", "(", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "hid_dim", "=", "hid_dim", "\n", "\n", "", "def", "conv_block", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.fc_block": [[30, 35], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.mixup_data": [[37, 47], ["torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "", ""]], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward": [[48, 50], ["learner.FCNet.net"], "methods", ["None"], []], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_within": [[51, 62], ["learner.FCNet.mixup_data"], "methods", ["home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.mixup_data"], []], "home.repos.pwc.inspect_result.huaxiuyao_mlti.Bio.learner.FCNet.forward_crossmix": [[64, 67], ["None"], "methods", ["None"], []]}