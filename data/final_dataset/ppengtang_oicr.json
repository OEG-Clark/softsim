{"home.repos.pwc.inspect_result.ppengtang_oicr.roi_data_layer.minibatch.get_minibatch": [[18, 58], ["len", "numpy.randint", "minibatch._get_image_blob", "numpy.zeros", "numpy.zeros", "xrange", "minibatch._sample_rois", "minibatch._project_im_rois", "numpy.hstack", "numpy.vstack", "numpy.vstack", "len", "numpy.ones", "numpy.array", "numpy.round().dot", "numpy.unique", "numpy.round"], "function", ["home.repos.pwc.inspect_result.ppengtang_oicr.roi_data_layer.minibatch._get_image_blob", "home.repos.pwc.inspect_result.ppengtang_oicr.roi_data_layer.minibatch._sample_rois", "home.repos.pwc.inspect_result.ppengtang_oicr.roi_data_layer.minibatch._project_im_rois"], ["def", "get_minibatch", "(", "roidb", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Given a roidb, construct a minibatch sampled from it.\"\"\"", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "assert", "num_images", "==", "1", ",", "'batch size should equal to 1!'", "\n", "# Sample random scales to use for each image in this batch", "\n", "random_scale_inds", "=", "npr", ".", "randint", "(", "0", ",", "high", "=", "len", "(", "cfg", ".", "TRAIN", ".", "SCALES", ")", ",", "\n", "size", "=", "num_images", ")", "\n", "\n", "# Get the input image blob, formatted for caffe", "\n", "im_blob", ",", "im_scales", ",", "im_shapes", "=", "_get_image_blob", "(", "roidb", ",", "random_scale_inds", ")", "\n", "\n", "# Now, build the region of interest and label blobs", "\n", "rois_blob", "=", "np", ".", "zeros", "(", "(", "0", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels_blob", "=", "np", ".", "zeros", "(", "(", "0", ",", "20", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "im_i", "in", "xrange", "(", "num_images", ")", ":", "\n", "        ", "labels", ",", "im_rois", "=", "_sample_rois", "(", "roidb", "[", "im_i", "]", ",", "num_classes", ")", "\n", "\n", "# Add to RoIs blob", "\n", "rois", "=", "_project_im_rois", "(", "im_rois", ",", "im_scales", "[", "im_i", "]", ")", "\n", "batch_ind", "=", "im_i", "*", "np", ".", "ones", "(", "(", "rois", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "rois_blob_this_image", "=", "np", ".", "hstack", "(", "(", "batch_ind", ",", "rois", ")", ")", "\n", "\n", "if", "cfg", ".", "DEDUP_BOXES", ">", "0", ":", "\n", "            ", "v", "=", "np", ".", "array", "(", "[", "1", ",", "1e3", ",", "1e6", ",", "1e9", ",", "1e12", "]", ")", "\n", "hashes", "=", "np", ".", "round", "(", "rois_blob_this_image", "*", "cfg", ".", "DEDUP_BOXES", ")", ".", "dot", "(", "v", ")", "\n", "_", ",", "index", ",", "inv_index", "=", "np", ".", "unique", "(", "hashes", ",", "return_index", "=", "True", ",", "\n", "return_inverse", "=", "True", ")", "\n", "rois_blob_this_image", "=", "rois_blob_this_image", "[", "index", ",", ":", "]", "\n", "\n", "", "rois_blob", "=", "np", ".", "vstack", "(", "(", "rois_blob", ",", "rois_blob_this_image", ")", ")", "\n", "\n", "# Add to labels blobs", "\n", "labels_blob", "=", "np", ".", "vstack", "(", "(", "labels_blob", ",", "labels", ")", ")", "\n", "\n", "", "blobs", "=", "{", "'data'", ":", "im_blob", ",", "\n", "'rois'", ":", "rois_blob", ",", "\n", "'labels'", ":", "labels_blob", "}", "\n", "\n", "return", "blobs", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.roi_data_layer.minibatch._sample_rois": [[59, 72], ["len", "numpy.choice"], "function", ["None"], ["", "def", "_sample_rois", "(", "roidb", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Generate a random sample of RoIs comprising foreground and background\n    examples.\n    \"\"\"", "\n", "# label = class RoI has max overlap with", "\n", "labels", "=", "roidb", "[", "'labels'", "]", "\n", "rois", "=", "roidb", "[", "'boxes'", "]", "\n", "num_rois", "=", "len", "(", "rois", ")", "\n", "\n", "keep_inds", "=", "npr", ".", "choice", "(", "num_rois", ",", "size", "=", "num_rois", ",", "replace", "=", "False", ")", "\n", "rois", "=", "rois", "[", "keep_inds", "]", "\n", "\n", "return", "labels", ",", "rois", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.roi_data_layer.minibatch._get_image_blob": [[73, 97], ["len", "numpy.zeros", "xrange", "utils.blob.im_list_to_blob", "cv2.imread", "utils.blob.prep_im_for_blob", "im_scales.append", "processed_ims.append", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.ppengtang_oicr.utils.blob.im_list_to_blob", "home.repos.pwc.inspect_result.ppengtang_oicr.utils.blob.prep_im_for_blob"], ["", "def", "_get_image_blob", "(", "roidb", ",", "scale_inds", ")", ":", "\n", "    ", "\"\"\"Builds an input blob from the images in the roidb at the specified\n    scales.\n    \"\"\"", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "processed_ims", "=", "[", "]", "\n", "im_scales", "=", "[", "]", "\n", "im_shapes", "=", "np", ".", "zeros", "(", "(", "0", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "xrange", "(", "num_images", ")", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "roidb", "[", "i", "]", "[", "'image'", "]", ")", "\n", "if", "roidb", "[", "i", "]", "[", "'flipped'", "]", ":", "\n", "            ", "im", "=", "im", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "target_size", "=", "cfg", ".", "TRAIN", ".", "SCALES", "[", "scale_inds", "[", "i", "]", "]", "\n", "im", ",", "im_scale", ",", "im_shape", "=", "prep_im_for_blob", "(", "im", ",", "cfg", ".", "PIXEL_MEANS", ",", "\n", "target_size", ",", "\n", "cfg", ".", "TRAIN", ".", "MAX_SIZE", ")", "\n", "im_scales", ".", "append", "(", "im_scale", ")", "\n", "processed_ims", ".", "append", "(", "im", ")", "\n", "im_shapes", "=", "np", ".", "vstack", "(", "(", "im_shapes", ",", "im_shape", ")", ")", "\n", "\n", "# Create a blob to hold the input images", "\n", "", "blob", "=", "im_list_to_blob", "(", "processed_ims", ")", "\n", "\n", "return", "blob", ",", "im_scales", ",", "im_shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.roi_data_layer.minibatch._project_im_rois": [[98, 102], ["None"], "function", ["None"], ["", "def", "_project_im_rois", "(", "im_rois", ",", "im_scale_factor", ")", ":", "\n", "    ", "\"\"\"Project image RoIs into the rescaled training image.\"\"\"", "\n", "rois", "=", "im_rois", "*", "im_scale_factor", "\n", "return", "rois", "", "", ""]], "home.repos.pwc.inspect_result.ppengtang_oicr.roi_data_layer.roidb.prepare_roidb": [[16, 26], ["xrange", "len", "imdb.image_path_at"], "function", ["home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.image_path_at"], ["def", "prepare_roidb", "(", "imdb", ")", ":", "\n", "    ", "\"\"\"Enrich the imdb's roidb by adding some derived quantities that\n    are useful for training. This function precomputes the maximum\n    overlap, taken over ground-truth boxes, between each ROI and\n    each ground-truth box. The class with maximum overlap is also\n    recorded.\n    \"\"\"", "\n", "roidb", "=", "imdb", ".", "roidb", "\n", "for", "i", "in", "xrange", "(", "len", "(", "imdb", ".", "image_index", ")", ")", ":", "\n", "        ", "roidb", "[", "i", "]", "[", "'image'", "]", "=", "imdb", ".", "image_path_at", "(", "i", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ppengtang_oicr.utils.nms.nms": [[10, 38], ["scores.argsort", "keep.append", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.where"], "function", ["None"], ["def", "nms", "(", "dets", ",", "thresh", ")", ":", "\n", "    ", "x1", "=", "dets", "[", ":", ",", "0", "]", "\n", "y1", "=", "dets", "[", ":", ",", "1", "]", "\n", "x2", "=", "dets", "[", ":", ",", "2", "]", "\n", "y2", "=", "dets", "[", ":", ",", "3", "]", "\n", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "\n", "areas", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "order", "[", "0", "]", "\n", "keep", ".", "append", "(", "i", ")", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", "+", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy2", "-", "yy1", "+", "1", ")", "\n", "inter", "=", "w", "*", "h", "\n", "ovr", "=", "inter", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "order", "[", "1", ":", "]", "]", "-", "inter", ")", "\n", "\n", "inds", "=", "np", ".", "where", "(", "ovr", "<=", "thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "\n", "", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.ppengtang_oicr.utils.timer.Timer.__init__": [[12, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.", "\n", "self", ".", "diff", "=", "0.", "\n", "self", ".", "average_time", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.utils.timer.Timer.tic": [[19, 23], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.utils.timer.Timer.toc": [[24, 33], ["time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "        ", "self", ".", "diff", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "self", ".", "average_time", "=", "self", ".", "total_time", "/", "self", ".", "calls", "\n", "if", "average", ":", "\n", "            ", "return", "self", ".", "average_time", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "diff", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ppengtang_oicr.utils.blob.im_list_to_blob": [[15, 32], ["numpy.array().max", "len", "numpy.zeros", "xrange", "blob.transpose.transpose", "numpy.array"], "function", ["None"], ["def", "im_list_to_blob", "(", "ims", ")", ":", "\n", "    ", "\"\"\"Convert a list of images into a network input.\n\n    Assumes images are already prepared (means subtracted, BGR order, ...).\n    \"\"\"", "\n", "max_shape", "=", "np", ".", "array", "(", "[", "im", ".", "shape", "for", "im", "in", "ims", "]", ")", ".", "max", "(", "axis", "=", "0", ")", "\n", "num_images", "=", "len", "(", "ims", ")", "\n", "blob", "=", "np", ".", "zeros", "(", "(", "num_images", ",", "max_shape", "[", "0", "]", ",", "max_shape", "[", "1", "]", ",", "3", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "xrange", "(", "num_images", ")", ":", "\n", "        ", "im", "=", "ims", "[", "i", "]", "\n", "blob", "[", "i", ",", "0", ":", "im", ".", "shape", "[", "0", "]", ",", "0", ":", "im", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "im", "\n", "# Move channels (axis 3) to axis 1", "\n", "# Axis order will become: (batch elem, channel, height, width)", "\n", "", "channel_swap", "=", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "blob", "=", "blob", ".", "transpose", "(", "channel_swap", ")", "\n", "return", "blob", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.utils.blob.prep_im_for_blob": [[33, 48], ["cv2.resize.astype", "numpy.min", "numpy.max", "cv2.resize", "float", "float", "numpy.round", "numpy.array", "float", "float"], "function", ["None"], ["", "def", "prep_im_for_blob", "(", "im", ",", "pixel_means", ",", "target_size", ",", "max_size", ")", ":", "\n", "    ", "\"\"\"Mean subtract and scale an image for use in a blob.\"\"\"", "\n", "im", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "im", "-=", "pixel_means", "\n", "im_shape", "=", "im", ".", "shape", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "max", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_scale", "=", "float", "(", "target_size", ")", "/", "float", "(", "im_size_min", ")", "\n", "# Prevent the biggest axis from being more than MAX_SIZE", "\n", "if", "np", ".", "round", "(", "im_scale", "*", "im_size_max", ")", ">", "max_size", ":", "\n", "        ", "im_scale", "=", "float", "(", "max_size", ")", "/", "float", "(", "im_size_max", ")", "\n", "", "im", "=", "cv2", ".", "resize", "(", "im", ",", "None", ",", "None", ",", "fx", "=", "im_scale", ",", "fy", "=", "im_scale", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "im", ",", "im_scale", ",", "np", ".", "array", "(", "im", ".", "shape", "[", "1", ":", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.__init__": [[21, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_num_classes", "=", "0", "\n", "self", ".", "_classes", "=", "[", "]", "\n", "self", ".", "_image_index", "=", "[", "]", "\n", "self", ".", "_obj_proposer", "=", "'selective_search'", "\n", "self", ".", "_roidb", "=", "None", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "default_roidb", "\n", "# Use this dict for storing dataset specific config options", "\n", "self", ".", "config", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.name": [[32, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.num_classes": [[36, 39], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.classes": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.image_index": [[44, 47], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.roidb_handler": [[52, 55], ["None"], "methods", ["None"], ["", "@", "roidb_handler", ".", "setter", "\n", "def", "roidb_handler", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "_roidb_handler", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.roidb": [[56, 66], ["imdb.imdb.roidb_handler"], "methods", ["home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.roidb_handler"], ["", "@", "property", "\n", "def", "roidb", "(", "self", ")", ":", "\n", "# A roidb is a list of dictionaries, each with the following keys:", "\n", "#   boxes", "\n", "#   labels", "\n", "#   flipped", "\n", "        ", "if", "self", ".", "_roidb", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_roidb", "\n", "", "self", ".", "_roidb", "=", "self", ".", "roidb_handler", "(", ")", "\n", "return", "self", ".", "_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.cache_path": [[67, 73], ["os.abspath", "os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "cache_path", "(", "self", ")", ":", "\n", "        ", "cache_path", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "datasets", ".", "ROOT_DIR", ",", "'data'", ",", "'cache'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cache_path", ")", "\n", "", "return", "cache_path", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.num_images": [[74, 77], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_images", "(", "self", ")", ":", "\n", "      ", "return", "len", "(", "self", ".", "image_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.image_path_at": [[78, 80], ["None"], "methods", ["None"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.default_roidb": [[81, 83], ["None"], "methods", ["None"], ["", "def", "default_roidb", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.evaluate_detections": [[84, 94], ["None"], "methods", ["None"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        all_boxes is a list of length number-of-classes.\n        Each list element is a list of length number-of-images.\n        Each of those list elements is either an empty list []\n        or a numpy array of detection.\n\n        all_boxes[class][image] = [] or np.array of shape #dets x 5\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.evaluate_discovery": [[95, 105], ["None"], "methods", ["None"], ["", "def", "evaluate_discovery", "(", "self", ",", "all_boxes", ",", "output_dir", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        all_boxes is a list of length number-of-classes.\n        Each list element is a list of length number-of-images.\n        Each of those list elements is either an empty list []\n        or a numpy array of detection.\n\n        all_boxes[class][image] = [] or np.array of shape #dets x 5\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.append_flipped_images": [[106, 122], ["xrange", "[].copy", "boxes[].copy", "boxes[].copy", "imdb.imdb.roidb.append", "xrange", "PIL.Image.open", "imdb.imdb.image_path_at"], "methods", ["home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.image_path_at"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "        ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "[", "PIL", ".", "Image", ".", "open", "(", "self", ".", "image_path_at", "(", "i", ")", ")", ".", "size", "[", "0", "]", "\n", "for", "i", "in", "xrange", "(", "num_images", ")", "]", "\n", "for", "i", "in", "xrange", "(", "num_images", ")", ":", "\n", "            ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "'boxes'", ":", "boxes", ",", "\n", "'labels'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'labels'", "]", ",", "\n", "'flipped'", ":", "True", "}", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.create_roidb_from_box_list": [[123, 146], ["len", "xrange", "xrange", "roidb.append", "roidb.append", "numpy.array", "numpy.zeros"], "methods", ["None"], ["", "def", "create_roidb_from_box_list", "(", "self", ",", "box_list", ",", "gt_roidb", ")", ":", "\n", "        ", "assert", "len", "(", "box_list", ")", "==", "self", ".", "num_images", ",", "'Number of boxes must match number of ground-truth images'", "\n", "roidb", "=", "[", "]", "\n", "\n", "if", "gt_roidb", "is", "not", "None", ":", "\n", "            ", "for", "i", "in", "xrange", "(", "self", ".", "num_images", ")", ":", "\n", "                ", "boxes", "=", "box_list", "[", "i", "]", "\n", "\n", "real_label", "=", "gt_roidb", "[", "i", "]", "[", "'labels'", "]", "\n", "\n", "roidb", ".", "append", "(", "{", "'boxes'", ":", "boxes", ",", "\n", "'labels'", ":", "np", ".", "array", "(", "[", "real_label", "]", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "'flipped'", ":", "False", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "xrange", "(", "self", ".", "num_images", ")", ":", "\n", "                ", "boxes", "=", "box_list", "[", "i", "]", "\n", "\n", "roidb", ".", "append", "(", "{", "'boxes'", ":", "boxes", ",", "\n", "'labels'", ":", "np", ".", "zeros", "(", "(", "1", ",", "0", ")", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "'flipped'", ":", "False", "}", ")", "\n", "\n", "", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.imdb.imdb.competition_mode": [[147, 150], ["None"], "methods", ["None"], ["", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "        ", "\"\"\"Turn competition mode on or off.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.factory.get_imdb": [[24, 29], ["__sets.has_key", "KeyError"], "function", ["None"], ["", "", "def", "get_imdb", "(", "name", ")", ":", "\n", "    ", "\"\"\"Get an imdb (image database) by name.\"\"\"", "\n", "if", "not", "__sets", ".", "has_key", "(", "name", ")", ":", "\n", "        ", "raise", "KeyError", "(", "'Unknown dataset: {}'", ".", "format", "(", "name", ")", ")", "\n", "", "return", "__sets", "[", "name", "]", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.factory.list_imdbs": [[30, 33], ["__sets.keys"], "function", ["None"], ["", "def", "list_imdbs", "(", ")", ":", "\n", "    ", "\"\"\"List all registered imdbs.\"\"\"", "\n", "return", "__sets", ".", "keys", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ppengtang_oicr.datasets.__init__._which": [[23, 40], ["os.path.split", "__init__._which.is_exe"], "function", ["None"], []], "home.repos.pwc.inspect_result.ppengtang_oicr.fast_rcnn.config.get_output_dir": [[110, 121], ["os.abspath", "os.join", "os.join"], "function", ["None"], ["def", "get_output_dir", "(", "imdb", ",", "net", ")", ":", "\n", "    ", "\"\"\"Return the directory where experimental artifacts are placed.\n\n    A canonical path is built using the name from an imdb and a network\n    (if not None).\n    \"\"\"", "\n", "path", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "__C", ".", "ROOT_DIR", ",", "'output'", ",", "__C", ".", "EXP_DIR", ",", "imdb", ".", "name", ")", ")", "\n", "if", "net", "is", "None", ":", "\n", "        ", "return", "path", "\n", "", "else", ":", "\n", "        ", "return", "osp", ".", "join", "(", "path", ",", "net", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.fast_rcnn.config._merge_a_into_b": [[122, 149], ["a.iteritems", "type", "b.has_key", "KeyError", "type", "type", "ValueError", "type", "config._merge_a_into_b", "type", "type", "print"], "function", ["home.repos.pwc.inspect_result.ppengtang_oicr.fast_rcnn.config._merge_a_into_b"], ["", "", "def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n    options in b whenever they are also specified in a.\n    \"\"\"", "\n", "if", "type", "(", "a", ")", "is", "not", "edict", ":", "\n", "        ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "a", ".", "iteritems", "(", ")", ":", "\n", "# a must specify keys that are in b", "\n", "        ", "if", "not", "b", ".", "has_key", "(", "k", ")", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is not a valid config key'", ".", "format", "(", "k", ")", ")", "\n", "\n", "# the types must match, too", "\n", "", "if", "type", "(", "b", "[", "k", "]", ")", "is", "not", "type", "(", "v", ")", ":", "\n", "            ", "raise", "ValueError", "(", "(", "'Type mismatch ({} vs. {}) '", "\n", "'for config key: {}'", ")", ".", "format", "(", "type", "(", "b", "[", "k", "]", ")", ",", "\n", "type", "(", "v", ")", ",", "k", ")", ")", "\n", "\n", "# recursively merge dicts", "\n", "", "if", "type", "(", "v", ")", "is", "edict", ":", "\n", "            ", "try", ":", "\n", "                ", "_merge_a_into_b", "(", "a", "[", "k", "]", ",", "b", "[", "k", "]", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'Error under config key: {}'", ".", "format", "(", "k", ")", ")", "\n", "raise", "\n", "", "", "else", ":", "\n", "            ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.fast_rcnn.config.cfg_from_file": [[150, 157], ["config._merge_a_into_b", "open", "easydict.EasyDict", "yaml.load"], "function", ["home.repos.pwc.inspect_result.ppengtang_oicr.fast_rcnn.config._merge_a_into_b"], ["", "", "", "def", "cfg_from_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load a config file and merge it into the default options.\"\"\"", "\n", "import", "yaml", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "yaml_cfg", "=", "edict", "(", "yaml", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "_merge_a_into_b", "(", "yaml_cfg", ",", "__C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.fast_rcnn.config.cfg_from_list": [[158, 179], ["zip", "k.split", "d.has_key", "len", "d.has_key", "literal_eval", "type", "type", "type", "type"], "function", ["None"], ["", "def", "cfg_from_list", "(", "cfg_list", ")", ":", "\n", "    ", "\"\"\"Set config keys via list (e.g., from command line).\"\"\"", "\n", "from", "ast", "import", "literal_eval", "\n", "assert", "len", "(", "cfg_list", ")", "%", "2", "==", "0", "\n", "for", "k", ",", "v", "in", "zip", "(", "cfg_list", "[", "0", ":", ":", "2", "]", ",", "cfg_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "        ", "key_list", "=", "k", ".", "split", "(", "'.'", ")", "\n", "d", "=", "__C", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "            ", "assert", "d", ".", "has_key", "(", "subkey", ")", "\n", "d", "=", "d", "[", "subkey", "]", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "assert", "d", ".", "has_key", "(", "subkey", ")", "\n", "try", ":", "\n", "            ", "value", "=", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "# handle the case when v is a string literal", "\n", "            ", "value", "=", "v", "\n", "", "assert", "type", "(", "value", ")", "==", "type", "(", "d", "[", "subkey", "]", ")", ",", "'type {} does not match original type {}'", ".", "format", "(", "\n", "type", "(", "value", ")", ",", "type", "(", "d", "[", "subkey", "]", ")", ")", "\n", "d", "[", "subkey", "]", "=", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ppengtang_oicr.fast_rcnn.bbox_transform.bbox_transform": [[10, 29], ["numpy.log", "numpy.log", "numpy.vstack().transpose", "numpy.vstack"], "function", ["None"], ["def", "bbox_transform", "(", "ex_rois", ",", "gt_rois", ")", ":", "\n", "    ", "ex_widths", "=", "ex_rois", "[", ":", ",", "2", "]", "-", "ex_rois", "[", ":", ",", "0", "]", "+", "1.0", "\n", "ex_heights", "=", "ex_rois", "[", ":", ",", "3", "]", "-", "ex_rois", "[", ":", ",", "1", "]", "+", "1.0", "\n", "ex_ctr_x", "=", "ex_rois", "[", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "ex_rois", "[", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "gt_rois", "[", ":", ",", "2", "]", "-", "gt_rois", "[", ":", ",", "0", "]", "+", "1.0", "\n", "gt_heights", "=", "gt_rois", "[", ":", ",", "3", "]", "-", "gt_rois", "[", ":", ",", "1", "]", "+", "1.0", "\n", "gt_ctr_x", "=", "gt_rois", "[", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "gt_rois", "[", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "targets_dx", "=", "(", "gt_ctr_x", "-", "ex_ctr_x", ")", "/", "ex_widths", "\n", "targets_dy", "=", "(", "gt_ctr_y", "-", "ex_ctr_y", ")", "/", "ex_heights", "\n", "targets_dw", "=", "np", ".", "log", "(", "gt_widths", "/", "ex_widths", ")", "\n", "targets_dh", "=", "np", ".", "log", "(", "gt_heights", "/", "ex_heights", ")", "\n", "\n", "targets", "=", "np", ".", "vstack", "(", "\n", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "targets_dh", ")", ")", ".", "transpose", "(", ")", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.fast_rcnn.bbox_transform.bbox_transform_inv": [[30, 62], ["boxes.astype.astype", "numpy.zeros", "numpy.zeros", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "def", "bbox_transform_inv", "(", "boxes", ",", "deltas", ")", ":", "\n", "    ", "if", "boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "0", ",", "deltas", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "deltas", ".", "dtype", ")", "\n", "\n", "", "boxes", "=", "boxes", ".", "astype", "(", "deltas", ".", "dtype", ",", "copy", "=", "False", ")", "\n", "\n", "widths", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.0", "\n", "heights", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.0", "\n", "ctr_x", "=", "boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "widths", "\n", "ctr_y", "=", "boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "heights", "\n", "\n", "dx", "=", "deltas", "[", ":", ",", "0", ":", ":", "4", "]", "\n", "dy", "=", "deltas", "[", ":", ",", "1", ":", ":", "4", "]", "\n", "dw", "=", "deltas", "[", ":", ",", "2", ":", ":", "4", "]", "\n", "dh", "=", "deltas", "[", ":", ",", "3", ":", ":", "4", "]", "\n", "\n", "pred_ctr_x", "=", "dx", "*", "widths", "[", ":", ",", "np", ".", "newaxis", "]", "+", "ctr_x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pred_ctr_y", "=", "dy", "*", "heights", "[", ":", ",", "np", ".", "newaxis", "]", "+", "ctr_y", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pred_w", "=", "np", ".", "exp", "(", "dw", ")", "*", "widths", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pred_h", "=", "np", ".", "exp", "(", "dh", ")", "*", "heights", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "pred_boxes", "=", "np", ".", "zeros", "(", "deltas", ".", "shape", ",", "dtype", "=", "deltas", ".", "dtype", ")", "\n", "# x1", "\n", "pred_boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "pred_ctr_x", "-", "0.5", "*", "pred_w", "\n", "# y1", "\n", "pred_boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "pred_ctr_y", "-", "0.5", "*", "pred_h", "\n", "# x2", "\n", "pred_boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "pred_ctr_x", "+", "0.5", "*", "pred_w", "\n", "# y2", "\n", "pred_boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "pred_ctr_y", "+", "0.5", "*", "pred_h", "\n", "\n", "return", "pred_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.fast_rcnn.bbox_transform.clip_boxes": [[63, 77], ["numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum"], "function", ["None"], ["", "def", "clip_boxes", "(", "boxes", ",", "im_shape", ")", ":", "\n", "    ", "\"\"\"\n    Clip boxes to image boundaries.\n    \"\"\"", "\n", "\n", "# x1 >= 0", "\n", "boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "0", ":", ":", "4", "]", ",", "im_shape", "[", "1", "]", "-", "1", ")", ",", "0", ")", "\n", "# y1 >= 0", "\n", "boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "1", ":", ":", "4", "]", ",", "im_shape", "[", "0", "]", "-", "1", ")", ",", "0", ")", "\n", "# x2 < im_shape[1]", "\n", "boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "2", ":", ":", "4", "]", ",", "im_shape", "[", "1", "]", "-", "1", ")", ",", "0", ")", "\n", "# y2 < im_shape[0]", "\n", "boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "3", ":", ":", "4", "]", ",", "im_shape", "[", "0", "]", "-", "1", ")", ",", "0", ")", "\n", "return", "boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.ppengtang_oicr.tools.test_net.parse_args": [[24, 57], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.ppengtang_oicr.tools.test_net.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an OICR network'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "dest", "=", "'gpu_id'", ",", "help", "=", "'GPU id to use'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--def'", ",", "dest", "=", "'prototxt'", ",", "\n", "help", "=", "'prototxt file defining the network'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "dest", "=", "'caffemodel'", ",", "\n", "help", "=", "'model to test'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'optional config file'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--wait'", ",", "dest", "=", "'wait'", ",", "\n", "help", "=", "'wait until net file exists'", ",", "\n", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "parser", ".", "add_argument", "(", "'--imdb'", ",", "dest", "=", "'imdb_name'", ",", "\n", "help", "=", "'dataset to test'", ",", "\n", "default", "=", "'voc_2007_test'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--comp'", ",", "dest", "=", "'comp_mode'", ",", "help", "=", "'competition mode'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--set'", ",", "dest", "=", "'set_cfgs'", ",", "\n", "help", "=", "'set config keys'", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ppengtang_oicr.tools._init_paths.add_path": [[15, 18], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]]}