{"home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.None.run.main": [[17, 64], ["torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "random.seed", "numpy.random.seed", "data.get_data", "data.get_data", "data.get_data", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "util.utils.init_label_pool", "math.ceil", "model.resnet.ResNet50Fc", "model.resnet.ResNet50Fc", "sample_strategy.strategy_loader.load_strategy", "print", "print", "print", "range", "os.path.join", "os.path.join", "os.path.join", "sample_strategy.strategy_loader.load_strategy.train_SDM", "sample_strategy.strategy_loader.load_strategy.test", "sample_strategy.strategy_loader.load_strategy.SDM_query", "sample_strategy.strategy_loader.load_strategy.sdm_active", "type"], "function", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.get_data", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.get_data", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.get_data", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.utils.init_label_pool", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.strategy_loader.load_strategy", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.train_SDM", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.test", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.SDM_query", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.sdm_active"], ["def", "main", "(", ")", ":", "\n", "# set random seed", "\n", "    ", "global", "device", ";", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "cfg", ".", "DEVICE", "if", "cfg", ".", "USE_CUDA", "else", "\"cpu\"", ")", "\n", "kwargs", "=", "{", "'num_workers'", ":", "cfg", ".", "NUM_WORK", ",", "'pin_memory'", ":", "True", "}", "if", "cfg", ".", "USE_CUDA", "else", "{", "}", "\n", "torch", ".", "manual_seed", "(", "cfg", ".", "SEED", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "cfg", ".", "SEED", ")", "\n", "random", ".", "seed", "(", "cfg", ".", "SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "cfg", ".", "SEED", ")", "\n", "\n", "# load train_source_data train_target_data and test_target_data", "\n", "train_source_data", "=", "loader", ".", "get_data", "(", "cfg", ".", "DATA_NAME", ",", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_PATH", ",", "cfg", ".", "DATA_SOURCE", ")", ",", "\n", "transform", ".", "train_transform", ",", "tr_or_te", "=", "'train'", ",", "n_views", "=", "cfg", ".", "N_VIEWS", ")", "\n", "train_target_data", "=", "loader", ".", "get_data", "(", "cfg", ".", "DATA_NAME", ",", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_PATH", ",", "cfg", ".", "DATA_TARGET", ")", ",", "\n", "transform", ".", "test_transform", ",", "tr_or_te", "=", "'train'", ",", "n_views", "=", "cfg", ".", "N_VIEWS", ")", "\n", "test_target_data", "=", "loader", ".", "get_data", "(", "cfg", ".", "DATA_NAME", ",", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_PATH", ",", "cfg", ".", "DATA_TARGET", ")", ",", "\n", "transform", ".", "test_transform", ",", "tr_or_te", "=", "'test'", ",", "n_views", "=", "cfg", ".", "N_VIEWS", ")", "\n", "\n", "source_train_loader", "=", "DataLoader", "(", "train_source_data", ",", "batch_size", "=", "cfg", ".", "BATCH_SIZE", ",", "\n", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "**", "kwargs", ")", "\n", "target_train_loader", "=", "DataLoader", "(", "train_target_data", ",", "batch_size", "=", "cfg", ".", "BATCH_SIZE", ",", "**", "kwargs", ")", "\n", "target_test_loader", "=", "DataLoader", "(", "test_target_data", ",", "batch_size", "=", "cfg", ".", "BATCH_SIZE", ",", "**", "kwargs", ")", "\n", "\n", "# init label pool", "\n", "n_pool", "=", "len", "(", "test_target_data", ")", "\n", "idxs_lb", "=", "init_label_pool", "(", "n_pool", ",", "cfg", ".", "NUM_INIT_LB", ")", "\n", "num_active", "=", "math", ".", "ceil", "(", "n_pool", "*", "cfg", ".", "QUERY_RATIO", ")", "\n", "\n", "# load model", "\n", "net", "=", "ResNet50Fc", "(", "class_num", "=", "cfg", ".", "DATA_CLASS", ")", "\n", "net2", "=", "ResNet50Fc", "(", "class_num", "=", "cfg", ".", "DATA_CLASS", ")", "\n", "# print(net.fc.weight.shape)", "\n", "\n", "# select strategy", "\n", "strategy", "=", "load_strategy", "(", "cfg", ".", "SAMPLE_STRATEGY", ",", "\n", "source_train_loader", ",", "target_train_loader", ",", "target_test_loader", ",", "idxs_lb", ",", "net", ",", "cfg", ")", "\n", "\n", "print", "(", "'-----------------------------------------------------------'", ")", "\n", "print", "(", "'Start Sample Strategy %s with data %s --> %s'", "%", "(", "type", "(", "strategy", ")", ".", "__name__", ",", "cfg", ".", "DATA_SOURCE", ",", "cfg", ".", "DATA_TARGET", ")", ")", "\n", "print", "(", "'-----------------------------------------------------------'", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "cfg", ".", "EPOCH", "+", "1", ")", ":", "\n", "        ", "strategy", ".", "train_SDM", "(", "epoch", ")", "\n", "if", "epoch", "in", "[", "10", ",", "12", ",", "14", ",", "16", ",", "18", "]", ":", "\n", "# query samples with different active learning strategy", "\n", "            ", "query_indx", "=", "strategy", ".", "SDM_query", "(", "num_active", ")", "\n", "strategy", ".", "sdm_active", "(", "query_indx", ",", "train_target_data", ",", "train_source_data", ")", "\n", "", "strategy", ".", "test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.RandomSample.RandomSampling.__init__": [[9, 12], ["strategy.Strategy.__init__", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.gaussian_blur.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source", ",", "target_train", ",", "target_test", ",", "idxs_lb", ",", "net", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "RandomSampling", ",", "self", ")", ".", "__init__", "(", "source", ",", "target_train", ",", "target_test", ",", "idxs_lb", ",", "net", ",", "cfg", ")", "\n", "global", "device", ";", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "self", ".", "cfg", ".", "DEVICE", "if", "self", ".", "cfg", ".", "USE_CUDA", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.RandomSample.RandomSampling.query": [[13, 15], ["numpy.random.permutation", "len"], "methods", ["None"], ["", "def", "query", "(", "self", ",", "num_active", ",", "candidate_dataset", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "permutation", "(", "len", "(", "candidate_dataset", ")", ")", "[", ":", "num_active", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.strategy.Strategy.__init__": [[16, 25], ["len", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "source", ",", "target_train", ",", "target_test", ",", "idxs_lb", ",", "net", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "source", "=", "source", "\n", "self", ".", "target_train", "=", "target_train", "\n", "self", ".", "target_test", "=", "target_test", "\n", "self", ".", "idxs_lb", "=", "idxs_lb", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "n_pool", "=", "len", "(", "target_train", ")", "\n", "global", "device", ";", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "self", ".", "cfg", ".", "DEVICE", "if", "self", ".", "cfg", ".", "USE_CUDA", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.strategy.Strategy.query": [[29, 31], ["None"], "methods", ["None"], ["", "def", "query", "(", "self", ",", "n", ")", ":", "\n", "        ", "pass", "\n", "# update labeled pool", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.strategy.Strategy.update": [[32, 34], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "idxs_lb", ")", ":", "\n", "        ", "self", ".", "idxs_lb", "=", "idxs_lb", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.strategy.Strategy._train": [[35, 49], ["strategy.Strategy.clf.train", "enumerate", "print", "optimizer.zero_grad", "strategy.Strategy.clf", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.backward", "optimizer.step", "data.to", "target.to", "print", "len", "torch.cross_entropy.item", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.utils.GradReverse.backward"], ["", "def", "_train", "(", "self", ",", "loader_tr", ",", "optimizer", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "clf", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "path", ",", "_", ")", "in", "enumerate", "(", "loader_tr", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "feature", ",", "output", "=", "self", ".", "clf", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "self", ".", "cfg", ".", "LOG_INTERVAL", "==", "0", ":", "\n", "                ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "loader_tr", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "loader_tr", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "print", "(", "'-----------------------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.strategy.Strategy.train_source_da": [[52, 56], ["strategy.Strategy.net.to", "torch.Adadelta", "torch.Adadelta", "torch.Adadelta", "strategy.Strategy._train", "strategy.Strategy.clf.parameters_list"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.strategy.Strategy._train", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet50Fc.parameters_list"], ["", "def", "train_source_da", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "clf", "=", "self", ".", "net", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adadelta", "(", "self", ".", "clf", ".", "parameters_list", "(", "self", ".", "cfg", ".", "LEARN_RATE", ")", ",", "lr", "=", "self", ".", "cfg", ".", "LEARN_RATE", ")", "\n", "self", ".", "_train", "(", "self", ".", "source", ",", "optimizer", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.strategy.Strategy.train_target": [[59, 61], ["None"], "methods", ["None"], ["", "def", "train_target", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.strategy.Strategy.train_MME": [[63, 94], ["strategy.Strategy.net.to", "torch.Adadelta", "torch.Adadelta", "torch.Adadelta", "strategy.Strategy.clf.train", "enumerate", "strategy.Strategy.clf.eval", "torch.Adadelta", "torch.Adadelta", "torch.Adadelta", "enumerate", "torch.Adadelta.step", "torch.Adadelta.zero_grad", "print", "torch.Adadelta.step", "strategy.Strategy.clf.parameters_list", "torch.Adadelta.zero_grad", "strategy.Strategy.clf", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.backward", "torch.Adadelta.step", "strategy.Strategy.clf.parameters_list", "strategy.Strategy.clf", "util.losses.adentropy", "util.losses.adentropy.backward", "data.to", "target.to", "print", "data.to", "target.to", "print", "len", "torch.cross_entropy.item", "len", "util.losses.adentropy.item", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet50Fc.parameters_list", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.utils.GradReverse.backward", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet50Fc.parameters_list", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.adentropy", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.utils.GradReverse.backward"], ["", "def", "train_MME", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "clf", "=", "self", ".", "net", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adadelta", "(", "self", ".", "clf", ".", "parameters_list", "(", "self", ".", "cfg", ".", "LEARN_RATE", ")", ",", "lr", "=", "self", ".", "cfg", ".", "LEARN_RATE", ")", "\n", "self", ".", "clf", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "path", ",", "_", ")", "in", "enumerate", "(", "self", ".", "source", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "feature", ",", "output", "=", "self", ".", "clf", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "self", ".", "cfg", ".", "LOG_INTERVAL", "==", "0", ":", "\n", "                ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "self", ".", "source", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "source", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "self", ".", "clf", ".", "eval", "(", ")", "\n", "optimizer_mme", "=", "optim", ".", "Adadelta", "(", "self", ".", "clf", ".", "parameters_list", "(", "0.01", ")", ",", "lr", "=", "0.01", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "path", ",", "_", ")", "in", "enumerate", "(", "self", ".", "target_train", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "# optimizer.zero_grad()", "\n", "feature", ",", "output", "=", "self", ".", "clf", "(", "data", ",", "reverse", "=", "True", ",", "eta", "=", "self", ".", "cfg", ".", "REVERSE_WEIGHT", ")", "\n", "ent_loss", "=", "adentropy", "(", "output", ",", "lamda", "=", "self", ".", "cfg", ".", "MME_LAMBDA", ")", "\n", "ent_loss", ".", "backward", "(", ")", "\n", "if", "batch_idx", "%", "self", ".", "cfg", ".", "LOG_INTERVAL", "==", "0", ":", "\n", "                ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tMME Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "self", ".", "target_train", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "target_train", ")", ",", "ent_loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "optimizer_mme", ".", "step", "(", ")", "\n", "optimizer_mme", ".", "zero_grad", "(", ")", "\n", "print", "(", "'-----------------------------------------------------------'", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.strategy.Strategy.active": [[97, 106], ["list", "aim_dataset.add_item", "candidate_dataset.remove_item", "list.append"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.ImageList.add_item", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.ImageList.remove_item"], ["", "def", "active", "(", "self", ",", "inds", ",", "candidate_dataset", ",", "aim_dataset", ")", ":", "\n", "        ", "active_samples", "=", "list", "(", ")", "\n", "for", "i", "in", "inds", ":", "\n", "            ", "_", ",", "target", ",", "path", ",", "_", "=", "candidate_dataset", "[", "i", "]", "\n", "active_samples", ".", "append", "(", "[", "path", ",", "target", "]", ")", "\n", "# self.idxs_lb[inds] = True", "\n", "\n", "", "aim_dataset", ".", "add_item", "(", "active_samples", ")", "\n", "candidate_dataset", ".", "remove_item", "(", "inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.__init__": [[20, 24], ["strategy.Strategy.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "SDM.SDM.net.to"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.gaussian_blur.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "source", ",", "target_train", ",", "target_test", ",", "idxs_lb", ",", "net", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "SDM", ",", "self", ")", ".", "__init__", "(", "source", ",", "target_train", ",", "target_test", ",", "idxs_lb", ",", "net", ",", "cfg", ")", "\n", "global", "device", ";", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "self", ".", "cfg", ".", "DEVICE", "if", "self", ".", "cfg", ".", "USE_CUDA", "else", "\"cpu\"", ")", "\n", "self", ".", "clf", "=", "self", ".", "net", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.sdm_active": [[25, 34], ["list", "aim_dataset.add_item", "candidate_dataset.remove_item", "list.append"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.ImageList.add_item", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.ImageList.remove_item"], ["", "def", "sdm_active", "(", "self", ",", "inds", ",", "candidate_dataset", ",", "aim_dataset", ")", ":", "\n", "        ", "active_samples", "=", "list", "(", ")", "\n", "for", "i", "in", "inds", ":", "\n", "            ", "_", ",", "target", ",", "path", ",", "_", "=", "candidate_dataset", "[", "i", "]", "\n", "active_samples", ".", "append", "(", "[", "path", ",", "target", "]", ")", "\n", "# self.idxs_lb[inds] = True", "\n", "\n", "", "aim_dataset", ".", "add_item", "(", "active_samples", ")", "\n", "candidate_dataset", ".", "remove_item", "(", "inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.train_SDM": [[36, 61], ["SDM.SDM.clf.train", "torch.Adadelta", "torch.Adadelta", "torch.Adadelta", "enumerate", "SDM.SDM.clf.parameters_list", "len", "torch.Adadelta.zero_grad", "SDM.SDM.clf", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "util.losses.Margin_loss", "total_loss.backward", "torch.Adadelta.step", "data.to", "target.to", "torch.unsqueeze.long", "torch.unsqueeze.long", "torch.unsqueeze.long", "torch.normalize", "torch.normalize", "torch.normalize", "print", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "len", "util.losses.Margin_loss.item", "torch.normalize", "torch.normalize", "torch.normalize", "len", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet50Fc.parameters_list", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.Margin_loss", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.utils.GradReverse.backward"], ["", "def", "train_SDM", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "clf", ".", "train", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adadelta", "(", "self", ".", "clf", ".", "parameters_list", "(", "self", ".", "cfg", ".", "LEARN_RATE", ")", ",", "lr", "=", "self", ".", "cfg", ".", "LEARN_RATE", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "path", ",", "_", ")", "in", "enumerate", "(", "self", ".", "source", ")", ":", "\n", "            ", "mini_batchsize", "=", "len", "(", "target", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "feature", ",", "logit", "=", "self", ".", "clf", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logit", ",", "target", ")", "\n", "label", "=", "torch", ".", "unsqueeze", "(", "target", ",", "dim", "=", "1", ")", "\n", "onehot_label", "=", "torch", ".", "zeros_like", "(", "logit", ")", ".", "scatter_", "(", "1", ",", "label", ".", "long", "(", ")", ",", "1", ")", "\n", "addition_loss", "=", "(", "F", ".", "normalize", "(", "logit", ")", "*", "onehot_label", ")", ".", "sum", "(", ")", "/", "mini_batchsize", "\n", "smooth_marginloss", "=", "1", "-", "(", "torch", ".", "sum", "(", "onehot_label", "*", "logit", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "*", "torch", ".", "ones_like", "(", "logit", ")", "-", "logit", ")", "\n", "margin_loss", "=", "Margin_loss", "(", "F", ".", "normalize", "(", "logit", ")", ",", "target", ",", "weight", "=", "smooth_marginloss", ")", "\n", "# margin_loss = Margin_loss(F.normalize(logit),target,margin=self.cfg.SDM_MARGIN,weight=smooth_marginloss)", "\n", "total_loss", "=", "margin_loss", "-", "1", "*", "addition_loss", "+", "loss", "\n", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "self", ".", "cfg", ".", "LOG_INTERVAL", "==", "0", ":", "\n", "# print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tClf CE Loss: {:.6f}'.format(", "\n", "#     epoch, batch_idx * len(data), len(self.source.dataset),", "\n", "#             100. * batch_idx / len(self.source), loss.item()))", "\n", "                ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tMargin Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "self", ".", "source", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "self", ".", "source", ")", ",", "margin_loss", ".", "item", "(", ")", ")", ")", "\n", "# print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tTotal Loss: {:.6f}'.format(", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.test": [[66, 84], ["SDM.SDM.clf.eval", "len", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "SDM.SDM.clf", "torch.cross_entropy().item", "torch.cross_entropy().item", "torch.cross_entropy().item", "output.argmax", "output.argmax.eq().sum().item", "len", "data.to", "target.to", "len", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "output.argmax.eq().sum", "output.argmax.eq", "target.view_as"], "methods", ["None"], ["", "", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "clf", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "target", ",", "path", ",", "_", "in", "self", ".", "target_test", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "feature", ",", "output", "=", "self", ".", "clf", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "self", ".", "target_test", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "self", ".", "target_test", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "self", ".", "target_test", ".", "dataset", ")", ")", ")", "\n", "print", "(", "'-----------------------------------------------------------'", ")", "\n", "return", "correct", "/", "len", "(", "self", ".", "target_test", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.margin_base": [[85, 89], ["probs.sort", "[].numpy", "uncertainty.sort"], "methods", ["None"], ["", "def", "margin_base", "(", "self", ",", "probs", ")", ":", "\n", "        ", "probs_sorted", ",", "idxs", "=", "probs", ".", "sort", "(", "descending", "=", "True", ")", "\n", "uncertainty", "=", "probs_sorted", "[", ":", ",", "0", "]", "-", "probs_sorted", "[", ":", ",", "1", "]", "\n", "return", "uncertainty", ".", "sort", "(", ")", "[", "1", "]", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.entropy_base": [[91, 95], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "[].numpy", "uncertainty.sort"], "methods", ["None"], ["", "def", "entropy_base", "(", "self", ",", "probs", ")", ":", "\n", "        ", "log_probs", "=", "torch", ".", "log", "(", "probs", ")", "\n", "uncertainty", "=", "(", "probs", "*", "log_probs", ")", ".", "sum", "(", "1", ")", "\n", "return", "uncertainty", ".", "sort", "(", ")", "[", "1", "]", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.least_confidence": [[96, 99], ["[].numpy", "probs.max", "uncertainty.sort"], "methods", ["None"], ["", "def", "least_confidence", "(", "self", ",", "probs", ")", ":", "\n", "        ", "uncertainty", "=", "probs", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "return", "uncertainty", ".", "sort", "(", ")", "[", "1", "]", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.predict_prob2": [[100, 114], ["model.eval", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.to", "y.to", "torch.softmax.cpu", "output.cpu", "feature.cpu"], "methods", ["None"], ["", "def", "predict_prob2", "(", "self", ",", "model", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "probs", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "cfg", ".", "DATA_CLASS", "]", ")", "\n", "logits", "=", "torch", ".", "zeros", "(", "[", "1", ",", "self", ".", "cfg", ".", "DATA_CLASS", "]", ")", "\n", "emb", "=", "torch", ".", "zeros", "(", "[", "1", ",", "256", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "x", ",", "y", ",", "_", ",", "idxs", "in", "self", ".", "target_train", ":", "\n", "                ", "x", ",", "y", "=", "Variable", "(", "x", ".", "to", "(", "device", ")", ")", ",", "Variable", "(", "y", ".", "to", "(", "device", ")", ")", "\n", "feature", ",", "output", "=", "model", "(", "x", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "probs", "=", "torch", ".", "cat", "(", "[", "probs", ",", "prob", ".", "cpu", "(", ")", ".", "data", "]", ",", "0", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "logits", ",", "output", ".", "cpu", "(", ")", ".", "data", "]", ",", "0", ")", "\n", "emb", "=", "torch", ".", "cat", "(", "[", "emb", ",", "feature", ".", "cpu", "(", ")", ".", "data", "]", ",", "0", ")", "\n", "", "", "return", "probs", "[", "1", ":", "]", ",", "emb", "[", "1", ":", "]", ",", "logits", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.SDM_query": [[115, 132], ["SDM.SDM.pdf", "st_probs.sort", "[].numpy", "time.time", "[].numpy.sort"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.pdf"], ["", "def", "SDM_query", "(", "self", ",", "num_active", ")", ":", "\n", "        ", "st_uncertainty", ",", "st_probs", ",", "start_time", "=", "self", ".", "pdf", "(", "self", ".", "clf", ")", "\n", "s_probs_sorted", ",", "_", "=", "st_probs", ".", "sort", "(", "descending", "=", "True", ")", "\n", "# margin", "\n", "margin", "=", "s_probs_sorted", "[", ":", ",", "0", "]", "-", "s_probs_sorted", "[", ":", ",", "1", "]", "\n", "# uncertainty", "\n", "# uncertainty = self.entropy_base(st_probs)", "\n", "# uncertainty = self.least_confidence(st_probs)", "\n", "# uncertainty = margin", "\n", "uncertainty", "=", "margin", "-", "self", ".", "cfg", ".", "SDM_LAMBDA", "*", "st_uncertainty", "\n", "uncertainty", "=", "uncertainty", ".", "sort", "(", ")", "[", "1", "]", ".", "numpy", "(", ")", "\n", "#print(margin.sort()[1].numpy() == uncertainty)", "\n", "#print(uncertainty)", "\n", "chosen", "=", "uncertainty", "[", ":", "num_active", "]", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "# print('total time : ', end_time-start_time)", "\n", "return", "chosen", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.pdf": [[133, 171], ["SDM.SDM.predict_prob2", "model.fc.weight.cpu", "time.time", "s_probs.sort", "s_probs_sorted[].reshape", "s_probs_sorted[].reshape", "s_embs.requires_grad_.requires_grad_.requires_grad_", "copy.deepcopy().cpu", "copy.deepcopy().cpu.", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.multi_margin_loss", "torch.multi_margin_loss", "torch.multi_margin_loss", "torch.multi_margin_loss", "torch.multi_margin_loss", "torch.multi_margin_loss", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.unsqueeze.long", "torch.unsqueeze.long", "torch.unsqueeze.long", "torch.unsqueeze.long", "torch.unsqueeze.long", "torch.unsqueeze.long", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "copy.deepcopy", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "s_probs_sorted[].unsqueeze", "s_probs_sorted[].unsqueeze", "s_probs_sorted[].unsqueeze", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.SDM.SDM.predict_prob2"], ["", "def", "pdf", "(", "self", ",", "model", ")", ":", "\n", "# margin pdf", "\n", "        ", "s_probs", ",", "s_embs", ",", "_", "=", "self", ".", "predict_prob2", "(", "model", ")", "\n", "s_weight", "=", "model", ".", "fc", ".", "weight", ".", "cpu", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "s_probs_sorted", ",", "s_pos_sorted", "=", "s_probs", ".", "sort", "(", "descending", "=", "True", ")", "\n", "s_pos_weight", "=", "s_weight", "[", "s_pos_sorted", "]", "\n", "s_pmax1", "=", "s_probs_sorted", "[", ":", ",", "0", "]", ".", "reshape", "(", "s_pos_sorted", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "s_pmax2", "=", "s_probs_sorted", "[", ":", ",", "1", "]", ".", "reshape", "(", "s_pos_sorted", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "s_max1", "=", "(", "s_pmax1", "*", "(", "1", "-", "s_pmax1", ")", ")", "*", "s_pos_weight", "[", ":", ",", "0", ",", ":", "]", "\n", "s_max2", "=", "(", "s_pmax2", "*", "(", "1", "-", "s_pmax2", ")", ")", "*", "s_pos_weight", "[", ":", ",", "1", ",", ":", "]", "\n", "s_Q_tensor", "=", "s_max1", "-", "s_max2", "-", "torch", ".", "sum", "(", "(", "s_probs_sorted", "[", ":", ",", "2", ":", "]", ".", "unsqueeze", "(", "-", "1", ")", "*", "s_pos_weight", "[", ":", ",", "2", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "*", "(", "(", "s_probs_sorted", "[", ":", ",", "0", "]", "-", "s_probs_sorted", "[", ":", ",", "1", "]", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "# Loss pdf", "\n", "s_embs", "=", "s_embs", ".", "requires_grad_", "(", ")", "\n", "fc", "=", "deepcopy", "(", "model", ".", "fc", ")", ".", "cpu", "(", ")", "\n", "s_logits", "=", "fc", "(", "s_embs", ")", "\n", "max1_pseudo", "=", "s_pos_sorted", "[", ":", ",", "0", "]", "\n", "max2_pseudo", "=", "s_pos_sorted", "[", ":", ",", "1", "]", "\n", "ce_loss1", "=", "F", ".", "cross_entropy", "(", "s_logits", ",", "max1_pseudo", ")", "\n", "ce_loss2", "=", "F", ".", "cross_entropy", "(", "s_logits", ",", "max2_pseudo", ")", "\n", "margin_loss1", "=", "F", ".", "multi_margin_loss", "(", "F", ".", "normalize", "(", "s_logits", ")", ",", "max1_pseudo", ")", "\n", "margin_loss2", "=", "F", ".", "multi_margin_loss", "(", "F", ".", "normalize", "(", "s_logits", ")", ",", "max2_pseudo", ")", "\n", "label1", "=", "torch", ".", "unsqueeze", "(", "max1_pseudo", ",", "dim", "=", "1", ")", "\n", "label2", "=", "torch", ".", "unsqueeze", "(", "max2_pseudo", ",", "dim", "=", "1", ")", "\n", "onehot_label1", "=", "torch", ".", "zeros_like", "(", "s_logits", ")", ".", "scatter_", "(", "1", ",", "label1", ".", "long", "(", ")", ",", "1", ")", "\n", "onehot_label2", "=", "torch", ".", "zeros_like", "(", "s_logits", ")", ".", "scatter_", "(", "1", ",", "label2", ".", "long", "(", ")", ",", "1", ")", "\n", "addition_loss1", "=", "(", "F", ".", "normalize", "(", "s_logits", ")", "*", "onehot_label1", ")", ".", "sum", "(", ")", "/", "s_pos_sorted", ".", "shape", "[", "0", "]", "\n", "addition_loss2", "=", "(", "F", ".", "normalize", "(", "s_logits", ")", "*", "onehot_label2", ")", ".", "sum", "(", ")", "/", "s_pos_sorted", ".", "shape", "[", "0", "]", "\n", "loss1", "=", "ce_loss1", "+", "margin_loss1", "-", "addition_loss1", "\n", "loss2", "=", "ce_loss2", "+", "margin_loss2", "-", "addition_loss2", "\n", "grad1", "=", "-", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "loss1", ",", "inputs", "=", "s_embs", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "grad2", "=", "-", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "loss2", ",", "inputs", "=", "s_embs", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "grad", "=", "s_probs_sorted", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "-", "1", ")", "*", "grad1", "+", "s_probs_sorted", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", "*", "grad2", "\n", "# uncertainty", "\n", "uncertainty", "=", "torch", ".", "cosine_similarity", "(", "s_Q_tensor", ",", "grad", ")", "\n", "return", "uncertainty", ",", "s_probs", ",", "start_time", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.sample_strategy.strategy_loader.load_strategy": [[7, 16], ["strategy.lower", "RandomSample.RandomSampling", "strategy.lower", "SDM.SDM"], "function", ["None"], ["def", "load_strategy", "(", "strategy", ",", "source", ",", "target_train", ",", "target_test", ",", "idxs_lb", ",", "net", ",", "cfg", ")", ":", "\n", "    ", "if", "strategy", ".", "lower", "(", ")", "==", "'random'", ":", "\n", "# random", "\n", "        ", "return", "RandomSampling", "(", "source", ",", "target_train", ",", "target_test", ",", "idxs_lb", ",", "net", ",", "cfg", ")", "\n", "", "elif", "strategy", ".", "lower", "(", ")", "==", "'sdm'", ":", "\n", "# sdm", "\n", "        ", "return", "SDM", "(", "source", ",", "target_train", ",", "target_test", ",", "idxs_lb", ",", "net", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.BasicBlock.__init__": [[27, 39], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.gaussian_blur.GaussianBlur.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.BasicBlock.forward": [[41, 47], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.Bottleneck.__init__": [[52, 66], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.gaussian_blur.GaussianBlur.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.Bottleneck.forward": [[68, 75], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet.__init__": [[78, 90], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.gaussian_blur.GaussianBlur.__init__", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "100", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "embDim", "=", "512", "*", "block", ".", "expansion", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet._make_layer": [[91, 98], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet.forward": [[99, 110], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "# out = self.avgpool(out)", "\n", "emb", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "emb", ")", "\n", "return", "out", ",", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet.get_embedding_dim": [[111, 113], ["None"], "methods", ["None"], ["", "def", "get_embedding_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embDim", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet50Fc.__init__": [[140, 160], ["torch.Module.__init__", "torchvision.models.resnet50", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.gaussian_blur.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bottleneck_dim", "=", "256", ",", "class_num", "=", "100", ")", ":", "\n", "        ", "super", "(", "ResNet50Fc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_resnet", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "\n", "model_resnet", "=", "self", ".", "model_resnet", "\n", "self", ".", "conv1", "=", "model_resnet", ".", "conv1", "\n", "self", ".", "bn1", "=", "model_resnet", ".", "bn1", "\n", "self", ".", "relu", "=", "model_resnet", ".", "relu", "\n", "self", ".", "maxpool", "=", "model_resnet", ".", "maxpool", "\n", "self", ".", "layer1", "=", "model_resnet", ".", "layer1", "\n", "self", ".", "layer2", "=", "model_resnet", ".", "layer2", "\n", "self", ".", "layer3", "=", "model_resnet", ".", "layer3", "\n", "self", ".", "layer4", "=", "model_resnet", ".", "layer4", "\n", "self", ".", "avgpool", "=", "model_resnet", ".", "avgpool", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Linear", "(", "model_resnet", ".", "fc", ".", "in_features", ",", "bottleneck_dim", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "bottleneck_dim", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "bottleneck_dim", ",", "class_num", ")", "\n", "# self.fc = nn.Linear(model_resnet.fc.in_features, class_num)", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "bottleneck_dim", "=", "bottleneck_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet50Fc.forward": [[161, 178], ["resnet.ResNet50Fc.conv1", "resnet.ResNet50Fc.bn1", "resnet.ResNet50Fc.relu", "resnet.ResNet50Fc.maxpool", "resnet.ResNet50Fc.layer1", "resnet.ResNet50Fc.layer2", "resnet.ResNet50Fc.layer3", "resnet.ResNet50Fc.layer4", "resnet.ResNet50Fc.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet50Fc.bottleneck", "resnet.ResNet50Fc.bn2", "resnet.ResNet50Fc.fc", "util.utils.grad_reverse"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.utils.grad_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ",", "eta", "=", "0.1", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "bottleneck", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "if", "reverse", ":", "\n", "            ", "x", "=", "grad_reverse", "(", "x", ",", "eta", ")", "\n", "", "y", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet50Fc.output_num": [[179, 181], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet50Fc.parameters_list": [[182, 198], ["resnet.ResNet50Fc.conv1.parameters", "resnet.ResNet50Fc.bn1.parameters", "resnet.ResNet50Fc.maxpool.parameters", "resnet.ResNet50Fc.layer1.parameters", "resnet.ResNet50Fc.layer2.parameters", "resnet.ResNet50Fc.layer3.parameters", "resnet.ResNet50Fc.layer4.parameters", "resnet.ResNet50Fc.avgpool.parameters", "resnet.ResNet50Fc.bottleneck.parameters", "resnet.ResNet50Fc.fc.parameters"], "methods", ["None"], ["", "def", "parameters_list", "(", "self", ",", "lr", ")", ":", "\n", "        ", "parameter_list", "=", "[", "\n", "{", "'params'", ":", "self", ".", "conv1", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "/", "10", "}", ",", "\n", "{", "'params'", ":", "self", ".", "bn1", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "/", "10", "}", ",", "\n", "{", "'params'", ":", "self", ".", "maxpool", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "/", "10", "}", ",", "\n", "{", "'params'", ":", "self", ".", "layer1", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "/", "10", "}", ",", "\n", "{", "'params'", ":", "self", ".", "layer2", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "/", "10", "}", ",", "\n", "{", "'params'", ":", "self", ".", "layer3", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "/", "10", "}", ",", "\n", "{", "'params'", ":", "self", ".", "layer4", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "/", "10", "}", ",", "\n", "{", "'params'", ":", "self", ".", "avgpool", ".", "parameters", "(", ")", ",", "'lr'", ":", "lr", "/", "10", "}", ",", "\n", "{", "'params'", ":", "self", ".", "bottleneck", ".", "parameters", "(", ")", "}", ",", "\n", "# {'params': self.bn2.parameters()},", "\n", "{", "'params'", ":", "self", ".", "fc", ".", "parameters", "(", ")", "}", ",", "\n", "]", "\n", "\n", "return", "parameter_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet18": [[115, 117], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet34": [[118, 120], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet50": [[121, 123], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet101": [[124, 126], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet152": [[127, 129], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.test": [[130, 133], ["resnet.ResNet18", "ResNet18.", "torch.autograd.Variable", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.model.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", ",", "emb", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "# print(emb.size())", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.utils.GradReverse.forward": [[60, 64], ["x.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "lambd", "=", "1.0", ")", ":", "\n", "        ", "ctx", ".", "constant", "=", "lambd", "\n", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.utils.GradReverse.backward": [[65, 69], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "lambd", "=", "ctx", ".", "constant", "\n", "return", "(", "grad_output", "*", "-", "lambd", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.utils.init_label_pool": [[8, 15], ["numpy.zeros", "numpy.arange", "numpy.random.shuffle"], "function", ["None"], ["def", "init_label_pool", "(", "total_num", ",", "init_num", ")", ":", "\n", "    ", "idxs_lb", "=", "np", ".", "zeros", "(", "total_num", ",", "dtype", "=", "bool", ")", "\n", "idxs_tmp", "=", "np", ".", "arange", "(", "total_num", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idxs_tmp", ")", "\n", "idxs_lb", "[", "idxs_tmp", "[", ":", "init_num", "]", "]", "=", "True", "\n", "\n", "return", "idxs_lb", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.utils.completion_name": [[20, 56], ["whichset.lower", "prefix.lower", "whichset.lower", "prefix.lower", "prefix.lower", "whichset.lower", "prefix.lower", "prefix.lower", "prefix.lower", "prefix.lower", "prefix.lower", "prefix.lower", "prefix.lower", "prefix.lower", "prefix.lower", "prefix.lower"], "function", ["None"], ["", "def", "completion_name", "(", "prefix", ",", "whichset", ")", ":", "\n", "    ", "if", "whichset", ".", "lower", "(", ")", "==", "'officehome'", ":", "\n", "        ", "if", "prefix", ".", "lower", "(", ")", "==", "'a'", ":", "\n", "            ", "return", "'Art'", "\n", "", "elif", "prefix", ".", "lower", "(", ")", "==", "'c'", ":", "\n", "            ", "return", "'Clipart'", "\n", "", "elif", "prefix", ".", "lower", "(", ")", "==", "'p'", ":", "\n", "            ", "return", "'Product'", "\n", "", "elif", "prefix", ".", "lower", "(", ")", "==", "'r'", ":", "\n", "            ", "return", "'Real_World'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "", "", "elif", "whichset", ".", "lower", "(", ")", "==", "'domainnet'", ":", "\n", "        ", "if", "prefix", ".", "lower", "(", ")", "==", "'c'", ":", "\n", "            ", "return", "'clipart'", "\n", "", "elif", "prefix", ".", "lower", "(", ")", "==", "'i'", ":", "\n", "            ", "return", "'infograph'", "\n", "", "elif", "prefix", ".", "lower", "(", ")", "==", "'p'", ":", "\n", "            ", "return", "'painting'", "\n", "", "elif", "prefix", ".", "lower", "(", ")", "==", "'q'", ":", "\n", "            ", "return", "'quickdraw'", "\n", "", "elif", "prefix", ".", "lower", "(", ")", "==", "'r'", ":", "\n", "            ", "return", "'real'", "\n", "", "elif", "prefix", ".", "lower", "(", ")", "==", "'s'", ":", "\n", "            ", "return", "'sketch'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "", "", "elif", "whichset", ".", "lower", "(", ")", "==", "'office31'", ":", "\n", "        ", "if", "prefix", ".", "lower", "(", ")", "==", "'a'", ":", "\n", "            ", "return", "'amazon'", "\n", "", "elif", "prefix", ".", "lower", "(", ")", "==", "'w'", ":", "\n", "            ", "return", "'webcam'", "\n", "", "elif", "prefix", ".", "lower", "(", ")", "==", "'d'", ":", "\n", "            ", "return", "'dslr'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.utils.grad_reverse": [[71, 73], ["GradReverse.apply"], "function", ["None"], ["", "", "def", "grad_reverse", "(", "x", ",", "lambd", "=", "1.0", ")", ":", "\n", "    ", "return", "GradReverse", ".", "apply", "(", "x", ",", "lambd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.SCANLoss.__init__": [[88, 93], ["torch.Module.__init__", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.gaussian_blur.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "entropy_weight", "=", "2.0", ")", ":", "\n", "        ", "super", "(", "SCANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "bce", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "entropy_weight", "=", "entropy_weight", "# Default = 2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.SCANLoss.forward": [[94, 119], ["anchors.size", "losses.SCANLoss.softmax", "losses.SCANLoss.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "losses.SCANLoss.bce", "losses.entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "losses.SCANLoss.view", "losses.SCANLoss.view"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.entropy"], ["", "def", "forward", "(", "self", ",", "anchors", ",", "neighbors", ")", ":", "\n", "        ", "\"\"\"\n        input:\n            - anchors: logits for anchor images w/ shape [b, num_classes]\n            - neighbors: logits for neighbor images w/ shape [b, num_classes]\n        output:\n            - Loss\n        \"\"\"", "\n", "# Softmax", "\n", "b", ",", "n", "=", "anchors", ".", "size", "(", ")", "\n", "anchors_prob", "=", "self", ".", "softmax", "(", "anchors", ")", "\n", "positives_prob", "=", "self", ".", "softmax", "(", "neighbors", ")", "\n", "\n", "# Similarity in output space", "\n", "similarity", "=", "torch", ".", "bmm", "(", "anchors_prob", ".", "view", "(", "b", ",", "1", ",", "n", ")", ",", "positives_prob", ".", "view", "(", "b", ",", "n", ",", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "ones", "=", "torch", ".", "ones_like", "(", "similarity", ")", "\n", "consistency_loss", "=", "self", ".", "bce", "(", "similarity", ",", "ones", ")", "\n", "\n", "# Entropy loss", "\n", "entropy_loss", "=", "entropy", "(", "torch", ".", "mean", "(", "anchors_prob", ",", "0", ")", ",", "input_as_probabilities", "=", "True", ")", "\n", "\n", "# Total loss", "\n", "total_loss", "=", "consistency_loss", "-", "self", ".", "entropy_weight", "*", "entropy_loss", "\n", "\n", "return", "total_loss", ",", "consistency_loss", ",", "entropy_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.CrossEntropyLabelSmooth.__init__": [[139, 145], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.gaussian_blur.GaussianBlur.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", "=", "0.1", ",", "reduction", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.CrossEntropyLabelSmooth.forward": [[146, 162], ["losses.CrossEntropyLabelSmooth.logsoftmax", "losses.CrossEntropyLabelSmooth.new_zeros().scatter_", "losses.CrossEntropyLabelSmooth.new_zeros().scatter_.unsqueeze", "loss.mean", "losses.CrossEntropyLabelSmooth.new_zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: prediction matrix (before softmax) with shape (batch_size, num_classes)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "log_probs", ".", "new_zeros", "(", "log_probs", ".", "shape", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "reduction", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.adentropy": [[6, 13], ["torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["def", "adentropy", "(", "out_t1", ",", "lamda", ",", "reduce", "=", "True", ")", ":", "\n", "    ", "out_t1", "=", "F", ".", "softmax", "(", "out_t1", ",", "dim", "=", "1", ")", "\n", "loss_adent", "=", "lamda", "*", "torch", ".", "sum", "(", "out_t1", "*", "(", "torch", ".", "log", "(", "out_t1", "+", "1e-5", ")", ")", ",", "1", ")", "\n", "if", "reduce", ":", "\n", "        ", "loss_adent", "=", "torch", ".", "mean", "(", "loss_adent", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "loss_adent", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.info_nce_loss": [[14, 43], ["torch.cat", "torch.cat", "torch.cat", "torch.zeros().to.to", "torch.normalize", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().to", "torch.eye().to", "torch.eye().to", "labels[].view", "similarity_matrix[].view", "similarity_matrix[].view", "similarity_matrix[].view", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.arange", "torch.arange", "torch.arange", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros().to.unsqueeze", "torch.zeros().to.unsqueeze", "torch.zeros().to.bool", "torch.zeros().to.bool"], "function", ["None"], ["", "def", "info_nce_loss", "(", "features", ",", "batch_size", ",", "device", ",", "n_views", "=", "2", ",", "temperature", "=", "0.07", ")", ":", "\n", "\n", "    ", "assert", "n_views", "==", "2", ",", "\"Only two view training is supported.\"", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "batch_size", ")", "for", "i", "in", "range", "(", "n_views", ")", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "(", "labels", ".", "unsqueeze", "(", "0", ")", "==", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "float", "(", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "features", "=", "F", ".", "normalize", "(", "features", ",", "dim", "=", "1", ")", "\n", "\n", "similarity_matrix", "=", "torch", ".", "matmul", "(", "features", ",", "features", ".", "T", ")", "\n", "\n", "# discard the main diagonal from both: labels and similarities matrix", "\n", "mask", "=", "torch", ".", "eye", "(", "labels", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", "[", "~", "mask", "]", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "similarity_matrix", "=", "similarity_matrix", "[", "~", "mask", "]", ".", "view", "(", "similarity_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# assert similarity_matrix.shape == labels.shape", "\n", "\n", "# select and combine multiple positives", "\n", "positives", "=", "similarity_matrix", "[", "labels", ".", "bool", "(", ")", "]", ".", "view", "(", "labels", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "# select only the negatives the negatives", "\n", "negatives", "=", "similarity_matrix", "[", "~", "labels", ".", "bool", "(", ")", "]", ".", "view", "(", "similarity_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "positives", ",", "negatives", "]", ",", "dim", "=", "1", ")", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "\n", "logits", "=", "logits", "/", "temperature", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.NT_XentLoss": [[44, 66], ["torch.normalize", "torch.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cosine_similarity", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.eye", "torch.eye", "torch.eye", "similarity_matrix[].view", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cross_entropy", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "NT_XentLoss", "(", "z1", ",", "z2", ",", "temperature", "=", "0.5", ")", ":", "\n", "    ", "z1", "=", "F", ".", "normalize", "(", "z1", ",", "dim", "=", "1", ")", "\n", "z2", "=", "F", ".", "normalize", "(", "z2", ",", "dim", "=", "1", ")", "\n", "N", ",", "Z", "=", "z1", ".", "shape", "\n", "device", "=", "z1", ".", "device", "\n", "representations", "=", "torch", ".", "cat", "(", "[", "z1", ",", "z2", "]", ",", "dim", "=", "0", ")", "\n", "similarity_matrix", "=", "F", ".", "cosine_similarity", "(", "representations", ".", "unsqueeze", "(", "1", ")", ",", "representations", ".", "unsqueeze", "(", "0", ")", ",", "dim", "=", "-", "1", ")", "\n", "l_pos", "=", "torch", ".", "diag", "(", "similarity_matrix", ",", "N", ")", "\n", "r_pos", "=", "torch", ".", "diag", "(", "similarity_matrix", ",", "-", "N", ")", "\n", "positives", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "r_pos", "]", ")", ".", "view", "(", "2", "*", "N", ",", "1", ")", "\n", "diag", "=", "torch", ".", "eye", "(", "2", "*", "N", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "diag", "[", "N", ":", ",", ":", "N", "]", "=", "diag", "[", ":", "N", ",", "N", ":", "]", "=", "diag", "[", ":", "N", ",", ":", "N", "]", "\n", "\n", "negatives", "=", "similarity_matrix", "[", "~", "diag", "]", ".", "view", "(", "2", "*", "N", ",", "-", "1", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "positives", ",", "negatives", "]", ",", "dim", "=", "1", ")", "\n", "logits", "/=", "temperature", "\n", "\n", "labels", "=", "torch", ".", "zeros", "(", "2", "*", "N", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "labels", ",", "reduction", "=", "'sum'", ")", "\n", "return", "loss", "/", "(", "2", "*", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.entropy": [[67, 86], ["torch.clamp", "torch.clamp", "torch.clamp", "len", "torch.log", "torch.log", "torch.log", "torch.softmax", "torch.log_softmax", "b.size", "b.sum().mean", "len", "ValueError", "b.size", "b.sum", "b.sum", "len", "b.size"], "function", ["None"], ["", "def", "entropy", "(", "x", ",", "input_as_probabilities", ")", ":", "\n", "    ", "\"\"\" \n    Helper function to compute the entropy over the batch \n    input: batch w/ shape [b, num_classes]\n    output: entropy value [is ideally -log(num_classes)]\n    \"\"\"", "\n", "\n", "if", "input_as_probabilities", ":", "\n", "        ", "x_", "=", "torch", ".", "clamp", "(", "x", ",", "min", "=", "1e-8", ")", "\n", "b", "=", "x_", "*", "torch", ".", "log", "(", "x_", ")", "\n", "", "else", ":", "\n", "        ", "b", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "*", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "len", "(", "b", ".", "size", "(", ")", ")", "==", "2", ":", "# Sample-wise entropy", "\n", "        ", "return", "-", "b", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "", "elif", "len", "(", "b", ".", "size", "(", ")", ")", "==", "1", ":", "# Distribution-wise entropy", "\n", "        ", "return", "-", "b", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Input tensor is %d-Dimensional'", "%", "(", "len", "(", "b", ".", "size", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.soft_entropy": [[121, 128], ["torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "", "def", "soft_entropy", "(", "out", ",", "pred", ",", "lamda", "=", "1", ",", "reduce", "=", "True", ")", ":", "\n", "    ", "out", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "\n", "loss_ent", "=", "-", "lamda", "*", "torch", ".", "sum", "(", "pred", "*", "(", "torch", ".", "log", "(", "out", "+", "1e-5", ")", ")", ",", "1", ")", "\n", "if", "reduce", ":", "\n", "        ", "loss_ent", "=", "torch", ".", "mean", "(", "loss_ent", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "loss_ent", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.cross_entropy_label_smooth": [[163, 172], ["CrossEntropyLabelSmooth().cuda", "CrossEntropyLabelSmooth().cuda.", "losses.CrossEntropyLabelSmooth"], "function", ["None"], ["", "", "", "def", "cross_entropy_label_smooth", "(", "pred", ",", "target", ",", "eps", ")", ":", "\n", "    ", "nclass", "=", "pred", ".", "shape", "[", "1", "]", "\n", "loss_func", "=", "CrossEntropyLabelSmooth", "(", "\n", "num_classes", "=", "nclass", ",", "\n", "epsilon", "=", "eps", ",", "\n", "reduction", "=", "True", "\n", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "loss_func", "(", "pred", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.softmax_mse_loss": [[174, 186], ["torch.softmax", "torch.softmax", "input_logits.size", "target_logits.size", "input_logits.size", "torch.mse_loss"], "function", ["None"], ["", "def", "softmax_mse_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_softmax", "=", "F", ".", "softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "num_classes", "=", "input_logits", ".", "size", "(", ")", "[", "1", "]", "\n", "return", "F", ".", "mse_loss", "(", "input_softmax", ",", "target_softmax", ",", "reduction", "=", "'sum'", ")", "/", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.softmax_kl_loss": [[188, 199], ["torch.log_softmax", "torch.softmax", "torch.kl_div", "input_logits.size", "target_logits.size"], "function", ["None"], ["", "def", "softmax_kl_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns KL divergence\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_log_softmax", "=", "F", ".", "log_softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "return", "F", ".", "kl_div", "(", "input_log_softmax", ",", "target_softmax", ",", "reduction", "=", "'sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.util.losses.Margin_loss": [[200, 217], ["torch.one_hot", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "Margin_loss", "(", "intensor", ",", "label", ",", "margin", "=", "1", ",", "keepdim", "=", "False", ",", "weight", "=", "None", ")", ":", "\n", "\n", "    ", "onehot_label", "=", "F", ".", "one_hot", "(", "label", ",", "intensor", ".", "shape", "[", "1", "]", ")", "\n", "weight", "=", "torch", ".", "ones_like", "(", "intensor", ")", "\n", "\n", "assert", "weight", ".", "shape", "==", "intensor", ".", "shape", "\n", "\n", "if", "not", "keepdim", ":", "\n", "        ", "loss", "=", "torch", ".", "sum", "(", "weight", "*", "torch", ".", "clamp", "(", "margin", "-", "(", "torch", ".", "sum", "(", "onehot_label", "*", "intensor", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "*", "torch", ".", "ones_like", "(", "intensor", ")", "-", "intensor", ")", "-", "onehot_label", ",", "min", "=", "0.0", ")", ")", "/", "(", "intensor", ".", "shape", "[", "0", "]", "*", "intensor", ".", "shape", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "torch", ".", "sum", "(", "weight", "*", "torch", ".", "clamp", "(", "margin", "-", "(", "torch", ".", "sum", "(", "onehot_label", "*", "intensor", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "*", "torch", ".", "ones_like", "(", "intensor", ")", "-", "intensor", ")", "-", "onehot_label", ",", "min", "=", "0.0", ")", ",", "1", ",", "keepdim", "=", "True", ")", "/", "(", "intensor", ".", "shape", "[", "0", "]", "*", "intensor", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.ImageList.__init__": [[28, 36], ["torchvision.datasets.VisionDataset.__init__", "numpy.loadtxt", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.gaussian_blur.GaussianBlur.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "contrastive_transform", "=", "None", ",", "n_views", "=", "1", ")", ":", "\n", "        ", "super", "(", "ImageList", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ")", "\n", "\n", "# self.samples = np.loadtxt(root, dtype=np.unicode_, delimiter=' ')", "\n", "self", ".", "samples", "=", "np", ".", "loadtxt", "(", "root", ",", "dtype", "=", "np", ".", "dtype", "(", "(", "np", ".", "unicode_", ",", "1000", ")", ")", ",", "delimiter", "=", "' '", ")", "\n", "self", ".", "loader", "=", "pil_loader", "\n", "self", ".", "contrastive_transform", "=", "contrastive_transform", "\n", "self", ".", "n_views", "=", "n_views", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.ImageList.__getitem__": [[37, 54], ["int", "dataset.ImageList.loader", "dataset.ImageList.transform", "torch.stack", "dataset.ImageList.transform", "range"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "target", "=", "int", "(", "target", ")", "\n", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "n_views", "==", "1", ":", "\n", "                ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "else", ":", "\n", "                ", "sample", "=", "[", "self", ".", "transform", "(", "sample", ")", "for", "i", "in", "range", "(", "self", ".", "n_views", ")", "]", "\n", "sample", "=", "torch", ".", "stack", "(", "sample", ",", "dim", "=", "0", ")", "\n", "# sample = torch.cat(sample, dim=1)", "\n", "# sample = self.transform(sample)", "\n", "\n", "", "", "return", "sample", ",", "target", ",", "path", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.ImageList.__len__": [[55, 57], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.ImageList.add_item": [[58, 61], ["numpy.concatenate"], "methods", ["None"], ["", "def", "add_item", "(", "self", ",", "addition", ")", ":", "\n", "        ", "self", ".", "samples", "=", "np", ".", "concatenate", "(", "(", "self", ".", "samples", ",", "addition", ")", ",", "axis", "=", "0", ")", "\n", "return", "self", ".", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.ImageList.remove_item": [[62, 66], ["reduced.astype.astype.astype", "numpy.delete"], "methods", ["None"], ["", "def", "remove_item", "(", "self", ",", "reduced", ")", ":", "\n", "        ", "reduced", "=", "reduced", ".", "astype", "(", "'int64'", ")", "\n", "self", ".", "samples", "=", "np", ".", "delete", "(", "self", ".", "samples", ",", "reduced", ",", "axis", "=", "0", ")", "\n", "return", "self", ".", "samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.get_data": [[9, 19], ["dataset.ImageList", "dataset.ImageList", "dataset.ImageList"], "function", ["None"], ["def", "get_data", "(", "name", ",", "path", ",", "transform", "=", "None", ",", "tr_or_te", "=", "'train'", ",", "n_views", "=", "1", ")", ":", "\n", "\n", "    ", "assert", "name", "in", "[", "'OfficeHome'", ",", "'DomainNet'", ",", "'Office31'", "]", "\n", "\n", "if", "name", "==", "'OfficeHome'", ":", "\n", "        ", "return", "ImageList", "(", "path", "+", "'.txt'", ",", "transform", "=", "transform", ",", "n_views", "=", "n_views", ")", "\n", "", "elif", "name", "==", "'DomainNet'", ":", "\n", "        ", "return", "ImageList", "(", "path", "+", "'_'", "+", "tr_or_te", "+", "'.txt'", ",", "transform", "=", "transform", ",", "n_views", "=", "n_views", ")", "\n", "", "elif", "name", "==", "'Office31'", ":", "\n", "        ", "return", "ImageList", "(", "path", "+", "'.txt'", ",", "transform", "=", "transform", ",", "n_views", "=", "n_views", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.dataset.pil_loader": [[21, 25], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["", "", "def", "pil_loader", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.gaussian_blur.GaussianBlur.__init__": [[14, 32], ["torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.ToPILImage", "torch.nn.ReflectionPad2d"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "kernel_size", ")", ":", "\n", "        ", "radias", "=", "kernel_size", "//", "2", "\n", "kernel_size", "=", "radias", "*", "2", "+", "1", "\n", "self", ".", "blur_h", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "kernel_size", "=", "(", "kernel_size", ",", "1", ")", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "groups", "=", "3", ")", "\n", "self", ".", "blur_v", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "kernel_size", "=", "(", "1", ",", "kernel_size", ")", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ",", "groups", "=", "3", ")", "\n", "self", ".", "k", "=", "kernel_size", "\n", "self", ".", "r", "=", "radias", "\n", "\n", "self", ".", "blur", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "radias", ")", ",", "\n", "self", ".", "blur_h", ",", "\n", "self", ".", "blur_v", "\n", ")", "\n", "\n", "self", ".", "pil_to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "tensor_to_pil", "=", "transforms", ".", "ToPILImage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tencentyouturesearch_activelearning-sdm.data.gaussian_blur.GaussianBlur.__call__": [[33, 52], ["gaussian_blur.GaussianBlur.pil_to_tensor().unsqueeze", "numpy.random.uniform", "numpy.arange", "numpy.exp", "torch.from_numpy().view().repeat", "gaussian_blur.GaussianBlur.blur_h.weight.data.copy_", "gaussian_blur.GaussianBlur.blur_v.weight.data.copy_", "gaussian_blur.GaussianBlur.tensor_to_pil", "torch.from_numpy().view().repeat.sum", "torch.from_numpy().view().repeat.view", "torch.from_numpy().view().repeat.view", "torch.no_grad", "gaussian_blur.GaussianBlur.blur", "img.squeeze.squeeze.squeeze", "gaussian_blur.GaussianBlur.pil_to_tensor", "torch.from_numpy().view", "numpy.power", "torch.from_numpy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "self", ".", "pil_to_tensor", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "sigma", "=", "np", ".", "random", ".", "uniform", "(", "0.1", ",", "2.0", ")", "\n", "x", "=", "np", ".", "arange", "(", "-", "self", ".", "r", ",", "self", ".", "r", "+", "1", ")", "\n", "x", "=", "np", ".", "exp", "(", "-", "np", ".", "power", "(", "x", ",", "2", ")", "/", "(", "2", "*", "sigma", "*", "sigma", ")", ")", "\n", "x", "=", "x", "/", "x", ".", "sum", "(", ")", "\n", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "3", ",", "1", ")", "\n", "\n", "self", ".", "blur_h", ".", "weight", ".", "data", ".", "copy_", "(", "x", ".", "view", "(", "3", ",", "1", ",", "self", ".", "k", ",", "1", ")", ")", "\n", "self", ".", "blur_v", ".", "weight", ".", "data", ".", "copy_", "(", "x", ".", "view", "(", "3", ",", "1", ",", "1", ",", "self", ".", "k", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "img", "=", "self", ".", "blur", "(", "img", ")", "\n", "img", "=", "img", ".", "squeeze", "(", ")", "\n", "\n", "", "img", "=", "self", ".", "tensor_to_pil", "(", "img", ")", "\n", "\n", "return", "img", "\n", "", "", ""]]}