{"home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.nbr_atten.HomoAttention.__init__": [[8, 24], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "nbr_atten.HomoAttention.feature2embed.cuda", "torch.Linear", "torch.Linear", "torch.Linear", "nbr_atten.HomoAttention.gcn2embed.cuda"], "methods", ["home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_MLP2_atten.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "num_sample", ",", "cuda", ",", "nbr_atten", ",", "embed_dim", ",", "feature_dim", ")", ":", "\n", "        ", "super", "(", "HomoAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_sample", "=", "num_sample", "\n", "self", ".", "cuda", "=", "cuda", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "nbr_atten", "=", "nbr_atten", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "feature_dim", "=", "feature_dim", "\n", "self", ".", "feature2embed", "=", "nn", ".", "Linear", "(", "feature_dim", ",", "embed_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "gcn", "=", "True", "\n", "if", "cuda", ":", "\n", "            ", "self", ".", "feature2embed", "=", "self", ".", "feature2embed", ".", "cuda", "(", ")", "\n", "", "if", "self", ".", "gcn", ":", "\n", "            ", "self", ".", "gcn2embed", "=", "nn", ".", "Linear", "(", "embed_dim", "*", "2", ",", "embed_dim", ",", "bias", "=", "True", ")", "\n", "if", "cuda", ":", "\n", "                ", "self", ".", "gcn2embed", "=", "self", ".", "gcn2embed", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.nbr_atten.HomoAttention.forward": [[27, 86], ["list", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "nbr_atten.HomoAttention.feature2embed", "nbr_atten.HomoAttention.feature2embed", "set.union", "len", "len", "nbr_atten.HomoAttention.features().cuda", "nbr_atten.HomoAttention.features().cuda", "sampled_neighbor_mat.cuda.cuda.cuda", "nbr_atten.HomoAttention.features", "nbr_atten.HomoAttention.features", "set", "enumerate", "enumerate", "range", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "normalized_attention.mm", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nbr_atten.HomoAttention.gcn2embed", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "normalized_attention.mm", "set", "set", "len", "len", "nbr_atten.HomoAttention.features", "nbr_atten.HomoAttention.features", "nbr_atten.HomoAttention.mm", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "sampled_neighbor_mat.cuda.cuda.div", "nbr_atten.HomoAttention.mm", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "sampled_neighbor_mat.cuda.cuda.div", "len", "sampler", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "nbr_atten.HomoAttention.t", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "nbr_atten.HomoAttention.t", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "torch.sum().repeat", "len", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "nodes", ",", "neighbors", ")", ":", "\n", "        ", "sampler", "=", "random", ".", "sample", "\n", "if", "self", ".", "num_sample", "==", "None", ":", "\n", "            ", "sampled_neighbors", "=", "neighbors", "\n", "", "else", ":", "\n", "            ", "sampled_neighbors", "=", "[", "\n", "set", "(", "sampler", "(", "neighbor", ",", "self", ".", "num_sample", ")", ")", "if", "len", "(", "neighbor", ")", ">", "self", ".", "num_sample", "else", "set", "(", "neighbor", ")", "for", "\n", "neighbor", "in", "neighbors", "]", "\n", "\n", "\n", "", "sampled_neighbors", "=", "[", "(", "sampled_neighbor", "|", "set", "(", "[", "nodes", "[", "i", "]", "]", ")", ")", "for", "i", ",", "sampled_neighbor", "in", "\n", "enumerate", "(", "sampled_neighbors", ")", "]", "\n", "\n", "unique_nodes_list", "=", "list", "(", "set", ".", "union", "(", "*", "sampled_neighbors", ")", ")", "\n", "unique_nodes_dict", "=", "{", "n", ":", "i", "for", "i", ",", "n", "in", "enumerate", "(", "unique_nodes_list", ")", "}", "\n", "sampled_neighbor_mat", "=", "torch", ".", "zeros", "(", "len", "(", "sampled_neighbors", ")", ",", "len", "(", "unique_nodes_dict", ")", ")", "\n", "row_indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "sampled_neighbors", ")", ")", "for", "j", "in", "range", "(", "len", "(", "sampled_neighbors", "[", "i", "]", ")", ")", "]", "\n", "col_indices", "=", "[", "unique_nodes_dict", "[", "n", "]", "for", "neighbor", "in", "sampled_neighbors", "for", "n", "in", "neighbor", "]", "\n", "sampled_neighbor_mat", "[", "row_indices", ",", "col_indices", "]", "=", "1", "\n", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "feature_matrix", "=", "self", ".", "features", "(", "torch", ".", "LongTensor", "(", "unique_nodes_list", ")", ")", ".", "cuda", "(", ")", "\n", "node_matrix", "=", "self", ".", "features", "(", "torch", ".", "LongTensor", "(", "nodes", ")", ")", ".", "cuda", "(", ")", "\n", "sampled_neighbor_mat", "=", "sampled_neighbor_mat", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "feature_matrix", "=", "self", ".", "features", "(", "torch", ".", "LongTensor", "(", "unique_nodes_list", ")", ")", "\n", "node_matrix", "=", "self", ".", "features", "(", "torch", ".", "LongTensor", "(", "nodes", ")", ")", "\n", "\n", "", "nbr_embedding", "=", "self", ".", "feature2embed", "(", "feature_matrix", ")", "\n", "node_embedding", "=", "self", ".", "feature2embed", "(", "node_matrix", ")", "\n", "\n", "\n", "if", "self", ".", "gcn", ":", "\n", "            ", "if", "self", ".", "nbr_atten", ":", "\n", "                ", "unnormalized_attention", "=", "node_embedding", ".", "mm", "(", "nbr_embedding", ".", "t", "(", ")", ")", "*", "sampled_neighbor_mat", "\n", "#unnormalized_attention = F.normalize(unnormalized_attention)", "\n", "# selected softmax", "\n", "normalized_attention", "=", "torch", ".", "exp", "(", "unnormalized_attention", ")", "*", "sampled_neighbor_mat", ".", "div", "(", "\n", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "unnormalized_attention", ")", "*", "sampled_neighbor_mat", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "1", ",", "len", "(", "\n", "unique_nodes_list", ")", ")", ")", "\n", "h_prime", "=", "normalized_attention", ".", "mm", "(", "nbr_embedding", ")", "\n", "h_prime", "=", "torch", ".", "sigmoid", "(", "h_prime", ")", "\n", "h_prime", "=", "torch", ".", "cat", "(", "[", "node_embedding", ",", "h_prime", "]", ",", "dim", "=", "1", ")", "\n", "h_prime", "=", "self", ".", "gcn2embed", "(", "h_prime", ")", "\n", "h_prime", "=", "torch", ".", "sigmoid", "(", "h_prime", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "nbr_atten", ":", "\n", "                ", "unnormalized_attention", "=", "node_embedding", ".", "mm", "(", "nbr_embedding", ".", "t", "(", ")", ")", "*", "sampled_neighbor_mat", "\n", "#unnormalized_attention = F.normalize(unnormalized_attention)", "\n", "normalized_attention", "=", "torch", ".", "exp", "(", "unnormalized_attention", ")", "*", "sampled_neighbor_mat", ".", "div", "(", "\n", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "unnormalized_attention", ")", "*", "sampled_neighbor_mat", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "1", ",", "len", "(", "\n", "unique_nodes_list", ")", ")", ")", "\n", "h_prime", "=", "normalized_attention", ".", "mm", "(", "nbr_embedding", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "return", "h_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.HAHE.HAHE_train.__init__": [[15, 26], ["torch.Module.__init__", "torch.Linear().cuda", "torch.Linear().cuda", "torch.Linear().cuda", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_MLP2_atten.__init__"], ["    ", "def", "__init__", "(", "self", ",", "homo_encoder_list", ",", "hete_encoder", ",", "cuda", ",", "num_class", ",", "embed_dim", ",", "meta_num", ",", "adj_lists_list", ")", ":", "\n", "        ", "super", "(", "HAHE_train", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cuda", "=", "cuda", "\n", "self", ".", "homo_encoder_list", "=", "homo_encoder_list", "\n", "self", ".", "hete_encoder", "=", "hete_encoder", "\n", "self", ".", "meta_num", "=", "meta_num", "\n", "self", ".", "adj_lists_list", "=", "adj_lists_list", "\n", "if", "cuda", ":", "\n", "            ", "self", ".", "embed2class", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_class", ",", "bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed2class", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_class", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.HAHE.HAHE_train.forward": [[28, 34], ["range", "HAHE.HAHE_train.hete_encoder.forward", "homo_embedding_list.append", "list", "int"], "methods", ["home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_MLP2_atten.forward"], ["", "", "def", "forward", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "homo_embedding_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "meta_num", ")", ":", "\n", "            ", "homo_embedding_list", ".", "append", "(", "self", ".", "homo_encoder_list", "[", "i", "]", "(", "nodes", ",", "[", "list", "(", "self", ".", "adj_lists_list", "[", "i", "]", "[", "int", "(", "node", ")", "]", ")", "for", "node", "in", "nodes", "]", ")", ")", "\n", "", "embedding", "=", "self", ".", "hete_encoder", ".", "forward", "(", "nodes", ",", "homo_embedding_list", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.HAHE.HAHE_train.loss": [[35, 43], ["HAHE.HAHE_train.embed2class", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "HAHE.HAHE_train.forward", "labels.cuda.cuda.cuda", "labels.cuda.cuda.squeeze"], "methods", ["home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_MLP2_atten.forward"], ["", "def", "loss", "(", "self", ",", "nodes", ",", "labels", ")", ":", "\n", "        ", "scores", "=", "self", ".", "embed2class", "(", "self", ".", "forward", "(", "nodes", ")", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "", "loss", "=", "criterion", "(", "scores", ",", "labels", ".", "squeeze", "(", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.HAHE.HOMO_train.__init__": [[46, 57], ["torch.Module.__init__", "nbr_atten.HomoAttention", "torch.Linear().cuda", "torch.Linear().cuda", "torch.Linear().cuda", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_MLP2_atten.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "feature_dim", ",", "adj", ",", "cuda", ",", "embed_dim", ",", "num_sample", ",", "nbr_atten", ",", "num_class", ")", ":", "\n", "        ", "super", "(", "HOMO_train", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cuda", "=", "cuda", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "encoder", "=", "HomoAttention", "(", "features", "=", "features", ",", "num_sample", "=", "num_sample", ",", "cuda", "=", "self", ".", "cuda", ",", "\n", "feature_dim", "=", "feature_dim", ",", "nbr_atten", "=", "nbr_atten", ",", "embed_dim", "=", "embed_dim", ")", "\n", "\n", "if", "cuda", ":", "\n", "            ", "self", ".", "embed2class", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_class", ",", "bias", "=", "True", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed2class", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_class", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.HAHE.HOMO_train.forward": [[58, 61], ["HAHE.HOMO_train.encoder.forward", "list", "int"], "methods", ["home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_MLP2_atten.forward"], ["", "", "def", "forward", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "encoder", ".", "forward", "(", "nodes", ",", "[", "list", "(", "self", ".", "adj", "[", "int", "(", "node", ")", "]", ")", "for", "node", "in", "nodes", "]", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.HAHE.HOMO_train.loss": [[62, 72], ["HAHE.HOMO_train.forward", "HAHE.HOMO_train.embed2class", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "labels.cuda.cuda.cuda", "labels.cuda.cuda.squeeze"], "methods", ["home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_MLP2_atten.forward"], ["", "def", "loss", "(", "self", ",", "nodes", ",", "labels", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "forward", "(", "nodes", ")", "\n", "scores", "=", "self", ".", "embed2class", "(", "embedding", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "", "loss", "=", "criterion", "(", "scores", ",", "labels", ".", "squeeze", "(", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_average.__init__": [[10, 24], ["torch.Module.__init__", "print", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_MLP2_atten.__init__"], ["    ", "def", "__init__", "(", "self", ",", "meta_atten", ",", "cuda", ",", "embed_dim", ",", "meta_num", ",", "homo_dim", ",", "hidden", ",", "node_num", ")", ":", "\n", "        ", "super", "(", "Hete_average", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "meta_atten", "=", "meta_atten", "\n", "self", ".", "active", "=", "F", ".", "tanh", "\n", "self", ".", "cuda", "=", "cuda", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "meta_num", "=", "meta_num", "\n", "self", ".", "hidden", "=", "hidden", "\n", "self", ".", "homo_dim", "=", "homo_dim", "\n", "if", "cuda", ":", "\n", "            ", "self", ".", "attention", "=", "torch", ".", "ones", "(", "1", ",", "meta_num", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attention", "=", "torch", ".", "ones", "(", "1", ",", "meta_num", ")", "\n", "", "print", "(", "self", ".", "attention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_average.forward": [[25, 37], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "meta_atten.Hete_average.attention[].repeat", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "nodes", ",", "homo_embedding_list", ")", ":", "\n", "        ", "if", "self", ".", "cuda", ":", "\n", "            ", "final_embedding", "=", "torch", ".", "zeros", "(", "len", "(", "nodes", ")", ",", "self", ".", "embed_dim", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "final_embedding", "=", "torch", ".", "zeros", "(", "len", "(", "nodes", ")", ",", "self", ".", "embed_dim", ")", "\n", "\n", "", "if", "self", ".", "meta_atten", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "meta_num", ")", ":", "\n", "                ", "final_embedding", "+=", "self", ".", "attention", "[", "0", ",", "i", "]", ".", "repeat", "(", "len", "(", "nodes", ")", ",", "self", ".", "homo_dim", ")", "*", "homo_embedding_list", "[", "i", "]", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "final_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_self.__init__": [[40, 55], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "meta_atten.Hete_self.homo2hidden.cuda", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_MLP2_atten.__init__"], ["    ", "def", "__init__", "(", "self", ",", "meta_atten", ",", "cuda", ",", "embed_dim", ",", "meta_num", ",", "homo_dim", ",", "hidden", ",", "node_num", ")", ":", "\n", "        ", "super", "(", "Hete_self", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "meta_atten", "=", "meta_atten", "\n", "self", ".", "meta_num", "=", "meta_num", "\n", "self", ".", "cuda", "=", "cuda", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "homo_dim", "=", "homo_dim", "\n", "self", ".", "homo2hidden", "=", "nn", ".", "Linear", "(", "homo_dim", ",", "hidden", ",", "bias", "=", "True", ")", "\n", "self", ".", "hidden", "=", "hidden", "\n", "if", "cuda", ":", "\n", "            ", "self", ".", "homo2hidden", "=", "self", ".", "homo2hidden", ".", "cuda", "(", ")", "\n", "self", ".", "out_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "node_num", ",", "hidden", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "out_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "node_num", ",", "hidden", ")", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "out_embedding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_self.forward": [[56, 81], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.softmax", "torch.softmax", "torch.softmax", "range", "range", "len", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "cos", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "meta_atten.Hete_self.homo2hidden", "attention[].view().repeat", "len", "attention[].view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "nodes", ",", "homo_embedding_list", ")", ":", "\n", "        ", "if", "self", ".", "cuda", ":", "\n", "            ", "final_embedding", "=", "torch", ".", "zeros", "(", "len", "(", "nodes", ")", ",", "self", ".", "homo_dim", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "final_embedding", "=", "torch", ".", "zeros", "(", "len", "(", "nodes", ")", ",", "self", ".", "homo_dim", ")", "\n", "", "if", "self", ".", "meta_atten", ":", "\n", "            ", "if", "self", ".", "cuda", ":", "\n", "                ", "attention", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "len", "(", "nodes", ")", ",", "self", ".", "meta_num", ")", "\n", "", "else", ":", "\n", "                ", "attention", "=", "torch", ".", "FloatTensor", "(", "len", "(", "nodes", ")", ",", "self", ".", "meta_num", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "meta_num", ")", ":", "\n", "                ", "homo_embedding", "=", "homo_embedding_list", "[", "i", "]", "\n", "hidden_embedding", "=", "torch", ".", "tanh", "(", "self", ".", "homo2hidden", "(", "homo_embedding", ")", ")", "\n", "attention", "[", ":", ",", "i", "]", "=", "cos", "(", "hidden_embedding", ",", "self", ".", "out_embedding", "[", "nodes", "]", ")", "\n", "", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "dim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "meta_num", ")", ":", "\n", "                ", "final_embedding", "+=", "attention", "[", ":", ",", "i", "]", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "homo_dim", ")", "*", "homo_embedding_list", "[", "i", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "meta_num", ")", ":", "\n", "                ", "homo_embedding", "=", "homo_embedding_list", "[", "i", "]", "\n", "final_embedding", "+=", "homo_embedding", "\n", "final_embedding", "=", "final_embedding", "*", "1.0", "/", "self", ".", "meta_num", "\n", "", "", "return", "final_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_MLP2_atten.__init__": [[154, 167], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "meta_atten.Hete_MLP2_atten.homo2hidden.cuda", "meta_atten.Hete_MLP2_atten.hidden2atten.cuda"], "methods", ["home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_MLP2_atten.__init__"], ["    ", "def", "__init__", "(", "self", ",", "meta_atten", ",", "cuda", ",", "embed_dim", ",", "meta_num", ",", "homo_dim", ",", "hidden", ",", "node_num", ")", ":", "\n", "        ", "super", "(", "Hete_MLP2_atten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "meta_atten", "=", "meta_atten", "\n", "self", ".", "cuda", "=", "cuda", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "meta_num", "=", "meta_num", "\n", "#self.beta = nn.Parameter(torch.FloatTensor(1,self.meta_num))", "\n", "self", ".", "homo_dim", "=", "homo_dim", "\n", "self", ".", "homo2hidden", "=", "nn", ".", "Linear", "(", "homo_dim", ",", "hidden", ",", "bias", "=", "True", ")", "\n", "self", ".", "hidden2atten", "=", "nn", ".", "Linear", "(", "hidden", ",", "1", ",", "bias", "=", "True", ")", "\n", "if", "cuda", ":", "\n", "            ", "self", ".", "homo2hidden", "=", "self", ".", "homo2hidden", ".", "cuda", "(", ")", "\n", "self", ".", "hidden2atten", "=", "self", ".", "hidden2atten", ".", "cuda", "(", ")", "\n", "#self.beta = self.beta.cuda()", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.meta_atten.Hete_MLP2_atten.forward": [[169, 191], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "torch.softmax", "torch.softmax", "torch.softmax", "range", "range", "len", "len", "attention.cuda.cuda.cuda", "meta_atten.Hete_MLP2_atten.hidden2atten().squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "attention[].view().repeat", "len", "meta_atten.Hete_MLP2_atten.hidden2atten", "torch.tanh", "torch.tanh", "torch.tanh", "attention[].view", "meta_atten.Hete_MLP2_atten.homo2hidden"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "nodes", ",", "homo_embedding_list", ")", ":", "\n", "        ", "if", "self", ".", "cuda", ":", "\n", "            ", "final_embedding", "=", "torch", ".", "zeros", "(", "len", "(", "nodes", ")", ",", "self", ".", "homo_dim", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "final_embedding", "=", "torch", ".", "zeros", "(", "len", "(", "nodes", ")", ",", "self", ".", "homo_dim", ")", "\n", "\n", "", "if", "self", ".", "meta_atten", ":", "\n", "            ", "attention", "=", "torch", ".", "FloatTensor", "(", "len", "(", "nodes", ")", ",", "self", ".", "meta_num", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "attention", "=", "attention", ".", "cuda", "(", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "meta_num", ")", ":", "\n", "                ", "homo_embedding", "=", "homo_embedding_list", "[", "i", "]", "\n", "#homo_embedding = F.normalize(homo_embedding)", "\n", "attention", "[", ":", ",", "i", "]", "=", "self", ".", "hidden2atten", "(", "F", ".", "tanh", "(", "self", ".", "homo2hidden", "(", "homo_embedding", ")", ")", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "dim", "=", "1", ")", "\n", "#print(torch.mean(attention,dim=0,keepdim=True))", "\n", "for", "i", "in", "range", "(", "self", ".", "meta_num", ")", ":", "\n", "                ", "final_embedding", "+=", "attention", "[", ":", ",", "i", "]", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "homo_dim", ")", "*", "homo_embedding_list", "[", "i", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "meta_num", ")", ":", "\n", "                ", "final_embedding", "+=", "homo_embedding_list", "[", "i", "]", "*", "1.0", "/", "self", ".", "meta_num", "\n", "", "", "return", "final_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.utils.make_attribute": [[14, 49], ["set", "print", "print", "numpy.zeros", "sklearn.preprocessing.normalize", "open", "fp.readlines", "open", "fp.readlines", "len", "len", "paper_term_map[].append", "set.add", "author_term_map[].append", "len", "len", "line.strip().split", "line.strip().split", "line.strip().split", "line.strip().split", "line.strip", "line.strip", "line.strip", "line.strip", "int", "int"], "function", ["None"], ["def", "make_attribute", "(", ")", ":", "\n", "    ", "path1", "=", "'../../dataHIN/DBLP2/PA2.txt'", "\n", "path2", "=", "'../../dataHIN/DBLP2/PT2.txt'", "\n", "paper_term_map", "=", "{", "}", "\n", "term_set", "=", "set", "(", ")", "\n", "with", "open", "(", "path2", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ".", "readlines", "(", ")", ":", "\n", "            ", "paper", "=", "line", ".", "strip", "(", "'\\n\\r'", ")", ".", "split", "(", ")", "[", "0", "]", "\n", "term", "=", "line", ".", "strip", "(", "'\\n\\r'", ")", ".", "split", "(", ")", "[", "1", "]", "\n", "if", "paper", "not", "in", "paper_term_map", ":", "\n", "                ", "paper_term_map", "[", "paper", "]", "=", "[", "]", "\n", "", "paper_term_map", "[", "paper", "]", ".", "append", "(", "term", ")", "\n", "term_set", ".", "add", "(", "term", ")", "\n", "", "", "author_term_map", "=", "{", "}", "\n", "with", "open", "(", "path1", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ".", "readlines", "(", ")", ":", "\n", "            ", "author", "=", "line", ".", "strip", "(", "'\\n\\r'", ")", ".", "split", "(", ")", "[", "1", "]", "\n", "paper", "=", "line", ".", "strip", "(", "'\\n\\r'", ")", ".", "split", "(", ")", "[", "0", "]", "\n", "term_list", "=", "paper_term_map", "[", "paper", "]", "\n", "if", "author", "not", "in", "author_term_map", ":", "\n", "                ", "author_term_map", "[", "author", "]", "=", "[", "]", "\n", "", "author_term_map", "[", "author", "]", ".", "append", "(", "term_list", ")", "\n", "\n", "", "", "print", "(", "'Term number:'", ",", "len", "(", "term_set", ")", ")", "\n", "print", "(", "'Author number:'", ",", "len", "(", "author_term_map", ")", ")", "\n", "\n", "feature_mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "author_term_map", ")", ",", "len", "(", "term_set", ")", ")", ")", "\n", "for", "author", "in", "author_term_map", ":", "\n", "        ", "term_lists", "=", "author_term_map", "[", "author", "]", "\n", "for", "term_list", "in", "term_lists", ":", "\n", "            ", "for", "term", "in", "term_list", ":", "\n", "                ", "feature_mat", "[", "int", "(", "author", ")", ",", "int", "(", "term", ")", "]", "=", "1", "\n", "\n", "", "", "", "res", "=", "normalize", "(", "feature_mat", ",", "norm", "=", "'l2'", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.utils.hamming_score": [[51, 71], ["range", "numpy.mean", "set", "set", "acc_list.append", "numpy.where", "numpy.where", "len", "len", "len", "float", "set.intersection", "len", "set.union"], "function", ["None"], ["", "def", "hamming_score", "(", "y_true", ",", "y_pred", ",", "normalize", "=", "True", ",", "sample_weight", "=", "None", ")", ":", "\n", "    ", "'''\n    Compute the Hamming score (a.k.a. label-based accuracy) for the multi-label case\n    https://stackoverflow.com/q/32239577/395857\n    '''", "\n", "acc_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "y_true", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "set_true", "=", "set", "(", "np", ".", "where", "(", "y_true", "[", "i", "]", ")", "[", "0", "]", ")", "\n", "set_pred", "=", "set", "(", "np", ".", "where", "(", "y_pred", "[", "i", "]", ")", "[", "0", "]", ")", "\n", "#print('\\nset_true: {0}'.format(set_true))", "\n", "#print('set_pred: {0}'.format(set_pred))", "\n", "tmp_a", "=", "None", "\n", "if", "len", "(", "set_true", ")", "==", "0", "and", "len", "(", "set_pred", ")", "==", "0", ":", "\n", "            ", "tmp_a", "=", "1", "\n", "", "else", ":", "\n", "            ", "tmp_a", "=", "len", "(", "set_true", ".", "intersection", "(", "set_pred", ")", ")", "/", "float", "(", "len", "(", "set_true", ".", "union", "(", "set_pred", ")", ")", ")", "\n", "#print('tmp_a: {0}'.format(tmp_a))", "\n", "", "acc_list", ".", "append", "(", "tmp_a", ")", "\n", "", "return", "np", ".", "mean", "(", "acc_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.utils.multilabel_f1": [[78, 104], ["torch.sum", "range", "torch.zeros_like", "range", "sklearn.metrics.average_precision_score", "len", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "torch.topk", "int"], "function", ["None"], ["", "def", "multilabel_f1", "(", "GT", ",", "pred", ")", ":", "\n", "    ", "labeled_num_list", "=", "torch", ".", "sum", "(", "GT", ",", "dim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "labeled_num_list", ")", ")", ":", "\n", "        ", "if", "labeled_num_list", "[", "i", "]", "==", "0", ":", "\n", "            ", "labeled_num_list", "[", "i", "]", "=", "1", "\n", "", "", "pred_label", "=", "torch", ".", "zeros_like", "(", "GT", ")", "\n", "for", "i", "in", "range", "(", "pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "pred_label", "[", "i", ",", "torch", ".", "topk", "(", "pred", "[", "i", "]", ",", "int", "(", "labeled_num_list", "[", "i", "]", ")", ")", "[", "1", "]", "]", "=", "1", "\n", "#score1 = accuracy_score(y_true=GT,y_pred=pred_label)", "\n", "#score1 = roc_auc_score(y_true=GT,y_score=pred)", "\n", "", "score1", "=", "0", "\n", "score2", "=", "average_precision_score", "(", "y_true", "=", "GT", ",", "y_score", "=", "pred", ",", "average", "=", "'micro'", ")", "\n", "#score = hamming_loss(GT,pred_label)", "\n", "#score = precision_score(GT,pred_label,average='micro')", "\n", "#print(GT,pred_label)", "\n", "# a_list=[]", "\n", "# b_list=[]", "\n", "# for i in range(GT.shape[0]):", "\n", "#     aa=f1_score(GT[i, :], pred_label[i, :], average='micro')", "\n", "#     bb=f1_score(GT[i, :], pred_label[i, :], average='macro')", "\n", "#     a_list.append(aa)", "\n", "#     b_list.append(bb)", "\n", "# return np.mean(a_list),np.mean(b_list)", "\n", "\n", "#return hamming_score(GT,pred_label),hamming_score(GT,pred_label)", "\n", "return", "f1_score", "(", "GT", ",", "pred_label", ",", "average", "=", "'micro'", ")", ",", "f1_score", "(", "GT", ",", "pred_label", ",", "average", "=", "'macro'", ")", ",", "score2", ",", "score1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.utils.normalize_adj": [[106, 113], ["numpy.array", "numpy.power().flatten", "scipy.diags", "mx.dot().transpose().dot", "mx.sum", "numpy.power", "numpy.isinf", "mx.dot().transpose", "mx.dot"], "function", ["None"], ["", "def", "normalize_adj", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "r_inv_sqrt", "[", "np", ".", "isinf", "(", "r_inv_sqrt", ")", "]", "=", "0.", "\n", "r_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "r_inv_sqrt", ")", "\n", "return", "mx", ".", "dot", "(", "r_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "r_mat_inv_sqrt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.utils.adj2Lap": [[114, 122], ["numpy.diag", "numpy.zeros_like", "numpy.nonzero", "range", "numpy.dot", "numpy.ones_like", "numpy.diag", "len", "numpy.power", "numpy.dot"], "function", ["None"], ["", "def", "adj2Lap", "(", "adj", ")", ":", "\n", "    ", "AA", "=", "adj", "+", "np", ".", "ones_like", "(", "adj", ")", "\n", "D", "=", "np", ".", "diag", "(", "np", ".", "diag", "(", "AA", ")", ")", "\n", "DD", "=", "np", ".", "zeros_like", "(", "D", ")", "\n", "[", "x", ",", "y", "]", "=", "np", ".", "nonzero", "(", "D", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "        ", "DD", "[", "x", "[", "i", "]", ",", "y", "[", "i", "]", "]", "=", "np", ".", "power", "(", "D", "[", "x", "[", "i", "]", ",", "y", "[", "i", "]", "]", ",", "-", "0.5", ")", "\n", "", "return", "np", ".", "dot", "(", "np", ".", "dot", "(", "DD", ",", "AA", ")", ",", "DD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.utils.get_adj": [[124, 140], ["numpy.loadtxt", "numpy.zeros", "collections.defaultdict", "range", "range", "int", "adj_lists[].add", "adj_lists[].add", "adj_lists[].add", "adj_lists[].add", "numpy.max"], "function", ["None"], ["", "def", "get_adj", "(", "path", ")", ":", "\n", "    ", "edge_mat", "=", "np", ".", "loadtxt", "(", "path", ",", "dtype", "=", "int", ")", "\n", "node_num", "=", "int", "(", "np", ".", "max", "(", "edge_mat", ")", ")", "+", "1", "\n", "adj_mat", "=", "np", ".", "zeros", "(", "(", "node_num", ",", "node_num", ")", ",", "dtype", "=", "int", ")", "\n", "adj_lists", "=", "defaultdict", "(", "set", ")", "\n", "for", "i", "in", "range", "(", "edge_mat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "adj_mat", "[", "edge_mat", "[", "i", ",", "0", "]", ",", "edge_mat", "[", "i", ",", "1", "]", "]", "=", "1", "\n", "adj_mat", "[", "edge_mat", "[", "i", ",", "1", "]", ",", "edge_mat", "[", "i", ",", "0", "]", "]", "=", "1", "\n", "adj_lists", "[", "edge_mat", "[", "i", ",", "0", "]", "]", ".", "add", "(", "edge_mat", "[", "i", ",", "1", "]", ")", "\n", "adj_lists", "[", "edge_mat", "[", "i", ",", "1", "]", "]", ".", "add", "(", "edge_mat", "[", "i", ",", "0", "]", ")", "\n", "adj_lists", "[", "edge_mat", "[", "i", ",", "0", "]", "]", ".", "add", "(", "edge_mat", "[", "i", ",", "0", "]", ")", "\n", "adj_lists", "[", "edge_mat", "[", "i", ",", "1", "]", "]", ".", "add", "(", "edge_mat", "[", "i", ",", "1", "]", ")", "\n", "", "for", "i", "in", "range", "(", "node_num", ")", ":", "\n", "        ", "if", "adj_mat", "[", "i", ",", "i", "]", "==", "0", ":", "\n", "            ", "adj_mat", "[", "i", ",", "i", "]", "=", "1", "\n", "", "", "return", "adj_mat", ",", "adj_lists", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.utils.get_adj_mat": [[142, 156], ["[].todense", "range", "collections.defaultdict", "[].todense.nonzero", "range", "len", "adj_lists[].add", "adj_lists[].add", "adj_lists[].add", "adj_lists[].add", "scipy.io.loadmat"], "function", ["None"], ["", "def", "get_adj_mat", "(", "path", ",", "name", ")", ":", "\n", "    ", "adj_mat", "=", "loadmat", "(", "path", ")", "[", "name", "]", ".", "todense", "(", ")", "\n", "for", "i", "in", "range", "(", "adj_mat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "adj_mat", "[", "i", ",", "i", "]", "=", "1", "\n", "", "adj_lists", "=", "defaultdict", "(", "set", ")", "\n", "[", "row", ",", "col", "]", "=", "adj_mat", ".", "nonzero", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "row", ")", ")", ":", "\n", "        ", "node1", "=", "row", "[", "i", "]", "\n", "node2", "=", "col", "[", "i", "]", "\n", "adj_lists", "[", "node1", "]", ".", "add", "(", "node2", ")", "\n", "adj_lists", "[", "node1", "]", ".", "add", "(", "node1", ")", "\n", "adj_lists", "[", "node2", "]", ".", "add", "(", "node1", ")", "\n", "adj_lists", "[", "node2", "]", ".", "add", "(", "node2", ")", "\n", "", "return", "adj_mat", ",", "adj_lists", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.utils.get_label": [[158, 164], ["numpy.loadtxt", "int", "numpy.array", "numpy.max"], "function", ["None"], ["", "def", "get_label", "(", "path", ")", ":", "\n", "    ", "label_mat", "=", "np", ".", "loadtxt", "(", "path", ",", "dtype", "=", "int", ")", "\n", "node_num", "=", "label_mat", ".", "shape", "[", "0", "]", "\n", "num_class", "=", "int", "(", "np", ".", "max", "(", "label_mat", "[", ":", ",", "1", "]", ")", "+", "1", ")", "\n", "label_list", "=", "np", ".", "array", "(", "label_mat", "[", ":", ",", "1", "]", ")", "\n", "return", "num_class", ",", "node_num", ",", "label_list", "\n", "\n"]], "home.repos.pwc.inspect_result.zhoushengisnoob_HAHE.None.utils.get_label2": [[165, 175], ["numpy.loadtxt", "int", "int", "numpy.zeros", "range", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "get_label2", "(", "path", ")", ":", "\n", "    ", "input_mat", "=", "np", ".", "loadtxt", "(", "path", ",", "dtype", "=", "int", ")", "\n", "node_num", "=", "int", "(", "np", ".", "max", "(", "input_mat", "[", ":", ",", "0", "]", ")", "+", "1", ")", "\n", "num_class", "=", "int", "(", "np", ".", "max", "(", "input_mat", "[", ":", ",", "1", "]", ")", "+", "1", ")", "\n", "label_mat", "=", "np", ".", "zeros", "(", "(", "node_num", ",", "num_class", ")", ")", "\n", "for", "i", "in", "range", "(", "input_mat", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "node", "=", "input_mat", "[", "i", ",", "0", "]", "\n", "label", "=", "input_mat", "[", "i", ",", "1", "]", "\n", "label_mat", "[", "node", ",", "label", "]", "=", "1", "\n", "", "return", "num_class", ",", "node_num", ",", "label_mat", "", "", ""]]}