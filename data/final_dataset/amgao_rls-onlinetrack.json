{"home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.run_webcam.run_webcam": [[12, 23], ["pytracking.evaluation.Tracker", "pytracking.evaluation.Tracker.run_webcam"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.run_webcam"], ["def", "run_webcam", "(", "tracker_name", ",", "tracker_param", ",", "debug", "=", "None", ",", "visdom_info", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run the tracker on your webcam.\n    args:\n        tracker_name: Name of tracking method.\n        tracker_param: Name of parameter file.\n        debug: Debug level.\n        visdom_info: Dict optionally containing 'use_visdom', 'server' and 'port' for Visdom visualization.\n    \"\"\"", "\n", "visdom_info", "=", "{", "}", "if", "visdom_info", "is", "None", "else", "visdom_info", "\n", "tracker", "=", "Tracker", "(", "tracker_name", ",", "tracker_param", ")", "\n", "tracker", ".", "run_webcam", "(", "debug", ",", "visdom_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.run_webcam.main": [[25, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "run_webcam.run_webcam"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.run_webcam"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run the tracker on your webcam.'", ")", "\n", "parser", ".", "add_argument", "(", "'tracker_name'", ",", "type", "=", "str", ",", "help", "=", "'Name of tracking method.'", ")", "\n", "parser", ".", "add_argument", "(", "'tracker_param'", ",", "type", "=", "str", ",", "help", "=", "'Name of parameter file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Debug level.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_visdom'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'Flag to enable visdom'", ")", "\n", "parser", ".", "add_argument", "(", "'--visdom_server'", ",", "type", "=", "str", ",", "default", "=", "'127.0.0.1'", ",", "help", "=", "'Server for visdom'", ")", "\n", "parser", ".", "add_argument", "(", "'--visdom_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'Port for visdom'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "visdom_info", "=", "{", "'use_visdom'", ":", "args", ".", "use_visdom", ",", "'server'", ":", "args", ".", "visdom_server", ",", "'port'", ":", "args", ".", "visdom_port", "}", "\n", "run_webcam", "(", "args", ".", "tracker_name", ",", "args", ".", "tracker_param", ",", "args", ".", "debug", ",", "visdom_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.main.process_per_txt": [[14, 32], ["print", "os.path.join", "open", "f.read().splitlines", "list", "new_file_content.append", "file_path.split", "open", "map", "f.write", "f.write", "f.read", "line.split"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["def", "process_per_txt", "(", "file_path", ",", "save_dir", ")", ":", "\n", "    ", "print", "(", "file_path", ")", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "file_content", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "new_file_content", "=", "[", "]", "\n", "'''\u5904\u7406\u6bcf\u884c\u6570\u636e'''", "\n", "for", "line", "in", "file_content", ":", "\n", "        ", "int_list", "=", "list", "(", "map", "(", "int", ",", "line", ".", "split", "(", "'\\t'", ")", ")", ")", "\n", "float_list", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "int_list", "]", "\n", "new_file_content", ".", "append", "(", "','", ".", "join", "(", "float_list", ")", ")", "\n", "", "'''\u5199\u5165\u65b0\u6587\u4ef6'''", "\n", "new_file_name", "=", "file_path", ".", "split", "(", "'\\\\'", ")", "[", "-", "1", "]", "\n", "new_file_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "new_file_name", ")", "\n", "with", "open", "(", "new_file_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "new_file_content", ":", "\n", "            ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.main.main": [[34, 43], ["os.path.join", "glob.glob", "os.path.exists", "os.makedirs", "os.path.join", "main.process_per_txt"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.main.process_per_txt"], ["", "def", "main", "(", ")", ":", "\n", "    ", "save_dir_name", "=", "dir_name", "+", "'_TrackingNet'", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "save_dir_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "'''\u8bfb\u53d6\u6587\u4ef6'''", "\n", "file_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "dir_name", ",", "'*.txt'", ")", ")", "\n", "for", "file_path", "in", "file_paths", ":", "\n", "        ", "process_per_txt", "(", "file_path", ",", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.run_video.run_video": [[12, 21], ["pytracking.evaluation.Tracker", "pytracking.evaluation.Tracker.run_video"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.run_video"], ["def", "run_video", "(", "tracker_name", ",", "tracker_param", ",", "videofile", ",", "optional_box", "=", "None", ",", "debug", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run the tracker on your webcam.\n    args:\n        tracker_name: Name of tracking method.\n        tracker_param: Name of parameter file.\n        debug: Debug level.\n    \"\"\"", "\n", "tracker", "=", "Tracker", "(", "tracker_name", ",", "tracker_param", ")", "\n", "tracker", ".", "run_video", "(", "videofilepath", "=", "videofile", ",", "optional_box", "=", "optional_box", ",", "debug", "=", "debug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.run_video.main": [[22, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "run_video.run_video"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.run_video"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run the tracker on your webcam.'", ")", "\n", "parser", ".", "add_argument", "(", "'tracker_name'", ",", "type", "=", "str", ",", "help", "=", "'Name of tracking method.'", ")", "\n", "parser", ".", "add_argument", "(", "'tracker_param'", ",", "type", "=", "str", ",", "help", "=", "'Name of parameter file.'", ")", "\n", "parser", ".", "add_argument", "(", "'videofile'", ",", "type", "=", "str", ",", "help", "=", "'path to a video file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--optional_box'", ",", "default", "=", "None", ",", "help", "=", "'optional_box with format x,y,w,h.'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Debug level.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "run_video", "(", "args", ".", "tracker_name", ",", "args", ".", "tracker_param", ",", "args", ".", "videofile", ",", "args", ".", "optional_box", ",", "args", ".", "debug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.run_vot.run_vot": [[12, 15], ["pytracking.evaluation.Tracker", "pytracking.evaluation.Tracker.run_vot"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.run_vot"], ["def", "run_vot", "(", "tracker_name", ",", "tracker_param", ",", "run_id", "=", "None", ",", "debug", "=", "0", ",", "visdom_info", "=", "None", ")", ":", "\n", "    ", "tracker", "=", "Tracker", "(", "tracker_name", ",", "tracker_param", ",", "run_id", ")", "\n", "tracker", ".", "run_vot", "(", "debug", ",", "visdom_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.run_vot.main": [[17, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "run_vot.run_vot"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.run_vot"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run VOT.'", ")", "\n", "parser", ".", "add_argument", "(", "'tracker_name'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'tracker_param'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--run_id'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Debug level.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_visdom'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'Flag to enable visdom'", ")", "\n", "parser", ".", "add_argument", "(", "'--visdom_server'", ",", "type", "=", "str", ",", "default", "=", "'127.0.0.1'", ",", "help", "=", "'Server for visdom'", ")", "\n", "parser", ".", "add_argument", "(", "'--visdom_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'Port for visdom'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "visdom_info", "=", "{", "'use_visdom'", ":", "args", ".", "use_visdom", ",", "'server'", ":", "args", ".", "visdom_server", ",", "'port'", ":", "args", ".", "visdom_port", "}", "\n", "run_vot", "(", "args", ".", "tracker_name", ",", "args", ".", "tracker_param", ",", "args", ".", "run_id", ",", "args", ".", "debug", ",", "visdom_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.run_experiment.run_experiment": [[13, 26], ["importlib.import_module", "getattr", "getattr.", "print", "pytracking.evaluation.running.run_dataset"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.running.run_dataset"], ["def", "run_experiment", "(", "experiment_module", ":", "str", ",", "experiment_name", ":", "str", ",", "debug", "=", "0", ",", "threads", "=", "0", ")", ":", "\n", "    ", "\"\"\"Run experiment.\n    args:\n        experiment_module: Name of experiment module in the experiments/ folder.\n        experiment_name: Name of the experiment function.\n        debug: Debug level.\n        threads: Number of threads.\n    \"\"\"", "\n", "expr_module", "=", "importlib", ".", "import_module", "(", "'pytracking.experiments.{}'", ".", "format", "(", "experiment_module", ")", ")", "\n", "expr_func", "=", "getattr", "(", "expr_module", ",", "experiment_name", ")", "\n", "trackers", ",", "dataset", "=", "expr_func", "(", ")", "\n", "print", "(", "'Running:  {}  {}'", ".", "format", "(", "experiment_module", ",", "experiment_name", ")", ")", "\n", "run_dataset", "(", "dataset", ",", "trackers", ",", "debug", ",", "threads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.run_experiment.main": [[28, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "run_experiment.run_experiment"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.run_experiment.run_experiment"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run tracker.'", ")", "\n", "parser", ".", "add_argument", "(", "'experiment_module'", ",", "type", "=", "str", ",", "help", "=", "'Name of experiment module in the experiments/ folder.'", ")", "\n", "parser", ".", "add_argument", "(", "'experiment_name'", ",", "type", "=", "str", ",", "help", "=", "'Name of the experiment function.'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Debug level.'", ")", "\n", "parser", ".", "add_argument", "(", "'--threads'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Number of threads.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "run_experiment", "(", "args", ".", "experiment_module", ",", "args", ".", "experiment_name", ",", "args", ".", "debug", ",", "args", ".", "threads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.run_tracker.run_tracker": [[21, 68], ["pytracking.evaluation.running.run_dataset", "pytracking.evaluation.otbdataset.OTBDataset", "pytracking.evaluation.Tracker", "pytracking.evaluation.nfsdataset.NFSDataset", "pytracking.evaluation.uavdataset.UAVDataset", "pytracking.evaluation.tpldataset.TPLDataset", "pytracking.evaluation.tpldataset.TPLDatasetNoOtb", "pytracking.evaluation.votdataset.VOTDataset", "pytracking.evaluation.trackingnetdataset.TrackingNetDataset", "pytracking.evaluation.got10kdataset.GOT10KDatasetTest", "pytracking.evaluation.got10kdataset.GOT10KDatasetVal", "pytracking.evaluation.got10kdataset.GOT10KDatasetLTRVal", "pytracking.evaluation.lasotdataset.LaSOTDataset", "ValueError"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.running.run_dataset", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.otbdataset.OTBDataset", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.nfsdataset.NFSDataset", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uavdataset.UAVDataset", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tpldataset.TPLDataset", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tpldataset.TPLDatasetNoOtb", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.votdataset.VOTDataset", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.trackingnetdataset.TrackingNetDataset", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.got10kdataset.GOT10KDatasetTest", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.got10kdataset.GOT10KDatasetVal", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.got10kdataset.GOT10KDatasetLTRVal", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.lasotdataset.LaSOTDataset"], ["def", "run_tracker", "(", "tracker_name", ",", "tracker_param", ",", "run_id", "=", "None", ",", "dataset_name", "=", "'otb'", ",", "sequence", "=", "None", ",", "debug", "=", "0", ",", "threads", "=", "0", ",", "\n", "visdom_info", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run tracker on sequence or dataset.\n    args:\n        tracker_name: Name of tracking method.\n        tracker_param: Name of parameter file.\n        run_id: The run id.\n        dataset_name: Name of dataset (otb, nfs, uav, tpl, vot, tn, gott, gotv, lasot).\n        sequence: Sequence number or name.\n        debug: Debug level.\n        threads: Number of threads.\n        visdom_info: Dict optionally containing 'use_visdom', 'server' and 'port' for Visdom visualization.\n    \"\"\"", "\n", "\n", "visdom_info", "=", "{", "}", "if", "visdom_info", "is", "None", "else", "visdom_info", "\n", "\n", "if", "dataset_name", "==", "'otb'", ":", "\n", "        ", "dataset", "=", "OTBDataset", "(", ")", "\n", "", "elif", "dataset_name", "==", "'nfs'", ":", "\n", "        ", "dataset", "=", "NFSDataset", "(", ")", "\n", "", "elif", "dataset_name", "==", "'uav'", ":", "\n", "        ", "dataset", "=", "UAVDataset", "(", ")", "\n", "", "elif", "dataset_name", "==", "'tpl'", ":", "\n", "        ", "dataset", "=", "TPLDataset", "(", ")", "\n", "", "elif", "dataset_name", "==", "'tplnootb'", ":", "\n", "        ", "dataset", "=", "TPLDatasetNoOtb", "(", ")", "\n", "", "elif", "dataset_name", "==", "'vot'", ":", "\n", "        ", "dataset", "=", "VOTDataset", "(", ")", "\n", "", "elif", "dataset_name", "==", "'tn'", ":", "\n", "        ", "dataset", "=", "TrackingNetDataset", "(", ")", "\n", "", "elif", "dataset_name", "==", "'gott'", ":", "\n", "        ", "dataset", "=", "GOT10KDatasetTest", "(", ")", "\n", "", "elif", "dataset_name", "==", "'gotv'", ":", "\n", "        ", "dataset", "=", "GOT10KDatasetVal", "(", ")", "\n", "", "elif", "dataset_name", "==", "'gotlv'", ":", "\n", "        ", "dataset", "=", "GOT10KDatasetLTRVal", "(", ")", "\n", "", "elif", "dataset_name", "==", "'lasot'", ":", "\n", "        ", "dataset", "=", "LaSOTDataset", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown dataset name'", ")", "\n", "\n", "", "if", "sequence", "is", "not", "None", ":", "\n", "        ", "dataset", "=", "[", "dataset", "[", "sequence", "]", "]", "\n", "\n", "", "trackers", "=", "[", "Tracker", "(", "tracker_name", ",", "tracker_param", ",", "run_id", ")", "]", "\n", "\n", "run_dataset", "(", "dataset", ",", "trackers", ",", "debug", ",", "threads", ",", "visdom_info", "=", "visdom_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.run_tracker.main": [[70, 87], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "run_tracker.run_tracker"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.pytracking.run_tracker.run_tracker"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run tracker on sequence or dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'tracker_name'", ",", "type", "=", "str", ",", "help", "=", "'Name of tracking method.'", ")", "\n", "parser", ".", "add_argument", "(", "'tracker_param'", ",", "type", "=", "str", ",", "help", "=", "'Name of parameter file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--runid'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'The run id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'otb'", ",", "help", "=", "'Name of dataset (otb, nfs, uav, tpl, vot, tn, gott, gotv, lasot).'", ")", "\n", "parser", ".", "add_argument", "(", "'--sequence'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Sequence number or name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Debug level.'", ")", "\n", "parser", ".", "add_argument", "(", "'--threads'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Number of threads.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_visdom'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'Flag to enable visdom'", ")", "\n", "parser", ".", "add_argument", "(", "'--visdom_server'", ",", "type", "=", "str", ",", "default", "=", "'127.0.0.1'", ",", "help", "=", "'Server for visdom'", ")", "\n", "parser", ".", "add_argument", "(", "'--visdom_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'Port for visdom'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "run_tracker", "(", "args", ".", "tracker_name", ",", "args", ".", "tracker_param", ",", "args", ".", "runid", ",", "args", ".", "dataset", ",", "args", ".", "sequence", ",", "args", ".", "debug", ",", "args", ".", "threads", ",", "\n", "{", "'use_visdom'", ":", "args", ".", "use_visdom", ",", "'server'", ":", "args", ".", "visdom_server", ",", "'port'", ":", "args", ".", "visdom_port", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.VOT.vot.VOT.__init__": [[27, 58], ["trax.Server", "vot.VOT._trax.wait", "isinstance", "vot.VOT._trax.status", "Polygon", "Rectangle", "str", "len", "vot.VOT.image.items", "Point", "vot.VOT.region.bounds", "Exception"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "region_format", ",", "channels", "=", "None", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            region_format: Region format options\n        \"\"\"", "\n", "assert", "(", "region_format", "in", "[", "trax", ".", "Region", ".", "RECTANGLE", ",", "trax", ".", "Region", ".", "POLYGON", "]", ")", "\n", "\n", "if", "channels", "is", "None", ":", "\n", "            ", "channels", "=", "[", "'color'", "]", "\n", "", "elif", "channels", "==", "'rgbd'", ":", "\n", "            ", "channels", "=", "[", "'color'", ",", "'depth'", "]", "\n", "", "elif", "channels", "==", "'rgbt'", ":", "\n", "            ", "channels", "=", "[", "'color'", ",", "'ir'", "]", "\n", "", "elif", "channels", "==", "'ir'", ":", "\n", "            ", "channels", "=", "[", "'ir'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Illegal configuration {}.'", ".", "format", "(", "channels", ")", ")", "\n", "\n", "", "self", ".", "_trax", "=", "trax", ".", "Server", "(", "[", "region_format", "]", ",", "[", "trax", ".", "Image", ".", "PATH", "]", ",", "channels", ")", "\n", "\n", "request", "=", "self", ".", "_trax", ".", "wait", "(", ")", "\n", "assert", "(", "request", ".", "type", "==", "'initialize'", ")", "\n", "if", "isinstance", "(", "request", ".", "region", ",", "trax", ".", "Polygon", ")", ":", "\n", "            ", "self", ".", "_region", "=", "Polygon", "(", "[", "Point", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "request", ".", "region", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_region", "=", "Rectangle", "(", "*", "request", ".", "region", ".", "bounds", "(", ")", ")", "\n", "", "self", ".", "_image", "=", "[", "str", "(", "x", ")", "for", "k", ",", "x", "in", "request", ".", "image", ".", "items", "(", ")", "]", "\n", "if", "len", "(", "self", ".", "_image", ")", "==", "1", ":", "\n", "            ", "self", ".", "_image", "=", "self", ".", "_image", "[", "0", "]", "\n", "", "self", ".", "_trax", ".", "status", "(", "request", ".", "region", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.VOT.vot.VOT.region": [[59, 69], ["None"], "methods", ["None"], ["", "def", "region", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Send configuration message to the client and receive the initialization\n        region and the path of the first image\n\n        Returns:\n            initialization region\n        \"\"\"", "\n", "\n", "return", "self", ".", "_region", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.VOT.vot.VOT.report": [[70, 86], ["isinstance", "vot.VOT._trax.status", "isinstance", "isinstance", "trax.Polygon.create", "trax.Rectangle.create"], "methods", ["None"], ["", "def", "report", "(", "self", ",", "region", ",", "confidence", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Report the tracking results to the client\n\n        Arguments:\n            region: region for the frame\n        \"\"\"", "\n", "assert", "(", "isinstance", "(", "region", ",", "Rectangle", ")", "or", "isinstance", "(", "region", ",", "Polygon", ")", ")", "\n", "if", "isinstance", "(", "region", ",", "Polygon", ")", ":", "\n", "            ", "tregion", "=", "trax", ".", "Polygon", ".", "create", "(", "[", "(", "x", ".", "x", ",", "x", ".", "y", ")", "for", "x", "in", "region", ".", "points", "]", ")", "\n", "", "else", ":", "\n", "            ", "tregion", "=", "trax", ".", "Rectangle", ".", "create", "(", "region", ".", "x", ",", "region", ".", "y", ",", "region", ".", "width", ",", "region", ".", "height", ")", "\n", "", "properties", "=", "{", "}", "\n", "if", "not", "confidence", "is", "None", ":", "\n", "            ", "properties", "[", "'confidence'", "]", "=", "confidence", "\n", "", "self", ".", "_trax", ".", "status", "(", "tregion", ",", "properties", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.VOT.vot.VOT.frame": [[87, 108], ["hasattr", "vot.VOT._trax.wait", "tuple", "tuple", "str", "len", "vot.VOT.image.items"], "methods", ["None"], ["", "def", "frame", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get a frame (image path) from client\n\n        Returns:\n            absolute path of the image\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"_image\"", ")", ":", "\n", "            ", "image", "=", "self", ".", "_image", "\n", "del", "self", ".", "_image", "\n", "return", "tuple", "(", "image", ")", "\n", "\n", "", "request", "=", "self", ".", "_trax", ".", "wait", "(", ")", "\n", "\n", "if", "request", ".", "type", "==", "'frame'", ":", "\n", "            ", "image", "=", "[", "str", "(", "x", ")", "for", "k", ",", "x", "in", "request", ".", "image", ".", "items", "(", ")", "]", "\n", "if", "len", "(", "image", ")", "==", "1", ":", "\n", "                ", "image", "=", "image", "[", "0", "]", "\n", "", "return", "tuple", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.VOT.vot.VOT.quit": [[110, 113], ["hasattr", "vot.VOT._trax.quit"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.vot.VOT.quit"], ["", "", "def", "quit", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'_trax'", ")", ":", "\n", "            ", "self", ".", "_trax", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.VOT.vot.VOT.__del__": [[114, 116], ["vot.VOT.quit"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.vot.VOT.quit"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.draw_figure": [[6, 10], ["fig.canvas.draw", "fig.canvas.flush_events", "matplotlib.pause"], "function", ["None"], ["def", "draw_figure", "(", "fig", ")", ":", "\n", "    ", "fig", ".", "canvas", ".", "draw", "(", ")", "\n", "fig", ".", "canvas", ".", "flush_events", "(", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.show_tensor": [[12, 30], ["a.squeeze().cpu().clone().detach().numpy", "matplotlib.figure", "matplotlib.tight_layout", "matplotlib.cla", "matplotlib.imshow", "matplotlib.axis", "matplotlib.axis", "plotting.draw_figure", "numpy.transpose", "matplotlib.title", "a.squeeze().cpu().clone().detach", "a.squeeze().cpu().clone", "a.squeeze().cpu", "a.squeeze"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.draw_figure"], ["", "def", "show_tensor", "(", "a", ":", "torch", ".", "Tensor", ",", "fig_num", "=", "None", ",", "title", "=", "None", ",", "range", "=", "(", "None", ",", "None", ")", ")", ":", "\n", "    ", "\"\"\"Display a 2D tensor.\n    args:\n        fig_num: Figure number.\n        title: Title of figure.\n    \"\"\"", "\n", "a_np", "=", "a", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "a_np", ".", "ndim", "==", "3", ":", "\n", "        ", "a_np", "=", "np", ".", "transpose", "(", "a_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "fig", "=", "plt", ".", "figure", "(", "fig_num", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "imshow", "(", "a_np", ",", "vmin", "=", "range", "[", "0", "]", ",", "vmax", "=", "range", "[", "1", "]", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "if", "title", "is", "not", "None", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "", "draw_figure", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph": [[32, 48], ["a.squeeze().cpu().clone().detach().numpy", "matplotlib.figure", "matplotlib.cla", "matplotlib.plot", "plotting.draw_figure", "matplotlib.title", "a.squeeze().cpu().clone().detach", "a.squeeze().cpu().clone", "a.squeeze().cpu", "a.squeeze"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.draw_figure"], ["", "def", "plot_graph", "(", "a", ":", "torch", ".", "Tensor", ",", "fig_num", "=", "None", ",", "title", "=", "None", ")", ":", "\n", "    ", "\"\"\"Plot graph. Data is a 1D tensor.\n    args:\n        fig_num: Figure number.\n        title: Title of figure.\n    \"\"\"", "\n", "a_np", "=", "a", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "if", "a_np", ".", "ndim", ">", "1", ":", "\n", "        ", "raise", "ValueError", "\n", "", "fig", "=", "plt", ".", "figure", "(", "fig_num", ")", "\n", "# plt.tight_layout()", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "plot", "(", "a_np", ")", "\n", "if", "title", "is", "not", "None", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "", "draw_figure", "(", "fig", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisBase.__init__": [[11, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "visdom", ",", "show_data", ",", "title", ")", ":", "\n", "        ", "self", ".", "visdom", "=", "visdom", "\n", "self", ".", "show_data", "=", "show_data", "\n", "self", ".", "title", "=", "title", "\n", "self", ".", "raw_data", "=", "None", "\n", "self", ".", "opts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisBase.update": [[18, 23], ["visdom.VisBase.save_data", "visdom.VisBase.save_data", "visdom.VisBase.draw_data", "visdom.VisBase.draw_data"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisTracking.save_data", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisTracking.save_data", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisTracking.draw_data", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisTracking.draw_data"], ["", "def", "update", "(", "self", ",", "data", ",", "opts", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "save_data", "(", "data", ",", "opts", ")", "\n", "\n", "if", "self", ".", "show_data", ":", "\n", "            ", "self", ".", "draw_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisBase.save_data": [[24, 26], ["None"], "methods", ["None"], ["", "", "def", "save_data", "(", "self", ",", "data", ",", "opts", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisBase.draw_data": [[27, 29], ["None"], "methods", ["None"], ["", "def", "draw_data", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisBase.toggle_display": [[30, 40], ["visdom.VisBase.draw_data", "visdom.VisBase.draw_data", "visdom.VisBase.visdom.close", "visdom.VisBase.visdom.close"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisTracking.draw_data", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisTracking.draw_data"], ["", "def", "toggle_display", "(", "self", ",", "new_mode", "=", "None", ")", ":", "\n", "        ", "if", "new_mode", "is", "not", "None", ":", "\n", "            ", "self", ".", "show_data", "=", "new_mode", "\n", "", "else", ":", "\n", "            ", "self", ".", "show_data", "=", "not", "self", ".", "show_data", "\n", "\n", "", "if", "self", ".", "show_data", ":", "\n", "            ", "self", ".", "draw_data", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "visdom", ".", "close", "(", "self", ".", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisImage.__init__": [[43, 45], ["visdom.VisBase.__init__", "visdom.VisBase.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "visdom", ",", "show_data", ",", "title", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "visdom", ",", "show_data", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisImage.save_data": [[46, 50], ["data.float.float.float"], "methods", ["None"], ["", "def", "save_data", "(", "self", ",", "data", ",", "opts", ")", ":", "\n", "        ", "data", "=", "data", ".", "float", "(", ")", "\n", "self", ".", "raw_data", "=", "data", "\n", "self", ".", "opts", "=", "opts", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisImage.draw_data": [[51, 53], ["visdom.VisImage.visdom.image", "visdom.VisImage.visdom.image", "visdom.VisImage.raw_data.clone", "visdom.VisImage.raw_data.clone"], "methods", ["None"], ["", "def", "draw_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "visdom", ".", "image", "(", "self", ".", "raw_data", ".", "clone", "(", ")", ",", "opts", "=", "{", "'title'", ":", "self", ".", "title", "}", ",", "win", "=", "self", ".", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisHeatmap.__init__": [[56, 58], ["visdom.VisBase.__init__", "visdom.VisBase.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "visdom", ",", "show_data", ",", "title", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "visdom", ",", "show_data", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisHeatmap.save_data": [[59, 62], ["data.squeeze().flip.squeeze().flip.squeeze().flip", "data.squeeze().flip.squeeze().flip.squeeze"], "methods", ["None"], ["", "def", "save_data", "(", "self", ",", "data", ",", "opts", ")", ":", "\n", "        ", "data", "=", "data", ".", "squeeze", "(", ")", ".", "flip", "(", "0", ")", "\n", "self", ".", "raw_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisHeatmap.draw_data": [[63, 65], ["visdom.VisHeatmap.visdom.heatmap", "visdom.VisHeatmap.visdom.heatmap", "visdom.VisHeatmap.raw_data.clone", "visdom.VisHeatmap.raw_data.clone"], "methods", ["None"], ["", "def", "draw_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "visdom", ".", "heatmap", "(", "self", ".", "raw_data", ".", "clone", "(", ")", ",", "opts", "=", "{", "'title'", ":", "self", ".", "title", "}", ",", "win", "=", "self", ".", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisInfoDict.__init__": [[68, 70], ["visdom.VisBase.__init__", "visdom.VisBase.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "visdom", ",", "show_data", ",", "title", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "visdom", ",", "show_data", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisInfoDict.generate_display_text": [[71, 83], ["data.items", "key.replace.replace.replace", "isinstance"], "methods", ["None"], ["", "def", "generate_display_text", "(", "self", ",", "data", ")", ":", "\n", "        ", "display_text", "=", "''", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "key", "=", "key", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "if", "value", "is", "None", ":", "\n", "                ", "display_text", "+=", "'<b>{}</b>: {}<br>'", ".", "format", "(", "key", ",", "'None'", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "(", "str", ",", "int", ")", ")", ":", "\n", "                ", "display_text", "+=", "'<b>{}</b>: {}<br>'", ".", "format", "(", "key", ",", "value", ")", "\n", "", "else", ":", "\n", "                ", "display_text", "+=", "'<b>{}</b>: {:.2f}<br>'", ".", "format", "(", "key", ",", "value", ")", "\n", "\n", "", "", "return", "display_text", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisInfoDict.save_data": [[84, 86], ["None"], "methods", ["None"], ["", "def", "save_data", "(", "self", ",", "data", ",", "opts", ")", ":", "\n", "        ", "self", ".", "raw_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisInfoDict.draw_data": [[87, 91], ["copy.deepcopy", "visdom.VisInfoDict.generate_display_text", "visdom.VisInfoDict.generate_display_text", "visdom.VisInfoDict.visdom.text", "visdom.VisInfoDict.visdom.text"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisInfoDict.generate_display_text", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisInfoDict.generate_display_text"], ["", "def", "draw_data", "(", "self", ")", ":", "\n", "        ", "data", "=", "copy", ".", "deepcopy", "(", "self", ".", "raw_data", ")", "\n", "display_text", "=", "self", ".", "generate_display_text", "(", "data", ")", "\n", "self", ".", "visdom", ".", "text", "(", "display_text", ",", "opts", "=", "{", "'title'", ":", "self", ".", "title", "}", ",", "win", "=", "self", ".", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisText.__init__": [[94, 96], ["visdom.VisBase.__init__", "visdom.VisBase.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "visdom", ",", "show_data", ",", "title", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "visdom", ",", "show_data", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisText.save_data": [[97, 99], ["None"], "methods", ["None"], ["", "def", "save_data", "(", "self", ",", "data", ",", "opts", ")", ":", "\n", "        ", "self", ".", "raw_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisText.draw_data": [[100, 103], ["copy.deepcopy", "visdom.VisText.visdom.text", "visdom.VisText.visdom.text"], "methods", ["None"], ["", "def", "draw_data", "(", "self", ")", ":", "\n", "        ", "data", "=", "copy", ".", "deepcopy", "(", "self", ".", "raw_data", ")", "\n", "self", ".", "visdom", ".", "text", "(", "data", ",", "opts", "=", "{", "'title'", ":", "self", ".", "title", "}", ",", "win", "=", "self", ".", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisLinePlot.__init__": [[106, 108], ["visdom.VisBase.__init__", "visdom.VisBase.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "visdom", ",", "show_data", ",", "title", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "visdom", ",", "show_data", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisLinePlot.save_data": [[109, 111], ["None"], "methods", ["None"], ["", "def", "save_data", "(", "self", ",", "data", ",", "opts", ")", ":", "\n", "        ", "self", ".", "raw_data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisLinePlot.draw_data": [[112, 121], ["isinstance", "visdom.VisLinePlot.visdom.line", "visdom.VisLinePlot.visdom.line", "visdom.VisLinePlot.raw_data[].clone", "visdom.VisLinePlot.raw_data[].clone", "visdom.VisLinePlot.raw_data[].clone", "visdom.VisLinePlot.raw_data[].clone", "visdom.VisLinePlot.raw_data.clone", "visdom.VisLinePlot.raw_data.clone", "torch.arange"], "methods", ["None"], ["", "def", "draw_data", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "raw_data", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_y", "=", "self", ".", "raw_data", "[", "0", "]", ".", "clone", "(", ")", "\n", "data_x", "=", "self", ".", "raw_data", "[", "1", "]", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "data_y", "=", "self", ".", "raw_data", ".", "clone", "(", ")", "\n", "data_x", "=", "torch", ".", "arange", "(", "data_y", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "visdom", ".", "line", "(", "data_y", ",", "data_x", ",", "opts", "=", "{", "'title'", ":", "self", ".", "title", "}", ",", "win", "=", "self", ".", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisTracking.__init__": [[124, 126], ["visdom.VisBase.__init__", "visdom.VisBase.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "visdom", ",", "show_data", ",", "title", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "visdom", ",", "show_data", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisTracking.save_data": [[127, 135], ["isinstance", "torch.tensor"], "methods", ["None"], ["", "def", "save_data", "(", "self", ",", "data", ",", "opts", ")", ":", "\n", "        ", "image", "=", "data", "[", "0", "]", "\n", "box", "=", "data", "[", "1", "]", "\n", "\n", "if", "box", "is", "not", "None", "and", "isinstance", "(", "box", ",", "list", ")", ":", "\n", "            ", "box", "=", "torch", ".", "tensor", "(", "box", ")", "\n", "\n", "", "self", ".", "raw_data", "=", "[", "image", ",", "box", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisTracking.draw_data": [[136, 153], ["visdom.VisTracking.raw_data[].copy", "visdom.VisTracking.raw_data[].copy", "visdom.VisTracking.raw_data[].clone", "visdom.VisTracking.raw_data[].clone", "cv2.rectangle", "pytracking.features.preprocessing.numpy_to_torch().squeeze", "cv2.resize.float", "visdom.VisTracking.visdom.image", "visdom.VisTracking.visdom.image", "max", "cv2.resize", "float", "int", "int", "int", "int", "pytracking.features.preprocessing.numpy_to_torch", "max"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.numpy_to_torch"], ["", "def", "draw_data", "(", "self", ")", ":", "\n", "        ", "disp_image", "=", "self", ".", "raw_data", "[", "0", "]", ".", "copy", "(", ")", "\n", "box", "=", "self", ".", "raw_data", "[", "1", "]", ".", "clone", "(", ")", "\n", "\n", "if", "max", "(", "disp_image", ".", "shape", ")", ">", "480", ":", "\n", "            ", "resize_factor", "=", "480.0", "/", "float", "(", "max", "(", "disp_image", ".", "shape", ")", ")", "\n", "disp_image", "=", "cv2", ".", "resize", "(", "disp_image", ",", "None", ",", "fx", "=", "resize_factor", ",", "fy", "=", "resize_factor", ")", "\n", "disp_rect", "=", "box", "*", "resize_factor", "\n", "", "else", ":", "\n", "            ", "disp_rect", "=", "box", "\n", "\n", "", "cv2", ".", "rectangle", "(", "disp_image", ",", "(", "int", "(", "disp_rect", "[", "0", "]", ")", ",", "int", "(", "disp_rect", "[", "1", "]", ")", ")", ",", "(", "int", "(", "disp_rect", "[", "0", "]", "+", "disp_rect", "[", "2", "]", ")", ",", "\n", "int", "(", "disp_rect", "[", "1", "]", "+", "disp_rect", "[", "\n", "3", "]", ")", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "2", ")", "\n", "disp_image", "=", "numpy_to_torch", "(", "disp_image", ")", ".", "squeeze", "(", "0", ")", "\n", "disp_image", "=", "disp_image", ".", "float", "(", ")", "\n", "self", ".", "visdom", ".", "image", "(", "disp_image", ",", "opts", "=", "{", "'title'", ":", "self", ".", "title", "}", ",", "win", "=", "self", ".", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.Visdom.__init__": [[156, 167], ["visdom.Visdom", "visdom.Visdom", "visdom.Visdom", "visdom.Visdom", "visdom.Visdom.visdom.properties", "visdom.Visdom.visdom.properties", "visdom.Visdom.visdom.register_event_handler", "visdom.Visdom.visdom.register_event_handler", "visdom.Visdom.visdom.register_event_handler", "visdom.Visdom.visdom.register_event_handler", "visdom_info.get", "visdom_info.get"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.model_constructor.NetConstructor.get", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.model_constructor.NetConstructor.get"], ["    ", "def", "__init__", "(", "self", ",", "debug", "=", "0", ",", "ui_info", "=", "None", ",", "visdom_info", "=", "None", ")", ":", "\n", "        ", "self", ".", "debug", "=", "debug", "\n", "self", ".", "visdom", "=", "visdom", ".", "Visdom", "(", "server", "=", "visdom_info", ".", "get", "(", "'server'", ",", "'127.0.0.1'", ")", ",", "port", "=", "visdom_info", ".", "get", "(", "'port'", ",", "8097", ")", ")", "\n", "self", ".", "registered_blocks", "=", "{", "}", "\n", "self", ".", "blocks_list", "=", "[", "]", "\n", "\n", "self", ".", "visdom", ".", "properties", "(", "self", ".", "blocks_list", ",", "opts", "=", "{", "'title'", ":", "'Block List'", "}", ",", "win", "=", "'block_list'", ")", "\n", "self", ".", "visdom", ".", "register_event_handler", "(", "self", ".", "block_list_callback_handler", ",", "'block_list'", ")", "\n", "\n", "if", "ui_info", "is", "not", "None", ":", "\n", "            ", "self", ".", "visdom", ".", "register_event_handler", "(", "ui_info", "[", "'handler'", "]", ",", "ui_info", "[", "'win_id'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.Visdom.block_list_callback_handler": [[168, 176], ["visdom.Visdom.registered_blocks[].toggle_display", "visdom.Visdom.registered_blocks[].toggle_display", "visdom.Visdom.visdom.properties", "visdom.Visdom.visdom.properties"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisBase.toggle_display", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.VisBase.toggle_display"], ["", "", "def", "block_list_callback_handler", "(", "self", ",", "data", ")", ":", "\n", "        ", "field_name", "=", "self", ".", "blocks_list", "[", "data", "[", "'propertyId'", "]", "]", "[", "'name'", "]", "\n", "\n", "self", ".", "registered_blocks", "[", "field_name", "]", ".", "toggle_display", "(", "data", "[", "'value'", "]", ")", "\n", "\n", "self", ".", "blocks_list", "[", "data", "[", "'propertyId'", "]", "]", "[", "'value'", "]", "=", "data", "[", "'value'", "]", "\n", "\n", "self", ".", "visdom", ".", "properties", "(", "self", ".", "blocks_list", ",", "opts", "=", "{", "'title'", ":", "'Block List'", "}", ",", "win", "=", "'block_list'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.visdom.Visdom.register": [[177, 202], ["visdom.Visdom.registered_blocks[].update", "visdom.Visdom.registered_blocks[].update", "visdom.Visdom.registered_blocks.keys", "visdom.Visdom.registered_blocks.keys", "visdom.Visdom.visdom.properties", "visdom.Visdom.visdom.properties", "visdom.Visdom.blocks_list.append", "visdom.Visdom.blocks_list.append", "visdom.VisImage", "visdom.VisImage", "visdom.VisHeatmap", "visdom.VisHeatmap", "visdom.VisInfoDict", "visdom.VisInfoDict", "visdom.VisText", "visdom.VisText", "visdom.VisLinePlot", "visdom.VisLinePlot", "visdom.VisTracking", "visdom.VisTracking", "ValueError"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.update"], ["", "def", "register", "(", "self", ",", "data", ",", "mode", ",", "debug_level", "=", "0", ",", "title", "=", "'Data'", ",", "opts", "=", "{", "}", ")", ":", "\n", "        ", "if", "title", "not", "in", "self", ".", "registered_blocks", ".", "keys", "(", ")", ":", "\n", "            ", "show_data", "=", "self", ".", "debug", ">=", "debug_level", "\n", "\n", "if", "title", "is", "not", "'Tracking'", ":", "\n", "                ", "self", ".", "blocks_list", ".", "append", "(", "{", "'type'", ":", "'checkbox'", ",", "'name'", ":", "title", ",", "'value'", ":", "show_data", "}", ")", "\n", "\n", "", "self", ".", "visdom", ".", "properties", "(", "self", ".", "blocks_list", ",", "opts", "=", "{", "'title'", ":", "'Block List'", "}", ",", "win", "=", "'block_list'", ")", "\n", "\n", "if", "mode", "==", "'image'", ":", "\n", "                ", "self", ".", "registered_blocks", "[", "title", "]", "=", "VisImage", "(", "self", ".", "visdom", ",", "show_data", ",", "title", ")", "\n", "", "elif", "mode", "==", "'heatmap'", ":", "\n", "                ", "self", ".", "registered_blocks", "[", "title", "]", "=", "VisHeatmap", "(", "self", ".", "visdom", ",", "show_data", ",", "title", ")", "\n", "", "elif", "mode", "==", "'info_dict'", ":", "\n", "                ", "self", ".", "registered_blocks", "[", "title", "]", "=", "VisInfoDict", "(", "self", ".", "visdom", ",", "show_data", ",", "title", ")", "\n", "", "elif", "mode", "==", "'text'", ":", "\n", "                ", "self", ".", "registered_blocks", "[", "title", "]", "=", "VisText", "(", "self", ".", "visdom", ",", "show_data", ",", "title", ")", "\n", "", "elif", "mode", "==", "'lineplot'", ":", "\n", "                ", "self", ".", "registered_blocks", "[", "title", "]", "=", "VisLinePlot", "(", "self", ".", "visdom", ",", "show_data", ",", "title", ")", "\n", "", "elif", "mode", "==", "'Tracking'", ":", "\n", "                ", "self", ".", "registered_blocks", "[", "title", "]", "=", "VisTracking", "(", "self", ".", "visdom", ",", "show_data", ",", "title", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Visdom Error: Unknown data mode {}'", ".", "format", "(", "mode", ")", ")", "\n", "# Update", "\n", "", "", "self", ".", "registered_blocks", "[", "title", "]", ".", "update", "(", "data", ",", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.loading.load_network": [[6, 26], ["os.path.isabs", "ltr.load_network", "isinstance", "os.path.join", "ltr.load_network", "pytracking.evaluation.environment.env_settings", "pytracking.evaluation.environment.env_settings", "os.path.join", "ltr.load_network", "pytracking.evaluation.environment.env_settings"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading.load_network", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading.load_network", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading.load_network", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings"], ["def", "load_network", "(", "net_path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isabs", "(", "net_path", ")", ":", "\n", "        ", "path_full", "=", "net_path", "\n", "net", ",", "_", "=", "ltr_loading", ".", "load_network", "(", "path_full", ",", "backbone_pretrained", "=", "False", ")", "\n", "", "elif", "isinstance", "(", "env_settings", "(", ")", ".", "network_path", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "net", "=", "None", "\n", "for", "p", "in", "env_settings", "(", ")", ".", "network_path", ":", "\n", "            ", "path_full", "=", "os", ".", "path", ".", "join", "(", "p", ",", "net_path", ")", "\n", "try", ":", "\n", "                ", "net", ",", "_", "=", "ltr_loading", ".", "load_network", "(", "path_full", ",", "backbone_pretrained", "=", "False", ")", "\n", "break", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "", "assert", "net", "is", "not", "None", ",", "'Failed to load network'", "\n", "", "else", ":", "\n", "        ", "path_full", "=", "os", ".", "path", ".", "join", "(", "env_settings", "(", ")", ".", "network_path", ",", "net_path", ")", "\n", "net", ",", "_", "=", "ltr_loading", ".", "load_network", "(", "path_full", ",", "backbone_pretrained", "=", "False", ")", "\n", "\n", "", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.load_text.load_text_numpy": [[5, 18], ["isinstance", "Exception", "numpy.loadtxt", "numpy.loadtxt"], "function", ["None"], ["def", "load_text_numpy", "(", "path", ",", "delimiter", ",", "dtype", ")", ":", "\n", "    ", "if", "isinstance", "(", "delimiter", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "for", "d", "in", "delimiter", ":", "\n", "            ", "try", ":", "\n", "                ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "path", ",", "delimiter", "=", "d", ",", "dtype", "=", "dtype", ")", "\n", "return", "ground_truth_rect", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "", "raise", "Exception", "(", "'Could not read file {}'", ".", "format", "(", "path", ")", ")", "\n", "", "else", ":", "\n", "        ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "path", ",", "delimiter", "=", "delimiter", ",", "dtype", "=", "dtype", ")", "\n", "return", "ground_truth_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.load_text.load_text_pandas": [[20, 35], ["isinstance", "Exception", "pandas.read_csv", "pandas.read_csv"], "function", ["None"], ["", "", "def", "load_text_pandas", "(", "path", ",", "delimiter", ",", "dtype", ")", ":", "\n", "    ", "if", "isinstance", "(", "delimiter", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "for", "d", "in", "delimiter", ":", "\n", "            ", "try", ":", "\n", "                ", "ground_truth_rect", "=", "pd", ".", "read_csv", "(", "path", ",", "delimiter", "=", "d", ",", "header", "=", "None", ",", "dtype", "=", "dtype", ",", "na_filter", "=", "False", ",", "\n", "low_memory", "=", "False", ")", ".", "values", "\n", "return", "ground_truth_rect", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "pass", "\n", "\n", "", "", "raise", "Exception", "(", "'Could not read file {}'", ".", "format", "(", "path", ")", ")", "\n", "", "else", ":", "\n", "        ", "ground_truth_rect", "=", "pd", ".", "read_csv", "(", "path", ",", "delimiter", "=", "delimiter", ",", "header", "=", "None", ",", "dtype", "=", "dtype", ",", "na_filter", "=", "False", ",", "\n", "low_memory", "=", "False", ")", ".", "values", "\n", "return", "ground_truth_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.load_text.load_text": [[37, 42], ["load_text.load_text_numpy", "load_text.load_text_pandas"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.load_text.load_text_numpy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.load_text.load_text_pandas"], ["", "", "def", "load_text", "(", "path", ",", "delimiter", "=", "' '", ",", "dtype", "=", "np", ".", "float32", ",", "backend", "=", "'numpy'", ")", ":", "\n", "    ", "if", "backend", "==", "'numpy'", ":", "\n", "        ", "return", "load_text_numpy", "(", "path", ",", "delimiter", ",", "dtype", ")", "\n", "", "elif", "backend", "==", "'pandas'", ":", "\n", "        ", "return", "load_text_pandas", "(", "path", ",", "delimiter", ",", "dtype", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.params.TrackerParams.set_default_values": [[7, 11], ["default_vals.items", "hasattr", "setattr"], "methods", ["None"], ["def", "set_default_values", "(", "self", ",", "default_vals", ":", "dict", ")", ":", "\n", "        ", "for", "name", ",", "val", "in", "default_vals", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "name", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "name", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.params.FeatureParams.__init__": [[15, 24], ["kwargs.items", "len", "isinstance", "setattr", "setattr", "pytracking.TensorList"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "for", "name", ",", "val", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "name", ",", "TensorList", "(", "val", ")", ")", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "name", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.params.Choice": [[26, 29], ["random.choice"], "function", ["None"], ["", "", "", "", "def", "Choice", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"Can be used to sample random parameter values.\"\"\"", "\n", "return", "random", ".", "choice", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.convert_vot_anno_to_rect.convert_vot_anno_to_rect": [[4, 38], ["len", "min", "max", "min", "max", "numpy.array", "numpy.mean", "numpy.mean", "min", "max", "min", "max", "numpy.sqrt", "len", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["def", "convert_vot_anno_to_rect", "(", "vot_anno", ",", "type", ")", ":", "\n", "    ", "if", "len", "(", "vot_anno", ")", "==", "4", ":", "\n", "        ", "return", "vot_anno", "\n", "\n", "", "if", "type", "==", "'union'", ":", "\n", "        ", "x1", "=", "min", "(", "vot_anno", "[", "0", ":", ":", "2", "]", ")", "\n", "x2", "=", "max", "(", "vot_anno", "[", "0", ":", ":", "2", "]", ")", "\n", "y1", "=", "min", "(", "vot_anno", "[", "1", ":", ":", "2", "]", ")", "\n", "y2", "=", "max", "(", "vot_anno", "[", "1", ":", ":", "2", "]", ")", "\n", "return", "[", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "]", "\n", "", "elif", "type", "==", "'preserve_area'", ":", "\n", "        ", "if", "len", "(", "vot_anno", ")", "!=", "8", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "vot_anno", "=", "np", ".", "array", "(", "vot_anno", ")", "\n", "cx", "=", "np", ".", "mean", "(", "vot_anno", "[", "0", ":", ":", "2", "]", ")", "\n", "cy", "=", "np", ".", "mean", "(", "vot_anno", "[", "1", ":", ":", "2", "]", ")", "\n", "\n", "x1", "=", "min", "(", "vot_anno", "[", "0", ":", ":", "2", "]", ")", "\n", "x2", "=", "max", "(", "vot_anno", "[", "0", ":", ":", "2", "]", ")", "\n", "y1", "=", "min", "(", "vot_anno", "[", "1", ":", ":", "2", "]", ")", "\n", "y2", "=", "max", "(", "vot_anno", "[", "1", ":", ":", "2", "]", ")", "\n", "\n", "A1", "=", "np", ".", "linalg", ".", "norm", "(", "vot_anno", "[", "0", ":", "2", "]", "-", "vot_anno", "[", "2", ":", "4", "]", ")", "*", "np", ".", "linalg", ".", "norm", "(", "vot_anno", "[", "2", ":", "4", "]", "-", "vot_anno", "[", "4", ":", "6", "]", ")", "\n", "A2", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "A1", "/", "A2", ")", "\n", "w", "=", "s", "*", "(", "x2", "-", "x1", ")", "+", "1", "\n", "h", "=", "s", "*", "(", "y2", "-", "y1", ")", "+", "1", "\n", "\n", "x", "=", "cx", "-", "0.5", "*", "w", "\n", "y", "=", "cy", "-", "0.5", "*", "h", "\n", "return", "[", "x", ",", "y", ",", "w", ",", "h", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.default.parameters": [[6, 98], ["pytracking.utils.TrackerParams", "pytracking.utils.TrackerParams", "pytracking.utils.TrackerParams", "pytracking.utils.FeatureParams", "pytracking.features.deep.ResNet18m1", "pytracking.features.extractor.MultiResolutionExtractor", "torch.arange().float", "torch.arange"], "function", ["None"], ["def", "parameters", "(", ")", ":", "\n", "    ", "params", "=", "TrackerParams", "(", ")", "\n", "\n", "params", ".", "debug", "=", "0", "\n", "params", ".", "visualization", "=", "False", "\n", "\n", "params", ".", "use_gpu", "=", "True", "\n", "\n", "# Feature specific parameters", "\n", "shallow_params", "=", "TrackerParams", "(", ")", "\n", "deep_params", "=", "TrackerParams", "(", ")", "\n", "\n", "# Patch sampling parameters", "\n", "params", ".", "max_image_sample_size", "=", "250", "**", "2", "# Maximum image sample size", "\n", "params", ".", "min_image_sample_size", "=", "200", "**", "2", "# Minimum image sample size", "\n", "params", ".", "search_area_scale", "=", "4.5", "# Scale relative to target size", "\n", "\n", "# Conjugate Gradient parameters", "\n", "params", ".", "CG_iter", "=", "5", "# The number of Conjugate Gradient iterations in each update after the first frame", "\n", "params", ".", "init_CG_iter", "=", "100", "# The total number of Conjugate Gradient iterations used in the first frame", "\n", "params", ".", "init_GN_iter", "=", "10", "# The number of Gauss-Newton iterations used in the first frame (only if the projection matrix is updated)", "\n", "params", ".", "post_init_CG_iter", "=", "0", "# CG iterations to run after GN", "\n", "params", ".", "fletcher_reeves", "=", "False", "# Use the Fletcher-Reeves (true) or Polak-Ribiere (false) formula in the Conjugate Gradient", "\n", "params", ".", "standard_alpha", "=", "True", "# Use the standard formula for computing the step length in Conjugate Gradient", "\n", "params", ".", "CG_forgetting_rate", "=", "75", "# Forgetting rate of the last conjugate direction", "\n", "params", ".", "precond_data_param", "=", "0.3", "# Weight of the data term in the preconditioner", "\n", "params", ".", "precond_reg_param", "=", "0.15", "# Weight of the regularization term in the preconditioner", "\n", "params", ".", "precond_proj_param", "=", "35", "# Weight of the projection matrix part in the preconditioner", "\n", "\n", "# Learning parameters", "\n", "shallow_params", ".", "learning_rate", "=", "0.025", "\n", "deep_params", ".", "learning_rate", "=", "0.0075", "\n", "shallow_params", ".", "output_sigma_factor", "=", "1", "/", "16", "\n", "deep_params", ".", "output_sigma_factor", "=", "1", "/", "4", "\n", "\n", "# Training parameters", "\n", "params", ".", "sample_memory_size", "=", "200", "# Memory size", "\n", "params", ".", "train_skipping", "=", "10", "# How often to run training (every n-th frame)", "\n", "\n", "# Detection parameters", "\n", "params", ".", "scale_factors", "=", "1.02", "**", "torch", ".", "arange", "(", "-", "2", ",", "3", ")", ".", "float", "(", ")", "# What scales to use for localization", "\n", "params", ".", "score_upsample_factor", "=", "1", "# How much Fourier upsampling to use", "\n", "params", ".", "score_fusion_strategy", "=", "'weightedsum'", "# Fusion strategy", "\n", "shallow_params", ".", "translation_weight", "=", "0.4", "# Weight of this feature", "\n", "deep_params", ".", "translation_weight", "=", "1", "-", "shallow_params", ".", "translation_weight", "\n", "\n", "# Init augmentation parameters", "\n", "params", ".", "augmentation", "=", "{", "'fliplr'", ":", "True", ",", "\n", "'rotate'", ":", "[", "5", ",", "-", "5", ",", "10", ",", "-", "10", ",", "20", ",", "-", "20", ",", "30", ",", "-", "30", ",", "45", ",", "-", "45", ",", "-", "60", ",", "60", "]", ",", "\n", "'blur'", ":", "[", "(", "2", ",", "0.2", ")", ",", "(", "0.2", ",", "2", ")", ",", "(", "3", ",", "1", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "2", ")", "]", ",", "\n", "'shift'", ":", "[", "(", "6", ",", "6", ")", ",", "(", "-", "6", ",", "6", ")", ",", "(", "6", ",", "-", "6", ")", ",", "(", "-", "6", ",", "-", "6", ")", "]", ",", "\n", "'dropout'", ":", "(", "7", ",", "0.2", ")", "}", "\n", "\n", "# Whether to use augmentation for this feature", "\n", "deep_params", ".", "use_augmentation", "=", "True", "\n", "shallow_params", ".", "use_augmentation", "=", "True", "\n", "\n", "# Factorized convolution parameters", "\n", "# params.use_projection_matrix = True    # Use projection matrix, i.e. use the factorized convolution formulation", "\n", "params", ".", "update_projection_matrix", "=", "True", "# Whether the projection matrix should be optimized or not", "\n", "# params.proj_init_method = 'pca'        # Method for initializing the projection matrix", "\n", "params", ".", "projection_reg", "=", "5e-8", "# Regularization paremeter of the projection matrix", "\n", "shallow_params", ".", "compressed_dim", "=", "16", "# Dimension output of projection matrix for shallow features", "\n", "deep_params", ".", "compressed_dim", "=", "64", "# Dimension output of projection matrix for deep features", "\n", "\n", "# Interpolation parameters", "\n", "params", ".", "interpolation_method", "=", "'bicubic'", "# The kind of interpolation kernel", "\n", "params", ".", "interpolation_bicubic_a", "=", "-", "0.75", "# The parameter for the bicubic interpolation kernel", "\n", "params", ".", "interpolation_centering", "=", "True", "# Center the kernel at the feature sample", "\n", "params", ".", "interpolation_windowing", "=", "False", "# Do additional windowing on the Fourier coefficients of the kernel", "\n", "\n", "# Regularization parameters", "\n", "shallow_params", ".", "use_reg_window", "=", "True", "# Use spatial regularization or not", "\n", "shallow_params", ".", "reg_window_min", "=", "1e-4", "# The minimum value of the regularization window", "\n", "shallow_params", ".", "reg_window_edge", "=", "10e-3", "# The impact of the spatial regularization", "\n", "shallow_params", ".", "reg_window_power", "=", "2", "# The degree of the polynomial to use (e.g. 2 is a quadratic window)", "\n", "shallow_params", ".", "reg_sparsity_threshold", "=", "0.05", "# A relative threshold of which DFT coefficients that should be set to zero", "\n", "\n", "deep_params", ".", "use_reg_window", "=", "True", "# Use spatial regularization or not", "\n", "deep_params", ".", "reg_window_min", "=", "10e-4", "# The minimum value of the regularization window", "\n", "deep_params", ".", "reg_window_edge", "=", "50e-3", "# The impact of the spatial regularization", "\n", "deep_params", ".", "reg_window_power", "=", "2", "# The degree of the polynomial to use (e.g. 2 is a quadratic window)", "\n", "deep_params", ".", "reg_sparsity_threshold", "=", "0.1", "# A relative threshold of which DFT coefficients that should be set to zero", "\n", "\n", "\n", "fparams", "=", "FeatureParams", "(", "feature_params", "=", "[", "shallow_params", ",", "deep_params", "]", ")", "\n", "features", "=", "deep", ".", "ResNet18m1", "(", "output_layers", "=", "[", "'vggconv1'", ",", "'layer3'", "]", ",", "use_gpu", "=", "params", ".", "use_gpu", ",", "fparams", "=", "fparams", ",", "\n", "pool_stride", "=", "[", "2", ",", "1", "]", ",", "normalize_power", "=", "2", ")", "\n", "\n", "params", ".", "features", "=", "MultiResolutionExtractor", "(", "[", "features", "]", ")", "\n", "\n", "return", "params", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.__init__.get_tracker_class": [[3, 5], ["None"], "function", ["None"], ["import", "pytracking", ".", "libs", ".", "operation", "as", "operation", "\n", "import", "pytracking", ".", "libs", ".", "fourier", "as", "fourier", "\n", "import", "pytracking", ".", "libs", ".", "dcf", "as", "dcf", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FactorizedConvProblem.__init__": [[9, 32], ["pytracking.complex.complex().permute", "pytracking.complex.mtimes", "pytracking.complex.abs_sqr().mean().permute", "optim.FactorizedConvProblem.diag_M.unsqueeze_", "optim.FactorizedConvProblem.diag_M.extend", "sample_weights.sqrt", "optim.FactorizedConvProblem.reg_filter.view", "optim.FactorizedConvProblem.reg_filter.view", "optim.FactorizedConvProblem.training_samples.size", "pytracking.complex.complex", "pytracking.complex.abs_sqr().mean", "pytracking.fourier.inner_prod_fs", "pytracking.complex.abs_sqr", "optim.FactorizedConvProblem.sample_energy.mean"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mtimes", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.complex", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.inner_prod_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs_sqr"], ["    ", "def", "__init__", "(", "self", ",", "training_samples", ":", "TensorList", ",", "yf", ":", "TensorList", ",", "reg_filter", ":", "torch", ".", "Tensor", ",", "init_proj_mat", ":", "TensorList", ",", "params", ",", "sample_weights", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "self", ".", "training_samples", "=", "training_samples", "\n", "self", ".", "yf", "=", "complex", ".", "complex", "(", "yf", ")", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ",", "4", ")", "\n", "self", ".", "reg_filter", "=", "reg_filter", "\n", "self", ".", "sample_weights_sqrt", "=", "None", "if", "sample_weights", "is", "None", "else", "sample_weights", ".", "sqrt", "(", ")", "\n", "self", ".", "params", "=", "params", "\n", "\n", "# Sample energy for preconditioner", "\n", "compressed_samples", "=", "complex", ".", "mtimes", "(", "self", ".", "training_samples", ",", "init_proj_mat", ")", "\n", "self", ".", "sample_energy", "=", "complex", ".", "abs_sqr", "(", "compressed_samples", ")", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "self", ".", "reg_energy", "=", "self", ".", "reg_filter", ".", "view", "(", "-", "1", ")", "@", "self", ".", "reg_filter", ".", "view", "(", "-", "1", ")", "\n", "\n", "# Projection energy for preconditioner", "\n", "self", ".", "proj_energy", "=", "2", "*", "fourier", ".", "inner_prod_fs", "(", "yf", ",", "yf", ")", "/", "self", ".", "training_samples", ".", "size", "(", "3", ")", "\n", "\n", "# Filter part of preconditioner", "\n", "self", ".", "diag_M", "=", "(", "1", "-", "self", ".", "params", ".", "precond_reg_param", ")", "*", "(", "self", ".", "params", ".", "precond_data_param", "*", "self", ".", "sample_energy", "+", "\n", "(", "1", "-", "self", ".", "params", ".", "precond_data_param", ")", "*", "self", ".", "sample_energy", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", ")", "+", "self", ".", "params", ".", "precond_reg_param", "*", "self", ".", "reg_energy", "\n", "self", ".", "diag_M", ".", "unsqueeze_", "(", "-", "1", ")", "\n", "\n", "# Projection matrix part of preconditioner", "\n", "self", ".", "diag_M", ".", "extend", "(", "self", ".", "params", ".", "precond_proj_param", "*", "(", "self", ".", "proj_energy", "+", "self", ".", "params", ".", "projection_reg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FactorizedConvProblem.__call__": [[34, 75], ["pytracking.complex.mtimes", "pytracking.complex.mtimes", "zip", "pytracking.complex.mult.extend", "hf.permute", "pytracking.complex.mult", "min", "min", "hfe.clone.permute().reshape", "torch.conv2d", "torch.conv2d", "pytracking.complex.mult.append", "optim.FactorizedConvProblem.sample_weights_sqrt.view", "pytracking.complex.conj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hfe.clone", "math.sqrt", "len", "len", "hfe[].clone().detach().flip", "hfe.clone.permute", "hfe[].clone().detach", "hfe[].clone"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mtimes", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mtimes", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.conj"], ["", "def", "__call__", "(", "self", ",", "x", ":", "TensorList", ")", ":", "\n", "        ", "\"\"\"\n        Compute residuals\n        :param x: [filters, projection_matrices]\n        :return: [data_terms, filter_regularizations, proj_mat_regularizations]\n        \"\"\"", "\n", "hf", "=", "x", "[", ":", "len", "(", "x", ")", "//", "2", "]", "\n", "P", "=", "x", "[", "len", "(", "x", ")", "//", "2", ":", "]", "\n", "\n", "compressed_samples", "=", "complex", ".", "mtimes", "(", "self", ".", "training_samples", ",", "P", ")", "\n", "residuals", "=", "complex", ".", "mtimes", "(", "compressed_samples", ",", "hf", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ",", "4", ")", ")", "# (h, w, num_samp, num_filt, 2)", "\n", "residuals", "=", "residuals", "-", "self", ".", "yf", "\n", "\n", "if", "self", ".", "sample_weights_sqrt", "is", "not", "None", ":", "\n", "            ", "residuals", "=", "complex", ".", "mult", "(", "self", ".", "sample_weights_sqrt", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", ",", "residuals", ")", "\n", "\n", "\n", "# Add spatial regularization", "\n", "", "for", "hfe", ",", "reg_filter", "in", "zip", "(", "hf", ",", "self", ".", "reg_filter", ")", ":", "\n", "            ", "reg_pad1", "=", "min", "(", "reg_filter", ".", "shape", "[", "-", "2", "]", "-", "1", ",", "hfe", ".", "shape", "[", "-", "3", "]", "-", "1", ")", "\n", "reg_pad2", "=", "min", "(", "reg_filter", ".", "shape", "[", "-", "1", "]", "-", "1", ",", "hfe", ".", "shape", "[", "-", "2", "]", "-", "1", ")", "\n", "\n", "# Add part needed for convolution", "\n", "if", "reg_pad2", ">", "0", ":", "\n", "                ", "hfe_left_padd", "=", "complex", ".", "conj", "(", "hfe", "[", "...", ",", "1", ":", "reg_pad2", "+", "1", ",", ":", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "flip", "(", "(", "2", ",", "3", ")", ")", ")", "\n", "hfe_conv", "=", "torch", ".", "cat", "(", "[", "hfe_left_padd", ",", "hfe", "]", ",", "-", "2", ")", "\n", "", "else", ":", "\n", "                ", "hfe_conv", "=", "hfe", ".", "clone", "(", ")", "\n", "\n", "# Shift data to batch dimension", "\n", "", "hfe_conv", "=", "hfe_conv", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "hfe_conv", ".", "shape", "[", "-", "3", "]", ",", "hfe_conv", ".", "shape", "[", "-", "2", "]", ")", "\n", "\n", "# Do first convolution", "\n", "hfe_conv", "=", "F", ".", "conv2d", "(", "hfe_conv", ",", "reg_filter", ",", "padding", "=", "(", "reg_pad1", ",", "reg_pad2", ")", ")", "\n", "\n", "residuals", ".", "append", "(", "hfe_conv", ")", "\n", "\n", "# Add regularization for projection matrix", "\n", "", "residuals", ".", "extend", "(", "math", ".", "sqrt", "(", "self", ".", "params", ".", "projection_reg", ")", "*", "P", ")", "\n", "\n", "return", "residuals", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FactorizedConvProblem.ip_input": [[77, 92], ["pytracking.fourier.inner_prod_fs", "pytracking.fourier.inner_prod_fs.concat", "len", "a_P.reshape", "b_P.reshape", "pytracking.fourier.inner_prod_fs.clone"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.inner_prod_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.concat"], ["", "def", "ip_input", "(", "self", ",", "a", ":", "TensorList", ",", "b", ":", "TensorList", ")", ":", "\n", "        ", "num", "=", "len", "(", "a", ")", "//", "2", "# Number of filters", "\n", "a_filter", "=", "a", "[", ":", "num", "]", "\n", "b_filter", "=", "b", "[", ":", "num", "]", "\n", "a_P", "=", "a", "[", "num", ":", "]", "\n", "b_P", "=", "b", "[", "num", ":", "]", "\n", "\n", "# Filter inner product", "\n", "ip_out", "=", "fourier", ".", "inner_prod_fs", "(", "a_filter", ",", "b_filter", ")", "\n", "\n", "# Add projection matrix part", "\n", "ip_out", "+=", "a_P", ".", "reshape", "(", "-", "1", ")", "@", "b_P", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# Have independent inner products for each filter", "\n", "return", "ip_out", ".", "concat", "(", "ip_out", ".", "clone", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FactorizedConvProblem.ip_output": [[94, 115], ["a[].permute", "b[].permute", "sum", "sum.new_zeros", "zip", "sum", "len", "pytracking.fourier.inner_prod_fs", "min", "ar.reshape().permute", "br.reshape().permute", "pytracking.fourier.inner_prod_fs", "a_P_reg.view", "b_P_reg.view", "ar.reshape", "br.reshape"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.inner_prod_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.inner_prod_fs"], ["", "def", "ip_output", "(", "self", ",", "a", ":", "TensorList", ",", "b", ":", "TensorList", ")", ":", "\n", "        ", "num", "=", "len", "(", "a", ")", "//", "3", "# Number of filters", "\n", "a_data", "=", "a", "[", ":", "num", "]", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ",", "4", ")", "\n", "b_data", "=", "b", "[", ":", "num", "]", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ",", "4", ")", "\n", "a_filt_reg", "=", "a", "[", "num", ":", "2", "*", "num", "]", "\n", "b_filt_reg", "=", "b", "[", "num", ":", "2", "*", "num", "]", "\n", "a_P_reg", "=", "a", "[", "2", "*", "num", ":", "]", "\n", "b_P_reg", "=", "b", "[", "2", "*", "num", ":", "]", "\n", "\n", "ip_data", "=", "sum", "(", "fourier", ".", "inner_prod_fs", "(", "a_data", ",", "b_data", ")", ")", "\n", "ip_filt_reg", "=", "ip_data", ".", "new_zeros", "(", "1", ")", "\n", "\n", "for", "ar", ",", "br", ",", "res_data", ",", "reg_filter", "in", "zip", "(", "a_filt_reg", ",", "b_filt_reg", ",", "a_data", ",", "self", ".", "reg_filter", ")", ":", "\n", "            ", "reg_pad2", "=", "min", "(", "reg_filter", ".", "shape", "[", "-", "1", "]", "-", "1", ",", "res_data", ".", "shape", "[", "-", "2", "]", "-", "1", ")", "\n", "arp", "=", "ar", ".", "reshape", "(", "1", ",", "-", "1", ",", "2", ",", "ar", ".", "shape", "[", "2", "]", ",", "ar", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "brp", "=", "br", ".", "reshape", "(", "1", ",", "-", "1", ",", "2", ",", "br", ".", "shape", "[", "2", "]", ",", "br", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "ip_filt_reg", "+=", "fourier", ".", "inner_prod_fs", "(", "arp", "[", ":", ",", ":", ",", ":", ",", "2", "*", "reg_pad2", ":", ",", ":", "]", ",", "brp", "[", ":", ",", ":", ",", ":", ",", "2", "*", "reg_pad2", ":", ",", ":", "]", ")", "\n", "\n", "", "ip_P_reg", "=", "sum", "(", "a_P_reg", ".", "view", "(", "-", "1", ")", "@", "b_P_reg", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "return", "ip_data", "+", "ip_filt_reg", "+", "ip_P_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FactorizedConvProblem.M1": [[117, 119], ["None"], "methods", ["None"], ["", "def", "M1", "(", "self", ",", "x", ":", "TensorList", ")", ":", "\n", "        ", "return", "x", "/", "self", ".", "diag_M", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.__init__": [[122, 132], ["pytracking.optimization.ConjugateGradientBase.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "reg_energy", ")", ":", "\n", "        ", "super", "(", "FilterOptim", ",", "self", ")", ".", "__init__", "(", "params", ".", "fletcher_reeves", ",", "params", ".", "standard_alpha", ",", "params", ".", "direction_forget_factor", ",", "(", "params", ".", "debug", ">=", "3", ")", ")", "\n", "\n", "# Parameters", "\n", "self", ".", "params", "=", "params", "\n", "\n", "self", ".", "reg_energy", "=", "reg_energy", "\n", "self", ".", "sample_energy", "=", "None", "\n", "\n", "self", ".", "residuals", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register": [[134, 140], ["None"], "methods", ["None"], ["", "def", "register", "(", "self", ",", "filter", ",", "training_samples", ",", "yf", ",", "sample_weights", ",", "reg_filter", ")", ":", "\n", "        ", "self", ".", "filter", "=", "filter", "\n", "self", ".", "training_samples", "=", "training_samples", "# (h, w, num_samples, num_channels, 2)", "\n", "self", ".", "yf", "=", "yf", "\n", "self", ".", "sample_weights", "=", "sample_weights", "\n", "self", ".", "reg_filter", "=", "reg_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.run": [[142, 165], ["pytracking.complex.mtimes().permute", "pytracking.complex.mult_conj", "optim.FilterOptim.run_CG", "pytracking.complex.abs_sqr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pytracking.utils.plotting.plot_graph", "pytracking.complex.mtimes", "optim.FilterOptim.sample_weights.view", "optim.FilterOptim.sample_energy.mean"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult_conj", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.run_CG", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs_sqr", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mtimes"], ["", "def", "run", "(", "self", ",", "num_iter", ",", "new_xf", ":", "TensorList", "=", "None", ")", ":", "\n", "        ", "if", "num_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "new_xf", "is", "not", "None", ":", "\n", "            ", "new_sample_energy", "=", "complex", ".", "abs_sqr", "(", "new_xf", ")", "\n", "if", "self", ".", "sample_energy", "is", "None", ":", "\n", "                ", "self", ".", "sample_energy", "=", "new_sample_energy", "\n", "", "else", ":", "\n", "                ", "self", ".", "sample_energy", "=", "(", "1", "-", "self", ".", "params", ".", "precond_learning_rate", ")", "*", "self", ".", "sample_energy", "+", "self", ".", "params", ".", "precond_learning_rate", "*", "new_sample_energy", "\n", "\n", "# Compute right hand side", "\n", "", "", "self", ".", "b", "=", "complex", ".", "mtimes", "(", "self", ".", "sample_weights", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ",", "self", ".", "training_samples", ")", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ",", "4", ")", "\n", "self", ".", "b", "=", "complex", ".", "mult_conj", "(", "self", ".", "yf", ",", "self", ".", "b", ")", "\n", "\n", "self", ".", "diag_M", "=", "(", "1", "-", "self", ".", "params", ".", "precond_reg_param", ")", "*", "(", "self", ".", "params", ".", "precond_data_param", "*", "self", ".", "sample_energy", "+", "\n", "(", "1", "-", "self", ".", "params", ".", "precond_data_param", ")", "*", "self", ".", "sample_energy", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", ")", "+", "self", ".", "params", ".", "precond_reg_param", "*", "self", ".", "reg_energy", "\n", "\n", "_", ",", "res", "=", "self", ".", "run_CG", "(", "num_iter", ",", "self", ".", "filter", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "residuals", "=", "torch", ".", "cat", "(", "(", "self", ".", "residuals", ",", "res", ")", ")", "\n", "plot_graph", "(", "self", ".", "residuals", ",", "9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.A": [[168, 201], ["pytracking.complex.mtimes", "pytracking.complex.mult", "pytracking.complex.mtimes().permute", "zip", "hf.permute", "optim.FilterOptim.sample_weights.view", "min", "min", "hfe.clone.permute().reshape", "torch.conv2d", "torch.conv2d", "min", "torch.conv2d", "torch.conv2d", "hfe.clone.reshape().permute", "pytracking.complex.mtimes", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hfe.clone", "pytracking.complex.mult.permute", "hfe.clone.permute", "hfe.clone.reshape", "pytracking.complex.conj", "hfe[].flip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mtimes", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mtimes", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.conj"], ["", "", "def", "A", "(", "self", ",", "hf", ":", "TensorList", ")", ":", "\n", "# Classify", "\n", "        ", "sh", "=", "complex", ".", "mtimes", "(", "self", ".", "training_samples", ",", "hf", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ",", "4", ")", ")", "# (h, w, num_samp, num_filt, 2)", "\n", "sh", "=", "complex", ".", "mult", "(", "self", ".", "sample_weights", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", ",", "sh", ")", "\n", "\n", "# Multiply with transpose", "\n", "hf_out", "=", "complex", ".", "mtimes", "(", "sh", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", ",", "self", ".", "training_samples", ",", "conj_b", "=", "True", ")", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ",", "4", ")", "\n", "\n", "# Add regularization", "\n", "for", "hfe", ",", "hfe_out", ",", "reg_filter", "in", "zip", "(", "hf", ",", "hf_out", ",", "self", ".", "reg_filter", ")", ":", "\n", "            ", "reg_pad1", "=", "min", "(", "reg_filter", ".", "shape", "[", "-", "2", "]", "-", "1", ",", "hfe", ".", "shape", "[", "-", "3", "]", "-", "1", ")", "\n", "reg_pad2", "=", "min", "(", "reg_filter", ".", "shape", "[", "-", "1", "]", "-", "1", ",", "2", "*", "hfe", ".", "shape", "[", "-", "2", "]", "-", "2", ")", "\n", "\n", "# Add part needed for convolution", "\n", "if", "reg_pad2", ">", "0", ":", "\n", "                ", "hfe_conv", "=", "torch", ".", "cat", "(", "[", "complex", ".", "conj", "(", "hfe", "[", "...", ",", "1", ":", "reg_pad2", "+", "1", ",", ":", "]", ".", "flip", "(", "(", "2", ",", "3", ")", ")", ")", ",", "hfe", "]", ",", "-", "2", ")", "\n", "", "else", ":", "\n", "                ", "hfe_conv", "=", "hfe", ".", "clone", "(", ")", "\n", "\n", "# Shift data to batch dimension", "\n", "", "hfe_conv", "=", "hfe_conv", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "hfe_conv", ".", "shape", "[", "-", "3", "]", ",", "hfe_conv", ".", "shape", "[", "-", "2", "]", ")", "\n", "\n", "# Do first convolution", "\n", "hfe_conv", "=", "F", ".", "conv2d", "(", "hfe_conv", ",", "reg_filter", ",", "padding", "=", "(", "reg_pad1", ",", "reg_pad2", ")", ")", "\n", "\n", "# Do second convolution", "\n", "remove_size", "=", "min", "(", "reg_pad2", ",", "hfe", ".", "shape", "[", "-", "2", "]", "-", "1", ")", "\n", "hfe_conv", "=", "F", ".", "conv2d", "(", "hfe_conv", "[", "...", ",", "remove_size", ":", "]", ",", "reg_filter", ")", "\n", "\n", "# Reshape back and add", "\n", "hfe_out", "+=", "hfe_conv", ".", "reshape", "(", "hfe", ".", "shape", "[", "0", "]", ",", "hfe", ".", "shape", "[", "1", "]", ",", "2", ",", "hfe", ".", "shape", "[", "2", "]", ",", "hfe", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "\n", "", "return", "hf_out", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.ip": [[203, 205], ["pytracking.fourier.inner_prod_fs"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.inner_prod_fs"], ["", "def", "ip", "(", "self", ",", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "fourier", ".", "inner_prod_fs", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.M1": [[207, 209], ["pytracking.complex.div"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.div"], ["", "def", "M1", "(", "self", ",", "hf", ")", ":", "\n", "        ", "return", "complex", ".", "div", "(", "hf", ",", "self", ".", "diag_M", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.initialize_features": [[17, 21], ["getattr", "eco.ECO.params.features.initialize"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.initialize"], ["    ", "def", "initialize_features", "(", "self", ")", ":", "\n", "        ", "if", "not", "getattr", "(", "self", ",", "'features_initialized'", ",", "False", ")", ":", "\n", "            ", "self", ".", "params", ".", "features", ".", "initialize", "(", ")", "\n", "", "self", ".", "features_initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.initialize": [[23, 176], ["eco.ECO.initialize_features", "eco.ECO.params.features.set_is_color", "eco.ECO.params.features.get_fparams", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "max", "eco.ECO.params.features.size", "eco.ECO.fparams.attribute", "len", "pytracking.TensorList", "pytracking.TensorList", "pytracking.TensorList", "eco.ECO.fparams.attribute", "pytracking.TensorList", "eco.ECO.fparams.attribute", "pytracking.features.preprocessing.numpy_to_torch", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "eco.ECO.generate_init_samples", "pytracking.TensorList", "pytracking.TensorList.mean", "pytracking.TensorList", "eco.ECO.preprocess_sample", "pytracking.fourier.shift_fs", "pytracking.fourier.shift_fs.size", "pytracking.TensorList", "pytracking.fourier.shift_fs.permute", "pytracking.TensorList", "zip", "pytracking.TensorList", "pytracking.TensorList", "optim.FactorizedConvProblem", "eco.ECO.filter.concat", "pytracking.libs.optimization.GaussNewtonCG", "pytracking.complex.mtimes", "zip", "optim.FilterOptim", "eco.ECO.filter_optimizer.register", "eco.ECO.joint_optimizer.residuals.clone", "eco.ECO.filter_optimizer.run", "eco.ECO.symmetrize_filter", "hasattr", "math.sqrt", "eco.ECO.params.features.stride", "torch.round", "torch.round", "torch.round", "torch.round", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "eco.ECO.reg_filter.view", "eco.ECO.reg_filter.view", "pytracking.TensorList.t", "len", "eco.ECO.joint_optimizer.run", "eco.ECO.filter_optimizer.run", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "math.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "pytracking.dcf.hann2d().to", "pytracking.dcf.get_interp_fourier", "pytracking.dcf.get_reg_filter().to", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "pytracking.dcf.label_function().to", "max", "e.permute().reshape().clone", "[].clone", "enumerate", "xf.new_zeros", "xf.new_zeros", "xf.new_zeros", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "eco.ECO.base_target_sz.prod", "zip", "max", "zip", "pytracking.fourier.shift_fs", "eco.ECO.pos.round", "xf.new_ones", "zip", "zip", "pytracking.dcf.hann2d", "pytracking.dcf.get_reg_filter", "pytracking.dcf.label_function", "e.permute().reshape", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "e.permute", "torch.svd", "torch.svd", "torch.svd", "torch.svd"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.initialize_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.set_is_color", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.get_fparams", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.numpy_to_torch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.generate_init_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.preprocess_sample", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.shift_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mtimes", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.symmetrize_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.stride", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.get_interp_fourier", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.shift_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.get_reg_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.label_function"], ["", "def", "initialize", "(", "self", ",", "image", ",", "info", ":", "dict", ")", "->", "dict", ":", "\n", "        ", "state", "=", "info", "[", "'init_bbox'", "]", "\n", "\n", "# Initialize some stuff", "\n", "self", ".", "frame_num", "=", "1", "\n", "if", "not", "hasattr", "(", "self", ".", "params", ",", "'device'", ")", ":", "\n", "            ", "self", ".", "params", ".", "device", "=", "'cuda'", "if", "self", ".", "params", ".", "use_gpu", "else", "'cpu'", "\n", "\n", "# Initialize features", "\n", "", "self", ".", "initialize_features", "(", ")", "\n", "\n", "# Chack if image is color", "\n", "self", ".", "params", ".", "features", ".", "set_is_color", "(", "image", ".", "shape", "[", "2", "]", "==", "3", ")", "\n", "\n", "# Get feature specific params", "\n", "self", ".", "fparams", "=", "self", ".", "params", ".", "features", ".", "get_fparams", "(", "'feature_params'", ")", "\n", "\n", "# Get position and size", "\n", "self", ".", "pos", "=", "torch", ".", "Tensor", "(", "[", "state", "[", "1", "]", "+", "(", "state", "[", "3", "]", "-", "1", ")", "/", "2", ",", "state", "[", "0", "]", "+", "(", "state", "[", "2", "]", "-", "1", ")", "/", "2", "]", ")", "\n", "self", ".", "target_sz", "=", "torch", ".", "Tensor", "(", "[", "state", "[", "3", "]", ",", "state", "[", "2", "]", "]", ")", "\n", "\n", "# Set search area", "\n", "self", ".", "target_scale", "=", "1.0", "\n", "search_area", "=", "torch", ".", "prod", "(", "self", ".", "target_sz", "*", "self", ".", "params", ".", "search_area_scale", ")", ".", "item", "(", ")", "\n", "if", "search_area", ">", "self", ".", "params", ".", "max_image_sample_size", ":", "\n", "            ", "self", ".", "target_scale", "=", "math", ".", "sqrt", "(", "search_area", "/", "self", ".", "params", ".", "max_image_sample_size", ")", "\n", "", "elif", "search_area", "<", "self", ".", "params", ".", "min_image_sample_size", ":", "\n", "            ", "self", ".", "target_scale", "=", "math", ".", "sqrt", "(", "search_area", "/", "self", ".", "params", ".", "min_image_sample_size", ")", "\n", "\n", "# Target size in base scale", "\n", "", "self", ".", "base_target_sz", "=", "self", ".", "target_sz", "/", "self", ".", "target_scale", "\n", "\n", "# Use odd square search area and set sizes", "\n", "feat_max_stride", "=", "max", "(", "self", ".", "params", ".", "features", ".", "stride", "(", ")", ")", "\n", "self", ".", "img_sample_sz", "=", "torch", ".", "round", "(", "torch", ".", "sqrt", "(", "torch", ".", "prod", "(", "self", ".", "base_target_sz", "*", "self", ".", "params", ".", "search_area_scale", ")", ")", ")", "*", "torch", ".", "ones", "(", "2", ")", "\n", "self", ".", "img_sample_sz", "+=", "feat_max_stride", "-", "self", ".", "img_sample_sz", "%", "(", "2", "*", "feat_max_stride", ")", "\n", "\n", "# Set other sizes (corresponds to ECO code)", "\n", "self", ".", "img_support_sz", "=", "self", ".", "img_sample_sz", "\n", "self", ".", "feature_sz", "=", "self", ".", "params", ".", "features", ".", "size", "(", "self", ".", "img_sample_sz", ")", "\n", "self", ".", "filter_sz", "=", "self", ".", "feature_sz", "+", "(", "self", ".", "feature_sz", "+", "1", ")", "%", "2", "\n", "self", ".", "output_sz", "=", "self", ".", "params", ".", "score_upsample_factor", "*", "self", ".", "img_support_sz", "# Interpolated size of the output", "\n", "self", ".", "compressed_dim", "=", "self", ".", "fparams", ".", "attribute", "(", "'compressed_dim'", ")", "\n", "\n", "# Number of filters", "\n", "self", ".", "num_filters", "=", "len", "(", "self", ".", "filter_sz", ")", "\n", "\n", "# Get window function", "\n", "self", ".", "window", "=", "TensorList", "(", "[", "dcf", ".", "hann2d", "(", "sz", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "for", "sz", "in", "self", ".", "feature_sz", "]", ")", "\n", "\n", "# Get interpolation function", "\n", "self", ".", "interp_fs", "=", "TensorList", "(", "[", "dcf", ".", "get_interp_fourier", "(", "sz", ",", "self", ".", "params", ".", "interpolation_method", ",", "\n", "self", ".", "params", ".", "interpolation_bicubic_a", ",", "self", ".", "params", ".", "interpolation_centering", ",", "\n", "self", ".", "params", ".", "interpolation_windowing", ",", "self", ".", "params", ".", "device", ")", "for", "sz", "in", "self", ".", "filter_sz", "]", ")", "\n", "\n", "# Get regularization filter", "\n", "self", ".", "reg_filter", "=", "TensorList", "(", "[", "dcf", ".", "get_reg_filter", "(", "self", ".", "img_support_sz", ",", "self", ".", "base_target_sz", ",", "fparams", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "\n", "for", "fparams", "in", "self", ".", "fparams", "]", ")", "\n", "self", ".", "reg_energy", "=", "self", ".", "reg_filter", ".", "view", "(", "-", "1", ")", "@", "self", ".", "reg_filter", ".", "view", "(", "-", "1", ")", "\n", "\n", "# Get label function", "\n", "output_sigma_factor", "=", "self", ".", "fparams", ".", "attribute", "(", "'output_sigma_factor'", ")", "\n", "sigma", "=", "(", "self", ".", "filter_sz", "/", "self", ".", "img_support_sz", ")", "*", "torch", ".", "sqrt", "(", "self", ".", "base_target_sz", ".", "prod", "(", ")", ")", "*", "output_sigma_factor", "\n", "self", ".", "yf", "=", "TensorList", "(", "[", "dcf", ".", "label_function", "(", "sz", ",", "sig", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "for", "sz", ",", "sig", "in", "zip", "(", "self", ".", "filter_sz", ",", "sigma", ")", "]", ")", "\n", "\n", "# Optimization options", "\n", "self", ".", "params", ".", "precond_learning_rate", "=", "self", ".", "fparams", ".", "attribute", "(", "'learning_rate'", ")", "\n", "if", "self", ".", "params", ".", "CG_forgetting_rate", "is", "None", "or", "max", "(", "self", ".", "params", ".", "precond_learning_rate", ")", ">=", "1", ":", "\n", "            ", "self", ".", "params", ".", "direction_forget_factor", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "params", ".", "direction_forget_factor", "=", "(", "1", "-", "max", "(", "self", ".", "params", ".", "precond_learning_rate", ")", ")", "**", "self", ".", "params", ".", "CG_forgetting_rate", "\n", "\n", "\n", "# Convert image", "\n", "", "im", "=", "numpy_to_torch", "(", "image", ")", "\n", "\n", "# Setup bounds", "\n", "self", ".", "image_sz", "=", "torch", ".", "Tensor", "(", "[", "im", ".", "shape", "[", "2", "]", ",", "im", ".", "shape", "[", "3", "]", "]", ")", "\n", "self", ".", "min_scale_factor", "=", "torch", ".", "max", "(", "10", "/", "self", ".", "base_target_sz", ")", "\n", "self", ".", "max_scale_factor", "=", "torch", ".", "min", "(", "self", ".", "image_sz", "/", "self", ".", "base_target_sz", ")", "\n", "\n", "# Extract and transform sample", "\n", "x", "=", "self", ".", "generate_init_samples", "(", "im", ")", "\n", "\n", "# Initialize projection matrix", "\n", "x_mat", "=", "TensorList", "(", "[", "e", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "reshape", "(", "e", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ".", "clone", "(", ")", "for", "e", "in", "x", "]", ")", "\n", "x_mat", "-=", "x_mat", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "cov_x", "=", "x_mat", "@", "x_mat", ".", "t", "(", ")", "\n", "self", ".", "projection_matrix", "=", "TensorList", "(", "[", "torch", ".", "svd", "(", "C", ")", "[", "0", "]", "[", ":", ",", ":", "cdim", "]", ".", "clone", "(", ")", "for", "C", ",", "cdim", "in", "zip", "(", "cov_x", ",", "self", ".", "compressed_dim", ")", "]", ")", "\n", "\n", "# Transform to get the training sample", "\n", "train_xf", "=", "self", ".", "preprocess_sample", "(", "x", ")", "\n", "\n", "# Shift the samples back", "\n", "if", "'shift'", "in", "self", ".", "params", ".", "augmentation", ":", "\n", "            ", "for", "xf", "in", "train_xf", ":", "\n", "                ", "if", "xf", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                    ", "continue", "\n", "", "for", "i", ",", "shift", "in", "enumerate", "(", "self", ".", "params", ".", "augmentation", "[", "'shift'", "]", ")", ":", "\n", "                    ", "shift_samp", "=", "2", "*", "math", ".", "pi", "*", "torch", ".", "Tensor", "(", "shift", ")", "/", "self", ".", "img_support_sz", "\n", "xf", "[", "1", "+", "i", ":", "2", "+", "i", ",", "...", "]", "=", "fourier", ".", "shift_fs", "(", "xf", "[", "1", "+", "i", ":", "2", "+", "i", ",", "...", "]", ",", "shift", "=", "shift_samp", ")", "\n", "\n", "# Shift sample", "\n", "", "", "", "shift_samp", "=", "2", "*", "math", ".", "pi", "*", "(", "self", ".", "pos", "-", "self", ".", "pos", ".", "round", "(", ")", ")", "/", "(", "self", ".", "target_scale", "*", "self", ".", "img_support_sz", ")", "\n", "train_xf", "=", "fourier", ".", "shift_fs", "(", "train_xf", ",", "shift", "=", "shift_samp", ")", "\n", "\n", "# Initialize first-frame training samples", "\n", "num_init_samples", "=", "train_xf", ".", "size", "(", "0", ")", "\n", "self", ".", "init_sample_weights", "=", "TensorList", "(", "[", "xf", ".", "new_ones", "(", "1", ")", "/", "xf", ".", "shape", "[", "0", "]", "for", "xf", "in", "train_xf", "]", ")", "\n", "self", ".", "init_training_samples", "=", "train_xf", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ",", "4", ")", "\n", "\n", "\n", "# Sample counters and weights", "\n", "self", ".", "num_stored_samples", "=", "num_init_samples", "\n", "self", ".", "previous_replace_ind", "=", "[", "None", "]", "*", "len", "(", "self", ".", "num_stored_samples", ")", "\n", "self", ".", "sample_weights", "=", "TensorList", "(", "[", "xf", ".", "new_zeros", "(", "self", ".", "params", ".", "sample_memory_size", ")", "for", "xf", "in", "train_xf", "]", ")", "\n", "for", "sw", ",", "init_sw", ",", "num", "in", "zip", "(", "self", ".", "sample_weights", ",", "self", ".", "init_sample_weights", ",", "num_init_samples", ")", ":", "\n", "            ", "sw", "[", ":", "num", "]", "=", "init_sw", "\n", "\n", "# Initialize memory", "\n", "", "self", ".", "training_samples", "=", "TensorList", "(", "\n", "[", "xf", ".", "new_zeros", "(", "xf", ".", "shape", "[", "2", "]", ",", "xf", ".", "shape", "[", "3", "]", ",", "self", ".", "params", ".", "sample_memory_size", ",", "cdim", ",", "2", ")", "for", "xf", ",", "cdim", "in", "zip", "(", "train_xf", ",", "self", ".", "compressed_dim", ")", "]", ")", "\n", "\n", "# Initialize filter", "\n", "self", ".", "filter", "=", "TensorList", "(", "\n", "[", "xf", ".", "new_zeros", "(", "1", ",", "cdim", ",", "xf", ".", "shape", "[", "2", "]", ",", "xf", ".", "shape", "[", "3", "]", ",", "2", ")", "for", "xf", ",", "cdim", "in", "zip", "(", "train_xf", ",", "self", ".", "compressed_dim", ")", "]", ")", "\n", "\n", "# Do joint optimization", "\n", "self", ".", "joint_problem", "=", "FactorizedConvProblem", "(", "self", ".", "init_training_samples", ",", "self", ".", "yf", ",", "self", ".", "reg_filter", ",", "self", ".", "projection_matrix", ",", "self", ".", "params", ",", "self", ".", "init_sample_weights", ")", "\n", "joint_var", "=", "self", ".", "filter", ".", "concat", "(", "self", ".", "projection_matrix", ")", "\n", "self", ".", "joint_optimizer", "=", "GaussNewtonCG", "(", "self", ".", "joint_problem", ",", "joint_var", ",", "debug", "=", "(", "self", ".", "params", ".", "debug", ">=", "1", ")", ",", "visdom", "=", "self", ".", "visdom", ")", "\n", "\n", "if", "self", ".", "params", ".", "update_projection_matrix", ":", "\n", "            ", "self", ".", "joint_optimizer", ".", "run", "(", "self", ".", "params", ".", "init_CG_iter", "//", "self", ".", "params", ".", "init_GN_iter", ",", "self", ".", "params", ".", "init_GN_iter", ")", "\n", "\n", "# Re-project samples with the new projection matrix", "\n", "", "compressed_samples", "=", "complex", ".", "mtimes", "(", "self", ".", "init_training_samples", ",", "self", ".", "projection_matrix", ")", "\n", "for", "train_samp", ",", "init_samp", "in", "zip", "(", "self", ".", "training_samples", ",", "compressed_samples", ")", ":", "\n", "            ", "train_samp", "[", ":", ",", ":", ",", ":", "init_samp", ".", "shape", "[", "2", "]", ",", ":", ",", ":", "]", "=", "init_samp", "\n", "\n", "# Initialize optimizer", "\n", "", "self", ".", "filter_optimizer", "=", "FilterOptim", "(", "self", ".", "params", ",", "self", ".", "reg_energy", ")", "\n", "self", ".", "filter_optimizer", ".", "register", "(", "self", ".", "filter", ",", "self", ".", "training_samples", ",", "self", ".", "yf", ",", "self", ".", "sample_weights", ",", "self", ".", "reg_filter", ")", "\n", "self", ".", "filter_optimizer", ".", "sample_energy", "=", "self", ".", "joint_problem", ".", "sample_energy", "\n", "self", ".", "filter_optimizer", ".", "residuals", "=", "self", ".", "joint_optimizer", ".", "residuals", ".", "clone", "(", ")", "\n", "\n", "if", "not", "self", ".", "params", ".", "update_projection_matrix", ":", "\n", "            ", "self", ".", "filter_optimizer", ".", "run", "(", "self", ".", "params", ".", "init_CG_iter", ")", "\n", "\n", "# Post optimization", "\n", "", "self", ".", "filter_optimizer", ".", "run", "(", "self", ".", "params", ".", "post_init_CG_iter", ")", "\n", "\n", "self", ".", "symmetrize_filter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.track": [[179, 240], ["pytracking.features.preprocessing.numpy_to_torch", "eco.ECO.pos.round", "eco.ECO.extract_fourier_sample", "eco.ECO.apply_filter", "eco.ECO.localize_target", "eco.ECO.update_state", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "pytracking.TensorList", "pytracking.fourier.shift_fs", "eco.ECO.update_memory", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "eco.ECO.visdom.register", "eco.ECO.visdom.register", "eco.ECO.filter_optimizer.run", "eco.ECO.symmetrize_filter", "torch.cat.tolist", "torch.cat.tolist", "torch.max", "torch.max", "torch.max", "torch.max", "pytracking.utils.plotting.show_tensor"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.numpy_to_torch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.extract_fourier_sample", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.localize_target", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_state", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.shift_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_memory", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.symmetrize_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.show_tensor"], ["", "def", "track", "(", "self", ",", "image", ")", "->", "dict", ":", "\n", "        ", "self", ".", "debug_info", "=", "{", "}", "\n", "\n", "self", ".", "frame_num", "+=", "1", "\n", "self", ".", "debug_info", "[", "'frame_num'", "]", "=", "self", ".", "frame_num", "\n", "\n", "# Convert image", "\n", "im", "=", "numpy_to_torch", "(", "image", ")", "\n", "\n", "# ------- LOCALIZATION ------- #", "\n", "\n", "# Get sample", "\n", "sample_pos", "=", "self", ".", "pos", ".", "round", "(", ")", "\n", "sample_scales", "=", "self", ".", "target_scale", "*", "self", ".", "params", ".", "scale_factors", "\n", "test_xf", "=", "self", ".", "extract_fourier_sample", "(", "im", ",", "self", ".", "pos", ",", "sample_scales", ",", "self", ".", "img_sample_sz", ")", "\n", "\n", "# Compute scores", "\n", "sf", "=", "self", ".", "apply_filter", "(", "test_xf", ")", "\n", "translation_vec", ",", "scale_ind", ",", "s", "=", "self", ".", "localize_target", "(", "sf", ")", "\n", "scale_change_factor", "=", "self", ".", "params", ".", "scale_factors", "[", "scale_ind", "]", "\n", "\n", "# Update position and scale", "\n", "self", ".", "update_state", "(", "sample_pos", "+", "translation_vec", ",", "self", ".", "target_scale", "*", "scale_change_factor", ")", "\n", "\n", "score_map", "=", "s", "[", "scale_ind", ",", "...", "]", "\n", "max_score", "=", "torch", ".", "max", "(", "score_map", ")", ".", "item", "(", ")", "\n", "self", ".", "debug_info", "[", "'max_score'", "]", "=", "max_score", "\n", "\n", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "            ", "self", ".", "visdom", ".", "register", "(", "score_map", ",", "'heatmap'", ",", "2", ",", "'Score Map'", ")", "\n", "self", ".", "visdom", ".", "register", "(", "self", ".", "debug_info", ",", "'info_dict'", ",", "1", ",", "'Status'", ")", "\n", "", "elif", "self", ".", "params", ".", "debug", ">=", "2", ":", "\n", "            ", "show_tensor", "(", "score_map", ",", "5", ",", "title", "=", "'Max score = {:.2f}'", ".", "format", "(", "max_score", ")", ")", "\n", "\n", "# if self.params.debug >= 3:", "\n", "#     for i, hf in enumerate(self.filter):", "\n", "#         show_tensor(fourier.sample_fs(hf).abs().mean(1), 6+i)", "\n", "\n", "\n", "# ------- UPDATE ------- #", "\n", "\n", "# Get train sample", "\n", "", "train_xf", "=", "TensorList", "(", "[", "xf", "[", "scale_ind", ":", "scale_ind", "+", "1", ",", "...", "]", "for", "xf", "in", "test_xf", "]", ")", "\n", "\n", "# Shift the sample", "\n", "shift_samp", "=", "2", "*", "math", ".", "pi", "*", "(", "self", ".", "pos", "-", "sample_pos", ")", "/", "(", "sample_scales", "[", "scale_ind", "]", "*", "self", ".", "img_support_sz", ")", "\n", "train_xf", "=", "fourier", ".", "shift_fs", "(", "train_xf", ",", "shift", "=", "shift_samp", ")", "\n", "\n", "# Update memory", "\n", "self", ".", "update_memory", "(", "train_xf", ")", "\n", "\n", "# Train filter", "\n", "if", "self", ".", "frame_num", "%", "self", ".", "params", ".", "train_skipping", "==", "1", ":", "\n", "            ", "self", ".", "filter_optimizer", ".", "run", "(", "self", ".", "params", ".", "CG_iter", ",", "train_xf", ")", "\n", "self", ".", "symmetrize_filter", "(", ")", "\n", "\n", "# Return new state", "\n", "", "new_state", "=", "torch", ".", "cat", "(", "(", "self", ".", "pos", "[", "[", "1", ",", "0", "]", "]", "-", "(", "self", ".", "target_sz", "[", "[", "1", ",", "0", "]", "]", "-", "1", ")", "/", "2", ",", "self", ".", "target_sz", "[", "[", "1", ",", "0", "]", "]", ")", ")", "\n", "\n", "out", "=", "{", "'target_bbox'", ":", "new_state", ".", "tolist", "(", ")", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.apply_filter": [[242, 244], ["pytracking.complex.mult().sum", "pytracking.complex.mult"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult"], ["", "def", "apply_filter", "(", "self", ",", "sample_xf", ":", "TensorList", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "complex", ".", "mult", "(", "self", ".", "filter", ",", "sample_xf", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.localize_target": [[245, 286], ["pytracking.dcf.max2d", "torch.max", "torch.max", "torch.max", "torch.max", "max_disp.float().cpu.float().cpu.float().cpu", "pytracking.fourier.sample_fs", "pytracking.fourier.sum_fs", "eco.ECO.fparams.attribute", "pytracking.fourier.sample_fs", "max_disp.float().cpu.float().cpu.float", "disp[].view", "pytracking.fourier.sum_fs", "eco.ECO.fparams.attribute", "eco.ECO.fparams.attribute", "torch.round", "torch.round", "torch.round", "torch.round", "zip", "ValueError", "pytracking.fourier.shift_fs", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "eco.ECO.output_sz.view", "eco.ECO.params.scale_factors.view", "scores_scales.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.pad", "torch.pad", "pytracking.fourier.sample_fs", "torch.cat.mean", "torch.cat.mean", "math.floor", "math.ceil", "math.floor", "math.ceil", "pd[].item", "pd[].item", "pd[].item", "pd[].item"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.max2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.sample_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.sum_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.sample_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.sum_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.shift_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.sample_fs"], ["", "def", "localize_target", "(", "self", ",", "sf", ":", "TensorList", ")", ":", "\n", "        ", "if", "self", ".", "params", ".", "score_fusion_strategy", "==", "'sum'", ":", "\n", "            ", "scores", "=", "fourier", ".", "sample_fs", "(", "fourier", ".", "sum_fs", "(", "sf", ")", ",", "self", ".", "output_sz", ")", "\n", "", "elif", "self", ".", "params", ".", "score_fusion_strategy", "==", "'weightedsum'", ":", "\n", "            ", "weight", "=", "self", ".", "fparams", ".", "attribute", "(", "'translation_weight'", ")", "\n", "scores", "=", "fourier", ".", "sample_fs", "(", "fourier", ".", "sum_fs", "(", "weight", "*", "sf", ")", ",", "self", ".", "output_sz", ")", "\n", "", "elif", "self", ".", "params", ".", "score_fusion_strategy", "==", "'transcale'", ":", "\n", "            ", "alpha", "=", "self", ".", "fparams", ".", "attribute", "(", "'scale_weight'", ")", "\n", "beta", "=", "self", ".", "fparams", ".", "attribute", "(", "'translation_weight'", ")", "\n", "sample_sz", "=", "torch", ".", "round", "(", "self", ".", "output_sz", ".", "view", "(", "1", ",", "-", "1", ")", "*", "self", ".", "params", ".", "scale_factors", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "scores", "=", "0", "\n", "for", "sfe", ",", "a", ",", "b", "in", "zip", "(", "sf", ",", "alpha", ",", "beta", ")", ":", "\n", "                ", "sfe", "=", "fourier", ".", "shift_fs", "(", "sfe", ",", "math", ".", "pi", "*", "torch", ".", "ones", "(", "2", ")", ")", "\n", "scores_scales", "=", "[", "]", "\n", "for", "sind", ",", "sz", "in", "enumerate", "(", "sample_sz", ")", ":", "\n", "                    ", "pd", "=", "(", "self", ".", "output_sz", "-", "sz", ")", "/", "2", "\n", "scores_scales", ".", "append", "(", "F", ".", "pad", "(", "fourier", ".", "sample_fs", "(", "sfe", "[", "sind", ":", "sind", "+", "1", ",", "...", "]", ",", "sz", ")", ",", "\n", "(", "math", ".", "floor", "(", "pd", "[", "1", "]", ".", "item", "(", ")", ")", ",", "math", ".", "ceil", "(", "pd", "[", "1", "]", ".", "item", "(", ")", ")", ",", "\n", "math", ".", "floor", "(", "pd", "[", "0", "]", ".", "item", "(", ")", ")", ",", "math", ".", "ceil", "(", "pd", "[", "0", "]", ".", "item", "(", ")", ")", ")", ")", ")", "\n", "", "scores_cat", "=", "torch", ".", "cat", "(", "scores_scales", ")", "\n", "scores", "=", "scores", "+", "(", "b", "-", "a", ")", "*", "scores_cat", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "+", "a", "*", "scores_cat", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown score fusion strategy.'", ")", "\n", "\n", "# Get maximum", "\n", "", "max_score", ",", "max_disp", "=", "dcf", ".", "max2d", "(", "scores", ")", "\n", "_", ",", "scale_ind", "=", "torch", ".", "max", "(", "max_score", ",", "dim", "=", "0", ")", "\n", "max_disp", "=", "max_disp", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "# Convert to displacements in the base scale", "\n", "if", "self", ".", "params", ".", "score_fusion_strategy", "in", "[", "'sum'", ",", "'weightedsum'", "]", ":", "\n", "            ", "disp", "=", "(", "max_disp", "+", "self", ".", "output_sz", "/", "2", ")", "%", "self", ".", "output_sz", "-", "self", ".", "output_sz", "/", "2", "\n", "", "elif", "self", ".", "params", ".", "score_fusion_strategy", "==", "'transcale'", ":", "\n", "            ", "disp", "=", "max_disp", "-", "self", ".", "output_sz", "/", "2", "\n", "\n", "# Compute translation vector and scale change factor", "\n", "", "translation_vec", "=", "disp", "[", "scale_ind", ",", "...", "]", ".", "view", "(", "-", "1", ")", "*", "(", "self", ".", "img_support_sz", "/", "self", ".", "output_sz", ")", "*", "self", ".", "target_scale", "\n", "if", "self", ".", "params", ".", "score_fusion_strategy", "in", "[", "'sum'", ",", "'weightedsum'", "]", ":", "\n", "            ", "translation_vec", "*=", "self", ".", "params", ".", "scale_factors", "[", "scale_ind", "]", "\n", "\n", "", "return", "translation_vec", ",", "scale_ind", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.extract_sample": [[288, 290], ["eco.ECO.params.features.extract"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.extract"], ["", "def", "extract_sample", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ",", "pos", ":", "torch", ".", "Tensor", ",", "scales", ",", "sz", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "params", ".", "features", ".", "extract", "(", "im", ",", "pos", ",", "scales", ",", "sz", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.extract_fourier_sample": [[291, 294], ["eco.ECO.extract_sample", "eco.ECO.preprocess_sample", "eco.ECO.project_sample"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.extract_sample", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.preprocess_sample", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.project_sample"], ["", "def", "extract_fourier_sample", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ",", "pos", ":", "torch", ".", "Tensor", ",", "scales", ",", "sz", ":", "torch", ".", "Tensor", ")", "->", "TensorList", ":", "\n", "        ", "x", "=", "self", ".", "extract_sample", "(", "im", ",", "pos", ",", "scales", ",", "sz", ")", "\n", "return", "self", ".", "preprocess_sample", "(", "self", ".", "project_sample", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.preprocess_sample": [[295, 299], ["pytracking.fourier.cfft2", "pytracking.TensorList", "pytracking.dcf.interpolate_dft", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.cfft2", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.interpolate_dft"], ["", "def", "preprocess_sample", "(", "self", ",", "x", ":", "TensorList", ")", "->", "TensorList", ":", "\n", "        ", "x", "*=", "self", ".", "window", "\n", "sample_xf", "=", "fourier", ".", "cfft2", "(", "x", ")", "\n", "return", "TensorList", "(", "[", "dcf", ".", "interpolate_dft", "(", "xf", ",", "bf", ")", "for", "xf", ",", "bf", "in", "zip", "(", "sample_xf", ",", "self", ".", "interp_fs", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.project_sample": [[300, 308], ["eco.ECO.project_sample._project_sample"], "methods", ["None"], ["", "def", "project_sample", "(", "self", ",", "x", ":", "TensorList", ")", ":", "\n", "        ", "@", "tensor_operation", "\n", "def", "_project_sample", "(", "x", ":", "torch", ".", "Tensor", ",", "P", ":", "torch", ".", "Tensor", ")", ":", "\n", "            ", "if", "P", "is", "None", ":", "\n", "                ", "return", "x", "\n", "", "return", "torch", ".", "matmul", "(", "x", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", ",", "P", ")", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "\n", "", "return", "_project_sample", "(", "x", ",", "self", ".", "projection_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.generate_init_samples": [[309, 335], ["eco.ECO.params.features.extract_transformed", "enumerate", "pytracking.features.augmentation.Identity", "transforms.extend", "transforms.append", "transforms.extend", "transforms.extend", "eco.ECO.fparams.attribute", "enumerate", "pytracking.features.augmentation.FlipHorizontal", "eco.ECO.fparams.attribute", "pytracking.features.augmentation.Translation", "pytracking.features.augmentation.Rotate", "pytracking.features.augmentation.Blur", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout2d", "torch.dropout2d", "[].expand"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.extract_transformed", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute"], ["", "def", "generate_init_samples", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", "->", "TensorList", ":", "\n", "# Do data augmentation", "\n", "        ", "transforms", "=", "[", "augmentation", ".", "Identity", "(", ")", "]", "\n", "if", "'shift'", "in", "self", ".", "params", ".", "augmentation", ":", "\n", "            ", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Translation", "(", "shift", ")", "for", "shift", "in", "self", ".", "params", ".", "augmentation", "[", "'shift'", "]", "]", ")", "\n", "", "if", "'fliplr'", "in", "self", ".", "params", ".", "augmentation", "and", "self", ".", "params", ".", "augmentation", "[", "'fliplr'", "]", ":", "\n", "            ", "transforms", ".", "append", "(", "augmentation", ".", "FlipHorizontal", "(", ")", ")", "\n", "", "if", "'rotate'", "in", "self", ".", "params", ".", "augmentation", ":", "\n", "            ", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Rotate", "(", "angle", ")", "for", "angle", "in", "self", ".", "params", ".", "augmentation", "[", "'rotate'", "]", "]", ")", "\n", "", "if", "'blur'", "in", "self", ".", "params", ".", "augmentation", ":", "\n", "            ", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Blur", "(", "sigma", ")", "for", "sigma", "in", "self", ".", "params", ".", "augmentation", "[", "'blur'", "]", "]", ")", "\n", "\n", "", "init_samples", "=", "self", ".", "params", ".", "features", ".", "extract_transformed", "(", "im", ",", "self", ".", "pos", ",", "self", ".", "target_scale", ",", "self", ".", "img_sample_sz", ",", "transforms", ")", "\n", "\n", "# Remove augmented samples for those that shall not have", "\n", "for", "i", ",", "use_aug", "in", "enumerate", "(", "self", ".", "fparams", ".", "attribute", "(", "'use_augmentation'", ")", ")", ":", "\n", "            ", "if", "not", "use_aug", ":", "\n", "                ", "init_samples", "[", "i", "]", "=", "init_samples", "[", "i", "]", "[", "0", ":", "1", ",", "...", "]", "\n", "\n", "", "", "if", "'dropout'", "in", "self", ".", "params", ".", "augmentation", ":", "\n", "            ", "num", ",", "prob", "=", "self", ".", "params", ".", "augmentation", "[", "'dropout'", "]", "\n", "for", "i", ",", "use_aug", "in", "enumerate", "(", "self", ".", "fparams", ".", "attribute", "(", "'use_augmentation'", ")", ")", ":", "\n", "                ", "if", "use_aug", ":", "\n", "                    ", "init_samples", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "init_samples", "[", "i", "]", ",", "F", ".", "dropout2d", "(", "init_samples", "[", "i", "]", "[", "0", ":", "1", ",", "...", "]", ".", "expand", "(", "num", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "p", "=", "prob", ",", "training", "=", "True", ")", "]", ")", "\n", "\n", "", "", "", "return", "init_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.update_memory": [[337, 342], ["eco.ECO.update_sample_weights", "zip", "xf.permute"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_sample_weights"], ["", "def", "update_memory", "(", "self", ",", "sample_xf", ":", "TensorList", ")", ":", "\n", "# Update weights and get index to replace", "\n", "        ", "replace_ind", "=", "self", ".", "update_sample_weights", "(", ")", "\n", "for", "train_samp", ",", "xf", ",", "ind", "in", "zip", "(", "self", ".", "training_samples", ",", "sample_xf", ",", "replace_ind", ")", ":", "\n", "            ", "train_samp", "[", ":", ",", ":", ",", "ind", ":", "ind", "+", "1", ",", ":", ",", ":", "]", "=", "xf", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.update_sample_weights": [[344, 369], ["zip", "replace_ind.copy", "sw.sum", "replace_ind.append", "torch.min", "torch.min", "torch.min", "torch.min", "r_ind.item.item.item"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy"], ["", "", "def", "update_sample_weights", "(", "self", ")", ":", "\n", "        ", "replace_ind", "=", "[", "]", "\n", "for", "sw", ",", "prev_ind", ",", "num_samp", ",", "fparams", "in", "zip", "(", "self", ".", "sample_weights", ",", "self", ".", "previous_replace_ind", ",", "self", ".", "num_stored_samples", ",", "self", ".", "fparams", ")", ":", "\n", "            ", "if", "num_samp", "==", "0", "or", "fparams", ".", "learning_rate", "==", "1", ":", "\n", "                ", "sw", "[", ":", "]", "=", "0", "\n", "sw", "[", "0", "]", "=", "1", "\n", "r_ind", "=", "0", "\n", "", "else", ":", "\n", "# Get index to replace", "\n", "                ", "_", ",", "r_ind", "=", "torch", ".", "min", "(", "sw", ",", "0", ")", "\n", "r_ind", "=", "r_ind", ".", "item", "(", ")", "\n", "\n", "# Update weights", "\n", "if", "prev_ind", "is", "None", ":", "\n", "                    ", "sw", "/=", "1", "-", "fparams", ".", "learning_rate", "\n", "sw", "[", "r_ind", "]", "=", "fparams", ".", "learning_rate", "\n", "", "else", ":", "\n", "                    ", "sw", "[", "r_ind", "]", "=", "sw", "[", "prev_ind", "]", "/", "(", "1", "-", "fparams", ".", "learning_rate", ")", "\n", "\n", "", "", "sw", "/=", "sw", ".", "sum", "(", ")", "\n", "replace_ind", ".", "append", "(", "r_ind", ")", "\n", "\n", "", "self", ".", "previous_replace_ind", "=", "replace_ind", ".", "copy", "(", ")", "\n", "self", ".", "num_stored_samples", "+=", "1", "\n", "return", "replace_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.update_state": [[370, 379], ["new_scale.clamp", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "def", "update_state", "(", "self", ",", "new_pos", ",", "new_scale", ")", ":", "\n", "# Update scale", "\n", "        ", "self", ".", "target_scale", "=", "new_scale", ".", "clamp", "(", "self", ".", "min_scale_factor", ",", "self", ".", "max_scale_factor", ")", "\n", "self", ".", "target_sz", "=", "self", ".", "base_target_sz", "*", "self", ".", "target_scale", "\n", "\n", "# Update pos", "\n", "inside_ratio", "=", "0.2", "\n", "inside_offset", "=", "(", "inside_ratio", "-", "0.5", ")", "*", "self", ".", "target_sz", "\n", "self", ".", "pos", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "new_pos", ",", "self", ".", "image_sz", "-", "inside_offset", ")", ",", "inside_offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.eco.ECO.symmetrize_filter": [[380, 384], ["pytracking.complex.conj", "hf[].flip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.conj"], ["", "def", "symmetrize_filter", "(", "self", ")", ":", "\n", "        ", "for", "hf", "in", "self", ".", "filter", ":", "\n", "            ", "hf", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "/=", "2", "\n", "hf", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "+=", "complex", ".", "conj", "(", "hf", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ".", "flip", "(", "(", "2", ",", ")", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp50_vot.parameters": [[4, 72], ["pytracking.utils.TrackerParams", "pytracking.features.net_wrappers.NetWithBackbone"], "function", ["None"], ["def", "parameters", "(", ")", ":", "\n", "    ", "params", "=", "TrackerParams", "(", ")", "\n", "\n", "params", ".", "debug", "=", "0", "\n", "params", ".", "visualization", "=", "False", "\n", "\n", "params", ".", "use_gpu", "=", "True", "\n", "\n", "params", ".", "image_sample_size", "=", "14", "*", "16", "\n", "params", ".", "search_area_scale", "=", "4", "\n", "\n", "# Learning parameters", "\n", "params", ".", "sample_memory_size", "=", "250", "\n", "params", ".", "learning_rate", "=", "0.0075", "\n", "params", ".", "init_samples_minimum_weight", "=", "0.0", "\n", "params", ".", "train_skipping", "=", "10", "\n", "\n", "# Net optimization params", "\n", "params", ".", "update_classifier", "=", "True", "\n", "params", ".", "net_opt_iter", "=", "25", "\n", "params", ".", "net_opt_update_iter", "=", "5", "\n", "params", ".", "net_opt_hn_iter", "=", "3", "\n", "\n", "# Detection parameters", "\n", "params", ".", "window_output", "=", "True", "\n", "\n", "# Init augmentation parameters", "\n", "params", ".", "use_augmentation", "=", "True", "\n", "params", ".", "augmentation", "=", "{", "'fliplr'", ":", "True", ",", "\n", "'rotate'", ":", "[", "5", ",", "-", "5", ",", "10", ",", "-", "10", ",", "20", ",", "-", "20", ",", "30", ",", "-", "30", ",", "45", ",", "-", "45", ",", "-", "60", ",", "60", "]", ",", "\n", "'blur'", ":", "[", "(", "2", ",", "0.2", ")", ",", "(", "0.2", ",", "2", ")", ",", "(", "3", ",", "1", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "2", ")", "]", ",", "\n", "'relativeshift'", ":", "[", "(", "0.6", ",", "0.6", ")", ",", "(", "-", "0.6", ",", "0.6", ")", ",", "(", "0.6", ",", "-", "0.6", ")", ",", "(", "-", "0.6", ",", "-", "0.6", ")", "]", ",", "\n", "'dropout'", ":", "(", "7", ",", "0.2", ")", "}", "\n", "\n", "params", ".", "augmentation_expansion_factor", "=", "2", "\n", "params", ".", "random_shift_factor", "=", "1", "/", "3", "\n", "\n", "# Advanced localization parameters", "\n", "params", ".", "advanced_localization", "=", "True", "\n", "params", ".", "target_not_found_threshold", "=", "0.0", "\n", "params", ".", "distractor_threshold", "=", "100", "\n", "params", ".", "hard_negative_threshold", "=", "0.45", "\n", "params", ".", "target_neighborhood_scale", "=", "2.2", "\n", "params", ".", "dispalcement_scale", "=", "0.7", "\n", "\n", "params", ".", "perform_hn_without_windowing", "=", "True", "\n", "\n", "params", ".", "hard_negative_learning_rate", "=", "0.02", "\n", "params", ".", "update_scale_when_uncertain", "=", "True", "\n", "\n", "# IoUnet parameters", "\n", "params", ".", "iounet_augmentation", "=", "False", "\n", "params", ".", "iounet_use_log_scale", "=", "True", "\n", "params", ".", "iounet_k", "=", "1", "\n", "params", ".", "num_init_random_boxes", "=", "0", "\n", "params", ".", "box_jitter_pos", "=", "0.1", "\n", "params", ".", "box_jitter_sz", "=", "0.5", "\n", "params", ".", "maximal_aspect_ratio", "=", "6", "\n", "params", ".", "box_refinement_iter", "=", "5", "\n", "params", ".", "box_refinement_step_length", "=", "1", "\n", "params", ".", "box_refinement_step_decay", "=", "1", "\n", "\n", "params", ".", "net", "=", "NetWithBackbone", "(", "net_path", "=", "'dimp50.pth'", ",", "\n", "use_gpu", "=", "params", ".", "use_gpu", ")", "\n", "\n", "params", ".", "vot_anno_conversion_type", "=", "'preserve_area'", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp50_vot19.parameters": [[4, 72], ["pytracking.utils.TrackerParams", "pytracking.features.net_wrappers.NetWithBackbone"], "function", ["None"], ["def", "parameters", "(", ")", ":", "\n", "    ", "params", "=", "TrackerParams", "(", ")", "\n", "\n", "params", ".", "debug", "=", "0", "\n", "params", ".", "visualization", "=", "False", "\n", "\n", "params", ".", "use_gpu", "=", "True", "\n", "\n", "params", ".", "image_sample_size", "=", "16", "*", "16", "\n", "params", ".", "search_area_scale", "=", "4.5", "\n", "\n", "# Learning parameters", "\n", "params", ".", "sample_memory_size", "=", "100", "\n", "params", ".", "learning_rate", "=", "0.0075", "\n", "params", ".", "init_samples_minimum_weight", "=", "0.0", "\n", "params", ".", "train_skipping", "=", "10", "\n", "\n", "# Net optimization params", "\n", "params", ".", "update_classifier", "=", "True", "\n", "params", ".", "net_opt_iter", "=", "25", "\n", "params", ".", "net_opt_update_iter", "=", "5", "\n", "params", ".", "net_opt_hn_iter", "=", "3", "\n", "\n", "# Detection parameters", "\n", "params", ".", "window_output", "=", "True", "\n", "\n", "# Init augmentation parameters", "\n", "params", ".", "use_augmentation", "=", "True", "\n", "params", ".", "augmentation", "=", "{", "'fliplr'", ":", "True", ",", "\n", "'rotate'", ":", "[", "-", "5", ",", "10", ",", "-", "30", ",", "60", "]", ",", "\n", "'blur'", ":", "[", "(", "2", ",", "0.2", ")", ",", "(", "1", ",", "3", ")", "]", ",", "\n", "'relativeshift'", ":", "[", "(", "0.6", ",", "0.6", ")", ",", "(", "-", "0.6", ",", "-", "0.6", ")", "]", ",", "\n", "'dropout'", ":", "(", "3", ",", "0.2", ")", "}", "\n", "\n", "params", ".", "augmentation_expansion_factor", "=", "1.4", "\n", "params", ".", "random_shift_factor", "=", "1", "/", "3", "\n", "\n", "# Advanced localization parameters", "\n", "params", ".", "advanced_localization", "=", "True", "\n", "params", ".", "target_not_found_threshold", "=", "0.0", "\n", "params", ".", "distractor_threshold", "=", "100", "\n", "params", ".", "hard_negative_threshold", "=", "0.45", "\n", "params", ".", "target_neighborhood_scale", "=", "2.2", "\n", "params", ".", "dispalcement_scale", "=", "0.7", "\n", "\n", "params", ".", "perform_hn_without_windowing", "=", "True", "\n", "\n", "params", ".", "hard_negative_learning_rate", "=", "0.02", "\n", "params", ".", "update_scale_when_uncertain", "=", "True", "\n", "\n", "# IoUnet parameters", "\n", "params", ".", "iounet_augmentation", "=", "False", "\n", "params", ".", "iounet_use_log_scale", "=", "True", "\n", "params", ".", "iounet_k", "=", "1", "\n", "params", ".", "num_init_random_boxes", "=", "0", "\n", "params", ".", "box_jitter_pos", "=", "0.1", "\n", "params", ".", "box_jitter_sz", "=", "0.5", "\n", "params", ".", "maximal_aspect_ratio", "=", "6", "\n", "params", ".", "box_refinement_iter", "=", "3", "\n", "params", ".", "box_refinement_step_length", "=", "1", "\n", "params", ".", "box_refinement_step_decay", "=", "1", "\n", "\n", "params", ".", "net", "=", "NetWithBackbone", "(", "net_path", "=", "'dimp50.pth'", ",", "\n", "use_gpu", "=", "params", ".", "use_gpu", ")", "\n", "\n", "params", ".", "vot_anno_conversion_type", "=", "'preserve_area'", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp50_oxuva.parameters": [[4, 71], ["pytracking.utils.TrackerParams", "pytracking.features.net_wrappers.NetWithBackbone"], "function", ["None"], ["def", "parameters", "(", ")", ":", "\n", "    ", "params", "=", "TrackerParams", "(", ")", "\n", "\n", "params", ".", "debug", "=", "0", "\n", "params", ".", "visualization", "=", "False", "\n", "\n", "params", ".", "use_gpu", "=", "True", "\n", "\n", "params", ".", "image_sample_size", "=", "18", "*", "16", "\n", "params", ".", "search_area_scale", "=", "5", "\n", "\n", "# Learning parameters", "\n", "params", ".", "sample_memory_size", "=", "50", "\n", "params", ".", "learning_rate", "=", "0.01", "\n", "params", ".", "init_samples_minimum_weight", "=", "0.25", "\n", "params", ".", "train_skipping", "=", "20", "\n", "\n", "# Net optimization params", "\n", "params", ".", "update_classifier", "=", "True", "\n", "params", ".", "net_opt_iter", "=", "10", "\n", "params", ".", "net_opt_update_iter", "=", "5", "\n", "params", ".", "net_opt_hn_iter", "=", "1", "\n", "\n", "# Detection parameters", "\n", "params", ".", "window_output", "=", "False", "\n", "\n", "# Init augmentation parameters", "\n", "params", ".", "use_augmentation", "=", "True", "\n", "params", ".", "augmentation", "=", "{", "'fliplr'", ":", "True", ",", "\n", "'rotate'", ":", "[", "10", ",", "-", "10", ",", "45", ",", "-", "45", "]", ",", "\n", "'blur'", ":", "[", "(", "3", ",", "1", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "2", ")", "]", ",", "\n", "'relativeshift'", ":", "[", "(", "0.6", ",", "0.6", ")", ",", "(", "-", "0.6", ",", "0.6", ")", ",", "(", "0.6", ",", "-", "0.6", ")", ",", "(", "-", "0.6", ",", "-", "0.6", ")", "]", ",", "\n", "'dropout'", ":", "(", "2", ",", "0.2", ")", "}", "\n", "\n", "params", ".", "augmentation_expansion_factor", "=", "2", "\n", "params", ".", "random_shift_factor", "=", "1", "/", "3", "\n", "\n", "# Advanced localization parameters", "\n", "params", ".", "advanced_localization", "=", "True", "\n", "params", ".", "target_not_found_threshold", "=", "0.25", "\n", "params", ".", "distractor_threshold", "=", "0.8", "\n", "params", ".", "hard_negative_threshold", "=", "0.5", "\n", "params", ".", "target_neighborhood_scale", "=", "2.2", "\n", "params", ".", "dispalcement_scale", "=", "0.8", "\n", "params", ".", "hard_negative_learning_rate", "=", "0.02", "\n", "params", ".", "update_scale_when_uncertain", "=", "True", "\n", "\n", "# IoUnet parameters", "\n", "params", ".", "iounet_augmentation", "=", "False", "\n", "params", ".", "iounet_use_log_scale", "=", "True", "\n", "params", ".", "iounet_k", "=", "1", "\n", "params", ".", "num_init_random_boxes", "=", "0", "\n", "params", ".", "box_jitter_pos", "=", "0.1", "\n", "params", ".", "box_jitter_sz", "=", "0.5", "\n", "params", ".", "maximal_aspect_ratio", "=", "6", "\n", "params", ".", "box_refinement_iter", "=", "5", "\n", "params", ".", "box_refinement_step_length", "=", "1", "\n", "params", ".", "box_refinement_step_decay", "=", "1", "\n", "\n", "params", ".", "net", "=", "NetWithBackbone", "(", "net_path", "=", "'dimp50.pth'", ",", "\n", "use_gpu", "=", "params", ".", "use_gpu", ")", "\n", "\n", "params", ".", "vot_anno_conversion_type", "=", "'preserve_area'", "\n", "\n", "params", ".", "output_keys", "=", "[", "'present'", ",", "'score'", ",", "'xmin'", ",", "'xmax'", ",", "'ymin'", ",", "'ymax'", "]", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp50.parameters": [[4, 69], ["pytracking.utils.TrackerParams", "pytracking.features.net_wrappers.NetWithBackbone"], "function", ["None"], ["def", "parameters", "(", ")", ":", "\n", "    ", "params", "=", "TrackerParams", "(", ")", "\n", "\n", "params", ".", "debug", "=", "0", "\n", "params", ".", "visualization", "=", "False", "\n", "\n", "params", ".", "use_gpu", "=", "True", "\n", "\n", "params", ".", "image_sample_size", "=", "18", "*", "16", "\n", "params", ".", "search_area_scale", "=", "5", "\n", "\n", "# Learning parameters", "\n", "params", ".", "sample_memory_size", "=", "50", "\n", "params", ".", "learning_rate", "=", "0.01", "\n", "params", ".", "init_samples_minimum_weight", "=", "0.25", "\n", "params", ".", "train_skipping", "=", "20", "\n", "\n", "# Net optimization params", "\n", "params", ".", "update_classifier", "=", "True", "\n", "params", ".", "net_opt_iter", "=", "10", "\n", "params", ".", "net_opt_update_iter", "=", "5", "\n", "params", ".", "net_opt_hn_iter", "=", "1", "\n", "\n", "# Detection parameters", "\n", "params", ".", "window_output", "=", "False", "\n", "\n", "# Init augmentation parameters", "\n", "params", ".", "use_augmentation", "=", "True", "\n", "params", ".", "augmentation", "=", "{", "'fliplr'", ":", "True", ",", "\n", "'rotate'", ":", "[", "10", ",", "-", "10", ",", "45", ",", "-", "45", "]", ",", "\n", "'blur'", ":", "[", "(", "3", ",", "1", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "2", ")", "]", ",", "\n", "'relativeshift'", ":", "[", "(", "0.6", ",", "0.6", ")", ",", "(", "-", "0.6", ",", "0.6", ")", ",", "(", "0.6", ",", "-", "0.6", ")", ",", "(", "-", "0.6", ",", "-", "0.6", ")", "]", ",", "\n", "'dropout'", ":", "(", "2", ",", "0.2", ")", "}", "\n", "\n", "params", ".", "augmentation_expansion_factor", "=", "2", "\n", "params", ".", "random_shift_factor", "=", "1", "/", "3", "\n", "\n", "# Advanced localization parameters", "\n", "params", ".", "advanced_localization", "=", "True", "\n", "params", ".", "target_not_found_threshold", "=", "0.25", "\n", "params", ".", "distractor_threshold", "=", "0.8", "\n", "params", ".", "hard_negative_threshold", "=", "0.5", "\n", "params", ".", "target_neighborhood_scale", "=", "2.2", "\n", "params", ".", "dispalcement_scale", "=", "0.8", "\n", "params", ".", "hard_negative_learning_rate", "=", "0.02", "\n", "params", ".", "update_scale_when_uncertain", "=", "True", "\n", "\n", "# IoUnet parameters", "\n", "params", ".", "iounet_augmentation", "=", "False", "\n", "params", ".", "iounet_use_log_scale", "=", "True", "\n", "params", ".", "iounet_k", "=", "1", "\n", "params", ".", "num_init_random_boxes", "=", "0", "\n", "params", ".", "box_jitter_pos", "=", "0.1", "\n", "params", ".", "box_jitter_sz", "=", "0.5", "\n", "params", ".", "maximal_aspect_ratio", "=", "6", "\n", "params", ".", "box_refinement_iter", "=", "5", "\n", "params", ".", "box_refinement_step_length", "=", "1", "\n", "params", ".", "box_refinement_step_decay", "=", "1", "\n", "\n", "params", ".", "net", "=", "NetWithBackbone", "(", "net_path", "=", "'dimp50.pth'", ",", "\n", "use_gpu", "=", "params", ".", "use_gpu", ")", "\n", "\n", "params", ".", "vot_anno_conversion_type", "=", "'preserve_area'", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp18_vot.parameters": [[4, 73], ["pytracking.utils.TrackerParams", "pytracking.features.net_wrappers.NetWithBackbone"], "function", ["None"], ["def", "parameters", "(", ")", ":", "\n", "    ", "params", "=", "TrackerParams", "(", ")", "\n", "\n", "params", ".", "debug", "=", "0", "\n", "params", ".", "visualization", "=", "False", "\n", "\n", "params", ".", "use_gpu", "=", "True", "\n", "\n", "params", ".", "image_sample_size", "=", "14", "*", "16", "\n", "params", ".", "search_area_scale", "=", "4", "\n", "params", ".", "feature_size_odd", "=", "False", "\n", "\n", "# Learning parameters", "\n", "params", ".", "sample_memory_size", "=", "250", "\n", "params", ".", "learning_rate", "=", "0.0075", "\n", "params", ".", "init_samples_minimum_weight", "=", "0.0", "\n", "params", ".", "train_skipping", "=", "10", "\n", "\n", "# Net optimization params", "\n", "params", ".", "update_classifier", "=", "True", "\n", "params", ".", "net_opt_iter", "=", "25", "\n", "params", ".", "net_opt_update_iter", "=", "3", "\n", "params", ".", "net_opt_hn_iter", "=", "3", "\n", "\n", "# Detection parameters", "\n", "params", ".", "window_output", "=", "True", "\n", "\n", "# Init augmentation parameters", "\n", "params", ".", "use_augmentation", "=", "True", "\n", "params", ".", "augmentation", "=", "{", "'fliplr'", ":", "True", ",", "\n", "'rotate'", ":", "[", "5", ",", "-", "5", ",", "10", ",", "-", "10", ",", "20", ",", "-", "20", ",", "30", ",", "-", "30", ",", "45", ",", "-", "45", ",", "-", "60", ",", "60", "]", ",", "\n", "'blur'", ":", "[", "(", "2", ",", "0.2", ")", ",", "(", "0.2", ",", "2", ")", ",", "(", "3", ",", "1", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "2", ")", "]", ",", "\n", "'relativeshift'", ":", "[", "(", "0.6", ",", "0.6", ")", ",", "(", "-", "0.6", ",", "0.6", ")", ",", "(", "0.6", ",", "-", "0.6", ")", ",", "(", "-", "0.6", ",", "-", "0.6", ")", "]", ",", "\n", "'dropout'", ":", "(", "7", ",", "0.2", ")", "}", "\n", "\n", "params", ".", "augmentation_expansion_factor", "=", "2", "\n", "params", ".", "random_shift_factor", "=", "1", "/", "3", "\n", "\n", "# Advanced localization parameters", "\n", "params", ".", "advanced_localization", "=", "True", "\n", "params", ".", "target_not_found_threshold", "=", "0.0", "\n", "params", ".", "distractor_threshold", "=", "100", "\n", "params", ".", "hard_negative_threshold", "=", "0.45", "\n", "params", ".", "target_neighborhood_scale", "=", "2.2", "\n", "params", ".", "dispalcement_scale", "=", "0.7", "\n", "\n", "params", ".", "perform_hn_without_windowing", "=", "True", "\n", "\n", "params", ".", "hard_negative_learning_rate", "=", "0.02", "\n", "params", ".", "update_scale_when_uncertain", "=", "True", "\n", "\n", "# IoUnet parameters", "\n", "params", ".", "iounet_augmentation", "=", "False", "\n", "params", ".", "iounet_use_log_scale", "=", "True", "\n", "params", ".", "iounet_k", "=", "3", "\n", "params", ".", "num_init_random_boxes", "=", "9", "\n", "params", ".", "box_jitter_pos", "=", "0.1", "\n", "params", ".", "box_jitter_sz", "=", "0.5", "\n", "params", ".", "maximal_aspect_ratio", "=", "6", "\n", "params", ".", "box_refinement_iter", "=", "5", "\n", "params", ".", "box_refinement_step_length", "=", "1", "\n", "params", ".", "box_refinement_step_decay", "=", "1", "\n", "\n", "params", ".", "net", "=", "NetWithBackbone", "(", "net_path", "=", "'dimp18.pth'", ",", "\n", "use_gpu", "=", "params", ".", "use_gpu", ")", "\n", "\n", "params", ".", "vot_anno_conversion_type", "=", "'preserve_area'", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp18.parameters": [[4, 69], ["pytracking.utils.TrackerParams", "pytracking.features.net_wrappers.NetWithBackbone"], "function", ["None"], ["def", "parameters", "(", ")", ":", "\n", "    ", "params", "=", "TrackerParams", "(", ")", "\n", "\n", "params", ".", "debug", "=", "0", "\n", "params", ".", "visualization", "=", "False", "\n", "\n", "params", ".", "use_gpu", "=", "True", "\n", "\n", "params", ".", "image_sample_size", "=", "18", "*", "16", "\n", "params", ".", "search_area_scale", "=", "5", "\n", "\n", "# Learning parameters", "\n", "params", ".", "sample_memory_size", "=", "50", "\n", "params", ".", "learning_rate", "=", "0.01", "\n", "params", ".", "init_samples_minimum_weight", "=", "0.25", "\n", "params", ".", "train_skipping", "=", "20", "\n", "\n", "# Net optimization params", "\n", "params", ".", "update_classifier", "=", "True", "\n", "params", ".", "net_opt_iter", "=", "10", "\n", "params", ".", "net_opt_update_iter", "=", "2", "\n", "params", ".", "net_opt_hn_iter", "=", "1", "\n", "\n", "# Detection parameters", "\n", "params", ".", "window_output", "=", "False", "\n", "\n", "# Init augmentation parameters", "\n", "params", ".", "use_augmentation", "=", "True", "\n", "params", ".", "augmentation", "=", "{", "'fliplr'", ":", "True", ",", "\n", "'rotate'", ":", "[", "10", ",", "-", "10", ",", "45", ",", "-", "45", "]", ",", "\n", "'blur'", ":", "[", "(", "3", ",", "1", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "2", ")", "]", ",", "\n", "'relativeshift'", ":", "[", "(", "0.6", ",", "0.6", ")", ",", "(", "-", "0.6", ",", "0.6", ")", ",", "(", "0.6", ",", "-", "0.6", ")", ",", "(", "-", "0.6", ",", "-", "0.6", ")", "]", ",", "\n", "'dropout'", ":", "(", "2", ",", "0.2", ")", "}", "\n", "\n", "params", ".", "augmentation_expansion_factor", "=", "2", "\n", "params", ".", "random_shift_factor", "=", "1", "/", "3", "\n", "\n", "# Advanced localization parameters", "\n", "params", ".", "advanced_localization", "=", "True", "\n", "params", ".", "target_not_found_threshold", "=", "0.25", "\n", "params", ".", "distractor_threshold", "=", "0.8", "\n", "params", ".", "hard_negative_threshold", "=", "0.5", "\n", "params", ".", "target_neighborhood_scale", "=", "2.2", "\n", "params", ".", "dispalcement_scale", "=", "0.8", "\n", "params", ".", "hard_negative_learning_rate", "=", "0.02", "\n", "params", ".", "update_scale_when_uncertain", "=", "True", "\n", "\n", "# IoUnet parameters", "\n", "params", ".", "iounet_augmentation", "=", "False", "\n", "params", ".", "iounet_use_log_scale", "=", "True", "\n", "params", ".", "iounet_k", "=", "3", "\n", "params", ".", "num_init_random_boxes", "=", "9", "\n", "params", ".", "box_jitter_pos", "=", "0.1", "\n", "params", ".", "box_jitter_sz", "=", "0.5", "\n", "params", ".", "maximal_aspect_ratio", "=", "6", "\n", "params", ".", "box_refinement_iter", "=", "5", "\n", "params", ".", "box_refinement_step_length", "=", "1", "\n", "params", ".", "box_refinement_step_decay", "=", "1", "\n", "\n", "params", ".", "net", "=", "NetWithBackbone", "(", "net_path", "=", "'dimp18.pth'", ",", "\n", "use_gpu", "=", "params", ".", "use_gpu", ")", "\n", "\n", "params", ".", "vot_anno_conversion_type", "=", "'preserve_area'", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.initialize_features": [[15, 19], ["getattr", "dimp.DiMP.params.net.initialize"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.initialize"], ["    ", "def", "initialize_features", "(", "self", ")", ":", "\n", "        ", "if", "not", "getattr", "(", "self", ",", "'features_initialized'", ",", "False", ")", ":", "\n", "            ", "self", ".", "params", ".", "net", ".", "initialize", "(", ")", "\n", "", "self", ".", "features_initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.initialize": [[20, 93], ["dimp.DiMP.initialize_features", "time.time", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "pytracking.features.preprocessing.numpy_to_torch", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "dimp.DiMP.generate_init_samples", "dimp.DiMP.init_classifier", "getattr", "hasattr", "math.sqrt", "dimp.DiMP.img_sample_sz.prod().sqrt", "hasattr", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "isinstance", "dimp.DiMP.init_iou_net", "getattr", "isinstance", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "time.time", "dimp.DiMP.img_sample_sz.prod", "locals", "time.time"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.initialize_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.numpy_to_torch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.generate_init_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.init_classifier", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_iou_net"], ["", "def", "initialize", "(", "self", ",", "image", ",", "info", ":", "dict", ")", "->", "dict", ":", "\n", "# Initialize some stuff", "\n", "        ", "self", ".", "frame_num", "=", "1", "\n", "if", "not", "hasattr", "(", "self", ".", "params", ",", "'device'", ")", ":", "\n", "            ", "self", ".", "params", ".", "device", "=", "'cuda'", "if", "self", ".", "params", ".", "use_gpu", "else", "'cpu'", "\n", "\n", "# Initialize network", "\n", "", "self", ".", "initialize_features", "(", ")", "\n", "\n", "# The DiMP network", "\n", "self", ".", "net", "=", "self", ".", "params", ".", "net", "\n", "\n", "# Time initialization", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Get target position and size", "\n", "state", "=", "info", "[", "'init_bbox'", "]", "\n", "self", ".", "pos", "=", "torch", ".", "Tensor", "(", "[", "state", "[", "1", "]", "+", "(", "state", "[", "3", "]", "-", "1", ")", "/", "2", ",", "state", "[", "0", "]", "+", "(", "state", "[", "2", "]", "-", "1", ")", "/", "2", "]", ")", "\n", "self", ".", "target_sz", "=", "torch", ".", "Tensor", "(", "[", "state", "[", "3", "]", ",", "state", "[", "2", "]", "]", ")", "\n", "\n", "# Set sizes", "\n", "sz", "=", "self", ".", "params", ".", "image_sample_size", "\n", "self", ".", "img_sample_sz", "=", "torch", ".", "Tensor", "(", "[", "sz", ",", "sz", "]", "if", "isinstance", "(", "sz", ",", "int", ")", "else", "sz", ")", "\n", "self", ".", "img_support_sz", "=", "self", ".", "img_sample_sz", "\n", "\n", "# Set search area", "\n", "search_area", "=", "torch", ".", "prod", "(", "self", ".", "target_sz", "*", "self", ".", "params", ".", "search_area_scale", ")", ".", "item", "(", ")", "\n", "self", ".", "target_scale", "=", "math", ".", "sqrt", "(", "search_area", ")", "/", "self", ".", "img_sample_sz", ".", "prod", "(", ")", ".", "sqrt", "(", ")", "\n", "\n", "# Target size in base scale", "\n", "self", ".", "base_target_sz", "=", "self", ".", "target_sz", "/", "self", ".", "target_scale", "\n", "\n", "# Convert image", "\n", "im", "=", "numpy_to_torch", "(", "image", ")", "\n", "\n", "# Setup scale factors", "\n", "if", "not", "hasattr", "(", "self", ".", "params", ",", "'scale_factors'", ")", ":", "\n", "            ", "self", ".", "params", ".", "scale_factors", "=", "torch", ".", "ones", "(", "1", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "params", ".", "scale_factors", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "self", ".", "params", ".", "scale_factors", "=", "torch", ".", "Tensor", "(", "self", ".", "params", ".", "scale_factors", ")", "\n", "\n", "# Setup scale bounds", "\n", "", "self", ".", "image_sz", "=", "torch", ".", "Tensor", "(", "[", "im", ".", "shape", "[", "2", "]", ",", "im", ".", "shape", "[", "3", "]", "]", ")", "\n", "self", ".", "min_scale_factor", "=", "torch", ".", "max", "(", "10", "/", "self", ".", "base_target_sz", ")", "\n", "self", ".", "max_scale_factor", "=", "torch", ".", "min", "(", "self", ".", "image_sz", "/", "self", ".", "base_target_sz", ")", "\n", "\n", "# Extract and transform sample", "\n", "init_backbone_feat", "=", "self", ".", "generate_init_samples", "(", "im", ")", "\n", "\n", "# Initialize classifier", "\n", "self", ".", "init_classifier", "(", "init_backbone_feat", ")", "\n", "\n", "# Initialize IoUNet", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'use_iou_net'", ",", "True", ")", ":", "\n", "            ", "self", ".", "init_iou_net", "(", "init_backbone_feat", ")", "\n", "\n", "", "if", "getattr", "(", "self", ".", "params", ",", "'output_keys'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "present", "=", "True", "\n", "score", "=", "1.0", "\n", "\n", "height", ",", "width", ",", "_", "=", "image", ".", "shape", "\n", "xmin", "=", "state", "[", "0", "]", "/", "width", "\n", "xmax", "=", "(", "state", "[", "0", "]", "+", "state", "[", "2", "]", ")", "/", "width", "\n", "ymin", "=", "state", "[", "1", "]", "/", "height", "\n", "ymax", "=", "(", "state", "[", "1", "]", "+", "state", "[", "3", "]", ")", "/", "height", "\n", "\n", "out", "=", "{", "}", "\n", "for", "i", "in", "self", ".", "params", ".", "output_keys", ":", "\n", "                ", "out", "[", "i", "]", "=", "locals", "(", ")", "[", "i", "]", "\n", "", "out", "[", "'time'", "]", "=", "time", ".", "time", "(", ")", "-", "tic", "\n", "", "else", ":", "\n", "            ", "out", "=", "{", "'time'", ":", "time", ".", "time", "(", ")", "-", "tic", "}", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.track": [[95, 186], ["pytracking.features.preprocessing.numpy_to_torch", "dimp.DiMP.extract_backbone_features", "dimp.DiMP.get_classification_features", "dimp.DiMP.get_sample_location", "dimp.DiMP.classify_target", "dimp.DiMP.localize_target", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dimp.DiMP.get_centered_sample_pos", "getattr", "getattr", "getattr", "dimp.DiMP.get_iounet_box", "dimp.DiMP.update_classifier", "getattr", "hasattr", "dimp.DiMP.pos_iounet.clone", "dimp.DiMP.visdom.register", "dimp.DiMP.visdom.register", "getattr", "torch.cat.tolist", "torch.cat.tolist", "torch.cat.tolist", "torch.cat.tolist", "getattr", "dimp.DiMP.refine_target_box", "getattr", "torch.max", "torch.max", "torch.max", "torch.max", "pytracking.utils.plotting.show_tensor", "torch.cat.tolist", "torch.cat.tolist", "getattr", "dimp.DiMP.update_state", "dimp.DiMP.update_state", "locals"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.numpy_to_torch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_backbone_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.get_classification_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.get_sample_location", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.classify_target", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.localize_target", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.get_centered_sample_pos", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iounet_box", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.update_classifier", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.refine_target_box", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.show_tensor", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_state", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_state"], ["", "def", "track", "(", "self", ",", "image", ")", "->", "dict", ":", "\n", "        ", "self", ".", "debug_info", "=", "{", "}", "\n", "\n", "self", ".", "frame_num", "+=", "1", "\n", "self", ".", "debug_info", "[", "'frame_num'", "]", "=", "self", ".", "frame_num", "\n", "\n", "# Convert image", "\n", "im", "=", "numpy_to_torch", "(", "image", ")", "\n", "\n", "# ------- LOCALIZATION ------- #", "\n", "\n", "# Extract backbone features", "\n", "backbone_feat", ",", "sample_coords", "=", "self", ".", "extract_backbone_features", "(", "im", ",", "self", ".", "get_centered_sample_pos", "(", ")", ",", "\n", "self", ".", "target_scale", "*", "self", ".", "params", ".", "scale_factors", ",", "\n", "self", ".", "img_sample_sz", ")", "\n", "# Extract classification features", "\n", "test_x", "=", "self", ".", "get_classification_features", "(", "backbone_feat", ")", "\n", "\n", "# Location of sample", "\n", "sample_pos", ",", "sample_scales", "=", "self", ".", "get_sample_location", "(", "sample_coords", ")", "\n", "\n", "# Compute classification scores", "\n", "scores_raw", "=", "self", ".", "classify_target", "(", "test_x", ")", "\n", "\n", "# Localize the target", "\n", "translation_vec", ",", "scale_ind", ",", "s", ",", "flag", "=", "self", ".", "localize_target", "(", "scores_raw", ",", "sample_scales", ")", "\n", "new_pos", "=", "sample_pos", "[", "scale_ind", ",", ":", "]", "+", "translation_vec", "\n", "\n", "self", ".", "debug_info", "[", "'flag'", "]", "=", "flag", "\n", "\n", "# Update position and scale", "\n", "if", "flag", "!=", "'not_found'", ":", "\n", "            ", "if", "getattr", "(", "self", ".", "params", ",", "'use_iou_net'", ",", "True", ")", ":", "\n", "                ", "update_scale_flag", "=", "getattr", "(", "self", ".", "params", ",", "'update_scale_when_uncertain'", ",", "True", ")", "or", "flag", "!=", "'uncertain'", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'use_classifier'", ",", "True", ")", ":", "\n", "                    ", "self", ".", "update_state", "(", "new_pos", ")", "\n", "", "self", ".", "refine_target_box", "(", "backbone_feat", ",", "sample_pos", "[", "scale_ind", ",", ":", "]", ",", "sample_scales", "[", "scale_ind", "]", ",", "scale_ind", ",", "update_scale_flag", ")", "\n", "", "elif", "getattr", "(", "self", ".", "params", ",", "'use_classifier'", ",", "True", ")", ":", "\n", "                ", "self", ".", "update_state", "(", "new_pos", ",", "sample_scales", "[", "scale_ind", "]", ")", "\n", "\n", "# ------- UPDATE ------- #", "\n", "\n", "", "", "update_flag", "=", "flag", "not", "in", "[", "'not_found'", ",", "'uncertain'", "]", "\n", "hard_negative", "=", "(", "flag", "==", "'hard_negative'", ")", "\n", "learning_rate", "=", "getattr", "(", "self", ".", "params", ",", "'hard_negative_learning_rate'", ",", "None", ")", "if", "hard_negative", "else", "None", "\n", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'update_classifier'", ",", "False", ")", "and", "update_flag", ":", "\n", "# Get train sample", "\n", "            ", "train_x", "=", "test_x", "[", "scale_ind", ":", "scale_ind", "+", "1", ",", "...", "]", "\n", "\n", "# Create target_box and label for spatial sample", "\n", "target_box", "=", "self", ".", "get_iounet_box", "(", "self", ".", "pos", ",", "self", ".", "target_sz", ",", "sample_pos", "[", "scale_ind", ",", ":", "]", ",", "sample_scales", "[", "scale_ind", "]", ")", "\n", "\n", "# Update the classifier model", "\n", "self", ".", "update_classifier", "(", "train_x", ",", "target_box", ",", "learning_rate", ",", "s", "[", "scale_ind", ",", "...", "]", ")", "\n", "\n", "# Set the pos of the tracker to iounet pos", "\n", "", "if", "getattr", "(", "self", ".", "params", ",", "'use_iou_net'", ",", "True", ")", "and", "flag", "!=", "'not_found'", "and", "hasattr", "(", "self", ",", "'pos_iounet'", ")", ":", "\n", "            ", "self", ".", "pos", "=", "self", ".", "pos_iounet", ".", "clone", "(", ")", "\n", "\n", "", "score_map", "=", "s", "[", "scale_ind", ",", "...", "]", "\n", "max_score", "=", "torch", ".", "max", "(", "score_map", ")", ".", "item", "(", ")", "\n", "self", ".", "debug_info", "[", "'max_score'", "]", "=", "max_score", "\n", "\n", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "            ", "self", ".", "visdom", ".", "register", "(", "score_map", ",", "'heatmap'", ",", "2", ",", "'Score Map'", ")", "\n", "self", ".", "visdom", ".", "register", "(", "self", ".", "debug_info", ",", "'info_dict'", ",", "1", ",", "'Status'", ")", "\n", "", "elif", "self", ".", "params", ".", "debug", ">=", "2", ":", "\n", "            ", "show_tensor", "(", "score_map", ",", "5", ",", "title", "=", "'Max score = {:.2f}'", ".", "format", "(", "max_score", ")", ")", "\n", "\n", "# Compute output bounding box", "\n", "", "new_state", "=", "torch", ".", "cat", "(", "(", "self", ".", "pos", "[", "[", "1", ",", "0", "]", "]", "-", "(", "self", ".", "target_sz", "[", "[", "1", ",", "0", "]", "]", "-", "1", ")", "/", "2", ",", "self", ".", "target_sz", "[", "[", "1", ",", "0", "]", "]", ")", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'output_keys'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "present", "=", "(", "flag", "!=", "'not_found'", ")", "\n", "score", "=", "max_score", "\n", "target_bbox", "=", "new_state", ".", "tolist", "(", ")", "\n", "\n", "height", ",", "width", ",", "_", "=", "image", ".", "shape", "\n", "xmin", "=", "target_bbox", "[", "0", "]", "/", "width", "\n", "xmax", "=", "(", "target_bbox", "[", "0", "]", "+", "target_bbox", "[", "2", "]", ")", "/", "width", "\n", "ymin", "=", "target_bbox", "[", "1", "]", "/", "height", "\n", "ymax", "=", "(", "target_bbox", "[", "1", "]", "+", "target_bbox", "[", "3", "]", ")", "/", "height", "\n", "\n", "out", "=", "{", "}", "\n", "for", "i", "in", "self", ".", "params", ".", "output_keys", ":", "\n", "                ", "out", "[", "i", "]", "=", "locals", "(", ")", "[", "i", "]", "\n", "", "out", "[", "'target_bbox'", "]", "=", "new_state", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "{", "'target_bbox'", ":", "new_state", ".", "tolist", "(", ")", "}", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.get_sample_location": [[188, 194], ["sample_coord.float.float.float"], "methods", ["None"], ["", "def", "get_sample_location", "(", "self", ",", "sample_coord", ")", ":", "\n", "        ", "\"\"\"Get the location of the extracted sample.\"\"\"", "\n", "sample_coord", "=", "sample_coord", ".", "float", "(", ")", "\n", "sample_pos", "=", "0.5", "*", "(", "sample_coord", "[", ":", ",", ":", "2", "]", "+", "sample_coord", "[", ":", ",", "2", ":", "]", "-", "1", ")", "\n", "sample_scales", "=", "(", "(", "sample_coord", "[", ":", ",", "2", ":", "]", "-", "sample_coord", "[", ":", ",", ":", "2", "]", ")", "/", "self", ".", "img_sample_sz", ")", ".", "prod", "(", "dim", "=", "1", ")", ".", "sqrt", "(", ")", "\n", "return", "sample_pos", ",", "sample_scales", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.get_centered_sample_pos": [[195, 199], ["None"], "methods", ["None"], ["", "def", "get_centered_sample_pos", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the center position for the new sample. Make sure the target is correctly centered.\"\"\"", "\n", "return", "self", ".", "pos", "+", "(", "(", "self", ".", "feature_sz", "+", "self", ".", "kernel_size", ")", "%", "2", ")", "*", "self", ".", "target_scale", "*", "self", ".", "img_support_sz", "/", "(", "2", "*", "self", ".", "feature_sz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.classify_target": [[200, 205], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dimp.DiMP.net.classifier.classify"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.linear_filter.LinearFilter.classify"], ["", "def", "classify_target", "(", "self", ",", "sample_x", ":", "TensorList", ")", ":", "\n", "        ", "\"\"\"Classify target by applying the DiMP filter.\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "scores", "=", "self", ".", "net", ".", "classifier", ".", "classify", "(", "self", ".", "target_filter", ",", "sample_x", ")", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.localize_target": [[206, 226], ["scores.squeeze.squeeze.squeeze", "getattr", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "pytracking.dcf.max2d", "torch.max", "torch.max", "torch.max", "torch.max", "max_disp[].float().cpu().view", "dimp.DiMP.localize_advanced", "list", "max_disp[].float().cpu", "max_disp[].float"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.max2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.localize_advanced", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["", "def", "localize_target", "(", "self", ",", "scores", ",", "sample_scales", ")", ":", "\n", "        ", "\"\"\"Run the target localization.\"\"\"", "\n", "\n", "scores", "=", "scores", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'advanced_localization'", ",", "False", ")", ":", "\n", "            ", "return", "self", ".", "localize_advanced", "(", "scores", ",", "sample_scales", ")", "\n", "\n", "# Get maximum", "\n", "", "score_sz", "=", "torch", ".", "Tensor", "(", "list", "(", "scores", ".", "shape", "[", "-", "2", ":", "]", ")", ")", "\n", "score_center", "=", "(", "score_sz", "-", "1", ")", "/", "2", "\n", "max_score", ",", "max_disp", "=", "dcf", ".", "max2d", "(", "scores", ")", "\n", "_", ",", "scale_ind", "=", "torch", ".", "max", "(", "max_score", ",", "dim", "=", "0", ")", "\n", "max_disp", "=", "max_disp", "[", "scale_ind", ",", "...", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "target_disp", "=", "max_disp", "-", "score_center", "\n", "\n", "# Compute translation vector and scale change factor", "\n", "translation_vec", "=", "target_disp", "*", "(", "self", ".", "img_support_sz", "/", "self", ".", "feature_sz", ")", "*", "sample_scales", "[", "scale_ind", "]", "\n", "\n", "return", "translation_vec", ",", "scale_ind", ",", "scores", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.localize_advanced": [[228, 287], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "pytracking.dcf.max2d", "torch.max", "torch.max", "torch.max", "torch.max", "max_disp1[].float().cpu().view", "max", "min", "max", "min", "scores_hn[].clone", "pytracking.dcf.max2d", "max_disp2.float().cpu().view.float().cpu().view.float().cpu().view", "list", "getattr", "scores.clone", "max_score1.item", "round", "round", "round", "round", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "max_disp1[].float().cpu", "max_disp2.float().cpu().view.float().cpu().view.float().cpu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "max_disp1[].item", "max_disp1[].item", "math.sqrt", "max_disp1[].float", "target_neigh_sz[].item", "max_disp1[].item", "target_neigh_sz[].item", "max_disp1[].item", "max_disp2.float().cpu().view.float().cpu().view.float", "target_neigh_sz[].item", "target_neigh_sz[].item"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.max2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.max2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["", "def", "localize_advanced", "(", "self", ",", "scores", ",", "sample_scales", ")", ":", "\n", "        ", "\"\"\"Run the target advanced localization (as in ATOM).\"\"\"", "\n", "\n", "sz", "=", "scores", ".", "shape", "[", "-", "2", ":", "]", "\n", "score_sz", "=", "torch", ".", "Tensor", "(", "list", "(", "sz", ")", ")", "\n", "score_center", "=", "(", "score_sz", "-", "1", ")", "/", "2", "\n", "\n", "scores_hn", "=", "scores", "\n", "if", "self", ".", "output_window", "is", "not", "None", "and", "getattr", "(", "self", ".", "params", ",", "'perform_hn_without_windowing'", ",", "False", ")", ":", "\n", "            ", "scores_hn", "=", "scores", ".", "clone", "(", ")", "\n", "scores", "*=", "self", ".", "output_window", "\n", "\n", "", "max_score1", ",", "max_disp1", "=", "dcf", ".", "max2d", "(", "scores", ")", "\n", "_", ",", "scale_ind", "=", "torch", ".", "max", "(", "max_score1", ",", "dim", "=", "0", ")", "\n", "sample_scale", "=", "sample_scales", "[", "scale_ind", "]", "\n", "max_score1", "=", "max_score1", "[", "scale_ind", "]", "\n", "max_disp1", "=", "max_disp1", "[", "scale_ind", ",", "...", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "target_disp1", "=", "max_disp1", "-", "score_center", "\n", "translation_vec1", "=", "target_disp1", "*", "(", "self", ".", "img_support_sz", "/", "self", ".", "feature_sz", ")", "*", "sample_scale", "\n", "\n", "if", "max_score1", ".", "item", "(", ")", "<", "self", ".", "params", ".", "target_not_found_threshold", ":", "\n", "            ", "return", "translation_vec1", ",", "scale_ind", ",", "scores_hn", ",", "'not_found'", "\n", "\n", "# Mask out target neighborhood", "\n", "", "target_neigh_sz", "=", "self", ".", "params", ".", "target_neighborhood_scale", "*", "(", "self", ".", "target_sz", "/", "sample_scale", ")", "*", "(", "self", ".", "feature_sz", "/", "self", ".", "img_support_sz", ")", "\n", "\n", "tneigh_top", "=", "max", "(", "round", "(", "max_disp1", "[", "0", "]", ".", "item", "(", ")", "-", "target_neigh_sz", "[", "0", "]", ".", "item", "(", ")", "/", "2", ")", ",", "0", ")", "\n", "tneigh_bottom", "=", "min", "(", "round", "(", "max_disp1", "[", "0", "]", ".", "item", "(", ")", "+", "target_neigh_sz", "[", "0", "]", ".", "item", "(", ")", "/", "2", "+", "1", ")", ",", "sz", "[", "0", "]", ")", "\n", "tneigh_left", "=", "max", "(", "round", "(", "max_disp1", "[", "1", "]", ".", "item", "(", ")", "-", "target_neigh_sz", "[", "1", "]", ".", "item", "(", ")", "/", "2", ")", ",", "0", ")", "\n", "tneigh_right", "=", "min", "(", "round", "(", "max_disp1", "[", "1", "]", ".", "item", "(", ")", "+", "target_neigh_sz", "[", "1", "]", ".", "item", "(", ")", "/", "2", "+", "1", ")", ",", "sz", "[", "1", "]", ")", "\n", "scores_masked", "=", "scores_hn", "[", "scale_ind", ":", "scale_ind", "+", "1", ",", "...", "]", ".", "clone", "(", ")", "\n", "scores_masked", "[", "...", ",", "tneigh_top", ":", "tneigh_bottom", ",", "tneigh_left", ":", "tneigh_right", "]", "=", "0", "\n", "\n", "# Find new maximum", "\n", "max_score2", ",", "max_disp2", "=", "dcf", ".", "max2d", "(", "scores_masked", ")", "\n", "max_disp2", "=", "max_disp2", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "target_disp2", "=", "max_disp2", "-", "score_center", "\n", "translation_vec2", "=", "target_disp2", "*", "(", "self", ".", "img_support_sz", "/", "self", ".", "feature_sz", ")", "*", "sample_scale", "\n", "\n", "# Handle the different cases", "\n", "if", "max_score2", ">", "self", ".", "params", ".", "distractor_threshold", "*", "max_score1", ":", "\n", "            ", "disp_norm1", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "target_disp1", "**", "2", ")", ")", "\n", "disp_norm2", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "target_disp2", "**", "2", ")", ")", "\n", "disp_threshold", "=", "self", ".", "params", ".", "dispalcement_scale", "*", "math", ".", "sqrt", "(", "sz", "[", "0", "]", "*", "sz", "[", "1", "]", ")", "/", "2", "\n", "\n", "if", "disp_norm2", ">", "disp_threshold", "and", "disp_norm1", "<", "disp_threshold", ":", "\n", "                ", "return", "translation_vec1", ",", "scale_ind", ",", "scores_hn", ",", "'hard_negative'", "\n", "", "if", "disp_norm2", "<", "disp_threshold", "and", "disp_norm1", ">", "disp_threshold", ":", "\n", "                ", "return", "translation_vec2", ",", "scale_ind", ",", "scores_hn", ",", "'hard_negative'", "\n", "", "if", "disp_norm2", ">", "disp_threshold", "and", "disp_norm1", ">", "disp_threshold", ":", "\n", "                ", "return", "translation_vec1", ",", "scale_ind", ",", "scores_hn", ",", "'uncertain'", "\n", "\n", "# If also the distractor is close, return with highest score", "\n", "", "return", "translation_vec1", ",", "scale_ind", ",", "scores_hn", ",", "'uncertain'", "\n", "\n", "", "if", "max_score2", ">", "self", ".", "params", ".", "hard_negative_threshold", "*", "max_score1", "and", "max_score2", ">", "self", ".", "params", ".", "target_not_found_threshold", ":", "\n", "            ", "return", "translation_vec1", ",", "scale_ind", ",", "scores_hn", ",", "'hard_negative'", "\n", "\n", "", "return", "translation_vec1", ",", "scale_ind", ",", "scores_hn", ",", "'normal'", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.extract_backbone_features": [[288, 293], ["pytracking.features.preprocessing.sample_patch_multiscale", "getattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dimp.DiMP.net.extract_backbone"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.sample_patch_multiscale", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.net_wrappers.NetWithBackbone.extract_backbone"], ["", "def", "extract_backbone_features", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ",", "pos", ":", "torch", ".", "Tensor", ",", "scales", ",", "sz", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "im_patches", ",", "patch_coords", "=", "sample_patch_multiscale", "(", "im", ",", "pos", ",", "scales", ",", "sz", ",", "getattr", "(", "self", ".", "params", ",", "'border_mode'", ",", "'replicate'", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "backbone_feat", "=", "self", ".", "net", ".", "extract_backbone", "(", "im_patches", ")", "\n", "", "return", "backbone_feat", ",", "patch_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.get_classification_features": [[294, 297], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dimp.DiMP.net.extract_classification_feat"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_classification_feat"], ["", "def", "get_classification_features", "(", "self", ",", "backbone_feat", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "net", ".", "extract_classification_feat", "(", "backbone_feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.get_iou_backbone_features": [[298, 300], ["dimp.DiMP.net.get_backbone_bbreg_feat"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.get_backbone_bbreg_feat"], ["", "", "def", "get_iou_backbone_features", "(", "self", ",", "backbone_feat", ")", ":", "\n", "        ", "return", "self", ".", "net", ".", "get_backbone_bbreg_feat", "(", "backbone_feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.get_iou_features": [[301, 304], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dimp.DiMP.net.bb_regressor.get_iou_feat", "dimp.DiMP.get_iou_backbone_features"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.get_iou_feat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iou_backbone_features"], ["", "def", "get_iou_features", "(", "self", ",", "backbone_feat", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "net", ".", "bb_regressor", ".", "get_iou_feat", "(", "self", ".", "get_iou_backbone_features", "(", "backbone_feat", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.get_iou_modulation": [[305, 308], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dimp.DiMP.net.bb_regressor.get_modulation"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.get_modulation"], ["", "", "def", "get_iou_modulation", "(", "self", ",", "iou_backbone_feat", ",", "target_boxes", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "net", ".", "bb_regressor", ".", "get_modulation", "(", "iou_backbone_feat", ",", "target_boxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.generate_init_samples": [[310, 373], ["dimp.DiMP.pos.round", "getattr", "dimp.DiMP.img_sample_sz.clone", "getattr", "pytracking.features.preprocessing.sample_patch_transformed", "getattr", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "aug_expansion_sz.float.float.float", "dimp.DiMP.img_sample_sz.long().tolist", "pytracking.features.augmentation.Identity", "getattr", "dimp.DiMP.transforms.extend", "dimp.DiMP.transforms.extend", "dimp.DiMP.transforms.append", "dimp.DiMP.transforms.extend", "dimp.DiMP.transforms.extend", "dimp.DiMP.transforms.extend", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dimp.DiMP.net.extract_backbone", "sample_sz.float", "torch.zeros.long().tolist", "torch.zeros.long().tolist", "pytracking.features.augmentation.FlipHorizontal", "dimp.DiMP.img_sample_sz.long", "dimp.DiMP.img_sample_sz.long", "pytracking.features.augmentation.Translation", "pytracking.features.augmentation.Translation", "get_rand_shift", "pytracking.features.augmentation.Blur", "pytracking.features.augmentation.Scale", "pytracking.features.augmentation.Rotate", "torch.zeros.long", "torch.zeros.long", "torch.zeros.long().tolist", "torch.zeros.long().tolist", "get_absolute", "torch.zeros.long().tolist", "torch.zeros.long().tolist", "get_rand_shift", "get_rand_shift", "get_rand_shift", "sample_sz.float", "torch.zeros.long", "torch.zeros.long", "torch.zeros.long", "torch.zeros.long", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.sample_patch_transformed", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.net_wrappers.NetWithBackbone.extract_backbone"], ["", "", "def", "generate_init_samples", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", "->", "TensorList", ":", "\n", "        ", "\"\"\"Perform data augmentation to generate initial training samples.\"\"\"", "\n", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'border_mode'", ",", "'replicate'", ")", "==", "'inside'", ":", "\n", "# Get new sample size if forced inside the image", "\n", "            ", "im_sz", "=", "torch", ".", "Tensor", "(", "[", "im", ".", "shape", "[", "2", "]", ",", "im", ".", "shape", "[", "3", "]", "]", ")", "\n", "sample_sz", "=", "self", ".", "target_scale", "*", "self", ".", "img_sample_sz", "\n", "shrink_factor", "=", "(", "sample_sz", ".", "float", "(", ")", "/", "im_sz", ")", ".", "max", "(", ")", ".", "clamp", "(", "1", ")", "\n", "sample_sz", "=", "(", "sample_sz", ".", "float", "(", ")", "/", "shrink_factor", ")", "\n", "self", ".", "init_sample_scale", "=", "(", "sample_sz", "/", "self", ".", "img_sample_sz", ")", ".", "prod", "(", ")", ".", "sqrt", "(", ")", "\n", "tl", "=", "self", ".", "pos", "-", "(", "sample_sz", "-", "1", ")", "/", "2", "\n", "br", "=", "self", ".", "pos", "+", "sample_sz", "/", "2", "+", "1", "\n", "global_shift", "=", "-", "(", "(", "-", "tl", ")", ".", "clamp", "(", "0", ")", "-", "(", "br", "-", "im_sz", ")", ".", "clamp", "(", "0", ")", ")", "/", "self", ".", "init_sample_scale", "\n", "", "else", ":", "\n", "            ", "self", ".", "init_sample_scale", "=", "self", ".", "target_scale", "\n", "global_shift", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "\n", "", "self", ".", "init_sample_pos", "=", "self", ".", "pos", ".", "round", "(", ")", "\n", "\n", "# Compute augmentation size", "\n", "aug_expansion_factor", "=", "getattr", "(", "self", ".", "params", ",", "'augmentation_expansion_factor'", ",", "None", ")", "\n", "aug_expansion_sz", "=", "self", ".", "img_sample_sz", ".", "clone", "(", ")", "\n", "aug_output_sz", "=", "None", "\n", "if", "aug_expansion_factor", "is", "not", "None", "and", "aug_expansion_factor", "!=", "1", ":", "\n", "            ", "aug_expansion_sz", "=", "(", "self", ".", "img_sample_sz", "*", "aug_expansion_factor", ")", ".", "long", "(", ")", "\n", "aug_expansion_sz", "+=", "(", "aug_expansion_sz", "-", "self", ".", "img_sample_sz", ".", "long", "(", ")", ")", "%", "2", "\n", "aug_expansion_sz", "=", "aug_expansion_sz", ".", "float", "(", ")", "\n", "aug_output_sz", "=", "self", ".", "img_sample_sz", ".", "long", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# Random shift for each sample", "\n", "", "get_rand_shift", "=", "lambda", ":", "None", "\n", "random_shift_factor", "=", "getattr", "(", "self", ".", "params", ",", "'random_shift_factor'", ",", "0", ")", "\n", "if", "random_shift_factor", ">", "0", ":", "\n", "            ", "get_rand_shift", "=", "lambda", ":", "(", "(", "torch", ".", "rand", "(", "2", ")", "-", "0.5", ")", "*", "self", ".", "img_sample_sz", "*", "random_shift_factor", "+", "global_shift", ")", ".", "long", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# Always put identity transformation first, since it is the unaugmented sample that is always used", "\n", "", "self", ".", "transforms", "=", "[", "augmentation", ".", "Identity", "(", "aug_output_sz", ",", "global_shift", ".", "long", "(", ")", ".", "tolist", "(", ")", ")", "]", "\n", "\n", "augs", "=", "self", ".", "params", ".", "augmentation", "if", "getattr", "(", "self", ".", "params", ",", "'use_augmentation'", ",", "True", ")", "else", "{", "}", "\n", "\n", "# Add all augmentations", "\n", "if", "'shift'", "in", "augs", ":", "\n", "            ", "self", ".", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Translation", "(", "shift", ",", "aug_output_sz", ",", "global_shift", ".", "long", "(", ")", ".", "tolist", "(", ")", ")", "for", "shift", "in", "augs", "[", "'shift'", "]", "]", ")", "\n", "", "if", "'relativeshift'", "in", "augs", ":", "\n", "            ", "get_absolute", "=", "lambda", "shift", ":", "(", "torch", ".", "Tensor", "(", "shift", ")", "*", "self", ".", "img_sample_sz", "/", "2", ")", ".", "long", "(", ")", ".", "tolist", "(", ")", "\n", "self", ".", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Translation", "(", "get_absolute", "(", "shift", ")", ",", "aug_output_sz", ",", "global_shift", ".", "long", "(", ")", ".", "tolist", "(", ")", ")", "for", "shift", "in", "augs", "[", "'relativeshift'", "]", "]", ")", "\n", "", "if", "'fliplr'", "in", "augs", "and", "augs", "[", "'fliplr'", "]", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "augmentation", ".", "FlipHorizontal", "(", "aug_output_sz", ",", "get_rand_shift", "(", ")", ")", ")", "\n", "", "if", "'blur'", "in", "augs", ":", "\n", "            ", "self", ".", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Blur", "(", "sigma", ",", "aug_output_sz", ",", "get_rand_shift", "(", ")", ")", "for", "sigma", "in", "augs", "[", "'blur'", "]", "]", ")", "\n", "", "if", "'scale'", "in", "augs", ":", "\n", "            ", "self", ".", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Scale", "(", "scale_factor", ",", "aug_output_sz", ",", "get_rand_shift", "(", ")", ")", "for", "scale_factor", "in", "augs", "[", "'scale'", "]", "]", ")", "\n", "", "if", "'rotate'", "in", "augs", ":", "\n", "            ", "self", ".", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Rotate", "(", "angle", ",", "aug_output_sz", ",", "get_rand_shift", "(", ")", ")", "for", "angle", "in", "augs", "[", "'rotate'", "]", "]", ")", "\n", "\n", "# Extract augmented image patches", "\n", "", "im_patches", "=", "sample_patch_transformed", "(", "im", ",", "self", ".", "init_sample_pos", ",", "self", ".", "init_sample_scale", ",", "aug_expansion_sz", ",", "self", ".", "transforms", ")", "\n", "\n", "# Extract initial backbone features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "init_backbone_feat", "=", "self", ".", "net", ".", "extract_backbone", "(", "im_patches", ")", "\n", "\n", "", "return", "init_backbone_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.init_target_boxes": [[374, 384], ["dimp.DiMP.get_iounet_box", "pytracking.TensorList", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to.new_zeros", "torch.cat().to.new_zeros", "torch.cat().to.append", "torch.cat().to.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat().to.view", "torch.cat().to.view"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iounet_box", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to"], ["", "def", "init_target_boxes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the target bounding boxes for the initial augmented samples.\"\"\"", "\n", "self", ".", "classifier_target_box", "=", "self", ".", "get_iounet_box", "(", "self", ".", "pos", ",", "self", ".", "target_sz", ",", "self", ".", "init_sample_pos", ",", "self", ".", "init_sample_scale", ")", "\n", "init_target_boxes", "=", "TensorList", "(", ")", "\n", "for", "T", "in", "self", ".", "transforms", ":", "\n", "            ", "init_target_boxes", ".", "append", "(", "self", ".", "classifier_target_box", "+", "torch", ".", "Tensor", "(", "[", "T", ".", "shift", "[", "1", "]", ",", "T", ".", "shift", "[", "0", "]", ",", "0", ",", "0", "]", ")", ")", "\n", "", "init_target_boxes", "=", "torch", ".", "cat", "(", "init_target_boxes", ".", "view", "(", "1", ",", "4", ")", ",", "0", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "\n", "self", ".", "target_boxes", "=", "init_target_boxes", ".", "new_zeros", "(", "self", ".", "params", ".", "sample_memory_size", ",", "4", ")", "\n", "self", ".", "target_boxes", "[", ":", "init_target_boxes", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "init_target_boxes", "\n", "return", "init_target_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.init_memory": [[385, 403], ["train_x.size", "pytracking.TensorList", "dimp.DiMP.num_init_samples.copy", "pytracking.TensorList", "zip", "pytracking.TensorList", "zip", "len", "x.new_zeros", "x.new_zeros", "x.new_ones"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy"], ["", "def", "init_memory", "(", "self", ",", "train_x", ":", "TensorList", ")", ":", "\n", "# Initialize first-frame spatial training samples", "\n", "        ", "self", ".", "num_init_samples", "=", "train_x", ".", "size", "(", "0", ")", "\n", "init_sample_weights", "=", "TensorList", "(", "[", "x", ".", "new_ones", "(", "1", ")", "/", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "train_x", "]", ")", "\n", "\n", "# Sample counters and weights for spatial", "\n", "self", ".", "num_stored_samples", "=", "self", ".", "num_init_samples", ".", "copy", "(", ")", "\n", "self", ".", "previous_replace_ind", "=", "[", "None", "]", "*", "len", "(", "self", ".", "num_stored_samples", ")", "\n", "self", ".", "sample_weights", "=", "TensorList", "(", "[", "x", ".", "new_zeros", "(", "self", ".", "params", ".", "sample_memory_size", ")", "for", "x", "in", "train_x", "]", ")", "\n", "for", "sw", ",", "init_sw", ",", "num", "in", "zip", "(", "self", ".", "sample_weights", ",", "init_sample_weights", ",", "self", ".", "num_init_samples", ")", ":", "\n", "            ", "sw", "[", ":", "num", "]", "=", "init_sw", "\n", "\n", "# Initialize memory", "\n", "", "self", ".", "training_samples", "=", "TensorList", "(", "\n", "[", "x", ".", "new_zeros", "(", "self", ".", "params", ".", "sample_memory_size", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "for", "x", "in", "train_x", "]", ")", "\n", "\n", "for", "ts", ",", "x", "in", "zip", "(", "self", ".", "training_samples", ",", "train_x", ")", ":", "\n", "            ", "ts", "[", ":", "x", ".", "shape", "[", "0", "]", ",", "...", "]", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.update_memory": [[405, 418], ["dimp.DiMP.update_sample_weights", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_sample_weights"], ["", "", "def", "update_memory", "(", "self", ",", "sample_x", ":", "TensorList", ",", "target_box", ",", "learning_rate", "=", "None", ")", ":", "\n", "# Update weights and get replace ind", "\n", "        ", "replace_ind", "=", "self", ".", "update_sample_weights", "(", "self", ".", "sample_weights", ",", "self", ".", "previous_replace_ind", ",", "self", ".", "num_stored_samples", ",", "self", ".", "num_init_samples", ",", "learning_rate", ")", "\n", "self", ".", "previous_replace_ind", "=", "replace_ind", "\n", "\n", "# Update sample and label memory", "\n", "for", "train_samp", ",", "x", ",", "ind", "in", "zip", "(", "self", ".", "training_samples", ",", "sample_x", ",", "replace_ind", ")", ":", "\n", "            ", "train_samp", "[", "ind", ":", "ind", "+", "1", ",", "...", "]", "=", "x", "\n", "\n", "# Update bb memory", "\n", "", "self", ".", "target_boxes", "[", "replace_ind", "[", "0", "]", ",", ":", "]", "=", "target_box", "\n", "\n", "self", ".", "num_stored_samples", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.update_sample_weights": [[420, 460], ["zip", "getattr", "sw.sum", "replace_ind.append", "torch.min", "torch.min", "torch.min", "torch.min", "sw[].sum", "sw[].sum", "r_ind.item"], "methods", ["None"], ["", "def", "update_sample_weights", "(", "self", ",", "sample_weights", ",", "previous_replace_ind", ",", "num_stored_samples", ",", "num_init_samples", ",", "learning_rate", "=", "None", ")", ":", "\n", "# Update weights and get index to replace", "\n", "        ", "replace_ind", "=", "[", "]", "\n", "for", "sw", ",", "prev_ind", ",", "num_samp", ",", "num_init", "in", "zip", "(", "sample_weights", ",", "previous_replace_ind", ",", "num_stored_samples", ",", "num_init_samples", ")", ":", "\n", "            ", "lr", "=", "learning_rate", "\n", "if", "lr", "is", "None", ":", "\n", "                ", "lr", "=", "self", ".", "params", ".", "learning_rate", "\n", "\n", "", "init_samp_weight", "=", "getattr", "(", "self", ".", "params", ",", "'init_samples_minimum_weight'", ",", "None", ")", "\n", "if", "init_samp_weight", "==", "0", ":", "\n", "                ", "init_samp_weight", "=", "None", "\n", "", "s_ind", "=", "0", "if", "init_samp_weight", "is", "None", "else", "num_init", "\n", "\n", "if", "num_samp", "==", "0", "or", "lr", "==", "1", ":", "\n", "                ", "sw", "[", ":", "]", "=", "0", "\n", "sw", "[", "0", "]", "=", "1", "\n", "r_ind", "=", "0", "\n", "", "else", ":", "\n", "# Get index to replace", "\n", "                ", "if", "num_samp", "<", "sw", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "r_ind", "=", "num_samp", "\n", "", "else", ":", "\n", "                    ", "_", ",", "r_ind", "=", "torch", ".", "min", "(", "sw", "[", "s_ind", ":", "]", ",", "0", ")", "\n", "r_ind", "=", "r_ind", ".", "item", "(", ")", "+", "s_ind", "\n", "\n", "# Update weights", "\n", "", "if", "prev_ind", "is", "None", ":", "\n", "                    ", "sw", "/=", "1", "-", "lr", "\n", "sw", "[", "r_ind", "]", "=", "lr", "\n", "", "else", ":", "\n", "                    ", "sw", "[", "r_ind", "]", "=", "sw", "[", "prev_ind", "]", "/", "(", "1", "-", "lr", ")", "\n", "\n", "", "", "sw", "/=", "sw", ".", "sum", "(", ")", "\n", "if", "init_samp_weight", "is", "not", "None", "and", "sw", "[", ":", "num_init", "]", ".", "sum", "(", ")", "<", "init_samp_weight", ":", "\n", "                ", "sw", "/=", "init_samp_weight", "+", "sw", "[", "num_init", ":", "]", ".", "sum", "(", ")", "\n", "sw", "[", ":", "num_init", "]", "=", "init_samp_weight", "/", "num_init", "\n", "\n", "", "replace_ind", ".", "append", "(", "r_ind", ")", "\n", "\n", "", "return", "replace_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.update_state": [[461, 471], ["getattr", "torch.max", "torch.max", "torch.max", "torch.max", "new_scale.clamp", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "def", "update_state", "(", "self", ",", "new_pos", ",", "new_scale", "=", "None", ")", ":", "\n", "# Update scale", "\n", "        ", "if", "new_scale", "is", "not", "None", ":", "\n", "            ", "self", ".", "target_scale", "=", "new_scale", ".", "clamp", "(", "self", ".", "min_scale_factor", ",", "self", ".", "max_scale_factor", ")", "\n", "self", ".", "target_sz", "=", "self", ".", "base_target_sz", "*", "self", ".", "target_scale", "\n", "\n", "# Update pos", "\n", "", "inside_ratio", "=", "getattr", "(", "self", ".", "params", ",", "'target_inside_ratio'", ",", "0.2", ")", "\n", "inside_offset", "=", "(", "inside_ratio", "-", "0.5", ")", "*", "self", ".", "target_sz", "\n", "self", ".", "pos", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "new_pos", ",", "self", ".", "image_sz", "-", "inside_offset", ")", ",", "inside_offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.get_iounet_box": [[473, 480], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "target_ul.flip", "box_sz.flip"], "methods", ["None"], ["", "def", "get_iounet_box", "(", "self", ",", "pos", ",", "sz", ",", "sample_pos", ",", "sample_scale", ")", ":", "\n", "        ", "\"\"\"All inputs in original image coordinates.\n        Generates a box in the cropped image sample reference frame, in the format used by the IoUNet.\"\"\"", "\n", "box_center", "=", "(", "pos", "-", "sample_pos", ")", "/", "sample_scale", "+", "(", "self", ".", "img_sample_sz", "-", "1", ")", "/", "2", "\n", "box_sz", "=", "sz", "/", "sample_scale", "\n", "target_ul", "=", "box_center", "-", "(", "box_sz", "-", "1", ")", "/", "2", "\n", "return", "torch", ".", "cat", "(", "[", "target_ul", ".", "flip", "(", "(", "0", ",", ")", ")", ",", "box_sz", ".", "flip", "(", "(", "0", ",", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.init_iou_net": [[482, 508], ["dimp.DiMP.net.bb_regressor.parameters", "dimp.DiMP.get_iounet_box", "pytracking.TensorList", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "dimp.DiMP.get_iou_backbone_features", "pytracking.TensorList", "dimp.DiMP.get_iou_modulation", "pytracking.TensorList", "torch.cat().to.append", "torch.cat().to.append", "torch.cat().to.append", "torch.cat().to.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.detach().mean", "isinstance", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat().to.view", "torch.cat().to.view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "x.detach"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iounet_box", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iou_backbone_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.get_iou_modulation"], ["", "def", "init_iou_net", "(", "self", ",", "backbone_feat", ")", ":", "\n", "# Setup IoU net and objective", "\n", "        ", "for", "p", "in", "self", ".", "net", ".", "bb_regressor", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "# Get target boxes for the different augmentations", "\n", "", "self", ".", "classifier_target_box", "=", "self", ".", "get_iounet_box", "(", "self", ".", "pos", ",", "self", ".", "target_sz", ",", "self", ".", "init_sample_pos", ",", "self", ".", "init_sample_scale", ")", "\n", "target_boxes", "=", "TensorList", "(", ")", "\n", "if", "self", ".", "params", ".", "iounet_augmentation", ":", "\n", "            ", "for", "T", "in", "self", ".", "transforms", ":", "\n", "                ", "if", "not", "isinstance", "(", "T", ",", "(", "augmentation", ".", "Identity", ",", "augmentation", ".", "Translation", ",", "augmentation", ".", "FlipHorizontal", ",", "augmentation", ".", "FlipVertical", ",", "augmentation", ".", "Blur", ")", ")", ":", "\n", "                    ", "break", "\n", "", "target_boxes", ".", "append", "(", "self", ".", "classifier_target_box", "+", "torch", ".", "Tensor", "(", "[", "T", ".", "shift", "[", "1", "]", ",", "T", ".", "shift", "[", "0", "]", ",", "0", ",", "0", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "target_boxes", ".", "append", "(", "self", ".", "classifier_target_box", "+", "torch", ".", "Tensor", "(", "[", "self", ".", "transforms", "[", "0", "]", ".", "shift", "[", "1", "]", ",", "self", ".", "transforms", "[", "0", "]", ".", "shift", "[", "0", "]", ",", "0", ",", "0", "]", ")", ")", "\n", "", "target_boxes", "=", "torch", ".", "cat", "(", "target_boxes", ".", "view", "(", "1", ",", "4", ")", ",", "0", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "\n", "\n", "# Get iou features", "\n", "iou_backbone_feat", "=", "self", ".", "get_iou_backbone_features", "(", "backbone_feat", ")", "\n", "\n", "# Remove other augmentations such as rotation", "\n", "iou_backbone_feat", "=", "TensorList", "(", "[", "x", "[", ":", "target_boxes", ".", "shape", "[", "0", "]", ",", "...", "]", "for", "x", "in", "iou_backbone_feat", "]", ")", "\n", "\n", "# Get modulation vector", "\n", "self", ".", "iou_modulation", "=", "self", ".", "get_iou_modulation", "(", "iou_backbone_feat", ",", "target_boxes", ")", "\n", "self", ".", "iou_modulation", "=", "TensorList", "(", "[", "x", ".", "detach", "(", ")", ".", "mean", "(", "0", ")", "for", "x", "in", "self", ".", "iou_modulation", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.init_classifier": [[510, 559], ["dimp.DiMP.get_classification_features", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "getattr", "dimp.DiMP.init_target_boxes", "getattr", "getattr", "getattr", "dimp.DiMP.transforms.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "getattr", "dimp.DiMP.output_window.squeeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dimp.DiMP.net.classifier.get_filter", "dimp.DiMP.init_memory", "isinstance", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "isinstance", "pytracking.dcf.hann2d_clipped().to", "pytracking.dcf.hann2d().to", "pytracking.TensorList", "dimp.DiMP.visdom.register", "torch.dropout2d", "torch.dropout2d", "pytracking.utils.plotting.plot_graph", "x[].expand", "pytracking.dcf.hann2d_clipped", "pytracking.dcf.hann2d", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "dimp.DiMP.output_sz.long", "dimp.DiMP.output_sz.long", "dimp.DiMP.losses.numel", "dimp.DiMP.output_sz.long"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.get_classification_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.init_target_boxes", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.linear_filter.LinearFilter.get_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_memory", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann2d_clipped", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann2d"], ["", "def", "init_classifier", "(", "self", ",", "init_backbone_feat", ")", ":", "\n", "# Get classification features", "\n", "        ", "x", "=", "self", ".", "get_classification_features", "(", "init_backbone_feat", ")", "\n", "\n", "# Add the dropout augmentation here, since it requires extraction of the classification features", "\n", "if", "'dropout'", "in", "self", ".", "params", ".", "augmentation", "and", "getattr", "(", "self", ".", "params", ",", "'use_augmentation'", ",", "True", ")", ":", "\n", "            ", "num", ",", "prob", "=", "self", ".", "params", ".", "augmentation", "[", "'dropout'", "]", "\n", "self", ".", "transforms", ".", "extend", "(", "self", ".", "transforms", "[", ":", "1", "]", "*", "num", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "F", ".", "dropout2d", "(", "x", "[", "0", ":", "1", ",", "...", "]", ".", "expand", "(", "num", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "p", "=", "prob", ",", "training", "=", "True", ")", "]", ")", "\n", "\n", "# Set feature size and other related sizes", "\n", "", "self", ".", "feature_sz", "=", "torch", ".", "Tensor", "(", "list", "(", "x", ".", "shape", "[", "-", "2", ":", "]", ")", ")", "\n", "ksz", "=", "self", ".", "net", ".", "classifier", ".", "filter_size", "\n", "self", ".", "kernel_size", "=", "torch", ".", "Tensor", "(", "[", "ksz", ",", "ksz", "]", "if", "isinstance", "(", "ksz", ",", "(", "int", ",", "float", ")", ")", "else", "ksz", ")", "\n", "self", ".", "output_sz", "=", "self", ".", "feature_sz", "+", "(", "self", ".", "kernel_size", "+", "1", ")", "%", "2", "\n", "\n", "# Construct output window", "\n", "self", ".", "output_window", "=", "None", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'window_output'", ",", "False", ")", ":", "\n", "            ", "if", "getattr", "(", "self", ".", "params", ",", "'use_clipped_window'", ",", "False", ")", ":", "\n", "                ", "self", ".", "output_window", "=", "dcf", ".", "hann2d_clipped", "(", "self", ".", "output_sz", ".", "long", "(", ")", ",", "self", ".", "output_sz", ".", "long", "(", ")", "*", "self", ".", "params", ".", "effective_search_area", "/", "self", ".", "params", ".", "search_area_scale", ",", "centered", "=", "False", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "output_window", "=", "dcf", ".", "hann2d", "(", "self", ".", "output_sz", ".", "long", "(", ")", ",", "centered", "=", "True", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "\n", "", "self", ".", "output_window", "=", "self", ".", "output_window", ".", "squeeze", "(", "0", ")", "\n", "\n", "# Get target boxes for the different augmentations", "\n", "", "target_boxes", "=", "self", ".", "init_target_boxes", "(", ")", "\n", "\n", "# Set number of iterations", "\n", "plot_loss", "=", "self", ".", "params", ".", "debug", ">", "0", "\n", "num_iter", "=", "getattr", "(", "self", ".", "params", ",", "'net_opt_iter'", ",", "None", ")", "\n", "\n", "# Get target filter by running the discriminative model prediction module", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "target_filter", ",", "_", ",", "losses", "=", "self", ".", "net", ".", "classifier", ".", "get_filter", "(", "x", ",", "target_boxes", ",", "num_iter", "=", "num_iter", ",", "\n", "compute_losses", "=", "plot_loss", ")", "\n", "\n", "# Init memory", "\n", "", "if", "getattr", "(", "self", ".", "params", ",", "'update_classifier'", ",", "True", ")", ":", "\n", "            ", "self", ".", "init_memory", "(", "TensorList", "(", "[", "x", "]", ")", ")", "\n", "\n", "", "if", "plot_loss", ":", "\n", "            ", "if", "isinstance", "(", "losses", ",", "dict", ")", ":", "\n", "                ", "losses", "=", "losses", "[", "'train'", "]", "\n", "", "self", ".", "losses", "=", "torch", ".", "stack", "(", "losses", ")", "\n", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "                ", "self", ".", "visdom", ".", "register", "(", "(", "self", ".", "losses", ",", "torch", ".", "arange", "(", "self", ".", "losses", ".", "numel", "(", ")", ")", ")", ",", "'lineplot'", ",", "3", ",", "'Training Loss'", ")", "\n", "", "elif", "self", ".", "params", ".", "debug", ">=", "3", ":", "\n", "                ", "plot_graph", "(", "self", ".", "losses", ",", "10", ",", "title", "=", "'Training loss'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.update_classifier": [[561, 604], ["dimp.DiMP.update_memory", "getattr", "pytracking.TensorList", "getattr", "dimp.DiMP.target_boxes[].clone", "getattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dimp.DiMP.net.classifier.filter_optimizer", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scores.max().item", "getattr", "dimp.DiMP.visdom.register", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "pytracking.utils.plotting.plot_graph", "scores.max", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "dimp.DiMP.losses.numel"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_memory", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph"], ["", "", "", "def", "update_classifier", "(", "self", ",", "train_x", ",", "target_box", ",", "learning_rate", "=", "None", ",", "scores", "=", "None", ")", ":", "\n", "# Set flags and learning rate", "\n", "        ", "hard_negative_flag", "=", "learning_rate", "is", "not", "None", "\n", "if", "learning_rate", "is", "None", ":", "\n", "            ", "learning_rate", "=", "self", ".", "params", ".", "learning_rate", "\n", "\n", "# Update the tracker memory", "\n", "", "self", ".", "update_memory", "(", "TensorList", "(", "[", "train_x", "]", ")", ",", "target_box", ",", "learning_rate", ")", "\n", "\n", "# Decide the number of iterations to run", "\n", "num_iter", "=", "0", "\n", "low_score_th", "=", "getattr", "(", "self", ".", "params", ",", "'low_score_opt_threshold'", ",", "None", ")", "\n", "if", "hard_negative_flag", ":", "\n", "            ", "num_iter", "=", "getattr", "(", "self", ".", "params", ",", "'net_opt_hn_iter'", ",", "None", ")", "\n", "", "elif", "low_score_th", "is", "not", "None", "and", "low_score_th", ">", "scores", ".", "max", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "num_iter", "=", "getattr", "(", "self", ".", "params", ",", "'net_opt_low_iter'", ",", "None", ")", "\n", "", "elif", "(", "self", ".", "frame_num", "-", "1", ")", "%", "self", ".", "params", ".", "train_skipping", "==", "0", ":", "\n", "            ", "num_iter", "=", "getattr", "(", "self", ".", "params", ",", "'net_opt_update_iter'", ",", "None", ")", "\n", "\n", "", "plot_loss", "=", "self", ".", "params", ".", "debug", ">", "0", "\n", "\n", "if", "num_iter", ">", "0", ":", "\n", "# Get inputs for the DiMP filter optimizer module", "\n", "            ", "samples", "=", "self", ".", "training_samples", "[", "0", "]", "[", ":", "self", ".", "num_stored_samples", "[", "0", "]", ",", "...", "]", "\n", "target_boxes", "=", "self", ".", "target_boxes", "[", ":", "self", ".", "num_stored_samples", "[", "0", "]", ",", ":", "]", ".", "clone", "(", ")", "\n", "sample_weights", "=", "self", ".", "sample_weights", "[", "0", "]", "[", ":", "self", ".", "num_stored_samples", "[", "0", "]", "]", "\n", "\n", "# Run the filter optimizer module", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "target_filter", ",", "_", ",", "losses", "=", "self", ".", "net", ".", "classifier", ".", "filter_optimizer", "(", "self", ".", "target_filter", ",", "samples", ",", "target_boxes", ",", "\n", "indicator", "=", "True", ",", "\n", "sample_weight", "=", "sample_weights", ",", "\n", "num_iter", "=", "num_iter", ",", "\n", "compute_losses", "=", "plot_loss", ")", "\n", "\n", "", "if", "plot_loss", ":", "\n", "                ", "if", "isinstance", "(", "losses", ",", "dict", ")", ":", "\n", "                    ", "losses", "=", "losses", "[", "'train'", "]", "\n", "", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "torch", ".", "stack", "(", "losses", ")", ")", ")", "\n", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "                    ", "self", ".", "visdom", ".", "register", "(", "(", "self", ".", "losses", ",", "torch", ".", "arange", "(", "self", ".", "losses", ".", "numel", "(", ")", ")", ")", ",", "'lineplot'", ",", "3", ",", "'Training Loss'", ")", "\n", "", "elif", "self", ".", "params", ".", "debug", ">=", "3", ":", "\n", "                    ", "plot_graph", "(", "self", ".", "losses", ",", "10", ",", "title", "=", "'Training loss'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.refine_target_box": [[605, 664], ["dimp.DiMP.get_iounet_box", "dimp.DiMP.get_iou_features", "pytracking.TensorList", "dimp.DiMP.view().clone", "dimp.DiMP.optimize_boxes", "output_boxes[].clamp_", "getattr", "min", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "output_boxes[].mean", "[].mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "new_pos.clone", "getattr", "init_box[].prod().sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "predicted_box[].flip", "new_pos.clone", "dimp.DiMP.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "init_box[].min", "new_target_sz.prod", "dimp.DiMP.base_target_sz.prod", "init_box[].prod", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "dimp.DiMP.view", "output_iou.view", "new_pos.flip", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iounet_box", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iou_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.optimize_boxes"], ["", "", "", "", "def", "refine_target_box", "(", "self", ",", "backbone_feat", ",", "sample_pos", ",", "sample_scale", ",", "scale_ind", ",", "update_scale", "=", "True", ")", ":", "\n", "        ", "\"\"\"Run the ATOM IoUNet to refine the target bounding box.\"\"\"", "\n", "\n", "# Initial box for refinement", "\n", "init_box", "=", "self", ".", "get_iounet_box", "(", "self", ".", "pos", ",", "self", ".", "target_sz", ",", "sample_pos", ",", "sample_scale", ")", "\n", "\n", "# Extract features from the relevant scale", "\n", "iou_features", "=", "self", ".", "get_iou_features", "(", "backbone_feat", ")", "\n", "iou_features", "=", "TensorList", "(", "[", "x", "[", "scale_ind", ":", "scale_ind", "+", "1", ",", "...", "]", "for", "x", "in", "iou_features", "]", ")", "\n", "\n", "# Generate random initial boxes", "\n", "init_boxes", "=", "init_box", ".", "view", "(", "1", ",", "4", ")", ".", "clone", "(", ")", "\n", "if", "self", ".", "params", ".", "num_init_random_boxes", ">", "0", ":", "\n", "            ", "square_box_sz", "=", "init_box", "[", "2", ":", "]", ".", "prod", "(", ")", ".", "sqrt", "(", ")", "\n", "rand_factor", "=", "square_box_sz", "*", "torch", ".", "cat", "(", "[", "self", ".", "params", ".", "box_jitter_pos", "*", "torch", ".", "ones", "(", "2", ")", ",", "self", ".", "params", ".", "box_jitter_sz", "*", "torch", ".", "ones", "(", "2", ")", "]", ")", "\n", "\n", "minimal_edge_size", "=", "init_box", "[", "2", ":", "]", ".", "min", "(", ")", "/", "3", "\n", "rand_bb", "=", "(", "torch", ".", "rand", "(", "self", ".", "params", ".", "num_init_random_boxes", ",", "4", ")", "-", "0.5", ")", "*", "rand_factor", "\n", "new_sz", "=", "(", "init_box", "[", "2", ":", "]", "+", "rand_bb", "[", ":", ",", "2", ":", "]", ")", ".", "clamp", "(", "minimal_edge_size", ")", "\n", "new_center", "=", "(", "init_box", "[", ":", "2", "]", "+", "init_box", "[", "2", ":", "]", "/", "2", ")", "+", "rand_bb", "[", ":", ",", ":", "2", "]", "\n", "init_boxes", "=", "torch", ".", "cat", "(", "[", "new_center", "-", "new_sz", "/", "2", ",", "new_sz", "]", ",", "1", ")", "\n", "init_boxes", "=", "torch", ".", "cat", "(", "[", "init_box", ".", "view", "(", "1", ",", "4", ")", ",", "init_boxes", "]", ")", "\n", "\n", "# Optimize the boxes", "\n", "", "output_boxes", ",", "output_iou", "=", "self", ".", "optimize_boxes", "(", "iou_features", ",", "init_boxes", ")", "\n", "\n", "# Remove weird boxes", "\n", "output_boxes", "[", ":", ",", "2", ":", "]", ".", "clamp_", "(", "1", ")", "\n", "aspect_ratio", "=", "output_boxes", "[", ":", ",", "2", "]", "/", "output_boxes", "[", ":", ",", "3", "]", "\n", "keep_ind", "=", "(", "aspect_ratio", "<", "self", ".", "params", ".", "maximal_aspect_ratio", ")", "*", "(", "aspect_ratio", ">", "1", "/", "self", ".", "params", ".", "maximal_aspect_ratio", ")", "\n", "output_boxes", "=", "output_boxes", "[", "keep_ind", ",", ":", "]", "\n", "output_iou", "=", "output_iou", "[", "keep_ind", "]", "\n", "\n", "# If no box found", "\n", "if", "output_boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "# Predict box", "\n", "", "k", "=", "getattr", "(", "self", ".", "params", ",", "'iounet_k'", ",", "5", ")", "\n", "topk", "=", "min", "(", "k", ",", "output_boxes", ".", "shape", "[", "0", "]", ")", "\n", "_", ",", "inds", "=", "torch", ".", "topk", "(", "output_iou", ",", "topk", ")", "\n", "predicted_box", "=", "output_boxes", "[", "inds", ",", ":", "]", ".", "mean", "(", "0", ")", "\n", "predicted_iou", "=", "output_iou", ".", "view", "(", "-", "1", ",", "1", ")", "[", "inds", ",", ":", "]", ".", "mean", "(", "0", ")", "\n", "\n", "# Get new position and size", "\n", "new_pos", "=", "predicted_box", "[", ":", "2", "]", "+", "predicted_box", "[", "2", ":", "]", "/", "2", "\n", "new_pos", "=", "(", "new_pos", ".", "flip", "(", "(", "0", ",", ")", ")", "-", "(", "self", ".", "img_sample_sz", "-", "1", ")", "/", "2", ")", "*", "sample_scale", "+", "sample_pos", "\n", "new_target_sz", "=", "predicted_box", "[", "2", ":", "]", ".", "flip", "(", "(", "0", ",", ")", ")", "*", "sample_scale", "\n", "new_scale", "=", "torch", ".", "sqrt", "(", "new_target_sz", ".", "prod", "(", ")", "/", "self", ".", "base_target_sz", ".", "prod", "(", ")", ")", "\n", "\n", "self", ".", "pos_iounet", "=", "new_pos", ".", "clone", "(", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'use_iounet_pos_for_learning'", ",", "True", ")", ":", "\n", "            ", "self", ".", "pos", "=", "new_pos", ".", "clone", "(", ")", "\n", "\n", "", "self", ".", "target_sz", "=", "new_target_sz", "\n", "\n", "if", "update_scale", ":", "\n", "            ", "self", ".", "target_scale", "=", "new_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp.DiMP.optimize_boxes": [[666, 692], ["init_boxes.view().to", "isinstance", "range", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "init_boxes.view().to.clone().detach", "dimp.DiMP.net.bb_regressor.predict_iou", "isinstance", "dimp.DiMP.backward", "init_boxes.view().to.detach_", "init_boxes.view().to.view().cpu", "dimp.DiMP.detach().view().cpu", "init_boxes.view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "init_boxes.view().to.clone", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "bb_init[].repeat", "init_boxes.view().to.view", "dimp.DiMP.detach().view", "dimp.DiMP.detach"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.predict_iou", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.backward"], ["", "", "def", "optimize_boxes", "(", "self", ",", "iou_features", ",", "init_boxes", ")", ":", "\n", "# Optimize iounet boxes", "\n", "        ", "output_boxes", "=", "init_boxes", ".", "view", "(", "1", ",", "-", "1", ",", "4", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "\n", "step_length", "=", "self", ".", "params", ".", "box_refinement_step_length", "\n", "if", "isinstance", "(", "step_length", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "step_length", "=", "torch", ".", "Tensor", "(", "[", "step_length", "[", "0", "]", ",", "step_length", "[", "0", "]", ",", "step_length", "[", "1", "]", ",", "step_length", "[", "1", "]", "]", ",", "device", "=", "self", ".", "params", ".", "device", ")", ".", "view", "(", "1", ",", "1", ",", "4", ")", "\n", "\n", "", "for", "i_", "in", "range", "(", "self", ".", "params", ".", "box_refinement_iter", ")", ":", "\n", "# forward pass", "\n", "            ", "bb_init", "=", "output_boxes", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "bb_init", ".", "requires_grad", "=", "True", "\n", "\n", "outputs", "=", "self", ".", "net", ".", "bb_regressor", ".", "predict_iou", "(", "self", ".", "iou_modulation", ",", "iou_features", ",", "bb_init", ")", "\n", "\n", "if", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "outputs", "=", "outputs", "[", "0", "]", "\n", "\n", "", "outputs", ".", "backward", "(", "gradient", "=", "torch", ".", "ones_like", "(", "outputs", ")", ")", "\n", "\n", "# Update proposal", "\n", "output_boxes", "=", "bb_init", "+", "step_length", "*", "bb_init", ".", "grad", "*", "bb_init", "[", ":", ",", ":", ",", "2", ":", "]", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", "\n", "output_boxes", ".", "detach_", "(", ")", "\n", "\n", "step_length", "*=", "self", ".", "params", ".", "box_refinement_step_decay", "\n", "\n", "", "return", "output_boxes", ".", "view", "(", "-", "1", ",", "4", ")", ".", "cpu", "(", ")", ",", "outputs", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.__init__.get_tracker_class": [[3, 5], ["None"], "function", ["None"], ["import", "pytracking", ".", "libs", ".", "operation", "as", "operation", "\n", "import", "pytracking", ".", "libs", ".", "fourier", "as", "fourier", "\n", "import", "pytracking", ".", "libs", ".", "dcf", "as", "dcf", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp50.run": [[15, 122], ["ltr.dataset.Lasot", "ltr.dataset.Got10k", "ltr.dataset.TrackingNet", "ltr.dataset.MSCOCOSeq", "ltr.dataset.Got10k", "ltr.ToGrayscale", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "ltr.data.processing.DiMPProcessing", "ltr.data.processing.DiMPProcessing", "ltr.data.sampler.DiMPSampler", "ltr.data.LTRLoader", "ltr.data.sampler.DiMPSampler", "ltr.data.LTRLoader", "ltr.models.tracking.dimpnet.dimpnet50", "ltr.actors.DiMPActor", "torch.Adam", "torch.lr_scheduler.StepLR", "ltr.trainers.LTRTrainer", "ltr.trainers.LTRTrainer.train", "ltr.MultiGPU", "torch.MSELoss", "ltr.LBHinge", "list", "ltr.ToTensorAndJitter", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "range", "actors.DiMPActor.net.classifier.filter_initializer.parameters", "actors.DiMPActor.net.classifier.filter_optimizer.parameters", "actors.DiMPActor.net.classifier.feature_extractor.parameters", "actors.DiMPActor.net.bb_regressor.parameters", "actors.DiMPActor.net.feature_extractor.parameters"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.dimpnet50", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters"], ["# Learning parameters", "\n", "params", ".", "sample_memory_size", "=", "50", "\n", "params", ".", "learning_rate", "=", "0.01", "\n", "params", ".", "init_samples_minimum_weight", "=", "0.25", "\n", "params", ".", "train_skipping", "=", "20", "\n", "\n", "# Net optimization params", "\n", "params", ".", "update_classifier", "=", "True", "\n", "params", ".", "net_opt_iter", "=", "10", "\n", "params", ".", "net_opt_update_iter", "=", "5", "\n", "params", ".", "net_opt_hn_iter", "=", "1", "\n", "\n", "# Detection parameters", "\n", "params", ".", "window_output", "=", "False", "\n", "\n", "# Init augmentation parameters", "\n", "params", ".", "use_augmentation", "=", "True", "\n", "params", ".", "augmentation", "=", "{", "'fliplr'", ":", "True", ",", "\n", "'rotate'", ":", "[", "10", ",", "-", "10", ",", "45", ",", "-", "45", "]", ",", "\n", "'blur'", ":", "[", "(", "3", ",", "1", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "2", ")", "]", ",", "\n", "'relativeshift'", ":", "[", "(", "0.6", ",", "0.6", ")", ",", "(", "-", "0.6", ",", "0.6", ")", ",", "(", "0.6", ",", "-", "0.6", ")", ",", "(", "-", "0.6", ",", "-", "0.6", ")", "]", ",", "\n", "'dropout'", ":", "(", "2", ",", "0.2", ")", "}", "\n", "\n", "params", ".", "augmentation_expansion_factor", "=", "2", "\n", "params", ".", "random_shift_factor", "=", "1", "/", "3", "\n", "\n", "# Advanced localization parameters", "\n", "params", ".", "advanced_localization", "=", "True", "\n", "params", ".", "target_not_found_threshold", "=", "0.25", "\n", "params", ".", "distractor_threshold", "=", "0.8", "\n", "params", ".", "hard_negative_threshold", "=", "0.5", "\n", "params", ".", "target_neighborhood_scale", "=", "2.2", "\n", "params", ".", "dispalcement_scale", "=", "0.8", "\n", "params", ".", "hard_negative_learning_rate", "=", "0.02", "\n", "params", ".", "update_scale_when_uncertain", "=", "True", "\n", "\n", "# IoUnet parameters", "\n", "params", ".", "iounet_augmentation", "=", "False", "\n", "params", ".", "iounet_use_log_scale", "=", "True", "\n", "params", ".", "iounet_k", "=", "1", "\n", "params", ".", "num_init_random_boxes", "=", "0", "\n", "params", ".", "box_jitter_pos", "=", "0.1", "\n", "params", ".", "box_jitter_sz", "=", "0.5", "\n", "params", ".", "maximal_aspect_ratio", "=", "6", "\n", "params", ".", "box_refinement_iter", "=", "5", "\n", "params", ".", "box_refinement_step_length", "=", "1", "\n", "params", ".", "box_refinement_step_decay", "=", "1", "\n", "\n", "params", ".", "net", "=", "NetWithBackbone", "(", "net_path", "=", "'dimp50.pth'", ",", "\n", "use_gpu", "=", "params", ".", "use_gpu", ")", "\n", "\n", "params", ".", "vot_anno_conversion_type", "=", "'preserve_area'", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dimp.dimp18.run": [[15, 121], ["ltr.dataset.Lasot", "ltr.dataset.Got10k", "ltr.dataset.TrackingNet", "ltr.dataset.MSCOCOSeq", "ltr.dataset.Got10k", "ltr.ToGrayscale", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "ltr.data.processing.DiMPProcessing", "ltr.data.processing.DiMPProcessing", "ltr.data.sampler.DiMPSampler", "ltr.data.LTRLoader", "ltr.data.sampler.DiMPSampler", "ltr.data.LTRLoader", "ltr.models.tracking.dimpnet.dimpnet18", "ltr.actors.DiMPActor", "torch.Adam", "torch.lr_scheduler.StepLR", "ltr.trainers.LTRTrainer", "ltr.trainers.LTRTrainer.train", "ltr.MultiGPU", "torch.MSELoss", "ltr.LBHinge", "list", "ltr.ToTensorAndJitter", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "range", "actors.DiMPActor.net.classifier.filter_initializer.parameters", "actors.DiMPActor.net.classifier.filter_optimizer.parameters", "actors.DiMPActor.net.classifier.feature_extractor.parameters", "actors.DiMPActor.net.bb_regressor.parameters", "actors.DiMPActor.net.feature_extractor.parameters"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.dimpnet18", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters"], ["# Learning parameters", "\n", "params", ".", "sample_memory_size", "=", "50", "\n", "params", ".", "learning_rate", "=", "0.01", "\n", "params", ".", "init_samples_minimum_weight", "=", "0.25", "\n", "params", ".", "train_skipping", "=", "20", "\n", "\n", "# Net optimization params", "\n", "params", ".", "update_classifier", "=", "True", "\n", "params", ".", "net_opt_iter", "=", "10", "\n", "params", ".", "net_opt_update_iter", "=", "2", "\n", "params", ".", "net_opt_hn_iter", "=", "1", "\n", "\n", "# Detection parameters", "\n", "params", ".", "window_output", "=", "False", "\n", "\n", "# Init augmentation parameters", "\n", "params", ".", "use_augmentation", "=", "True", "\n", "params", ".", "augmentation", "=", "{", "'fliplr'", ":", "True", ",", "\n", "'rotate'", ":", "[", "10", ",", "-", "10", ",", "45", ",", "-", "45", "]", ",", "\n", "'blur'", ":", "[", "(", "3", ",", "1", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "2", ")", "]", ",", "\n", "'relativeshift'", ":", "[", "(", "0.6", ",", "0.6", ")", ",", "(", "-", "0.6", ",", "0.6", ")", ",", "(", "0.6", ",", "-", "0.6", ")", ",", "(", "-", "0.6", ",", "-", "0.6", ")", "]", ",", "\n", "'dropout'", ":", "(", "2", ",", "0.2", ")", "}", "\n", "\n", "params", ".", "augmentation_expansion_factor", "=", "2", "\n", "params", ".", "random_shift_factor", "=", "1", "/", "3", "\n", "\n", "# Advanced localization parameters", "\n", "params", ".", "advanced_localization", "=", "True", "\n", "params", ".", "target_not_found_threshold", "=", "0.25", "\n", "params", ".", "distractor_threshold", "=", "0.8", "\n", "params", ".", "hard_negative_threshold", "=", "0.5", "\n", "params", ".", "target_neighborhood_scale", "=", "2.2", "\n", "params", ".", "dispalcement_scale", "=", "0.8", "\n", "params", ".", "hard_negative_learning_rate", "=", "0.02", "\n", "params", ".", "update_scale_when_uncertain", "=", "True", "\n", "\n", "# IoUnet parameters", "\n", "params", ".", "iounet_augmentation", "=", "False", "\n", "params", ".", "iounet_use_log_scale", "=", "True", "\n", "params", ".", "iounet_k", "=", "3", "\n", "params", ".", "num_init_random_boxes", "=", "9", "\n", "params", ".", "box_jitter_pos", "=", "0.1", "\n", "params", ".", "box_jitter_sz", "=", "0.5", "\n", "params", ".", "maximal_aspect_ratio", "=", "6", "\n", "params", ".", "box_refinement_iter", "=", "5", "\n", "params", ".", "box_refinement_step_length", "=", "1", "\n", "params", ".", "box_refinement_step_decay", "=", "1", "\n", "\n", "params", ".", "net", "=", "NetWithBackbone", "(", "net_path", "=", "'dimp18.pth'", ",", "\n", "use_gpu", "=", "params", ".", "use_gpu", ")", "\n", "\n", "params", ".", "vot_anno_conversion_type", "=", "'preserve_area'", "\n", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default.parameters": [[6, 105], ["pytracking.utils.TrackerParams", "pytracking.utils.TrackerParams", "torch.ones", "pytracking.utils.FeatureParams", "pytracking.features.deep.ATOMResNet18", "pytracking.features.extractor.MultiResolutionExtractor"], "function", ["None"], ["def", "parameters", "(", ")", ":", "\n", "    ", "params", "=", "TrackerParams", "(", ")", "\n", "\n", "params", ".", "debug", "=", "0", "\n", "params", ".", "visualization", "=", "False", "\n", "\n", "params", ".", "use_gpu", "=", "True", "\n", "\n", "# Feature specific parameters", "\n", "shallow_params", "=", "TrackerParams", "(", ")", "\n", "deep_params", "=", "TrackerParams", "(", ")", "\n", "\n", "# Patch sampling parameters", "\n", "params", ".", "max_image_sample_size", "=", "250", "**", "2", "# Maximum image sample size", "\n", "params", ".", "min_image_sample_size", "=", "200", "**", "2", "# Minimum image sample size", "\n", "params", ".", "search_area_scale", "=", "4.5", "# Scale relative to target size", "\n", "\n", "# Conjugate Gradient parameters", "\n", "params", ".", "CG_iter", "=", "5", "# The number of Conjugate Gradient iterations in each update after the first frame", "\n", "params", ".", "init_CG_iter", "=", "100", "# The total number of Conjugate Gradient iterations used in the first frame", "\n", "params", ".", "init_GN_iter", "=", "10", "# The number of Gauss-Newton iterations used in the first frame (only if the projection matrix is updated)", "\n", "params", ".", "post_init_CG_iter", "=", "0", "# CG iterations to run after GN", "\n", "params", ".", "fletcher_reeves", "=", "False", "# Use the Fletcher-Reeves (true) or Polak-Ribiere (false) formula in the Conjugate Gradient", "\n", "params", ".", "standard_alpha", "=", "True", "# Use the standard formula for computing the step length in Conjugate Gradient", "\n", "params", ".", "CG_forgetting_rate", "=", "75", "# Forgetting rate of the last conjugate direction", "\n", "params", ".", "precond_data_param", "=", "0.3", "# Weight of the data term in the preconditioner", "\n", "params", ".", "precond_reg_param", "=", "0.15", "# Weight of the regularization term in the preconditioner", "\n", "params", ".", "precond_proj_param", "=", "35", "# Weight of the projection matrix part in the preconditioner", "\n", "\n", "# Learning parameters", "\n", "shallow_params", ".", "learning_rate", "=", "0.025", "\n", "deep_params", ".", "learning_rate", "=", "0.0075", "\n", "shallow_params", ".", "output_sigma_factor", "=", "1", "/", "16", "\n", "deep_params", ".", "output_sigma_factor", "=", "1", "/", "4", "\n", "\n", "# Training parameters", "\n", "params", ".", "sample_memory_size", "=", "200", "# Memory size", "\n", "params", ".", "train_skipping", "=", "10", "# How often to run training (every n-th frame)", "\n", "\n", "# Detection parameters", "\n", "params", ".", "scale_factors", "=", "1.02", "**", "torch", ".", "arange", "(", "-", "2", ",", "3", ")", ".", "float", "(", ")", "# What scales to use for localization", "\n", "params", ".", "score_upsample_factor", "=", "1", "# How much Fourier upsampling to use", "\n", "params", ".", "score_fusion_strategy", "=", "'weightedsum'", "# Fusion strategy", "\n", "shallow_params", ".", "translation_weight", "=", "0.4", "# Weight of this feature", "\n", "deep_params", ".", "translation_weight", "=", "1", "-", "shallow_params", ".", "translation_weight", "\n", "\n", "# Init augmentation parameters", "\n", "params", ".", "augmentation", "=", "{", "'fliplr'", ":", "True", ",", "\n", "'rotate'", ":", "[", "5", ",", "-", "5", ",", "10", ",", "-", "10", ",", "20", ",", "-", "20", ",", "30", ",", "-", "30", ",", "45", ",", "-", "45", ",", "-", "60", ",", "60", "]", ",", "\n", "'blur'", ":", "[", "(", "2", ",", "0.2", ")", ",", "(", "0.2", ",", "2", ")", ",", "(", "3", ",", "1", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "2", ")", "]", ",", "\n", "'shift'", ":", "[", "(", "6", ",", "6", ")", ",", "(", "-", "6", ",", "6", ")", ",", "(", "6", ",", "-", "6", ")", ",", "(", "-", "6", ",", "-", "6", ")", "]", ",", "\n", "'dropout'", ":", "(", "7", ",", "0.2", ")", "}", "\n", "\n", "# Whether to use augmentation for this feature", "\n", "deep_params", ".", "use_augmentation", "=", "True", "\n", "shallow_params", ".", "use_augmentation", "=", "True", "\n", "\n", "# Factorized convolution parameters", "\n", "# params.use_projection_matrix = True    # Use projection matrix, i.e. use the factorized convolution formulation", "\n", "params", ".", "update_projection_matrix", "=", "True", "# Whether the projection matrix should be optimized or not", "\n", "# params.proj_init_method = 'pca'        # Method for initializing the projection matrix", "\n", "params", ".", "projection_reg", "=", "5e-8", "# Regularization paremeter of the projection matrix", "\n", "shallow_params", ".", "compressed_dim", "=", "16", "# Dimension output of projection matrix for shallow features", "\n", "deep_params", ".", "compressed_dim", "=", "64", "# Dimension output of projection matrix for deep features", "\n", "\n", "# Interpolation parameters", "\n", "params", ".", "interpolation_method", "=", "'bicubic'", "# The kind of interpolation kernel", "\n", "params", ".", "interpolation_bicubic_a", "=", "-", "0.75", "# The parameter for the bicubic interpolation kernel", "\n", "params", ".", "interpolation_centering", "=", "True", "# Center the kernel at the feature sample", "\n", "params", ".", "interpolation_windowing", "=", "False", "# Do additional windowing on the Fourier coefficients of the kernel", "\n", "\n", "# Regularization parameters", "\n", "shallow_params", ".", "use_reg_window", "=", "True", "# Use spatial regularization or not", "\n", "shallow_params", ".", "reg_window_min", "=", "1e-4", "# The minimum value of the regularization window", "\n", "shallow_params", ".", "reg_window_edge", "=", "10e-3", "# The impact of the spatial regularization", "\n", "shallow_params", ".", "reg_window_power", "=", "2", "# The degree of the polynomial to use (e.g. 2 is a quadratic window)", "\n", "shallow_params", ".", "reg_sparsity_threshold", "=", "0.05", "# A relative threshold of which DFT coefficients that should be set to zero", "\n", "\n", "deep_params", ".", "use_reg_window", "=", "True", "# Use spatial regularization or not", "\n", "deep_params", ".", "reg_window_min", "=", "10e-4", "# The minimum value of the regularization window", "\n", "deep_params", ".", "reg_window_edge", "=", "50e-3", "# The impact of the spatial regularization", "\n", "deep_params", ".", "reg_window_power", "=", "2", "# The degree of the polynomial to use (e.g. 2 is a quadratic window)", "\n", "deep_params", ".", "reg_sparsity_threshold", "=", "0.1", "# A relative threshold of which DFT coefficients that should be set to zero", "\n", "\n", "\n", "fparams", "=", "FeatureParams", "(", "feature_params", "=", "[", "shallow_params", ",", "deep_params", "]", ")", "\n", "features", "=", "deep", ".", "ResNet18m1", "(", "output_layers", "=", "[", "'vggconv1'", ",", "'layer3'", "]", ",", "use_gpu", "=", "params", ".", "use_gpu", ",", "fparams", "=", "fparams", ",", "\n", "pool_stride", "=", "[", "2", ",", "1", "]", ",", "normalize_power", "=", "2", ")", "\n", "\n", "params", ".", "features", "=", "MultiResolutionExtractor", "(", "[", "features", "]", ")", "\n", "\n", "return", "params", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters": [[6, 105], ["pytracking.utils.TrackerParams", "pytracking.utils.TrackerParams", "torch.ones", "pytracking.utils.FeatureParams", "pytracking.features.deep.ATOMResNet18", "pytracking.features.extractor.MultiResolutionExtractor"], "function", ["None"], ["def", "parameters", "(", ")", ":", "\n", "    ", "params", "=", "TrackerParams", "(", ")", "\n", "\n", "# These are usually set from outside", "\n", "params", ".", "debug", "=", "0", "# Debug level", "\n", "params", ".", "visualization", "=", "False", "# Do visualization", "\n", "\n", "# Use GPU or not (IoUNet requires this to be True)", "\n", "params", ".", "use_gpu", "=", "True", "\n", "\n", "# Feature specific parameters", "\n", "deep_params", "=", "TrackerParams", "(", ")", "\n", "\n", "# Patch sampling parameters", "\n", "params", ".", "max_image_sample_size", "=", "(", "14", "*", "16", ")", "**", "2", "# Maximum image sample size", "\n", "params", ".", "min_image_sample_size", "=", "(", "14", "*", "16", ")", "**", "2", "# Minimum image sample size", "\n", "params", ".", "search_area_scale", "=", "4", "# Scale relative to target size", "\n", "params", ".", "feature_size_odd", "=", "False", "# Good to use False for even-sized kernels and vice versa", "\n", "\n", "# Optimization parameters", "\n", "params", ".", "CG_iter", "=", "5", "# The number of Conjugate Gradient iterations in each update after the first frame", "\n", "params", ".", "init_CG_iter", "=", "60", "# The total number of Conjugate Gradient iterations used in the first frame", "\n", "params", ".", "init_GN_iter", "=", "6", "# The number of Gauss-Newton iterations used in the first frame (only if the projection matrix is updated)", "\n", "params", ".", "post_init_CG_iter", "=", "0", "# CG iterations to run after GN", "\n", "params", ".", "fletcher_reeves", "=", "False", "# Use the Fletcher-Reeves (true) or Polak-Ribiere (false) formula in the Conjugate Gradient", "\n", "params", ".", "standard_alpha", "=", "True", "# Use the standard formula for computing the step length in Conjugate Gradient", "\n", "params", ".", "CG_forgetting_rate", "=", "None", "# Forgetting rate of the last conjugate direction", "\n", "\n", "# Learning parameters for each feature type", "\n", "deep_params", ".", "learning_rate", "=", "0.0075", "# Learning rate", "\n", "deep_params", ".", "output_sigma_factor", "=", "1", "/", "4", "# Standard deviation of Gaussian label relative to target size", "\n", "\n", "# Training parameters", "\n", "params", ".", "sample_memory_size", "=", "250", "# Memory size", "\n", "params", ".", "train_skipping", "=", "10", "# How often to run training (every n-th frame)", "\n", "\n", "# Online model parameters", "\n", "deep_params", ".", "kernel_size", "=", "(", "4", ",", "4", ")", "# Kernel size of filter", "\n", "deep_params", ".", "compressed_dim", "=", "128", "# Dimension output of projection matrix", "\n", "deep_params", ".", "filter_reg", "=", "1e-1", "# Filter regularization factor", "\n", "deep_params", ".", "projection_reg", "=", "1e-4", "# Projection regularization factor", "\n", "\n", "# Windowing", "\n", "params", ".", "feature_window", "=", "False", "# Perform windowing of features", "\n", "params", ".", "window_output", "=", "True", "# Perform windowing of output scores", "\n", "\n", "# Detection parameters", "\n", "params", ".", "scale_factors", "=", "torch", ".", "ones", "(", "1", ")", "# What scales to use for localization (only one scale if IoUNet is used)", "\n", "params", ".", "score_upsample_factor", "=", "1", "# How much Fourier upsampling to use", "\n", "\n", "# Init data augmentation parameters", "\n", "params", ".", "augmentation", "=", "{", "'fliplr'", ":", "True", ",", "\n", "'rotate'", ":", "[", "5", ",", "-", "5", ",", "10", ",", "-", "10", ",", "20", ",", "-", "20", ",", "30", ",", "-", "30", ",", "45", ",", "-", "45", ",", "-", "60", ",", "60", "]", ",", "\n", "'blur'", ":", "[", "(", "2", ",", "0.2", ")", ",", "(", "0.2", ",", "2", ")", ",", "(", "3", ",", "1", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "2", ")", "]", ",", "\n", "'relativeshift'", ":", "[", "(", "0.6", ",", "0.6", ")", ",", "(", "-", "0.6", ",", "0.6", ")", ",", "(", "0.6", ",", "-", "0.6", ")", ",", "(", "-", "0.6", ",", "-", "0.6", ")", "]", ",", "\n", "'dropout'", ":", "(", "7", ",", "0.2", ")", "}", "\n", "\n", "params", ".", "augmentation_expansion_factor", "=", "2", "# How much to expand sample when doing augmentation", "\n", "params", ".", "random_shift_factor", "=", "1", "/", "3", "# How much random shift to do on each augmented sample", "\n", "deep_params", ".", "use_augmentation", "=", "True", "# Whether to use augmentation for this feature", "\n", "\n", "# Factorized convolution parameters", "\n", "# params.use_projection_matrix = True       # Use projection matrix, i.e. use the factorized convolution formulation", "\n", "params", ".", "update_projection_matrix", "=", "True", "# Whether the projection matrix should be optimized or not", "\n", "params", ".", "proj_init_method", "=", "'randn'", "# Method for initializing the projection matrix", "\n", "params", ".", "filter_init_method", "=", "'randn'", "# Method for initializing the spatial filter", "\n", "params", ".", "projection_activation", "=", "'none'", "# Activation function after projection ('none', 'relu', 'elu' or 'mlu')", "\n", "params", ".", "response_activation", "=", "(", "'mlu'", ",", "0.05", ")", "# Activation function on the output scores ('none', 'relu', 'elu' or 'mlu')", "\n", "\n", "# Advanced localization parameters", "\n", "params", ".", "advanced_localization", "=", "True", "# Use this or not", "\n", "params", ".", "target_not_found_threshold", "=", "-", "1", "# Absolute score threshold to detect target missing", "\n", "params", ".", "distractor_threshold", "=", "100", "# Relative threshold to find distractors", "\n", "params", ".", "hard_negative_threshold", "=", "0.3", "# Relative threshold to find hard negative samples", "\n", "params", ".", "target_neighborhood_scale", "=", "2.2", "# Target neighborhood to remove", "\n", "params", ".", "dispalcement_scale", "=", "0.7", "# Dispacement to consider for distractors", "\n", "params", ".", "hard_negative_learning_rate", "=", "0.02", "# Learning rate if hard negative detected", "\n", "params", ".", "hard_negative_CG_iter", "=", "5", "# Number of optimization iterations to use if hard negative detected", "\n", "params", ".", "update_scale_when_uncertain", "=", "True", "# Update scale or not if distractor is close", "\n", "\n", "# IoUNet parameters", "\n", "params", ".", "iounet_augmentation", "=", "False", "# Use the augmented samples to compute the modulation vector", "\n", "params", ".", "iounet_k", "=", "3", "# Top-k average to estimate final box", "\n", "params", ".", "num_init_random_boxes", "=", "9", "# Num extra random boxes in addition to the classifier prediction", "\n", "params", ".", "box_jitter_pos", "=", "0.1", "# How much to jitter the translation for random boxes", "\n", "params", ".", "box_jitter_sz", "=", "0.5", "# How much to jitter the scale for random boxes", "\n", "params", ".", "maximal_aspect_ratio", "=", "6", "# Limit on the aspect ratio", "\n", "params", ".", "box_refinement_iter", "=", "5", "# Number of iterations for refining the boxes", "\n", "params", ".", "box_refinement_step_length", "=", "1", "# Gradient step length in the bounding box refinement", "\n", "params", ".", "box_refinement_step_decay", "=", "1", "# Multiplicative step length decay (1 means no decay)", "\n", "\n", "# Setup the feature extractor (which includes the IoUNet)", "\n", "deep_fparams", "=", "FeatureParams", "(", "feature_params", "=", "[", "deep_params", "]", ")", "\n", "deep_feat", "=", "deep", ".", "ATOMResNet18", "(", "net_path", "=", "'atom_default.pth'", ",", "output_layers", "=", "[", "'layer3'", "]", ",", "fparams", "=", "deep_fparams", ",", "\n", "normalize_power", "=", "2", ")", "\n", "params", ".", "features", "=", "MultiResolutionExtractor", "(", "[", "deep_feat", "]", ")", "\n", "\n", "params", ".", "vot_anno_conversion_type", "=", "'preserve_area'", "\n", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.__init__.get_tracker_class": [[3, 5], ["None"], "function", ["None"], ["import", "pytracking", ".", "libs", ".", "operation", "as", "operation", "\n", "import", "pytracking", ".", "libs", ".", "fourier", "as", "fourier", "\n", "import", "pytracking", ".", "libs", ".", "dcf", "as", "dcf", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.optim.FactorizedConvProblem.__init__": [[7, 19], ["optim.FactorizedConvProblem.filter_reg.concat"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.concat"], ["\n", "class", "FactorizedConvProblem", "(", "optimization", ".", "L2Problem", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "training_samples", ":", "TensorList", ",", "yf", ":", "TensorList", ",", "reg_filter", ":", "torch", ".", "Tensor", ",", "init_proj_mat", ":", "TensorList", ",", "params", ",", "sample_weights", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "self", ".", "training_samples", "=", "training_samples", "\n", "self", ".", "yf", "=", "complex", ".", "complex", "(", "yf", ")", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ",", "4", ")", "\n", "self", ".", "reg_filter", "=", "reg_filter", "\n", "self", ".", "sample_weights_sqrt", "=", "None", "if", "sample_weights", "is", "None", "else", "sample_weights", ".", "sqrt", "(", ")", "\n", "self", ".", "params", "=", "params", "\n", "\n", "# Sample energy for preconditioner", "\n", "compressed_samples", "=", "complex", ".", "mtimes", "(", "self", ".", "training_samples", ",", "init_proj_mat", ")", "\n", "self", ".", "sample_energy", "=", "complex", ".", "abs_sqr", "(", "compressed_samples", ")", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "self", ".", "reg_energy", "=", "self", ".", "reg_filter", ".", "view", "(", "-", "1", ")", "@", "self", ".", "reg_filter", ".", "view", "(", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.optim.FactorizedConvProblem.__call__": [[20, 50], ["pytracking.operation.conv1x1().apply", "pytracking.operation.conv2d", "pytracking.TensorList().apply", "optim.FactorizedConvProblem.sample_weights.sum", "torch.sum", "pytracking.TensorList().apply.extend", "pytracking.TensorList().apply.extend", "optim.FactorizedConvProblem.sample_weights.sqrt().view", "pytracking.operation.conv1x1", "pytracking.TensorList", "optim.FactorizedConvProblem.sample_weights[].view", "optim.FactorizedConvProblem.filter_reg.apply", "optim.FactorizedConvProblem.projection_reg.apply", "len", "len", "optim.FactorizedConvProblem.sample_weights.sqrt"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv1x1", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.apply"], ["\n", "# Projection energy for preconditioner", "\n", "self", ".", "proj_energy", "=", "2", "*", "fourier", ".", "inner_prod_fs", "(", "yf", ",", "yf", ")", "/", "self", ".", "training_samples", ".", "size", "(", "3", ")", "\n", "\n", "# Filter part of preconditioner", "\n", "self", ".", "diag_M", "=", "(", "1", "-", "self", ".", "params", ".", "precond_reg_param", ")", "*", "(", "self", ".", "params", ".", "precond_data_param", "*", "self", ".", "sample_energy", "+", "\n", "(", "1", "-", "self", ".", "params", ".", "precond_data_param", ")", "*", "self", ".", "sample_energy", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", ")", "+", "self", ".", "params", ".", "precond_reg_param", "*", "self", ".", "reg_energy", "\n", "self", ".", "diag_M", ".", "unsqueeze_", "(", "-", "1", ")", "\n", "\n", "# Projection matrix part of preconditioner", "\n", "self", ".", "diag_M", ".", "extend", "(", "self", ".", "params", ".", "precond_proj_param", "*", "(", "self", ".", "proj_energy", "+", "self", ".", "params", ".", "projection_reg", ")", ")", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "x", ":", "TensorList", ")", ":", "\n", "        ", "\"\"\"\n        Compute residuals\n        :param x: [filters, projection_matrices]\n        :return: [data_terms, filter_regularizations, proj_mat_regularizations]\n        \"\"\"", "\n", "hf", "=", "x", "[", ":", "len", "(", "x", ")", "//", "2", "]", "\n", "P", "=", "x", "[", "len", "(", "x", ")", "//", "2", ":", "]", "\n", "\n", "compressed_samples", "=", "complex", ".", "mtimes", "(", "self", ".", "training_samples", ",", "P", ")", "\n", "residuals", "=", "complex", ".", "mtimes", "(", "compressed_samples", ",", "hf", ".", "permute", "(", "2", ",", "3", ",", "1", ",", "0", ",", "4", ")", ")", "# (h, w, num_samp, num_filt, 2)", "\n", "residuals", "=", "residuals", "-", "self", ".", "yf", "\n", "\n", "if", "self", ".", "sample_weights_sqrt", "is", "not", "None", ":", "\n", "            ", "residuals", "=", "complex", ".", "mult", "(", "self", ".", "sample_weights_sqrt", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", ",", "residuals", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.optim.FactorizedConvProblem.ip_input": [[52, 69], ["pytracking.operation.conv2d().view", "pytracking.operation.conv2d().view", "pytracking.operation.conv2d().view.concat", "len", "pytracking.operation.conv2d().view.clone", "pytracking.operation.conv2d", "pytracking.operation.conv2d", "a_P.view", "b_P.view"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d"], ["", "for", "hfe", ",", "reg_filter", "in", "zip", "(", "hf", ",", "self", ".", "reg_filter", ")", ":", "\n", "            ", "reg_pad1", "=", "min", "(", "reg_filter", ".", "shape", "[", "-", "2", "]", "-", "1", ",", "hfe", ".", "shape", "[", "-", "3", "]", "-", "1", ")", "\n", "reg_pad2", "=", "min", "(", "reg_filter", ".", "shape", "[", "-", "1", "]", "-", "1", ",", "hfe", ".", "shape", "[", "-", "2", "]", "-", "1", ")", "\n", "\n", "# Add part needed for convolution", "\n", "if", "reg_pad2", ">", "0", ":", "\n", "                ", "hfe_left_padd", "=", "complex", ".", "conj", "(", "hfe", "[", "...", ",", "1", ":", "reg_pad2", "+", "1", ",", ":", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "flip", "(", "(", "2", ",", "3", ")", ")", ")", "\n", "hfe_conv", "=", "torch", ".", "cat", "(", "[", "hfe_left_padd", ",", "hfe", "]", ",", "-", "2", ")", "\n", "", "else", ":", "\n", "                ", "hfe_conv", "=", "hfe", ".", "clone", "(", ")", "\n", "\n", "# Shift data to batch dimension", "\n", "", "hfe_conv", "=", "hfe_conv", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "hfe_conv", ".", "shape", "[", "-", "3", "]", ",", "hfe_conv", ".", "shape", "[", "-", "2", "]", ")", "\n", "\n", "# Do first convolution", "\n", "hfe_conv", "=", "F", ".", "conv2d", "(", "hfe_conv", ",", "reg_filter", ",", "padding", "=", "(", "reg_pad1", ",", "reg_pad2", ")", ")", "\n", "\n", "residuals", ".", "append", "(", "hfe_conv", ")", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.optim.FactorizedConvProblem.M1": [[70, 72], ["None"], "methods", ["None"], ["\n", "# Add regularization for projection matrix", "\n", "", "residuals", ".", "extend", "(", "math", ".", "sqrt", "(", "self", ".", "params", ".", "projection_reg", ")", "*", "P", ")", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.optim.ConvProblem.__init__": [[75, 81], ["None"], "methods", ["None"], ["\n", "\n", "", "def", "ip_input", "(", "self", ",", "a", ":", "TensorList", ",", "b", ":", "TensorList", ")", ":", "\n", "        ", "num", "=", "len", "(", "a", ")", "//", "2", "# Number of filters", "\n", "a_filter", "=", "a", "[", ":", "num", "]", "\n", "b_filter", "=", "b", "[", ":", "num", "]", "\n", "a_P", "=", "a", "[", "num", ":", "]", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.optim.ConvProblem.__call__": [[82, 105], ["pytracking.operation.conv2d", "pytracking.TensorList().apply", "torch.nonzero().size", "optim.ConvProblem.sample_weights.sqrt", "torch.sum", "pytracking.TensorList().apply.extend", "optim.ConvProblem.sample_weights.sqrt().view", "pytracking.TensorList", "torch.nonzero", "newweight[].view", "optim.ConvProblem.filter_reg.apply", "optim.ConvProblem.sample_weights.sqrt"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.apply"], ["b_P", "=", "b", "[", "num", ":", "]", "\n", "\n", "# Filter inner product", "\n", "ip_out", "=", "fourier", ".", "inner_prod_fs", "(", "a_filter", ",", "b_filter", ")", "\n", "\n", "# Add projection matrix part", "\n", "ip_out", "+=", "a_P", ".", "reshape", "(", "-", "1", ")", "@", "b_P", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# Have independent inner products for each filter", "\n", "return", "ip_out", ".", "concat", "(", "ip_out", ".", "clone", "(", ")", ")", "\n", "\n", "\n", "", "def", "ip_output", "(", "self", ",", "a", ":", "TensorList", ",", "b", ":", "TensorList", ")", ":", "\n", "        ", "num", "=", "len", "(", "a", ")", "//", "3", "# Number of filters", "\n", "a_data", "=", "a", "[", ":", "num", "]", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ",", "4", ")", "\n", "b_data", "=", "b", "[", ":", "num", "]", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ",", "4", ")", "\n", "a_filt_reg", "=", "a", "[", "num", ":", "2", "*", "num", "]", "\n", "b_filt_reg", "=", "b", "[", "num", ":", "2", "*", "num", "]", "\n", "a_P_reg", "=", "a", "[", "2", "*", "num", ":", "]", "\n", "b_P_reg", "=", "b", "[", "2", "*", "num", ":", "]", "\n", "\n", "ip_data", "=", "sum", "(", "fourier", ".", "inner_prod_fs", "(", "a_data", ",", "b_data", ")", ")", "\n", "ip_filt_reg", "=", "ip_data", ".", "new_zeros", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.optim.ConvProblem.ip_input": [[106, 110], ["pytracking.operation.conv2d().view", "pytracking.operation.conv2d"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d"], ["for", "ar", ",", "br", ",", "res_data", ",", "reg_filter", "in", "zip", "(", "a_filt_reg", ",", "b_filt_reg", ",", "a_data", ",", "self", ".", "reg_filter", ")", ":", "\n", "            ", "reg_pad2", "=", "min", "(", "reg_filter", ".", "shape", "[", "-", "1", "]", "-", "1", ",", "res_data", ".", "shape", "[", "-", "2", "]", "-", "1", ")", "\n", "arp", "=", "ar", ".", "reshape", "(", "1", ",", "-", "1", ",", "2", ",", "ar", ".", "shape", "[", "2", "]", ",", "ar", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "brp", "=", "br", ".", "reshape", "(", "1", ",", "-", "1", ",", "2", ",", "br", ".", "shape", "[", "2", "]", ",", "br", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "ip_filt_reg", "+=", "fourier", ".", "inner_prod_fs", "(", "arp", "[", ":", ",", ":", ",", ":", ",", "2", "*", "reg_pad2", ":", ",", ":", "]", ",", "brp", "[", ":", ",", ":", ",", ":", ",", "2", "*", "reg_pad2", ":", ",", ":", "]", ")", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.initialize_features": [[17, 21], ["getattr", "atom.ATOM.params.features.initialize"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.initialize"], ["    ", "def", "initialize_features", "(", "self", ")", ":", "\n", "        ", "if", "not", "getattr", "(", "self", ",", "'features_initialized'", ",", "False", ")", ":", "\n", "            ", "self", ".", "params", ".", "features", ".", "initialize", "(", ")", "\n", "", "self", ".", "features_initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.initialize": [[23, 133], ["atom.ATOM.initialize_features", "atom.ATOM.params.features.set_is_color", "atom.ATOM.params.features.get_fparams", "time.time", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "torch.prod().item", "getattr", "max", "atom.ATOM.params.features.size", "atom.ATOM.fparams.attribute", "atom.ATOM.fparams.attribute", "getattr", "atom.ATOM.init_learning", "pytracking.features.preprocessing.numpy_to_torch", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "atom.ATOM.generate_init_samples", "atom.ATOM.init_projection_matrix", "atom.ATOM.preprocess_sample", "atom.ATOM.init_label_function", "atom.ATOM.init_memory", "atom.ATOM.init_optimization", "atom.ATOM.pos.clone", "hasattr", "math.sqrt", "atom.ATOM.params.features.stride", "getattr", "getattr", "atom.ATOM.init_iou_net", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "math.sqrt", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "ValueError", "max", "pytracking.dcf.hann2d_clipped().to", "pytracking.dcf.hann2d().to", "time.time", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "max", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "pytracking.dcf.hann2d_clipped", "pytracking.dcf.hann2d", "atom.ATOM.output_sz.long", "atom.ATOM.output_sz.long", "atom.ATOM.output_sz.long"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.initialize_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.set_is_color", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.get_fparams", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_learning", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.numpy_to_torch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.generate_init_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_projection_matrix", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.preprocess_sample", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_label_function", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_memory", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_optimization", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.stride", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_iou_net", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann2d_clipped", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann2d"], ["", "def", "initialize", "(", "self", ",", "image", ",", "info", ":", "dict", ")", "->", "dict", ":", "\n", "        ", "state", "=", "info", "[", "'init_bbox'", "]", "\n", "\n", "# Initialize some stuff", "\n", "self", ".", "frame_num", "=", "1", "\n", "if", "not", "hasattr", "(", "self", ".", "params", ",", "'device'", ")", ":", "\n", "            ", "self", ".", "params", ".", "device", "=", "'cuda'", "if", "self", ".", "params", ".", "use_gpu", "else", "'cpu'", "\n", "\n", "# Initialize features", "\n", "", "self", ".", "initialize_features", "(", ")", "\n", "\n", "# Check if image is color", "\n", "self", ".", "params", ".", "features", ".", "set_is_color", "(", "image", ".", "shape", "[", "2", "]", "==", "3", ")", "\n", "\n", "# Get feature specific params", "\n", "self", ".", "fparams", "=", "self", ".", "params", ".", "features", ".", "get_fparams", "(", "'feature_params'", ")", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Get position and size", "\n", "self", ".", "pos", "=", "torch", ".", "Tensor", "(", "[", "state", "[", "1", "]", "+", "(", "state", "[", "3", "]", "-", "1", ")", "/", "2", ",", "state", "[", "0", "]", "+", "(", "state", "[", "2", "]", "-", "1", ")", "/", "2", "]", ")", "\n", "self", ".", "target_sz", "=", "torch", ".", "Tensor", "(", "[", "state", "[", "3", "]", ",", "state", "[", "2", "]", "]", ")", "\n", "\n", "# Set search area", "\n", "self", ".", "target_scale", "=", "1.0", "\n", "search_area", "=", "torch", ".", "prod", "(", "self", ".", "target_sz", "*", "self", ".", "params", ".", "search_area_scale", ")", ".", "item", "(", ")", "\n", "if", "search_area", ">", "self", ".", "params", ".", "max_image_sample_size", ":", "\n", "            ", "self", ".", "target_scale", "=", "math", ".", "sqrt", "(", "search_area", "/", "self", ".", "params", ".", "max_image_sample_size", ")", "\n", "", "elif", "search_area", "<", "self", ".", "params", ".", "min_image_sample_size", ":", "\n", "            ", "self", ".", "target_scale", "=", "math", ".", "sqrt", "(", "search_area", "/", "self", ".", "params", ".", "min_image_sample_size", ")", "\n", "\n", "# Check if IoUNet is used", "\n", "", "self", ".", "use_iou_net", "=", "getattr", "(", "self", ".", "params", ",", "'use_iou_net'", ",", "True", ")", "\n", "\n", "# Target size in base scale", "\n", "self", ".", "base_target_sz", "=", "self", ".", "target_sz", "/", "self", ".", "target_scale", "\n", "\n", "# Use odd square search area and set sizes", "\n", "feat_max_stride", "=", "max", "(", "self", ".", "params", ".", "features", ".", "stride", "(", ")", ")", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'search_area_shape'", ",", "'square'", ")", "==", "'square'", ":", "\n", "            ", "self", ".", "img_sample_sz", "=", "torch", ".", "round", "(", "torch", ".", "sqrt", "(", "torch", ".", "prod", "(", "self", ".", "base_target_sz", "*", "self", ".", "params", ".", "search_area_scale", ")", ")", ")", "*", "torch", ".", "ones", "(", "2", ")", "\n", "", "elif", "self", ".", "params", ".", "search_area_shape", "==", "'initrect'", ":", "\n", "            ", "self", ".", "img_sample_sz", "=", "torch", ".", "round", "(", "self", ".", "base_target_sz", "*", "self", ".", "params", ".", "search_area_scale", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown search area shape'", ")", "\n", "", "if", "self", ".", "params", ".", "feature_size_odd", ":", "\n", "            ", "self", ".", "img_sample_sz", "+=", "feat_max_stride", "-", "self", ".", "img_sample_sz", "%", "(", "2", "*", "feat_max_stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_sample_sz", "+=", "feat_max_stride", "-", "(", "self", ".", "img_sample_sz", "+", "feat_max_stride", ")", "%", "(", "2", "*", "feat_max_stride", ")", "\n", "\n", "# Set sizes", "\n", "", "self", ".", "img_support_sz", "=", "self", ".", "img_sample_sz", "\n", "self", ".", "feature_sz", "=", "self", ".", "params", ".", "features", ".", "size", "(", "self", ".", "img_sample_sz", ")", "\n", "self", ".", "output_sz", "=", "self", ".", "params", ".", "score_upsample_factor", "*", "self", ".", "img_support_sz", "# Interpolated size of the output", "\n", "self", ".", "kernel_size", "=", "self", ".", "fparams", ".", "attribute", "(", "'kernel_size'", ")", "\n", "\n", "self", ".", "iou_img_sample_sz", "=", "self", ".", "img_sample_sz", "\n", "\n", "# Optimization options", "\n", "self", ".", "params", ".", "precond_learning_rate", "=", "self", ".", "fparams", ".", "attribute", "(", "'learning_rate'", ")", "\n", "if", "self", ".", "params", ".", "CG_forgetting_rate", "is", "None", "or", "max", "(", "self", ".", "params", ".", "precond_learning_rate", ")", ">=", "1", ":", "\n", "            ", "self", ".", "params", ".", "direction_forget_factor", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "params", ".", "direction_forget_factor", "=", "(", "1", "-", "max", "(", "self", ".", "params", ".", "precond_learning_rate", ")", ")", "**", "self", ".", "params", ".", "CG_forgetting_rate", "\n", "\n", "", "self", ".", "output_window", "=", "None", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'window_output'", ",", "False", ")", ":", "\n", "            ", "if", "getattr", "(", "self", ".", "params", ",", "'use_clipped_window'", ",", "False", ")", ":", "\n", "                ", "self", ".", "output_window", "=", "dcf", ".", "hann2d_clipped", "(", "self", ".", "output_sz", ".", "long", "(", ")", ",", "self", ".", "output_sz", ".", "long", "(", ")", "*", "self", ".", "params", ".", "effective_search_area", "/", "self", ".", "params", ".", "search_area_scale", ",", "centered", "=", "False", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "output_window", "=", "dcf", ".", "hann2d", "(", "self", ".", "output_sz", ".", "long", "(", ")", ",", "centered", "=", "False", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "\n", "\n", "# Initialize some learning things", "\n", "", "", "self", ".", "init_learning", "(", ")", "\n", "\n", "# Convert image", "\n", "im", "=", "numpy_to_torch", "(", "image", ")", "\n", "self", ".", "im", "=", "im", "# For debugging only", "\n", "\n", "# Setup scale bounds", "\n", "self", ".", "image_sz", "=", "torch", ".", "Tensor", "(", "[", "im", ".", "shape", "[", "2", "]", ",", "im", ".", "shape", "[", "3", "]", "]", ")", "\n", "self", ".", "min_scale_factor", "=", "torch", ".", "max", "(", "10", "/", "self", ".", "base_target_sz", ")", "\n", "self", ".", "max_scale_factor", "=", "torch", ".", "min", "(", "self", ".", "image_sz", "/", "self", ".", "base_target_sz", ")", "\n", "\n", "# Extract and transform sample", "\n", "x", "=", "self", ".", "generate_init_samples", "(", "im", ")", "\n", "\n", "# Initialize iounet", "\n", "if", "self", ".", "use_iou_net", ":", "\n", "            ", "self", ".", "init_iou_net", "(", ")", "\n", "\n", "# Initialize projection matrix", "\n", "", "self", ".", "init_projection_matrix", "(", "x", ")", "\n", "\n", "# Transform to get the training sample", "\n", "train_x", "=", "self", ".", "preprocess_sample", "(", "x", ")", "\n", "\n", "# Generate label function", "\n", "init_y", "=", "self", ".", "init_label_function", "(", "train_x", ")", "\n", "\n", "# Init memory", "\n", "self", ".", "init_memory", "(", "train_x", ")", "\n", "\n", "# Init optimizer and do initial optimization", "\n", "self", ".", "init_optimization", "(", "train_x", ",", "init_y", ")", "\n", "\n", "self", ".", "pos_iounet", "=", "self", ".", "pos", ".", "clone", "(", ")", "\n", "\n", "out", "=", "{", "'time'", ":", "time", ".", "time", "(", ")", "-", "tic", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_optimization": [[135, 268], ["getattr", "pytracking.TensorList", "getattr", "getattr", "atom.ATOM.project_sample", "zip", "optim.ConvProblem", "atom.ATOM.filter_optimizer.run", "getattr", "optim.FactorizedConvProblem", "atom.ATOM.filter.concat", "getattr", "isinstance", "pytracking.libs.optimization.ConjugateGradient", "atom.ATOM.filter_optimizer.run", "x.new_zeros", "ValueError", "atom.ATOM.fparams.attribute", "pytracking.libs.optimization.GaussNewtonCG", "atom.ATOM.joint_optimizer.run", "zip", "RuntimeError", "pytracking.libs.optimization.ConjugateGradientRLS", "zip", "f.normal_", "pytracking.libs.optimization.GaussNewtonCGRLS", "atom.ATOM.joint_optimizer.run", "atom.ATOM.joint_optimizer.run", "getattr", "pytracking.libs.optimization.GradientDescentL2", "pytracking.libs.optimization.GradientDescentL2", "open", "f.write", "pytracking.libs.optimization.GradientDescentL2RLS", "f.numel", "pytracking.libs.optimization.GradientDescentL2RLS", "v.item"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.project_sample", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.concat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run"], ["", "def", "init_optimization", "(", "self", ",", "train_x", ",", "init_y", ")", ":", "\n", "# Initialize filter", "\n", "        ", "filter_init_method", "=", "getattr", "(", "self", ".", "params", ",", "'filter_init_method'", ",", "'zeros'", ")", "\n", "self", ".", "filter", "=", "TensorList", "(", "\n", "[", "x", ".", "new_zeros", "(", "1", ",", "cdim", ",", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", ")", "for", "x", ",", "cdim", ",", "sz", "in", "zip", "(", "train_x", ",", "self", ".", "compressed_dim", ",", "self", ".", "kernel_size", ")", "]", ")", "\n", "if", "filter_init_method", "==", "'zeros'", ":", "\n", "            ", "pass", "\n", "", "elif", "filter_init_method", "==", "'randn'", ":", "\n", "            ", "for", "f", "in", "self", ".", "filter", ":", "\n", "                ", "f", ".", "normal_", "(", "0", ",", "1", "/", "f", ".", "numel", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown \"filter_init_method\"'", ")", "\n", "\n", "# Get parameters", "\n", "", "self", ".", "params", ".", "update_projection_matrix", "=", "getattr", "(", "self", ".", "params", ",", "'update_projection_matrix'", ",", "True", ")", "and", "self", ".", "params", ".", "use_projection_matrix", "\n", "\n", "# GradientDescentL2RLS", "\n", "# optimizer = getattr(self.params, 'optimizer', 'GradientDescentL2RLS')", "\n", "\n", "# GradientDescentL2", "\n", "# optimizer = getattr(self.params, 'optimizer', 'GradientDescentL2')", "\n", "\n", "# GaussNewtonCG", "\n", "optimizer", "=", "getattr", "(", "self", ".", "params", ",", "'optimizer'", ",", "'GaussNewtonCG'", ")", "\n", "\n", "# GaussNewtonCGRLS", "\n", "# optimizer = getattr(self.params, 'optimizer', 'GaussNewtonCGRLS')", "\n", "\n", "# Setup factorized joint optimization", "\n", "if", "self", ".", "params", ".", "update_projection_matrix", ":", "\n", "            ", "self", ".", "joint_problem", "=", "FactorizedConvProblem", "(", "self", ".", "init_training_samples", ",", "init_y", ",", "self", ".", "filter_reg", ",", "\n", "self", ".", "fparams", ".", "attribute", "(", "'projection_reg'", ")", ",", "self", ".", "params", ",", "self", ".", "init_sample_weights", ",", "\n", "self", ".", "projection_activation", ",", "self", ".", "response_activation", ")", "\n", "\n", "# Variable containing both filter and projection matrix", "\n", "joint_var", "=", "self", ".", "filter", ".", "concat", "(", "self", ".", "projection_matrix", ")", "\n", "\n", "# Initialize optimizer", "\n", "analyze_convergence", "=", "getattr", "(", "self", ".", "params", ",", "'analyze_convergence'", ",", "False", ")", "\n", "if", "optimizer", "==", "'GaussNewtonCG'", ":", "\n", "                ", "self", ".", "joint_optimizer", "=", "GaussNewtonCG", "(", "self", ".", "joint_problem", ",", "joint_var", ",", "debug", "=", "(", "self", ".", "params", ".", "debug", ">=", "1", ")", ",", "\n", "plotting", "=", "(", "self", ".", "params", ".", "debug", ">=", "3", ")", ",", "analyze", "=", "analyze_convergence", ",", "\n", "visdom", "=", "self", ".", "visdom", ")", "\n", "", "elif", "optimizer", "==", "'GaussNewtonCGRLS'", ":", "\n", "                ", "self", ".", "n_RLS", "=", "128", "\n", "self", ".", "k_RLS", "=", "4", "\n", "self", ".", "joint_optimizer", "=", "GaussNewtonCGRLS", "(", "self", ".", "joint_problem", ",", "joint_var", ",", "self", ".", "n_RLS", ",", "self", ".", "k_RLS", ",", "debug", "=", "(", "self", ".", "params", ".", "debug", ">=", "1", ")", ",", "\n", "plotting", "=", "(", "self", ".", "params", ".", "debug", ">=", "3", ")", ",", "analyze", "=", "analyze_convergence", ",", "\n", "visdom", "=", "self", ".", "visdom", ")", "\n", "", "elif", "optimizer", "==", "'GradientDescentL2'", ":", "\n", "                ", "self", ".", "params", ".", "optimizer_step_length", "=", "0.0000002", "\n", "self", ".", "params", ".", "optimizer_momentum", "=", "0.9", "\n", "self", ".", "joint_optimizer", "=", "GradientDescentL2", "(", "self", ".", "joint_problem", ",", "joint_var", ",", "self", ".", "params", ".", "optimizer_step_length", ",", "self", ".", "params", ".", "optimizer_momentum", ",", "plotting", "=", "(", "self", ".", "params", ".", "debug", ">=", "3", ")", ",", "debug", "=", "(", "self", ".", "params", ".", "debug", ">=", "1", ")", ",", "\n", "visdom", "=", "self", ".", "visdom", ")", "\n", "", "elif", "optimizer", "==", "'GradientDescentL2RLS'", ":", "\n", "                ", "self", ".", "params", ".", "optimizer_step_length", "=", "0.0000002", "\n", "self", ".", "params", ".", "optimizer_momentum", "=", "0.9", "\n", "self", ".", "n_RLS", "=", "128", "\n", "self", ".", "k_RLS", "=", "4", "\n", "self", ".", "joint_optimizer", "=", "GradientDescentL2RLS", "(", "self", ".", "joint_problem", ",", "joint_var", ",", "self", ".", "n_RLS", ",", "self", ".", "k_RLS", ",", "self", ".", "params", ".", "optimizer_step_length", ",", "self", ".", "params", ".", "optimizer_momentum", ",", "plotting", "=", "(", "self", ".", "params", ".", "debug", ">=", "3", ")", ",", "debug", "=", "(", "self", ".", "params", ".", "debug", ">=", "1", ")", ",", "\n", "visdom", "=", "self", ".", "visdom", ")", "\n", "\n", "# Do joint optimization", "\n", "", "if", "isinstance", "(", "self", ".", "params", ".", "init_CG_iter", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "self", ".", "joint_optimizer", ".", "run", "(", "self", ".", "params", ".", "init_CG_iter", ")", "\n", "", "else", ":", "\n", "                ", "if", "optimizer", "==", "'GaussNewtonCG'", "or", "optimizer", "==", "'GaussNewtonCGRLS'", ":", "\n", "                    ", "self", ".", "joint_optimizer", ".", "run", "(", "self", ".", "params", ".", "init_CG_iter", "//", "self", ".", "params", ".", "init_GN_iter", ",", "self", ".", "params", ".", "init_GN_iter", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "joint_optimizer", ".", "run", "(", "self", ".", "params", ".", "init_CG_iter", "*", "2", "+", "self", ".", "params", ".", "init_GN_iter", ")", "\n", "\n", "\n", "", "", "if", "analyze_convergence", ":", "\n", "                ", "opt_name", "=", "'CG'", "if", "getattr", "(", "self", ".", "params", ",", "'CG_optimizer'", ",", "True", ")", "else", "'GD'", "\n", "for", "val_name", ",", "values", "in", "zip", "(", "[", "'loss'", ",", "'gradient'", "]", ",", "[", "self", ".", "joint_optimizer", ".", "losses", ",", "self", ".", "joint_optimizer", ".", "gradient_mags", "]", ")", ":", "\n", "                    ", "val_str", "=", "' '", ".", "join", "(", "[", "'{:.8e}'", ".", "format", "(", "v", ".", "item", "(", ")", ")", "for", "v", "in", "values", "]", ")", "\n", "file_name", "=", "'{}_{}.txt'", ".", "format", "(", "opt_name", ",", "val_name", ")", "\n", "with", "open", "(", "file_name", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "val_str", "+", "'\\n'", ")", "\n", "", "", "raise", "RuntimeError", "(", "'Exiting'", ")", "\n", "\n", "# GradientDescentL2RLS", "\n", "", "", "optimizer", "=", "getattr", "(", "self", ".", "params", ",", "'optimizer'", ",", "'GradientDescentL2RLS'", ")", "\n", "# Re-project samples with the new projection matrix", "\n", "compressed_samples", "=", "self", ".", "project_sample", "(", "self", ".", "init_training_samples", ",", "self", ".", "projection_matrix", ")", "\n", "for", "train_samp", ",", "init_samp", "in", "zip", "(", "self", ".", "training_samples", ",", "compressed_samples", ")", ":", "\n", "            ", "train_samp", "[", ":", "init_samp", ".", "shape", "[", "0", "]", ",", "...", "]", "=", "init_samp", "\n", "\n", "", "self", ".", "hinge_mask", "=", "None", "\n", "\n", "# Initialize optimizer", "\n", "self", ".", "conv_problem", "=", "ConvProblem", "(", "self", ".", "training_samples", ",", "self", ".", "y", ",", "self", ".", "filter_reg", ",", "self", ".", "sample_weights", ",", "self", ".", "response_activation", ")", "\n", "\n", "if", "optimizer", "==", "'GaussNewtonCG'", ":", "\n", "            ", "self", ".", "filter_optimizer", "=", "ConjugateGradient", "(", "self", ".", "conv_problem", ",", "self", ".", "filter", ",", "fletcher_reeves", "=", "self", ".", "params", ".", "fletcher_reeves", ",", "\n", "direction_forget_factor", "=", "self", ".", "params", ".", "direction_forget_factor", ",", "debug", "=", "(", "self", ".", "params", ".", "debug", ">=", "1", ")", ",", "\n", "plotting", "=", "(", "self", ".", "params", ".", "debug", ">=", "3", ")", ",", "visdom", "=", "self", ".", "visdom", ")", "\n", "", "elif", "optimizer", "==", "'GaussNewtonCGRLS'", ":", "\n", "            ", "self", ".", "n_RLS", "=", "128", "\n", "self", ".", "k_RLS", "=", "4", "\n", "self", ".", "filter_optimizer", "=", "ConjugateGradientRLS", "(", "self", ".", "conv_problem", ",", "self", ".", "filter", ",", "self", ".", "n_RLS", ",", "self", ".", "k_RLS", ",", "fletcher_reeves", "=", "self", ".", "params", ".", "fletcher_reeves", ",", "\n", "direction_forget_factor", "=", "self", ".", "params", ".", "direction_forget_factor", ",", "debug", "=", "(", "self", ".", "params", ".", "debug", ">=", "1", ")", ",", "\n", "plotting", "=", "(", "self", ".", "params", ".", "debug", ">=", "3", ")", ",", "visdom", "=", "self", ".", "visdom", ")", "\n", "", "elif", "optimizer", "==", "'GradientDescentL2'", ":", "\n", "            ", "self", ".", "params", ".", "optimizer_step_length", "=", "0.0000002", "\n", "self", ".", "filter_optimizer", "=", "GradientDescentL2", "(", "self", ".", "conv_problem", ",", "self", ".", "filter", ",", "self", ".", "params", ".", "optimizer_step_length", ",", "\n", "self", ".", "params", ".", "optimizer_momentum", ",", "debug", "=", "(", "self", ".", "params", ".", "debug", ">=", "1", ")", ",", "\n", "plotting", "=", "(", "self", ".", "params", ".", "debug", ">=", "3", ")", ",", "visdom", "=", "self", ".", "visdom", ")", "\n", "", "elif", "optimizer", "==", "'GradientDescentL2RLS'", ":", "\n", "            ", "self", ".", "params", ".", "optimizer_step_length", "=", "0.0000002", "\n", "self", ".", "params", ".", "optimizer_momentum", "=", "0.9", "\n", "self", ".", "n_RLS", "=", "128", "\n", "self", ".", "k_RLS", "=", "4", "\n", "self", ".", "filter_optimizer", "=", "GradientDescentL2RLS", "(", "self", ".", "conv_problem", ",", "self", ".", "filter", ",", "self", ".", "n_RLS", ",", "self", ".", "k_RLS", ",", "self", ".", "params", ".", "optimizer_step_length", ",", "\n", "self", ".", "params", ".", "optimizer_momentum", ",", "debug", "=", "(", "self", ".", "params", ".", "debug", ">=", "1", ")", ",", "\n", "plotting", "=", "(", "self", ".", "params", ".", "debug", ">=", "3", ")", ",", "visdom", "=", "self", ".", "visdom", ")", "\n", "\n", "# Transfer losses from previous optimization", "\n", "", "if", "self", ".", "params", ".", "update_projection_matrix", ":", "\n", "            ", "self", ".", "filter_optimizer", ".", "residuals", "=", "self", ".", "joint_optimizer", ".", "residuals", "\n", "self", ".", "filter_optimizer", ".", "losses", "=", "self", ".", "joint_optimizer", ".", "losses", "\n", "# self.filter_optimizer.Pc = self.joint_optimizer.Pc", "\n", "\n", "", "if", "not", "self", ".", "params", ".", "update_projection_matrix", ":", "\n", "            ", "self", ".", "filter_optimizer", ".", "run", "(", "self", ".", "params", ".", "init_CG_iter", ")", "\n", "\n", "# Post optimization", "\n", "", "self", ".", "filter_optimizer", ".", "run", "(", "self", ".", "params", ".", "post_init_CG_iter", ")", "\n", "\n", "# Free memory", "\n", "del", "self", ".", "init_training_samples", "\n", "if", "self", ".", "params", ".", "use_projection_matrix", ":", "\n", "            ", "del", "self", ".", "joint_problem", ",", "self", ".", "joint_optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.track": [[270, 347], ["pytracking.features.preprocessing.numpy_to_torch", "atom.ATOM.pos.round", "atom.ATOM.extract_processed_sample", "atom.ATOM.apply_filter", "pytracking.TensorList", "atom.ATOM.localize_target", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "atom.ATOM.visdom.register", "atom.ATOM.visdom.register", "pytracking.TensorList", "atom.ATOM.get_label_function", "atom.ATOM.update_memory", "atom.ATOM.filter_optimizer.run", "atom.ATOM.pos_iounet.clone", "torch.cat.tolist", "torch.cat.tolist", "torch.cat.tolist", "getattr", "atom.ATOM.refine_target_box", "getattr", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "pytracking.utils.plotting.show_tensor", "atom.ATOM.filter_optimizer.run", "getattr", "atom.ATOM.update_state", "atom.ATOM.update_state"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.numpy_to_torch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.extract_processed_sample", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.localize_target", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_label_function", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_memory", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.refine_target_box", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.show_tensor", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_state", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_state"], ["", "", "def", "track", "(", "self", ",", "image", ")", "->", "dict", ":", "\n", "        ", "self", ".", "debug_info", "=", "{", "}", "\n", "\n", "self", ".", "frame_num", "+=", "1", "\n", "self", ".", "debug_info", "[", "'frame_num'", "]", "=", "self", ".", "frame_num", "\n", "\n", "# Convert image", "\n", "im", "=", "numpy_to_torch", "(", "image", ")", "\n", "self", ".", "im", "=", "im", "# For debugging only", "\n", "\n", "# ------- LOCALIZATION ------- #", "\n", "\n", "# Get sample", "\n", "sample_pos", "=", "self", ".", "pos", ".", "round", "(", ")", "\n", "sample_scales", "=", "self", ".", "target_scale", "*", "self", ".", "params", ".", "scale_factors", "\n", "test_x", "=", "self", ".", "extract_processed_sample", "(", "im", ",", "self", ".", "pos", ",", "sample_scales", ",", "self", ".", "img_sample_sz", ")", "\n", "\n", "# Compute scores", "\n", "scores_raw_inputmean", "=", "self", ".", "apply_filter", "(", "test_x", ")", "\n", "scores_raw", "=", "TensorList", "(", "[", "scores_raw_inputmean", "[", "0", "]", "[", "0", "]", "]", ")", "\n", "inputmean", "=", "scores_raw_inputmean", "[", "0", "]", "[", "1", "]", "\n", "\n", "translation_vec", ",", "scale_ind", ",", "s", ",", "flag", "=", "self", ".", "localize_target", "(", "scores_raw", ")", "\n", "\n", "# Update position and scale", "\n", "if", "flag", "!=", "'not_found'", ":", "\n", "            ", "if", "self", ".", "use_iou_net", ":", "\n", "                ", "update_scale_flag", "=", "getattr", "(", "self", ".", "params", ",", "'update_scale_when_uncertain'", ",", "True", ")", "or", "flag", "!=", "'uncertain'", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'use_classifier'", ",", "True", ")", ":", "\n", "                    ", "self", ".", "update_state", "(", "sample_pos", "+", "translation_vec", ")", "\n", "", "self", ".", "refine_target_box", "(", "sample_pos", ",", "sample_scales", "[", "scale_ind", "]", ",", "scale_ind", ",", "update_scale_flag", ")", "\n", "", "elif", "getattr", "(", "self", ".", "params", ",", "'use_classifier'", ",", "True", ")", ":", "\n", "                ", "self", ".", "update_state", "(", "sample_pos", "+", "translation_vec", ",", "sample_scales", "[", "scale_ind", "]", ")", "\n", "\n", "", "", "score_map", "=", "s", "[", "scale_ind", ",", "...", "]", "\n", "max_score", "=", "torch", ".", "max", "(", "score_map", ")", ".", "item", "(", ")", "\n", "self", ".", "debug_info", "[", "'max_score'", "]", "=", "max_score", "\n", "self", ".", "debug_info", "[", "'flag'", "]", "=", "flag", "\n", "\n", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "            ", "self", ".", "visdom", ".", "register", "(", "score_map", ",", "'heatmap'", ",", "2", ",", "'Score Map'", ")", "\n", "self", ".", "visdom", ".", "register", "(", "self", ".", "debug_info", ",", "'info_dict'", ",", "1", ",", "'Status'", ")", "\n", "", "elif", "self", ".", "params", ".", "debug", ">=", "2", ":", "\n", "            ", "show_tensor", "(", "score_map", ",", "5", ",", "title", "=", "'Max score = {:.2f}'", ".", "format", "(", "max_score", ")", ")", "\n", "\n", "# ------- UPDATE ------- #", "\n", "\n", "# Check flags and set learning rate if hard negative", "\n", "", "update_flag", "=", "flag", "not", "in", "[", "'not_found'", ",", "'uncertain'", "]", "\n", "hard_negative", "=", "(", "flag", "==", "'hard_negative'", ")", "\n", "learning_rate", "=", "self", ".", "params", ".", "hard_negative_learning_rate", "if", "hard_negative", "else", "None", "\n", "\n", "if", "update_flag", ":", "\n", "# Get train sample", "\n", "            ", "train_x", "=", "TensorList", "(", "[", "x", "[", "scale_ind", ":", "scale_ind", "+", "1", ",", "...", "]", "for", "x", "in", "test_x", "]", ")", "\n", "\n", "# Create label for sample", "\n", "train_y", "=", "self", ".", "get_label_function", "(", "sample_pos", ",", "sample_scales", "[", "scale_ind", "]", ")", "\n", "\n", "# Update memory", "\n", "self", ".", "update_memory", "(", "train_x", ",", "train_y", ",", "learning_rate", ")", "\n", "\n", "# Train filter", "\n", "", "if", "hard_negative", ":", "\n", "            ", "self", ".", "filter_optimizer", ".", "run", "(", "self", ".", "params", ".", "hard_negative_CG_iter", "*", "2", "+", "1", ")", "\n", "", "elif", "(", "self", ".", "frame_num", "-", "1", ")", "%", "self", ".", "params", ".", "train_skipping", "==", "0", ":", "\n", "            ", "self", ".", "filter_optimizer", ".", "run", "(", "self", ".", "params", ".", "CG_iter", "*", "2", "+", "1", ")", "\n", "\n", "# Set the pos of the tracker to iounet pos", "\n", "", "if", "self", ".", "use_iou_net", "and", "flag", "!=", "'not_found'", ":", "\n", "            ", "self", ".", "pos", "=", "self", ".", "pos_iounet", ".", "clone", "(", ")", "\n", "\n", "# Return new state", "\n", "", "new_state", "=", "torch", ".", "cat", "(", "(", "self", ".", "pos", "[", "[", "1", ",", "0", "]", "]", "-", "(", "self", ".", "target_sz", "[", "[", "1", ",", "0", "]", "]", "-", "1", ")", "/", "2", ",", "self", ".", "target_sz", "[", "[", "1", ",", "0", "]", "]", ")", ")", "\n", "\n", "out", "=", "{", "'target_bbox'", ":", "new_state", ".", "tolist", "(", ")", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.apply_filter": [[349, 351], ["pytracking.operation.conv2d"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d"], ["", "def", "apply_filter", "(", "self", ",", "sample_x", ":", "TensorList", ")", ":", "\n", "        ", "return", "operation", ".", "conv2d", "(", "sample_x", ",", "self", ".", "filter", ",", "mode", "=", "'same'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.localize_target": [[352, 388], ["atom.ATOM.fparams.attribute", "enumerate", "pytracking.fourier.sum_fs", "pytracking.fourier.sample_fs", "getattr", "pytracking.dcf.max2d", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "max_disp.float().cpu.float().cpu.float().cpu", "pytracking.fourier.cfft2", "zip", "pytracking.fourier.shift_fs", "atom.ATOM.localize_advanced", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scores_raw.size", "scores_raw.size", "getattr", "max_disp.float().cpu.float().cpu.float", "disp[].view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.sum_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.sample_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.max2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.cfft2", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.shift_fs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.localize_advanced", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["", "def", "localize_target", "(", "self", ",", "scores_raw", ")", ":", "\n", "# Weighted sum (if multiple features) with interpolation in fourier domain", "\n", "        ", "weight", "=", "self", ".", "fparams", ".", "attribute", "(", "'translation_weight'", ",", "1.0", ")", "\n", "scores_raw", "=", "weight", "*", "scores_raw", "\n", "sf_weighted", "=", "fourier", ".", "cfft2", "(", "scores_raw", ")", "/", "(", "scores_raw", ".", "size", "(", "2", ")", "*", "scores_raw", ".", "size", "(", "3", ")", ")", "\n", "for", "i", ",", "(", "sz", ",", "ksz", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "feature_sz", ",", "self", ".", "kernel_size", ")", ")", ":", "\n", "            ", "sf_weighted", "[", "i", "]", "=", "fourier", ".", "shift_fs", "(", "sf_weighted", "[", "i", "]", ",", "math", ".", "pi", "*", "(", "1", "-", "torch", ".", "Tensor", "(", "[", "ksz", "[", "0", "]", "%", "2", ",", "ksz", "[", "1", "]", "%", "2", "]", ")", "/", "sz", ")", ")", "\n", "\n", "", "scores_fs", "=", "fourier", ".", "sum_fs", "(", "sf_weighted", ")", "\n", "scores", "=", "fourier", ".", "sample_fs", "(", "scores_fs", ",", "self", ".", "output_sz", ")", "\n", "\n", "if", "self", ".", "output_window", "is", "not", "None", "and", "not", "getattr", "(", "self", ".", "params", ",", "'perform_hn_without_windowing'", ",", "False", ")", ":", "\n", "            ", "scores", "*=", "self", ".", "output_window", "\n", "\n", "", "if", "getattr", "(", "self", ".", "params", ",", "'advanced_localization'", ",", "False", ")", ":", "\n", "            ", "return", "self", ".", "localize_advanced", "(", "scores", ")", "\n", "\n", "# Get maximum", "\n", "", "max_score", ",", "max_disp", "=", "dcf", ".", "max2d", "(", "scores", ")", "\n", "_", ",", "scale_ind", "=", "torch", ".", "max", "(", "max_score", ",", "dim", "=", "0", ")", "\n", "max_disp", "=", "max_disp", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "# Convert to displacements in the base scale", "\n", "disp", "=", "(", "max_disp", "+", "self", ".", "output_sz", "/", "2", ")", "%", "self", ".", "output_sz", "-", "self", ".", "output_sz", "/", "2", "\n", "\n", "# Compute translation vector and scale change factor", "\n", "translation_vec", "=", "disp", "[", "scale_ind", ",", "...", "]", ".", "view", "(", "-", "1", ")", "*", "(", "self", ".", "img_support_sz", "/", "self", ".", "output_sz", ")", "*", "self", ".", "target_scale", "\n", "translation_vec", "*=", "self", ".", "params", ".", "scale_factors", "[", "scale_ind", "]", "\n", "\n", "# Shift the score output for visualization purposes", "\n", "if", "self", ".", "params", ".", "debug", ">=", "2", ":", "\n", "            ", "sz", "=", "scores", ".", "shape", "[", "-", "2", ":", "]", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "scores", "[", "...", ",", "sz", "[", "0", "]", "//", "2", ":", ",", ":", "]", ",", "scores", "[", "...", ",", ":", "sz", "[", "0", "]", "//", "2", ",", ":", "]", "]", ",", "-", "2", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "scores", "[", "...", ",", ":", ",", "sz", "[", "1", "]", "//", "2", ":", "]", ",", "scores", "[", "...", ",", ":", ",", ":", "sz", "[", "1", "]", "//", "2", "]", "]", ",", "-", "1", ")", "\n", "\n", "", "return", "translation_vec", ",", "scale_ind", ",", "scores", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.localize_advanced": [[389, 455], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pytracking.dcf.max2d", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "max_disp1[].float().cpu().view", "max", "min", "max", "min", "scores[].clone", "pytracking.dcf.max2d", "max_disp2.float().cpu().view.float().cpu().view.float().cpu().view", "getattr", "torch.cat.clone", "torch.cat.clone", "torch.cat.clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "max_score1.item", "getattr", "round", "round", "round", "round", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "max_disp1[].float().cpu", "max_disp2.float().cpu().view.float().cpu().view.float().cpu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "max_disp1[].item", "max_disp1[].item", "math.sqrt", "max_disp1[].float", "target_neigh_sz[].item", "max_disp1[].item", "target_neigh_sz[].item", "max_disp1[].item", "max_disp2.float().cpu().view.float().cpu().view.float", "target_neigh_sz[].item", "target_neigh_sz[].item"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.max2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.max2d"], ["", "def", "localize_advanced", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Dows the advanced localization with hard negative detection and target not found.\"\"\"", "\n", "\n", "sz", "=", "scores", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "if", "self", ".", "output_window", "is", "not", "None", "and", "getattr", "(", "self", ".", "params", ",", "'perform_hn_without_windowing'", ",", "False", ")", ":", "\n", "            ", "scores_orig", "=", "scores", ".", "clone", "(", ")", "\n", "\n", "scores_orig", "=", "torch", ".", "cat", "(", "[", "scores_orig", "[", "...", ",", "(", "sz", "[", "0", "]", "+", "1", ")", "//", "2", ":", ",", ":", "]", ",", "scores_orig", "[", "...", ",", ":", "(", "sz", "[", "0", "]", "+", "1", ")", "//", "2", ",", ":", "]", "]", ",", "-", "2", ")", "\n", "scores_orig", "=", "torch", ".", "cat", "(", "[", "scores_orig", "[", "...", ",", ":", ",", "(", "sz", "[", "1", "]", "+", "1", ")", "//", "2", ":", "]", ",", "scores_orig", "[", "...", ",", ":", ",", ":", "(", "sz", "[", "1", "]", "+", "1", ")", "//", "2", "]", "]", ",", "-", "1", ")", "\n", "\n", "scores", "*=", "self", ".", "output_window", "\n", "\n", "# Shift scores back", "\n", "", "scores", "=", "torch", ".", "cat", "(", "[", "scores", "[", "...", ",", "(", "sz", "[", "0", "]", "+", "1", ")", "//", "2", ":", ",", ":", "]", ",", "scores", "[", "...", ",", ":", "(", "sz", "[", "0", "]", "+", "1", ")", "//", "2", ",", ":", "]", "]", ",", "-", "2", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "scores", "[", "...", ",", ":", ",", "(", "sz", "[", "1", "]", "+", "1", ")", "//", "2", ":", "]", ",", "scores", "[", "...", ",", ":", ",", ":", "(", "sz", "[", "1", "]", "+", "1", ")", "//", "2", "]", "]", ",", "-", "1", ")", "\n", "\n", "# Find maximum", "\n", "max_score1", ",", "max_disp1", "=", "dcf", ".", "max2d", "(", "scores", ")", "\n", "_", ",", "scale_ind", "=", "torch", ".", "max", "(", "max_score1", ",", "dim", "=", "0", ")", "\n", "max_score1", "=", "max_score1", "[", "scale_ind", "]", "\n", "max_disp1", "=", "max_disp1", "[", "scale_ind", ",", "...", "]", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "target_disp1", "=", "max_disp1", "-", "self", ".", "output_sz", "//", "2", "\n", "translation_vec1", "=", "target_disp1", "*", "(", "self", ".", "img_support_sz", "/", "self", ".", "output_sz", ")", "*", "self", ".", "target_scale", "\n", "\n", "if", "max_score1", ".", "item", "(", ")", "<", "self", ".", "params", ".", "target_not_found_threshold", ":", "\n", "            ", "return", "translation_vec1", ",", "scale_ind", ",", "scores", ",", "'not_found'", "\n", "\n", "", "if", "self", ".", "output_window", "is", "not", "None", "and", "getattr", "(", "self", ".", "params", ",", "'perform_hn_without_windowing'", ",", "False", ")", ":", "\n", "            ", "scores", "=", "scores_orig", "\n", "\n", "# Mask out target neighborhood", "\n", "", "target_neigh_sz", "=", "self", ".", "params", ".", "target_neighborhood_scale", "*", "self", ".", "target_sz", "/", "self", ".", "target_scale", "\n", "tneigh_top", "=", "max", "(", "round", "(", "max_disp1", "[", "0", "]", ".", "item", "(", ")", "-", "target_neigh_sz", "[", "0", "]", ".", "item", "(", ")", "/", "2", ")", ",", "0", ")", "\n", "tneigh_bottom", "=", "min", "(", "round", "(", "max_disp1", "[", "0", "]", ".", "item", "(", ")", "+", "target_neigh_sz", "[", "0", "]", ".", "item", "(", ")", "/", "2", "+", "1", ")", ",", "sz", "[", "0", "]", ")", "\n", "tneigh_left", "=", "max", "(", "round", "(", "max_disp1", "[", "1", "]", ".", "item", "(", ")", "-", "target_neigh_sz", "[", "1", "]", ".", "item", "(", ")", "/", "2", ")", ",", "0", ")", "\n", "tneigh_right", "=", "min", "(", "round", "(", "max_disp1", "[", "1", "]", ".", "item", "(", ")", "+", "target_neigh_sz", "[", "1", "]", ".", "item", "(", ")", "/", "2", "+", "1", ")", ",", "sz", "[", "1", "]", ")", "\n", "scores_masked", "=", "scores", "[", "scale_ind", ":", "scale_ind", "+", "1", ",", "...", "]", ".", "clone", "(", ")", "\n", "scores_masked", "[", "...", ",", "tneigh_top", ":", "tneigh_bottom", ",", "tneigh_left", ":", "tneigh_right", "]", "=", "0", "\n", "\n", "# Find new maximum", "\n", "max_score2", ",", "max_disp2", "=", "dcf", ".", "max2d", "(", "scores_masked", ")", "\n", "max_disp2", "=", "max_disp2", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "target_disp2", "=", "max_disp2", "-", "self", ".", "output_sz", "//", "2", "\n", "translation_vec2", "=", "target_disp2", "*", "(", "self", ".", "img_support_sz", "/", "self", ".", "output_sz", ")", "*", "self", ".", "target_scale", "\n", "\n", "# Handle the different cases", "\n", "if", "max_score2", ">", "self", ".", "params", ".", "distractor_threshold", "*", "max_score1", ":", "\n", "            ", "disp_norm1", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "target_disp1", "**", "2", ")", ")", "\n", "disp_norm2", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "target_disp2", "**", "2", ")", ")", "\n", "disp_threshold", "=", "self", ".", "params", ".", "dispalcement_scale", "*", "math", ".", "sqrt", "(", "sz", "[", "0", "]", "*", "sz", "[", "1", "]", ")", "/", "2", "\n", "\n", "if", "disp_norm2", ">", "disp_threshold", "and", "disp_norm1", "<", "disp_threshold", ":", "\n", "                ", "return", "translation_vec1", ",", "scale_ind", ",", "scores", ",", "'hard_negative'", "\n", "", "if", "disp_norm2", "<", "disp_threshold", "and", "disp_norm1", ">", "disp_threshold", ":", "\n", "                ", "return", "translation_vec2", ",", "scale_ind", ",", "scores", ",", "'hard_negative'", "\n", "", "if", "disp_norm2", ">", "disp_threshold", "and", "disp_norm1", ">", "disp_threshold", ":", "\n", "                ", "return", "translation_vec1", ",", "scale_ind", ",", "scores", ",", "'uncertain'", "\n", "\n", "# If also the distractor is close, return with highest score", "\n", "", "return", "translation_vec1", ",", "scale_ind", ",", "scores", ",", "'uncertain'", "\n", "\n", "", "if", "max_score2", ">", "self", ".", "params", ".", "hard_negative_threshold", "*", "max_score1", "and", "max_score2", ">", "self", ".", "params", ".", "target_not_found_threshold", ":", "\n", "            ", "return", "translation_vec1", ",", "scale_ind", ",", "scores", ",", "'hard_negative'", "\n", "\n", "", "return", "translation_vec1", ",", "scale_ind", ",", "scores", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.extract_sample": [[457, 459], ["atom.ATOM.params.features.extract"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.extract"], ["", "def", "extract_sample", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ",", "pos", ":", "torch", ".", "Tensor", ",", "scales", ",", "sz", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "params", ".", "features", ".", "extract", "(", "im", ",", "pos", ",", "scales", ",", "sz", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iou_features": [[460, 462], ["atom.ATOM.params.features.get_unique_attribute"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.get_unique_attribute"], ["", "def", "get_iou_features", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "params", ".", "features", ".", "get_unique_attribute", "(", "'iounet_features'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iou_backbone_features": [[463, 465], ["atom.ATOM.params.features.get_unique_attribute"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.get_unique_attribute"], ["", "def", "get_iou_backbone_features", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "params", ".", "features", ".", "get_unique_attribute", "(", "'iounet_backbone_features'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.extract_processed_sample": [[466, 469], ["atom.ATOM.extract_sample", "atom.ATOM.preprocess_sample", "atom.ATOM.project_sample"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.extract_sample", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.preprocess_sample", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.project_sample"], ["", "def", "extract_processed_sample", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ",", "pos", ":", "torch", ".", "Tensor", ",", "scales", ",", "sz", ":", "torch", ".", "Tensor", ")", "->", "(", "TensorList", ",", "TensorList", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_sample", "(", "im", ",", "pos", ",", "scales", ",", "sz", ")", "\n", "return", "self", ".", "preprocess_sample", "(", "self", ".", "project_sample", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.preprocess_sample": [[470, 474], ["getattr"], "methods", ["None"], ["", "def", "preprocess_sample", "(", "self", ",", "x", ":", "TensorList", ")", "->", "(", "TensorList", ",", "TensorList", ")", ":", "\n", "        ", "if", "getattr", "(", "self", ".", "params", ",", "'_feature_window'", ",", "False", ")", ":", "\n", "            ", "x", "=", "x", "*", "self", ".", "feature_window", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.project_sample": [[475, 480], ["pytracking.operation.conv2d().apply", "pytracking.operation.conv2d"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d"], ["", "def", "project_sample", "(", "self", ",", "x", ":", "TensorList", ",", "proj_matrix", "=", "None", ")", ":", "\n", "# Apply projection matrix", "\n", "        ", "if", "proj_matrix", "is", "None", ":", "\n", "            ", "proj_matrix", "=", "self", ".", "projection_matrix", "\n", "", "return", "operation", ".", "conv2d", "(", "x", ",", "proj_matrix", ")", ".", "apply", "(", "self", ".", "projection_activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_learning": [[481, 519], ["pytracking.TensorList", "atom.ATOM.fparams.attribute", "getattr", "isinstance", "getattr", "isinstance", "pytracking.dcf.hann2d().to", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "pytracking.dcf.hann2d", "ValueError", "ValueError", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.elu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann2d"], ["", "def", "init_learning", "(", "self", ")", ":", "\n", "# Get window function", "\n", "        ", "self", ".", "feature_window", "=", "TensorList", "(", "[", "dcf", ".", "hann2d", "(", "sz", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "for", "sz", "in", "self", ".", "feature_sz", "]", ")", "\n", "\n", "# Filter regularization", "\n", "self", ".", "filter_reg", "=", "self", ".", "fparams", ".", "attribute", "(", "'filter_reg'", ")", "\n", "\n", "# Activation function after the projection matrix (phi_1 in the paper)", "\n", "projection_activation", "=", "getattr", "(", "self", ".", "params", ",", "'projection_activation'", ",", "'none'", ")", "\n", "if", "isinstance", "(", "projection_activation", ",", "tuple", ")", ":", "\n", "            ", "projection_activation", ",", "act_param", "=", "projection_activation", "\n", "\n", "", "if", "projection_activation", "==", "'none'", ":", "\n", "            ", "self", ".", "projection_activation", "=", "lambda", "x", ":", "x", "\n", "", "elif", "projection_activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "projection_activation", "=", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "projection_activation", "==", "'elu'", ":", "\n", "            ", "self", ".", "projection_activation", "=", "torch", ".", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "projection_activation", "==", "'mlu'", ":", "\n", "            ", "self", ".", "projection_activation", "=", "lambda", "x", ":", "F", ".", "elu", "(", "F", ".", "leaky_relu", "(", "x", ",", "1", "/", "act_param", ")", ",", "act_param", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown activation'", ")", "\n", "\n", "# Activation function after the output scores (phi_2 in the paper)", "\n", "", "response_activation", "=", "getattr", "(", "self", ".", "params", ",", "'response_activation'", ",", "'none'", ")", "\n", "if", "isinstance", "(", "response_activation", ",", "tuple", ")", ":", "\n", "            ", "response_activation", ",", "act_param", "=", "response_activation", "\n", "\n", "", "if", "response_activation", "==", "'none'", ":", "\n", "            ", "self", ".", "response_activation", "=", "lambda", "x", ":", "x", "\n", "", "elif", "response_activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "response_activation", "=", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "response_activation", "==", "'elu'", ":", "\n", "            ", "self", ".", "response_activation", "=", "torch", ".", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "response_activation", "==", "'mlu'", ":", "\n", "            ", "self", ".", "response_activation", "=", "lambda", "x", ":", "F", ".", "elu", "(", "F", ".", "leaky_relu", "(", "x", ",", "1", "/", "act_param", ")", ",", "act_param", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown activation'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.generate_init_samples": [[521, 573], ["getattr", "atom.ATOM.img_sample_sz.clone", "getattr", "atom.ATOM.params.features.extract_transformed", "enumerate", "aug_expansion_sz.float.float.float", "atom.ATOM.img_sample_sz.long().tolist", "pytracking.features.augmentation.Identity", "atom.ATOM.transforms.extend", "atom.ATOM.transforms.extend", "atom.ATOM.transforms.append", "atom.ATOM.transforms.extend", "atom.ATOM.transforms.extend", "atom.ATOM.transforms.extend", "atom.ATOM.fparams.attribute", "atom.ATOM.transforms.extend", "enumerate", "pytracking.features.augmentation.FlipHorizontal", "atom.ATOM.fparams.attribute", "atom.ATOM.img_sample_sz.long", "atom.ATOM.img_sample_sz.long", "pytracking.features.augmentation.Translation", "pytracking.features.augmentation.Translation", "get_rand_shift", "pytracking.features.augmentation.Blur", "pytracking.features.augmentation.Scale", "pytracking.features.augmentation.Rotate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "get_absolute", "get_rand_shift", "get_rand_shift", "get_rand_shift", "torch.dropout2d", "torch.dropout2d", "torch.dropout2d", "[].expand", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.extract_transformed", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute"], ["", "", "def", "generate_init_samples", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", "->", "TensorList", ":", "\n", "        ", "\"\"\"Generate augmented initial samples.\"\"\"", "\n", "\n", "# Compute augmentation size", "\n", "aug_expansion_factor", "=", "getattr", "(", "self", ".", "params", ",", "'augmentation_expansion_factor'", ",", "None", ")", "\n", "aug_expansion_sz", "=", "self", ".", "img_sample_sz", ".", "clone", "(", ")", "\n", "aug_output_sz", "=", "None", "\n", "if", "aug_expansion_factor", "is", "not", "None", "and", "aug_expansion_factor", "!=", "1", ":", "\n", "            ", "aug_expansion_sz", "=", "(", "self", ".", "img_sample_sz", "*", "aug_expansion_factor", ")", ".", "long", "(", ")", "\n", "aug_expansion_sz", "+=", "(", "aug_expansion_sz", "-", "self", ".", "img_sample_sz", ".", "long", "(", ")", ")", "%", "2", "\n", "aug_expansion_sz", "=", "aug_expansion_sz", ".", "float", "(", ")", "\n", "aug_output_sz", "=", "self", ".", "img_sample_sz", ".", "long", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# Random shift operator", "\n", "", "get_rand_shift", "=", "lambda", ":", "None", "\n", "random_shift_factor", "=", "getattr", "(", "self", ".", "params", ",", "'random_shift_factor'", ",", "0", ")", "\n", "if", "random_shift_factor", ">", "0", ":", "\n", "            ", "get_rand_shift", "=", "lambda", ":", "(", "(", "torch", ".", "rand", "(", "2", ")", "-", "0.5", ")", "*", "self", ".", "img_sample_sz", "*", "random_shift_factor", ")", ".", "long", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# Create transofmations", "\n", "", "self", ".", "transforms", "=", "[", "augmentation", ".", "Identity", "(", "aug_output_sz", ")", "]", "\n", "if", "'shift'", "in", "self", ".", "params", ".", "augmentation", ":", "\n", "            ", "self", ".", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Translation", "(", "shift", ",", "aug_output_sz", ")", "for", "shift", "in", "self", ".", "params", ".", "augmentation", "[", "'shift'", "]", "]", ")", "\n", "", "if", "'relativeshift'", "in", "self", ".", "params", ".", "augmentation", ":", "\n", "            ", "get_absolute", "=", "lambda", "shift", ":", "(", "torch", ".", "Tensor", "(", "shift", ")", "*", "self", ".", "img_sample_sz", "/", "2", ")", ".", "long", "(", ")", ".", "tolist", "(", ")", "\n", "self", ".", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Translation", "(", "get_absolute", "(", "shift", ")", ",", "aug_output_sz", ")", "for", "shift", "in", "self", ".", "params", ".", "augmentation", "[", "'relativeshift'", "]", "]", ")", "\n", "", "if", "'fliplr'", "in", "self", ".", "params", ".", "augmentation", "and", "self", ".", "params", ".", "augmentation", "[", "'fliplr'", "]", ":", "\n", "            ", "self", ".", "transforms", ".", "append", "(", "augmentation", ".", "FlipHorizontal", "(", "aug_output_sz", ",", "get_rand_shift", "(", ")", ")", ")", "\n", "", "if", "'blur'", "in", "self", ".", "params", ".", "augmentation", ":", "\n", "            ", "self", ".", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Blur", "(", "sigma", ",", "aug_output_sz", ",", "get_rand_shift", "(", ")", ")", "for", "sigma", "in", "self", ".", "params", ".", "augmentation", "[", "'blur'", "]", "]", ")", "\n", "", "if", "'scale'", "in", "self", ".", "params", ".", "augmentation", ":", "\n", "            ", "self", ".", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Scale", "(", "scale_factor", ",", "aug_output_sz", ",", "get_rand_shift", "(", ")", ")", "for", "scale_factor", "in", "self", ".", "params", ".", "augmentation", "[", "'scale'", "]", "]", ")", "\n", "", "if", "'rotate'", "in", "self", ".", "params", ".", "augmentation", ":", "\n", "            ", "self", ".", "transforms", ".", "extend", "(", "[", "augmentation", ".", "Rotate", "(", "angle", ",", "aug_output_sz", ",", "get_rand_shift", "(", ")", ")", "for", "angle", "in", "self", ".", "params", ".", "augmentation", "[", "'rotate'", "]", "]", ")", "\n", "\n", "# Generate initial samples", "\n", "", "init_samples", "=", "self", ".", "params", ".", "features", ".", "extract_transformed", "(", "im", ",", "self", ".", "pos", ",", "self", ".", "target_scale", ",", "aug_expansion_sz", ",", "self", ".", "transforms", ")", "\n", "\n", "# Remove augmented samples for those that shall not have", "\n", "for", "i", ",", "use_aug", "in", "enumerate", "(", "self", ".", "fparams", ".", "attribute", "(", "'use_augmentation'", ")", ")", ":", "\n", "            ", "if", "not", "use_aug", ":", "\n", "                ", "init_samples", "[", "i", "]", "=", "init_samples", "[", "i", "]", "[", "0", ":", "1", ",", "...", "]", "\n", "\n", "# Add dropout samples", "\n", "", "", "if", "'dropout'", "in", "self", ".", "params", ".", "augmentation", ":", "\n", "            ", "num", ",", "prob", "=", "self", ".", "params", ".", "augmentation", "[", "'dropout'", "]", "\n", "self", ".", "transforms", ".", "extend", "(", "self", ".", "transforms", "[", ":", "1", "]", "*", "num", ")", "\n", "for", "i", ",", "use_aug", "in", "enumerate", "(", "self", ".", "fparams", ".", "attribute", "(", "'use_augmentation'", ")", ")", ":", "\n", "                ", "if", "use_aug", ":", "\n", "                    ", "init_samples", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "init_samples", "[", "i", "]", ",", "F", ".", "dropout2d", "(", "init_samples", "[", "i", "]", "[", "0", ":", "1", ",", "...", "]", ".", "expand", "(", "num", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "p", "=", "prob", ",", "training", "=", "True", ")", "]", ")", "\n", "\n", "", "", "", "return", "init_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_projection_matrix": [[575, 597], ["getattr", "atom.ATOM.fparams.attribute", "getattr", "x.size", "pytracking.TensorList", "pytracking.TensorList", "pytracking.TensorList.mean", "pytracking.TensorList", "pytracking.TensorList.t", "pytracking.TensorList", "len", "e.permute().reshape().clone", "[].t().unsqueeze().unsqueeze().clone", "zip", "e.permute().reshape", "ex.new_zeros().normal_", "zip", "[].t().unsqueeze().unsqueeze", "e.permute", "ex.new_zeros", "math.sqrt", "[].t().unsqueeze", "[].t", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["", "def", "init_projection_matrix", "(", "self", ",", "x", ")", ":", "\n", "# Set if using projection matrix", "\n", "        ", "self", ".", "params", ".", "use_projection_matrix", "=", "getattr", "(", "self", ".", "params", ",", "'use_projection_matrix'", ",", "True", ")", "\n", "\n", "if", "self", ".", "params", ".", "use_projection_matrix", ":", "\n", "            ", "self", ".", "compressed_dim", "=", "self", ".", "fparams", ".", "attribute", "(", "'compressed_dim'", ",", "None", ")", "\n", "\n", "proj_init_method", "=", "getattr", "(", "self", ".", "params", ",", "'proj_init_method'", ",", "'pca'", ")", "\n", "if", "proj_init_method", "==", "'pca'", ":", "\n", "                ", "x_mat", "=", "TensorList", "(", "[", "e", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "reshape", "(", "e", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ".", "clone", "(", ")", "for", "e", "in", "x", "]", ")", "\n", "x_mat", "-=", "x_mat", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "cov_x", "=", "x_mat", "@", "x_mat", ".", "t", "(", ")", "\n", "self", ".", "projection_matrix", "=", "TensorList", "(", "\n", "[", "None", "if", "cdim", "is", "None", "else", "torch", ".", "svd", "(", "C", ")", "[", "0", "]", "[", ":", ",", ":", "cdim", "]", ".", "t", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "clone", "(", ")", "for", "C", ",", "cdim", "in", "\n", "zip", "(", "cov_x", ",", "self", ".", "compressed_dim", ")", "]", ")", "\n", "", "elif", "proj_init_method", "==", "'randn'", ":", "\n", "                ", "self", ".", "projection_matrix", "=", "TensorList", "(", "\n", "[", "None", "if", "cdim", "is", "None", "else", "ex", ".", "new_zeros", "(", "cdim", ",", "ex", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ".", "normal_", "(", "0", ",", "1", "/", "math", ".", "sqrt", "(", "ex", ".", "shape", "[", "1", "]", ")", ")", "for", "ex", ",", "cdim", "in", "\n", "zip", "(", "x", ",", "self", ".", "compressed_dim", ")", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "compressed_dim", "=", "x", ".", "size", "(", "1", ")", "\n", "self", ".", "projection_matrix", "=", "TensorList", "(", "[", "None", "]", "*", "len", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_label_function": [[598, 618], ["pytracking.TensorList", "atom.ATOM.fparams.attribute", "zip", "pytracking.TensorList", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "enumerate", "x.new_zeros", "atom.ATOM.pos.round", "pytracking.dcf.label_function_spatial", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "zip", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.label_function_spatial"], ["", "", "def", "init_label_function", "(", "self", ",", "train_x", ")", ":", "\n", "# Allocate label function", "\n", "        ", "self", ".", "y", "=", "TensorList", "(", "[", "x", ".", "new_zeros", "(", "self", ".", "params", ".", "sample_memory_size", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "for", "x", "in", "train_x", "]", ")", "\n", "\n", "# Output sigma factor", "\n", "output_sigma_factor", "=", "self", ".", "fparams", ".", "attribute", "(", "'output_sigma_factor'", ")", "\n", "self", ".", "sigma", "=", "(", "self", ".", "feature_sz", "/", "self", ".", "img_support_sz", "*", "self", ".", "base_target_sz", ")", ".", "prod", "(", ")", ".", "sqrt", "(", ")", "*", "output_sigma_factor", "*", "torch", ".", "ones", "(", "2", ")", "\n", "\n", "# Center pos in normalized coords", "\n", "target_center_norm", "=", "(", "self", ".", "pos", "-", "self", ".", "pos", ".", "round", "(", ")", ")", "/", "(", "self", ".", "target_scale", "*", "self", ".", "img_support_sz", ")", "\n", "\n", "# Generate label functions", "\n", "for", "y", ",", "sig", ",", "sz", ",", "ksz", ",", "x", "in", "zip", "(", "self", ".", "y", ",", "self", ".", "sigma", ",", "self", ".", "feature_sz", ",", "self", ".", "kernel_size", ",", "train_x", ")", ":", "\n", "            ", "center_pos", "=", "sz", "*", "target_center_norm", "+", "0.5", "*", "torch", ".", "Tensor", "(", "[", "(", "ksz", "[", "0", "]", "+", "1", ")", "%", "2", ",", "(", "ksz", "[", "1", "]", "+", "1", ")", "%", "2", "]", ")", "\n", "for", "i", ",", "T", "in", "enumerate", "(", "self", ".", "transforms", "[", ":", "x", ".", "shape", "[", "0", "]", "]", ")", ":", "\n", "                ", "sample_center", "=", "center_pos", "+", "torch", ".", "Tensor", "(", "T", ".", "shift", ")", "/", "self", ".", "img_support_sz", "*", "sz", "\n", "y", "[", "i", ",", "0", ",", "...", "]", "=", "dcf", ".", "label_function_spatial", "(", "sz", ",", "sig", ",", "sample_center", ")", "\n", "\n", "# Return only the ones to use for initial training", "\n", "", "", "return", "TensorList", "(", "[", "y", "[", ":", "x", ".", "shape", "[", "0", "]", ",", "...", "]", "for", "y", ",", "x", "in", "zip", "(", "self", ".", "y", ",", "train_x", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_memory": [[620, 637], ["train_x.size", "pytracking.TensorList", "atom.ATOM.num_init_samples.copy", "pytracking.TensorList", "zip", "pytracking.TensorList", "len", "x.new_zeros", "x.new_zeros", "x.new_ones", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy"], ["", "def", "init_memory", "(", "self", ",", "train_x", ")", ":", "\n", "# Initialize first-frame training samples", "\n", "        ", "self", ".", "num_init_samples", "=", "train_x", ".", "size", "(", "0", ")", "\n", "self", ".", "init_sample_weights", "=", "TensorList", "(", "[", "x", ".", "new_ones", "(", "1", ")", "/", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "train_x", "]", ")", "\n", "self", ".", "init_training_samples", "=", "train_x", "\n", "\n", "# Sample counters and weights", "\n", "self", ".", "num_stored_samples", "=", "self", ".", "num_init_samples", ".", "copy", "(", ")", "\n", "self", ".", "previous_replace_ind", "=", "[", "None", "]", "*", "len", "(", "self", ".", "num_stored_samples", ")", "\n", "self", ".", "sample_weights", "=", "TensorList", "(", "[", "x", ".", "new_zeros", "(", "self", ".", "params", ".", "sample_memory_size", ")", "for", "x", "in", "train_x", "]", ")", "\n", "for", "sw", ",", "init_sw", ",", "num", "in", "zip", "(", "self", ".", "sample_weights", ",", "self", ".", "init_sample_weights", ",", "self", ".", "num_init_samples", ")", ":", "\n", "            ", "sw", "[", ":", "num", "]", "=", "init_sw", "\n", "\n", "# Initialize memory", "\n", "", "self", ".", "training_samples", "=", "TensorList", "(", "\n", "[", "x", ".", "new_zeros", "(", "self", ".", "params", ".", "sample_memory_size", ",", "cdim", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "for", "x", ",", "cdim", "in", "\n", "zip", "(", "train_x", ",", "self", ".", "compressed_dim", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_memory": [[638, 649], ["atom.ATOM.update_sample_weights", "zip", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_sample_weights"], ["", "def", "update_memory", "(", "self", ",", "sample_x", ":", "TensorList", ",", "sample_y", ":", "TensorList", ",", "learning_rate", "=", "None", ")", ":", "\n", "        ", "replace_ind", "=", "self", ".", "update_sample_weights", "(", "self", ".", "sample_weights", ",", "self", ".", "previous_replace_ind", ",", "self", ".", "num_stored_samples", ",", "self", ".", "num_init_samples", ",", "self", ".", "fparams", ",", "learning_rate", ")", "\n", "self", ".", "previous_replace_ind", "=", "replace_ind", "\n", "for", "train_samp", ",", "x", ",", "ind", "in", "zip", "(", "self", ".", "training_samples", ",", "sample_x", ",", "replace_ind", ")", ":", "\n", "            ", "train_samp", "[", "ind", ":", "ind", "+", "1", ",", "...", "]", "=", "x", "\n", "", "for", "y_memory", ",", "y", ",", "ind", "in", "zip", "(", "self", ".", "y", ",", "sample_y", ",", "replace_ind", ")", ":", "\n", "            ", "y_memory", "[", "ind", ":", "ind", "+", "1", ",", "...", "]", "=", "y", "\n", "", "if", "self", ".", "hinge_mask", "is", "not", "None", ":", "\n", "            ", "for", "m", ",", "y", ",", "ind", "in", "zip", "(", "self", ".", "hinge_mask", ",", "sample_y", ",", "replace_ind", ")", ":", "\n", "                ", "m", "[", "ind", ":", "ind", "+", "1", ",", "...", "]", "=", "(", "y", ">=", "self", ".", "params", ".", "hinge_threshold", ")", ".", "float", "(", ")", "\n", "", "", "self", ".", "num_stored_samples", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_sample_weights": [[651, 691], ["zip", "getattr", "sw.sum", "replace_ind.append", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "r_ind.item", "sw[].sum", "sw[].sum"], "methods", ["None"], ["", "def", "update_sample_weights", "(", "self", ",", "sample_weights", ",", "previous_replace_ind", ",", "num_stored_samples", ",", "num_init_samples", ",", "fparams", ",", "learning_rate", "=", "None", ")", ":", "\n", "# Update weights and get index to replace in memory", "\n", "        ", "replace_ind", "=", "[", "]", "\n", "for", "sw", ",", "prev_ind", ",", "num_samp", ",", "num_init", ",", "fpar", "in", "zip", "(", "sample_weights", ",", "previous_replace_ind", ",", "num_stored_samples", ",", "num_init_samples", ",", "fparams", ")", ":", "\n", "            ", "lr", "=", "learning_rate", "\n", "if", "lr", "is", "None", ":", "\n", "                ", "lr", "=", "fpar", ".", "learning_rate", "\n", "\n", "", "init_samp_weight", "=", "getattr", "(", "fpar", ",", "'init_samples_minimum_weight'", ",", "None", ")", "\n", "if", "init_samp_weight", "==", "0", ":", "\n", "                ", "init_samp_weight", "=", "None", "\n", "", "s_ind", "=", "0", "if", "init_samp_weight", "is", "None", "else", "num_init", "\n", "\n", "if", "num_samp", "==", "0", "or", "lr", "==", "1", ":", "\n", "                ", "sw", "[", ":", "]", "=", "0", "\n", "sw", "[", "0", "]", "=", "1", "\n", "r_ind", "=", "0", "\n", "", "else", ":", "\n", "# Get index to replace", "\n", "                ", "_", ",", "r_ind", "=", "torch", ".", "min", "(", "sw", "[", "s_ind", ":", "]", ",", "0", ")", "\n", "r_ind", "=", "r_ind", ".", "item", "(", ")", "+", "s_ind", "\n", "\n", "# Update weights", "\n", "if", "prev_ind", "is", "None", ":", "\n", "                    ", "sw", "/=", "1", "-", "lr", "\n", "sw", "[", "r_ind", "]", "=", "lr", "\n", "", "else", ":", "\n", "                    ", "sw", "[", "r_ind", "]", "=", "sw", "[", "prev_ind", "]", "/", "(", "1", "-", "lr", ")", "\n", "\n", "", "", "sw", "/=", "sw", ".", "sum", "(", ")", "\n", "if", "init_samp_weight", "is", "not", "None", "and", "sw", "[", ":", "num_init", "]", ".", "sum", "(", ")", "<", "init_samp_weight", ":", "\n", "                ", "sw", "/=", "init_samp_weight", "+", "sw", "[", "num_init", ":", "]", ".", "sum", "(", ")", "\n", "sw", "[", ":", "num_init", "]", "=", "init_samp_weight", "/", "num_init", "\n", "\n", "#if num_samp > 220:", "\n", "#    sw /= sw[num_init:].sum()", "\n", "#    sw[:num_init] = 0", "\n", "", "replace_ind", ".", "append", "(", "r_ind", ")", "\n", "\n", "", "return", "replace_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_label_function": [[692, 700], ["pytracking.TensorList", "zip", "pytracking.TensorList.append", "pytracking.dcf.label_function_spatial", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.label_function_spatial"], ["", "def", "get_label_function", "(", "self", ",", "sample_pos", ",", "sample_scale", ")", ":", "\n", "# Generate label function", "\n", "        ", "train_y", "=", "TensorList", "(", ")", "\n", "target_center_norm", "=", "(", "self", ".", "pos", "-", "sample_pos", ")", "/", "(", "sample_scale", "*", "self", ".", "img_support_sz", ")", "\n", "for", "sig", ",", "sz", ",", "ksz", "in", "zip", "(", "self", ".", "sigma", ",", "self", ".", "feature_sz", ",", "self", ".", "kernel_size", ")", ":", "\n", "            ", "center", "=", "sz", "*", "target_center_norm", "+", "0.5", "*", "torch", ".", "Tensor", "(", "[", "(", "ksz", "[", "0", "]", "+", "1", ")", "%", "2", ",", "(", "ksz", "[", "1", "]", "+", "1", ")", "%", "2", "]", ")", "\n", "train_y", ".", "append", "(", "dcf", ".", "label_function_spatial", "(", "sz", ",", "sig", ",", "center", ")", ")", "\n", "", "return", "train_y", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.update_state": [[701, 711], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "new_scale.clamp", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "def", "update_state", "(", "self", ",", "new_pos", ",", "new_scale", "=", "None", ")", ":", "\n", "# Update scale", "\n", "        ", "if", "new_scale", "is", "not", "None", ":", "\n", "            ", "self", ".", "target_scale", "=", "new_scale", ".", "clamp", "(", "self", ".", "min_scale_factor", ",", "self", ".", "max_scale_factor", ")", "\n", "self", ".", "target_sz", "=", "self", ".", "base_target_sz", "*", "self", ".", "target_scale", "\n", "\n", "# Update pos", "\n", "", "inside_ratio", "=", "0.2", "\n", "inside_offset", "=", "(", "inside_ratio", "-", "0.5", ")", "*", "self", ".", "target_sz", "\n", "self", ".", "pos", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "new_pos", ",", "self", ".", "image_sz", "-", "inside_offset", ")", ",", "inside_offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iounet_box": [[712, 718], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "target_ul.flip", "box_sz.flip"], "methods", ["None"], ["", "def", "get_iounet_box", "(", "self", ",", "pos", ",", "sz", ",", "sample_pos", ",", "sample_scale", ")", ":", "\n", "        ", "\"\"\"All inputs in original image coordinates\"\"\"", "\n", "box_center", "=", "(", "pos", "-", "sample_pos", ")", "/", "sample_scale", "+", "(", "self", ".", "iou_img_sample_sz", "-", "1", ")", "/", "2", "\n", "box_sz", "=", "sz", "/", "sample_scale", "\n", "target_ul", "=", "box_center", "-", "(", "box_sz", "-", "1", ")", "/", "2", "\n", "return", "torch", ".", "cat", "(", "[", "target_ul", ".", "flip", "(", "(", "0", ",", ")", ")", ",", "box_sz", ".", "flip", "(", "(", "0", ",", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.init_iou_net": [[719, 750], ["atom.ATOM.params.features.get_unique_attribute", "atom.ATOM.iou_predictor.parameters", "atom.ATOM.get_iounet_box", "pytracking.TensorList", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "atom.ATOM.get_iou_backbone_features", "pytracking.TensorList", "pytracking.TensorList", "getattr", "atom.ATOM.pos.round", "torch.cat().to.append", "torch.cat().to.append", "torch.cat().to.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "atom.ATOM.iou_predictor.get_modulation", "pytracking.TensorList", "torch.cat().to.append", "torch.cat().to.append", "torch.cat().to.append", "atom.ATOM.iou_target_box.clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.detach().mean", "isinstance", "torch.cat().to.view", "torch.cat().to.view", "torch.cat().to.view", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "x.detach", "tf.norm", "tf.numel"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.get_unique_attribute", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iounet_box", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iou_backbone_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.get_modulation"], ["", "def", "init_iou_net", "(", "self", ")", ":", "\n", "# Setup IoU net", "\n", "        ", "self", ".", "iou_predictor", "=", "self", ".", "params", ".", "features", ".", "get_unique_attribute", "(", "'iou_predictor'", ")", "\n", "for", "p", "in", "self", ".", "iou_predictor", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "# Get target boxes for the different augmentations", "\n", "", "self", ".", "iou_target_box", "=", "self", ".", "get_iounet_box", "(", "self", ".", "pos", ",", "self", ".", "target_sz", ",", "self", ".", "pos", ".", "round", "(", ")", ",", "self", ".", "target_scale", ")", "\n", "target_boxes", "=", "TensorList", "(", ")", "\n", "if", "self", ".", "params", ".", "iounet_augmentation", ":", "\n", "            ", "for", "T", "in", "self", ".", "transforms", ":", "\n", "                ", "if", "not", "isinstance", "(", "T", ",", "(", "augmentation", ".", "Identity", ",", "augmentation", ".", "Translation", ",", "augmentation", ".", "FlipHorizontal", ",", "augmentation", ".", "FlipVertical", ",", "augmentation", ".", "Blur", ")", ")", ":", "\n", "                    ", "break", "\n", "", "target_boxes", ".", "append", "(", "self", ".", "iou_target_box", "+", "torch", ".", "Tensor", "(", "[", "T", ".", "shift", "[", "1", "]", ",", "T", ".", "shift", "[", "0", "]", ",", "0", ",", "0", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "target_boxes", ".", "append", "(", "self", ".", "iou_target_box", ".", "clone", "(", ")", ")", "\n", "", "target_boxes", "=", "torch", ".", "cat", "(", "target_boxes", ".", "view", "(", "1", ",", "4", ")", ",", "0", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "\n", "\n", "# Get iou features", "\n", "iou_backbone_features", "=", "self", ".", "get_iou_backbone_features", "(", ")", "\n", "\n", "# Remove other augmentations such as rotation", "\n", "iou_backbone_features", "=", "TensorList", "(", "[", "x", "[", ":", "target_boxes", ".", "shape", "[", "0", "]", ",", "...", "]", "for", "x", "in", "iou_backbone_features", "]", ")", "\n", "\n", "# Extract target feat", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "target_feat", "=", "self", ".", "iou_predictor", ".", "get_modulation", "(", "iou_backbone_features", ",", "target_boxes", ")", "\n", "", "self", ".", "target_feat", "=", "TensorList", "(", "[", "x", ".", "detach", "(", ")", ".", "mean", "(", "0", ")", "for", "x", "in", "target_feat", "]", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'iounet_not_use_reference'", ",", "False", ")", ":", "\n", "            ", "self", ".", "target_feat", "=", "TensorList", "(", "[", "torch", ".", "full_like", "(", "tf", ",", "tf", ".", "norm", "(", ")", "/", "tf", ".", "numel", "(", ")", ")", "for", "tf", "in", "self", ".", "target_feat", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.refine_target_box": [[752, 808], ["atom.ATOM.get_iounet_box", "atom.ATOM.get_iou_features", "pytracking.TensorList", "atom.ATOM.view().clone", "atom.ATOM.optimize_boxes", "output_boxes[].clamp_", "getattr", "min", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "output_boxes[].mean", "[].mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "new_pos.clone", "getattr", "init_box[].prod().sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "predicted_box[].flip", "new_pos.clone", "atom.ATOM.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "init_box[].min", "new_pos.flip", "new_target_sz.prod", "atom.ATOM.base_target_sz.prod", "init_box[].prod", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "atom.ATOM.view", "output_iou.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iounet_box", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.get_iou_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.optimize_boxes"], ["", "", "def", "refine_target_box", "(", "self", ",", "sample_pos", ",", "sample_scale", ",", "scale_ind", ",", "update_scale", "=", "True", ")", ":", "\n", "# Initial box for refinement", "\n", "        ", "init_box", "=", "self", ".", "get_iounet_box", "(", "self", ".", "pos", ",", "self", ".", "target_sz", ",", "sample_pos", ",", "sample_scale", ")", "\n", "\n", "# Extract features from the relevant scale", "\n", "iou_features", "=", "self", ".", "get_iou_features", "(", ")", "\n", "iou_features", "=", "TensorList", "(", "[", "x", "[", "scale_ind", ":", "scale_ind", "+", "1", ",", "...", "]", "for", "x", "in", "iou_features", "]", ")", "\n", "\n", "init_boxes", "=", "init_box", ".", "view", "(", "1", ",", "4", ")", ".", "clone", "(", ")", "\n", "if", "self", ".", "params", ".", "num_init_random_boxes", ">", "0", ":", "\n", "# Get random initial boxes", "\n", "            ", "square_box_sz", "=", "init_box", "[", "2", ":", "]", ".", "prod", "(", ")", ".", "sqrt", "(", ")", "\n", "rand_factor", "=", "square_box_sz", "*", "torch", ".", "cat", "(", "[", "self", ".", "params", ".", "box_jitter_pos", "*", "torch", ".", "ones", "(", "2", ")", ",", "self", ".", "params", ".", "box_jitter_sz", "*", "torch", ".", "ones", "(", "2", ")", "]", ")", "\n", "minimal_edge_size", "=", "init_box", "[", "2", ":", "]", ".", "min", "(", ")", "/", "3", "\n", "rand_bb", "=", "(", "torch", ".", "rand", "(", "self", ".", "params", ".", "num_init_random_boxes", ",", "4", ")", "-", "0.5", ")", "*", "rand_factor", "\n", "new_sz", "=", "(", "init_box", "[", "2", ":", "]", "+", "rand_bb", "[", ":", ",", "2", ":", "]", ")", ".", "clamp", "(", "minimal_edge_size", ")", "\n", "new_center", "=", "(", "init_box", "[", ":", "2", "]", "+", "init_box", "[", "2", ":", "]", "/", "2", ")", "+", "rand_bb", "[", ":", ",", ":", "2", "]", "\n", "init_boxes", "=", "torch", ".", "cat", "(", "[", "new_center", "-", "new_sz", "/", "2", ",", "new_sz", "]", ",", "1", ")", "\n", "init_boxes", "=", "torch", ".", "cat", "(", "[", "init_box", ".", "view", "(", "1", ",", "4", ")", ",", "init_boxes", "]", ")", "\n", "\n", "# Refine boxes by maximizing iou", "\n", "", "output_boxes", ",", "output_iou", "=", "self", ".", "optimize_boxes", "(", "iou_features", ",", "init_boxes", ")", "\n", "\n", "# Remove weird boxes with extreme aspect ratios", "\n", "output_boxes", "[", ":", ",", "2", ":", "]", ".", "clamp_", "(", "1", ")", "\n", "aspect_ratio", "=", "output_boxes", "[", ":", ",", "2", "]", "/", "output_boxes", "[", ":", ",", "3", "]", "\n", "keep_ind", "=", "(", "aspect_ratio", "<", "self", ".", "params", ".", "maximal_aspect_ratio", ")", "*", "(", "aspect_ratio", ">", "1", "/", "self", ".", "params", ".", "maximal_aspect_ratio", ")", "\n", "output_boxes", "=", "output_boxes", "[", "keep_ind", ",", ":", "]", "\n", "output_iou", "=", "output_iou", "[", "keep_ind", "]", "\n", "\n", "# If no box found", "\n", "if", "output_boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "# Take average of top k boxes", "\n", "", "k", "=", "getattr", "(", "self", ".", "params", ",", "'iounet_k'", ",", "5", ")", "\n", "topk", "=", "min", "(", "k", ",", "output_boxes", ".", "shape", "[", "0", "]", ")", "\n", "_", ",", "inds", "=", "torch", ".", "topk", "(", "output_iou", ",", "topk", ")", "\n", "predicted_box", "=", "output_boxes", "[", "inds", ",", ":", "]", ".", "mean", "(", "0", ")", "\n", "predicted_iou", "=", "output_iou", ".", "view", "(", "-", "1", ",", "1", ")", "[", "inds", ",", ":", "]", ".", "mean", "(", "0", ")", "\n", "\n", "# Update position", "\n", "new_pos", "=", "predicted_box", "[", ":", "2", "]", "+", "predicted_box", "[", "2", ":", "]", "/", "2", "-", "(", "self", ".", "iou_img_sample_sz", "-", "1", ")", "/", "2", "\n", "new_pos", "=", "new_pos", ".", "flip", "(", "(", "0", ",", ")", ")", "*", "sample_scale", "+", "sample_pos", "\n", "new_target_sz", "=", "predicted_box", "[", "2", ":", "]", ".", "flip", "(", "(", "0", ",", ")", ")", "*", "sample_scale", "\n", "new_scale", "=", "torch", ".", "sqrt", "(", "new_target_sz", ".", "prod", "(", ")", "/", "self", ".", "base_target_sz", ".", "prod", "(", ")", ")", "\n", "\n", "self", ".", "pos_iounet", "=", "new_pos", ".", "clone", "(", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'use_iounet_pos_for_learning'", ",", "True", ")", ":", "\n", "            ", "self", ".", "pos", "=", "new_pos", ".", "clone", "(", ")", "\n", "\n", "", "self", ".", "target_sz", "=", "new_target_sz", "\n", "\n", "if", "update_scale", ":", "\n", "            ", "self", ".", "target_scale", "=", "new_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.optimize_boxes": [[809, 833], ["init_boxes.view().to", "range", "init_boxes.view().to.clone().detach", "atom.ATOM.iou_predictor.predict_iou", "isinstance", "atom.ATOM.backward", "init_boxes.view().to.detach_", "init_boxes.view().to.view().cpu", "atom.ATOM.detach().view().cpu", "init_boxes.view", "init_boxes.view().to.clone", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "bb_init[].repeat", "init_boxes.view().to.view", "atom.ATOM.detach().view", "atom.ATOM.detach"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.predict_iou", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.backward"], ["", "", "def", "optimize_boxes", "(", "self", ",", "iou_features", ",", "init_boxes", ")", ":", "\n", "# Optimize iounet boxes", "\n", "        ", "output_boxes", "=", "init_boxes", ".", "view", "(", "1", ",", "-", "1", ",", "4", ")", ".", "to", "(", "self", ".", "params", ".", "device", ")", "\n", "step_length", "=", "self", ".", "params", ".", "box_refinement_step_length", "\n", "\n", "for", "i_", "in", "range", "(", "self", ".", "params", ".", "box_refinement_iter", ")", ":", "\n", "# forward pass", "\n", "            ", "bb_init", "=", "output_boxes", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "bb_init", ".", "requires_grad", "=", "True", "\n", "\n", "outputs", "=", "self", ".", "iou_predictor", ".", "predict_iou", "(", "self", ".", "target_feat", ",", "iou_features", ",", "bb_init", ")", "\n", "\n", "if", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "outputs", "=", "outputs", "[", "0", "]", "\n", "\n", "", "outputs", ".", "backward", "(", "gradient", "=", "torch", ".", "ones_like", "(", "outputs", ")", ")", "\n", "\n", "# Update proposal", "\n", "output_boxes", "=", "bb_init", "+", "step_length", "*", "bb_init", ".", "grad", "*", "bb_init", "[", ":", ",", ":", ",", "2", ":", "]", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", "\n", "output_boxes", ".", "detach_", "(", ")", "\n", "\n", "step_length", "*=", "self", ".", "params", ".", "box_refinement_step_decay", "\n", "\n", "", "return", "output_boxes", ".", "view", "(", "-", "1", ",", "4", ")", ".", "cpu", "(", ")", ",", "outputs", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.myexperiments.atom_nfs_uav": [[4, 10], ["pytracking.evaluation.Tracker", "pytracking.evaluation.NFSDataset", "pytracking.evaluation.UAVDataset", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.nfsdataset.NFSDataset", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uavdataset.UAVDataset"], ["def", "atom_nfs_uav", "(", ")", ":", "\n", "# Run three runs of ATOM on NFS and UAV datasets", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'atom'", ",", "'default'", ",", "i", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "\n", "dataset", "=", "NFSDataset", "(", ")", "+", "UAVDataset", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.myexperiments.uav_test": [[12, 19], ["pytracking.evaluation.UAVDataset", "pytracking.evaluation.Tracker", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uavdataset.UAVDataset"], ["", "def", "uav_test", "(", ")", ":", "\n", "# Run ATOM and ECO on the UAV dataset", "\n", "#trackers = [Tracker('atom', 'default', i) for i in range(1)] + \\", "\n", "#           [Tracker('eco', 'default', i) for i in range(1)]", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'atom'", ",", "'default'", ",", "i", ")", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "dataset", "=", "UAVDataset", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.myexperiments.otb_test": [[21, 27], ["pytracking.evaluation.OTBDataset", "pytracking.evaluation.Tracker", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.otbdataset.OTBDataset"], ["", "def", "otb_test", "(", ")", ":", "\n", "# Run ATOM and ECO on the UAV dataset", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'atom'", ",", "'default'", ",", "i", ")", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "\n", "dataset", "=", "OTBDataset", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.myexperiments.lasot_test": [[28, 34], ["pytracking.evaluation.LaSOTDataset", "pytracking.evaluation.Tracker", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.lasotdataset.LaSOTDataset"], ["", "def", "lasot_test", "(", ")", ":", "\n", "# Run ATOM and ECO on the UAV dataset", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'atom'", ",", "'default'", ",", "i", ")", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "\n", "dataset", "=", "LaSOTDataset", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.myexperiments.trackingnet_test": [[35, 41], ["pytracking.evaluation.TrackingNetDataset", "pytracking.evaluation.Tracker", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.trackingnetdataset.TrackingNetDataset"], ["", "def", "trackingnet_test", "(", ")", ":", "\n", "# Run ATOM and ECO on the UAV dataset", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'dimp'", ",", "'dimp50'", ",", "i", ")", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "\n", "dataset", "=", "TrackingNetDataset", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.myexperiments.dimp_otb_test": [[42, 48], ["pytracking.evaluation.OTBDataset", "pytracking.evaluation.Tracker", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.otbdataset.OTBDataset"], ["", "def", "dimp_otb_test", "(", ")", ":", "\n", "# Run ATOM and ECO on the UAV dataset", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'dimp'", ",", "'dimp50'", ",", "i", ")", "for", "i", "in", "range", "(", "50", ")", "]", "\n", "\n", "dataset", "=", "OTBDataset", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.myexperiments.dimp_uav_test": [[49, 56], ["pytracking.evaluation.UAVDataset", "pytracking.evaluation.Tracker", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uavdataset.UAVDataset"], ["", "def", "dimp_uav_test", "(", ")", ":", "\n", "# Run ATOM and ECO on the UAV dataset", "\n", "#trackers = [Tracker('atom', 'default', i) for i in range(1)] + \\", "\n", "#           [Tracker('eco', 'default', i) for i in range(1)]", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'dimp'", ",", "'dimp18'", ",", "i", ")", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "dataset", "=", "UAVDataset", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.myexperiments.dimp50_uav_test": [[57, 64], ["pytracking.evaluation.UAVDataset", "pytracking.evaluation.Tracker", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uavdataset.UAVDataset"], ["", "def", "dimp50_uav_test", "(", ")", ":", "\n", "# Run ATOM and ECO on the UAV dataset", "\n", "#trackers = [Tracker('atom', 'default', i) for i in range(1)] + \\", "\n", "#           [Tracker('eco', 'default', i) for i in range(1)]", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'dimp'", ",", "'dimp50'", ",", "i", ")", "for", "i", "in", "range", "(", "50", ")", "]", "\n", "dataset", "=", "UAVDataset", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.myexperiments.dimp50_lasot_test": [[65, 71], ["pytracking.evaluation.LaSOTDataset", "pytracking.evaluation.Tracker", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.lasotdataset.LaSOTDataset"], ["", "def", "dimp50_lasot_test", "(", ")", ":", "\n", "# Run ATOM and ECO on the UAV dataset", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'dimp'", ",", "'dimp50'", ",", "i", ")", "for", "i", "in", "range", "(", "20", ")", "]", "\n", "\n", "dataset", "=", "LaSOTDataset", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.myexperiments.dimp50_oxuva_test": [[72, 78], ["pytracking.evaluation.OxuvaDataset", "pytracking.evaluation.Tracker", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDataset"], ["", "def", "dimp50_oxuva_test", "(", ")", ":", "\n", "# Run ATOM and ECO on the UAV dataset", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'dimp'", ",", "'dimp50_oxuva'", ",", "i", ")", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "\n", "dataset", "=", "OxuvaDataset", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.myexperiments.dimp50_tlp_test": [[79, 85], ["pytracking.evaluation.TLPDataset", "pytracking.evaluation.Tracker", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tlpdataset.TLPDataset"], ["", "def", "dimp50_tlp_test", "(", ")", ":", "\n", "# Run ATOM and ECO on the UAV dataset", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'dimp'", ",", "'dimp50'", ",", "i", ")", "for", "i", "in", "range", "(", "20", ")", "]", "\n", "\n", "dataset", "=", "TLPDataset", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.mobiface.all": [[4, 11], ["pytracking.evaluation.MobifaceDatasetAll", "pytracking.evaluation.Tracker", "pytracking.evaluation.Tracker", "range", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.mobifacedataset.MobifaceDatasetAll"], ["def", "all", "(", ")", ":", "\n", "# Run ATOM and ECO on the MobiFace dataset", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'atom'", ",", "'default'", ",", "i", ")", "for", "i", "in", "range", "(", "1", ")", "]", "+", "[", "Tracker", "(", "'eco'", ",", "'default'", ",", "i", ")", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "\n", "dataset", "=", "MobifaceDatasetAll", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.experiments.mobiface.test": [[12, 19], ["pytracking.evaluation.MobifaceDatasetTest", "pytracking.evaluation.Tracker", "pytracking.evaluation.Tracker", "range", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.mobifacedataset.MobifaceDatasetTest"], ["", "def", "test", "(", ")", ":", "\n", "# Run ATOM and ECO on the MobiFace testset", "\n", "    ", "trackers", "=", "[", "Tracker", "(", "'atom'", ",", "'default'", ",", "i", ")", "for", "i", "in", "range", "(", "1", ")", "]", "+", "[", "Tracker", "(", "'eco'", ",", "'default'", ",", "i", ")", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "\n", "dataset", "=", "MobifaceDatasetTest", "(", ")", "\n", "return", "trackers", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.net_wrappers.NetWrapper.__init__": [[9, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "net_path", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "self", ".", "net_path", "=", "net_path", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "net", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.net_wrappers.NetWrapper.__getattr__": [[14, 26], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "self", ".", "_rec_iter", ">", "0", ":", "\n", "            ", "self", ".", "_rec_iter", "=", "0", "\n", "return", "None", "\n", "", "self", ".", "_rec_iter", "+=", "1", "\n", "try", ":", "\n", "            ", "ret_val", "=", "getattr", "(", "self", ".", "net", ",", "name", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "self", ".", "_rec_iter", "=", "0", "\n", "raise", "e", "\n", "", "self", ".", "_rec_iter", "=", "0", "\n", "return", "ret_val", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.net_wrappers.NetWrapper.load_network": [[27, 32], ["pytracking.utils.loading.load_network", "net_wrappers.NetWrapper.eval", "net_wrappers.NetWrapper.cuda"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading.load_network", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.eval"], ["", "def", "load_network", "(", "self", ")", ":", "\n", "        ", "self", ".", "net", "=", "load_network", "(", "self", ".", "net_path", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.net_wrappers.NetWrapper.initialize": [[33, 35], ["net_wrappers.NetWrapper.load_network"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading.load_network"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "load_network", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.net_wrappers.NetWithBackbone.initialize": [[40, 44], ["net_wrappers.NetWrapper.initialize", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.initialize"], ["def", "initialize", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "initialize", "(", ")", "\n", "self", ".", "_mean", "=", "torch", ".", "Tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "_std", "=", "torch", ".", "Tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.net_wrappers.NetWithBackbone.preprocess_image": [[45, 56], ["im.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "preprocess_image", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Normalize the image with the mean and standard deviation used by the network.\"\"\"", "\n", "\n", "im", "=", "im", "/", "255", "\n", "im", "-=", "self", ".", "_mean", "\n", "im", "/=", "self", ".", "_std", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "im", "=", "im", ".", "cuda", "(", ")", "\n", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.net_wrappers.NetWithBackbone.extract_backbone": [[57, 62], ["net_wrappers.NetWithBackbone.preprocess_image", "net_wrappers.NetWithBackbone.net.extract_backbone_features"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.net_wrappers.NetWithBackbone.preprocess_image", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_backbone_features"], ["", "def", "extract_backbone", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Extract backbone features from the network.\n        Expects a float tensor image with pixel range [0, 255].\"\"\"", "\n", "im", "=", "self", ".", "preprocess_image", "(", "im", ")", "\n", "return", "self", ".", "net", ".", "extract_backbone_features", "(", "im", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.FeatureBase.__init__": [[16, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fparams", "=", "None", ",", "pool_stride", "=", "None", ",", "output_size", "=", "None", ",", "normalize_power", "=", "None", ",", "use_for_color", "=", "True", ",", "use_for_gray", "=", "True", ")", ":", "\n", "        ", "self", ".", "fparams", "=", "fparams", "\n", "self", ".", "pool_stride", "=", "1", "if", "pool_stride", "is", "None", "else", "pool_stride", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "normalize_power", "=", "normalize_power", "\n", "self", ".", "use_for_color", "=", "use_for_color", "\n", "self", ".", "use_for_gray", "=", "use_for_gray", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.FeatureBase.initialize": [[24, 26], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.FeatureBase.dim": [[27, 29], ["None"], "methods", ["None"], ["", "def", "dim", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.FeatureBase.stride": [[30, 32], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.FeatureBase.size": [[33, 39], ["isinstance", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "featurebase.FeatureBase.stride"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.stride"], ["", "def", "size", "(", "self", ",", "im_sz", ")", ":", "\n", "        ", "if", "self", ".", "output_size", "is", "None", ":", "\n", "            ", "return", "im_sz", "//", "self", ".", "stride", "(", ")", "\n", "", "if", "isinstance", "(", "im_sz", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "torch", ".", "Tensor", "(", "[", "self", ".", "output_size", "[", "0", "]", ",", "self", ".", "output_size", "[", "1", "]", "]", ")", "\n", "", "return", "self", ".", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.FeatureBase.extract": [[40, 43], ["None"], "methods", ["None"], ["", "def", "extract", "(", "self", ",", "im", ")", ":", "\n", "        ", "\"\"\"Performs feature extraction.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.FeatureBase.get_feature": [[44, 70], ["featurebase.FeatureBase.extract", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.avg_pool2d.abs().view", "torch.avg_pool2d.abs"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.extract", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs"], ["", "def", "get_feature", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Get the feature. Generally, call this function.\n        args:\n            im: image patch as a torch.Tensor.\n        \"\"\"", "\n", "\n", "# Return empty tensor if it should not be used", "\n", "is_color", "=", "im", ".", "shape", "[", "1", "]", "==", "3", "\n", "if", "is_color", "and", "not", "self", ".", "use_for_color", "or", "not", "is_color", "and", "not", "self", ".", "use_for_gray", ":", "\n", "            ", "return", "torch", ".", "Tensor", "(", "[", "]", ")", "\n", "\n", "# Extract feature", "\n", "", "feat", "=", "self", ".", "extract", "(", "im", ")", "\n", "\n", "# Pool/downsample", "\n", "if", "self", ".", "output_size", "is", "not", "None", ":", "\n", "            ", "feat", "=", "F", ".", "adaptive_avg_pool2d", "(", "feat", ",", "self", ".", "output_size", ")", "\n", "", "elif", "self", ".", "pool_stride", "!=", "1", ":", "\n", "            ", "feat", "=", "F", ".", "avg_pool2d", "(", "feat", ",", "self", ".", "pool_stride", ",", "self", ".", "pool_stride", ")", "\n", "\n", "# Normalize", "\n", "", "if", "self", ".", "normalize_power", "is", "not", "None", ":", "\n", "            ", "feat", "/=", "(", "torch", ".", "sum", "(", "feat", ".", "abs", "(", ")", ".", "view", "(", "feat", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "-", "1", ")", "**", "self", ".", "normalize_power", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "/", "\n", "(", "feat", ".", "shape", "[", "1", "]", "*", "feat", ".", "shape", "[", "2", "]", "*", "feat", ".", "shape", "[", "3", "]", ")", "+", "1e-10", ")", "**", "(", "1", "/", "self", ".", "normalize_power", ")", "\n", "\n", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.MultiFeatureBase.size": [[76, 81], ["isinstance", "pytracking.TensorList", "pytracking.TensorList", "featurebase.MultiFeatureBase.stride", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "zip", "featurebase.MultiFeatureBase.stride"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.stride", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.stride"], ["def", "size", "(", "self", ",", "im_sz", ")", ":", "\n", "        ", "if", "self", ".", "output_size", "is", "None", ":", "\n", "            ", "return", "TensorList", "(", "[", "im_sz", "//", "s", "for", "s", "in", "self", ".", "stride", "(", ")", "]", ")", "\n", "", "if", "isinstance", "(", "im_sz", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "im_sz", "//", "s", "if", "sz", "is", "None", "else", "torch", ".", "Tensor", "(", "[", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", "]", ")", "for", "sz", ",", "s", "in", "zip", "(", "self", ".", "output_size", ",", "self", ".", "stride", "(", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.MultiFeatureBase.get_feature": [[82, 111], ["featurebase.MultiFeatureBase.extract", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "zip", "len", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "feat.abs().view", "feat.abs"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.extract", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs"], ["", "", "def", "get_feature", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"Get the feature. Generally, call this function.\n        args:\n            im: image patch as a torch.Tensor.\n        \"\"\"", "\n", "\n", "# Return empty tensor if it should not be used", "\n", "is_color", "=", "im", ".", "shape", "[", "1", "]", "==", "3", "\n", "if", "is_color", "and", "not", "self", ".", "use_for_color", "or", "not", "is_color", "and", "not", "self", ".", "use_for_gray", ":", "\n", "            ", "return", "torch", ".", "Tensor", "(", "[", "]", ")", "\n", "\n", "", "feat_list", "=", "self", ".", "extract", "(", "im", ")", "\n", "\n", "output_sz", "=", "[", "None", "]", "*", "len", "(", "feat_list", ")", "if", "self", ".", "output_size", "is", "None", "else", "self", ".", "output_size", "\n", "\n", "# Pool/downsample", "\n", "for", "i", ",", "(", "sz", ",", "s", ")", "in", "enumerate", "(", "zip", "(", "output_sz", ",", "self", ".", "pool_stride", ")", ")", ":", "\n", "            ", "if", "sz", "is", "not", "None", ":", "\n", "                ", "feat_list", "[", "i", "]", "=", "F", ".", "adaptive_avg_pool2d", "(", "feat_list", "[", "i", "]", ",", "sz", ")", "\n", "", "elif", "s", "!=", "1", ":", "\n", "                ", "feat_list", "[", "i", "]", "=", "F", ".", "avg_pool2d", "(", "feat_list", "[", "i", "]", ",", "s", ",", "s", ")", "\n", "\n", "# Normalize", "\n", "", "", "if", "self", ".", "normalize_power", "is", "not", "None", ":", "\n", "            ", "for", "feat", "in", "feat_list", ":", "\n", "                ", "feat", "/=", "(", "torch", ".", "sum", "(", "feat", ".", "abs", "(", ")", ".", "view", "(", "feat", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "-", "1", ")", "**", "self", ".", "normalize_power", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "/", "\n", "(", "feat", ".", "shape", "[", "1", "]", "*", "feat", ".", "shape", "[", "2", "]", "*", "feat", ".", "shape", "[", "3", "]", ")", "+", "1e-10", ")", "**", "(", "1", "/", "self", ".", "normalize_power", ")", "\n", "\n", "", "", "return", "feat_list", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.ExtractorBase.__init__": [[10, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "features", ")", ":", "\n", "        ", "self", ".", "features", "=", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.ExtractorBase.initialize": [[13, 16], ["f.initialize"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.initialize"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "for", "f", "in", "self", ".", "features", ":", "\n", "            ", "f", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.SingleResolutionExtractor.__init__": [[23, 29], ["extractor.ExtractorBase.__init__", "extractor.SingleResolutionExtractor.features[].stride", "isinstance"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.stride"], ["def", "__init__", "(", "self", ",", "features", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "features", ")", "\n", "\n", "self", ".", "feature_stride", "=", "self", ".", "features", "[", "0", "]", ".", "stride", "(", ")", "\n", "if", "isinstance", "(", "self", ".", "feature_stride", ",", "(", "list", ",", "TensorList", ")", ")", ":", "\n", "            ", "self", ".", "feature_stride", "=", "self", ".", "feature_stride", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.SingleResolutionExtractor.stride": [[30, 32], ["None"], "methods", ["None"], ["", "", "def", "stride", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "feature_stride", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.SingleResolutionExtractor.size": [[33, 35], ["extractor.SingleResolutionExtractor.stride"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.stride"], ["", "def", "size", "(", "self", ",", "input_sz", ")", ":", "\n", "        ", "return", "input_sz", "//", "self", ".", "stride", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.SingleResolutionExtractor.extract": [[36, 47], ["isinstance", "torch.cat", "torch.cat", "pytracking.TensorList().unroll", "pytracking.features.preprocessing.sample_patch", "pytracking.TensorList", "f.get_feature"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.unroll", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.sample_patch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.MultiFeatureBase.get_feature"], ["", "def", "extract", "(", "self", ",", "im", ",", "pos", ",", "scales", ",", "image_sz", ")", ":", "\n", "        ", "if", "isinstance", "(", "scales", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "scales", "=", "[", "scales", "]", "\n", "\n", "# Get image patches", "\n", "", "im_patches", "=", "torch", ".", "cat", "(", "[", "sample_patch", "(", "im", ",", "pos", ",", "s", "*", "image_sz", ",", "image_sz", ")", "for", "s", "in", "scales", "]", ")", "\n", "\n", "# Compute features", "\n", "feature_map", "=", "torch", ".", "cat", "(", "TensorList", "(", "[", "f", ".", "get_feature", "(", "im_patches", ")", "for", "f", "in", "self", ".", "features", "]", ")", ".", "unroll", "(", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "feature_map", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.__init__": [[54, 58], ["extractor.ExtractorBase.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "patch_mode", "=", "'replicate'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "features", ")", "\n", "self", ".", "patch_mode", "=", "patch_mode", "\n", "self", ".", "is_color", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.stride": [[59, 61], ["torch.Tensor", "pytracking.TensorList().unroll().list", "pytracking.TensorList().unroll", "pytracking.TensorList", "f.stride", "extractor.MultiResolutionExtractor._return_feature"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.unroll", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.stride", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor._return_feature"], ["", "def", "stride", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "Tensor", "(", "TensorList", "(", "[", "f", ".", "stride", "(", ")", "for", "f", "in", "self", ".", "features", "if", "self", ".", "_return_feature", "(", "f", ")", "]", ")", ".", "unroll", "(", ")", ".", "list", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size": [[62, 64], ["pytracking.TensorList().unroll", "pytracking.TensorList", "f.size", "extractor.MultiResolutionExtractor._return_feature"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.unroll", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor._return_feature"], ["", "def", "size", "(", "self", ",", "input_sz", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "f", ".", "size", "(", "input_sz", ")", "for", "f", "in", "self", ".", "features", "if", "self", ".", "_return_feature", "(", "f", ")", "]", ")", ".", "unroll", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.dim": [[65, 67], ["pytracking.TensorList().unroll", "pytracking.TensorList", "f.dim", "extractor.MultiResolutionExtractor._return_feature"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.unroll", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor._return_feature"], ["", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "f", ".", "dim", "(", ")", "for", "f", "in", "self", ".", "features", "if", "self", ".", "_return_feature", "(", "f", ")", "]", ")", ".", "unroll", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.get_fparams": [[68, 72], ["pytracking.TensorList().unroll", "pytracking.TensorList", "extractor.MultiResolutionExtractor._return_feature", "getattr", "extractor.MultiResolutionExtractor._return_feature"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.unroll", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor._return_feature", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor._return_feature"], ["", "def", "get_fparams", "(", "self", ",", "name", ":", "str", "=", "None", ")", ":", "\n", "        ", "if", "name", "is", "None", ":", "\n", "            ", "return", "[", "f", ".", "fparams", "for", "f", "in", "self", ".", "features", "if", "self", ".", "_return_feature", "(", "f", ")", "]", "\n", "", "return", "TensorList", "(", "[", "getattr", "(", "f", ".", "fparams", ",", "name", ")", "for", "f", "in", "self", ".", "features", "if", "self", ".", "_return_feature", "(", "f", ")", "]", ")", ".", "unroll", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.get_attribute": [[73, 78], ["pytracking.TensorList", "pytracking.TensorList", "getattr", "getattr", "extractor.MultiResolutionExtractor._return_feature", "extractor.MultiResolutionExtractor._return_feature", "hasattr"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor._return_feature", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor._return_feature"], ["", "def", "get_attribute", "(", "self", ",", "name", ":", "str", ",", "ignore_missing", ":", "bool", "=", "False", ")", ":", "\n", "        ", "if", "ignore_missing", ":", "\n", "            ", "return", "TensorList", "(", "[", "getattr", "(", "f", ",", "name", ")", "for", "f", "in", "self", ".", "features", "if", "self", ".", "_return_feature", "(", "f", ")", "and", "hasattr", "(", "f", ",", "name", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "TensorList", "(", "[", "getattr", "(", "f", ",", "name", ",", "None", ")", "for", "f", "in", "self", ".", "features", "if", "self", ".", "_return_feature", "(", "f", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.get_unique_attribute": [[79, 89], ["getattr", "RuntimeError", "extractor.MultiResolutionExtractor._return_feature", "hasattr", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor._return_feature"], ["", "", "def", "get_unique_attribute", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "        ", "feat", "=", "None", "\n", "for", "f", "in", "self", ".", "features", ":", "\n", "            ", "if", "self", ".", "_return_feature", "(", "f", ")", "and", "hasattr", "(", "f", ",", "name", ")", ":", "\n", "                ", "if", "feat", "is", "not", "None", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'The attribute was not unique.'", ")", "\n", "", "feat", "=", "f", "\n", "", "", "if", "feat", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'The attribute did not exist'", ")", "\n", "", "return", "getattr", "(", "feat", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor._return_feature": [[90, 92], ["None"], "methods", ["None"], ["", "def", "_return_feature", "(", "self", ",", "f", ")", ":", "\n", "        ", "return", "self", ".", "is_color", "is", "None", "or", "self", ".", "is_color", "and", "f", ".", "use_for_color", "or", "not", "self", ".", "is_color", "and", "f", ".", "use_for_gray", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.set_is_color": [[93, 95], ["None"], "methods", ["None"], ["", "def", "set_is_color", "(", "self", ",", "is_color", ":", "bool", ")", ":", "\n", "        ", "self", ".", "is_color", "=", "is_color", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.extract": [[96, 121], ["isinstance", "zip", "torch.cat", "torch.cat", "pytracking.TensorList().unroll", "list", "list", "pytracking.TensorList", "pytracking.features.preprocessing.sample_patch", "f.get_feature"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.unroll", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.sample_patch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.MultiFeatureBase.get_feature"], ["", "def", "extract", "(", "self", ",", "im", ",", "pos", ",", "scales", ",", "image_sz", ",", "return_patches", "=", "False", ")", ":", "\n", "        ", "\"\"\"Extract features.\n        args:\n            im: Image.\n            pos: Center position for extraction.\n            scales: Image scales to extract features from.\n            image_sz: Size to resize the image samples to before extraction.\n        \"\"\"", "\n", "if", "isinstance", "(", "scales", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "scales", "=", "[", "scales", "]", "\n", "\n", "# Get image patches", "\n", "", "patch_iter", ",", "coord_iter", "=", "zip", "(", "*", "(", "sample_patch", "(", "im", ",", "pos", ",", "s", "*", "image_sz", ",", "image_sz", ",", "mode", "=", "self", ".", "patch_mode", ")", "for", "s", "in", "scales", ")", ")", "\n", "im_patches", "=", "torch", ".", "cat", "(", "list", "(", "patch_iter", ")", ")", "\n", "patch_coords", "=", "torch", ".", "cat", "(", "list", "(", "coord_iter", ")", ")", "\n", "\n", "# im_patches = torch.cat([sample_patch(im, pos, s*image_sz, image_sz) for s in scales])", "\n", "\n", "# Compute features", "\n", "feature_map", "=", "TensorList", "(", "[", "f", ".", "get_feature", "(", "im_patches", ")", "for", "f", "in", "self", ".", "features", "]", ")", ".", "unroll", "(", ")", "\n", "\n", "if", "return_patches", ":", "\n", "            ", "return", "feature_map", ",", "patch_coords", ",", "im_patches", "\n", "", "else", ":", "\n", "            ", "return", "feature_map", ",", "patch_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.extract_transformed": [[122, 142], ["pytracking.features.preprocessing.sample_patch", "torch.cat", "pytracking.TensorList().unroll", "T", "pytracking.TensorList", "f.get_feature"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.sample_patch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.unroll", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.MultiFeatureBase.get_feature"], ["", "", "def", "extract_transformed", "(", "self", ",", "im", ",", "pos", ",", "scale", ",", "image_sz", ",", "transforms", ")", ":", "\n", "        ", "\"\"\"Extract features from a set of transformed image samples.\n        args:\n            im: Image.\n            pos: Center position for extraction.\n            scale: Image scale to extract features from.\n            image_sz: Size to resize the image samples to before extraction.\n            transforms: A set of image transforms to apply.\n        \"\"\"", "\n", "\n", "# Get image patche", "\n", "im_patch", ",", "_", "=", "sample_patch", "(", "im", ",", "pos", ",", "scale", "*", "image_sz", ",", "image_sz", ")", "\n", "\n", "# Apply transforms", "\n", "im_patches", "=", "torch", ".", "cat", "(", "[", "T", "(", "im_patch", ")", "for", "T", "in", "transforms", "]", ")", "\n", "\n", "# Compute features", "\n", "feature_map", "=", "TensorList", "(", "[", "f", ".", "get_feature", "(", "im_patches", ")", "for", "f", "in", "self", ".", "features", "]", ")", ".", "unroll", "(", ")", "\n", "\n", "return", "feature_map", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.deep.ResNet18m1.__init__": [[21, 31], ["pytracking.features.featurebase.MultiFeatureBase.__init__", "list", "ValueError"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["def", "__init__", "(", "self", ",", "output_layers", ",", "net_path", "=", "None", ",", "use_gpu", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNet18m1", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "for", "l", "in", "output_layers", ":", "\n", "            ", "if", "l", "not", "in", "[", "'vggconv1'", ",", "'conv1'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", ",", "'layer4'", ",", "'fc'", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown layer'", ")", "\n", "\n", "", "", "self", ".", "output_layers", "=", "list", "(", "output_layers", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "net_path", "=", "'resnet18_vggmconv1/resnet18_vggmconv1.pth'", "if", "net_path", "is", "None", "else", "net_path", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.deep.ResNet18m1.initialize": [[32, 51], ["os.path.isabs", "torch.Tensor().view", "torch.Tensor().view", "ltr.models.backbone.resnet18_vggm.resnet18_vggmconv1", "deep.ResNet18m1.net.eval", "os.path.join", "isinstance", "deep.ResNet18m1.net.cuda", "len", "torch.Tensor", "torch.Tensor", "pytracking.evaluation.environment.env_settings"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.resnet18_vggmconv1", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.eval", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isabs", "(", "self", ".", "net_path", ")", ":", "\n", "            ", "net_path_full", "=", "self", ".", "net_path", "\n", "", "else", ":", "\n", "            ", "net_path_full", "=", "os", ".", "path", ".", "join", "(", "env_settings", "(", ")", ".", "network_path", ",", "self", ".", "net_path", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "pool_stride", ",", "int", ")", "and", "self", ".", "pool_stride", "==", "1", ":", "\n", "            ", "self", ".", "pool_stride", "=", "[", "1", "]", "*", "len", "(", "self", ".", "output_layers", ")", "\n", "\n", "", "self", ".", "layer_stride", "=", "{", "'vggconv1'", ":", "2", ",", "'conv1'", ":", "2", ",", "'layer1'", ":", "4", ",", "'layer2'", ":", "8", ",", "'layer3'", ":", "16", ",", "'layer4'", ":", "32", ",", "'fc'", ":", "None", "}", "\n", "self", ".", "layer_dim", "=", "{", "'vggconv1'", ":", "96", ",", "'conv1'", ":", "64", ",", "'layer1'", ":", "64", ",", "'layer2'", ":", "128", ",", "'layer3'", ":", "256", ",", "'layer4'", ":", "512", ",", "'fc'", ":", "None", "}", "\n", "\n", "self", ".", "mean", "=", "torch", ".", "Tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "Tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "self", ".", "net", "=", "resnet18_vggmconv1", "(", "self", ".", "output_layers", ",", "path", "=", "net_path_full", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "net", ".", "cuda", "(", ")", "\n", "", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.deep.ResNet18m1.dim": [[52, 54], ["pytracking.TensorList"], "methods", ["None"], ["", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "self", ".", "layer_dim", "[", "l", "]", "for", "l", "in", "self", ".", "output_layers", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.deep.ResNet18m1.stride": [[55, 57], ["pytracking.TensorList", "zip"], "methods", ["None"], ["", "def", "stride", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "s", "*", "self", ".", "layer_stride", "[", "l", "]", "for", "l", ",", "s", "in", "zip", "(", "self", ".", "output_layers", ",", "self", ".", "pool_stride", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.deep.ResNet18m1.extract": [[58, 68], ["im.cuda.cuda.cuda", "torch.no_grad", "pytracking.TensorList", "deep.ResNet18m1.net().values", "deep.ResNet18m1.net"], "methods", ["None"], ["", "def", "extract", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "im", "=", "im", "/", "255", "\n", "im", "-=", "self", ".", "mean", "\n", "im", "/=", "self", ".", "std", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "im", "=", "im", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "TensorList", "(", "self", ".", "net", "(", "im", ")", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.deep.ATOMResNet18.__init__": [[78, 84], ["pytracking.features.featurebase.MultiFeatureBase.__init__", "list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["def", "__init__", "(", "self", ",", "output_layers", "=", "(", "'layer3'", ",", ")", ",", "net_path", "=", "'atom_iou'", ",", "use_gpu", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "output_layers", "=", "list", "(", "output_layers", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "net_path", "=", "net_path", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.deep.ATOMResNet18.initialize": [[85, 106], ["pytracking.utils.loading.load_network", "deep.ATOMResNet18.net.eval", "sorted", "torch.Tensor().view", "torch.Tensor().view", "deep.ATOMResNet18.net.cuda", "isinstance", "list", "len", "set", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading.load_network", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.eval", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "net", "=", "load_network", "(", "self", ".", "net_path", ")", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "net", ".", "cuda", "(", ")", "\n", "", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n", "self", ".", "iou_predictor", "=", "self", ".", "net", ".", "bb_regressor", "\n", "\n", "self", ".", "layer_stride", "=", "{", "'conv1'", ":", "2", ",", "'layer1'", ":", "4", ",", "'layer2'", ":", "8", ",", "'layer3'", ":", "16", ",", "'layer4'", ":", "32", ",", "'classification'", ":", "16", ",", "'fc'", ":", "None", "}", "\n", "self", ".", "layer_dim", "=", "{", "'conv1'", ":", "64", ",", "'layer1'", ":", "64", ",", "'layer2'", ":", "128", ",", "'layer3'", ":", "256", ",", "'layer4'", ":", "512", ",", "'classification'", ":", "256", ",", "'fc'", ":", "None", "}", "\n", "\n", "self", ".", "iounet_feature_layers", "=", "self", ".", "net", ".", "bb_regressor_layer", "\n", "\n", "if", "isinstance", "(", "self", ".", "pool_stride", ",", "int", ")", "and", "self", ".", "pool_stride", "==", "1", ":", "\n", "            ", "self", ".", "pool_stride", "=", "[", "1", "]", "*", "len", "(", "self", ".", "output_layers", ")", "\n", "\n", "", "self", ".", "feature_layers", "=", "sorted", "(", "list", "(", "set", "(", "self", ".", "output_layers", "+", "self", ".", "iounet_feature_layers", ")", ")", ")", "\n", "\n", "self", ".", "mean", "=", "torch", ".", "Tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "torch", ".", "Tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.deep.ATOMResNet18.dim": [[107, 109], ["pytracking.TensorList"], "methods", ["None"], ["", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "self", ".", "layer_dim", "[", "l", "]", "for", "l", "in", "self", ".", "output_layers", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.deep.ATOMResNet18.stride": [[110, 112], ["pytracking.TensorList", "zip"], "methods", ["None"], ["", "def", "stride", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "s", "*", "self", ".", "layer_stride", "[", "l", "]", "for", "l", ",", "s", "in", "zip", "(", "self", ".", "output_layers", ",", "self", ".", "pool_stride", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.deep.ATOMResNet18.extract": [[113, 132], ["pytracking.TensorList", "pytracking.TensorList", "im.cuda.cuda.cuda", "torch.no_grad", "deep.ATOMResNet18.net.extract_features", "torch.no_grad", "pytracking.TensorList", "output_features[].clone", "deep.ATOMResNet18.iou_predictor.get_iou_feat"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.get_iou_feat"], ["", "def", "extract", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "im", "=", "im", "/", "255", "\n", "im", "-=", "self", ".", "mean", "\n", "im", "/=", "self", ".", "std", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "im", "=", "im", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output_features", "=", "self", ".", "net", ".", "extract_features", "(", "im", ",", "self", ".", "feature_layers", ")", "\n", "\n", "# Store the raw resnet features which are input to iounet", "\n", "", "self", ".", "iounet_backbone_features", "=", "TensorList", "(", "[", "output_features", "[", "layer", "]", ".", "clone", "(", ")", "for", "layer", "in", "self", ".", "iounet_feature_layers", "]", ")", "\n", "\n", "# Store the processed features from iounet, just before pooling", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "iounet_features", "=", "TensorList", "(", "self", ".", "iou_predictor", ".", "get_iou_feat", "(", "self", ".", "iounet_backbone_features", ")", ")", "\n", "\n", "", "return", "TensorList", "(", "[", "output_features", "[", "layer", "]", "for", "layer", "in", "self", ".", "output_layers", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.color.RGB.dim": [[7, 9], ["None"], "methods", ["None"], ["def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.color.RGB.stride": [[10, 12], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pool_stride", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.color.RGB.extract": [[13, 15], ["None"], "methods", ["None"], ["", "def", "extract", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "im", "/", "255", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.color.Grayscale.dim": [[19, 21], ["None"], "methods", ["None"], ["def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.color.Grayscale.stride": [[22, 24], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pool_stride", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.color.Grayscale.extract": [[25, 27], ["torch.mean"], "methods", ["None"], ["", "def", "extract", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "im", "/", "255", "-", "0.5", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.numpy_to_torch": [[6, 8], ["torch.from_numpy().float().permute().unsqueeze", "torch.from_numpy().float().permute().unsqueeze", "torch.from_numpy().float().permute", "torch.from_numpy().float().permute", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "numpy_to_torch", "(", "a", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "a", ")", ".", "float", "(", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.torch_to_numpy": [[10, 12], ["a.squeeze().permute().numpy", "a.squeeze().permute", "a.squeeze"], "function", ["None"], ["", "def", "torch_to_numpy", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "a", ".", "squeeze", "(", "0", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.sample_patch_transformed": [[14, 31], ["preprocessing.sample_patch", "torch.cat", "torch.cat", "T"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.sample_patch"], ["", "def", "sample_patch_transformed", "(", "im", ",", "pos", ",", "scale", ",", "image_sz", ",", "transforms", ")", ":", "\n", "    ", "\"\"\"Extract transformed image samples.\n    args:\n        im: Image.\n        pos: Center position for extraction.\n        scale: Image scale to extract features from.\n        image_sz: Size to resize the image samples to before extraction.\n        transforms: A set of image transforms to apply.\n    \"\"\"", "\n", "\n", "# Get image patche", "\n", "im_patch", ",", "_", "=", "sample_patch", "(", "im", ",", "pos", ",", "scale", "*", "image_sz", ",", "image_sz", ")", "\n", "\n", "# Apply transforms", "\n", "im_patches", "=", "torch", ".", "cat", "(", "[", "T", "(", "im_patch", ")", "for", "T", "in", "transforms", "]", ")", "\n", "\n", "return", "im_patches", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.sample_patch_multiscale": [[33, 51], ["isinstance", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "list", "preprocessing.sample_patch"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.sample_patch"], ["", "def", "sample_patch_multiscale", "(", "im", ",", "pos", ",", "scales", ",", "image_sz", ",", "mode", ":", "str", "=", "'replicate'", ")", ":", "\n", "    ", "\"\"\"Extract image patches at multiple scales.\n    args:\n        im: Image.\n        pos: Center position for extraction.\n        scales: Image scales to extract image patches from.\n        image_sz: Size to resize the image samples to\n        mode: how to treat image borders: 'replicate' (default) or 'inside'\n    \"\"\"", "\n", "if", "isinstance", "(", "scales", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "scales", "=", "[", "scales", "]", "\n", "\n", "# Get image patches", "\n", "", "patch_iter", ",", "coord_iter", "=", "zip", "(", "*", "(", "sample_patch", "(", "im", ",", "pos", ",", "s", "*", "image_sz", ",", "image_sz", ",", "mode", "=", "mode", ")", "for", "s", "in", "scales", ")", ")", "\n", "im_patches", "=", "torch", ".", "cat", "(", "list", "(", "patch_iter", ")", ")", "\n", "patch_coords", "=", "torch", ".", "cat", "(", "list", "(", "coord_iter", ")", ")", "\n", "\n", "return", "im_patches", ",", "patch_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.sample_patch": [[53, 124], ["pos.long().clone", "torch.max().long", "torch.max().long", "torch.interpolate", "ValueError", "torch.Tensor", "torch.Tensor", "torch.min().item", "torch.min().item", "int", "int", "sample_sz.float", "torch.LongTensor", "torch.LongTensor", "torch.pad", "torch.cat().view", "torch.cat().view", "output_sz.long().tolist", "pos.long", "max", "torch.max", "torch.max", "F.pad.clone", "torch.min", "torch.min", "int", "sz.round", "torch.Tensor", "torch.Tensor", "torch.cat", "torch.cat", "output_sz.long", "sample_sz.float", "os[].item", "os[].item", "tl[].item", "br[].item", "tl[].item", "br[].item", "tl[].item", "br[].item", "tl[].item", "br[].item", "sample_sz.float", "output_sz.float", "sample_sz.float"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.transform.interpolate"], ["", "def", "sample_patch", "(", "im", ":", "torch", ".", "Tensor", ",", "pos", ":", "torch", ".", "Tensor", ",", "sample_sz", ":", "torch", ".", "Tensor", ",", "output_sz", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "mode", ":", "str", "=", "'replicate'", ")", ":", "\n", "    ", "\"\"\"Sample an image patch.\n\n    args:\n        im: Image\n        pos: center position of crop\n        sample_sz: size to crop\n        output_sz: size to resize to\n        mode: how to treat image borders: 'replicate' (default) or 'inside'\n    \"\"\"", "\n", "\n", "if", "mode", "not", "in", "[", "'replicate'", ",", "'inside'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown border mode \\'{}\\'.'", ".", "format", "(", "mode", ")", ")", "\n", "\n", "# copy and convert", "\n", "", "posl", "=", "pos", ".", "long", "(", ")", ".", "clone", "(", ")", "\n", "\n", "# Get new sample size if forced inside the image", "\n", "if", "mode", "==", "'inside'", ":", "\n", "        ", "im_sz", "=", "torch", ".", "Tensor", "(", "[", "im", ".", "shape", "[", "2", "]", ",", "im", ".", "shape", "[", "3", "]", "]", ")", "\n", "shrink_factor", "=", "(", "sample_sz", ".", "float", "(", ")", "/", "im_sz", ")", ".", "max", "(", ")", ".", "clamp", "(", "1", ")", "\n", "sample_sz", "=", "(", "sample_sz", ".", "float", "(", ")", "/", "shrink_factor", ")", ".", "long", "(", ")", "\n", "\n", "# Compute pre-downsampling factor", "\n", "", "if", "output_sz", "is", "not", "None", ":", "\n", "        ", "resize_factor", "=", "torch", ".", "min", "(", "sample_sz", ".", "float", "(", ")", "/", "output_sz", ".", "float", "(", ")", ")", ".", "item", "(", ")", "\n", "df", "=", "int", "(", "max", "(", "int", "(", "resize_factor", "-", "0.1", ")", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "df", "=", "int", "(", "1", ")", "\n", "\n", "", "sz", "=", "sample_sz", ".", "float", "(", ")", "/", "df", "# new size", "\n", "\n", "# Do downsampling", "\n", "if", "df", ">", "1", ":", "\n", "        ", "os", "=", "posl", "%", "df", "# offset", "\n", "posl", "=", "(", "posl", "-", "os", ")", "//", "df", "# new position", "\n", "im2", "=", "im", "[", "...", ",", "os", "[", "0", "]", ".", "item", "(", ")", ":", ":", "df", ",", "os", "[", "1", "]", ".", "item", "(", ")", ":", ":", "df", "]", "# downsample", "\n", "", "else", ":", "\n", "        ", "im2", "=", "im", "\n", "\n", "# compute size to crop", "\n", "", "szl", "=", "torch", ".", "max", "(", "sz", ".", "round", "(", ")", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", ".", "long", "(", ")", "\n", "\n", "# Extract top and bottom coordinates", "\n", "tl", "=", "posl", "-", "(", "szl", "-", "1", ")", "//", "2", "\n", "br", "=", "posl", "+", "szl", "//", "2", "+", "1", "\n", "\n", "# Shift the crop to inside", "\n", "if", "mode", "==", "'inside'", ":", "\n", "        ", "im2_sz", "=", "torch", ".", "LongTensor", "(", "[", "im2", ".", "shape", "[", "2", "]", ",", "im2", ".", "shape", "[", "3", "]", "]", ")", "\n", "shift", "=", "(", "-", "tl", ")", ".", "clamp", "(", "0", ")", "-", "(", "br", "-", "im2_sz", ")", ".", "clamp", "(", "0", ")", "\n", "tl", "+=", "shift", "\n", "br", "+=", "shift", "\n", "\n", "# Get image patch", "\n", "im_patch", "=", "im2", "[", "...", ",", "tl", "[", "0", "]", ".", "item", "(", ")", ":", "br", "[", "0", "]", ".", "item", "(", ")", ",", "tl", "[", "1", "]", ".", "item", "(", ")", ":", "br", "[", "1", "]", ".", "item", "(", ")", "]", "\n", "", "else", ":", "\n", "# Get image patch", "\n", "        ", "im_patch", "=", "F", ".", "pad", "(", "im2", ",", "(", "-", "tl", "[", "1", "]", ".", "item", "(", ")", ",", "br", "[", "1", "]", ".", "item", "(", ")", "-", "im2", ".", "shape", "[", "3", "]", ",", "-", "tl", "[", "0", "]", ".", "item", "(", ")", ",", "br", "[", "0", "]", ".", "item", "(", ")", "-", "im2", ".", "shape", "[", "2", "]", ")", ",", "mode", ")", "\n", "\n", "# Get image coordinates", "\n", "", "patch_coord", "=", "df", "*", "torch", ".", "cat", "(", "(", "tl", ",", "br", ")", ")", ".", "view", "(", "1", ",", "4", ")", "\n", "\n", "if", "output_sz", "is", "None", "or", "(", "im_patch", ".", "shape", "[", "-", "2", "]", "==", "output_sz", "[", "0", "]", "and", "im_patch", ".", "shape", "[", "-", "1", "]", "==", "output_sz", "[", "1", "]", ")", ":", "\n", "        ", "return", "im_patch", ".", "clone", "(", ")", ",", "patch_coord", "\n", "\n", "# Resample", "\n", "", "im_patch", "=", "F", ".", "interpolate", "(", "im_patch", ",", "output_sz", ".", "long", "(", ")", ".", "tolist", "(", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "return", "im_patch", ",", "patch_coord", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.__init__": [[10, 19], ["pytracking.features.featurebase.FeatureBase.__init__", "util.Concatenate.features[].stride", "feat.stride", "ValueError"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.stride", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.stride"], ["def", "__init__", "(", "self", ",", "features", ",", "pool_stride", "=", "None", ",", "normalize_power", "=", "None", ",", "use_for_color", "=", "True", ",", "use_for_gray", "=", "True", ")", ":", "\n", "        ", "super", "(", "Concatenate", ",", "self", ")", ".", "__init__", "(", "pool_stride", ",", "normalize_power", ",", "use_for_color", ",", "use_for_gray", ")", "\n", "self", ".", "features", "=", "features", "\n", "\n", "self", ".", "input_stride", "=", "self", ".", "features", "[", "0", "]", ".", "stride", "(", ")", "\n", "\n", "for", "feat", "in", "self", ".", "features", ":", "\n", "            ", "if", "self", ".", "input_stride", "!=", "feat", ".", "stride", "(", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Strides for the features must be the same for a bultiresolution feature.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim": [[20, 22], ["sum", "f.dim"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "", "", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "f", ".", "dim", "(", ")", "for", "f", "in", "self", ".", "features", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.stride": [[23, 25], ["None"], "methods", ["None"], ["", "def", "stride", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pool_stride", "*", "self", ".", "input_stride", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.extract": [[26, 28], ["torch.cat", "f.get_feature"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.featurebase.MultiFeatureBase.get_feature"], ["", "def", "extract", "(", "self", ",", "im", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "f", ".", "get_feature", "(", "im", ")", "for", "f", "in", "self", ".", "features", "]", ",", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Transform.__init__": [[12, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_sz", "=", "None", ",", "shift", "=", "None", ")", ":", "\n", "        ", "self", ".", "output_sz", "=", "output_sz", "\n", "self", ".", "shift", "=", "(", "0", ",", "0", ")", "if", "shift", "is", "None", "else", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Transform.__call__": [[16, 18], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Transform.crop_to_output": [[19, 37], ["isinstance", "torch.pad", "torch.pad", "math.floor", "math.ceil", "math.floor", "math.ceil"], "methods", ["None"], ["", "def", "crop_to_output", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "imsz", "=", "image", ".", "shape", "[", "2", ":", "]", "\n", "if", "self", ".", "output_sz", "is", "None", ":", "\n", "                ", "pad_h", "=", "0", "\n", "pad_w", "=", "0", "\n", "", "else", ":", "\n", "                ", "pad_h", "=", "(", "self", ".", "output_sz", "[", "0", "]", "-", "imsz", "[", "0", "]", ")", "/", "2", "\n", "pad_w", "=", "(", "self", ".", "output_sz", "[", "1", "]", "-", "imsz", "[", "1", "]", ")", "/", "2", "\n", "\n", "", "pad_left", "=", "math", ".", "floor", "(", "pad_w", ")", "+", "self", ".", "shift", "[", "1", "]", "\n", "pad_right", "=", "math", ".", "ceil", "(", "pad_w", ")", "-", "self", ".", "shift", "[", "1", "]", "\n", "pad_top", "=", "math", ".", "floor", "(", "pad_h", ")", "+", "self", ".", "shift", "[", "0", "]", "\n", "pad_bottom", "=", "math", ".", "ceil", "(", "pad_h", ")", "-", "self", ".", "shift", "[", "0", "]", "\n", "\n", "return", "F", ".", "pad", "(", "image", ",", "(", "pad_left", ",", "pad_right", ",", "pad_top", ",", "pad_bottom", ")", ",", "'replicate'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Identity.__call__": [[40, 42], ["augmentation.Identity.crop_to_output"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Transform.crop_to_output"], ["def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "self", ".", "crop_to_output", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.FlipHorizontal.__call__": [[45, 50], ["isinstance", "augmentation.FlipHorizontal.crop_to_output", "numpy.fliplr", "image.flip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Transform.crop_to_output"], ["def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "crop_to_output", "(", "image", ".", "flip", "(", "(", "3", ",", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "fliplr", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.FlipVertical.__call__": [[53, 58], ["isinstance", "augmentation.FlipVertical.crop_to_output", "numpy.flipud", "image.flip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Transform.crop_to_output"], ["def", "__call__", "(", "self", ",", "image", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "crop_to_output", "(", "image", ".", "flip", "(", "(", "2", ",", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "flipud", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Translation.__init__": [[61, 64], ["augmentation.Transform.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "translation", ",", "output_sz", "=", "None", ",", "shift", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "output_sz", ",", "shift", ")", "\n", "self", ".", "shift", "=", "(", "self", ".", "shift", "[", "0", "]", "+", "translation", "[", "0", "]", ",", "self", ".", "shift", "[", "1", "]", "+", "translation", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Translation.__call__": [[65, 70], ["isinstance", "augmentation.Translation.crop_to_output"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Transform.crop_to_output"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "crop_to_output", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Scale.__init__": [[73, 76], ["augmentation.Transform.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "scale_factor", ",", "output_sz", "=", "None", ",", "shift", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "output_sz", ",", "shift", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Scale.__call__": [[77, 95], ["isinstance", "round", "round", "torch.interpolate", "torch.interpolate", "augmentation.Scale.crop_to_output"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.transform.interpolate", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.transform.interpolate", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Transform.crop_to_output"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "# Calculate new size. Ensure that it is even so that crop/pad becomes easier", "\n", "            ", "h_orig", ",", "w_orig", "=", "image", ".", "shape", "[", "2", ":", "]", "\n", "\n", "if", "h_orig", "!=", "w_orig", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "h_new", "=", "round", "(", "h_orig", "/", "self", ".", "scale_factor", ")", "\n", "h_new", "+=", "(", "h_new", "-", "h_orig", ")", "%", "2", "\n", "w_new", "=", "round", "(", "w_orig", "/", "self", ".", "scale_factor", ")", "\n", "w_new", "+=", "(", "w_new", "-", "w_orig", ")", "%", "2", "\n", "\n", "image_resized", "=", "F", ".", "interpolate", "(", "image", ",", "[", "h_new", ",", "w_new", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "return", "self", ".", "crop_to_output", "(", "image_resized", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Affine.__init__": [[99, 102], ["augmentation.Transform.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "transform_matrix", ",", "output_sz", "=", "None", ",", "shift", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "output_sz", ",", "shift", ")", "\n", "self", ".", "transform_matrix", "=", "transform_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Affine.__call__": [[103, 108], ["isinstance", "augmentation.Affine.crop_to_output", "cv2.warpAffine", "pytracking.features.preprocessing.numpy_to_torch", "augmentation.Affine.", "pytracking.features.preprocessing.torch_to_numpy"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Transform.crop_to_output", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.numpy_to_torch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.torch_to_numpy"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "crop_to_output", "(", "numpy_to_torch", "(", "self", "(", "torch_to_numpy", "(", "image", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "cv", ".", "warpAffine", "(", "image", ",", "self", ".", "transform_matrix", ",", "image", ".", "shape", "[", "1", ":", ":", "-", "1", "]", ",", "borderMode", "=", "cv", ".", "BORDER_REPLICATE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Rotate.__init__": [[112, 115], ["augmentation.Transform.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "angle", ",", "output_sz", "=", "None", ",", "shift", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "output_sz", ",", "shift", ")", "\n", "self", ".", "angle", "=", "math", ".", "pi", "*", "angle", "/", "180", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Rotate.__call__": [[116, 125], ["isinstance", "augmentation.Rotate.crop_to_output", "numpy.array", "numpy.concatenate", "cv2.warpAffine", "pytracking.features.preprocessing.numpy_to_torch", "augmentation.Rotate.", "numpy.expand_dims", "pytracking.features.preprocessing.torch_to_numpy", "numpy.array", "math.cos", "math.sin", "math.cos", "math.sin"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Transform.crop_to_output", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.numpy_to_torch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.torch_to_numpy"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "crop_to_output", "(", "numpy_to_torch", "(", "self", "(", "torch_to_numpy", "(", "image", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "(", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "image", ".", "shape", "[", ":", "2", "]", ")", ",", "1", ")", "-", "1", ")", "/", "2", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "self", ".", "angle", ")", ",", "math", ".", "sin", "(", "self", ".", "angle", ")", "]", ",", "\n", "[", "-", "math", ".", "sin", "(", "self", ".", "angle", ")", ",", "math", ".", "cos", "(", "self", ".", "angle", ")", "]", "]", ")", "\n", "H", "=", "np", ".", "concatenate", "(", "[", "R", ",", "c", "-", "R", "@", "c", "]", ",", "1", ")", "\n", "return", "cv", ".", "warpAffine", "(", "image", ",", "H", ",", "image", ".", "shape", "[", "1", ":", ":", "-", "1", "]", ",", "borderMode", "=", "cv", ".", "BORDER_REPLICATE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Blur.__init__": [[129, 139], ["augmentation.Transform.__init__", "isinstance", "math.ceil", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "augmentation.Blur.filter[].view", "augmentation.Blur.filter[].sum", "augmentation.Blur.filter[].view", "augmentation.Blur.filter[].sum", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "sigma", ",", "output_sz", "=", "None", ",", "shift", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "output_sz", ",", "shift", ")", "\n", "if", "isinstance", "(", "sigma", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "sigma", "=", "(", "sigma", ",", "sigma", ")", "\n", "", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "filter_size", "=", "[", "math", ".", "ceil", "(", "2", "*", "s", ")", "for", "s", "in", "self", ".", "sigma", "]", "\n", "x_coord", "=", "[", "torch", ".", "arange", "(", "-", "sz", ",", "sz", "+", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "for", "sz", "in", "self", ".", "filter_size", "]", "\n", "self", ".", "filter", "=", "[", "torch", ".", "exp", "(", "-", "(", "x", "**", "2", ")", "/", "(", "2", "*", "s", "**", "2", ")", ")", "for", "x", ",", "s", "in", "zip", "(", "x_coord", ",", "self", ".", "sigma", ")", "]", "\n", "self", ".", "filter", "[", "0", "]", "=", "self", ".", "filter", "[", "0", "]", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "/", "self", ".", "filter", "[", "0", "]", ".", "sum", "(", ")", "\n", "self", ".", "filter", "[", "1", "]", "=", "self", ".", "filter", "[", "1", "]", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "/", "self", ".", "filter", "[", "1", "]", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Blur.__call__": [[140, 147], ["isinstance", "torch.conv2d", "torch.conv2d", "augmentation.Blur.crop_to_output", "image.view", "torch.conv2d().view", "torch.conv2d().view", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.augmentation.Transform.crop_to_output", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "sz", "=", "image", ".", "shape", "[", "2", ":", "]", "\n", "im1", "=", "F", ".", "conv2d", "(", "image", ".", "view", "(", "-", "1", ",", "1", ",", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", ")", ",", "self", ".", "filter", "[", "0", "]", ",", "padding", "=", "(", "self", ".", "filter_size", "[", "0", "]", ",", "0", ")", ")", "\n", "return", "self", ".", "crop_to_output", "(", "F", ".", "conv2d", "(", "im1", ",", "self", ".", "filter", "[", "1", "]", ",", "padding", "=", "(", "0", ",", "self", ".", "filter_size", "[", "1", "]", ")", ")", ".", "view", "(", "1", ",", "-", "1", ",", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.visdom_ui_handler": [[21, 28], ["None"], "methods", ["None"], ["def", "visdom_ui_handler", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "data", "[", "'event_type'", "]", "==", "'KeyPress'", ":", "\n", "            ", "if", "data", "[", "'key'", "]", "==", "' '", ":", "\n", "                ", "self", ".", "pause_mode", "=", "not", "self", ".", "pause_mode", "\n", "\n", "", "elif", "data", "[", "'key'", "]", "==", "'ArrowRight'", "and", "self", ".", "pause_mode", ":", "\n", "                ", "self", ".", "step", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.__init__": [[29, 50], ["basetracker.BaseTracker.params.visdom_info.get", "pytracking.utils.visdom.Visdom", "basetracker.BaseTracker.visdom.register", "time.sleep", "print"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.model_constructor.NetConstructor.get", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register"], ["", "", "", "def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "\n", "self", ".", "pause_mode", "=", "False", "\n", "self", ".", "step", "=", "False", "\n", "\n", "self", ".", "visdom", "=", "None", "\n", "if", "self", ".", "params", ".", "debug", ">", "0", "and", "self", ".", "params", ".", "visdom_info", ".", "get", "(", "'use_visdom'", ",", "True", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "visdom", "=", "Visdom", "(", "self", ".", "params", ".", "debug", ",", "{", "'handler'", ":", "self", ".", "visdom_ui_handler", ",", "'win_id'", ":", "'Tracking'", "}", ",", "\n", "visdom_info", "=", "self", ".", "params", ".", "visdom_info", ")", "\n", "\n", "# Show help", "\n", "help_text", "=", "'You can pause/unpause the tracker by pressing '", "'space'", "' with the '", "'Tracking'", "' window '", "'selected. During paused mode, you can track for one frame by pressing the right arrow key.'", "'To enable/disable plotting of a data block, tick/untick the corresponding entry in '", "'block list.'", "\n", "self", ".", "visdom", ".", "register", "(", "help_text", ",", "'text'", ",", "1", ",", "'Help'", ")", "\n", "", "except", ":", "\n", "                ", "time", ".", "sleep", "(", "0.5", ")", "\n", "print", "(", "'!!! WARNING: Visdom could not start, so using matplotlib visualization instead !!!\\n'", "\n", "'!!! Start Visdom in a separate terminal window by typing \\'visdom\\' !!!'", ")", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.initialize": [[53, 56], ["None"], "methods", ["None"], ["", "", "", "def", "initialize", "(", "self", ",", "image", ",", "info", ":", "dict", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Overload this function in your tracker. This should initialize the model.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.track": [[58, 61], ["None"], "methods", ["None"], ["", "def", "track", "(", "self", ",", "image", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Overload this function in your tracker. This should track in the frame and update the model.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.track_sequence": [[63, 124], ["basetracker.BaseTracker._read_image", "time.time", "basetracker.BaseTracker.initialize", "basetracker.BaseTracker.track_sequence._store_outputs"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker._read_image", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.initialize"], ["", "def", "track_sequence", "(", "self", ",", "sequence", ")", ":", "\n", "        ", "\"\"\"Run tracker on a sequence.\"\"\"", "\n", "output", "=", "{", "'target_bbox'", ":", "[", "]", ",", "\n", "'time'", ":", "[", "]", ",", "\n", "'present'", ":", "[", "]", ",", "\n", "'score'", ":", "[", "]", ",", "\n", "'xmin'", ":", "[", "]", ",", "\n", "'xmax'", ":", "[", "]", ",", "\n", "'ymin'", ":", "[", "]", ",", "\n", "'ymax'", ":", "[", "]", "}", "\n", "\n", "def", "_store_outputs", "(", "tracker_out", ":", "dict", ",", "defaults", "=", "None", ")", ":", "\n", "            ", "defaults", "=", "{", "}", "if", "defaults", "is", "None", "else", "defaults", "\n", "for", "key", "in", "tracker_out", ".", "keys", "(", ")", ":", "\n", "                ", "if", "key", "not", "in", "output", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Unknown output from tracker.'", ")", "\n", "", "", "for", "key", "in", "output", ".", "keys", "(", ")", ":", "\n", "                ", "val", "=", "tracker_out", ".", "get", "(", "key", ",", "defaults", ".", "get", "(", "key", ",", "None", ")", ")", "\n", "if", "val", "is", "not", "None", ":", "\n", "                    ", "output", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "\n", "# Initialize", "\n", "", "", "", "image", "=", "self", ".", "_read_image", "(", "sequence", ".", "frames", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "params", ".", "visualization", "and", "self", ".", "visdom", "is", "None", ":", "\n", "            ", "self", ".", "init_visualization", "(", ")", "\n", "self", ".", "visualize", "(", "image", ",", "sequence", ".", "get", "(", "'init_bbox'", ")", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "out", "=", "self", ".", "initialize", "(", "image", ",", "sequence", ".", "init_info", "(", ")", ")", "\n", "if", "out", "is", "None", ":", "\n", "            ", "out", "=", "{", "}", "\n", "", "_store_outputs", "(", "out", ",", "{", "'target_bbox'", ":", "sequence", ".", "get", "(", "'init_bbox'", ")", ",", "\n", "'time'", ":", "time", ".", "time", "(", ")", "-", "start_time", "}", ")", "\n", "\n", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "            ", "self", ".", "visdom", ".", "register", "(", "(", "image", ",", "sequence", ".", "get", "(", "'init_bbox'", ")", ")", ",", "'Tracking'", ",", "1", ",", "'Tracking'", ")", "\n", "\n", "# Track", "\n", "", "for", "frame", "in", "sequence", ".", "frames", "[", "1", ":", "]", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "not", "self", ".", "pause_mode", ":", "\n", "                    ", "break", "\n", "", "elif", "self", ".", "step", ":", "\n", "                    ", "self", ".", "step", "=", "False", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n", "", "", "image", "=", "self", ".", "_read_image", "(", "frame", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "out", "=", "self", ".", "track", "(", "image", ")", "\n", "_store_outputs", "(", "out", ",", "{", "'time'", ":", "time", ".", "time", "(", ")", "-", "start_time", "}", ")", "\n", "\n", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "                ", "self", ".", "visdom", ".", "register", "(", "(", "image", ",", "out", "[", "'target_bbox'", "]", ")", ",", "'Tracking'", ",", "1", ",", "'Tracking'", ")", "\n", "", "elif", "self", ".", "params", ".", "visualization", ":", "\n", "                ", "self", ".", "visualize", "(", "image", ",", "out", "[", "'target_bbox'", "]", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.track_videofile": [[125, 202], ["os.path.isfile", "hasattr", "cv2.VideoCapture", "cv2.namedWindow", "cv2.resizeWindow", "cv2.VideoCapture.read", "cv2.imshow", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "basetracker.BaseTracker.initialize_features", "print", "exit", "isinstance", "basetracker.BaseTracker.initialize", "cv2.VideoCapture.read", "frame.copy", "basetracker.BaseTracker.track", "cv2.rectangle", "cv2.putText", "cv2.putText", "cv2.putText", "cv2.imshow", "cv2.waitKey", "len", "frame.copy", "cv2.putText", "cv2.selectROI", "basetracker.BaseTracker.initialize", "int", "ord", "ord", "cv2.VideoCapture.read", "frame.copy", "cv2.putText", "cv2.imshow", "cv2.selectROI", "basetracker.BaseTracker.initialize"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.initialize_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.initialize", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.track", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.initialize", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.initialize"], ["", "def", "track_videofile", "(", "self", ",", "videofilepath", ",", "optional_box", "=", "None", ")", ":", "\n", "        ", "\"\"\"Run track with a video file input.\"\"\"", "\n", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "videofilepath", ")", ",", "\"Invalid param {}\"", ".", "format", "(", "videofilepath", ")", "\n", "\", videofilepath must be a valid videofile\"", "\n", "\n", "if", "hasattr", "(", "self", ",", "'initialize_features'", ")", ":", "\n", "            ", "self", ".", "initialize_features", "(", ")", "\n", "\n", "", "cap", "=", "cv", ".", "VideoCapture", "(", "videofilepath", ")", "\n", "display_name", "=", "'Display: '", "+", "self", ".", "params", ".", "tracker_name", "\n", "cv", ".", "namedWindow", "(", "display_name", ",", "cv", ".", "WINDOW_NORMAL", "|", "cv", ".", "WINDOW_KEEPRATIO", ")", "\n", "cv", ".", "resizeWindow", "(", "display_name", ",", "960", ",", "720", ")", "\n", "success", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "cv", ".", "imshow", "(", "display_name", ",", "frame", ")", "\n", "if", "success", "is", "not", "True", ":", "\n", "            ", "print", "(", "\"Read frame from {} failed.\"", ".", "format", "(", "videofilepath", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "if", "optional_box", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "optional_box", ",", "list", ",", "tuple", ")", "\n", "assert", "len", "(", "optional_box", ")", "==", "4", ",", "\"valid box's foramt is [x,y,w,h]\"", "\n", "self", ".", "initialize", "(", "frame", ",", "{", "'init_bbox'", ":", "optional_box", "}", ")", "\n", "", "else", ":", "\n", "            ", "while", "True", ":", "\n", "# cv.waitKey()", "\n", "                ", "frame_disp", "=", "frame", ".", "copy", "(", ")", "\n", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Select target ROI and press ENTER'", ",", "(", "20", ",", "30", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "\n", "1.5", ",", "(", "0", ",", "0", ",", "0", ")", ",", "1", ")", "\n", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "cv", ".", "selectROI", "(", "display_name", ",", "frame_disp", ",", "fromCenter", "=", "False", ")", "\n", "init_state", "=", "[", "x", ",", "y", ",", "w", ",", "h", "]", "\n", "self", ".", "initialize", "(", "frame", ",", "{", "'init_bbox'", ":", "init_state", "}", ")", "\n", "break", "\n", "\n", "", "", "while", "True", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "\n", "if", "frame", "is", "None", ":", "\n", "                ", "return", "\n", "\n", "", "frame_disp", "=", "frame", ".", "copy", "(", ")", "\n", "\n", "# Draw box", "\n", "out", "=", "self", ".", "track", "(", "frame", ")", "\n", "state", "=", "[", "int", "(", "s", ")", "for", "s", "in", "out", "[", "'target_bbox'", "]", "]", "\n", "cv", ".", "rectangle", "(", "frame_disp", ",", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ")", ",", "(", "state", "[", "2", "]", "+", "state", "[", "0", "]", ",", "state", "[", "3", "]", "+", "state", "[", "1", "]", ")", ",", "\n", "(", "0", ",", "255", ",", "0", ")", ",", "5", ")", "\n", "\n", "font_color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Tracking!'", ",", "(", "20", ",", "30", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "\n", "font_color", ",", "1", ")", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Press r to reset'", ",", "(", "20", ",", "55", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "\n", "font_color", ",", "1", ")", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Press q to quit'", ",", "(", "20", ",", "80", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "\n", "font_color", ",", "1", ")", "\n", "\n", "# Display the resulting frame", "\n", "cv", ".", "imshow", "(", "display_name", ",", "frame_disp", ")", "\n", "key", "=", "cv", ".", "waitKey", "(", "1", ")", "\n", "if", "key", "==", "ord", "(", "'q'", ")", ":", "\n", "                ", "break", "\n", "", "elif", "key", "==", "ord", "(", "'r'", ")", ":", "\n", "                ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "frame_disp", "=", "frame", ".", "copy", "(", ")", "\n", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Select target ROI and press ENTER'", ",", "(", "20", ",", "30", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1.5", ",", "\n", "(", "0", ",", "0", ",", "0", ")", ",", "1", ")", "\n", "\n", "cv", ".", "imshow", "(", "display_name", ",", "frame_disp", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "cv", ".", "selectROI", "(", "display_name", ",", "frame_disp", ",", "fromCenter", "=", "False", ")", "\n", "init_state", "=", "[", "x", ",", "y", ",", "w", ",", "h", "]", "\n", "self", ".", "initialize", "(", "frame", ",", "{", "'init_bbox'", ":", "init_state", "}", ")", "\n", "\n", "# When everything done, release the capture", "\n", "", "", "cap", ".", "release", "(", ")", "\n", "cv", ".", "destroyAllWindows", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.track_webcam": [[203, 292], ["UIControl", "cv2.VideoCapture", "cv2.namedWindow", "cv2.resizeWindow", "cv2.setMouseCallback", "hasattr", "cv2.VideoCapture.release", "cv2.destroyAllWindows", "basetracker.BaseTracker.initialize_features", "cv2.VideoCapture.read", "frame.copy", "cv2.imshow", "cv2.waitKey", "basetracker.BaseTracker.get_tl", "basetracker.BaseTracker.get_br", "UIControl.get_bb", "basetracker.BaseTracker.initialize", "cv2.rectangle", "cv2.putText", "cv2.putText", "ord", "min", "min", "abs", "abs", "UIControl.get_tl", "UIControl.get_br", "basetracker.BaseTracker.track", "cv2.rectangle", "cv2.putText", "cv2.putText", "cv2.putText", "ord", "int"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.initialize_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.initialize", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.track"], ["", "def", "track_webcam", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run tracker with webcam.\"\"\"", "\n", "\n", "class", "UIControl", ":", "\n", "            ", "def", "__init__", "(", "self", ")", ":", "\n", "                ", "self", ".", "mode", "=", "'init'", "# init, select, track", "\n", "self", ".", "target_tl", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "self", ".", "target_br", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "self", ".", "mode_switch", "=", "False", "\n", "\n", "", "def", "mouse_callback", "(", "self", ",", "event", ",", "x", ",", "y", ",", "flags", ",", "param", ")", ":", "\n", "                ", "if", "event", "==", "cv", ".", "EVENT_LBUTTONDOWN", "and", "self", ".", "mode", "==", "'init'", ":", "\n", "                    ", "self", ".", "target_tl", "=", "(", "x", ",", "y", ")", "\n", "self", ".", "target_br", "=", "(", "x", ",", "y", ")", "\n", "self", ".", "mode", "=", "'select'", "\n", "self", ".", "mode_switch", "=", "True", "\n", "", "elif", "event", "==", "cv", ".", "EVENT_MOUSEMOVE", "and", "self", ".", "mode", "==", "'select'", ":", "\n", "                    ", "self", ".", "target_br", "=", "(", "x", ",", "y", ")", "\n", "", "elif", "event", "==", "cv", ".", "EVENT_LBUTTONDOWN", "and", "self", ".", "mode", "==", "'select'", ":", "\n", "                    ", "self", ".", "target_br", "=", "(", "x", ",", "y", ")", "\n", "self", ".", "mode", "=", "'track'", "\n", "self", ".", "mode_switch", "=", "True", "\n", "\n", "", "", "def", "get_tl", "(", "self", ")", ":", "\n", "                ", "return", "self", ".", "target_tl", "if", "self", ".", "target_tl", "[", "0", "]", "<", "self", ".", "target_br", "[", "0", "]", "else", "self", ".", "target_br", "\n", "\n", "", "def", "get_br", "(", "self", ")", ":", "\n", "                ", "return", "self", ".", "target_br", "if", "self", ".", "target_tl", "[", "0", "]", "<", "self", ".", "target_br", "[", "0", "]", "else", "self", ".", "target_tl", "\n", "\n", "", "def", "get_bb", "(", "self", ")", ":", "\n", "                ", "tl", "=", "self", ".", "get_tl", "(", ")", "\n", "br", "=", "self", ".", "get_br", "(", ")", "\n", "\n", "bb", "=", "[", "min", "(", "tl", "[", "0", "]", ",", "br", "[", "0", "]", ")", ",", "min", "(", "tl", "[", "1", "]", ",", "br", "[", "1", "]", ")", ",", "abs", "(", "br", "[", "0", "]", "-", "tl", "[", "0", "]", ")", ",", "abs", "(", "br", "[", "1", "]", "-", "tl", "[", "1", "]", ")", "]", "\n", "return", "bb", "\n", "\n", "", "", "ui_control", "=", "UIControl", "(", ")", "\n", "cap", "=", "cv", ".", "VideoCapture", "(", "0", ")", "\n", "display_name", "=", "'Display: '", "+", "self", ".", "params", ".", "tracker_name", "\n", "cv", ".", "namedWindow", "(", "display_name", ",", "cv", ".", "WINDOW_NORMAL", "|", "cv", ".", "WINDOW_KEEPRATIO", ")", "\n", "cv", ".", "resizeWindow", "(", "display_name", ",", "960", ",", "720", ")", "\n", "cv", ".", "setMouseCallback", "(", "display_name", ",", "ui_control", ".", "mouse_callback", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'initialize_features'", ")", ":", "\n", "            ", "self", ".", "initialize_features", "(", ")", "\n", "\n", "", "while", "True", ":", "\n", "# Capture frame-by-frame", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "frame_disp", "=", "frame", ".", "copy", "(", ")", "\n", "\n", "if", "ui_control", ".", "mode", "==", "'track'", "and", "ui_control", ".", "mode_switch", ":", "\n", "                ", "ui_control", ".", "mode_switch", "=", "False", "\n", "init_state", "=", "ui_control", ".", "get_bb", "(", ")", "\n", "self", ".", "initialize", "(", "frame", ",", "{", "'init_bbox'", ":", "init_state", "}", ")", "\n", "\n", "# Draw box", "\n", "", "if", "ui_control", ".", "mode", "==", "'select'", ":", "\n", "                ", "cv", ".", "rectangle", "(", "frame_disp", ",", "ui_control", ".", "get_tl", "(", ")", ",", "ui_control", ".", "get_br", "(", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "2", ")", "\n", "", "elif", "ui_control", ".", "mode", "==", "'track'", ":", "\n", "                ", "out", "=", "self", ".", "track", "(", "frame", ")", "\n", "state", "=", "[", "int", "(", "s", ")", "for", "s", "in", "out", "[", "'target_bbox'", "]", "]", "\n", "cv", ".", "rectangle", "(", "frame_disp", ",", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ")", ",", "(", "state", "[", "2", "]", "+", "state", "[", "0", "]", ",", "state", "[", "3", "]", "+", "state", "[", "1", "]", ")", ",", "\n", "(", "0", ",", "255", ",", "0", ")", ",", "5", ")", "\n", "\n", "# Put text", "\n", "", "font_color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "if", "ui_control", ".", "mode", "==", "'init'", "or", "ui_control", ".", "mode", "==", "'select'", ":", "\n", "                ", "cv", ".", "putText", "(", "frame_disp", ",", "'Select target'", ",", "(", "20", ",", "30", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "font_color", ",", "1", ")", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Press q to quit'", ",", "(", "20", ",", "55", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "\n", "font_color", ",", "1", ")", "\n", "", "elif", "ui_control", ".", "mode", "==", "'track'", ":", "\n", "                ", "cv", ".", "putText", "(", "frame_disp", ",", "'Tracking!'", ",", "(", "20", ",", "30", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "\n", "font_color", ",", "1", ")", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Press r to reset'", ",", "(", "20", ",", "55", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "\n", "font_color", ",", "1", ")", "\n", "cv", ".", "putText", "(", "frame_disp", ",", "'Press q to quit'", ",", "(", "20", ",", "80", ")", ",", "cv", ".", "FONT_HERSHEY_COMPLEX_SMALL", ",", "1", ",", "\n", "font_color", ",", "1", ")", "\n", "# Display the resulting frame", "\n", "", "cv", ".", "imshow", "(", "display_name", ",", "frame_disp", ")", "\n", "key", "=", "cv", ".", "waitKey", "(", "1", ")", "\n", "if", "key", "==", "ord", "(", "'q'", ")", ":", "\n", "                ", "break", "\n", "", "elif", "key", "==", "ord", "(", "'r'", ")", ":", "\n", "                ", "ui_control", ".", "mode", "=", "'init'", "\n", "\n", "# When everything done, release the capture", "\n", "", "", "cap", ".", "release", "(", ")", "\n", "cv", ".", "destroyAllWindows", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.track_vot": [[293, 345], ["vot.VOT", "vot.VOT.region", "basetracker.BaseTracker.track_vot._convert_anno_to_list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.vot.VOT.region"], ["", "def", "track_vot", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run tracker on VOT.\"\"\"", "\n", "def", "_convert_anno_to_list", "(", "vot_anno", ")", ":", "\n", "            ", "vot_anno", "=", "[", "vot_anno", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "vot_anno", "[", "0", "]", "[", "0", "]", "[", "1", "]", ",", "vot_anno", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "vot_anno", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "\n", "vot_anno", "[", "0", "]", "[", "2", "]", "[", "0", "]", ",", "vot_anno", "[", "0", "]", "[", "2", "]", "[", "1", "]", ",", "vot_anno", "[", "0", "]", "[", "3", "]", "[", "0", "]", ",", "vot_anno", "[", "0", "]", "[", "3", "]", "[", "1", "]", "]", "\n", "return", "vot_anno", "\n", "\n", "", "def", "_convert_image_path", "(", "image_path", ")", ":", "\n", "            ", "image_path_new", "=", "image_path", "[", "20", ":", "-", "2", "]", "\n", "return", "\"\"", ".", "join", "(", "image_path_new", ")", "\n", "\n", "", "handle", "=", "vot", ".", "VOT", "(", "\"polygon\"", ")", "\n", "\n", "vot_anno_polygon", "=", "handle", ".", "region", "(", ")", "\n", "vot_anno_polygon", "=", "_convert_anno_to_list", "(", "vot_anno_polygon", ")", "\n", "\n", "init_state", "=", "convert_vot_anno_to_rect", "(", "vot_anno_polygon", ",", "self", ".", "params", ".", "vot_anno_conversion_type", ")", "\n", "\n", "image_path", "=", "handle", ".", "frame", "(", ")", "\n", "if", "not", "image_path", ":", "\n", "            ", "return", "\n", "", "image_path", "=", "_convert_image_path", "(", "image_path", ")", "\n", "\n", "image", "=", "self", ".", "_read_image", "(", "image_path", ")", "\n", "self", ".", "initialize", "(", "image", ",", "{", "'init_bbox'", ":", "init_state", "}", ")", "\n", "\n", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "            ", "self", ".", "visdom", ".", "register", "(", "(", "image", ",", "init_state", ")", ",", "'Tracking'", ",", "1", ",", "'Tracking'", ")", "\n", "\n", "# Track", "\n", "", "while", "True", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "if", "not", "self", ".", "pause_mode", ":", "\n", "                    ", "break", "\n", "", "elif", "self", ".", "step", ":", "\n", "                    ", "self", ".", "step", "=", "False", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n", "", "", "image_path", "=", "handle", ".", "frame", "(", ")", "\n", "if", "not", "image_path", ":", "\n", "                ", "break", "\n", "", "image_path", "=", "_convert_image_path", "(", "image_path", ")", "\n", "\n", "image", "=", "self", ".", "_read_image", "(", "image_path", ")", "\n", "out", "=", "self", ".", "track", "(", "image", ")", "\n", "state", "=", "out", "[", "'target_bbox'", "]", "\n", "\n", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "                ", "self", ".", "visdom", ".", "register", "(", "(", "image", ",", "state", ")", ",", "'Tracking'", ",", "1", ",", "'Tracking'", ")", "\n", "", "handle", ".", "report", "(", "vot", ".", "Rectangle", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ",", "state", "[", "2", "]", ",", "state", "[", "3", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.reset_tracker": [[346, 348], ["None"], "methods", ["None"], ["", "", "def", "reset_tracker", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.press": [[349, 356], ["print", "basetracker.BaseTracker.reset_tracker", "print"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.reset_tracker"], ["", "def", "press", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "event", ".", "key", "==", "'p'", ":", "\n", "            ", "self", ".", "pause_mode", "=", "not", "self", ".", "pause_mode", "\n", "print", "(", "\"Switching pause mode!\"", ")", "\n", "", "elif", "event", ".", "key", "==", "'r'", ":", "\n", "            ", "self", ".", "reset_tracker", "(", ")", "\n", "print", "(", "\"Resetting target pos to gt!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.init_visualization": [[357, 363], ["matplotlib.subplots", "matplotlib.subplots", "basetracker.BaseTracker.fig.canvas.mpl_connect", "matplotlib.tight_layout", "matplotlib.tight_layout"], "methods", ["None"], ["", "", "def", "init_visualization", "(", "self", ")", ":", "\n", "# plt.ion()", "\n", "        ", "self", ".", "pause_mode", "=", "False", "\n", "self", ".", "fig", ",", "self", ".", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "self", ".", "fig", ".", "canvas", ".", "mpl_connect", "(", "'key_press_event'", ",", "self", ".", "press", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.visualize": [[364, 382], ["basetracker.BaseTracker.ax.cla", "basetracker.BaseTracker.ax.imshow", "matplotlib.Rectangle", "matplotlib.Rectangle", "basetracker.BaseTracker.ax.add_patch", "basetracker.BaseTracker.ax.set_axis_off", "basetracker.BaseTracker.ax.axis", "pytracking.utils.plotting.draw_figure", "hasattr", "matplotlib.Rectangle", "matplotlib.Rectangle", "basetracker.BaseTracker.ax.add_patch", "matplotlib.waitforbuttonpress", "matplotlib.waitforbuttonpress"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.draw_figure"], ["", "def", "visualize", "(", "self", ",", "image", ",", "state", ")", ":", "\n", "        ", "self", ".", "ax", ".", "cla", "(", ")", "\n", "self", ".", "ax", ".", "imshow", "(", "image", ")", "\n", "rect", "=", "patches", ".", "Rectangle", "(", "(", "state", "[", "0", "]", ",", "state", "[", "1", "]", ")", ",", "state", "[", "2", "]", ",", "state", "[", "3", "]", ",", "linewidth", "=", "1", ",", "edgecolor", "=", "'r'", ",", "facecolor", "=", "'none'", ")", "\n", "self", ".", "ax", ".", "add_patch", "(", "rect", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'gt_state'", ")", "and", "False", ":", "\n", "            ", "gt_state", "=", "self", ".", "gt_state", "\n", "rect", "=", "patches", ".", "Rectangle", "(", "(", "gt_state", "[", "0", "]", ",", "gt_state", "[", "1", "]", ")", ",", "gt_state", "[", "2", "]", ",", "gt_state", "[", "3", "]", ",", "linewidth", "=", "1", ",", "edgecolor", "=", "'g'", ",", "facecolor", "=", "'none'", ")", "\n", "self", ".", "ax", ".", "add_patch", "(", "rect", ")", "\n", "", "self", ".", "ax", ".", "set_axis_off", "(", ")", "\n", "self", ".", "ax", ".", "axis", "(", "'equal'", ")", "\n", "draw_figure", "(", "self", ".", "fig", ")", "\n", "\n", "if", "self", ".", "pause_mode", ":", "\n", "            ", "keypress", "=", "False", "\n", "while", "not", "keypress", ":", "\n", "                ", "keypress", "=", "plt", ".", "waitforbuttonpress", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.show_image": [[383, 408], ["isinstance", "getattr.cla", "getattr.imshow", "getattr.set_axis_off", "getattr.axis", "getattr.set_title", "pytracking.utils.plotting.draw_figure", "pytracking.features.preprocessing.torch_to_numpy", "hasattr", "matplotlib.subplots", "matplotlib.subplots", "setattr", "setattr", "matplotlib.tight_layout", "matplotlib.tight_layout", "getattr.set_title", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.draw_figure", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.preprocessing.torch_to_numpy"], ["", "", "", "def", "show_image", "(", "self", ",", "im", ",", "plot_name", "=", "None", ",", "ax", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "im", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "im", "=", "torch_to_numpy", "(", "im", ")", "\n", "# plot_id = sum([ord(x) for x in list(plot_name)])", "\n", "\n", "", "if", "ax", "is", "None", ":", "\n", "            ", "plot_fig_name", "=", "'debug_fig_'", "+", "plot_name", "\n", "plot_ax_name", "=", "'debug_ax_'", "+", "plot_name", "\n", "if", "not", "hasattr", "(", "self", ",", "plot_fig_name", ")", ":", "\n", "                ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ")", "\n", "setattr", "(", "self", ",", "plot_fig_name", ",", "fig", ")", "\n", "setattr", "(", "self", ",", "plot_ax_name", ",", "ax", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "ax", ".", "set_title", "(", "plot_name", ")", "\n", "", "else", ":", "\n", "                ", "fig", "=", "getattr", "(", "self", ",", "plot_fig_name", ",", "None", ")", "\n", "ax", "=", "getattr", "(", "self", ",", "plot_ax_name", ",", "None", ")", "\n", "\n", "", "", "ax", ".", "cla", "(", ")", "\n", "ax", ".", "imshow", "(", "im", ")", "\n", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "ax", ".", "axis", "(", "'equal'", ")", "\n", "ax", ".", "set_title", "(", "plot_name", ")", "\n", "draw_figure", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker._read_image": [[409, 411], ["cv2.cvtColor", "cv2.imread"], "methods", ["None"], ["", "def", "_read_image", "(", "self", ",", "image_file", ":", "str", ")", ":", "\n", "        ", "return", "cv", ".", "cvtColor", "(", "cv", ".", "imread", "(", "image_file", ")", ",", "cv", ".", "COLOR_BGR2RGB", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.rfftshift2": [[7, 11], ["torch.cat", "torch.cat"], "function", ["None"], ["@", "tensor_operation", "\n", "def", "rfftshift2", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "h", "=", "a", ".", "shape", "[", "2", "]", "+", "2", "\n", "return", "torch", ".", "cat", "(", "(", "a", "[", ":", ",", ":", ",", "(", "h", "-", "1", ")", "//", "2", ":", ",", "...", "]", ",", "a", "[", ":", ",", ":", ",", ":", "h", "//", "2", ",", "...", "]", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.irfftshift2": [[13, 17], ["int", "torch.cat", "torch.cat"], "function", ["None"], ["", "@", "tensor_operation", "\n", "def", "irfftshift2", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "mid", "=", "int", "(", "(", "a", ".", "shape", "[", "2", "]", "-", "1", ")", "/", "2", ")", "\n", "return", "torch", ".", "cat", "(", "(", "a", "[", ":", ",", ":", ",", "mid", ":", ",", "...", "]", ",", "a", "[", ":", ",", ":", ",", ":", "mid", ",", "...", "]", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.cfft2": [[19, 25], ["fourier.rfftshift2", "torch.rfft", "torch.rfft"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.rfftshift2"], ["", "@", "tensor_operation", "\n", "def", "cfft2", "(", "a", ")", ":", "\n", "    ", "\"\"\"Do FFT and center the low frequency component.\n    Always produces odd (full) output sizes.\"\"\"", "\n", "\n", "return", "rfftshift2", "(", "torch", ".", "rfft", "(", "a", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.cifft2": [[27, 32], ["torch.irfft", "torch.irfft", "fourier.irfftshift2"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.irfftshift2"], ["", "@", "tensor_operation", "\n", "def", "cifft2", "(", "a", ",", "signal_sizes", "=", "None", ")", ":", "\n", "    ", "\"\"\"Do inverse FFT corresponding to cfft2.\"\"\"", "\n", "\n", "return", "torch", ".", "irfft", "(", "irfftshift2", "(", "a", ")", ",", "2", ",", "signal_sizes", "=", "signal_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.sample_fs": [[34, 62], ["torch.Tensor().float", "torch.Tensor().float", "int", "int", "fourier.cifft2", "ValueError", "int", "int", "fourier.cifft2", "torch.Tensor", "torch.Tensor", "grid_sz.prod().item", "fourier.cifft2", "torch.pad", "torch.Tensor().float.prod().item", "fourier.cifft2", "s.item", "torch.pad", "grid_sz.long().tolist", "grid_sz.prod", "grid_sz.long().tolist", "torch.Tensor().float.prod", "grid_sz.long", "grid_sz.long"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.cifft2", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.cifft2", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.cifft2", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.cifft2"], ["", "@", "tensor_operation", "\n", "def", "sample_fs", "(", "a", ":", "torch", ".", "Tensor", ",", "grid_sz", ":", "torch", ".", "Tensor", "=", "None", ",", "rescale", "=", "True", ")", ":", "\n", "    ", "\"\"\"Samples the Fourier series.\"\"\"", "\n", "\n", "# Size of the fourier series", "\n", "sz", "=", "torch", ".", "Tensor", "(", "[", "a", ".", "shape", "[", "2", "]", ",", "2", "*", "a", ".", "shape", "[", "3", "]", "-", "1", "]", ")", ".", "float", "(", ")", "\n", "\n", "# Default grid", "\n", "if", "grid_sz", "is", "None", "or", "sz", "[", "0", "]", "==", "grid_sz", "[", "0", "]", "and", "sz", "[", "1", "]", "==", "grid_sz", "[", "1", "]", ":", "\n", "        ", "if", "rescale", ":", "\n", "            ", "return", "sz", ".", "prod", "(", ")", ".", "item", "(", ")", "*", "cifft2", "(", "a", ")", "\n", "", "return", "cifft2", "(", "a", ")", "\n", "\n", "", "if", "sz", "[", "0", "]", ">", "grid_sz", "[", "0", "]", "or", "sz", "[", "1", "]", ">", "grid_sz", "[", "1", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"Only grid sizes that are smaller than the Fourier series size are supported.\"", ")", "\n", "\n", "", "tot_pad", "=", "(", "grid_sz", "-", "sz", ")", ".", "tolist", "(", ")", "\n", "is_even", "=", "[", "s", ".", "item", "(", ")", "%", "2", "==", "0", "for", "s", "in", "sz", "]", "\n", "\n", "# Compute paddings", "\n", "pad_top", "=", "int", "(", "(", "tot_pad", "[", "0", "]", "+", "1", ")", "/", "2", ")", "if", "is_even", "[", "0", "]", "else", "int", "(", "tot_pad", "[", "0", "]", "/", "2", ")", "\n", "pad_bottom", "=", "int", "(", "tot_pad", "[", "0", "]", "-", "pad_top", ")", "\n", "pad_right", "=", "int", "(", "(", "tot_pad", "[", "1", "]", "+", "1", ")", "/", "2", ")", "\n", "\n", "if", "rescale", ":", "\n", "        ", "return", "grid_sz", ".", "prod", "(", ")", ".", "item", "(", ")", "*", "cifft2", "(", "F", ".", "pad", "(", "a", ",", "(", "0", ",", "0", ",", "0", ",", "pad_right", ",", "pad_top", ",", "pad_bottom", ")", ")", ",", "signal_sizes", "=", "grid_sz", ".", "long", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "cifft2", "(", "F", ".", "pad", "(", "a", ",", "(", "0", ",", "0", ",", "0", ",", "pad_right", ",", "pad_top", ",", "pad_bottom", ")", ")", ",", "signal_sizes", "=", "grid_sz", ".", "long", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.get_frequency_coord": [[64, 75], ["torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "ky.unsqueeze.unsqueeze", "kx.unsqueeze.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "int", "int", "int"], "function", ["None"], ["", "", "def", "get_frequency_coord", "(", "sz", ",", "add_complex_dim", "=", "False", ",", "device", "=", "'cpu'", ")", ":", "\n", "    ", "\"\"\"Frequency coordinates.\"\"\"", "\n", "\n", "ky", "=", "torch", ".", "arange", "(", "-", "int", "(", "(", "sz", "[", "0", "]", "-", "1", ")", "/", "2", ")", ",", "int", "(", "sz", "[", "0", "]", "/", "2", "+", "1", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "\n", "kx", "=", "torch", ".", "arange", "(", "0", ",", "int", "(", "sz", "[", "1", "]", "/", "2", "+", "1", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "\n", "if", "add_complex_dim", ":", "\n", "        ", "ky", "=", "ky", ".", "unsqueeze", "(", "-", "1", ")", "\n", "kx", "=", "kx", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "return", "ky", ",", "kx", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.shift_fs": [[77, 93], ["fourier.get_frequency_coord", "pytracking.complex.mult", "a.dim", "ValueError", "pytracking.complex.mult", "pytracking.complex.exp_imag", "pytracking.complex.exp_imag", "shift[].item", "shift[].item"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.get_frequency_coord", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.exp_imag", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.exp_imag"], ["", "@", "tensor_operation", "\n", "def", "shift_fs", "(", "a", ":", "torch", ".", "Tensor", ",", "shift", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Shift a sample a in the Fourier domain.\n    Params:\n        a : The fourier coefficiens of the sample.\n        shift : The shift to be performed normalized to the range [-pi, pi].\"\"\"", "\n", "\n", "if", "a", ".", "dim", "(", ")", "!=", "5", ":", "\n", "        ", "raise", "ValueError", "(", "'a must be the Fourier coefficients, a 5-dimensional tensor.'", ")", "\n", "\n", "", "if", "shift", "[", "0", "]", "==", "0", "and", "shift", "[", "1", "]", "==", "0", ":", "\n", "        ", "return", "a", "\n", "\n", "", "ky", ",", "kx", "=", "get_frequency_coord", "(", "(", "a", ".", "shape", "[", "2", "]", ",", "2", "*", "a", ".", "shape", "[", "3", "]", "-", "1", ")", ",", "device", "=", "a", ".", "device", ")", "\n", "\n", "return", "complex", ".", "mult", "(", "complex", ".", "mult", "(", "a", ",", "complex", ".", "exp_imag", "(", "shift", "[", "0", "]", ".", "item", "(", ")", "*", "ky", ")", ")", ",", "complex", ".", "exp_imag", "(", "shift", "[", "1", "]", ".", "item", "(", ")", "*", "kx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.sum_fs": [[95, 115], ["sorted", "e.clone", "int", "int", "int"], "function", ["None"], ["", "def", "sum_fs", "(", "a", ":", "TensorList", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Sum a list of Fourier series expansions.\"\"\"", "\n", "\n", "s", "=", "None", "\n", "mid", "=", "None", "\n", "\n", "for", "e", "in", "sorted", "(", "a", ",", "key", "=", "lambda", "elem", ":", "elem", ".", "shape", "[", "-", "3", "]", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "if", "s", "is", "None", ":", "\n", "            ", "s", "=", "e", ".", "clone", "(", ")", "\n", "mid", "=", "int", "(", "(", "s", ".", "shape", "[", "-", "3", "]", "-", "1", ")", "/", "2", ")", "\n", "", "else", ":", "\n", "# Compute coordinates", "\n", "            ", "top", "=", "mid", "-", "int", "(", "(", "e", ".", "shape", "[", "-", "3", "]", "-", "1", ")", "/", "2", ")", "\n", "bottom", "=", "mid", "+", "int", "(", "e", ".", "shape", "[", "-", "3", "]", "/", "2", ")", "+", "1", "\n", "right", "=", "e", ".", "shape", "[", "-", "2", "]", "\n", "\n", "# Add the data", "\n", "s", "[", "...", ",", "top", ":", "bottom", ",", ":", "right", ",", ":", "]", "+=", "e", "\n", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.sum_fs12": [[117, 137], ["sorted", "e.clone", "int", "int", "int"], "function", ["None"], ["", "def", "sum_fs12", "(", "a", ":", "TensorList", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Sum a list of Fourier series expansions.\"\"\"", "\n", "\n", "s", "=", "None", "\n", "mid", "=", "None", "\n", "\n", "for", "e", "in", "sorted", "(", "a", ",", "key", "=", "lambda", "elem", ":", "elem", ".", "shape", "[", "0", "]", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "if", "s", "is", "None", ":", "\n", "            ", "s", "=", "e", ".", "clone", "(", ")", "\n", "mid", "=", "int", "(", "(", "s", ".", "shape", "[", "0", "]", "-", "1", ")", "/", "2", ")", "\n", "", "else", ":", "\n", "# Compute coordinates", "\n", "            ", "top", "=", "mid", "-", "int", "(", "(", "e", ".", "shape", "[", "0", "]", "-", "1", ")", "/", "2", ")", "\n", "bottom", "=", "mid", "+", "int", "(", "e", ".", "shape", "[", "0", "]", "/", "2", ")", "+", "1", "\n", "right", "=", "e", ".", "shape", "[", "1", "]", "\n", "\n", "# Add the data", "\n", "s", "[", "top", ":", "bottom", ",", ":", "right", ",", "...", "]", "+=", "e", "\n", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.inner_prod_fs": [[139, 147], ["pytracking.complex.is_complex", "pytracking.complex.is_complex", "pytracking.complex.is_real", "pytracking.complex.is_real", "NotImplementedError", "a[].reshape", "b[].reshape", "a.reshape", "b.reshape", "a[].reshape", "b[].reshape", "a.reshape", "b.reshape"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_complex", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_complex", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real"], ["", "@", "tensor_operation", "\n", "def", "inner_prod_fs", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "if", "complex", ".", "is_complex", "(", "a", ")", "and", "complex", ".", "is_complex", "(", "b", ")", ":", "\n", "        ", "return", "2", "*", "(", "a", ".", "reshape", "(", "-", "1", ")", "@", "b", ".", "reshape", "(", "-", "1", ")", ")", "-", "a", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ".", "reshape", "(", "-", "1", ")", "@", "b", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ".", "reshape", "(", "-", "1", ")", "\n", "", "elif", "complex", ".", "is_real", "(", "a", ")", "and", "complex", ".", "is_real", "(", "b", ")", ":", "\n", "        ", "return", "2", "*", "(", "a", ".", "reshape", "(", "-", "1", ")", "@", "b", ".", "reshape", "(", "-", "1", ")", ")", "-", "a", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ")", "@", "b", "[", ":", ",", ":", ",", ":", ",", "0", "]", ".", "reshape", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Not implemented for mixed real and complex.'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.__call__": [[11, 14], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "x", ":", "TensorList", ")", "->", "TensorList", ":", "\n", "        ", "\"\"\"Shall compute the residuals of the problem.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.ip_input": [[15, 18], ["sum", "a.view", "b.view"], "methods", ["None"], ["", "def", "ip_input", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "\"\"\"Inner product of the input space.\"\"\"", "\n", "return", "sum", "(", "a", ".", "view", "(", "-", "1", ")", "@", "b", ".", "view", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.ip_output": [[19, 22], ["sum", "a.view", "b.view"], "methods", ["None"], ["", "def", "ip_output", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "\"\"\"Inner product of the output space.\"\"\"", "\n", "return", "sum", "(", "a", ".", "view", "(", "-", "1", ")", "@", "b", ".", "view", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.M1": [[23, 26], ["None"], "methods", ["None"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"M1 preconditioner.\"\"\"", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.M2": [[27, 30], ["None"], "methods", ["None"], ["", "def", "M2", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"M2 preconditioner.\"\"\"", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.MinimizationProblem.__call__": [[34, 37], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "x", ":", "TensorList", ")", "->", "TensorList", ":", "\n", "        ", "\"\"\"Shall compute the loss.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.MinimizationProblem.ip_input": [[38, 41], ["sum", "a.view", "b.view"], "methods", ["None"], ["", "def", "ip_input", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "\"\"\"Inner product of the input space.\"\"\"", "\n", "return", "sum", "(", "a", ".", "view", "(", "-", "1", ")", "@", "b", ".", "view", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.MinimizationProblem.M1": [[42, 44], ["None"], "methods", ["None"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.MinimizationProblem.M2": [[45, 47], ["None"], "methods", ["None"], ["", "def", "M2", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.__init__": [[53, 66], ["torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fletcher_reeves", "=", "True", ",", "standard_alpha", "=", "True", ",", "direction_forget_factor", "=", "0", ",", "debug", "=", "False", ")", ":", "\n", "        ", "self", ".", "fletcher_reeves", "=", "fletcher_reeves", "\n", "self", ".", "standard_alpha", "=", "standard_alpha", "\n", "self", ".", "direction_forget_factor", "=", "direction_forget_factor", "\n", "self", ".", "debug", "=", "debug", "\n", "\n", "# State", "\n", "self", ".", "p", "=", "None", "\n", "self", ".", "rho", "=", "torch", ".", "ones", "(", "1", ")", "\n", "self", ".", "r_prev", "=", "None", "\n", "\n", "# Right hand side", "\n", "self", ".", "b", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.reset_state": [[67, 71], ["torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "reset_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "None", "\n", "self", ".", "rho", "=", "torch", ".", "ones", "(", "1", ")", "\n", "self", ".", "r_prev", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.run_CG": [[73, 165], ["range", "optimization.ConjugateGradientBase.reset_state", "optimization.ConjugateGradientBase.b.clone", "optimization.ConjugateGradientBase.residual_norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.ConjugateGradientBase.M1", "optimization.ConjugateGradientBase.M2", "optimization.ConjugateGradientBase.ip", "optimization.ConjugateGradientBase.check_zero", "optimization.ConjugateGradientBase.A", "optimization.ConjugateGradientBase.ip", "optimization.ConjugateGradientBase.A", "optimization.ConjugateGradientBase.clone", "beta.clamp.clamp.clamp", "optimization.ConjugateGradientBase.clone", "optimization.ConjugateGradientBase.residual_norm", "optimization.ConjugateGradientBase.evaluate_CG_iteration", "print", "optimization.ConjugateGradientBase.ip", "optimization.ConjugateGradientBase.ip", "print"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.reset_state", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.residual_norm", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.M1", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.M2", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.ip", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.check_zero", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.A", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.ip", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.A", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.residual_norm", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.evaluate_CG_iteration", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.ip", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.ip"], ["", "def", "run_CG", "(", "self", ",", "num_iter", ",", "x", "=", "None", ",", "eps", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Main conjugate gradient method.\n\n        args:\n            num_iter: Number of iterations.\n            x: Initial guess. Assumed zero if None.\n            eps: Stop if the residual norm gets smaller than this.\n        \"\"\"", "\n", "\n", "# Apply forgetting factor", "\n", "if", "self", ".", "direction_forget_factor", "==", "0", ":", "\n", "            ", "self", ".", "reset_state", "(", ")", "\n", "", "elif", "self", ".", "p", "is", "not", "None", ":", "\n", "            ", "self", ".", "rho", "/=", "self", ".", "direction_forget_factor", "\n", "\n", "", "if", "x", "is", "None", ":", "\n", "            ", "r", "=", "self", ".", "b", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "r", "=", "self", ".", "b", "-", "self", ".", "A", "(", "x", ")", "\n", "\n", "# Norms of residuals etc for debugging", "\n", "", "resvec", "=", "None", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "normr", "=", "self", ".", "residual_norm", "(", "r", ")", "\n", "resvec", "=", "torch", ".", "zeros", "(", "num_iter", "+", "1", ")", "\n", "resvec", "[", "0", "]", "=", "normr", "\n", "\n", "# Loop over iterations", "\n", "", "for", "ii", "in", "range", "(", "num_iter", ")", ":", "\n", "# Preconditioners", "\n", "            ", "y", "=", "self", ".", "M1", "(", "r", ")", "\n", "z", "=", "self", ".", "M2", "(", "y", ")", "\n", "\n", "rho1", "=", "self", ".", "rho", "\n", "self", ".", "rho", "=", "self", ".", "ip", "(", "r", ",", "z", ")", "\n", "\n", "if", "self", ".", "check_zero", "(", "self", ".", "rho", ")", ":", "\n", "                ", "if", "self", ".", "debug", ":", "\n", "                    ", "print", "(", "'Stopped CG since rho = 0'", ")", "\n", "if", "resvec", "is", "not", "None", ":", "\n", "                        ", "resvec", "=", "resvec", "[", ":", "ii", "+", "1", "]", "\n", "", "", "return", "x", ",", "resvec", "\n", "\n", "", "if", "self", ".", "p", "is", "None", ":", "\n", "                ", "self", ".", "p", "=", "z", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "fletcher_reeves", ":", "\n", "                    ", "beta", "=", "self", ".", "rho", "/", "rho1", "\n", "", "else", ":", "\n", "                    ", "rho2", "=", "self", ".", "ip", "(", "self", ".", "r_prev", ",", "z", ")", "\n", "beta", "=", "(", "self", ".", "rho", "-", "rho2", ")", "/", "rho1", "\n", "\n", "", "beta", "=", "beta", ".", "clamp", "(", "0", ")", "\n", "self", ".", "p", "=", "z", "+", "self", ".", "p", "*", "beta", "\n", "\n", "", "q", "=", "self", ".", "A", "(", "self", ".", "p", ")", "\n", "pq", "=", "self", ".", "ip", "(", "self", ".", "p", ",", "q", ")", "\n", "\n", "if", "self", ".", "standard_alpha", ":", "\n", "                ", "alpha", "=", "self", ".", "rho", "/", "pq", "\n", "", "else", ":", "\n", "                ", "alpha", "=", "self", ".", "ip", "(", "self", ".", "p", ",", "r", ")", "/", "pq", "\n", "\n", "# Save old r for PR formula", "\n", "", "if", "not", "self", ".", "fletcher_reeves", ":", "\n", "                ", "self", ".", "r_prev", "=", "r", ".", "clone", "(", ")", "\n", "\n", "# Form new iterate", "\n", "", "if", "x", "is", "None", ":", "\n", "                ", "x", "=", "self", ".", "p", "*", "alpha", "\n", "", "else", ":", "\n", "                ", "x", "+=", "self", ".", "p", "*", "alpha", "\n", "\n", "", "if", "ii", "<", "num_iter", "-", "1", "or", "self", ".", "debug", ":", "\n", "                ", "r", "-=", "q", "*", "alpha", "\n", "\n", "", "if", "eps", ">", "0.0", "or", "self", ".", "debug", ":", "\n", "                ", "normr", "=", "self", ".", "residual_norm", "(", "r", ")", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "                ", "self", ".", "evaluate_CG_iteration", "(", "x", ")", "\n", "resvec", "[", "ii", "+", "1", "]", "=", "normr", "\n", "\n", "", "if", "eps", ">", "0", "and", "normr", "<=", "eps", ":", "\n", "                ", "if", "self", ".", "debug", ":", "\n", "                    ", "print", "(", "'Stopped CG since norm smaller than eps'", ")", "\n", "", "break", "\n", "\n", "", "", "if", "resvec", "is", "not", "None", ":", "\n", "            ", "resvec", "=", "resvec", "[", ":", "ii", "+", "2", "]", "\n", "\n", "", "return", "x", ",", "resvec", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.A": [[167, 170], ["None"], "methods", ["None"], ["", "def", "A", "(", "self", ",", "x", ")", ":", "\n", "# Implements the left hand operation", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.ip": [[171, 174], ["a.view", "b.view"], "methods", ["None"], ["", "def", "ip", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "# Implements the inner product", "\n", "        ", "return", "a", ".", "view", "(", "-", "1", ")", "@", "b", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.residual_norm": [[175, 180], ["optimization.ConjugateGradientBase.ip().sum", "isinstance", "sum.sqrt", "sum", "optimization.ConjugateGradientBase.ip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.ip"], ["", "def", "residual_norm", "(", "self", ",", "r", ")", ":", "\n", "        ", "res", "=", "self", ".", "ip", "(", "r", ",", "r", ")", ".", "sum", "(", ")", "\n", "if", "isinstance", "(", "res", ",", "(", "TensorList", ",", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "res", "=", "sum", "(", "res", ")", "\n", "", "return", "res", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.check_zero": [[181, 186], ["isinstance", "s.abs", "sum", "sum.item"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs"], ["", "def", "check_zero", "(", "self", ",", "s", ",", "eps", "=", "0.0", ")", ":", "\n", "        ", "ss", "=", "s", ".", "abs", "(", ")", "<=", "eps", "\n", "if", "isinstance", "(", "ss", ",", "(", "TensorList", ",", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "ss", "=", "sum", "(", "ss", ")", "\n", "", "return", "ss", ".", "item", "(", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.M1": [[187, 190], ["None"], "methods", ["None"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "# M1 preconditioner", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.M2": [[191, 194], ["None"], "methods", ["None"], ["", "def", "M2", "(", "self", ",", "x", ")", ":", "\n", "# M2 preconditioner", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.evaluate_CG_iteration": [[195, 197], ["None"], "methods", ["None"], ["", "def", "evaluate_CG_iteration", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradient.__init__": [[203, 221], ["optimization.ConjugateGradientBase.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "problem", ":", "L2Problem", ",", "variable", ":", "TensorList", ",", "cg_eps", "=", "0.0", ",", "fletcher_reeves", "=", "True", ",", "\n", "standard_alpha", "=", "True", ",", "direction_forget_factor", "=", "0", ",", "debug", "=", "False", ",", "plotting", "=", "False", ",", "visdom", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fletcher_reeves", ",", "standard_alpha", ",", "direction_forget_factor", ",", "debug", "or", "plotting", ")", "\n", "\n", "self", ".", "problem", "=", "problem", "\n", "self", ".", "x", "=", "variable", "\n", "\n", "self", ".", "plotting", "=", "plotting", "\n", "self", ".", "fig_num", "=", "(", "10", ",", "11", ")", "\n", "self", ".", "visdom", "=", "visdom", "\n", "\n", "self", ".", "cg_eps", "=", "cg_eps", "\n", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "self", ".", "dfdxt_g", "=", "None", "\n", "\n", "self", ".", "residuals", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "losses", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradient.clear_temp": [[222, 226], ["None"], "methods", ["None"], ["", "def", "clear_temp", "(", "self", ")", ":", "\n", "        ", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "self", ".", "dfdxt_g", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradient.run": [[228, 277], ["optimization.ConjugateGradient.x.requires_grad_", "optimization.ConjugateGradient.problem", "optimization.ConjugateGradient.f0.detach", "optimization.ConjugateGradient.g.requires_grad_", "pytracking.libs.TensorList", "optimization.ConjugateGradient.run_CG", "optimization.ConjugateGradient.x.detach_", "optimization.ConjugateGradient.x.detach_", "optimization.ConjugateGradient.clear_temp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.ConjugateGradient.problem.ip_output", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.ConjugateGradient.dfdxt_g.detach", "optimization.ConjugateGradient.problem", "optimization.ConjugateGradient.problem.ip_output", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "optimization.ConjugateGradient.visdom.register", "optimization.ConjugateGradient.visdom.register", "pytracking.utils.plotting.plot_graph", "pytracking.utils.plotting.plot_graph"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.run_CG", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescent.clear_temp", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.ip_output", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.ip_output", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph"], ["", "def", "run", "(", "self", ",", "num_cg_iter", ")", ":", "\n", "        ", "\"\"\"Run the oprimizer with the provided number of iterations.\"\"\"", "\n", "\n", "if", "num_cg_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "lossvec", "=", "None", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "lossvec", "=", "torch", ".", "zeros", "(", "2", ")", "\n", "\n", "", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Evaluate function at current estimate", "\n", "self", ".", "f0", ",", "inputmean", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "\n", "# Create copy with graph detached", "\n", "self", ".", "g", "=", "self", ".", "f0", ".", "detach", "(", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "lossvec", "[", "0", "]", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "g", ",", "self", ".", "g", ")", "\n", "\n", "", "self", ".", "g", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Get df/dx^t @ f0", "\n", "self", ".", "dfdxt_g", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f0", ",", "self", ".", "x", ",", "self", ".", "g", ",", "create_graph", "=", "True", ")", ")", "\n", "\n", "# Get the right hand side", "\n", "self", ".", "b", "=", "-", "self", ".", "dfdxt_g", ".", "detach", "(", ")", "\n", "\n", "# Run CG", "\n", "delta_x", ",", "res", "=", "self", ".", "run_CG", "(", "num_cg_iter", ",", "eps", "=", "self", ".", "cg_eps", ")", "\n", "\n", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "x", "+=", "delta_x", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "f0", ",", "inputmean", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "lossvec", "[", "-", "1", "]", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", "\n", "self", ".", "residuals", "=", "torch", ".", "cat", "(", "(", "self", ".", "residuals", ",", "res", ")", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "lossvec", ")", ")", "\n", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "                ", "self", ".", "visdom", ".", "register", "(", "self", ".", "losses", ",", "'lineplot'", ",", "3", ",", "'Loss'", ")", "\n", "self", ".", "visdom", ".", "register", "(", "self", ".", "residuals", ",", "'lineplot'", ",", "3", ",", "'CG residuals'", ")", "\n", "", "elif", "self", ".", "plotting", ":", "\n", "                ", "plot_graph", "(", "self", ".", "losses", ",", "self", ".", "fig_num", "[", "0", "]", ",", "title", "=", "'Loss'", ")", "\n", "plot_graph", "(", "self", ".", "residuals", ",", "self", ".", "fig_num", "[", "1", "]", ",", "title", "=", "'CG residuals'", ")", "\n", "\n", "", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradient.A": [[279, 282], ["torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "pytracking.libs.TensorList", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad"], "methods", ["None"], ["", "def", "A", "(", "self", ",", "x", ")", ":", "\n", "        ", "dfdx_x", "=", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "dfdxt_g", ",", "self", ".", "g", ",", "x", ",", "retain_graph", "=", "True", ")", "\n", "return", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f0", ",", "self", ".", "x", ",", "dfdx_x", ",", "retain_graph", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradient.ip": [[283, 285], ["optimization.ConjugateGradient.problem.ip_input"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.MinimizationProblem.ip_input"], ["", "def", "ip", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "ip_input", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradient.M1": [[286, 288], ["optimization.ConjugateGradient.problem.M1"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.M1"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "M1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradient.M2": [[289, 291], ["optimization.ConjugateGradient.problem.M2"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.M2"], ["", "def", "M2", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "M2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GaussNewtonCG.__init__": [[297, 318], ["optimization.ConjugateGradientBase.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "problem", ":", "L2Problem", ",", "variable", ":", "TensorList", ",", "cg_eps", "=", "0.0", ",", "fletcher_reeves", "=", "True", ",", "\n", "standard_alpha", "=", "True", ",", "direction_forget_factor", "=", "0", ",", "debug", "=", "False", ",", "analyze", "=", "False", ",", "plotting", "=", "False", ",", "\n", "visdom", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fletcher_reeves", ",", "standard_alpha", ",", "direction_forget_factor", ",", "debug", "or", "analyze", "or", "plotting", ")", "\n", "\n", "self", ".", "problem", "=", "problem", "\n", "self", ".", "x", "=", "variable", "\n", "\n", "self", ".", "analyze_convergence", "=", "analyze", "\n", "self", ".", "plotting", "=", "plotting", "\n", "self", ".", "fig_num", "=", "(", "10", ",", "11", ",", "12", ")", "\n", "self", ".", "visdom", "=", "visdom", "\n", "\n", "self", ".", "cg_eps", "=", "cg_eps", "\n", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "self", ".", "dfdxt_g", "=", "None", "\n", "\n", "self", ".", "residuals", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "losses", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GaussNewtonCG.clear_temp": [[319, 323], ["None"], "methods", ["None"], ["", "def", "clear_temp", "(", "self", ")", ":", "\n", "        ", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "self", ".", "dfdxt_g", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GaussNewtonCG.run_GN": [[325, 327], ["optimization.GaussNewtonCG.run"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run"], ["", "def", "run_GN", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "run", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GaussNewtonCG.run": [[329, 376], ["isinstance", "len", "optimization.GaussNewtonCG.x.detach_", "optimization.GaussNewtonCG.clear_temp", "optimization.GaussNewtonCG.evaluate_CG_iteration", "optimization.GaussNewtonCG.run_GN_iter", "ValueError", "optimization.GaussNewtonCG.problem", "optimization.GaussNewtonCG.problem.ip_output", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "optimization.GaussNewtonCG.visdom.register", "optimization.GaussNewtonCG.visdom.register", "optimization.GaussNewtonCG.visdom.register", "pytracking.utils.plotting.plot_graph", "pytracking.utils.plotting.plot_graph", "optimization.GaussNewtonCG.detach().cpu().view", "pytracking.utils.plotting.plot_graph", "optimization.GaussNewtonCG.detach().cpu", "optimization.GaussNewtonCG.detach"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescent.clear_temp", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.evaluate_CG_iteration", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GaussNewtonCG.run_GN_iter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.ip_output", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph"], ["", "def", "run", "(", "self", ",", "num_cg_iter", ",", "num_gn_iter", "=", "None", ")", ":", "\n", "        ", "\"\"\"Run the optimizer.\n        args:\n            num_cg_iter: Number of CG iterations per GN iter. If list, then each entry specifies number of CG iterations\n                         and number of GN iterations is given by the length of the list.\n            num_gn_iter: Number of GN iterations. Shall only be given if num_cg_iter is an integer.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "num_cg_iter", ",", "int", ")", ":", "\n", "            ", "if", "num_gn_iter", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Must specify number of GN iter if CG iter is constant'", ")", "\n", "", "num_cg_iter", "=", "[", "num_cg_iter", "]", "*", "num_gn_iter", "\n", "\n", "", "num_gn_iter", "=", "len", "(", "num_cg_iter", ")", "\n", "if", "num_gn_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "analyze_convergence", ":", "\n", "            ", "self", ".", "evaluate_CG_iteration", "(", "0", ")", "\n", "\n", "# Outer loop for running the GN iterations.", "\n", "", "for", "cg_iter", "in", "num_cg_iter", ":", "\n", "            ", "self", ".", "run_GN_iter", "(", "cg_iter", ")", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "if", "not", "self", ".", "analyze_convergence", ":", "\n", "                ", "self", ".", "f0", ",", "inputmean", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "loss", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "                ", "self", ".", "visdom", ".", "register", "(", "self", ".", "losses", ",", "'lineplot'", ",", "3", ",", "'Loss'", ")", "\n", "self", ".", "visdom", ".", "register", "(", "self", ".", "residuals", ",", "'lineplot'", ",", "3", ",", "'CG residuals'", ")", "\n", "\n", "if", "self", ".", "analyze_convergence", ":", "\n", "                    ", "self", ".", "visdom", ".", "register", "(", "self", ".", "gradient_mags", ",", "'lineplot'", ",", "4", ",", "'Gradient magnitude'", ")", "\n", "", "", "elif", "self", ".", "plotting", ":", "\n", "                ", "plot_graph", "(", "self", ".", "losses", ",", "self", ".", "fig_num", "[", "0", "]", ",", "title", "=", "'Loss'", ")", "\n", "plot_graph", "(", "self", ".", "residuals", ",", "self", ".", "fig_num", "[", "1", "]", ",", "title", "=", "'CG residuals'", ")", "\n", "if", "self", ".", "analyze_convergence", ":", "\n", "                    ", "plot_graph", "(", "self", ".", "gradient_mags", ",", "self", ".", "fig_num", "[", "2", "]", ",", "'Gradient magnitude'", ")", "\n", "\n", "\n", "", "", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n", "return", "self", ".", "losses", ",", "self", ".", "residuals", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GaussNewtonCG.run_GN_iter": [[378, 409], ["optimization.GaussNewtonCG.x.requires_grad_", "optimization.GaussNewtonCG.problem", "optimization.GaussNewtonCG.f0.detach", "optimization.GaussNewtonCG.g.requires_grad_", "pytracking.libs.TensorList", "optimization.GaussNewtonCG.run_CG", "optimization.GaussNewtonCG.x.detach_", "optimization.GaussNewtonCG.problem.ip_output", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.GaussNewtonCG.dfdxt_g.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "optimization.GaussNewtonCG.detach().cpu().view", "optimization.GaussNewtonCG.detach().cpu", "optimization.GaussNewtonCG.detach"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.run_CG", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.ip_output"], ["", "def", "run_GN_iter", "(", "self", ",", "num_cg_iter", ")", ":", "\n", "        ", "\"\"\"Runs a single GN iteration.\"\"\"", "\n", "\n", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Evaluate function at current estimate", "\n", "self", ".", "f0", ",", "inputmean", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "\n", "# Create copy with graph detached", "\n", "self", ".", "g", "=", "self", ".", "f0", ".", "detach", "(", ")", "\n", "\n", "if", "self", ".", "debug", "and", "not", "self", ".", "analyze_convergence", ":", "\n", "            ", "loss", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "g", ",", "self", ".", "g", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n", "", "self", ".", "g", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Get df/dx^t @ f0", "\n", "self", ".", "dfdxt_g", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f0", ",", "self", ".", "x", ",", "self", ".", "g", ",", "create_graph", "=", "True", ")", ")", "\n", "\n", "# Get the right hand side", "\n", "self", ".", "b", "=", "-", "self", ".", "dfdxt_g", ".", "detach", "(", ")", "\n", "\n", "# Run CG", "\n", "delta_x", ",", "res", "=", "self", ".", "run_CG", "(", "num_cg_iter", ",", "eps", "=", "self", ".", "cg_eps", ")", "\n", "\n", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "x", "+=", "delta_x", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "residuals", "=", "torch", ".", "cat", "(", "(", "self", ".", "residuals", ",", "res", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GaussNewtonCG.A": [[411, 414], ["torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "pytracking.libs.TensorList", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad"], "methods", ["None"], ["", "", "def", "A", "(", "self", ",", "x", ")", ":", "\n", "        ", "dfdx_x", "=", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "dfdxt_g", ",", "self", ".", "g", ",", "x", ",", "retain_graph", "=", "True", ")", "\n", "return", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f0", ",", "self", ".", "x", ",", "dfdx_x", ",", "retain_graph", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GaussNewtonCG.ip": [[415, 417], ["optimization.GaussNewtonCG.problem.ip_input"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.MinimizationProblem.ip_input"], ["", "def", "ip", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "ip_input", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GaussNewtonCG.M1": [[418, 420], ["optimization.GaussNewtonCG.problem.M1"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.M1"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "M1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GaussNewtonCG.M2": [[421, 423], ["optimization.GaussNewtonCG.problem.M2"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.M2"], ["", "def", "M2", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "M2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GaussNewtonCG.evaluate_CG_iteration": [[424, 437], ["x.requires_grad_", "optimization.GaussNewtonCG.problem", "optimization.GaussNewtonCG.problem.ip_output", "pytracking.libs.TensorList", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.GaussNewtonCG.detach().cpu().view", "sum().cpu().sqrt().detach().view", "optimization.GaussNewtonCG.detach().cpu", "sum().cpu().sqrt().detach", "optimization.GaussNewtonCG.detach", "sum().cpu().sqrt", "sum().cpu", "sum", "pytracking.libs.TensorList.view", "pytracking.libs.TensorList.view"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.ip_output"], ["", "def", "evaluate_CG_iteration", "(", "self", ",", "delta_x", ")", ":", "\n", "        ", "if", "self", ".", "analyze_convergence", ":", "\n", "            ", "x", "=", "(", "self", ".", "x", "+", "delta_x", ")", ".", "detach", "(", ")", "\n", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# compute loss and gradient", "\n", "f", ",", "inputmean", "=", "self", ".", "problem", "(", "x", ")", "\n", "loss", "=", "self", ".", "problem", ".", "ip_output", "(", "f", ",", "f", ")", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "x", ")", ")", "\n", "\n", "# store in the vectors", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "cat", "(", "(", "self", ".", "gradient_mags", ",", "sum", "(", "grad", ".", "view", "(", "-", "1", ")", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "cpu", "(", ")", ".", "sqrt", "(", ")", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescentL2.__init__": [[441, 458], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.GradientDescentL2.clear_temp"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescent.clear_temp"], ["def", "__init__", "(", "self", ",", "problem", ":", "L2Problem", ",", "variable", ":", "TensorList", ",", "step_length", ":", "float", ",", "momentum", ":", "float", "=", "0.0", ",", "debug", "=", "False", ",", "plotting", "=", "False", ",", "visdom", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "problem", "=", "problem", "\n", "self", ".", "x", "=", "variable", "\n", "\n", "self", ".", "step_legnth", "=", "step_length", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "self", ".", "debug", "=", "debug", "or", "plotting", "\n", "self", ".", "plotting", "=", "plotting", "\n", "self", ".", "fig_num", "=", "(", "10", ",", "11", ")", "\n", "self", ".", "visdom", "=", "visdom", "\n", "self", ".", "losses", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "residuals", "=", "None", "\n", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescentL2.clear_temp": [[460, 463], ["None"], "methods", ["None"], ["", "def", "clear_temp", "(", "self", ")", ":", "\n", "        ", "self", ".", "f0", "=", "None", "\n", "self", ".", "dir", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescentL2.run": [[465, 519], ["range", "optimization.GradientDescentL2.x.detach_", "optimization.GradientDescentL2.clear_temp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.GradientDescentL2.x.requires_grad_", "optimization.GradientDescentL2.problem", "optimization.GradientDescentL2.problem.ip_output", "pytracking.libs.TensorList", "optimization.GradientDescentL2.x.detach_", "optimization.GradientDescentL2.x.requires_grad_", "optimization.GradientDescentL2.problem", "optimization.GradientDescentL2.problem.ip_output", "pytracking.libs.TensorList", "optimization.GradientDescentL2.problem.ip_output().item", "sum().cpu().sqrt().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.GradientDescentL2.item", "sum().sqrt().item", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.GradientDescentL2.visdom.register", "optimization.GradientDescentL2.visdom.register", "optimization.GradientDescentL2.problem.ip_output", "sum().cpu().sqrt", "pytracking.utils.plotting.plot_graph", "pytracking.utils.plotting.plot_graph", "sum().sqrt", "sum().cpu", "sum", "sum", "pytracking.libs.TensorList.view", "pytracking.libs.TensorList.view", "pytracking.libs.TensorList.view", "pytracking.libs.TensorList.view"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescent.clear_temp", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.ip_output", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.ip_output", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.eco.optim.FilterOptim.register", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.ip_output", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph"], ["", "def", "run", "(", "self", ",", "num_iter", ",", "dummy", "=", "None", ")", ":", "\n", "\n", "        ", "if", "num_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "lossvec", "=", "None", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "lossvec", "=", "torch", ".", "zeros", "(", "num_iter", "+", "1", ")", "\n", "grad_mags", "=", "torch", ".", "zeros", "(", "num_iter", "+", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "            ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Evaluate function at current estimate", "\n", "self", ".", "f0", ",", "inputmean", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "\n", "# Compute loss", "\n", "loss", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", "\n", "\n", "# Compute grad", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "x", ")", ")", "\n", "\n", "# Update direction", "\n", "if", "self", ".", "dir", "is", "None", ":", "\n", "                ", "self", ".", "dir", "=", "grad", "\n", "", "else", ":", "\n", "                ", "self", ".", "dir", "=", "grad", "+", "self", ".", "momentum", "*", "self", ".", "dir", "\n", "\n", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "x", "-=", "self", ".", "step_legnth", "*", "self", ".", "dir", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "lossvec", "[", "i", "]", "=", "loss", ".", "item", "(", ")", "\n", "grad_mags", "[", "i", "]", "=", "sum", "(", "grad", ".", "view", "(", "-", "1", ")", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "f0", ",", "inputmean", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "loss", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "x", ")", ")", "\n", "lossvec", "[", "-", "1", "]", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", ".", "item", "(", ")", "\n", "grad_mags", "[", "-", "1", "]", "=", "sum", "(", "grad", ".", "view", "(", "-", "1", ")", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "cpu", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "lossvec", ")", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "cat", "(", "(", "self", ".", "gradient_mags", ",", "grad_mags", ")", ")", "\n", "\n", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "                ", "self", ".", "visdom", ".", "register", "(", "self", ".", "losses", ",", "'lineplot'", ",", "3", ",", "'Loss'", ")", "\n", "self", ".", "visdom", ".", "register", "(", "self", ".", "gradient_mags", ",", "'lineplot'", ",", "4", ",", "'Gradient magnitude'", ")", "\n", "", "elif", "self", ".", "plotting", ":", "\n", "                ", "plot_graph", "(", "self", ".", "losses", ",", "self", ".", "fig_num", "[", "0", "]", ",", "title", "=", "'Loss'", ")", "\n", "plot_graph", "(", "self", ".", "gradient_mags", ",", "self", ".", "fig_num", "[", "1", "]", ",", "title", "=", "'Gradient magnitude'", ")", "\n", "\n", "", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescentL2RLS.__init__": [[523, 543], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.GradientDescentL2RLS.clear_temp", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescent.clear_temp"], ["def", "__init__", "(", "self", ",", "problem", ":", "L2Problem", ",", "variable", ":", "TensorList", ",", "n_channel", ":", "int", ",", "kernel_size", ":", "int", ",", "step_length", ":", "float", ",", "momentum", ":", "float", "=", "0.0", ",", "debug", "=", "False", ",", "plotting", "=", "False", ",", "visdom", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "problem", "=", "problem", "\n", "self", ".", "x", "=", "variable", "\n", "self", ".", "Pc", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "eye", "(", "n_channel", "*", "kernel_size", "*", "kernel_size", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ",", "volatile", "=", "True", ")", "*", "10.0", "\n", "self", ".", "Pc_bk", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "eye", "(", "n_channel", "*", "kernel_size", "*", "kernel_size", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ",", "volatile", "=", "True", ")", "*", "10.0", "\n", "self", ".", "gama", "=", "0", "\n", "self", ".", "num", "=", "0", "\n", "self", ".", "step_legnth", "=", "step_length", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "self", ".", "debug", "=", "debug", "or", "plotting", "\n", "self", ".", "plotting", "=", "plotting", "\n", "self", ".", "fig_num", "=", "(", "10", ",", "11", ")", "\n", "self", ".", "visdom", "=", "visdom", "\n", "self", ".", "losses", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "residuals", "=", "None", "\n", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescentL2RLS.clear_temp": [[545, 548], ["None"], "methods", ["None"], ["", "def", "clear_temp", "(", "self", ")", ":", "\n", "        ", "self", ".", "f0", "=", "None", "\n", "self", ".", "dir", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescentL2RLS.run": [[550, 638], ["range", "optimization.GradientDescentL2RLS.x.detach_", "optimization.GradientDescentL2RLS.clear_temp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.GradientDescentL2RLS.x.requires_grad_", "optimization.GradientDescentL2RLS.problem", "optimization.GradientDescentL2RLS.problem.ip_output", "pytracking.libs.TensorList", "optimization.GradientDescentL2RLS.run.pro_weight"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescent.clear_temp", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.L2Problem.ip_output"], ["", "def", "run", "(", "self", ",", "num_iter", ",", "dummy", "=", "None", ")", ":", "\n", "\n", "        ", "if", "num_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "lossvec", "=", "None", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "lossvec", "=", "torch", ".", "zeros", "(", "num_iter", "+", "1", ")", "\n", "grad_mags", "=", "torch", ".", "zeros", "(", "num_iter", "+", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "            ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Evaluate function at current estimate", "\n", "self", ".", "f0", ",", "inputmean", ",", "b", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "\n", "# Compute loss", "\n", "loss", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", "\n", "#test1 = torch.max(torch.abs(self.x[0]), 1)", "\n", "\n", "# Compute grad", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "x", ")", ")", "\n", "\n", "#test2 = torch.max(torch.abs(grad[0]), 1)", "\n", "#gradmag1 = sum(grad.view(-1) @ grad.view(-1)).sqrt().item()", "\n", "\n", "def", "pro_weight", "(", "p", ",", "p_bk", ",", "num", ",", "x", ",", "grad", ",", "I", ",", "alpha", "=", "1.0", ",", "stride", "=", "1", ")", ":", "\n", "                ", "if", "I", "==", "0", ":", "\n", "                    ", "num", "+=", "1", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "F", ",", "_", ",", "HH", ",", "WW", "=", "grad", ".", "shape", "\n", "S", "=", "stride", "# stride", "\n", "Ho", "=", "int", "(", "1", "+", "(", "H", "-", "HH", ")", "/", "S", ")", "\n", "Wo", "=", "int", "(", "1", "+", "(", "W", "-", "WW", ")", "/", "S", ")", "\n", "# r = 0", "\n", "x_unf", "=", "torch", ".", "nn", ".", "functional", ".", "unfold", "(", "x", ",", "(", "HH", ",", "WW", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "r", "=", "torch", ".", "t", "(", "torch", ".", "mean", "(", "x_unf", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "*", "math", ".", "sqrt", "(", "Ho", "*", "Wo", "*", "b", ")", "\n", "k", "=", "torch", ".", "mm", "(", "p", ",", "torch", ".", "t", "(", "r", ")", ")", "\n", "p", ".", "sub_", "(", "torch", ".", "mm", "(", "k", ".", "data", ",", "torch", ".", "t", "(", "k", ".", "data", ")", ")", "/", "(", "alpha", "+", "torch", ".", "mm", "(", "r", ".", "data", ",", "k", ".", "data", ")", ")", ")", "\n", "p", "/=", "alpha", "\n", "p_bk", ".", "data", "=", "1.0", "*", "p", ".", "data", "\n", "if", "num", "%", "50", "==", "0", ":", "\n", "                        ", "p", ".", "data", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "eye", "(", "p", ".", "data", ".", "size", "(", ")", "[", "0", "]", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ",", "volatile", "=", "True", ")", "*", "10.0", "\n", "p_bk", ".", "data", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "eye", "(", "p", ".", "data", ".", "size", "(", ")", "[", "0", "]", ")", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ",", "volatile", "=", "True", ")", "*", "10.0", "\n", "", "grad", ".", "data", "=", "torch", ".", "mm", "(", "grad", ".", "data", ".", "view", "(", "F", ",", "-", "1", ")", ",", "torch", ".", "t", "(", "p", ".", "data", ")", ")", ".", "view_as", "(", "grad", ")", "\n", "", "else", ":", "\n", "                    ", "F", ",", "_", ",", "HH", ",", "WW", "=", "grad", ".", "shape", "\n", "#grad.data = torch.mm(grad.data.view(F, -1), torch.t(p_bk.data)).view_as(grad) * gama.data", "\n", "grad", ".", "data", "=", "torch", ".", "mm", "(", "grad", ".", "data", ".", "view", "(", "F", ",", "-", "1", ")", ",", "torch", ".", "t", "(", "p_bk", ".", "data", ")", ")", ".", "view_as", "(", "grad", ")", "\n", "", "return", "num", "\n", "\n", "# Compensate embedding gradients", "\n", "# pro_weight(self.Pc, inputmean, grad[0], alpha=1.0, cnn=True, stride=1)", "\n", "", "self", ".", "num", "=", "pro_weight", "(", "self", ".", "Pc", ",", "self", ".", "Pc_bk", ",", "self", ".", "num", ",", "inputmean", ",", "grad", "[", "0", "]", ",", "i", ",", "alpha", "=", "1.0", ",", "stride", "=", "1", ")", "\n", "\n", "# Update direction", "\n", "if", "self", ".", "dir", "is", "None", ":", "\n", "                ", "self", ".", "dir", "=", "grad", "\n", "", "else", ":", "\n", "                ", "self", ".", "dir", "=", "grad", "+", "self", ".", "momentum", "*", "self", ".", "dir", "\n", "\n", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "x", "-=", "self", ".", "step_legnth", "*", "self", ".", "dir", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "lossvec", "[", "i", "]", "=", "loss", ".", "item", "(", ")", "\n", "grad_mags", "[", "i", "]", "=", "sum", "(", "grad", ".", "view", "(", "-", "1", ")", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "f0", ",", "inputmean", ",", "b", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "loss", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "x", ")", ")", "\n", "lossvec", "[", "-", "1", "]", "=", "self", ".", "problem", ".", "ip_output", "(", "self", ".", "f0", ",", "self", ".", "f0", ")", ".", "item", "(", ")", "\n", "grad_mags", "[", "-", "1", "]", "=", "sum", "(", "grad", ".", "view", "(", "-", "1", ")", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "cpu", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "lossvec", ")", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "cat", "(", "(", "self", ".", "gradient_mags", ",", "grad_mags", ")", ")", "\n", "\n", "if", "self", ".", "visdom", "is", "not", "None", ":", "\n", "                ", "self", ".", "visdom", ".", "register", "(", "self", ".", "losses", ",", "'lineplot'", ",", "3", ",", "'Loss'", ")", "\n", "self", ".", "visdom", ".", "register", "(", "self", ".", "gradient_mags", ",", "'lineplot'", ",", "4", ",", "'Gradient magnitude'", ")", "\n", "", "elif", "self", ".", "plotting", ":", "\n", "                ", "plot_graph", "(", "self", ".", "losses", ",", "self", ".", "fig_num", "[", "0", "]", ",", "title", "=", "'Loss'", ")", "\n", "plot_graph", "(", "self", ".", "gradient_mags", ",", "self", ".", "fig_num", "[", "1", "]", ",", "title", "=", "'Gradient magnitude'", ")", "\n", "\n", "", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.__init__": [[642, 663], ["optimization.ConjugateGradientBase.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "problem", ":", "MinimizationProblem", ",", "variable", ":", "TensorList", ",", "init_hessian_reg", "=", "0.0", ",", "hessian_reg_factor", "=", "1.0", ",", "\n", "cg_eps", "=", "0.0", ",", "fletcher_reeves", "=", "True", ",", "standard_alpha", "=", "True", ",", "direction_forget_factor", "=", "0", ",", "\n", "debug", "=", "False", ",", "analyze", "=", "False", ",", "plotting", "=", "False", ",", "fig_num", "=", "(", "10", ",", "11", ",", "12", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fletcher_reeves", ",", "standard_alpha", ",", "direction_forget_factor", ",", "debug", "or", "analyze", "or", "plotting", ")", "\n", "\n", "self", ".", "problem", "=", "problem", "\n", "self", ".", "x", "=", "variable", "\n", "\n", "self", ".", "analyze_convergence", "=", "analyze", "\n", "self", ".", "plotting", "=", "plotting", "\n", "self", ".", "fig_num", "=", "fig_num", "\n", "\n", "self", ".", "hessian_reg", "=", "init_hessian_reg", "\n", "self", ".", "hessian_reg_factor", "=", "hessian_reg_factor", "\n", "self", ".", "cg_eps", "=", "cg_eps", "\n", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "\n", "self", ".", "residuals", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "losses", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.clear_temp": [[664, 667], ["None"], "methods", ["None"], ["", "def", "clear_temp", "(", "self", ")", ":", "\n", "        ", "self", ".", "f0", "=", "None", "\n", "self", ".", "g", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.run": [[669, 704], ["isinstance", "len", "optimization.NewtonCG.x.detach_", "optimization.NewtonCG.clear_temp", "optimization.NewtonCG.evaluate_CG_iteration", "optimization.NewtonCG.run_newton_iter", "optimization.NewtonCG.problem", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pytracking.utils.plotting.plot_graph", "pytracking.utils.plotting.plot_graph", "pytracking.utils.plotting.plot_graph", "loss.detach().cpu().view", "loss.detach().cpu", "loss.detach"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescent.clear_temp", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.evaluate_CG_iteration", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.run_newton_iter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph"], ["", "def", "run", "(", "self", ",", "num_cg_iter", ",", "num_newton_iter", "=", "None", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "num_cg_iter", ",", "int", ")", ":", "\n", "            ", "if", "num_cg_iter", "==", "0", ":", "\n", "                ", "return", "\n", "", "if", "num_newton_iter", "is", "None", ":", "\n", "                ", "num_newton_iter", "=", "1", "\n", "", "num_cg_iter", "=", "[", "num_cg_iter", "]", "*", "num_newton_iter", "\n", "\n", "", "num_newton_iter", "=", "len", "(", "num_cg_iter", ")", "\n", "if", "num_newton_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "analyze_convergence", ":", "\n", "            ", "self", ".", "evaluate_CG_iteration", "(", "0", ")", "\n", "\n", "", "for", "cg_iter", "in", "num_cg_iter", ":", "\n", "            ", "self", ".", "run_newton_iter", "(", "cg_iter", ")", "\n", "self", ".", "hessian_reg", "*=", "self", ".", "hessian_reg_factor", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "if", "not", "self", ".", "analyze_convergence", ":", "\n", "                ", "loss", ",", "inputmean", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "plotting", ":", "\n", "                ", "plot_graph", "(", "self", ".", "losses", ",", "self", ".", "fig_num", "[", "0", "]", ",", "title", "=", "'Loss'", ")", "\n", "plot_graph", "(", "self", ".", "residuals", ",", "self", ".", "fig_num", "[", "1", "]", ",", "title", "=", "'CG residuals'", ")", "\n", "if", "self", ".", "analyze_convergence", ":", "\n", "                    ", "plot_graph", "(", "self", ".", "gradient_mags", ",", "self", ".", "fig_num", "[", "2", "]", ",", "'Gradient magnitude'", ")", "\n", "\n", "", "", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n", "return", "self", ".", "losses", ",", "self", ".", "residuals", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.run_newton_iter": [[706, 730], ["optimization.NewtonCG.x.requires_grad_", "optimization.NewtonCG.problem", "pytracking.libs.TensorList", "optimization.NewtonCG.run_CG", "optimization.NewtonCG.x.detach_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "optimization.NewtonCG.g.detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "optimization.NewtonCG.f0.detach().cpu().view", "optimization.NewtonCG.f0.detach().cpu", "optimization.NewtonCG.f0.detach"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.ConjugateGradientBase.run_CG"], ["", "def", "run_newton_iter", "(", "self", ",", "num_cg_iter", ")", ":", "\n", "\n", "        ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Evaluate function at current estimate", "\n", "self", ".", "f0", ",", "inputmean", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "\n", "if", "self", ".", "debug", "and", "not", "self", ".", "analyze_convergence", ":", "\n", "            ", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "self", ".", "f0", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n", "# Gradient of loss", "\n", "", "self", ".", "g", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "f0", ",", "self", ".", "x", ",", "create_graph", "=", "True", ")", ")", "\n", "\n", "# Get the right hand side", "\n", "self", ".", "b", "=", "-", "self", ".", "g", ".", "detach", "(", ")", "\n", "\n", "# Run CG", "\n", "delta_x", ",", "res", "=", "self", ".", "run_CG", "(", "num_cg_iter", ",", "eps", "=", "self", ".", "cg_eps", ")", "\n", "\n", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "x", "+=", "delta_x", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "residuals", "=", "torch", ".", "cat", "(", "(", "self", ".", "residuals", ",", "res", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.A": [[732, 734], ["pytracking.libs.TensorList", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad"], "methods", ["None"], ["", "", "def", "A", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "self", ".", "g", ",", "self", ".", "x", ",", "x", ",", "retain_graph", "=", "True", ")", ")", "+", "self", ".", "hessian_reg", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.ip": [[735, 738], ["optimization.NewtonCG.problem.ip_input"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.MinimizationProblem.ip_input"], ["", "def", "ip", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "# Implements the inner product", "\n", "        ", "return", "self", ".", "problem", ".", "ip_input", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.M1": [[739, 741], ["optimization.NewtonCG.problem.M1"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.M1"], ["", "def", "M1", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "M1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.M2": [[742, 744], ["optimization.NewtonCG.problem.M2"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.M2"], ["", "def", "M2", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "problem", ".", "M2", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.NewtonCG.evaluate_CG_iteration": [[745, 757], ["x.requires_grad_", "optimization.NewtonCG.problem", "pytracking.libs.TensorList", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "loss.detach().cpu().view", "sum().cpu().sqrt().detach().view", "loss.detach().cpu", "sum().cpu().sqrt().detach", "loss.detach", "sum().cpu().sqrt", "sum().cpu", "sum", "pytracking.libs.TensorList.view", "pytracking.libs.TensorList.view"], "methods", ["None"], ["", "def", "evaluate_CG_iteration", "(", "self", ",", "delta_x", ")", ":", "\n", "        ", "if", "self", ".", "analyze_convergence", ":", "\n", "            ", "x", "=", "(", "self", ".", "x", "+", "delta_x", ")", ".", "detach", "(", ")", "\n", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# compute loss and gradient", "\n", "loss", ",", "inputmean", "=", "self", ".", "problem", "(", "x", ")", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "x", ")", ")", "\n", "\n", "# store in the vectors", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "cat", "(", "(", "self", ".", "gradient_mags", ",", "sum", "(", "grad", ".", "view", "(", "-", "1", ")", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "cpu", "(", ")", ".", "sqrt", "(", ")", ".", "detach", "(", ")", ".", "view", "(", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescent.__init__": [[762, 780], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.GradientDescent.clear_temp"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescent.clear_temp"], ["def", "__init__", "(", "self", ",", "problem", ":", "MinimizationProblem", ",", "variable", ":", "TensorList", ",", "step_length", ":", "float", ",", "momentum", ":", "float", "=", "0.0", ",", "\n", "debug", "=", "False", ",", "plotting", "=", "False", ",", "fig_num", "=", "(", "10", ",", "11", ")", ")", ":", "\n", "\n", "        ", "self", ".", "problem", "=", "problem", "\n", "self", ".", "x", "=", "variable", "\n", "\n", "self", ".", "step_legnth", "=", "step_length", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "self", ".", "debug", "=", "debug", "or", "plotting", "\n", "self", ".", "plotting", "=", "plotting", "\n", "self", ".", "fig_num", "=", "fig_num", "\n", "\n", "self", ".", "losses", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "self", ".", "residuals", "=", "None", "\n", "\n", "self", ".", "clear_temp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescent.clear_temp": [[782, 784], ["None"], "methods", ["None"], ["", "def", "clear_temp", "(", "self", ")", ":", "\n", "        ", "self", ".", "dir", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescent.run": [[786, 832], ["range", "optimization.GradientDescent.x.detach_", "optimization.GradientDescent.clear_temp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "optimization.GradientDescent.x.requires_grad_", "optimization.GradientDescent.problem", "pytracking.libs.TensorList", "optimization.GradientDescent.x.detach_", "optimization.GradientDescent.x.requires_grad_", "optimization.GradientDescent.problem", "pytracking.libs.TensorList", "loss.item", "sum().cpu().sqrt().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "loss.item", "sum().sqrt().item", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "pytracking.utils.plotting.plot_graph", "pytracking.utils.plotting.plot_graph", "sum().cpu().sqrt", "sum().sqrt", "sum().cpu", "sum", "sum", "pytracking.libs.TensorList.view", "pytracking.libs.TensorList.view", "pytracking.libs.TensorList.view", "pytracking.libs.TensorList.view"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.optimization.GradientDescent.clear_temp", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.plotting.plot_graph"], ["", "def", "run", "(", "self", ",", "num_iter", ",", "dummy", "=", "None", ")", ":", "\n", "\n", "        ", "if", "num_iter", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "lossvec", "=", "None", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "lossvec", "=", "torch", ".", "zeros", "(", "num_iter", "+", "1", ")", "\n", "grad_mags", "=", "torch", ".", "zeros", "(", "num_iter", "+", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "            ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Evaluate function at current estimate", "\n", "loss", ",", "inputmean", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "\n", "# Compute grad", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "x", ")", ")", "\n", "\n", "# Update direction", "\n", "if", "self", ".", "dir", "is", "None", ":", "\n", "                ", "self", ".", "dir", "=", "grad", "\n", "", "else", ":", "\n", "                ", "self", ".", "dir", "=", "grad", "+", "self", ".", "momentum", "*", "self", ".", "dir", "\n", "\n", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "x", "-=", "self", ".", "step_legnth", "*", "self", ".", "dir", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "lossvec", "[", "i", "]", "=", "loss", ".", "item", "(", ")", "\n", "grad_mags", "[", "i", "]", "=", "sum", "(", "grad", ".", "view", "(", "-", "1", ")", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "x", ".", "requires_grad_", "(", "True", ")", "\n", "loss", ",", "inputmean", "=", "self", ".", "problem", "(", "self", ".", "x", ")", "\n", "grad", "=", "TensorList", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "x", ")", ")", "\n", "lossvec", "[", "-", "1", "]", "=", "loss", ".", "item", "(", ")", "\n", "grad_mags", "[", "-", "1", "]", "=", "sum", "(", "grad", ".", "view", "(", "-", "1", ")", "@", "grad", ".", "view", "(", "-", "1", ")", ")", ".", "cpu", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "losses", "=", "torch", ".", "cat", "(", "(", "self", ".", "losses", ",", "lossvec", ")", ")", "\n", "self", ".", "gradient_mags", "=", "torch", ".", "cat", "(", "(", "self", ".", "gradient_mags", ",", "grad_mags", ")", ")", "\n", "if", "self", ".", "plotting", ":", "\n", "                ", "plot_graph", "(", "self", ".", "losses", ",", "self", ".", "fig_num", "[", "0", "]", ",", "title", "=", "'Loss'", ")", "\n", "plot_graph", "(", "self", ".", "gradient_mags", ",", "self", ".", "fig_num", "[", "1", "]", ",", "title", "=", "'Gradient magnitude'", ")", "\n", "\n", "", "", "self", ".", "x", ".", "detach_", "(", ")", "\n", "self", ".", "clear_temp", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_complex": [[5, 7], ["a.dim"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["def", "is_complex", "(", "a", ":", "torch", ".", "Tensor", ")", "->", "bool", ":", "\n", "    ", "return", "a", ".", "dim", "(", ")", ">=", "4", "and", "a", ".", "shape", "[", "-", "1", "]", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real": [[9, 11], ["complex.is_complex"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_complex"], ["", "def", "is_real", "(", "a", ":", "torch", ".", "Tensor", ")", "->", "bool", ":", "\n", "    ", "return", "not", "is_complex", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult": [[13, 33], ["complex.is_real", "complex.is_real", "complex.mult_real_cplx", "complex.mult_real_cplx", "complex.mult_real_cplx", "a.dim", "b.dim", "ValueError", "b.dim", "a.dim", "ValueError"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult_real_cplx", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult_real_cplx", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult_real_cplx", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "@", "tensor_operation", "\n", "def", "mult", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Pointwise complex multiplication of complex tensors.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "if", "a", ".", "dim", "(", ")", ">=", "b", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "# a is real", "\n", "", "return", "mult_real_cplx", "(", "a", ",", "b", ")", "\n", "", "if", "is_real", "(", "b", ")", ":", "\n", "        ", "if", "b", ".", "dim", "(", ")", ">=", "a", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "# b is real", "\n", "", "return", "mult_real_cplx", "(", "b", ",", "a", ")", "\n", "\n", "# Both complex", "\n", "", "c", "=", "mult_real_cplx", "(", "a", "[", "...", ",", "0", "]", ",", "b", ")", "\n", "c", "[", "...", ",", "0", "]", "-=", "a", "[", "...", ",", "1", "]", "*", "b", "[", "...", ",", "1", "]", "\n", "c", "[", "...", ",", "1", "]", "+=", "a", "[", "...", ",", "1", "]", "*", "b", "[", "...", ",", "0", "]", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult_conj": [[35, 55], ["complex.is_real", "complex.is_real", "complex.mult_real_cplx", "complex.mult_real_cplx", "complex.mult_real_cplx", "a.dim", "b.dim", "ValueError", "complex.conj", "b.dim", "a.dim", "ValueError"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult_real_cplx", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult_real_cplx", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult_real_cplx", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.conj", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "@", "tensor_operation", "\n", "def", "mult_conj", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Pointwise complex multiplication of complex tensors, with conjugate on b: a*conj(b).\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "if", "a", ".", "dim", "(", ")", ">=", "b", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "# a is real", "\n", "", "return", "mult_real_cplx", "(", "a", ",", "conj", "(", "b", ")", ")", "\n", "", "if", "is_real", "(", "b", ")", ":", "\n", "        ", "if", "b", ".", "dim", "(", ")", ">=", "a", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "# b is real", "\n", "", "return", "mult_real_cplx", "(", "b", ",", "a", ")", "\n", "\n", "# Both complex", "\n", "", "c", "=", "mult_real_cplx", "(", "b", "[", "...", ",", "0", "]", ",", "a", ")", "\n", "c", "[", "...", ",", "0", "]", "+=", "a", "[", "...", ",", "1", "]", "*", "b", "[", "...", ",", "1", "]", "\n", "c", "[", "...", ",", "1", "]", "-=", "a", "[", "...", ",", "0", "]", "*", "b", "[", "...", ",", "1", "]", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult_real_cplx": [[57, 65], ["complex.is_real", "ValueError", "a.unsqueeze"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real"], ["", "@", "tensor_operation", "\n", "def", "mult_real_cplx", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Pointwise complex multiplication of real tensor a with complex tensor b.\"\"\"", "\n", "\n", "if", "is_real", "(", "b", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "", "return", "a", ".", "unsqueeze", "(", "-", "1", ")", "*", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.div": [[67, 78], ["complex.is_real", "complex.div_cplx_real", "complex.div_cplx_real", "complex.mult_conj", "complex.abs_sqr", "b.dim", "a.dim", "ValueError"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.div_cplx_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.div_cplx_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult_conj", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs_sqr", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "@", "tensor_operation", "\n", "def", "div", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Pointwise complex division of complex tensors.\"\"\"", "\n", "\n", "if", "is_real", "(", "b", ")", ":", "\n", "        ", "if", "b", ".", "dim", "(", ")", ">=", "a", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "# b is real", "\n", "", "return", "div_cplx_real", "(", "a", ",", "b", ")", "\n", "\n", "", "return", "div_cplx_real", "(", "mult_conj", "(", "a", ",", "b", ")", ",", "abs_sqr", "(", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.div_cplx_real": [[80, 88], ["complex.is_real", "ValueError", "b.unsqueeze"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real"], ["", "@", "tensor_operation", "\n", "def", "div_cplx_real", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Pointwise complex division of complex tensor a with real tensor b.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "", "return", "a", "/", "b", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs_sqr": [[90, 98], ["complex.is_real", "torch.sum", "ValueError"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real"], ["", "@", "tensor_operation", "\n", "def", "abs_sqr", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Squared absolute value.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "", "return", "torch", ".", "sum", "(", "a", "*", "a", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs": [[100, 108], ["complex.is_real", "torch.sqrt", "ValueError", "complex.abs_sqr"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs_sqr"], ["", "@", "tensor_operation", "\n", "def", "abs", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Absolute value.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "", "return", "torch", ".", "sqrt", "(", "abs_sqr", "(", "a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.conj": [[110, 119], ["complex.is_real", "complex.complex", "ValueError"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.complex"], ["", "@", "tensor_operation", "\n", "def", "conj", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Complex conjugate.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "# return a * torch.Tensor([1, -1], device=a.device)", "\n", "", "return", "complex", "(", "a", "[", "...", ",", "0", "]", ",", "-", "a", "[", "...", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.real": [[121, 129], ["complex.is_real", "ValueError"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real"], ["", "@", "tensor_operation", "\n", "def", "real", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Real part.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "", "return", "a", "[", "...", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.imag": [[131, 139], ["complex.is_real", "ValueError"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real"], ["", "@", "tensor_operation", "\n", "def", "imag", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Imaginary part.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must have length 2.'", ")", "\n", "\n", "", "return", "a", "[", "...", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.complex": [[141, 151], ["torch.cat", "b.new_zeros.new_zeros", "a.new_zeros.new_zeros", "b.new_zeros.unsqueeze", "a.new_zeros.unsqueeze"], "function", ["None"], ["", "@", "tensor_operation", "\n", "def", "complex", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create complex tensor from real and imaginary part.\"\"\"", "\n", "\n", "if", "b", "is", "None", ":", "\n", "        ", "b", "=", "a", ".", "new_zeros", "(", "a", ".", "shape", ")", "\n", "", "elif", "a", "is", "None", ":", "\n", "        ", "a", "=", "b", ".", "new_zeros", "(", "b", ".", "shape", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "(", "a", ".", "unsqueeze", "(", "-", "1", ")", ",", "b", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mtimes": [[153, 179], ["complex.is_real", "complex.is_real", "complex.mtimes_real_complex", "complex.mtimes_complex_real", "complex.complex", "complex.complex", "complex.complex", "complex.complex", "a.dim", "b.dim", "ValueError", "b.dim", "a.dim", "ValueError", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mtimes_real_complex", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mtimes_complex_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.complex", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.complex", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.complex", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.complex", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "@", "tensor_operation", "\n", "def", "mtimes", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ",", "conj_a", "=", "False", ",", "conj_b", "=", "False", ")", ":", "\n", "    ", "\"\"\"Complex matrix multiplication of complex tensors.\n    The dimensions (-3, -2) are matrix multiplied. -1 is the complex dimension.\"\"\"", "\n", "\n", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "if", "a", ".", "dim", "(", ")", ">=", "b", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "", "return", "mtimes_real_complex", "(", "a", ",", "b", ",", "conj_b", "=", "conj_b", ")", "\n", "", "if", "is_real", "(", "b", ")", ":", "\n", "        ", "if", "b", ".", "dim", "(", ")", ">=", "a", ".", "dim", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "", "return", "mtimes_complex_real", "(", "a", ",", "b", ",", "conj_a", "=", "conj_a", ")", "\n", "\n", "", "if", "not", "conj_a", "and", "not", "conj_b", ":", "\n", "        ", "return", "complex", "(", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "0", "]", ")", "-", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "1", "]", ")", ",", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "1", "]", ")", "+", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "0", "]", ")", ")", "\n", "", "if", "conj_a", "and", "not", "conj_b", ":", "\n", "        ", "return", "complex", "(", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "0", "]", ")", "+", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "1", "]", ")", ",", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "1", "]", ")", "-", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "0", "]", ")", ")", "\n", "", "if", "not", "conj_a", "and", "conj_b", ":", "\n", "        ", "return", "complex", "(", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "0", "]", ")", "+", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "1", "]", ")", ",", "\n", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "0", "]", ")", "-", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "1", "]", ")", ")", "\n", "", "if", "conj_a", "and", "conj_b", ":", "\n", "        ", "return", "complex", "(", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "0", "]", ")", "-", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "1", "]", ")", ",", "\n", "-", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "1", "]", ")", "-", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mtimes_real_complex": [[181, 190], ["complex.is_real", "ValueError", "complex.complex", "complex.complex", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.complex", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.complex"], ["", "", "@", "tensor_operation", "\n", "def", "mtimes_real_complex", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ",", "conj_b", "=", "False", ")", ":", "\n", "    ", "if", "is_real", "(", "b", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "\n", "", "if", "not", "conj_b", ":", "\n", "        ", "return", "complex", "(", "torch", ".", "matmul", "(", "a", ",", "b", "[", "...", ",", "0", "]", ")", ",", "torch", ".", "matmul", "(", "a", ",", "b", "[", "...", ",", "1", "]", ")", ")", "\n", "", "if", "conj_b", ":", "\n", "        ", "return", "complex", "(", "torch", ".", "matmul", "(", "a", ",", "b", "[", "...", ",", "0", "]", ")", ",", "-", "torch", ".", "matmul", "(", "a", ",", "b", "[", "...", ",", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mtimes_complex_real": [[192, 201], ["complex.is_real", "ValueError", "complex.complex", "complex.complex", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.is_real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.complex", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.complex"], ["", "", "@", "tensor_operation", "\n", "def", "mtimes_complex_real", "(", "a", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ",", "conj_a", "=", "False", ")", ":", "\n", "    ", "if", "is_real", "(", "a", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Incorrect dimensions.'", ")", "\n", "\n", "", "if", "not", "conj_a", ":", "\n", "        ", "return", "complex", "(", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", ")", ",", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", ")", ")", "\n", "", "if", "conj_a", ":", "\n", "        ", "return", "complex", "(", "torch", ".", "matmul", "(", "a", "[", "...", ",", "0", "]", ",", "b", ")", ",", "-", "torch", ".", "matmul", "(", "a", "[", "...", ",", "1", "]", ",", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.exp_imag": [[203, 209], ["a.unsqueeze.unsqueeze", "torch.cat", "torch.cos", "torch.sin"], "function", ["None"], ["", "", "@", "tensor_operation", "\n", "def", "exp_imag", "(", "a", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Complex exponential with imaginary input: e^(i*a)\"\"\"", "\n", "\n", "a", "=", "a", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "torch", ".", "cat", "(", "(", "torch", ".", "cos", "(", "a", ")", ",", "torch", ".", "sin", "(", "a", ")", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensordict.TensorDict.concat": [[8, 11], ["tensordict.TensorDict"], "methods", ["None"], ["def", "concat", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Concatenates two dicts without copying internal data.\"\"\"", "\n", "return", "TensorDict", "(", "self", ",", "**", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensordict.TensorDict.copy": [[12, 14], ["tensordict.TensorDict", "super().copy"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "TensorDict", "(", "super", "(", "TensorDict", ",", "self", ")", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensordict.TensorDict.__getattr__": [[15, 22], ["hasattr", "AttributeError", "tensordict.TensorDict", "hasattr", "tensordict.TensorDict.items", "getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "torch", ".", "Tensor", ",", "name", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "'\\'TensorDict\\' object has not attribute \\'{}\\''", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "def", "apply_attr", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "TensorDict", "(", "{", "n", ":", "getattr", "(", "e", ",", "name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "if", "hasattr", "(", "e", ",", "name", ")", "else", "e", "for", "n", ",", "e", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "", "return", "apply_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensordict.TensorDict.attribute": [[23, 25], ["tensordict.TensorDict", "getattr", "tensordict.TensorDict.items"], "methods", ["None"], ["", "def", "attribute", "(", "self", ",", "attr", ":", "str", ",", "*", "args", ")", ":", "\n", "        ", "return", "TensorDict", "(", "{", "n", ":", "getattr", "(", "e", ",", "attr", ",", "*", "args", ")", "for", "n", ",", "e", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensordict.TensorDict.apply": [[26, 28], ["tensordict.TensorDict", "fn", "tensordict.TensorDict.items"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "TensorDict", "(", "{", "n", ":", "fn", "(", "e", ",", "*", "args", ",", "**", "kwargs", ")", "for", "n", ",", "e", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensordict.TensorDict._iterable": [[29, 32], ["isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_iterable", "(", "a", ")", ":", "\n", "        ", "return", "isinstance", "(", "a", ",", "(", "TensorDict", ",", "list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__init__": [[8, 12], ["list.__init__", "tensorlist.TensorList.list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["def", "__init__", "(", "self", ",", "list_of_tensors", "=", "None", ")", ":", "\n", "        ", "if", "list_of_tensors", "is", "None", ":", "\n", "            ", "list_of_tensors", "=", "list", "(", ")", "\n", "", "super", "(", "TensorList", ",", "self", ")", ".", "__init__", "(", "list_of_tensors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__getitem__": [[13, 20], ["isinstance", "list.__getitem__", "isinstance", "tensorlist.TensorList", "tensorlist.TensorList", "list.__getitem__", "list.__getitem__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler.__getitem__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler.__getitem__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "return", "super", "(", "TensorList", ",", "self", ")", ".", "__getitem__", "(", "item", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "super", "(", "TensorList", ",", "self", ")", ".", "__getitem__", "(", "i", ")", "for", "i", "in", "item", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "TensorList", "(", "super", "(", "TensorList", ",", "self", ")", ".", "__getitem__", "(", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__add__": [[21, 25], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "+", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "+", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__radd__": [[26, 30], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__radd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "+", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "+", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__iadd__": [[31, 39], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__iadd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "+=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "+=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__sub__": [[40, 44], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__sub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "-", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "-", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__rsub__": [[45, 49], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__rsub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "-", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "-", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__isub__": [[50, 58], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__isub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "-=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "-=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__mul__": [[59, 63], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "*", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "*", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__rmul__": [[64, 68], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "*", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "*", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__imul__": [[69, 77], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__imul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "*=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "*=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__truediv__": [[78, 82], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__truediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "/", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "/", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__rtruediv__": [[83, 87], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__rtruediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "/", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "/", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__itruediv__": [[88, 96], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__itruediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "/=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "/=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__matmul__": [[97, 101], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__matmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "@", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "@", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__rmatmul__": [[102, 106], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__rmatmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "@", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "@", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__imatmul__": [[107, 115], ["tensorlist.TensorList._iterable", "enumerate", "range", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__imatmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "for", "i", ",", "e2", "in", "enumerate", "(", "other", ")", ":", "\n", "                ", "self", "[", "i", "]", "@=", "e2", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "@=", "other", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__mod__": [[116, 120], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__mod__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "%", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "%", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__rmod__": [[121, 125], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__rmod__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e2", "%", "e1", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "other", "%", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__pos__": [[126, 128], ["tensorlist.TensorList"], "methods", ["None"], ["", "def", "__pos__", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "+", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__neg__": [[129, 131], ["tensorlist.TensorList"], "methods", ["None"], ["", "def", "__neg__", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "-", "e", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__le__": [[132, 136], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__le__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", "<=", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", "<=", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__ge__": [[137, 141], ["tensorlist.TensorList._iterable", "tensorlist.TensorList", "tensorlist.TensorList", "zip"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable"], ["", "def", "__ge__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "TensorList", ".", "_iterable", "(", "other", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "e1", ">=", "e2", "for", "e1", ",", "e2", "in", "zip", "(", "self", ",", "other", ")", "]", ")", "\n", "", "return", "TensorList", "(", "[", "e", ">=", "other", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.concat": [[142, 144], ["tensorlist.TensorList", "list.__add__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.__add__"], ["", "def", "concat", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "TensorList", "(", "super", "(", "TensorList", ",", "self", ")", ".", "__add__", "(", "other", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.copy": [[145, 147], ["tensorlist.TensorList", "super().copy"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "TensorList", "(", "super", "(", "TensorList", ",", "self", ")", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.unroll": [[148, 159], ["tensorlist.TensorList", "any", "isinstance", "TensorList.extend", "TensorList.append", "isinstance", "t.unroll"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.unroll"], ["", "def", "unroll", "(", "self", ")", ":", "\n", "        ", "if", "not", "any", "(", "isinstance", "(", "t", ",", "TensorList", ")", "for", "t", "in", "self", ")", ":", "\n", "            ", "return", "self", "\n", "\n", "", "new_list", "=", "TensorList", "(", ")", "\n", "for", "t", "in", "self", ":", "\n", "            ", "if", "isinstance", "(", "t", ",", "TensorList", ")", ":", "\n", "                ", "new_list", ".", "extend", "(", "t", ".", "unroll", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "new_list", ".", "append", "(", "t", ")", "\n", "", "", "return", "new_list", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list": [[160, 162], ["tensorlist.TensorList.list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["", "def", "list", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.attribute": [[163, 165], ["tensorlist.TensorList", "getattr"], "methods", ["None"], ["", "def", "attribute", "(", "self", ",", "attr", ":", "str", ",", "*", "args", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "getattr", "(", "e", ",", "attr", ",", "*", "args", ")", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.apply": [[166, 168], ["tensorlist.TensorList", "fn"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "fn", ")", ":", "\n", "        ", "return", "TensorList", "(", "[", "fn", "(", "e", ")", "for", "e", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.__getattr__": [[169, 177], ["hasattr", "AttributeError", "tensorlist.TensorList", "getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "torch", ".", "Tensor", ",", "name", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "'\\'TensorList\\' object has not attribute \\'{}\\''", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "def", "apply_attr", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "TensorList", "(", "[", "getattr", "(", "e", ",", "name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "for", "e", "in", "self", "]", ")", "\n", "\n", "", "return", "apply_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList._iterable": [[178, 181], ["isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_iterable", "(", "a", ")", ":", "\n", "        ", "return", "isinstance", "(", "a", ",", "(", "TensorList", ",", "list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.tensor_operation": [[184, 209], ["functools.wraps", "isinstance", "op", "len", "ValueError", "len", "tensorlist.tensor_operation.islist"], "function", ["None"], ["", "", "def", "tensor_operation", "(", "op", ")", ":", "\n", "    ", "def", "islist", "(", "a", ")", ":", "\n", "        ", "return", "isinstance", "(", "a", ",", "TensorList", ")", "\n", "\n", "", "@", "functools", ".", "wraps", "(", "op", ")", "\n", "def", "oplist", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Must be at least one argument without keyword (i.e. operand).'", ")", "\n", "\n", "", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "if", "islist", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "a", ",", "**", "kwargs", ")", "for", "a", "in", "args", "[", "0", "]", "]", ")", "\n", "", "", "else", ":", "\n", "# Multiple operands, assume max two", "\n", "            ", "if", "islist", "(", "args", "[", "0", "]", ")", "and", "islist", "(", "args", "[", "1", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "a", ",", "b", ",", "*", "args", "[", "2", ":", "]", ",", "**", "kwargs", ")", "for", "a", ",", "b", "in", "zip", "(", "*", "args", "[", ":", "2", "]", ")", "]", ")", "\n", "", "if", "islist", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "a", ",", "*", "args", "[", "1", ":", "]", ",", "**", "kwargs", ")", "for", "a", "in", "args", "[", "0", "]", "]", ")", "\n", "", "if", "islist", "(", "args", "[", "1", "]", ")", ":", "\n", "                ", "return", "TensorList", "(", "[", "op", "(", "args", "[", "0", "]", ",", "b", ",", "*", "args", "[", "2", ":", "]", ",", "**", "kwargs", ")", "for", "b", "in", "args", "[", "1", "]", "]", ")", "\n", "\n", "# None of the operands are lists", "\n", "", "", "return", "op", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "oplist", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d": [[6, 50], ["torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d.", "torch.conv2d", "tuple", "ValueError", "tuple", "ValueError", "torch.mean", "torch.mean", "slice", "slice", "slice", "slice"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d"], ["@", "tensor_operation", "\n", "def", "conv2d", "(", "input", ":", "torch", ".", "Tensor", ",", "weight", ":", "torch", ".", "Tensor", ",", "bias", ":", "torch", ".", "Tensor", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "mode", "=", "None", ")", ":", "\n", "    ", "\"\"\"Standard conv2d. Returns the input if weight=None.\"\"\"", "\n", "\n", "if", "padding", "==", "0", ":", "\n", "        ", "padding2", "=", "padding", "\n", "", "else", ":", "\n", "        ", "padding2", "=", "(", "padding", "[", "0", "]", ",", "padding", "[", "0", "]", ",", "padding", "[", "1", "]", ",", "padding", "[", "1", "]", ")", "\n", "", "ind", "=", "None", "\n", "if", "mode", "is", "not", "None", ":", "\n", "        ", "if", "padding", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot input both padding and mode.'", ")", "\n", "", "if", "mode", "==", "'same'", ":", "\n", "            ", "padding", "=", "(", "weight", ".", "shape", "[", "2", "]", "//", "2", ",", "weight", ".", "shape", "[", "3", "]", "//", "2", ")", "\n", "padding2", "=", "(", "weight", ".", "shape", "[", "2", "]", "//", "2", ",", "weight", ".", "shape", "[", "2", "]", "//", "2", ",", "weight", ".", "shape", "[", "3", "]", "//", "2", ",", "weight", ".", "shape", "[", "3", "]", "//", "2", ")", "\n", "if", "weight", ".", "shape", "[", "2", "]", "%", "2", "==", "0", "or", "weight", ".", "shape", "[", "3", "]", "%", "2", "==", "0", ":", "\n", "                ", "ind", "=", "(", "slice", "(", "-", "1", ")", "if", "weight", ".", "shape", "[", "2", "]", "%", "2", "==", "0", "else", "slice", "(", "None", ")", ",", "\n", "slice", "(", "-", "1", ")", "if", "weight", ".", "shape", "[", "3", "]", "%", "2", "==", "0", "else", "slice", "(", "None", ")", ")", "\n", "", "", "elif", "mode", "==", "'valid'", ":", "\n", "            ", "padding", "=", "(", "0", ",", "0", ")", "\n", "padding2", "=", "0", "\n", "", "elif", "mode", "==", "'full'", ":", "\n", "            ", "padding", "=", "(", "weight", ".", "shape", "[", "2", "]", "-", "1", ",", "weight", ".", "shape", "[", "3", "]", "-", "1", ")", "\n", "padding2", "=", "(", "weight", ".", "shape", "[", "2", "]", "-", "1", ",", "weight", ".", "shape", "[", "2", "]", "-", "1", ",", "weight", ".", "shape", "[", "3", "]", "-", "1", ",", "weight", ".", "shape", "[", "3", "]", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown mode for padding.'", ")", "\n", "", "", "padding_operation", "=", "torch", ".", "nn", ".", "ZeroPad2d", "(", "padding2", ")", "\n", "input2", "=", "padding_operation", "(", "input", ")", "\n", "if", "weight", "is", "None", ":", "\n", "        ", "return", "input", "\n", "", "out", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ")", "\n", "if", "ind", "is", "None", ":", "\n", "        ", "if", "mode", "is", "not", "None", ":", "\n", "            ", "return", "tuple", "(", "[", "out", ",", "torch", ".", "mean", "(", "input2", ",", "0", ",", "True", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "", "", "inputshape", "=", "input", ".", "shape", "\n", "input2shape", "=", "input2", ".", "shape", "\n", "# inputmean = torch.mean(input2, 0, True)", "\n", "if", "mode", "is", "not", "None", ":", "\n", "# return tuple([out[:,:,ind[0],ind[1]], torch.mean(input2, 0, True)])", "\n", "        ", "return", "tuple", "(", "[", "out", "[", ":", ",", ":", ",", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", ",", "input2", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "out", "[", ":", ",", ":", ",", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv1x1": [[52, 61], ["torch.matmul().view", "torch.matmul().view", "torch.matmul", "torch.matmul", "weight.view", "input.view"], "function", ["None"], ["", "", "@", "tensor_operation", "\n", "def", "conv1x1", "(", "input", ":", "torch", ".", "Tensor", ",", "weight", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Do a convolution with a 1x1 kernel weights. Implemented with matmul, which can be faster than using conv.\"\"\"", "\n", "\n", "if", "weight", "is", "None", ":", "\n", "        ", "return", "input", "\n", "\n", "", "return", "torch", ".", "matmul", "(", "weight", ".", "view", "(", "weight", ".", "shape", "[", "0", "]", ",", "weight", ".", "shape", "[", "1", "]", ")", ",", "\n", "input", ".", "view", "(", "input", ".", "shape", "[", "0", "]", ",", "input", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ")", ".", "view", "(", "input", ".", "shape", "[", "0", "]", ",", "weight", ".", "shape", "[", "0", "]", ",", "input", ".", "shape", "[", "2", "]", ",", "input", ".", "shape", "[", "3", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann1d": [[8, 14], ["torch.cat", "torch.cat", "torch.cos", "torch.cos", "w[].flip", "torch.cos", "torch.cos", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["def", "hann1d", "(", "sz", ":", "int", ",", "centered", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"1D cosine window.\"\"\"", "\n", "if", "centered", ":", "\n", "        ", "return", "0.5", "*", "(", "1", "-", "torch", ".", "cos", "(", "(", "2", "*", "math", ".", "pi", "/", "(", "sz", "+", "2", ")", ")", "*", "torch", ".", "arange", "(", "1", ",", "sz", "+", "1", ")", ".", "float", "(", ")", ")", ")", "\n", "", "w", "=", "0.5", "*", "(", "1", "+", "torch", ".", "cos", "(", "(", "2", "*", "math", ".", "pi", "/", "(", "sz", "+", "2", ")", ")", "*", "torch", ".", "arange", "(", "0", ",", "sz", "//", "2", "+", "1", ")", ".", "float", "(", ")", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "w", ",", "w", "[", "1", ":", "sz", "-", "sz", "//", "2", "]", ".", "flip", "(", "(", "0", ",", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann2d": [[16, 19], ["hann1d().reshape", "hann1d().reshape", "dcf.hann1d", "dcf.hann1d", "sz[].item", "sz[].item"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann1d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann1d"], ["", "def", "hann2d", "(", "sz", ":", "torch", ".", "Tensor", ",", "centered", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"2D cosine window.\"\"\"", "\n", "return", "hann1d", "(", "sz", "[", "0", "]", ".", "item", "(", ")", ",", "centered", ")", ".", "reshape", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "*", "hann1d", "(", "sz", "[", "1", "]", ".", "item", "(", ")", ",", "centered", ")", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann2d_clipped": [[21, 38], ["torch.pad", "hann1d().reshape", "hann1d().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pad[].item", "pad[].item", "pad[].item", "pad[].item", "dcf.hann1d", "dcf.hann1d", "effective_sz[].item", "effective_sz[].item"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann1d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.hann1d"], ["", "def", "hann2d_clipped", "(", "sz", ":", "torch", ".", "Tensor", ",", "effective_sz", ":", "torch", ".", "Tensor", ",", "centered", "=", "True", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"1D clipped cosine window.\"\"\"", "\n", "\n", "# Ensure that the difference is even", "\n", "effective_sz", "+=", "(", "effective_sz", "-", "sz", ")", "%", "2", "\n", "effective_window", "=", "hann1d", "(", "effective_sz", "[", "0", "]", ".", "item", "(", ")", ",", "True", ")", ".", "reshape", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "*", "hann1d", "(", "effective_sz", "[", "1", "]", ".", "item", "(", ")", ",", "True", ")", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "\n", "pad", "=", "(", "sz", "-", "effective_sz", ")", "/", "2", "\n", "\n", "window", "=", "F", ".", "pad", "(", "effective_window", ",", "(", "pad", "[", "1", "]", ".", "item", "(", ")", ",", "pad", "[", "1", "]", ".", "item", "(", ")", ",", "pad", "[", "0", "]", ".", "item", "(", ")", ",", "pad", "[", "0", "]", ".", "item", "(", ")", ")", ",", "'replicate'", ")", "\n", "\n", "if", "centered", ":", "\n", "        ", "return", "window", "\n", "", "else", ":", "\n", "        ", "mid", "=", "(", "sz", "/", "2", ")", ".", "int", "(", ")", "\n", "window_shift_lr", "=", "torch", ".", "cat", "(", "(", "window", "[", ":", ",", ":", ",", ":", ",", "mid", "[", "1", "]", ":", "]", ",", "window", "[", ":", ",", ":", ",", ":", ",", ":", "mid", "[", "1", "]", "]", ")", ",", "3", ")", "\n", "return", "torch", ".", "cat", "(", "(", "window_shift_lr", "[", ":", ",", ":", ",", "mid", "[", "0", "]", ":", ",", ":", "]", ",", "window_shift_lr", "[", ":", ",", ":", ",", ":", "mid", "[", "0", "]", ",", ":", "]", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.gauss_fourier": [[40, 46], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.exp", "torch.exp", "int", "int", "int", "math.sqrt", "torch.arange.float"], "function", ["None"], ["", "", "def", "gauss_fourier", "(", "sz", ":", "int", ",", "sigma", ":", "float", ",", "half", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "half", ":", "\n", "        ", "k", "=", "torch", ".", "arange", "(", "0", ",", "int", "(", "sz", "/", "2", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "k", "=", "torch", ".", "arange", "(", "-", "int", "(", "(", "sz", "-", "1", ")", "/", "2", ")", ",", "int", "(", "sz", "/", "2", "+", "1", ")", ")", "\n", "", "return", "(", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", "*", "sigma", "/", "sz", ")", "*", "torch", ".", "exp", "(", "-", "2", "*", "(", "math", ".", "pi", "*", "sigma", "*", "k", ".", "float", "(", ")", "/", "sz", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.gauss_spatial": [[48, 51], ["torch.arange", "torch.arange", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "gauss_spatial", "(", "sz", ",", "sigma", ",", "center", "=", "0", ",", "end_pad", "=", "0", ")", ":", "\n", "    ", "k", "=", "torch", ".", "arange", "(", "-", "(", "sz", "-", "1", ")", "/", "2", ",", "(", "sz", "+", "1", ")", "/", "2", "+", "end_pad", ")", "\n", "return", "torch", ".", "exp", "(", "-", "1.0", "/", "(", "2", "*", "sigma", "**", "2", ")", "*", "(", "k", "-", "center", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.label_function": [[53, 55], ["gauss_fourier().reshape", "gauss_fourier().reshape", "dcf.gauss_fourier", "dcf.gauss_fourier", "sz[].item", "sigma[].item", "sz[].item", "sigma[].item"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.gauss_fourier", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.gauss_fourier"], ["", "def", "label_function", "(", "sz", ":", "torch", ".", "Tensor", ",", "sigma", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "gauss_fourier", "(", "sz", "[", "0", "]", ".", "item", "(", ")", ",", "sigma", "[", "0", "]", ".", "item", "(", ")", ")", ".", "reshape", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "*", "gauss_fourier", "(", "sz", "[", "1", "]", ".", "item", "(", ")", ",", "sigma", "[", "1", "]", ".", "item", "(", ")", ",", "True", ")", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.label_function_spatial": [[56, 60], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "gauss_spatial().reshape", "gauss_spatial().reshape", "dcf.gauss_spatial", "dcf.gauss_spatial", "sz[].item", "sigma[].item", "end_pad[].item", "sz[].item", "sigma[].item", "end_pad[].item"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.gauss_spatial", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.gauss_spatial"], ["", "def", "label_function_spatial", "(", "sz", ":", "torch", ".", "Tensor", ",", "sigma", ":", "torch", ".", "Tensor", ",", "center", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros", "(", "2", ")", ",", "end_pad", ":", "torch", ".", "Tensor", "=", "torch", ".", "zeros", "(", "2", ")", ")", ":", "\n", "    ", "\"\"\"The origin is in the middle of the image.\"\"\"", "\n", "return", "gauss_spatial", "(", "sz", "[", "0", "]", ".", "item", "(", ")", ",", "sigma", "[", "0", "]", ".", "item", "(", ")", ",", "center", "[", "0", "]", ",", "end_pad", "[", "0", "]", ".", "item", "(", ")", ")", ".", "reshape", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "*", "gauss_spatial", "(", "sz", "[", "1", "]", ".", "item", "(", ")", ",", "sigma", "[", "1", "]", ".", "item", "(", ")", ",", "center", "[", "1", "]", ",", "end_pad", "[", "1", "]", ".", "item", "(", ")", ")", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.cubic_spline_fourier": [[62, 72], ["torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos"], "function", ["None"], ["", "def", "cubic_spline_fourier", "(", "f", ",", "a", ")", ":", "\n", "    ", "\"\"\"The continuous Fourier transform of a cubic spline kernel.\"\"\"", "\n", "\n", "bf", "=", "(", "6", "*", "(", "1", "-", "torch", ".", "cos", "(", "2", "*", "math", ".", "pi", "*", "f", ")", ")", "+", "3", "*", "a", "*", "(", "1", "-", "torch", ".", "cos", "(", "4", "*", "math", ".", "pi", "*", "f", ")", ")", "\n", "-", "(", "6", "+", "8", "*", "a", ")", "*", "math", ".", "pi", "*", "f", "*", "torch", ".", "sin", "(", "2", "*", "math", ".", "pi", "*", "f", ")", "-", "2", "*", "a", "*", "math", ".", "pi", "*", "f", "*", "torch", ".", "sin", "(", "4", "*", "math", ".", "pi", "*", "f", ")", ")", "/", "(", "4", "*", "math", ".", "pi", "**", "4", "*", "f", "**", "4", ")", "\n", "\n", "bf", "[", "f", "==", "0", "]", "=", "1", "\n", "\n", "return", "bf", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.get_interp_fourier": [[74, 95], ["pytracking.fourier.get_frequency_coord", "pytracking.complex.mult", "pytracking.complex.mult", "complex.mult.to", "complex.mult.to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ValueError", "pytracking.complex.exp_imag", "pytracking.complex.exp_imag", "dcf.cubic_spline_fourier", "dcf.cubic_spline_fourier"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.get_frequency_coord", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.exp_imag", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.exp_imag", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.cubic_spline_fourier", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.cubic_spline_fourier"], ["", "def", "get_interp_fourier", "(", "sz", ":", "torch", ".", "Tensor", ",", "method", "=", "'ideal'", ",", "bicubic_param", "=", "0.5", ",", "centering", "=", "True", ",", "windowing", "=", "False", ",", "device", "=", "'cpu'", ")", ":", "\n", "\n", "    ", "ky", ",", "kx", "=", "fourier", ".", "get_frequency_coord", "(", "sz", ")", "\n", "\n", "if", "method", "==", "'ideal'", ":", "\n", "        ", "interp_y", "=", "torch", ".", "ones", "(", "ky", ".", "shape", ")", "/", "sz", "[", "0", "]", "\n", "interp_x", "=", "torch", ".", "ones", "(", "kx", ".", "shape", ")", "/", "sz", "[", "1", "]", "\n", "", "elif", "method", "==", "'bicubic'", ":", "\n", "        ", "interp_y", "=", "cubic_spline_fourier", "(", "ky", "/", "sz", "[", "0", "]", ",", "bicubic_param", ")", "/", "sz", "[", "0", "]", "\n", "interp_x", "=", "cubic_spline_fourier", "(", "kx", "/", "sz", "[", "1", "]", ",", "bicubic_param", ")", "/", "sz", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown method.'", ")", "\n", "\n", "", "if", "centering", ":", "\n", "        ", "interp_y", "=", "complex", ".", "mult", "(", "interp_y", ",", "complex", ".", "exp_imag", "(", "(", "-", "math", ".", "pi", "/", "sz", "[", "0", "]", ")", "*", "ky", ")", ")", "\n", "interp_x", "=", "complex", ".", "mult", "(", "interp_x", ",", "complex", ".", "exp_imag", "(", "(", "-", "math", ".", "pi", "/", "sz", "[", "1", "]", ")", "*", "kx", ")", ")", "\n", "\n", "", "if", "windowing", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "interp_y", ".", "to", "(", "device", ")", ",", "interp_x", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.interpolate_dft": [[97, 104], ["isinstance", "isinstance", "ValueError", "pytracking.complex.mult", "pytracking.complex.mult", "pytracking.complex.mult"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.mult"], ["", "def", "interpolate_dft", "(", "a", ":", "torch", ".", "Tensor", ",", "interp_fs", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "    ", "if", "isinstance", "(", "interp_fs", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "complex", ".", "mult", "(", "a", ",", "interp_fs", ")", "\n", "", "if", "isinstance", "(", "interp_fs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "return", "complex", ".", "mult", "(", "complex", ".", "mult", "(", "a", ",", "interp_fs", "[", "0", "]", ")", ",", "interp_fs", "[", "1", "]", ")", "\n", "", "raise", "ValueError", "(", "'\"interp_fs\" must be tensor or tuple of tensors.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.get_reg_filter": [[106, 154], ["getattr", "getattr", "pytracking.complex.abs", "torch.irfft", "torch.irfft", "pytracking.complex.real", "torch.cat.nonzero().max", "int", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.rfft", "torch.rfft", "sz.prod", "pytracking.fourier.rfftshift2", "max_inds[].item", "max_inds[].item", "max_inds[].item", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "target_sz.prod().sqrt", "torch.ones", "torch.ones", "sz.long().tolist", "sz.prod", "torch.irfft.min", "torch.cat.nonzero", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "reg_window_dft[].flip", "target_sz.prod", "int", "int", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "sz.long", "int", "int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "complex.abs.max", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.real", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.fourier.rfftshift2", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs"], ["", "def", "get_reg_filter", "(", "sz", ":", "torch", ".", "Tensor", ",", "target_sz", ":", "torch", ".", "Tensor", ",", "params", ")", ":", "\n", "    ", "\"\"\"Computes regularization filter in CCOT and ECO.\"\"\"", "\n", "\n", "if", "not", "params", ".", "use_reg_window", ":", "\n", "        ", "return", "params", ".", "reg_window_min", "*", "torch", ".", "ones", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "getattr", "(", "params", ",", "'reg_window_square'", ",", "False", ")", ":", "\n", "        ", "target_sz", "=", "target_sz", ".", "prod", "(", ")", ".", "sqrt", "(", ")", "*", "torch", ".", "ones", "(", "2", ")", "\n", "\n", "# Normalization factor", "\n", "", "reg_scale", "=", "0.5", "*", "target_sz", "\n", "\n", "# Construct grid", "\n", "if", "getattr", "(", "params", ",", "'reg_window_centered'", ",", "True", ")", ":", "\n", "        ", "wrg", "=", "torch", ".", "arange", "(", "-", "int", "(", "(", "sz", "[", "0", "]", "-", "1", ")", "/", "2", ")", ",", "int", "(", "sz", "[", "0", "]", "/", "2", "+", "1", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "\n", "wcg", "=", "torch", ".", "arange", "(", "-", "int", "(", "(", "sz", "[", "1", "]", "-", "1", ")", "/", "2", ")", ",", "int", "(", "sz", "[", "1", "]", "/", "2", "+", "1", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "wrg", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "0", ",", "int", "(", "sz", "[", "0", "]", "/", "2", "+", "1", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "torch", ".", "arange", "(", "-", "int", "(", "(", "sz", "[", "0", "]", "-", "1", ")", "/", "2", ")", ",", "0", ",", "dtype", "=", "torch", ".", "float32", ")", "]", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "\n", "wcg", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "0", ",", "int", "(", "sz", "[", "1", "]", "/", "2", "+", "1", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "torch", ".", "arange", "(", "-", "int", "(", "(", "sz", "[", "1", "]", "-", "1", ")", "/", "2", ")", ",", "0", ",", "dtype", "=", "torch", ".", "float32", ")", "]", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "\n", "# Construct regularization window", "\n", "", "reg_window", "=", "(", "params", ".", "reg_window_edge", "-", "params", ".", "reg_window_min", ")", "*", "(", "torch", ".", "abs", "(", "wrg", "/", "reg_scale", "[", "0", "]", ")", "**", "params", ".", "reg_window_power", "+", "\n", "torch", ".", "abs", "(", "wcg", "/", "reg_scale", "[", "1", "]", ")", "**", "params", ".", "reg_window_power", ")", "+", "params", ".", "reg_window_min", "\n", "\n", "# Compute DFT and enforce sparsity", "\n", "reg_window_dft", "=", "torch", ".", "rfft", "(", "reg_window", ",", "2", ")", "/", "sz", ".", "prod", "(", ")", "\n", "reg_window_dft_abs", "=", "complex", ".", "abs", "(", "reg_window_dft", ")", "\n", "reg_window_dft", "[", "reg_window_dft_abs", "<", "params", ".", "reg_sparsity_threshold", "*", "reg_window_dft_abs", ".", "max", "(", ")", ",", ":", "]", "=", "0", "\n", "\n", "# Do the inverse transform to correct for the window minimum", "\n", "reg_window_sparse", "=", "torch", ".", "irfft", "(", "reg_window_dft", ",", "2", ",", "signal_sizes", "=", "sz", ".", "long", "(", ")", ".", "tolist", "(", ")", ")", "\n", "reg_window_dft", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "+=", "params", ".", "reg_window_min", "-", "sz", ".", "prod", "(", ")", "*", "reg_window_sparse", ".", "min", "(", ")", "\n", "reg_window_dft", "=", "complex", ".", "real", "(", "fourier", ".", "rfftshift2", "(", "reg_window_dft", ")", ")", "\n", "\n", "# Remove zeros", "\n", "max_inds", ",", "_", "=", "reg_window_dft", ".", "nonzero", "(", ")", ".", "max", "(", "dim", "=", "0", ")", "\n", "mid_ind", "=", "int", "(", "(", "reg_window_dft", ".", "shape", "[", "2", "]", "-", "1", ")", "/", "2", ")", "\n", "top", "=", "max_inds", "[", "-", "2", "]", ".", "item", "(", ")", "+", "1", "\n", "bottom", "=", "2", "*", "mid_ind", "-", "max_inds", "[", "-", "2", "]", ".", "item", "(", ")", "\n", "right", "=", "max_inds", "[", "-", "1", "]", ".", "item", "(", ")", "+", "1", "\n", "reg_window_dft", "=", "reg_window_dft", "[", "...", ",", "bottom", ":", "top", ",", ":", "right", "]", "\n", "if", "reg_window_dft", ".", "shape", "[", "-", "1", "]", ">", "1", ":", "\n", "        ", "reg_window_dft", "=", "torch", ".", "cat", "(", "[", "reg_window_dft", "[", "...", ",", "1", ":", "]", ".", "flip", "(", "(", "2", ",", "3", ")", ")", ",", "reg_window_dft", "]", ",", "-", "1", ")", "\n", "\n", "", "return", "reg_window_dft", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.dcf.max2d": [[156, 165], ["torch.max", "torch.max", "torch.max", "torch.max", "argmax_row.reshape.reshape", "torch.cat", "torch.cat", "argmax_row.reshape.view", "argmax_col.numel", "argmax_row.reshape.unsqueeze", "argmax_col.unsqueeze", "torch.arange", "torch.arange", "argmax_col.view", "argmax_col.numel"], "function", ["None"], ["", "def", "max2d", "(", "a", ":", "torch", ".", "Tensor", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"Computes maximum and argmax in the last two dimensions.\"\"\"", "\n", "\n", "max_val_row", ",", "argmax_row", "=", "torch", ".", "max", "(", "a", ",", "dim", "=", "-", "2", ")", "\n", "max_val", ",", "argmax_col", "=", "torch", ".", "max", "(", "max_val_row", ",", "dim", "=", "-", "1", ")", "\n", "argmax_row", "=", "argmax_row", ".", "view", "(", "argmax_col", ".", "numel", "(", ")", ",", "-", "1", ")", "[", "torch", ".", "arange", "(", "argmax_col", ".", "numel", "(", ")", ")", ",", "argmax_col", ".", "view", "(", "-", "1", ")", "]", "\n", "argmax_row", "=", "argmax_row", ".", "reshape", "(", "argmax_col", ".", "shape", ")", "\n", "argmax", "=", "torch", ".", "cat", "(", "(", "argmax_row", ".", "unsqueeze", "(", "-", "1", ")", ",", "argmax_col", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "-", "1", ")", "\n", "return", "max_val", ",", "argmax", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.trackingnetdataset.TrackingNetDatasetClass.__init__": [[20, 24], ["pytracking.evaluation.data.BaseDataset.__init__", "trackingnetdataset.TrackingNetDatasetClass._get_sequence_list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq._get_sequence_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "trackingnet_path", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.trackingnetdataset.TrackingNetDatasetClass.get_sequence_list": [[25, 27], ["pytracking.evaluation.data.SequenceList", "trackingnetdataset.TrackingNetDatasetClass._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.trackingnetdataset.TrackingNetDatasetClass._construct_sequence": [[28, 41], ["frame_list.sort", "pytracking.evaluation.data.Sequence", "numpy.loadtxt", "os.path.join", "numpy.loadtxt.reshape", "str", "numpy.loadtxt", "os.listdir", "frame.endswith", "str", "int"], "methods", ["None"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_name", ")", ":", "\n", "        ", "anno_path", "=", "'{}/{}/anno/{}.txt'", ".", "format", "(", "self", ".", "base_path", ",", "'TEST'", ",", "sequence_name", ")", "\n", "try", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "except", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "frames_path", "=", "'{}/{}/frames/{}'", ".", "format", "(", "self", ".", "base_path", ",", "'TEST'", ",", "sequence_name", ")", "\n", "frame_list", "=", "[", "frame", "for", "frame", "in", "os", ".", "listdir", "(", "frames_path", ")", "if", "frame", ".", "endswith", "(", "\".jpg\"", ")", "]", "\n", "frame_list", ".", "sort", "(", "key", "=", "lambda", "f", ":", "int", "(", "f", "[", ":", "-", "4", "]", ")", ")", "\n", "frames_list", "=", "[", "os", ".", "path", ".", "join", "(", "frames_path", ",", "frame", ")", "for", "frame", "in", "frame_list", "]", "\n", "\n", "return", "Sequence", "(", "sequence_name", ",", "frames_list", ",", "ground_truth_rect", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.trackingnetdataset.TrackingNetDatasetClass.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.trackingnetdataset.TrackingNetDatasetClass._get_sequence_list": [[45, 559], ["None"], "methods", ["None"], ["", "def", "_get_sequence_list", "(", "self", ")", ":", "\n", "        ", "sequence_list", "=", "[", "'-Dz7OIf54b0_0'", ",", "\n", "'-FCJqWfi9Wo_0'", ",", "\n", "'0-6LB4FqxoE_0'", ",", "\n", "'07Ysk1C0ZX0_0'", ",", "\n", "'0GER2Qd0vFw_0'", ",", "\n", "'0HBDWix1LAk_0'", ",", "\n", "'0HBDWix1LAk_1'", ",", "\n", "'0JOSlkhPOdA_0'", ",", "\n", "'0PRjEMNkNUs_0'", ",", "\n", "'0ZzhXi15dvo_0'", ",", "\n", "'0av1Erdno4A_0'", ",", "\n", "'0cP2LRl88qM_0'", ",", "\n", "'0cP2LRl88qM_1'", ",", "\n", "'0jgHdaQXpRk_0'", ",", "\n", "'0l7j7i3XhJ0_0'", ",", "\n", "'0mQjFeyN7LE_0'", ",", "\n", "'0nlxpC_f0wU_0'", ",", "\n", "'0ogRNrct_3c_0'", ",", "\n", "'11-hHR2lotQ_0'", ",", "\n", "'1AXqUQW2Vqs_0'", ",", "\n", "'1Jho-uH4dNY_0'", ",", "\n", "'1WIvjdxe4As_0'", ",", "\n", "'1Zgpv4GUFZk_0'", ",", "\n", "'1aAJHdfrJuk_0'", ",", "\n", "'1n0JQ2qIqLo_0'", ",", "\n", "'1n0JQ2qIqLo_1'", ",", "\n", "'1n0JQ2qIqLo_2'", ",", "\n", "'1qvKZsLFCX4_0'", ",", "\n", "'1qxEGelbWCg_0'", ",", "\n", "'1s7hqoYecSo_0'", ",", "\n", "'1tKzO_IhI34_0'", ",", "\n", "'1vn6Uo2NO7U_0'", ",", "\n", "'27HbwIQV92c_0'", ",", "\n", "'2DwR0E7MySc_0'", ",", "\n", "'2FVEzOxvjj8_0'", ",", "\n", "'2P0ok6kGdPk_0'", ",", "\n", "'2P0ok6kGdPk_1'", ",", "\n", "'2P0ok6kGdPk_2'", ",", "\n", "'2WTV7g1Z0lA_0'", ",", "\n", "'2e5XiuDEo5A_0'", ",", "\n", "'2h0_cHOXVD4_0'", ",", "\n", "'2r1mgtkZack_0'", ",", "\n", "'2rnnMNVuyYo_0'", ",", "\n", "'2uZQ7eqKpmY_0'", ",", "\n", "'2uZQ7eqKpmY_1'", ",", "\n", "'2uzSossy-P8_0'", ",", "\n", "'30y8Uy0B_uk_0'", ",", "\n", "'36_slnYU-EA_0'", ",", "\n", "'3CXY9-Y1ixc_0'", ",", "\n", "'3DE9R-UpL7w_0'", ",", "\n", "'3JmESCLz2Ic_0'", ",", "\n", "'3K_9VfzDHCA_0'", ",", "\n", "'3PVAsqby4jk_0'", ",", "\n", "'3jdzVaWohVw_0'", ",", "\n", "'3ynVtFJmIfk_0'", ",", "\n", "'43PlN1KVDgQ_0'", ",", "\n", "'49e2ryAo3Qw_0'", ",", "\n", "'4DkGRN8WXH0_0'", ",", "\n", "'4S48krFU3dQ_0'", ",", "\n", "'4T-m3KHtQPc_0'", ",", "\n", "'4XNrBaxkiHw_0'", ",", "\n", "'4YHgkyrL82M_0'", ",", "\n", "'4aMXjtIoC_M_0'", ",", "\n", "'4cCrF8kTOVE_0'", ",", "\n", "'4e0D1OyvPrI_0'", ",", "\n", "'4qXKgKaCd3s_0'", ",", "\n", "'4rT02vTH8qg_0'", ",", "\n", "'5-t2w-R1AHg_0'", ",", "\n", "'5AHb4xPDFR8_0'", ",", "\n", "'5P-KFY_sxEQ_0'", ",", "\n", "'5RJXgYSJaVE_0'", ",", "\n", "'5TqvkG4uWk0_0'", ",", "\n", "'5emtFao6IT4_0'", ",", "\n", "'5jyFpgIWzsE_0'", ",", "\n", "'60a_8DIqgJ0_0'", ",", "\n", "'67jcSw6ebUo_0'", ",", "\n", "'6Eci8o4MAVw_0'", ",", "\n", "'6OxBSJBe4tI_0'", ",", "\n", "'6XEKPSnk1QQ_0'", ",", "\n", "'6r3f3ICFPb8_0'", ",", "\n", "'6xzaKqU-rwI_0'", ",", "\n", "'79Y0wOFAwy0_0'", ",", "\n", "'79Y0wOFAwy0_1'", ",", "\n", "'7FZhTIGaL2c_0'", ",", "\n", "'7HnYRHuaCBk_0'", ",", "\n", "'7zFEmpHcIvo_0'", ",", "\n", "'88TIX-zand4_0'", ",", "\n", "'8Rsr0khg3Mk_0'", ",", "\n", "'8VkHx1GXvmo_0'", ",", "\n", "'8XhNvHbY4e0_0'", ",", "\n", "'8YBx-_bl8EA_0'", ",", "\n", "'8fiL0-tqkRA_0'", ",", "\n", "'8kkgVGMIf9Q_0'", ",", "\n", "'8r6QOyYh1vg_0'", ",", "\n", "'8sd513xQzV4_0'", ",", "\n", "'8wcZBX_BOwI_0'", ",", "\n", "'9F6LlyZ1GRI_0'", ",", "\n", "'9HizwmZHguc_0'", ",", "\n", "'9RKiTJdaVyY_0'", ",", "\n", "'9RmS4wETvRA_0'", ",", "\n", "'9XfvirWNWZA_0'", ",", "\n", "'9XozS-rat9w_0'", ",", "\n", "'9x6cMaE5cGA_0'", ",", "\n", "'A2AuBBONacU_0'", ",", "\n", "'A7OzWjZpCWs_0'", ",", "\n", "'AJhUA5hvAXQ_0'", ",", "\n", "'AVuFw6MIACg_0'", ",", "\n", "'Ajm-8msXIbc_0'", ",", "\n", "'B-bwz03_jTA_0'", ",", "\n", "'B7BM97SFv-E_0'", ",", "\n", "'BCJGL5E9huM_0'", ",", "\n", "'BE9f-YhCo50_0'", ",", "\n", "'BMVGTABB3O8_0'", ",", "\n", "'BN65-YWGSbs_0'", ",", "\n", "'BPX4cqYG6X0_0'", ",", "\n", "'BXJo9xrMxTo_0'", ",", "\n", "'B_-FCqaj4oc_0'", ",", "\n", "'BagyIW9DGsk_0'", ",", "\n", "'BhZMKM5wFs0_0'", ",", "\n", "'Bn4IVrCktF4_0'", ",", "\n", "'C08QnMjDfIc_0'", ",", "\n", "'C0YiKHm3jpw_0'", ",", "\n", "'C0YiKHm3jpw_1'", ",", "\n", "'CL55sbrvhrM_0'", ",", "\n", "'CPa9hv2pbd0_0'", ",", "\n", "'Cjc_wFsw4c4_0'", ",", "\n", "'ClmWyYJB5kE_0'", ",", "\n", "'Cp9cFTH-NMA_0'", ",", "\n", "'Cv-T-kmfraE_0'", ",", "\n", "'CyIhI7Vbzr0_0'", ",", "\n", "'D0jRA5TKT-o_0'", ",", "\n", "'DP9z5qDrrlY_0'", ",", "\n", "'DkquTEwWbaE_0'", ",", "\n", "'DoOmLuFnpi4_0'", ",", "\n", "'DstgtSNbx48_0'", ",", "\n", "'E3KU_oegSbg_0'", ",", "\n", "'E9RHw_-NN4c_0'", ",", "\n", "'EH4WB6TLXGs_0'", ",", "\n", "'EILr0LNw0Mg_0'", ",", "\n", "'EKp7rxqDbH8_0'", ",", "\n", "'E_cEXHKuMk4_0'", ",", "\n", "'EdQqy72QQeQ_0'", ",", "\n", "'EdQqy72QQeQ_1'", ",", "\n", "'EdQqy72QQeQ_2'", ",", "\n", "'EdQqy72QQeQ_3'", ",", "\n", "'EzTwnUAmGKc_0'", ",", "\n", "'FD0o9zxiCIQ_0'", ",", "\n", "'FMPxYweuarE_0'", ",", "\n", "'FSwyyml3QM8_0'", ",", "\n", "'FivbvMuiEWw_0'", ",", "\n", "'FpDI3f_tYj4_0'", ",", "\n", "'FuMNPiwPCWI_0'", ",", "\n", "'G22YjnFwQMs_0'", ",", "\n", "'G22YjnFwQMs_1'", ",", "\n", "'G22YjnFwQMs_2'", ",", "\n", "'G7JOHJ3za6Y_0'", ",", "\n", "'G9gkYQrgQGU_0'", ",", "\n", "'GG2nCfwA5cM_0'", ",", "\n", "'GaZr5KRTeIs_0'", ",", "\n", "'Gm0EO1-WVao_0'", ",", "\n", "'Gm0EO1-WVao_1'", ",", "\n", "'Gm0EO1-WVao_2'", ",", "\n", "'Gw5FxWOjKUE_0'", ",", "\n", "'H-RuyYTo-2o_0'", ",", "\n", "'HIZQ-O2OJlA_0'", ",", "\n", "'HZkjpcrz1zE_0'", ",", "\n", "'HaYoSNXNZ0M_0'", ",", "\n", "'Het2PkZCfGs_0'", ",", "\n", "'HoWrvbRF5Uw_0'", ",", "\n", "'Hu3nL3Famhk_0'", ",", "\n", "'I-rzzVQXf9w_0'", ",", "\n", "'IQrzZwkXQlI_0'", ",", "\n", "'ITHvD6BDzXc_0'", ",", "\n", "'IUhkjSSb9a8_0'", ",", "\n", "'Ij38IL41xQQ_0'", ",", "\n", "'Iwq0hcVjm7w_0'", ",", "\n", "'IxjBypJ83pA_0'", ",", "\n", "'IxjDSJuPY24_0'", ",", "\n", "'IyBEsH1acKM_0'", ",", "\n", "'J6AFXbjd1uo_0'", ",", "\n", "'J6OlMtgrAC8_0'", ",", "\n", "'J6tnw6IzT44_0'", ",", "\n", "'J73waS0d02Y_0'", ",", "\n", "'JOfVj6FgUF0_0'", ",", "\n", "'JkLxB0XYOGM_0'", ",", "\n", "'Jrp6_6bUBkk_0'", ",", "\n", "'Jv72bvabmCc_0'", ",", "\n", "'JyT9qPb5Fe0_0'", ",", "\n", "'KCOkbH1kfDU_0'", ",", "\n", "'KCOkbH1kfDU_1'", ",", "\n", "'KH2kdBdUUyA_0'", ",", "\n", "'KMqR27j3Mhg_0'", ",", "\n", "'KRrT2XwHHWU_0'", ",", "\n", "'KYio1UJatAk_0'", ",", "\n", "'KZgwt7A73J0_0'", ",", "\n", "'KbaTy9bm_Mo_0'", ",", "\n", "'KbaTy9bm_Mo_1'", ",", "\n", "'KcOBOusRanQ_0'", ",", "\n", "'L2vzunH67iA_0'", ",", "\n", "'LLTG_b2bALQ_0'", ",", "\n", "'LLhYjizenC4_0'", ",", "\n", "'LP1JQ6r-LR8_0'", ",", "\n", "'LcKCWQgxPv4_0'", ",", "\n", "'MJZ2kt2kqSU_0'", ",", "\n", "'MiZ66gM5tzw_0'", ",", "\n", "'MlxbHhZ7jVw_0'", ",", "\n", "'Mw8KpkA0SRc_0'", ",", "\n", "'Mw8KpkA0SRc_1'", ",", "\n", "'N0Wa8DgCTL4_0'", ",", "\n", "'N5MiDo3aX1A_0'", ",", "\n", "'N5VpKWs1wm4_0'", ",", "\n", "'NPpbrvMWJXA_0'", ",", "\n", "'NV4_J7uoFYw_0'", ",", "\n", "'Nn4-s0CETPg_0'", ",", "\n", "'O-bhixil5Ho_0'", ",", "\n", "'O1QjMCPJn5A_0'", ",", "\n", "'O3ZT6MVSHZ4_0'", ",", "\n", "'O4UttlHCp28_0'", ",", "\n", "'O6AtzcBBo2A_0'", ",", "\n", "'O7YXEoG1ZwM_0'", ",", "\n", "'OGkySddv1S0_0'", ",", "\n", "'OJHDGvFgFFw_0'", ",", "\n", "'OMCNuZOFEi0_0'", ",", "\n", "'OQMG0C015rI_0'", ",", "\n", "'OU72LG0O9_M_0'", ",", "\n", "'OpuH-1YGcY8_0'", ",", "\n", "'OxQbu0kwObo_0'", ",", "\n", "'PFMJouhE468_0'", ",", "\n", "'PYY3bfUgooc_0'", ",", "\n", "'PYY3bfUgooc_1'", ",", "\n", "'PYY3bfUgooc_2'", ",", "\n", "'PYrNrXR5UUw_0'", ",", "\n", "'PZ1bSGqtAdw_0'", ",", "\n", "'Q427Xs_icsw_0'", ",", "\n", "'QDxAH3cfiDI_0'", ",", "\n", "'QJ6PebrVhb4_0'", ",", "\n", "'QS2qDrnVQFo_0'", ",", "\n", "'QYb6ChPTcHY_0'", ",", "\n", "'QcH9cV-kaho_0'", ",", "\n", "'R-5JSKO4sVc_0'", ",", "\n", "'R6z-5RKwFfA_0'", ",", "\n", "'RAUpWkFRwdA_0'", ",", "\n", "'RAUpWkFRwdA_1'", ",", "\n", "'RHV8r6lwmFI_0'", ",", "\n", "'RIyWvrmneHQ_0'", ",", "\n", "'R_2Kscz8YBE_0'", ",", "\n", "'R_2Kscz8YBE_1'", ",", "\n", "'RkpCxP_8kDM_0'", ",", "\n", "'SHygnt65pM0_0'", ",", "\n", "'SSfdIHgb4IU_0'", ",", "\n", "'SZjSU00vWPQ_0'", ",", "\n", "'SkztYkUK6K8_0'", ",", "\n", "'SmZl-r92pmk_0'", ",", "\n", "'T-6SBApMCsw_0'", ",", "\n", "'T1U6bPMinzw_0'", ",", "\n", "'T7Jr0u4xxM0_0'", ",", "\n", "'TPf68wTe3IU_0'", ",", "\n", "'TdkeFfjNUpg_0'", ",", "\n", "'ThudiuJW5Kg_0'", ",", "\n", "'TyR2X9M_NOI_0'", ",", "\n", "'UUyk7Eojl1I_0'", ",", "\n", "'UecVWTt2ChA_0'", ",", "\n", "'UlYxD4JVRhI_0'", ",", "\n", "'V7ZB7vVnukg_0'", ",", "\n", "'VT_Bw6ANlY0_0'", ",", "\n", "'Vgn-TZkzDV0_0'", ",", "\n", "'VoETGQZ3HKA_0'", ",", "\n", "'VpXVVpIesQo_0'", ",", "\n", "'WJMReV7XiNM_0'", ",", "\n", "'Wh0YJ3JBIzU_0'", ",", "\n", "'Wo1TKyYU4ow_0'", ",", "\n", "'WsaOn85TqUE_0'", ",", "\n", "'WtFNGOMs_zY_0'", ",", "\n", "'XKdyEYXltZo_0'", ",", "\n", "'XX1eVms9ZcE_0'", ",", "\n", "'XX1eVms9ZcE_1'", ",", "\n", "'XX1eVms9ZcE_2'", ",", "\n", "'Xg6lP1zsq_E_0'", ",", "\n", "'Xj5Tt01VsIk_0'", ",", "\n", "'XwyyGjLi7pc_0'", ",", "\n", "'Xzu094YlBHQ_0'", ",", "\n", "'YaXKZdSEwt4_0'", ",", "\n", "'YfjTQdBZwCU_0'", ",", "\n", "'YhrkfDzeLdI_0'", ",", "\n", "'YtN78tgbMfE_0'", ",", "\n", "'Z968B3Un4sA_0'", ",", "\n", "'ZA2emnqIhLE_0'", ",", "\n", "'ZGFj8HFpeEQ_0'", ",", "\n", "'ZIihz5uxPiE_0'", ",", "\n", "'ZIkbtAE_F3I_0'", ",", "\n", "'Zljto-7mKTI_0'", ",", "\n", "'_-er1Sdg3a8_0'", ",", "\n", "'_-yTvT_dGw8_0'", ",", "\n", "'_3GIPsDKoVk_0'", ",", "\n", "'_JAp8QynvQE_0'", ",", "\n", "'_O85LwqCB7k_0'", ",", "\n", "'_RBD5erECJ8_0'", ",", "\n", "'_X5QH6Bxm8o_0'", ",", "\n", "'__WaG8fRMto_0'", ",", "\n", "'_dKKBSKYStE_0'", ",", "\n", "'_tcyjMmMSRk_0'", ",", "\n", "'a-WtA7RZRwc_0'", ",", "\n", "'a4kJCIe8e2c_0'", ",", "\n", "'a5wWW5xspOg_0'", ",", "\n", "'aAsiYXsj28E_0'", ",", "\n", "'aBLH8qvaIFg_0'", ",", "\n", "'aKg7xivrI9Y_0'", ",", "\n", "'agdU9QeRP9g_0'", ",", "\n", "'akbBUSKnyj8_0'", ",", "\n", "'an_Xwal5AsM_0'", ",", "\n", "'an_Xwal5AsM_1'", ",", "\n", "'apGi_6BR3nc_0'", ",", "\n", "'as3_Rkdv0SU_0'", ",", "\n", "'ay65MRWqiRk_0'", ",", "\n", "'ayvfySqnxWA_0'", ",", "\n", "'b-PQEq-ehas_0'", ",", "\n", "'b0mx69LQbp0_0'", ",", "\n", "'b64ORExZ1B8_0'", ",", "\n", "'bHE3l9EpRsA_0'", ",", "\n", "'bR82aIlMUFw_0'", ",", "\n", "'bYmvxWFTkJQ_0'", ",", "\n", "'ba5w79A8b1U_0'", ",", "\n", "'begVPWOxPRs_0'", ",", "\n", "'bl-jwa1jRTE_0'", ",", "\n", "'btDFQ9fJZX4_0'", ",", "\n", "'buRfiT3Mq6Q_0'", ",", "\n", "'cCRlul2kpr0_0'", ",", "\n", "'cCRlul2kpr0_1'", ",", "\n", "'cJ91NTO2KTQ_0'", ",", "\n", "'cNqf75UKk9M_0'", ",", "\n", "'cNqf75UKk9M_1'", ",", "\n", "'cOIk7Ypfoxk_0'", ",", "\n", "'cxsFItvKQNQ_0'", ",", "\n", "'d0PqI5peh4Y_0'", ",", "\n", "'d102whT2D6s_0'", ",", "\n", "'dFk2XOr1cuw_0'", ",", "\n", "'dFk2XOr1cuw_1'", ",", "\n", "'dPLbMJnofdE_0'", ",", "\n", "'dvzgPFeUtQE_0'", ",", "\n", "'e0YuX0Nri9M_0'", ",", "\n", "'e51Nyo7236o_0'", ",", "\n", "'eCfpscj3SMk_0'", ",", "\n", "'eIzIge4GW-U_0'", ",", "\n", "'eZX7H5XfoE4_0'", ",", "\n", "'ee2xCtzwt7A_0'", ",", "\n", "'eku6SgAEK4A_0'", ",", "\n", "'eo8SMTqCWwY_0'", ",", "\n", "'eqbbWCUnq-g_0'", ",", "\n", "'f11fVFiaNIw_0'", ",", "\n", "'fAzgoRh2yP0_0'", ",", "\n", "'fHYqnq-VjK8_0'", ",", "\n", "'fJN4flFKqU8_0'", ",", "\n", "'fMR7bO9fQMc_0'", ",", "\n", "'fRaQFA8HOvg_0'", ",", "\n", "'fTDFgcZAPUU_0'", ",", "\n", "'fZ-sAPmffuw_0'", ",", "\n", "'fZ-sAPmffuw_1'", ",", "\n", "'fbPpRBquwU0_0'", ",", "\n", "'fk1SMEpHgyM_0'", ",", "\n", "'fq_rMea3B9s_0'", ",", "\n", "'fq_rMea3B9s_1'", ",", "\n", "'gP7HK4zH1vI_0'", ",", "\n", "'gcoZEf8SRvs_0'", ",", "\n", "'gcoZEf8SRvs_1'", ",", "\n", "'gcoZEf8SRvs_2'", ",", "\n", "'gfVJeD4IIlw_0'", ",", "\n", "'giGciyARCG4_0'", ",", "\n", "'gvErAQRk-nQ_0'", ",", "\n", "'gwIgX3xL4zk_0'", ",", "\n", "'gzy37sBMZlk_0'", ",", "\n", "'h8gWHQQBD9g_0'", ",", "\n", "'hSmgyZ0oy6U_0'", ",", "\n", "'hSmgyZ0oy6U_1'", ",", "\n", "'hTJPyyjLi24_0'", ",", "\n", "'hXTRhpolmkQ_0'", ",", "\n", "'h_64CL5t2y4_0'", ",", "\n", "'hdk-XX3S_tM_0'", ",", "\n", "'hnNJRmj7NFI_0'", ",", "\n", "'hwr9MZnrBRw_0'", ",", "\n", "'i21zdDckboY_0'", ",", "\n", "'i6QcVTVjAjs_0'", ",", "\n", "'iCmWVMcSnh4_0'", ",", "\n", "'iCmWVMcSnh4_1'", ",", "\n", "'iU0dAzhq1GI_0'", ",", "\n", "'ii_w8og8RXg_0'", ",", "\n", "'izh4_B0XmNA_0'", ",", "\n", "'j2-2mjNcxJA_0'", ",", "\n", "'jEtyhipY4d0_0'", ",", "\n", "'jFkgSp701zg_0'", ",", "\n", "'jR59o-HIJjE_0'", ",", "\n", "'jV3zR962zg4_0'", ",", "\n", "'k-0upTJLhDw_0'", ",", "\n", "'k7fWxZG_nr0_0'", ",", "\n", "'k8NKq047jDk_0'", ",", "\n", "'kFk1Okfsv00_0'", ",", "\n", "'kLE7wS8RjhI_0'", ",", "\n", "'kODMnbgJnhY_0'", ",", "\n", "'kPovigNRbNo_0'", ",", "\n", "'kPovigNRbNo_1'", ",", "\n", "'kYdlI6WkjIc_0'", ",", "\n", "'kfSisxelhIA_0'", ",", "\n", "'kjakNVBtscI_0'", ",", "\n", "'kjq9Uhrwgy8_0'", ",", "\n", "'kmWAD0fCAUc_0'", ",", "\n", "'kqVQL2DTzrA_0'", ",", "\n", "'kwbNF-PwnO0_0'", ",", "\n", "'l0H68D1NqyQ_0'", ",", "\n", "'lU8bT96R7nw_0'", ",", "\n", "'l_nUdlgO3-8_0'", ",", "\n", "'laxtGQ7qayc_0'", ",", "\n", "'lnefnJLRsv8_0'", ",", "\n", "'m6lV1lfv7GE_0'", ",", "\n", "'mJuTbvcmd6k_0'", ",", "\n", "'mQdYPE128d0_0'", ",", "\n", "'n5Kc6zOUqTA_0'", ",", "\n", "'nHpL3SlCABM_0'", ",", "\n", "'nQAvmpBuJn0_0'", ",", "\n", "'nSF4Wwfgv00_0'", ",", "\n", "'ncw0BVKIdHI_0'", ",", "\n", "'nyFqvPD4OyE_0'", ",", "\n", "'o1T0yeEntU0_0'", ",", "\n", "'o7bcGRR1UEE_0'", ",", "\n", "'o7bcGRR1UEE_1'", ",", "\n", "'oFFmJZeBgQM_0'", ",", "\n", "'oSvNLf17JmQ_0'", ",", "\n", "'od3E3QIzwe0_0'", ",", "\n", "'oinBYXKdc14_0'", ",", "\n", "'oqHsiHMcWs4_0'", ",", "\n", "'ovOPcZq3U6s_0'", ",", "\n", "'ovOPcZq3U6s_1'", ",", "\n", "'pFqkmzbiF78_0'", ",", "\n", "'pNhXwX7UW1Q_0'", ",", "\n", "'pOHPrcoNraU_0'", ",", "\n", "'poIBw8DkHxI_0'", ",", "\n", "'qacehFLfCxE_0'", ",", "\n", "'qeWQ_UccmwA_0'", ",", "\n", "'r179UQZYkKM_0'", ",", "\n", "'r9CYddJQDDg_0'", ",", "\n", "'rHipntra6do_0'", ",", "\n", "'rIKZtfg3d4k_0'", ",", "\n", "'rIKZtfg3d4k_1'", ",", "\n", "'rIKZtfg3d4k_2'", ",", "\n", "'rNH3Pzt8Qlg_0'", ",", "\n", "'rac0fmoIBtI_0'", ",", "\n", "'rac0fmoIBtI_1'", ",", "\n", "'rdVo1ikBoJA_0'", ",", "\n", "'rh_yH1TWvds_0'", ",", "\n", "'rmuT5bGj3k8_0'", ",", "\n", "'rw00mXyICtw_0'", ",", "\n", "'rwOUiIA73mY_0'", ",", "\n", "'rwOUiIA73mY_1'", ",", "\n", "'s64u9YcHWck_0'", ",", "\n", "'sYvXze9K6r4_0'", ",", "\n", "'t0b4xbXP0qI_0'", ",", "\n", "'tBa7zZXyr-w_0'", ",", "\n", "'tMC9xJlxU9g_0'", ",", "\n", "'tRCSL0Gf_5U_0'", ",", "\n", "'tUC-gVlXPhE_0'", ",", "\n", "'te-LKtIbi9Q_0'", ",", "\n", "'ti0klt7W7GM_0'", ",", "\n", "'tlxGSBruCR8_0'", ",", "\n", "'tlxGSBruCR8_1'", ",", "\n", "'tp2E-Ep_pDg_0'", ",", "\n", "'tv2_ONbSPis_0'", ",", "\n", "'twF79jlTCZU_0'", ",", "\n", "'tyJRdktEY-c_0'", ",", "\n", "'uN-CPT1r4gQ_0'", ",", "\n", "'uVP5RZybJpI_0'", ",", "\n", "'uVjOanE0huc_0'", ",", "\n", "'uVjOanE0huc_1'", ",", "\n", "'ucj68YW8xKQ_0'", ",", "\n", "'ueOjJwCqQ9U_0'", ",", "\n", "'us3OFIQ4os0_0'", ",", "\n", "'vAksZpr6FuA_0'", ",", "\n", "'vDgIdwY9RGA_0'", ",", "\n", "'vQ9dIV-HJT0_0'", ",", "\n", "'vbCFd2ppCgk_0'", ",", "\n", "'vh-k83DtNTQ_0'", ",", "\n", "'vrA63WFr7gk_0'", ",", "\n", "'vxIr9qvzroQ_0'", ",", "\n", "'w-6wN_vsCbA_0'", ",", "\n", "'w-eM3-d3tLM_0'", ",", "\n", "'w04NTNZSpj8_0'", ",", "\n", "'w1RAnmIgBaU_0'", ",", "\n", "'wIXF1OmxzrA_0'", ",", "\n", "'wLOH3ZACIz8_0'", ",", "\n", "'wN4jdoroP9o_0'", ",", "\n", "'wRDRtaxcsQg_0'", ",", "\n", "'wUrEV3FNsJk_0'", ",", "\n", "'wlTb-A_C-2Y_0'", ",", "\n", "'xA2ZIXWuqxY_0'", ",", "\n", "'xFkcP0iqrhQ_0'", ",", "\n", "'xI0y9eav0ME_0'", ",", "\n", "'xRM3n5N0cYc_0'", ",", "\n", "'xUUQmAPnDGI_0'", ",", "\n", "'xhMLKMgaN9w_0'", ",", "\n", "'xmA3NTeiNB4_0'", ",", "\n", "'xyjpLpgrxtA_0'", ",", "\n", "'y-DH0Xn9Bg0_0'", ",", "\n", "'y0soO7I-tjk_0'", ",", "\n", "'yGUg7Qqho9c_0'", ",", "\n", "'yPsZexppduA_0'", ",", "\n", "'yiXgmk43Odw_0'", ",", "\n", "'yiZ3grdDYIo_0'", ",", "\n", "'yz_Hg4vcFPA_0'", ",", "\n", "'z25IhPQry_M_0'", ",", "\n", "'z2BgjH_CtIA_0'", ",", "\n", "'zCLWwZOFSDY_0'", ",", "\n", "'za7pL4OB-_o_0'", ",", "\n", "'zqt_c00WM-Q_0'", ",", "\n", "'zxTw_b64trk_0'", "]", "\n", "\n", "return", "sequence_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.trackingnetdataset.TrackingNetDataset": [[5, 7], ["trackingnetdataset.TrackingNetDatasetClass.get_sequence_list", "trackingnetdataset.TrackingNetDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["def", "TrackingNetDataset", "(", ")", ":", "\n", "    ", "return", "TrackingNetDatasetClass", "(", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.running.run_sequence": [[10, 104], ["print", "numpy.array().astype", "numpy.array().astype", "numpy.zeros", "running.run_sequence.overlap_ratio"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.overlap_ratio"], ["def", "run_sequence", "(", "seq", ":", "Sequence", ",", "tracker", ":", "Tracker", ",", "iterloop", ",", "iou_list", ",", "fps_list", ",", "result", ",", "debug", "=", "False", ",", "visdom_info", "=", "None", ")", ":", "\n", "    ", "\"\"\"Runs a tracker on a sequence.\"\"\"", "\n", "\n", "visdom_info", "=", "{", "}", "if", "visdom_info", "is", "None", "else", "visdom_info", "\n", "\n", "base_results_path", "=", "'{}/{}'", ".", "format", "(", "tracker", ".", "results_dir", ",", "seq", ".", "name", ")", "\n", "if", "seq", ".", "dataset", "==", "'oxuva'", ":", "\n", "        ", "oxuva_results_path", "=", "'{}_{}.csv'", ".", "format", "(", "base_results_path", ",", "seq", ".", "object_ids", "[", "0", "]", ")", "\n", "results_path", "=", "'{}_{}-{}.txt'", ".", "format", "(", "base_results_path", ",", "seq", ".", "object_ids", "[", "0", "]", ",", "str", "(", "iterloop", ")", ")", "\n", "times_path", "=", "'{}_{}_time-{}.txt'", ".", "format", "(", "base_results_path", ",", "seq", ".", "object_ids", "[", "0", "]", ",", "str", "(", "iterloop", ")", ")", "\n", "", "else", ":", "\n", "        ", "results_path", "=", "'{}-{}.txt'", ".", "format", "(", "base_results_path", ",", "str", "(", "iterloop", ")", ")", "\n", "times_path", "=", "'{}_time-{}.txt'", ".", "format", "(", "base_results_path", ",", "str", "(", "iterloop", ")", ")", "\n", "\n", "#if os.path.isfile(results_path) and not debug:", "\n", "#   return", "\n", "\n", "", "print", "(", "'Tracker: {} {} {} ,  Sequence: {}'", ".", "format", "(", "tracker", ".", "name", ",", "tracker", ".", "parameter_name", ",", "tracker", ".", "run_id", ",", "seq", ".", "name", ")", ")", "\n", "\n", "if", "debug", ":", "\n", "        ", "output", "=", "tracker", ".", "run", "(", "seq", ",", "debug", "=", "debug", ",", "visdom_info", "=", "visdom_info", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "results_path", ")", ":", "\n", "                ", "output", "=", "{", "'target_bbox'", ":", "[", "]", ",", "\n", "'time'", ":", "[", "]", "}", "\n", "output", "[", "'target_bbox'", "]", "=", "np", ".", "loadtxt", "(", "results_path", ",", "delimiter", "=", "'\\t'", ",", "dtype", "=", "int", ")", "\n", "output", "[", "'time'", "]", "=", "np", ".", "loadtxt", "(", "times_path", ",", "delimiter", "=", "'\\t'", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "tracker", ".", "run", "(", "seq", ",", "debug", "=", "debug", ",", "visdom_info", "=", "visdom_info", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "return", "\n", "", "", "if", "seq", ".", "dataset", "==", "'oxuva'", ":", "\n", "        ", "PREDICTION_FIELD_NAMES", "=", "[", "\n", "'video'", ",", "'object'", ",", "'frame_num'", ",", "'present'", ",", "'score'", ",", "'xmin'", ",", "'xmax'", ",", "'ymin'", ",", "'ymax'", ",", "\n", "]", "\n", "with", "open", "(", "oxuva_results_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "writer", "=", "csv", ".", "DictWriter", "(", "f", ",", "fieldnames", "=", "PREDICTION_FIELD_NAMES", ")", "\n", "for", "t", ",", "(", "present", ",", "score", ",", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", ")", "in", "enumerate", "(", "zip", "(", "output", "[", "'present'", "]", ",", "output", "[", "'score'", "]", ",", "output", "[", "'xmin'", "]", ",", "output", "[", "'xmax'", "]", ",", "output", "[", "'ymin'", "]", ",", "output", "[", "'ymax'", "]", ")", ")", ":", "\n", "                ", "row", "=", "{", "\n", "'video'", ":", "seq", ".", "name", ",", "\n", "'object'", ":", "seq", ".", "object_ids", "[", "0", "]", ",", "\n", "'frame_num'", ":", "seq", ".", "start_frame_index", "+", "t", ",", "\n", "'present'", ":", "present", ",", "\n", "'score'", ":", "score", ",", "\n", "'xmin'", ":", "xmin", ",", "\n", "'xmax'", ":", "xmax", ",", "\n", "'ymin'", ":", "ymin", ",", "\n", "'ymax'", ":", "ymax", ",", "\n", "}", "\n", "writer", ".", "writerow", "(", "row", ")", "\n", "", "", "", "tracked_bb", "=", "np", ".", "array", "(", "output", "[", "'target_bbox'", "]", ")", ".", "astype", "(", "int", ")", "\n", "exec_times", "=", "np", ".", "array", "(", "output", "[", "'time'", "]", ")", ".", "astype", "(", "float", ")", "\n", "fps_list", "[", "seq", ".", "name", "]", "=", "len", "(", "exec_times", ")", "/", "exec_times", ".", "sum", "(", ")", "\n", "result", "[", "seq", ".", "name", "]", "=", "tracked_bb", "\n", "iou_result", "=", "np", ".", "zeros", "(", "(", "len", "(", "seq", ".", "frames", ")", ",", "1", ")", ")", "\n", "\n", "def", "overlap_ratio", "(", "rect1", ",", "rect2", ")", ":", "\n", "        ", "'''\n        Compute overlap ratio between two rects\n        - rect: 1d array of [x,y,w,h] or\n                2d array of N x [x,y,w,h]\n        '''", "\n", "\n", "if", "rect1", ".", "ndim", "==", "1", ":", "\n", "            ", "rect1", "=", "rect1", "[", "None", ",", ":", "]", "\n", "", "if", "rect2", ".", "ndim", "==", "1", ":", "\n", "            ", "rect2", "=", "rect2", "[", "None", ",", ":", "]", "\n", "\n", "", "left", "=", "np", ".", "maximum", "(", "rect1", "[", ":", ",", "0", "]", ",", "rect2", "[", ":", ",", "0", "]", ")", "\n", "right", "=", "np", ".", "minimum", "(", "rect1", "[", ":", ",", "0", "]", "+", "rect1", "[", ":", ",", "2", "]", ",", "rect2", "[", ":", ",", "0", "]", "+", "rect2", "[", ":", ",", "2", "]", ")", "\n", "top", "=", "np", ".", "maximum", "(", "rect1", "[", ":", ",", "1", "]", ",", "rect2", "[", ":", ",", "1", "]", ")", "\n", "bottom", "=", "np", ".", "minimum", "(", "rect1", "[", ":", ",", "1", "]", "+", "rect1", "[", ":", ",", "3", "]", ",", "rect2", "[", ":", ",", "1", "]", "+", "rect2", "[", ":", ",", "3", "]", ")", "\n", "\n", "intersect", "=", "np", ".", "maximum", "(", "0", ",", "right", "-", "left", ")", "*", "np", ".", "maximum", "(", "0", ",", "bottom", "-", "top", ")", "\n", "union", "=", "rect1", "[", ":", ",", "2", "]", "*", "rect1", "[", ":", ",", "3", "]", "+", "rect2", "[", ":", ",", "2", "]", "*", "rect2", "[", ":", ",", "3", "]", "-", "intersect", "\n", "iou", "=", "np", ".", "clip", "(", "intersect", "/", "union", ",", "0", ",", "1", ")", "\n", "return", "iou", "\n", "\n", "", "iou_result", "=", "overlap_ratio", "(", "seq", ".", "ground_truth_rect", ",", "tracked_bb", ")", "\n", "enable_frameNum", "=", "0.", "\n", "for", "iidx", "in", "range", "(", "len", "(", "iou_result", ")", ")", ":", "\n", "        ", "if", "(", "math", ".", "isnan", "(", "iou_result", "[", "iidx", "]", ")", "==", "False", ")", ":", "\n", "            ", "enable_frameNum", "+=", "1.", "\n", "", "else", ":", "\n", "## gt is not alowed", "\n", "            ", "iou_result", "[", "iidx", "]", "=", "0.", "\n", "\n", "", "", "iou_list", ".", "append", "(", "iou_result", ".", "sum", "(", ")", "/", "enable_frameNum", ")", "\n", "\n", "# print('FPS: {}'.format(len(exec_times) / exec_times.sum()))", "\n", "print", "(", "'{} {} : {} , total mIoU:{}, fps:{}'", ".", "format", "(", "len", "(", "iou_list", ")", ",", "seq", ".", "name", ",", "iou_result", ".", "mean", "(", ")", ",", "sum", "(", "iou_list", ")", "/", "len", "(", "iou_list", ")", ",", "\n", "sum", "(", "fps_list", ".", "values", "(", ")", ")", "/", "len", "(", "fps_list", ")", ")", ")", "\n", "#if not debug:", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.running.run_dataset": [[109, 161], ["print", "print", "range", "print", "print", "print", "print", "len", "len", "dict", "dict", "res_list.append", "numpy.save", "numpy.save", "print", "print", "print", "print", "sum", "len", "multiprocessing.Pool", "pool.starmap", "running.run_sequence", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "str", "str", "itertools.product"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.running.run_sequence"], ["", "def", "run_dataset", "(", "dataset", ",", "trackers", ",", "debug", "=", "False", ",", "threads", "=", "0", ",", "visdom_info", "=", "None", ")", ":", "\n", "    ", "\"\"\"Runs a list of trackers on a dataset.\n    args:\n        dataset: List of Sequence instances, forming a dataset.\n        trackers: List of Tracker instances.\n        debug: Debug level.\n        threads: Number of threads to use (default 0).\n        visdom_info: Dict containing information about the server for visdom\n    \"\"\"", "\n", "print", "(", "'Evaluating {:4d} trackers on {:5d} sequences'", ".", "format", "(", "len", "(", "trackers", ")", ",", "len", "(", "dataset", ")", ")", ")", "\n", "\n", "visdom_info", "=", "{", "}", "if", "visdom_info", "is", "None", "else", "visdom_info", "\n", "\n", "if", "threads", "==", "0", ":", "\n", "        ", "mode", "=", "'sequential'", "\n", "", "else", ":", "\n", "        ", "mode", "=", "'parallel'", "\n", "\n", "", "if", "mode", "==", "'sequential'", ":", "\n", "        ", "mIoU_max", "=", "0.0", "\n", "mIoU_min", "=", "1.0", "\n", "mIoU_avg", "=", "0.0", "\n", "res_list", "=", "[", "]", "\n", "for", "iterloop", "in", "range", "(", "1", ")", ":", "\n", "            ", "iou_list", "=", "[", "]", "\n", "fps_list", "=", "dict", "(", ")", "\n", "result", "=", "dict", "(", ")", "\n", "for", "seq", "in", "dataset", ":", "\n", "                ", "for", "tracker_info", "in", "trackers", ":", "\n", "                    ", "run_sequence", "(", "seq", ",", "tracker_info", ",", "iterloop", ",", "iou_list", ",", "fps_list", ",", "result", ",", "debug", "=", "debug", ",", "visdom_info", "=", "visdom_info", ")", "\n", "", "", "res_list", ".", "append", "(", "sum", "(", "iou_list", ")", "/", "len", "(", "iou_list", ")", ")", "\n", "mIoU_avg", "+=", "sum", "(", "iou_list", ")", "/", "len", "(", "iou_list", ")", "\n", "if", "mIoU_max", "<", "sum", "(", "iou_list", ")", "/", "len", "(", "iou_list", ")", ":", "\n", "                ", "mIoU_max", "=", "sum", "(", "iou_list", ")", "/", "len", "(", "iou_list", ")", "\n", "", "if", "mIoU_min", ">", "sum", "(", "iou_list", ")", "/", "len", "(", "iou_list", ")", ":", "\n", "                ", "mIoU_min", "=", "sum", "(", "iou_list", ")", "/", "len", "(", "iou_list", ")", "\n", "", "np", ".", "save", "(", "str", "(", "iterloop", ")", "+", "'result_bb'", ",", "result", ")", "\n", "np", ".", "save", "(", "str", "(", "iterloop", ")", "+", "'fps'", ",", "fps_list", ")", "\n", "print", "(", "mIoU_max", ")", "\n", "print", "(", "mIoU_min", ")", "\n", "print", "(", "res_list", ")", "\n", "print", "(", "mIoU_avg", "*", "1.0", "/", "(", "iterloop", "+", "1", ")", ")", "\n", "", "mIoU_avg", "/=", "1", "\n", "print", "(", "mIoU_max", ")", "\n", "print", "(", "mIoU_avg", ")", "\n", "print", "(", "mIoU_min", ")", "\n", "print", "(", "res_list", ")", "\n", "", "elif", "mode", "==", "'parallel'", ":", "\n", "        ", "param_list", "=", "[", "(", "seq", ",", "tracker_info", ",", "debug", ",", "visdom_info", ")", "for", "seq", ",", "tracker_info", "in", "product", "(", "dataset", ",", "trackers", ")", "]", "\n", "with", "multiprocessing", ".", "Pool", "(", "processes", "=", "threads", ")", "as", "pool", ":", "\n", "            ", "pool", ".", "starmap", "(", "run_sequence", ",", "param_list", ")", "\n", "", "", "print", "(", "'Done'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tlpdataset.TLPDatasetClass.__init__": [[9, 13], ["pytracking.evaluation.data.BaseDataset.__init__", "tlpdataset.TLPDatasetClass._get_sequence_info_list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._get_sequence_info_list"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "tlp_path", "\n", "self", ".", "sequence_info_list", "=", "self", ".", "_get_sequence_info_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tlpdataset.TLPDatasetClass.get_sequence_list": [[14, 16], ["pytracking.evaluation.data.SequenceList", "tlpdataset.TLPDatasetClass._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_info_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tlpdataset.TLPDatasetClass._construct_sequence": [[17, 37], ["pytracking.utils.load_text.load_text", "pytracking.evaluation.data.Sequence", "str", "range"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.utils.load_text.load_text"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_info", ")", ":", "\n", "        ", "sequence_path", "=", "sequence_info", "[", "'path'", "]", "\n", "nz", "=", "sequence_info", "[", "'nz'", "]", "\n", "ext", "=", "sequence_info", "[", "'ext'", "]", "\n", "start_frame", "=", "sequence_info", "[", "'startFrame'", "]", "\n", "end_frame", "=", "sequence_info", "[", "'endFrame'", "]", "\n", "\n", "init_omit", "=", "0", "\n", "if", "'initOmit'", "in", "sequence_info", ":", "\n", "            ", "init_omit", "=", "sequence_info", "[", "'initOmit'", "]", "\n", "\n", "", "frames", "=", "[", "'{base_path}/{sequence_path}/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "frame", "=", "frame_num", ",", "nz", "=", "nz", ",", "ext", "=", "ext", ")", "for", "frame_num", "in", "range", "(", "start_frame", "+", "init_omit", ",", "end_frame", "+", "1", ")", "]", "\n", "\n", "anno_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_info", "[", "'anno_path'", "]", ")", "\n", "\n", "# NOTE: OTB has some weird annos which panda cannot handle", "\n", "ground_truth_rect", "=", "load_text", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "(", "','", ",", "None", ")", ",", "dtype", "=", "np", ".", "float64", ",", "backend", "=", "'numpy'", ")", "\n", "\n", "return", "Sequence", "(", "sequence_info", "[", "'name'", "]", ",", "frames", ",", "ground_truth_rect", "[", "init_omit", ":", ",", "1", ":", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tlpdataset.TLPDatasetClass.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_info_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tlpdataset.TLPDatasetClass._get_sequence_info_list": [[41, 97], ["None"], "methods", ["None"], ["", "def", "_get_sequence_info_list", "(", "self", ")", ":", "\n", "        ", "sequence_info_list", "=", "[", "\n", "{", "'name'", ":", "'MotorcycleChase'", ",", "'path'", ":", "'MotorcycleChase/img'", ",", "'anno_path'", ":", "'MotorcycleChase/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "5550", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Boxing3'", ",", "'path'", ":", "'Boxing3/img'", ",", "'anno_path'", ":", "'Boxing3/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "19590", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'BreakfastClub'", ",", "'path'", ":", "'BreakfastClub/img'", ",", "'anno_path'", ":", "'BreakfastClub/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "22600", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Hideaway'", ",", "'path'", ":", "'Hideaway/img'", ",", "'anno_path'", ":", "'Hideaway/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "5900", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Boxing2'", ",", "'path'", ":", "'Boxing2/img'", ",", "'anno_path'", ":", "'Boxing2/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "21180", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Mohiniyattam'", ",", "'path'", ":", "'Mohiniyattam/img'", ",", "'anno_path'", ":", "'Mohiniyattam/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "15456", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Drone2'", ",", "'path'", ":", "'Drone2/img'", ",", "'anno_path'", ":", "'Drone2/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "8812", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Alladin'", ",", "'path'", ":", "'Alladin/img'", ",", "'anno_path'", ":", "'Alladin/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "8992", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Puppies1'", ",", "'path'", ":", "'Puppies1/img'", ",", "'anno_path'", ":", "'Puppies1/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "17730", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Badminton2'", ",", "'path'", ":", "'Badminton2/img'", ",", "'anno_path'", ":", "'Badminton2/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "16920", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'ZebraFish'", ",", "'path'", ":", "'ZebraFish/img'", ",", "'anno_path'", ":", "'ZebraFish/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "10920", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'PolarBear2'", ",", "'path'", ":", "'PolarBear2/img'", ",", "'anno_path'", ":", "'PolarBear2/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "27153", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'KinBall1'", ",", "'path'", ":", "'KinBall1/img'", ",", "'anno_path'", ":", "'KinBall1/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "20230", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Dashcam'", ",", "'path'", ":", "'Dashcam/img'", ",", "'anno_path'", ":", "'Dashcam/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "10260", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Jet4'", ",", "'path'", ":", "'Jet4/img'", ",", "'anno_path'", ":", "'Jet4/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "10160", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'IceSkating'", ",", "'path'", ":", "'IceSkating/img'", ",", "'anno_path'", ":", "'IceSkating/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "8125", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Rope'", ",", "'path'", ":", "'Rope/img'", ",", "'anno_path'", ":", "'Rope/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "17503", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'ISS'", ",", "'path'", ":", "'ISS/img'", ",", "'anno_path'", ":", "'ISS/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "28562", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Elephants'", ",", "'path'", ":", "'Elephants/img'", ",", "'anno_path'", ":", "'Elephants/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "4376", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'CarChase1'", ",", "'path'", ":", "'CarChase1/img'", ",", "'anno_path'", ":", "'CarChase1/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "8932", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Jet2'", ",", "'path'", ":", "'Jet2/img'", ",", "'anno_path'", ":", "'Jet2/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "18882", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'KinBall3'", ",", "'path'", ":", "'KinBall3/img'", ",", "'anno_path'", ":", "'KinBall3/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "14940", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Drone1'", ",", "'path'", ":", "'Drone1/img'", ",", "'anno_path'", ":", "'Drone1/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "4320", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Aquarium1'", ",", "'path'", ":", "'Aquarium1/img'", ",", "'anno_path'", ":", "'Aquarium1/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "7337", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Jet1'", ",", "'path'", ":", "'Jet1/img'", ",", "'anno_path'", ":", "'Jet1/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "7403", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Violinist'", ",", "'path'", ":", "'Violinist/img'", ",", "'anno_path'", ":", "'Violinist/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "6844", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'KinBall2'", ",", "'path'", ":", "'KinBall2/img'", ",", "'anno_path'", ":", "'KinBall2/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "13575", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Billiards2'", ",", "'path'", ":", "'Billiards2/img'", ",", "'anno_path'", ":", "'Billiards2/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "20070", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Puppies2'", ",", "'path'", ":", "'Puppies2/img'", ",", "'anno_path'", ":", "'Puppies2/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "22620", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'DriftCar2'", ",", "'path'", ":", "'DriftCar2/img'", ",", "'anno_path'", ":", "'DriftCar2/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "8572", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Lion'", ",", "'path'", ":", "'Lion/img'", ",", "'anno_path'", ":", "'Lion/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "6570", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Billiards1'", ",", "'path'", ":", "'Billiards1/img'", ",", "'anno_path'", ":", "'Billiards1/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "20375", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Jet3'", ",", "'path'", ":", "'Jet3/img'", ",", "'anno_path'", ":", "'Jet3/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "17953", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Bike'", ",", "'path'", ":", "'Bike/img'", ",", "'anno_path'", ":", "'Bike/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "4196", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Helicopter'", ",", "'path'", ":", "'Helicopter/img'", ",", "'anno_path'", ":", "'Helicopter/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "17053", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Parakeet'", ",", "'path'", ":", "'Parakeet/img'", ",", "'anno_path'", ":", "'Parakeet/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "21609", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Badminton1'", ",", "'path'", ":", "'Badminton1/img'", ",", "'anno_path'", ":", "'Badminton1/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "15240", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'PolarBear1'", ",", "'path'", ":", "'PolarBear1/img'", ",", "'anno_path'", ":", "'PolarBear1/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "9501", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'CarChase2'", ",", "'path'", ":", "'CarChase2/img'", ",", "'anno_path'", ":", "'CarChase2/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "14010", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Basketball'", ",", "'path'", ":", "'Basketball/img'", ",", "'anno_path'", ":", "'Basketball/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "17970", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Aquarium2'", ",", "'path'", ":", "'Aquarium2/img'", ",", "'anno_path'", ":", "'Aquarium2/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "8182", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Boxing1'", ",", "'path'", ":", "'Boxing1/img'", ",", "'anno_path'", ":", "'Boxing1/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "20670", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Sam'", ",", "'path'", ":", "'Sam/img'", ",", "'anno_path'", ":", "'Sam/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "4628", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'CarChase3'", ",", "'path'", ":", "'CarChase3/img'", ",", "'anno_path'", ":", "'CarChase3/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "22860", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Boat'", ",", "'path'", ":", "'Boat/img'", ",", "'anno_path'", ":", "'Boat/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "6234", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'DriftCar1'", ",", "'path'", ":", "'DriftCar1/img'", ",", "'anno_path'", ":", "'DriftCar1/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "10130", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Drone3'", ",", "'path'", ":", "'Drone3/img'", ",", "'anno_path'", ":", "'Drone3/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "6594", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Jet5'", ",", "'path'", ":", "'Jet5/img'", ",", "'anno_path'", ":", "'Jet5/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "13675", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'PolarBear3'", ",", "'path'", ":", "'PolarBear3/img'", ",", "'anno_path'", ":", "'PolarBear3/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "9531", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "{", "'name'", ":", "'Bharatanatyam'", ",", "'path'", ":", "'Bharatanatyam/img'", ",", "'anno_path'", ":", "'Bharatanatyam/groundtruth_rect.txt'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "15936", ",", "'nz'", ":", "5", ",", "'ext'", ":", "'jpg'", "}", ",", "\n", "\n", "]", "\n", "\n", "return", "sequence_info_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tlpdataset.TLPDataset": [[5, 7], ["tlpdataset.TLPDatasetClass.get_sequence_list", "tlpdataset.TLPDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["def", "TLPDataset", "(", ")", ":", "\n", "    ", "return", "TLPDatasetClass", "(", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.otbdataset.OTBDatasetClass.__init__": [[21, 25], ["pytracking.evaluation.data.BaseDataset.__init__", "otbdataset.OTBDatasetClass._get_sequence_info_list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._get_sequence_info_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "otb_path", "\n", "self", ".", "sequence_info_list", "=", "self", ".", "_get_sequence_info_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.otbdataset.OTBDatasetClass.get_sequence_list": [[26, 28], ["pytracking.evaluation.data.SequenceList", "otbdataset.OTBDatasetClass._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_info_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.otbdataset.OTBDatasetClass._construct_sequence": [[29, 65], ["isinstance", "pytracking.evaluation.data.Sequence", "isinstance", "numpy.loadtxt", "os.path.isfile", "Exception", "range", "str", "numpy.loadtxt", "str"], "methods", ["None"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_info", ")", ":", "\n", "        ", "sequence_path", "=", "sequence_info", "[", "'path'", "]", "\n", "nz", "=", "sequence_info", "[", "'nz'", "]", "\n", "ext", "=", "sequence_info", "[", "'ext'", "]", "\n", "start_frame", "=", "sequence_info", "[", "'startFrame'", "]", "\n", "end_frame", "=", "sequence_info", "[", "'endFrame'", "]", "\n", "\n", "init_omit", "=", "0", "\n", "if", "'initOmit'", "in", "sequence_info", ":", "\n", "            ", "init_omit", "=", "sequence_info", "[", "'initOmit'", "]", "\n", "\n", "", "if", "isinstance", "(", "ext", ",", "list", ")", ":", "\n", "            ", "for", "e", "in", "ext", ":", "\n", "                ", "first_frame_path", "=", "'{base_path}/{sequence_path}/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "\n", "frame", "=", "start_frame", "+", "init_omit", ",", "\n", "nz", "=", "nz", ",", "\n", "ext", "=", "e", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "first_frame_path", ")", ":", "\n", "                    ", "ext", "=", "e", "\n", "break", "\n", "\n", "", "", "if", "isinstance", "(", "ext", ",", "list", ")", ":", "\n", "                ", "raise", "Exception", "(", "'Sequence {} not found'", ".", "format", "(", "sequence_info", "[", "'name'", "]", ")", ")", "\n", "\n", "", "", "frames", "=", "[", "'{base_path}/{sequence_path}/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "frame", "=", "frame_num", ",", "nz", "=", "nz", ",", "ext", "=", "ext", ")", "for", "frame_num", "in", "range", "(", "start_frame", "+", "init_omit", ",", "end_frame", "+", "1", ")", "]", "\n", "\n", "anno_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_info", "[", "'anno_path'", "]", ")", "\n", "\n", "try", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "except", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "return", "Sequence", "(", "sequence_info", "[", "'name'", "]", ",", "frames", ",", "ground_truth_rect", "[", "init_omit", ":", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.otbdataset.OTBDatasetClass.__len__": [[66, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'''Overload this function in your evaluation. This should return number of sequences in the evaluation '''", "\n", "return", "len", "(", "self", ".", "sequence_info_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.otbdataset.OTBDatasetClass._get_sequence_info_list": [[71, 177], ["None"], "methods", ["None"], ["", "def", "_get_sequence_info_list", "(", "self", ")", ":", "\n", "        ", "sequence_info_list", "=", "[", "\n", "{", "\"name\"", ":", "\"Basketball\"", ",", "\"path\"", ":", "\"Basketball/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "725", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Basketball/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Biker\"", ",", "\"path\"", ":", "\"Biker/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "142", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Biker/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Bird1\"", ",", "\"path\"", ":", "\"Bird1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "408", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Bird1/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Bird2\"", ",", "\"path\"", ":", "\"Bird2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "99", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Bird2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurBody\"", ",", "\"path\"", ":", "\"BlurBody/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "334", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurBody/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurCar1\"", ",", "\"path\"", ":", "\"BlurCar1/img\"", ",", "\"startFrame\"", ":", "247", ",", "\"endFrame\"", ":", "988", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurCar1/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurCar2\"", ",", "\"path\"", ":", "\"BlurCar2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "585", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurCar2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurCar3\"", ",", "\"path\"", ":", "\"BlurCar3/img\"", ",", "\"startFrame\"", ":", "3", ",", "\"endFrame\"", ":", "359", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurCar3/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurCar4\"", ",", "\"path\"", ":", "\"BlurCar4/img\"", ",", "\"startFrame\"", ":", "18", ",", "\"endFrame\"", ":", "397", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurCar4/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurFace\"", ",", "\"path\"", ":", "\"BlurFace/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "493", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurFace/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"BlurOwl\"", ",", "\"path\"", ":", "\"BlurOwl/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "631", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"BlurOwl/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Board\"", ",", "\"path\"", ":", "\"Board/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "698", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Board/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Bolt\"", ",", "\"path\"", ":", "\"Bolt/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "350", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Bolt/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Bolt2\"", ",", "\"path\"", ":", "\"Bolt2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "293", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Bolt2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Box\"", ",", "\"path\"", ":", "\"Box/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1161", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Box/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Boy\"", ",", "\"path\"", ":", "\"Boy/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "602", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Boy/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Car1\"", ",", "\"path\"", ":", "\"Car1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1020", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Car1/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Car2\"", ",", "\"path\"", ":", "\"Car2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "913", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Car2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Car24\"", ",", "\"path\"", ":", "\"Car24/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "3059", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Car24/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Car4\"", ",", "\"path\"", ":", "\"Car4/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "659", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Car4/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"CarDark\"", ",", "\"path\"", ":", "\"CarDark/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "393", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"CarDark/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"CarScale\"", ",", "\"path\"", ":", "\"CarScale/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "252", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"CarScale/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"ClifBar\"", ",", "\"path\"", ":", "\"ClifBar/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "472", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"ClifBar/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Coke\"", ",", "\"path\"", ":", "\"Coke/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "291", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Coke/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Couple\"", ",", "\"path\"", ":", "\"Couple/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "140", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Couple/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Coupon\"", ",", "\"path\"", ":", "\"Coupon/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "327", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Coupon/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Crossing\"", ",", "\"path\"", ":", "\"Crossing/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "120", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Crossing/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Crowds\"", ",", "\"path\"", ":", "\"Crowds/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "347", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Crowds/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Dancer\"", ",", "\"path\"", ":", "\"Dancer/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "225", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Dancer/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Dancer2\"", ",", "\"path\"", ":", "\"Dancer2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "150", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Dancer2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"David\"", ",", "\"path\"", ":", "\"David/img\"", ",", "\"startFrame\"", ":", "300", ",", "\"endFrame\"", ":", "770", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"David/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"David2\"", ",", "\"path\"", ":", "\"David2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "537", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"David2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"David3\"", ",", "\"path\"", ":", "\"David3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "252", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"David3/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Deer\"", ",", "\"path\"", ":", "\"Deer/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "71", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Deer/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Diving\"", ",", "\"path\"", ":", "\"Diving/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "215", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Diving/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Dog\"", ",", "\"path\"", ":", "\"Dog/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "127", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Dog/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Dog1\"", ",", "\"path\"", ":", "\"Dog1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1350", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Dog1/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Doll\"", ",", "\"path\"", ":", "\"Doll/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "3872", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Doll/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"DragonBaby\"", ",", "\"path\"", ":", "\"DragonBaby/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "113", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"DragonBaby/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Dudek\"", ",", "\"path\"", ":", "\"Dudek/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1145", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Dudek/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"FaceOcc1\"", ",", "\"path\"", ":", "\"FaceOcc1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "892", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"FaceOcc1/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"FaceOcc2\"", ",", "\"path\"", ":", "\"FaceOcc2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "812", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"FaceOcc2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Fish\"", ",", "\"path\"", ":", "\"Fish/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "476", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Fish/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"FleetFace\"", ",", "\"path\"", ":", "\"FleetFace/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "707", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"FleetFace/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Football\"", ",", "\"path\"", ":", "\"Football/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "362", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Football/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Football1\"", ",", "\"path\"", ":", "\"Football1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "74", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Football1/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Freeman1\"", ",", "\"path\"", ":", "\"Freeman1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "326", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Freeman1/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Freeman3\"", ",", "\"path\"", ":", "\"Freeman3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "460", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Freeman3/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Freeman4\"", ",", "\"path\"", ":", "\"Freeman4/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "283", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Freeman4/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Girl\"", ",", "\"path\"", ":", "\"Girl/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "500", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Girl/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Girl2\"", ",", "\"path\"", ":", "\"Girl2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1500", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Girl2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Gym\"", ",", "\"path\"", ":", "\"Gym/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "767", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Gym/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human2\"", ",", "\"path\"", ":", "\"Human2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1128", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human3\"", ",", "\"path\"", ":", "\"Human3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1698", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human3/groundtruth_rect.txt\"", "}", ",", "\n", "# {\"name\": \"Human4_2\", \"path\": \"Human4/img\", \"startFrame\": 1, \"endFrame\": 667, \"nz\": 4, \"ext\": \"jpg\", \"anno_path\": \"Human4/groundtruth_rect.2.txt\"},", "\n", "{", "\"name\"", ":", "\"Human4\"", ",", "\"path\"", ":", "\"Human4/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "667", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human4/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human5\"", ",", "\"path\"", ":", "\"Human5/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "713", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human5/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human6\"", ",", "\"path\"", ":", "\"Human6/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "792", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human6/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human7\"", ",", "\"path\"", ":", "\"Human7/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "250", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human7/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human8\"", ",", "\"path\"", ":", "\"Human8/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "128", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human8/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Human9\"", ",", "\"path\"", ":", "\"Human9/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "305", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Human9/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Ironman\"", ",", "\"path\"", ":", "\"Ironman/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "166", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Ironman/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Jogging_1\"", ",", "\"path\"", ":", "\"Jogging/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "307", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Jogging/groundtruth_rect.1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Jogging_2\"", ",", "\"path\"", ":", "\"Jogging/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "307", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Jogging/groundtruth_rect.2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Jump\"", ",", "\"path\"", ":", "\"Jump/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "122", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Jump/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Jumping\"", ",", "\"path\"", ":", "\"Jumping/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "313", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Jumping/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"KiteSurf\"", ",", "\"path\"", ":", "\"KiteSurf/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "84", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "[", "\"png\"", ",", "\"jpg\"", "]", ",", "\"anno_path\"", ":", "\"KiteSurf/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Lemming\"", ",", "\"path\"", ":", "\"Lemming/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1336", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Lemming/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Liquor\"", ",", "\"path\"", ":", "\"Liquor/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1741", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Liquor/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Man\"", ",", "\"path\"", ":", "\"Man/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "134", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Man/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Matrix\"", ",", "\"path\"", ":", "\"Matrix/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "100", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Matrix/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Mhyang\"", ",", "\"path\"", ":", "\"Mhyang/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1490", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Mhyang/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"MotorRolling\"", ",", "\"path\"", ":", "\"MotorRolling/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "164", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"MotorRolling/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"MountainBike\"", ",", "\"path\"", ":", "\"MountainBike/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "228", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"MountainBike/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Panda\"", ",", "\"path\"", ":", "\"Panda/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1000", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Panda/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"RedTeam\"", ",", "\"path\"", ":", "\"RedTeam/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1918", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"RedTeam/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Rubik\"", ",", "\"path\"", ":", "\"Rubik/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1997", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Rubik/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Shaking\"", ",", "\"path\"", ":", "\"Shaking/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "365", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Shaking/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Singer1\"", ",", "\"path\"", ":", "\"Singer1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "351", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Singer1/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Singer2\"", ",", "\"path\"", ":", "\"Singer2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "366", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Singer2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Skater\"", ",", "\"path\"", ":", "\"Skater/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "160", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Skater/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Skater2\"", ",", "\"path\"", ":", "\"Skater2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "435", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Skater2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Skating1\"", ",", "\"path\"", ":", "\"Skating1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "400", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Skating1/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Skating2_1\"", ",", "\"path\"", ":", "\"Skating2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "473", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Skating2/groundtruth_rect.1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Skating2_2\"", ",", "\"path\"", ":", "\"Skating2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "473", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Skating2/groundtruth_rect.2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Skiing\"", ",", "\"path\"", ":", "\"Skiing/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "81", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Skiing/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Soccer\"", ",", "\"path\"", ":", "\"Soccer/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "392", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Soccer/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Subway\"", ",", "\"path\"", ":", "\"Subway/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "175", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Subway/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Surfer\"", ",", "\"path\"", ":", "\"Surfer/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "376", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Surfer/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Suv\"", ",", "\"path\"", ":", "\"Suv/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "945", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Suv/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Sylvester\"", ",", "\"path\"", ":", "\"Sylvester/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1345", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Sylvester/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Tiger1\"", ",", "\"path\"", ":", "\"Tiger1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "354", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Tiger1/groundtruth_rect.txt\"", ",", "\"initOmit\"", ":", "5", "}", ",", "\n", "{", "\"name\"", ":", "\"Tiger2\"", ",", "\"path\"", ":", "\"Tiger2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "365", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Tiger2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Toy\"", ",", "\"path\"", ":", "\"Toy/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "271", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Toy/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Trans\"", ",", "\"path\"", ":", "\"Trans/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "124", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Trans/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Trellis\"", ",", "\"path\"", ":", "\"Trellis/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "569", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Trellis/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Twinnings\"", ",", "\"path\"", ":", "\"Twinnings/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "472", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Twinnings/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Vase\"", ",", "\"path\"", ":", "\"Vase/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "271", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Vase/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Walking\"", ",", "\"path\"", ":", "\"Walking/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "412", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Walking/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Walking2\"", ",", "\"path\"", ":", "\"Walking2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "500", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Walking2/groundtruth_rect.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"Woman\"", ",", "\"path\"", ":", "\"Woman/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "597", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"Woman/groundtruth_rect.txt\"", "}", "\n", "]", "\n", "\n", "return", "sequence_info_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.otbdataset.OTBDataset": [[6, 8], ["otbdataset.OTBDatasetClass.get_sequence_list", "otbdataset.OTBDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["def", "OTBDataset", "(", ")", ":", "\n", "    ", "return", "OTBDatasetClass", "(", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.nfsdataset.NFSDatasetClass.__init__": [[20, 24], ["pytracking.evaluation.data.BaseDataset.__init__", "nfsdataset.NFSDatasetClass._get_sequence_info_list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._get_sequence_info_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "nfs_path", "\n", "self", ".", "sequence_info_list", "=", "self", ".", "_get_sequence_info_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.nfsdataset.NFSDatasetClass.get_sequence_list": [[25, 27], ["pytracking.evaluation.data.SequenceList", "nfsdataset.NFSDatasetClass._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_info_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.nfsdataset.NFSDatasetClass._construct_sequence": [[28, 50], ["pytracking.evaluation.data.Sequence", "numpy.loadtxt", "range", "str", "numpy.loadtxt", "str"], "methods", ["None"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_info", ")", ":", "\n", "        ", "sequence_path", "=", "sequence_info", "[", "'path'", "]", "\n", "nz", "=", "sequence_info", "[", "'nz'", "]", "\n", "ext", "=", "sequence_info", "[", "'ext'", "]", "\n", "start_frame", "=", "sequence_info", "[", "'startFrame'", "]", "\n", "end_frame", "=", "sequence_info", "[", "'endFrame'", "]", "\n", "\n", "init_omit", "=", "0", "\n", "if", "'initOmit'", "in", "sequence_info", ":", "\n", "            ", "init_omit", "=", "sequence_info", "[", "'initOmit'", "]", "\n", "\n", "", "frames", "=", "[", "'{base_path}/{sequence_path}/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "frame", "=", "frame_num", ",", "nz", "=", "nz", ",", "ext", "=", "ext", ")", "for", "frame_num", "in", "range", "(", "start_frame", "+", "init_omit", ",", "end_frame", "+", "1", ")", "]", "\n", "\n", "anno_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_info", "[", "'anno_path'", "]", ")", "\n", "\n", "try", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "except", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "return", "Sequence", "(", "sequence_info", "[", "'name'", "]", ",", "frames", ",", "ground_truth_rect", "[", "init_omit", ":", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.nfsdataset.NFSDatasetClass.__len__": [[51, 54], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'''Overload this function in your evaluation. This should return number of sequences in the evaluation '''", "\n", "return", "len", "(", "self", ".", "sequence_info_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.nfsdataset.NFSDatasetClass._get_sequence_info_list": [[55, 160], ["None"], "methods", ["None"], ["", "def", "_get_sequence_info_list", "(", "self", ")", ":", "\n", "        ", "sequence_info_list", "=", "[", "\n", "{", "\"name\"", ":", "\"nfs_Gymnastics\"", ",", "\"path\"", ":", "\"sequences/Gymnastics\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "368", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_Gymnastics.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_MachLoop_jet\"", ",", "\"path\"", ":", "\"sequences/MachLoop_jet\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "99", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_MachLoop_jet.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_Skiing_red\"", ",", "\"path\"", ":", "\"sequences/Skiing_red\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "69", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_Skiing_red.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_Skydiving\"", ",", "\"path\"", ":", "\"sequences/Skydiving\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "196", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_Skydiving.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_airboard_1\"", ",", "\"path\"", ":", "\"sequences/airboard_1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "425", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_airboard_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_airplane_landing\"", ",", "\"path\"", ":", "\"sequences/airplane_landing\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "81", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_airplane_landing.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_airtable_3\"", ",", "\"path\"", ":", "\"sequences/airtable_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "482", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_airtable_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_1\"", ",", "\"path\"", ":", "\"sequences/basketball_1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "282", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_2\"", ",", "\"path\"", ":", "\"sequences/basketball_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "102", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_3\"", ",", "\"path\"", ":", "\"sequences/basketball_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "421", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_6\"", ",", "\"path\"", ":", "\"sequences/basketball_6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "224", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_6.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_7\"", ",", "\"path\"", ":", "\"sequences/basketball_7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "240", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_7.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_player\"", ",", "\"path\"", ":", "\"sequences/basketball_player\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "369", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_player.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_basketball_player_2\"", ",", "\"path\"", ":", "\"sequences/basketball_player_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "437", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_basketball_player_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_beach_flipback_person\"", ",", "\"path\"", ":", "\"sequences/beach_flipback_person\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "61", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_beach_flipback_person.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bee\"", ",", "\"path\"", ":", "\"sequences/bee\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "45", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bee.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_biker_acrobat\"", ",", "\"path\"", ":", "\"sequences/biker_acrobat\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "128", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_biker_acrobat.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_biker_all_1\"", ",", "\"path\"", ":", "\"sequences/biker_all_1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "113", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_biker_all_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_biker_head_2\"", ",", "\"path\"", ":", "\"sequences/biker_head_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "132", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_biker_head_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_biker_head_3\"", ",", "\"path\"", ":", "\"sequences/biker_head_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "254", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_biker_head_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_biker_upper_body\"", ",", "\"path\"", ":", "\"sequences/biker_upper_body\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "194", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_biker_upper_body.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_biker_whole_body\"", ",", "\"path\"", ":", "\"sequences/biker_whole_body\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "572", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_biker_whole_body.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_billiard_2\"", ",", "\"path\"", ":", "\"sequences/billiard_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "604", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_billiard_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_billiard_3\"", ",", "\"path\"", ":", "\"sequences/billiard_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "698", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_billiard_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_billiard_6\"", ",", "\"path\"", ":", "\"sequences/billiard_6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "771", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_billiard_6.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_billiard_7\"", ",", "\"path\"", ":", "\"sequences/billiard_7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "724", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_billiard_7.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_billiard_8\"", ",", "\"path\"", ":", "\"sequences/billiard_8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "778", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_billiard_8.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bird_2\"", ",", "\"path\"", ":", "\"sequences/bird_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "476", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bird_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_book\"", ",", "\"path\"", ":", "\"sequences/book\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "288", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_book.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bottle\"", ",", "\"path\"", ":", "\"sequences/bottle\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "2103", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bottle.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bowling_1\"", ",", "\"path\"", ":", "\"sequences/bowling_1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "303", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bowling_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bowling_2\"", ",", "\"path\"", ":", "\"sequences/bowling_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "710", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bowling_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bowling_3\"", ",", "\"path\"", ":", "\"sequences/bowling_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "271", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bowling_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bowling_6\"", ",", "\"path\"", ":", "\"sequences/bowling_6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "260", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bowling_6.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bowling_ball\"", ",", "\"path\"", ":", "\"sequences/bowling_ball\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "275", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bowling_ball.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_bunny\"", ",", "\"path\"", ":", "\"sequences/bunny\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "705", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_bunny.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car\"", ",", "\"path\"", ":", "\"sequences/car\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "2020", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_camaro\"", ",", "\"path\"", ":", "\"sequences/car_camaro\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "36", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_camaro.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_drifting\"", ",", "\"path\"", ":", "\"sequences/car_drifting\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "173", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_drifting.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_jumping\"", ",", "\"path\"", ":", "\"sequences/car_jumping\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "22", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_jumping.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_rc_rolling\"", ",", "\"path\"", ":", "\"sequences/car_rc_rolling\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "62", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_rc_rolling.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_rc_rotating\"", ",", "\"path\"", ":", "\"sequences/car_rc_rotating\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "80", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_rc_rotating.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_side\"", ",", "\"path\"", ":", "\"sequences/car_side\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "108", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_side.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_car_white\"", ",", "\"path\"", ":", "\"sequences/car_white\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "2063", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_car_white.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_cheetah\"", ",", "\"path\"", ":", "\"sequences/cheetah\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "167", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_cheetah.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_cup\"", ",", "\"path\"", ":", "\"sequences/cup\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1281", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_cup.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_cup_2\"", ",", "\"path\"", ":", "\"sequences/cup_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "182", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_cup_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_dog\"", ",", "\"path\"", ":", "\"sequences/dog\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1030", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_dog.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_dog_1\"", ",", "\"path\"", ":", "\"sequences/dog_1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "168", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_dog_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_dog_2\"", ",", "\"path\"", ":", "\"sequences/dog_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "594", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_dog_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_dog_3\"", ",", "\"path\"", ":", "\"sequences/dog_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "200", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_dog_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_dogs\"", ",", "\"path\"", ":", "\"sequences/dogs\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "198", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_dogs.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_dollar\"", ",", "\"path\"", ":", "\"sequences/dollar\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1426", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_dollar.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_drone\"", ",", "\"path\"", ":", "\"sequences/drone\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "70", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_drone.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_ducks_lake\"", ",", "\"path\"", ":", "\"sequences/ducks_lake\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "107", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_ducks_lake.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_exit\"", ",", "\"path\"", ":", "\"sequences/exit\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "359", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_exit.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_first\"", ",", "\"path\"", ":", "\"sequences/first\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "435", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_first.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_flower\"", ",", "\"path\"", ":", "\"sequences/flower\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "448", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_flower.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_footbal_skill\"", ",", "\"path\"", ":", "\"sequences/footbal_skill\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "131", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_footbal_skill.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_helicopter\"", ",", "\"path\"", ":", "\"sequences/helicopter\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "310", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_helicopter.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_horse_jumping\"", ",", "\"path\"", ":", "\"sequences/horse_jumping\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "117", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_horse_jumping.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_horse_running\"", ",", "\"path\"", ":", "\"sequences/horse_running\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "139", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_horse_running.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_iceskating_6\"", ",", "\"path\"", ":", "\"sequences/iceskating_6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "603", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_iceskating_6.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_jellyfish_5\"", ",", "\"path\"", ":", "\"sequences/jellyfish_5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "746", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_jellyfish_5.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_kid_swing\"", ",", "\"path\"", ":", "\"sequences/kid_swing\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "169", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_kid_swing.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_motorcross\"", ",", "\"path\"", ":", "\"sequences/motorcross\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "39", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_motorcross.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_motorcross_kawasaki\"", ",", "\"path\"", ":", "\"sequences/motorcross_kawasaki\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "65", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_motorcross_kawasaki.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_parkour\"", ",", "\"path\"", ":", "\"sequences/parkour\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "58", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_parkour.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_person_scooter\"", ",", "\"path\"", ":", "\"sequences/person_scooter\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "413", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_person_scooter.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_pingpong_2\"", ",", "\"path\"", ":", "\"sequences/pingpong_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1277", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_pingpong_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_pingpong_7\"", ",", "\"path\"", ":", "\"sequences/pingpong_7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1290", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_pingpong_7.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_pingpong_8\"", ",", "\"path\"", ":", "\"sequences/pingpong_8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "296", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_pingpong_8.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_purse\"", ",", "\"path\"", ":", "\"sequences/purse\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "968", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_purse.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_rubber\"", ",", "\"path\"", ":", "\"sequences/rubber\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1328", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_rubber.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_running\"", ",", "\"path\"", ":", "\"sequences/running\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "677", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_running.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_running_100_m\"", ",", "\"path\"", ":", "\"sequences/running_100_m\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "313", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_running_100_m.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_running_100_m_2\"", ",", "\"path\"", ":", "\"sequences/running_100_m_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "337", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_running_100_m_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_running_2\"", ",", "\"path\"", ":", "\"sequences/running_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "363", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_running_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffleboard_1\"", ",", "\"path\"", ":", "\"sequences/shuffleboard_1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "42", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffleboard_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffleboard_2\"", ",", "\"path\"", ":", "\"sequences/shuffleboard_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "41", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffleboard_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffleboard_4\"", ",", "\"path\"", ":", "\"sequences/shuffleboard_4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "62", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffleboard_4.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffleboard_5\"", ",", "\"path\"", ":", "\"sequences/shuffleboard_5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "32", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffleboard_5.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffleboard_6\"", ",", "\"path\"", ":", "\"sequences/shuffleboard_6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "52", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffleboard_6.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffletable_2\"", ",", "\"path\"", ":", "\"sequences/shuffletable_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "372", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffletable_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffletable_3\"", ",", "\"path\"", ":", "\"sequences/shuffletable_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "368", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffletable_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_shuffletable_4\"", ",", "\"path\"", ":", "\"sequences/shuffletable_4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "101", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_shuffletable_4.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_ski_long\"", ",", "\"path\"", ":", "\"sequences/ski_long\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "274", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_ski_long.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_soccer_ball\"", ",", "\"path\"", ":", "\"sequences/soccer_ball\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "163", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_soccer_ball.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_soccer_ball_2\"", ",", "\"path\"", ":", "\"sequences/soccer_ball_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1934", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_soccer_ball_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_soccer_ball_3\"", ",", "\"path\"", ":", "\"sequences/soccer_ball_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1381", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_soccer_ball_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_soccer_player_2\"", ",", "\"path\"", ":", "\"sequences/soccer_player_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "475", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_soccer_player_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_soccer_player_3\"", ",", "\"path\"", ":", "\"sequences/soccer_player_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "319", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_soccer_player_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_stop_sign\"", ",", "\"path\"", ":", "\"sequences/stop_sign\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "302", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_stop_sign.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_suv\"", ",", "\"path\"", ":", "\"sequences/suv\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "2584", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_suv.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_tiger\"", ",", "\"path\"", ":", "\"sequences/tiger\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1556", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_tiger.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_walking\"", ",", "\"path\"", ":", "\"sequences/walking\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "555", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_walking.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_walking_3\"", ",", "\"path\"", ":", "\"sequences/walking_3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1427", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_walking_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_water_ski_2\"", ",", "\"path\"", ":", "\"sequences/water_ski_2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "47", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_water_ski_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_yoyo\"", ",", "\"path\"", ":", "\"sequences/yoyo\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "67", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_yoyo.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"nfs_zebra_fish\"", ",", "\"path\"", ":", "\"sequences/zebra_fish\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "671", ",", "\"nz\"", ":", "5", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/nfs_zebra_fish.txt\"", "}", ",", "\n", "]", "\n", "\n", "return", "sequence_info_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.nfsdataset.NFSDataset": [[5, 7], ["nfsdataset.NFSDatasetClass.get_sequence_list", "nfsdataset.NFSDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["def", "NFSDataset", "(", ")", ":", "\n", "    ", "return", "NFSDatasetClass", "(", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.BaseDataset.__init__": [[6, 8], ["pytracking.evaluation.environment.env_settings"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "env_settings", "=", "env_settings", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.BaseDataset.__len__": [[9, 12], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Overload this function in your dataset. This should return number of sequences in the dataset.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.BaseDataset.get_sequence_list": [[13, 16], ["None"], "methods", ["None"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "\"\"\"Overload this in your dataset. Should return the list of sequences in the dataset.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.Sequence.__init__": [[20, 27], ["int", "[].split", "data.Sequence.frames[].split"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "frames", ",", "ground_truth_rect", ",", "dataset", "=", "None", ",", "object_ids", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "frames", "=", "frames", "\n", "self", ".", "ground_truth_rect", "=", "ground_truth_rect", "\n", "self", ".", "object_ids", "=", "object_ids", "\n", "self", ".", "start_frame_index", "=", "int", "(", "self", ".", "frames", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.Sequence.init_info": [[28, 30], ["data.Sequence.get"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.model_constructor.NetConstructor.get"], ["", "def", "init_info", "(", "self", ")", ":", "\n", "        ", "return", "{", "key", ":", "self", ".", "get", "(", "key", ")", "for", "key", "in", "[", "'init_bbox'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.Sequence.init_bbox": [[31, 33], ["list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["", "def", "init_bbox", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "ground_truth_rect", "[", "0", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.Sequence.get": [[34, 36], ["getattr"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "name", ")", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.__getitem__": [[41, 53], ["isinstance", "IndexError", "isinstance", "list.__getitem__", "isinstance", "data.SequenceList", "data.SequenceList", "list.__getitem__", "list.__getitem__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler.__getitem__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler.__getitem__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler.__getitem__"], ["def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "            ", "for", "seq", "in", "self", ":", "\n", "                ", "if", "seq", ".", "name", "==", "item", ":", "\n", "                    ", "return", "seq", "\n", "", "", "raise", "IndexError", "(", "'Sequence name not in the dataset.'", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "return", "super", "(", "SequenceList", ",", "self", ")", ".", "__getitem__", "(", "item", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "return", "SequenceList", "(", "[", "super", "(", "SequenceList", ",", "self", ")", ".", "__getitem__", "(", "i", ")", "for", "i", "in", "item", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "SequenceList", "(", "super", "(", "SequenceList", ",", "self", ")", ".", "__getitem__", "(", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.__add__": [[54, 56], ["data.SequenceList", "list.__add__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.__add__"], ["", "", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "SequenceList", "(", "super", "(", "SequenceList", ",", "self", ")", ".", "__add__", "(", "other", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy": [[57, 59], ["data.SequenceList", "super().copy"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "super", "(", "SequenceList", ",", "self", ")", ".", "copy", "(", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uav10fpsdataset.UAV10fpsDatasetClass.__init__": [[20, 24], ["pytracking.evaluation.data.BaseDataset.__init__", "uav10fpsdataset.UAV10fpsDatasetClass._get_sequence_info_list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._get_sequence_info_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "uav_path", "\n", "self", ".", "sequence_info_list", "=", "self", ".", "_get_sequence_info_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uav10fpsdataset.UAV10fpsDatasetClass.get_sequence_list": [[25, 27], ["pytracking.evaluation.data.SequenceList", "uav10fpsdataset.UAV10fpsDatasetClass._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_info_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uav10fpsdataset.UAV10fpsDatasetClass._construct_sequence": [[28, 50], ["pytracking.evaluation.data.Sequence", "numpy.loadtxt", "range", "str", "numpy.loadtxt", "str"], "methods", ["None"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_info", ")", ":", "\n", "        ", "sequence_path", "=", "sequence_info", "[", "'path'", "]", "\n", "nz", "=", "sequence_info", "[", "'nz'", "]", "\n", "ext", "=", "sequence_info", "[", "'ext'", "]", "\n", "start_frame", "=", "sequence_info", "[", "'startFrame'", "]", "\n", "end_frame", "=", "sequence_info", "[", "'endFrame'", "]", "\n", "\n", "init_omit", "=", "0", "\n", "if", "'initOmit'", "in", "sequence_info", ":", "\n", "            ", "init_omit", "=", "sequence_info", "[", "'initOmit'", "]", "\n", "\n", "", "frames", "=", "[", "'{base_path}/{sequence_path}/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "frame", "=", "frame_num", ",", "nz", "=", "nz", ",", "ext", "=", "ext", ")", "for", "frame_num", "in", "range", "(", "start_frame", "+", "init_omit", ",", "end_frame", "+", "1", ")", "]", "\n", "\n", "anno_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_info", "[", "'anno_path'", "]", ")", "\n", "\n", "try", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "except", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "return", "Sequence", "(", "sequence_info", "[", "'name'", "]", ",", "frames", ",", "ground_truth_rect", "[", "init_omit", ":", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uav10fpsdataset.UAV10fpsDatasetClass.__len__": [[51, 53], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_info_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uav10fpsdataset.UAV10fpsDatasetClass._get_sequence_info_list": [[55, 306], ["None"], "methods", ["None"], ["", "def", "_get_sequence_info_list", "(", "self", ")", ":", "\n", "        ", "sequence_info_list", "=", "[", "\n", "{", "'name'", ":", "'bike1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/bike1'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "1029", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/bike1.txt'", "}", ",", "\n", "{", "'name'", ":", "'bike2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/bike2'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "185", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/bike2.txt'", "}", ",", "\n", "{", "'name'", ":", "'bike3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/bike3'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "145", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/bike3.txt'", "}", ",", "\n", "{", "'name'", ":", "'bird1_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/bird1'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "85", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/bird1_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'bird1_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/bird1'", ",", "'startFrame'", ":", "259", ",", "'endFrame'", ":", "493", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/bird1_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'bird1_3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/bird1'", ",", "'startFrame'", ":", "525", ",", "'endFrame'", ":", "813", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/bird1_3.txt'", "}", ",", "\n", "{", "'name'", ":", "'boat1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/boat1'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "301", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/boat1.txt'", "}", ",", "\n", "{", "'name'", ":", "'boat2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/boat2'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "267", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/boat2.txt'", "}", ",", "\n", "{", "'name'", ":", "'boat3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/boat3'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "301", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/boat3.txt'", "}", ",", "\n", "{", "'name'", ":", "'boat4'", ",", "'path'", ":", "'data_seq/UAV123_10fps/boat4'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "185", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/boat4.txt'", "}", ",", "\n", "{", "'name'", ":", "'boat5'", ",", "'path'", ":", "'data_seq/UAV123_10fps/boat5'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "169", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/boat5.txt'", "}", ",", "\n", "{", "'name'", ":", "'boat6'", ",", "'path'", ":", "'data_seq/UAV123_10fps/boat6'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "269", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/boat6.txt'", "}", ",", "\n", "{", "'name'", ":", "'boat7'", ",", "'path'", ":", "'data_seq/UAV123_10fps/boat7'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "179", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/boat7.txt'", "}", ",", "\n", "{", "'name'", ":", "'boat8'", ",", "'path'", ":", "'data_seq/UAV123_10fps/boat8'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "229", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/boat8.txt'", "}", ",", "\n", "{", "'name'", ":", "'boat9'", ",", "'path'", ":", "'data_seq/UAV123_10fps/boat9'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "467", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/boat9.txt'", "}", ",", "\n", "{", "'name'", ":", "'building1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/building1'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "157", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/building1.txt'", "}", ",", "\n", "{", "'name'", ":", "'building2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/building2'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "193", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/building2.txt'", "}", ",", "\n", "{", "'name'", ":", "'building3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/building3'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "277", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/building3.txt'", "}", ",", "\n", "{", "'name'", ":", "'building4'", ",", "'path'", ":", "'data_seq/UAV123_10fps/building4'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "263", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/building4.txt'", "}", ",", "\n", "{", "'name'", ":", "'building5'", ",", "'path'", ":", "'data_seq/UAV123_10fps/building5'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "161", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/building5.txt'", "}", ",", "\n", "{", "'name'", ":", "'car1_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car1'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "251", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car1_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'car1_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car1'", ",", "'startFrame'", ":", "251", ",", "'endFrame'", ":", "543", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car1_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'car1_3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car1'", ",", "'startFrame'", ":", "543", ",", "'endFrame'", ":", "877", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car1_3.txt'", "}", ",", "\n", "{", "'name'", ":", "'car2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car2'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "441", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car2.txt'", "}", ",", "\n", "{", "'name'", ":", "'car3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car3'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "573", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car3.txt'", "}", ",", "\n", "{", "'name'", ":", "'car4'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car4'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "449", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car4.txt'", "}", ",", "\n", "{", "'name'", ":", "'car5'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car5'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "249", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car5.txt'", "}", ",", "\n", "{", "'name'", ":", "'car6_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car6'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "163", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car6_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'car6_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car6'", ",", "'startFrame'", ":", "163", ",", "'endFrame'", ":", "603", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car6_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'car6_3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car6'", ",", "'startFrame'", ":", "603", ",", "'endFrame'", ":", "985", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car6_3.txt'", "}", ",", "\n", "{", "'name'", ":", "'car6_4'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car6'", ",", "'startFrame'", ":", "985", ",", "'endFrame'", ":", "1309", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car6_4.txt'", "}", ",", "\n", "{", "'name'", ":", "'car6_5'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car6'", ",", "'startFrame'", ":", "1309", ",", "'endFrame'", ":", "1621", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car6_5.txt'", "}", ",", "\n", "{", "'name'", ":", "'car7'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car7'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "345", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car7.txt'", "}", ",", "\n", "{", "'name'", ":", "'car8_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car8'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "453", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car8_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'car8_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car8'", ",", "'startFrame'", ":", "453", ",", "'endFrame'", ":", "859", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car8_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'car9'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car9'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "627", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car9.txt'", "}", ",", "\n", "{", "'name'", ":", "'car10'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car10'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "469", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car10.txt'", "}", ",", "\n", "{", "'name'", ":", "'car11'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car11'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "113", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car11.txt'", "}", ",", "\n", "{", "'name'", ":", "'car12'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car12'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "167", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car12.txt'", "}", ",", "\n", "{", "'name'", ":", "'car13'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car13'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "139", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car13.txt'", "}", ",", "\n", "{", "'name'", ":", "'car14'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car14'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "443", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car14.txt'", "}", ",", "\n", "{", "'name'", ":", "'car15'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car15'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "157", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car15.txt'", "}", ",", "\n", "{", "'name'", ":", "'car16_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car16'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "139", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car16_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'car16_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car16'", ",", "'startFrame'", ":", "139", ",", "'endFrame'", ":", "665", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car16_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'car17'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car17'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "353", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car17.txt'", "}", ",", "\n", "{", "'name'", ":", "'car18'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car18'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "403", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car18.txt'", "}", ",", "\n", "{", "'name'", ":", "'group1_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/group1'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "445", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/group1_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'group1_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/group1'", ",", "'startFrame'", ":", "445", ",", "'endFrame'", ":", "839", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/group1_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'group1_3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/group1'", ",", "'startFrame'", ":", "839", ",", "'endFrame'", ":", "1309", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/group1_3.txt'", "}", ",", "\n", "{", "'name'", ":", "'group1_4'", ",", "'path'", ":", "'data_seq/UAV123_10fps/group1'", ",", "'startFrame'", ":", "1309", ",", "'endFrame'", ":", "1625", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/group1_4.txt'", "}", ",", "\n", "{", "'name'", ":", "'group2_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/group2'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "303", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/group2_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'group2_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/group2'", ",", "'startFrame'", ":", "303", ",", "'endFrame'", ":", "591", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/group2_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'group2_3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/group2'", ",", "'startFrame'", ":", "591", ",", "'endFrame'", ":", "895", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/group2_3.txt'", "}", ",", "\n", "{", "'name'", ":", "'group3_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/group3'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "523", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/group3_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'group3_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/group3'", ",", "'startFrame'", ":", "523", ",", "'endFrame'", ":", "943", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/group3_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'group3_3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/group3'", ",", "'startFrame'", ":", "943", ",", "'endFrame'", ":", "1457", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/group3_3.txt'", "}", ",", "\n", "{", "'name'", ":", "'group3_4'", ",", "'path'", ":", "'data_seq/UAV123_10fps/group3'", ",", "'startFrame'", ":", "1457", ",", "'endFrame'", ":", "1843", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/group3_4.txt'", "}", ",", "\n", "{", "'name'", ":", "'person1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person1'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "267", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person1.txt'", "}", ",", "\n", "{", "'name'", ":", "'person2_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person2'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "397", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person2_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'person2_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person2'", ",", "'startFrame'", ":", "397", ",", "'endFrame'", ":", "875", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person2_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'person3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person3'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "215", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person3.txt'", "}", ",", "\n", "{", "'name'", ":", "'person4_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person4'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "501", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person4_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'person4_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person4'", ",", "'startFrame'", ":", "501", ",", "'endFrame'", ":", "915", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person4_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'person5_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person5'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "293", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person5_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'person5_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person5'", ",", "'startFrame'", ":", "293", ",", "'endFrame'", ":", "701", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person5_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'person6'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person6'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "301", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person6.txt'", "}", ",", "\n", "{", "'name'", ":", "'person7_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person7'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "417", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person7_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'person7_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person7'", ",", "'startFrame'", ":", "417", ",", "'endFrame'", ":", "689", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person7_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'person8_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person8'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "359", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person8_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'person8_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person8'", ",", "'startFrame'", ":", "359", ",", "'endFrame'", ":", "509", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person8_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'person9'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person9'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "221", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person9.txt'", "}", ",", "\n", "{", "'name'", ":", "'person10'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person10'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "341", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person10.txt'", "}", ",", "\n", "{", "'name'", ":", "'person11'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person11'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "241", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person11.txt'", "}", ",", "\n", "{", "'name'", ":", "'person12_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person12'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "201", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person12_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'person12_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person12'", ",", "'startFrame'", ":", "201", ",", "'endFrame'", ":", "541", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person12_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'person13'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person13'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "295", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person13.txt'", "}", ",", "\n", "{", "'name'", ":", "'person14_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person14'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "283", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person14_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'person14_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person14'", ",", "'startFrame'", ":", "283", ",", "'endFrame'", ":", "605", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person14_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'person14_3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person14'", ",", "'startFrame'", ":", "605", ",", "'endFrame'", ":", "975", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person14_3.txt'", "}", ",", "\n", "{", "'name'", ":", "'person15'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person15'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "447", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person15.txt'", "}", ",", "\n", "{", "'name'", ":", "'person16'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person16'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "383", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person16.txt'", "}", ",", "\n", "{", "'name'", ":", "'person17_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person17'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "501", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person17_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'person17_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person17'", ",", "'startFrame'", ":", "501", ",", "'endFrame'", ":", "783", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person17_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'person18'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person18'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "465", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person18.txt'", "}", ",", "\n", "{", "'name'", ":", "'person19_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person19'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "415", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person19_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'person19_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person19'", ",", "'startFrame'", ":", "415", ",", "'endFrame'", ":", "931", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person19_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'person19_3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person19'", ",", "'startFrame'", ":", "931", ",", "'endFrame'", ":", "1453", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person19_3.txt'", "}", ",", "\n", "{", "'name'", ":", "'person20'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person20'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "595", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person20.txt'", "}", ",", "\n", "{", "'name'", ":", "'person21'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person21'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "163", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person21.txt'", "}", ",", "\n", "{", "'name'", ":", "'person22'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person22'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "67", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person22.txt'", "}", ",", "\n", "{", "'name'", ":", "'person23'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person23'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "133", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person23.txt'", "}", ",", "\n", "{", "'name'", ":", "'truck1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/truck1'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "155", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/truck1.txt'", "}", ",", "\n", "{", "'name'", ":", "'truck2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/truck2'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "129", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/truck2.txt'", "}", ",", "\n", "{", "'name'", ":", "'truck3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/truck3'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "179", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/truck3.txt'", "}", ",", "\n", "{", "'name'", ":", "'truck4_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/truck4'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "193", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/truck4_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'truck4_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/truck4'", ",", "'startFrame'", ":", "193", ",", "'endFrame'", ":", "421", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/truck4_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'uav1_1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/uav1'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "519", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/uav1_1.txt'", "}", ",", "\n", "{", "'name'", ":", "'uav1_2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/uav1'", ",", "'startFrame'", ":", "519", ",", "'endFrame'", ":", "793", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/uav1_2.txt'", "}", ",", "\n", "{", "'name'", ":", "'uav1_3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/uav1'", ",", "'startFrame'", ":", "825", ",", "'endFrame'", ":", "1157", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/uav1_3.txt'", "}", ",", "\n", "{", "'name'", ":", "'uav2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/uav2'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "45", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/uav2.txt'", "}", ",", "\n", "{", "'name'", ":", "'uav3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/uav3'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "89", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/uav3.txt'", "}", ",", "\n", "{", "'name'", ":", "'uav4'", ",", "'path'", ":", "'data_seq/UAV123_10fps/uav4'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "53", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/uav4.txt'", "}", ",", "\n", "{", "'name'", ":", "'uav5'", ",", "'path'", ":", "'data_seq/UAV123_10fps/uav5'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "47", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/uav5.txt'", "}", ",", "\n", "{", "'name'", ":", "'uav6'", ",", "'path'", ":", "'data_seq/UAV123_10fps/uav6'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "37", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/uav6.txt'", "}", ",", "\n", "{", "'name'", ":", "'uav7'", ",", "'path'", ":", "'data_seq/UAV123_10fps/uav7'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "125", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/uav7.txt'", "}", ",", "\n", "{", "'name'", ":", "'uav8'", ",", "'path'", ":", "'data_seq/UAV123_10fps/uav8'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "101", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/uav8.txt'", "}", ",", "\n", "{", "'name'", ":", "'wakeboard1'", ",", "'path'", ":", "'data_seq/UAV123_10fps/wakeboard1'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "141", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/wakeboard1.txt'", "}", ",", "\n", "{", "'name'", ":", "'wakeboard2'", ",", "'path'", ":", "'data_seq/UAV123_10fps/wakeboard2'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "245", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/wakeboard2.txt'", "}", ",", "\n", "{", "'name'", ":", "'wakeboard3'", ",", "'path'", ":", "'data_seq/UAV123_10fps/wakeboard3'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "275", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/wakeboard3.txt'", "}", ",", "\n", "{", "'name'", ":", "'wakeboard4'", ",", "'path'", ":", "'data_seq/UAV123_10fps/wakeboard4'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "233", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/wakeboard4.txt'", "}", ",", "\n", "{", "'name'", ":", "'wakeboard5'", ",", "'path'", ":", "'data_seq/UAV123_10fps/wakeboard5'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "559", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/wakeboard5.txt'", "}", ",", "\n", "{", "'name'", ":", "'wakeboard6'", ",", "'path'", ":", "'data_seq/UAV123_10fps/wakeboard6'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "389", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/wakeboard6.txt'", "}", ",", "\n", "{", "'name'", ":", "'wakeboard7'", ",", "'path'", ":", "'data_seq/UAV123_10fps/wakeboard7'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "67", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/wakeboard7.txt'", "}", ",", "\n", "{", "'name'", ":", "'wakeboard8'", ",", "'path'", ":", "'data_seq/UAV123_10fps/wakeboard8'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "515", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/wakeboard8.txt'", "}", ",", "\n", "{", "'name'", ":", "'wakeboard9'", ",", "'path'", ":", "'data_seq/UAV123_10fps/wakeboard9'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "119", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/wakeboard9.txt'", "}", ",", "\n", "{", "'name'", ":", "'wakeboard10'", ",", "'path'", ":", "'data_seq/UAV123_10fps/wakeboard10'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "157", ",", "\n", "'nz'", ":", "6", ",", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/wakeboard10.txt'", "}", ",", "\n", "{", "'name'", ":", "'car1_s'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car1_s'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "492", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car1_s.txt'", "}", ",", "\n", "{", "'name'", ":", "'car2_s'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car2_s'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "107", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car2_s.txt'", "}", ",", "\n", "{", "'name'", ":", "'car3_s'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car3_s'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "434", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car3_s.txt'", "}", ",", "\n", "{", "'name'", ":", "'car4_s'", ",", "'path'", ":", "'data_seq/UAV123_10fps/car4_s'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "277", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/car4_s.txt'", "}", ",", "\n", "{", "'name'", ":", "'person1_s'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person1_s'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "534", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person1_s.txt'", "}", ",", "\n", "{", "'name'", ":", "'person2_s'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person2_s'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "84", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person2_s.txt'", "}", ",", "\n", "{", "'name'", ":", "'person3_s'", ",", "'path'", ":", "'data_seq/UAV123_10fps/person3_s'", ",", "'startFrame'", ":", "1", ",", "'endFrame'", ":", "169", ",", "'nz'", ":", "6", ",", "\n", "'ext'", ":", "'jpg'", ",", "'anno_path'", ":", "'anno/UAV123_10fps/person3_s.txt'", "}", "\n", "]", "\n", "\n", "return", "sequence_info_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uav10fpsdataset.UAV10fpsDataset": [[5, 7], ["uav10fpsdataset.UAV10fpsDatasetClass.get_sequence_list", "uav10fpsdataset.UAV10fpsDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["def", "UAV10fpsDataset", "(", ")", ":", "\n", "    ", "return", "UAV10fpsDatasetClass", "(", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.mobifacedataset.MobifaceDataset.__init__": [[28, 37], ["pytracking.evaluation.data.BaseDataset.__init__", "mobifacedataset.MobifaceDataset._get_sequence_list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq._get_sequence_list"], ["def", "__init__", "(", "self", ",", "split", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            split - Split to use. Can be i) 'train': official training set, ii) 'test': official test set, iii) 'all': whole dataset.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "mobiface_path", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", "split", ")", "\n", "self", ".", "split", "=", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.mobifacedataset.MobifaceDataset.get_sequence_list": [[38, 40], ["pytracking.evaluation.data.SequenceList", "mobifacedataset.MobifaceDataset._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_list", "]", ")", "\n", "", "def", "_get_sequence_list", "(", "self", ",", "split", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.mobifacedataset.MobifaceDataset._get_sequence_list": [[40, 62], ["os.join", "os.join", "os.join", "os.join", "pandas.read_csv().transpose().to_dict", "pandas.read_csv().transpose().to_dict", "collections.OrderedDict", "mobifacedataset.MobifaceDataset.meta.items", "sorted", "sorted", "list", "pandas.read_csv().transpose", "pandas.read_csv().transpose", "mobifacedataset.MobifaceDataset.meta.items", "mobifacedataset.MobifaceDataset.train_meta.keys", "mobifacedataset.MobifaceDataset.anno_files.append", "mobifacedataset.MobifaceDataset.anno_files.append", "mobifacedataset.MobifaceDataset.meta.keys", "os.abspath", "os.abspath", "os.abspath", "os.abspath", "pandas.read_csv", "pandas.read_csv", "os.join", "os.join", "os.join", "os.join", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["", "def", "_get_sequence_list", "(", "self", ",", "split", ")", ":", "\n", "\n", "        ", "self", ".", "train_meta_fn", "=", "osp", ".", "join", "(", "self", ".", "base_path", ",", "'train.meta.csv'", ")", "\n", "self", ".", "test_meta_fn", "=", "osp", ".", "join", "(", "self", ".", "base_path", ",", "'test.meta.csv'", ")", "\n", "self", ".", "train_meta", "=", "pd", ".", "read_csv", "(", "self", ".", "train_meta_fn", ",", "index_col", "=", "0", ")", ".", "transpose", "(", ")", ".", "to_dict", "(", ")", "\n", "self", ".", "test_meta", "=", "pd", ".", "read_csv", "(", "self", ".", "test_meta_fn", ",", "index_col", "=", "0", ")", ".", "transpose", "(", ")", ".", "to_dict", "(", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "meta", "=", "self", ".", "train_meta", "\n", "", "elif", "split", "==", "'test'", ":", "\n", "            ", "self", ".", "meta", "=", "self", ".", "test_meta", "\n", "", "else", ":", "\n", "            ", "self", ".", "meta", "=", "{", "**", "self", ".", "train_meta", ",", "**", "self", ".", "test_meta", "}", "# In Python 3.5 or greater", "\n", "", "self", ".", "meta", "=", "OrderedDict", "(", "sorted", "(", "self", ".", "meta", ".", "items", "(", ")", ",", "key", "=", "lambda", "t", ":", "t", "[", "0", "]", ")", ")", "\n", "self", ".", "anno_files", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "meta", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "self", ".", "train_meta", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "anno_files", ".", "append", "(", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "self", ".", "base_path", ",", "'train'", ",", "k", "+", "'.annot.csv'", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "anno_files", ".", "append", "(", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "self", ".", "base_path", ",", "'test'", ",", "k", "+", "'.annot.csv'", ")", ")", ")", "\n", "", "", "self", ".", "seq_names", "=", "sorted", "(", "list", "(", "self", ".", "meta", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "seq_dirs", "=", "[", "fn", "[", ":", "-", "len", "(", "'.annot.csv'", ")", "]", "for", "fn", "in", "self", ".", "anno_files", "]", "\n", "return", "self", ".", "seq_names", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.mobifacedataset.MobifaceDataset._construct_sequence": [[63, 74], ["mobifacedataset.MobifaceDataset.seq_names.index", "sorted", "pytracking.evaluation.data.Sequence", "glob.glob", "len", "sorted", "open", "numpy.loadtxt", "numpy.loadtxt.reshape", "glob.glob"], "methods", ["None"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_name", ")", ":", "\n", "        ", "index", "=", "self", ".", "seq_names", ".", "index", "(", "sequence_name", ")", "\n", "img_files", "=", "sorted", "(", "glob", ".", "glob", "(", "self", ".", "seq_dirs", "[", "index", "]", "+", "'/*.jpg'", ")", ")", "\n", "if", "len", "(", "img_files", ")", "==", "0", ":", "\n", "            ", "img_files", "=", "sorted", "(", "glob", ".", "glob", "(", "self", ".", "seq_dirs", "[", "index", "]", "+", "'.png'", ")", ")", "\n", "", "with", "open", "(", "self", ".", "anno_files", "[", "index", "]", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "anno", "=", "np", ".", "loadtxt", "(", "f", ",", "delimiter", "=", "','", ",", "skiprows", "=", "1", ",", "dtype", "=", "int", ")", "\n", "", "anno", "=", "anno", "[", ":", ",", "1", ":", "]", "\n", "assert", "anno", ".", "shape", "[", "1", "]", "==", "4", "\n", "\n", "return", "Sequence", "(", "sequence_name", ",", "img_files", ",", "anno", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.mobifacedataset.MobifaceDataset.__len__": [[74, 77], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'''Overload this function in your evaluation. This should return number of sequences in the evaluation '''", "\n", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.mobifacedataset.MobifaceDatasetTest": [[9, 11], ["mobifacedataset.MobifaceDataset.get_sequence_list", "mobifacedataset.MobifaceDataset"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["def", "MobifaceDatasetTest", "(", ")", ":", "\n", "    ", "return", "MobifaceDataset", "(", "'test'", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.mobifacedataset.MobifaceDatasetAll": [[12, 14], ["mobifacedataset.MobifaceDataset.get_sequence_list", "mobifacedataset.MobifaceDataset"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["", "def", "MobifaceDatasetAll", "(", ")", ":", "\n", "    ", "return", "MobifaceDataset", "(", "'all'", ")", ".", "get_sequence_list", "(", ")", "\n", "", "def", "MobifaceDatasetTrain", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.mobifacedataset.MobifaceDatasetTrain": [[14, 16], ["mobifacedataset.MobifaceDataset.get_sequence_list", "mobifacedataset.MobifaceDataset"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["", "def", "MobifaceDatasetTrain", "(", ")", ":", "\n", "    ", "return", "MobifaceDataset", "(", "'train'", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.__init__": [[15, 30], ["pytracking.evaluation.environment.env_settings", "importlib.import_module", "importlib.import_module.get_tracker_class", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.__init__.get_tracker_class"], ["def", "__init__", "(", "self", ",", "name", ":", "str", ",", "parameter_name", ":", "str", ",", "run_id", ":", "int", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "parameter_name", "=", "parameter_name", "\n", "self", ".", "run_id", "=", "run_id", "\n", "\n", "env", "=", "env_settings", "(", ")", "\n", "if", "self", ".", "run_id", "is", "None", ":", "\n", "            ", "self", ".", "results_dir", "=", "'{}/{}/{}'", ".", "format", "(", "env", ".", "results_path", ",", "self", ".", "name", ",", "self", ".", "parameter_name", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "results_dir", "=", "'{}/{}/{}_{:03d}'", ".", "format", "(", "env", ".", "results_path", ",", "self", ".", "name", ",", "self", ".", "parameter_name", ",", "self", ".", "run_id", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "results_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "results_dir", ")", "\n", "\n", "", "tracker_module", "=", "importlib", ".", "import_module", "(", "'pytracking.tracker.{}'", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "self", ".", "tracker_class", "=", "tracker_module", ".", "get_tracker_class", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.run": [[32, 61], ["tracker.Tracker.Tracker.get_parameters", "tracker.Tracker.Tracker.tracker_class", "tracker.Tracker.Tracker.track_sequence", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.get_parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.track_sequence"], ["", "def", "run", "(", "self", ",", "seq", ",", "visualization", "=", "None", ",", "debug", "=", "None", ",", "visdom_info", "=", "None", ")", ":", "\n", "        ", "\"\"\"Run tracker on sequence.\n        args:\n            seq: Sequence to run the tracker on.\n            visualization: Set visualization flag (None means default value specified in the parameters).\n            debug: Set debug level (None means default value specified in the parameters).\n        \"\"\"", "\n", "visdom_info", "=", "{", "}", "if", "visdom_info", "is", "None", "else", "visdom_info", "\n", "params", "=", "self", ".", "get_parameters", "(", ")", "\n", "visualization_", "=", "visualization", "\n", "\n", "debug_", "=", "debug", "\n", "if", "debug", "is", "None", ":", "\n", "            ", "debug_", "=", "getattr", "(", "params", ",", "'debug'", ",", "0", ")", "\n", "", "if", "visualization", "is", "None", ":", "\n", "            ", "if", "debug", "is", "None", ":", "\n", "                ", "visualization_", "=", "getattr", "(", "params", ",", "'visualization'", ",", "False", ")", "\n", "", "else", ":", "\n", "                ", "visualization_", "=", "True", "if", "debug", "else", "False", "\n", "\n", "", "", "params", ".", "visualization", "=", "visualization_", "\n", "params", ".", "debug", "=", "debug_", "\n", "params", ".", "visdom_info", "=", "visdom_info", "\n", "\n", "tracker", "=", "self", ".", "tracker_class", "(", "params", ")", "\n", "\n", "output", "=", "tracker", ".", "track_sequence", "(", "seq", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.run_video": [[62, 81], ["tracker.Tracker.Tracker.get_parameters", "tracker.Tracker.Tracker.tracker_class", "tracker.Tracker.Tracker.track_videofile", "getattr"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.get_parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.track_videofile"], ["", "def", "run_video", "(", "self", ",", "videofilepath", ",", "optional_box", "=", "None", ",", "debug", "=", "None", ",", "visdom_info", "=", "None", ")", ":", "\n", "        ", "\"\"\"Run the tracker with the vieofile.\n        args:\n            debug: Debug level.\n        \"\"\"", "\n", "visdom_info", "=", "{", "}", "if", "visdom_info", "is", "None", "else", "visdom_info", "\n", "\n", "params", "=", "self", ".", "get_parameters", "(", ")", "\n", "\n", "debug_", "=", "debug", "\n", "if", "debug", "is", "None", ":", "\n", "            ", "debug_", "=", "getattr", "(", "params", ",", "'debug'", ",", "0", ")", "\n", "", "params", ".", "debug", "=", "debug_", "\n", "params", ".", "visdom_info", "=", "visdom_info", "\n", "\n", "params", ".", "tracker_name", "=", "self", ".", "name", "\n", "params", ".", "param_name", "=", "self", ".", "parameter_name", "\n", "tracker", "=", "self", ".", "tracker_class", "(", "params", ")", "\n", "tracker", ".", "track_videofile", "(", "videofilepath", ",", "optional_box", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.run_webcam": [[82, 102], ["tracker.Tracker.Tracker.get_parameters", "tracker.Tracker.Tracker.tracker_class", "tracker.Tracker.Tracker.track_webcam", "getattr"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.get_parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.track_webcam"], ["", "def", "run_webcam", "(", "self", ",", "debug", "=", "None", ",", "visdom_info", "=", "None", ")", ":", "\n", "        ", "\"\"\"Run the tracker with the webcam.\n        args:\n            debug: Debug level.\n        \"\"\"", "\n", "visdom_info", "=", "{", "}", "if", "visdom_info", "is", "None", "else", "visdom_info", "\n", "params", "=", "self", ".", "get_parameters", "(", ")", "\n", "\n", "debug_", "=", "debug", "\n", "if", "debug", "is", "None", ":", "\n", "            ", "debug_", "=", "getattr", "(", "params", ",", "'debug'", ",", "0", ")", "\n", "", "params", ".", "debug", "=", "debug_", "\n", "\n", "params", ".", "tracker_name", "=", "self", ".", "name", "\n", "params", ".", "param_name", "=", "self", ".", "parameter_name", "\n", "params", ".", "visdom_info", "=", "visdom_info", "\n", "\n", "tracker", "=", "self", ".", "tracker_class", "(", "params", ")", "\n", "\n", "tracker", ".", "track_webcam", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.run_vot": [[103, 121], ["tracker.Tracker.Tracker.get_parameters", "tracker.Tracker.Tracker.tracker_class", "tracker.Tracker.Tracker.initialize_features", "tracker.Tracker.Tracker.track_vot", "getattr"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.get_parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.atom.ATOM.initialize_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.base.basetracker.BaseTracker.track_vot"], ["", "def", "run_vot", "(", "self", ",", "debug", "=", "None", ",", "visdom_info", "=", "None", ")", ":", "\n", "        ", "\"\"\" Run on vot\"\"\"", "\n", "visdom_info", "=", "{", "}", "if", "visdom_info", "is", "None", "else", "visdom_info", "\n", "params", "=", "self", ".", "get_parameters", "(", ")", "\n", "\n", "debug_", "=", "debug", "\n", "if", "debug", "is", "None", ":", "\n", "            ", "debug_", "=", "getattr", "(", "params", ",", "'debug'", ",", "0", ")", "\n", "", "params", ".", "debug", "=", "debug_", "\n", "\n", "params", ".", "tracker_name", "=", "self", ".", "name", "\n", "params", ".", "param_name", "=", "self", ".", "parameter_name", "\n", "params", ".", "run_id", "=", "self", ".", "run_id", "\n", "params", ".", "visdom_info", "=", "visdom_info", "\n", "\n", "tracker", "=", "self", ".", "tracker_class", "(", "params", ")", "\n", "tracker", ".", "initialize_features", "(", ")", "\n", "tracker", ".", "track_vot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tracker.Tracker.get_parameters": [[122, 136], ["os.path.isfile", "importlib.import_module", "importlib.import_module.parameters", "pickle.load", "pickle.dump", "open", "open"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get parameters.\"\"\"", "\n", "\n", "parameter_file", "=", "'{}/parameters.pkl'", ".", "format", "(", "self", ".", "results_dir", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "parameter_file", ")", ":", "\n", "            ", "return", "pickle", ".", "load", "(", "open", "(", "parameter_file", ",", "'rb'", ")", ")", "\n", "\n", "", "param_module", "=", "importlib", ".", "import_module", "(", "'pytracking.parameter.{}.{}'", ".", "format", "(", "self", ".", "name", ",", "self", ".", "parameter_name", ")", ")", "\n", "params", "=", "param_module", ".", "parameters", "(", ")", "\n", "\n", "if", "self", ".", "run_id", "is", "not", "None", ":", "\n", "            ", "pickle", ".", "dump", "(", "params", ",", "open", "(", "parameter_file", ",", "'wb'", ")", ")", "\n", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.votdataset.VOTDatasetClass.__init__": [[20, 24], ["pytracking.evaluation.data.BaseDataset.__init__", "votdataset.VOTDatasetClass._get_sequence_list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq._get_sequence_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "vot_path", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.votdataset.VOTDatasetClass.get_sequence_list": [[25, 27], ["pytracking.evaluation.data.SequenceList", "votdataset.VOTDatasetClass._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.votdataset.VOTDatasetClass._construct_sequence": [[28, 58], ["pytracking.evaluation.data.Sequence", "numpy.loadtxt", "numpy.amin().reshape", "numpy.amin().reshape", "numpy.amax().reshape", "numpy.amax().reshape", "numpy.concatenate", "str", "numpy.loadtxt", "range", "str", "numpy.amin", "numpy.amin", "numpy.amax", "numpy.amax"], "methods", ["None"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_name", ")", ":", "\n", "        ", "sequence_path", "=", "sequence_name", "\n", "nz", "=", "8", "\n", "ext", "=", "'jpg'", "\n", "start_frame", "=", "1", "\n", "\n", "anno_path", "=", "'{}/{}/groundtruth.txt'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_name", ")", "\n", "try", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "except", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "end_frame", "=", "ground_truth_rect", ".", "shape", "[", "0", "]", "\n", "\n", "frames", "=", "[", "'{base_path}/{sequence_path}/color/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "frame", "=", "frame_num", ",", "nz", "=", "nz", ",", "ext", "=", "ext", ")", "\n", "for", "frame_num", "in", "range", "(", "start_frame", ",", "end_frame", "+", "1", ")", "]", "\n", "\n", "# Convert gt", "\n", "if", "ground_truth_rect", ".", "shape", "[", "1", "]", ">", "4", ":", "\n", "            ", "gt_x_all", "=", "ground_truth_rect", "[", ":", ",", "[", "0", ",", "2", ",", "4", ",", "6", "]", "]", "\n", "gt_y_all", "=", "ground_truth_rect", "[", ":", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", "\n", "\n", "x1", "=", "np", ".", "amin", "(", "gt_x_all", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y1", "=", "np", ".", "amin", "(", "gt_y_all", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x2", "=", "np", ".", "amax", "(", "gt_x_all", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y2", "=", "np", ".", "amax", "(", "gt_y_all", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "ground_truth_rect", "=", "np", ".", "concatenate", "(", "(", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", ")", ",", "1", ")", "\n", "", "return", "Sequence", "(", "sequence_name", ",", "frames", ",", "ground_truth_rect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.votdataset.VOTDatasetClass.__len__": [[59, 61], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.votdataset.VOTDatasetClass._get_sequence_list": [[62, 125], ["None"], "methods", ["None"], ["", "def", "_get_sequence_list", "(", "self", ")", ":", "\n", "        ", "sequence_list", "=", "[", "'ants1'", ",", "\n", "'ants3'", ",", "\n", "'bag'", ",", "\n", "'ball1'", ",", "\n", "'ball2'", ",", "\n", "'basketball'", ",", "\n", "'birds1'", ",", "\n", "'blanket'", ",", "\n", "'bmx'", ",", "\n", "'bolt1'", ",", "\n", "'bolt2'", ",", "\n", "'book'", ",", "\n", "'butterfly'", ",", "\n", "'car1'", ",", "\n", "'conduction1'", ",", "\n", "'crabs1'", ",", "\n", "'crossing'", ",", "\n", "'dinosaur'", ",", "\n", "'drone_across'", ",", "\n", "'drone_flip'", ",", "\n", "'drone1'", ",", "\n", "'fernando'", ",", "\n", "'fish1'", ",", "\n", "'fish2'", ",", "\n", "'fish3'", ",", "\n", "'flamingo1'", ",", "\n", "'frisbee'", ",", "\n", "'girl'", ",", "\n", "'glove'", ",", "\n", "'godfather'", ",", "\n", "'graduate'", ",", "\n", "'gymnastics1'", ",", "\n", "'gymnastics2'", ",", "\n", "'gymnastics3'", ",", "\n", "'hand'", ",", "\n", "'handball1'", ",", "\n", "'handball2'", ",", "\n", "'helicopter'", ",", "\n", "'iceskater1'", ",", "\n", "'iceskater2'", ",", "\n", "'leaves'", ",", "\n", "'matrix'", ",", "\n", "'motocross1'", ",", "\n", "'motocross2'", ",", "\n", "'nature'", ",", "\n", "'pedestrian1'", ",", "\n", "'rabbit'", ",", "\n", "'racing'", ",", "\n", "'road'", ",", "\n", "'shaking'", ",", "\n", "'sheep'", ",", "\n", "'singer2'", ",", "\n", "'singer3'", ",", "\n", "'soccer1'", ",", "\n", "'soccer2'", ",", "\n", "'soldier'", ",", "\n", "'tiger'", ",", "\n", "'traffic'", ",", "\n", "'wiper'", ",", "\n", "'zebrafish1'", "]", "\n", "\n", "return", "sequence_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.votdataset.VOTDataset": [[5, 7], ["votdataset.VOTDatasetClass.get_sequence_list", "votdataset.VOTDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["def", "VOTDataset", "(", ")", ":", "\n", "    ", "return", "VOTDatasetClass", "(", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tpldataset.TPLDatasetClass.__init__": [[15, 19], ["pytracking.evaluation.data.BaseDataset.__init__", "tpldataset.TPLDatasetClass._get_sequence_info_list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._get_sequence_info_list"], ["def", "__init__", "(", "self", ",", "exclude_otb", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "tpl_path", "\n", "self", ".", "sequence_info_list", "=", "self", ".", "_get_sequence_info_list", "(", "exclude_otb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tpldataset.TPLDatasetClass.get_sequence_list": [[20, 22], ["pytracking.evaluation.data.SequenceList", "tpldataset.TPLDatasetClass._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_info_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tpldataset.TPLDatasetClass._construct_sequence": [[24, 46], ["pytracking.evaluation.data.Sequence", "numpy.loadtxt", "range", "str", "numpy.loadtxt", "str"], "methods", ["None"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_info", ")", ":", "\n", "        ", "sequence_path", "=", "sequence_info", "[", "'path'", "]", "\n", "nz", "=", "sequence_info", "[", "'nz'", "]", "\n", "ext", "=", "sequence_info", "[", "'ext'", "]", "\n", "start_frame", "=", "sequence_info", "[", "'startFrame'", "]", "\n", "end_frame", "=", "sequence_info", "[", "'endFrame'", "]", "\n", "\n", "init_omit", "=", "0", "\n", "if", "'initOmit'", "in", "sequence_info", ":", "\n", "            ", "init_omit", "=", "sequence_info", "[", "'initOmit'", "]", "\n", "\n", "", "frames", "=", "[", "'{base_path}/{sequence_path}/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "frame", "=", "frame_num", ",", "nz", "=", "nz", ",", "ext", "=", "ext", ")", "for", "frame_num", "in", "range", "(", "start_frame", "+", "init_omit", ",", "end_frame", "+", "1", ")", "]", "\n", "\n", "anno_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_info", "[", "'anno_path'", "]", ")", "\n", "\n", "try", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "except", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "return", "Sequence", "(", "sequence_info", "[", "'name'", "]", ",", "frames", ",", "ground_truth_rect", "[", "init_omit", ":", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tpldataset.TPLDatasetClass.__len__": [[47, 50], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'''Overload this function in your evaluation. This should return number of sequences in the evaluation '''", "\n", "return", "len", "(", "self", ".", "sequence_info_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tpldataset.TPLDatasetClass._get_sequence_info_list": [[52, 328], ["sequence_info_list_nootb.append"], "methods", ["None"], ["", "def", "_get_sequence_info_list", "(", "self", ",", "exclude_otb", "=", "False", ")", ":", "\n", "        ", "sequence_info_list", "=", "[", "\n", "{", "\"name\"", ":", "\"tpl_Skating2\"", ",", "\"path\"", ":", "\"tpl_Skating2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "707", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Skating2/Skating2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Pool_ce3\"", ",", "\"path\"", ":", "\"tpl_Pool_ce3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "124", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Pool_ce3/Pool_ce3_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Microphone_ce1\"", ",", "\"path\"", ":", "\"tpl_Microphone_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "204", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Microphone_ce1/Microphone_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Torus\"", ",", "\"path\"", ":", "\"tpl_Torus/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "264", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Torus/Torus_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Lemming\"", ",", "\"path\"", ":", "\"tpl_Lemming/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1336", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Lemming/Lemming_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Eagle_ce\"", ",", "\"path\"", ":", "\"tpl_Eagle_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "112", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Eagle_ce/Eagle_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Skating_ce2\"", ",", "\"path\"", ":", "\"tpl_Skating_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "497", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Skating_ce2/Skating_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Yo_yos_ce3\"", ",", "\"path\"", ":", "\"tpl_Yo_yos_ce3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "201", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Yo_yos_ce3/Yo-yos_ce3_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Board\"", ",", "\"path\"", ":", "\"tpl_Board/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "598", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Board/Board_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Tennis_ce3\"", ",", "\"path\"", ":", "\"tpl_Tennis_ce3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "204", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Tennis_ce3/Tennis_ce3_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_SuperMario_ce\"", ",", "\"path\"", ":", "\"tpl_SuperMario_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "146", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_SuperMario_ce/SuperMario_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Yo_yos_ce1\"", ",", "\"path\"", ":", "\"tpl_Yo_yos_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "235", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Yo_yos_ce1/Yo-yos_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Soccer\"", ",", "\"path\"", ":", "\"tpl_Soccer/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "392", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Soccer/Soccer_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Fish_ce2\"", ",", "\"path\"", ":", "\"tpl_Fish_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "573", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Fish_ce2/Fish_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Liquor\"", ",", "\"path\"", ":", "\"tpl_Liquor/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1741", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Liquor/Liquor_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Plane_ce2\"", ",", "\"path\"", ":", "\"tpl_Plane_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "653", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Plane_ce2/Plane_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Couple\"", ",", "\"path\"", ":", "\"tpl_Couple/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "140", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Couple/Couple_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Logo_ce\"", ",", "\"path\"", ":", "\"tpl_Logo_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "610", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Logo_ce/Logo_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Hand_ce2\"", ",", "\"path\"", ":", "\"tpl_Hand_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "251", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Hand_ce2/Hand_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Kite_ce2\"", ",", "\"path\"", ":", "\"tpl_Kite_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "658", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Kite_ce2/Kite_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Walking\"", ",", "\"path\"", ":", "\"tpl_Walking/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "412", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Walking/Walking_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_David\"", ",", "\"path\"", ":", "\"tpl_David/img\"", ",", "\"startFrame\"", ":", "300", ",", "\"endFrame\"", ":", "770", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_David/David_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Boat_ce1\"", ",", "\"path\"", ":", "\"tpl_Boat_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "377", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Boat_ce1/Boat_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Airport_ce\"", ",", "\"path\"", ":", "\"tpl_Airport_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "148", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Airport_ce/Airport_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Tiger2\"", ",", "\"path\"", ":", "\"tpl_Tiger2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "365", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Tiger2/Tiger2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Suitcase_ce\"", ",", "\"path\"", ":", "\"tpl_Suitcase_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "184", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Suitcase_ce/Suitcase_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_TennisBall_ce\"", ",", "\"path\"", ":", "\"tpl_TennisBall_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "288", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_TennisBall_ce/TennisBall_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Singer_ce1\"", ",", "\"path\"", ":", "\"tpl_Singer_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "214", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Singer_ce1/Singer_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Pool_ce2\"", ",", "\"path\"", ":", "\"tpl_Pool_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "133", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Pool_ce2/Pool_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Surf_ce3\"", ",", "\"path\"", ":", "\"tpl_Surf_ce3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "279", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Surf_ce3/Surf_ce3_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Bird\"", ",", "\"path\"", ":", "\"tpl_Bird/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "99", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Bird/Bird_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Crossing\"", ",", "\"path\"", ":", "\"tpl_Crossing/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "120", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Crossing/Crossing_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Plate_ce1\"", ",", "\"path\"", ":", "\"tpl_Plate_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "142", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Plate_ce1/Plate_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Cup\"", ",", "\"path\"", ":", "\"tpl_Cup/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "303", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Cup/Cup_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Surf_ce2\"", ",", "\"path\"", ":", "\"tpl_Surf_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "391", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Surf_ce2/Surf_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Busstation_ce2\"", ",", "\"path\"", ":", "\"tpl_Busstation_ce2/img\"", ",", "\"startFrame\"", ":", "6", ",", "\"endFrame\"", ":", "400", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Busstation_ce2/Busstation_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Charger_ce\"", ",", "\"path\"", ":", "\"tpl_Charger_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "298", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Charger_ce/Charger_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Pool_ce1\"", ",", "\"path\"", ":", "\"tpl_Pool_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "166", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Pool_ce1/Pool_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_MountainBike\"", ",", "\"path\"", ":", "\"tpl_MountainBike/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "228", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_MountainBike/MountainBike_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Guitar_ce1\"", ",", "\"path\"", ":", "\"tpl_Guitar_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "268", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Guitar_ce1/Guitar_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Busstation_ce1\"", ",", "\"path\"", ":", "\"tpl_Busstation_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "363", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Busstation_ce1/Busstation_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Diving\"", ",", "\"path\"", ":", "\"tpl_Diving/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "231", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Diving/Diving_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Skating_ce1\"", ",", "\"path\"", ":", "\"tpl_Skating_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "409", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Skating_ce1/Skating_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Hurdle_ce2\"", ",", "\"path\"", ":", "\"tpl_Hurdle_ce2/img\"", ",", "\"startFrame\"", ":", "27", ",", "\"endFrame\"", ":", "330", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Hurdle_ce2/Hurdle_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Plate_ce2\"", ",", "\"path\"", ":", "\"tpl_Plate_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "181", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Plate_ce2/Plate_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_CarDark\"", ",", "\"path\"", ":", "\"tpl_CarDark/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "393", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_CarDark/CarDark_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Singer_ce2\"", ",", "\"path\"", ":", "\"tpl_Singer_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "999", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Singer_ce2/Singer_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Shaking\"", ",", "\"path\"", ":", "\"tpl_Shaking/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "365", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Shaking/Shaking_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Iceskater\"", ",", "\"path\"", ":", "\"tpl_Iceskater/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "500", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Iceskater/Iceskater_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Badminton_ce2\"", ",", "\"path\"", ":", "\"tpl_Badminton_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "705", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Badminton_ce2/Badminton_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Spiderman_ce\"", ",", "\"path\"", ":", "\"tpl_Spiderman_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "351", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Spiderman_ce/Spiderman_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Kite_ce1\"", ",", "\"path\"", ":", "\"tpl_Kite_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "484", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Kite_ce1/Kite_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Skyjumping_ce\"", ",", "\"path\"", ":", "\"tpl_Skyjumping_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "938", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Skyjumping_ce/Skyjumping_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Ball_ce1\"", ",", "\"path\"", ":", "\"tpl_Ball_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "391", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Ball_ce1/Ball_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Yo_yos_ce2\"", ",", "\"path\"", ":", "\"tpl_Yo_yos_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "454", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Yo_yos_ce2/Yo-yos_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Ironman\"", ",", "\"path\"", ":", "\"tpl_Ironman/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "166", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Ironman/Ironman_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_FaceOcc1\"", ",", "\"path\"", ":", "\"tpl_FaceOcc1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "892", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_FaceOcc1/FaceOcc1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Surf_ce1\"", ",", "\"path\"", ":", "\"tpl_Surf_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "404", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Surf_ce1/Surf_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Ring_ce\"", ",", "\"path\"", ":", "\"tpl_Ring_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "201", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Ring_ce/Ring_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Surf_ce4\"", ",", "\"path\"", ":", "\"tpl_Surf_ce4/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "135", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Surf_ce4/Surf_ce4_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Ball_ce4\"", ",", "\"path\"", ":", "\"tpl_Ball_ce4/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "538", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Ball_ce4/Ball_ce4_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Bikeshow_ce\"", ",", "\"path\"", ":", "\"tpl_Bikeshow_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "361", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Bikeshow_ce/Bikeshow_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Kobe_ce\"", ",", "\"path\"", ":", "\"tpl_Kobe_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "582", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Kobe_ce/Kobe_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Tiger1\"", ",", "\"path\"", ":", "\"tpl_Tiger1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "354", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Tiger1/Tiger1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Skiing\"", ",", "\"path\"", ":", "\"tpl_Skiing/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "81", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Skiing/Skiing_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Tennis_ce1\"", ",", "\"path\"", ":", "\"tpl_Tennis_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "454", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Tennis_ce1/Tennis_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Carchasing_ce4\"", ",", "\"path\"", ":", "\"tpl_Carchasing_ce4/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "442", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Carchasing_ce4/Carchasing_ce4_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Walking2\"", ",", "\"path\"", ":", "\"tpl_Walking2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "500", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Walking2/Walking2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Sailor_ce\"", ",", "\"path\"", ":", "\"tpl_Sailor_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "402", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Sailor_ce/Sailor_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Railwaystation_ce\"", ",", "\"path\"", ":", "\"tpl_Railwaystation_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "413", ",", "\n", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Railwaystation_ce/Railwaystation_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Bee_ce\"", ",", "\"path\"", ":", "\"tpl_Bee_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "90", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Bee_ce/Bee_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Girl\"", ",", "\"path\"", ":", "\"tpl_Girl/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "500", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Girl/Girl_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Subway\"", ",", "\"path\"", ":", "\"tpl_Subway/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "175", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Subway/Subway_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_David3\"", ",", "\"path\"", ":", "\"tpl_David3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "252", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_David3/David3_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Electricalbike_ce\"", ",", "\"path\"", ":", "\"tpl_Electricalbike_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "818", ",", "\n", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Electricalbike_ce/Electricalbike_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Michaeljackson_ce\"", ",", "\"path\"", ":", "\"tpl_Michaeljackson_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "393", ",", "\n", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Michaeljackson_ce/Michaeljackson_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Woman\"", ",", "\"path\"", ":", "\"tpl_Woman/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "597", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Woman/Woman_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_TableTennis_ce\"", ",", "\"path\"", ":", "\"tpl_TableTennis_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "198", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_TableTennis_ce/TableTennis_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Motorbike_ce\"", ",", "\"path\"", ":", "\"tpl_Motorbike_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "563", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Motorbike_ce/Motorbike_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Baby_ce\"", ",", "\"path\"", ":", "\"tpl_Baby_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "296", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Baby_ce/Baby_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Gym\"", ",", "\"path\"", ":", "\"tpl_Gym/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "766", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Gym/Gym_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Matrix\"", ",", "\"path\"", ":", "\"tpl_Matrix/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "100", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Matrix/Matrix_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Kite_ce3\"", ",", "\"path\"", ":", "\"tpl_Kite_ce3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "528", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Kite_ce3/Kite_ce3_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Fish_ce1\"", ",", "\"path\"", ":", "\"tpl_Fish_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "401", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Fish_ce1/Fish_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Hand_ce1\"", ",", "\"path\"", ":", "\"tpl_Hand_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "401", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Hand_ce1/Hand_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Doll\"", ",", "\"path\"", ":", "\"tpl_Doll/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "3872", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Doll/Doll_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Carchasing_ce3\"", ",", "\"path\"", ":", "\"tpl_Carchasing_ce3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "572", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Carchasing_ce3/Carchasing_ce3_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Thunder_ce\"", ",", "\"path\"", ":", "\"tpl_Thunder_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "375", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Thunder_ce/Thunder_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Singer2\"", ",", "\"path\"", ":", "\"tpl_Singer2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "366", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Singer2/Singer2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Basketball\"", ",", "\"path\"", ":", "\"tpl_Basketball/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "725", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Basketball/Basketball_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Hand\"", ",", "\"path\"", ":", "\"tpl_Hand/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "244", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Hand/Hand_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Cup_ce\"", ",", "\"path\"", ":", "\"tpl_Cup_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "338", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Cup_ce/Cup_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_MotorRolling\"", ",", "\"path\"", ":", "\"tpl_MotorRolling/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "164", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_MotorRolling/MotorRolling_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Boat_ce2\"", ",", "\"path\"", ":", "\"tpl_Boat_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "412", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Boat_ce2/Boat_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_CarScale\"", ",", "\"path\"", ":", "\"tpl_CarScale/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "252", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_CarScale/CarScale_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Sunshade\"", ",", "\"path\"", ":", "\"tpl_Sunshade/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "172", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Sunshade/Sunshade_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Football1\"", ",", "\"path\"", ":", "\"tpl_Football1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "74", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Football1/Football1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Singer1\"", ",", "\"path\"", ":", "\"tpl_Singer1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "351", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Singer1/Singer1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Hurdle_ce1\"", ",", "\"path\"", ":", "\"tpl_Hurdle_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "300", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Hurdle_ce1/Hurdle_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Basketball_ce3\"", ",", "\"path\"", ":", "\"tpl_Basketball_ce3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "441", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Basketball_ce3/Basketball_ce3_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Toyplane_ce\"", ",", "\"path\"", ":", "\"tpl_Toyplane_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "405", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Toyplane_ce/Toyplane_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Skating1\"", ",", "\"path\"", ":", "\"tpl_Skating1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "400", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Skating1/Skating1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Juice\"", ",", "\"path\"", ":", "\"tpl_Juice/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "404", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Juice/Juice_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Biker\"", ",", "\"path\"", ":", "\"tpl_Biker/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "180", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Biker/Biker_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Boy\"", ",", "\"path\"", ":", "\"tpl_Boy/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "602", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Boy/Boy_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Jogging1\"", ",", "\"path\"", ":", "\"tpl_Jogging1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "307", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Jogging1/Jogging1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Deer\"", ",", "\"path\"", ":", "\"tpl_Deer/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "71", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Deer/Deer_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Panda\"", ",", "\"path\"", ":", "\"tpl_Panda/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "241", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Panda/Panda_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Coke\"", ",", "\"path\"", ":", "\"tpl_Coke/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "291", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Coke/Coke_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Carchasing_ce1\"", ",", "\"path\"", ":", "\"tpl_Carchasing_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "501", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Carchasing_ce1/Carchasing_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Badminton_ce1\"", ",", "\"path\"", ":", "\"tpl_Badminton_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "579", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Badminton_ce1/Badminton_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Trellis\"", ",", "\"path\"", ":", "\"tpl_Trellis/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "569", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Trellis/Trellis_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Face_ce2\"", ",", "\"path\"", ":", "\"tpl_Face_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "148", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Face_ce2/Face_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Ball_ce2\"", ",", "\"path\"", ":", "\"tpl_Ball_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "603", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Ball_ce2/Ball_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Skiing_ce\"", ",", "\"path\"", ":", "\"tpl_Skiing_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "511", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Skiing_ce/Skiing_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Jogging2\"", ",", "\"path\"", ":", "\"tpl_Jogging2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "307", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Jogging2/Jogging2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Bike_ce1\"", ",", "\"path\"", ":", "\"tpl_Bike_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "801", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Bike_ce1/Bike_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Bike_ce2\"", ",", "\"path\"", ":", "\"tpl_Bike_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "812", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Bike_ce2/Bike_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Ball_ce3\"", ",", "\"path\"", ":", "\"tpl_Ball_ce3/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "273", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Ball_ce3/Ball_ce3_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Girlmov\"", ",", "\"path\"", ":", "\"tpl_Girlmov/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1500", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Girlmov/Girlmov_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Bolt\"", ",", "\"path\"", ":", "\"tpl_Bolt/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "350", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Bolt/Bolt_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Basketball_ce2\"", ",", "\"path\"", ":", "\"tpl_Basketball_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "455", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Basketball_ce2/Basketball_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Bicycle\"", ",", "\"path\"", ":", "\"tpl_Bicycle/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "271", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Bicycle/Bicycle_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Face_ce\"", ",", "\"path\"", ":", "\"tpl_Face_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "620", ",", "\"nz\"", ":", "4", ",", "\"ext\"", ":", "\"jpg\"", ",", "\n", "\"anno_path\"", ":", "\"tpl_Face_ce/Face_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Basketball_ce1\"", ",", "\"path\"", ":", "\"tpl_Basketball_ce1/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "496", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Basketball_ce1/Basketball_ce1_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Messi_ce\"", ",", "\"path\"", ":", "\"tpl_Messi_ce/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "272", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Messi_ce/Messi_ce_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Tennis_ce2\"", ",", "\"path\"", ":", "\"tpl_Tennis_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "305", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Tennis_ce2/Tennis_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Microphone_ce2\"", ",", "\"path\"", ":", "\"tpl_Microphone_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "103", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Microphone_ce2/Microphone_ce2_gt.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"tpl_Guitar_ce2\"", ",", "\"path\"", ":", "\"tpl_Guitar_ce2/img\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "313", ",", "\"nz\"", ":", "4", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"tpl_Guitar_ce2/Guitar_ce2_gt.txt\"", "}", "\n", "\n", "]", "\n", "\n", "otb_sequences", "=", "[", "'tpl_Skating2'", ",", "'tpl_Lemming'", ",", "'tpl_Board'", ",", "'tpl_Soccer'", ",", "'tpl_Liquor'", ",", "'tpl_Couple'", ",", "'tpl_Walking'", ",", "'tpl_David'", ",", "'tpl_Tiger2'", ",", "'tpl_Bird'", ",", "'tpl_Crossing'", ",", "'tpl_MountainBike'", ",", "\n", "'tpl_Diving'", ",", "'tpl_CarDark'", ",", "'tpl_Shaking'", ",", "'tpl_Ironman'", ",", "'tpl_FaceOcc1'", ",", "'tpl_Tiger1'", ",", "'tpl_Skiing'", ",", "'tpl_Walking2'", ",", "'tpl_Girl'", ",", "'tpl_Girlmov'", ",", "'tpl_Subway'", ",", "'tpl_David3'", ",", "'tpl_Woman'", ",", "\n", "'tpl_Gym'", ",", "'tpl_Matrix'", ",", "'tpl_Doll'", ",", "'tpl_Singer2'", ",", "'tpl_Basketball'", ",", "'tpl_MotorRolling'", ",", "'tpl_CarScale'", ",", "'tpl_Football1'", ",", "'tpl_Singer1'", ",", "'tpl_Skating1'", ",", "'tpl_Biker'", ",", "\n", "'tpl_Boy'", ",", "'tpl_Jogging1'", ",", "'tpl_Deer'", ",", "'tpl_Panda'", ",", "'tpl_Coke'", ",", "'tpl_Trellis'", ",", "'tpl_Jogging2'", ",", "'tpl_Bolt'", ",", "]", "\n", "if", "exclude_otb", ":", "\n", "            ", "sequence_info_list_nootb", "=", "[", "]", "\n", "for", "seq", "in", "sequence_info_list", ":", "\n", "                ", "if", "seq", "[", "'name'", "]", "not", "in", "otb_sequences", ":", "\n", "                    ", "sequence_info_list_nootb", ".", "append", "(", "seq", ")", "\n", "\n", "", "", "sequence_info_list", "=", "sequence_info_list_nootb", "\n", "\n", "", "return", "sequence_info_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tpldataset.TPLDataset": [[5, 7], ["tpldataset.TPLDatasetClass.get_sequence_list", "tpldataset.TPLDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["def", "TPLDataset", "(", ")", ":", "\n", "    ", "return", "TPLDatasetClass", "(", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.tpldataset.TPLDatasetNoOtb": [[9, 11], ["tpldataset.TPLDatasetClass.get_sequence_list", "tpldataset.TPLDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["", "def", "TPLDatasetNoOtb", "(", ")", ":", "\n", "    ", "return", "TPLDatasetClass", "(", "exclude_otb", "=", "True", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uavdataset.UAVDatasetClass.__init__": [[20, 24], ["pytracking.evaluation.data.BaseDataset.__init__", "uavdataset.UAVDatasetClass._get_sequence_info_list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._get_sequence_info_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "uav_path", "\n", "self", ".", "sequence_info_list", "=", "self", ".", "_get_sequence_info_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uavdataset.UAVDatasetClass.get_sequence_list": [[25, 27], ["pytracking.evaluation.data.SequenceList", "uavdataset.UAVDatasetClass._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_info_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uavdataset.UAVDatasetClass._construct_sequence": [[28, 50], ["pytracking.evaluation.data.Sequence", "numpy.loadtxt", "range", "str", "numpy.loadtxt", "str"], "methods", ["None"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_info", ")", ":", "\n", "        ", "sequence_path", "=", "sequence_info", "[", "'path'", "]", "\n", "nz", "=", "sequence_info", "[", "'nz'", "]", "\n", "ext", "=", "sequence_info", "[", "'ext'", "]", "\n", "start_frame", "=", "sequence_info", "[", "'startFrame'", "]", "\n", "end_frame", "=", "sequence_info", "[", "'endFrame'", "]", "\n", "\n", "init_omit", "=", "0", "\n", "if", "'initOmit'", "in", "sequence_info", ":", "\n", "            ", "init_omit", "=", "sequence_info", "[", "'initOmit'", "]", "\n", "\n", "", "frames", "=", "[", "'{base_path}/{sequence_path}/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "frame", "=", "frame_num", ",", "nz", "=", "nz", ",", "ext", "=", "ext", ")", "for", "frame_num", "in", "range", "(", "start_frame", "+", "init_omit", ",", "end_frame", "+", "1", ")", "]", "\n", "\n", "anno_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_info", "[", "'anno_path'", "]", ")", "\n", "\n", "try", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "except", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "return", "Sequence", "(", "sequence_info", "[", "'name'", "]", ",", "frames", ",", "ground_truth_rect", "[", "init_omit", ":", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uavdataset.UAVDatasetClass.__len__": [[51, 53], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_info_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uavdataset.UAVDatasetClass._get_sequence_info_list": [[55, 306], ["None"], "methods", ["None"], ["", "def", "_get_sequence_info_list", "(", "self", ")", ":", "\n", "        ", "sequence_info_list", "=", "[", "\n", "{", "\"name\"", ":", "\"uav_bike1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/bike1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "3085", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/bike1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_bike2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/bike2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "553", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/bike2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_bike3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/bike3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "433", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/bike3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_bird1_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/bird1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "253", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/bird1_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_bird1_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/bird1\"", ",", "\"startFrame\"", ":", "775", ",", "\"endFrame\"", ":", "1477", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/bird1_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_bird1_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/bird1\"", ",", "\"startFrame\"", ":", "1573", ",", "\"endFrame\"", ":", "2437", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/bird1_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "901", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "799", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "901", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "553", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat4.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat5\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "505", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat5.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat6\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "805", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat6.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat7\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "535", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat7.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat8\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "685", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat8.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_boat9\"", ",", "\"path\"", ":", "\"data_seq/UAV123/boat9\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1399", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/boat9.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_building1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/building1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "469", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/building1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_building2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/building2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "577", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/building2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_building3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/building3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "829", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/building3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_building4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/building4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "787", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/building4.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_building5\"", ",", "\"path\"", ":", "\"data_seq/UAV123/building5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "481", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/building5.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car1_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "751", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car1_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car1_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car1\"", ",", "\"startFrame\"", ":", "751", ",", "\"endFrame\"", ":", "1627", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car1_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car1_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car1\"", ",", "\"startFrame\"", ":", "1627", ",", "\"endFrame\"", ":", "2629", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car1_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car10\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car10\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1405", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car10.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car11\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car11\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "337", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car11.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car12\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car12\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "499", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car12.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car13\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car13\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "415", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car13.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car14\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car14\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1327", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car14.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car15\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car15\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "469", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car15.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car16_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car16\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "415", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car16_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car16_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car16\"", ",", "\"startFrame\"", ":", "415", ",", "\"endFrame\"", ":", "1993", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car16_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car17\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car17\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1057", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car17.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car18\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car18\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1207", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car18.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car1_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car1_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1475", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car1_s.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1321", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car2_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car2_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "320", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car2_s.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1717", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car3_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car3_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1300", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car3_s.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1345", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car4.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car4_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car4_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "830", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car4_s.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car5\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "745", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car5.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car6_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "487", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car6_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car6_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car6\"", ",", "\"startFrame\"", ":", "487", ",", "\"endFrame\"", ":", "1807", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car6_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car6_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car6\"", ",", "\"startFrame\"", ":", "1807", ",", "\"endFrame\"", ":", "2953", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car6_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car6_4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car6\"", ",", "\"startFrame\"", ":", "2953", ",", "\"endFrame\"", ":", "3925", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car6_4.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car6_5\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car6\"", ",", "\"startFrame\"", ":", "3925", ",", "\"endFrame\"", ":", "4861", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car6_5.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car7\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1033", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car7.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car8_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1357", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car8_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car8_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car8\"", ",", "\"startFrame\"", ":", "1357", ",", "\"endFrame\"", ":", "2575", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car8_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_car9\"", ",", "\"path\"", ":", "\"data_seq/UAV123/car9\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1879", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/car9.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group1_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1333", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group1_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group1_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group1\"", ",", "\"startFrame\"", ":", "1333", ",", "\"endFrame\"", ":", "2515", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group1_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group1_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group1\"", ",", "\"startFrame\"", ":", "2515", ",", "\"endFrame\"", ":", "3925", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group1_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group1_4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group1\"", ",", "\"startFrame\"", ":", "3925", ",", "\"endFrame\"", ":", "4873", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group1_4.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group2_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "907", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group2_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group2_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group2\"", ",", "\"startFrame\"", ":", "907", ",", "\"endFrame\"", ":", "1771", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group2_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group2_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group2\"", ",", "\"startFrame\"", ":", "1771", ",", "\"endFrame\"", ":", "2683", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group2_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group3_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1567", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group3_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group3_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group3\"", ",", "\"startFrame\"", ":", "1567", ",", "\"endFrame\"", ":", "2827", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group3_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group3_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group3\"", ",", "\"startFrame\"", ":", "2827", ",", "\"endFrame\"", ":", "4369", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group3_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_group3_4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/group3\"", ",", "\"startFrame\"", ":", "4369", ",", "\"endFrame\"", ":", "5527", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/group3_4.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "799", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person10\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person10\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1021", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person10.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person11\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person11\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "721", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person11.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person12_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person12\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "601", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person12_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person12_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person12\"", ",", "\"startFrame\"", ":", "601", ",", "\"endFrame\"", ":", "1621", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person12_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person13\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person13\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "883", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person13.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person14_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person14\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "847", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person14_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person14_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person14\"", ",", "\"startFrame\"", ":", "847", ",", "\"endFrame\"", ":", "1813", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person14_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person14_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person14\"", ",", "\"startFrame\"", ":", "1813", ",", "\"endFrame\"", ":", "2923", ",", "\n", "\"nz\"", ":", "6", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person14_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person15\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person15\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1339", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person15.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person16\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person16\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1147", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person16.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person17_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person17\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1501", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person17_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person17_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person17\"", ",", "\"startFrame\"", ":", "1501", ",", "\"endFrame\"", ":", "2347", ",", "\n", "\"nz\"", ":", "6", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person17_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person18\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person18\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1393", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person18.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person19_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person19\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1243", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person19_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person19_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person19\"", ",", "\"startFrame\"", ":", "1243", ",", "\"endFrame\"", ":", "2791", ",", "\n", "\"nz\"", ":", "6", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person19_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person19_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person19\"", ",", "\"startFrame\"", ":", "2791", ",", "\"endFrame\"", ":", "4357", ",", "\n", "\"nz\"", ":", "6", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person19_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person1_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person1_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1600", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person1_s.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person2_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1189", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person2_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person2_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person2\"", ",", "\"startFrame\"", ":", "1189", ",", "\"endFrame\"", ":", "2623", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person2_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person20\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person20\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1783", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person20.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person21\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person21\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "487", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person21.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person22\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person22\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "199", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person22.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person23\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person23\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "397", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person23.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person2_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person2_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "250", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person2_s.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "643", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person3_s\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person3_s\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "505", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person3_s.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person4_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1501", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person4_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person4_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person4\"", ",", "\"startFrame\"", ":", "1501", ",", "\"endFrame\"", ":", "2743", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person4_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person5_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "877", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person5_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person5_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person5\"", ",", "\"startFrame\"", ":", "877", ",", "\"endFrame\"", ":", "2101", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person5_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person6\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "901", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person6.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person7_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1249", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person7_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person7_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person7\"", ",", "\"startFrame\"", ":", "1249", ",", "\"endFrame\"", ":", "2065", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person7_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person8_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1075", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person8_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person8_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person8\"", ",", "\"startFrame\"", ":", "1075", ",", "\"endFrame\"", ":", "1525", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person8_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_person9\"", ",", "\"path\"", ":", "\"data_seq/UAV123/person9\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "661", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/person9.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_truck1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/truck1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "463", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/truck1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_truck2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/truck2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "385", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/truck2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_truck3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/truck3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "535", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/truck3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_truck4_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/truck4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "577", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/truck4_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_truck4_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/truck4\"", ",", "\"startFrame\"", ":", "577", ",", "\"endFrame\"", ":", "1261", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/truck4_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav1_1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1555", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav1_1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav1_2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav1\"", ",", "\"startFrame\"", ":", "1555", ",", "\"endFrame\"", ":", "2377", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav1_2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav1_3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav1\"", ",", "\"startFrame\"", ":", "2473", ",", "\"endFrame\"", ":", "3469", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav1_3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "133", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "265", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "157", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav4.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav5\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "139", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav5.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav6\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "109", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav6.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav7\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "373", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav7.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_uav8\"", ",", "\"path\"", ":", "\"data_seq/UAV123/uav8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "301", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/uav8.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard1\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard1\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "421", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard1.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard10\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard10\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "469", ",", "\n", "\"nz\"", ":", "6", ",", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard10.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard2\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard2\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "733", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard2.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard3\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard3\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "823", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard3.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard4\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard4\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "697", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard4.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard5\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard5\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1675", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard5.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard6\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard6\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1165", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard6.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard7\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard7\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "199", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard7.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard8\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard8\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "1543", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard8.txt\"", "}", ",", "\n", "{", "\"name\"", ":", "\"uav_wakeboard9\"", ",", "\"path\"", ":", "\"data_seq/UAV123/wakeboard9\"", ",", "\"startFrame\"", ":", "1", ",", "\"endFrame\"", ":", "355", ",", "\"nz\"", ":", "6", ",", "\n", "\"ext\"", ":", "\"jpg\"", ",", "\"anno_path\"", ":", "\"anno/UAV123/wakeboard9.txt\"", "}", "\n", "]", "\n", "\n", "return", "sequence_info_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.uavdataset.UAVDataset": [[5, 7], ["uavdataset.UAVDatasetClass.get_sequence_list", "uavdataset.UAVDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["def", "UAVDataset", "(", ")", ":", "\n", "    ", "return", "UAVDatasetClass", "(", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.got10kdataset.GOT10KDatasetClass.__init__": [[32, 47], ["pytracking.evaluation.data.BaseDataset.__init__", "got10kdataset.GOT10KDatasetClass._get_sequence_list", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq._get_sequence_list"], ["def", "__init__", "(", "self", ",", "split", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            split - Split to use. Can be i) 'test': official test set, ii) 'val': official val set, and iii) 'ltrval':\n                    a custom validation set, a subset of the official train set.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Split can be test, val, or ltrval", "\n", "if", "split", "==", "'test'", "or", "split", "==", "'val'", ":", "\n", "            ", "self", ".", "base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "env_settings", ".", "got10k_path", ",", "split", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "base_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "env_settings", ".", "got10k_path", ",", "'train'", ")", "\n", "\n", "", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", "split", ")", "\n", "self", ".", "split", "=", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.got10kdataset.GOT10KDatasetClass.get_sequence_list": [[48, 50], ["pytracking.evaluation.data.SequenceList", "got10kdataset.GOT10KDatasetClass._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.got10kdataset.GOT10KDatasetClass._construct_sequence": [[51, 64], ["frame_list.sort", "pytracking.evaluation.data.Sequence", "numpy.loadtxt", "os.path.join", "numpy.loadtxt.reshape", "str", "numpy.loadtxt", "os.listdir", "frame.endswith", "str", "int"], "methods", ["None"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_name", ")", ":", "\n", "        ", "anno_path", "=", "'{}/{}/groundtruth.txt'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_name", ")", "\n", "try", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "except", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "frames_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "base_path", ",", "sequence_name", ")", "\n", "frame_list", "=", "[", "frame", "for", "frame", "in", "os", ".", "listdir", "(", "frames_path", ")", "if", "frame", ".", "endswith", "(", "\".jpg\"", ")", "]", "\n", "frame_list", ".", "sort", "(", "key", "=", "lambda", "f", ":", "int", "(", "f", "[", ":", "-", "4", "]", ")", ")", "\n", "frames_list", "=", "[", "os", ".", "path", ".", "join", "(", "frames_path", ",", "frame", ")", "for", "frame", "in", "frame_list", "]", "\n", "\n", "return", "Sequence", "(", "sequence_name", ",", "frames_list", ",", "ground_truth_rect", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.got10kdataset.GOT10KDatasetClass.__len__": [[65, 68], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'''Overload this function in your evaluation. This should return number of sequences in the evaluation '''", "\n", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.got10kdataset.GOT10KDatasetClass._get_sequence_list": [[69, 79], ["open", "f.read().splitlines", "open", "f.read().splitlines", "f.read", "f.read", "int"], "methods", ["None"], ["", "def", "_get_sequence_list", "(", "self", ",", "split", ")", ":", "\n", "        ", "with", "open", "(", "'{}/list.txt'", ".", "format", "(", "self", ".", "base_path", ")", ")", "as", "f", ":", "\n", "            ", "sequence_list", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "if", "split", "==", "'ltrval'", ":", "\n", "            ", "with", "open", "(", "'{}/got10k_val_split.txt'", ".", "format", "(", "self", ".", "env_settings", ".", "dataspec_path", ")", ")", "as", "f", ":", "\n", "                ", "seq_ids", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "sequence_list", "=", "[", "sequence_list", "[", "int", "(", "x", ")", "]", "for", "x", "in", "seq_ids", "]", "\n", "", "return", "sequence_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.got10kdataset.GOT10KDatasetTest": [[6, 9], ["got10kdataset.GOT10KDatasetClass.get_sequence_list", "got10kdataset.GOT10KDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["def", "GOT10KDatasetTest", "(", ")", ":", "\n", "    ", "\"\"\" GOT-10k official test set\"\"\"", "\n", "return", "GOT10KDatasetClass", "(", "'test'", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.got10kdataset.GOT10KDatasetVal": [[11, 14], ["got10kdataset.GOT10KDatasetClass.get_sequence_list", "got10kdataset.GOT10KDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["", "def", "GOT10KDatasetVal", "(", ")", ":", "\n", "    ", "\"\"\" GOT-10k official val set\"\"\"", "\n", "return", "GOT10KDatasetClass", "(", "'val'", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.got10kdataset.GOT10KDatasetLTRVal": [[16, 19], ["got10kdataset.GOT10KDatasetClass.get_sequence_list", "got10kdataset.GOT10KDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["", "def", "GOT10KDatasetLTRVal", "(", ")", ":", "\n", "    ", "\"\"\" GOT-10k val split from LTR (a subset of GOT-10k official train set)\"\"\"", "\n", "return", "GOT10KDatasetClass", "(", "'ltrval'", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.lasotdataset.LaSOTDatasetClass.__init__": [[21, 26], ["pytracking.evaluation.data.BaseDataset.__init__", "lasotdataset.LaSOTDatasetClass._get_sequence_list", "lasotdataset.LaSOTDatasetClass.clean_seq_list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq._get_sequence_list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.lasotdataset.LaSOTDatasetClass.clean_seq_list"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "lasot_path", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", ")", "\n", "self", ".", "clean_list", "=", "self", ".", "clean_seq_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.lasotdataset.LaSOTDatasetClass.clean_seq_list": [[27, 33], ["range", "len", "lasotdataset.LaSOTDatasetClass.sequence_list[].split", "clean_lst.append"], "methods", ["None"], ["", "def", "clean_seq_list", "(", "self", ")", ":", "\n", "        ", "clean_lst", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "sequence_list", ")", ")", ":", "\n", "            ", "cls", ",", "_", "=", "self", ".", "sequence_list", "[", "i", "]", ".", "split", "(", "'-'", ")", "\n", "clean_lst", ".", "append", "(", "cls", ")", "\n", "", "return", "clean_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.lasotdataset.LaSOTDatasetClass.get_sequence_list": [[34, 36], ["pytracking.evaluation.data.SequenceList", "lasotdataset.LaSOTDatasetClass._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.lasotdataset.LaSOTDatasetClass._construct_sequence": [[37, 51], ["frame_list.sort", "pytracking.evaluation.data.Sequence", "sequence_name.split", "numpy.loadtxt", "os.path.join", "numpy.loadtxt.reshape", "str", "numpy.loadtxt", "os.listdir", "frame.endswith", "str", "int"], "methods", ["None"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_name", ")", ":", "\n", "        ", "class_name", "=", "sequence_name", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "anno_path", "=", "'{}/{}/{}/groundtruth.txt'", ".", "format", "(", "self", ".", "base_path", ",", "class_name", ",", "sequence_name", ")", "\n", "try", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "", "except", ":", "\n", "            ", "ground_truth_rect", "=", "np", ".", "loadtxt", "(", "str", "(", "anno_path", ")", ",", "delimiter", "=", "','", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "frames_path", "=", "'{}/{}/{}/img'", ".", "format", "(", "self", ".", "base_path", ",", "class_name", ",", "sequence_name", ")", "\n", "frame_list", "=", "[", "frame", "for", "frame", "in", "os", ".", "listdir", "(", "frames_path", ")", "if", "frame", ".", "endswith", "(", "\".jpg\"", ")", "]", "\n", "frame_list", ".", "sort", "(", "key", "=", "lambda", "f", ":", "int", "(", "f", "[", ":", "-", "4", "]", ")", ")", "\n", "frames_list", "=", "[", "os", ".", "path", ".", "join", "(", "frames_path", ",", "frame", ")", "for", "frame", "in", "frame_list", "]", "\n", "\n", "return", "Sequence", "(", "sequence_name", ",", "frames_list", ",", "ground_truth_rect", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.lasotdataset.LaSOTDatasetClass.__len__": [[52, 54], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.lasotdataset.LaSOTDatasetClass._get_sequence_list": [[55, 337], ["None"], "methods", ["None"], ["", "def", "_get_sequence_list", "(", "self", ")", ":", "\n", "        ", "sequence_list", "=", "[", "'airplane-1'", ",", "\n", "'airplane-9'", ",", "\n", "'airplane-13'", ",", "\n", "'airplane-15'", ",", "\n", "'basketball-1'", ",", "\n", "'basketball-6'", ",", "\n", "'basketball-7'", ",", "\n", "'basketball-11'", ",", "\n", "'bear-2'", ",", "\n", "'bear-4'", ",", "\n", "'bear-6'", ",", "\n", "'bear-17'", ",", "\n", "'bicycle-2'", ",", "\n", "'bicycle-7'", ",", "\n", "'bicycle-9'", ",", "\n", "'bicycle-18'", ",", "\n", "'bird-2'", ",", "\n", "'bird-3'", ",", "\n", "'bird-15'", ",", "\n", "'bird-17'", ",", "\n", "'boat-3'", ",", "\n", "'boat-4'", ",", "\n", "'boat-12'", ",", "\n", "'boat-17'", ",", "\n", "'book-3'", ",", "\n", "'book-10'", ",", "\n", "'book-11'", ",", "\n", "'book-19'", ",", "\n", "'bottle-1'", ",", "\n", "'bottle-12'", ",", "\n", "'bottle-14'", ",", "\n", "'bottle-18'", ",", "\n", "'bus-2'", ",", "\n", "'bus-5'", ",", "\n", "'bus-17'", ",", "\n", "'bus-19'", ",", "\n", "'car-2'", ",", "\n", "'car-6'", ",", "\n", "'car-9'", ",", "\n", "'car-17'", ",", "\n", "'cat-1'", ",", "\n", "'cat-3'", ",", "\n", "'cat-18'", ",", "\n", "'cat-20'", ",", "\n", "'cattle-2'", ",", "\n", "'cattle-7'", ",", "\n", "'cattle-12'", ",", "\n", "'cattle-13'", ",", "\n", "'spider-14'", ",", "\n", "'spider-16'", ",", "\n", "'spider-18'", ",", "\n", "'spider-20'", ",", "\n", "'coin-3'", ",", "\n", "'coin-6'", ",", "\n", "'coin-7'", ",", "\n", "'coin-18'", ",", "\n", "'crab-3'", ",", "\n", "'crab-6'", ",", "\n", "'crab-12'", ",", "\n", "'crab-18'", ",", "\n", "'surfboard-12'", ",", "\n", "'surfboard-4'", ",", "\n", "'surfboard-5'", ",", "\n", "'surfboard-8'", ",", "\n", "'cup-1'", ",", "\n", "'cup-4'", ",", "\n", "'cup-7'", ",", "\n", "'cup-17'", ",", "\n", "'deer-4'", ",", "\n", "'deer-8'", ",", "\n", "'deer-10'", ",", "\n", "'deer-14'", ",", "\n", "'dog-1'", ",", "\n", "'dog-7'", ",", "\n", "'dog-15'", ",", "\n", "'dog-19'", ",", "\n", "'guitar-3'", ",", "\n", "'guitar-8'", ",", "\n", "'guitar-10'", ",", "\n", "'guitar-16'", ",", "\n", "'person-1'", ",", "\n", "'person-5'", ",", "\n", "'person-10'", ",", "\n", "'person-12'", ",", "\n", "'pig-2'", ",", "\n", "'pig-10'", ",", "\n", "'pig-13'", ",", "\n", "'pig-18'", ",", "\n", "'rubicCube-1'", ",", "\n", "'rubicCube-6'", ",", "\n", "'rubicCube-14'", ",", "\n", "'rubicCube-19'", ",", "\n", "'swing-10'", ",", "\n", "'swing-14'", ",", "\n", "'swing-17'", ",", "\n", "'swing-20'", ",", "\n", "'drone-13'", ",", "\n", "'drone-15'", ",", "\n", "'drone-2'", ",", "\n", "'drone-7'", ",", "\n", "'pool-12'", ",", "\n", "'pool-15'", ",", "\n", "'pool-3'", ",", "\n", "'pool-7'", ",", "\n", "'rabbit-10'", ",", "\n", "'rabbit-13'", ",", "\n", "'rabbit-17'", ",", "\n", "'rabbit-19'", ",", "\n", "'racing-10'", ",", "\n", "'racing-15'", ",", "\n", "'racing-16'", ",", "\n", "'racing-20'", ",", "\n", "'robot-1'", ",", "\n", "'robot-19'", ",", "\n", "'robot-5'", ",", "\n", "'robot-8'", ",", "\n", "'sepia-13'", ",", "\n", "'sepia-16'", ",", "\n", "'sepia-6'", ",", "\n", "'sepia-8'", ",", "\n", "'sheep-3'", ",", "\n", "'sheep-5'", ",", "\n", "'sheep-7'", ",", "\n", "'sheep-9'", ",", "\n", "'skateboard-16'", ",", "\n", "'skateboard-19'", ",", "\n", "'skateboard-3'", ",", "\n", "'skateboard-8'", ",", "\n", "'tank-14'", ",", "\n", "'tank-16'", ",", "\n", "'tank-6'", ",", "\n", "'tank-9'", ",", "\n", "'tiger-12'", ",", "\n", "'tiger-18'", ",", "\n", "'tiger-4'", ",", "\n", "'tiger-6'", ",", "\n", "'train-1'", ",", "\n", "'train-11'", ",", "\n", "'train-20'", ",", "\n", "'train-7'", ",", "\n", "'truck-16'", ",", "\n", "'truck-3'", ",", "\n", "'truck-6'", ",", "\n", "'truck-7'", ",", "\n", "'turtle-16'", ",", "\n", "'turtle-5'", ",", "\n", "'turtle-8'", ",", "\n", "'turtle-9'", ",", "\n", "'umbrella-17'", ",", "\n", "'umbrella-19'", ",", "\n", "'umbrella-2'", ",", "\n", "'umbrella-9'", ",", "\n", "'yoyo-15'", ",", "\n", "'yoyo-17'", ",", "\n", "'yoyo-19'", ",", "\n", "'yoyo-7'", ",", "\n", "'zebra-10'", ",", "\n", "'zebra-14'", ",", "\n", "'zebra-16'", ",", "\n", "'zebra-17'", ",", "\n", "'elephant-1'", ",", "\n", "'elephant-12'", ",", "\n", "'elephant-16'", ",", "\n", "'elephant-18'", ",", "\n", "'goldfish-3'", ",", "\n", "'goldfish-7'", ",", "\n", "'goldfish-8'", ",", "\n", "'goldfish-10'", ",", "\n", "'hat-1'", ",", "\n", "'hat-2'", ",", "\n", "'hat-5'", ",", "\n", "'hat-18'", ",", "\n", "'kite-4'", ",", "\n", "'kite-6'", ",", "\n", "'kite-10'", ",", "\n", "'kite-15'", ",", "\n", "'motorcycle-1'", ",", "\n", "'motorcycle-3'", ",", "\n", "'motorcycle-9'", ",", "\n", "'motorcycle-18'", ",", "\n", "'mouse-1'", ",", "\n", "'mouse-8'", ",", "\n", "'mouse-9'", ",", "\n", "'mouse-17'", ",", "\n", "'flag-3'", ",", "\n", "'flag-9'", ",", "\n", "'flag-5'", ",", "\n", "'flag-2'", ",", "\n", "'frog-3'", ",", "\n", "'frog-4'", ",", "\n", "'frog-20'", ",", "\n", "'frog-9'", ",", "\n", "'gametarget-1'", ",", "\n", "'gametarget-2'", ",", "\n", "'gametarget-7'", ",", "\n", "'gametarget-13'", ",", "\n", "'hand-2'", ",", "\n", "'hand-3'", ",", "\n", "'hand-9'", ",", "\n", "'hand-16'", ",", "\n", "'helmet-5'", ",", "\n", "'helmet-11'", ",", "\n", "'helmet-19'", ",", "\n", "'helmet-13'", ",", "\n", "'licenseplate-6'", ",", "\n", "'licenseplate-12'", ",", "\n", "'licenseplate-13'", ",", "\n", "'licenseplate-15'", ",", "\n", "'electricfan-1'", ",", "\n", "'electricfan-10'", ",", "\n", "'electricfan-18'", ",", "\n", "'electricfan-20'", ",", "\n", "'chameleon-3'", ",", "\n", "'chameleon-6'", ",", "\n", "'chameleon-11'", ",", "\n", "'chameleon-20'", ",", "\n", "'crocodile-3'", ",", "\n", "'crocodile-4'", ",", "\n", "'crocodile-10'", ",", "\n", "'crocodile-14'", ",", "\n", "'gecko-1'", ",", "\n", "'gecko-5'", ",", "\n", "'gecko-16'", ",", "\n", "'gecko-19'", ",", "\n", "'fox-2'", ",", "\n", "'fox-3'", ",", "\n", "'fox-5'", ",", "\n", "'fox-20'", ",", "\n", "'giraffe-2'", ",", "\n", "'giraffe-10'", ",", "\n", "'giraffe-13'", ",", "\n", "'giraffe-15'", ",", "\n", "'gorilla-4'", ",", "\n", "'gorilla-6'", ",", "\n", "'gorilla-9'", ",", "\n", "'gorilla-13'", ",", "\n", "'hippo-1'", ",", "\n", "'hippo-7'", ",", "\n", "'hippo-9'", ",", "\n", "'hippo-20'", ",", "\n", "'horse-1'", ",", "\n", "'horse-4'", ",", "\n", "'horse-12'", ",", "\n", "'horse-15'", ",", "\n", "'kangaroo-2'", ",", "\n", "'kangaroo-5'", ",", "\n", "'kangaroo-11'", ",", "\n", "'kangaroo-14'", ",", "\n", "'leopard-1'", ",", "\n", "'leopard-7'", ",", "\n", "'leopard-16'", ",", "\n", "'leopard-20'", ",", "\n", "'lion-1'", ",", "\n", "'lion-5'", ",", "\n", "'lion-12'", ",", "\n", "'lion-20'", ",", "\n", "'lizard-1'", ",", "\n", "'lizard-3'", ",", "\n", "'lizard-6'", ",", "\n", "'lizard-13'", ",", "\n", "'microphone-2'", ",", "\n", "'microphone-6'", ",", "\n", "'microphone-14'", ",", "\n", "'microphone-16'", ",", "\n", "'monkey-3'", ",", "\n", "'monkey-4'", ",", "\n", "'monkey-9'", ",", "\n", "'monkey-17'", ",", "\n", "'shark-2'", ",", "\n", "'shark-3'", ",", "\n", "'shark-5'", ",", "\n", "'shark-6'", ",", "\n", "'squirrel-8'", ",", "\n", "'squirrel-11'", ",", "\n", "'squirrel-13'", ",", "\n", "'squirrel-19'", ",", "\n", "'volleyball-1'", ",", "\n", "'volleyball-13'", ",", "\n", "'volleyball-18'", ",", "\n", "'volleyball-19'", "]", "\n", "return", "sequence_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.lasotdataset.LaSOTDataset": [[6, 8], ["lasotdataset.LaSOTDatasetClass.get_sequence_list", "lasotdataset.LaSOTDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["def", "LaSOTDataset", "(", ")", ":", "\n", "    ", "return", "LaSOTDatasetClass", "(", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.environment.EnvSettings.__init__": [[6, 19], ["os.path.abspath", "os.path.join", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pytracking_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'..'", ")", ")", "\n", "\n", "self", ".", "results_path", "=", "'{}/tracking_results/'", ".", "format", "(", "pytracking_path", ")", "\n", "self", ".", "network_path", "=", "'{}/networks/'", ".", "format", "(", "pytracking_path", ")", "\n", "self", ".", "otb_path", "=", "''", "\n", "self", ".", "nfs_path", "=", "''", "\n", "self", ".", "uav_path", "=", "''", "\n", "self", ".", "tpl_path", "=", "''", "\n", "self", ".", "vot_path", "=", "''", "\n", "self", ".", "got10k_path", "=", "''", "\n", "self", ".", "lasot_path", "=", "''", "\n", "self", ".", "trackingnet_path", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.environment.create_default_local_file": [[21, 45], ["os.path.join", "os.path.dirname", "open", "environment.EnvSettings", "f.write", "f.write", "f.write", "f.write", "dir", "f.write", "getattr", "attr.startswith", "callable", "f.write", "f.write"], "function", ["None"], ["", "", "def", "create_default_local_file", "(", ")", ":", "\n", "    ", "comment", "=", "{", "'results_path'", ":", "'Where to store tracking results'", ",", "\n", "'network_path'", ":", "'Where tracking networks are stored.'", "}", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'local.py'", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "settings", "=", "EnvSettings", "(", ")", "\n", "\n", "f", ".", "write", "(", "'from pytracking.evaluation.environment import EnvSettings\\n\\n'", ")", "\n", "f", ".", "write", "(", "'def local_env_settings():\\n'", ")", "\n", "f", ".", "write", "(", "'    settings = EnvSettings()\\n\\n'", ")", "\n", "f", ".", "write", "(", "'    # Set your local paths here.\\n\\n'", ")", "\n", "\n", "for", "attr", "in", "dir", "(", "settings", ")", ":", "\n", "            ", "comment_str", "=", "None", "\n", "if", "attr", "in", "comment", ":", "\n", "                ", "comment_str", "=", "comment", "[", "attr", "]", "\n", "", "attr_val", "=", "getattr", "(", "settings", ",", "attr", ")", "\n", "if", "not", "attr", ".", "startswith", "(", "'__'", ")", "and", "not", "callable", "(", "attr_val", ")", ":", "\n", "                ", "if", "comment_str", "is", "None", ":", "\n", "                    ", "f", ".", "write", "(", "'    settings.{} = \\'{}\\'\\n'", ".", "format", "(", "attr", ",", "attr_val", ")", ")", "\n", "", "else", ":", "\n", "                    ", "f", ".", "write", "(", "'    settings.{} = \\'{}\\'    # {}\\n'", ".", "format", "(", "attr", ",", "attr_val", ",", "comment_str", ")", ")", "\n", "", "", "", "f", ".", "write", "(", "'\\n    return settings\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.environment.env_settings": [[47, 59], ["importlib.import_module", "importlib.import_module.local_env_settings", "os.path.join", "environment.create_default_local_file", "RuntimeError", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.local.local_env_settings", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.create_default_local_file"], ["", "", "def", "env_settings", "(", ")", ":", "\n", "    ", "env_module_name", "=", "'pytracking.evaluation.local'", "\n", "try", ":", "\n", "        ", "env_module", "=", "importlib", ".", "import_module", "(", "env_module_name", ")", "\n", "return", "env_module", ".", "local_env_settings", "(", ")", "\n", "", "except", ":", "\n", "        ", "env_file", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'local.py'", ")", "\n", "\n", "# Create a default file", "\n", "create_default_local_file", "(", ")", "\n", "raise", "RuntimeError", "(", "'YOU HAVE NOT SETUP YOUR local.py!!!\\n Go to \"{}\" and set all the paths you need. '", "\n", "'Then try to run again.'", ".", "format", "(", "env_file", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.local.local_env_settings": [[3, 22], ["pytracking.evaluation.environment.EnvSettings"], "function", ["None"], ["def", "local_env_settings", "(", ")", ":", "\n", "    ", "settings", "=", "EnvSettings", "(", ")", "\n", "\n", "# Set your local paths here.", "\n", "\n", "settings", ".", "got10k_path", "=", "''", "\n", "settings", ".", "lasot_path", "=", "''", "\n", "settings", ".", "network_path", "=", "''", "# Where tracking networks are stored.", "\n", "settings", ".", "nfs_path", "=", "''", "\n", "settings", ".", "otb_path", "=", "''", "\n", "settings", ".", "results_path", "=", "''", "# Where to store tracking results", "\n", "settings", ".", "tpl_path", "=", "''", "\n", "settings", ".", "trackingnet_path", "=", "''", "\n", "settings", ".", "uav_path", "=", "''", "\n", "settings", ".", "vot_path", "=", "''", "\n", "settings", ".", "oxuva_path", "=", "''", "\n", "settings", ".", "tlp_path", "=", "''", "\n", "\n", "return", "settings", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.__init__": [[10, 14], ["pytracking.evaluation.data.BaseDataset.__init__", "oxuvadataset.OxuvaDatasetClass._get_sequence_info_list"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._get_sequence_info_list"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_path", "=", "self", ".", "env_settings", ".", "oxuva_path", "\n", "self", ".", "sequence_info_list", "=", "self", ".", "_get_sequence_info_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list": [[15, 17], ["pytracking.evaluation.data.SequenceList", "oxuvadataset.OxuvaDatasetClass._construct_sequence"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence"], ["", "def", "get_sequence_list", "(", "self", ")", ":", "\n", "        ", "return", "SequenceList", "(", "[", "self", ".", "_construct_sequence", "(", "s", ")", "for", "s", "in", "self", ".", "sequence_info_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._construct_sequence": [[18, 37], ["cv2.imread", "list", "numpy.array", "pytracking.evaluation.data.Sequence", "map", "range"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["", "def", "_construct_sequence", "(", "self", ",", "sequence_info", ")", ":", "\n", "        ", "sequence_path", "=", "sequence_info", "[", "'path'", "]", "\n", "nz", "=", "sequence_info", "[", "'nz'", "]", "\n", "ext", "=", "sequence_info", "[", "'ext'", "]", "\n", "start_frame", "=", "sequence_info", "[", "'startFrame'", "]", "\n", "end_frame", "=", "sequence_info", "[", "'endFrame'", "]", "\n", "obj_id", "=", "sequence_info", "[", "'object_id'", "]", "\n", "\n", "frames", "=", "[", "'{base_path}/{sequence_path}/{frame:0{nz}}.{ext}'", ".", "format", "(", "base_path", "=", "self", ".", "base_path", ",", "\n", "sequence_path", "=", "sequence_path", ",", "frame", "=", "frame_num", ",", "nz", "=", "nz", ",", "ext", "=", "ext", ")", "for", "frame_num", "in", "range", "(", "start_frame", ",", "end_frame", "+", "1", ")", "]", "\n", "\n", "im", "=", "cv", ".", "imread", "(", "frames", "[", "0", "]", ")", "\n", "height", ",", "width", ",", "_", "=", "im", ".", "shape", "\n", "\n", "gt", "=", "list", "(", "map", "(", "float", ",", "sequence_info", "[", "'gt'", "]", ")", ")", "\n", "\n", "ground_truth_rect", "=", "np", ".", "array", "(", "[", "[", "gt", "[", "0", "]", "*", "width", ",", "gt", "[", "2", "]", "*", "height", ",", "(", "gt", "[", "1", "]", "-", "gt", "[", "0", "]", ")", "*", "width", ",", "(", "gt", "[", "3", "]", "-", "gt", "[", "2", "]", ")", "*", "height", "]", "]", ")", "\n", "\n", "return", "Sequence", "(", "sequence_info", "[", "'name'", "]", ",", "frames", ",", "ground_truth_rect", ",", "dataset", "=", "'oxuva'", ",", "object_ids", "=", "[", "obj_id", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_info_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass._get_sequence_info_list": [[41, 449], ["None"], "methods", ["None"], ["", "def", "_get_sequence_info_list", "(", "self", ")", ":", "\n", "        ", "sequence_info_list", "=", "[", "\n", "{", "'name'", ":", "'vid0029'", ",", "'path'", ":", "'vid0029'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2790", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.344'", ",", "'0.441'", ",", "'0.4'", ",", "'0.535'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0145'", ",", "'path'", ":", "'vid0145'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1350", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.278'", ",", "'0.445'", ",", "'0.475'", ",", "'0.665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0144'", ",", "'path'", ":", "'vid0144'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2340", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.005'", ",", "'0.231'", ",", "'0.31333333'", ",", "'0.61833334'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0143'", ",", "'path'", ":", "'vid0143'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2730", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.23'", ",", "'0.871'", ",", "'0.42333335'", ",", "'0.56'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0142'", ",", "'path'", ":", "'vid0142'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2430", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.28'", ",", "'0.458'", ",", "'0.34666666'", ",", "'0.5883333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0141'", ",", "'path'", ":", "'vid0141'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2370", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.238'", ",", "'0.603'", ",", "'0.32666665'", ",", "'0.5416667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0140'", ",", "'path'", ":", "'vid0140'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3180", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.283'", ",", "'0.512'", ",", "'0.025'", ",", "'0.8433333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0020'", ",", "'path'", ":", "'vid0020'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.32'", ",", "'0.659'", ",", "'0.30333334'", ",", "'0.85833335'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0021'", ",", "'path'", ":", "'vid0021'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1110", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.346'", ",", "'0.677'", ",", "'0.39'", ",", "'0.99'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0022'", ",", "'path'", ":", "'vid0022'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3900", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.305'", ",", "'0.567'", ",", "'0.35166666'", ",", "'0.995'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0023'", ",", "'path'", ":", "'vid0023'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3180", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.12'", ",", "'0.951'", ",", "'0.32'", ",", "'0.735'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0025'", ",", "'path'", ":", "'vid0025'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "37440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.232'", ",", "'0.446'", ",", "'0.58166665'", ",", "'0.825'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0025'", ",", "'path'", ":", "'vid0025'", ",", "'startFrame'", ":", "2700", ",", "'endFrame'", ":", "27990", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.622'", ",", "'0.787'", ",", "'0.165'", ",", "'0.5883333'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0027'", ",", "'path'", ":", "'vid0027'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.497'", ",", "'0.703'", ",", "'0.47166666'", ",", "'0.74666667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0115'", ",", "'path'", ":", "'vid0115'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5850", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.359'", ",", "'0.537'", ",", "'0.30666667'", ",", "'0.86'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0058'", ",", "'path'", ":", "'vid0058'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.444'", ",", "'0.911'", ",", "'0.17833333'", ",", "'0.8383333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0235'", ",", "'path'", ":", "'vid0235'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "9480", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.155'", ",", "'0.488'", ",", "'0.175'", ",", "'0.735'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0235'", ",", "'path'", ":", "'vid0235'", ",", "'startFrame'", ":", "840", ",", "'endFrame'", ":", "8130", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.68'", ",", "'1.0'", ",", "'0.535'", ",", "'0.7583333'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0236'", ",", "'path'", ":", "'vid0236'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "12600", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.306'", ",", "'0.802'", ",", "'0.36333334'", ",", "'0.6666667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0231'", ",", "'path'", ":", "'vid0231'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1470", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.365'", ",", "'0.714'", ",", "'0.11333334'", ",", "'0.8516667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0230'", ",", "'path'", ":", "'vid0230'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4080", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.47'", ",", "'0.631'", ",", "'0.45833334'", ",", "'0.58666664'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0233'", ",", "'path'", ":", "'vid0233'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3630", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.627'", ",", "'0.943'", ",", "'0.425'", ",", "'0.72'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0133'", ",", "'path'", ":", "'vid0133'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2340", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.567'", ",", "'0.81'", ",", "'0.485'", ",", "'0.8283333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0131'", ",", "'path'", ":", "'vid0131'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.449'", ",", "'0.577'", ",", "'0.37166667'", ",", "'0.57'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0137'", ",", "'path'", ":", "'vid0137'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3060", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.272'", ",", "'0.605'", ",", "'0.42666668'", ",", "'0.7133333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0135'", ",", "'path'", ":", "'vid0135'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.013'", ",", "'0.333'", ",", "'0.41'", ",", "'0.835'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0334'", ",", "'path'", ":", "'vid0334'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2730", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.349'", ",", "'0.609'", ",", "'0.27666667'", ",", "'0.87166667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0335'", ",", "'path'", ":", "'vid0335'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.042'", ",", "'0.606'", ",", "'0.315'", ",", "'0.865'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0336'", ",", "'path'", ":", "'vid0336'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.233'", ",", "'0.541'", ",", "'0.22666667'", ",", "'0.855'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0139'", ",", "'path'", ":", "'vid0139'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.523'", ",", "'0.705'", ",", "'0.29333332'", ",", "'0.885'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0330'", ",", "'path'", ":", "'vid0330'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1350", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.313'", ",", "'0.403'", ",", "'0.56666666'", ",", "'0.785'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0331'", ",", "'path'", ":", "'vid0331'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.433'", ",", "'0.76'", ",", "'0.38833332'", ",", "'0.97833335'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0333'", ",", "'path'", ":", "'vid0333'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.421'", ",", "'0.5'", ",", "'0.27'", ",", "'0.49166667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0155'", ",", "'path'", ":", "'vid0155'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1890", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.156'", ",", "'0.453'", ",", "'0.32833335'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0151'", ",", "'path'", ":", "'vid0151'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5040", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.18'", ",", "'0.609'", ",", "'0.35333332'", ",", "'0.59833336'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0153'", ",", "'path'", ":", "'vid0153'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "13530", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.533'", ",", "'0.603'", ",", "'0.29666665'", ",", "'0.44166666'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0258'", ",", "'path'", ":", "'vid0258'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5940", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.379'", ",", "'0.725'", ",", "'0.38333333'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0158'", ",", "'path'", ":", "'vid0158'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.428'", ",", "'0.713'", ",", "'0.13'", ",", "'0.8'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0159'", ",", "'path'", ":", "'vid0159'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4140", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.487'", ",", "'0.687'", ",", "'0.0'", ",", "'0.91'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0228'", ",", "'path'", ":", "'vid0228'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.324'", ",", "'0.612'", ",", "'0.385'", ",", "'0.6716667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0223'", ",", "'path'", ":", "'vid0223'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2280", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.558'", ",", "'0.68'", ",", "'0.405'", ",", "'0.57166666'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0226'", ",", "'path'", ":", "'vid0226'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3120", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'0.984'", ",", "'0.0'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0252'", ",", "'path'", ":", "'vid0252'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.093'", ",", "'0.431'", ",", "'0.29333332'", ",", "'0.70666665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0309'", ",", "'path'", ":", "'vid0309'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3330", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.553'", ",", "'0.598'", ",", "'0.35166666'", ",", "'0.47333333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0308'", ",", "'path'", ":", "'vid0308'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.303'", ",", "'0.592'", ",", "'0.41666666'", ",", "'0.7083333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0301'", ",", "'path'", ":", "'vid0301'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1290", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'0.388'", ",", "'0.14'", ",", "'0.69166666'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0300'", ",", "'path'", ":", "'vid0300'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1320", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.676'", ",", "'0.992'", ",", "'0.51166666'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0303'", ",", "'path'", ":", "'vid0303'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2790", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.342'", ",", "'0.657'", ",", "'0.30666667'", ",", "'0.89666665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0302'", ",", "'path'", ":", "'vid0302'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2340", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.001'", ",", "'0.857'", ",", "'0.39333335'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0306'", ",", "'path'", ":", "'vid0306'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4140", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.428'", ",", "'0.852'", ",", "'0.35166666'", ",", "'0.70666665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0163'", ",", "'path'", ":", "'vid0163'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2280", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.321'", ",", "'1.0'", ",", "'0.09166667'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0162'", ",", "'path'", ":", "'vid0162'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4140", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.277'", ",", "'0.651'", ",", "'0.495'", ",", "'0.7216667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0167'", ",", "'path'", ":", "'vid0167'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.379'", ",", "'0.479'", ",", "'0.39'", ",", "'0.48666668'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0166'", ",", "'path'", ":", "'vid0166'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1320", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.315'", ",", "'0.461'", ",", "'0.74666667'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0169'", ",", "'path'", ":", "'vid0169'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1350", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.75'", ",", "'0.877'", ",", "'0.0'", ",", "'0.17833333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0168'", ",", "'path'", ":", "'vid0168'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2250", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.331'", ",", "'0.505'", ",", "'0.17833333'", ",", "'0.585'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0225'", ",", "'path'", ":", "'vid0225'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.554'", ",", "'1.0'", ",", "'0.23333333'", ",", "'0.6166667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0316'", ",", "'path'", ":", "'vid0316'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "8130", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.138'", ",", "'0.476'", ",", "'0.11833333'", ",", "'0.655'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0316'", ",", "'path'", ":", "'vid0316'", ",", "'startFrame'", ":", "2700", ",", "'endFrame'", ":", "10830", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.488'", ",", "'0.887'", ",", "'0.48833334'", ",", "'0.9316667'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0315'", ",", "'path'", ":", "'vid0315'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.201'", ",", "'0.678'", ",", "'0.05'", ",", "'0.68'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0315'", ",", "'path'", ":", "'vid0315'", ",", "'startFrame'", ":", "11700", ",", "'endFrame'", ":", "13110", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.233'", ",", "'0.431'", ",", "'0.0'", ",", "'0.595'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0315'", ",", "'path'", ":", "'vid0315'", ",", "'startFrame'", ":", "13950", ",", "'endFrame'", ":", "15390", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.235'", ",", "'0.651'", ",", "'0.11833333'", ",", "'0.61'", "]", ",", "'object_id'", ":", "'obj0002'", "}", ",", "\n", "{", "'name'", ":", "'vid0313'", ",", "'path'", ":", "'vid0313'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5430", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.339'", ",", "'0.893'", ",", "'0.165'", ",", "'0.8283333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0311'", ",", "'path'", ":", "'vid0311'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2760", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.298'", ",", "'0.509'", ",", "'0.43'", ",", "'0.47833332'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0095'", ",", "'path'", ":", "'vid0095'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5490", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.201'", ",", "'0.824'", ",", "'0.39666668'", ",", "'0.51166666'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0094'", ",", "'path'", ":", "'vid0094'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1290", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.526'", ",", "'0.993'", ",", "'0.0'", ",", "'0.635'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0097'", ",", "'path'", ":", "'vid0097'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5880", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.569'", ",", "'0.99'", ",", "'0.0'", ",", "'0.775'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0093'", ",", "'path'", ":", "'vid0093'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2670", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.217'", ",", "'0.767'", ",", "'0.16333333'", ",", "'0.78833336'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0092'", ",", "'path'", ":", "'vid0092'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.189'", ",", "'0.925'", ",", "'0.22166666'", ",", "'0.50666666'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0014'", ",", "'path'", ":", "'vid0014'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1470", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.255'", ",", "'0.664'", ",", "'0.335'", ",", "'0.61333334'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0017'", ",", "'path'", ":", "'vid0017'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4080", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.536'", ",", "'0.628'", ",", "'0.41666666'", ",", "'0.50666666'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0011'", ",", "'path'", ":", "'vid0011'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1410", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.297'", ",", "'0.993'", ",", "'0.05666667'", ",", "'0.82'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0012'", ",", "'path'", ":", "'vid0012'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "8130", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.304'", ",", "'0.493'", ",", "'0.35'", ",", "'0.90833336'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0255'", ",", "'path'", ":", "'vid0255'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2280", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.358'", ",", "'0.68'", ",", "'0.28333333'", ",", "'0.835'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0254'", ",", "'path'", ":", "'vid0254'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3240", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'0.291'", ",", "'0.0'", ",", "'0.655'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0253'", ",", "'path'", ":", "'vid0253'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.403'", ",", "'0.539'", ",", "'0.22'", ",", "'0.55333334'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0018'", ",", "'path'", ":", "'vid0018'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2340", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.413'", ",", "'0.57'", ",", "'0.026666667'", ",", "'0.255'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0077'", ",", "'path'", ":", "'vid0077'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3240", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.072'", ",", "'0.424'", ",", "'0.39833334'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0076'", ",", "'path'", ":", "'vid0076'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "15810", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.203'", ",", "'1.0'", ",", "'0.43333334'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0074'", ",", "'path'", ":", "'vid0074'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.43'", ",", "'0.797'", ",", "'0.45'", ",", "'0.6716667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0073'", ",", "'path'", ":", "'vid0073'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "6390", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.311'", ",", "'0.535'", ",", "'0.57'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0072'", ",", "'path'", ":", "'vid0072'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5970", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.187'", ",", "'0.517'", ",", "'0.37833333'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0178'", ",", "'path'", ":", "'vid0178'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.377'", ",", "'0.601'", ",", "'0.35333332'", ",", "'0.83166665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0070'", ",", "'path'", ":", "'vid0070'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3180", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.001'", ",", "'1.0'", ",", "'0.47'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0176'", ",", "'path'", ":", "'vid0176'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1800", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.857'", ",", "'0.999'", ",", "'0.35833332'", ",", "'0.43'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0177'", ",", "'path'", ":", "'vid0177'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.42'", ",", "'0.487'", ",", "'0.44'", ",", "'0.62666667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0174'", ",", "'path'", ":", "'vid0174'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1950", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.011'", ",", "'0.67'", ",", "'0.22333333'", ",", "'0.44666666'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0175'", ",", "'path'", ":", "'vid0175'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.203'", ",", "'0.665'", ",", "'0.115'", ",", "'0.87666667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0175'", ",", "'path'", ":", "'vid0175'", ",", "'startFrame'", ":", "27000", ",", "'endFrame'", ":", "29340", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'1.0'", ",", "'0.18166667'", ",", "'0.87666667'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0079'", ",", "'path'", ":", "'vid0079'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5370", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.105'", ",", "'0.749'", ",", "'0.0'", ",", "'0.7916667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0146'", ",", "'path'", ":", "'vid0146'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.394'", ",", "'0.68'", ",", "'0.4'", ",", "'0.9433333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0089'", ",", "'path'", ":", "'vid0089'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5490", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.28'", ",", "'0.659'", ",", "'0.6483333'", ",", "'0.87166667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0082'", ",", "'path'", ":", "'vid0082'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "14490", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.412'", ",", "'0.553'", ",", "'0.32833335'", ",", "'0.49'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0080'", ",", "'path'", ":", "'vid0080'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1410", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.519'", ",", "'0.895'", ",", "'0.115'", ",", "'0.41333333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0081'", ",", "'path'", ":", "'vid0081'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1230", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.181'", ",", "'0.461'", ",", "'0.37'", ",", "'0.6333333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0084'", ",", "'path'", ":", "'vid0084'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2700", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.266'", ",", "'0.906'", ",", "'0.096666664'", ",", "'0.24'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0085'", ",", "'path'", ":", "'vid0085'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3150", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.024'", ",", "'0.26'", ",", "'0.19'", ",", "'0.885'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0003'", ",", "'path'", ":", "'vid0003'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "10860", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.387'", ",", "'0.797'", ",", "'0.425'", ",", "'0.92'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0000'", ",", "'path'", ":", "'vid0000'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4170", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.471'", ",", "'0.662'", ",", "'0.27333334'", ",", "'0.62833333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0001'", ",", "'path'", ":", "'vid0001'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2550", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.36'", ",", "'0.482'", ",", "'0.475'", ",", "'0.62'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0249'", ",", "'path'", ":", "'vid0249'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "18540", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.288'", ",", "'0.463'", ",", "'0.535'", ",", "'0.82666665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0004'", ",", "'path'", ":", "'vid0004'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3180", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.225'", ",", "'0.829'", ",", "'0.0016666667'", ",", "'0.66'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0005'", ",", "'path'", ":", "'vid0005'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'1.0'", ",", "'0.20833333'", ",", "'0.5933333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0195'", ",", "'path'", ":", "'vid0195'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3240", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.225'", ",", "'0.598'", ",", "'0.33166668'", ",", "'0.71'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0008'", ",", "'path'", ":", "'vid0008'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3630", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.375'", ",", "'0.89'", ",", "'0.27666667'", ",", "'0.9633333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0241'", ",", "'path'", ":", "'vid0241'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.076'", ",", "'0.239'", ",", "'0.26833335'", ",", "'0.36'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0109'", ",", "'path'", ":", "'vid0109'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2280", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.507'", ",", "'0.614'", ",", "'0.42166665'", ",", "'0.65166664'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0067'", ",", "'path'", ":", "'vid0067'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "7740", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.387'", ",", "'0.542'", ",", "'0.018333333'", ",", "'0.80333334'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0062'", ",", "'path'", ":", "'vid0062'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "16590", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.206'", ",", "'0.748'", ",", "'0.385'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0062'", ",", "'path'", ":", "'vid0062'", ",", "'startFrame'", ":", "13410", ",", "'endFrame'", ":", "15240", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.262'", ",", "'0.511'", ",", "'0.38833332'", ",", "'0.8616667'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0063'", ",", "'path'", ":", "'vid0063'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "8910", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'0.473'", ",", "'0.6766667'", ",", "'0.93833333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0103'", ",", "'path'", ":", "'vid0103'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.258'", ",", "'0.763'", ",", "'0.0'", ",", "'0.64'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0102'", ",", "'path'", ":", "'vid0102'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2580", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.397'", ",", "'0.649'", ",", "'0.12833333'", ",", "'0.73'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0101'", ",", "'path'", ":", "'vid0101'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3240", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.491'", ",", "'0.801'", ",", "'0.20833333'", ",", "'0.515'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0100'", ",", "'path'", ":", "'vid0100'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1230", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.432'", ",", "'0.565'", ",", "'0.14166667'", ",", "'0.50333333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0107'", ",", "'path'", ":", "'vid0107'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1350", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.344'", ",", "'0.556'", ",", "'0.29833335'", ",", "'0.575'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0069'", ",", "'path'", ":", "'vid0069'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4980", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.292'", ",", "'0.64'", ",", "'0.07666667'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0281'", ",", "'path'", ":", "'vid0281'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5490", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.526'", ",", "'0.82'", ",", "'0.37833333'", ",", "'0.64'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0271'", ",", "'path'", ":", "'vid0271'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3240", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'0.762'", ",", "'0.395'", ",", "'0.51166666'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0272'", ",", "'path'", ":", "'vid0272'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5040", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.375'", ",", "'0.855'", ",", "'0.0'", ",", "'0.49833333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0274'", ",", "'path'", ":", "'vid0274'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1170", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'0.727'", ",", "'0.12833333'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0276'", ",", "'path'", ":", "'vid0276'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "10950", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.33'", ",", "'0.663'", ",", "'0.56166667'", ",", "'0.88'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0051'", ",", "'path'", ":", "'vid0051'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1260", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.442'", ",", "'0.545'", ",", "'0.52166665'", ",", "'0.59166664'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0299'", ",", "'path'", ":", "'vid0299'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1500", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.646'", ",", "'0.752'", ",", "'0.27333334'", ",", "'0.57166666'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0298'", ",", "'path'", ":", "'vid0298'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.283'", ",", "'0.52'", ",", "'0.26833335'", ",", "'0.60833335'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0298'", ",", "'path'", ":", "'vid0298'", ",", "'startFrame'", ":", "5850", ",", "'endFrame'", ":", "7290", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.433'", ",", "'0.597'", ",", "'0.47666666'", ",", "'0.79333335'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0054'", ",", "'path'", ":", "'vid0054'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1980", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.055'", ",", "'0.808'", ",", "'0.10333333'", ",", "'0.85333335'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0056'", ",", "'path'", ":", "'vid0056'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3240", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.355'", ",", "'0.628'", ",", "'0.56666666'", ",", "'0.7816667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0284'", ",", "'path'", ":", "'vid0284'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "8130", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'1.0'", ",", "'0.0'", ",", "'0.89166665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0291'", ",", "'path'", ":", "'vid0291'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.283'", ",", "'0.559'", ",", "'0.20833333'", ",", "'0.7583333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0290'", ",", "'path'", ":", "'vid0290'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.327'", ",", "'0.625'", ",", "'0.38833332'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0296'", ",", "'path'", ":", "'vid0296'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.456'", ",", "'0.788'", ",", "'0.21333334'", ",", "'0.69166666'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0295'", ",", "'path'", ":", "'vid0295'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4530", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.565'", ",", "'0.989'", ",", "'0.0'", ",", "'0.7733333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0043'", ",", "'path'", ":", "'vid0043'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1050", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.219'", ",", "'0.748'", ",", "'0.08833333'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0040'", ",", "'path'", ":", "'vid0040'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.399'", ",", "'0.799'", ",", "'0.37333333'", ",", "'0.6983333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0205'", ",", "'path'", ":", "'vid0205'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "7740", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.454'", ",", "'0.967'", ",", "'0.0'", ",", "'0.68333334'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0266'", ",", "'path'", ":", "'vid0266'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.574'", ",", "'0.705'", ",", "'0.20666666'", ",", "'0.29'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0180'", ",", "'path'", ":", "'vid0180'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "13980", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.38'", ",", "'0.657'", ",", "'0.61333334'", ",", "'0.95666665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0186'", ",", "'path'", ":", "'vid0186'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.596'", ",", "'0.809'", ",", "'0.28'", ",", "'0.6066667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0260'", ",", "'path'", ":", "'vid0260'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4110", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.675'", ",", "'0.917'", ",", "'0.475'", ",", "'0.77166665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0184'", ",", "'path'", ":", "'vid0184'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5010", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.42'", ",", "'0.726'", ",", "'0.33'", ",", "'0.9816667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0189'", ",", "'path'", ":", "'vid0189'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5940", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.399'", ",", "'0.693'", ",", "'0.40333334'", ",", "'0.73'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0269'", ",", "'path'", ":", "'vid0269'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'0.592'", ",", "'0.43'", ",", "'0.7966667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0288'", ",", "'path'", ":", "'vid0288'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.442'", ",", "'0.733'", ",", "'0.17'", ",", "'0.7683333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0289'", ",", "'path'", ":", "'vid0289'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4980", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.437'", ",", "'0.679'", ",", "'0.425'", ",", "'0.71'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0048'", ",", "'path'", ":", "'vid0048'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "990", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.109'", ",", "'0.934'", ",", "'0.52166665'", ",", "'0.83166665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0046'", ",", "'path'", ":", "'vid0046'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "9480", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.182'", ",", "'0.724'", ",", "'0.685'", ",", "'0.78833336'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0047'", ",", "'path'", ":", "'vid0047'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4140", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.333'", ",", "'0.725'", ",", "'0.035'", ",", "'0.705'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0044'", ",", "'path'", ":", "'vid0044'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "9030", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.239'", ",", "'0.643'", ",", "'0.48333332'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0042'", ",", "'path'", ":", "'vid0042'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "10890", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.427'", ",", "'0.768'", ",", "'0.55833334'", ",", "'0.83166665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0053'", ",", "'path'", ":", "'vid0053'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "8640", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.226'", ",", "'0.68'", ",", "'0.17166667'", ",", "'0.885'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0286'", ",", "'path'", ":", "'vid0286'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4140", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.432'", ",", "'0.52'", ",", "'0.295'", ",", "'0.7083333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0287'", ",", "'path'", ":", "'vid0287'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4140", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.293'", ",", "'0.676'", ",", "'0.5283333'", ",", "'0.71166664'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0190'", ",", "'path'", ":", "'vid0190'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.874'", ",", "'1.0'", ",", "'0.093333334'", ",", "'0.5133333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0191'", ",", "'path'", ":", "'vid0191'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.672'", ",", "'0.838'", ",", "'0.07333333'", ",", "'0.855'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0211'", ",", "'path'", ":", "'vid0211'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5430", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.565'", ",", "'0.988'", ",", "'0.0'", ",", "'0.77666664'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0210'", ",", "'path'", ":", "'vid0210'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'0.632'", ",", "'0.0'", ",", "'0.17166667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0216'", ",", "'path'", ":", "'vid0216'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3180", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.101'", ",", "'0.617'", ",", "'0.123333335'", ",", "'0.86333334'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0196'", ",", "'path'", ":", "'vid0196'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2370", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.224'", ",", "'0.982'", ",", "'0.29'", ",", "'0.625'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0196'", ",", "'path'", ":", "'vid0196'", ",", "'startFrame'", ":", "8550", ",", "'endFrame'", ":", "9990", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.251'", ",", "'0.742'", ",", "'0.20666666'", ",", "'0.5'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0197'", ",", "'path'", ":", "'vid0197'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4980", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.305'", ",", "'0.483'", ",", "'0.31666666'", ",", "'0.665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0197'", ",", "'path'", ":", "'vid0197'", ",", "'startFrame'", ":", "870", ",", "'endFrame'", ":", "4080", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.382'", ",", "'0.614'", ",", "'0.37333333'", ",", "'0.63166666'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0292'", ",", "'path'", ":", "'vid0292'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2790", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.503'", ",", "'0.801'", ",", "'0.23666666'", ",", "'0.79333335'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0111'", ",", "'path'", ":", "'vid0111'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4590", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.486'", ",", "'1.0'", ",", "'0.41166666'", ",", "'0.94'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0066'", ",", "'path'", ":", "'vid0066'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "12210", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.021'", ",", "'0.931'", ",", "'0.20666666'", ",", "'0.54333335'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0213'", ",", "'path'", ":", "'vid0213'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1230", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.121'", ",", "'0.375'", ",", "'0.6483333'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0038'", ",", "'path'", ":", "'vid0038'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "5220", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.455'", ",", "'0.666'", ",", "'0.325'", ",", "'0.58666664'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0329'", ",", "'path'", ":", "'vid0329'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.245'", ",", "'0.444'", ",", "'0.315'", ",", "'0.60333335'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0212'", ",", "'path'", ":", "'vid0212'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2130", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.521'", ",", "'0.767'", ",", "'0.24833333'", ",", "'0.49166667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0033'", ",", "'path'", ":", "'vid0033'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "13590", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.346'", ",", "'0.879'", ",", "'0.16'", ",", "'0.555'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0033'", ",", "'path'", ":", "'vid0033'", ",", "'startFrame'", ":", "4500", ",", "'endFrame'", ":", "10890", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.577'", ",", "'0.904'", ",", "'0.19833334'", ",", "'0.89'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0032'", ",", "'path'", ":", "'vid0032'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "6840", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.404'", ",", "'0.785'", ",", "'0.60833335'", ",", "'0.7916667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0032'", ",", "'path'", ":", "'vid0032'", ",", "'startFrame'", ":", "4080", ",", "'endFrame'", ":", "6510", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.2'", ",", "'0.393'", ",", "'0.4'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0031'", ",", "'path'", ":", "'vid0031'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3690", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.507'", ",", "'0.768'", ",", "'0.5233333'", ",", "'0.69666666'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0030'", ",", "'path'", ":", "'vid0030'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.416'", ",", "'0.718'", ",", "'0.41666666'", ",", "'0.72833335'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0037'", ",", "'path'", ":", "'vid0037'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "12510", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.228'", ",", "'0.532'", ",", "'0.35833332'", ",", "'0.65833336'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0192'", ",", "'path'", ":", "'vid0192'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1500", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.547'", ",", "'1.0'", ",", "'0.18833333'", ",", "'0.945'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0034'", ",", "'path'", ":", "'vid0034'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2190", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.559'", ",", "'0.947'", ",", "'0.24'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0193'", ",", "'path'", ":", "'vid0193'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "11280", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.416'", ",", "'0.791'", ",", "'0.22'", ",", "'0.83166665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0245'", ",", "'path'", ":", "'vid0245'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4620", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'0.976'", ",", "'0.345'", ",", "'0.6666667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0246'", ",", "'path'", ":", "'vid0246'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1290", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.228'", ",", "'0.473'", ",", "'0.42333335'", ",", "'0.7083333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0098'", ",", "'path'", ":", "'vid0098'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.356'", ",", "'0.556'", ",", "'0.245'", ",", "'0.7966667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0202'", ",", "'path'", ":", "'vid0202'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1410", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'0.407'", ",", "'0.27833334'", ",", "'0.665'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0203'", ",", "'path'", ":", "'vid0203'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "7170", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.317'", ",", "'0.742'", ",", "'0.0016666667'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0204'", ",", "'path'", ":", "'vid0204'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4590", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.373'", ",", "'0.877'", ",", "'0.08166666'", ",", "'0.73833334'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0215'", ",", "'path'", ":", "'vid0215'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2310", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.381'", ",", "'0.449'", ",", "'0.45833334'", ",", "'0.60333335'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0215'", ",", "'path'", ":", "'vid0215'", ",", "'startFrame'", ":", "5370", ",", "'endFrame'", ":", "10860", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.0'", ",", "'0.444'", ",", "'0.0'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0215'", ",", "'path'", ":", "'vid0215'", ",", "'startFrame'", ":", "11670", ",", "'endFrame'", ":", "13110", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.215'", ",", "'0.695'", ",", "'0.0'", ",", "'0.8466667'", "]", ",", "'object_id'", ":", "'obj0002'", "}", ",", "\n", "{", "'name'", ":", "'vid0208'", ",", "'path'", ":", "'vid0208'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3180", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.441'", ",", "'0.951'", ",", "'0.28'", ",", "'0.7583333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0214'", ",", "'path'", ":", "'vid0214'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2790", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.168'", ",", "'0.616'", ",", "'0.23166667'", ",", "'0.6016667'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0121'", ",", "'path'", ":", "'vid0121'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "2340", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.322'", ",", "'0.444'", ",", "'0.6116667'", ",", "'0.675'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0120'", ",", "'path'", ":", "'vid0120'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "19050", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.259'", ",", "'0.904'", ",", "'0.44'", ",", "'0.635'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0123'", ",", "'path'", ":", "'vid0123'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1170", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.379'", ",", "'0.481'", ",", "'0.11333334'", ",", "'0.20833333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0122'", ",", "'path'", ":", "'vid0122'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1440", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.406'", ",", "'0.71'", ",", "'0.35666665'", ",", "'0.6333333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0327'", ",", "'path'", ":", "'vid0327'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "11700", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.712'", ",", "'1.0'", ",", "'0.48333332'", ",", "'0.8383333'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0327'", ",", "'path'", ":", "'vid0327'", ",", "'startFrame'", ":", "7230", ",", "'endFrame'", ":", "10890", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.272'", ",", "'0.935'", ",", "'0.13166666'", ",", "'0.885'", "]", ",", "'object_id'", ":", "'obj0001'", "}", ",", "\n", "{", "'name'", ":", "'vid0326'", ",", "'path'", ":", "'vid0326'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1890", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.63'", ",", "'0.766'", ",", "'0.38166666'", ",", "'0.56666666'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0324'", ",", "'path'", ":", "'vid0324'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "3240", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.494'", ",", "'0.933'", ",", "'0.28833333'", ",", "'1.0'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0129'", ",", "'path'", ":", "'vid0129'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "1380", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.067'", ",", "'0.249'", ",", "'0.41'", ",", "'0.515'", "]", ",", "'object_id'", ":", "'obj0000'", "}", ",", "\n", "{", "'name'", ":", "'vid0128'", ",", "'path'", ":", "'vid0128'", ",", "'startFrame'", ":", "0", ",", "'endFrame'", ":", "4080", ",", "'nz'", ":", "6", ",", "'ext'", ":", "'jpeg'", ",", "\n", "'gt'", ":", "[", "'0.31'", ",", "'0.595'", ",", "'0.31166667'", ",", "'0.54'", "]", ",", "'object_id'", ":", "'obj0000'", "}", "\n", "]", "\n", "#{'name': 'vid0147', 'path': 'vid0147', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.588', '0.798', '0.44333333', '0.5833333'], 'object_id': 'obj0000'}, {'name': 'vid0147', 'path': 'vid0147', 'startFrame': 4080, 'endFrame': 5490, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.545', '0.827', '0.34666666', '0.55333334'], 'object_id': 'obj0001'}, {'name': 'vid0028', 'path': 'vid0028', 'startFrame': 0, 'endFrame': 4140, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.662', '0.902', '0.33166668', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0024', 'path': 'vid0024', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.124', '0.731', '0.0', '0.35333332'], 'object_id': 'obj0000'}, {'name': 'vid0026', 'path': 'vid0026', 'startFrame': 0, 'endFrame': 1890, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.456', '0.837', '0.67', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0026', 'path': 'vid0026', 'startFrame': 2700, 'endFrame': 4950, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.776', '1.0', '0.0', '0.42333335'], 'object_id': 'obj0001'}, {'name': 'vid0148', 'path': 'vid0148', 'startFrame': 0, 'endFrame': 1410, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.438', '0.687', '0.43333334', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0239', 'path': 'vid0239', 'startFrame': 0, 'endFrame': 1470, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.473', '0.776', '0.21666667', '0.61333334'], 'object_id': 'obj0000'}, {'name': 'vid0238', 'path': 'vid0238', 'startFrame': 0, 'endFrame': 1350, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.035', '0.345', '0.18833333', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0234', 'path': 'vid0234', 'startFrame': 0, 'endFrame': 1320, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.485', '0.851', '0.07666667', '0.41833332'], 'object_id': 'obj0000'}, {'name': 'vid0237', 'path': 'vid0237', 'startFrame': 0, 'endFrame': 4140, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.146', '0.676', '0.17166667', '0.7366667'], 'object_id': 'obj0000'}, {'name': 'vid0232', 'path': 'vid0232', 'startFrame': 0, 'endFrame': 1530, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.368', '0.984', '0.38666666', '0.93833333'], 'object_id': 'obj0000'}, {'name': 'vid0132', 'path': 'vid0132', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.857', '1.0', '0.145', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0130', 'path': 'vid0130', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.354', '0.495', '0.685', '0.76'], 'object_id': 'obj0000'}, {'name': 'vid0136', 'path': 'vid0136', 'startFrame': 0, 'endFrame': 9030, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.37', '0.462', '0.395', '0.48833334'], 'object_id': 'obj0000'}, {'name': 'vid0134', 'path': 'vid0134', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.0', '0.946', '0.108333334', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0138', 'path': 'vid0138', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.244', '0.456', '0.14166667', '0.79833335'], 'object_id': 'obj0000'}, {'name': 'vid0332', 'path': 'vid0332', 'startFrame': 0, 'endFrame': 2760, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.289', '0.456', '0.62833333', '0.735'], 'object_id': 'obj0000'}, {'name': 'vid0154', 'path': 'vid0154', 'startFrame': 0, 'endFrame': 3120, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.365', '0.909', '0.0', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0156', 'path': 'vid0156', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.45', '0.934', '0.28166667', '0.66'], 'object_id': 'obj0000'}, {'name': 'vid0157', 'path': 'vid0157', 'startFrame': 0, 'endFrame': 2790, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.513', '0.708', '0.43666667', '0.5733333'], 'object_id': 'obj0000'}, {'name': 'vid0150', 'path': 'vid0150', 'startFrame': 0, 'endFrame': 5430, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.191', '0.472', '0.7033333', '0.9766667'], 'object_id': 'obj0000'}, {'name': 'vid0150', 'path': 'vid0150', 'startFrame': 2190, 'endFrame': 3630, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.597', '0.951', '0.56333333', '0.8016667'], 'object_id': 'obj0001'}, {'name': 'vid0259', 'path': 'vid0259', 'startFrame': 0, 'endFrame': 1230, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.377', '0.589', '0.135', '0.69666666'], 'object_id': 'obj0000'}, {'name': 'vid0259', 'path': 'vid0259', 'startFrame': 8460, 'endFrame': 9900, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.378', '0.736', '0.26166666', '0.88166666'], 'object_id': 'obj0001'}, {'name': 'vid0152', 'path': 'vid0152', 'startFrame': 0, 'endFrame': 3630, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.27', '0.733', '0.085', '0.47666666'], 'object_id': 'obj0000'}, {'name': 'vid0267', 'path': 'vid0267', 'startFrame': 0, 'endFrame': 1770, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.491', '0.659', '0.43166667', '0.94666666'], 'object_id': 'obj0000'}, {'name': 'vid0264', 'path': 'vid0264', 'startFrame': 0, 'endFrame': 1320, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.255', '0.346', '0.46', '0.7083333'], 'object_id': 'obj0000'}, {'name': 'vid0264', 'path': 'vid0264', 'startFrame': 2730, 'endFrame': 6390, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.692', '0.996', '0.06666667', '0.5133333'], 'object_id': 'obj0001'}, {'name': 'vid0149', 'path': 'vid0149', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.222', '1.0', '0.5', '0.93833333'], 'object_id': 'obj0000'}, {'name': 'vid0262', 'path': 'vid0262', 'startFrame': 0, 'endFrame': 1620, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.407', '0.506', '0.24833333', '0.62666667'], 'object_id': 'obj0000'}, {'name': 'vid0229', 'path': 'vid0229', 'startFrame': 0, 'endFrame': 5310, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.31', '0.6', '0.37166667', '0.69166666'], 'object_id': 'obj0000'}, {'name': 'vid0222', 'path': 'vid0222', 'startFrame': 0, 'endFrame': 2760, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.031', '0.99', '0.555', '0.795'], 'object_id': 'obj0000'}, {'name': 'vid0220', 'path': 'vid0220', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.319', '0.349', '0.40333334', '0.505'], 'object_id': 'obj0000'}, {'name': 'vid0221', 'path': 'vid0221', 'startFrame': 0, 'endFrame': 5430, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.263', '0.61', '0.31166667', '0.815'], 'object_id': 'obj0000'}, {'name': 'vid0221', 'path': 'vid0221', 'startFrame': 1050, 'endFrame': 9030, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.534', '1.0', '0.31833333', '1.0'], 'object_id': 'obj0001'}, {'name': 'vid0227', 'path': 'vid0227', 'startFrame': 0, 'endFrame': 3690, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.226', '0.463', '0.49', '0.8433333'], 'object_id': 'obj0000'}, {'name': 'vid0224', 'path': 'vid0224', 'startFrame': 0, 'endFrame': 3900, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.336', '0.689', '0.42', '0.53333336'], 'object_id': 'obj0000'}, {'name': 'vid0305', 'path': 'vid0305', 'startFrame': 0, 'endFrame': 1350, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.222', '0.882', '0.24666667', '0.515'], 'object_id': 'obj0000'}, {'name': 'vid0304', 'path': 'vid0304', 'startFrame': 0, 'endFrame': 8190, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.344', '0.692', '0.34666666', '0.7183333'], 'object_id': 'obj0000'}, {'name': 'vid0307', 'path': 'vid0307', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.384', '0.507', '0.40333334', '0.805'], 'object_id': 'obj0000'}, {'name': 'vid0161', 'path': 'vid0161', 'startFrame': 0, 'endFrame': 1290, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.297', '0.483', '0.21833333', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0160', 'path': 'vid0160', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.551', '0.618', '0.27833334', '0.68333334'], 'object_id': 'obj0000'}, {'name': 'vid0165', 'path': 'vid0165', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.103', '0.442', '0.40166667', '0.82666665'], 'object_id': 'obj0000'}, {'name': 'vid0164', 'path': 'vid0164', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.481', '0.525', '0.22333333', '0.27666667'], 'object_id': 'obj0000'}, {'name': 'vid0317', 'path': 'vid0317', 'startFrame': 0, 'endFrame': 2220, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.058', '0.624', '0.083333336', '0.76666665'], 'object_id': 'obj0000'}, {'name': 'vid0314', 'path': 'vid0314', 'startFrame': 0, 'endFrame': 1890, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.808', '1.0', '0.42333335', '0.97833335'], 'object_id': 'obj0000'}, {'name': 'vid0312', 'path': 'vid0312', 'startFrame': 0, 'endFrame': 1860, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.584', '0.675', '0.525', '0.8016667'], 'object_id': 'obj0000'}, {'name': 'vid0310', 'path': 'vid0310', 'startFrame': 0, 'endFrame': 5940, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.562', '0.669', '0.29666665', '0.865'], 'object_id': 'obj0000'}, {'name': 'vid0096', 'path': 'vid0096', 'startFrame': 0, 'endFrame': 15840, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.341', '0.507', '0.42166665', '0.5683333'], 'object_id': 'obj0000'}, {'name': 'vid0096', 'path': 'vid0096', 'startFrame': 12180, 'endFrame': 14940, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.183', '0.263', '0.45833334', '0.5366667'], 'object_id': 'obj0001'}, {'name': 'vid0091', 'path': 'vid0091', 'startFrame': 0, 'endFrame': 1740, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.25', '0.546', '0.24666667', '0.855'], 'object_id': 'obj0000'}, {'name': 'vid0090', 'path': 'vid0090', 'startFrame': 0, 'endFrame': 2700, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.148', '0.729', '0.5466667', '0.785'], 'object_id': 'obj0000'}, {'name': 'vid0318', 'path': 'vid0318', 'startFrame': 0, 'endFrame': 2760, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.185', '0.729', '0.21', '0.7966667'], 'object_id': 'obj0000'}, {'name': 'vid0319', 'path': 'vid0319', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.033', '0.82', '0.18', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0015', 'path': 'vid0015', 'startFrame': 0, 'endFrame': 1890, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.868', '1.0', '0.0', '0.605'], 'object_id': 'obj0000'}, {'name': 'vid0016', 'path': 'vid0016', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.374', '0.547', '0.33166668', '0.6716667'], 'object_id': 'obj0000'}, {'name': 'vid0010', 'path': 'vid0010', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.471', '0.737', '0.41833332', '0.6933333'], 'object_id': 'obj0000'}, {'name': 'vid0013', 'path': 'vid0013', 'startFrame': 0, 'endFrame': 1890, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.529', '0.757', '0.16', '0.7183333'], 'object_id': 'obj0000'}, {'name': 'vid0257', 'path': 'vid0257', 'startFrame': 0, 'endFrame': 2610, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.109', '0.326', '0.28333333', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0256', 'path': 'vid0256', 'startFrame': 0, 'endFrame': 2340, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.207', '0.709', '0.53333336', '0.74666667'], 'object_id': 'obj0000'}, {'name': 'vid0019', 'path': 'vid0019', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.777', '0.841', '0.37', '0.44166666'], 'object_id': 'obj0000'}, {'name': 'vid0019', 'path': 'vid0019', 'startFrame': 1800, 'endFrame': 3690, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.55', '0.58', '0.42333335', '0.45833334'], 'object_id': 'obj0001'}, {'name': 'vid0019', 'path': 'vid0019', 'startFrame': 8610, 'endFrame': 9990, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.429', '0.64', '0.34333333', '0.5516667'], 'object_id': 'obj0002'}, {'name': 'vid0251', 'path': 'vid0251', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.675', '1.0', '0.0', '0.7133333'], 'object_id': 'obj0000'}, {'name': 'vid0250', 'path': 'vid0250', 'startFrame': 0, 'endFrame': 1350, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.178', '0.83', '0.415', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0075', 'path': 'vid0075', 'startFrame': 0, 'endFrame': 2730, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.311', '0.384', '0.20833333', '0.5183333'], 'object_id': 'obj0000'}, {'name': 'vid0071', 'path': 'vid0071', 'startFrame': 0, 'endFrame': 3690, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.011', '0.061', '0.325', '0.45333335'], 'object_id': 'obj0000'}, {'name': 'vid0179', 'path': 'vid0179', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.194', '0.372', '0.31666666', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0172', 'path': 'vid0172', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.467', '0.715', '0.43166667', '0.73833334'], 'object_id': 'obj0000'}, {'name': 'vid0173', 'path': 'vid0173', 'startFrame': 0, 'endFrame': 5040, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.37', '0.508', '0.515', '0.8883333'], 'object_id': 'obj0000'}, {'name': 'vid0170', 'path': 'vid0170', 'startFrame': 0, 'endFrame': 1890, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.52', '0.609', '0.575', '0.94'], 'object_id': 'obj0000'}, {'name': 'vid0171', 'path': 'vid0171', 'startFrame': 0, 'endFrame': 1080, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.503', '0.802', '0.21333334', '0.8616667'], 'object_id': 'obj0000'}, {'name': 'vid0194', 'path': 'vid0194', 'startFrame': 0, 'endFrame': 2340, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.515', '0.692', '0.7683333', '0.83666664'], 'object_id': 'obj0000'}, {'name': 'vid0078', 'path': 'vid0078', 'startFrame': 0, 'endFrame': 7290, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.293', '0.516', '0.25166667', '0.845'], 'object_id': 'obj0000'}, {'name': 'vid0088', 'path': 'vid0088', 'startFrame': 0, 'endFrame': 10890, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.355', '0.972', '0.40833333', '0.71'], 'object_id': 'obj0000'}, {'name': 'vid0083', 'path': 'vid0083', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.371', '0.822', '0.07666667', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0086', 'path': 'vid0086', 'startFrame': 0, 'endFrame': 1530, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.56', '0.766', '0.25', '0.42333335'], 'object_id': 'obj0000'}, {'name': 'vid0087', 'path': 'vid0087', 'startFrame': 0, 'endFrame': 3180, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.471', '1.0', '0.32333332', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0002', 'path': 'vid0002', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.634', '0.848', '0.24666667', '0.67333335'], 'object_id': 'obj0000'}, {'name': 'vid0248', 'path': 'vid0248', 'startFrame': 0, 'endFrame': 2040, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.309', '0.881', '0.21333334', '0.8466667'], 'object_id': 'obj0000'}, {'name': 'vid0248', 'path': 'vid0248', 'startFrame': 3390, 'endFrame': 4740, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.158', '0.337', '0.26833335', '0.87166667'], 'object_id': 'obj0001'}, {'name': 'vid0007', 'path': 'vid0007', 'startFrame': 0, 'endFrame': 4140, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.0', '0.921', '0.31166667', '0.9716667'], 'object_id': 'obj0000'}, {'name': 'vid0244', 'path': 'vid0244', 'startFrame': 0, 'endFrame': 3240, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.241', '0.286', '0.17666666', '0.31666666'], 'object_id': 'obj0000'}, {'name': 'vid0247', 'path': 'vid0247', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.138', '0.308', '0.855', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0240', 'path': 'vid0240', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.305', '0.452', '0.585', '0.62166667'], 'object_id': 'obj0000'}, {'name': 'vid0242', 'path': 'vid0242', 'startFrame': 0, 'endFrame': 1530, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.435', '0.492', '0.86833334', '0.96666664'], 'object_id': 'obj0000'}, {'name': 'vid0243', 'path': 'vid0243', 'startFrame': 0, 'endFrame': 2790, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.828', '0.921', '0.165', '0.6433333'], 'object_id': 'obj0000'}, {'name': 'vid0064', 'path': 'vid0064', 'startFrame': 0, 'endFrame': 1890, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.0', '0.15', '0.16', '0.83'], 'object_id': 'obj0000'}, {'name': 'vid0065', 'path': 'vid0065', 'startFrame': 0, 'endFrame': 6840, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.19', '0.738', '0.405', '0.7083333'], 'object_id': 'obj0000'}, {'name': 'vid0108', 'path': 'vid0108', 'startFrame': 0, 'endFrame': 1290, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.211', '0.468', '0.53', '0.74333334'], 'object_id': 'obj0000'}, {'name': 'vid0060', 'path': 'vid0060', 'startFrame': 0, 'endFrame': 1050, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.396', '0.956', '0.11666667', '0.75166667'], 'object_id': 'obj0000'}, {'name': 'vid0061', 'path': 'vid0061', 'startFrame': 0, 'endFrame': 11790, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.331', '0.564', '0.165', '0.65833336'], 'object_id': 'obj0000'}, {'name': 'vid0068', 'path': 'vid0068', 'startFrame': 0, 'endFrame': 6840, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.173', '0.833', '0.34', '0.72833335'], 'object_id': 'obj0000'}, {'name': 'vid0106', 'path': 'vid0106', 'startFrame': 0, 'endFrame': 4140, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.27', '0.607', '0.16666667', '0.7133333'], 'object_id': 'obj0000'}, {'name': 'vid0105', 'path': 'vid0105', 'startFrame': 0, 'endFrame': 2550, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.645', '0.71', '0.30666667', '0.49166667'], 'object_id': 'obj0000'}, {'name': 'vid0104', 'path': 'vid0104', 'startFrame': 0, 'endFrame': 4080, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.255', '0.895', '0.3', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0050', 'path': 'vid0050', 'startFrame': 0, 'endFrame': 1320, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.496', '0.602', '0.085', '0.87166667'], 'object_id': 'obj0000'}, {'name': 'vid0279', 'path': 'vid0279', 'startFrame': 0, 'endFrame': 2280, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.123', '0.401', '0.28', '0.745'], 'object_id': 'obj0000'}, {'name': 'vid0278', 'path': 'vid0278', 'startFrame': 0, 'endFrame': 2280, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.019', '0.475', '0.305', '0.5366667'], 'object_id': 'obj0000'}, {'name': 'vid0270', 'path': 'vid0270', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.278', '0.344', '0.395', '0.66333336'], 'object_id': 'obj0000'}, {'name': 'vid0273', 'path': 'vid0273', 'startFrame': 0, 'endFrame': 2340, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.576', '0.7', '0.45166665', '0.815'], 'object_id': 'obj0000'}, {'name': 'vid0275', 'path': 'vid0275', 'startFrame': 0, 'endFrame': 2850, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.0', '0.862', '0.051666666', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0277', 'path': 'vid0277', 'startFrame': 0, 'endFrame': 2280, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.368', '0.603', '0.29666665', '0.87'], 'object_id': 'obj0000'}, {'name': 'vid0118', 'path': 'vid0118', 'startFrame': 0, 'endFrame': 8640, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.491', '0.816', '0.27833334', '0.67333335'], 'object_id': 'obj0000'}, {'name': 'vid0118', 'path': 'vid0118', 'startFrame': 4950, 'endFrame': 18090, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.408', '0.694', '0.20833333', '0.71166664'], 'object_id': 'obj0001'}, {'name': 'vid0119', 'path': 'vid0119', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.138', '1.0', '0.44833332', '0.905'], 'object_id': 'obj0000'}, {'name': 'vid0045', 'path': 'vid0045', 'startFrame': 0, 'endFrame': 12690, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.0', '0.739', '0.19666667', '0.48166665'], 'object_id': 'obj0000'}, {'name': 'vid0055', 'path': 'vid0055', 'startFrame': 0, 'endFrame': 6390, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.47', '0.612', '0.08166666', '0.25333333'], 'object_id': 'obj0000'}, {'name': 'vid0057', 'path': 'vid0057', 'startFrame': 0, 'endFrame': 2340, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.177', '0.589', '0.04', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0293', 'path': 'vid0293', 'startFrame': 0, 'endFrame': 9030, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.057', '0.419', '0.15666667', '0.70166665'], 'object_id': 'obj0000'}, {'name': 'vid0112', 'path': 'vid0112', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.033', '0.776', '0.18166667', '0.87666667'], 'object_id': 'obj0000'}, {'name': 'vid0113', 'path': 'vid0113', 'startFrame': 0, 'endFrame': 3900, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.417', '0.522', '0.08833333', '0.44666666'], 'object_id': 'obj0000'}, {'name': 'vid0297', 'path': 'vid0297', 'startFrame': 0, 'endFrame': 1200, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.156', '0.255', '0.52166665', '0.7'], 'object_id': 'obj0000'}, {'name': 'vid0116', 'path': 'vid0116', 'startFrame': 0, 'endFrame': 10080, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.324', '0.575', '0.37666667', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0294', 'path': 'vid0294', 'startFrame': 0, 'endFrame': 1290, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.0', '0.571', '0.17833333', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0183', 'path': 'vid0183', 'startFrame': 0, 'endFrame': 13140, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.0', '0.612', '0.36166668', '0.76166666'], 'object_id': 'obj0000'}, {'name': 'vid0182', 'path': 'vid0182', 'startFrame': 0, 'endFrame': 2730, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.278', '0.778', '0.34666666', '0.645'], 'object_id': 'obj0000'}, {'name': 'vid0181', 'path': 'vid0181', 'startFrame': 0, 'endFrame': 5490, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.612', '0.72', '0.12666667', '0.45'], 'object_id': 'obj0000'}, {'name': 'vid0265', 'path': 'vid0265', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.505', '0.686', '0.11333334', '0.91833335'], 'object_id': 'obj0000'}, {'name': 'vid0187', 'path': 'vid0187', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.518', '0.725', '0.72833335', '0.80833334'], 'object_id': 'obj0000'}, {'name': 'vid0263', 'path': 'vid0263', 'startFrame': 0, 'endFrame': 3690, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.388', '0.558', '0.35', '0.75666666'], 'object_id': 'obj0000'}, {'name': 'vid0185', 'path': 'vid0185', 'startFrame': 0, 'endFrame': 5940, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.374', '0.444', '0.24333334', '0.65'], 'object_id': 'obj0000'}, {'name': 'vid0261', 'path': 'vid0261', 'startFrame': 0, 'endFrame': 1260, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.309', '0.394', '0.7216667', '0.7733333'], 'object_id': 'obj0000'}, {'name': 'vid0188', 'path': 'vid0188', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.526', '0.864', '0.35333332', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0268', 'path': 'vid0268', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.486', '0.713', '0.44166666', '0.7633333'], 'object_id': 'obj0000'}, {'name': 'vid0110', 'path': 'vid0110', 'startFrame': 0, 'endFrame': 1830, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.504', '0.579', '0.40666667', '0.6333333'], 'object_id': 'obj0000'}, {'name': 'vid0049', 'path': 'vid0049', 'startFrame': 0, 'endFrame': 12180, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.632', '0.961', '0.505', '0.67'], 'object_id': 'obj0000'}, {'name': 'vid0049', 'path': 'vid0049', 'startFrame': 1380, 'endFrame': 13080, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.382', '0.574', '0.65833336', '0.715'], 'object_id': 'obj0001'}, {'name': 'vid0280', 'path': 'vid0280', 'startFrame': 0, 'endFrame': 9030, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.398', '0.598', '0.44833332', '0.6383333'], 'object_id': 'obj0000'}, {'name': 'vid0282', 'path': 'vid0282', 'startFrame': 0, 'endFrame': 12180, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.259', '0.598', '0.26833335', '0.6116667'], 'object_id': 'obj0000'}, {'name': 'vid0283', 'path': 'vid0283', 'startFrame': 0, 'endFrame': 2340, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.487', '0.594', '0.53', '0.575'], 'object_id': 'obj0000'}, {'name': 'vid0285', 'path': 'vid0285', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.333', '0.669', '0.89666665', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0041', 'path': 'vid0041', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.382', '0.583', '0.19', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0052', 'path': 'vid0052', 'startFrame': 0, 'endFrame': 1050, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.0', '0.197', '0.17333333', '0.415'], 'object_id': 'obj0000'}, {'name': 'vid0217', 'path': 'vid0217', 'startFrame': 0, 'endFrame': 3030, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.539', '0.565', '0.47833332', '0.495'], 'object_id': 'obj0000'}, {'name': 'vid0198', 'path': 'vid0198', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.216', '0.5', '0.40666667', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0199', 'path': 'vid0199', 'startFrame': 0, 'endFrame': 1740, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.349', '1.0', '0.0', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0219', 'path': 'vid0219', 'startFrame': 0, 'endFrame': 9540, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.562', '0.827', '0.45', '0.69666666'], 'object_id': 'obj0000'}, {'name': 'vid0218', 'path': 'vid0218', 'startFrame': 0, 'endFrame': 4140, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.38', '0.598', '0.26166666', '0.62833333'], 'object_id': 'obj0000'}, {'name': 'vid0218', 'path': 'vid0218', 'startFrame': 4650, 'endFrame': 9540, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.344', '1.0', '0.21', '0.7733333'], 'object_id': 'obj0001'}, {'name': 'vid0059', 'path': 'vid0059', 'startFrame': 0, 'endFrame': 1890, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.606', '0.983', '0.015', '0.42333335'], 'object_id': 'obj0000'}, {'name': 'vid0006', 'path': 'vid0006', 'startFrame': 0, 'endFrame': 2340, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.11', '0.476', '0.375', '0.725'], 'object_id': 'obj0000'}, {'name': 'vid0039', 'path': 'vid0039', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.19', '0.827', '0.08', '0.53333336'], 'object_id': 'obj0000'}, {'name': 'vid0114', 'path': 'vid0114', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.146', '0.447', '0.0', '0.9916667'], 'object_id': 'obj0000'}, {'name': 'vid0036', 'path': 'vid0036', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.223', '0.359', '0.445', '0.685'], 'object_id': 'obj0000'}, {'name': 'vid0035', 'path': 'vid0035', 'startFrame': 0, 'endFrame': 1050, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.167', '0.847', '0.33333334', '0.62833333'], 'object_id': 'obj0000'}, {'name': 'vid0035', 'path': 'vid0035', 'startFrame': 1410, 'endFrame': 8700, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.0', '0.275', '0.29666665', '0.6016667'], 'object_id': 'obj0001'}, {'name': 'vid0099', 'path': 'vid0099', 'startFrame': 0, 'endFrame': 1380, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.164', '0.854', '0.415', '0.6483333'], 'object_id': 'obj0000'}, {'name': 'vid0117', 'path': 'vid0117', 'startFrame': 0, 'endFrame': 2790, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.313', '0.627', '0.5466667', '0.8283333'], 'object_id': 'obj0000'}, {'name': 'vid0200', 'path': 'vid0200', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.518', '0.584', '0.535', '0.8283333'], 'object_id': 'obj0000'}, {'name': 'vid0201', 'path': 'vid0201', 'startFrame': 0, 'endFrame': 2340, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.793', '1.0', '0.0016666667', '0.425'], 'object_id': 'obj0000'}, {'name': 'vid0009', 'path': 'vid0009', 'startFrame': 0, 'endFrame': 1350, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.43', '0.505', '0.415', '0.65'], 'object_id': 'obj0000'}, {'name': 'vid0206', 'path': 'vid0206', 'startFrame': 0, 'endFrame': 1440, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.296', '0.517', '0.255', '0.67333335'], 'object_id': 'obj0000'}, {'name': 'vid0207', 'path': 'vid0207', 'startFrame': 0, 'endFrame': 4140, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.24', '0.335', '0.59', '0.6383333'], 'object_id': 'obj0000'}, {'name': 'vid0209', 'path': 'vid0209', 'startFrame': 0, 'endFrame': 4140, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.284', '0.563', '0.52', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0125', 'path': 'vid0125', 'startFrame': 0, 'endFrame': 3240, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.247', '0.861', '0.6533333', '0.86833334'], 'object_id': 'obj0000'}, {'name': 'vid0124', 'path': 'vid0124', 'startFrame': 0, 'endFrame': 7320, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.432', '0.694', '0.20333333', '0.715'], 'object_id': 'obj0000'}, {'name': 'vid0127', 'path': 'vid0127', 'startFrame': 0, 'endFrame': 2190, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.3', '0.488', '0.28666666', '0.485'], 'object_id': 'obj0000'}, {'name': 'vid0126', 'path': 'vid0126', 'startFrame': 0, 'endFrame': 2340, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.112', '1.0', '0.275', '0.93666667'], 'object_id': 'obj0000'}, {'name': 'vid0328', 'path': 'vid0328', 'startFrame': 0, 'endFrame': 4590, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.544', '0.702', '0.61333334', '0.81333333'], 'object_id': 'obj0000'}, {'name': 'vid0325', 'path': 'vid0325', 'startFrame': 0, 'endFrame': 1590, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.549', '0.611', '0.335', '0.42833334'], 'object_id': 'obj0000'}, {'name': 'vid0323', 'path': 'vid0323', 'startFrame': 0, 'endFrame': 1410, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.832', '1.0', '0.47166666', '0.61'], 'object_id': 'obj0000'}, {'name': 'vid0322', 'path': 'vid0322', 'startFrame': 0, 'endFrame': 900, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.0', '1.0', '0.16333333', '0.80833334'], 'object_id': 'obj0000'}, {'name': 'vid0321', 'path': 'vid0321', 'startFrame': 0, 'endFrame': 1350, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.111', '0.928', '0.26333332', '1.0'], 'object_id': 'obj0000'}, {'name': 'vid0320', 'path': 'vid0320', 'startFrame': 0, 'endFrame': 3240, 'nz': 6, 'ext': 'jpeg', 'gt': ['0.375', '0.631', '0.28', '0.43166667'], 'object_id': 'obj0000'}", "\n", "#]", "\n", "\n", "\n", "return", "sequence_info_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDataset": [[6, 8], ["oxuvadataset.OxuvaDatasetClass.get_sequence_list", "oxuvadataset.OxuvaDatasetClass"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.oxuvadataset.OxuvaDatasetClass.get_sequence_list"], ["def", "OxuvaDataset", "(", ")", ":", "\n", "    ", "return", "OxuvaDatasetClass", "(", ")", ".", "get_sequence_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.ltr.run_training.run_training": [[16, 40], ["cv2.setNumThreads", "print", "ltr.Settings", "importlib.import_module", "getattr", "getattr."], "function", ["None"], ["def", "run_training", "(", "train_module", ",", "train_name", ",", "cudnn_benchmark", "=", "True", ")", ":", "\n", "    ", "\"\"\"Run a train scripts in train_settings.\n    args:\n        train_module: Name of module in the \"train_settings/\" folder.\n        train_name: Name of the train settings file.\n        cudnn_benchmark: Use cudnn benchmark or not (default is True).\n    \"\"\"", "\n", "\n", "# This is needed to avoid strange crashes related to opencv", "\n", "cv", ".", "setNumThreads", "(", "0", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "cudnn_benchmark", "\n", "\n", "print", "(", "'Training:  {}  {}'", ".", "format", "(", "train_module", ",", "train_name", ")", ")", "\n", "\n", "settings", "=", "ws_settings", ".", "Settings", "(", ")", "\n", "settings", ".", "module_name", "=", "train_module", "\n", "settings", ".", "script_name", "=", "train_name", "\n", "settings", ".", "project_path", "=", "'ltr/{}/{}'", ".", "format", "(", "train_module", ",", "train_name", ")", "\n", "\n", "expr_module", "=", "importlib", ".", "import_module", "(", "'ltr.train_settings.{}.{}'", ".", "format", "(", "train_module", ",", "train_name", ")", ")", "\n", "expr_func", "=", "getattr", "(", "expr_module", ",", "'run'", ")", "\n", "\n", "expr_func", "(", "settings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.ltr.run_training.main": [[42, 51], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "run_training.run_training"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.ltr.run_training.run_training"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Run a train scripts in train_settings.'", ")", "\n", "parser", ".", "add_argument", "(", "'train_module'", ",", "type", "=", "str", ",", "help", "=", "'Name of module in the \"train_settings/\" folder.'", ")", "\n", "parser", ".", "add_argument", "(", "'train_name'", ",", "type", "=", "str", ",", "help", "=", "'Name of the train settings file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--cudnn_benchmark'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'Set cudnn benchmark on (1) or off (0) (default is on).'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "run_training", "(", "args", ".", "train_module", ",", "args", ".", "train_name", ",", "args", ".", "cudnn_benchmark", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_default.run": [[13, 106], ["ltr.dataset.Lasot", "ltr.dataset.TrackingNet", "ltr.dataset.MSCOCOSeq", "ltr.dataset.TrackingNet", "ltr.ToGrayscale", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "ltr.data.processing.ATOMProcessing", "ltr.data.processing.ATOMProcessing", "ltr.data.sampler.ATOMSampler", "ltr.data.LTRLoader", "ltr.data.sampler.ATOMSampler", "ltr.data.LTRLoader", "ltr.atom_resnet18", "torch.MSELoss", "ltr.actors.AtomActor", "torch.Adam", "torch.lr_scheduler.StepLR", "ltr.trainers.LTRTrainer", "ltr.trainers.LTRTrainer.train", "actors.AtomActor.net.bb_regressor.parameters", "list", "list", "ltr.ToTensorAndJitter", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "range", "range"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom.atom_resnet18", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["def", "run", "(", "settings", ")", ":", "\n", "# Most common settings are assigned in the settings struct", "\n", "    ", "settings", ".", "description", "=", "'ATOM IoUNet with default settings.'", "\n", "settings", ".", "print_interval", "=", "1", "# How often to print loss and other info", "\n", "settings", ".", "batch_size", "=", "64", "# Batch size", "\n", "settings", ".", "num_workers", "=", "4", "# Number of workers for image loading", "\n", "settings", ".", "normalize_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "# Normalize mean (default pytorch ImageNet values)", "\n", "settings", ".", "normalize_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "# Normalize std (default pytorch ImageNet values)", "\n", "settings", ".", "search_area_factor", "=", "5.0", "# Image patch size relative to target size", "\n", "settings", ".", "feature_sz", "=", "18", "# Size of feature map", "\n", "settings", ".", "output_sz", "=", "settings", ".", "feature_sz", "*", "16", "# Size of input image patches", "\n", "\n", "# Settings for the image sample and proposal generation", "\n", "settings", ".", "center_jitter_factor", "=", "{", "'train'", ":", "0", ",", "'test'", ":", "4.5", "}", "\n", "settings", ".", "scale_jitter_factor", "=", "{", "'train'", ":", "0", ",", "'test'", ":", "0.5", "}", "\n", "settings", ".", "proposal_params", "=", "{", "'min_iou'", ":", "0.1", ",", "'boxes_per_frame'", ":", "16", ",", "'sigma_factor'", ":", "[", "0.01", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.3", "]", "}", "\n", "\n", "# Train datasets", "\n", "lasot_train", "=", "Lasot", "(", "split", "=", "'train'", ")", "\n", "trackingnet_train", "=", "TrackingNet", "(", "set_ids", "=", "list", "(", "range", "(", "11", ")", ")", ")", "\n", "coco_train", "=", "MSCOCOSeq", "(", ")", "\n", "\n", "# Validation datasets", "\n", "trackingnet_val", "=", "TrackingNet", "(", "set_ids", "=", "list", "(", "range", "(", "11", ",", "12", ")", ")", ")", "\n", "\n", "# The joint augmentation transform, that is applied to the pairs jointly", "\n", "transform_joint", "=", "dltransforms", ".", "ToGrayscale", "(", "probability", "=", "0.05", ")", "\n", "\n", "# The augmentation transform applied to the training set (individually to each image in the pair)", "\n", "transform_train", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "dltransforms", ".", "ToTensorAndJitter", "(", "0.2", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "mean", "=", "settings", ".", "normalize_mean", ",", "std", "=", "settings", ".", "normalize_std", ")", "]", ")", "\n", "\n", "# The augmentation transform applied to the validation set (individually to each image in the pair)", "\n", "transform_val", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "mean", "=", "settings", ".", "normalize_mean", ",", "std", "=", "settings", ".", "normalize_std", ")", "]", ")", "\n", "\n", "# Data processing to do on the training pairs", "\n", "data_processing_train", "=", "processing", ".", "ATOMProcessing", "(", "search_area_factor", "=", "settings", ".", "search_area_factor", ",", "\n", "output_sz", "=", "settings", ".", "output_sz", ",", "\n", "center_jitter_factor", "=", "settings", ".", "center_jitter_factor", ",", "\n", "scale_jitter_factor", "=", "settings", ".", "scale_jitter_factor", ",", "\n", "mode", "=", "'sequence'", ",", "\n", "proposal_params", "=", "settings", ".", "proposal_params", ",", "\n", "transform", "=", "transform_train", ",", "\n", "joint_transform", "=", "transform_joint", ")", "\n", "\n", "# Data processing to do on the validation pairs", "\n", "data_processing_val", "=", "processing", ".", "ATOMProcessing", "(", "search_area_factor", "=", "settings", ".", "search_area_factor", ",", "\n", "output_sz", "=", "settings", ".", "output_sz", ",", "\n", "center_jitter_factor", "=", "settings", ".", "center_jitter_factor", ",", "\n", "scale_jitter_factor", "=", "settings", ".", "scale_jitter_factor", ",", "\n", "mode", "=", "'sequence'", ",", "\n", "proposal_params", "=", "settings", ".", "proposal_params", ",", "\n", "transform", "=", "transform_val", ",", "\n", "joint_transform", "=", "transform_joint", ")", "\n", "\n", "# The sampler for training", "\n", "dataset_train", "=", "sampler", ".", "ATOMSampler", "(", "[", "lasot_train", ",", "trackingnet_train", ",", "coco_train", "]", ",", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "samples_per_epoch", "=", "1000", "*", "settings", ".", "batch_size", ",", "max_gap", "=", "50", ",", "\n", "processing", "=", "data_processing_train", ")", "\n", "\n", "# The loader for training", "\n", "loader_train", "=", "LTRLoader", "(", "'train'", ",", "dataset_train", ",", "training", "=", "True", ",", "batch_size", "=", "settings", ".", "batch_size", ",", "num_workers", "=", "settings", ".", "num_workers", ",", "\n", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "stack_dim", "=", "1", ")", "\n", "\n", "# The sampler for validation", "\n", "dataset_val", "=", "sampler", ".", "ATOMSampler", "(", "[", "trackingnet_val", "]", ",", "[", "1", "]", ",", "samples_per_epoch", "=", "500", "*", "settings", ".", "batch_size", ",", "max_gap", "=", "50", ",", "\n", "processing", "=", "data_processing_val", ")", "\n", "\n", "# The loader for validation", "\n", "loader_val", "=", "LTRLoader", "(", "'val'", ",", "dataset_val", ",", "training", "=", "False", ",", "batch_size", "=", "settings", ".", "batch_size", ",", "num_workers", "=", "settings", ".", "num_workers", ",", "\n", "shuffle", "=", "False", ",", "drop_last", "=", "True", ",", "epoch_interval", "=", "5", ",", "stack_dim", "=", "1", ")", "\n", "\n", "# Create network", "\n", "net", "=", "atom_models", ".", "atom_resnet18", "(", "backbone_pretrained", "=", "True", ")", "\n", "\n", "# Set objective", "\n", "objective", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "# Create actor, which wraps network and objective", "\n", "actor", "=", "actors", ".", "AtomActor", "(", "net", "=", "net", ",", "objective", "=", "objective", ")", "\n", "\n", "# Optimizer", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "actor", ".", "net", ".", "bb_regressor", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "\n", "# Learning rate scheduler", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "15", ",", "gamma", "=", "0.2", ")", "\n", "\n", "# Create trainer", "\n", "trainer", "=", "LTRTrainer", "(", "actor", ",", "[", "loader_train", ",", "loader_val", "]", ",", "optimizer", ",", "settings", ",", "lr_scheduler", ")", "\n", "\n", "# Run training (set fail_safe=False if you are debugging)", "\n", "trainer", ".", "train", "(", "40", ",", "load_latest", "=", "True", ",", "fail_safe", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.__init__": [[23, 65], ["torch.Module.__init__", "atom_iou_net.conv", "atom_iou_net.conv", "atom_iou_net.conv", "ltr.external.PreciseRoIPooling.pytorch.prroi_pool.PrRoIPool2D", "ltr.external.PreciseRoIPooling.pytorch.prroi_pool.PrRoIPool2D", "atom_iou_net.conv", "atom_iou_net.conv", "atom_iou_net.conv", "atom_iou_net.conv", "ltr.external.PreciseRoIPooling.pytorch.prroi_pool.PrRoIPool2D", "ltr.external.PreciseRoIPooling.pytorch.prroi_pool.PrRoIPool2D", "atom_iou_net.conv", "atom_iou_net.conv", "ltr.models.layers.blocks.LinearBlock", "ltr.models.layers.blocks.LinearBlock", "torch.Linear", "torch.Linear", "atom_iou_net.AtomIoUNet.modules", "isinstance", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.uniform_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.conv", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.conv", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.conv", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.conv", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.conv", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.conv", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.conv", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.conv", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.conv"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "(", "128", ",", "256", ")", ",", "pred_input_dim", "=", "(", "256", ",", "256", ")", ",", "pred_inter_dim", "=", "(", "256", ",", "256", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# _r for reference, _t for test", "\n", "self", ".", "conv3_1r", "=", "conv", "(", "input_dim", "[", "0", "]", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv3_1t", "=", "conv", "(", "input_dim", "[", "0", "]", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "conv3_2t", "=", "conv", "(", "256", ",", "pred_input_dim", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "prroi_pool3r", "=", "PrRoIPool2D", "(", "3", ",", "3", ",", "1", "/", "8", ")", "\n", "self", ".", "prroi_pool3t", "=", "PrRoIPool2D", "(", "5", ",", "5", ",", "1", "/", "8", ")", "\n", "\n", "self", ".", "fc3_1r", "=", "conv", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "conv4_1r", "=", "conv", "(", "input_dim", "[", "1", "]", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv4_1t", "=", "conv", "(", "input_dim", "[", "1", "]", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "conv4_2t", "=", "conv", "(", "256", ",", "pred_input_dim", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "prroi_pool4r", "=", "PrRoIPool2D", "(", "1", ",", "1", ",", "1", "/", "16", ")", "\n", "self", ".", "prroi_pool4t", "=", "PrRoIPool2D", "(", "3", ",", "3", ",", "1", "/", "16", ")", "\n", "\n", "self", ".", "fc34_3r", "=", "conv", "(", "256", "+", "256", ",", "pred_input_dim", "[", "0", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "fc34_4r", "=", "conv", "(", "256", "+", "256", ",", "pred_input_dim", "[", "1", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "fc3_rt", "=", "LinearBlock", "(", "pred_input_dim", "[", "0", "]", ",", "pred_inter_dim", "[", "0", "]", ",", "5", ")", "\n", "self", ".", "fc4_rt", "=", "LinearBlock", "(", "pred_input_dim", "[", "1", "]", ",", "pred_inter_dim", "[", "1", "]", ",", "3", ")", "\n", "\n", "self", ".", "iou_predictor", "=", "nn", ".", "Linear", "(", "pred_inter_dim", "[", "0", "]", "+", "pred_inter_dim", "[", "1", "]", ",", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# Init weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "mode", "=", "'fan_in'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "# In earlier versions batch norm parameters was initialized with default initialization,", "\n", "# which changed in pytorch 1.2. In 1.1 and earlier the weight was set to U(0,1).", "\n", "# So we use the same initialization here.", "\n", "# m.weight.data.fill_(1)", "\n", "                ", "m", ".", "weight", ".", "data", ".", "uniform_", "(", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.forward": [[66, 95], ["atom_iou_net.AtomIoUNet.get_modulation", "atom_iou_net.AtomIoUNet.get_iou_feat", "proposals2.view.view.view", "atom_iou_net.AtomIoUNet.predict_iou", "atom_iou_net.AtomIoUNet.view", "bb1.dim", "proposals2.view.view.dim", "f.view().repeat().view", "f.dim", "f.view", "f.view().repeat", "f.view"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.get_modulation", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.get_iou_feat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.predict_iou", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "", "", "def", "forward", "(", "self", ",", "feat1", ",", "feat2", ",", "bb1", ",", "proposals2", ")", ":", "\n", "        ", "\"\"\"Runs the ATOM IoUNet during training operation.\n        This forward pass is mainly used for training. Call the individual functions during tracking instead.\n        args:\n            feat1:  Features from the reference frames (4 or 5 dims).\n            feat2:  Features from the test frames (4 or 5 dims).\n            bb1:  Target boxes (x,y,w,h) in image coords in the reference samples. Dims (images, sequences, 4).\n            proposals2:  Proposal boxes for which the IoU will be predicted (images, sequences, num_proposals, 4).\"\"\"", "\n", "\n", "assert", "bb1", ".", "dim", "(", ")", "==", "3", "\n", "assert", "proposals2", ".", "dim", "(", ")", "==", "4", "\n", "\n", "num_images", "=", "proposals2", ".", "shape", "[", "0", "]", "\n", "num_sequences", "=", "proposals2", ".", "shape", "[", "1", "]", "\n", "\n", "# Extract first train sample", "\n", "feat1", "=", "[", "f", "[", "0", ",", "...", "]", "if", "f", ".", "dim", "(", ")", "==", "5", "else", "f", ".", "view", "(", "-", "1", ",", "num_sequences", ",", "*", "f", ".", "shape", "[", "-", "3", ":", "]", ")", "[", "0", ",", "...", "]", "for", "f", "in", "feat1", "]", "\n", "bb1", "=", "bb1", "[", "0", ",", "...", "]", "\n", "\n", "# Get modulation vector", "\n", "modulation", "=", "self", ".", "get_modulation", "(", "feat1", ",", "bb1", ")", "\n", "\n", "iou_feat", "=", "self", ".", "get_iou_feat", "(", "feat2", ")", "\n", "\n", "modulation", "=", "[", "f", ".", "view", "(", "1", ",", "num_sequences", ",", "-", "1", ")", ".", "repeat", "(", "num_images", ",", "1", ",", "1", ")", ".", "view", "(", "num_sequences", "*", "num_images", ",", "-", "1", ")", "for", "f", "in", "modulation", "]", "\n", "\n", "proposals2", "=", "proposals2", ".", "view", "(", "num_sequences", "*", "num_images", ",", "-", "1", ",", "4", ")", "\n", "pred_iou", "=", "self", ".", "predict_iou", "(", "modulation", ",", "iou_feat", ",", "proposals2", ")", "\n", "return", "pred_iou", ".", "view", "(", "num_images", ",", "num_sequences", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.predict_iou": [[96, 137], ["torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "roi2.view().to.view().to.view().to", "atom_iou_net.AtomIoUNet.prroi_pool3t", "atom_iou_net.AtomIoUNet.prroi_pool4t", "atom_iou_net.AtomIoUNet.fc3_rt", "atom_iou_net.AtomIoUNet.fc4_rt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "atom_iou_net.AtomIoUNet.iou_predictor().view", "c3_t.size", "fc34_3_r.view", "fc34_4_r.view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view().to.view().expand", "torch.arange().view().to.view().expand", "roi2.view().to.view().to.view", "atom_iou_net.AtomIoUNet.iou_predictor", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().view().to.view", "torch.arange().view().to.view"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["", "def", "predict_iou", "(", "self", ",", "modulation", ",", "feat", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"Predicts IoU for the give proposals.\n        args:\n            modulation:  Modulation vectors for the targets. Dims (batch, feature_dim).\n            feat:  IoU features (from get_iou_feat) for test images. Dims (batch, feature_dim, H, W).\n            proposals:  Proposal boxes for which the IoU will be predicted (batch, num_proposals, 4).\"\"\"", "\n", "\n", "fc34_3_r", ",", "fc34_4_r", "=", "modulation", "\n", "c3_t", ",", "c4_t", "=", "feat", "\n", "\n", "batch_size", "=", "c3_t", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "# Modulation", "\n", "c3_t_att", "=", "c3_t", "*", "fc34_3_r", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "c4_t_att", "=", "c4_t", "*", "fc34_4_r", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "# Add batch_index to rois", "\n", "batch_index", "=", "torch", ".", "arange", "(", "batch_size", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "c3_t", ".", "device", ")", "\n", "\n", "# Push the different rois for the same image along the batch dimension", "\n", "num_proposals_per_batch", "=", "proposals", ".", "shape", "[", "1", "]", "\n", "\n", "# input proposals2 is in format xywh, convert it to x0y0x1y1 format", "\n", "proposals_xyxy", "=", "torch", ".", "cat", "(", "(", "proposals", "[", ":", ",", ":", ",", "0", ":", "2", "]", ",", "proposals", "[", ":", ",", ":", ",", "0", ":", "2", "]", "+", "proposals", "[", ":", ",", ":", ",", "2", ":", "4", "]", ")", ",", "dim", "=", "2", ")", "\n", "\n", "# Add batch index", "\n", "roi2", "=", "torch", ".", "cat", "(", "(", "batch_index", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "num_proposals_per_batch", ",", "-", "1", ")", ",", "\n", "proposals_xyxy", ")", ",", "dim", "=", "2", ")", "\n", "roi2", "=", "roi2", ".", "view", "(", "-", "1", ",", "5", ")", ".", "to", "(", "proposals_xyxy", ".", "device", ")", "\n", "\n", "roi3t", "=", "self", ".", "prroi_pool3t", "(", "c3_t_att", ",", "roi2", ")", "\n", "roi4t", "=", "self", ".", "prroi_pool4t", "(", "c4_t_att", ",", "roi2", ")", "\n", "\n", "fc3_rt", "=", "self", ".", "fc3_rt", "(", "roi3t", ")", "\n", "fc4_rt", "=", "self", ".", "fc4_rt", "(", "roi4t", ")", "\n", "\n", "fc34_rt_cat", "=", "torch", ".", "cat", "(", "(", "fc3_rt", ",", "fc4_rt", ")", ",", "dim", "=", "1", ")", "\n", "\n", "iou_pred", "=", "self", ".", "iou_predictor", "(", "fc34_rt_cat", ")", ".", "view", "(", "batch_size", ",", "num_proposals_per_batch", ")", "\n", "\n", "return", "iou_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.get_modulation": [[138, 171], ["atom_iou_net.AtomIoUNet.conv3_1r", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "bb.clone.clone.clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "atom_iou_net.AtomIoUNet.prroi_pool3r", "atom_iou_net.AtomIoUNet.conv4_1r", "atom_iou_net.AtomIoUNet.prroi_pool4r", "atom_iou_net.AtomIoUNet.fc3_1r", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "atom_iou_net.AtomIoUNet.fc34_3r", "atom_iou_net.AtomIoUNet.fc34_4r", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to"], ["", "def", "get_modulation", "(", "self", ",", "feat", ",", "bb", ")", ":", "\n", "        ", "\"\"\"Get modulation vectors for the targets.\n        args:\n            feat: Backbone features from reference images. Dims (batch, feature_dim, H, W).\n            bb:  Target boxes (x,y,w,h) in image coords in the reference samples. Dims (batch, 4).\"\"\"", "\n", "\n", "feat3_r", ",", "feat4_r", "=", "feat", "\n", "\n", "c3_r", "=", "self", ".", "conv3_1r", "(", "feat3_r", ")", "\n", "\n", "# Add batch_index to rois", "\n", "batch_size", "=", "bb", ".", "shape", "[", "0", "]", "\n", "batch_index", "=", "torch", ".", "arange", "(", "batch_size", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "bb", ".", "device", ")", "\n", "\n", "# input bb is in format xywh, convert it to x0y0x1y1 format", "\n", "bb", "=", "bb", ".", "clone", "(", ")", "\n", "bb", "[", ":", ",", "2", ":", "4", "]", "=", "bb", "[", ":", ",", "0", ":", "2", "]", "+", "bb", "[", ":", ",", "2", ":", "4", "]", "\n", "roi1", "=", "torch", ".", "cat", "(", "(", "batch_index", ",", "bb", ")", ",", "dim", "=", "1", ")", "\n", "\n", "roi3r", "=", "self", ".", "prroi_pool3r", "(", "c3_r", ",", "roi1", ")", "\n", "\n", "c4_r", "=", "self", ".", "conv4_1r", "(", "feat4_r", ")", "\n", "roi4r", "=", "self", ".", "prroi_pool4r", "(", "c4_r", ",", "roi1", ")", "\n", "\n", "fc3_r", "=", "self", ".", "fc3_1r", "(", "roi3r", ")", "\n", "\n", "# Concatenate from block 3 and 4", "\n", "fc34_r", "=", "torch", ".", "cat", "(", "(", "fc3_r", ",", "roi4r", ")", ",", "dim", "=", "1", ")", "\n", "\n", "fc34_3_r", "=", "self", ".", "fc34_3r", "(", "fc34_r", ")", "\n", "fc34_4_r", "=", "self", ".", "fc34_4r", "(", "fc34_r", ")", "\n", "\n", "return", "fc34_3_r", ",", "fc34_4_r", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.AtomIoUNet.get_iou_feat": [[172, 180], ["atom_iou_net.AtomIoUNet.conv3_2t", "atom_iou_net.AtomIoUNet.conv4_2t", "atom_iou_net.AtomIoUNet.conv3_1t", "atom_iou_net.AtomIoUNet.conv4_1t", "f.view", "f.dim"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "def", "get_iou_feat", "(", "self", ",", "feat2", ")", ":", "\n", "        ", "\"\"\"Get IoU prediction features from a 4 or 5 dimensional backbone input.\"\"\"", "\n", "feat2", "=", "[", "f", ".", "view", "(", "-", "1", ",", "*", "f", ".", "shape", "[", "-", "3", ":", "]", ")", "if", "f", ".", "dim", "(", ")", "==", "5", "else", "f", "for", "f", "in", "feat2", "]", "\n", "feat3_t", ",", "feat4_t", "=", "feat2", "\n", "c3_t", "=", "self", ".", "conv3_2t", "(", "self", ".", "conv3_1t", "(", "feat3_t", ")", ")", "\n", "c4_t", "=", "self", ".", "conv4_2t", "(", "self", ".", "conv4_1t", "(", "feat4_t", ")", ")", "\n", "\n", "return", "c3_t", ",", "c4_t", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom_iou_net.conv": [[7, 13], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["def", "conv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom.ATOMnet.__init__": [[9, 27], ["torch.Module.__init__", "atom.ATOMnet.feature_extractor.parameters", "p.requires_grad_"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters"], ["from", "pytracking", ".", "utils", ".", "plotting", "import", "show_tensor", "\n", "from", "pytracking", ".", "libs", ".", "optimization", "import", "GaussNewtonCG", ",", "ConjugateGradient", ",", "GaussNewtonCGRLS", ",", "ConjugateGradientRLS", ",", "GradientDescentL2", ",", "GradientDescentL2RLS", "\n", "from", ".", "optim", "import", "ConvProblem", ",", "FactorizedConvProblem", "\n", "from", "pytracking", ".", "features", "import", "augmentation", "\n", "\n", "\n", "class", "ATOM", "(", "BaseTracker", ")", ":", "\n", "\n", "    ", "def", "initialize_features", "(", "self", ")", ":", "\n", "        ", "if", "not", "getattr", "(", "self", ",", "'features_initialized'", ",", "False", ")", ":", "\n", "            ", "self", ".", "params", ".", "features", ".", "initialize", "(", ")", "\n", "", "self", ".", "features_initialized", "=", "True", "\n", "\n", "\n", "", "def", "initialize", "(", "self", ",", "image", ",", "info", ":", "dict", ")", "->", "dict", ":", "\n", "        ", "state", "=", "info", "[", "'init_bbox'", "]", "\n", "\n", "# Initialize some stuff", "\n", "self", ".", "frame_num", "=", "1", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom.ATOMnet.forward": [[28, 49], ["atom.ATOMnet.extract_backbone_features", "atom.ATOMnet.extract_backbone_features", "atom.ATOMnet.bb_regressor", "train_imgs.view", "test_imgs.view", "train_bb.view", "test_proposals.view", "train_imgs.dim", "test_imgs.dim", "atom.ATOMnet.values", "atom.ATOMnet.values"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_backbone_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_backbone_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["if", "not", "hasattr", "(", "self", ".", "params", ",", "'device'", ")", ":", "\n", "            ", "self", ".", "params", ".", "device", "=", "'cuda'", "if", "self", ".", "params", ".", "use_gpu", "else", "'cpu'", "\n", "\n", "# Initialize features", "\n", "", "self", ".", "initialize_features", "(", ")", "\n", "\n", "# Check if image is color", "\n", "self", ".", "params", ".", "features", ".", "set_is_color", "(", "image", ".", "shape", "[", "2", "]", "==", "3", ")", "\n", "\n", "# Get feature specific params", "\n", "self", ".", "fparams", "=", "self", ".", "params", ".", "features", ".", "get_fparams", "(", "'feature_params'", ")", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Get position and size", "\n", "self", ".", "pos", "=", "torch", ".", "Tensor", "(", "[", "state", "[", "1", "]", "+", "(", "state", "[", "3", "]", "-", "1", ")", "/", "2", ",", "state", "[", "0", "]", "+", "(", "state", "[", "2", "]", "-", "1", ")", "/", "2", "]", ")", "\n", "self", ".", "target_sz", "=", "torch", ".", "Tensor", "(", "[", "state", "[", "3", "]", ",", "state", "[", "2", "]", "]", ")", "\n", "\n", "# Set search area", "\n", "self", ".", "target_scale", "=", "1.0", "\n", "search_area", "=", "torch", ".", "prod", "(", "self", ".", "target_sz", "*", "self", ".", "params", ".", "search_area_scale", ")", ".", "item", "(", ")", "\n", "if", "search_area", ">", "self", ".", "params", ".", "max_image_sample_size", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom.ATOMnet.extract_backbone_features": [[50, 54], ["atom.ATOMnet.feature_extractor"], "methods", ["None"], ["            ", "self", ".", "target_scale", "=", "math", ".", "sqrt", "(", "search_area", "/", "self", ".", "params", ".", "max_image_sample_size", ")", "\n", "", "elif", "search_area", "<", "self", ".", "params", ".", "min_image_sample_size", ":", "\n", "            ", "self", ".", "target_scale", "=", "math", ".", "sqrt", "(", "search_area", "/", "self", ".", "params", ".", "min_image_sample_size", ")", "\n", "\n", "# Check if IoUNet is used", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom.ATOMnet.extract_features": [[55, 57], ["atom.ATOMnet.feature_extractor"], "methods", ["None"], ["", "self", ".", "use_iou_net", "=", "getattr", "(", "self", ".", "params", ",", "'use_iou_net'", ",", "True", ")", "\n", "\n", "# Target size in base scale", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom.atom_resnet18": [[60, 72], ["ltr.resnet18", "ltr.AtomIoUNet", "atom.ATOMnet"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.resnet18"], ["# Use odd square search area and set sizes", "\n", "feat_max_stride", "=", "max", "(", "self", ".", "params", ".", "features", ".", "stride", "(", ")", ")", "\n", "if", "getattr", "(", "self", ".", "params", ",", "'search_area_shape'", ",", "'square'", ")", "==", "'square'", ":", "\n", "            ", "self", ".", "img_sample_sz", "=", "torch", ".", "round", "(", "torch", ".", "sqrt", "(", "torch", ".", "prod", "(", "self", ".", "base_target_sz", "*", "self", ".", "params", ".", "search_area_scale", ")", ")", ")", "*", "torch", ".", "ones", "(", "2", ")", "\n", "", "elif", "self", ".", "params", ".", "search_area_shape", "==", "'initrect'", ":", "\n", "            ", "self", ".", "img_sample_sz", "=", "torch", ".", "round", "(", "self", ".", "base_target_sz", "*", "self", ".", "params", ".", "search_area_scale", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown search area shape'", ")", "\n", "", "if", "self", ".", "params", ".", "feature_size_odd", ":", "\n", "            ", "self", ".", "img_sample_sz", "+=", "feat_max_stride", "-", "self", ".", "img_sample_sz", "%", "(", "2", "*", "feat_max_stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_sample_sz", "+=", "feat_max_stride", "-", "(", "self", ".", "img_sample_sz", "+", "feat_max_stride", ")", "%", "(", "2", "*", "feat_max_stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.bbreg.atom.atom_resnet50": [[74, 86], ["ltr.resnet50", "ltr.AtomIoUNet", "atom.ATOMnet"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.resnet50"], ["", "self", ".", "img_support_sz", "=", "self", ".", "img_sample_sz", "\n", "self", ".", "feature_sz", "=", "self", ".", "params", ".", "features", ".", "size", "(", "self", ".", "img_sample_sz", ")", "\n", "self", ".", "output_sz", "=", "self", ".", "params", ".", "score_upsample_factor", "*", "self", ".", "img_support_sz", "# Interpolated size of the output", "\n", "self", ".", "kernel_size", "=", "self", ".", "fparams", ".", "attribute", "(", "'kernel_size'", ")", "\n", "\n", "self", ".", "iou_img_sample_sz", "=", "self", ".", "img_sample_sz", "\n", "\n", "# Optimization options", "\n", "self", ".", "params", ".", "precond_learning_rate", "=", "self", ".", "fparams", ".", "attribute", "(", "'learning_rate'", ")", "\n", "if", "self", ".", "params", ".", "CG_forgetting_rate", "is", "None", "or", "max", "(", "self", ".", "params", ".", "precond_learning_rate", ")", ">=", "1", ":", "\n", "            ", "self", ".", "params", ".", "direction_forget_factor", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "params", ".", "direction_forget_factor", "=", "(", "1", "-", "max", "(", "self", ".", "params", ".", "precond_learning_rate", ")", ")", "**", "self", ".", "params", ".", "CG_forgetting_rate", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.tensorboard.TensorboardWriter.__init__": [[7, 10], ["collections.OrderedDict", "tensorboardX.SummaryWriter", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "directory", ",", "loader_names", ")", ":", "\n", "        ", "self", ".", "directory", "=", "directory", "\n", "self", ".", "writer", "=", "OrderedDict", "(", "{", "name", ":", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "name", ")", ")", "for", "name", "in", "loader_names", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.tensorboard.TensorboardWriter.write_info": [[11, 17], ["tensorboardX.SummaryWriter", "tensorboardX.SummaryWriter.add_text", "tensorboardX.SummaryWriter.add_text", "tensorboardX.SummaryWriter.add_text", "tensorboardX.SummaryWriter.close", "os.path.join"], "methods", ["None"], ["", "def", "write_info", "(", "self", ",", "module_name", ",", "script_name", ",", "description", ")", ":", "\n", "        ", "tb_info_writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'info'", ")", ")", "\n", "tb_info_writer", ".", "add_text", "(", "'Modulet_name'", ",", "module_name", ")", "\n", "tb_info_writer", ".", "add_text", "(", "'Script_name'", ",", "script_name", ")", "\n", "tb_info_writer", ".", "add_text", "(", "'Description'", ",", "description", ")", "\n", "tb_info_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.tensorboard.TensorboardWriter.write_epoch": [[18, 25], ["stats.items", "loader_stats.items", "hasattr", "getattr", "tensorboard.TensorboardWriter.writer[].add_scalar"], "methods", ["None"], ["", "def", "write_epoch", "(", "self", ",", "stats", ":", "OrderedDict", ",", "epoch", ":", "int", ",", "ind", "=", "-", "1", ")", ":", "\n", "        ", "for", "loader_name", ",", "loader_stats", "in", "stats", ".", "items", "(", ")", ":", "\n", "            ", "if", "loader_stats", "is", "None", ":", "\n", "                ", "continue", "\n", "", "for", "var_name", ",", "val", "in", "loader_stats", ".", "items", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "val", ",", "'history'", ")", "and", "getattr", "(", "val", ",", "'has_new_data'", ",", "True", ")", ":", "\n", "                    ", "self", ".", "writer", "[", "loader_name", "]", ".", "add_scalar", "(", "var_name", ",", "val", ".", "history", "[", "ind", "]", ",", "epoch", ")", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.multigpu.MultiGPU.__getattr__": [[9, 15], ["getattr", "super().__getattr__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.multigpu.MultiGPU.__getattr__"], ["    ", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "super", "(", ")", ".", "__getattr__", "(", "item", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "return", "getattr", "(", "self", ".", "module", ",", "item", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.multigpu.is_multi_gpu": [[4, 6], ["isinstance"], "function", ["None"], ["def", "is_multi_gpu", "(", "net", ")", ":", "\n", "    ", "return", "isinstance", "(", "net", ",", "(", "MultiGPU", ",", "nn", ".", "DataParallel", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.settings.Settings.__init__": [[6, 8], ["settings.Settings.set_default"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.settings.Settings.set_default"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "set_default", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.settings.Settings.set_default": [[9, 12], ["ltr.admin.environment.env_settings"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings"], ["", "def", "set_default", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", "=", "env_settings", "(", ")", "\n", "self", ".", "use_gpu", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.model_constructor.NetConstructor.__init__": [[28, 40], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fun_name", ",", "fun_module", ",", "args", ",", "kwds", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            fun_name - The function which returns the network\n            fun_module - the module which contains the network function\n            args - arguments which are passed to the network function\n            kwds - arguments which are passed to the network function\n        \"\"\"", "\n", "self", ".", "fun_name", "=", "fun_name", "\n", "self", ".", "fun_module", "=", "fun_module", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "kwds", "=", "kwds", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.model_constructor.NetConstructor.get": [[41, 46], ["importlib.import_module", "getattr", "getattr."], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\" Rebuild the network by calling the network function with the correct arguments. \"\"\"", "\n", "net_module", "=", "importlib", ".", "import_module", "(", "self", ".", "fun_module", ")", "\n", "net_fun", "=", "getattr", "(", "net_module", ",", "self", ".", "fun_name", ")", "\n", "return", "net_fun", "(", "*", "self", ".", "args", ",", "**", "self", ".", "kwds", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.model_constructor.model_constructor": [[5, 22], ["functools.wraps", "model_constructor.NetConstructor", "f", "isinstance"], "function", ["None"], ["def", "model_constructor", "(", "f", ")", ":", "\n", "    ", "\"\"\" Wraps the function 'f' which returns the network. An extra field 'constructor' is added to the network returned\n    by 'f'. This field contains an instance of the  'NetConstructor' class, which contains the information needed to\n    re-construct the network, such as the name of the function 'f', the function arguments etc. Thus, the network can\n    be easily constructed from a saved checkpoint by calling NetConstructor.get() function.\n    \"\"\"", "\n", "@", "wraps", "(", "f", ")", "\n", "def", "f_wrapper", "(", "*", "args", ",", "**", "kwds", ")", ":", "\n", "        ", "net_constr", "=", "NetConstructor", "(", "f", ".", "__name__", ",", "f", ".", "__module__", ",", "args", ",", "kwds", ")", "\n", "output", "=", "f", "(", "*", "args", ",", "**", "kwds", ")", "\n", "if", "isinstance", "(", "output", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "# Assume first argument is the network", "\n", "            ", "output", "[", "0", "]", ".", "constructor", "=", "net_constr", "\n", "", "else", ":", "\n", "            ", "output", ".", "constructor", "=", "net_constr", "\n", "", "return", "output", "\n", "", "return", "f_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading.load_network": [[8, 80], ["pathlib.Path.is_file", "loading.torch_load_legacy", "net_constr.get.load_state_dict", "pathlib.Path", "str", "sorted", "isinstance", "kwargs.items", "net_constr.fun_module.startswith", "net_constr.get", "RuntimeError", "pathlib.Path.glob", "Exception", "sorted", "isinstance", "pathlib.Path.glob", "Exception", "len", "Exception", "os.path.expanduser", "net_constr.kwds.keys", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading.torch_load_legacy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.model_constructor.NetConstructor.get"], ["        ", "path_full", "=", "net_path", "\n", "net", ",", "_", "=", "ltr_loading", ".", "load_network", "(", "path_full", ",", "backbone_pretrained", "=", "False", ")", "\n", "", "elif", "isinstance", "(", "env_settings", "(", ")", ".", "network_path", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "net", "=", "None", "\n", "for", "p", "in", "env_settings", "(", ")", ".", "network_path", ":", "\n", "            ", "path_full", "=", "os", ".", "path", ".", "join", "(", "p", ",", "net_path", ")", "\n", "try", ":", "\n", "                ", "net", ",", "_", "=", "ltr_loading", ".", "load_network", "(", "path_full", ",", "backbone_pretrained", "=", "False", ")", "\n", "break", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "", "assert", "net", "is", "not", "None", ",", "'Failed to load network'", "\n", "", "else", ":", "\n", "        ", "path_full", "=", "os", ".", "path", ".", "join", "(", "env_settings", "(", ")", ".", "network_path", ",", "net_path", ")", "\n", "net", ",", "_", "=", "ltr_loading", ".", "load_network", "(", "path_full", ",", "backbone_pretrained", "=", "False", ")", "\n", "\n", "", "return", "net", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading.load_weights": [[82, 87], ["torch.load", "net.load_state_dict"], "function", ["None"], []], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading.torch_load_legacy": [[89, 102], ["loading._setup_legacy_env", "torch.load", "loading._cleanup_legacy_env"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading._setup_legacy_env", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading._cleanup_legacy_env"], []], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading._setup_legacy_env": [[104, 111], ["importlib.import_module", "importlib.import_module"], "function", ["None"], []], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading._cleanup_legacy_env": [[113, 120], ["sys.modules.keys", "m.startswith", "del_modules.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.StatValue.__init__": [[4, 6], ["stats.StatValue.clear"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.clear"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.StatValue.reset": [[7, 9], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.StatValue.clear": [[10, 13], ["stats.StatValue.reset"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.reset"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "self", ".", "history", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.StatValue.update": [[14, 17], ["stats.StatValue.history.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "history", ".", "append", "(", "self", ".", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.__init__": [[21, 24], ["stats.AverageMeter.clear"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.clear"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "clear", "(", ")", "\n", "self", ".", "has_new_data", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.reset": [[25, 30], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "avg", "=", "0", "\n", "self", ".", "val", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.clear": [[31, 34], ["stats.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.reset"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "self", ".", "history", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.update": [[35, 40], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.new_epoch": [[41, 48], ["stats.AverageMeter.history.append", "stats.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.reset"], ["", "def", "new_epoch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "count", ">", "0", ":", "\n", "            ", "self", ".", "history", ".", "append", "(", "self", ".", "avg", ")", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "has_new_data", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "has_new_data", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.topk_accuracy": [[50, 72], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "isinstance", "target.view().expand_as", "res.append", "correct[].view().float().sum", "target.view", "correct[].view().float", "correct[].view"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["", "", "", "def", "topk_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "single_input", "=", "not", "isinstance", "(", "topk", ",", "(", "tuple", ",", "list", ")", ")", "\n", "if", "single_input", ":", "\n", "        ", "topk", "=", "(", "topk", ",", ")", "\n", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "res", ".", "append", "(", "correct_k", "*", "100.0", "/", "batch_size", ")", "\n", "\n", "", "if", "single_input", ":", "\n", "        ", "return", "res", "[", "0", "]", "\n", "\n", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.create_default_local_file": [[6, 35], ["os.path.join", "collections.OrderedDict", "os.path.dirname", "open", "f.write", "f.write", "collections.OrderedDict.items", "f.write", "f.write"], "function", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pytracking_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'..'", ")", ")", "\n", "\n", "self", ".", "results_path", "=", "'{}/tracking_results/'", ".", "format", "(", "pytracking_path", ")", "\n", "self", ".", "network_path", "=", "'{}/networks/'", ".", "format", "(", "pytracking_path", ")", "\n", "self", ".", "otb_path", "=", "''", "\n", "self", ".", "nfs_path", "=", "''", "\n", "self", ".", "uav_path", "=", "''", "\n", "self", ".", "tpl_path", "=", "''", "\n", "self", ".", "vot_path", "=", "''", "\n", "self", ".", "got10k_path", "=", "''", "\n", "self", ".", "lasot_path", "=", "''", "\n", "self", ".", "trackingnet_path", "=", "''", "\n", "\n", "\n", "", "", "def", "create_default_local_file", "(", ")", ":", "\n", "    ", "comment", "=", "{", "'results_path'", ":", "'Where to store tracking results'", ",", "\n", "'network_path'", ":", "'Where tracking networks are stored.'", "}", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'local.py'", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "settings", "=", "EnvSettings", "(", ")", "\n", "\n", "f", ".", "write", "(", "'from pytracking.evaluation.environment import EnvSettings\\n\\n'", ")", "\n", "f", ".", "write", "(", "'def local_env_settings():\\n'", ")", "\n", "f", ".", "write", "(", "'    settings = EnvSettings()\\n\\n'", ")", "\n", "f", ".", "write", "(", "'    # Set your local paths here.\\n\\n'", ")", "\n", "\n", "for", "attr", "in", "dir", "(", "settings", ")", ":", "\n", "            ", "comment_str", "=", "None", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings": [[37, 47], ["importlib.import_module", "importlib.import_module.EnvironmentSettings", "os.path.join", "environment.create_default_local_file", "RuntimeError", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.create_default_local_file"], ["                ", "comment_str", "=", "comment", "[", "attr", "]", "\n", "", "attr_val", "=", "getattr", "(", "settings", ",", "attr", ")", "\n", "if", "not", "attr", ".", "startswith", "(", "'__'", ")", "and", "not", "callable", "(", "attr_val", ")", ":", "\n", "                ", "if", "comment_str", "is", "None", ":", "\n", "                    ", "f", ".", "write", "(", "'    settings.{} = \\'{}\\'\\n'", ".", "format", "(", "attr", ",", "attr_val", ")", ")", "\n", "", "else", ":", "\n", "                    ", "f", ".", "write", "(", "'    settings.{} = \\'{}\\'    # {}\\n'", ".", "format", "(", "attr", ",", "attr_val", ",", "comment_str", ")", ")", "\n", "", "", "", "f", ".", "write", "(", "'\\n    return settings\\n\\n'", ")", "\n", "\n", "\n", "", "", "def", "env_settings", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.local.EnvironmentSettings.__init__": [[2, 11], ["None"], "methods", ["None"], ["\n", "def", "local_env_settings", "(", ")", ":", "\n", "    ", "settings", "=", "EnvSettings", "(", ")", "\n", "\n", "# Set your local paths here.", "\n", "\n", "settings", ".", "got10k_path", "=", "''", "\n", "settings", ".", "lasot_path", "=", "''", "\n", "settings", ".", "network_path", "=", "''", "# Where tracking networks are stored.", "\n", "settings", ".", "nfs_path", "=", "''", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot.__init__": [[26, 47], ["base_dataset.BaseDataset.__init__", "lasot.Lasot._build_sequence_list", "random.sample", "ltr.admin.environment.env_settings", "int", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot._build_sequence_list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "default_image_loader", ",", "vid_ids", "=", "None", ",", "split", "=", "None", ",", "data_fraction", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to the lasot dataset.\n            image_loader (default_image_loader) -  The function to read the images. If installed,\n                                                   jpeg4py (https://github.com/ajkxyz/jpeg4py) is used by default. Else,\n                                                   opencv's imread is used.\n            vid_ids - List containing the ids of the videos (1 - 20) used for training. If vid_ids = [1, 3, 5], then the\n                    videos with subscripts -1, -3, and -5 from each class will be used for training.\n            split - If split='train', the official train split (protocol-II) is used for training. Note: Only one of\n                    vid_ids or split option can be used at a time.\n            data_fraction (None) - Fraction of videos to be used. The videos are selected randomly. If None, all the\n                                   videos will be used\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "lasot_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "image_loader", ")", "\n", "\n", "self", ".", "sequence_list", "=", "self", ".", "_build_sequence_list", "(", "vid_ids", ",", "split", ")", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "sequence_list", "=", "random", ".", "sample", "(", "self", ".", "sequence_list", ",", "int", "(", "len", "(", "self", ".", "sequence_list", ")", "*", "data_fraction", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot._build_sequence_list": [[48, 64], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv().values.tolist", "ValueError", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "ValueError", "ValueError", "os.path.realpath", "os.path.realpath", "os.path.realpath", "os.path.realpath", "pandas.read_csv", "str"], "methods", ["None"], ["", "", "def", "_build_sequence_list", "(", "self", ",", "vid_ids", "=", "None", ",", "split", "=", "None", ")", ":", "\n", "        ", "if", "split", "is", "not", "None", ":", "\n", "            ", "if", "vid_ids", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Cannot set both split_name and vid_ids.'", ")", "\n", "", "ltr_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'lasot_train_split.txt'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown split name.'", ")", "\n", "", "sequence_list", "=", "pandas", ".", "read_csv", "(", "file_path", ",", "header", "=", "None", ",", "squeeze", "=", "True", ")", ".", "values", ".", "tolist", "(", ")", "\n", "", "elif", "vid_ids", "is", "not", "None", ":", "\n", "            ", "sequence_list", "=", "[", "c", "+", "'-'", "+", "str", "(", "v", ")", "for", "c", "in", "self", ".", "class_list", "for", "v", "in", "vid_ids", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Set either split_name or vid_ids.'", ")", "\n", "\n", "", "return", "sequence_list", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot.get_name": [[65, 67], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'lasot'", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot.get_num_sequences": [[68, 70], ["len"], "methods", ["None"], ["", "def", "get_num_sequences", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot._read_bb_anno": [[71, 75], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.tensor", "pandas.read_csv"], "methods", ["None"], ["", "def", "_read_bb_anno", "(", "self", ",", "seq_path", ")", ":", "\n", "        ", "bb_anno_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"groundtruth.txt\"", ")", "\n", "gt", "=", "pandas", ".", "read_csv", "(", "bb_anno_file", ",", "delimiter", "=", "','", ",", "header", "=", "None", ",", "dtype", "=", "np", ".", "float32", ",", "na_filter", "=", "False", ",", "low_memory", "=", "False", ")", ".", "values", "\n", "return", "torch", ".", "tensor", "(", "gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot._read_target_visible": [[76, 89], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "torch.ByteTensor", "open", "torch.ByteTensor", "int", "int", "list", "list", "csv.reader", "csv.reader"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["", "def", "_read_target_visible", "(", "self", ",", "seq_path", ")", ":", "\n", "# Read full occlusion and out_of_view", "\n", "        ", "occlusion_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"full_occlusion.txt\"", ")", "\n", "out_of_view_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"out_of_view.txt\"", ")", "\n", "\n", "with", "open", "(", "occlusion_file", ",", "'r'", ",", "newline", "=", "''", ")", "as", "f", ":", "\n", "            ", "occlusion", "=", "torch", ".", "ByteTensor", "(", "[", "int", "(", "v", ")", "for", "v", "in", "list", "(", "csv", ".", "reader", "(", "f", ")", ")", "[", "0", "]", "]", ")", "\n", "", "with", "open", "(", "out_of_view_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "out_of_view", "=", "torch", ".", "ByteTensor", "(", "[", "int", "(", "v", ")", "for", "v", "in", "list", "(", "csv", ".", "reader", "(", "f", ")", ")", "[", "0", "]", "]", ")", "\n", "\n", "", "target_visible", "=", "~", "occlusion", "&", "~", "out_of_view", "\n", "\n", "return", "target_visible", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot._get_sequence_path": [[90, 96], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "seq_name.split", "seq_name.split"], "methods", ["None"], ["", "def", "_get_sequence_path", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_name", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "\n", "class_name", "=", "seq_name", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "vid_id", "=", "seq_name", ".", "split", "(", "'-'", ")", "[", "1", "]", "\n", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "class_name", ",", "class_name", "+", "'-'", "+", "vid_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot.get_sequence_info": [[97, 105], ["lasot.Lasot._get_sequence_path", "lasot.Lasot._read_bb_anno", "lasot.Lasot._read_target_visible", "valid.byte"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._get_sequence_path", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._read_bb_anno", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._read_target_visible"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "bbox", "=", "self", ".", "_read_bb_anno", "(", "seq_path", ")", "\n", "\n", "valid", "=", "(", "bbox", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bbox", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", "=", "self", ".", "_read_target_visible", "(", "seq_path", ")", "&", "valid", ".", "byte", "(", ")", "\n", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot._get_frame_path": [[106, 108], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_get_frame_path", "(", "self", ",", "seq_path", ",", "frame_id", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'img'", ",", "'{:08}.jpg'", ".", "format", "(", "frame_id", "+", "1", ")", ")", "# frames start from 1", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot._get_frame": [[109, 111], ["lasot.Lasot.image_loader", "lasot.Lasot._get_frame_path"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._get_frame_path"], ["", "def", "_get_frame", "(", "self", ",", "seq_path", ",", "frame_id", ")", ":", "\n", "        ", "return", "self", ".", "image_loader", "(", "self", ".", "_get_frame_path", "(", "seq_path", ",", "frame_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot._get_class": [[112, 115], ["seq_path.split"], "methods", ["None"], ["", "def", "_get_class", "(", "self", ",", "seq_path", ")", ":", "\n", "        ", "obj_class", "=", "seq_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "return", "obj_class", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot.get_frames": [[116, 137], ["lasot.Lasot._get_sequence_path", "lasot.Lasot._get_class", "lasot.Lasot.items", "collections.OrderedDict", "lasot.Lasot._get_frame", "lasot.Lasot.get_sequence_info", "value[].clone"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._get_sequence_path", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.lasot.Lasot._get_class", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID._get_frame", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "\n", "obj_class", "=", "self", ".", "_get_class", "(", "seq_path", ")", "\n", "frame_list", "=", "[", "self", ".", "_get_frame", "(", "seq_path", ",", "f_id", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "# Create anno dict", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "f_id", ",", "...", "]", ".", "clone", "(", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "", "object_meta", "=", "OrderedDict", "(", "{", "'object_class'", ":", "obj_class", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "\n", "return", "frame_list", ",", "anno_frames", ",", "object_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.tracking_net.TrackingNet.__init__": [[46, 72], ["base_dataset.BaseDataset.__init__", "tracking_net.list_sequences", "random.sample", "ltr.admin.environment.env_settings", "int", "range", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.tracking_net.list_sequences", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "default_image_loader", ",", "set_ids", "=", "None", ",", "data_fraction", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root        - The path to the TrackingNet folder, containing the training sets.\n            image_loader (default_image_loader) -  The function to read the images. If installed,\n                                       jpeg4py (https://github.com/ajkxyz/jpeg4py) is used by default. Else,\n                                       opencv's imread is used.\n            set_ids (None) - List containing the ids of the TrackingNet sets to be used for training. If None, all the\n                            sets (0 - 11) will be used.\n            data_fraction (None) - Fraction of videos to be used. The videos are selected randomly. If None, all the\n                                   videos will be used\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "trackingnet_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "image_loader", ")", "\n", "\n", "if", "set_ids", "is", "None", ":", "\n", "            ", "set_ids", "=", "[", "i", "for", "i", "in", "range", "(", "12", ")", "]", "\n", "\n", "", "self", ".", "set_ids", "=", "set_ids", "\n", "\n", "# Keep a list of all videos. Sequence list is a list of tuples (set_id, video_name) containing the set_id and", "\n", "# video_name for each sequence", "\n", "self", ".", "sequence_list", "=", "list_sequences", "(", "self", ".", "root", ",", "self", ".", "set_ids", ")", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "sequence_list", "=", "random", ".", "sample", "(", "self", ".", "sequence_list", ",", "int", "(", "len", "(", "self", ".", "sequence_list", ")", "*", "data_fraction", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.tracking_net.TrackingNet.get_name": [[73, 75], ["None"], "methods", ["None"], ["", "", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'trackingnet'", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.tracking_net.TrackingNet._read_bb_anno": [[76, 83], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.tensor", "pandas.read_csv", "str"], "methods", ["None"], ["", "def", "_read_bb_anno", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "set_id", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "0", "]", "\n", "vid_name", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "1", "]", "\n", "bb_anno_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"TRAIN_\"", "+", "str", "(", "set_id", ")", ",", "\"anno\"", ",", "vid_name", "+", "\".txt\"", ")", "\n", "gt", "=", "pandas", ".", "read_csv", "(", "bb_anno_file", ",", "delimiter", "=", "','", ",", "header", "=", "None", ",", "dtype", "=", "np", ".", "float32", ",", "na_filter", "=", "False", ",", "low_memory", "=", "False", ")", ".", "values", "\n", "\n", "return", "torch", ".", "tensor", "(", "gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.tracking_net.TrackingNet.get_sequence_info": [[84, 91], ["tracking_net.TrackingNet._read_bb_anno", "valid.clone().byte", "valid.clone"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._read_bb_anno"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "bbox", "=", "self", ".", "_read_bb_anno", "(", "seq_id", ")", "\n", "\n", "valid", "=", "(", "bbox", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bbox", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", "=", "valid", ".", "clone", "(", ")", ".", "byte", "(", ")", "\n", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.tracking_net.TrackingNet._get_frame": [[92, 97], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "tracking_net.TrackingNet.image_loader", "str", "str"], "methods", ["None"], ["", "def", "_get_frame", "(", "self", ",", "seq_id", ",", "frame_id", ")", ":", "\n", "        ", "set_id", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "0", "]", "\n", "vid_name", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "1", "]", "\n", "frame_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"TRAIN_\"", "+", "str", "(", "set_id", ")", ",", "\"frames\"", ",", "vid_name", ",", "str", "(", "frame_id", ")", "+", "\".jpg\"", ")", "\n", "return", "self", ".", "image_loader", "(", "frame_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.tracking_net.TrackingNet.get_frames": [[98, 116], ["tracking_net.TrackingNet.items", "collections.OrderedDict", "tracking_net.TrackingNet._get_frame", "tracking_net.TrackingNet.get_sequence_info", "value[].clone"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID._get_frame", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "frame_list", "=", "[", "self", ".", "_get_frame", "(", "seq_id", ",", "f", ")", "for", "f", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "# Create anno dict", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "f_id", ",", "...", "]", ".", "clone", "(", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "", "object_meta", "=", "OrderedDict", "(", "{", "'object_class'", ":", "None", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "\n", "return", "frame_list", ",", "anno_frames", ",", "object_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.tracking_net.list_sequences": [[14, 33], ["os.path.join", "os.path.join", "str", "os.listdir", "os.listdir", "f.endswith", "os.path.splitext", "os.path.splitext"], "function", ["None"], ["def", "list_sequences", "(", "root", ",", "set_ids", ")", ":", "\n", "    ", "\"\"\" Lists all the videos in the input set_ids. Returns a list of tuples (set_id, video_name)\n\n    args:\n        root: Root directory to TrackingNet\n        set_ids: Sets (0-11) which are to be used\n\n    returns:\n        list - list of tuples (set_id, video_name) containing the set_id and video_name for each sequence\n    \"\"\"", "\n", "sequence_list", "=", "[", "]", "\n", "\n", "for", "s", "in", "set_ids", ":", "\n", "        ", "anno_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"TRAIN_\"", "+", "str", "(", "s", ")", ",", "\"anno\"", ")", "\n", "\n", "sequences_cur_set", "=", "[", "(", "s", ",", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", ")", "for", "f", "in", "os", ".", "listdir", "(", "anno_dir", ")", "if", "f", ".", "endswith", "(", "'.txt'", ")", "]", "\n", "sequence_list", "+=", "sequences_cur_set", "\n", "\n", "", "return", "sequence_list", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k.__init__": [[26, 73], ["base_dataset.BaseDataset.__init__", "got10k.Got10k._get_sequence_list", "got10k.Got10k._load_meta_info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv().values.tolist", "random.sample", "ltr.admin.environment.env_settings", "ValueError", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "list", "int", "os.path.realpath", "os.path.realpath", "os.path.realpath", "os.path.realpath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv", "len", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "ValueError"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq._get_sequence_list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._load_meta_info", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "default_image_loader", ",", "split", "=", "None", ",", "seq_ids", "=", "None", ",", "data_fraction", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to the got-10k training data. Note: This should point to the 'train' folder inside GOT-10k\n            image_loader (default_image_loader) -  The function to read the images. If installed,\n                                                   jpeg4py (https://github.com/ajkxyz/jpeg4py) is used by default. Else,\n                                                   opencv's imread is used.\n            split - 'train' or 'val'. Note: The validation split here is a subset of the official got-10k train split,\n                    not NOT the official got-10k validation split. To use the official validation split, provide that as\n                    the root folder instead.\n            seq_ids - List containing the ids of the videos to be used for training. Note: Only one of 'split' or 'seq_ids'\n                        options can be used at the same time.\n            data_fraction (None) - Fraction of videos to be used. The videos are selected randomly. If None, all the videos\n                                   will be used\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "got10k_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "image_loader", ")", "\n", "\n", "# all folders inside the root", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", ")", "\n", "\n", "# seq_id is the index of the folder inside the got10k root path", "\n", "if", "split", "is", "not", "None", ":", "\n", "            ", "if", "seq_ids", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Cannot set both split_name and seq_ids.'", ")", "\n", "", "ltr_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'got10k_train_split.txt'", ")", "\n", "", "elif", "split", "==", "'val'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'got10k_val_split.txt'", ")", "\n", "", "elif", "split", "==", "'vottrain'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'got10k_vot_train_split.txt'", ")", "\n", "", "elif", "split", "==", "'votval'", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ltr_path", ",", "'data_specs'", ",", "'got10k_vot_val_split.txt'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown split name.'", ")", "\n", "", "seq_ids", "=", "pandas", ".", "read_csv", "(", "file_path", ",", "header", "=", "None", ",", "squeeze", "=", "True", ",", "dtype", "=", "np", ".", "int64", ")", ".", "values", ".", "tolist", "(", ")", "\n", "", "elif", "seq_ids", "is", "None", ":", "\n", "            ", "seq_ids", "=", "list", "(", "range", "(", "0", ",", "len", "(", "self", ".", "sequence_list", ")", ")", ")", "\n", "# self.seq_ids = seq_ids", "\n", "\n", "", "self", ".", "sequence_list", "=", "[", "self", ".", "sequence_list", "[", "i", "]", "for", "i", "in", "seq_ids", "]", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "sequence_list", "=", "random", ".", "sample", "(", "self", ".", "sequence_list", ",", "int", "(", "len", "(", "self", ".", "sequence_list", ")", "*", "data_fraction", ")", ")", "\n", "\n", "", "self", ".", "sequence_meta_info", "=", "self", ".", "_load_meta_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k.get_name": [[74, 76], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'got10k'", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._load_meta_info": [[77, 80], ["got10k.Got10k._read_meta", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._read_meta"], ["", "def", "_load_meta_info", "(", "self", ")", ":", "\n", "        ", "sequence_meta_info", "=", "{", "s", ":", "self", ".", "_read_meta", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "s", ")", ")", "for", "s", "in", "self", ".", "sequence_list", "}", "\n", "return", "sequence_meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._read_meta": [[81, 97], ["collections.OrderedDict", "open", "f.readlines", "collections.OrderedDict", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "meta_info[].split", "meta_info[].split", "meta_info[].split", "meta_info[].split", "meta_info[].split"], "methods", ["None"], ["", "def", "_read_meta", "(", "self", ",", "seq_path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'meta_info.ini'", ")", ")", "as", "f", ":", "\n", "                ", "meta_info", "=", "f", ".", "readlines", "(", ")", "\n", "", "object_meta", "=", "OrderedDict", "(", "{", "'object_class'", ":", "meta_info", "[", "5", "]", ".", "split", "(", "': '", ")", "[", "-", "1", "]", "[", ":", "-", "1", "]", ",", "\n", "'motion_class'", ":", "meta_info", "[", "6", "]", ".", "split", "(", "': '", ")", "[", "-", "1", "]", "[", ":", "-", "1", "]", ",", "\n", "'major_class'", ":", "meta_info", "[", "7", "]", ".", "split", "(", "': '", ")", "[", "-", "1", "]", "[", ":", "-", "1", "]", ",", "\n", "'root_class'", ":", "meta_info", "[", "8", "]", ".", "split", "(", "': '", ")", "[", "-", "1", "]", "[", ":", "-", "1", "]", ",", "\n", "'motion_adverb'", ":", "meta_info", "[", "9", "]", ".", "split", "(", "': '", ")", "[", "-", "1", "]", "[", ":", "-", "1", "]", "}", ")", "\n", "", "except", ":", "\n", "            ", "object_meta", "=", "OrderedDict", "(", "{", "'object_class'", ":", "None", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "", "return", "object_meta", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._get_sequence_list": [[98, 104], ["open", "list", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "csv.reader"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["", "def", "_get_sequence_list", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'list.txt'", ")", ")", "as", "f", ":", "\n", "# dir_names = f.readlines()", "\n", "            ", "dir_list", "=", "list", "(", "csv", ".", "reader", "(", "f", ")", ")", "\n", "", "dir_list", "=", "[", "dir_name", "[", "0", "]", "for", "dir_name", "in", "dir_list", "]", "\n", "return", "dir_list", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._read_bb_anno": [[105, 110], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.tensor", "pandas.read_csv"], "methods", ["None"], ["", "def", "_read_bb_anno", "(", "self", ",", "seq_path", ")", ":", "\n", "        ", "bb_anno_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"groundtruth.txt\"", ")", "\n", "gt", "=", "pandas", ".", "read_csv", "(", "bb_anno_file", ",", "delimiter", "=", "','", ",", "header", "=", "None", ",", "dtype", "=", "np", ".", "float32", ",", "na_filter", "=", "False", ",", "\n", "low_memory", "=", "False", ")", ".", "values", "\n", "return", "torch", ".", "tensor", "(", "gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._read_target_visible": [[111, 125], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "torch.ByteTensor", "open", "torch.ByteTensor", "torch.ByteTensor.float", "int", "int", "csv.reader", "csv.reader"], "methods", ["None"], ["", "def", "_read_target_visible", "(", "self", ",", "seq_path", ")", ":", "\n", "# Read full occlusion and out_of_view", "\n", "        ", "occlusion_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"absence.label\"", ")", "\n", "cover_file", "=", "os", ".", "path", ".", "join", "(", "seq_path", ",", "\"cover.label\"", ")", "\n", "\n", "with", "open", "(", "occlusion_file", ",", "'r'", ",", "newline", "=", "''", ")", "as", "f", ":", "\n", "            ", "occlusion", "=", "torch", ".", "ByteTensor", "(", "[", "int", "(", "v", "[", "0", "]", ")", "for", "v", "in", "csv", ".", "reader", "(", "f", ")", "]", ")", "\n", "", "with", "open", "(", "cover_file", ",", "'r'", ",", "newline", "=", "''", ")", "as", "f", ":", "\n", "            ", "cover", "=", "torch", ".", "ByteTensor", "(", "[", "int", "(", "v", "[", "0", "]", ")", "for", "v", "in", "csv", ".", "reader", "(", "f", ")", "]", ")", "\n", "\n", "", "target_visible", "=", "~", "occlusion", "&", "(", "cover", ">", "0", ")", ".", "byte", "(", ")", "\n", "\n", "visible_ratio", "=", "cover", ".", "float", "(", ")", "/", "8", "\n", "return", "target_visible", ",", "visible_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._get_sequence_path": [[126, 128], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_get_sequence_path", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "sequence_list", "[", "seq_id", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k.get_sequence_info": [[129, 138], ["got10k.Got10k._get_sequence_path", "got10k.Got10k._read_bb_anno", "got10k.Got10k._read_target_visible", "valid.byte"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._get_sequence_path", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._read_bb_anno", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._read_target_visible"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "bbox", "=", "self", ".", "_read_bb_anno", "(", "seq_path", ")", "\n", "\n", "valid", "=", "(", "bbox", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bbox", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", ",", "visible_ratio", "=", "self", ".", "_read_target_visible", "(", "seq_path", ")", "\n", "visible", "=", "visible", "&", "valid", ".", "byte", "(", ")", "\n", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", ",", "'visible_ratio'", ":", "visible_ratio", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._get_frame_path": [[139, 141], ["os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_get_frame_path", "(", "self", ",", "seq_path", ",", "frame_id", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'{:08}.jpg'", ".", "format", "(", "frame_id", "+", "1", ")", ")", "# frames start from 1", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._get_frame": [[142, 144], ["got10k.Got10k.image_loader", "got10k.Got10k._get_frame_path"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._get_frame_path"], ["", "def", "_get_frame", "(", "self", ",", "seq_path", ",", "frame_id", ")", ":", "\n", "        ", "return", "self", ".", "image_loader", "(", "self", ".", "_get_frame_path", "(", "seq_path", ",", "frame_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k.get_frames": [[145, 160], ["got10k.Got10k._get_sequence_path", "got10k.Got10k.items", "got10k.Got10k._get_frame", "got10k.Got10k.get_sequence_info", "value[].clone"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.got10k.Got10k._get_sequence_path", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID._get_frame", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "seq_path", "=", "self", ".", "_get_sequence_path", "(", "seq_id", ")", "\n", "obj_meta", "=", "self", ".", "sequence_meta_info", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "\n", "\n", "frame_list", "=", "[", "self", ".", "_get_frame", "(", "seq_path", ",", "f_id", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "# Create anno dict", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "f_id", ",", "...", "]", ".", "clone", "(", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "", "return", "frame_list", ",", "anno_frames", ",", "obj_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq.__init__": [[32, 56], ["base_dataset.BaseDataset.__init__", "os.path.join", "os.path.join", "pycocotools.coco.COCO", "coco_seq.MSCOCOSeq._get_sequence_list", "random.sample", "ltr.admin.environment.env_settings", "int", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq._get_sequence_list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "default_image_loader", ",", "data_fraction", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to the coco dataset.\n            image_loader (default_image_loader) -  The function to read the images. If installed,\n                                                   jpeg4py (https://github.com/ajkxyz/jpeg4py) is used by default. Else,\n                                                   opencv's imread is used.\n            data_fraction (None) - Fraction of images to be used. The images are selected randomly. If None, all the\n                                  images  will be used\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "coco_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "image_loader", ")", "\n", "\n", "self", ".", "img_pth", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'train2014/'", ")", "\n", "self", ".", "anno_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'annotations/instances_train2014.json'", ")", "\n", "\n", "# Load the COCO set.", "\n", "self", ".", "coco_set", "=", "COCO", "(", "self", ".", "anno_path", ")", "\n", "\n", "self", ".", "cats", "=", "self", ".", "coco_set", ".", "cats", "\n", "self", ".", "sequence_list", "=", "self", ".", "_get_sequence_list", "(", ")", "\n", "\n", "if", "data_fraction", "is", "not", "None", ":", "\n", "            ", "self", ".", "sequence_list", "=", "random", ".", "sample", "(", "self", ".", "sequence_list", ",", "int", "(", "len", "(", "self", ".", "sequence_list", ")", "*", "data_fraction", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq._get_sequence_list": [[57, 62], ["list", "coco_seq.MSCOCOSeq.coco_set.anns.keys"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["", "", "def", "_get_sequence_list", "(", "self", ")", ":", "\n", "        ", "ann_list", "=", "list", "(", "self", ".", "coco_set", ".", "anns", ".", "keys", "(", ")", ")", "\n", "seq_list", "=", "[", "a", "for", "a", "in", "ann_list", "if", "self", ".", "coco_set", ".", "anns", "[", "a", "]", "[", "'iscrowd'", "]", "==", "0", "]", "\n", "\n", "return", "seq_list", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq.is_video_sequence": [[63, 65], ["None"], "methods", ["None"], ["", "def", "is_video_sequence", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq.get_name": [[66, 68], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'coco'", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq.get_num_sequences": [[69, 71], ["len"], "methods", ["None"], ["", "def", "get_num_sequences", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq.get_sequence_info": [[72, 80], ["coco_seq.MSCOCOSeq._get_anno", "torch.Tensor().view", "valid.clone().byte", "torch.Tensor", "valid.clone"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq._get_anno"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "anno", "=", "self", ".", "_get_anno", "(", "seq_id", ")", "\n", "\n", "bbox", "=", "torch", ".", "Tensor", "(", "anno", "[", "'bbox'", "]", ")", ".", "view", "(", "1", ",", "4", ")", "\n", "valid", "=", "(", "bbox", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bbox", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", "=", "valid", ".", "clone", "(", ")", ".", "byte", "(", ")", "\n", "\n", "return", "{", "'bbox'", ":", "bbox", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq._get_anno": [[81, 84], ["None"], "methods", ["None"], ["", "def", "_get_anno", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "anno", "=", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "\n", "return", "anno", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq._get_frames": [[85, 89], ["coco_seq.MSCOCOSeq.image_loader", "os.path.join", "coco_seq.MSCOCOSeq.coco_set.loadImgs"], "methods", ["None"], ["", "def", "_get_frames", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "path", "=", "self", ".", "coco_set", ".", "loadImgs", "(", "[", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "[", "'image_id'", "]", "]", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img", "=", "self", ".", "image_loader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_pth", ",", "path", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq.get_meta_info": [[90, 105], ["collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["", "def", "get_meta_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "cat_dict_current", "=", "self", ".", "cats", "[", "self", ".", "coco_set", ".", "anns", "[", "self", ".", "sequence_list", "[", "seq_id", "]", "]", "[", "'category_id'", "]", "]", "\n", "object_meta", "=", "OrderedDict", "(", "{", "'object_class'", ":", "cat_dict_current", "[", "'name'", "]", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "cat_dict_current", "[", "'supercategory'", "]", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "", "except", ":", "\n", "            ", "object_meta", "=", "OrderedDict", "(", "{", "'object_class'", ":", "None", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "", "return", "object_meta", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq.get_frames": [[106, 124], ["coco_seq.MSCOCOSeq._get_frames", "coco_seq.MSCOCOSeq.items", "coco_seq.MSCOCOSeq.get_meta_info", "coco_seq.MSCOCOSeq.copy", "coco_seq.MSCOCOSeq.get_sequence_info"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq._get_frames", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.coco_seq.MSCOCOSeq.get_meta_info", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", "=", "None", ",", "frame_ids", "=", "None", ",", "anno", "=", "None", ")", ":", "\n", "# COCO is an image dataset. Thus we replicate the image denoted by seq_id len(frame_ids) times, and return a", "\n", "# list containing these replicated images.", "\n", "        ", "frame", "=", "self", ".", "_get_frames", "(", "seq_id", ")", "\n", "\n", "frame_list", "=", "[", "frame", ".", "copy", "(", ")", "for", "_", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "# Create anno dict", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "0", ",", "...", "]", "for", "_", "in", "frame_ids", "]", "\n", "\n", "", "object_meta", "=", "self", ".", "get_meta_info", "(", "seq_id", ")", "\n", "\n", "return", "frame_list", ",", "anno_frames", ",", "object_meta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.base_dataset.BaseDataset.__init__": [[8, 21], ["Exception"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "image_loader", "=", "default_image_loader", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - The root path to the dataset\n            image_loader (jpeg4py_loader) -  The function to read the images. jpeg4py (https://github.com/ajkxyz/jpeg4py)\n                                            is used by default.\n        \"\"\"", "\n", "if", "root", "==", "''", ":", "\n", "            ", "raise", "Exception", "(", "'The dataset path is not setup. Check your \"ltr/admin/local.py\".'", ")", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "image_loader", "=", "image_loader", "\n", "\n", "self", ".", "sequence_list", "=", "[", "]", "# Contains the list of sequences.", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.base_dataset.BaseDataset.__len__": [[22, 28], ["base_dataset.BaseDataset.get_num_sequences"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_num_sequences"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns size of the dataset\n        returns:\n            int - number of samples in the dataset\n        \"\"\"", "\n", "return", "self", ".", "get_num_sequences", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.base_dataset.BaseDataset.__getitem__": [[29, 33], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\" Not to be used! Check get_frames() instead.\n        \"\"\"", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.base_dataset.BaseDataset.is_video_sequence": [[34, 41], ["None"], "methods", ["None"], ["", "def", "is_video_sequence", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns whether the dataset is a video dataset or an image dataset\n\n        returns:\n            bool - True if a video dataset\n        \"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.base_dataset.BaseDataset.get_name": [[42, 49], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "\"\"\" Name of the dataset\n\n        returns:\n            string - Name of the dataset\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.base_dataset.BaseDataset.get_num_sequences": [[50, 56], ["len"], "methods", ["None"], ["", "def", "get_num_sequences", "(", "self", ")", ":", "\n", "        ", "\"\"\" Number of sequences in a dataset\n\n        returns:\n            int - number of sequences in the dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.base_dataset.BaseDataset.get_sequence_info": [[57, 71], ["None"], "methods", ["None"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "\"\"\" Returns information about a particular sequences,\n\n        args:\n            seq_id - index of the sequence\n\n        returns:\n            Dict containing following fields\n                bbox -  Annotation for the sequence. A 2d tensor of shape (num_frames, 4).\n                        Format [top_left_x, top_left_y, width, height]\n                valid - A 1d tensor of shape (num_frames,) denoting whether the annotation is valid\n                visible - A 1d tensor of shape (num_frames,) denoting whether the target is visible in the frame\n            \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.base_dataset.BaseDataset.get_frames": [[72, 87], ["None"], "methods", ["None"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "\"\"\" Get a set of frames from a particular sequence\n\n        args:\n            seq_id      - index of sequence\n            frame_ids   - a list of frame numbers\n            anno(None)  - The annotation for the sequence (see get_sequence_info). If None, they will be loaded.\n\n        returns:\n            list - List of frames corresponding to frame_ids\n            dict - A dict containing annotations for the frames\n            dict - A dict containing meta information about the sequence, e.g. class of the target object.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.__init__": [[30, 61], ["base_dataset.BaseDataset.__init__", "os.path.join", "os.path.isfile", "imagenetvid.ImagenetVID._process_anno", "ltr.admin.environment.env_settings", "open", "json.load", "open", "json.dump", "len", "imagenetvid.get_target_to_image_ratio"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID._process_anno", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.environment.env_settings", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.get_target_to_image_ratio"], ["def", "__init__", "(", "self", ",", "root", "=", "None", ",", "image_loader", "=", "default_image_loader", ",", "min_length", "=", "0", ",", "max_target_area", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            root - path to the imagenet vid dataset.\n            image_loader (default_image_loader) -  The function to read the images. If installed,\n                                                   jpeg4py (https://github.com/ajkxyz/jpeg4py) is used by default. Else,\n                                                   opencv's imread is used.\n            min_length - Minimum allowed sequence length.\n            max_target_area - max allowed ratio between target area and image area. Can be used to filter out targets\n                                which cover complete image.\n        \"\"\"", "\n", "root", "=", "env_settings", "(", ")", ".", "imagenet_dir", "if", "root", "is", "None", "else", "root", "\n", "super", "(", ")", ".", "__init__", "(", "root", ",", "image_loader", ")", "\n", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'cache.json'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", ":", "\n", "# If available, load the pre-processed cache file containing meta-info for each sequence", "\n", "            ", "with", "open", "(", "cache_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "sequence_list_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "sequence_list", "=", "sequence_list_dict", "\n", "", "else", ":", "\n", "# Else process the imagenet annotations and generate the cache file", "\n", "            ", "self", ".", "sequence_list", "=", "self", ".", "_process_anno", "(", "root", ")", "\n", "\n", "with", "open", "(", "cache_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "self", ".", "sequence_list", ",", "f", ")", "\n", "\n", "# Filter the sequences based on min_length and max_target_area in the first frame", "\n", "", "", "self", ".", "sequence_list", "=", "[", "x", "for", "x", "in", "self", ".", "sequence_list", "if", "len", "(", "x", "[", "'anno'", "]", ")", ">=", "min_length", "and", "\n", "get_target_to_image_ratio", "(", "x", ")", "<", "max_target_area", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_name": [[62, 64], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "return", "'imagenetvid'", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_num_sequences": [[65, 67], ["len"], "methods", ["None"], ["", "def", "get_num_sequences", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_sequence_info": [[68, 73], ["torch.Tensor", "torch.ByteTensor", "valid.byte"], "methods", ["None"], ["", "def", "get_sequence_info", "(", "self", ",", "seq_id", ")", ":", "\n", "        ", "bb_anno", "=", "torch", ".", "Tensor", "(", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "'anno'", "]", ")", "\n", "valid", "=", "(", "bb_anno", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "bb_anno", "[", ":", ",", "3", "]", ">", "0", ")", "\n", "visible", "=", "torch", ".", "ByteTensor", "(", "self", ".", "sequence_list", "[", "seq_id", "]", "[", "'target_visible'", "]", ")", "&", "valid", ".", "byte", "(", ")", "\n", "return", "{", "'bbox'", ":", "bb_anno", ",", "'valid'", ":", "valid", ",", "'visible'", ":", "visible", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID._get_frame": [[74, 82], ["os.path.join", "imagenetvid.ImagenetVID.image_loader"], "methods", ["None"], ["", "def", "_get_frame", "(", "self", ",", "sequence", ",", "frame_id", ")", ":", "\n", "        ", "set_name", "=", "'ILSVRC2015_VID_train_{:04d}'", ".", "format", "(", "sequence", "[", "'set_id'", "]", ")", "\n", "vid_name", "=", "'ILSVRC2015_train_{:08d}'", ".", "format", "(", "sequence", "[", "'vid_id'", "]", ")", "\n", "frame_number", "=", "frame_id", "+", "sequence", "[", "'start_frame'", "]", "\n", "\n", "frame_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'Data'", ",", "'VID'", ",", "'train'", ",", "set_name", ",", "vid_name", ",", "\n", "'{:06d}.JPEG'", ".", "format", "(", "frame_number", ")", ")", "\n", "return", "self", ".", "image_loader", "(", "frame_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_frames": [[83, 104], ["imagenetvid.ImagenetVID.items", "collections.OrderedDict", "imagenetvid.ImagenetVID._get_frame", "imagenetvid.ImagenetVID.get_sequence_info", "value[].clone"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID._get_frame", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_sequence_info"], ["", "def", "get_frames", "(", "self", ",", "seq_id", ",", "frame_ids", ",", "anno", "=", "None", ")", ":", "\n", "        ", "sequence", "=", "self", ".", "sequence_list", "[", "seq_id", "]", "\n", "\n", "frame_list", "=", "[", "self", ".", "_get_frame", "(", "sequence", ",", "f", ")", "for", "f", "in", "frame_ids", "]", "\n", "\n", "if", "anno", "is", "None", ":", "\n", "            ", "anno", "=", "self", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "\n", "# Create anno dict", "\n", "", "anno_frames", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "anno", ".", "items", "(", ")", ":", "\n", "            ", "anno_frames", "[", "key", "]", "=", "[", "value", "[", "f_id", ",", "...", "]", ".", "clone", "(", ")", "for", "f_id", "in", "frame_ids", "]", "\n", "\n", "# added the class info to the meta info", "\n", "", "object_meta", "=", "OrderedDict", "(", "{", "'object_class'", ":", "sequence", "[", "'class_name'", "]", ",", "\n", "'motion_class'", ":", "None", ",", "\n", "'major_class'", ":", "None", ",", "\n", "'root_class'", ":", "None", ",", "\n", "'motion_adverb'", ":", "None", "}", ")", "\n", "\n", "return", "frame_list", ",", "anno_frames", ",", "object_meta", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID._process_anno": [[105, 162], ["os.path.join", "sorted", "os.listdir", "int", "sorted", "os.listdir", "int", "sorted", "xml.parse", "enumerate", "tracklets.items", "set.split", "os.path.join", "os.listdir", "os.path.join", "int", "int", "xml.ElementTree().findall", "range", "all_sequences.append", "vid.split", "os.path.join", "len", "xml.parse.find", "xml.parse.find", "xml.ElementTree", "target.find", "int", "int", "int", "int", "tracklet_anno.append", "target_visible.append", "os.path.join", "target.find", "target.find", "target.find", "target.find", "target.find", "target.find", "target.find"], "methods", ["None"], ["", "def", "_process_anno", "(", "self", ",", "root", ")", ":", "\n", "# Builds individual tracklets", "\n", "        ", "base_vid_anno_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Annotations'", ",", "'VID'", ",", "'train'", ")", "\n", "\n", "all_sequences", "=", "[", "]", "\n", "for", "set", "in", "sorted", "(", "os", ".", "listdir", "(", "base_vid_anno_path", ")", ")", ":", "\n", "            ", "set_id", "=", "int", "(", "set", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "for", "vid", "in", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "base_vid_anno_path", ",", "set", ")", ")", ")", ":", "\n", "\n", "                ", "vid_id", "=", "int", "(", "vid", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "anno_files", "=", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "base_vid_anno_path", ",", "set", ",", "vid", ")", ")", ")", "\n", "\n", "frame1_anno", "=", "ET", ".", "parse", "(", "os", ".", "path", ".", "join", "(", "base_vid_anno_path", ",", "set", ",", "vid", ",", "anno_files", "[", "0", "]", ")", ")", "\n", "image_size", "=", "[", "int", "(", "frame1_anno", ".", "find", "(", "'size/width'", ")", ".", "text", ")", ",", "int", "(", "frame1_anno", ".", "find", "(", "'size/height'", ")", ".", "text", ")", "]", "\n", "\n", "objects", "=", "[", "ET", ".", "ElementTree", "(", "file", "=", "os", ".", "path", ".", "join", "(", "base_vid_anno_path", ",", "set", ",", "vid", ",", "f", ")", ")", ".", "findall", "(", "'object'", ")", "\n", "for", "f", "in", "anno_files", "]", "\n", "\n", "tracklets", "=", "{", "}", "\n", "\n", "# Find all tracklets along with start frame", "\n", "for", "f_id", ",", "all_targets", "in", "enumerate", "(", "objects", ")", ":", "\n", "                    ", "for", "target", "in", "all_targets", ":", "\n", "                        ", "tracklet_id", "=", "target", ".", "find", "(", "'trackid'", ")", ".", "text", "\n", "if", "tracklet_id", "not", "in", "tracklets", ":", "\n", "                            ", "tracklets", "[", "tracklet_id", "]", "=", "f_id", "\n", "\n", "", "", "", "for", "tracklet_id", ",", "tracklet_start", "in", "tracklets", ".", "items", "(", ")", ":", "\n", "                    ", "tracklet_anno", "=", "[", "]", "\n", "target_visible", "=", "[", "]", "\n", "class_name_id", "=", "None", "\n", "\n", "for", "f_id", "in", "range", "(", "tracklet_start", ",", "len", "(", "objects", ")", ")", ":", "\n", "                        ", "found", "=", "False", "\n", "for", "target", "in", "objects", "[", "f_id", "]", ":", "\n", "                            ", "if", "target", ".", "find", "(", "'trackid'", ")", ".", "text", "==", "tracklet_id", ":", "\n", "                                ", "if", "not", "class_name_id", ":", "\n", "                                    ", "class_name_id", "=", "target", ".", "find", "(", "'name'", ")", ".", "text", "\n", "", "x1", "=", "int", "(", "target", ".", "find", "(", "'bndbox/xmin'", ")", ".", "text", ")", "\n", "y1", "=", "int", "(", "target", ".", "find", "(", "'bndbox/ymin'", ")", ".", "text", ")", "\n", "x2", "=", "int", "(", "target", ".", "find", "(", "'bndbox/xmax'", ")", ".", "text", ")", "\n", "y2", "=", "int", "(", "target", ".", "find", "(", "'bndbox/ymax'", ")", ".", "text", ")", "\n", "\n", "tracklet_anno", ".", "append", "(", "[", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "]", ")", "\n", "target_visible", ".", "append", "(", "target", ".", "find", "(", "'occluded'", ")", ".", "text", "==", "'0'", ")", "\n", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                            ", "break", "\n", "\n", "", "", "new_sequence", "=", "{", "'set_id'", ":", "set_id", ",", "'vid_id'", ":", "vid_id", ",", "'class_name'", ":", "class_name_id", ",", "\n", "'start_frame'", ":", "tracklet_start", ",", "'anno'", ":", "tracklet_anno", ",", "\n", "'target_visible'", ":", "target_visible", ",", "'image_size'", ":", "image_size", "}", "\n", "all_sequences", ".", "append", "(", "new_sequence", ")", "\n", "\n", "", "", "", "return", "all_sequences", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.get_target_to_image_ratio": [[12, 16], ["torch.Tensor", "torch.Tensor", "anno[].prod", "torch.Tensor.prod"], "function", ["None"], ["def", "get_target_to_image_ratio", "(", "seq", ")", ":", "\n", "    ", "anno", "=", "torch", ".", "Tensor", "(", "seq", "[", "'anno'", "]", ")", "\n", "img_sz", "=", "torch", ".", "Tensor", "(", "seq", "[", "'image_size'", "]", ")", "\n", "return", "(", "anno", "[", "0", ",", "2", ":", "4", "]", ".", "prod", "(", ")", "/", "(", "img_sz", ".", "prod", "(", ")", ")", ")", ".", "sqrt", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tests.test_prroi_pooling2d.TestPrRoIPool2D.test_forward": [[21, 36], ["prroi_pool.PrRoIPool2D", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "prroi_pool.PrRoIPool2D.", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "test_prroi_pooling2d.TestPrRoIPool2D.assertTensorClose", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["    ", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "pool", "=", "PrRoIPool2D", "(", "7", ",", "7", ",", "spatial_scale", "=", "0.5", ")", "\n", "features", "=", "torch", ".", "rand", "(", "(", "4", ",", "16", ",", "24", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "rois", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "14", ",", "14", "]", ",", "\n", "[", "1", ",", "14", ",", "14", ",", "28", ",", "28", "]", ",", "\n", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "out", "=", "pool", "(", "features", ",", "rois", ")", "\n", "out_gold", "=", "F", ".", "avg_pool2d", "(", "features", ",", "kernel_size", "=", "2", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "assertTensorClose", "(", "out", ",", "torch", ".", "stack", "(", "(", "\n", "out_gold", "[", "0", ",", ":", ",", ":", "7", ",", ":", "7", "]", ",", "\n", "out_gold", "[", "1", ",", ":", ",", "7", ":", "14", ",", "7", ":", "14", "]", ",", "\n", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tests.test_prroi_pooling2d.TestPrRoIPool2D.test_backward_shapeonly": [[37, 53], ["prroi_pool.PrRoIPool2D", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "prroi_pool.PrRoIPool2D.", "prroi_pool.PrRoIPool2D.sum", "pool.sum.backward", "test_prroi_pooling2d.TestPrRoIPool2D.assertTupleEqual", "test_prroi_pooling2d.TestPrRoIPool2D.assertTupleEqual", "torch.rand().cuda.size", "torch.rand().cuda.size", "torch.rand().cuda.size", "torch.rand().cuda.grad.size", "torch.rand().cuda.grad.size", "torch.rand().cuda.grad.size", "torch.tensor().float().cuda.size", "torch.tensor().float().cuda.size", "torch.tensor().float().cuda.size", "torch.tensor().float().cuda.grad.size", "torch.tensor().float().cuda.grad.size", "torch.tensor().float().cuda.grad.size", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.backward", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["", "def", "test_backward_shapeonly", "(", "self", ")", ":", "\n", "        ", "pool", "=", "PrRoIPool2D", "(", "2", ",", "2", ",", "spatial_scale", "=", "0.5", ")", "\n", "\n", "features", "=", "torch", ".", "rand", "(", "(", "4", ",", "2", ",", "24", ",", "32", ")", ")", ".", "cuda", "(", ")", "\n", "rois", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "4", ",", "4", "]", ",", "\n", "[", "1", ",", "14", ",", "14", ",", "18", ",", "18", "]", ",", "\n", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "features", ".", "requires_grad", "=", "rois", ".", "requires_grad", "=", "True", "\n", "out", "=", "pool", "(", "features", ",", "rois", ")", "\n", "\n", "loss", "=", "out", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "assertTupleEqual", "(", "features", ".", "size", "(", ")", ",", "features", ".", "grad", ".", "size", "(", ")", ")", "\n", "self", ".", "assertTupleEqual", "(", "rois", ".", "size", "(", ")", ",", "rois", ".", "grad", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.prroi_pool.prroi_pool.PrRoIPool2D.__init__": [[20, 26], ["torch.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pooled_height", ",", "pooled_width", ",", "spatial_scale", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pooled_height", "=", "int", "(", "pooled_height", ")", "\n", "self", ".", "pooled_width", "=", "int", "(", "pooled_width", ")", "\n", "self", ".", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.prroi_pool.prroi_pool.PrRoIPool2D.forward": [[27, 29], ["functional.prroi_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "rois", ")", ":", "\n", "        ", "return", "prroi_pool2d", "(", "features", ",", "rois", ",", "self", ".", "pooled_height", ",", "self", ".", "pooled_width", ",", "self", ".", "spatial_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.prroi_pool.prroi_pool.PrRoIPool2D.extra_repr": [[30, 32], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'kernel_size=({pooled_height}, {pooled_width}), spatial_scale={spatial_scale}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.prroi_pool.functional.PrRoIPool2DFunction.forward": [[42, 66], ["functional._import_prroi_pooling", "int", "int", "float", "features.contiguous.contiguous.contiguous", "rois.contiguous.contiguous.contiguous", "features.contiguous.contiguous.type", "rois.contiguous.contiguous.type", "_import_prroi_pooling.prroi_pooling_forward_cuda", "ctx.save_for_backward", "NotImplementedError", "features.contiguous.contiguous.type", "rois.contiguous.contiguous.type"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.prroi_pool.functional._import_prroi_pooling"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "rois", ",", "pooled_height", ",", "pooled_width", ",", "spatial_scale", ")", ":", "\n", "        ", "_prroi_pooling", "=", "_import_prroi_pooling", "(", ")", "\n", "\n", "assert", "'FloatTensor'", "in", "features", ".", "type", "(", ")", "and", "'FloatTensor'", "in", "rois", ".", "type", "(", ")", ",", "'Precise RoI Pooling only takes float input, got {} for features and {} for rois.'", ".", "format", "(", "features", ".", "type", "(", ")", ",", "rois", ".", "type", "(", ")", ")", "\n", "\n", "pooled_height", "=", "int", "(", "pooled_height", ")", "\n", "pooled_width", "=", "int", "(", "pooled_width", ")", "\n", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n", "\n", "features", "=", "features", ".", "contiguous", "(", ")", "\n", "rois", "=", "rois", ".", "contiguous", "(", ")", "\n", "params", "=", "(", "pooled_height", ",", "pooled_width", ",", "spatial_scale", ")", "\n", "\n", "if", "features", ".", "is_cuda", ":", "\n", "            ", "output", "=", "_prroi_pooling", ".", "prroi_pooling_forward_cuda", "(", "features", ",", "rois", ",", "*", "params", ")", "\n", "ctx", ".", "params", "=", "params", "\n", "# everything here is contiguous.", "\n", "ctx", ".", "save_for_backward", "(", "features", ",", "rois", ",", "output", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Precise RoI Pooling only supports GPU (cuda) implememtations.'", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.prroi_pool.functional.PrRoIPool2DFunction.backward": [[67, 82], ["functional._import_prroi_pooling", "grad_output.contiguous.contiguous.contiguous", "_import_prroi_pooling.prroi_pooling_backward_cuda", "grad_output.contiguous.contiguous.contiguous", "_import_prroi_pooling.prroi_pooling_coor_backward_cuda"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.prroi_pool.functional._import_prroi_pooling"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "_prroi_pooling", "=", "_import_prroi_pooling", "(", ")", "\n", "\n", "features", ",", "rois", ",", "output", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "grad_coor", "=", "None", "\n", "\n", "if", "features", ".", "requires_grad", ":", "\n", "            ", "grad_output", "=", "grad_output", ".", "contiguous", "(", ")", "\n", "grad_input", "=", "_prroi_pooling", ".", "prroi_pooling_backward_cuda", "(", "features", ",", "rois", ",", "output", ",", "grad_output", ",", "*", "ctx", ".", "params", ")", "\n", "", "if", "rois", ".", "requires_grad", ":", "\n", "            ", "grad_output", "=", "grad_output", ".", "contiguous", "(", ")", "\n", "grad_coor", "=", "_prroi_pooling", ".", "prroi_pooling_coor_backward_cuda", "(", "features", ",", "rois", ",", "output", ",", "grad_output", ",", "*", "ctx", ".", "params", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_coor", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.prroi_pool.functional._import_prroi_pooling": [[21, 39], ["pjoin", "load_extension", "dirname", "ImportError", "pjoin", "pjoin"], "function", ["None"], ["def", "_import_prroi_pooling", "(", ")", ":", "\n", "    ", "global", "_prroi_pooling", "\n", "\n", "if", "_prroi_pooling", "is", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "os", ".", "path", "import", "join", "as", "pjoin", ",", "dirname", "\n", "from", "torch", ".", "utils", ".", "cpp_extension", "import", "load", "as", "load_extension", "\n", "root_dir", "=", "pjoin", "(", "dirname", "(", "__file__", ")", ",", "'src'", ")", "\n", "\n", "_prroi_pooling", "=", "load_extension", "(", "\n", "'_prroi_pooling'", ",", "\n", "[", "pjoin", "(", "root_dir", ",", "'prroi_pooling_gpu.c'", ")", ",", "pjoin", "(", "root_dir", ",", "'prroi_pooling_gpu_impl.cu'", ")", "]", ",", "\n", "verbose", "=", "True", "\n", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Can not compile Precise RoI Pooling library.'", ")", "\n", "\n", "", "", "return", "_prroi_pooling", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer.__init__": [[11, 31], ["ltr.trainers.BaseTrainer.__init__", "ltr_trainer.LTRTrainer._set_default_settings", "collections.OrderedDict", "os.path.join", "ltr.admin.tensorboard.TensorboardWriter"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer._set_default_settings"], ["    ", "def", "__init__", "(", "self", ",", "actor", ",", "loaders", ",", "optimizer", ",", "settings", ",", "lr_scheduler", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            actor - The actor for training the network\n            loaders - list of dataset loaders, e.g. [train_loader, val_loader]. In each epoch, the trainer runs one\n                        epoch for each loader.\n            optimizer - The optimizer used for training, e.g. Adam\n            settings - Training settings\n            lr_scheduler - Learning rate scheduler\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "actor", ",", "loaders", ",", "optimizer", ",", "settings", ",", "lr_scheduler", ")", "\n", "\n", "self", ".", "_set_default_settings", "(", ")", "\n", "\n", "# Initialize statistics variables", "\n", "self", ".", "stats", "=", "OrderedDict", "(", "{", "loader", ".", "name", ":", "None", "for", "loader", "in", "self", ".", "loaders", "}", ")", "\n", "\n", "# Initialize tensorboard", "\n", "tensorboard_writer_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "settings", ".", "env", ".", "tensorboard_dir", ",", "self", ".", "settings", ".", "project_path", ")", "\n", "self", ".", "tensorboard_writer", "=", "TensorboardWriter", "(", "tensorboard_writer_dir", ",", "[", "l", ".", "name", "for", "l", "in", "loaders", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer._set_default_settings": [[32, 41], ["default.items", "getattr", "setattr"], "methods", ["None"], ["", "def", "_set_default_settings", "(", "self", ")", ":", "\n", "# Dict of all default values", "\n", "        ", "default", "=", "{", "'print_interval'", ":", "10", ",", "\n", "'print_stats'", ":", "None", ",", "\n", "'description'", ":", "''", "}", "\n", "\n", "for", "param", ",", "default_value", "in", "default", ".", "items", "(", ")", ":", "\n", "            ", "if", "getattr", "(", "self", ".", "settings", ",", "param", ",", "None", ")", "is", "None", ":", "\n", "                ", "setattr", "(", "self", ".", "settings", ",", "param", ",", "default_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer.cycle_dataset": [[42, 71], ["ltr_trainer.LTRTrainer.actor.train", "torch.set_grad_enabled", "ltr_trainer.LTRTrainer._init_timing", "enumerate", "data.to.to.to", "ltr_trainer.LTRTrainer.actor", "ltr_trainer.LTRTrainer._update_stats", "ltr_trainer.LTRTrainer._print_stats", "ltr_trainer.LTRTrainer.optimizer.zero_grad", "loss.backward", "ltr_trainer.LTRTrainer.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer._init_timing", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer._update_stats", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer._print_stats", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.backward"], ["", "", "", "def", "cycle_dataset", "(", "self", ",", "loader", ")", ":", "\n", "        ", "\"\"\"Do a cycle of training or validation.\"\"\"", "\n", "\n", "self", ".", "actor", ".", "train", "(", "loader", ".", "training", ")", "\n", "torch", ".", "set_grad_enabled", "(", "loader", ".", "training", ")", "\n", "\n", "self", ".", "_init_timing", "(", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ",", "1", ")", ":", "\n", "# get inputs", "\n", "            ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "data", "[", "'epoch'", "]", "=", "self", ".", "epoch", "\n", "data", "[", "'settings'", "]", "=", "self", ".", "settings", "\n", "\n", "# forward pass", "\n", "loss", ",", "stats", "=", "self", ".", "actor", "(", "data", ")", "\n", "\n", "# backward pass and update weights", "\n", "if", "loader", ".", "training", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# update statistics", "\n", "", "batch_size", "=", "data", "[", "'train_images'", "]", ".", "shape", "[", "loader", ".", "stack_dim", "]", "\n", "self", ".", "_update_stats", "(", "stats", ",", "batch_size", ",", "loader", ")", "\n", "\n", "# print statistics", "\n", "self", ".", "_print_stats", "(", "i", ",", "loader", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer.train_epoch": [[72, 80], ["ltr_trainer.LTRTrainer._stats_new_epoch", "ltr_trainer.LTRTrainer._write_tensorboard", "ltr_trainer.LTRTrainer.cycle_dataset"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer._stats_new_epoch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer._write_tensorboard", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer.cycle_dataset"], ["", "", "def", "train_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do one epoch for each loader.\"\"\"", "\n", "for", "loader", "in", "self", ".", "loaders", ":", "\n", "            ", "if", "self", ".", "epoch", "%", "loader", ".", "epoch_interval", "==", "0", ":", "\n", "                ", "self", ".", "cycle_dataset", "(", "loader", ")", "\n", "\n", "", "", "self", ".", "_stats_new_epoch", "(", ")", "\n", "self", ".", "_write_tensorboard", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer._init_timing": [[81, 85], ["time.time"], "methods", ["None"], ["", "def", "_init_timing", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_frames", "=", "0", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "prev_time", "=", "self", ".", "start_time", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer._update_stats": [[86, 95], ["new_stats.items", "collections.OrderedDict", "[].update", "ltr_trainer.LTRTrainer.stats.keys", "ltr_trainer.LTRTrainer.stats[].keys", "ltr.admin.stats.AverageMeter", "ltr.admin.stats.AverageMeter", "new_stats.keys"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.update"], ["", "def", "_update_stats", "(", "self", ",", "new_stats", ":", "OrderedDict", ",", "batch_size", ",", "loader", ")", ":", "\n", "# Initialize stats if not initialized yet", "\n", "        ", "if", "loader", ".", "name", "not", "in", "self", ".", "stats", ".", "keys", "(", ")", "or", "self", ".", "stats", "[", "loader", ".", "name", "]", "is", "None", ":", "\n", "            ", "self", ".", "stats", "[", "loader", ".", "name", "]", "=", "OrderedDict", "(", "{", "name", ":", "AverageMeter", "(", ")", "for", "name", "in", "new_stats", ".", "keys", "(", ")", "}", ")", "\n", "\n", "", "for", "name", ",", "val", "in", "new_stats", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "not", "in", "self", ".", "stats", "[", "loader", ".", "name", "]", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "stats", "[", "loader", ".", "name", "]", "[", "name", "]", "=", "AverageMeter", "(", ")", "\n", "", "self", ".", "stats", "[", "loader", ".", "name", "]", "[", "name", "]", ".", "update", "(", "val", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer._print_stats": [[96, 109], ["time.time", "ltr_trainer.LTRTrainer.stats[].items", "print", "loader.__len__", "loader.__len__", "hasattr"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler.__len__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler.__len__"], ["", "", "def", "_print_stats", "(", "self", ",", "i", ",", "loader", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "num_frames", "+=", "batch_size", "\n", "current_time", "=", "time", ".", "time", "(", ")", "\n", "batch_fps", "=", "batch_size", "/", "(", "current_time", "-", "self", ".", "prev_time", ")", "\n", "average_fps", "=", "self", ".", "num_frames", "/", "(", "current_time", "-", "self", ".", "start_time", ")", "\n", "self", ".", "prev_time", "=", "current_time", "\n", "if", "i", "%", "self", ".", "settings", ".", "print_interval", "==", "0", "or", "i", "==", "loader", ".", "__len__", "(", ")", ":", "\n", "            ", "print_str", "=", "'[%s: %d, %d / %d] '", "%", "(", "loader", ".", "name", ",", "self", ".", "epoch", ",", "i", ",", "loader", ".", "__len__", "(", ")", ")", "\n", "print_str", "+=", "'FPS: %.1f (%.1f)  ,  '", "%", "(", "average_fps", ",", "batch_fps", ")", "\n", "for", "name", ",", "val", "in", "self", ".", "stats", "[", "loader", ".", "name", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "(", "self", ".", "settings", ".", "print_stats", "is", "None", "or", "name", "in", "self", ".", "settings", ".", "print_stats", ")", "and", "hasattr", "(", "val", ",", "'avg'", ")", ":", "\n", "                    ", "print_str", "+=", "'%s: %.5f  ,  '", "%", "(", "name", ",", "val", ".", "avg", ")", "\n", "", "", "print", "(", "print_str", "[", ":", "-", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer._stats_new_epoch": [[110, 127], ["ltr_trainer.LTRTrainer.stats.values", "loader_stats.values", "ltr_trainer.LTRTrainer.lr_scheduler.get_lr", "enumerate", "hasattr", "[].update", "stat_value.new_epoch", "ltr_trainer.LTRTrainer.stats[].keys", "ltr.admin.stats.StatValue"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.update", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.stats.AverageMeter.new_epoch"], ["", "", "def", "_stats_new_epoch", "(", "self", ")", ":", "\n", "# Record learning rate", "\n", "        ", "for", "loader", "in", "self", ".", "loaders", ":", "\n", "            ", "if", "loader", ".", "training", ":", "\n", "                ", "lr_list", "=", "self", ".", "lr_scheduler", ".", "get_lr", "(", ")", "\n", "for", "i", ",", "lr", "in", "enumerate", "(", "lr_list", ")", ":", "\n", "                    ", "var_name", "=", "'LearningRate/group{}'", ".", "format", "(", "i", ")", "\n", "if", "var_name", "not", "in", "self", ".", "stats", "[", "loader", ".", "name", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "self", ".", "stats", "[", "loader", ".", "name", "]", "[", "var_name", "]", "=", "StatValue", "(", ")", "\n", "", "self", ".", "stats", "[", "loader", ".", "name", "]", "[", "var_name", "]", ".", "update", "(", "lr", ")", "\n", "\n", "", "", "", "for", "loader_stats", "in", "self", ".", "stats", ".", "values", "(", ")", ":", "\n", "            ", "if", "loader_stats", "is", "None", ":", "\n", "                ", "continue", "\n", "", "for", "stat_value", "in", "loader_stats", ".", "values", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "stat_value", ",", "'new_epoch'", ")", ":", "\n", "                    ", "stat_value", ".", "new_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.ltr_trainer.LTRTrainer._write_tensorboard": [[128, 133], ["ltr_trainer.LTRTrainer.tensorboard_writer.write_epoch", "ltr_trainer.LTRTrainer.tensorboard_writer.write_info"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.tensorboard.TensorboardWriter.write_epoch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.tensorboard.TensorboardWriter.write_info"], ["", "", "", "", "def", "_write_tensorboard", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "epoch", "==", "1", ":", "\n", "            ", "self", ".", "tensorboard_writer", ".", "write_info", "(", "self", ".", "settings", ".", "module_name", ",", "self", ".", "settings", ".", "script_name", ",", "self", ".", "settings", ".", "description", ")", "\n", "\n", "", "self", ".", "tensorboard_writer", ".", "write_epoch", "(", "self", ".", "stats", ",", "self", ".", "epoch", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.base_trainer.BaseTrainer.__init__": [[12, 37], ["base_trainer.BaseTrainer.update_settings", "getattr", "base_trainer.BaseTrainer.actor.to", "torch.device", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.base_trainer.BaseTrainer.update_settings", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to"], ["def", "__init__", "(", "self", ",", "actor", ",", "loaders", ",", "optimizer", ",", "settings", ",", "lr_scheduler", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            actor - The actor for training the network\n            loaders - list of dataset loaders, e.g. [train_loader, val_loader]. In each epoch, the trainer runs one\n                        epoch for each loader.\n            optimizer - The optimizer used for training, e.g. Adam\n            settings - Training settings\n            lr_scheduler - Learning rate scheduler\n        \"\"\"", "\n", "self", ".", "actor", "=", "actor", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "self", ".", "loaders", "=", "loaders", "\n", "\n", "self", ".", "update_settings", "(", "settings", ")", "\n", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "stats", "=", "{", "}", "\n", "\n", "self", ".", "device", "=", "getattr", "(", "settings", ",", "'device'", ",", "None", ")", "\n", "if", "self", ".", "device", "is", "None", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "settings", ".", "use_gpu", "else", "\"cpu\"", ")", "\n", "\n", "", "self", ".", "actor", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.base_trainer.BaseTrainer.update_settings": [[38, 50], ["os.path.expanduser", "os.path.join", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "def", "update_settings", "(", "self", ",", "settings", "=", "None", ")", ":", "\n", "        ", "\"\"\"Updates the trainer settings. Must be called to update internal settings.\"\"\"", "\n", "if", "settings", "is", "not", "None", ":", "\n", "            ", "self", ".", "settings", "=", "settings", "\n", "\n", "", "if", "self", ".", "settings", ".", "env", ".", "workspace_dir", "is", "not", "None", ":", "\n", "            ", "self", ".", "settings", ".", "env", ".", "workspace_dir", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "settings", ".", "env", ".", "workspace_dir", ")", "\n", "self", ".", "_checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "settings", ".", "env", ".", "workspace_dir", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "_checkpoint_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "_checkpoint_dir", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_checkpoint_dir", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.base_trainer.BaseTrainer.train": [[52, 89], ["range", "print", "range", "base_trainer.BaseTrainer.load_checkpoint", "base_trainer.BaseTrainer.train_epoch", "print", "base_trainer.BaseTrainer.lr_scheduler.step", "base_trainer.BaseTrainer.save_checkpoint", "print", "print", "print", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.base_trainer.BaseTrainer.load_checkpoint", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.base_trainer.BaseTrainer.train_epoch", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.base_trainer.BaseTrainer.save_checkpoint"], ["", "", "def", "train", "(", "self", ",", "max_epochs", ",", "load_latest", "=", "False", ",", "fail_safe", "=", "True", ")", ":", "\n", "        ", "\"\"\"Do training for the given number of epochs.\n        args:\n            max_epochs - Max number of training epochs,\n            load_latest - Bool indicating whether to resume from latest epoch.\n            fail_safe - Bool indicating whether the training to automatically restart in case of any crashes.\n        \"\"\"", "\n", "\n", "epoch", "=", "-", "1", "\n", "num_tries", "=", "10", "\n", "for", "i", "in", "range", "(", "num_tries", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "load_latest", ":", "\n", "                    ", "self", ".", "load_checkpoint", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "self", ".", "epoch", "+", "1", ",", "max_epochs", "+", "1", ")", ":", "\n", "                    ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "self", ".", "train_epoch", "(", ")", "\n", "\n", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "                        ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "if", "self", ".", "_checkpoint_dir", ":", "\n", "                        ", "self", ".", "save_checkpoint", "(", ")", "\n", "", "", "", "except", ":", "\n", "                ", "print", "(", "'Training crashed at epoch {}'", ".", "format", "(", "epoch", ")", ")", "\n", "if", "fail_safe", ":", "\n", "                    ", "self", ".", "epoch", "-=", "1", "\n", "load_latest", "=", "True", "\n", "print", "(", "'Traceback for the error!'", ")", "\n", "print", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "print", "(", "'Restarting training from last epoch ...'", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "\n", "", "", "", "print", "(", "'Finished training!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.base_trainer.BaseTrainer.train_epoch": [[91, 93], ["None"], "methods", ["None"], ["", "def", "train_epoch", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.base_trainer.BaseTrainer.save_checkpoint": [[95, 121], ["torch.save", "ltr.admin.multigpu.is_multi_gpu", "type", "type", "net.state_dict", "getattr", "getattr", "base_trainer.BaseTrainer.optimizer.state_dict", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.multigpu.is_multi_gpu"], ["", "def", "save_checkpoint", "(", "self", ")", ":", "\n", "        ", "\"\"\"Saves a checkpoint of the network and other variables.\"\"\"", "\n", "\n", "net", "=", "self", ".", "actor", ".", "net", ".", "module", "if", "multigpu", ".", "is_multi_gpu", "(", "self", ".", "actor", ".", "net", ")", "else", "self", ".", "actor", ".", "net", "\n", "\n", "actor_type", "=", "type", "(", "self", ".", "actor", ")", ".", "__name__", "\n", "net_type", "=", "type", "(", "net", ")", ".", "__name__", "\n", "state", "=", "{", "\n", "'epoch'", ":", "self", ".", "epoch", ",", "\n", "'actor_type'", ":", "actor_type", ",", "\n", "'net_type'", ":", "net_type", ",", "\n", "'net'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'net_info'", ":", "getattr", "(", "net", ",", "'info'", ",", "None", ")", ",", "\n", "'constructor'", ":", "getattr", "(", "net", ",", "'constructor'", ",", "None", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'stats'", ":", "self", ".", "stats", ",", "\n", "'settings'", ":", "self", ".", "settings", "\n", "}", "\n", "\n", "\n", "directory", "=", "'{}/{}'", ".", "format", "(", "self", ".", "_checkpoint_dir", ",", "self", ".", "settings", ".", "project_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "file_path", "=", "'{}/{}_ep{:04d}.pth.tar'", ".", "format", "(", "directory", ",", "net_type", ",", "self", ".", "epoch", ")", "\n", "torch", ".", "save", "(", "state", ",", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.trainers.base_trainer.BaseTrainer.load_checkpoint": [[123, 201], ["ltr.admin.loading.torch_load_legacy", "ignore_fields.extend", "ltr.admin.multigpu.is_multi_gpu", "type", "type", "sorted", "isinstance", "ltr.admin.loading.torch_load_legacy.keys", "glob.glob", "print", "isinstance", "net.load_state_dict", "os.path.isdir", "base_trainer.BaseTrainer.optimizer.load_state_dict", "setattr", "sorted", "os.path.expanduser", "glob.glob", "Exception"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.loading.torch_load_legacy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.multigpu.is_multi_gpu"], ["", "def", "load_checkpoint", "(", "self", ",", "checkpoint", "=", "None", ",", "fields", "=", "None", ",", "ignore_fields", "=", "None", ",", "load_constructor", "=", "False", ")", ":", "\n", "        ", "\"\"\"Loads a network checkpoint file.\n\n        Can be called in three different ways:\n            load_checkpoint():\n                Loads the latest epoch from the workspace. Use this to continue training.\n            load_checkpoint(epoch_num):\n                Loads the network at the given epoch number (int).\n            load_checkpoint(path_to_checkpoint):\n                Loads the file from the given absolute path (str).\n        \"\"\"", "\n", "\n", "net", "=", "self", ".", "actor", ".", "net", ".", "module", "if", "multigpu", ".", "is_multi_gpu", "(", "self", ".", "actor", ".", "net", ")", "else", "self", ".", "actor", ".", "net", "\n", "\n", "actor_type", "=", "type", "(", "self", ".", "actor", ")", ".", "__name__", "\n", "net_type", "=", "type", "(", "net", ")", ".", "__name__", "\n", "\n", "if", "checkpoint", "is", "None", ":", "\n", "# Load most recent checkpoint", "\n", "            ", "checkpoint_list", "=", "sorted", "(", "glob", ".", "glob", "(", "'{}/{}/{}_ep*.pth.tar'", ".", "format", "(", "self", ".", "_checkpoint_dir", ",", "\n", "self", ".", "settings", ".", "project_path", ",", "net_type", ")", ")", ")", "\n", "if", "checkpoint_list", ":", "\n", "                ", "checkpoint_path", "=", "checkpoint_list", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "'No matching checkpoint file found'", ")", "\n", "return", "\n", "", "", "elif", "isinstance", "(", "checkpoint", ",", "int", ")", ":", "\n", "# Checkpoint is the epoch number", "\n", "            ", "checkpoint_path", "=", "'{}/{}/{}_ep{:04d}.pth.tar'", ".", "format", "(", "self", ".", "_checkpoint_dir", ",", "self", ".", "settings", ".", "project_path", ",", "\n", "net_type", ",", "checkpoint", ")", "\n", "", "elif", "isinstance", "(", "checkpoint", ",", "str", ")", ":", "\n", "# checkpoint is the path", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "checkpoint", ")", ":", "\n", "                ", "checkpoint_list", "=", "sorted", "(", "glob", ".", "glob", "(", "'{}/*_ep*.pth.tar'", ".", "format", "(", "checkpoint", ")", ")", ")", "\n", "if", "checkpoint_list", ":", "\n", "                    ", "checkpoint_path", "=", "checkpoint_list", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'No checkpoint found'", ")", "\n", "", "", "else", ":", "\n", "                ", "checkpoint_path", "=", "os", ".", "path", ".", "expanduser", "(", "checkpoint", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "\n", "\n", "# Load network", "\n", "", "checkpoint_dict", "=", "loading", ".", "torch_load_legacy", "(", "checkpoint_path", ")", "\n", "\n", "assert", "net_type", "==", "checkpoint_dict", "[", "'net_type'", "]", ",", "'Network is not of correct type.'", "\n", "\n", "if", "fields", "is", "None", ":", "\n", "            ", "fields", "=", "checkpoint_dict", ".", "keys", "(", ")", "\n", "", "if", "ignore_fields", "is", "None", ":", "\n", "            ", "ignore_fields", "=", "[", "'settings'", "]", "\n", "\n", "# Never load the scheduler. It exists in older checkpoints.", "\n", "", "ignore_fields", ".", "extend", "(", "[", "'lr_scheduler'", ",", "'constructor'", ",", "'net_type'", ",", "'actor_type'", ",", "'net_info'", "]", ")", "\n", "\n", "# Load all fields", "\n", "for", "key", "in", "fields", ":", "\n", "            ", "if", "key", "in", "ignore_fields", ":", "\n", "                ", "continue", "\n", "", "if", "key", "==", "'net'", ":", "\n", "                ", "net", ".", "load_state_dict", "(", "checkpoint_dict", "[", "key", "]", ")", "\n", "", "elif", "key", "==", "'optimizer'", ":", "\n", "                ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint_dict", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "key", ",", "checkpoint_dict", "[", "key", "]", ")", "\n", "\n", "# Set the net info", "\n", "", "", "if", "load_constructor", "and", "'constructor'", "in", "checkpoint_dict", "and", "checkpoint_dict", "[", "'constructor'", "]", "is", "not", "None", ":", "\n", "            ", "net", ".", "constructor", "=", "checkpoint_dict", "[", "'constructor'", "]", "\n", "", "if", "'net_info'", "in", "checkpoint_dict", "and", "checkpoint_dict", "[", "'net_info'", "]", "is", "not", "None", ":", "\n", "            ", "net", ".", "info", "=", "checkpoint_dict", "[", "'net_info'", "]", "\n", "\n", "# Update the epoch in lr scheduler", "\n", "", "if", "'epoch'", "in", "fields", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "last_epoch", "=", "self", ".", "epoch", "\n", "\n", "", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.linear_filter.LinearFilter.__init__": [[16, 36], ["torch.Module.__init__", "linear_filter.LinearFilter.feature_extractor.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "filter_size", ",", "filter_initializer", ",", "filter_optimizer", "=", "None", ",", "feature_extractor", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "filter_size", "=", "filter_size", "\n", "\n", "# Modules", "\n", "self", ".", "filter_initializer", "=", "filter_initializer", "\n", "self", ".", "filter_optimizer", "=", "filter_optimizer", "\n", "self", ".", "feature_extractor", "=", "feature_extractor", "\n", "\n", "# Init weights", "\n", "for", "m", "in", "self", ".", "feature_extractor", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.linear_filter.LinearFilter.forward": [[37, 69], ["linear_filter.LinearFilter.extract_classification_feat", "linear_filter.LinearFilter.extract_classification_feat", "linear_filter.LinearFilter.get_filter", "train_bb.dim", "train_feat.view.view.dim", "train_feat.view.view.view", "test_feat.view.view.dim", "test_feat.view.view.view", "linear_filter.LinearFilter.classify"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_classification_feat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_classification_feat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.linear_filter.LinearFilter.get_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.linear_filter.LinearFilter.classify"], ["", "", "", "def", "forward", "(", "self", ",", "train_feat", ",", "test_feat", ",", "train_bb", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Learns a target classification filter based on the train samples and return the resulting classification\n        scores on the test samples.\n        The forward function is ONLY used for training. Call the individual functions during tracking.\n        args:\n            train_feat:  Backbone features for the train samples (4 or 5 dims).\n            test_feat:  Backbone features for the test samples (4 or 5 dims).\n            trian_bb:  Target boxes (x,y,w,h) for the train samples in image coordinates. Dims (images, sequences, 4).\n            *args, **kwargs:  These are passed to the optimizer module.\n        returns:\n            test_scores:  Classification scores on the test samples.\"\"\"", "\n", "\n", "assert", "train_bb", ".", "dim", "(", ")", "==", "3", "\n", "\n", "num_sequences", "=", "train_bb", ".", "shape", "[", "1", "]", "\n", "\n", "if", "train_feat", ".", "dim", "(", ")", "==", "5", ":", "\n", "            ", "train_feat", "=", "train_feat", ".", "view", "(", "-", "1", ",", "*", "train_feat", ".", "shape", "[", "-", "3", ":", "]", ")", "\n", "", "if", "test_feat", ".", "dim", "(", ")", "==", "5", ":", "\n", "            ", "test_feat", "=", "test_feat", ".", "view", "(", "-", "1", ",", "*", "test_feat", ".", "shape", "[", "-", "3", ":", "]", ")", "\n", "\n", "# Extract features", "\n", "", "train_feat", "=", "self", ".", "extract_classification_feat", "(", "train_feat", ",", "num_sequences", ")", "\n", "test_feat", "=", "self", ".", "extract_classification_feat", "(", "test_feat", ",", "num_sequences", ")", "\n", "\n", "# Train filter", "\n", "filter", ",", "filter_iter", ",", "losses", "=", "self", ".", "get_filter", "(", "train_feat", ",", "train_bb", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# Classify samples using all return filters", "\n", "test_scores", "=", "[", "self", ".", "classify", "(", "f", ",", "test_feat", ")", "for", "f", "in", "filter_iter", "]", "\n", "\n", "return", "test_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.linear_filter.LinearFilter.extract_classification_feat": [[70, 79], ["linear_filter.LinearFilter.feature_extractor", "linear_filter.LinearFilter.view", "linear_filter.LinearFilter.feature_extractor"], "methods", ["None"], ["", "def", "extract_classification_feat", "(", "self", ",", "feat", ",", "num_sequences", "=", "None", ")", ":", "\n", "        ", "\"\"\"Extract classification features based on the input backbone features.\"\"\"", "\n", "if", "self", ".", "feature_extractor", "is", "None", ":", "\n", "            ", "return", "feat", "\n", "", "if", "num_sequences", "is", "None", ":", "\n", "            ", "return", "self", ".", "feature_extractor", "(", "feat", ")", "\n", "\n", "", "output", "=", "self", ".", "feature_extractor", "(", "feat", ")", "\n", "return", "output", ".", "view", "(", "-", "1", ",", "num_sequences", ",", "*", "output", ".", "shape", "[", "-", "3", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.linear_filter.LinearFilter.classify": [[80, 86], ["ltr.apply_filter"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_filter"], ["", "def", "classify", "(", "self", ",", "weights", ",", "feat", ")", ":", "\n", "        ", "\"\"\"Run classifier (filter) on the features (feat).\"\"\"", "\n", "\n", "scores", "=", "filter_layer", ".", "apply_filter", "(", "feat", ",", "weights", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.linear_filter.LinearFilter.get_filter": [[87, 108], ["linear_filter.LinearFilter.filter_initializer", "linear_filter.LinearFilter.filter_optimizer"], "methods", ["None"], ["", "def", "get_filter", "(", "self", ",", "feat", ",", "bb", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Outputs the learned filter based on the input features (feat) and target boxes (bb) by running the\n        filter initializer and optimizer. Note that [] denotes an optional dimension.\n        args:\n            feat:  Input feature maps. Dims (images_in_sequence, [sequences], feat_dim, H, W).\n            bb:  Target bounding boxes (x, y, w, h) in the image coords. Dims (images_in_sequence, [sequences], 4).\n            *args, **kwargs:  These are passed to the optimizer module.\n        returns:\n            weights:  The final oprimized weights. Dims (sequences, feat_dim, wH, wW).\n            weight_iterates:  The weights computed in each iteration (including initial input and final output).\n            losses:  Train losses.\"\"\"", "\n", "\n", "weights", "=", "self", ".", "filter_initializer", "(", "feat", ",", "bb", ")", "\n", "\n", "if", "self", ".", "filter_optimizer", "is", "not", "None", ":", "\n", "            ", "weights", ",", "weights_iter", ",", "losses", "=", "self", ".", "filter_optimizer", "(", "weights", ",", "feat", "=", "feat", ",", "bb", "=", "bb", ",", "indicator", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "weights_iter", "=", "[", "weights", "]", "\n", "losses", "=", "None", "\n", "\n", "", "return", "weights", ",", "weights_iter", ",", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.initializer.FilterPool.__init__": [[16, 20], ["torch.Module.__init__", "ltr.external.PreciseRoIPooling.pytorch.prroi_pool.PrRoIPool2D"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "filter_size", "=", "1", ",", "feature_stride", "=", "16", ",", "pool_square", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prroi_pool", "=", "PrRoIPool2D", "(", "filter_size", ",", "filter_size", ",", "1", "/", "feature_stride", ")", "\n", "self", ".", "pool_square", "=", "pool_square", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.initializer.FilterPool.forward": [[21, 46], ["bb.view.view.view", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "bb.view.view.clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "initializer.FilterPool.prroi_pool", "pool_bb[].prod().sqrt", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "pool_bb[].prod", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to"], ["", "def", "forward", "(", "self", ",", "feat", ",", "bb", ")", ":", "\n", "        ", "\"\"\"Pool the regions in bb.\n        args:\n            feat:  Input feature maps. Dims (num_samples, feat_dim, H, W).\n            bb:  Target bounding boxes (x, y, w, h) in the image coords. Dims (num_samples, 4).\n        returns:\n            pooled_feat:  Pooled features. Dims (num_samples, feat_dim, wH, wW).\"\"\"", "\n", "\n", "# Add batch_index to rois", "\n", "bb", "=", "bb", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "num_images_total", "=", "bb", ".", "shape", "[", "0", "]", "\n", "batch_index", "=", "torch", ".", "arange", "(", "num_images_total", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "bb", ".", "device", ")", "\n", "\n", "# input bb is in format xywh, convert it to x0y0x1y1 format", "\n", "pool_bb", "=", "bb", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "pool_square", ":", "\n", "            ", "bb_sz", "=", "pool_bb", "[", ":", ",", "2", ":", "4", "]", ".", "prod", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "\n", "pool_bb", "[", ":", ",", ":", "2", "]", "+=", "pool_bb", "[", ":", ",", "2", ":", "]", "/", "2", "-", "bb_sz", "/", "2", "\n", "pool_bb", "[", ":", ",", "2", ":", "]", "=", "bb_sz", "\n", "\n", "", "pool_bb", "[", ":", ",", "2", ":", "4", "]", "=", "pool_bb", "[", ":", ",", "0", ":", "2", "]", "+", "pool_bb", "[", ":", ",", "2", ":", "4", "]", "\n", "roi1", "=", "torch", ".", "cat", "(", "(", "batch_index", ",", "pool_bb", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "self", ".", "prroi_pool", "(", "feat", ",", "roi1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.initializer.FilterInitializer.__init__": [[60, 90], ["torch.Module.__init__", "initializer.FilterPool", "range", "range", "post_conv_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "initializer.FilterInitializer.modules", "pre_conv_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "post_conv_layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "ltr.models.layers.blocks.conv_block", "ltr.models.layers.blocks.conv_block", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.blocks.conv_block", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.blocks.conv_block"], ["def", "__init__", "(", "self", ",", "filter_size", "=", "1", ",", "feature_dim", "=", "256", ",", "feature_stride", "=", "16", ",", "pool_square", "=", "False", ",", "filter_norm", "=", "True", ",", "\n", "num_filter_pre_convs", "=", "1", ",", "num_filter_post_convs", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "filter_pool", "=", "FilterPool", "(", "filter_size", "=", "filter_size", ",", "feature_stride", "=", "feature_stride", ",", "pool_square", "=", "pool_square", ")", "\n", "self", ".", "filter_norm", "=", "filter_norm", "\n", "\n", "# Make pre conv", "\n", "pre_conv_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_filter_pre_convs", ")", ":", "\n", "            ", "pre_conv_layers", ".", "append", "(", "conv_block", "(", "feature_dim", ",", "feature_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "", "self", ".", "filter_pre_layers", "=", "nn", ".", "Sequential", "(", "*", "pre_conv_layers", ")", "if", "pre_conv_layers", "else", "None", "\n", "\n", "# Make post conv", "\n", "post_conv_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_filter_post_convs", ")", ":", "\n", "            ", "post_conv_layers", ".", "append", "(", "conv_block", "(", "feature_dim", ",", "feature_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "", "post_conv_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "feature_dim", ",", "feature_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "self", ".", "filter_post_layers", "=", "nn", ".", "Sequential", "(", "*", "post_conv_layers", ")", "\n", "\n", "# Init weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.initializer.FilterInitializer.forward": [[92, 116], ["initializer.FilterInitializer.filter_pool", "initializer.FilterInitializer.filter_post_layers", "initializer.FilterInitializer.filter_pre_layers", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "bb.dim", "initializer.FilterInitializer.view", "torch.mean.view", "torch.mean.view", "torch.mean.view"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "", "", "def", "forward", "(", "self", ",", "feat", ",", "bb", ")", ":", "\n", "        ", "\"\"\"Runs the initializer module.\n        Note that [] denotes an optional dimension.\n        args:\n            feat:  Input feature maps. Dims (images_in_sequence, [sequences], feat_dim, H, W).\n            bb:  Target bounding boxes (x, y, w, h) in the image coords. Dims (images_in_sequence, [sequences], 4).\n        returns:\n            weights:  The output weights. Dims (sequences, feat_dim, wH, wW).\"\"\"", "\n", "\n", "num_images", "=", "bb", ".", "shape", "[", "0", "]", "if", "bb", ".", "dim", "(", ")", "==", "3", "else", "1", "\n", "\n", "if", "self", ".", "filter_pre_layers", "is", "not", "None", ":", "\n", "            ", "feat", "=", "self", ".", "filter_pre_layers", "(", "feat", ".", "view", "(", "-", "1", ",", "feat", ".", "shape", "[", "-", "3", "]", ",", "feat", ".", "shape", "[", "-", "2", "]", ",", "feat", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "feat_post", "=", "self", ".", "filter_pool", "(", "feat", ",", "bb", ")", "\n", "weights", "=", "self", ".", "filter_post_layers", "(", "feat_post", ")", "\n", "\n", "if", "num_images", ">", "1", ":", "\n", "            ", "weights", "=", "torch", ".", "mean", "(", "weights", ".", "view", "(", "num_images", ",", "-", "1", ",", "weights", ".", "shape", "[", "-", "3", "]", ",", "weights", ".", "shape", "[", "-", "2", "]", ",", "weights", ".", "shape", "[", "-", "1", "]", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "filter_norm", ":", "\n", "            ", "weights", "=", "weights", "/", "(", "weights", ".", "shape", "[", "1", "]", "*", "weights", ".", "shape", "[", "2", "]", "*", "weights", ".", "shape", "[", "3", "]", ")", "\n", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.initializer.FilterInitializerLinear.__init__": [[128, 146], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "initializer.FilterPool", "initializer.FilterInitializerLinear.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "filter_size", "=", "1", ",", "feature_dim", "=", "256", ",", "feature_stride", "=", "16", ",", "pool_square", "=", "False", ",", "filter_norm", "=", "True", ",", "\n", "conv_ksz", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "filter_conv", "=", "nn", ".", "Conv2d", "(", "feature_dim", ",", "feature_dim", ",", "kernel_size", "=", "conv_ksz", ",", "padding", "=", "conv_ksz", "//", "2", ")", "\n", "self", ".", "filter_pool", "=", "FilterPool", "(", "filter_size", "=", "filter_size", ",", "feature_stride", "=", "feature_stride", ",", "pool_square", "=", "pool_square", ")", "\n", "self", ".", "filter_norm", "=", "filter_norm", "\n", "\n", "# Init weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.initializer.FilterInitializerLinear.forward": [[148, 171], ["initializer.FilterInitializerLinear.filter_conv", "initializer.FilterInitializerLinear.filter_pool", "initializer.FilterInitializerLinear.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean.view", "torch.mean.view", "torch.mean.view"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "feat", ",", "bb", ")", ":", "\n", "        ", "\"\"\"Runs the initializer module.\n        Note that [] denotes an optional dimension.\n        args:\n            feat:  Input feature maps. Dims (images_in_sequence, [sequences], feat_dim, H, W).\n            bb:  Target bounding boxes (x, y, w, h) in the image coords. Dims (images_in_sequence, [sequences], 4).\n        returns:\n            weights:  The output weights. Dims (sequences, feat_dim, wH, wW).\"\"\"", "\n", "\n", "num_images", "=", "feat", ".", "shape", "[", "0", "]", "\n", "\n", "feat", "=", "self", ".", "filter_conv", "(", "feat", ".", "view", "(", "-", "1", ",", "feat", ".", "shape", "[", "-", "3", "]", ",", "feat", ".", "shape", "[", "-", "2", "]", ",", "feat", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "weights", "=", "self", ".", "filter_pool", "(", "feat", ",", "bb", ")", "\n", "\n", "# If multiple input images, compute the initial filter as the average filter.", "\n", "if", "num_images", ">", "1", ":", "\n", "            ", "weights", "=", "torch", ".", "mean", "(", "weights", ".", "view", "(", "num_images", ",", "-", "1", ",", "weights", ".", "shape", "[", "-", "3", "]", ",", "weights", ".", "shape", "[", "-", "2", "]", ",", "weights", ".", "shape", "[", "-", "1", "]", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "filter_norm", ":", "\n", "            ", "weights", "=", "weights", "/", "(", "weights", ".", "shape", "[", "1", "]", "*", "weights", ".", "shape", "[", "2", "]", "*", "weights", ".", "shape", "[", "3", "]", ")", "\n", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.initializer.FilterInitializerZero.__init__": [[180, 184], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "filter_size", "=", "1", ",", "feature_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "filter_size", "=", "(", "feature_dim", ",", "filter_size", ",", "filter_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.initializer.FilterInitializerZero.forward": [[185, 197], ["feat.new_zeros", "feat.dim"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "def", "forward", "(", "self", ",", "feat", ",", "bb", ")", ":", "\n", "        ", "\"\"\"Runs the initializer module.\n        Note that [] denotes an optional dimension.\n        args:\n            feat:  Input feature maps. Dims (images_in_sequence, [sequences], feat_dim, H, W).\n            bb:  Target bounding boxes (x, y, w, h) in the image coords. Dims (images_in_sequence, [sequences], 4).\n        returns:\n            weights:  The output weights. Dims (sequences, feat_dim, wH, wW).\"\"\"", "\n", "\n", "num_sequences", "=", "feat", ".", "shape", "[", "1", "]", "if", "feat", ".", "dim", "(", ")", "==", "5", "else", "1", "\n", "\n", "return", "feat", ".", "new_zeros", "(", "num_sequences", ",", "self", ".", "filter_size", "[", "0", "]", ",", "self", ".", "filter_size", "[", "1", "]", ",", "self", ".", "filter_size", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.initializer.FilterInitializerSiamese.__init__": [[207, 223], ["torch.Module.__init__", "initializer.FilterPool", "initializer.FilterInitializerSiamese.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "filter_size", "=", "1", ",", "feature_stride", "=", "16", ",", "pool_square", "=", "False", ",", "filter_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "filter_pool", "=", "FilterPool", "(", "filter_size", "=", "filter_size", ",", "feature_stride", "=", "feature_stride", ",", "pool_square", "=", "pool_square", ")", "\n", "self", ".", "filter_norm", "=", "filter_norm", "\n", "\n", "# Init weights", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.initializer.FilterInitializerSiamese.forward": [[225, 246], ["feat.view.view.view", "initializer.FilterInitializerSiamese.filter_pool", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean.view", "torch.mean.view", "torch.mean.view"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "feat", ",", "bb", ")", ":", "\n", "        ", "\"\"\"Runs the initializer module.\n        Note that [] denotes an optional dimension.\n        args:\n            feat:  Input feature maps. Dims (images_in_sequence, [sequences], feat_dim, H, W).\n            bb:  Target bounding boxes (x, y, w, h) in the image coords. Dims (images_in_sequence, [sequences], 4).\n        returns:\n            weights:  The output weights. Dims (sequences, feat_dim, wH, wW).\"\"\"", "\n", "\n", "num_images", "=", "feat", ".", "shape", "[", "0", "]", "\n", "\n", "feat", "=", "feat", ".", "view", "(", "-", "1", ",", "feat", ".", "shape", "[", "-", "3", "]", ",", "feat", ".", "shape", "[", "-", "2", "]", ",", "feat", ".", "shape", "[", "-", "1", "]", ")", "\n", "weights", "=", "self", ".", "filter_pool", "(", "feat", ",", "bb", ")", "\n", "\n", "if", "num_images", ">", "1", ":", "\n", "            ", "weights", "=", "torch", ".", "mean", "(", "weights", ".", "view", "(", "num_images", ",", "-", "1", ",", "weights", ".", "shape", "[", "-", "3", "]", ",", "weights", ".", "shape", "[", "-", "2", "]", ",", "weights", ".", "shape", "[", "-", "1", "]", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "filter_norm", ":", "\n", "            ", "weights", "=", "weights", "/", "(", "weights", ".", "shape", "[", "1", "]", "*", "weights", ".", "shape", "[", "2", "]", "*", "weights", ".", "shape", "[", "3", "]", ")", "\n", "\n", "", "return", "weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.optimizer.DiMPSteepestDescentGN.__init__": [[31, 84], ["float", "torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ltr.models.layers.distance.DistanceMap", "ltr.models.layers.distance.DistanceMap", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "optimizer.DiMPSteepestDescentGN.spatial_weight_predictor.weight.data.fill_", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp.min", "torch.exp.min", "torch.exp.min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mask_layers.append", "ltr.BentIdentPar", "ltr.BentIdentPar", "ltr.BentIdentParDeriv", "ltr.BentIdentParDeriv", "math.log", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "ValueError", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "ltr.LeakyReluPar", "ltr.LeakyReluPar", "ltr.LeakyReluParDeriv", "ltr.LeakyReluParDeriv", "ValueError", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "num_iter", "=", "1", ",", "feat_stride", "=", "16", ",", "init_step_length", "=", "1.0", ",", "\n", "init_filter_reg", "=", "1e-2", ",", "init_gauss_sigma", "=", "1.0", ",", "num_dist_bins", "=", "5", ",", "bin_displacement", "=", "1.0", ",", "mask_init_factor", "=", "4.0", ",", "\n", "score_act", "=", "'relu'", ",", "act_param", "=", "None", ",", "min_filter_reg", "=", "1e-3", ",", "mask_act", "=", "'sigmoid'", ",", "\n", "detach_length", "=", "float", "(", "'Inf'", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_iter", "=", "num_iter", "\n", "self", ".", "feat_stride", "=", "feat_stride", "\n", "self", ".", "log_step_length", "=", "nn", ".", "Parameter", "(", "math", ".", "log", "(", "init_step_length", ")", "*", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "filter_reg", "=", "nn", ".", "Parameter", "(", "init_filter_reg", "*", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "distance_map", "=", "DistanceMap", "(", "num_dist_bins", ",", "bin_displacement", ")", "\n", "self", ".", "min_filter_reg", "=", "min_filter_reg", "\n", "self", ".", "detach_length", "=", "detach_length", "\n", "self", ".", "Pc", "=", "0", "\n", "self", ".", "num", "=", "0", "\n", "\n", "# Distance coordinates", "\n", "d", "=", "torch", ".", "arange", "(", "num_dist_bins", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "*", "bin_displacement", "\n", "if", "init_gauss_sigma", "==", "0", ":", "\n", "            ", "init_gauss", "=", "torch", ".", "zeros_like", "(", "d", ")", "\n", "init_gauss", "[", "0", ",", "0", ",", "0", ",", "0", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "init_gauss", "=", "torch", ".", "exp", "(", "-", "1", "/", "2", "*", "(", "d", "/", "init_gauss_sigma", ")", "**", "2", ")", "\n", "\n", "# Module that predicts the target label function (y in the paper)", "\n", "", "self", ".", "label_map_predictor", "=", "nn", ".", "Conv2d", "(", "num_dist_bins", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "label_map_predictor", ".", "weight", ".", "data", "=", "init_gauss", "-", "init_gauss", ".", "min", "(", ")", "\n", "\n", "# Module that predicts the target mask (m in the paper)", "\n", "mask_layers", "=", "[", "nn", ".", "Conv2d", "(", "num_dist_bins", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "]", "\n", "if", "mask_act", "==", "'sigmoid'", ":", "\n", "            ", "mask_layers", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "init_bias", "=", "0.0", "\n", "", "elif", "mask_act", "==", "'linear'", ":", "\n", "            ", "init_bias", "=", "0.5", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown activation'", ")", "\n", "", "self", ".", "target_mask_predictor", "=", "nn", ".", "Sequential", "(", "*", "mask_layers", ")", "\n", "self", ".", "target_mask_predictor", "[", "0", "]", ".", "weight", ".", "data", "=", "mask_init_factor", "*", "torch", ".", "tanh", "(", "2.0", "-", "d", ")", "+", "init_bias", "\n", "\n", "# Module that predicts the residual weights (v in the paper)", "\n", "self", ".", "spatial_weight_predictor", "=", "nn", ".", "Conv2d", "(", "num_dist_bins", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "spatial_weight_predictor", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n", "# The score actvation and its derivative", "\n", "if", "score_act", "==", "'bentpar'", ":", "\n", "            ", "self", ".", "score_activation", "=", "activation", ".", "BentIdentPar", "(", "act_param", ")", "\n", "self", ".", "score_activation_deriv", "=", "activation", ".", "BentIdentParDeriv", "(", "act_param", ")", "\n", "", "elif", "score_act", "==", "'relu'", ":", "\n", "            ", "self", ".", "score_activation", "=", "activation", ".", "LeakyReluPar", "(", ")", "\n", "self", ".", "score_activation_deriv", "=", "activation", ".", "LeakyReluParDeriv", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown score activation'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.optimizer.DiMPSteepestDescentGN.forward": [[86, 225], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "optimizer.DiMPSteepestDescentGN.distance_map", "optimizer.DiMPSteepestDescentGN.label_map_predictor().view", "optimizer.DiMPSteepestDescentGN.target_mask_predictor().view", "optimizer.DiMPSteepestDescentGN.spatial_weight_predictor().view", "range", "torch.tensor().cuda().half", "torch.tensor().cuda().half", "torch.tensor().cuda().half", "torch.tensor().cuda().half", "torch.tensor().cuda().half", "torch.tensor().cuda().half", "torch.tensor().cuda().half", "torch.tensor().cuda().half", "torch.tensor().cuda().half", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "optimizer.DiMPSteepestDescentGN.Pc.mul_", "isinstance", "ltr.apply_filter", "ltr.apply_filter", "optimizer.DiMPSteepestDescentGN.score_activation", "optimizer.DiMPSteepestDescentGN.score_activation_deriv", "weights_grad.clone", "weight_iterates.append", "ltr.apply_filter", "ltr.apply_filter", "optimizer.DiMPSteepestDescentGN.score_activation", "losses.append", "feat.dim", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "optimizer.DiMPSteepestDescentGN.label_map_predictor", "optimizer.DiMPSteepestDescentGN.target_mask_predictor", "optimizer.DiMPSteepestDescentGN.spatial_weight_predictor", "math.sqrt", "torch.nonzero().size", "torch.nonzero().size", "torch.nonzero().size", "torch.nonzero().size", "torch.nonzero().size", "torch.nonzero().size", "torch.nonzero().size", "torch.nonzero().size", "torch.nonzero().size", "weights.detach.detach.detach", "losses.append", "ltr.apply_feat_transpose", "ltr.apply_feat_transpose", "ltr.apply_filter2().detach", "ltr.apply_filter2().detach", "int", "int", "torch.unfold", "torch.unfold", "torch.unfold", "torch.unfold().detach", "torch.unfold().detach", "torch.unfold().detach", "torch.unfold.mul_", "r.view().half.view().half.view().half", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm.div_", "torch.mm.div_", "torch.mm.div_", "P.sub_", "ltr.apply_filter", "ltr.apply_filter", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "sample_weight.sqrt().view", "torch.unfold.sum().sum", "math.sqrt", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "optimizer.DiMPSteepestDescentGN.forward.UpdateP"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_feat_transpose", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_feat_transpose", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_filter"], ["", "", "def", "forward", "(", "self", ",", "weights", ",", "feat", ",", "bb", ",", "indicator", "=", "False", ",", "sample_weight", "=", "None", ",", "num_iter", "=", "None", ",", "compute_losses", "=", "True", ")", ":", "\n", "        ", "\"\"\"Runs the optimizer module.\n        Note that [] denotes an optional dimension.\n        args:\n            weights:  Initial weights. Dims (sequences, feat_dim, wH, wW).\n            feat:  Input feature maps. Dims (images_in_sequence, [sequences], feat_dim, H, W).\n            bb:  Target bounding boxes (x, y, w, h) in the image coords. Dims (images_in_sequence, [sequences], 4).\n            sample_weight:  Optional weight for each sample. Dims: (images_in_sequence, [sequences]).\n            num_iter:  Number of iterations to run.\n            compute_losses:  Whether to compute the (train) loss in each iteration.\n        returns:\n            weights:  The final oprimized weights.\n            weight_iterates:  The weights computed in each iteration (including initial input and final output).\n            losses:  Train losses.\"\"\"", "\n", "\n", "# Sizes", "\n", "num_iter", "=", "self", ".", "num_iter", "if", "num_iter", "is", "None", "else", "num_iter", "\n", "num_images", "=", "feat", ".", "shape", "[", "0", "]", "\n", "num_sequences", "=", "feat", ".", "shape", "[", "1", "]", "if", "feat", ".", "dim", "(", ")", "==", "5", "else", "1", "\n", "filter_sz", "=", "(", "weights", ".", "shape", "[", "-", "2", "]", ",", "weights", ".", "shape", "[", "-", "1", "]", ")", "\n", "output_sz", "=", "(", "feat", ".", "shape", "[", "-", "2", "]", "+", "(", "weights", ".", "shape", "[", "-", "2", "]", "+", "1", ")", "%", "2", ",", "feat", ".", "shape", "[", "-", "1", "]", "+", "(", "weights", ".", "shape", "[", "-", "1", "]", "+", "1", ")", "%", "2", ")", "\n", "if", "not", "indicator", ":", "\n", "            ", "sc", "=", "torch", ".", "tensor", "(", "10.0", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ".", "half", "(", ")", "\n", "self", ".", "Pc", "=", "torch", ".", "eye", "(", "weights", ".", "shape", "[", "-", "2", "]", "*", "weights", ".", "shape", "[", "-", "1", "]", "*", "feat", ".", "shape", "[", "1", "]", ",", "requires_grad", "=", "False", ")", ".", "type", "(", "torch", ".", "cuda", ".", "HalfTensor", ")", "\n", "self", ".", "Pc", ".", "mul_", "(", "sc", ")", "\n", "#self.Pc = np.eye(weights.shape[-2] * weights.shape[-1] * feat.shape[1], dtype = \"float32\") * 10.0", "\n", "#self.Pc = torch.autograd.Variable(torch.eye(weights.shape[-2] * weights.shape[-1] * feat.shape[1]).type(torch.cuda.FloatTensor), volatile=True) * 10.0", "\n", "self", ".", "num", "=", "0", "\n", "\n", "# Get learnable scalars", "\n", "", "step_length_factor", "=", "torch", ".", "exp", "(", "self", ".", "log_step_length", ")", "\n", "reg_weight", "=", "(", "self", ".", "filter_reg", "*", "self", ".", "filter_reg", ")", ".", "clamp", "(", "min", "=", "self", ".", "min_filter_reg", "**", "2", ")", "\n", "\n", "# Compute distance map", "\n", "dmap_offset", "=", "(", "torch", ".", "Tensor", "(", "filter_sz", ")", ".", "to", "(", "bb", ".", "device", ")", "%", "2", ")", "/", "2.0", "\n", "center", "=", "(", "(", "bb", "[", "...", ",", ":", "2", "]", "+", "bb", "[", "...", ",", "2", ":", "]", "/", "2", ")", "/", "self", ".", "feat_stride", ")", ".", "view", "(", "-", "1", ",", "2", ")", ".", "flip", "(", "(", "1", ",", ")", ")", "-", "dmap_offset", "\n", "dist_map", "=", "self", ".", "distance_map", "(", "center", ",", "output_sz", ")", "\n", "\n", "# Compute label map masks and weight", "\n", "label_map", "=", "self", ".", "label_map_predictor", "(", "dist_map", ")", ".", "view", "(", "num_images", ",", "num_sequences", ",", "*", "dist_map", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "target_mask", "=", "self", ".", "target_mask_predictor", "(", "dist_map", ")", ".", "view", "(", "num_images", ",", "num_sequences", ",", "*", "dist_map", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "spatial_weight", "=", "self", ".", "spatial_weight_predictor", "(", "dist_map", ")", ".", "view", "(", "num_images", ",", "num_sequences", ",", "*", "dist_map", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "# Get total sample weights", "\n", "if", "sample_weight", "is", "None", ":", "\n", "            ", "sample_weight", "=", "math", ".", "sqrt", "(", "1.0", "/", "num_images", ")", "*", "spatial_weight", "\n", "b", "=", "num_images", "\n", "", "elif", "isinstance", "(", "sample_weight", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "b", "=", "torch", ".", "nonzero", "(", "sample_weight", ".", "data", ")", ".", "size", "(", "0", ")", "\n", "sample_weight", "=", "sample_weight", ".", "sqrt", "(", ")", ".", "view", "(", "num_images", ",", "num_sequences", ",", "1", ",", "1", ")", "*", "spatial_weight", "\n", "\n", "", "weight_iterates", "=", "[", "weights", "]", "\n", "losses", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_iter", ")", ":", "\n", "            ", "if", "i", ">", "0", "and", "i", "%", "self", ".", "detach_length", "==", "0", ":", "\n", "                ", "weights", "=", "weights", ".", "detach", "(", ")", "\n", "\n", "# Compute residuals", "\n", "", "scores", "=", "filter_layer", ".", "apply_filter", "(", "feat", ",", "weights", ")", "\n", "scores_act", "=", "self", ".", "score_activation", "(", "scores", ",", "target_mask", ")", "\n", "score_mask", "=", "self", ".", "score_activation_deriv", "(", "scores", ",", "target_mask", ")", "\n", "residuals", "=", "sample_weight", "*", "(", "scores_act", "-", "label_map", ")", "\n", "\n", "if", "compute_losses", ":", "\n", "                ", "losses", ".", "append", "(", "(", "(", "residuals", "**", "2", ")", ".", "sum", "(", ")", "+", "reg_weight", "*", "(", "weights", "**", "2", ")", ".", "sum", "(", ")", ")", "/", "num_sequences", ")", "\n", "\n", "# Compute gradient", "\n", "", "residuals_mapped", "=", "score_mask", "*", "(", "sample_weight", "*", "residuals", ")", "\n", "weights_grad", "=", "filter_layer", ".", "apply_feat_transpose", "(", "feat", ",", "residuals_mapped", ",", "filter_sz", ",", "training", "=", "self", ".", "training", ")", "+", "reg_weight", "*", "weights", "\n", "weights_grad_RLS", "=", "weights_grad", ".", "clone", "(", ")", "\n", "def", "UpdateP", "(", "P", ",", "feat", ",", "weights", ",", "score_mask", ",", "sample_weight", ",", "b", ")", ":", "\n", "                ", "feat2", "=", "filter_layer", ".", "apply_filter2", "(", "feat", ",", "weights", ")", ".", "detach", "(", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "feat2", ".", "shape", "\n", "FF", ",", "_", ",", "HH", ",", "WW", "=", "weights", ".", "shape", "\n", "S", "=", "2", "# stride", "\n", "Ho", "=", "int", "(", "1", "+", "(", "H", "-", "HH", ")", "/", "S", ")", "\n", "Wo", "=", "int", "(", "1", "+", "(", "W", "-", "WW", ")", "/", "S", ")", "\n", "feat_unf", "=", "F", ".", "unfold", "(", "feat2", ",", "(", "HH", ",", "WW", ")", ",", "stride", "=", "S", ")", "\n", "sample_weight_unf", "=", "F", ".", "unfold", "(", "score_mask", "*", "sample_weight", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "S", ")", ".", "detach", "(", ")", "\n", "#feat_unf1 = sample_weight_unf * feat_unf", "\n", "#feat_unf = feat_unf * sample_weight_unf", "\n", "feat_unf", ".", "mul_", "(", "sample_weight_unf", ")", "\n", "r", "=", "feat_unf", ".", "sum", "(", "0", ")", ".", "sum", "(", "1", ")", "/", "math", ".", "sqrt", "(", "Ho", "*", "Wo", "*", "b", ")", "\n", "r", "=", "r", ".", "view", "(", "1", ",", "-", "1", ")", ".", "half", "(", ")", "\n", "k", "=", "torch", ".", "mm", "(", "P", ",", "torch", ".", "t", "(", "r", ")", ")", "\n", "kk", "=", "torch", ".", "mm", "(", "k", ".", "data", ",", "torch", ".", "t", "(", "k", ".", "data", ")", ")", "\n", "kk", ".", "div_", "(", "torch", ".", "tensor", "(", "1.0", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ".", "half", "(", ")", ".", "data", "+", "torch", ".", "mm", "(", "r", ".", "data", ",", "k", ".", "data", ")", ")", "\n", "#ktest = torch.mm(k.data, torch.t(k.data)) / (1 + torch.mm(r.data, k.data))", "\n", "P", ".", "sub_", "(", "kk", ")", "\n", "#P.sub_(torch.mm(k.data, torch.t(k.data)) / (1 + torch.mm(r.data, k.data)))", "\n", "\n", "", "if", "indicator", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "num", "+=", "1", "\n", "UpdateP", "(", "self", ".", "Pc", ",", "feat", ",", "weights", ",", "score_mask", ",", "sample_weight", ",", "b", ")", "\n", "FF", ",", "_", ",", "HH", ",", "WW", "=", "weights", ".", "shape", "\n", "if", "self", ".", "num", "%", "100", "==", "0", ":", "\n", "                        ", "sc", "=", "torch", ".", "tensor", "(", "10.0", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ".", "half", "(", ")", "\n", "self", ".", "Pc", "=", "torch", ".", "eye", "(", "weights", ".", "shape", "[", "-", "2", "]", "*", "weights", ".", "shape", "[", "-", "1", "]", "*", "feat", ".", "shape", "[", "1", "]", ",", "\n", "requires_grad", "=", "False", ")", ".", "type", "(", "torch", ".", "cuda", ".", "HalfTensor", ")", "\n", "self", ".", "Pc", ".", "mul_", "(", "sc", ")", "\n", "", "weights_grad_RLS", ".", "data", "=", "torch", ".", "mm", "(", "weights_grad", ".", "data", ".", "view", "(", "FF", ",", "-", "1", ")", ".", "half", "(", ")", ",", "self", ".", "Pc", ".", "data", ")", ".", "view_as", "(", "\n", "weights_grad", ")", ".", "float", "(", ")", "\n", "#weights_grad_RLS.data = torch.mm(weights_grad.data.view(FF, -1), self.Pc.float().data).view_as(", "\n", "#    weights_grad)", "\n", "", "else", ":", "\n", "                    ", "FF", ",", "_", ",", "HH", ",", "WW", "=", "weights", ".", "shape", "\n", "#weights_grad_RLS.data = torch.mm(weights_grad.data.view(FF, -1), self.Pc.float().data).view_as(", "\n", "#    weights_grad)", "\n", "weights_grad_RLS", ".", "data", "=", "torch", ".", "mm", "(", "weights_grad", ".", "data", ".", "view", "(", "FF", ",", "-", "1", ")", ".", "half", "(", ")", ",", "self", ".", "Pc", ".", "data", ")", ".", "view_as", "(", "\n", "weights_grad", ")", ".", "float", "(", ")", "\n", "", "", "else", ":", "\n", "# Map the gradient with the Jacobian", "\n", "                ", "scores_grad", "=", "filter_layer", ".", "apply_filter", "(", "feat", ",", "weights_grad", ")", "\n", "scores_grad", "=", "sample_weight", "*", "(", "score_mask", "*", "scores_grad", ")", "\n", "\n", "# Compute optimal step length", "\n", "alpha_num", "=", "(", "weights_grad", "*", "weights_grad", ")", ".", "view", "(", "num_sequences", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "alpha_den", "=", "(", "(", "scores_grad", "*", "scores_grad", ")", ".", "view", "(", "num_images", ",", "num_sequences", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "(", "0", ",", "2", ")", ")", "+", "reg_weight", "*", "alpha_num", ")", ".", "clamp", "(", "1e-8", ")", "\n", "alpha", "=", "alpha_num", "/", "alpha_den", "\n", "\n", "# Update filter", "\n", "", "if", "not", "indicator", ":", "\n", "                ", "weights", "=", "weights", "-", "(", "step_length_factor", "*", "alpha", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "*", "weights_grad", "\n", "", "else", ":", "\n", "                ", "alpha", "=", "0.003", "# 0.003 for long-term tracking, 0.03 for short-term tracking, 0.06 for VOT", "\n", "weights", "=", "weights", "-", "alpha", "*", "weights_grad_RLS", "\n", "\n", "# Add the weight iterate", "\n", "", "weight_iterates", ".", "append", "(", "weights", ")", "\n", "\n", "", "if", "compute_losses", ":", "\n", "            ", "scores", "=", "filter_layer", ".", "apply_filter", "(", "feat", ",", "weights", ")", "\n", "scores", "=", "self", ".", "score_activation", "(", "scores", ",", "target_mask", ")", "\n", "losses", ".", "append", "(", "(", "(", "(", "sample_weight", "*", "(", "scores", "-", "label_map", ")", ")", "**", "2", ")", ".", "sum", "(", ")", "+", "reg_weight", "*", "(", "weights", "**", "2", ")", ".", "sum", "(", ")", ")", "/", "num_sequences", ")", "\n", "\n", "", "return", "weights", ",", "weight_iterates", ",", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.features.residual_basic_block": [[9, 25], ["range", "torch.nn.Sequential", "feat_layers.append", "feat_layers.append", "feat_layers.append", "feat_layers.append", "ltr.models.layers.transform.InterpCat", "torchvision.models.resnet.BasicBlock", "torch.nn.Conv2d", "ltr.models.layers.normalization.InstanceL2Norm", "int"], "function", ["None"], ["def", "residual_basic_block", "(", "feature_dim", "=", "256", ",", "num_blocks", "=", "1", ",", "l2norm", "=", "True", ",", "final_conv", "=", "False", ",", "norm_scale", "=", "1.0", ",", "out_dim", "=", "None", ",", "\n", "interp_cat", "=", "False", ")", ":", "\n", "    ", "\"\"\"Construct a network block based on the BasicBlock used in ResNet 18 and 34.\"\"\"", "\n", "if", "out_dim", "is", "None", ":", "\n", "        ", "out_dim", "=", "feature_dim", "\n", "", "feat_layers", "=", "[", "]", "\n", "if", "interp_cat", ":", "\n", "        ", "feat_layers", ".", "append", "(", "InterpCat", "(", ")", ")", "\n", "", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "        ", "odim", "=", "feature_dim", "if", "i", "<", "num_blocks", "-", "1", "+", "int", "(", "final_conv", ")", "else", "out_dim", "\n", "feat_layers", ".", "append", "(", "BasicBlock", "(", "feature_dim", ",", "odim", ")", ")", "\n", "", "if", "final_conv", ":", "\n", "        ", "feat_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "feature_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "if", "l2norm", ":", "\n", "        ", "feat_layers", ".", "append", "(", "InstanceL2Norm", "(", "scale", "=", "norm_scale", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "feat_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.features.residual_basic_block_pool": [[27, 44], ["range", "torch.nn.Sequential", "feat_layers.append", "feat_layers.append", "feat_layers.append", "feat_layers.append", "torchvision.models.resnet.BasicBlock", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "ltr.models.layers.normalization.InstanceL2Norm", "int"], "function", ["None"], ["", "def", "residual_basic_block_pool", "(", "feature_dim", "=", "256", ",", "num_blocks", "=", "1", ",", "l2norm", "=", "True", ",", "final_conv", "=", "False", ",", "norm_scale", "=", "1.0", ",", "out_dim", "=", "None", ",", "\n", "pool", "=", "True", ")", ":", "\n", "    ", "\"\"\"Construct a network block based on the BasicBlock used in ResNet.\"\"\"", "\n", "if", "out_dim", "is", "None", ":", "\n", "        ", "out_dim", "=", "feature_dim", "\n", "", "feat_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "        ", "odim", "=", "feature_dim", "if", "i", "<", "num_blocks", "-", "1", "+", "int", "(", "final_conv", ")", "else", "out_dim", "\n", "feat_layers", ".", "append", "(", "BasicBlock", "(", "feature_dim", ",", "odim", ")", ")", "\n", "", "if", "final_conv", ":", "\n", "        ", "feat_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "feature_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "if", "pool", ":", "\n", "        ", "feat_layers", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "", "if", "l2norm", ":", "\n", "        ", "feat_layers", ".", "append", "(", "InstanceL2Norm", "(", "scale", "=", "norm_scale", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "feat_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.features.residual_bottleneck": [[46, 62], ["range", "torch.nn.Sequential", "feat_layers.append", "feat_layers.append", "feat_layers.append", "feat_layers.append", "ltr.models.layers.transform.InterpCat", "torchvision.models.resnet.Bottleneck", "torch.nn.Conv2d", "ltr.models.layers.normalization.InstanceL2Norm", "int"], "function", ["None"], ["", "def", "residual_bottleneck", "(", "feature_dim", "=", "256", ",", "num_blocks", "=", "1", ",", "l2norm", "=", "True", ",", "final_conv", "=", "False", ",", "norm_scale", "=", "1.0", ",", "out_dim", "=", "None", ",", "\n", "interp_cat", "=", "False", ")", ":", "\n", "    ", "\"\"\"Construct a network block based on the Bottleneck block used in ResNet.\"\"\"", "\n", "if", "out_dim", "is", "None", ":", "\n", "        ", "out_dim", "=", "feature_dim", "\n", "", "feat_layers", "=", "[", "]", "\n", "if", "interp_cat", ":", "\n", "        ", "feat_layers", ".", "append", "(", "InterpCat", "(", ")", ")", "\n", "", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "        ", "planes", "=", "feature_dim", "if", "i", "<", "num_blocks", "-", "1", "+", "int", "(", "final_conv", ")", "else", "out_dim", "//", "4", "\n", "feat_layers", ".", "append", "(", "Bottleneck", "(", "4", "*", "feature_dim", ",", "planes", ")", ")", "\n", "", "if", "final_conv", ":", "\n", "        ", "feat_layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "4", "*", "feature_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "if", "l2norm", ":", "\n", "        ", "feat_layers", ".", "append", "(", "InstanceL2Norm", "(", "scale", "=", "norm_scale", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "feat_layers", ")", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.activation.MLU.__init__": [[9, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "min_val", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "min_val", "=", "min_val", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.activation.MLU.forward": [[14, 16], ["torch.elu", "torch.elu", "torch.elu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "F", ".", "elu", "(", "F", ".", "leaky_relu", "(", "input", ",", "1", "/", "self", ".", "min_val", ",", "inplace", "=", "self", ".", "inplace", ")", ",", "self", ".", "min_val", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.activation.LeakyReluPar.forward": [[22, 24], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs"], ["def", "forward", "(", "self", ",", "x", ",", "a", ")", ":", "\n", "        ", "return", "(", "1.0", "-", "a", ")", "/", "2.0", "*", "torch", ".", "abs", "(", "x", ")", "+", "(", "1.0", "+", "a", ")", "/", "2.0", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.activation.LeakyReluParDeriv.forward": [[29, 31], ["torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "x.detach"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ",", "a", ")", ":", "\n", "        ", "return", "(", "1.0", "-", "a", ")", "/", "2.0", "*", "torch", ".", "sign", "(", "x", ".", "detach", "(", ")", ")", "+", "(", "1.0", "+", "a", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.activation.BentIdentPar.__init__": [[36, 39], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "b", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "b", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.activation.BentIdentPar.forward": [[40, 42], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "a", ")", ":", "\n", "        ", "return", "(", "1.0", "-", "a", ")", "/", "2.0", "*", "(", "torch", ".", "sqrt", "(", "x", "*", "x", "+", "4.0", "*", "self", ".", "b", "*", "self", ".", "b", ")", "-", "2.0", "*", "self", ".", "b", ")", "+", "(", "1.0", "+", "a", ")", "/", "2.0", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.activation.BentIdentParDeriv.__init__": [[47, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "b", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "b", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.activation.BentIdentParDeriv.forward": [[51, 53], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "a", ")", ":", "\n", "        ", "return", "(", "1.0", "-", "a", ")", "/", "2.0", "*", "(", "x", "/", "torch", ".", "sqrt", "(", "x", "*", "x", "+", "4.0", "*", "self", ".", "b", "*", "self", ".", "b", ")", ")", "+", "(", "1.0", "+", "a", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.normalization.InstanceL2Norm.__init__": [[9, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "size_average", "=", "True", ",", "eps", "=", "1e-5", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.normalization.InstanceL2Norm.forward": [[15, 21], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "size_average", ":", "\n", "            ", "return", "input", "*", "(", "self", ".", "scale", "*", "(", "(", "input", ".", "shape", "[", "1", "]", "*", "input", ".", "shape", "[", "2", "]", "*", "input", ".", "shape", "[", "3", "]", ")", "/", "(", "\n", "torch", ".", "sum", "(", "(", "input", "*", "input", ")", ".", "view", "(", "input", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "-", "1", ")", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", ")", ".", "sqrt", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "input", "*", "(", "self", ".", "scale", "/", "(", "torch", ".", "sum", "(", "(", "input", "*", "input", ")", ".", "view", "(", "input", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "-", "1", ")", ",", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", ".", "sqrt", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.distance.DistanceMap.__init__": [[12, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "num_bins", ",", "bin_displacement", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_bins", "=", "num_bins", "\n", "self", ".", "bin_displacement", "=", "bin_displacement", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.distance.DistanceMap.forward": [[17, 40], ["center.view.view.view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "center[].view", "center[].view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.relu", "torch.relu", "torch.relu", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.abs"], ["", "def", "forward", "(", "self", ",", "center", ",", "output_sz", ")", ":", "\n", "        ", "\"\"\"Create the distance map.\n        args:\n            center: Torch tensor with (y,x) center position. Dims (batch, 2)\n            output_sz: Size of output distance map. 2-dimensional tuple.\"\"\"", "\n", "\n", "center", "=", "center", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "\n", "bin_centers", "=", "torch", ".", "arange", "(", "self", ".", "num_bins", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "center", ".", "device", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "k0", "=", "torch", ".", "arange", "(", "output_sz", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "center", ".", "device", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "\n", "k1", "=", "torch", ".", "arange", "(", "output_sz", "[", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "center", ".", "device", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "\n", "\n", "d0", "=", "k0", "-", "center", "[", ":", ",", "0", "]", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "d1", "=", "k1", "-", "center", "[", ":", ",", "1", "]", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "dist", "=", "torch", ".", "sqrt", "(", "d0", "*", "d0", "+", "d1", "*", "d1", ")", "\n", "bin_diff", "=", "dist", "/", "self", ".", "bin_displacement", "-", "bin_centers", "\n", "\n", "bin_val", "=", "torch", ".", "cat", "(", "(", "F", ".", "relu", "(", "1.0", "-", "torch", ".", "abs", "(", "bin_diff", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ")", ",", "inplace", "=", "True", ")", ",", "\n", "(", "1.0", "+", "bin_diff", "[", ":", ",", "-", "1", ":", ",", ":", ",", ":", "]", ")", ".", "clamp", "(", "0", ",", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "bin_val", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.blocks.LinearBlock.__init__": [[16, 21], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "input_sz", ",", "bias", "=", "True", ",", "batch_norm", "=", "True", ",", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_planes", "*", "input_sz", "*", "input_sz", ",", "out_planes", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "if", "batch_norm", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "relu", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.blocks.LinearBlock.forward": [[22, 29], ["blocks.LinearBlock.linear", "blocks.LinearBlock.view", "blocks.LinearBlock.view", "blocks.LinearBlock.bn", "blocks.LinearBlock.relu", "blocks.LinearBlock.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.blocks.conv_block": [[4, 13], ["torch.nn.Sequential", "torch.nn.Conv2d", "layers.append", "layers.append", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "function", ["None"], ["def", "conv_block", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "\n", "batch_norm", "=", "True", ",", "relu", "=", "True", ")", ":", "\n", "    ", "layers", "=", "[", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "bias", ")", "]", "\n", "if", "batch_norm", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ")", "\n", "", "if", "relu", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.transform.InterpCat.forward": [[16, 26], ["isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "list.values", "transform.interpolate"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.transform.interpolate"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "(", "dict", ",", "OrderedDict", ")", ")", ":", "\n", "            ", "input", "=", "list", "(", "input", ".", "values", "(", ")", ")", "\n", "\n", "", "output_shape", "=", "None", "\n", "for", "x", "in", "input", ":", "\n", "            ", "if", "output_shape", "is", "None", "or", "output_shape", "[", "0", "]", ">", "x", ".", "shape", "[", "-", "2", "]", ":", "\n", "                ", "output_shape", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "", "", "return", "torch", ".", "cat", "(", "[", "interpolate", "(", "x", ",", "output_shape", ")", "for", "x", "in", "input", "]", ",", "dim", "=", "-", "3", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.transform.interpolate": [[7, 11], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "sz.tolist", "torch.interpolate"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.transform.interpolate"], ["def", "interpolate", "(", "x", ",", "sz", ")", ":", "\n", "    ", "\"\"\"Interpolate 4D tensor x to size sz.\"\"\"", "\n", "sz", "=", "sz", ".", "tolist", "(", ")", "if", "torch", ".", "is_tensor", "(", "sz", ")", "else", "sz", "\n", "return", "F", ".", "interpolate", "(", "x", ",", "sz", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "if", "x", ".", "shape", "[", "-", "2", ":", "]", "!=", "sz", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_filter2": [[4, 21], ["torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d.", "feat.view"], "function", ["None"], ["def", "apply_filter2", "(", "feat", ",", "filter", ")", ":", "\n", "    ", "\"\"\"Applies the filter on the input features (feat).\n    args:\n        feat: These are the input features. Must have dimensions (images_in_sequence, sequences, feat_dim, H, W)\n        filter: The filter to apply. Must have dimensions (sequences, feat_dim, fH, fW) or (sequences, filters, feat_dim, fH, fW)\n    output:\n        scores: Output of filtering. Dimensions (images_in_sequence, sequences, yH, yW) or (images_in_sequence, sequences, filters, yH, yW)\n    \"\"\"", "\n", "\n", "padding2", "=", "(", "filter", ".", "shape", "[", "-", "2", "]", "//", "2", ",", "filter", ".", "shape", "[", "-", "2", "]", "//", "2", ",", "filter", ".", "shape", "[", "-", "1", "]", "//", "2", ",", "filter", ".", "shape", "[", "-", "1", "]", "//", "2", ")", "\n", "\n", "num_images", "=", "feat", ".", "shape", "[", "0", "]", "\n", "\n", "padding_operation", "=", "torch", ".", "nn", ".", "ZeroPad2d", "(", "padding2", ")", "\n", "feat2", "=", "padding_operation", "(", "feat", ".", "view", "(", "num_images", ",", "-", "1", ",", "feat", ".", "shape", "[", "-", "2", "]", ",", "feat", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "feat2", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_filter": [[22, 48], ["torch.conv2d", "F.conv2d.view", "filter.dim", "torch.conv2d", "F.conv2d.view", "feat.view", "feat.dim", "feat.view", "filter.view"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "def", "apply_filter", "(", "feat", ",", "filter", ")", ":", "\n", "    ", "\"\"\"Applies the filter on the input features (feat).\n    args:\n        feat: These are the input features. Must have dimensions (images_in_sequence, sequences, feat_dim, H, W)\n        filter: The filter to apply. Must have dimensions (sequences, feat_dim, fH, fW) or (sequences, filters, feat_dim, fH, fW)\n    output:\n        scores: Output of filtering. Dimensions (images_in_sequence, sequences, yH, yW) or (images_in_sequence, sequences, filters, yH, yW)\n    \"\"\"", "\n", "\n", "multiple_filters", "=", "(", "filter", ".", "dim", "(", ")", "==", "5", ")", "\n", "\n", "padding", "=", "(", "filter", ".", "shape", "[", "-", "2", "]", "//", "2", ",", "filter", ".", "shape", "[", "-", "1", "]", "//", "2", ")", "\n", "\n", "num_images", "=", "feat", ".", "shape", "[", "0", "]", "\n", "num_sequences", "=", "feat", ".", "shape", "[", "1", "]", "if", "feat", ".", "dim", "(", ")", "==", "5", "else", "1", "\n", "\n", "if", "multiple_filters", ":", "\n", "        ", "scores", "=", "F", ".", "conv2d", "(", "feat", ".", "view", "(", "num_images", ",", "-", "1", ",", "feat", ".", "shape", "[", "-", "2", "]", ",", "feat", ".", "shape", "[", "-", "1", "]", ")", ",", "filter", ".", "view", "(", "-", "1", ",", "*", "filter", ".", "shape", "[", "-", "3", ":", "]", ")", ",", "\n", "padding", "=", "padding", ",", "groups", "=", "num_sequences", ")", "\n", "\n", "return", "scores", ".", "view", "(", "num_images", ",", "num_sequences", ",", "-", "1", ",", "scores", ".", "shape", "[", "-", "2", "]", ",", "scores", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "scores", "=", "F", ".", "conv2d", "(", "feat", ".", "view", "(", "num_images", ",", "-", "1", ",", "feat", ".", "shape", "[", "-", "2", "]", ",", "feat", ".", "shape", "[", "-", "1", "]", ")", ",", "filter", ",", "\n", "padding", "=", "padding", ",", "groups", "=", "num_sequences", ")", "\n", "\n", "return", "scores", ".", "view", "(", "num_images", ",", "num_sequences", ",", "scores", ".", "shape", "[", "-", "2", "]", ",", "scores", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_feat_transpose": [[50, 64], ["filter._apply_feat_transpose_v2", "filter._apply_feat_transpose_v3", "input.dim"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter._apply_feat_transpose_v2", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter._apply_feat_transpose_v3", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "def", "apply_feat_transpose", "(", "feat", ",", "input", ",", "filter_ksz", ",", "training", "=", "True", ")", ":", "\n", "    ", "\"\"\"Applies the transposed operation off apply_filter w.r.t. filter itself. Can be used to compute the filter gradient.\n    args:\n        feat: These are the input features. Must have dimensions (images_in_sequence, sequences, feat_dim, H, W)\n        input: Input activation (e.g. residuals). Must have dimensions (images_in_sequence, sequences, yH, yW) or\n                (images_in_sequence, sequences, filters, yH, yW)\n        training: Choose the faster implementation whether training or not.\n    output:\n        Output of transposed operation. Dimensions (sequences, feat_dim, fH, fW)\n    \"\"\"", "\n", "\n", "if", "training", "or", "input", ".", "dim", "(", ")", "==", "5", ":", "\n", "        ", "return", "_apply_feat_transpose_v3", "(", "feat", ",", "input", ",", "filter_ksz", ")", "\n", "", "return", "_apply_feat_transpose_v2", "(", "feat", ",", "input", ",", "filter_ksz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter._apply_feat_transpose_v1": [[66, 83], ["isinstance", "torch.conv_transpose2d", "F.conv_transpose2d.view().sum", "input.flip().view", "feat.view", "feat.dim", "zip", "F.conv_transpose2d.view", "input.flip"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "def", "_apply_feat_transpose_v1", "(", "feat", ",", "input", ",", "filter_ksz", ")", ":", "\n", "    ", "\"\"\"This one is slow as hell!!!!\"\"\"", "\n", "\n", "num_images", "=", "feat", ".", "shape", "[", "0", "]", "\n", "num_sequences", "=", "feat", ".", "shape", "[", "1", "]", "if", "feat", ".", "dim", "(", ")", "==", "5", "else", "1", "\n", "feat_sz", "=", "(", "feat", ".", "shape", "[", "-", "2", "]", ",", "feat", ".", "shape", "[", "-", "1", "]", ")", "\n", "if", "isinstance", "(", "filter_ksz", ",", "int", ")", ":", "\n", "        ", "filter_ksz", "=", "(", "filter_ksz", ",", "filter_ksz", ")", "\n", "\n", "# trans_pad = sz + padding - filter_ksz", "\n", "", "trans_pad", "=", "[", "sz", "+", "ksz", "//", "2", "-", "ksz", "for", "sz", ",", "ksz", "in", "zip", "(", "feat_sz", ",", "filter_ksz", ")", "]", "\n", "\n", "filter_grad", "=", "F", ".", "conv_transpose2d", "(", "input", ".", "flip", "(", "(", "2", ",", "3", ")", ")", ".", "view", "(", "1", ",", "-", "1", ",", "input", ".", "shape", "[", "-", "2", "]", ",", "input", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "feat", ".", "view", "(", "-", "1", ",", "feat", ".", "shape", "[", "-", "3", "]", ",", "feat", ".", "shape", "[", "-", "2", "]", ",", "feat", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "padding", "=", "trans_pad", ",", "groups", "=", "num_images", "*", "num_sequences", ")", "\n", "\n", "return", "filter_grad", ".", "view", "(", "num_images", ",", "num_sequences", ",", "-", "1", ",", "filter_grad", ".", "shape", "[", "-", "2", "]", ",", "filter_grad", ".", "shape", "[", "-", "1", "]", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter._apply_feat_transpose_v2": [[85, 112], ["isinstance", "torch.conv2d", "F.conv2d.view().sum().flip", "input.dim", "torch.conv2d", "F.conv2d.view().sum().flip().permute", "input.view", "feat.view", "feat.dim", "input.view().permute", "feat.view", "F.conv2d.view().flip().permute", "F.conv2d.view().sum", "F.conv2d.view().sum().flip", "input.view", "F.conv2d.view().flip", "F.conv2d.view", "F.conv2d.view().sum", "F.conv2d.view", "F.conv2d.view"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "def", "_apply_feat_transpose_v2", "(", "feat", ",", "input", ",", "filter_ksz", ")", ":", "\n", "    ", "\"\"\"Fast forward and slow backward\"\"\"", "\n", "\n", "multiple_filters", "=", "(", "input", ".", "dim", "(", ")", "==", "5", ")", "\n", "\n", "num_images", "=", "feat", ".", "shape", "[", "0", "]", "\n", "num_sequences", "=", "feat", ".", "shape", "[", "1", "]", "if", "feat", ".", "dim", "(", ")", "==", "5", "else", "1", "\n", "num_filters", "=", "input", ".", "shape", "[", "2", "]", "if", "multiple_filters", "else", "1", "\n", "if", "isinstance", "(", "filter_ksz", ",", "int", ")", ":", "\n", "        ", "filter_ksz", "=", "(", "filter_ksz", ",", "filter_ksz", ")", "\n", "\n", "", "trans_pad", "=", "[", "(", "ksz", "-", "1", ")", "//", "2", "for", "ksz", "in", "filter_ksz", "]", "\n", "\n", "if", "multiple_filters", ":", "\n", "        ", "filter_grad", "=", "F", ".", "conv2d", "(", "input", ".", "view", "(", "-", "1", ",", "num_filters", ",", "input", ".", "shape", "[", "-", "2", "]", ",", "input", ".", "shape", "[", "-", "1", "]", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ",", "\n", "feat", ".", "view", "(", "-", "1", ",", "1", ",", "feat", ".", "shape", "[", "-", "2", "]", ",", "feat", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "padding", "=", "trans_pad", ",", "groups", "=", "num_images", "*", "num_sequences", ")", "\n", "\n", "if", "num_images", "==", "1", ":", "\n", "            ", "return", "filter_grad", ".", "view", "(", "num_filters", ",", "num_sequences", ",", "-", "1", ",", "filter_grad", ".", "shape", "[", "-", "2", "]", ",", "filter_grad", ".", "shape", "[", "-", "1", "]", ")", ".", "flip", "(", "(", "3", ",", "4", ")", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "", "return", "filter_grad", ".", "view", "(", "num_filters", ",", "num_images", ",", "num_sequences", ",", "-", "1", ",", "filter_grad", ".", "shape", "[", "-", "2", "]", ",", "filter_grad", ".", "shape", "[", "-", "1", "]", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "flip", "(", "(", "3", ",", "4", ")", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "\n", "", "filter_grad", "=", "F", ".", "conv2d", "(", "input", ".", "view", "(", "1", ",", "-", "1", ",", "input", ".", "shape", "[", "-", "2", "]", ",", "input", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "feat", ".", "view", "(", "-", "1", ",", "1", ",", "feat", ".", "shape", "[", "-", "2", "]", ",", "feat", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "padding", "=", "trans_pad", ",", "groups", "=", "num_images", "*", "num_sequences", ")", "\n", "\n", "return", "filter_grad", ".", "view", "(", "num_images", ",", "num_sequences", ",", "-", "1", ",", "filter_grad", ".", "shape", "[", "-", "2", "]", ",", "filter_grad", ".", "shape", "[", "-", "1", "]", ")", ".", "sum", "(", "dim", "=", "0", ")", ".", "flip", "(", "(", "2", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter._apply_feat_transpose_v3": [[114, 139], ["isinstance", "torch.conv2d", "F.conv2d.view().sum().permute", "input.dim", "feat.view().permute", "input.view", "F.conv2d.view().sum().permute", "F.conv2d.permute", "feat.dim", "F.conv2d.view().permute", "F.conv2d.view().sum", "feat.view", "F.conv2d.view().sum", "F.conv2d.view", "F.conv2d.view", "F.conv2d.view"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "def", "_apply_feat_transpose_v3", "(", "feat", ",", "input", ",", "filter_ksz", ")", ":", "\n", "    ", "\"\"\"Slow forward fast backward\"\"\"", "\n", "\n", "multiple_filters", "=", "(", "input", ".", "dim", "(", ")", "==", "5", ")", "\n", "\n", "num_images", "=", "feat", ".", "shape", "[", "0", "]", "\n", "num_sequences", "=", "feat", ".", "shape", "[", "1", "]", "if", "feat", ".", "dim", "(", ")", "==", "5", "else", "1", "\n", "num_filters", "=", "input", ".", "shape", "[", "2", "]", "if", "multiple_filters", "else", "1", "\n", "if", "isinstance", "(", "filter_ksz", ",", "int", ")", ":", "\n", "        ", "filter_ksz", "=", "(", "filter_ksz", ",", "filter_ksz", ")", "\n", "\n", "", "trans_pad", "=", "[", "ksz", "//", "2", "for", "ksz", "in", "filter_ksz", "]", "\n", "\n", "filter_grad", "=", "F", ".", "conv2d", "(", "feat", ".", "view", "(", "-", "1", ",", "feat", ".", "shape", "[", "-", "3", "]", ",", "feat", ".", "shape", "[", "-", "2", "]", ",", "feat", ".", "shape", "[", "-", "1", "]", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ",", "\n", "input", ".", "view", "(", "-", "1", ",", "1", ",", "input", ".", "shape", "[", "-", "2", "]", ",", "input", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "padding", "=", "trans_pad", ",", "groups", "=", "num_images", "*", "num_sequences", ")", "\n", "\n", "if", "multiple_filters", ":", "\n", "        ", "if", "num_images", "==", "1", ":", "\n", "            ", "return", "filter_grad", ".", "view", "(", "-", "1", ",", "num_sequences", ",", "num_filters", ",", "filter_grad", ".", "shape", "[", "-", "2", "]", ",", "filter_grad", ".", "shape", "[", "-", "1", "]", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ",", "4", ")", "\n", "", "return", "filter_grad", ".", "view", "(", "-", "1", ",", "num_images", ",", "num_sequences", ",", "num_filters", ",", "filter_grad", ".", "shape", "[", "-", "2", "]", ",", "filter_grad", ".", "shape", "[", "-", "1", "]", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ",", "4", ")", "\n", "\n", "", "if", "num_images", "==", "1", ":", "\n", "        ", "return", "filter_grad", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "", "return", "filter_grad", ".", "view", "(", "-", "1", ",", "num_images", ",", "num_sequences", ",", "filter_grad", ".", "shape", "[", "-", "2", "]", ",", "filter_grad", ".", "shape", "[", "-", "1", "]", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter._apply_feat_transpose_v4": [[141, 156], ["isinstance", "torch.conv2d", "F.conv2d.permute", "feat.permute().reshape", "input.permute", "feat.dim", "feat.permute"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "def", "_apply_feat_transpose_v4", "(", "feat", ",", "input", ",", "filter_ksz", ")", ":", "\n", "    ", "\"\"\"Slow forward fast backward\"\"\"", "\n", "\n", "num_images", "=", "feat", ".", "shape", "[", "0", "]", "\n", "num_sequences", "=", "feat", ".", "shape", "[", "1", "]", "if", "feat", ".", "dim", "(", ")", "==", "5", "else", "1", "\n", "if", "isinstance", "(", "filter_ksz", ",", "int", ")", ":", "\n", "        ", "filter_ksz", "=", "(", "filter_ksz", ",", "filter_ksz", ")", "\n", "\n", "", "trans_pad", "=", "[", "ksz", "//", "2", "for", "ksz", "in", "filter_ksz", "]", "\n", "\n", "filter_grad", "=", "F", ".", "conv2d", "(", "feat", ".", "permute", "(", "2", ",", "1", ",", "0", ",", "3", ",", "4", ")", ".", "reshape", "(", "feat", ".", "shape", "[", "-", "3", "]", ",", "-", "1", ",", "feat", ".", "shape", "[", "-", "2", "]", ",", "feat", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "input", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ",", "\n", "padding", "=", "trans_pad", ",", "groups", "=", "num_sequences", ")", "\n", "\n", "return", "filter_grad", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.filter_gradient": [[159, 174], ["filter.apply_filter", "filter.apply_feat_transpose"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_filter", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.layers.filter.apply_feat_transpose"], ["", "def", "filter_gradient", "(", "feat", ",", "filter", ",", "label", "=", "None", ",", "training", "=", "True", ")", ":", "\n", "    ", "\"\"\"Computes gradient of the filter when applied on the input features and ground truth label.\n    args:\n        feat: These are the input features. Must have dimensions (images_in_sequence, sequences, feat_dim, H, W)\n        filter: The filter to apply. Must have dimensions (sequences, feat_dim, fH, fW)\n        label: Ground truth label in the L2 loss. Dimensions (images_in_sequence, sequences, yH, yW)\n    output:\n        filter_gradient: Dimensions same as input filter (sequences, feat_dim, fH, fW)\n    \"\"\"", "\n", "\n", "residuals", "=", "apply_filter", "(", "feat", ",", "filter", ")", "\n", "if", "label", "is", "not", "None", ":", "\n", "        ", "residuals", "=", "residuals", "-", "label", "\n", "", "filter_ksz", "=", "(", "filter", ".", "shape", "[", "-", "2", "]", ",", "filter", ".", "shape", "[", "-", "1", "]", ")", "\n", "return", "apply_feat_transpose", "(", "feat", ",", "residuals", ",", "filter_ksz", ",", "training", "=", "training", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.__init__": [[24, 37], ["torch.Module.__init__", "sorted", "isinstance", "list", "dimpnet.DiMPnet.feature_extractor.parameters", "set", "p.requires_grad_"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters"], ["def", "__init__", "(", "self", ",", "feature_extractor", ",", "classifier", ",", "bb_regressor", ",", "classification_layer", ",", "bb_regressor_layer", ",", "train_feature_extractor", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feature_extractor", "=", "feature_extractor", "\n", "self", ".", "classifier", "=", "classifier", "\n", "self", ".", "bb_regressor", "=", "bb_regressor", "\n", "self", ".", "classification_layer", "=", "[", "classification_layer", "]", "if", "isinstance", "(", "classification_layer", ",", "str", ")", "else", "classification_layer", "\n", "self", ".", "bb_regressor_layer", "=", "bb_regressor_layer", "\n", "self", ".", "output_layers", "=", "sorted", "(", "list", "(", "set", "(", "self", ".", "classification_layer", "+", "self", ".", "bb_regressor_layer", ")", ")", ")", "\n", "\n", "if", "not", "train_feature_extractor", ":", "\n", "            ", "for", "p", "in", "self", ".", "feature_extractor", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.forward": [[38, 72], ["dimpnet.DiMPnet.extract_backbone_features", "dimpnet.DiMPnet.extract_backbone_features", "dimpnet.DiMPnet.get_backbone_clf_feat", "dimpnet.DiMPnet.get_backbone_clf_feat", "dimpnet.DiMPnet.classifier", "dimpnet.DiMPnet.get_backbone_bbreg_feat", "dimpnet.DiMPnet.get_backbone_bbreg_feat", "dimpnet.DiMPnet.bb_regressor", "train_imgs.view", "test_imgs.view", "train_imgs.dim", "test_imgs.dim"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_backbone_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_backbone_features", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.get_backbone_clf_feat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.get_backbone_clf_feat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.get_backbone_bbreg_feat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.get_backbone_bbreg_feat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.util.Concatenate.dim"], ["", "", "", "def", "forward", "(", "self", ",", "train_imgs", ",", "test_imgs", ",", "train_bb", ",", "test_proposals", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Runs the DiMP network the way it is applied during training.\n        The forward function is ONLY used for training. Call the individual functions during tracking.\n        args:\n            train_imgs:  Train image samples (images, sequences, 3, H, W).\n            test_imgs:  Test image samples (images, sequences, 3, H, W).\n            trian_bb:  Target boxes (x,y,w,h) for the train images. Dims (images, sequences, 4).\n            test_proposals:  Proposal boxes to use for the IoUNet (bb_regressor) module.\n            *args, **kwargs:  These are passed to the classifier module.\n        returns:\n            test_scores:  Classification scores on the test samples.\n            iou_pred:  Predicted IoU scores for the test_proposals.\"\"\"", "\n", "\n", "assert", "train_imgs", ".", "dim", "(", ")", "==", "5", "and", "test_imgs", ".", "dim", "(", ")", "==", "5", ",", "'Expect 5 dimensional inputs'", "\n", "\n", "# Extract backbone features", "\n", "train_feat", "=", "self", ".", "extract_backbone_features", "(", "train_imgs", ".", "view", "(", "-", "1", ",", "*", "train_imgs", ".", "shape", "[", "-", "3", ":", "]", ")", ")", "\n", "test_feat", "=", "self", ".", "extract_backbone_features", "(", "test_imgs", ".", "view", "(", "-", "1", ",", "*", "test_imgs", ".", "shape", "[", "-", "3", ":", "]", ")", ")", "\n", "\n", "# Classification features", "\n", "train_feat_clf", "=", "self", ".", "get_backbone_clf_feat", "(", "train_feat", ")", "\n", "test_feat_clf", "=", "self", ".", "get_backbone_clf_feat", "(", "test_feat", ")", "\n", "\n", "# Run classifier module", "\n", "target_scores", "=", "self", ".", "classifier", "(", "train_feat_clf", ",", "test_feat_clf", ",", "train_bb", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# Get bb_regressor features", "\n", "train_feat_iou", "=", "self", ".", "get_backbone_bbreg_feat", "(", "train_feat", ")", "\n", "test_feat_iou", "=", "self", ".", "get_backbone_bbreg_feat", "(", "test_feat", ")", "\n", "\n", "# Run the IoUNet module", "\n", "iou_pred", "=", "self", ".", "bb_regressor", "(", "train_feat_iou", ",", "test_feat_iou", ",", "train_bb", ",", "test_proposals", ")", "\n", "\n", "return", "target_scores", ",", "iou_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.get_backbone_clf_feat": [[73, 78], ["collections.OrderedDict", "len"], "methods", ["None"], ["", "def", "get_backbone_clf_feat", "(", "self", ",", "backbone_feat", ")", ":", "\n", "        ", "feat", "=", "OrderedDict", "(", "{", "l", ":", "backbone_feat", "[", "l", "]", "for", "l", "in", "self", ".", "classification_layer", "}", ")", "\n", "if", "len", "(", "self", ".", "classification_layer", ")", "==", "1", ":", "\n", "            ", "return", "feat", "[", "self", ".", "classification_layer", "[", "0", "]", "]", "\n", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.get_backbone_bbreg_feat": [[79, 81], ["None"], "methods", ["None"], ["", "def", "get_backbone_bbreg_feat", "(", "self", ",", "backbone_feat", ")", ":", "\n", "        ", "return", "[", "backbone_feat", "[", "l", "]", "for", "l", "in", "self", ".", "bb_regressor_layer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_classification_feat": [[82, 84], ["dimpnet.DiMPnet.classifier.extract_classification_feat", "dimpnet.DiMPnet.get_backbone_clf_feat"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_classification_feat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.get_backbone_clf_feat"], ["", "def", "extract_classification_feat", "(", "self", ",", "backbone_feat", ")", ":", "\n", "        ", "return", "self", ".", "classifier", ".", "extract_classification_feat", "(", "self", ".", "get_backbone_clf_feat", "(", "backbone_feat", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_backbone_features": [[85, 89], ["dimpnet.DiMPnet.feature_extractor"], "methods", ["None"], ["", "def", "extract_backbone_features", "(", "self", ",", "im", ",", "layers", "=", "None", ")", ":", "\n", "        ", "if", "layers", "is", "None", ":", "\n", "            ", "layers", "=", "self", ".", "output_layers", "\n", "", "return", "self", ".", "feature_extractor", "(", "im", ",", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_features": [[90, 99], ["sorted", "dimpnet.DiMPnet.feature_extractor", "dimpnet.DiMPnet.extract_classification_feat", "collections.OrderedDict", "dimpnet.DiMPnet.feature_extractor", "list", "set"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.DiMPnet.extract_classification_feat", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["", "def", "extract_features", "(", "self", ",", "im", ",", "layers", "=", "None", ")", ":", "\n", "        ", "if", "layers", "is", "None", ":", "\n", "            ", "layers", "=", "self", ".", "bb_regressor_layer", "+", "[", "'classification'", "]", "\n", "", "if", "'classification'", "not", "in", "layers", ":", "\n", "            ", "return", "self", ".", "feature_extractor", "(", "im", ",", "layers", ")", "\n", "", "backbone_layers", "=", "sorted", "(", "list", "(", "set", "(", "[", "l", "for", "l", "in", "layers", "+", "self", ".", "classification_layer", "if", "l", "!=", "'classification'", "]", ")", ")", ")", "\n", "all_feat", "=", "self", ".", "feature_extractor", "(", "im", ",", "backbone_layers", ")", "\n", "all_feat", "[", "'classification'", "]", "=", "self", ".", "extract_classification_feat", "(", "all_feat", ")", "\n", "return", "OrderedDict", "(", "{", "l", ":", "all_feat", "[", "l", "]", "for", "l", "in", "layers", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.dimpnet18": [[102, 146], ["float", "ltr.resnet18", "math.sqrt", "ltr.residual_basic_block", "ltr.FilterInitializerLinear", "ltr.DiMPSteepestDescentGN", "ltr.LinearFilter", "ltr.AtomIoUNet", "dimpnet.DiMPnet"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.resnet18", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.features.residual_basic_block"], ["", "", "@", "model_constructor", "\n", "def", "dimpnet18", "(", "filter_size", "=", "1", ",", "optim_iter", "=", "5", ",", "optim_init_step", "=", "1.0", ",", "optim_init_reg", "=", "0.01", ",", "\n", "classification_layer", "=", "'layer3'", ",", "feat_stride", "=", "16", ",", "backbone_pretrained", "=", "True", ",", "clf_feat_blocks", "=", "1", ",", "\n", "clf_feat_norm", "=", "True", ",", "init_filter_norm", "=", "False", ",", "final_conv", "=", "True", ",", "\n", "out_feature_dim", "=", "256", ",", "init_gauss_sigma", "=", "1.0", ",", "num_dist_bins", "=", "5", ",", "bin_displacement", "=", "1.0", ",", "\n", "mask_init_factor", "=", "4.0", ",", "iou_input_dim", "=", "(", "256", ",", "256", ")", ",", "iou_inter_dim", "=", "(", "256", ",", "256", ")", ",", "\n", "score_act", "=", "'relu'", ",", "act_param", "=", "None", ",", "target_mask_act", "=", "'sigmoid'", ",", "\n", "detach_length", "=", "float", "(", "'Inf'", ")", ")", ":", "\n", "# Backbone", "\n", "    ", "backbone_net", "=", "backbones", ".", "resnet18", "(", "pretrained", "=", "backbone_pretrained", ")", "\n", "\n", "# Feature normalization", "\n", "norm_scale", "=", "math", ".", "sqrt", "(", "1.0", "/", "(", "out_feature_dim", "*", "filter_size", "*", "filter_size", ")", ")", "\n", "\n", "# Classifier features", "\n", "clf_feature_extractor", "=", "clf_features", ".", "residual_basic_block", "(", "num_blocks", "=", "clf_feat_blocks", ",", "l2norm", "=", "clf_feat_norm", ",", "\n", "final_conv", "=", "final_conv", ",", "norm_scale", "=", "norm_scale", ",", "\n", "out_dim", "=", "out_feature_dim", ")", "\n", "\n", "# Initializer for the DiMP classifier", "\n", "initializer", "=", "clf_initializer", ".", "FilterInitializerLinear", "(", "filter_size", "=", "filter_size", ",", "filter_norm", "=", "init_filter_norm", ",", "\n", "feature_dim", "=", "out_feature_dim", ")", "\n", "\n", "# Optimizer for the DiMP classifier", "\n", "optimizer", "=", "clf_optimizer", ".", "DiMPSteepestDescentGN", "(", "num_iter", "=", "optim_iter", ",", "feat_stride", "=", "feat_stride", ",", "\n", "init_step_length", "=", "optim_init_step", ",", "\n", "init_filter_reg", "=", "optim_init_reg", ",", "init_gauss_sigma", "=", "init_gauss_sigma", ",", "\n", "num_dist_bins", "=", "num_dist_bins", ",", "\n", "bin_displacement", "=", "bin_displacement", ",", "\n", "mask_init_factor", "=", "mask_init_factor", ",", "\n", "score_act", "=", "score_act", ",", "act_param", "=", "act_param", ",", "mask_act", "=", "target_mask_act", ",", "\n", "detach_length", "=", "detach_length", ")", "\n", "\n", "# The classifier module", "\n", "classifier", "=", "target_clf", ".", "LinearFilter", "(", "filter_size", "=", "filter_size", ",", "filter_initializer", "=", "initializer", ",", "\n", "filter_optimizer", "=", "optimizer", ",", "feature_extractor", "=", "clf_feature_extractor", ")", "\n", "\n", "# Bounding box regressor", "\n", "bb_regressor", "=", "bbmodels", ".", "AtomIoUNet", "(", "pred_input_dim", "=", "iou_input_dim", ",", "pred_inter_dim", "=", "iou_inter_dim", ")", "\n", "\n", "# DiMP network", "\n", "net", "=", "DiMPnet", "(", "feature_extractor", "=", "backbone_net", ",", "classifier", "=", "classifier", ",", "bb_regressor", "=", "bb_regressor", ",", "\n", "classification_layer", "=", "classification_layer", ",", "bb_regressor_layer", "=", "[", "'layer2'", ",", "'layer3'", "]", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.tracking.dimpnet.dimpnet50": [[148, 192], ["float", "ltr.resnet50", "math.sqrt", "ltr.residual_bottleneck", "ltr.FilterInitializerLinear", "ltr.DiMPSteepestDescentGN", "ltr.LinearFilter", "ltr.AtomIoUNet", "dimpnet.DiMPnet"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.resnet50", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.target_classifier.features.residual_bottleneck"], ["", "@", "model_constructor", "\n", "def", "dimpnet50", "(", "filter_size", "=", "1", ",", "optim_iter", "=", "5", ",", "optim_init_step", "=", "1.0", ",", "optim_init_reg", "=", "0.01", ",", "\n", "classification_layer", "=", "'layer3'", ",", "feat_stride", "=", "16", ",", "backbone_pretrained", "=", "True", ",", "clf_feat_blocks", "=", "0", ",", "\n", "clf_feat_norm", "=", "True", ",", "init_filter_norm", "=", "False", ",", "final_conv", "=", "True", ",", "\n", "out_feature_dim", "=", "512", ",", "init_gauss_sigma", "=", "1.0", ",", "num_dist_bins", "=", "5", ",", "bin_displacement", "=", "1.0", ",", "\n", "mask_init_factor", "=", "4.0", ",", "iou_input_dim", "=", "(", "256", ",", "256", ")", ",", "iou_inter_dim", "=", "(", "256", ",", "256", ")", ",", "\n", "score_act", "=", "'relu'", ",", "act_param", "=", "None", ",", "target_mask_act", "=", "'sigmoid'", ",", "\n", "detach_length", "=", "float", "(", "'Inf'", ")", ")", ":", "\n", "# Backbone", "\n", "    ", "backbone_net", "=", "backbones", ".", "resnet50", "(", "pretrained", "=", "backbone_pretrained", ")", "\n", "\n", "# Feature normalization", "\n", "norm_scale", "=", "math", ".", "sqrt", "(", "1.0", "/", "(", "out_feature_dim", "*", "filter_size", "*", "filter_size", ")", ")", "\n", "\n", "# Classifier features", "\n", "clf_feature_extractor", "=", "clf_features", ".", "residual_bottleneck", "(", "num_blocks", "=", "clf_feat_blocks", ",", "l2norm", "=", "clf_feat_norm", ",", "\n", "final_conv", "=", "final_conv", ",", "norm_scale", "=", "norm_scale", ",", "\n", "out_dim", "=", "out_feature_dim", ")", "\n", "\n", "# Initializer for the DiMP classifier", "\n", "initializer", "=", "clf_initializer", ".", "FilterInitializerLinear", "(", "filter_size", "=", "filter_size", ",", "filter_norm", "=", "init_filter_norm", ",", "\n", "feature_dim", "=", "out_feature_dim", ")", "\n", "\n", "# Optimizer for the DiMP classifier", "\n", "optimizer", "=", "clf_optimizer", ".", "DiMPSteepestDescentGN", "(", "num_iter", "=", "optim_iter", ",", "feat_stride", "=", "feat_stride", ",", "\n", "init_step_length", "=", "optim_init_step", ",", "\n", "init_filter_reg", "=", "optim_init_reg", ",", "init_gauss_sigma", "=", "init_gauss_sigma", ",", "\n", "num_dist_bins", "=", "num_dist_bins", ",", "\n", "bin_displacement", "=", "bin_displacement", ",", "\n", "mask_init_factor", "=", "mask_init_factor", ",", "\n", "score_act", "=", "score_act", ",", "act_param", "=", "act_param", ",", "mask_act", "=", "target_mask_act", ",", "\n", "detach_length", "=", "detach_length", ")", "\n", "\n", "# The classifier module", "\n", "classifier", "=", "target_clf", ".", "LinearFilter", "(", "filter_size", "=", "filter_size", ",", "filter_initializer", "=", "initializer", ",", "\n", "filter_optimizer", "=", "optimizer", ",", "feature_extractor", "=", "clf_feature_extractor", ")", "\n", "\n", "# Bounding box regressor", "\n", "bb_regressor", "=", "bbmodels", ".", "AtomIoUNet", "(", "input_dim", "=", "(", "4", "*", "128", ",", "4", "*", "256", ")", ",", "pred_input_dim", "=", "iou_input_dim", ",", "pred_inter_dim", "=", "iou_inter_dim", ")", "\n", "\n", "# DiMP network", "\n", "net", "=", "DiMPnet", "(", "feature_extractor", "=", "backbone_net", ",", "classifier", "=", "classifier", ",", "bb_regressor", "=", "bb_regressor", ",", "\n", "classification_layer", "=", "classification_layer", ",", "bb_regressor_layer", "=", "[", "'layer2'", ",", "'layer3'", "]", ")", "\n", "return", "net", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.BasicBlock.__init__": [[17, 26], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.conv3x3", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.BasicBlock.forward": [[27, 44], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.Bottleneck.__init__": [[49, 61], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.Bottleneck.forward": [[62, 83], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.ResNet.__init__": [[87, 112], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "max", "max", "max", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._make_layer", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._make_layer", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._make_layer", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "output_layers", ",", "num_classes", "=", "1000", ",", "inplanes", "=", "64", ",", "dilation_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "inplanes", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_layers", "=", "output_layers", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "stride", "=", "[", "1", "+", "(", "dilation_factor", "<", "l", ")", "for", "l", "in", "(", "8", ",", "4", ",", "2", ")", "]", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "inplanes", ",", "layers", "[", "0", "]", ",", "dilation", "=", "max", "(", "dilation_factor", "//", "8", ",", "1", ")", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "inplanes", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "stride", "[", "0", "]", ",", "dilation", "=", "max", "(", "dilation_factor", "//", "4", ",", "1", ")", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "inplanes", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "stride", "[", "1", "]", ",", "dilation", "=", "max", "(", "dilation_factor", "//", "2", ",", "1", ")", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "inplanes", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "stride", "[", "2", "]", ",", "dilation", "=", "dilation_factor", ")", "\n", "# self.avgpool = nn.AvgPool2d(7, stride=1)", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "inplanes", "*", "8", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.ResNet._make_layer": [[113, 129], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "dilation", "=", "dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.ResNet._add_output_and_check": [[130, 134], ["len", "len"], "methods", ["None"], ["", "def", "_add_output_and_check", "(", "self", ",", "name", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "        ", "if", "name", "in", "output_layers", ":", "\n", "            ", "outputs", "[", "name", "]", "=", "x", "\n", "", "return", "len", "(", "output_layers", ")", "==", "len", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.ResNet.forward": [[135, 182], ["collections.OrderedDict", "resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet._add_output_and_check", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet._add_output_and_check", "resnet.ResNet.layer2", "resnet.ResNet._add_output_and_check", "resnet.ResNet.layer3", "resnet.ResNet._add_output_and_check", "resnet.ResNet.layer4", "resnet.ResNet._add_output_and_check", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet._add_output_and_check", "ValueError", "resnet.ResNet.size", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "output_layers", "=", "None", ")", ":", "\n", "        ", "\"\"\" Forward pass with input x. The output_layers specify the feature blocks which must be returned \"\"\"", "\n", "outputs", "=", "OrderedDict", "(", ")", "\n", "\n", "if", "output_layers", "is", "None", ":", "\n", "            ", "output_layers", "=", "self", ".", "output_layers", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "if", "self", ".", "_add_output_and_check", "(", "'conv1'", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "            ", "return", "outputs", "\n", "\n", "", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "if", "self", ".", "_add_output_and_check", "(", "'layer1'", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "            ", "return", "outputs", "\n", "\n", "", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "if", "self", ".", "_add_output_and_check", "(", "'layer2'", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "            ", "return", "outputs", "\n", "\n", "", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "if", "self", ".", "_add_output_and_check", "(", "'layer3'", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "            ", "return", "outputs", "\n", "\n", "", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "if", "self", ".", "_add_output_and_check", "(", "'layer4'", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "            ", "return", "outputs", "\n", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "if", "self", ".", "_add_output_and_check", "(", "'fc'", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "            ", "return", "outputs", "\n", "\n", "", "if", "len", "(", "output_layers", ")", "==", "1", "and", "output_layers", "[", "0", "]", "==", "'default'", ":", "\n", "            ", "return", "x", "\n", "\n", "", "raise", "ValueError", "(", "'output_layer is wrong.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.conv3x3": [[8, 12], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.resnet18": [[184, 200], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url", "ValueError"], "function", ["None"], ["", "", "def", "resnet18", "(", "output_layers", "=", "None", ",", "pretrained", "=", "False", ",", "dilation_factor", "=", "1", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "\n", "if", "output_layers", "is", "None", ":", "\n", "        ", "output_layers", "=", "[", "'default'", "]", "\n", "", "else", ":", "\n", "        ", "for", "l", "in", "output_layers", ":", "\n", "            ", "if", "l", "not", "in", "[", "'conv1'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", ",", "'layer4'", ",", "'fc'", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown layer: {}'", ".", "format", "(", "l", ")", ")", "\n", "\n", "", "", "", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "output_layers", ",", "dilation_factor", "=", "dilation_factor", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet.resnet50": [[202, 217], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url", "ValueError"], "function", ["None"], ["", "def", "resnet50", "(", "output_layers", "=", "None", ",", "pretrained", "=", "False", ",", "dilation_factor", "=", "1", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "\n", "if", "output_layers", "is", "None", ":", "\n", "        ", "output_layers", "=", "[", "'default'", "]", "\n", "", "else", ":", "\n", "        ", "for", "l", "in", "output_layers", ":", "\n", "            ", "if", "l", "not", "in", "[", "'conv1'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", ",", "'layer4'", ",", "'fc'", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown layer: {}'", ".", "format", "(", "l", ")", ")", "\n", "\n", "", "", "", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "output_layers", ",", "dilation_factor", "=", "dilation_factor", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.SpatialCrossMapLRN.__init__": [[9, 23], ["torch.Module.__init__", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool2d", "torch.AvgPool2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "local_size", "=", "1", ",", "alpha", "=", "1.0", ",", "beta", "=", "0.75", ",", "k", "=", "1", ",", "ACROSS_CHANNELS", "=", "True", ")", ":", "\n", "        ", "super", "(", "SpatialCrossMapLRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ACROSS_CHANNELS", "=", "ACROSS_CHANNELS", "\n", "if", "ACROSS_CHANNELS", ":", "\n", "            ", "self", ".", "average", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "(", "local_size", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "int", "(", "(", "local_size", "-", "1.0", ")", "/", "2", ")", ",", "0", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "average", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "local_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "int", "(", "(", "local_size", "-", "1.0", ")", "/", "2", ")", ")", "\n", "", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.SpatialCrossMapLRN.forward": [[24, 35], ["x.div.div.div", "x.div.div.pow().unsqueeze", "resnet18_vggm.SpatialCrossMapLRN.average().squeeze", "div.mul().add().pow.mul().add().pow.mul().add().pow", "x.div.div.pow", "resnet18_vggm.SpatialCrossMapLRN.average", "div.mul().add().pow.mul().add().pow.mul().add().pow", "x.div.div.pow", "resnet18_vggm.SpatialCrossMapLRN.average", "div.mul().add().pow.mul().add().pow.mul().add", "div.mul().add().pow.mul().add().pow.mul().add", "div.mul().add().pow.mul().add().pow.mul", "div.mul().add().pow.mul().add().pow.mul"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.div"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "ACROSS_CHANNELS", ":", "\n", "            ", "div", "=", "x", ".", "pow", "(", "2", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div", "=", "self", ".", "average", "(", "div", ")", ".", "squeeze", "(", "1", ")", "\n", "div", "=", "div", ".", "mul", "(", "self", ".", "alpha", ")", ".", "add", "(", "self", ".", "k", ")", ".", "pow", "(", "self", ".", "beta", ")", "\n", "", "else", ":", "\n", "            ", "div", "=", "x", ".", "pow", "(", "2", ")", "\n", "div", "=", "self", ".", "average", "(", "div", ")", "\n", "div", "=", "div", ".", "mul", "(", "self", ".", "alpha", ")", ".", "add", "(", "self", ".", "k", ")", ".", "pow", "(", "self", ".", "beta", ")", "\n", "", "x", "=", "x", ".", "div", "(", "div", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1.__init__": [[39, 65], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "resnet18_vggm.SpatialCrossMapLRN", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet18_vggm.ResNetVGGm1._make_layer", "resnet18_vggm.ResNetVGGm1._make_layer", "resnet18_vggm.ResNetVGGm1._make_layer", "resnet18_vggm.ResNetVGGm1._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet18_vggm.ResNetVGGm1.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._make_layer", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._make_layer", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._make_layer", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "output_layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetVGGm1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_layers", "=", "output_layers", "\n", "self", ".", "vggmconv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "96", ",", "(", "7", ",", "7", ")", ",", "(", "2", ",", "2", ")", ",", "padding", "=", "3", ")", "\n", "self", ".", "vgglrn", "=", "SpatialCrossMapLRN", "(", "5", ",", "0.0005", ",", "0.75", ",", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "# self.avgpool = nn.AvgPool2d(7, stride=1)", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._make_layer": [[66, 82], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check": [[84, 88], ["len", "len"], "methods", ["None"], ["", "def", "_add_output_and_check", "(", "self", ",", "name", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "        ", "if", "name", "in", "output_layers", ":", "\n", "            ", "outputs", "[", "name", "]", "=", "x", "\n", "", "return", "len", "(", "output_layers", ")", "==", "len", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1.forward": [[90, 141], ["collections.OrderedDict", "resnet18_vggm.ResNetVGGm1.conv1", "resnet18_vggm.ResNetVGGm1.bn1", "resnet18_vggm.ResNetVGGm1.relu", "resnet18_vggm.ResNetVGGm1._add_output_and_check", "resnet18_vggm.ResNetVGGm1.maxpool", "resnet18_vggm.ResNetVGGm1.layer1", "resnet18_vggm.ResNetVGGm1._add_output_and_check", "resnet18_vggm.ResNetVGGm1.layer2", "resnet18_vggm.ResNetVGGm1._add_output_and_check", "resnet18_vggm.ResNetVGGm1.layer3", "resnet18_vggm.ResNetVGGm1._add_output_and_check", "resnet18_vggm.ResNetVGGm1.layer4", "resnet18_vggm.ResNetVGGm1._add_output_and_check", "resnet18_vggm.ResNetVGGm1.avgpool", "resnet18_vggm.ResNetVGGm1.view", "resnet18_vggm.ResNetVGGm1.fc", "resnet18_vggm.ResNetVGGm1._add_output_and_check", "ValueError", "resnet18_vggm.ResNetVGGm1.vgglrn", "resnet18_vggm.ResNetVGGm1._add_output_and_check", "resnet18_vggm.ResNetVGGm1.size", "resnet18_vggm.ResNetVGGm1.relu", "len", "resnet18_vggm.ResNetVGGm1.vggmconv1"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.ResNetVGGm1._add_output_and_check", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "output_layers", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "OrderedDict", "(", ")", "\n", "\n", "if", "output_layers", "is", "None", ":", "\n", "            ", "output_layers", "=", "self", ".", "output_layers", "\n", "\n", "", "if", "'vggconv1'", "in", "output_layers", ":", "\n", "            ", "c1", "=", "self", ".", "vgglrn", "(", "self", ".", "relu", "(", "self", ".", "vggmconv1", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "_add_output_and_check", "(", "'vggconv1'", ",", "c1", ",", "outputs", ",", "output_layers", ")", ":", "\n", "                ", "return", "outputs", "\n", "\n", "", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "if", "self", ".", "_add_output_and_check", "(", "'conv1'", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "            ", "return", "outputs", "\n", "\n", "", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "if", "self", ".", "_add_output_and_check", "(", "'layer1'", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "            ", "return", "outputs", "\n", "\n", "", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "if", "self", ".", "_add_output_and_check", "(", "'layer2'", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "            ", "return", "outputs", "\n", "\n", "", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "if", "self", ".", "_add_output_and_check", "(", "'layer3'", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "            ", "return", "outputs", "\n", "\n", "", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "if", "self", ".", "_add_output_and_check", "(", "'layer4'", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "            ", "return", "outputs", "\n", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "if", "self", ".", "_add_output_and_check", "(", "'fc'", ",", "x", ",", "outputs", ",", "output_layers", ")", ":", "\n", "            ", "return", "outputs", "\n", "\n", "", "if", "len", "(", "output_layers", ")", "==", "1", "and", "output_layers", "[", "0", "]", "==", "'default'", ":", "\n", "            ", "return", "x", "\n", "\n", "", "raise", "ValueError", "(", "'output_layer is wrong.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.backbone.resnet18_vggm.resnet18_vggmconv1": [[143, 159], ["resnet18_vggm.ResNetVGGm1", "ResNetVGGm1.load_state_dict", "torch.load", "torch.load", "ValueError"], "function", ["None"], ["", "", "def", "resnet18_vggmconv1", "(", "output_layers", "=", "None", ",", "path", "=", "None", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model with first-layer VGGm features.\n    \"\"\"", "\n", "\n", "if", "output_layers", "is", "None", ":", "\n", "        ", "output_layers", "=", "[", "'default'", "]", "\n", "", "else", ":", "\n", "        ", "for", "l", "in", "output_layers", ":", "\n", "            ", "if", "l", "not", "in", "[", "'vggconv1'", ",", "'conv1'", ",", "'layer1'", ",", "'layer2'", ",", "'layer3'", ",", "'layer4'", ",", "'fc'", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown layer: {}'", ".", "format", "(", "l", ")", ")", "\n", "\n", "", "", "", "model", "=", "ResNetVGGm1", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "output_layers", ")", "\n", "\n", "if", "path", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.loss.target_classification.LBHinge.__init__": [[15, 20], ["torch.MSELoss", "torch.MSELoss", "torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "error_metric", "=", "nn", ".", "MSELoss", "(", ")", ",", "threshold", "=", "None", ",", "clip", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "error_metric", "=", "error_metric", "\n", "self", ".", "threshold", "=", "threshold", "if", "threshold", "is", "not", "None", "else", "-", "100", "\n", "self", ".", "clip", "=", "clip", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.loss.target_classification.LBHinge.forward": [[21, 32], ["target_classification.LBHinge.error_metric", "torch.min", "torch.min", "torch.min", "torch.min", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "prediction", ",", "label", ",", "target_bb", "=", "None", ")", ":", "\n", "        ", "negative_mask", "=", "(", "label", "<", "self", ".", "threshold", ")", ".", "float", "(", ")", "\n", "positive_mask", "=", "(", "1.0", "-", "negative_mask", ")", "\n", "\n", "prediction", "=", "negative_mask", "*", "F", ".", "relu", "(", "prediction", ")", "+", "positive_mask", "*", "prediction", "\n", "\n", "loss", "=", "self", ".", "error_metric", "(", "prediction", ",", "positive_mask", "*", "label", ")", "\n", "\n", "if", "self", ".", "clip", "is", "not", "None", ":", "\n", "            ", "loss", "=", "torch", ".", "min", "(", "loss", ",", "torch", ".", "tensor", "(", "[", "self", ".", "clip", "]", ",", "device", "=", "loss", ".", "device", ")", ")", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.tracking.DiMPActor.__init__": [[6, 11], ["BaseActor.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "net", ",", "objective", ",", "loss_weight", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "net", ",", "objective", ")", "\n", "if", "loss_weight", "is", "None", ":", "\n", "            ", "loss_weight", "=", "{", "'iou'", ":", "1.0", ",", "'test_clf'", ":", "1.0", "}", "\n", "", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.tracking.DiMPActor.__call__": [[12, 70], ["tracking.DiMPActor.net", "clf_loss_test.item", "tracking.DiMPActor.loss_weight.keys", "tracking.DiMPActor.loss_weight.keys", "isinstance", "loss.item", "loss_iou.item", "loss_target_classifier.item", "tracking.DiMPActor.loss_weight.keys", "loss_test_init_clf.item", "tracking.DiMPActor.loss_weight.keys", "sum.item", "len", "clf_losses_test[].item", "sum", "len", "sum", "sum().item", "len", "zip", "len", "sum"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            data - The input data, should contain the fields 'train_images', 'test_images', 'train_anno',\n                    'test_proposals', 'proposal_iou' and 'test_label'.\n\n        returns:\n            loss    - the training loss\n            stats  -  dict containing detailed losses\n        \"\"\"", "\n", "# Run network", "\n", "target_scores", ",", "iou_pred", "=", "self", ".", "net", "(", "train_imgs", "=", "data", "[", "'train_images'", "]", ",", "\n", "test_imgs", "=", "data", "[", "'test_images'", "]", ",", "\n", "train_bb", "=", "data", "[", "'train_anno'", "]", ",", "\n", "test_proposals", "=", "data", "[", "'test_proposals'", "]", ")", "\n", "\n", "# Classification losses for the different optimization iterations", "\n", "clf_losses_test", "=", "[", "self", ".", "objective", "[", "'test_clf'", "]", "(", "s", ",", "data", "[", "'test_label'", "]", ",", "data", "[", "'test_anno'", "]", ")", "for", "s", "in", "target_scores", "]", "\n", "\n", "# Loss of the final filter", "\n", "clf_loss_test", "=", "clf_losses_test", "[", "-", "1", "]", "\n", "loss_target_classifier", "=", "self", ".", "loss_weight", "[", "'test_clf'", "]", "*", "clf_loss_test", "\n", "\n", "# Compute loss for ATOM IoUNet", "\n", "loss_iou", "=", "self", ".", "loss_weight", "[", "'iou'", "]", "*", "self", ".", "objective", "[", "'iou'", "]", "(", "iou_pred", ",", "data", "[", "'proposal_iou'", "]", ")", "\n", "\n", "# Loss for the initial filter iteration", "\n", "loss_test_init_clf", "=", "0", "\n", "if", "'test_init_clf'", "in", "self", ".", "loss_weight", ".", "keys", "(", ")", ":", "\n", "            ", "loss_test_init_clf", "=", "self", ".", "loss_weight", "[", "'test_init_clf'", "]", "*", "clf_losses_test", "[", "0", "]", "\n", "\n", "# Loss for the intermediate filter iterations", "\n", "", "loss_test_iter_clf", "=", "0", "\n", "if", "'test_iter_clf'", "in", "self", ".", "loss_weight", ".", "keys", "(", ")", ":", "\n", "            ", "test_iter_weights", "=", "self", ".", "loss_weight", "[", "'test_iter_clf'", "]", "\n", "if", "isinstance", "(", "test_iter_weights", ",", "list", ")", ":", "\n", "                ", "loss_test_iter_clf", "=", "sum", "(", "[", "a", "*", "b", "for", "a", ",", "b", "in", "zip", "(", "test_iter_weights", ",", "clf_losses_test", "[", "1", ":", "-", "1", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "loss_test_iter_clf", "=", "(", "test_iter_weights", "/", "(", "len", "(", "clf_losses_test", ")", "-", "2", ")", ")", "*", "sum", "(", "clf_losses_test", "[", "1", ":", "-", "1", "]", ")", "\n", "\n", "# Total loss", "\n", "", "", "loss", "=", "loss_iou", "+", "loss_target_classifier", "+", "loss_test_init_clf", "+", "loss_test_iter_clf", "\n", "\n", "# Log stats", "\n", "stats", "=", "{", "'Loss/total'", ":", "loss", ".", "item", "(", ")", ",", "\n", "'Loss/iou'", ":", "loss_iou", ".", "item", "(", ")", ",", "\n", "'Loss/target_clf'", ":", "loss_target_classifier", ".", "item", "(", ")", "}", "\n", "if", "'test_init_clf'", "in", "self", ".", "loss_weight", ".", "keys", "(", ")", ":", "\n", "            ", "stats", "[", "'Loss/test_init_clf'", "]", "=", "loss_test_init_clf", ".", "item", "(", ")", "\n", "", "if", "'test_iter_clf'", "in", "self", ".", "loss_weight", ".", "keys", "(", ")", ":", "\n", "            ", "stats", "[", "'Loss/test_iter_clf'", "]", "=", "loss_test_iter_clf", ".", "item", "(", ")", "\n", "", "stats", "[", "'ClfTrain/test_loss'", "]", "=", "clf_loss_test", ".", "item", "(", ")", "\n", "if", "len", "(", "clf_losses_test", ")", ">", "0", ":", "\n", "            ", "stats", "[", "'ClfTrain/test_init_loss'", "]", "=", "clf_losses_test", "[", "0", "]", ".", "item", "(", ")", "\n", "if", "len", "(", "clf_losses_test", ")", ">", "2", ":", "\n", "                ", "stats", "[", "'ClfTrain/test_iter_loss'", "]", "=", "sum", "(", "clf_losses_test", "[", "1", ":", "-", "1", "]", ")", ".", "item", "(", ")", "/", "(", "len", "(", "clf_losses_test", ")", "-", "2", ")", "\n", "\n", "", "", "return", "loss", ",", "stats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.bbreg.AtomActor.__call__": [[6, 30], ["bbreg.AtomActor.net", "iou_pred.view.view.view", "data[].view", "bbreg.AtomActor.objective", "bbreg.AtomActor.item", "bbreg.AtomActor.item"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            data - The input data, should contain the fields 'train_images', 'test_images', 'train_anno',\n                    'test_proposals' and 'proposal_iou'.\n\n        returns:\n            loss    - the training loss\n            states  -  dict containing detailed losses\n        \"\"\"", "\n", "# Run network to obtain IoU prediction for each proposal in 'test_proposals'", "\n", "iou_pred", "=", "self", ".", "net", "(", "data", "[", "'train_images'", "]", ",", "data", "[", "'test_images'", "]", ",", "data", "[", "'train_anno'", "]", ",", "data", "[", "'test_proposals'", "]", ")", "\n", "\n", "iou_pred", "=", "iou_pred", ".", "view", "(", "-", "1", ",", "iou_pred", ".", "shape", "[", "2", "]", ")", "\n", "iou_gt", "=", "data", "[", "'proposal_iou'", "]", ".", "view", "(", "-", "1", ",", "data", "[", "'proposal_iou'", "]", ".", "shape", "[", "2", "]", ")", "\n", "\n", "# Compute loss", "\n", "loss", "=", "self", ".", "objective", "(", "iou_pred", ",", "iou_gt", ")", "\n", "\n", "# Return training stats", "\n", "stats", "=", "{", "'Loss/total'", ":", "loss", ".", "item", "(", ")", ",", "\n", "'Loss/iou'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n", "return", "loss", ",", "stats", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.__init__": [[7, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "net", ",", "objective", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            net - The network to train\n            objective - The loss function\n        \"\"\"", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "objective", "=", "objective", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.__call__": [[16, 27], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ":", "TensorDict", ")", ":", "\n", "        ", "\"\"\" Called in each training iteration. Should pass in input data through the network, calculate the loss, and\n        return the training stats for the input data\n        args:\n            data - A TensorDict containing all the necessary data blocks.\n\n        returns:\n            loss    - loss for the input data\n            stats   - a dict containing detailed losses\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to": [[28, 34], ["base_actor.BaseActor.net.to"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\" Move the network to device\n        args:\n            device - device to use. 'cpu' or 'cuda'\n        \"\"\"", "\n", "self", ".", "net", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.train": [[35, 41], ["base_actor.BaseActor.net.train"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\" Set whether the network is in train mode.\n        args:\n            mode (True) - Bool specifying whether in training mode.\n        \"\"\"", "\n", "self", ".", "net", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.eval": [[42, 45], ["base_actor.BaseActor.train"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\" Set network to eval mode\"\"\"", "\n", "self", ".", "train", "(", "False", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.Transform.__call__": [[11, 21], ["transforms.Transform.roll", "transforms.Transform.transform", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.RandomHorizontalFlip.roll", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.Blur.transform"], ["def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "rand_params", "=", "self", ".", "roll", "(", ")", "\n", "if", "rand_params", "is", "None", ":", "\n", "            ", "rand_params", "=", "(", ")", "\n", "", "elif", "not", "isinstance", "(", "rand_params", ",", "tuple", ")", ":", "\n", "            ", "rand_params", "=", "(", "rand_params", ",", ")", "\n", "", "output", "=", "[", "self", ".", "transform", "(", "img", ",", "*", "rand_params", ")", "for", "img", "in", "args", "]", "\n", "if", "len", "(", "output", ")", "==", "1", ":", "\n", "            ", "return", "output", "[", "0", "]", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.Transform.roll": [[22, 24], ["None"], "methods", ["None"], ["", "def", "roll", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.Transform.transform": [[25, 28], ["None"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"Must be deterministic\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.Compose.__init__": [[37, 39], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.Compose.__call__": [[40, 46], ["t", "isinstance"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "if", "not", "isinstance", "(", "args", ",", "tuple", ")", ":", "\n", "                ", "args", "=", "(", "args", ",", ")", "\n", "", "args", "=", "t", "(", "*", "args", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.Compose.__repr__": [[47, 54], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "'\\n'", "\n", "format_string", "+=", "'    {0}'", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "'\\n)'", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.ToTensorAndJitter.__init__": [[58, 60], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "brightness_jitter", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "brightness_jitter", "=", "brightness_jitter", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.ToTensorAndJitter.roll": [[61, 63], ["numpy.random.uniform", "max"], "methods", ["None"], ["", "def", "roll", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "self", ".", "brightness_jitter", ")", ",", "1", "+", "self", ".", "brightness_jitter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.ToTensorAndJitter.transform": [[64, 70], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.float().mul().clamp", "torch.from_numpy.float().mul().clamp", "torch.from_numpy.transpose", "torch.from_numpy.transpose", "torch.from_numpy.float().mul", "torch.from_numpy.float().mul", "torch.from_numpy.float", "torch.from_numpy.float"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "brightness_factor", ")", ":", "\n", "# handle numpy array", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "\n", "# backward compatibility", "\n", "return", "img", ".", "float", "(", ")", ".", "mul", "(", "brightness_factor", "/", "255.0", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.ToGrayscale.__init__": [[74, 77], ["numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "color_weights", "=", "np", ".", "array", "(", "[", "0.2989", ",", "0.5870", ",", "0.1140", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.ToGrayscale.roll": [[78, 80], ["random.random"], "methods", ["None"], ["", "def", "roll", "(", "self", ")", ":", "\n", "        ", "return", "random", ".", "random", "(", ")", "<", "self", ".", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.ToGrayscale.transform": [[81, 89], ["isinstance", "cv2.cvtColor", "numpy.stack", "NotImplementedError"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "do_grayscale", ")", ":", "\n", "        ", "if", "do_grayscale", ":", "\n", "            ", "if", "isinstance", "(", "img", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Implement torch variant.'", ")", "\n", "", "img_gray", "=", "cv", ".", "cvtColor", "(", "img", ",", "cv", ".", "COLOR_RGB2GRAY", ")", "\n", "return", "np", ".", "stack", "(", "[", "img_gray", ",", "img_gray", ",", "img_gray", "]", ",", "axis", "=", "2", ")", "\n", "# return np.repeat(np.sum(img * self.color_weights, axis=2, keepdims=True).astype(np.uint8), 3, axis=2)", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.RandomHorizontalFlip.__init__": [[93, 95], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.RandomHorizontalFlip.roll": [[96, 98], ["random.random"], "methods", ["None"], ["", "def", "roll", "(", "self", ")", ":", "\n", "        ", "return", "random", ".", "random", "(", ")", "<", "self", ".", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.RandomHorizontalFlip.transform": [[99, 105], ["isinstance", "numpy.fliplr().copy", "img.flip", "numpy.fliplr"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy"], ["", "def", "transform", "(", "self", ",", "img", ",", "do_flip", ")", ":", "\n", "        ", "if", "do_flip", ":", "\n", "            ", "if", "isinstance", "(", "img", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "return", "img", ".", "flip", "(", "(", "2", ",", ")", ")", "\n", "", "return", "np", ".", "fliplr", "(", "img", ")", ".", "copy", "(", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.Blur.__init__": [[109, 118], ["isinstance", "math.ceil", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "transforms.Blur.filter[].view", "transforms.Blur.filter[].sum", "transforms.Blur.filter[].view", "transforms.Blur.filter[].sum", "zip"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", ")", ":", "\n", "        ", "if", "isinstance", "(", "sigma", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "sigma", "=", "(", "sigma", ",", "sigma", ")", "\n", "", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "filter_size", "=", "[", "math", ".", "ceil", "(", "2", "*", "s", ")", "for", "s", "in", "self", ".", "sigma", "]", "\n", "x_coord", "=", "[", "torch", ".", "arange", "(", "-", "sz", ",", "sz", "+", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "for", "sz", "in", "self", ".", "filter_size", "]", "\n", "self", ".", "filter", "=", "[", "torch", ".", "exp", "(", "-", "(", "x", "**", "2", ")", "/", "(", "2", "*", "s", "**", "2", ")", ")", "for", "x", ",", "s", "in", "zip", "(", "x_coord", ",", "self", ".", "sigma", ")", "]", "\n", "self", ".", "filter", "[", "0", "]", "=", "self", ".", "filter", "[", "0", "]", ".", "view", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", "/", "self", ".", "filter", "[", "0", "]", ".", "sum", "(", ")", "\n", "self", ".", "filter", "[", "1", "]", "=", "self", ".", "filter", "[", "1", "]", ".", "view", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", "/", "self", ".", "filter", "[", "1", "]", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.transforms.Blur.transform": [[119, 126], ["isinstance", "torch.conv2d", "torch.conv2d", "torch.conv2d().view", "torch.conv2d().view", "img.view", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.operation.conv2d"], ["", "def", "transform", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "isinstance", "(", "img", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "sz", "=", "img", ".", "shape", "[", "2", ":", "]", "\n", "im1", "=", "F", ".", "conv2d", "(", "img", ".", "view", "(", "-", "1", ",", "1", ",", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", ")", ",", "self", ".", "filter", "[", "0", "]", ",", "padding", "=", "(", "self", ".", "filter_size", "[", "0", "]", ",", "0", ")", ")", "\n", "return", "F", ".", "conv2d", "(", "im1", ",", "self", ".", "filter", "[", "1", "]", ",", "padding", "=", "(", "0", ",", "self", ".", "filter_size", "[", "1", "]", ")", ")", ".", "view", "(", "-", "1", ",", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.BaseProcessing.__init__": [[11, 26], ["torchvision.ToTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ",", "train_transform", "=", "None", ",", "test_transform", "=", "None", ",", "joint_transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            transform       - The set of transformations to be applied on the images. Used only if train_transform or\n                                test_transform is None.\n            train_transform - The set of transformations to be applied on the train images. If None, the 'transform'\n                                argument is used instead.\n            test_transform  - The set of transformations to be applied on the test images. If None, the 'transform'\n                                argument is used instead.\n            joint_transform - The set of transformations to be applied 'jointly' on the train and test images.  For\n                                example, it can be used to convert both test and train images to grayscale.\n        \"\"\"", "\n", "self", ".", "transform", "=", "{", "'train'", ":", "transform", "if", "train_transform", "is", "None", "else", "train_transform", ",", "\n", "'test'", ":", "transform", "if", "test_transform", "is", "None", "else", "test_transform", ",", "\n", "'joint'", ":", "joint_transform", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.BaseProcessing.__call__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ":", "TensorDict", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.ATOMProcessing.__init__": [[40, 61], ["processing.BaseProcessing.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "search_area_factor", ",", "output_sz", ",", "center_jitter_factor", ",", "scale_jitter_factor", ",", "proposal_params", ",", "\n", "mode", "=", "'pair'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            search_area_factor - The size of the search region  relative to the target size.\n            output_sz - An integer, denoting the size to which the search region is resized. The search region is always\n                        square.\n            center_jitter_factor - A dict containing the amount of jittering to be applied to the target center before\n                                    extracting the search region. See _get_jittered_box for how the jittering is done.\n            scale_jitter_factor - A dict containing the amount of jittering to be applied to the target size before\n                                    extracting the search region. See _get_jittered_box for how the jittering is done.\n            proposal_params - Arguments for the proposal generation process. See _generate_proposals for details.\n            mode - Either 'pair' or 'sequence'. If mode='sequence', then output has an extra dimension for frames\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "search_area_factor", "=", "search_area_factor", "\n", "self", ".", "output_sz", "=", "output_sz", "\n", "self", ".", "center_jitter_factor", "=", "center_jitter_factor", "\n", "self", ".", "scale_jitter_factor", "=", "scale_jitter_factor", "\n", "self", ".", "proposal_params", "=", "proposal_params", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.ATOMProcessing._get_jittered_box": [[62, 77], ["torch.cat", "torch.exp", "torch.randn", "jittered_size.prod().sqrt", "torch.rand", "jittered_size.prod"], "methods", ["None"], ["", "def", "_get_jittered_box", "(", "self", ",", "box", ",", "mode", ")", ":", "\n", "        ", "\"\"\" Jitter the input box\n        args:\n            box - input bounding box\n            mode - string 'train' or 'test' indicating train or test data\n\n        returns:\n            torch.Tensor - jittered box\n        \"\"\"", "\n", "\n", "jittered_size", "=", "box", "[", "2", ":", "4", "]", "*", "torch", ".", "exp", "(", "torch", ".", "randn", "(", "2", ")", "*", "self", ".", "scale_jitter_factor", "[", "mode", "]", ")", "\n", "max_offset", "=", "(", "jittered_size", ".", "prod", "(", ")", ".", "sqrt", "(", ")", "*", "self", ".", "center_jitter_factor", "[", "mode", "]", ")", ".", "item", "(", ")", "\n", "jittered_center", "=", "box", "[", "0", ":", "2", "]", "+", "0.5", "*", "box", "[", "2", ":", "4", "]", "+", "max_offset", "*", "(", "torch", ".", "rand", "(", "2", ")", "-", "0.5", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "jittered_center", "-", "0.5", "*", "jittered_size", ",", "jittered_size", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.ATOMProcessing._generate_proposals": [[78, 101], ["torch.zeros", "torch.zeros", "range", "ltr.perturb_box"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.perturb_box"], ["", "def", "_generate_proposals", "(", "self", ",", "box", ")", ":", "\n", "        ", "\"\"\" Generates proposals by adding noise to the input box\n        args:\n            box - input box\n\n        returns:\n            torch.Tensor - Array of shape (num_proposals, 4) containing proposals\n            torch.Tensor - Array of shape (num_proposals,) containing IoU overlap of each proposal with the input box. The\n                        IoU is mapped to [-1, 1]\n        \"\"\"", "\n", "# Generate proposals", "\n", "num_proposals", "=", "self", ".", "proposal_params", "[", "'boxes_per_frame'", "]", "\n", "proposals", "=", "torch", ".", "zeros", "(", "(", "num_proposals", ",", "4", ")", ")", "\n", "gt_iou", "=", "torch", ".", "zeros", "(", "num_proposals", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_proposals", ")", ":", "\n", "            ", "proposals", "[", "i", ",", ":", "]", ",", "gt_iou", "[", "i", "]", "=", "prutils", ".", "perturb_box", "(", "box", ",", "min_iou", "=", "self", ".", "proposal_params", "[", "'min_iou'", "]", ",", "\n", "sigma_factor", "=", "self", ".", "proposal_params", "[", "'sigma_factor'", "]", "\n", ")", "\n", "\n", "# Map to [-1, 1]", "\n", "", "gt_iou", "=", "gt_iou", "*", "2", "-", "1", "\n", "return", "proposals", ",", "gt_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.ATOMProcessing.__call__": [[102, 157], ["zip", "list", "list", "len", "ltr.jittered_center_crop", "data.apply.apply.apply", "data.apply.apply.apply", "processing.ATOMProcessing._get_jittered_box", "len", "processing.ATOMProcessing._generate_proposals", "isinstance"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.jittered_center_crop", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.DiMPProcessing._get_jittered_box", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.DiMPProcessing._generate_proposals"], ["", "def", "__call__", "(", "self", ",", "data", ":", "TensorDict", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            data - The input data, should contain the following fields:\n                'train_images'  -\n                'test_images'   -\n                'train_anno'    -\n                'test_anno'     -\n\n        returns:\n            TensorDict - output data block with following fields:\n                'train_images'  -\n                'test_images'   -\n                'train_anno'    -\n                'test_anno'     -\n                'test_proposals'-\n                'proposal_iou'  -\n        \"\"\"", "\n", "# Apply joint transforms", "\n", "if", "self", ".", "transform", "[", "'joint'", "]", "is", "not", "None", ":", "\n", "            ", "num_train_images", "=", "len", "(", "data", "[", "'train_images'", "]", ")", "\n", "all_images", "=", "data", "[", "'train_images'", "]", "+", "data", "[", "'test_images'", "]", "\n", "all_images_trans", "=", "self", ".", "transform", "[", "'joint'", "]", "(", "*", "all_images", ")", "\n", "\n", "data", "[", "'train_images'", "]", "=", "all_images_trans", "[", ":", "num_train_images", "]", "\n", "data", "[", "'test_images'", "]", "=", "all_images_trans", "[", "num_train_images", ":", "]", "\n", "\n", "", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'sequence'", "or", "len", "(", "data", "[", "s", "+", "'_images'", "]", ")", "==", "1", ",", "\"In pair mode, num train/test frames must be 1\"", "\n", "\n", "# Add a uniform noise to the center pos", "\n", "jittered_anno", "=", "[", "self", ".", "_get_jittered_box", "(", "a", ",", "s", ")", "for", "a", "in", "data", "[", "s", "+", "'_anno'", "]", "]", "\n", "\n", "# Crop image region centered at jittered_anno box", "\n", "crops", ",", "boxes", "=", "prutils", ".", "jittered_center_crop", "(", "data", "[", "s", "+", "'_images'", "]", ",", "jittered_anno", ",", "data", "[", "s", "+", "'_anno'", "]", ",", "\n", "self", ".", "search_area_factor", ",", "self", ".", "output_sz", ")", "\n", "\n", "# Apply transforms", "\n", "data", "[", "s", "+", "'_images'", "]", "=", "[", "self", ".", "transform", "[", "s", "]", "(", "x", ")", "for", "x", "in", "crops", "]", "\n", "data", "[", "s", "+", "'_anno'", "]", "=", "boxes", "\n", "\n", "# Generate proposals", "\n", "", "frame2_proposals", ",", "gt_iou", "=", "zip", "(", "*", "[", "self", ".", "_generate_proposals", "(", "a", ")", "for", "a", "in", "data", "[", "'test_anno'", "]", "]", ")", "\n", "\n", "data", "[", "'test_proposals'", "]", "=", "list", "(", "frame2_proposals", ")", "\n", "data", "[", "'proposal_iou'", "]", "=", "list", "(", "gt_iou", ")", "\n", "\n", "# Prepare output", "\n", "if", "self", ".", "mode", "==", "'sequence'", ":", "\n", "            ", "data", "=", "data", ".", "apply", "(", "prutils", ".", "stack_tensors", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "data", ".", "apply", "(", "lambda", "x", ":", "x", "[", "0", "]", "if", "isinstance", "(", "x", ",", "list", ")", "else", "x", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.DiMPProcessing.__init__": [[172, 200], ["processing.BaseProcessing.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "search_area_factor", ",", "output_sz", ",", "center_jitter_factor", ",", "scale_jitter_factor", ",", "crop_type", "=", "'replicate'", ",", "\n", "mode", "=", "'pair'", ",", "\n", "proposal_params", "=", "None", ",", "label_function_params", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            search_area_factor - The size of the search region  relative to the target size.\n            output_sz - An integer, denoting the size to which the search region is resized. The search region is always\n                        square.\n            center_jitter_factor - A dict containing the amount of jittering to be applied to the target center before\n                                    extracting the search region. See _get_jittered_box for how the jittering is done.\n            scale_jitter_factor - A dict containing the amount of jittering to be applied to the target size before\n                                    extracting the search region. See _get_jittered_box for how the jittering is done.\n            crop_type - If 'replicate', the boundary pixels are replicated in case the search region crop goes out of image.\n                        If 'nopad', the search region crop is shifted/shrunk to fit completely inside the image.\n            mode - Either 'pair' or 'sequence'. If mode='sequence', then output has an extra dimension for frames\n            proposal_params - Arguments for the proposal generation process. See _generate_proposals for details.\n            label_function_params - Arguments for the label generation process. See _generate_label_function for details.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "search_area_factor", "=", "search_area_factor", "\n", "self", ".", "output_sz", "=", "output_sz", "\n", "self", ".", "center_jitter_factor", "=", "center_jitter_factor", "\n", "self", ".", "scale_jitter_factor", "=", "scale_jitter_factor", "\n", "self", ".", "crop_type", "=", "crop_type", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "self", ".", "proposal_params", "=", "proposal_params", "\n", "self", ".", "label_function_params", "=", "label_function_params", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.DiMPProcessing._get_jittered_box": [[201, 216], ["torch.cat", "torch.exp", "torch.randn", "jittered_size.prod().sqrt", "torch.rand", "jittered_size.prod"], "methods", ["None"], ["", "def", "_get_jittered_box", "(", "self", ",", "box", ",", "mode", ")", ":", "\n", "        ", "\"\"\" Jitter the input box\n        args:\n            box - input bounding box\n            mode - string 'train' or 'test' indicating train or test data\n\n        returns:\n            torch.Tensor - jittered box\n        \"\"\"", "\n", "\n", "jittered_size", "=", "box", "[", "2", ":", "4", "]", "*", "torch", ".", "exp", "(", "torch", ".", "randn", "(", "2", ")", "*", "self", ".", "scale_jitter_factor", "[", "mode", "]", ")", "\n", "max_offset", "=", "(", "jittered_size", ".", "prod", "(", ")", ".", "sqrt", "(", ")", "*", "self", ".", "center_jitter_factor", "[", "mode", "]", ")", ".", "item", "(", ")", "\n", "jittered_center", "=", "box", "[", "0", ":", "2", "]", "+", "0.5", "*", "box", "[", "2", ":", "4", "]", "+", "max_offset", "*", "(", "torch", ".", "rand", "(", "2", ")", "-", "0.5", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "jittered_center", "-", "0.5", "*", "jittered_size", ",", "jittered_size", ")", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.DiMPProcessing._generate_proposals": [[217, 239], ["torch.zeros", "torch.zeros", "range", "ltr.perturb_box"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.perturb_box"], ["", "def", "_generate_proposals", "(", "self", ",", "box", ")", ":", "\n", "        ", "\"\"\" Generates proposals by adding noise to the input box\n        args:\n            box - input box\n\n        returns:\n            torch.Tensor - Array of shape (num_proposals, 4) containing proposals\n            torch.Tensor - Array of shape (num_proposals,) containing IoU overlap of each proposal with the input box. The\n                        IoU is mapped to [-1, 1]\n        \"\"\"", "\n", "# Generate proposals", "\n", "num_proposals", "=", "self", ".", "proposal_params", "[", "'boxes_per_frame'", "]", "\n", "proposals", "=", "torch", ".", "zeros", "(", "(", "num_proposals", ",", "4", ")", ")", "\n", "gt_iou", "=", "torch", ".", "zeros", "(", "num_proposals", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_proposals", ")", ":", "\n", "            ", "proposals", "[", "i", ",", ":", "]", ",", "gt_iou", "[", "i", "]", "=", "prutils", ".", "perturb_box", "(", "box", ",", "min_iou", "=", "self", ".", "proposal_params", "[", "'min_iou'", "]", ",", "\n", "sigma_factor", "=", "self", ".", "proposal_params", "[", "'sigma_factor'", "]", ")", "\n", "\n", "# Map to [-1, 1]", "\n", "", "gt_iou", "=", "gt_iou", "*", "2", "-", "1", "\n", "return", "proposals", ",", "gt_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.DiMPProcessing._generate_label_function": [[240, 255], ["ltr.gaussian_label_function", "target_bb.view", "processing.DiMPProcessing.label_function_params.get"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.gaussian_label_function", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.admin.model_constructor.NetConstructor.get"], ["", "def", "_generate_label_function", "(", "self", ",", "target_bb", ")", ":", "\n", "        ", "\"\"\" Generates the gaussian label function centered at target_bb\n        args:\n            target_bb - target bounding box (num_images, 4)\n\n        returns:\n            torch.Tensor - Tensor of shape (num_images, label_sz, label_sz) containing the label for each sample\n        \"\"\"", "\n", "\n", "gauss_label", "=", "prutils", ".", "gaussian_label_function", "(", "target_bb", ".", "view", "(", "-", "1", ",", "4", ")", ",", "self", ".", "label_function_params", "[", "'sigma_factor'", "]", ",", "\n", "self", ".", "label_function_params", "[", "'kernel_sz'", "]", ",", "\n", "self", ".", "label_function_params", "[", "'feature_sz'", "]", ",", "self", ".", "output_sz", ",", "\n", "end_pad_if_even", "=", "self", ".", "label_function_params", ".", "get", "(", "'end_pad_if_even'", ",", "True", ")", ")", "\n", "\n", "return", "gauss_label", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.DiMPProcessing.__call__": [[256, 323], ["len", "zip", "list", "list", "data.apply.apply.apply", "data.apply.apply.apply", "processing.DiMPProcessing._generate_label_function", "processing.DiMPProcessing._generate_label_function", "processing.DiMPProcessing._get_jittered_box", "ltr.jittered_center_crop", "len", "ltr.jittered_center_crop_nopad", "ValueError", "processing.DiMPProcessing._generate_proposals", "isinstance"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.apply", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.DiMPProcessing._generate_label_function", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.DiMPProcessing._generate_label_function", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.DiMPProcessing._get_jittered_box", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.jittered_center_crop", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.jittered_center_crop_nopad", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing.DiMPProcessing._generate_proposals"], ["", "def", "__call__", "(", "self", ",", "data", ":", "TensorDict", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            data - The input data, should contain the following fields:\n                'train_images'  -\n                'test_images'   -\n                'train_anno'    -\n                'test_anno'     -\n\n        returns:\n            TensorDict - output data block with following fields:\n                'train_images'  -\n                'test_images'   -\n                'train_anno'    -\n                'test_anno'     -\n                'test_proposals' (optional) -\n                'proposal_iou'  (optional)  -\n                'test_label' (optional)     -\n                'train_label' (optional)    -\n        \"\"\"", "\n", "\n", "if", "self", ".", "transform", "[", "'joint'", "]", "is", "not", "None", ":", "\n", "            ", "num_train_images", "=", "len", "(", "data", "[", "'train_images'", "]", ")", "\n", "all_images", "=", "data", "[", "'train_images'", "]", "+", "data", "[", "'test_images'", "]", "\n", "all_images_trans", "=", "self", ".", "transform", "[", "'joint'", "]", "(", "*", "all_images", ")", "\n", "\n", "data", "[", "'train_images'", "]", "=", "all_images_trans", "[", ":", "num_train_images", "]", "\n", "data", "[", "'test_images'", "]", "=", "all_images_trans", "[", "num_train_images", ":", "]", "\n", "\n", "", "for", "s", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "            ", "assert", "self", ".", "mode", "==", "'sequence'", "or", "len", "(", "data", "[", "s", "+", "'_images'", "]", ")", "==", "1", ",", "\"In pair mode, num train/test frames must be 1\"", "\n", "\n", "# Add a uniform noise to the center pos", "\n", "jittered_anno", "=", "[", "self", ".", "_get_jittered_box", "(", "a", ",", "s", ")", "for", "a", "in", "data", "[", "s", "+", "'_anno'", "]", "]", "\n", "\n", "if", "self", ".", "crop_type", "==", "'replicate'", ":", "\n", "                ", "crops", ",", "boxes", "=", "prutils", ".", "jittered_center_crop", "(", "data", "[", "s", "+", "'_images'", "]", ",", "jittered_anno", ",", "data", "[", "s", "+", "'_anno'", "]", ",", "\n", "self", ".", "search_area_factor", ",", "self", ".", "output_sz", ")", "\n", "", "elif", "self", ".", "crop_type", "==", "'nopad'", ":", "\n", "                ", "crops", ",", "boxes", "=", "prutils", ".", "jittered_center_crop_nopad", "(", "data", "[", "s", "+", "'_images'", "]", ",", "jittered_anno", ",", "data", "[", "s", "+", "'_anno'", "]", ",", "\n", "self", ".", "search_area_factor", ",", "self", ".", "output_sz", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown crop type {}'", ".", "format", "(", "self", ".", "crop_type", ")", ")", "\n", "\n", "", "data", "[", "s", "+", "'_images'", "]", "=", "[", "self", ".", "transform", "[", "s", "]", "(", "x", ")", "for", "x", "in", "crops", "]", "\n", "data", "[", "s", "+", "'_anno'", "]", "=", "boxes", "\n", "\n", "# Generate proposals", "\n", "", "if", "self", ".", "proposal_params", ":", "\n", "            ", "frame2_proposals", ",", "gt_iou", "=", "zip", "(", "*", "[", "self", ".", "_generate_proposals", "(", "a", ")", "for", "a", "in", "data", "[", "'test_anno'", "]", "]", ")", "\n", "\n", "data", "[", "'test_proposals'", "]", "=", "list", "(", "frame2_proposals", ")", "\n", "data", "[", "'proposal_iou'", "]", "=", "list", "(", "gt_iou", ")", "\n", "\n", "# Prepare output", "\n", "", "if", "self", ".", "mode", "==", "'sequence'", ":", "\n", "            ", "data", "=", "data", ".", "apply", "(", "prutils", ".", "stack_tensors", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "data", ".", "apply", "(", "lambda", "x", ":", "x", "[", "0", "]", "if", "isinstance", "(", "x", ",", "list", ")", "else", "x", ")", "\n", "\n", "# Generate label functions", "\n", "", "if", "self", ".", "label_function_params", "is", "not", "None", ":", "\n", "            ", "data", "[", "'train_label'", "]", "=", "self", ".", "_generate_label_function", "(", "data", "[", "'train_anno'", "]", ")", "\n", "data", "[", "'test_label'", "]", "=", "self", ".", "_generate_label_function", "(", "data", "[", "'test_anno'", "]", ")", "\n", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.image_loader.default_image_loader": [[5, 20], ["image_loader.opencv_loader", "image_loader.jpeg4py_loader", "image_loader.jpeg4py_loader", "print"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.image_loader.opencv_loader", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.image_loader.jpeg4py_loader", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.image_loader.jpeg4py_loader"], ["def", "default_image_loader", "(", "path", ")", ":", "\n", "    ", "\"\"\"The default image loader, reads the image from the given path. It first tries to use the jpeg4py_loader,\n    but reverts to the opencv_loader if the former is not available.\"\"\"", "\n", "if", "default_image_loader", ".", "use_jpeg4py", "is", "None", ":", "\n", "# Try using jpeg4py", "\n", "        ", "im", "=", "jpeg4py_loader", "(", "path", ")", "\n", "if", "im", "is", "None", ":", "\n", "            ", "default_image_loader", ".", "use_jpeg4py", "=", "False", "\n", "print", "(", "'Using opencv_loader instead.'", ")", "\n", "", "else", ":", "\n", "            ", "default_image_loader", ".", "use_jpeg4py", "=", "True", "\n", "return", "im", "\n", "", "", "if", "default_image_loader", ".", "use_jpeg4py", ":", "\n", "        ", "return", "jpeg4py_loader", "(", "path", ")", "\n", "", "return", "opencv_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.image_loader.jpeg4py_loader": [[24, 32], ["jpeg4py.JPEG().decode", "print", "print", "jpeg4py.JPEG"], "function", ["None"], ["def", "jpeg4py_loader", "(", "path", ")", ":", "\n", "    ", "\"\"\" Image reading using jpeg4py (https://github.com/ajkxyz/jpeg4py)\"\"\"", "\n", "try", ":", "\n", "        ", "return", "jpeg4py", ".", "JPEG", "(", "path", ")", ".", "decode", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'ERROR: Could not read image \"{}\"'", ".", "format", "(", "path", ")", ")", "\n", "print", "(", "e", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.image_loader.opencv_loader": [[34, 44], ["cv2.imread", "cv2.cvtColor", "print", "print"], "function", ["None"], ["", "", "def", "opencv_loader", "(", "path", ")", ":", "\n", "    ", "\"\"\" Read image using opencv's imread function and returns it in rgb format\"\"\"", "\n", "try", ":", "\n", "        ", "im", "=", "cv", ".", "imread", "(", "path", ",", "cv", ".", "IMREAD_COLOR", ")", "\n", "# convert to rgb and return", "\n", "return", "cv", ".", "cvtColor", "(", "im", ",", "cv", ".", "COLOR_BGR2RGB", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'ERROR: Could not read image \"{}\"'", ".", "format", "(", "path", ")", ")", "\n", "print", "(", "e", ")", "\n", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.ATOMSampler.__init__": [[25, 54], ["sum"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "datasets", ",", "p_datasets", ",", "samples_per_epoch", ",", "max_gap", ",", "num_test_frames", "=", "1", ",", "processing", "=", "no_processing", ",", "\n", "frame_sample_mode", "=", "'default'", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            datasets - List of datasets to be used for training\n            p_datasets - List containing the probabilities by which each dataset will be sampled\n            samples_per_epoch - Number of training samples per epoch\n            max_gap - Maximum gap, in frame numbers, between the train (reference) frame and the test frames.\n            num_test_frames - Number of test frames used for calculating the IoU prediction loss.\n            processing - An instance of Processing class which performs the necessary processing of the data.\n            frame_sample_mode - Either 'default' or 'causal'. If 'causal', then the test frames are sampled in a causal\n                                manner.\n        \"\"\"", "\n", "self", ".", "datasets", "=", "datasets", "\n", "\n", "# If p not provided, sample uniformly from all videos", "\n", "if", "p_datasets", "is", "None", ":", "\n", "            ", "p_datasets", "=", "[", "1", "for", "d", "in", "self", ".", "datasets", "]", "\n", "\n", "# Normalize", "\n", "", "p_total", "=", "sum", "(", "p_datasets", ")", "\n", "self", ".", "p_datasets", "=", "[", "x", "/", "p_total", "for", "x", "in", "p_datasets", "]", "\n", "\n", "self", ".", "samples_per_epoch", "=", "samples_per_epoch", "\n", "self", ".", "max_gap", "=", "max_gap", "\n", "self", ".", "num_test_frames", "=", "num_test_frames", "\n", "self", ".", "num_train_frames", "=", "1", "# Only a single train frame allowed", "\n", "self", ".", "processing", "=", "processing", "\n", "self", ".", "frame_sample_mode", "=", "frame_sample_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.ATOMSampler.__len__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "samples_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.ATOMSampler._sample_visible_ids": [[58, 82], ["random.choices", "len", "len", "len", "range"], "methods", ["None"], ["", "def", "_sample_visible_ids", "(", "self", ",", "visible", ",", "num_ids", "=", "1", ",", "min_id", "=", "None", ",", "max_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Samples num_ids frames between min_id and max_id for which target is visible\n\n        args:\n            visible - 1d Tensor indicating whether target is visible for each frame\n            num_ids - number of frames to be samples\n            min_id - Minimum allowed frame number\n            max_id - Maximum allowed frame number\n\n        returns:\n            list - List of sampled frame numbers. None if not sufficient visible frames could be found.\n        \"\"\"", "\n", "if", "min_id", "is", "None", "or", "min_id", "<", "0", ":", "\n", "            ", "min_id", "=", "0", "\n", "", "if", "max_id", "is", "None", "or", "max_id", ">", "len", "(", "visible", ")", ":", "\n", "            ", "max_id", "=", "len", "(", "visible", ")", "\n", "\n", "", "valid_ids", "=", "[", "i", "for", "i", "in", "range", "(", "min_id", ",", "max_id", ")", "if", "visible", "[", "i", "]", "]", "\n", "\n", "# No visible ids", "\n", "if", "len", "(", "valid_ids", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "random", ".", "choices", "(", "valid_ids", ",", "k", "=", "num_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.ATOMSampler.__getitem__": [[83, 158], ["dataset.is_video_sequence", "dataset.get_frames", "dataset.get_frames", "pytracking.TensorDict", "sampler.ATOMSampler.processing", "random.choices", "random.randint", "dataset.get_sequence_info", "visible.type().sum().item", "dataset.get_name", "dataset.get_num_sequences", "visible.type().sum", "sampler.ATOMSampler._sample_visible_ids", "sampler.ATOMSampler._sample_visible_ids", "ValueError", "len", "sampler.ATOMSampler._sample_visible_ids", "sampler.ATOMSampler._sample_visible_ids", "sampler.ATOMSampler._sample_visible_ids", "visible.type", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.base_dataset.BaseDataset.is_video_sequence", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_frames", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_frames", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_sequence_info", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_name", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_num_sequences", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler._sample_visible_ids", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler._sample_visible_ids", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler._sample_visible_ids", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler._sample_visible_ids", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler._sample_visible_ids"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            index (int): Index (Ignored since we sample randomly)\n\n        returns:\n            TensorDict - dict containing all the data blocks\n        \"\"\"", "\n", "\n", "# Select a dataset", "\n", "dataset", "=", "random", ".", "choices", "(", "self", ".", "datasets", ",", "self", ".", "p_datasets", ")", "[", "0", "]", "\n", "is_video_dataset", "=", "dataset", ".", "is_video_sequence", "(", ")", "\n", "\n", "min_visible_frames", "=", "2", "*", "(", "self", ".", "num_test_frames", "+", "self", ".", "num_train_frames", ")", "\n", "enough_visible_frames", "=", "False", "\n", "\n", "# Sample a sequence with enough visible frames and get anno for the same", "\n", "while", "not", "enough_visible_frames", ":", "\n", "            ", "seq_id", "=", "random", ".", "randint", "(", "0", ",", "dataset", ".", "get_num_sequences", "(", ")", "-", "1", ")", "\n", "seq_info_dict", "=", "dataset", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "visible", "=", "seq_info_dict", "[", "'visible'", "]", "\n", "\n", "num_visible", "=", "visible", ".", "type", "(", "torch", ".", "int64", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "enough_visible_frames", "=", "(", "(", "not", "is_video_dataset", ")", "and", "num_visible", ">", "0", ")", "or", "(", "num_visible", ">", "min_visible_frames", "and", "len", "(", "visible", ")", ">=", "20", ")", "\n", "\n", "", "if", "is_video_dataset", ":", "\n", "            ", "train_frame_ids", "=", "None", "\n", "test_frame_ids", "=", "None", "\n", "gap_increase", "=", "0", "\n", "if", "self", ".", "frame_sample_mode", "==", "'default'", ":", "\n", "# Sample frame numbers", "\n", "                ", "while", "test_frame_ids", "is", "None", ":", "\n", "                    ", "train_frame_ids", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "num_ids", "=", "self", ".", "num_train_frames", ")", "\n", "test_frame_ids", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "min_id", "=", "train_frame_ids", "[", "0", "]", "-", "self", ".", "max_gap", "-", "gap_increase", ",", "\n", "max_id", "=", "train_frame_ids", "[", "0", "]", "+", "self", ".", "max_gap", "+", "gap_increase", ",", "\n", "num_ids", "=", "self", ".", "num_test_frames", ")", "\n", "gap_increase", "+=", "5", "# Increase gap until a frame is found", "\n", "", "", "elif", "self", ".", "frame_sample_mode", "==", "'causal'", ":", "\n", "# Sample frame numbers in a causal manner, i.e. test_frame_ids > train_frame_ids", "\n", "                ", "while", "test_frame_ids", "is", "None", ":", "\n", "                    ", "base_frame_id", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "num_ids", "=", "1", ",", "min_id", "=", "self", ".", "num_train_frames", "-", "1", ",", "\n", "max_id", "=", "len", "(", "visible", ")", "-", "self", ".", "num_test_frames", ")", "\n", "prev_frame_ids", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "num_ids", "=", "self", ".", "num_train_frames", "-", "1", ",", "\n", "min_id", "=", "base_frame_id", "[", "0", "]", "-", "self", ".", "max_gap", "-", "gap_increase", ",", "\n", "max_id", "=", "base_frame_id", "[", "0", "]", ")", "\n", "if", "prev_frame_ids", "is", "None", ":", "\n", "                        ", "gap_increase", "+=", "5", "\n", "continue", "\n", "", "train_frame_ids", "=", "base_frame_id", "+", "prev_frame_ids", "\n", "test_frame_ids", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "min_id", "=", "train_frame_ids", "[", "0", "]", "+", "1", ",", "\n", "max_id", "=", "train_frame_ids", "[", "0", "]", "+", "self", ".", "max_gap", "+", "gap_increase", ",", "\n", "num_ids", "=", "self", ".", "num_test_frames", ")", "\n", "gap_increase", "+=", "5", "# Increase gap until a frame is found", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown frame_sample_mode.'", ")", "\n", "", "", "else", ":", "\n", "            ", "train_frame_ids", "=", "[", "1", "]", "*", "self", ".", "num_train_frames", "\n", "test_frame_ids", "=", "[", "1", "]", "*", "self", ".", "num_test_frames", "\n", "\n", "# Get frames", "\n", "", "train_frames", ",", "train_anno_dict", ",", "_", "=", "dataset", ".", "get_frames", "(", "seq_id", ",", "train_frame_ids", ",", "seq_info_dict", ")", "\n", "train_anno", "=", "train_anno_dict", "[", "'bbox'", "]", "\n", "\n", "test_frames", ",", "test_anno_dict", ",", "_", "=", "dataset", ".", "get_frames", "(", "seq_id", ",", "test_frame_ids", ",", "seq_info_dict", ")", "\n", "test_anno", "=", "test_anno_dict", "[", "'bbox'", "]", "\n", "\n", "# Prepare data", "\n", "data", "=", "TensorDict", "(", "{", "'train_images'", ":", "train_frames", ",", "\n", "'train_anno'", ":", "train_anno", ",", "\n", "'test_images'", ":", "test_frames", ",", "\n", "'test_anno'", ":", "test_anno", ",", "\n", "'dataset'", ":", "dataset", ".", "get_name", "(", ")", "}", ")", "\n", "\n", "# Send for processing", "\n", "return", "self", ".", "processing", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler.__init__": [[175, 202], ["sum", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "datasets", ",", "p_datasets", ",", "samples_per_epoch", ",", "max_gap", ",", "\n", "num_test_frames", ",", "num_train_frames", "=", "1", ",", "processing", "=", "no_processing", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            datasets - List of datasets to be used for training\n            p_datasets - List containing the probabilities by which each dataset will be sampled\n            samples_per_epoch - Number of training samples per epoch\n            max_gap - Maximum gap, in frame numbers, between the train frames and the test frames.\n            num_test_frames - Number of test frames to sample.\n            num_train_frames - Number of train frames to sample.\n            processing - An instance of Processing class which performs the necessary processing of the data.\n        \"\"\"", "\n", "self", ".", "datasets", "=", "datasets", "\n", "\n", "# If p not provided, sample uniformly from all videos", "\n", "if", "p_datasets", "is", "None", ":", "\n", "            ", "p_datasets", "=", "[", "len", "(", "d", ")", "for", "d", "in", "self", ".", "datasets", "]", "\n", "\n", "# Normalize", "\n", "", "p_total", "=", "sum", "(", "p_datasets", ")", "\n", "self", ".", "p_datasets", "=", "[", "x", "/", "p_total", "for", "x", "in", "p_datasets", "]", "\n", "\n", "self", ".", "samples_per_epoch", "=", "samples_per_epoch", "\n", "self", ".", "max_gap", "=", "max_gap", "\n", "self", ".", "num_test_frames", "=", "num_test_frames", "\n", "self", ".", "num_train_frames", "=", "num_train_frames", "\n", "self", ".", "processing", "=", "processing", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler.__len__": [[203, 205], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "samples_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler._sample_visible_ids": [[206, 230], ["random.choices", "len", "len", "len", "range"], "methods", ["None"], ["", "def", "_sample_visible_ids", "(", "self", ",", "visible", ",", "num_ids", "=", "1", ",", "min_id", "=", "None", ",", "max_id", "=", "None", ")", ":", "\n", "        ", "\"\"\" Samples num_ids frames between min_id and max_id for which target is visible\n\n        args:\n            visible - 1d Tensor indicating whether target is visible for each frame\n            num_ids - number of frames to be samples\n            min_id - Minimum allowed frame number\n            max_id - Maximum allowed frame number\n\n        returns:\n            list - List of sampled frame numbers. None if not sufficient visible frames could be found.\n        \"\"\"", "\n", "if", "min_id", "is", "None", "or", "min_id", "<", "0", ":", "\n", "            ", "min_id", "=", "0", "\n", "", "if", "max_id", "is", "None", "or", "max_id", ">", "len", "(", "visible", ")", ":", "\n", "            ", "max_id", "=", "len", "(", "visible", ")", "\n", "\n", "", "valid_ids", "=", "[", "i", "for", "i", "in", "range", "(", "min_id", ",", "max_id", ")", "if", "visible", "[", "i", "]", "]", "\n", "\n", "# No visible ids", "\n", "if", "len", "(", "valid_ids", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "random", ".", "choices", "(", "valid_ids", ",", "k", "=", "num_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler.__getitem__": [[231, 295], ["dataset.is_video_sequence", "dataset.get_frames", "dataset.get_frames", "pytracking.TensorDict", "sampler.DiMPSampler.processing", "random.choices", "random.randint", "dataset.get_sequence_info", "sampler.DiMPSampler._sample_visible_ids", "sampler.DiMPSampler._sample_visible_ids", "sampler.DiMPSampler._sample_visible_ids", "dataset.get_name", "dataset.get_num_sequences", "visible.type().sum().item", "len", "visible.type().sum", "len", "visible.type"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.base_dataset.BaseDataset.is_video_sequence", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_frames", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_frames", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_sequence_info", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler._sample_visible_ids", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler._sample_visible_ids", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.DiMPSampler._sample_visible_ids", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_name", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.dataset.imagenetvid.ImagenetVID.get_num_sequences"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        args:\n            index (int): Index (Ignored since we sample randomly)\n\n        returns:\n            TensorDict - dict containing all the data blocks\n        \"\"\"", "\n", "\n", "# Select a dataset", "\n", "dataset", "=", "random", ".", "choices", "(", "self", ".", "datasets", ",", "self", ".", "p_datasets", ")", "[", "0", "]", "\n", "is_video_dataset", "=", "dataset", ".", "is_video_sequence", "(", ")", "\n", "\n", "# Sample a sequence with enough visible frames", "\n", "enough_visible_frames", "=", "False", "\n", "while", "not", "enough_visible_frames", ":", "\n", "# Sample a sequence", "\n", "            ", "seq_id", "=", "random", ".", "randint", "(", "0", ",", "dataset", ".", "get_num_sequences", "(", ")", "-", "1", ")", "\n", "\n", "# Sample frames", "\n", "seq_info_dict", "=", "dataset", ".", "get_sequence_info", "(", "seq_id", ")", "\n", "visible", "=", "seq_info_dict", "[", "'visible'", "]", "\n", "\n", "enough_visible_frames", "=", "visible", ".", "type", "(", "torch", ".", "int64", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ">", "2", "*", "(", "\n", "self", ".", "num_test_frames", "+", "self", ".", "num_train_frames", ")", "and", "len", "(", "visible", ")", ">=", "20", "\n", "\n", "enough_visible_frames", "=", "enough_visible_frames", "or", "not", "is_video_dataset", "\n", "\n", "", "if", "is_video_dataset", ":", "\n", "            ", "train_frame_ids", "=", "None", "\n", "test_frame_ids", "=", "None", "\n", "gap_increase", "=", "0", "\n", "\n", "# Sample test and train frames in a causal manner, i.e. test_frame_ids > train_frame_ids", "\n", "while", "test_frame_ids", "is", "None", ":", "\n", "                ", "base_frame_id", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "num_ids", "=", "1", ",", "min_id", "=", "self", ".", "num_train_frames", "-", "1", ",", "\n", "max_id", "=", "len", "(", "visible", ")", "-", "self", ".", "num_test_frames", ")", "\n", "prev_frame_ids", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "num_ids", "=", "self", ".", "num_train_frames", "-", "1", ",", "\n", "min_id", "=", "base_frame_id", "[", "0", "]", "-", "self", ".", "max_gap", "-", "gap_increase", ",", "\n", "max_id", "=", "base_frame_id", "[", "0", "]", ")", "\n", "if", "prev_frame_ids", "is", "None", ":", "\n", "                    ", "gap_increase", "+=", "5", "\n", "continue", "\n", "", "train_frame_ids", "=", "base_frame_id", "+", "prev_frame_ids", "\n", "test_frame_ids", "=", "self", ".", "_sample_visible_ids", "(", "visible", ",", "min_id", "=", "train_frame_ids", "[", "0", "]", "+", "1", ",", "\n", "max_id", "=", "train_frame_ids", "[", "0", "]", "+", "self", ".", "max_gap", "+", "gap_increase", ",", "\n", "num_ids", "=", "self", ".", "num_test_frames", ")", "\n", "# Increase gap until a frame is found", "\n", "gap_increase", "+=", "5", "\n", "", "", "else", ":", "\n", "# In case of image dataset, just repeat the image to generate synthetic video", "\n", "            ", "train_frame_ids", "=", "[", "1", "]", "*", "self", ".", "num_train_frames", "\n", "test_frame_ids", "=", "[", "1", "]", "*", "self", ".", "num_test_frames", "\n", "\n", "", "train_frames", ",", "train_anno", ",", "meta_obj_train", "=", "dataset", ".", "get_frames", "(", "seq_id", ",", "train_frame_ids", ",", "seq_info_dict", ")", "\n", "test_frames", ",", "test_anno", ",", "meta_obj_test", "=", "dataset", ".", "get_frames", "(", "seq_id", ",", "test_frame_ids", ",", "seq_info_dict", ")", "\n", "\n", "data", "=", "TensorDict", "(", "{", "'train_images'", ":", "train_frames", ",", "\n", "'train_anno'", ":", "train_anno", "[", "'bbox'", "]", ",", "\n", "'test_images'", ":", "test_frames", ",", "\n", "'test_anno'", ":", "test_anno", "[", "'bbox'", "]", ",", "\n", "'dataset'", ":", "dataset", ".", "get_name", "(", ")", "}", ")", "\n", "\n", "return", "self", ".", "processing", "(", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.sampler.no_processing": [[6, 8], ["None"], "function", ["None"], ["def", "no_processing", "(", "data", ")", ":", "\n", "    ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.stack_tensors": [[7, 11], ["isinstance", "isinstance", "torch.stack"], "function", ["None"], ["def", "stack_tensors", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "list", ")", "and", "isinstance", "(", "x", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.sample_target": [[13, 58], ["target_bb.tolist", "math.ceil", "round", "round", "max", "max", "max", "max", "cv2.copyMakeBorder", "Exception", "math.sqrt", "cv2.resize"], "function", ["None"], ["", "def", "sample_target", "(", "im", ",", "target_bb", ",", "search_area_factor", ",", "output_sz", "=", "None", ")", ":", "\n", "    ", "\"\"\" Extracts a square crop centered at target_bb box, of area search_area_factor^2 times target_bb area\n\n    args:\n        im - cv image\n        target_bb - target box [x, y, w, h]\n        search_area_factor - Ratio of crop size to target size\n        output_sz - (float) Size to which the extracted crop is resized (always square). If None, no resizing is done.\n\n    returns:\n        cv image - extracted crop\n        float - the factor by which the crop has been resized to make the crop size equal output_size\n    \"\"\"", "\n", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "target_bb", ".", "tolist", "(", ")", "\n", "\n", "# Crop image", "\n", "crop_sz", "=", "math", ".", "ceil", "(", "math", ".", "sqrt", "(", "w", "*", "h", ")", "*", "search_area_factor", ")", "\n", "\n", "if", "crop_sz", "<", "1", ":", "\n", "        ", "raise", "Exception", "(", "'Too small bounding box.'", ")", "\n", "\n", "", "x1", "=", "round", "(", "x", "+", "0.5", "*", "w", "-", "crop_sz", "*", "0.5", ")", "\n", "x2", "=", "x1", "+", "crop_sz", "\n", "\n", "y1", "=", "round", "(", "y", "+", "0.5", "*", "h", "-", "crop_sz", "*", "0.5", ")", "\n", "y2", "=", "y1", "+", "crop_sz", "\n", "\n", "x1_pad", "=", "max", "(", "0", ",", "-", "x1", ")", "\n", "x2_pad", "=", "max", "(", "x2", "-", "im", ".", "shape", "[", "1", "]", "+", "1", ",", "0", ")", "\n", "\n", "y1_pad", "=", "max", "(", "0", ",", "-", "y1", ")", "\n", "y2_pad", "=", "max", "(", "y2", "-", "im", ".", "shape", "[", "0", "]", "+", "1", ",", "0", ")", "\n", "\n", "# Crop target", "\n", "im_crop", "=", "im", "[", "y1", "+", "y1_pad", ":", "y2", "-", "y2_pad", ",", "x1", "+", "x1_pad", ":", "x2", "-", "x2_pad", ",", ":", "]", "\n", "\n", "# Pad", "\n", "im_crop_padded", "=", "cv", ".", "copyMakeBorder", "(", "im_crop", ",", "y1_pad", ",", "y2_pad", ",", "x1_pad", ",", "x2_pad", ",", "cv", ".", "BORDER_REPLICATE", ")", "\n", "\n", "if", "output_sz", "is", "not", "None", ":", "\n", "        ", "resize_factor", "=", "output_sz", "/", "crop_sz", "\n", "return", "cv", ".", "resize", "(", "im_crop_padded", ",", "(", "output_sz", ",", "output_sz", ")", ")", ",", "resize_factor", "\n", "", "else", ":", "\n", "        ", "return", "im_crop_padded", ",", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.transform_image_to_crop": [[60, 81], ["torch.cat"], "function", ["None"], ["", "", "def", "transform_image_to_crop", "(", "box_in", ":", "torch", ".", "Tensor", ",", "box_extract", ":", "torch", ".", "Tensor", ",", "resize_factor", ":", "float", ",", "\n", "crop_sz", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\" Transform the box co-ordinates from the original image co-ordinates to the co-ordinates of the cropped image\n    args:\n        box_in - the box for which the co-ordinates are to be transformed\n        box_extract - the box about which the image crop has been extracted.\n        resize_factor - the ratio between the original image scale and the scale of the image crop\n        crop_sz - size of the cropped image\n\n    returns:\n        torch.Tensor - transformed co-ordinates of box_in\n    \"\"\"", "\n", "box_extract_center", "=", "box_extract", "[", "0", ":", "2", "]", "+", "0.5", "*", "box_extract", "[", "2", ":", "4", "]", "\n", "\n", "box_in_center", "=", "box_in", "[", "0", ":", "2", "]", "+", "0.5", "*", "box_in", "[", "2", ":", "4", "]", "\n", "\n", "box_out_center", "=", "(", "crop_sz", "-", "1", ")", "/", "2", "+", "(", "box_in_center", "-", "box_extract_center", ")", "*", "resize_factor", "\n", "box_out_wh", "=", "box_in", "[", "2", ":", "4", "]", "*", "resize_factor", "\n", "\n", "box_out", "=", "torch", ".", "cat", "(", "(", "box_out_center", "-", "0.5", "*", "box_out_wh", ",", "box_out_wh", ")", ")", "\n", "return", "box_out", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.centered_crop": [[83, 96], ["zip", "torch.Tensor", "processing_utils.sample_target", "processing_utils.transform_image_to_crop", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.sample_target", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.transform_image_to_crop"], ["", "def", "centered_crop", "(", "frames", ",", "anno", ",", "area_factor", ",", "output_sz", ")", ":", "\n", "    ", "crops_resize_factors", "=", "[", "sample_target", "(", "f", ",", "a", ",", "area_factor", ",", "output_sz", ")", "\n", "for", "f", ",", "a", "in", "zip", "(", "frames", ",", "anno", ")", "]", "\n", "\n", "frames_crop", ",", "resize_factors", "=", "zip", "(", "*", "crops_resize_factors", ")", "\n", "\n", "crop_sz", "=", "torch", ".", "Tensor", "(", "[", "output_sz", ",", "output_sz", "]", ")", "\n", "\n", "# find the bb location in the crop", "\n", "anno_crop", "=", "[", "transform_image_to_crop", "(", "a", ",", "a", ",", "rf", ",", "crop_sz", ")", "\n", "for", "a", ",", "rf", "in", "zip", "(", "anno", ",", "resize_factors", ")", "]", "\n", "\n", "return", "frames_crop", ",", "anno_crop", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.jittered_center_crop": [[98, 127], ["zip", "torch.Tensor", "processing_utils.sample_target", "processing_utils.transform_image_to_crop", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.sample_target", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.transform_image_to_crop"], ["", "def", "jittered_center_crop", "(", "frames", ",", "box_extract", ",", "box_gt", ",", "search_area_factor", ",", "output_sz", ")", ":", "\n", "    ", "\"\"\" For each frame in frames, extracts a square crop centered at box_extract, of area search_area_factor^2\n    times box_extract area. The extracted crops are then resized to output_sz. Further, the co-ordinates of the box\n    box_gt are transformed to the image crop co-ordinates\n\n    args:\n        frames - list of frames\n        box_extract - list of boxes of same length as frames. The crops are extracted using anno_extract\n        box_gt - list of boxes of same length as frames. The co-ordinates of these boxes are transformed from\n                    image co-ordinates to the crop co-ordinates\n        search_area_factor - The area of the extracted crop is search_area_factor^2 times box_extract area\n        output_sz - The size to which the extracted crops are resized\n        \n    returns:\n        list - list of image crops\n        list - box_gt location in the crop co-ordinates\n        \"\"\"", "\n", "crops_resize_factors", "=", "[", "sample_target", "(", "f", ",", "a", ",", "search_area_factor", ",", "output_sz", ")", "\n", "for", "f", ",", "a", "in", "zip", "(", "frames", ",", "box_extract", ")", "]", "\n", "\n", "frames_crop", ",", "resize_factors", "=", "zip", "(", "*", "crops_resize_factors", ")", "\n", "\n", "crop_sz", "=", "torch", ".", "Tensor", "(", "[", "output_sz", ",", "output_sz", "]", ")", "\n", "\n", "# find the bb location in the crop", "\n", "box_crop", "=", "[", "transform_image_to_crop", "(", "a_gt", ",", "a_ex", ",", "rf", ",", "crop_sz", ")", "\n", "for", "a_gt", ",", "a_ex", ",", "rf", "in", "zip", "(", "box_gt", ",", "box_extract", ",", "resize_factors", ")", "]", "\n", "\n", "return", "frames_crop", ",", "box_crop", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.sample_target_nopad": [[129, 186], ["isinstance", "torch.Tensor", "target_bb.tolist", "max", "math.floor", "math.floor", "round", "round", "cv2.resize", "torch.Tensor", "Exception", "max", "min", "max", "min", "tuple", "torch.Tensor.long().tolist", "torch.Tensor.long", "target_bb[].prod", "torch.Tensor.prod"], "function", ["None"], ["", "def", "sample_target_nopad", "(", "im", ",", "target_bb", ",", "search_area_factor", ",", "output_sz", ")", ":", "\n", "    ", "\"\"\" Extracts a crop centered at target_bb box, of area search_area_factor^2. If the crop area contains regions\n    outside the image, it is shifted so that the it is inside the image. Further, if the crop area exceeds the image\n    size, a smaller crop which fits the image is returned instead.\n\n    args:\n        im - cv image\n        target_bb - target box [x, y, w, h]\n        search_area_factor - Ratio of crop size to target size\n        output_sz - (float) Size to which the extracted crop is resized (always square). If None, no resizing is done.\n\n    returns:\n        cv image - extracted crop\n        torch.Tensor - a bounding box denoting the cropped region in the image.\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "output_sz", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "        ", "output_sz", "=", "(", "output_sz", ",", "output_sz", ")", "\n", "", "output_sz", "=", "torch", ".", "Tensor", "(", "output_sz", ")", "\n", "\n", "im_h", "=", "im", ".", "shape", "[", "0", "]", "\n", "im_w", "=", "im", ".", "shape", "[", "1", "]", "\n", "\n", "bbx", ",", "bby", ",", "bbw", ",", "bbh", "=", "target_bb", ".", "tolist", "(", ")", "\n", "\n", "# Crop image", "\n", "crop_sz_x", ",", "crop_sz_y", "=", "(", "output_sz", "*", "(", "target_bb", "[", "2", ":", "]", ".", "prod", "(", ")", "/", "output_sz", ".", "prod", "(", ")", ")", ".", "sqrt", "(", ")", "*", "search_area_factor", ")", ".", "ceil", "(", ")", "\n", "\n", "# Calculate rescaling factor if outside the image", "\n", "rescale_factor", "=", "max", "(", "1", ",", "crop_sz_x", "/", "im_w", ",", "crop_sz_y", "/", "im_h", ")", "\n", "crop_sz_x", "=", "math", ".", "floor", "(", "crop_sz_x", "/", "rescale_factor", ")", "\n", "crop_sz_y", "=", "math", ".", "floor", "(", "crop_sz_y", "/", "rescale_factor", ")", "\n", "\n", "if", "crop_sz_x", "<", "1", "or", "crop_sz_y", "<", "1", ":", "\n", "        ", "raise", "Exception", "(", "'Too small bounding box.'", ")", "\n", "\n", "", "x1", "=", "round", "(", "bbx", "+", "0.5", "*", "bbw", "-", "crop_sz_x", "*", "0.5", ")", "\n", "x2", "=", "x1", "+", "crop_sz_x", "\n", "\n", "y1", "=", "round", "(", "bby", "+", "0.5", "*", "bbh", "-", "crop_sz_y", "*", "0.5", ")", "\n", "y2", "=", "y1", "+", "crop_sz_y", "\n", "\n", "# Move box inside image", "\n", "shift_x", "=", "max", "(", "0", ",", "-", "x1", ")", "+", "min", "(", "0", ",", "im_w", "-", "x2", ")", "\n", "x1", "+=", "shift_x", "\n", "x2", "+=", "shift_x", "\n", "\n", "shift_y", "=", "max", "(", "0", ",", "-", "y1", ")", "+", "min", "(", "0", ",", "im_h", "-", "y2", ")", "\n", "y1", "+=", "shift_y", "\n", "y2", "+=", "shift_y", "\n", "\n", "# Crop and resize image", "\n", "im_crop", "=", "im", "[", "y1", ":", "y2", ",", "x1", ":", "x2", ",", ":", "]", "\n", "im_out", "=", "cv", ".", "resize", "(", "im_crop", ",", "tuple", "(", "output_sz", ".", "long", "(", ")", ".", "tolist", "(", ")", ")", ")", "\n", "\n", "crop_box", "=", "torch", ".", "Tensor", "(", "[", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "]", ")", "\n", "return", "im_out", ",", "crop_box", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.transform_box_to_crop": [[188, 207], ["box.clone"], "function", ["None"], ["", "def", "transform_box_to_crop", "(", "box", ":", "torch", ".", "Tensor", ",", "crop_box", ":", "torch", ".", "Tensor", ",", "crop_sz", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\" Transform the box co-ordinates from the original image co-ordinates to the co-ordinates of the cropped image\n    args:\n        box - the box for which the co-ordinates are to be transformed\n        crop_box - bounding box defining the crop in the original image\n        crop_sz - size of the cropped image\n\n    returns:\n        torch.Tensor - transformed co-ordinates of box_in\n    \"\"\"", "\n", "\n", "box_out", "=", "box", ".", "clone", "(", ")", "\n", "box_out", "[", ":", "2", "]", "-=", "crop_box", "[", ":", "2", "]", "\n", "\n", "scale_factor", "=", "crop_sz", "/", "crop_box", "[", "2", ":", "]", "\n", "\n", "box_out", "[", ":", "2", "]", "*=", "scale_factor", "\n", "box_out", "[", "2", ":", "]", "*=", "scale_factor", "\n", "return", "box_out", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.jittered_center_crop_nopad": [[209, 243], ["isinstance", "zip", "torch.Tensor", "processing_utils.sample_target_nopad", "processing_utils.transform_box_to_crop", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.sample_target_nopad", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.transform_box_to_crop"], ["", "def", "jittered_center_crop_nopad", "(", "frames", ",", "box_extract", ",", "box_gt", ",", "search_area_factor", ",", "output_sz", ")", ":", "\n", "    ", "\"\"\" For each frame in frames, extracts a square crop centered at box_extract, of area search_area_factor^2\n    times box_extract area. If the crop area contains regions outside the image, it is shifted / shrunk so that it\n    completely fits inside the image. The extracted crops are then resized to output_sz. Further, the co-ordinates of\n    the box box_gt are transformed to the image crop co-ordinates\n\n    args:\n        frames - list of frames\n        box_extract - list of boxes of same length as frames. The crops are extracted using anno_extract\n        box_gt - list of boxes of same length as frames. The co-ordinates of these boxes are transformed from\n                    image co-ordinates to the crop co-ordinates\n        search_area_factor - The area of the extracted crop is search_area_factor^2 times box_extract area\n        output_sz - The size to which the extracted crops are resized\n\n    returns:\n        list - list of image crops\n        list - box_gt location in the crop co-ordinates\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "output_sz", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "        ", "output_sz", "=", "(", "output_sz", ",", "output_sz", ")", "\n", "\n", "", "frame_crops_boxes", "=", "[", "sample_target_nopad", "(", "f", ",", "a", ",", "search_area_factor", ",", "output_sz", ")", "\n", "for", "f", ",", "a", "in", "zip", "(", "frames", ",", "box_extract", ")", "]", "\n", "\n", "frames_crop", ",", "crop_boxes", "=", "zip", "(", "*", "frame_crops_boxes", ")", "\n", "\n", "crop_sz", "=", "torch", ".", "Tensor", "(", "output_sz", ")", "\n", "\n", "# find the bb location in the crop", "\n", "box_crop", "=", "[", "transform_box_to_crop", "(", "bb_gt", ",", "crop_bb", ",", "crop_sz", ")", "\n", "for", "bb_gt", ",", "crop_bb", "in", "zip", "(", "box_gt", ",", "crop_boxes", ")", "]", "\n", "\n", "return", "frames_crop", ",", "box_crop", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.iou": [[245, 266], ["torch.max", "torch.min", "sz.prod", "reference[].prod", "proposals[].prod"], "function", ["None"], ["", "def", "iou", "(", "reference", ",", "proposals", ")", ":", "\n", "    ", "\"\"\"Compute the IoU between a reference box with multiple proposal boxes.\n\n    args:\n        reference - Tensor of shape (1, 4).\n        proposals - Tensor of shape (num_proposals, 4)\n\n    returns:\n        torch.Tensor - Tensor of shape (num_proposals,) containing IoU of reference box with each proposal box.\n    \"\"\"", "\n", "\n", "# Intersection box", "\n", "tl", "=", "torch", ".", "max", "(", "reference", "[", ":", ",", ":", "2", "]", ",", "proposals", "[", ":", ",", ":", "2", "]", ")", "\n", "br", "=", "torch", ".", "min", "(", "reference", "[", ":", ",", ":", "2", "]", "+", "reference", "[", ":", ",", "2", ":", "]", ",", "proposals", "[", ":", ",", ":", "2", "]", "+", "proposals", "[", ":", ",", "2", ":", "]", ")", "\n", "sz", "=", "(", "br", "-", "tl", ")", ".", "clamp", "(", "0", ")", "\n", "\n", "# Area", "\n", "intersection", "=", "sz", ".", "prod", "(", "dim", "=", "1", ")", "\n", "union", "=", "reference", "[", ":", ",", "2", ":", "]", ".", "prod", "(", "dim", "=", "1", ")", "+", "proposals", "[", ":", ",", "2", ":", "]", ".", "prod", "(", "dim", "=", "1", ")", "-", "intersection", "\n", "\n", "return", "intersection", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.rand_uniform": [[268, 279], ["torch.rand"], "function", ["None"], ["", "def", "rand_uniform", "(", "a", ",", "b", ",", "shape", "=", "1", ")", ":", "\n", "    ", "\"\"\" sample numbers uniformly between a and b.\n    args:\n        a - lower bound\n        b - upper bound\n        shape - shape of the output tensor\n\n    returns:\n        torch.Tensor - tensor of shape=shape\n    \"\"\"", "\n", "return", "(", "b", "-", "a", ")", "*", "torch", ".", "rand", "(", "shape", ")", "+", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.perturb_box": [[281, 341], ["isinstance", "range", "random.choice", "isinstance", "torch.sqrt", "random.gauss", "random.gauss", "random.gauss", "random.gauss", "torch.Tensor().round", "processing_utils.iou", "torch.ones", "box.view", "torch.Tensor().round.view", "processing_utils.rand_uniform", "processing_utils.rand_uniform", "torch.Tensor", "processing_utils.rand_uniform", "processing_utils.rand_uniform"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.iou", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.rand_uniform", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.rand_uniform", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.rand_uniform", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.rand_uniform"], ["", "def", "perturb_box", "(", "box", ",", "min_iou", "=", "0.5", ",", "sigma_factor", "=", "0.1", ")", ":", "\n", "    ", "\"\"\" Perturb the input box by adding gaussian noise to the co-ordinates\n\n     args:\n        box - input box\n        min_iou - minimum IoU overlap between input box and the perturbed box\n        sigma_factor - amount of perturbation, relative to the box size. Can be either a single element, or a list of\n                        sigma_factors, in which case one of them will be uniformly sampled. Further, each of the\n                        sigma_factor element can be either a float, or a tensor\n                        of shape (4,) specifying the sigma_factor per co-ordinate\n\n    returns:\n        torch.Tensor - the perturbed box\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "sigma_factor", ",", "list", ")", ":", "\n", "# If list, sample one sigma_factor as current sigma factor", "\n", "        ", "c_sigma_factor", "=", "random", ".", "choice", "(", "sigma_factor", ")", "\n", "", "else", ":", "\n", "        ", "c_sigma_factor", "=", "sigma_factor", "\n", "\n", "", "if", "not", "isinstance", "(", "c_sigma_factor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "c_sigma_factor", "=", "c_sigma_factor", "*", "torch", ".", "ones", "(", "4", ")", "\n", "\n", "", "perturb_factor", "=", "torch", ".", "sqrt", "(", "box", "[", "2", "]", "*", "box", "[", "3", "]", ")", "*", "c_sigma_factor", "\n", "\n", "# multiple tries to ensure that the perturbed box has iou > min_iou with the input box", "\n", "for", "i_", "in", "range", "(", "100", ")", ":", "\n", "        ", "c_x", "=", "box", "[", "0", "]", "+", "0.5", "*", "box", "[", "2", "]", "\n", "c_y", "=", "box", "[", "1", "]", "+", "0.5", "*", "box", "[", "3", "]", "\n", "c_x_per", "=", "random", ".", "gauss", "(", "c_x", ",", "perturb_factor", "[", "0", "]", ")", "\n", "c_y_per", "=", "random", ".", "gauss", "(", "c_y", ",", "perturb_factor", "[", "1", "]", ")", "\n", "\n", "w_per", "=", "random", ".", "gauss", "(", "box", "[", "2", "]", ",", "perturb_factor", "[", "2", "]", ")", "\n", "h_per", "=", "random", ".", "gauss", "(", "box", "[", "3", "]", ",", "perturb_factor", "[", "3", "]", ")", "\n", "\n", "if", "w_per", "<=", "1", ":", "\n", "            ", "w_per", "=", "box", "[", "2", "]", "*", "rand_uniform", "(", "0.15", ",", "0.5", ")", "\n", "\n", "", "if", "h_per", "<=", "1", ":", "\n", "            ", "h_per", "=", "box", "[", "3", "]", "*", "rand_uniform", "(", "0.15", ",", "0.5", ")", "\n", "\n", "", "box_per", "=", "torch", ".", "Tensor", "(", "[", "c_x_per", "-", "0.5", "*", "w_per", ",", "c_y_per", "-", "0.5", "*", "h_per", ",", "w_per", ",", "h_per", "]", ")", ".", "round", "(", ")", "\n", "\n", "if", "box_per", "[", "2", "]", "<=", "1", ":", "\n", "            ", "box_per", "[", "2", "]", "=", "box", "[", "2", "]", "*", "rand_uniform", "(", "0.15", ",", "0.5", ")", "\n", "\n", "", "if", "box_per", "[", "3", "]", "<=", "1", ":", "\n", "            ", "box_per", "[", "3", "]", "=", "box", "[", "3", "]", "*", "rand_uniform", "(", "0.15", ",", "0.5", ")", "\n", "\n", "", "box_iou", "=", "iou", "(", "box", ".", "view", "(", "1", ",", "4", ")", ",", "box_per", ".", "view", "(", "1", ",", "4", ")", ")", "\n", "\n", "# if there is sufficient overlap, return", "\n", "if", "box_iou", ">", "min_iou", ":", "\n", "            ", "return", "box_per", ",", "box_iou", "\n", "\n", "# else reduce the perturb factor", "\n", "", "perturb_factor", "*=", "0.9", "\n", "\n", "", "return", "box_per", ",", "box_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.gauss_1d": [[343, 346], ["torch.arange().reshape", "torch.exp", "torch.arange", "center.reshape"], "function", ["None"], ["", "def", "gauss_1d", "(", "sz", ",", "sigma", ",", "center", ",", "end_pad", "=", "0", ")", ":", "\n", "    ", "k", "=", "torch", ".", "arange", "(", "-", "(", "sz", "-", "1", ")", "/", "2", ",", "(", "sz", "+", "1", ")", "/", "2", "+", "end_pad", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "return", "torch", ".", "exp", "(", "-", "1.0", "/", "(", "2", "*", "sigma", "**", "2", ")", "*", "(", "k", "-", "center", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.gauss_2d": [[348, 353], ["isinstance", "gauss_1d().reshape", "gauss_1d().reshape", "processing_utils.gauss_1d", "processing_utils.gauss_1d", "sz[].item", "sz[].item"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.gauss_1d", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.gauss_1d"], ["", "def", "gauss_2d", "(", "sz", ",", "sigma", ",", "center", ",", "end_pad", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "    ", "if", "isinstance", "(", "sigma", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "        ", "sigma", "=", "(", "sigma", ",", "sigma", ")", "\n", "", "return", "gauss_1d", "(", "sz", "[", "0", "]", ".", "item", "(", ")", ",", "sigma", "[", "0", "]", ",", "center", "[", ":", ",", "0", "]", ",", "end_pad", "[", "0", "]", ")", ".", "reshape", "(", "center", ".", "shape", "[", "0", "]", ",", "1", ",", "-", "1", ")", "*", "gauss_1d", "(", "sz", "[", "1", "]", ".", "item", "(", ")", ",", "sigma", "[", "1", "]", ",", "center", "[", ":", ",", "1", "]", ",", "end_pad", "[", "1", "]", ")", ".", "reshape", "(", "center", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.gaussian_label_function": [[355, 383], ["isinstance", "isinstance", "isinstance", "torch.Tensor", "torch.Tensor", "processing_utils.gauss_2d", "torch.Tensor.prod().sqrt().item", "torch.Tensor", "int", "int", "torch.Tensor.prod().sqrt", "torch.Tensor.prod"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.processing_utils.gauss_2d"], ["", "def", "gaussian_label_function", "(", "target_bb", ",", "sigma_factor", ",", "kernel_sz", ",", "feat_sz", ",", "image_sz", ",", "end_pad_if_even", "=", "True", ")", ":", "\n", "    ", "\"\"\"Construct Gaussian label function.\"\"\"", "\n", "\n", "if", "isinstance", "(", "kernel_sz", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "        ", "kernel_sz", "=", "(", "kernel_sz", ",", "kernel_sz", ")", "\n", "", "if", "isinstance", "(", "feat_sz", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "        ", "feat_sz", "=", "(", "feat_sz", ",", "feat_sz", ")", "\n", "", "if", "isinstance", "(", "image_sz", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "        ", "image_sz", "=", "(", "image_sz", ",", "image_sz", ")", "\n", "\n", "", "image_sz", "=", "torch", ".", "Tensor", "(", "image_sz", ")", "\n", "feat_sz", "=", "torch", ".", "Tensor", "(", "feat_sz", ")", "\n", "\n", "target_center", "=", "target_bb", "[", ":", ",", "0", ":", "2", "]", "+", "0.5", "*", "target_bb", "[", ":", ",", "2", ":", "4", "]", "\n", "target_center_norm", "=", "(", "target_center", "-", "image_sz", "/", "2", ")", "/", "image_sz", "\n", "\n", "center", "=", "feat_sz", "*", "target_center_norm", "+", "0.5", "*", "torch", ".", "Tensor", "(", "[", "(", "kernel_sz", "[", "0", "]", "+", "1", ")", "%", "2", ",", "(", "kernel_sz", "[", "1", "]", "+", "1", ")", "%", "2", "]", ")", "\n", "\n", "sigma", "=", "sigma_factor", "*", "feat_sz", ".", "prod", "(", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "end_pad_if_even", ":", "\n", "        ", "end_pad", "=", "(", "int", "(", "kernel_sz", "[", "0", "]", "%", "2", "==", "0", ")", ",", "int", "(", "kernel_sz", "[", "1", "]", "%", "2", "==", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "end_pad", "=", "(", "0", ",", "0", ")", "\n", "\n", "", "gauss_label", "=", "gauss_2d", "(", "feat_sz", ",", "sigma", ",", "center", ",", "end_pad", ")", "\n", "return", "gauss_label", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader.LTRLoader.__init__": [[172, 191], ["super().__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "dataset", ",", "training", "=", "True", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "sampler", "=", "None", ",", "batch_sampler", "=", "None", ",", "\n", "num_workers", "=", "0", ",", "epoch_interval", "=", "1", ",", "collate_fn", "=", "None", ",", "stack_dim", "=", "0", ",", "pin_memory", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "timeout", "=", "0", ",", "worker_init_fn", "=", "None", ")", ":", "\n", "        ", "if", "collate_fn", "is", "None", ":", "\n", "            ", "if", "stack_dim", "==", "0", ":", "\n", "                ", "collate_fn", "=", "ltr_collate", "\n", "", "elif", "stack_dim", "==", "1", ":", "\n", "                ", "collate_fn", "=", "ltr_collate_stack1", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Stack dim no supported. Must be 0 or 1.'", ")", "\n", "\n", "", "", "super", "(", "LTRLoader", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "batch_size", ",", "shuffle", ",", "sampler", ",", "batch_sampler", ",", "\n", "num_workers", ",", "collate_fn", ",", "pin_memory", ",", "drop_last", ",", "\n", "timeout", ",", "worker_init_fn", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "epoch_interval", "=", "epoch_interval", "\n", "self", ".", "stack_dim", "=", "stack_dim", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader._check_use_shared_memory": [[9, 16], ["hasattr", "importlib.import_module", "hasattr", "getattr", "getattr", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info"], "function", ["None"], ["def", "_check_use_shared_memory", "(", ")", ":", "\n", "    ", "if", "hasattr", "(", "torch", ".", "utils", ".", "data", ".", "dataloader", ",", "'_use_shared_memory'", ")", ":", "\n", "        ", "return", "getattr", "(", "torch", ".", "utils", ".", "data", ".", "dataloader", ",", "'_use_shared_memory'", ")", "\n", "", "collate_lib", "=", "importlib", ".", "import_module", "(", "'torch.utils.data._utils.collate'", ")", "\n", "if", "hasattr", "(", "collate_lib", ",", "'_use_shared_memory'", ")", ":", "\n", "        ", "return", "getattr", "(", "collate_lib", ",", "'_use_shared_memory'", ")", "\n", "", "return", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader.ltr_collate": [[18, 67], ["type", "isinstance", "TypeError", "loader._check_use_shared_memory", "torch.stack", "torch.stack", "error_msg.format", "sum", "batch[].storage()._new_shared", "batch[].new", "isinstance", "type", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "isinstance", "x.numel", "batch[].storage", "torch.utils.data.dataloader.re.search", "torch.utils.data.dataloader.re.search", "TypeError", "elem.dtype.name.startswith", "list", "torch.DoubleTensor", "torch.DoubleTensor", "isinstance", "error_msg.format", "torch.from_numpy", "torch.from_numpy", "map", "isinstance", "pytracking.TensorDict", "isinstance", "isinstance", "loader.ltr_collate", "loader.ltr_collate", "zip", "pytracking.TensorList", "isinstance", "zip", "loader.ltr_collate", "loader.ltr_collate"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader._check_use_shared_memory", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader.ltr_collate", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader.ltr_collate", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader.ltr_collate", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader.ltr_collate"], ["", "def", "ltr_collate", "(", "batch", ")", ":", "\n", "    ", "\"\"\"Puts each data field into a tensor with outer dimension batch size\"\"\"", "\n", "\n", "error_msg", "=", "\"batch must contain tensors, numbers, dicts or lists; found {}\"", "\n", "elem_type", "=", "type", "(", "batch", "[", "0", "]", ")", "\n", "if", "isinstance", "(", "batch", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "out", "=", "None", "\n", "if", "_check_use_shared_memory", "(", ")", ":", "\n", "# If we're in a background process, concatenate directly into a", "\n", "# shared memory tensor to avoid an extra copy", "\n", "            ", "numel", "=", "sum", "(", "[", "x", ".", "numel", "(", ")", "for", "x", "in", "batch", "]", ")", "\n", "storage", "=", "batch", "[", "0", "]", ".", "storage", "(", ")", ".", "_new_shared", "(", "numel", ")", "\n", "out", "=", "batch", "[", "0", "]", ".", "new", "(", "storage", ")", "\n", "", "return", "torch", ".", "stack", "(", "batch", ",", "0", ",", "out", "=", "out", ")", "\n", "# if batch[0].dim() < 4:", "\n", "#     return torch.stack(batch, 0, out=out)", "\n", "# return torch.cat(batch, 0, out=out)", "\n", "", "elif", "elem_type", ".", "__module__", "==", "'numpy'", "and", "elem_type", ".", "__name__", "!=", "'str_'", "and", "elem_type", ".", "__name__", "!=", "'string_'", ":", "\n", "        ", "elem", "=", "batch", "[", "0", "]", "\n", "if", "elem_type", ".", "__name__", "==", "'ndarray'", ":", "\n", "# array of string classes and object", "\n", "            ", "if", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "re", ".", "search", "(", "'[SaUO]'", ",", "elem", ".", "dtype", ".", "str", ")", "is", "not", "None", ":", "\n", "                ", "raise", "TypeError", "(", "error_msg", ".", "format", "(", "elem", ".", "dtype", ")", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "[", "torch", ".", "from_numpy", "(", "b", ")", "for", "b", "in", "batch", "]", ",", "0", ")", "\n", "", "if", "elem", ".", "shape", "==", "(", ")", ":", "# scalars", "\n", "            ", "py_type", "=", "float", "if", "elem", ".", "dtype", ".", "name", ".", "startswith", "(", "'float'", ")", "else", "int", "\n", "return", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "numpy_type_map", "[", "elem", ".", "dtype", ".", "name", "]", "(", "list", "(", "map", "(", "py_type", ",", "batch", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "int_classes", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "DoubleTensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "string_classes", ")", ":", "\n", "        ", "return", "batch", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "TensorDict", ")", ":", "\n", "        ", "return", "TensorDict", "(", "{", "key", ":", "ltr_collate", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ")", "for", "key", "in", "batch", "[", "0", "]", "}", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "ltr_collate", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ")", "for", "key", "in", "batch", "[", "0", "]", "}", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "TensorList", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "TensorList", "(", "[", "ltr_collate", "(", "samples", ")", "for", "samples", "in", "transposed", "]", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "[", "ltr_collate", "(", "samples", ")", "for", "samples", "in", "transposed", "]", "\n", "", "elif", "batch", "[", "0", "]", "is", "None", ":", "\n", "        ", "return", "batch", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "batch", "[", "0", "]", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader.ltr_collate_stack1": [[69, 118], ["type", "isinstance", "TypeError", "loader._check_use_shared_memory", "torch.stack", "torch.stack", "error_msg.format", "sum", "batch[].storage()._new_shared", "batch[].new", "isinstance", "type", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "isinstance", "x.numel", "batch[].storage", "torch.utils.data.dataloader.re.search", "torch.utils.data.dataloader.re.search", "TypeError", "elem.dtype.name.startswith", "list", "torch.DoubleTensor", "torch.DoubleTensor", "isinstance", "error_msg.format", "torch.from_numpy", "torch.from_numpy", "map", "isinstance", "pytracking.TensorDict", "isinstance", "isinstance", "loader.ltr_collate_stack1", "loader.ltr_collate_stack1", "zip", "pytracking.TensorList", "isinstance", "zip", "loader.ltr_collate_stack1", "loader.ltr_collate_stack1"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader._check_use_shared_memory", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader.ltr_collate_stack1", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader.ltr_collate_stack1", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader.ltr_collate_stack1", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.data.loader.ltr_collate_stack1"], ["", "def", "ltr_collate_stack1", "(", "batch", ")", ":", "\n", "    ", "\"\"\"Puts each data field into a tensor. The tensors are stacked at dim=1 to form the batch\"\"\"", "\n", "\n", "error_msg", "=", "\"batch must contain tensors, numbers, dicts or lists; found {}\"", "\n", "elem_type", "=", "type", "(", "batch", "[", "0", "]", ")", "\n", "if", "isinstance", "(", "batch", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "out", "=", "None", "\n", "if", "_check_use_shared_memory", "(", ")", ":", "\n", "# If we're in a background process, concatenate directly into a", "\n", "# shared memory tensor to avoid an extra copy", "\n", "            ", "numel", "=", "sum", "(", "[", "x", ".", "numel", "(", ")", "for", "x", "in", "batch", "]", ")", "\n", "storage", "=", "batch", "[", "0", "]", ".", "storage", "(", ")", ".", "_new_shared", "(", "numel", ")", "\n", "out", "=", "batch", "[", "0", "]", ".", "new", "(", "storage", ")", "\n", "", "return", "torch", ".", "stack", "(", "batch", ",", "1", ",", "out", "=", "out", ")", "\n", "# if batch[0].dim() < 4:", "\n", "#     return torch.stack(batch, 0, out=out)", "\n", "# return torch.cat(batch, 0, out=out)", "\n", "", "elif", "elem_type", ".", "__module__", "==", "'numpy'", "and", "elem_type", ".", "__name__", "!=", "'str_'", "and", "elem_type", ".", "__name__", "!=", "'string_'", ":", "\n", "        ", "elem", "=", "batch", "[", "0", "]", "\n", "if", "elem_type", ".", "__name__", "==", "'ndarray'", ":", "\n", "# array of string classes and object", "\n", "            ", "if", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "re", ".", "search", "(", "'[SaUO]'", ",", "elem", ".", "dtype", ".", "str", ")", "is", "not", "None", ":", "\n", "                ", "raise", "TypeError", "(", "error_msg", ".", "format", "(", "elem", ".", "dtype", ")", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "[", "torch", ".", "from_numpy", "(", "b", ")", "for", "b", "in", "batch", "]", ",", "1", ")", "\n", "", "if", "elem", ".", "shape", "==", "(", ")", ":", "# scalars", "\n", "            ", "py_type", "=", "float", "if", "elem", ".", "dtype", ".", "name", ".", "startswith", "(", "'float'", ")", "else", "int", "\n", "return", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "numpy_type_map", "[", "elem", ".", "dtype", ".", "name", "]", "(", "list", "(", "map", "(", "py_type", ",", "batch", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "int_classes", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "DoubleTensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "string_classes", ")", ":", "\n", "        ", "return", "batch", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "TensorDict", ")", ":", "\n", "        ", "return", "TensorDict", "(", "{", "key", ":", "ltr_collate_stack1", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ")", "for", "key", "in", "batch", "[", "0", "]", "}", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "ltr_collate_stack1", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ")", "for", "key", "in", "batch", "[", "0", "]", "}", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "TensorList", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "TensorList", "(", "[", "ltr_collate_stack1", "(", "samples", ")", "for", "samples", "in", "transposed", "]", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "[", "ltr_collate_stack1", "(", "samples", ")", "for", "samples", "in", "transposed", "]", "\n", "", "elif", "batch", "[", "0", "]", "is", "None", ":", "\n", "        ", "return", "batch", "\n", "\n", "", "raise", "TypeError", "(", "(", "error_msg", ".", "format", "(", "type", "(", "batch", "[", "0", "]", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.Run.genConfig": [[15, 194], ["os.path.split", "sorted", "numpy.concatenate", "numpy.loadtxt", "sorted", "numpy.loadtxt", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.loadtxt", "os.listdir", "numpy.loadtxt", "numpy.loadtxt", "numpy.loadtxt", "os.listdir", "os.path.splitext", "os.path.splitext"], "function", ["None"], ["def", "genConfig", "(", "seq_path", ",", "set_type", ")", ":", "\n", "\n", "    ", "path", ",", "seqname", "=", "os", ".", "path", ".", "split", "(", "seq_path", ")", "\n", "\n", "\n", "if", "set_type", "==", "'OTB100'", ":", "\n", "############################################  have to refine #############################################", "\n", "\n", "        ", "img_list", "=", "sorted", "(", "[", "seq_path", "+", "'/img/'", "+", "p", "for", "p", "in", "os", ".", "listdir", "(", "seq_path", "+", "'/img'", ")", "if", "os", ".", "path", ".", "splitext", "(", "p", ")", "[", "1", "]", "==", "'.jpg'", "]", ")", "\n", "\n", "if", "(", "seqname", "==", "'Jogging_1'", ")", "or", "(", "seqname", "==", "'Skating2_1'", ")", ":", "\n", "            ", "gt", "=", "np", ".", "loadtxt", "(", "seq_path", "+", "'/groundtruth_rect.1.txt'", ")", "\n", "", "elif", "(", "seqname", "==", "'Jogging_2'", ")", "or", "(", "seqname", "==", "'Skating2_2'", ")", ":", "\n", "            ", "gt", "=", "np", ".", "loadtxt", "(", "seq_path", "+", "'/groundtruth_rect.2.txt'", ")", "\n", "", "elif", "seqname", "==", "'Human4'", ":", "\n", "            ", "gt", "=", "np", ".", "loadtxt", "(", "seq_path", "+", "'/groundtruth_rect.2.txt'", ",", "delimiter", "=", "','", ")", "\n", "", "elif", "(", "seqname", "==", "'BlurBody'", ")", "or", "(", "seqname", "==", "'BlurCar1'", ")", "or", "(", "seqname", "==", "'BlurCar2'", ")", "or", "(", "seqname", "==", "'BlurCar3'", ")", "or", "(", "seqname", "==", "'BlurCar4'", ")", "or", "(", "seqname", "==", "'BlurFace'", ")", "or", "(", "seqname", "==", "'BlurOwl'", ")", "or", "(", "seqname", "==", "'Board'", ")", "or", "(", "seqname", "==", "'Box'", ")", "or", "(", "seqname", "==", "'Car4'", ")", "or", "(", "seqname", "==", "'CarScale'", ")", "or", "(", "seqname", "==", "'ClifBar'", ")", "or", "(", "seqname", "==", "'Couple'", ")", "or", "(", "seqname", "==", "'Crossing'", ")", "or", "(", "seqname", "==", "'Dog'", ")", "or", "(", "seqname", "==", "'FaceOcc1'", ")", "or", "(", "seqname", "==", "'Girl'", ")", "or", "(", "seqname", "==", "'Rubik'", ")", "or", "(", "seqname", "==", "'Singer1'", ")", "or", "(", "seqname", "==", "'Subway'", ")", "or", "(", "seqname", "==", "'Surfer'", ")", "or", "(", "seqname", "==", "'Sylvester'", ")", "or", "(", "seqname", "==", "'Toy'", ")", "or", "(", "seqname", "==", "'Twinnings'", ")", "or", "(", "seqname", "==", "'Vase'", ")", "or", "(", "seqname", "==", "'Walking'", ")", "or", "(", "seqname", "==", "'Walking2'", ")", "or", "(", "seqname", "==", "'Woman'", ")", ":", "\n", "            ", "gt", "=", "np", ".", "loadtxt", "(", "seq_path", "+", "'/groundtruth_rect.txt'", ")", "\n", "", "else", ":", "\n", "            ", "gt", "=", "np", ".", "loadtxt", "(", "seq_path", "+", "'/groundtruth_rect.txt'", ",", "delimiter", "=", "','", ")", "\n", "\n", "", "if", "seqname", "==", "'David'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "299", ":", "]", "\n", "\n", "", "if", "seqname", "==", "'Football1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "74", "]", "\n", "", "if", "seqname", "==", "'Freeman3'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "460", "]", "\n", "", "if", "seqname", "==", "'Freeman4'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "283", "]", "\n", "", "if", "seqname", "==", "'Diving'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "215", "]", "\n", "\n", "", "", "elif", "set_type", "==", "'UAV123'", ":", "\n", "        ", "img_list", "=", "sorted", "(", "[", "seq_path", "+", "'/'", "+", "p", "for", "p", "in", "os", ".", "listdir", "(", "seq_path", ")", "if", "os", ".", "path", ".", "splitext", "(", "p", ")", "[", "1", "]", "==", "'.jpg'", "]", ")", "\n", "\n", "gt", "=", "np", ".", "loadtxt", "(", "seq_path", "+", "'/anno/UAV123/'", "+", "seqname", "+", "'.txt'", ",", "delimiter", "=", "','", ")", "\n", "\n", "\n", "if", "seqname", "==", "'bird1_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "253", "]", "\n", "", "if", "seqname", "==", "'bird1_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "774", ":", "1477", "]", "\n", "", "if", "seqname", "==", "'bird1_3'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1572", ":", "2437", "]", "\n", "\n", "", "if", "seqname", "==", "'car1_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "751", "]", "\n", "", "if", "seqname", "==", "'car1_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "750", ":", "1627", "]", "\n", "", "if", "seqname", "==", "'car1_3'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1626", ":", "2629", "]", "\n", "\n", "", "if", "seqname", "==", "'car6_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "487", "]", "\n", "", "if", "seqname", "==", "'car6_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "486", ":", "1807", "]", "\n", "", "if", "seqname", "==", "'car6_3'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1806", ":", "2953", "]", "\n", "", "if", "seqname", "==", "'car6_4'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "2952", ":", "3925", "]", "\n", "", "if", "seqname", "==", "'car6_5'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "3924", ":", "4861", "]", "\n", "\n", "", "if", "seqname", "==", "'car8_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "1357", "]", "\n", "", "if", "seqname", "==", "'car8_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1356", ":", "2575", "]", "\n", "\n", "", "if", "seqname", "==", "'car16_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "415", "]", "\n", "", "if", "seqname", "==", "'car16_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "414", ":", "1993", "]", "\n", "\n", "\n", "", "if", "seqname", "==", "'group1_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "1333", "]", "\n", "", "if", "seqname", "==", "'group1_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1332", ":", "2515", "]", "\n", "", "if", "seqname", "==", "'group1_3'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "2514", ":", "3925", "]", "\n", "", "if", "seqname", "==", "'group1_4'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "3924", ":", "4873", "]", "\n", "\n", "", "if", "seqname", "==", "'group2_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "907", "]", "\n", "", "if", "seqname", "==", "'group2_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "906", ":", "1771", "]", "\n", "", "if", "seqname", "==", "'group2_3'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1770", ":", "2683", "]", "\n", "\n", "", "if", "seqname", "==", "'group3_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "1567", "]", "\n", "", "if", "seqname", "==", "'group3_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1566", ":", "2827", "]", "\n", "", "if", "seqname", "==", "'group3_3'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "2826", ":", "4369", "]", "\n", "", "if", "seqname", "==", "'group3_4'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "4368", ":", "5527", "]", "\n", "\n", "", "if", "seqname", "==", "'person2_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "1189", "]", "\n", "", "if", "seqname", "==", "'person2_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1188", ":", "2623", "]", "\n", "\n", "", "if", "seqname", "==", "'person4_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "1501", "]", "\n", "", "if", "seqname", "==", "'person4_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1500", ":", "2743", "]", "\n", "\n", "", "if", "seqname", "==", "'person5_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "877", "]", "\n", "", "if", "seqname", "==", "'person5_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "876", ":", "2101", "]", "\n", "\n", "", "if", "seqname", "==", "'person7_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "1249", "]", "\n", "", "if", "seqname", "==", "'person7_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1248", ":", "2065", "]", "\n", "\n", "", "if", "seqname", "==", "'person8_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "1075", "]", "\n", "", "if", "seqname", "==", "'person8_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1074", ":", "1525", "]", "\n", "\n", "", "if", "seqname", "==", "'person12_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "601", "]", "\n", "", "if", "seqname", "==", "'person12_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "600", ":", "1621", "]", "\n", "\n", "", "if", "seqname", "==", "'person14_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "847", "]", "\n", "", "if", "seqname", "==", "'person14_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "846", ":", "1813", "]", "\n", "", "if", "seqname", "==", "'person14_3'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1812", ":", "2923", "]", "\n", "\n", "", "if", "seqname", "==", "'person17_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "1501", "]", "\n", "", "if", "seqname", "==", "'person17_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1500", ":", "2347", "]", "\n", "\n", "", "if", "seqname", "==", "'person19_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "1243", "]", "\n", "", "if", "seqname", "==", "'person19_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1242", ":", "2791", "]", "\n", "", "if", "seqname", "==", "'person19_3'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "2790", ":", "4357", "]", "\n", "\n", "", "if", "seqname", "==", "'truck4_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "577", "]", "\n", "", "if", "seqname", "==", "'truck4_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "576", ":", "1261", "]", "\n", "\n", "", "if", "seqname", "==", "'uav1_1'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "1555", "]", "\n", "", "if", "seqname", "==", "'uav1_2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "1554", ":", "2377", "]", "\n", "", "if", "seqname", "==", "'uav1_3'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "2472", ":", "3469", "]", "\n", "\n", "", "if", "seqname", "==", "'truck2'", ":", "\n", "            ", "img_list", "=", "img_list", "[", "0", ":", "385", "]", "\n", "\n", "##polygon to rect", "\n", "", "", "if", "gt", ".", "shape", "[", "1", "]", "==", "8", ":", "\n", "        ", "x_min", "=", "np", ".", "min", "(", "gt", "[", ":", ",", "[", "0", ",", "2", ",", "4", ",", "6", "]", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "y_min", "=", "np", ".", "min", "(", "gt", "[", ":", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "x_max", "=", "np", ".", "max", "(", "gt", "[", ":", ",", "[", "0", ",", "2", ",", "4", ",", "6", "]", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "y_max", "=", "np", ".", "max", "(", "gt", "[", ":", ",", "[", "1", ",", "3", ",", "5", ",", "7", "]", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "gt", "=", "np", ".", "concatenate", "(", "(", "x_min", ",", "y_min", ",", "x_max", "-", "x_min", ",", "y_max", "-", "y_min", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "img_list", ",", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.vot.VOT.__init__": [[27, 59], ["trax.Server", "vot.VOT._trax.wait", "isinstance", "vot.VOT._trax.status", "Polygon", "Rectangle", "x.path", "len", "vot.VOT.image.items", "Point", "vot.VOT.region.bounds", "Exception"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "region_format", ",", "channels", "=", "None", ")", ":", "\n", "        ", "\"\"\" Constructor\n\n        Args:\n            region_format: Region format options\n        \"\"\"", "\n", "assert", "(", "region_format", "in", "[", "trax", ".", "Region", ".", "RECTANGLE", ",", "trax", ".", "Region", ".", "POLYGON", "]", ")", "\n", "\n", "if", "channels", "is", "None", ":", "\n", "            ", "channels", "=", "[", "'color'", "]", "\n", "", "elif", "channels", "==", "'rgbd'", ":", "\n", "            ", "channels", "=", "[", "'color'", ",", "'depth'", "]", "\n", "", "elif", "channels", "==", "'rgbt'", ":", "\n", "            ", "channels", "=", "[", "'color'", ",", "'ir'", "]", "\n", "", "elif", "channels", "==", "'ir'", ":", "\n", "            ", "channels", "=", "[", "'ir'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Illegal configuration {}.'", ".", "format", "(", "channels", ")", ")", "\n", "\n", "", "self", ".", "_trax", "=", "trax", ".", "Server", "(", "[", "region_format", "]", ",", "[", "trax", ".", "Image", ".", "PATH", "]", ",", "channels", ")", "\n", "\n", "request", "=", "self", ".", "_trax", ".", "wait", "(", ")", "\n", "assert", "(", "request", ".", "type", "==", "'initialize'", ")", "\n", "if", "isinstance", "(", "request", ".", "region", ",", "trax", ".", "Polygon", ")", ":", "\n", "            ", "self", ".", "_region", "=", "Polygon", "(", "[", "Point", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "for", "x", "in", "request", ".", "region", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_region", "=", "Rectangle", "(", "*", "request", ".", "region", ".", "bounds", "(", ")", ")", "\n", "", "self", ".", "_image", "=", "[", "str", "(", "x", ")", "for", "k", ",", "x", "in", "request", ".", "image", ".", "items", "(", ")", "]", "\n", "if", "len", "(", "self", ".", "_image", ")", "==", "1", ":", "\n", "            ", "self", ".", "_image", "=", "self", ".", "_image", "[", "0", "]", "\n", "", "self", ".", "_trax", ".", "status", "(", "request", ".", "region", ")", "\n", "\n", "", "def", "region", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.vot.VOT.region": [[60, 70], ["None"], "methods", ["None"], ["        ", "\"\"\"\n        Send configuration message to the client and receive the initialization\n        region and the path of the first image\n\n        Returns:\n            initialization region\n        \"\"\"", "\n", "\n", "return", "self", ".", "_region", "\n", "\n", "", "def", "report", "(", "self", ",", "region", ",", "confidence", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.vot.VOT.report": [[71, 87], ["isinstance", "vot.VOT._trax.status", "isinstance", "isinstance", "trax.Polygon.create", "trax.Rectangle.create"], "methods", ["None"], ["        ", "\"\"\"\n        Report the tracking results to the client\n\n        Arguments:\n            region: region for the frame\n        \"\"\"", "\n", "assert", "(", "isinstance", "(", "region", ",", "Rectangle", ")", "or", "isinstance", "(", "region", ",", "Polygon", ")", ")", "\n", "if", "isinstance", "(", "region", ",", "Polygon", ")", ":", "\n", "            ", "tregion", "=", "trax", ".", "Polygon", ".", "create", "(", "[", "(", "x", ".", "x", ",", "x", ".", "y", ")", "for", "x", "in", "region", ".", "points", "]", ")", "\n", "", "else", ":", "\n", "            ", "tregion", "=", "trax", ".", "Rectangle", ".", "create", "(", "region", ".", "x", ",", "region", ".", "y", ",", "region", ".", "width", ",", "region", ".", "height", ")", "\n", "", "properties", "=", "{", "}", "\n", "if", "not", "confidence", "is", "None", ":", "\n", "            ", "properties", "[", "'confidence'", "]", "=", "confidence", "\n", "", "self", ".", "_trax", ".", "status", "(", "tregion", ",", "properties", ")", "\n", "\n", "", "def", "frame", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.vot.VOT.frame": [[88, 109], ["hasattr", "vot.VOT._trax.wait", "x.path", "len", "vot.VOT.image.items"], "methods", ["None"], ["        ", "\"\"\"\n        Get a frame (image path) from client\n\n        Returns:\n            absolute path of the image\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"_image\"", ")", ":", "\n", "            ", "image", "=", "self", ".", "_image", "\n", "del", "self", ".", "_image", "\n", "return", "tuple", "(", "image", ")", "\n", "\n", "", "request", "=", "self", ".", "_trax", ".", "wait", "(", ")", "\n", "\n", "if", "request", ".", "type", "==", "'frame'", ":", "\n", "            ", "image", "=", "[", "str", "(", "x", ")", "for", "k", ",", "x", "in", "request", ".", "image", ".", "items", "(", ")", "]", "\n", "if", "len", "(", "image", ")", "==", "1", ":", "\n", "                ", "image", "=", "image", "[", "0", "]", "\n", "", "return", "tuple", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.vot.VOT.quit": [[111, 114], ["hasattr", "vot.VOT._trax.quit"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.vot.VOT.quit"], ["        ", "if", "hasattr", "(", "self", ",", "'_trax'", ")", ":", "\n", "            ", "self", ".", "_trax", ".", "quit", "(", ")", "\n", "\n", "", "", "def", "__del__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.vot.VOT.__del__": [[115, 117], ["vot.VOT.quit"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.vot.VOT.quit"], ["        ", "self", ".", "quit", "(", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.tracker.set_optimizer": [[32, 44], ["model.get_learnable_params", "model.get_learnable_params.items", "torch.SGD", "lr_mult.items", "param_list.append", "k.startswith"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.get_learnable_params"], ["", "def", "run", "(", "self", ",", "seq", ",", "visualization", "=", "None", ",", "debug", "=", "None", ",", "visdom_info", "=", "None", ")", ":", "\n", "        ", "\"\"\"Run tracker on sequence.\n        args:\n            seq: Sequence to run the tracker on.\n            visualization: Set visualization flag (None means default value specified in the parameters).\n            debug: Set debug level (None means default value specified in the parameters).\n        \"\"\"", "\n", "visdom_info", "=", "{", "}", "if", "visdom_info", "is", "None", "else", "visdom_info", "\n", "params", "=", "self", ".", "get_parameters", "(", ")", "\n", "visualization_", "=", "visualization", "\n", "\n", "debug_", "=", "debug", "\n", "if", "debug", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.tracker.train_owm": [[45, 171], ["model.train", "max", "np.random.permutation", "np.random.permutation", "range", "model.named_parameters", "pos_feats.size", "neg_feats.size", "len", "np.concatenate", "len", "np.concatenate", "pos_feats.new().long", "neg_feats.new().long", "torch.autograd.Variable", "torch.autograd.Variable", "model.forward_owm", "criterion", "model.zero_grad", "criterion.backward", "model.named_parameters", "torch.nn.utils.clip_grad_norm", "optimizer.step", "pos_feats.index_select", "neg_feats.index_select", "model.eval", "range", "torch.cat.topk", "batch_neg_feats.index_select.index_select", "model.train", "torch.cat", "torch.mm", "p.sub_", "torch.mm", "model.parameters", "print", "torch.t", "torch.t", "torch.t", "np.random.permutation", "np.random.permutation", "pos_feats.new", "neg_feats.new", "min", "model", "torch.autograd.Variable", "torch.t", "torch.cat", "torch.t", "tracker.train_owm.pro_weight"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.forward_owm", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.backward", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.eval", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters"], ["            ", "debug_", "=", "getattr", "(", "params", ",", "'debug'", ",", "0", ")", "\n", "", "if", "visualization", "is", "None", ":", "\n", "            ", "if", "debug", "is", "None", ":", "\n", "                ", "visualization_", "=", "getattr", "(", "params", ",", "'visualization'", ",", "False", ")", "\n", "", "else", ":", "\n", "                ", "visualization_", "=", "True", "if", "debug", "else", "False", "\n", "\n", "", "", "params", ".", "visualization", "=", "visualization_", "\n", "params", ".", "debug", "=", "debug_", "\n", "params", ".", "visdom_info", "=", "visdom_info", "\n", "\n", "tracker", "=", "self", ".", "tracker_class", "(", "params", ")", "\n", "\n", "output", "=", "tracker", ".", "track_sequence", "(", "seq", ")", "\n", "\n", "return", "output", "\n", "\n", "", "def", "run_video", "(", "self", ",", "videofilepath", ",", "optional_box", "=", "None", ",", "debug", "=", "None", ",", "visdom_info", "=", "None", ")", ":", "\n", "        ", "\"\"\"Run the tracker with the vieofile.\n        args:\n            debug: Debug level.\n        \"\"\"", "\n", "visdom_info", "=", "{", "}", "if", "visdom_info", "is", "None", "else", "visdom_info", "\n", "\n", "params", "=", "self", ".", "get_parameters", "(", ")", "\n", "\n", "debug_", "=", "debug", "\n", "if", "debug", "is", "None", ":", "\n", "            ", "debug_", "=", "getattr", "(", "params", ",", "'debug'", ",", "0", ")", "\n", "", "params", ".", "debug", "=", "debug_", "\n", "params", ".", "visdom_info", "=", "visdom_info", "\n", "\n", "params", ".", "tracker_name", "=", "self", ".", "name", "\n", "params", ".", "param_name", "=", "self", ".", "parameter_name", "\n", "tracker", "=", "self", ".", "tracker_class", "(", "params", ")", "\n", "tracker", ".", "track_videofile", "(", "videofilepath", ",", "optional_box", ")", "\n", "\n", "", "def", "run_webcam", "(", "self", ",", "debug", "=", "None", ",", "visdom_info", "=", "None", ")", ":", "\n", "        ", "\"\"\"Run the tracker with the webcam.\n        args:\n            debug: Debug level.\n        \"\"\"", "\n", "visdom_info", "=", "{", "}", "if", "visdom_info", "is", "None", "else", "visdom_info", "\n", "params", "=", "self", ".", "get_parameters", "(", ")", "\n", "\n", "debug_", "=", "debug", "\n", "if", "debug", "is", "None", ":", "\n", "            ", "debug_", "=", "getattr", "(", "params", ",", "'debug'", ",", "0", ")", "\n", "", "params", ".", "debug", "=", "debug_", "\n", "\n", "params", ".", "tracker_name", "=", "self", ".", "name", "\n", "params", ".", "param_name", "=", "self", ".", "parameter_name", "\n", "params", ".", "visdom_info", "=", "visdom_info", "\n", "\n", "tracker", "=", "self", ".", "tracker_class", "(", "params", ")", "\n", "\n", "tracker", ".", "track_webcam", "(", ")", "\n", "\n", "", "def", "run_vot", "(", "self", ",", "debug", "=", "None", ",", "visdom_info", "=", "None", ")", ":", "\n", "        ", "\"\"\" Run on vot\"\"\"", "\n", "visdom_info", "=", "{", "}", "if", "visdom_info", "is", "None", "else", "visdom_info", "\n", "params", "=", "self", ".", "get_parameters", "(", ")", "\n", "\n", "debug_", "=", "debug", "\n", "if", "debug", "is", "None", ":", "\n", "            ", "debug_", "=", "getattr", "(", "params", ",", "'debug'", ",", "0", ")", "\n", "", "params", ".", "debug", "=", "debug_", "\n", "\n", "params", ".", "tracker_name", "=", "self", ".", "name", "\n", "params", ".", "param_name", "=", "self", ".", "parameter_name", "\n", "params", ".", "run_id", "=", "self", ".", "run_id", "\n", "params", ".", "visdom_info", "=", "visdom_info", "\n", "\n", "tracker", "=", "self", ".", "tracker_class", "(", "params", ")", "\n", "tracker", ".", "initialize_features", "(", ")", "\n", "tracker", ".", "track_vot", "(", ")", "\n", "\n", "", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get parameters.\"\"\"", "\n", "\n", "parameter_file", "=", "'{}/parameters.pkl'", ".", "format", "(", "self", ".", "results_dir", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "parameter_file", ")", ":", "\n", "            ", "return", "pickle", ".", "load", "(", "open", "(", "parameter_file", ",", "'rb'", ")", ")", "\n", "\n", "", "param_module", "=", "importlib", ".", "import_module", "(", "'pytracking.parameter.{}.{}'", ".", "format", "(", "self", ".", "name", ",", "self", ".", "parameter_name", ")", ")", "\n", "params", "=", "param_module", ".", "parameters", "(", ")", "\n", "\n", "if", "self", ".", "run_id", "is", "not", "None", ":", "\n", "            ", "pickle", ".", "dump", "(", "params", ",", "open", "(", "parameter_file", ",", "'wb'", ")", ")", "\n", "\n", "", "return", "params", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.tracker.train": [[172, 261], ["model.train", "max", "np.random.permutation", "np.random.permutation", "range", "model.named_parameters", "pos_feats.size", "neg_feats.size", "len", "np.concatenate", "len", "np.concatenate", "pos_feats.new().long", "neg_feats.new().long", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion", "model.zero_grad", "criterion.backward", "torch.nn.utils.clip_grad_norm", "optimizer.step", "pos_feats.index_select", "neg_feats.index_select", "model.eval", "range", "torch.cat.topk", "batch_neg_feats.index_select.index_select", "model.train", "torch.cat", "model.parameters", "print", "torch.t", "torch.t", "torch.t", "np.random.permutation", "np.random.permutation", "pos_feats.new", "neg_feats.new", "min", "model", "torch.autograd.Variable", "pos_feats.size", "neg_feats.size", "model.data[].clone", "torch.cat", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "model.data[].clone"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.backward", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.eval", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], []], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.tracker.train_original": [[262, 325], ["model.train", "max", "np.random.permutation", "np.random.permutation", "range", "pos_feats.size", "neg_feats.size", "len", "np.concatenate", "len", "np.concatenate", "pos_feats.new().long", "neg_feats.new().long", "torch.autograd.Variable", "torch.autograd.Variable", "model", "model", "criterion", "model.zero_grad", "criterion.backward", "torch.nn.utils.clip_grad_norm", "optimizer.step", "pos_feats.index_select", "neg_feats.index_select", "model.eval", "range", "torch.cat.topk", "batch_neg_feats.index_select.index_select", "model.train", "model.parameters", "print", "np.random.permutation", "np.random.permutation", "pos_feats.new", "neg_feats.new", "min", "model", "torch.autograd.Variable", "pos_feats.size", "neg_feats.size", "model.data[].clone", "torch.cat", "model.data[].clone"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.backward", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.eval", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.atom.default_vot.parameters", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], []], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.tracker.run_mdnet": [[329, 874], ["np.array", "np.zeros", "np.zeros", "np.copy", "np.copy", "np.zeros", "np.zeros", "MDNet", "model.cuda.set_learnable_params", "imgCropper", "BinaryLoss", "tracker.set_optimizer", "tracker.set_optimizer", "tracker.set_optimizer", "time.time", "Image.open().convert", "np.asarray", "gen_samples", "gen_samples", "np.random.permutation", "gen_samples", "np.reshape", "np.reshape", "model.cuda.eval", "range", "np.array", "range", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model.cuda.", "model.cuda.roi_align_model", "extra_pos_feats.view().data.clone.view().data.clone", "model.cuda.roi_align_model", "extra_neg_feats.view().data.clone.view().data.clone", "model.cuda.roi_align_model", "extra_bbreg_feats.view().data.clone.view().data.clone", "torch.cat", "torch.cat", "torch.cat", "np.concatenate", "torch.cuda.empty_cache", "model.cuda.zero_grad", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "tracker.train_owm", "BBRegressor", "BBRegressor.train", "range", "roi_align.modules.roi_align.RoIAlignAdaMax", "model.cuda.cuda", "imgCropper.gpuEnable", "SampleGenerator", "SampleGenerator", "SampleGenerator", "np.asarray", "np.copy", "np.copy", "np.copy", "np.copy", "np.copy", "np.copy", "np.copy", "np.concatenate", "imgCropper.crop_image", "model.cuda.", "np.copy", "np.zeros", "np.copy", "np.repeat", "samples2maskroi", "np.concatenate", "torch.autograd.Variable().cuda", "model.cuda.roi_align_model", "cur_pos_feats.view().data.clone.view().data.clone", "np.zeros", "np.copy", "np.repeat", "samples2maskroi", "np.concatenate", "torch.autograd.Variable().cuda", "model.cuda.roi_align_model", "cur_neg_feats.view().data.clone.view().data.clone", "np.zeros", "np.copy", "np.repeat", "samples2maskroi", "np.concatenate", "torch.autograd.Variable().cuda", "model.cuda.roi_align_model", "cur_bbreg_feats.view().data.clone.view().data.clone", "cur_pos_feats.view().data.clone.size", "torch.cat.size", "np.asarray", "np.random.shuffle", "torch.cat.size", "np.asarray", "np.random.shuffle", "torch.cat.size", "np.asarray", "np.random.shuffle", "np.copy", "np.copy", "np.clip", "imgCropper.crop_image", "cur_extra_cropped_image.detach.detach", "gen_samples", "gen_samples", "gen_samples", "np.copy", "np.repeat", "samples2maskroi", "np.concatenate", "np.copy", "np.repeat", "samples2maskroi", "np.concatenate", "np.copy", "np.repeat", "samples2maskroi", "np.concatenate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.cat.size", "np.asarray", "np.random.shuffle", "torch.cat.size", "np.asarray", "np.random.shuffle", "torch.cat.size", "np.asarray", "np.random.shuffle", "time.time", "matplotlib.figure", "matplotlib.Axes", "plt.Axes.set_axis_off", "plt.figure.add_axes", "plt.Axes.imshow", "matplotlib.Rectangle", "plt.Axes.add_patch", "len", "time.time", "Image.open().convert", "np.asarray", "gen_samples", "np.asarray", "imgCropper.crop_image", "model.cuda.eval", "model.cuda.", "np.copy", "np.zeros", "np.copy", "np.repeat", "samples2maskroi", "np.concatenate", "torch.autograd.Variable().cuda", "model.cuda.roi_align_model", "sample_feats.view().clone.view().clone", "model.cuda.", "sample_scores[].topk", "top_idx.data.cpu().numpy.data.cpu().numpy", "top_scores.data.mean", "samples[].mean", "len", "len", "len", "len", "len", "Image.open", "np.reshape", "np.reshape", "float", "np.reshape", "np.reshape", "float", "torch.cat", "torch.cat", "torch.cat", "np.concatenate", "range", "range", "range", "np.clip", "float", "np.reshape", "SampleGenerator", "SampleGenerator", "SampleGenerator", "np.ones", "np.reshape", "np.ones", "np.reshape", "np.ones", "np.reshape", "np.copy", "np.copy", "np.copy", "np.copy", "torch.cat", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.eye().type", "torch.eye().type", "torch.eye().type", "range", "range", "torch.cat.index_select", "range", "torch.cat.index_select", "matplotlib.Rectangle", "plt.Axes.add_patch", "tuple", "matplotlib.pause", "matplotlib.draw", "plt.figure.savefig", "SampleGenerator", "np.reshape", "np.reshape", "BBRegressor.predict", "bbreg.predict.mean", "gen_samples", "gen_samples", "np.reshape", "np.reshape", "range", "pos_feats_all.append", "neg_feats_all.append", "min", "torch.stack().view", "torch.stack().view", "tracker.train", "time.time", "ax.imshow.set_data", "plt.Rectangle.set_xy", "plt.Rectangle.set_width", "plt.Rectangle.set_height", "overlap_ratio", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat.size", "torch.cat.size", "torch.cat.size", "np.random.randn", "np.random.randn", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "extra_pos_feats.view().data.clone.view", "extra_neg_feats.view().data.clone.view", "extra_bbreg_feats.view().data.clone.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.size", "torch.cat.size", "torch.from_numpy().cuda", "torch.cat.size", "torch.from_numpy().cuda", "tuple", "os.path.join", "Image.open", "torch.autograd.Variable", "sample_feats.view().clone.view", "top_idx.data.cpu().numpy.data.cpu", "SampleGenerator", "SampleGenerator", "np.asarray", "np.copy", "imgCropper.crop_image", "model.cuda.", "np.copy", "np.zeros", "np.copy", "np.repeat", "samples2maskroi", "np.concatenate", "torch.autograd.Variable().cuda", "model.cuda.roi_align_model", "cur_pos_feats.view().data.clone.view().data.clone", "np.zeros", "np.copy", "np.repeat", "samples2maskroi", "np.concatenate", "torch.autograd.Variable().cuda", "model.cuda.roi_align_model", "cur_neg_feats.view().data.clone.view().data.clone", "cur_pos_feats.view().data.clone.size", "torch.cat.size", "np.asarray", "np.random.shuffle", "torch.cat.index_select", "torch.cat.size", "np.asarray", "np.random.shuffle", "torch.cat.index_select", "len", "len", "len", "min", "torch.stack().view", "torch.stack().view", "tracker.train_owm", "plt.Rectangle.set_xy", "plt.Rectangle.set_width", "plt.Rectangle.set_height", "matplotlib.pause", "matplotlib.draw", "plt.figure.savefig", "print", "print", "torch.from_numpy", "cur_pos_feats.view().data.clone.view", "torch.from_numpy", "cur_neg_feats.view().data.clone.view", "torch.from_numpy", "cur_bbreg_feats.view().data.clone.view", "np.copy", "np.copy", "np.copy", "np.copy", "np.concatenate.astype", "np.concatenate.astype", "np.concatenate.astype", "extra_pos_feats.view().data.clone.size", "extra_neg_feats.view().data.clone.size", "extra_bbreg_feats.view().data.clone.size", "torch.eye", "torch.eye", "torch.eye", "torch.from_numpy", "sample_feats.view().clone.size", "np.reshape", "np.reshape", "float", "np.reshape", "torch.cat", "torch.cat", "range", "torch.from_numpy().cuda", "range", "torch.from_numpy().cuda", "torch.stack", "torch.stack", "len", "os.path.join", "Variable().cuda.astype", "cur_pos_feats.view().data.clone.size", "Variable().cuda.astype", "cur_neg_feats.view().data.clone.size", "Variable().cuda.astype", "cur_bbreg_feats.view().data.clone.size", "torch.from_numpy", "torch.from_numpy", "Variable().cuda.astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat.size", "torch.cat.size", "torch.stack", "torch.stack", "torch.from_numpy", "cur_pos_feats.view().data.clone.view", "torch.from_numpy", "cur_neg_feats.view().data.clone.view", "torch.from_numpy", "torch.from_numpy", "len", "len", "Variable().cuda.astype", "cur_pos_feats.view().data.clone.size", "Variable().cuda.astype", "cur_neg_feats.view().data.clone.size", "overlap_ratio"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.set_learnable_params", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.tracker.set_optimizer", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.tracker.set_optimizer", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.tracker.set_optimizer", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.gen_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.gen_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.gen_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.eval", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.tracker.train_owm", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.img_cropper.imgCropper.gpuEnable", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.crop_image", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.samples2maskroi", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.samples2maskroi", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.samples2maskroi", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.crop_image", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.gen_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.gen_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.gen_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.samples2maskroi", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.samples2maskroi", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.samples2maskroi", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.gen_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.crop_image", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.eval", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.samples2maskroi", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.predict", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.gen_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.gen_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.overlap_ratio", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.crop_image", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.samples2maskroi", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.samples2maskroi", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.tracker.train_owm", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.overlap_ratio"], []], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.RLS-RTMDNet.python_RLS_RTMDNet.get_axis_aligned_bbox": [[31, 46], ["numpy.array", "numpy.mean", "numpy.mean", "min", "max", "min", "max", "numpy.sqrt", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["def", "get_axis_aligned_bbox", "(", "region", ")", ":", "\n", "    ", "region", "=", "np", ".", "array", "(", "[", "region", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "region", "[", "0", "]", "[", "0", "]", "[", "1", "]", ",", "region", "[", "0", "]", "[", "1", "]", "[", "0", "]", ",", "region", "[", "0", "]", "[", "1", "]", "[", "1", "]", ",", "\n", "region", "[", "0", "]", "[", "2", "]", "[", "0", "]", ",", "region", "[", "0", "]", "[", "2", "]", "[", "1", "]", ",", "region", "[", "0", "]", "[", "3", "]", "[", "0", "]", ",", "region", "[", "0", "]", "[", "3", "]", "[", "1", "]", "]", ")", "\n", "cx", "=", "np", ".", "mean", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "cy", "=", "np", ".", "mean", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "x1", "=", "min", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "x2", "=", "max", "(", "region", "[", "0", ":", ":", "2", "]", ")", "\n", "y1", "=", "min", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "y2", "=", "max", "(", "region", "[", "1", ":", ":", "2", "]", ")", "\n", "A1", "=", "np", ".", "linalg", ".", "norm", "(", "region", "[", "0", ":", "2", "]", "-", "region", "[", "2", ":", "4", "]", ")", "*", "np", ".", "linalg", ".", "norm", "(", "region", "[", "2", ":", "4", "]", "-", "region", "[", "4", ":", "6", "]", ")", "\n", "A2", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "A1", "/", "A2", ")", "\n", "w", "=", "s", "*", "(", "x2", "-", "x1", ")", "+", "1", "\n", "h", "=", "s", "*", "(", "y2", "-", "y1", ")", "+", "1", "\n", "return", "cx", ",", "cy", ",", "w", ",", "h", "\n", "# start to track", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.img_cropper.imgCropper.__init__": [[16, 21], ["torch.Module.__init__", "roi_align.modules.roi_align.RoIAlign"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", ")", ":", "\n", "        ", "super", "(", "imgCropper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "isCuda", "=", "False", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "roi_align_model", "=", "RoIAlign", "(", "img_size", ",", "img_size", ",", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.img_cropper.imgCropper.gpuEnable": [[22, 25], ["img_cropper.imgCropper.roi_align_model.cuda"], "methods", ["None"], ["", "def", "gpuEnable", "(", "self", ")", ":", "\n", "        ", "self", ".", "roi_align_model", "=", "self", ".", "roi_align_model", ".", "cuda", "(", ")", "\n", "self", ".", "isCuda", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.img_cropper.imgCropper.forward": [[26, 29], ["img_cropper.imgCropper.roi_align_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "roi", ")", ":", "\n", "        ", "aligned_image_var", "=", "self", ".", "roi_align_model", "(", "image", ",", "roi", ")", "\n", "return", "aligned_image_var", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.img_cropper.imgCropper.crop_image": [[30, 53], ["numpy.reshape", "cur_image_var.cuda.cuda.transpose", "cur_image_var.cuda.cuda.astype", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.copy", "numpy.concatenate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "img_cropper.imgCropper.forward", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "cur_image_var.cuda.cuda.cuda", "roi.cuda.cuda.cuda", "numpy.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.forward"], ["", "def", "crop_image", "(", "self", ",", "image", ",", "box", ",", "result_size", ")", ":", "\n", "## constraint = several box from common 1 image", "\n", "        ", "ishape", "=", "image", ".", "shape", "\n", "cur_image_var", "=", "np", ".", "reshape", "(", "image", ",", "(", "1", ",", "ishape", "[", "0", "]", ",", "ishape", "[", "1", "]", ",", "ishape", "[", "2", "]", ")", ")", "\n", "cur_image_var", "=", "cur_image_var", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "cur_image_var", "=", "cur_image_var", ".", "astype", "(", "'float32'", ")", "\n", "cur_image_var", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "cur_image_var", ")", ".", "float", "(", ")", ")", "\n", "\n", "\n", "roi", "=", "np", ".", "copy", "(", "box", ")", "\n", "roi", "[", ":", ",", "2", ":", "4", "]", "+=", "roi", "[", ":", ",", "0", ":", "2", "]", "\n", "roi", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "roi", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "roi", ")", ",", "axis", "=", "1", ")", "\n", "roi", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "roi", ")", ".", "float", "(", ")", ")", "\n", "\n", "if", "self", ".", "isCuda", ":", "\n", "            ", "cur_image_var", "=", "cur_image_var", ".", "cuda", "(", ")", "\n", "roi", "=", "roi", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "roi_align_model", ".", "aligned_width", "=", "result_size", "[", "0", "]", "\n", "self", ".", "roi_align_model", ".", "aligned_height", "=", "result_size", "[", "1", "]", "\n", "cropped_image", "=", "self", ".", "forward", "(", "cur_image_var", ",", "roi", ")", "\n", "\n", "return", "cropped_image", ",", "cur_image_var", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.img_cropper.imgCropper.crop_several_image": [[54, 82], ["torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.time", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "print", "cur_images.cuda.cuda.size", "numpy.array", "numpy.reshape", "numpy.concatenate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "img_cropper.imgCropper.forward", "len", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.arange", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "sample_rois.cuda.cuda.cuda", "cur_images.cuda.cuda.cuda", "len", "len", "sample_rois.cuda.cuda.astype", "time.time"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.forward"], ["", "def", "crop_several_image", "(", "self", ",", "img_list", ",", "target_list", ")", ":", "\n", "## constraint = one to one matching between image and target", "\n", "## exception handling", "\n", "        ", "assert", "(", "len", "(", "target_list", ")", "==", "len", "(", "img_list", ")", ")", "\n", "\n", "## image crop", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "cur_images", "=", "torch", ".", "squeeze", "(", "torch", ".", "stack", "(", "img_list", ",", "0", ")", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "print", "(", "'10 image stacking time:{}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n", "ishape", "=", "cur_images", ".", "size", "(", ")", "\n", "\n", "# Extract sample features and get target location", "\n", "sample_rois", "=", "np", ".", "array", "(", "target_list", ")", "\n", "sample_rois", "[", ":", ",", "2", ":", "4", "]", "+=", "sample_rois", "[", ":", ",", "0", ":", "2", "]", "\n", "batch_num", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "0", ",", "len", "(", "sample_rois", ")", ")", ",", "(", "len", "(", "sample_rois", ")", ",", "1", ")", ")", "\n", "sample_rois", "=", "np", ".", "concatenate", "(", "(", "batch_num", ",", "sample_rois", ")", ",", "axis", "=", "1", ")", "\n", "sample_rois", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "sample_rois", ".", "astype", "(", "'float32'", ")", ")", ")", "\n", "if", "self", ".", "isCuda", ":", "\n", "            ", "sample_rois", "=", "sample_rois", ".", "cuda", "(", ")", "\n", "cur_images", "=", "cur_images", ".", "cuda", "(", ")", "\n", "\n", "", "cropped_images", "=", "self", ".", "forward", "(", "cur_images", ",", "sample_rois", ")", "\n", "\n", "\n", "return", "cropped_images", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.__init__": [[8, 14], ["sklearn.linear_model.Ridge"], "methods", ["None"], []], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.train": [[15, 34], ["X.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.copy", "numpy.copy", "utils.overlap_ratio", "bbreg.BBRegressor.get_examples", "bbreg.BBRegressor.model.fit", "numpy.prod", "numpy.prod", "X.cpu().numpy.cpu().numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.overlap_ratio", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.get_examples"], ["\n", "# Run network to obtain IoU prediction for each proposal in 'test_proposals'", "\n", "iou_pred", "=", "self", ".", "net", "(", "data", "[", "'train_images'", "]", ",", "data", "[", "'test_images'", "]", ",", "data", "[", "'train_anno'", "]", ",", "data", "[", "'test_proposals'", "]", ")", "\n", "\n", "iou_pred", "=", "iou_pred", ".", "view", "(", "-", "1", ",", "iou_pred", ".", "shape", "[", "2", "]", ")", "\n", "iou_gt", "=", "data", "[", "'proposal_iou'", "]", ".", "view", "(", "-", "1", ",", "data", "[", "'proposal_iou'", "]", ".", "shape", "[", "2", "]", ")", "\n", "\n", "# Compute loss", "\n", "loss", "=", "self", ".", "objective", "(", "iou_pred", ",", "iou_gt", ")", "\n", "\n", "# Return training stats", "\n", "stats", "=", "{", "'Loss/total'", ":", "loss", ".", "item", "(", ")", ",", "\n", "'Loss/iou'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n", "return", "loss", ",", "stats", "", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.predict": [[35, 57], ["X.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.copy", "bbreg.BBRegressor.model.predict", "utils.overlap_ratio", "numpy.logical_not", "numpy.maximum", "numpy.minimum", "numpy.exp", "numpy.prod", "numpy.prod", "X.cpu().numpy.cpu().numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.predict", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.overlap_ratio"], []], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.bbreg.BBRegressor.get_examples": [[58, 67], ["numpy.log", "numpy.concatenate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.LRN.__init__": [[33, 46], ["torch.Module.__init__", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "local_size", "=", "1", ",", "alpha", "=", "0.0001", ",", "beta", "=", "0.75", ",", "ACROSS_CHANNELS", "=", "False", ")", ":", "\n", "        ", "super", "(", "LRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ACROSS_CHANNELS", "=", "ACROSS_CHANNELS", "\n", "if", "self", ".", "ACROSS_CHANNELS", ":", "\n", "            ", "self", ".", "average", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "(", "local_size", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "int", "(", "(", "local_size", "-", "1.0", ")", "/", "2", ")", ",", "0", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "average", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "local_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "int", "(", "(", "local_size", "-", "1.0", ")", "/", "2", ")", ")", "\n", "", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.LRN.forward": [[47, 58], ["x.div.div.div", "x.div.div.pow().unsqueeze", "model.LRN.average().squeeze", "div.mul().add().pow.mul().add().pow.mul().add().pow", "x.div.div.pow", "model.LRN.average", "div.mul().add().pow.mul().add().pow.mul().add().pow", "x.div.div.pow", "model.LRN.average", "div.mul().add().pow.mul().add().pow.mul().add", "div.mul().add().pow.mul().add().pow.mul().add", "div.mul().add().pow.mul().add().pow.mul", "div.mul().add().pow.mul().add().pow.mul"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.complex.div"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "ACROSS_CHANNELS", ":", "\n", "            ", "div", "=", "x", ".", "pow", "(", "2", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div", "=", "self", ".", "average", "(", "div", ")", ".", "squeeze", "(", "1", ")", "\n", "div", "=", "div", ".", "mul", "(", "self", ".", "alpha", ")", ".", "add", "(", "2.0", ")", ".", "pow", "(", "self", ".", "beta", ")", "\n", "", "else", ":", "\n", "            ", "div", "=", "x", ".", "pow", "(", "2", ")", "\n", "div", "=", "self", ".", "average", "(", "div", ")", "\n", "div", "=", "div", ".", "mul", "(", "self", ".", "alpha", ")", ".", "add", "(", "2.0", ")", ".", "pow", "(", "self", ".", "beta", ")", "\n", "", "x", "=", "x", ".", "div", "(", "div", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.__init__": [[61, 100], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "roi_align.modules.roi_align.RoIAlignMax", "model.MDNet.build_param_dict", "collections.OrderedDict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.MDNet.load_model", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "range", "os.path.splitext", "model.MDNet.load_mat_model", "RuntimeError", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "os.path.splitext", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.LRN", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.LRN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.build_param_dict", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.load_model", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.load_mat_model"], ["    ", "def", "__init__", "(", "self", ",", "model_path", "=", "None", ",", "K", "=", "1", ")", ":", "\n", "        ", "super", "(", "MDNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv1'", ",", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "3", ",", "96", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "LRN", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", ")", ")", ",", "\n", "(", "'conv2'", ",", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "96", ",", "256", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "LRN", "(", ")", ",", "\n", ")", ")", ",", "\n", "\n", "(", "'conv3'", ",", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", ")", ",", "\n", "(", "'fc4'", ",", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "3", "*", "3", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", ",", "\n", "(", "'fc5'", ",", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", ")", "]", ")", ")", "\n", "\n", "self", ".", "branches", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "2", ")", ")", "for", "_", "in", "range", "(", "K", ")", "]", ")", "\n", "\n", "self", ".", "roi_align_model", "=", "RoIAlignMax", "(", "3", ",", "3", ",", "1.", "/", "8", ")", "\n", "\n", "self", ".", "receptive_field", "=", "75.", "# it is receptive fieald that a element of feat_map covers. feat_map is bottom layer of ROI_align_layer", "\n", "\n", "if", "model_path", "is", "not", "None", ":", "\n", "            ", "if", "os", ".", "path", ".", "splitext", "(", "model_path", ")", "[", "1", "]", "==", "'.pth'", ":", "\n", "                ", "self", ".", "load_model", "(", "model_path", ")", "\n", "", "elif", "os", ".", "path", ".", "splitext", "(", "model_path", ")", "[", "1", "]", "==", "'.mat'", ":", "\n", "                ", "self", ".", "load_mat_model", "(", "model_path", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Unkown model format: %s\"", "%", "(", "model_path", ")", ")", "\n", "", "", "self", ".", "build_param_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.build_param_dict": [[101, 107], ["collections.OrderedDict", "model.MDNet.layers.named_children", "enumerate", "model.append_params", "model.append_params"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.append_params", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.append_params"], ["", "def", "build_param_dict", "(", "self", ")", ":", "\n", "        ", "self", ".", "params", "=", "OrderedDict", "(", ")", "\n", "for", "name", ",", "module", "in", "self", ".", "layers", ".", "named_children", "(", ")", ":", "\n", "            ", "append_params", "(", "self", ".", "params", ",", "module", ",", "name", ")", "\n", "", "for", "k", ",", "module", "in", "enumerate", "(", "self", ".", "branches", ")", ":", "\n", "            ", "append_params", "(", "self", ".", "params", ",", "module", ",", "'fc6_%d'", "%", "(", "k", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.set_learnable_params": [[108, 114], ["model.MDNet.params.items", "any", "k.startswith"], "methods", ["None"], ["", "", "def", "set_learnable_params", "(", "self", ",", "layers", ")", ":", "\n", "        ", "for", "k", ",", "p", "in", "self", ".", "params", ".", "items", "(", ")", ":", "\n", "            ", "if", "any", "(", "[", "k", ".", "startswith", "(", "l", ")", "for", "l", "in", "layers", "]", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "True", "\n", "", "else", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.get_learnable_params": [[116, 122], ["collections.OrderedDict", "model.MDNet.params.items"], "methods", ["None"], ["", "", "", "def", "get_learnable_params", "(", "self", ")", ":", "\n", "        ", "params", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "p", "in", "self", ".", "params", ".", "items", "(", ")", ":", "\n", "            ", "if", "p", ".", "requires_grad", ":", "\n", "                ", "params", "[", "k", "]", "=", "p", "\n", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.forward": [[123, 140], ["model.MDNet.layers.named_children", "module", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "k", "=", "0", ",", "in_layer", "=", "'conv1'", ",", "out_layer", "=", "'fc6'", ")", ":", "\n", "\n", "        ", "run", "=", "False", "\n", "for", "name", ",", "module", "in", "self", ".", "layers", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "name", "==", "in_layer", ":", "\n", "                ", "run", "=", "True", "\n", "", "if", "run", ":", "\n", "                ", "x", "=", "module", "(", "x", ")", "\n", "if", "name", "==", "out_layer", ":", "\n", "                    ", "return", "x", "\n", "\n", "\n", "", "", "", "x", "=", "self", ".", "branches", "[", "k", "]", "(", "x", ")", "\n", "if", "out_layer", "==", "'fc6'", ":", "\n", "            ", "return", "x", "\n", "", "elif", "out_layer", "==", "'fc6_softmax'", ":", "\n", "            ", "return", "F", ".", "softmax", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.forward_owm": [[141, 161], ["model.MDNet.layers.named_children", "h_list.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "h_list.append", "module", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module.view", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "module.size", "module.view", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat().cuda", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "module.size", "module.size", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones().repeat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "module.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["", "", "def", "forward_owm", "(", "self", ",", "x", ",", "k", "=", "0", ",", "in_layer", "=", "'conv1'", ",", "out_layer", "=", "'fc6'", ")", ":", "\n", "\n", "        ", "run", "=", "False", "\n", "h_list", "=", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "layers", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "name", "==", "in_layer", ":", "\n", "                ", "run", "=", "True", "\n", "", "if", "run", ":", "\n", "#print x.size(0)", "\n", "#print torch.cat((x.view(x.size(0), -1), torch.ones(1, 1).repeat(x.size(0), 1).cuda()), 1)", "\n", "                ", "h_list", ".", "append", "(", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "torch", ".", "ones", "(", "1", ",", "1", ")", ".", "repeat", "(", "x", ".", "size", "(", "0", ")", ",", "1", ")", ".", "cuda", "(", ")", ")", ",", "1", ")", ",", "0", ",", "True", ")", ")", "\n", "x", "=", "module", "(", "x", ")", "\n", "if", "name", "==", "out_layer", ":", "\n", "                    ", "return", "x", "\n", "", "", "", "h_list", ".", "append", "(", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "torch", ".", "ones", "(", "1", ",", "1", ")", ".", "repeat", "(", "x", ".", "size", "(", "0", ")", ",", "1", ")", ".", "cuda", "(", ")", ")", ",", "1", ")", ",", "0", ",", "True", ")", ")", "\n", "x", "=", "self", ".", "branches", "[", "k", "]", "(", "x", ")", "\n", "if", "out_layer", "==", "'fc6'", ":", "\n", "            ", "return", "x", ",", "h_list", "\n", "", "elif", "out_layer", "==", "'fc6_softmax'", ":", "\n", "            ", "return", "F", ".", "softmax", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.load_model": [[162, 166], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.MDNet.layers.load_state_dict"], "methods", ["None"], ["", "", "def", "load_model", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "states", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "shared_layers", "=", "states", "[", "'shared_layers'", "]", "\n", "self", ".", "layers", ".", "load_state_dict", "(", "shared_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.load_mat_model": [[167, 176], ["scipy.io.loadmat", "range", "list", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "[].item", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.libs.tensorlist.TensorList.list"], ["", "def", "load_mat_model", "(", "self", ",", "matfile", ")", ":", "\n", "        ", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "matfile", ")", "\n", "mat_layers", "=", "list", "(", "mat", "[", "'layers'", "]", ")", "[", "0", "]", "\n", "\n", "# copy conv weights", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "weight", ",", "bias", "=", "mat_layers", "[", "i", "*", "4", "]", "[", "'weights'", "]", ".", "item", "(", ")", "[", "0", "]", "\n", "self", ".", "layers", "[", "i", "]", "[", "0", "]", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weight", ",", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "self", ".", "layers", "[", "i", "]", "[", "0", "]", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "bias", "[", ":", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.MDNet.trainSpatialTransform": [[177, 180], ["None"], "methods", ["None"], ["", "", "def", "trainSpatialTransform", "(", "self", ",", "image", ",", "bb", ")", ":", "\n", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.BinaryLoss.__init__": [[183, 185], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BinaryLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.BinaryLoss.forward": [[186, 192], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pos_loss.sum", "neg_loss.sum", "pos_loss.size", "neg_loss.size"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["", "def", "forward", "(", "self", ",", "pos_score", ",", "neg_score", ")", ":", "\n", "        ", "pos_loss", "=", "-", "F", ".", "log_softmax", "(", "pos_score", ")", "[", ":", ",", "1", "]", "\n", "neg_loss", "=", "-", "F", ".", "log_softmax", "(", "neg_score", ")", "[", ":", ",", "0", "]", "\n", "\n", "loss", "=", "(", "pos_loss", ".", "sum", "(", ")", "+", "neg_loss", ".", "sum", "(", ")", ")", "/", "(", "pos_loss", ".", "size", "(", "0", ")", "+", "neg_loss", ".", "size", "(", "0", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.Accuracy.__call__": [[195, 204], ["pos_acc.item", "neg_acc.item", "pos_score.size", "neg_score.size"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["    ", "def", "__call__", "(", "self", ",", "pos_score", ",", "neg_score", ")", ":", "\n", "\n", "        ", "pos_correct", "=", "(", "pos_score", "[", ":", ",", "1", "]", ">", "pos_score", "[", ":", ",", "0", "]", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "neg_correct", "=", "(", "neg_score", "[", ":", ",", "1", "]", "<", "neg_score", "[", ":", ",", "0", "]", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "\n", "pos_acc", "=", "pos_correct", "/", "(", "pos_score", ".", "size", "(", "0", ")", "+", "1e-8", ")", "\n", "neg_acc", "=", "neg_correct", "/", "(", "neg_score", ".", "size", "(", "0", ")", "+", "1e-8", ")", "\n", "\n", "return", "pos_acc", ".", "item", "(", ")", ",", "neg_acc", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.Precision.__call__": [[207, 214], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "prec.item", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "pos_score.size", "pos_score.size", "pos_score.size"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["    ", "def", "__call__", "(", "self", ",", "pos_score", ",", "neg_score", ")", ":", "\n", "\n", "        ", "scores", "=", "torch", ".", "cat", "(", "(", "pos_score", "[", ":", ",", "1", "]", ",", "neg_score", "[", ":", ",", "1", "]", ")", ",", "0", ")", "\n", "topk", "=", "torch", ".", "topk", "(", "scores", ",", "pos_score", ".", "size", "(", "0", ")", ")", "[", "1", "]", "\n", "prec", "=", "(", "topk", "<", "pos_score", ".", "size", "(", "0", ")", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "/", "(", "pos_score", ".", "size", "(", "0", ")", "+", "1e-8", ")", "\n", "\n", "return", "prec", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.model.append_params": [[17, 31], ["module.children", "child._parameters.items", "isinstance", "RuntimeError"], "function", ["None"], ["def", "append_params", "(", "params", ",", "module", ",", "prefix", ")", ":", "\n", "    ", "for", "child", "in", "module", ".", "children", "(", ")", ":", "\n", "        ", "for", "k", ",", "p", "in", "child", ".", "_parameters", ".", "items", "(", ")", ":", "\n", "            ", "if", "p", "is", "None", ":", "continue", "\n", "\n", "if", "isinstance", "(", "child", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "name", "=", "prefix", "+", "'_bn_'", "+", "k", "\n", "", "else", ":", "\n", "                ", "name", "=", "prefix", "+", "'_'", "+", "k", "\n", "\n", "", "if", "name", "not", "in", "params", ":", "\n", "                ", "params", "[", "name", "]", "=", "p", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Duplicated param name: %s\"", "%", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.data_prov.RegionDataset.__init__": [[23, 54], ["numpy.array", "numpy.random.permutation", "PIL.Image.open().convert", "sample_generator.SampleGenerator", "sample_generator.SampleGenerator", "sample_generator.SampleGenerator", "img_cropper.imgCropper", "data_prov.RegionDataset.img_crop_model.eval", "len", "data_prov.RegionDataset.img_crop_model.gpuEnable", "os.path.join", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.actors.base_actor.BaseActor.eval", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.img_cropper.imgCropper.gpuEnable"], ["    ", "def", "__init__", "(", "self", ",", "img_dir", ",", "img_list", ",", "gt", ",", "receptive_field", ",", "opts", ")", ":", "\n", "\n", "        ", "self", ".", "img_list", "=", "np", ".", "array", "(", "[", "os", ".", "path", ".", "join", "(", "img_dir", ",", "img", ")", "for", "img", "in", "img_list", "]", ")", "\n", "self", ".", "gt", "=", "gt", "\n", "\n", "self", ".", "batch_frames", "=", "pretrain_opts", "[", "'batch_frames'", "]", "\n", "self", ".", "batch_pos", "=", "pretrain_opts", "[", "'batch_pos'", "]", "\n", "self", ".", "batch_neg", "=", "pretrain_opts", "[", "'batch_neg'", "]", "\n", "\n", "self", ".", "overlap_pos", "=", "pretrain_opts", "[", "'overlap_pos'", "]", "\n", "self", ".", "overlap_neg", "=", "pretrain_opts", "[", "'overlap_neg'", "]", "\n", "\n", "\n", "self", ".", "crop_size", "=", "pretrain_opts", "[", "'img_size'", "]", "\n", "self", ".", "padding", "=", "pretrain_opts", "[", "'padding'", "]", "\n", "\n", "self", ".", "index", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "img_list", ")", ")", "\n", "self", ".", "pointer", "=", "0", "\n", "\n", "image", "=", "Image", ".", "open", "(", "self", ".", "img_list", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "self", ".", "scene_generator", "=", "SampleGenerator", "(", "'gaussian'", ",", "image", ".", "size", ",", "trans_f", "=", "1.5", ",", "scale_f", "=", "1.2", ",", "valid", "=", "True", ")", "\n", "self", ".", "pos_generator", "=", "SampleGenerator", "(", "'gaussian'", ",", "image", ".", "size", ",", "0.1", ",", "1.2", ",", "1.1", ",", "True", ")", "\n", "self", ".", "neg_generator", "=", "SampleGenerator", "(", "'uniform'", ",", "image", ".", "size", ",", "1", ",", "1.2", ",", "1.1", ",", "True", ")", "\n", "\n", "self", ".", "receptive_field", "=", "receptive_field", "\n", "\n", "self", ".", "interval", "=", "pretrain_opts", "[", "'frame_interval'", "]", "\n", "self", ".", "img_crop_model", "=", "imgCropper", "(", "pretrain_opts", "[", "'padded_img_size'", "]", ")", "\n", "self", ".", "img_crop_model", ".", "eval", "(", ")", "\n", "if", "pretrain_opts", "[", "'use_gpu'", "]", ":", "\n", "            ", "self", ".", "img_crop_model", ".", "gpuEnable", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.data_prov.RegionDataset.__iter__": [[55, 57], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.data_prov.RegionDataset.__next__": [[58, 127], ["min", "enumerate", "len", "len", "numpy.random.permutation", "numpy.concatenate", "zip", "PIL.Image.open().convert", "numpy.asarray", "sample_generator.gen_samples", "sample_generator.gen_samples", "numpy.asarray", "data_prov.RegionDataset.img_crop_model.crop_image", "scenes.append", "numpy.copy", "numpy.zeros", "numpy.copy", "numpy.repeat", "utils.samples2maskroi", "numpy.concatenate", "numpy.zeros", "numpy.copy", "numpy.repeat", "utils.samples2maskroi", "numpy.concatenate", "len", "len", "sample_generator.SampleGenerator", "sample_generator.SampleGenerator", "numpy.clip", "numpy.reshape", "cropped_image.data.cpu.data.cpu.data.cpu", "cur_image_var.cpu.cpu.cpu", "float", "numpy.reshape", "numpy.reshape", "total_pos_rois.append", "total_neg_rois.append", "PIL.Image.open", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.randn", "numpy.copy().astype", "numpy.copy().astype", "numpy.copy().astype", "numpy.copy().astype", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.gen_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.gen_samples", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.crop_image", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.samples2maskroi", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.samples2maskroi", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "\n", "        ", "next_pointer", "=", "min", "(", "self", ".", "pointer", "+", "self", ".", "batch_frames", ",", "len", "(", "self", ".", "img_list", ")", ")", "\n", "idx", "=", "self", ".", "index", "[", "self", ".", "pointer", ":", "next_pointer", "]", "\n", "if", "len", "(", "idx", ")", "<", "self", ".", "batch_frames", ":", "\n", "            ", "self", ".", "index", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "img_list", ")", ")", "\n", "next_pointer", "=", "self", ".", "batch_frames", "-", "len", "(", "idx", ")", "\n", "idx", "=", "np", ".", "concatenate", "(", "(", "idx", ",", "self", ".", "index", "[", ":", "next_pointer", "]", ")", ")", "\n", "", "self", ".", "pointer", "=", "next_pointer", "\n", "\n", "\n", "n_pos", "=", "self", ".", "batch_pos", "\n", "n_neg", "=", "self", ".", "batch_neg", "\n", "\n", "scenes", "=", "[", "]", "\n", "for", "i", ",", "(", "img_path", ",", "bbox", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "img_list", "[", "idx", "]", ",", "self", ".", "gt", "[", "idx", "]", ")", ")", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "#plt.figure(\"test\")", "\n", "#plt.imshow(image)", "\n", "#plt.show()", "\n", "#plt.close()", "\n", "image", "=", "np", ".", "asarray", "(", "image", ")", "\n", "\n", "ishape", "=", "image", ".", "shape", "\n", "pos_examples", "=", "gen_samples", "(", "SampleGenerator", "(", "'gaussian'", ",", "(", "ishape", "[", "1", "]", ",", "ishape", "[", "0", "]", ")", ",", "0.1", ",", "1.2", ",", "1.1", ",", "False", ")", ",", "bbox", ",", "n_pos", ",", "overlap_range", "=", "self", ".", "overlap_pos", ")", "\n", "neg_examples", "=", "gen_samples", "(", "SampleGenerator", "(", "'uniform'", ",", "(", "ishape", "[", "1", "]", ",", "ishape", "[", "0", "]", ")", ",", "1", ",", "1.2", ",", "1.1", ",", "False", ")", ",", "bbox", ",", "n_neg", ",", "overlap_range", "=", "self", ".", "overlap_neg", ")", "\n", "\n", "# compute padded sample", "\n", "padded_x1", "=", "(", "neg_examples", "[", ":", ",", "0", "]", "-", "neg_examples", "[", ":", ",", "2", "]", "*", "(", "pretrain_opts", "[", "'padding'", "]", "-", "1.", ")", "/", "2.", ")", ".", "min", "(", ")", "\n", "padded_y1", "=", "(", "neg_examples", "[", ":", ",", "1", "]", "-", "neg_examples", "[", ":", ",", "3", "]", "*", "(", "pretrain_opts", "[", "'padding'", "]", "-", "1.", ")", "/", "2.", ")", ".", "min", "(", ")", "\n", "padded_x2", "=", "(", "neg_examples", "[", ":", ",", "0", "]", "+", "neg_examples", "[", ":", ",", "2", "]", "*", "(", "pretrain_opts", "[", "'padding'", "]", "+", "1.", ")", "/", "2.", ")", ".", "max", "(", ")", "\n", "padded_y2", "=", "(", "neg_examples", "[", ":", ",", "1", "]", "+", "neg_examples", "[", ":", ",", "3", "]", "*", "(", "pretrain_opts", "[", "'padding'", "]", "+", "1.", ")", "/", "2.", ")", ".", "max", "(", ")", "\n", "padded_scene_box", "=", "np", ".", "asarray", "(", "(", "padded_x1", ",", "padded_y1", ",", "padded_x2", "-", "padded_x1", ",", "padded_y2", "-", "padded_y1", ")", ")", "\n", "\n", "jitter_scale", "=", "1.1", "**", "np", ".", "clip", "(", "3.", "*", "np", ".", "random", ".", "randn", "(", "1", ",", "1", ")", ",", "-", "2", ",", "2", ")", "\n", "crop_img_size", "=", "(", "padded_scene_box", "[", "2", ":", "4", "]", "*", "(", "(", "pretrain_opts", "[", "'img_size'", "]", ",", "pretrain_opts", "[", "'img_size'", "]", ")", "/", "bbox", "[", "2", ":", "4", "]", ")", ")", ".", "astype", "(", "'int64'", ")", "*", "jitter_scale", "[", "0", "]", "[", "0", "]", "\n", "cropped_image", ",", "cur_image_var", "=", "self", ".", "img_crop_model", ".", "crop_image", "(", "image", ",", "np", ".", "reshape", "(", "padded_scene_box", ",", "(", "1", ",", "4", ")", ")", ",", "crop_img_size", ")", "\n", "cropped_image", "=", "cropped_image", "-", "128.", "\n", "if", "pretrain_opts", "[", "'use_gpu'", "]", ":", "\n", "                ", "cropped_image", "=", "cropped_image", ".", "data", ".", "cpu", "(", ")", "\n", "cur_image_var", "=", "cur_image_var", ".", "cpu", "(", ")", "\n", "", "scenes", ".", "append", "(", "cropped_image", ")", "\n", "## get current frame and heatmap", "\n", "\n", "rel_bbox", "=", "np", ".", "copy", "(", "bbox", ")", "\n", "rel_bbox", "[", "0", ":", "2", "]", "-=", "padded_scene_box", "[", "0", ":", "2", "]", "\n", "\n", "jittered_obj_size", "=", "jitter_scale", "[", "0", "]", "[", "0", "]", "*", "float", "(", "pretrain_opts", "[", "'img_size'", "]", ")", "\n", "\n", "batch_num", "=", "np", ".", "zeros", "(", "(", "pos_examples", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "pos_rois", "=", "np", ".", "copy", "(", "pos_examples", ")", "\n", "pos_rois", "[", ":", ",", "0", ":", "2", "]", "-=", "np", ".", "repeat", "(", "np", ".", "reshape", "(", "padded_scene_box", "[", "0", ":", "2", "]", ",", "(", "1", ",", "2", ")", ")", ",", "pos_rois", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "pos_rois", "=", "samples2maskroi", "(", "pos_rois", ",", "self", ".", "receptive_field", ",", "(", "jittered_obj_size", ",", "jittered_obj_size", ")", ",", "bbox", "[", "2", ":", "4", "]", ",", "pretrain_opts", "[", "'padding'", "]", ")", "\n", "pos_rois", "=", "np", ".", "concatenate", "(", "(", "batch_num", ",", "pos_rois", ")", ",", "axis", "=", "1", ")", "\n", "\n", "batch_num", "=", "np", ".", "zeros", "(", "(", "neg_examples", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "neg_rois", "=", "np", ".", "copy", "(", "neg_examples", ")", "\n", "neg_rois", "[", ":", ",", "0", ":", "2", "]", "-=", "np", ".", "repeat", "(", "np", ".", "reshape", "(", "padded_scene_box", "[", "0", ":", "2", "]", ",", "(", "1", ",", "2", ")", ")", ",", "neg_rois", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "neg_rois", "=", "samples2maskroi", "(", "neg_rois", ",", "self", ".", "receptive_field", ",", "(", "jittered_obj_size", ",", "jittered_obj_size", ")", ",", "bbox", "[", "2", ":", "4", "]", ",", "pretrain_opts", "[", "'padding'", "]", ")", "\n", "neg_rois", "=", "np", ".", "concatenate", "(", "(", "batch_num", ",", "neg_rois", ")", ",", "axis", "=", "1", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                ", "total_pos_rois", "=", "[", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "pos_rois", ")", ".", "astype", "(", "'float32'", ")", ")", "]", "\n", "total_neg_rois", "=", "[", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "neg_rois", ")", ".", "astype", "(", "'float32'", ")", ")", "]", "\n", "", "else", ":", "\n", "                ", "total_pos_rois", ".", "append", "(", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "pos_rois", ")", ".", "astype", "(", "'float32'", ")", ")", ")", "\n", "total_neg_rois", ".", "append", "(", "torch", ".", "from_numpy", "(", "np", ".", "copy", "(", "neg_rois", ")", ".", "astype", "(", "'float32'", ")", ")", ")", "\n", "\n", "", "", "return", "scenes", ",", "total_pos_rois", ",", "total_neg_rois", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.data_prov.RegionDataset.extract_regions": [[130, 138], ["numpy.zeros", "enumerate", "regions.transpose.transpose.transpose", "utils.crop_image", "regions.transpose.transpose.astype", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.crop_image"], ["def", "extract_regions", "(", "self", ",", "image", ",", "samples", ")", ":", "\n", "        ", "regions", "=", "np", ".", "zeros", "(", "(", "len", "(", "samples", ")", ",", "self", ".", "crop_size", ",", "self", ".", "crop_size", ",", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "samples", ")", ":", "\n", "            ", "regions", "[", "i", "]", "=", "crop_image", "(", "image", ",", "sample", ",", "self", ".", "crop_size", ",", "self", ".", "padding", ",", "True", ")", "\n", "\n", "", "regions", "=", "regions", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "regions", "=", "regions", ".", "astype", "(", "'float32'", ")", "-", "128.", "\n", "return", "regions", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.data_prov.RegionExtractor.__init__": [[141, 154], ["numpy.asarray", "numpy.arange", "data_prov.RegionExtractor.image.mean().mean().astype", "len", "data_prov.RegionExtractor.image.mean().mean", "data_prov.RegionExtractor.image.mean"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image", ",", "samples", ",", "crop_size", ",", "padding", ",", "batch_size", ",", "shuffle", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "image", "=", "np", ".", "asarray", "(", "image", ")", "\n", "self", ".", "samples", "=", "samples", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "self", ".", "index", "=", "np", ".", "arange", "(", "len", "(", "samples", ")", ")", "\n", "self", ".", "pointer", "=", "0", "\n", "\n", "self", ".", "mean", "=", "self", ".", "image", ".", "mean", "(", "0", ")", ".", "mean", "(", "0", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.data_prov.RegionExtractor.__iter__": [[155, 157], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.data_prov.RegionExtractor.__next__": [[158, 170], ["len", "min", "data_prov.RegionExtractor.extract_regions", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.data_prov.RegionExtractor.extract_regions"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "pointer", "==", "len", "(", "self", ".", "samples", ")", ":", "\n", "            ", "self", ".", "pointer", "=", "0", "\n", "raise", "StopIteration", "\n", "", "else", ":", "\n", "            ", "next_pointer", "=", "min", "(", "self", ".", "pointer", "+", "self", ".", "batch_size", ",", "len", "(", "self", ".", "samples", ")", ")", "\n", "index", "=", "self", ".", "index", "[", "self", ".", "pointer", ":", "next_pointer", "]", "\n", "self", ".", "pointer", "=", "next_pointer", "\n", "\n", "regions", "=", "self", ".", "extract_regions", "(", "index", ")", "\n", "regions", "=", "torch", ".", "from_numpy", "(", "regions", ")", "\n", "return", "regions", "\n", "", "", "next", "=", "__next__", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.data_prov.RegionExtractor.extract_regions": [[172, 180], ["numpy.zeros", "enumerate", "regions.transpose().astype.transpose().astype.transpose().astype", "utils.crop_image", "len", "regions.transpose().astype.transpose().astype.transpose"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.crop_image"], ["def", "extract_regions", "(", "self", ",", "index", ")", ":", "\n", "        ", "regions", "=", "np", ".", "zeros", "(", "(", "len", "(", "index", ")", ",", "self", ".", "crop_size", ",", "self", ".", "crop_size", ",", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "self", ".", "samples", "[", "index", "]", ")", ":", "\n", "            ", "regions", "[", "i", "]", "=", "crop_image", "(", "self", ".", "image", ",", "sample", ",", "self", ".", "crop_size", ",", "self", ".", "padding", ")", "\n", "\n", "", "regions", "=", "regions", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "astype", "(", "'float32'", ")", "\n", "regions", "=", "regions", "-", "128.", "\n", "return", "regions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.overlap_ratio": [[11, 32], ["numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.clip", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["def", "overlap_ratio", "(", "rect1", ",", "rect2", ")", ":", "\n", "    ", "'''\n    Compute overlap ratio between two rects\n    - rect: 1d array of [x,y,w,h] or\n            2d array of N x [x,y,w,h]\n    '''", "\n", "\n", "if", "rect1", ".", "ndim", "==", "1", ":", "\n", "        ", "rect1", "=", "rect1", "[", "None", ",", ":", "]", "\n", "", "if", "rect2", ".", "ndim", "==", "1", ":", "\n", "        ", "rect2", "=", "rect2", "[", "None", ",", ":", "]", "\n", "\n", "", "left", "=", "np", ".", "maximum", "(", "rect1", "[", ":", ",", "0", "]", ",", "rect2", "[", ":", ",", "0", "]", ")", "\n", "right", "=", "np", ".", "minimum", "(", "rect1", "[", ":", ",", "0", "]", "+", "rect1", "[", ":", ",", "2", "]", ",", "rect2", "[", ":", ",", "0", "]", "+", "rect2", "[", ":", ",", "2", "]", ")", "\n", "top", "=", "np", ".", "maximum", "(", "rect1", "[", ":", ",", "1", "]", ",", "rect2", "[", ":", ",", "1", "]", ")", "\n", "bottom", "=", "np", ".", "minimum", "(", "rect1", "[", ":", ",", "1", "]", "+", "rect1", "[", ":", ",", "3", "]", ",", "rect2", "[", ":", ",", "1", "]", "+", "rect2", "[", ":", ",", "3", "]", ")", "\n", "\n", "intersect", "=", "np", ".", "maximum", "(", "0", ",", "right", "-", "left", ")", "*", "np", ".", "maximum", "(", "0", ",", "bottom", "-", "top", ")", "\n", "union", "=", "rect1", "[", ":", ",", "2", "]", "*", "rect1", "[", ":", ",", "3", "]", "+", "rect2", "[", ":", ",", "2", "]", "*", "rect2", "[", ":", ",", "3", "]", "-", "intersect", "\n", "iou", "=", "np", ".", "clip", "(", "intersect", "/", "union", ",", "0", ",", "1", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.crop_image": [[34, 74], ["numpy.array", "int", "int", "int", "int", "numpy.array", "max", "max", "min", "min", "max", "max", "min", "min", "PIL.Image.fromarray().resize", "numpy.ones", "PIL.Image.fromarray"], "function", ["None"], ["", "def", "crop_image", "(", "img", ",", "bbox", ",", "img_size", "=", "[", "107", ",", "107", "]", ",", "padding", "=", "16", ",", "valid", "=", "False", ")", ":", "\n", "## img_size = [w,h]", "\n", "    ", "x", ",", "y", ",", "w", ",", "h", "=", "np", ".", "array", "(", "bbox", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "half_w", ",", "half_h", "=", "w", "/", "2", ",", "h", "/", "2", "\n", "center_x", ",", "center_y", "=", "x", "+", "half_w", ",", "y", "+", "half_h", "\n", "\n", "if", "padding", ">", "0", ":", "\n", "        ", "pad_w", "=", "padding", "*", "w", "/", "img_size", "[", "0", "]", "\n", "pad_h", "=", "padding", "*", "h", "/", "img_size", "[", "1", "]", "\n", "half_w", "+=", "pad_w", "\n", "half_h", "+=", "pad_h", "\n", "\n", "", "img_h", ",", "img_w", ",", "_", "=", "img", ".", "shape", "\n", "min_x", "=", "int", "(", "center_x", "-", "half_w", "+", "0.5", ")", "\n", "min_y", "=", "int", "(", "center_y", "-", "half_h", "+", "0.5", ")", "\n", "max_x", "=", "int", "(", "center_x", "+", "half_w", "+", "0.5", ")", "\n", "max_y", "=", "int", "(", "center_y", "+", "half_h", "+", "0.5", ")", "\n", "\n", "if", "valid", ":", "\n", "        ", "min_x", "=", "max", "(", "0", ",", "min_x", ")", "\n", "min_y", "=", "max", "(", "0", ",", "min_y", ")", "\n", "max_x", "=", "min", "(", "img_w", ",", "max_x", ")", "\n", "max_y", "=", "min", "(", "img_h", ",", "max_y", ")", "\n", "\n", "", "if", "min_x", ">=", "0", "and", "min_y", ">=", "0", "and", "max_x", "<=", "img_w", "and", "max_y", "<=", "img_h", ":", "\n", "        ", "cropped", "=", "img", "[", "min_y", ":", "max_y", ",", "min_x", ":", "max_x", ",", ":", "]", "\n", "\n", "", "else", ":", "\n", "        ", "min_x_val", "=", "max", "(", "0", ",", "min_x", ")", "\n", "min_y_val", "=", "max", "(", "0", ",", "min_y", ")", "\n", "max_x_val", "=", "min", "(", "img_w", ",", "max_x", ")", "\n", "max_y_val", "=", "min", "(", "img_h", ",", "max_y", ")", "\n", "\n", "cropped", "=", "128", "*", "np", ".", "ones", "(", "(", "max_y", "-", "min_y", ",", "max_x", "-", "min_x", ",", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "cropped", "[", "min_y_val", "-", "min_y", ":", "max_y_val", "-", "min_y", ",", "min_x_val", "-", "min_x", ":", "max_x_val", "-", "min_x", ",", ":", "]", "=", "img", "[", "min_y_val", ":", "max_y_val", ",", "min_x_val", ":", "max_x_val", ",", ":", "]", "\n", "\n", "", "scaled", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "cropped", ")", ".", "resize", "(", "(", "img_size", "[", "1", "]", ",", "img_size", "[", "0", "]", ")", ")", ")", "\n", "return", "scaled", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.samples2maskroi": [[75, 99], ["numpy.copy", "numpy.maximum", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.evaluation.data.SequenceList.copy"], ["", "def", "samples2maskroi", "(", "samples", ",", "receptive_field", ",", "cshape", ",", "padded_scene_size", ",", "padding_ratio", ")", ":", "\n", "# rois is from domain of original image axis", "\n", "# receptive field can be subtracted to x2,y2", "\n", "\n", "# ratios between original image and resized_image", "\n", "    ", "cur_resize_ratio", "=", "cshape", "/", "padded_scene_size", "\n", "rois", "=", "np", ".", "copy", "(", "samples", ")", "\n", "\n", "# xywh -> x1y1x2y2", "\n", "rois", "[", ":", ",", "2", ":", "4", "]", "+=", "rois", "[", ":", ",", "0", ":", "2", "]", "\n", "\n", "# padding application", "\n", "rois_paddings", "=", "(", "rois", "[", ":", ",", "2", ":", "4", "]", "-", "rois", "[", ":", ",", "0", ":", "2", "]", ")", "*", "(", "padding_ratio", "-", "1.", ")", "/", "2.", "\n", "rois", "[", ":", ",", "0", ":", "2", "]", "-=", "rois_paddings", "\n", "rois", "[", ":", ",", "2", ":", "4", "]", "+=", "rois_paddings", "\n", "\n", "\n", "rois", "[", ":", ",", "0", "]", "*=", "cur_resize_ratio", "[", "0", "]", "\n", "rois", "[", ":", ",", "1", "]", "*=", "cur_resize_ratio", "[", "1", "]", "\n", "rois", "[", ":", ",", "2", "]", "=", "np", ".", "maximum", "(", "rois", "[", ":", ",", "0", "]", "+", "1", ",", "rois", "[", ":", ",", "2", "]", "*", "cur_resize_ratio", "[", "0", "]", "-", "receptive_field", ")", "\n", "rois", "[", ":", ",", "3", "]", "=", "np", ".", "maximum", "(", "rois", "[", ":", ",", "1", "]", "+", "1", ",", "rois", "[", ":", ",", "3", "]", "*", "cur_resize_ratio", "[", "1", "]", "-", "receptive_field", ")", "\n", "\n", "\n", "return", "rois", "\n", "", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.SampleGenerator.__init__": [[39, 46], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "type", ",", "img_size", ",", "trans_f", "=", "1", ",", "scale_f", "=", "1", ",", "aspect_f", "=", "None", ",", "valid", "=", "False", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "self", ".", "img_size", "=", "np", ".", "array", "(", "img_size", ")", "# (w, h)", "\n", "self", ".", "trans_f", "=", "trans_f", "\n", "self", ".", "scale_f", "=", "scale_f", "\n", "self", ".", "aspect_f", "=", "aspect_f", "\n", "self", ".", "valid", "=", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.SampleGenerator.__call__": [[47, 88], ["numpy.array", "numpy.array", "numpy.tile", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.concatenate", "numpy.clip", "numpy.clip", "numpy.random.rand", "numpy.mean", "int", "numpy.dstack().reshape", "numpy.random.randn", "numpy.random.randn", "numpy.mean", "numpy.random.permutation", "numpy.random.rand", "numpy.random.rand", "numpy.sqrt", "numpy.dstack", "numpy.meshgrid", "numpy.random.rand", "numpy.linspace", "numpy.linspace"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "bb", ",", "n", ")", ":", "\n", "#", "\n", "# bb: target bbox (min_x,min_y,w,h)", "\n", "        ", "bb", "=", "np", ".", "array", "(", "bb", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# (center_x, center_y, w, h)", "\n", "sample", "=", "np", ".", "array", "(", "[", "bb", "[", "0", "]", "+", "bb", "[", "2", "]", "/", "2", ",", "bb", "[", "1", "]", "+", "bb", "[", "3", "]", "/", "2", ",", "bb", "[", "2", "]", ",", "bb", "[", "3", "]", "]", ",", "dtype", "=", "'float32'", ")", "\n", "samples", "=", "np", ".", "tile", "(", "sample", "[", "None", ",", ":", "]", ",", "(", "n", ",", "1", ")", ")", "\n", "\n", "# vary aspect ratio", "\n", "if", "self", ".", "aspect_f", "is", "not", "None", ":", "\n", "            ", "ratio", "=", "np", ".", "random", ".", "rand", "(", "n", ",", "1", ")", "*", "2", "-", "1", "\n", "samples", "[", ":", ",", "2", ":", "]", "*=", "self", ".", "aspect_f", "**", "np", ".", "concatenate", "(", "[", "ratio", ",", "-", "ratio", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# sample generation", "\n", "", "if", "self", ".", "type", "==", "'gaussian'", ":", "\n", "            ", "samples", "[", ":", ",", ":", "2", "]", "+=", "self", ".", "trans_f", "*", "np", ".", "mean", "(", "bb", "[", "2", ":", "]", ")", "*", "np", ".", "clip", "(", "0.5", "*", "np", ".", "random", ".", "randn", "(", "n", ",", "2", ")", ",", "-", "1", ",", "1", ")", "\n", "samples", "[", ":", ",", "2", ":", "]", "*=", "self", ".", "scale_f", "**", "np", ".", "clip", "(", "0.5", "*", "np", ".", "random", ".", "randn", "(", "n", ",", "1", ")", ",", "-", "1", ",", "1", ")", "\n", "\n", "", "elif", "self", ".", "type", "==", "'uniform'", ":", "\n", "            ", "samples", "[", ":", ",", ":", "2", "]", "+=", "self", ".", "trans_f", "*", "np", ".", "mean", "(", "bb", "[", "2", ":", "]", ")", "*", "(", "np", ".", "random", ".", "rand", "(", "n", ",", "2", ")", "*", "2", "-", "1", ")", "\n", "samples", "[", ":", ",", "2", ":", "]", "*=", "self", ".", "scale_f", "**", "(", "np", ".", "random", ".", "rand", "(", "n", ",", "1", ")", "*", "2", "-", "1", ")", "\n", "\n", "", "elif", "self", ".", "type", "==", "'whole'", ":", "\n", "            ", "m", "=", "int", "(", "2", "*", "np", ".", "sqrt", "(", "n", ")", ")", "\n", "xy", "=", "np", ".", "dstack", "(", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "m", ")", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "m", ")", ")", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "xy", "=", "np", ".", "random", ".", "permutation", "(", "xy", ")", "[", ":", "n", "]", "\n", "samples", "[", ":", ",", ":", "2", "]", "=", "bb", "[", "2", ":", "]", "/", "2", "+", "xy", "*", "(", "self", ".", "img_size", "-", "bb", "[", "2", ":", "]", "/", "2", "-", "1", ")", "\n", "samples", "[", ":", ",", "2", ":", "]", "*=", "self", ".", "scale_f", "**", "(", "np", ".", "random", ".", "rand", "(", "n", ",", "1", ")", "*", "2", "-", "1", ")", "\n", "\n", "# adjust bbox range", "\n", "", "samples", "[", ":", ",", "2", ":", "]", "=", "np", ".", "clip", "(", "samples", "[", ":", ",", "2", ":", "]", ",", "5", ",", "self", ".", "img_size", "-", "5.", ")", "\n", "if", "self", ".", "valid", ":", "\n", "            ", "samples", "[", ":", ",", ":", "2", "]", "=", "np", ".", "clip", "(", "samples", "[", ":", ",", ":", "2", "]", ",", "samples", "[", ":", ",", "2", ":", "]", "/", "2", ",", "self", ".", "img_size", "-", "samples", "[", ":", ",", "2", ":", "]", "/", "2", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "samples", "[", ":", ",", ":", "2", "]", "=", "np", ".", "clip", "(", "samples", "[", ":", ",", ":", "2", "]", ",", "0", ",", "self", ".", "img_size", ")", "\n", "\n", "# (min_x, min_y, w, h)", "\n", "", "samples", "[", ":", ",", ":", "2", "]", "-=", "samples", "[", ":", ",", "2", ":", "]", "/", "2", "\n", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.SampleGenerator.set_trans_f": [[89, 91], ["None"], "methods", ["None"], ["", "def", "set_trans_f", "(", "self", ",", "trans_f", ")", ":", "\n", "        ", "self", ".", "trans_f", "=", "trans_f", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.SampleGenerator.get_trans_f": [[92, 94], ["None"], "methods", ["None"], ["", "def", "get_trans_f", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "trans_f", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.sample_generator.gen_samples": [[6, 36], ["generator", "generator", "numpy.ones", "int", "len", "utils.overlap_ratio", "numpy.concatenate", "len", "numpy.prod", "numpy.prod", "min", "int", "len"], "function", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.utils.overlap_ratio"], ["def", "gen_samples", "(", "generator", ",", "bbox", ",", "n", ",", "overlap_range", "=", "None", ",", "scale_range", "=", "None", ")", ":", "\n", "\n", "    ", "if", "overlap_range", "is", "None", "and", "scale_range", "is", "None", ":", "\n", "        ", "return", "generator", "(", "bbox", ",", "n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "samples", "=", "None", "\n", "remain", "=", "n", "\n", "factor", "=", "2", "\n", "while", "remain", ">", "0", "and", "factor", "<", "16", ":", "\n", "            ", "samples_", "=", "generator", "(", "bbox", ",", "int", "(", "remain", "*", "factor", ")", ")", "\n", "\n", "idx", "=", "np", ".", "ones", "(", "len", "(", "samples_", ")", ",", "dtype", "=", "bool", ")", "\n", "if", "overlap_range", "is", "not", "None", ":", "\n", "                ", "r", "=", "overlap_ratio", "(", "samples_", ",", "bbox", ")", "\n", "idx", "*=", "(", "r", ">=", "overlap_range", "[", "0", "]", ")", "*", "(", "r", "<=", "overlap_range", "[", "1", "]", ")", "\n", "", "if", "scale_range", "is", "not", "None", ":", "\n", "                ", "s", "=", "np", ".", "prod", "(", "samples_", "[", ":", ",", "2", ":", "]", ",", "axis", "=", "1", ")", "/", "np", ".", "prod", "(", "bbox", "[", "2", ":", "]", ")", "\n", "idx", "*=", "(", "s", ">=", "scale_range", "[", "0", "]", ")", "*", "(", "s", "<=", "scale_range", "[", "1", "]", ")", "\n", "\n", "", "samples_", "=", "samples_", "[", "idx", ",", ":", "]", "\n", "samples_", "=", "samples_", "[", ":", "min", "(", "int", "(", "remain", ")", ",", "len", "(", "samples_", ")", ")", "]", "\n", "if", "samples", "is", "None", ":", "\n", "                ", "samples", "=", "samples_", "\n", "", "else", ":", "\n", "                ", "samples", "=", "np", ".", "concatenate", "(", "[", "samples", ",", "samples_", "]", ")", "\n", "", "remain", "=", "n", "-", "len", "(", "samples", ")", "\n", "factor", "=", "factor", "*", "2", "\n", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.roi_align.RoIAlign.__init__": [[9, 15], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["        ", "self", ".", "aligned_width", "=", "int", "(", "aligned_width", ")", "\n", "self", ".", "aligned_height", "=", "int", "(", "aligned_height", ")", "\n", "self", ".", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n", "self", ".", "rois", "=", "None", "\n", "self", ".", "feature_size", "=", "None", "\n", "\n", "", "def", "forward", "(", "self", ",", "features", ",", "rois", ")", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.roi_align.RoIAlign.forward": [[16, 19], ["functions.roi_align.RoIAlignFunction"], "methods", ["None"], ["        ", "self", ".", "rois", "=", "rois", "\n", "self", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "features", ".", "size", "(", ")", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.roi_align.RoIAlignAvg.__init__": [[21, 27], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["\n", "output", "=", "features", ".", "new", "(", "num_rois", ",", "num_channels", ",", "self", ".", "aligned_height", ",", "self", ".", "aligned_width", ")", ".", "zero_", "(", ")", "\n", "#help(roi_align.roi_align_forward_cuda)", "\n", "#print(features.type())", "\n", "#print(rois.type())", "\n", "#print(output.type())", "\n", "if", "features", ".", "is_cuda", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.roi_align.RoIAlignAvg.forward": [[28, 32], ["torch.nn.functional.avg_pool2d", "functions.roi_align.RoIAlignFunction"], "methods", ["None"], ["            ", "success", "=", "roi_align", ".", "roi_align_forward_cuda", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n", "self", ".", "spatial_scale", ",", "features", ",", "\n", "rois", ",", "output", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.roi_align.RoIAlignMax.__init__": [[34, 40], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["\n", "", "return", "output", "\n", "\n", "", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "assert", "(", "self", ".", "feature_size", "is", "not", "None", "and", "grad_output", ".", "is_cuda", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "self", ".", "feature_size", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.roi_align.RoIAlignMax.forward": [[41, 45], ["torch.nn.functional.max_pool2d", "functions.roi_align.RoIAlignFunction"], "methods", ["None"], ["\n", "grad_input", "=", "self", ".", "rois", ".", "new", "(", "batch_size", ",", "num_channels", ",", "data_height", ",", "\n", "data_width", ")", ".", "zero_", "(", ")", "\n", "roi_align", ".", "roi_align_backward_cuda", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.roi_align.RoIAlignAdaMax.__init__": [[48, 54], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["\n", "# print grad_input", "\n", "\n", "return", "grad_input", ",", "None", "\n", "\n", "\n", "# TODO use save_for_backward instead", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.roi_align.RoIAlignAdaMax.forward": [[55, 59], ["torch.nn.functional.max_pool2d", "functions.roi_align.RoIAlignAdaFunction"], "methods", ["None"], ["", "", "class", "RoIAlignAdaFunction", "(", "Function", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "aligned_height", ",", "aligned_width", ",", "spatial_scale", ")", ":", "\n", "        ", "self", ".", "aligned_width", "=", "int", "(", "aligned_width", ")", "\n", "self", ".", "aligned_height", "=", "int", "(", "aligned_height", ")", "\n", "self", ".", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.roi_align.RoIAlignDenseAdaMax.__init__": [[62, 68], ["torch.nn.modules.module.Module.__init__", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__"], ["\n", "", "def", "forward", "(", "self", ",", "features", ",", "rois", ")", ":", "\n", "        ", "self", ".", "rois", "=", "rois", "\n", "self", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "features", ".", "size", "(", ")", "\n", "num_rois", "=", "rois", ".", "size", "(", "0", ")", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.modules.roi_align.RoIAlignDenseAdaMax.forward": [[69, 74], ["torch.nn.functional.max_pool2d", "functions.roi_align.RoIAlignDenseAdaFunction"], "methods", ["None"], ["\n", "output", "=", "features", ".", "new", "(", "num_rois", ",", "num_channels", ",", "self", ".", "aligned_height", ",", "self", ".", "aligned_width", ")", ".", "zero_", "(", ")", "\n", "if", "features", ".", "is_cuda", ":", "\n", "            ", "success", "=", "roi_align", ".", "roi_align_ada_forward_cuda", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n", "self", ".", "spatial_scale", ",", "features", ",", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.roi_align.setup.get_extensions": [[17, 64], ["os.path.dirname", "os.path.join", "glob.glob", "os.path.abspath", "os.path.join", "torch.cuda.is_available", "os.path.join", "os.path.join", "extension"], "function", ["None"], ["def", "get_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "extensions_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"src\"", ")", "\n", "\n", "main_file", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"*.cpp\"", ")", ")", "\n", "#source_cpu = glob.glob(os.path.join(extensions_dir, \"cpu\", \"*.cpp\"))", "\n", "#source_cuda = glob.glob(os.path.join(extensions_dir, \"cuda\", \"*.cu\"))", "\n", "\n", "#sources = main_file + source_cpu", "\n", "#extension = CppExtension", "\n", "\n", "extra_compile_args", "=", "{", "\"cxx\"", ":", "[", "]", "}", "\n", "#define_macros = []", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ":", "\n", "        ", "extension", "=", "CUDAExtension", "\n", "#sources += source_cuda", "\n", "sources", "=", "main_file", ";", "\n", "define_macros", "=", "[", "(", "\"WITH_CUDA\"", ",", "None", ")", "]", "\n", "with_cuda", "=", "True", "\n", "#extra_compile_args = {\"nvcc\": [", "\n", "#    \"-DCUDA_HAS_FP16=1\",", "\n", "#    \"-D__CUDA_NO_HALF_OPERATORS__\",", "\n", "#    \"-D__CUDA_NO_HALF_CONVERSIONS__\",", "\n", "#    \"-D__CUDA_NO_HALF2_OPERATORS__\",", "\n", "#]}", "\n", "\n", "", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "\n", "include_dirs", "=", "[", "extensions_dir", "]", "\n", "extra_objects", "=", "[", "'src/cuda/roi_align.cu.o'", "]", "\n", "extra_objects", "=", "[", "os", ".", "path", ".", "join", "(", "this_dir", ",", "fname", ")", "for", "fname", "in", "extra_objects", "]", "\n", "ext_modules", "=", "[", "\n", "extension", "(", "\n", "\"_ext2.roi_align\"", ",", "\n", "sources", ",", "\n", "include_dirs", "=", "include_dirs", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "relative_to", "=", "__file__", ",", "\n", "with_cuda", "=", "with_cuda", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ",", "\n", "extra_objects", "=", "extra_objects", "\n", "#extra_compile_args=extra_compile_args,", "\n", ")", "\n", "]", "\n", "\n", "return", "ext_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.roi_align.__init__._import_symbols": [[6, 14], ["dir", "getattr", "callable", "__all__.append", "torch.utils.ffi._wrap_function"], "function", ["None"], ["import", "pytracking", ".", "libs", ".", "optimization", "as", "optimization", "\n", "from", "pytracking", ".", "run_tracker", "import", "run_tracker", "\n", "from", "pytracking", ".", "run_webcam", "import", "run_webcam", "\n", ""]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignFunction.__init__": [[8, 14], ["int", "int", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "aligned_height", ",", "aligned_width", ",", "spatial_scale", ")", ":", "\n", "        ", "self", ".", "aligned_width", "=", "int", "(", "aligned_width", ")", "\n", "self", ".", "aligned_height", "=", "int", "(", "aligned_height", ")", "\n", "self", ".", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n", "self", ".", "rois", "=", "None", "\n", "self", ".", "feature_size", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignFunction.forward": [[15, 36], ["features.size", "features.size", "rois.size", "features.new().zero_", "_ext2.roi_align.roi_align_forward_cuda", "features.new"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["", "def", "forward", "(", "self", ",", "features", ",", "rois", ")", ":", "\n", "        ", "self", ".", "rois", "=", "rois", "\n", "self", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "features", ".", "size", "(", ")", "\n", "num_rois", "=", "rois", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "features", ".", "new", "(", "num_rois", ",", "num_channels", ",", "self", ".", "aligned_height", ",", "self", ".", "aligned_width", ")", ".", "zero_", "(", ")", "\n", "#help(roi_align.roi_align_forward_cuda)", "\n", "#print(features.type())", "\n", "#print(rois.type())", "\n", "#print(output.type())", "\n", "if", "features", ".", "is_cuda", ":", "\n", "            ", "success", "=", "roi_align", ".", "roi_align_forward_cuda", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n", "self", ".", "spatial_scale", ",", "features", ",", "\n", "rois", ",", "output", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignFunction.backward": [[37, 52], ["_ext2.roi_align.RoIAlignFunction.rois.new().zero_", "_ext2.roi_align.roi_align_backward_cuda", "_ext2.roi_align.RoIAlignFunction.rois.new"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "assert", "(", "self", ".", "feature_size", "is", "not", "None", "and", "grad_output", ".", "is_cuda", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "self", ".", "feature_size", "\n", "\n", "grad_input", "=", "self", ".", "rois", ".", "new", "(", "batch_size", ",", "num_channels", ",", "data_height", ",", "\n", "data_width", ")", ".", "zero_", "(", ")", "\n", "roi_align", ".", "roi_align_backward_cuda", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n", "self", ".", "spatial_scale", ",", "grad_output", ",", "\n", "self", ".", "rois", ",", "grad_input", ")", "\n", "\n", "# print grad_input", "\n", "\n", "return", "grad_input", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignAdaFunction.__init__": [[56, 62], ["int", "int", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "aligned_height", ",", "aligned_width", ",", "spatial_scale", ")", ":", "\n", "        ", "self", ".", "aligned_width", "=", "int", "(", "aligned_width", ")", "\n", "self", ".", "aligned_height", "=", "int", "(", "aligned_height", ")", "\n", "self", ".", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n", "self", ".", "rois", "=", "None", "\n", "self", ".", "feature_size", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignAdaFunction.forward": [[63, 80], ["features.size", "features.size", "rois.size", "features.new().zero_", "_ext2.roi_align.roi_align_ada_forward_cuda", "features.new"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["", "def", "forward", "(", "self", ",", "features", ",", "rois", ")", ":", "\n", "        ", "self", ".", "rois", "=", "rois", "\n", "self", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "features", ".", "size", "(", ")", "\n", "num_rois", "=", "rois", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "features", ".", "new", "(", "num_rois", ",", "num_channels", ",", "self", ".", "aligned_height", ",", "self", ".", "aligned_width", ")", ".", "zero_", "(", ")", "\n", "if", "features", ".", "is_cuda", ":", "\n", "            ", "success", "=", "roi_align", ".", "roi_align_ada_forward_cuda", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n", "self", ".", "spatial_scale", ",", "features", ",", "\n", "rois", ",", "output", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignAdaFunction.backward": [[81, 96], ["_ext2.roi_align.RoIAlignAdaFunction.rois.new().zero_", "_ext2.roi_align.roi_align_ada_backward_cuda", "_ext2.roi_align.RoIAlignAdaFunction.rois.new"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "assert", "(", "self", ".", "feature_size", "is", "not", "None", "and", "grad_output", ".", "is_cuda", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "self", ".", "feature_size", "\n", "\n", "grad_input", "=", "self", ".", "rois", ".", "new", "(", "batch_size", ",", "num_channels", ",", "data_height", ",", "\n", "data_width", ")", ".", "zero_", "(", ")", "\n", "roi_align", ".", "roi_align_ada_backward_cuda", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n", "self", ".", "spatial_scale", ",", "grad_output", ",", "\n", "self", ".", "rois", ",", "grad_input", ")", "\n", "\n", "# print grad_input", "\n", "\n", "return", "grad_input", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.__init__": [[100, 106], ["int", "int", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "aligned_height", ",", "aligned_width", ",", "spatial_scale", ")", ":", "\n", "        ", "self", ".", "aligned_width", "=", "int", "(", "aligned_width", ")", "\n", "self", ".", "aligned_height", "=", "int", "(", "aligned_height", ")", "\n", "self", ".", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n", "self", ".", "rois", "=", "None", "\n", "self", ".", "feature_size", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.forward": [[107, 124], ["features.size", "features.size", "rois.size", "features.new().zero_", "_ext2.roi_align.roi_align_dense_ada_forward_cuda", "features.new"], "methods", ["home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size", "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.features.extractor.MultiResolutionExtractor.size"], ["", "def", "forward", "(", "self", ",", "features", ",", "rois", ")", ":", "\n", "        ", "self", ".", "rois", "=", "rois", "\n", "self", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "features", ".", "size", "(", ")", "\n", "num_rois", "=", "rois", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "features", ".", "new", "(", "num_rois", ",", "num_channels", ",", "self", ".", "aligned_height", ",", "self", ".", "aligned_width", ")", ".", "zero_", "(", ")", "\n", "if", "features", ".", "is_cuda", ":", "\n", "            ", "success", "=", "roi_align", ".", "roi_align_dense_ada_forward_cuda", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n", "self", ".", "spatial_scale", ",", "features", ",", "\n", "rois", ",", "output", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.amgao_rls-onlinetrack.functions.roi_align.RoIAlignDenseAdaFunction.backward": [[125, 140], ["_ext2.roi_align.RoIAlignDenseAdaFunction.rois.new().zero_", "_ext2.roi_align.roi_align_dense_ada_backward_cuda", "_ext2.roi_align.RoIAlignDenseAdaFunction.rois.new"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "assert", "(", "self", ".", "feature_size", "is", "not", "None", "and", "grad_output", ".", "is_cuda", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "self", ".", "feature_size", "\n", "\n", "grad_input", "=", "self", ".", "rois", ".", "new", "(", "batch_size", ",", "num_channels", ",", "data_height", ",", "\n", "data_width", ")", ".", "zero_", "(", ")", "\n", "roi_align", ".", "roi_align_dense_ada_backward_cuda", "(", "self", ".", "aligned_height", ",", "\n", "self", ".", "aligned_width", ",", "\n", "self", ".", "spatial_scale", ",", "grad_output", ",", "\n", "self", ".", "rois", ",", "grad_input", ")", "\n", "\n", "# print grad_input", "\n", "\n", "return", "grad_input", ",", "None", "\n", "", "", ""]]}