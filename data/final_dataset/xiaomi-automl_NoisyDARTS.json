{"home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.vis_cell.plot": [[14, 55], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "range", "range", "graphviz.Digraph.render", "len", "graphviz.Digraph.subgraph", "c.attr", "range", "graphviz.Digraph.subgraph", "graphviz.Digraph.node", "graphviz.Digraph.node", "graphviz.Digraph.node", "graphviz.Digraph.edge", "dict", "dict", "len", "graphviz.Digraph.node", "str", "str", "graphviz.Digraph.edge", "str", "str"], "function", ["None"], ["def", "plot", "(", "genotype", ",", "filename", ")", ":", "\n", "  ", "g", "=", "Digraph", "(", "\n", "format", "=", "'pdf'", ",", "\n", "edge_attr", "=", "dict", "(", "fontsize", "=", "'20'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "shape", "=", "'rect'", ",", "align", "=", "'left'", ",", "fontsize", "=", "'20'", ",", "height", "=", "'0.5'", ",", "width", "=", "'0.5'", ",", "penwidth", "=", "'2'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "#LR", "\n", "\n", "\n", "assert", "len", "(", "genotype", ")", "%", "2", "==", "0", "\n", "steps", "=", "len", "(", "genotype", ")", "//", "2", "\n", "\n", "with", "g", ".", "subgraph", "(", "name", "=", "'inter'", ")", "as", "c", ":", "\n", "    ", "c", ".", "attr", "(", "rank", "=", "'same'", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "      ", "g", ".", "node", "(", "str", "(", "i", ")", ",", "fillcolor", "=", "'#FF6700'", ")", "\n", "\n", "", "", "with", "g", ".", "subgraph", "(", "name", "=", "'output'", ")", "as", "c", ":", "\n", "    ", "g", ".", "node", "(", "\"c_{k}\"", ",", "fillcolor", "=", "'#DEDEDE'", ")", "\n", "\n", "g", ".", "node", "(", "\"c_{k-2}\"", ",", "fillcolor", "=", "'#DEDEDE'", ")", "\n", "g", ".", "node", "(", "\"c_{k-1}\"", ",", "fillcolor", "=", "'#DEDEDE'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "g", ".", "edge", "(", "str", "(", "i", ")", ",", "\"c_{k}\"", ",", "fillcolor", "=", "\"#DEDEDE\"", ",", "color", "=", "'#aaaaaa'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "for", "k", "in", "[", "2", "*", "i", ",", "2", "*", "i", "+", "1", "]", ":", "\n", "      ", "op", ",", "j", "=", "genotype", "[", "k", "]", "\n", "if", "j", "==", "0", ":", "\n", "        ", "u", "=", "\"c_{k-2}\"", "\n", "", "elif", "j", "==", "1", ":", "\n", "        ", "u", "=", "\"c_{k-1}\"", "\n", "", "else", ":", "\n", "        ", "u", "=", "str", "(", "j", "-", "2", ")", "\n", "", "v", "=", "str", "(", "i", ")", "\n", "g", ".", "edge", "(", "u", ",", "v", ",", "label", "=", "OP_SHORT_LABELS", "[", "op", "]", ",", "fillcolor", "=", "OP_COLORS", "[", "op", "]", ",", "color", "=", "OP_COLORS", "[", "op", "]", ")", "\n", "\n", "\n", "\n", "", "", "g", ".", "render", "(", "'./figures/'", "+", "filename", ",", "view", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.operations.ReLUConvBN.__init__": [[25, 31], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.operations.ReLUConvBN.forward": [[33, 35], ["operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.operations.DilConv.__init__": [[38, 45], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.operations.DilConv.forward": [[47, 49], ["operations.DilConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.operations.SepConv.__init__": [[53, 64], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.operations.SepConv.forward": [[66, 68], ["operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.operations.Identity.__init__": [[72, 74], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.operations.Identity.forward": [[75, 77], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.operations.Zero.__init__": [[81, 84], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "    ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.operations.Zero.forward": [[85, 89], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "stride", "==", "1", ":", "\n", "      ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.operations.FactorizedReduce.__init__": [[93, 100], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.operations.FactorizedReduce.forward": [[101, 106], ["operations.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn", "operations.FactorizedReduce.conv_1", "operations.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.CosineDecayScheduler.__init__": [[15, 20], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "base_lr", "=", "1.0", ",", "last_iter", "=", "0", ",", "T_max", "=", "50", ")", ":", "\n", "\t\t", "self", ".", "base_lr", "=", "base_lr", "\n", "self", ".", "last_iter", "=", "last_iter", "\n", "self", ".", "T_max", "=", "T_max", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.CosineDecayScheduler.decay_rate": [[21, 25], ["math.cos"], "methods", ["None"], ["", "def", "decay_rate", "(", "self", ",", "step", ")", ":", "\n", "\t\t", "self", ".", "last_iter", "=", "step", "\n", "decay_rate", "=", "self", ".", "base_lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_iter", "/", "self", ".", "T_max", ")", ")", "/", "2.0", "if", "self", ".", "last_iter", "<=", "self", ".", "T_max", "else", "0", "\n", "return", "decay_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.NoiseOp.__init__": [[27, 36], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["\t", "def", "__init__", "(", "self", ",", "noise_type", ",", "factor", ",", "mean", ",", "noise_mixture", ",", "decay_scheduler", "=", "None", ",", "add_noise", "=", "True", ",", "args", "=", "None", ")", ":", "\n", "\t\t", "super", "(", "NoiseOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "noise_type", "=", "noise_type", "\n", "self", ".", "factor", "=", "factor", "# factor for std", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "noise_mixture", "=", "noise_mixture", "\n", "self", ".", "decay_scheduler", "=", "decay_scheduler", "\n", "self", ".", "add_noise", "=", "add_noise", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.NoiseOp.forward": [[37, 66], ["numpy.sqrt", "model_search.NoiseOp.decay_scheduler.decay_rate", "torch.normal().cuda", "torch.normal().cuda", "torch.normal().cuda", "torch.normal().cuda", "torch.normal().cuda", "torch.normal().cuda", "torch.normal().cuda", "torch.normal().cuda", "torch.normal().cuda", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "x.std", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.CosineDecayScheduler.decay_rate"], ["", "def", "forward", "(", "self", ",", "x", ",", "step", ")", ":", "\n", "\t\t", "if", "self", ".", "training", "and", "self", ".", "add_noise", ":", "\n", "\t\t\t", "if", "self", ".", "noise_type", "==", "'uniform'", ":", "\n", "# uniform variance is (b-a)^2/12, so a = sqrt(3*factor)", "\n", "# uniform takes between (-1,1) * a", "\n", "\t\t\t\t", "a", "=", "np", ".", "sqrt", "(", "3", "*", "self", ".", "factor", ")", "\n", "noise", "=", "self", ".", "mean", "+", "(", "-", "2", "*", "torch", ".", "rand_like", "(", "x", ")", "+", "1", ")", "*", "a", "\n", "", "elif", "self", ".", "noise_type", "==", "'gaussian'", ":", "\n", "# normal distribution", "\n", "\t\t\t\t", "std", "=", "x", ".", "std", "(", ")", "*", "self", ".", "factor", "if", "self", ".", "noise_mixture", "==", "'additive'", "else", "self", ".", "factor", "\n", "means", "=", "self", ".", "mean", "+", "torch", ".", "zeros_like", "(", "x", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ",", "requires_grad", "=", "False", ")", "\n", "noise", "=", "torch", ".", "normal", "(", "means", ",", "std", ",", "out", "=", "None", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "assert", "False", ",", "'Not supported noise type'", "\n", "\n", "", "if", "self", ".", "decay_scheduler", "is", "not", "None", ":", "\n", "\t\t\t\t", "decay_rate", "=", "self", ".", "decay_scheduler", ".", "decay_rate", "(", "step", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "decay_rate", "=", "1", "\n", "\n", "", "if", "self", ".", "noise_mixture", "==", "'additive'", ":", "\n", "\t\t\t\t", "x", "=", "x", "+", "noise", "*", "decay_rate", "\n", "# x = noise", "\n", "", "elif", "self", ".", "noise_mixture", "==", "'multiplicative'", ":", "\n", "\t\t\t\t", "x", "=", "x", "*", "noise", "*", "decay_rate", "\n", "", "else", ":", "\n", "\t\t\t\t", "assert", "False", ",", "'Not supported noise mixture'", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.MixedOp.__init__": [[68, 89], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_search.NoiseOp", "model_search.CosineDecayScheduler", "model_search.MixedOp._ops.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["\t", "def", "__init__", "(", "self", ",", "C", ",", "stride", ",", "drop_prob", ",", "reduction", ",", "args", ")", ":", "\n", "\t\t", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "self", ".", "args", ".", "noise_decay", ":", "\n", "\t\t\t", "noise_decay_schedular", "=", "CosineDecayScheduler", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "noise_decay_schedular", "=", "None", "\n", "\n", "", "self", ".", "noise_skip", "=", "NoiseOp", "(", "self", ".", "args", ".", "noise_type", ",", "self", ".", "args", ".", "factor_skip", ",", "self", ".", "args", ".", "noise_mean", ",", "self", ".", "args", ".", "noise_mixture", ",", "\n", "decay_scheduler", "=", "noise_decay_schedular", ",", "add_noise", "=", "self", ".", "args", ".", "add_noise_skip", ",", "args", "=", "self", ".", "args", ")", "\n", "\n", "for", "primitive", "in", "PRIMITIVES", ":", "\n", "\t\t\t", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "stride", ",", "False", ")", "\n", "if", "'max_pool'", "in", "primitive", ":", "\n", "\t\t\t\t", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "False", ")", "\n", "", "if", "'avg_pool'", "in", "primitive", ":", "\n", "\t\t\t\t", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "False", ")", "\n", "", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.MixedOp.forward": [[90, 103], ["enumerate", "sum", "zip", "temp.append", "temp.append", "model_search.MixedOp.bn1", "temp.append", "temp.append", "op", "model_search.MixedOp.bn2", "op", "utils.drop_path", "op", "model_search.MixedOp.noise_skip", "op"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.drop_path"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ",", "step", ")", ":", "\n", "\t\t", "temp", "=", "[", "]", "\n", "for", "i", ",", "(", "w", ",", "primitive", ",", "op", ")", "in", "enumerate", "(", "zip", "(", "weights", ",", "PRIMITIVES", ",", "self", ".", "_ops", ")", ")", ":", "\n", "\t\t\t", "if", "'max_pool'", "in", "primitive", ":", "\n", "\t\t\t\t", "temp", ".", "append", "(", "w", "*", "self", ".", "bn1", "(", "op", "(", "x", ")", ")", ")", "\n", "", "elif", "'avg_pool'", "in", "primitive", ":", "\n", "\t\t\t\t", "temp", ".", "append", "(", "w", "*", "self", ".", "bn2", "(", "op", "(", "x", ")", ")", ")", "\n", "", "elif", "'skip'", "in", "primitive", ":", "\n", "\t\t\t\t", "temp", ".", "append", "(", "w", "*", "drop_path", "(", "self", ".", "noise_skip", "(", "op", "(", "x", ")", ",", "step", ")", ",", "self", ".", "drop_prob", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "temp", ".", "append", "(", "w", "*", "op", "(", "x", ")", ")", "\n", "", "", "res", "=", "sum", "(", "temp", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Cell.__init__": [[106, 126], ["torch.Module.__init__", "operations.ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "operations.FactorizedReduce", "operations.ReLUConvBN", "range", "model_search.MixedOp", "model_search.Cell._ops.append"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["\t", "def", "__init__", "(", "self", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "drop_prob", ",", "args", ")", ":", "\n", "\t\t", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "args", "=", "args", "\n", "\n", "if", "reduction_prev", ":", "\n", "\t\t\t", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "affine", "=", "False", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "affine", "=", "False", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "_bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "\t\t\t\t", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "C", ",", "stride", ",", "drop_prob", ",", "reduction", ",", "self", ".", "args", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Cell.forward": [[127, 139], ["model_search.Cell.preprocess0", "model_search.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "len", "states.append", "enumerate"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "weights", ",", "epoch", ")", ":", "\n", "\t\t", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "offset", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "\t\t\t", "s", "=", "sum", "(", "self", ".", "_ops", "[", "offset", "+", "j", "]", "(", "h", ",", "weights", "[", "offset", "+", "j", "]", ",", "epoch", ")", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ")", "\n", "offset", "+=", "len", "(", "states", ")", "\n", "states", ".", "append", "(", "s", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.__init__": [[142, 178], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "model_search.Network._initialize_alphas", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model_search.Cell"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._initialize_alphas"], ["\t", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "args", "=", "None", ",", "steps", "=", "4", ",", "multiplier", "=", "4", ",", "stem_multiplier", "=", "3", ",", "drop_prob", "=", "0.3", ")", ":", "\n", "\t\t", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_criterion", "=", "criterion", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "_drop_prob", "=", "drop_prob", "\n", "self", ".", "args", "=", "args", "\n", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "\t\t\t", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "\t\t\t\t", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "\t\t\t\t", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "\n", "reduction_prev", ",", "drop_prob", ",", "args", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", "\n", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n", "self", ".", "_initialize_alphas", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.new": [[179, 184], ["Network().cuda", "zip", "Network().cuda.arch_parameters", "model_search.Network.arch_parameters", "x.data.copy_", "model_search.Network"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters"], ["", "def", "new", "(", "self", ")", ":", "\n", "\t\t", "model_new", "=", "Network", "(", "self", ".", "_C", ",", "self", ".", "_num_classes", ",", "self", ".", "_layers", ",", "self", ".", "_criterion", ")", ".", "cuda", "(", ")", "\n", "for", "x", ",", "y", "in", "zip", "(", "model_new", ".", "arch_parameters", "(", ")", ",", "self", ".", "arch_parameters", "(", ")", ")", ":", "\n", "\t\t\t", "x", ".", "data", ".", "copy_", "(", "y", ".", "data", ")", "\n", "", "return", "model_new", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.forward": [[185, 196], ["model_search.Network.stem", "enumerate", "model_search.Network.global_pooling", "model_search.Network.classifier", "model_search.Network.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "cell", "model_search.Network.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "epoch", ")", ":", "\n", "\t\t", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "\t\t\t", "if", "cell", ".", "reduction", ":", "\n", "\t\t\t\t", "weights", "=", "F", ".", "softmax", "(", "self", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "weights", "=", "F", ".", "softmax", "(", "self", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", "\n", "", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "weights", ",", "epoch", ")", "\n", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._loss": [[197, 200], ["model_search.Network.", "model_search.Network._criterion"], "methods", ["None"], ["", "def", "_loss", "(", "self", ",", "input", ",", "target", ",", "epoch", ")", ":", "\n", "\t\t", "logits", "=", "self", "(", "input", ",", "epoch", ")", "\n", "return", "self", ".", "_criterion", "(", "logits", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._initialize_alphas": [[201, 232], ["sum", "len", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "range", "range", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "_initialize_alphas", "(", "self", ",", "alphas", "=", "None", ")", ":", "\n", "\t\t", "k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", "for", "n", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "\n", "if", "alphas", "is", "None", ":", "\n", "\t\t\t", "self", ".", "alphas_normal", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "k", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "alphas_reduce", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "k", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "alphas_normal", "=", "Variable", "(", "torch", ".", "Tensor", "(", "alphas", "[", "0", "]", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "alphas_reduce", "=", "Variable", "(", "torch", ".", "Tensor", "(", "alphas", "[", "1", "]", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# init the history", "\n", "", "self", ".", "alphas_normal_history", "=", "{", "}", "\n", "self", ".", "alphas_reduce_history", "=", "{", "}", "\n", "mm", "=", "0", "\n", "last_id", "=", "1", "\n", "node_id", "=", "0", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "num_ops", ")", ":", "\n", "\t\t\t\t", "self", ".", "alphas_normal_history", "[", "'edge: {}, op: {}'", ".", "format", "(", "(", "node_id", ",", "mm", ")", ",", "PRIMITIVES", "[", "j", "]", ")", "]", "=", "[", "]", "\n", "self", ".", "alphas_reduce_history", "[", "'edge: {}, op: {}'", ".", "format", "(", "(", "node_id", ",", "mm", ")", ",", "PRIMITIVES", "[", "j", "]", ")", "]", "=", "[", "]", "\n", "", "if", "mm", "==", "last_id", ":", "\n", "\t\t\t\t", "mm", "=", "0", "\n", "last_id", "+=", "1", "\n", "node_id", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t", "mm", "+=", "1", "\n", "\n", "", "", "self", ".", "_arch_parameters", "=", "[", "\n", "self", ".", "alphas_normal", ",", "\n", "self", ".", "alphas_reduce", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters": [[234, 236], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "_arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.genotype": [[237, 271], ["model_search.Network.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "\t\t", "def", "_parse", "(", "weights", ")", ":", "\n", "\t\t\t", "gene", "=", "[", "]", "\n", "n", "=", "2", "\n", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "\t\t\t\t", "end", "=", "start", "+", "n", "\n", "W", "=", "weights", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "if", "'none'", "in", "PRIMITIVES", ":", "\n", "\t\t\t\t\t", "edges", "=", "sorted", "(", "range", "(", "i", "+", "2", ")", ",", "key", "=", "lambda", "x", ":", "-", "max", "(", "W", "[", "x", "]", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "W", "[", "x", "]", ")", ")", "if", "k", "!=", "PRIMITIVES", ".", "index", "(", "'none'", ")", ")", ")", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "edges", "=", "sorted", "(", "range", "(", "i", "+", "2", ")", ",", "key", "=", "lambda", "x", ":", "-", "max", "(", "W", "[", "x", "]", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "W", "[", "x", "]", ")", ")", ")", ")", "[", ":", "2", "]", "\n", "", "for", "j", "in", "edges", ":", "\n", "\t\t\t\t\t", "k_best", "=", "None", "\n", "for", "k", "in", "range", "(", "len", "(", "W", "[", "j", "]", ")", ")", ":", "\n", "\t\t\t\t\t\t", "if", "k_best", "is", "None", "or", "W", "[", "j", "]", "[", "k", "]", ">", "W", "[", "j", "]", "[", "k_best", "]", ":", "\n", "\t\t\t\t\t\t\t", "if", "'none'", "in", "PRIMITIVES", ":", "\n", "\t\t\t\t\t\t\t\t", "k_best", "=", "k_best", "if", "k", "==", "PRIMITIVES", ".", "index", "(", "'none'", ")", "else", "k", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t\t", "k_best", "=", "k", "\n", "", "", "", "gene", ".", "append", "(", "(", "PRIMITIVES", "[", "k_best", "]", ",", "j", ")", ")", "\n", "", "start", "=", "end", "\n", "n", "+=", "1", "\n", "", "return", "gene", "\n", "\n", "", "gene_normal", "=", "_parse", "(", "F", ".", "softmax", "(", "self", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gene_reduce", "=", "_parse", "(", "F", ".", "softmax", "(", "self", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "concat", "=", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", "\n", "genotype", "=", "Genotype", "(", "\n", "normal", "=", "gene_normal", ",", "normal_concat", "=", "concat", ",", "\n", "reduce", "=", "gene_reduce", ",", "reduce_concat", "=", "concat", "\n", ")", "\n", "return", "genotype", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.update_history": [[272, 292], ["torch.softmax().data.cpu().numpy", "torch.softmax().data.cpu().numpy", "torch.softmax().data.cpu().numpy", "torch.softmax().data.cpu().numpy", "torch.softmax().data.cpu().numpy", "torch.softmax().data.cpu().numpy", "range", "range", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "model_search.Network.alphas_normal_history[].append", "model_search.Network.alphas_reduce_history[].append", "float", "float", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "update_history", "(", "self", ")", ":", "\n", "\t\t", "mm", "=", "0", "\n", "last_id", "=", "1", "\n", "node_id", "=", "0", "\n", "weights1", "=", "F", ".", "softmax", "(", "self", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "weights2", "=", "F", ".", "softmax", "(", "self", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "k", ",", "num_ops", "=", "weights1", ".", "shape", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "num_ops", ")", ":", "\n", "\t\t\t\t", "self", ".", "alphas_normal_history", "[", "'edge: {}, op: {}'", ".", "format", "(", "(", "node_id", ",", "mm", ")", ",", "PRIMITIVES", "[", "j", "]", ")", "]", ".", "append", "(", "\n", "float", "(", "weights1", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "self", ".", "alphas_reduce_history", "[", "'edge: {}, op: {}'", ".", "format", "(", "(", "node_id", ",", "mm", ")", ",", "PRIMITIVES", "[", "j", "]", ")", "]", ".", "append", "(", "\n", "float", "(", "weights2", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "", "if", "mm", "==", "last_id", ":", "\n", "\t\t\t\t", "mm", "=", "0", "\n", "last_id", "+=", "1", "\n", "node_id", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t", "mm", "+=", "1", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer.__init__": [[14, 22], ["analyze.Analyzer.model.share_memory"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model", ")", ":", "\n", "        ", "self", ".", "network_momentum", "=", "args", ".", "momentum", "\n", "self", ".", "network_weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model", ".", "share_memory", "(", ")", "\n", "self", ".", "weight_decay", "=", "args", ".", "arch_weight_decay", "\n", "self", ".", "hessian", "=", "None", "\n", "self", ".", "grads", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer._compute_unrolled_model": [[23, 37], ["analyze.Analyzer.model._loss", "analyze.Analyzer._construct_model_from_theta", "analyze._concat", "_concat().mul_", "theta.sub", "analyze.Analyzer.model.parameters", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "analyze._concat", "analyze._concat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "analyze.Analyzer.model.parameters", "analyze.Analyzer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._construct_model_from_theta", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect._concat", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect._concat", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect._concat"], ["", "def", "_compute_unrolled_model", "(", "self", ",", "input", ",", "target", ",", "eta", ",", "network_optimizer", ",", "epoch", ")", ":", "\n", "        ", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ",", "epoch", ")", "\n", "theta", "=", "_concat", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "data", "\n", "try", ":", "\n", "            ", "moment", "=", "_concat", "(", "network_optimizer", ".", "state", "[", "v", "]", "[", "'momentum_buffer'", "]", "for", "\n", "v", "in", "\n", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "mul_", "(", "self", ".", "network_momentum", ")", "\n", "", "except", ":", "\n", "            ", "moment", "=", "torch", ".", "zeros_like", "(", "theta", ")", "\n", "", "dtheta", "=", "_concat", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "\n", "self", ".", "model", ".", "parameters", "(", ")", ")", ")", ".", "data", "+", "self", ".", "network_weight_decay", "*", "theta", "\n", "\n", "unrolled_model", "=", "self", ".", "_construct_model_from_theta", "(", "theta", ".", "sub", "(", "eta", ",", "moment", "+", "dtheta", ")", ")", "\n", "return", "unrolled_model", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer._backward_step": [[38, 41], ["analyze.Analyzer.model._loss", "analyze.Analyzer.backward"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._loss"], ["", "def", "_backward_step", "(", "self", ",", "input_valid", ",", "target_valid", ",", "create_graph", ",", "epoch", ")", ":", "\n", "        ", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input_valid", ",", "target_valid", ",", "epoch", ")", "\n", "loss", ".", "backward", "(", "create_graph", "=", "create_graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer._backward_step_unrolled": [[42, 63], ["analyze.Analyzer._compute_unrolled_model", "analyze.Analyzer._loss", "analyze.Analyzer._loss.backward", "analyze.Analyzer._hessian_vector_product", "zip", "zip", "g.data.sub_", "analyze.Analyzer.model.arch_parameters", "analyze.Analyzer.arch_parameters", "analyze.Analyzer.parameters", "torch.autograd.Variable", "torch.autograd.Variable", "v.grad.data.copy_"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._compute_unrolled_model", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._hessian_vector_product", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters"], ["", "def", "_backward_step_unrolled", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "\n", "target_valid", ",", "eta", ",", "network_optimizer", ",", "\n", "create_graph", ",", "epoch", ")", ":", "\n", "        ", "unrolled_model", "=", "self", ".", "_compute_unrolled_model", "(", "input_train", ",", "\n", "target_train", ",", "eta", ",", "\n", "network_optimizer", ",", "epoch", ")", "\n", "unrolled_loss", "=", "unrolled_model", ".", "_loss", "(", "input_valid", ",", "target_valid", ",", "epoch", ")", "\n", "\n", "unrolled_loss", ".", "backward", "(", "create_graph", "=", "create_graph", ")", "\n", "dalpha", "=", "[", "v", ".", "grad", "for", "v", "in", "unrolled_model", ".", "arch_parameters", "(", ")", "]", "\n", "vector", "=", "[", "v", ".", "grad", ".", "data", "for", "v", "in", "unrolled_model", ".", "parameters", "(", ")", "]", "\n", "implicit_grads", "=", "self", ".", "_hessian_vector_product", "(", "vector", ",", "input_train", ",", "target_train", ",", "epoch", ")", "\n", "\n", "for", "g", ",", "ig", "in", "zip", "(", "dalpha", ",", "implicit_grads", ")", ":", "\n", "            ", "g", ".", "data", ".", "sub_", "(", "eta", ",", "ig", ".", "data", ")", "\n", "\n", "", "for", "v", ",", "g", "in", "zip", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "dalpha", ")", ":", "\n", "            ", "if", "v", ".", "grad", "is", "None", ":", "\n", "                ", "v", ".", "grad", "=", "Variable", "(", "g", ".", "data", ")", "\n", "", "else", ":", "\n", "                ", "v", ".", "grad", ".", "data", ".", "copy_", "(", "g", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer._construct_model_from_theta": [[64, 78], ["analyze.Analyzer.model.new", "analyze.Analyzer.model.state_dict", "analyze.Analyzer.model.named_parameters", "analyze.Analyzer.update", "analyze.Analyzer.load_state_dict", "analyze.Analyzer.cuda", "numpy.prod", "theta[].view", "len", "v.size", "v.size"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.new", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.AverageMeter.update"], ["", "", "", "def", "_construct_model_from_theta", "(", "self", ",", "theta", ")", ":", "\n", "        ", "model_new", "=", "self", ".", "model", ".", "new", "(", ")", "\n", "model_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "\n", "params", ",", "offset", "=", "{", "}", ",", "0", "\n", "for", "k", ",", "v", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "v_length", "=", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "\n", "params", "[", "k", "]", "=", "theta", "[", "offset", ":", "offset", "+", "v_length", "]", ".", "view", "(", "v", ".", "size", "(", ")", ")", "\n", "offset", "+=", "v_length", "\n", "\n", "", "assert", "offset", "==", "len", "(", "theta", ")", "\n", "model_dict", ".", "update", "(", "params", ")", "\n", "model_new", ".", "load_state_dict", "(", "model_dict", ")", "\n", "return", "model_new", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer._hessian_vector_product": [[79, 95], ["zip", "analyze.Analyzer.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "analyze.Analyzer.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "_concat().norm", "analyze.Analyzer.model.parameters", "p.data.add_", "analyze.Analyzer.model.arch_parameters", "analyze.Analyzer.model.parameters", "p.data.sub_", "analyze.Analyzer.model.arch_parameters", "analyze.Analyzer.model.parameters", "p.data.add_", "zip", "analyze._concat"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect._concat"], ["", "def", "_hessian_vector_product", "(", "self", ",", "vector", ",", "input", ",", "target", ",", "epoch", ",", "r", "=", "1e-2", ")", ":", "\n", "        ", "R", "=", "r", "/", "_concat", "(", "vector", ")", ".", "norm", "(", ")", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "            ", "p", ".", "data", ".", "add_", "(", "R", ",", "v", ")", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ",", "epoch", ")", "\n", "grads_p", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "            ", "p", ".", "data", ".", "sub_", "(", "2", "*", "R", ",", "v", ")", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ",", "epoch", ")", "\n", "grads_n", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "            ", "p", ".", "data", ".", "add_", "(", "R", ",", "v", ")", "\n", "\n", "", "return", "[", "(", "x", "-", "y", ")", ".", "div_", "(", "2", "*", "R", ")", "for", "x", ",", "y", "in", "zip", "(", "grads_p", ",", "grads_n", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer.compute_dw": [[97, 111], ["print", "analyze.Analyzer.zero_grads", "analyze.Analyzer.zero_grads", "analyze.Analyzer.model.parameters", "analyze.Analyzer.model.arch_parameters", "analyze.Analyzer._backward_step_unrolled", "analyze.Analyzer._backward_step", "analyze.Analyzer.model.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer.zero_grads", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer.zero_grads", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._backward_step_unrolled", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._backward_step", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters"], ["", "def", "compute_dw", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "\n", "eta", ",", "network_optimizer", ",", "unrolled", ",", "epoch", ")", ":", "\n", "        ", "print", "(", "\"computing dw\"", ")", "\n", "self", ".", "zero_grads", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "self", ".", "zero_grads", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "if", "unrolled", ":", "\n", "            ", "self", ".", "_backward_step_unrolled", "(", "input_train", ",", "target_train", ",", "\n", "input_valid", ",", "target_valid", ",", "eta", ",", "\n", "network_optimizer", ",", "False", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_backward_step", "(", "input_valid", ",", "target_valid", ",", "False", ",", "epoch", ")", "\n", "\n", "", "self", ".", "grads", "=", "[", "v", ".", "grad", "+", "self", ".", "weight_decay", "*", "v", "for", "v", "in", "self", ".", "model", ".", "arch_parameters", "(", ")", "]", "\n", "return", "self", ".", "grads", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer.compute_Hw": [[112, 128], ["print", "analyze.Analyzer.zero_grads", "analyze.Analyzer.zero_grads", "analyze.Analyzer.model._loss", "analyze.Analyzer._hessian", "analyze.Analyzer.model.parameters", "analyze.Analyzer.model.arch_parameters", "analyze.Analyzer.model.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer.zero_grads", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer.zero_grads", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer._hessian", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters"], ["", "def", "compute_Hw", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "\n", "eta", ",", "network_optimizer", ",", "unrolled", ",", "epoch", ",", "allow_unused", "=", "False", ")", ":", "\n", "        ", "print", "(", "\"computing hw\"", ")", "\n", "self", ".", "zero_grads", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "self", ".", "zero_grads", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "#if unrolled:", "\n", "#    self._backward_step_unrolled(input_train, target_train,", "\n", "#                                 input_valid, target_valid, eta,", "\n", "#                                 network_optimizer, True)", "\n", "#else:", "\n", "#    self._backward_step(input_valid, target_valid, True)", "\n", "\n", "#self.grads = [v.grad + self.weight_decay*v for v in self.model.arch_parameters()]", "\n", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input_valid", ",", "target_valid", ",", "epoch", ")", "\n", "self", ".", "hessian", "=", "self", ".", "_hessian", "(", "loss", ",", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "allow_unused", "=", "allow_unused", ")", "\n", "return", "self", ".", "hessian", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer.compute_eigenvalues": [[129, 134], ["numpy.linalg.eigvals", "analyze.Analyzer.hessian.cpu().data.numpy", "analyze.Analyzer.hessian.cpu"], "methods", ["None"], ["", "def", "compute_eigenvalues", "(", "self", ")", ":", "\n", "#hessian = self.compute_Hw(input, target)", "\n", "        ", "if", "self", ".", "hessian", "is", "None", ":", "\n", "            ", "raise", "ValueError", "\n", "", "return", "eigvals", "(", "self", ".", "hessian", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer.zero_grads": [[135, 140], ["p.grad.detach_", "p.grad.zero_"], "methods", ["None"], ["", "def", "zero_grads", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "for", "p", "in", "parameters", ":", "\n", "            ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                ", "p", ".", "grad", ".", "detach_", "(", ")", "\n", "p", ".", "grad", ".", "zero_", "(", ")", "\n", "#if p.grad.volatile:", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer.gradient": [[146, 159], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "zip", "x.contiguous().view", "x.contiguous"], "methods", ["None"], ["", "", "", "def", "gradient", "(", "self", ",", "_outputs", ",", "_inputs", ",", "grad_outputs", "=", "None", ",", "retain_graph", "=", "None", ",", "\n", "create_graph", "=", "False", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "_inputs", ")", ":", "\n", "            ", "_inputs", "=", "[", "_inputs", "]", "\n", "", "else", ":", "\n", "            ", "_inputs", "=", "list", "(", "_inputs", ")", "\n", "", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "_outputs", ",", "_inputs", ",", "grad_outputs", ",", "\n", "allow_unused", "=", "True", ",", "\n", "retain_graph", "=", "retain_graph", ",", "\n", "create_graph", "=", "create_graph", ")", "\n", "grads", "=", "[", "x", "if", "x", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "grads", ",", "\n", "_inputs", ")", "]", "\n", "return", "torch", ".", "cat", "(", "[", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "for", "x", "in", "grads", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer._hessian": [[160, 196], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "sum", "enumerate", "list", "torch.autograd.Variable().type_as", "torch.autograd.Variable().type_as", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "range", "p.numel", "grad.contiguous().view", "inp.numel", "torch.autograd.Variable().type_as.data[].add_", "torch.autograd.Variable", "torch.autograd.Variable", "inp.view", "torch.autograd.Variable().type_as", "torch.autograd.Variable().type_as", "torch.autograd.Variable().type_as.data[].add_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "grad.contiguous", "analyze.Analyzer.gradient", "sum", "torch.autograd.Variable().type_as.clone().type_as", "torch.autograd.Variable", "torch.autograd.Variable", "x.numel", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable().type_as.clone", "torch.autograd.Variable().type_as.clone().type_as", "torch.autograd.Variable().type_as.clone"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze.Analyzer.gradient"], ["", "def", "_hessian", "(", "self", ",", "outputs", ",", "inputs", ",", "out", "=", "None", ",", "allow_unused", "=", "False", ",", "\n", "create_graph", "=", "False", ")", ":", "\n", "#assert outputs.data.ndimension() == 1", "\n", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "inputs", ")", ":", "\n", "            ", "inputs", "=", "[", "inputs", "]", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "list", "(", "inputs", ")", "\n", "\n", "", "n", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "inputs", ")", "\n", "if", "out", "is", "None", ":", "\n", "            ", "out", "=", "Variable", "(", "torch", ".", "zeros", "(", "n", ",", "n", ")", ")", ".", "type_as", "(", "outputs", ")", "\n", "\n", "", "ai", "=", "0", "\n", "for", "i", ",", "inp", "in", "enumerate", "(", "inputs", ")", ":", "\n", "            ", "[", "grad", "]", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", ",", "inp", ",", "create_graph", "=", "True", ",", "\n", "allow_unused", "=", "allow_unused", ")", "\n", "grad", "=", "grad", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "+", "self", ".", "weight_decay", "*", "inp", ".", "view", "(", "-", "1", ")", "\n", "#grad = outputs[i].contiguous().view(-1)", "\n", "\n", "for", "j", "in", "range", "(", "inp", ".", "numel", "(", ")", ")", ":", "\n", "# print('(i, j): ', i, j)", "\n", "                ", "if", "grad", "[", "j", "]", ".", "requires_grad", ":", "\n", "                    ", "row", "=", "self", ".", "gradient", "(", "grad", "[", "j", "]", ",", "inputs", "[", "i", ":", "]", ",", "retain_graph", "=", "True", ")", "[", "j", ":", "]", "\n", "", "else", ":", "\n", "                    ", "n", "=", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "inputs", "[", "i", ":", "]", ")", "-", "j", "\n", "row", "=", "Variable", "(", "torch", ".", "zeros", "(", "n", ")", ")", ".", "type_as", "(", "grad", "[", "j", "]", ")", "\n", "#row = grad[j].new_zeros(sum(x.numel() for x in inputs[i:]) - j)", "\n", "\n", "", "out", ".", "data", "[", "ai", ",", "ai", ":", "]", ".", "add_", "(", "row", ".", "clone", "(", ")", ".", "type_as", "(", "out", ")", ".", "data", ")", "# ai's row", "\n", "if", "ai", "+", "1", "<", "n", ":", "\n", "                    ", "out", ".", "data", "[", "ai", "+", "1", ":", ",", "ai", "]", ".", "add_", "(", "row", ".", "clone", "(", ")", ".", "type_as", "(", "out", ")", ".", "data", "[", "1", ":", "]", ")", "# ai's column", "\n", "", "del", "row", "\n", "ai", "+=", "1", "\n", "", "del", "grad", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.analyze._concat": [[9, 11], ["torch.cat", "torch.cat", "x.view"], "function", ["None"], ["def", "_concat", "(", "xs", ")", ":", "\n", "  ", "return", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect.__init__": [[13, 19], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "architect.Architect.model.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters"], ["\t", "def", "__init__", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "\t\t", "self", ".", "network_momentum", "=", "args", ".", "momentum", "\n", "self", ".", "network_weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "arch_learning_rate", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "args", ".", "arch_weight_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._compute_unrolled_model": [[20, 30], ["architect.Architect.model._loss", "architect.Architect._construct_model_from_theta", "architect._concat", "_concat().mul_", "theta.sub", "architect.Architect.model.parameters", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "architect._concat", "architect._concat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "architect.Architect.model.parameters", "architect.Architect.model.parameters"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._construct_model_from_theta", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect._concat", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect._concat", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect._concat"], ["", "def", "_compute_unrolled_model", "(", "self", ",", "input", ",", "target", ",", "eta", ",", "network_optimizer", ",", "epoch", ")", ":", "\n", "\t\t", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ",", "epoch", ")", "\n", "theta", "=", "_concat", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "data", "\n", "try", ":", "\n", "\t\t\t", "moment", "=", "_concat", "(", "network_optimizer", ".", "state", "[", "v", "]", "[", "'momentum_buffer'", "]", "for", "v", "in", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "mul_", "(", "self", ".", "network_momentum", ")", "\n", "", "except", ":", "\n", "\t\t\t", "moment", "=", "torch", ".", "zeros_like", "(", "theta", ")", "\n", "", "dtheta", "=", "_concat", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ")", ".", "data", "+", "self", ".", "network_weight_decay", "*", "theta", "\n", "unrolled_model", "=", "self", ".", "_construct_model_from_theta", "(", "theta", ".", "sub", "(", "eta", ",", "moment", "+", "dtheta", ")", ")", "\n", "return", "unrolled_model", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect.step": [[31, 39], ["architect.Architect.optimizer.zero_grad", "architect.Architect.optimizer.step", "architect.Architect._backward_step_unrolled", "architect.Architect._backward_step"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect.step", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._backward_step_unrolled", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._backward_step"], ["", "def", "step", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ",", "\n", "unrolled", ",", "epoch", ")", ":", "\n", "\t\t", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "unrolled", ":", "\n", "\t\t\t", "self", ".", "_backward_step_unrolled", "(", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ",", "epoch", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "_backward_step", "(", "input_valid", ",", "target_valid", ",", "epoch", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._backward_step": [[40, 43], ["architect.Architect.model._loss", "architect.Architect.backward"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._loss"], ["", "def", "_backward_step", "(", "self", ",", "input_valid", ",", "target_valid", ",", "epoch", ")", ":", "\n", "\t\t", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input_valid", ",", "target_valid", ",", "epoch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._backward_step_unrolled": [[44, 61], ["architect.Architect._compute_unrolled_model", "architect.Architect._loss", "architect.Architect._loss.backward", "architect.Architect._hessian_vector_product", "zip", "zip", "g.data.sub_", "architect.Architect.model.arch_parameters", "architect.Architect.arch_parameters", "architect.Architect.parameters", "torch.autograd.Variable", "torch.autograd.Variable", "v.grad.data.copy_"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._compute_unrolled_model", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._hessian_vector_product", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters"], ["", "def", "_backward_step_unrolled", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ",", "epoch", ")", ":", "\n", "\t\t", "unrolled_model", "=", "self", ".", "_compute_unrolled_model", "(", "input_train", ",", "target_train", ",", "eta", ",", "network_optimizer", ",", "epoch", ")", "\n", "unrolled_loss", "=", "unrolled_model", ".", "_loss", "(", "input_valid", ",", "target_valid", ",", "epoch", ")", "\n", "\n", "unrolled_loss", ".", "backward", "(", ")", "\n", "dalpha", "=", "[", "v", ".", "grad", "for", "v", "in", "unrolled_model", ".", "arch_parameters", "(", ")", "]", "\n", "vector", "=", "[", "v", ".", "grad", ".", "data", "for", "v", "in", "unrolled_model", ".", "parameters", "(", ")", "]", "\n", "implicit_grads", "=", "self", ".", "_hessian_vector_product", "(", "vector", ",", "input_train", ",", "target_train", ")", "\n", "\n", "for", "g", ",", "ig", "in", "zip", "(", "dalpha", ",", "implicit_grads", ")", ":", "\n", "\t\t\t", "g", ".", "data", ".", "sub_", "(", "eta", ",", "ig", ".", "data", ")", "\n", "\n", "", "for", "v", ",", "g", "in", "zip", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "dalpha", ")", ":", "\n", "\t\t\t", "if", "v", ".", "grad", "is", "None", ":", "\n", "\t\t\t\t", "v", ".", "grad", "=", "Variable", "(", "g", ".", "data", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "v", ".", "grad", ".", "data", ".", "copy_", "(", "g", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._construct_model_from_theta": [[62, 76], ["architect.Architect.model.new", "architect.Architect.model.state_dict", "architect.Architect.model.named_parameters", "architect.Architect.update", "architect.Architect.load_state_dict", "architect.Architect.cuda", "numpy.prod", "theta[].view", "len", "v.size", "v.size"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.new", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.AverageMeter.update"], ["", "", "", "def", "_construct_model_from_theta", "(", "self", ",", "theta", ")", ":", "\n", "\t\t", "model_new", "=", "self", ".", "model", ".", "new", "(", ")", "\n", "model_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "\n", "params", ",", "offset", "=", "{", "}", ",", "0", "\n", "for", "k", ",", "v", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "\t\t\t", "v_length", "=", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "\n", "params", "[", "k", "]", "=", "theta", "[", "offset", ":", "offset", "+", "v_length", "]", ".", "view", "(", "v", ".", "size", "(", ")", ")", "\n", "offset", "+=", "v_length", "\n", "\n", "", "assert", "offset", "==", "len", "(", "theta", ")", "\n", "model_dict", ".", "update", "(", "params", ")", "\n", "model_new", ".", "load_state_dict", "(", "model_dict", ")", "\n", "return", "model_new", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect.Architect._hessian_vector_product": [[77, 93], ["zip", "architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "_concat().norm", "architect.Architect.model.parameters", "p.data.add_", "architect.Architect.model.arch_parameters", "architect.Architect.model.parameters", "p.data.sub_", "architect.Architect.model.arch_parameters", "architect.Architect.model.parameters", "p.data.add_", "zip", "architect._concat"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network._loss", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect._concat"], ["", "def", "_hessian_vector_product", "(", "self", ",", "vector", ",", "input", ",", "target", ",", "r", "=", "1e-2", ")", ":", "\n", "\t\t", "R", "=", "r", "/", "_concat", "(", "vector", ")", ".", "norm", "(", ")", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "\t\t\t", "p", ".", "data", ".", "add_", "(", "R", ",", "v", ")", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ")", "\n", "grads_p", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "\t\t\t", "p", ".", "data", ".", "sub_", "(", "2", "*", "R", ",", "v", ")", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ")", "\n", "grads_n", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "\t\t\t", "p", ".", "data", ".", "add_", "(", "R", ",", "v", ")", "\n", "\n", "", "return", "[", "(", "x", "-", "y", ")", ".", "div_", "(", "2", "*", "R", ")", "for", "x", ",", "y", "in", "zip", "(", "grads_p", ",", "grads_n", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.architect._concat": [[7, 9], ["torch.cat", "torch.cat", "x.view"], "function", ["None"], ["def", "_concat", "(", "xs", ")", ":", "\n", "\t", "return", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.verify_transfer.get_args": [[19, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Transfer Learning\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'cifar10'", ",", "help", "=", "'dataset to transfer'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset-path'", ",", "type", "=", "str", ",", "default", "=", "'/home/work/dataset/cifar'", ",", "help", "=", "'dataset to transfer'", ")", "\n", "parser", ".", "add_argument", "(", "'--model-path'", ",", "type", "=", "str", ",", "default", "=", "'pretrained/noisy_darts_a_transfer.pt.tar'", ",", "help", "=", "'transferred model path'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_scheduler'", ",", "type", "=", "str", ",", "default", "=", "'cos'", ",", "help", "=", "'cos or step'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'fine-tune epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'gpu id'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-classes'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of label classes (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "metavar", "=", "'DROP'", ",", "help", "=", "'Dropout rate (default: 0.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop_connect'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "metavar", "=", "'DROP'", ",", "\n", "help", "=", "'Drop connect rate (default: 0.1)'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.verify_transfer.main": [[40, 97], ["str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "utils._data_transforms_imagenet", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dict", "timm.models.EfficientNet", "torch.Sequential", "model.to.load_state_dict", "model.to.to", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "thop.profile", "print", "model.to.eval", "torch.CrossEntropyLoss().to", "verify_transfer.infer", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Dropout", "torch.Linear", "timm.models.efficientnet_builder.decode_arch_def", "torch.load", "torch.load", "torch.load", "torch.randn", "torch.randn", "torch.randn", "torch.CrossEntropyLoss"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils._data_transforms_imagenet", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.verify_transfer.infer", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.load"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "str", "(", "args", ".", "gpu", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "\t\t", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "\t\t", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "val_transform", "=", "_data_transforms_imagenet", "(", ")", "\n", "\n", "\n", "val_data", "=", "CIFAR10", "(", "root", "=", "args", ".", "dataset_path", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "val_transform", ")", "\n", "val_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "\n", "# NoisyDARTS-A model specification", "\n", "s_r", "=", "0.25", "\n", "arch_def", "=", "[", "\n", "# stage 0, 112x112 in", "\n", "[", "'ds_r1_k3_s1_e1_c16'", "]", ",", "# relu", "\n", "# stage 1, 112x112 in", "\n", "[", "'ir_r1_k3_s2_e6_c32_se%f_nsw'", "%", "s_r", "]", ",", "\n", "# stage 2, 56x56 in", "\n", "[", "'ir_r1_k3_s1_e3_c32_se%f_nsw'", "%", "s_r", "]", ",", "# swish", "\n", "# stage 3, 28x28 in", "\n", "[", "'ir_r1_k5_s2_e6_c40_se%f_nsw'", "%", "s_r", ",", "'ir_r3_k3_s1_e6_c40_se%f_nsw'", "%", "s_r", "]", ",", "# swish", "\n", "# stage 4, 14x14in", "\n", "[", "'ir_r1_k5_s2_e6_c80_se%f_nsw'", "%", "s_r", ",", "'ir_r1_k7_s1_e6_c80_se%f_nsw'", "%", "s_r", ",", "'ir_r2_k3_s1_e6_c80_se%f_nsw'", "%", "s_r", ",", "\n", "'ir_r4_k3_s1_e6_c96_se%f_nsw'", "%", "s_r", "]", ",", "# swish", "\n", "# stage 5, 7x7in", "\n", "[", "'ir_r1_k3_s2_e6_c192_se%f_nsw'", "%", "s_r", ",", "'ir_r3_k7_s1_e6_c192_se%f_nsw'", "%", "s_r", ",", "\n", "'ir_r1_k7_s1_e6_c320_se%f_nsw'", "%", "s_r", "]", ",", "# swish", "\n", "]", "\n", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "1.0", ",", "depth_trunc", "=", "'round'", ")", ",", "\n", "num_features", "=", "1280", ",", "\n", "stem_size", "=", "32", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "act_layer", "=", "nn", ".", "ReLU", "\n", ")", "\n", "\n", "model", "=", "EfficientNet", "(", "**", "model_kwargs", ")", "\n", "model", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "1280", ",", "10", ")", ",", "\n", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "model_path", ")", "[", "'model_state'", "]", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", ".", "cuda", "(", ")", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "input", ",", ")", ",", "verbose", "=", "False", ")", "\n", "print", "(", "'flops: {}M, params: {}M'", ".", "format", "(", "flops", "/", "1e6", ",", "params", "/", "1e6", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "infer", "(", "val_queue", ",", "model", ",", "criterion", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.verify_transfer.infer": [[98, 114], ["utils.AverageMeter", "utils.AverageMeter", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model", "criterion().mean", "utils.accuracy", "inputs.size", "utils.AverageMeter.update", "utils.AverageMeter.update", "inputs.to", "labels.to", "prec1.item", "prec5.item", "criterion"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.accuracy", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.AverageMeter.update"], ["", "def", "infer", "(", "val_queue", ",", "model", ",", "criterion", ",", "device", ")", ":", "\n", "\t", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "loss_", "=", "0.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "step", ",", "(", "inputs", ",", "labels", ")", "in", "enumerate", "(", "val_queue", ")", ":", "\n", "\t\t\t", "inputs", ",", "labels", "=", "inputs", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", ".", "mean", "(", ")", "\n", "loss_", "+=", "loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "outputs", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "", "", "print", "(", "'Valiate. loss: {}, top1: {}, top5: {}'", ".", "format", "(", "loss_", "/", "(", "step", "+", "1", ")", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model.Cell.__init__": [[10, 27], ["torch.Module.__init__", "print", "operations.ReLUConvBN", "model.Cell._compile", "operations.FactorizedReduce", "operations.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model.Cell._compile"], ["\t", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "\t\t", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "C_prev_prev", ",", "C_prev", ",", "C", ")", "\n", "\n", "if", "reduction_prev", ":", "\n", "\t\t\t", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "if", "reduction", ":", "\n", "\t\t\t", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "\t\t\t", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model.Cell._compile": [[28, 40], ["len", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "\t\t", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "\t\t\t", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model.Cell.forward": [[41, 61], ["model.Cell.preprocess0", "model.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op1", "op2", "isinstance", "utils.drop_path", "isinstance", "utils.drop_path"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.drop_path", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", ")", ":", "\n", "\t\t", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "\t\t\t", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "\t\t\t\t", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "\t\t\t\t\t", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "\t\t\t\t\t", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model.AuxiliaryHeadCIFAR.__init__": [[65, 79], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["\t", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "\t\t", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model.AuxiliaryHeadCIFAR.forward": [[80, 84], ["model.AuxiliaryHeadCIFAR.features", "model.AuxiliaryHeadCIFAR.classifier", "model.AuxiliaryHeadCIFAR.view", "model.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model.AuxiliaryHeadImageNet.__init__": [[88, 102], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["\t", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "\t\t", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model.AuxiliaryHeadImageNet.forward": [[103, 107], ["model.AuxiliaryHeadImageNet.features", "model.AuxiliaryHeadImageNet.classifier", "model.AuxiliaryHeadImageNet.view", "model.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model.NetworkCIFAR.__init__": [[110, 142], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.Cell", "model.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["\t", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "\t\t", "super", "(", "NetworkCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "stem_multiplier", "=", "3", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "\t\t\t", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "\t\t\t\t", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "\t\t\t\t", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "\t\t\t\t", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "\t\t\t", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model.NetworkCIFAR.forward": [[143, 154], ["model.NetworkCIFAR.stem", "enumerate", "model.NetworkCIFAR.global_pooling", "model.NetworkCIFAR.classifier", "model.NetworkCIFAR.view", "cell", "model.NetworkCIFAR.size", "model.NetworkCIFAR.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "\t\t\t", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "\t\t\t\t", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "\t\t\t\t\t", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model.NetworkImageNet.__init__": [[158, 198], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.Cell", "model.AuxiliaryHeadImageNet"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__"], ["\t", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "\t\t", "super", "(", "NetworkImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "\t\t\t", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "\t\t\t\t", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "\t\t\t\t", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "\t\t\t\t", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "\t\t\t", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.model.NetworkImageNet.forward": [[199, 211], ["model.NetworkImageNet.stem0", "model.NetworkImageNet.stem1", "enumerate", "model.NetworkImageNet.global_pooling", "model.NetworkImageNet.classifier", "model.NetworkImageNet.view", "cell", "model.NetworkImageNet.size", "model.NetworkImageNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\t\t", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "\t\t\t", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "\t\t\t\t", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "\t\t\t\t\t", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.dataloader.get_imagenet_dataset": [[31, 56], ["os.path.join", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "print", "os.path.join", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "print", "Exception"], "function", ["None"], ["def", "get_imagenet_dataset", "(", "batch_size", ",", "dataset_root", "=", "'./dataset/imagenet/'", ",", "dataset_tpye", "=", "'train'", ")", ":", "\n", "    ", "if", "dataset_tpye", "==", "'train'", ":", "\n", "        ", "train_dataset_root", "=", "os", ".", "path", ".", "join", "(", "dataset_root", ",", "TRAIN_DIR", ")", "\n", "trainset", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "train_dataset_root", ",", "transform", "=", "transform_train", ")", "\n", "trainloader", "=", "DataLoader", "(", "trainset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "8", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "print", "(", "'Succeed to init ImageNet train DataLoader!'", ")", "\n", "return", "trainloader", "\n", "", "elif", "dataset_tpye", "==", "'val'", "or", "dataset_tpye", "==", "'valid'", ":", "\n", "        ", "val_dataset_root", "=", "os", ".", "path", ".", "join", "(", "dataset_root", ",", "VALIDATION_DIR", ")", "\n", "valset", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "val_dataset_root", ",", "transform", "=", "transform_test", ")", "\n", "valloader", "=", "DataLoader", "(", "valset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "8", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "False", ")", "\n", "print", "(", "'Succeed to init ImageNet val DataLoader!'", ")", "\n", "return", "valloader", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'IMAGENET DataLoader: Unknown dataset type -- %s'", "%", "dataset_tpye", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.verify_se.get_args": [[14, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Evaluate NoisyDARTS-SE Models on ImageNet\"", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'model to evaluate'", ")", "\n", "parser", ".", "add_argument", "(", "'--model-path'", ",", "type", "=", "str", ",", "default", "=", "'pretrained/noisy_darts_a_se.pth.tar'", ",", "help", "=", "'dir to models'", ")", "\n", "parser", ".", "add_argument", "(", "'--se-ratio'", ",", "default", "=", "0.25", ",", "type", "=", "float", ",", "help", "=", "'squeeze-and-excitation ratio'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda'", ",", "choices", "=", "[", "'cuda'", ",", "'cpu'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'gpu id'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "help", "=", "'val batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--val-dataset-root'", ",", "default", "=", "'/Your_Root/ILSVRC2012'", ",", "help", "=", "\"val dataset root path\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.verify_se.evaluate": [[26, 90], ["torch.cuda.set_device", "torch.cuda.set_device", "dict", "timm.models.EfficientNet", "torch.device", "torch.device", "torch.load", "torch.load", "timm.models.EfficientNet.load_state_dict", "torch.randn().to", "torch.randn().to", "thop.profile", "print", "timm.models.EfficientNet.eval", "dataloader.get_imagenet_dataset", "print", "print", "timm.models.EfficientNet.cuda", "timm.models.EfficientNet.", "utils.accuracy", "timm.models.efficientnet_builder.decode_arch_def", "torch.randn", "torch.randn", "image.to", "label.to", "top1.cpu().data.numpy", "top5.cpu().data.numpy", "top1.data.numpy", "top5.data.numpy", "image.cpu", "top1.cpu", "top5.cpu"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.dataloader.get_imagenet_dataset", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.accuracy"], ["", "def", "evaluate", "(", "args", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "\n", "# NoisyDARTS-A model specification", "\n", "s_r", "=", "args", ".", "se_ratio", "\n", "arch_def", "=", "[", "\n", "# stage 0, 112x112 in", "\n", "[", "'ds_r1_k3_s1_e1_c16'", "]", ",", "# relu", "\n", "# stage 1, 112x112 in", "\n", "[", "'ir_r1_k3_s2_e6_c32_se%f_nsw'", "%", "s_r", "]", ",", "\n", "# stage 2, 56x56 in", "\n", "[", "'ir_r1_k3_s1_e3_c32_se%f_nsw'", "%", "s_r", "]", ",", "# swish", "\n", "# stage 3, 28x28 in", "\n", "[", "'ir_r1_k5_s2_e6_c40_se%f_nsw'", "%", "s_r", ",", "'ir_r3_k3_s1_e6_c40_se%f_nsw'", "%", "s_r", "]", ",", "# swish", "\n", "# stage 4, 14x14in", "\n", "[", "'ir_r1_k5_s2_e6_c80_se%f_nsw'", "%", "s_r", ",", "'ir_r1_k7_s1_e6_c80_se%f_nsw'", "%", "s_r", ",", "'ir_r2_k3_s1_e6_c80_se%f_nsw'", "%", "s_r", ",", "\n", "'ir_r4_k3_s1_e6_c96_se%f_nsw'", "%", "s_r", "]", ",", "# swish", "\n", "# stage 5, 7x7in", "\n", "[", "'ir_r1_k3_s2_e6_c192_se%f_nsw'", "%", "s_r", ",", "'ir_r3_k7_s1_e6_c192_se%f_nsw'", "%", "s_r", ",", "\n", "'ir_r1_k7_s1_e6_c320_se%f_nsw'", "%", "s_r", "]", ",", "# swish", "\n", "]", "\n", "model_kwargs", "=", "dict", "(", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "1.0", ",", "depth_trunc", "=", "'round'", ")", ",", "\n", "num_features", "=", "1280", ",", "\n", "stem_size", "=", "32", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "act_layer", "=", "nn", ".", "ReLU", "\n", ")", "\n", "model", "=", "EfficientNet", "(", "**", "model_kwargs", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "if", "args", ".", "device", "==", "'cuda'", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "state", "=", "torch", ".", "load", "(", "f'{args.model_path}'", ",", "map_location", "=", "device", ")", "\n", "model", ".", "load_state_dict", "(", "state", ")", "\n", "\n", "_input", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", ".", "to", "(", "device", ")", "\n", "flops", ",", "params", "=", "profile", "(", "model", ",", "inputs", "=", "(", "_input", ",", ")", ",", "verbose", "=", "False", ")", "\n", "print", "(", "'Model: {}, params: {}M, flops: {}M'", ".", "format", "(", "args", ".", "model", ",", "params", "/", "1e6", ",", "flops", "/", "1e6", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "val_dataloader", "=", "get_imagenet_dataset", "(", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "dataset_root", "=", "args", ".", "val_dataset_root", ",", "\n", "dataset_tpye", "=", "\"valid\"", ")", "\n", "\n", "print", "(", "\"Start to evaluate ...\"", ")", "\n", "total_top1", "=", "0.0", "\n", "total_top5", "=", "0.0", "\n", "total_counter", "=", "0.0", "\n", "for", "image", ",", "label", "in", "val_dataloader", ":", "\n", "        ", "image", ",", "label", "=", "image", ".", "to", "(", "device", ")", ",", "label", ".", "to", "(", "device", ")", "\n", "result", "=", "model", "(", "image", ")", "\n", "top1", ",", "top5", "=", "accuracy", "(", "result", ",", "label", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "            ", "total_counter", "+=", "image", ".", "cpu", "(", ")", ".", "data", ".", "shape", "[", "0", "]", "\n", "total_top1", "+=", "top1", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "total_top5", "+=", "top5", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "total_counter", "+=", "image", ".", "data", ".", "shape", "[", "0", "]", "\n", "total_top1", "+=", "top1", ".", "data", ".", "numpy", "(", ")", "\n", "total_top5", "+=", "top5", ".", "data", ".", "numpy", "(", ")", "\n", "", "", "mean_top1", "=", "total_top1", "/", "total_counter", "\n", "mean_top5", "=", "total_top5", "/", "total_counter", "\n", "print", "(", "'Evaluate Result: Total: %d\\tmTop1: %.4f\\tmTop5: %.6f'", "%", "(", "total_counter", ",", "mean_top1", ",", "mean_top5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.AverageMeter.__init__": [[15, 17], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.AverageMeter.reset"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.AverageMeter.reset": [[18, 22], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.AverageMeter.update": [[23, 27], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "\t\t", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__init__": [[45, 47], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "\t\t", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.Cutout.__call__": [[48, 64], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\t\t", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.accuracy": [[29, 42], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "\t", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "\t\t", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils._data_transforms_cifar10": [[66, 84], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "_data_transforms_cifar10", "(", "args", ")", ":", "\n", "\t", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "if", "args", ".", "cutout", ":", "\n", "\t\t", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "args", ".", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils._data_transforms_imagenet": [[85, 97], ["torchvision.Compose", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "_data_transforms_imagenet", "(", ")", ":", "\n", "# imagenet", "\n", "\t", "MEAN", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "STD", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "val_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "MEAN", ",", "STD", ")", ",", "\n", "]", ")", "\n", "return", "val_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.count_parameters_in_MB": [[98, 100], ["numpy.sum", "numpy.prod", "v.size", "model.named_parameters"], "function", ["None"], ["", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "\t", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "name", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "\"auxiliary\"", "not", "in", "name", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.save_checkpoint": [[102, 108], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.save"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save", ")", ":", "\n", "\t", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "\t\t", "best_filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.save": [[110, 112], ["torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.save"], ["", "", "def", "save", "(", "model", ",", "model_path", ")", ":", "\n", "\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.load": [[114, 116], ["model.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.load"], ["", "def", "load", "(", "model", ",", "model_path", ",", "map_location", "=", "'cuda:0'", ")", ":", "\n", "\t", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "map_location", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.drop_path": [[118, 125], ["torch.autograd.Variable", "x.div_", "x.mul_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor", "x.size"], "function", ["None"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "\t", "if", "drop_prob", ">", "0.", ":", "\n", "\t\t", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.create_exp_dir": [[127, 139], ["print", "os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "os.mkdir", "os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], ["", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "\t", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "\t\t", "subpath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "subpath", ")", ":", "\n", "\t\t\t", "os", ".", "mkdir", "(", "subpath", ")", "\n", "", "for", "script", "in", "scripts_to_save", ":", "\n", "\t\t\t", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.save_file": [[141, 162], ["matplotlib.subplots", "recoder.items", "fig.savefig", "matplotlib.tight_layout", "print", "len", "axs[].set_title", "axs[].plot", "os.path.exists", "os.makedirs", "os.path.join", "open", "json.dump", "print", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.vis_cell.plot"], ["", "", "", "def", "save_file", "(", "recoder", ",", "size", "=", "(", "14", ",", "len", "(", "PRIMITIVES", ")", ")", ",", "path", "=", "'./'", ")", ":", "\n", "\t", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "*", "size", ",", "figsize", "=", "(", "36", ",", "98", ")", ")", "\n", "num_ops", "=", "size", "[", "1", "]", "\n", "row", "=", "0", "\n", "col", "=", "0", "\n", "for", "(", "k", ",", "v", ")", "in", "recoder", ".", "items", "(", ")", ":", "\n", "\t\t", "axs", "[", "row", ",", "col", "]", ".", "set_title", "(", "k", ")", "\n", "axs", "[", "row", ",", "col", "]", ".", "plot", "(", "v", ",", "'r+'", ")", "\n", "if", "col", "==", "num_ops", "-", "1", ":", "\n", "\t\t\t", "col", "=", "0", "\n", "row", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t", "col", "+=", "1", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "path", ")", "\n", "", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'output.png'", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "print", "(", "'save history weight in {}'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'output.png'", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'history_weight.json'", ")", ",", "'w'", ")", "as", "outf", ":", "\n", "\t\t", "json", ".", "dump", "(", "recoder", ",", "outf", ")", "\n", "print", "(", "'save history weight in {}'", ".", "format", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'history_weight.json'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.convert_arch_weights_to_numpy": [[163, 181], ["len", "numpy.zeros", "range", "range"], "function", ["None"], ["", "", "def", "convert_arch_weights_to_numpy", "(", "arch_weights", ",", "k", "=", "14", ",", "num_ops", "=", "len", "(", "PRIMITIVES", ")", ")", ":", "\n", "# key = ['edge: (%d, %d), op: %s' %(i,j,op) for op in PRIMITIVES for i in range(3) for j in range(5)]", "\n", "# get last epoch alpha", "\n", "\t", "alphas", "=", "np", ".", "zeros", "(", "(", "k", ",", "num_ops", ")", ")", "\n", "mm", "=", "0", "\n", "last_id", "=", "1", "\n", "node_id", "=", "0", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "\t\t", "for", "j", "in", "range", "(", "num_ops", ")", ":", "\n", "\t\t\t", "alphas", "[", "i", ",", "j", "]", "=", "arch_weights", "[", "'edge: {}, op: {}'", ".", "format", "(", "(", "node_id", ",", "mm", ")", ",", "PRIMITIVES", "[", "j", "]", ")", "]", "[", "-", "1", "]", "\n", "", "if", "mm", "==", "last_id", ":", "\n", "\t\t\t", "mm", "=", "0", "\n", "last_id", "+=", "1", "\n", "node_id", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t", "mm", "+=", "1", "\n", "\n", "", "", "return", "alphas", "\n", "\n"]], "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.load_arch_weights": [[183, 195], ["os.path.join", "open", "json.load", "utils.convert_arch_weights_to_numpy", "model.alphas_normal.detach", "model.alphas_reduce.detach.copy_", "model.alphas_reduce.detach", "model.alphas_reduce.detach.copy_", "torch.as_tensor", "torch.as_tensor"], "function", ["home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.load", "home.repos.pwc.inspect_result.xiaomi-automl_NoisyDARTS.None.utils.convert_arch_weights_to_numpy"], ["", "def", "load_arch_weights", "(", "model", ",", "arch_weights_dir", ")", ":", "\n", "\t", "for", "sub", "in", "[", "'normal'", ",", "'reduce'", "]", ":", "\n", "\t\t", "_file", "=", "os", ".", "path", ".", "join", "(", "arch_weights_dir", ",", "sub", ",", "'history_weight.json'", ")", "\n", "with", "open", "(", "_file", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "arch_weights", "=", "json", ".", "load", "(", "f", ")", "\n", "arch_weights", "=", "convert_arch_weights_to_numpy", "(", "arch_weights", ")", "\n", "if", "sub", "==", "'normal'", ":", "\n", "\t\t\t\t", "d_", "=", "model", ".", "alphas_normal", ".", "detach", "(", ")", "\n", "d_", ".", "copy_", "(", "torch", ".", "as_tensor", "(", "arch_weights", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "d_", "=", "model", ".", "alphas_reduce", ".", "detach", "(", ")", "\n", "d_", ".", "copy_", "(", "torch", ".", "as_tensor", "(", "arch_weights", ")", ")", "", "", "", "", "", ""]]}