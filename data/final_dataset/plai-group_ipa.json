{"home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.update_ema": [[27, 31], ["zip", "vae.parameters", "ema_vae.parameters", "p2.data.mul_", "p2.data.add_"], "function", ["None"], ["def", "update_ema", "(", "vae", ",", "ema_vae", ",", "ema_rate", ")", ":", "\n", "    ", "for", "p1", ",", "p2", "in", "zip", "(", "vae", ".", "parameters", "(", ")", ",", "ema_vae", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "p2", ".", "data", ".", "mul_", "(", "ema_rate", ")", "\n", "p2", ".", "data", ".", "add_", "(", "p1", ".", "data", "*", "(", "1", "-", "ema_rate", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.save_model": [[33, 43], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.exists", "vae.state_dict", "os.path.join", "ema_vae.state_dict", "os.path.join", "optimizer.state_dict", "os.path.join", "dict", "os.path.join", "print", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.mkdir"], ["", "", "def", "save_model", "(", "path", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "H", ",", "create_dir", ")", ":", "\n", "    ", "if", "create_dir", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "print", "(", "'\\n\\n WARNING: path already exists. perhaps restarting after interrupted save. \\n'", ")", "\n", "", "else", ":", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "", "torch", ".", "save", "(", "vae", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'model.th'", ")", ")", "\n", "torch", ".", "save", "(", "ema_vae", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'model-ema.th'", ")", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'opt.th'", ")", ")", "\n", "torch", ".", "save", "(", "dict", "(", "H", ")", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'config.th'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.accumulate_stats": [[45, 67], ["numpy.sum", "numpy.array", "len", "numpy.max", "numpy.mean", "numpy.mean", "numpy.isfinite", "numpy.array", "numpy.mean", "numpy.isfinite", "numpy.mean", "len"], "function", ["None"], ["", "def", "accumulate_stats", "(", "stats", ",", "frequency", ")", ":", "\n", "    ", "z", "=", "{", "}", "\n", "for", "k", "in", "stats", "[", "-", "1", "]", ":", "\n", "        ", "if", "'nans'", "in", "k", "or", "'skip'", "in", "k", ":", "\n", "            ", "z", "[", "k", "]", "=", "np", ".", "sum", "(", "[", "a", "[", "k", "]", "for", "a", "in", "stats", "[", "-", "frequency", ":", "]", "]", ")", "\n", "", "elif", "k", "==", "'grad_norm'", ":", "\n", "            ", "vals", "=", "[", "a", "[", "k", "]", "for", "a", "in", "stats", "[", "-", "frequency", ":", "]", "]", "\n", "finites", "=", "np", ".", "array", "(", "vals", ")", "[", "np", ".", "isfinite", "(", "vals", ")", "]", "\n", "if", "len", "(", "finites", ")", "==", "0", ":", "\n", "                ", "z", "[", "k", "]", "=", "0.0", "\n", "", "else", ":", "\n", "                ", "z", "[", "k", "]", "=", "np", ".", "max", "(", "finites", ")", "\n", "", "", "elif", "k", "==", "'elbo'", ":", "\n", "            ", "vals", "=", "[", "a", "[", "k", "]", "for", "a", "in", "stats", "[", "-", "frequency", ":", "]", "]", "\n", "finites", "=", "np", ".", "array", "(", "vals", ")", "[", "np", ".", "isfinite", "(", "vals", ")", "]", "\n", "z", "[", "'elbo'", "]", "=", "np", ".", "mean", "(", "vals", ")", "\n", "z", "[", "'elbo_filtered'", "]", "=", "np", ".", "mean", "(", "finites", ")", "\n", "", "elif", "k", "==", "'iter_time'", ":", "\n", "            ", "z", "[", "k", "]", "=", "stats", "[", "-", "1", "]", "[", "k", "]", "if", "len", "(", "stats", ")", "<", "frequency", "else", "np", ".", "mean", "(", "[", "a", "[", "k", "]", "for", "a", "in", "stats", "[", "-", "frequency", ":", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "z", "[", "k", "]", "=", "np", ".", "mean", "(", "[", "a", "[", "k", "]", "for", "a", "in", "stats", "[", "-", "frequency", ":", "]", "if", "k", "in", "a", "]", ")", "\n", "", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.linear_warmup": [[69, 73], ["None"], "function", ["None"], ["", "def", "linear_warmup", "(", "warmup_iters", ")", ":", "\n", "    ", "def", "f", "(", "iteration", ")", ":", "\n", "        ", "return", "1.0", "if", "iteration", ">", "warmup_iters", "else", "iteration", "/", "warmup_iters", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.setup_mpi": [[75, 87], ["utils.mpi_size", "utils.local_mpi_rank", "utils.mpi_rank", "MPI.COMM_WORLD.bcast", "str", "str", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "socket.gethostname", "str", "str", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_size", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.local_mpi_rank", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_rank"], ["", "def", "setup_mpi", "(", "H", ")", ":", "\n", "    ", "H", ".", "mpi_size", "=", "mpi_size", "(", ")", "\n", "H", ".", "local_rank", "=", "local_mpi_rank", "(", ")", "\n", "H", ".", "rank", "=", "mpi_rank", "(", ")", "\n", "if", "'NO_MPI'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "\"MASTER_ADDR\"", "]", "=", "MPI", ".", "COMM_WORLD", ".", "bcast", "(", "socket", ".", "gethostname", "(", ")", ",", "root", "=", "0", ")", "\n", "os", ".", "environ", "[", "\"MASTER_PORT\"", "]", "=", "str", "(", "H", ".", "port", ")", "if", "H", ".", "port", "is", "not", "None", "else", "str", "(", "np", ".", "random", ".", "randint", "(", "29500", ",", "29999", ")", ")", "\n", "os", ".", "environ", "[", "\"RANK\"", "]", "=", "str", "(", "H", ".", "rank", ")", "\n", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", "=", "str", "(", "H", ".", "mpi_size", ")", "\n", "# os.environ[\"NCCL_LL_THRESHOLD\"] = \"0\"", "\n", "torch", ".", "cuda", ".", "set_device", "(", "H", ".", "local_rank", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "f\"env://\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.distributed_maybe_download": [[89, 96], ["path[].replace", "path.startswith", "train_helpers.first_rank_first", "utils.maybe_download", "utils.mpi_size", "utils.mpi_size"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.first_rank_first", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.maybe_download", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_size", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_size"], ["", "", "def", "distributed_maybe_download", "(", "path", ",", "local_rank", ",", "mpi_size", ")", ":", "\n", "    ", "if", "not", "path", ".", "startswith", "(", "'gs://'", ")", ":", "\n", "        ", "return", "path", "\n", "", "filename", "=", "path", "[", "5", ":", "]", ".", "replace", "(", "'/'", ",", "'-'", ")", "\n", "with", "first_rank_first", "(", "local_rank", ",", "mpi_size", ")", ":", "\n", "        ", "fp", "=", "maybe_download", "(", "path", ",", "filename", ")", "\n", "", "return", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.first_rank_first": [[98, 107], ["torch.barrier", "torch.barrier", "utils.mpi_size"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_size"], ["", "@", "contextmanager", "\n", "def", "first_rank_first", "(", "local_rank", ",", "mpi_size", ")", ":", "\n", "    ", "if", "mpi_size", ">", "1", "and", "local_rank", ">", "0", ":", "\n", "        ", "dist", ".", "barrier", "(", ")", "\n", "", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "if", "mpi_size", ">", "1", "and", "local_rank", "==", "0", ":", "\n", "            ", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.setup_save_dirs": [[109, 124], ["os.path.join", "os.path.join", "data.mkdir_p", "data.mkdir_p", "print", "os.path.join", "os.path.join", "print"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.data.mkdir_p", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.mkdir_p"], ["", "", "", "def", "setup_save_dirs", "(", "H", ")", ":", "\n", "    ", "if", "H", ".", "wandb_id", "is", "None", ":", "\n", "        ", "H", ".", "wandb_id", "=", "'none'", "\n", "", "H", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "H", ".", "wandb_id", ")", "\n", "if", "H", ".", "rank", "==", "0", ":", "\n", "        ", "mkdir_p", "(", "H", ".", "save_dir", ")", "\n", "mkdir_p", "(", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "'latest'", ")", ")", "\n", "", "H", ".", "logdir", "=", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "'log'", ")", "\n", "\n", "if", "H", ".", "resuming", ":", "\n", "        ", "if", "H", ".", "ckpt_load_dir", "is", "None", ":", "\n", "            ", "H", ".", "ckpt_load_dir", "=", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "'latest'", ")", "\n", "", "print", "(", "f'Using ckpt_load_dir {H.ckpt_load_dir}.'", ")", "\n", "", "elif", "H", ".", "ckpt_load_dir", "is", "not", "None", ":", "\n", "        ", "print", "(", "f\"Warning: not resuming but loading from checkpoint at {H.ckpt_load_dir}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.set_up_hyperparams": [[126, 138], ["hps.Hyperparams", "argparse.ArgumentParser", "hps.add_vae_arguments", "hps.parse_args_and_update_hparams", "train_helpers.setup_mpi", "utils.logger", "enumerate", "utils.logger.", "sorted", "utils.logger."], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.hps.add_vae_arguments", "home.repos.pwc.inspect_result.plai-group_ipa.None.hps.parse_args_and_update_hparams", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.setup_mpi", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.logger"], ["", "", "def", "set_up_hyperparams", "(", "s", "=", "None", ",", "do_print", "=", "True", ")", ":", "\n", "    ", "H", "=", "Hyperparams", "(", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", "=", "add_vae_arguments", "(", "parser", ")", "\n", "parse_args_and_update_hparams", "(", "H", ",", "parser", ",", "s", "=", "s", ")", "\n", "setup_mpi", "(", "H", ")", "\n", "logprint", "=", "logger", "(", "None", ")", "# H.logdir)", "\n", "if", "do_print", ":", "\n", "        ", "for", "i", ",", "k", "in", "enumerate", "(", "sorted", "(", "H", ")", ")", ":", "\n", "            ", "logprint", "(", "type", "=", "'hparam'", ",", "key", "=", "k", ",", "value", "=", "H", "[", "k", "]", ")", "\n", "", "logprint", "(", "'training model'", ",", "H", ".", "desc", ",", "'on'", ",", "H", ".", "dataset", ")", "\n", "", "return", "H", ",", "logprint", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.set_seed_if_new": [[140, 146], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["", "def", "set_seed_if_new", "(", "H", ")", ":", "\n", "    ", "if", "H", ".", "resuming", ":", "\n", "        ", "return", "\n", "", "np", ".", "random", ".", "seed", "(", "H", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "H", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "H", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.restore_params": [[148, 165], ["torch.load", "torch.load", "train_helpers.make_part_encoder_initialisation", "train_helpers.distributed_maybe_download", "len", "model.load_state_dict", "k.startswith", "print", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.make_part_encoder_initialisation", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.distributed_maybe_download"], ["", "def", "restore_params", "(", "H", ",", "model", ",", "path", ",", "local_rank", ",", "mpi_size", ",", "init_cond_from_uncond", ",", "map_ddp", "=", "True", ",", "map_cpu", "=", "False", ")", ":", "\n", "    ", "state_dict", "=", "torch", ".", "load", "(", "distributed_maybe_download", "(", "path", ",", "local_rank", ",", "mpi_size", ")", ",", "map_location", "=", "'cpu'", "if", "map_cpu", "else", "None", ")", "\n", "if", "map_ddp", ":", "\n", "        ", "new_state_dict", "=", "{", "}", "\n", "l", "=", "len", "(", "'module.'", ")", "\n", "for", "k", "in", "state_dict", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "                ", "new_state_dict", "[", "k", "[", "l", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "                ", "new_state_dict", "[", "k", "]", "=", "state_dict", "[", "k", "]", "\n", "", "", "state_dict", "=", "new_state_dict", "\n", "", "make_part_encoder_initialisation", "(", "H", ",", "state_dict", ",", "init_cond_from_uncond", ")", "\n", "try", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "except", "RuntimeError", ":", "\n", "        ", "print", "(", "'\\nKeys missing from state dict. Ensure this is intentional.\\n'", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.restore_log": [[167, 176], ["max", "max", "json.loads", "min", "open", "float", "train_helpers.distributed_maybe_download"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.distributed_maybe_download"], ["", "", "def", "restore_log", "(", "path", ",", "local_rank", ",", "mpi_size", ")", ":", "\n", "    ", "loaded", "=", "[", "json", ".", "loads", "(", "l", ")", "for", "l", "in", "open", "(", "distributed_maybe_download", "(", "path", ",", "local_rank", ",", "mpi_size", ")", ")", "]", "\n", "try", ":", "\n", "        ", "cur_eval_loss", "=", "min", "(", "[", "z", "[", "'elbo'", "]", "for", "z", "in", "loaded", "if", "'type'", "in", "z", "and", "z", "[", "'type'", "]", "==", "'eval_loss'", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "cur_eval_loss", "=", "float", "(", "'inf'", ")", "\n", "", "starting_epoch", "=", "max", "(", "[", "z", "[", "'epoch'", "]", "for", "z", "in", "loaded", "if", "'type'", "in", "z", "and", "z", "[", "'type'", "]", "==", "'train_loss'", "]", ")", "\n", "iterate", "=", "max", "(", "[", "z", "[", "'step'", "]", "for", "z", "in", "loaded", "if", "'type'", "in", "z", "and", "z", "[", "'type'", "]", "==", "'train_loss'", "]", ")", "\n", "return", "cur_eval_loss", ",", "iterate", ",", "starting_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.make_part_encoder_initialisation": [[178, 197], ["list", "state_dict.keys", "k.split", "torch.cat", "torch.cat", "k.replace", "torch.zeros_like", "torch.zeros_like", "len"], "function", ["None"], ["", "def", "make_part_encoder_initialisation", "(", "H", ",", "state_dict", ",", "init_cond_from_uncond", ")", ":", "\n", "    ", "if", "(", "H", ".", "pretrained_partial_encoder", "==", "\"\"", ")", "or", "(", "not", "H", ".", "init_cond_from_uncond", ")", ":", "\n", "        ", "return", "\n", "", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "ks", "=", "k", ".", "split", "(", "'.'", ")", "\n", "if", "ks", "[", "0", "]", "==", "'encoder'", ":", "\n", "            ", "new_k", "=", "'.'", ".", "join", "(", "[", "'part_encoder'", "]", "+", "ks", "[", "1", ":", "]", ")", "\n", "if", "k", "==", "'encoder.in_conv.weight'", ":", "\n", "# add extra input channel", "\n", "                ", "v", "=", "state_dict", "[", "k", "]", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "torch", ".", "zeros_like", "(", "v", "[", ":", ",", ":", "1", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "v", "=", "state_dict", "[", "k", "]", "\n", "", "state_dict", "[", "new_k", "]", "=", "v", "\n", "", "elif", "(", "H", ".", "pretrained_partial_encoder", "==", "\"all\"", ")", "and", "(", "ks", "[", "0", "]", "==", "'decoder'", "and", "len", "(", "ks", ")", ">=", "4", "and", "ks", "[", "3", "]", "==", "'enc'", ")", ":", "\n", "            ", "new_k", "=", "k", ".", "replace", "(", "'enc'", ",", "'part_enc'", ")", "\n", "state_dict", "[", "new_k", "]", "=", "state_dict", "[", "k", "]", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.load_vaes": [[199, 242], ["print", "VAE_type", "VAE_type", "ema_vae.cuda.requires_grad_", "torch.nn.parallel.distributed.DistributedDataParallel.cuda", "ema_vae.cuda.cuda", "torch.nn.parallel.distributed.DistributedDataParallel.named_parameters", "logprint", "logprint", "train_helpers.restore_params", "os.path.join", "print", "logprint", "train_helpers.restore_params", "ema_vae.cuda.load_state_dict", "torch.nn.parallel.distributed.DistributedDataParallel", "len", "len", "ValueError", "numpy.prod", "os.path.join", "os.path.join", "torch.nn.parallel.distributed.DistributedDataParallel.state_dict", "list", "list", "torch.nn.parallel.distributed.DistributedDataParallel.named_parameters", "torch.nn.parallel.distributed.DistributedDataParallel.parameters"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.restore_params", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.restore_params"], ["", "", "", "def", "load_vaes", "(", "H", ",", "logprint", ",", "init_cond_from_uncond", "=", "False", ",", "ckpt_dir", "=", "None", ")", ":", "\n", "    ", "print", "(", "'loading vaes'", ",", "init_cond_from_uncond", ")", "\n", "if", "ckpt_dir", "is", "not", "None", ":", "\n", "        ", "load_dir", "=", "ckpt_dir", "\n", "", "elif", "init_cond_from_uncond", ":", "\n", "        ", "load_dir", "=", "H", ".", "pretrained_load_dir", "\n", "", "else", ":", "\n", "        ", "load_dir", "=", "H", ".", "ckpt_load_dir", "\n", "", "VAE_type", "=", "ConditionalVAE", "if", "H", ".", "conditional", "else", "VAE", "\n", "vae", "=", "VAE_type", "(", "H", ")", "\n", "if", "load_dir", "is", "not", "None", ":", "\n", "        ", "if", "init_cond_from_uncond", ":", "\n", "# use pretrained model with ema", "\n", "            ", "vae_path", "=", "os", ".", "path", ".", "join", "(", "load_dir", ",", "'model-ema.th'", ")", "\n", "", "else", ":", "\n", "            ", "vae_path", "=", "os", ".", "path", ".", "join", "(", "load_dir", ",", "'model.th'", ")", "\n", "", "logprint", "(", "f'Restoring vae from {vae_path}'", ")", "\n", "restore_params", "(", "H", ",", "vae", ",", "vae_path", ",", "map_cpu", "=", "True", ",", "local_rank", "=", "H", ".", "local_rank", ",", "mpi_size", "=", "H", ".", "mpi_size", ",", "\n", "init_cond_from_uncond", "=", "init_cond_from_uncond", ")", "\n", "\n", "", "ema_vae", "=", "VAE_type", "(", "H", ")", "\n", "if", "load_dir", "is", "not", "None", ":", "\n", "        ", "ema_path", "=", "os", ".", "path", ".", "join", "(", "load_dir", ",", "'model-ema.th'", ")", "\n", "print", "(", "ema_path", ")", "\n", "logprint", "(", "f'Restoring ema vae from {ema_path}'", ")", "\n", "restore_params", "(", "H", ",", "ema_vae", ",", "ema_path", ",", "map_cpu", "=", "True", ",", "local_rank", "=", "H", ".", "local_rank", ",", "mpi_size", "=", "H", ".", "mpi_size", ",", "\n", "init_cond_from_uncond", "=", "init_cond_from_uncond", ")", "\n", "", "else", ":", "\n", "        ", "ema_vae", ".", "load_state_dict", "(", "vae", ".", "state_dict", "(", ")", ")", "\n", "", "ema_vae", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "vae", "=", "vae", ".", "cuda", "(", "H", ".", "local_rank", ")", "\n", "ema_vae", "=", "ema_vae", ".", "cuda", "(", "H", ".", "local_rank", ")", "\n", "\n", "if", "\"NO_MPI\"", "not", "in", "os", ".", "environ", ":", "\n", "        ", "vae", "=", "DistributedDataParallel", "(", "vae", ",", "device_ids", "=", "[", "H", ".", "local_rank", "]", ",", "output_device", "=", "H", ".", "local_rank", ",", "find_unused_parameters", "=", "True", ")", "# ideally would not need find_unused_parameters", "\n", "", "if", "len", "(", "list", "(", "vae", ".", "named_parameters", "(", ")", ")", ")", "!=", "len", "(", "list", "(", "vae", ".", "parameters", "(", ")", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Some params are not named. Please name all params.'", ")", "\n", "", "total_params", "=", "0", "\n", "for", "name", ",", "p", "in", "vae", ".", "named_parameters", "(", ")", ":", "\n", "        ", "total_params", "+=", "np", ".", "prod", "(", "p", ".", "shape", ")", "\n", "", "logprint", "(", "total_params", "=", "total_params", ",", "readable", "=", "f'{total_params:,}'", ")", "\n", "return", "vae", ",", "ema_vae", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.load_opt": [[244, 260], ["optim_type", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "os.path.join", "print", "optim_type.load_state_dict", "train_helpers.linear_warmup", "torch.load", "torch.load", "vae.parameters", "train_helpers.distributed_maybe_download"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.linear_warmup", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.distributed_maybe_download"], ["", "def", "load_opt", "(", "H", ",", "vae", ",", "logprint", ",", "init_cond_from_uncond", "=", "False", ")", ":", "\n", "    ", "optim_type", "=", "BasicAdamW", "# if 'NO_MPI' in os.environ else AdamW", "\n", "optimizer", "=", "optim_type", "(", "[", "p", "for", "p", "in", "vae", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", ",", "weight_decay", "=", "H", ".", "wd", ",", "lr", "=", "H", ".", "lr", ",", "betas", "=", "(", "H", ".", "adam_beta1", ",", "H", ".", "adam_beta2", ")", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "linear_warmup", "(", "H", ".", "warmup_iters", ")", ")", "\n", "if", "init_cond_from_uncond", ":", "\n", "        ", "load_dir", "=", "H", ".", "pretrained_load_dir", "\n", "assert", "load_dir", "is", "not", "None", "\n", "return", "optimizer", ",", "scheduler", "\n", "", "else", ":", "\n", "        ", "load_dir", "=", "H", ".", "ckpt_load_dir", "\n", "", "if", "load_dir", "is", "not", "None", "and", "not", "H", ".", "not_load_opt", ":", "\n", "        ", "opt_path", "=", "os", ".", "path", ".", "join", "(", "load_dir", ",", "'opt.th'", ")", "\n", "print", "(", "f'Restoring opt from {opt_path}.'", ")", "\n", "optimizer", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "distributed_maybe_download", "(", "opt_path", ",", "H", ".", "local_rank", ",", "H", ".", "mpi_size", ")", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.reload_ckpt": [[262, 271], ["os.path.join", "optimizer.load_state_dict", "os.path.join", "os.path.join", "train_helpers.restore_params", "train_helpers.restore_params", "torch.load", "torch.load", "train_helpers.distributed_maybe_download"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.restore_params", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.restore_params", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.distributed_maybe_download"], ["", "def", "reload_ckpt", "(", "H", ",", "ckpt_dir", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "logprint", ")", ":", "\n", "    ", "opt_path", "=", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'opt.th'", ")", "\n", "optimizer", ".", "load_state_dict", "(", "\n", "torch", ".", "load", "(", "distributed_maybe_download", "(", "opt_path", ",", "H", ".", "local_rank", ",", "H", ".", "mpi_size", ")", ",", "map_location", "=", "'cpu'", ")", ")", "\n", "vae_path", "=", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'model.th'", ")", "\n", "ema_path", "=", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'model-ema.th'", ")", "\n", "vae_module", "=", "vae", "if", "'NO_MPI'", "in", "os", ".", "environ", "else", "vae", ".", "module", "\n", "restore_params", "(", "H", ",", "vae_module", ",", "vae_path", ",", "map_cpu", "=", "True", ",", "local_rank", "=", "H", ".", "local_rank", ",", "mpi_size", "=", "H", ".", "mpi_size", ",", "init_cond_from_uncond", "=", "False", ")", "\n", "restore_params", "(", "H", ",", "ema_vae", ",", "ema_path", ",", "map_cpu", "=", "True", ",", "local_rank", "=", "H", ".", "local_rank", ",", "mpi_size", "=", "H", ".", "mpi_size", ",", "init_cond_from_uncond", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.reinit": [[273, 279], ["vae.decoder.build", "vae.encoder.build", "vae.decoder.cuda", "vae.encoder.cuda"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.build", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.build", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda"], ["", "def", "reinit", "(", "H", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "logprint", ")", ":", "# really shitty function but may be good enough", "\n", "# vae.build()", "\n", "    ", "vae", ".", "decoder", ".", "build", "(", ")", "\n", "vae", ".", "encoder", ".", "build", "(", ")", "\n", "vae", ".", "decoder", "=", "vae", ".", "decoder", ".", "cuda", "(", "H", ".", "local_rank", ")", "\n", "vae", ".", "encoder", "=", "vae", ".", "encoder", ".", "cuda", "(", "H", ".", "local_rank", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.is_stable_is_failed": [[280, 286], ["sum", "len", "len"], "function", ["None"], ["", "def", "is_stable_is_failed", "(", "stats", ",", "horizon", ")", ":", "\n", "    ", "recent_stats", "=", "stats", "[", "-", "horizon", ":", "]", "\n", "prop_skipped_updates", "=", "sum", "(", "s", "[", "'skipped_updates'", "]", "for", "s", "in", "recent_stats", ")", "/", "len", "(", "recent_stats", ")", "\n", "stable", "=", "(", "prop_skipped_updates", "<", "0.25", ")", "and", "(", "stats", "[", "-", "1", "]", "[", "'skipped_updates'", "]", "==", "0", ")", "# hard-coded hyperparameters :)", "\n", "failed", "=", "(", "prop_skipped_updates", "==", "1", ")", "and", "(", "len", "(", "recent_stats", ")", "==", "horizon", ")", "\n", "return", "stable", ",", "failed", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.None.hps.Hyperparams.__getattr__": [[12, 18], ["print"], "methods", ["None"], ["    ", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "attr", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "print", "(", "f'Not a valid attribute {attr}. Returning None.'", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.hps.Hyperparams.__setattr__": [[19, 21], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "attr", ",", "value", ")", ":", "\n", "        ", "self", "[", "attr", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.hps.Hyperparams.copy": [[22, 27], ["hps.Hyperparams", "hps.Hyperparams.items"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "new", "=", "Hyperparams", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "new", "[", "k", "]", "=", "v", "\n", "", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.hps.str2bool": [[5, 7], ["s.lower"], "function", ["None"], ["def", "str2bool", "(", "s", ")", ":", "\n", "    ", "return", "'t'", "in", "s", ".", "lower", "(", ")", "\n", "", "def", "int_or_none", "(", "s", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.hps.int_or_none": [[7, 9], ["int", "s.lower"], "function", ["None"], ["", "def", "int_or_none", "(", "s", ")", ":", "\n", "    ", "return", "None", "if", "s", ".", "lower", "(", ")", "==", "'none'", "else", "int", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.hps.parse_args_and_update_hparams": [[158, 172], ["parser.parse_args", "set", "H.update", "parser.parse_args.__dict__.keys", "parser.set_defaults", "numpy.random.randint", "parser.parse_args.hparam_sets.split", "parser.parse_args", "ValueError"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update"], ["def", "parse_args_and_update_hparams", "(", "H", ",", "parser", ",", "s", "=", "None", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", "s", ")", "\n", "valid_args", "=", "set", "(", "args", ".", "__dict__", ".", "keys", "(", ")", ")", "\n", "hparam_sets", "=", "[", "x", "for", "x", "in", "args", ".", "hparam_sets", ".", "split", "(", "','", ")", "if", "x", "]", "\n", "for", "hp_set", "in", "hparam_sets", ":", "\n", "        ", "hps", "=", "HPARAMS_REGISTRY", "[", "hp_set", "]", "\n", "for", "k", "in", "hps", ":", "\n", "            ", "if", "k", "not", "in", "valid_args", ":", "\n", "                ", "raise", "ValueError", "(", "f\"{k} not in default args\"", ")", "\n", "", "", "parser", ".", "set_defaults", "(", "**", "hps", ")", "\n", "", "H", ".", "update", "(", "parser", ".", "parse_args", "(", "s", ")", ".", "__dict__", ")", "\n", "H", ".", "conditional", "=", "(", "not", "H", ".", "unconditional", ")", "\n", "if", "H", ".", "seed", "is", "None", ":", "\n", "        ", "H", ".", "seed", "=", "np", ".", "random", ".", "randint", "(", "2", "**", "32", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.hps.add_vae_arguments": [[174, 268], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "", "def", "add_vae_arguments", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--port'", ",", "type", "=", "int_or_none", ",", "default", "=", "29500", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ",", "default", "=", "'./saved_models'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'./'", ",", "\n", "help", "=", "\"Will treat as an environment variable if it begins with $\"", ")", "\n", "parser", ".", "add_argument", "(", "'--hparam_sets'", ",", "'--hps'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--desc'", ",", "type", "=", "str", ",", "default", "=", "'test'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt_load_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_like'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'''Use normalisation stats from other dataset. Useful for transferring pretrained models.\n                              Check data.py before using - this is implemented in an ad-hoc way.'''", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_rate'", ",", "type", "=", "float", ",", "default", "=", "0.999", ")", "\n", "parser", ".", "add_argument", "(", "'--enc_blocks'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--dec_blocks'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--zdim'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "'--custom_width_str'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--bottleneck_multiple'", ",", "type", "=", "float", ",", "default", "=", "0.25", ")", "\n", "parser", ".", "add_argument", "(", "'--no_bias_above'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--scale_encblock'", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--test_eval'", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_with_train_set'", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_iters'", ",", "type", "=", "float", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--num_mixtures'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--grad_clip'", ",", "type", "=", "float", ",", "default", "=", "200.0", ")", "\n", "parser", ".", "add_argument", "(", "'--skip_threshold'", ",", "type", "=", "float", ",", "default", "=", "400.0", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.00015", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_prior'", ",", "type", "=", "float", ",", "default", "=", "0.00015", ")", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "'--wd_prior'", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iters'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'Number of iterations to run for. Should only be used with num_epochs=1.'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_batch'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--fid_bs'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'Batch size to use on FID.'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_workers'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--grad_accumulations'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Set to >1 to simulate a bigger batch size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam_beta1'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--adam_beta2'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--iters_per_backup'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "'--iters_per_ckpt'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "'--iters_per_save'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "'--iters_per_images'", ",", "type", "=", "int", ",", "default", "=", "5000", ")", "\n", "parser", ".", "add_argument", "(", "'--iters_per_log'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs_per_eval'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs_per_probe'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs_per_eval_save'", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--num_images_visualize'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--num_variables_visualize'", ",", "type", "=", "int", ",", "default", "=", "6", ")", "\n", "parser", ".", "add_argument", "(", "'--num_temperatures_visualize'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--num_reconstructions_visualize'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "'--num_samples_visualize'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--plot_ent'", ",", "default", "=", "True", ",", "type", "=", "str2bool", ",", "help", "=", "'Log plots of entropy of latent dists.'", ")", "\n", "parser", ".", "add_argument", "(", "'--wandb_id'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "# conditional training things", "\n", "parser", ".", "add_argument", "(", "'--unconditional'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--conditioning'", ",", "type", "=", "str", ",", "default", "=", "'freeform'", ",", "\n", "choices", "=", "[", "'patches'", ",", "'patches-missing'", ",", "'blank'", ",", "'freeform'", ",", "'image'", "]", ",", "\n", "help", "=", "'\"image\" should only be used with the Edges2Photos datasets.'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeform_hole_range'", ",", "type", "=", "float", ",", "nargs", "=", "2", ",", "default", "=", "[", "0", ",", "1", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--max_patches'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--patch_size_frac'", ",", "type", "=", "float", ",", "default", "=", "0.35", ",", "\n", "help", "=", "\"Patch width as fraction of image width.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_load_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'If provided, initializes from pretrained unconditional model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_encoder_decoder'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "choices", "=", "[", "\"\"", ",", "\"slightly\"", ",", "\"all\"", "]", ",", "\n", "help", "=", "'If True, will not fix weights of pretrained models.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_partial_encoder'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "choices", "=", "[", "\"\"", ",", "\"mostly\"", ",", "\"all\"", "]", ",", "\n", "help", "=", "'Initialise most/all weights in partial encoder to values from pretrained encoder.'", ")", "\n", "parser", ".", "add_argument", "(", "'--kl'", ",", "type", "=", "str", ",", "default", "=", "'r1_q'", ",", "choices", "=", "[", "'r1_q'", ",", "'q_r2'", "]", ",", "\n", "help", "=", "'\"r1_q\" means training with the IPA objective, \"q_r2\" means training with IPA-R.'", ")", "\n", "parser", ".", "add_argument", "(", "'--rev_kl_schedule'", ",", "type", "=", "int", ",", "nargs", "=", "'*'", ",", "default", "=", "None", ",", "\n", "help", "=", "'Iterations in which to introduce the reverse kl term. e.g. 10 20 will'", "+", "\n", "'gradually introduce term between 10th and 20th iteration. '", ")", "\n", "parser", ".", "add_argument", "(", "'--share_encoders'", ",", "default", "=", "False", ",", "type", "=", "str2bool", ",", "help", "=", "'Use partial encoder as full encoder.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_distortion'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Compute distortion for only unobserved pixels in forward KL loss.'", ")", "\n", "parser", ".", "add_argument", "(", "'--noisy_kl'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Worse estimate of KL.'", ")", "\n", "parser", ".", "add_argument", "(", "'--clamp_std'", ",", "default", "=", "None", ",", "type", "=", "float", ",", "\n", "help", "=", "'Clamp std for part encoder to potentially improve stability.'", ")", "\n", "parser", ".", "add_argument", "(", "'--likelihood_temp_schedule'", ",", "type", "=", "float", ",", "nargs", "=", "3", ",", "default", "=", "[", "0", ",", "1", ",", "1", "]", ",", "\n", "help", "=", "'n_iterations to anneal temperature to 1 over, and starting temperature. Only used for q_r2 KL divergence.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tags'", ",", "type", "=", "str", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "]", ",", "help", "=", "'Tags for wandb run.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_ema'", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "'If given, will ignore maintaining an EMA version of the network (will make the code faster; mainly used in sweeps)'", ")", "\n", "parser", ".", "add_argument", "(", "'--not_load_opt'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--fid_samples'", ",", "type", "=", "int_or_none", ",", "default", "=", "None", ",", "help", "=", "'Number of samples to use for estimating FID score. If None, does not evaluate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz_seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Seed used to create masks for visualisation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_sample_workers'", ",", "type", "=", "int_or_none", ",", "default", "=", "None", ",", "help", "=", "'Parallelise mask sampling.'", ")", "\n", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train.run_net": [[32, 44], ["vae.forward", "vae_helpers.sample_part_images", "vae.forward"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_part_images", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward"], ["def", "run_net", "(", "H", ",", "vae", ",", "x", ",", "target", ",", "iterate", ",", "differentiate", ")", ":", "\n", "\n", "    ", "if", "H", ".", "unconditional", ":", "\n", "        ", "stats", "=", "vae", ".", "forward", "(", "x", ",", "target", ")", "\n", "if", "differentiate", ":", "\n", "            ", "(", "stats", "[", "'elbo'", "]", "/", "H", ".", "grad_accumulations", ")", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "part_obs", "=", "sample_part_images", "(", "H", ",", "x", ")", "\n", "stats", "=", "vae", ".", "forward", "(", "part_obs", ",", "x", ",", "target", ",", "obj", "=", "H", ".", "kl", ",", "iterate", "=", "iterate", ")", "\n", "if", "differentiate", ":", "\n", "            ", "(", "stats", "[", "'loss'", "]", "/", "H", ".", "grad_accumulations", ")", ".", "backward", "(", ")", "\n", "", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train.enforce_obs": [[46, 53], ["torch.is_tensor", "part_obs.cpu().numpy.cpu().numpy", "part_obs.cpu().numpy.cpu"], "function", ["None"], ["", "def", "enforce_obs", "(", "H", ",", "samples", ",", "part_obs", ",", "orig", "=", "None", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "part_obs", ")", ":", "\n", "        ", "part_obs", "=", "part_obs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "orig", "is", "None", ":", "\n", "        ", "orig", "=", "part_obs", "[", "...", ",", ":", "-", "1", "]", "\n", "", "mask", "=", "part_obs", "[", "...", ",", "-", "1", ":", "]", "\n", "return", "samples", "*", "(", "1", "-", "mask", ")", "+", "orig", "*", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train.training_step": [[54, 82], ["time.time", "optimizer.zero_grad", "zip", "torch.nn.utils.clip_grad_norm_().item", "run_net.update", "utils.get_cpu_stats_over_ranks", "time.time", "run_net.update", "torch.chunk", "torch.chunk", "train.run_net", "torch.isnan().sum", "torch.isnan().sum", "dict", "optimizer.step", "torch.nn.utils.clip_grad_norm_", "train_helpers.update_ema", "vae.parameters", "torch.isnan", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.get_cpu_stats_over_ranks", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.run_net", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.update_ema"], ["", "def", "training_step", "(", "H", ",", "x", ",", "target", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "iterate", ")", ":", "\n", "    ", "t0", "=", "time", ".", "time", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "x_chunk", ",", "target_chunk", "in", "zip", "(", "torch", ".", "chunk", "(", "x", ",", "chunks", "=", "H", ".", "grad_accumulations", ",", "dim", "=", "0", ")", ",", "\n", "torch", ".", "chunk", "(", "target", ",", "chunks", "=", "H", ".", "grad_accumulations", ",", "dim", "=", "0", ")", ")", ":", "\n", "        ", "stats", "=", "run_net", "(", "H", ",", "vae", ",", "x_chunk", ",", "target_chunk", ",", "iterate", "=", "iterate", ",", "differentiate", "=", "True", ")", "\n", "", "grad_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "vae", ".", "parameters", "(", ")", ",", "H", ".", "grad_clip", ")", ".", "item", "(", ")", "\n", "if", "H", ".", "kl", "==", "'sym'", ":", "\n", "        ", "distortion_nans", "=", "0", "\n", "rate_nans", "=", "0", "\n", "", "else", ":", "\n", "        ", "distortion_nans", "=", "torch", ".", "isnan", "(", "stats", "[", "'distortion'", "]", ")", ".", "sum", "(", ")", "\n", "rate_nans", "=", "torch", ".", "isnan", "(", "stats", "[", "'rate'", "]", ")", ".", "sum", "(", ")", "\n", "", "stats", ".", "update", "(", "\n", "dict", "(", "rate_nans", "=", "0", "if", "rate_nans", "==", "0", "else", "1", ",", "distortion_nans", "=", "0", "if", "distortion_nans", "==", "0", "else", "1", ")", ")", "\n", "stats", "=", "get_cpu_stats_over_ranks", "(", "stats", ")", "\n", "\n", "skipped_updates", "=", "1", "\n", "# only update if no rank has a nan and if the grad norm is below a specific threshold", "\n", "if", "stats", "[", "'distortion_nans'", "]", "==", "0", "and", "stats", "[", "'rate_nans'", "]", "==", "0", "and", "(", "H", ".", "skip_threshold", "==", "-", "1", "or", "grad_norm", "<", "H", ".", "skip_threshold", ")", ":", "\n", "        ", "optimizer", ".", "step", "(", ")", "\n", "skipped_updates", "=", "0", "\n", "if", "not", "H", ".", "no_ema", ":", "\n", "            ", "update_ema", "(", "vae", ",", "ema_vae", ",", "H", ".", "ema_rate", ")", "\n", "\n", "", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "stats", ".", "update", "(", "skipped_updates", "=", "skipped_updates", ",", "iter_time", "=", "t1", "-", "t0", ",", "grad_norm", "=", "grad_norm", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train.eval_step": [[84, 90], ["utils.get_cpu_stats_over_ranks", "torch.no_grad", "train.run_net"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.utils.get_cpu_stats_over_ranks", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.run_net"], ["", "def", "eval_step", "(", "H", ",", "data_input", ",", "target", ",", "ema_vae", ",", "i", "=", "0", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "stats", "=", "run_net", "(", "H", ",", "ema_vae", ",", "data_input", ",", "target", ",", "iterate", "=", "np", ".", "inf", ",", "differentiate", "=", "False", ")", "\n", "\n", "", "stats", "=", "get_cpu_stats_over_ranks", "(", "stats", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train.get_sample_for_visualization": [[92, 101], ["torch.utils.data.DataLoader", "preprocess_fn"], "function", ["None"], ["", "def", "get_sample_for_visualization", "(", "data", ",", "preprocess_fn", ",", "num", ",", "dataset", ")", ":", "\n", "    ", "for", "x", "in", "DataLoader", "(", "data", ",", "batch_size", "=", "num", ")", ":", "\n", "        ", "break", "\n", "", "if", "dataset", "in", "[", "'ffhq_1024'", ",", "'xray'", ",", "'shoes'", ",", "'bags'", ",", "'shoes64'", ",", "'bags64'", "]", ":", "\n", "        ", "orig_image", "=", "(", "x", "[", "0", "]", "*", "255.0", ")", ".", "to", "(", "torch", ".", "uint8", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "orig_image", "=", "x", "[", "0", "]", "\n", "", "preprocessed", "=", "preprocess_fn", "(", "x", ")", "[", "0", "]", "\n", "return", "orig_image", ",", "preprocessed", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train.loader": [[102, 111], ["torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "sampler.set_epoch"], "function", ["None"], ["", "def", "loader", "(", "H", ",", "data", ",", "is_train", ",", "epoch", "=", "None", ",", "bs", "=", "None", ")", ":", "\n", "    ", "sampler", "=", "None", "if", "\"NO_MPI\"", "in", "os", ".", "environ", "else", "DistributedSampler", "(", "data", ",", "num_replicas", "=", "H", ".", "mpi_size", ",", "rank", "=", "H", ".", "rank", ")", "\n", "num_workers", "=", "H", ".", "n_workers", "if", "\"NO_MPI\"", "in", "os", ".", "environ", "else", "0", "\n", "if", "is_train", "and", "sampler", "is", "not", "None", ":", "\n", "        ", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "if", "bs", "is", "None", ":", "\n", "        ", "bs", "=", "H", ".", "n_batch", "*", "H", ".", "grad_accumulations", "if", "is_train", "else", "H", ".", "n_batch", "\n", "", "return", "DataLoader", "(", "data", ",", "batch_size", "=", "bs", ",", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "sampler", "=", "sampler", ",", "num_workers", "=", "num_workers", ",", "\n", "shuffle", "=", "(", "sampler", "is", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train.train_loop": [[112, 197], ["train_helpers.load_opt", "train.get_sample_for_visualization", "set", "torch.as_tensor().cuda", "range", "enumerate", "torch.as_tensor", "train.loader", "preprocess_fn", "train.training_step", "stats.append", "scheduler.step", "train.evaluate", "logprint", "wandb.log", "wandb.log", "logprint", "train.log_images", "train_helpers.is_stable_is_failed", "numpy.isfinite", "train_helpers.save_model", "wandb.log", "train_helpers.is_stable_is_failed", "print", "wandb.log", "range", "isinstance", "wandb.log", "print", "logprint", "os.path.join", "os.path.join", "logprint", "train_helpers.save_model", "os.path.join", "os.path.join", "dict", "wandb.log", "print", "dict", "train_helpers.accumulate_stats", "wandb.Api", "wandb.Api.run", "print", "MPI.COMM_WORLD.bcast", "print", "train_helpers.reload_ckpt", "dict", "evaluate.items", "scheduler.get_last_lr", "os.path.join", "os.path.join", "wandb.log", "train_helpers.accumulate_stats", "train_helpers.accumulate_stats"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.load_opt", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.get_sample_for_visualization", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.loader", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.training_step", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.evaluate", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.log_images", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.is_stable_is_failed", "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.save_model", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.is_stable_is_failed", "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.save_model", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.accumulate_stats", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.reload_ckpt", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.accumulate_stats", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.accumulate_stats"], ["", "def", "train_loop", "(", "H", ",", "data_train", ",", "data_valid", ",", "preprocess_fn", ",", "vae", ",", "ema_vae", ",", "logprint", ",", "\n", "starting_epoch", ",", "iterate", ")", ":", "\n", "    ", "optimizer", ",", "scheduler", "=", "load_opt", "(", "H", ",", "vae", ",", "logprint", ",", "\n", "init_cond_from_uncond", "=", "H", ".", "load_pretrained", ")", "\n", "\n", "viz_batch_original", ",", "viz_batch_processed", "=", "get_sample_for_visualization", "(", "data_valid", ",", "preprocess_fn", ",", "H", ".", "num_images_visualize", ",", "H", ".", "dataset", ")", "\n", "early_evals", "=", "set", "(", "[", "1", "]", "+", "[", "2", "**", "exp", "for", "exp", "in", "range", "(", "3", ",", "14", ")", "]", ")", "\n", "stats", "=", "[", "]", "\n", "iters_since_starting", "=", "0", "\n", "H", ".", "ema_rate", "=", "torch", ".", "as_tensor", "(", "H", ".", "ema_rate", ")", ".", "cuda", "(", ")", "\n", "for", "epoch", "in", "range", "(", "starting_epoch", ",", "H", ".", "num_epochs", ")", ":", "\n", "\n", "        ", "for", "epoch_iter", ",", "x", "in", "enumerate", "(", "loader", "(", "H", ",", "data_train", ",", "is_train", "=", "True", ",", "epoch", "=", "epoch", ")", ")", ":", "\n", "            ", "if", "epoch_iter", ">", "0", "and", "H", ".", "rank", "==", "0", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "'iteration'", ":", "iterate", "}", ",", "commit", "=", "True", ")", "\n", "", "data_input", ",", "target", "=", "preprocess_fn", "(", "x", ")", "\n", "training_stats", "=", "training_step", "(", "H", ",", "data_input", ",", "target", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "iterate", ")", "\n", "stats", ".", "append", "(", "training_stats", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "H", ".", "no_ema", ":", "\n", "                ", "ema_vae", "=", "vae", ".", "module", "if", "isinstance", "(", "vae", ",", "DistributedDataParallel", ")", "else", "vae", "\n", "\n", "# log losses", "\n", "", "if", "iterate", "%", "H", ".", "iters_per_log", "==", "0", "or", "(", "iters_since_starting", "in", "early_evals", ")", ":", "\n", "                ", "if", "H", ".", "rank", "==", "0", ":", "\n", "                    ", "wandb", ".", "log", "(", "dict", "(", "epoch", "=", "epoch", ",", "**", "accumulate_stats", "(", "stats", ",", "H", ".", "iters_per_log", ")", ")", ",", "commit", "=", "False", ")", "\n", "", "", "if", "iterate", "%", "10000", "==", "0", "or", "(", "iters_since_starting", "in", "early_evals", ")", ":", "\n", "                ", "logprint", "(", "model", "=", "H", ".", "desc", ",", "type", "=", "'train_loss'", ",", "lr", "=", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "epoch", "=", "epoch", ",", "step", "=", "iterate", ",", "**", "accumulate_stats", "(", "stats", ",", "H", ".", "iters_per_log", ")", ")", "\n", "\n", "# log images", "\n", "", "if", "iterate", "%", "H", ".", "iters_per_images", "==", "0", "or", "(", "iters_since_starting", "in", "early_evals", "and", "H", ".", "dataset", "!=", "'ffhq_1024'", ")", "and", "H", ".", "rank", "==", "0", ":", "\n", "                ", "log_images", "(", "H", ",", "ema_vae", ",", "viz_batch_original", ",", "viz_batch_processed", ")", "\n", "\n", "# check if we need to reload whenever logging", "\n", "", "if", "iterate", "%", "H", ".", "iters_per_log", "==", "0", ":", "\n", "                ", "_", ",", "failed", "=", "is_stable_is_failed", "(", "stats", ",", "H", ".", "iters_per_log", ")", "\n", "if", "failed", ":", "\n", "                    ", "print", "(", "'reloading due to update skipping'", ")", "\n", "if", "H", ".", "rank", "==", "0", ":", "\n", "                        ", "api", "=", "wandb", ".", "Api", "(", ")", "\n", "run", "=", "api", ".", "run", "(", "f'{os.environ[\"WANDB_ENTITY\"]}/{PROJECT_NAME}/{H.wandb_id}'", ")", "\n", "print", "(", "run", ".", "summary", ")", "\n", "if", "'last_stable_save'", "in", "run", ".", "summary", ":", "\n", "                            ", "last_stable_save", "=", "run", ".", "summary", "[", "'last_stable_save'", "]", "\n", "stable_ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "f'iter-{last_stable_save}'", ")", "\n", "wandb", ".", "log", "(", "{", "'reloading_from'", ":", "last_stable_save", "}", ",", "commit", "=", "False", ")", "\n", "", "else", ":", "\n", "                            ", "return", "'failed'", "\n", "", "", "else", ":", "\n", "                        ", "stable_ckpt_dir", "=", "None", "\n", "", "if", "'NO_MPI'", "not", "in", "os", ".", "environ", ":", "\n", "                        ", "stable_ckpt_dir", "=", "MPI", ".", "COMM_WORLD", ".", "bcast", "(", "stable_ckpt_dir", ",", "root", "=", "0", ")", "\n", "", "if", "stable_ckpt_dir", "is", "not", "None", ":", "\n", "                        ", "print", "(", "'reloading with stable_ckpt_dir ='", ",", "stable_ckpt_dir", ")", "\n", "reload_ckpt", "(", "H", ",", "stable_ckpt_dir", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "logprint", ")", "\n", "", "", "", "iterate", "+=", "1", "\n", "iters_since_starting", "+=", "1", "\n", "if", "iterate", "%", "H", ".", "iters_per_save", "==", "0", "and", "H", ".", "rank", "==", "0", ":", "\n", "                ", "if", "np", ".", "isfinite", "(", "stats", "[", "-", "1", "]", "[", "'loss'", "]", ")", ":", "\n", "                    ", "logprint", "(", "model", "=", "H", ".", "desc", ",", "type", "=", "'train_loss'", ",", "epoch", "=", "epoch", ",", "step", "=", "iterate", ",", "**", "accumulate_stats", "(", "stats", ",", "H", ".", "iters_per_log", ")", ")", "\n", "fp", "=", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "'latest'", ")", "\n", "logprint", "(", "f'Saving model@ {iterate} to {fp}'", ")", "\n", "save_model", "(", "fp", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "H", ",", "create_dir", "=", "False", ")", "\n", "", "save_model", "(", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "f'iter-{iterate}'", ")", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "H", ",", "create_dir", "=", "True", ")", "\n", "wandb", ".", "log", "(", "dict", "(", "epoch", "=", "epoch", ",", "last_save", "=", "iterate", ")", ",", "commit", "=", "False", ")", "\n", "stable", ",", "_", "=", "is_stable_is_failed", "(", "stats", ",", "H", ".", "iters_per_log", ")", "\n", "print", "(", "'saving'", ",", "iterate", ")", "\n", "if", "stable", ":", "\n", "                    ", "wandb", ".", "log", "(", "dict", "(", "epoch", "=", "epoch", ",", "last_stable_save", "=", "iterate", ")", ",", "commit", "=", "False", ")", "\n", "print", "(", "'and it stable'", ",", ")", "\n", "\n", "", "", "if", "H", ".", "num_iters", "is", "not", "None", "and", "iterate", ">=", "H", ".", "num_iters", ":", "\n", "                ", "assert", "H", ".", "num_epochs", "==", "1", "\n", "break", "\n", "\n", "", "", "if", "epoch", "%", "H", ".", "epochs_per_eval", "==", "0", ":", "\n", "            ", "valid_stats", "=", "evaluate", "(", "H", ",", "ema_vae", ",", "data_valid", ",", "preprocess_fn", ")", "\n", "logprint", "(", "model", "=", "H", ".", "desc", ",", "type", "=", "'eval_loss'", ",", "epoch", "=", "epoch", ",", "step", "=", "iterate", ",", "**", "valid_stats", ")", "\n", "if", "H", ".", "rank", "==", "0", ":", "\n", "                ", "valid_stats", "=", "{", "f'valid-{k}'", ":", "v", "for", "k", ",", "v", "in", "valid_stats", ".", "items", "(", ")", "}", "\n", "wandb", ".", "log", "(", "valid_stats", ",", "commit", "=", "False", ")", "\n", "\n", "", "", "if", "H", ".", "rank", "==", "0", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'iteration'", ":", "iterate", "}", ",", "commit", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train.evaluate": [[199, 209], ["enumerate", "dict", "train.loader", "preprocess_fn", "stats_valid.append", "numpy.array", "train.eval_step", "numpy.isfinite", "len", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.train.loader", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.eval_step"], ["", "", "", "def", "evaluate", "(", "H", ",", "ema_vae", ",", "data_valid", ",", "preprocess_fn", ",", "is_train", "=", "False", ")", ":", "\n", "    ", "stats_valid", "=", "[", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "loader", "(", "H", ",", "data_valid", ",", "is_train", "=", "is_train", ")", ")", ":", "\n", "        ", "data_input", ",", "target", "=", "preprocess_fn", "(", "x", ")", "\n", "stats_valid", ".", "append", "(", "eval_step", "(", "H", ",", "data_input", ",", "target", ",", "ema_vae", ",", "i", "=", "i", ")", ")", "\n", "# print(stats_valid[-1]['distortion'])", "\n", "", "vals", "=", "[", "a", "[", "'loss'", "]", "for", "a", "in", "stats_valid", "]", "\n", "finites", "=", "np", ".", "array", "(", "vals", ")", "[", "np", ".", "isfinite", "(", "vals", ")", "]", "\n", "stats", "=", "dict", "(", "n_batches", "=", "len", "(", "vals", ")", ",", "filtered_loss", "=", "np", ".", "mean", "(", "finites", ")", ",", "**", "{", "k", ":", "np", ".", "mean", "(", "[", "a", "[", "k", "]", "for", "a", "in", "stats_valid", "]", ")", "for", "k", "in", "stats_valid", "[", "-", "1", "]", "}", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train.log_reconstructions": [[211, 253], ["range", "numpy.tile", "numpy.repeat", "zip", "numpy.array", "range", "ema_vae.decoder.run", "zss.append", "viz_batch_original[].numpy", "np.array.extend", "numpy.array", "numpy.repeat", "numpy.arange", "ema_vae.decoder.run", "np.array.append", "min", "numpy.concatenate", "wandb.log", "s[].cuda().clone", "numpy.floor().astype", "ema_vae.decoder.out_net.sample", "list", "train.enforce_obs", "int", "wandb.Image", "s[].cuda", "numpy.floor", "viz_batch_original.numpy", "numpy.linspace", "len"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.enforce_obs", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda"], ["", "def", "log_reconstructions", "(", "H", ",", "ema_vae", ",", "first_latents_from", ",", "last_latents_from", ",", "\n", "viz_batch_original", ",", "caption", ",", "part_obs", "=", "None", ",", "\n", "full_activations", "=", "None", ",", "part_activations", "=", "None", ",", "\n", "only_top_level", "=", "False", ",", "n_upper_samples", "=", "1", ",", "\n", "n_lower_samples", "=", "1", ",", "lower_t", "=", "0.1", ")", ":", "\n", "\n", "    ", "zss", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_upper_samples", ")", ":", "\n", "        ", "_", ",", "stats", "=", "ema_vae", ".", "decoder", ".", "run", "(", "sample_from", "=", "first_latents_from", ",", "\n", "full_activations", "=", "full_activations", ",", "\n", "part_activations", "=", "part_activations", ",", "\n", "get_ents", "=", "H", ".", "plot_ent", ",", "get_latents", "=", "True", ")", "\n", "zs", "=", "[", "s", "[", "'z'", "]", ".", "cuda", "(", ")", ".", "clone", "(", ")", "for", "s", "in", "stats", "]", "\n", "zss", ".", "append", "(", "zs", ")", "\n", "", "reconstructions", "=", "[", "viz_batch_original", "[", "...", ",", "-", "H", ".", "image_size", ":", ",", ":", "]", ".", "numpy", "(", ")", "]", "\n", "if", "part_obs", "is", "not", "None", ":", "\n", "        ", "if", "H", ".", "conditioning", "==", "'image'", ":", "\n", "            ", "masked", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "masked", "=", "[", "enforce_obs", "(", "H", ",", "viz_batch_original", ".", "numpy", "(", ")", "*", "0.", ",", "part_obs", ")", "]", "\n", "", "reconstructions", ".", "extend", "(", "masked", ")", "\n", "", "if", "only_top_level", ":", "\n", "        ", "lv_points", "=", "np", ".", "array", "(", "[", "int", "(", "only_top_level", ")", ",", "]", ")", "\n", "", "else", ":", "\n", "        ", "lv_points", "=", "np", ".", "floor", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "H", ".", "num_variables_visualize", "+", "2", ")", "*", "len", "(", "zs", ")", ")", ".", "astype", "(", "int", ")", "[", "1", ":", "-", "1", "]", "\n", "", "lv_points", "=", "np", ".", "tile", "(", "np", ".", "repeat", "(", "lv_points", ",", "n_lower_samples", ")", ",", "n_upper_samples", ")", "\n", "upper_indices", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "n_upper_samples", ")", ",", "(", "1", "if", "only_top_level", "else", "H", ".", "num_variables_visualize", ")", "*", "n_lower_samples", ")", "\n", "\n", "for", "i", ",", "level", "in", "zip", "(", "upper_indices", ",", "lv_points", ")", ":", "\n", "        ", "px_z", ",", "_", "=", "ema_vae", ".", "decoder", ".", "run", "(", "sample_from", "=", "last_latents_from", ",", "\n", "full_activations", "=", "full_activations", ",", "\n", "part_activations", "=", "part_activations", ",", "\n", "manual_latents", "=", "zss", "[", "i", "]", "[", ":", "level", "]", ",", "t", "=", "lower_t", ")", "\n", "reconstructions", ".", "append", "(", "ema_vae", ".", "decoder", ".", "out_net", ".", "sample", "(", "px_z", ")", ")", "\n", "", "reconstructions", "=", "np", ".", "array", "(", "reconstructions", ")", "\n", "for", "col", "in", "range", "(", "min", "(", "H", ".", "num_reconstructions_visualize", ",", "reconstructions", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "recon", "=", "reconstructions", "[", ":", ",", "col", "]", "\n", "combined", "=", "np", ".", "concatenate", "(", "list", "(", "recon", ")", ",", "axis", "=", "1", ")", "\n", "name", "=", "f'{caption} {col}'", "\n", "wandb", ".", "log", "(", "{", "name", ":", "wandb", ".", "Image", "(", "combined", ",", "caption", "=", "name", ")", "}", ",", "commit", "=", "False", ")", "\n", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train.log_images": [[254, 327], ["vae_helpers.rng_decorator", "torch.no_grad", "ema_vae.encode_full_image", "train.log_reconstructions", "matplotlib.close", "ema_vae.part_encoder", "train.log_reconstructions", "ema_vae.decoder.run", "ema_vae.decoder.out_net.sample", "numpy.concatenate", "wandb.log", "vae_helpers.RNG", "vae_helpers.sample_part_images", "vae_helpers.RNG", "vae_helpers.sample_part_images", "range", "list", "viz_batch_original.float", "matplotlib.subplots", "fig.suptitle", "enumerate", "matplotlib.subplots_adjust", "fig.add_axes", "fig.colorbar", "wandb.log", "range", "enumerate", "wandb.Image", "axes[].set_ylabel", "enumerate", "ema_vae.decoder.run", "ema_vae.decoder.out_net.sample", "enumerate", "train.enforce_obs", "numpy.concatenate", "wandb.log", "len", "torch.nn.functional.interpolate().squeeze", "axes[].imshow", "axes[].set_xticks", "axes[].set_yticks", "range", "all_samples[].append", "viz_batch_original.numpy", "wandb.Image", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate().squeeze.detach().cpu().numpy", "torch.nn.functional.interpolate().squeeze.unsqueeze", "torch.nn.functional.interpolate().squeeze.detach().cpu", "torch.nn.functional.interpolate().squeeze.detach"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.encode_full_image", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.log_reconstructions", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.log_reconstructions", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_part_images", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_part_images", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.enforce_obs"], ["", "@", "rng_decorator", "(", "0", ")", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "log_images", "(", "H", ",", "ema_vae", ",", "viz_batch_original", ",", "viz_batch_processed", ")", ":", "\n", "    ", "if", "H", ".", "rank", "!=", "0", ":", "\n", "        ", "return", "\n", "\n", "", "full_activations", "=", "ema_vae", ".", "encode_full_image", "(", "viz_batch_processed", ")", "\n", "if", "H", ".", "conditional", ":", "\n", "        ", "with", "RNG", "(", "H", ".", "viz_seed", ")", ":", "\n", "            ", "viz_batch_masked", "=", "sample_part_images", "(", "H", ",", "viz_batch_processed", ")", "\n", "", "with", "RNG", "(", "H", ".", "viz_seed", ")", ":", "\n", "            ", "unnormed_masked", "=", "sample_part_images", "(", "H", ",", "viz_batch_original", ".", "float", "(", ")", ")", "\n", "", "part_activations", "=", "ema_vae", ".", "part_encoder", "(", "viz_batch_masked", ")", "\n", "", "else", ":", "\n", "        ", "part_activations", "=", "None", "\n", "\n", "", "stats", "=", "log_reconstructions", "(", "H", ",", "ema_vae", ",", "'full'", ",", "'prior'", ",", "\n", "viz_batch_original", ",", "caption", "=", "'Full then prior'", ",", "\n", "full_activations", "=", "full_activations", ",", "\n", "part_activations", "=", "part_activations", ")", "\n", "if", "H", ".", "conditional", ":", "\n", "        ", "_", "=", "log_reconstructions", "(", "H", ",", "ema_vae", ",", "'part'", ",", "'prior'", ",", "\n", "viz_batch_original", ",", "caption", "=", "'Part then prior'", ",", "\n", "part_obs", "=", "unnormed_masked", ",", "\n", "full_activations", "=", "full_activations", ",", "\n", "part_activations", "=", "part_activations", ")", "\n", "\n", "if", "H", ".", "plot_ent", ":", "\n", "            ", "for", "img_i", "in", "range", "(", "H", ".", "num_reconstructions_visualize", ")", ":", "\n", "                ", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "nrows", "=", "2", ",", "ncols", "=", "len", "(", "stats", ")", ",", "figsize", "=", "(", "8", ",", "1", ")", ")", "\n", "fig", ".", "suptitle", "(", "f'Reduction in entropy for image {img_i} relative to prior'", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "[", "'part_enc'", ",", "'full_enc'", "]", ")", ":", "\n", "                    ", "axes", "[", "i", ",", "0", "]", ".", "set_ylabel", "(", "name", ")", "\n", "for", "j", ",", "layer", "in", "enumerate", "(", "stats", ")", ":", "\n", "                        ", "ents", "=", "(", "layer", "[", "'ents'", "]", "[", "i", "]", "-", "layer", "[", "'ents'", "]", "[", "-", "1", "]", ")", "\n", "ents", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "ents", ".", "unsqueeze", "(", "1", ")", ",", "size", "=", "(", "H", ".", "image_size", ",", "H", ".", "image_size", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "pcm", "=", "axes", "[", "i", ",", "j", "]", ".", "imshow", "(", "ents", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "img_i", "]", ",", "\n", "interpolation", "=", "'none'", ",", "vmin", "=", "-", "20", ",", "vmax", "=", "20", ",", "cmap", "=", "'seismic'", ")", "\n", "axes", "[", "i", ",", "j", "]", ".", "set_xticks", "(", "[", "]", ")", "\n", "axes", "[", "i", ",", "j", "]", ".", "set_yticks", "(", "[", "]", ")", "\n", "", "", "plt", ".", "subplots_adjust", "(", "left", "=", "0", ",", "bottom", "=", "0.25", ",", "right", "=", "1", ",", "top", "=", "0.85", ",", "wspace", "=", "0.1", ",", "hspace", "=", "0.1", ")", "\n", "cbar_ax", "=", "fig", ".", "add_axes", "(", "[", "0.09", ",", "0.2", ",", "0.84", ",", "0.06", "]", ")", "\n", "fig", ".", "colorbar", "(", "pcm", ",", "cax", "=", "cbar_ax", ",", "orientation", "=", "'horizontal'", ")", "\n", "wandb", ".", "log", "(", "{", "f'ents-{img_i}'", ":", "fig", "}", ",", "commit", "=", "False", ")", "\n", "\n", "", "", "if", "H", ".", "conditional", ":", "\n", "            ", "for", "t", "in", "[", "1.0", ",", "0.7", ",", "0.9", ",", "0.8", "]", "[", ":", "H", ".", "num_temperatures_visualize", "]", ":", "\n", "\n", "                ", "all_samples", "=", "[", "[", "]", "for", "_", "in", "range", "(", "viz_batch_original", ".", "shape", "[", "0", "]", ")", "]", "\n", "for", "_", "in", "range", "(", "H", ".", "num_samples_visualize", ")", ":", "\n", "                    ", "sample_px_z", ",", "_", "=", "ema_vae", ".", "decoder", ".", "run", "(", "sample_from", "=", "'part'", ",", "part_activations", "=", "part_activations", ")", "\n", "sample_batch", "=", "ema_vae", ".", "decoder", ".", "out_net", ".", "sample", "(", "sample_px_z", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "sample_batch", ")", ":", "\n", "                        ", "all_samples", "[", "i", "]", ".", "append", "(", "sample", ")", "\n", "\n", "", "", "if", "H", ".", "conditioning", "==", "'image'", ":", "\n", "                    ", "obses", "=", "viz_batch_original", "[", "...", ",", ":", "H", ".", "image_size", ",", ":", "]", "\n", "", "else", ":", "\n", "                    ", "obses", "=", "enforce_obs", "(", "H", ",", "viz_batch_original", ".", "numpy", "(", ")", "*", "0.", ",", "unnormed_masked", ")", "\n", "", "for", "i", ",", "samples", "in", "enumerate", "(", "all_samples", ")", ":", "\n", "                    ", "final", "=", "np", ".", "concatenate", "(", "[", "obses", "[", "i", "]", "]", "+", "samples", ",", "axis", "=", "1", ")", "\n", "caption", "=", "f\"Samples {i} T={t}\"", "\n", "wandb", ".", "log", "(", "{", "caption", ":", "wandb", ".", "Image", "(", "final", ",", "caption", "=", "caption", ")", "}", ",", "commit", "=", "False", ")", "\n", "\n", "", "", "", "", "if", "H", ".", "train_encoder_decoder", "!=", "\"\"", "or", "not", "H", ".", "logged_unconditional", ":", "\n", "# log unconditional samples", "\n", "        ", "uncond_px_z", ",", "_", "=", "ema_vae", ".", "decoder", ".", "run", "(", "sample_from", "=", "'prior'", ",", "n", "=", "10", ")", "\n", "uncond_samples", "=", "ema_vae", ".", "decoder", ".", "out_net", ".", "sample", "(", "uncond_px_z", ")", "\n", "uncond_samples", "=", "np", ".", "concatenate", "(", "list", "(", "uncond_samples", ")", ",", "axis", "=", "1", ")", "# put images side-by-side", "\n", "caption", "=", "'Unconditional samples'", "\n", "wandb", ".", "log", "(", "{", "caption", ":", "wandb", ".", "Image", "(", "uncond_samples", ",", "caption", "=", "caption", ")", "}", ",", "commit", "=", "False", ")", "\n", "H", ".", "logged_unconditional", "=", "True", "\n", "", "plt", ".", "close", "(", "\"all\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train.run_test_eval": [[329, 336], ["print", "train.evaluate", "print", "logprint", "print"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.train.evaluate"], ["", "def", "run_test_eval", "(", "H", ",", "ema_vae", ",", "data_test", ",", "preprocess_fn", ",", "logprint", ")", ":", "\n", "    ", "print", "(", "'evaluating'", ")", "\n", "stats", "=", "evaluate", "(", "H", ",", "ema_vae", ",", "data_test", ",", "preprocess_fn", ",", "is_train", "=", "H", ".", "eval_with_train_set", ")", "\n", "print", "(", "'test results'", ")", "\n", "for", "k", "in", "stats", ":", "\n", "        ", "print", "(", "k", ",", "stats", "[", "k", "]", ")", "\n", "", "logprint", "(", "type", "=", "'test_loss'", ",", "**", "stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.train.main": [[338, 397], ["train_helpers.set_up_hyperparams", "data.set_up_data", "train_helpers.setup_save_dirs", "train_helpers.set_seed_if_new", "wandb.init", "wandb.Api", "wandb.Api.run", "train_helpers.load_vaes", "train_helpers.load_vaes", "vae.named_parameters", "sum", "sum", "logprint", "wandb.log", "train.run_test_eval", "train.train_loop", "api.run.scan_history", "p.numel", "p.numel", "vae.parameters", "vae.parameters"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.set_up_hyperparams", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.set_up_data", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.setup_save_dirs", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.set_seed_if_new", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.load_vaes", "home.repos.pwc.inspect_result.plai-group_ipa.None.train_helpers.load_vaes", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.run_test_eval", "home.repos.pwc.inspect_result.plai-group_ipa.None.train.train_loop"], ["", "def", "main", "(", ")", ":", "\n", "    ", "H", ",", "logprint", "=", "set_up_hyperparams", "(", ")", "\n", "H", ",", "data_train", ",", "data_valid_or_test", ",", "preprocess_fn", "=", "set_up_data", "(", "H", ")", "\n", "\n", "H", ".", "resuming", "=", "H", ".", "wandb_id", "is", "not", "None", "\n", "\n", "# wandb things", "\n", "if", "H", ".", "rank", "==", "0", ":", "\n", "        ", "wandb", ".", "init", "(", "project", "=", "PROJECT_NAME", ",", "entity", "=", "os", ".", "environ", "[", "'WANDB_ENTITY'", "]", ",", "\n", "config", "=", "H", ",", "tags", "=", "H", ".", "tags", ",", "id", "=", "H", ".", "wandb_id", ",", "resume", "=", "H", ".", "resuming", ")", "\n", "H", ".", "wandb_id", "=", "wandb", ".", "run", ".", "id", "\n", "\n", "", "if", "H", ".", "resuming", ":", "\n", "        ", "api", "=", "wandb", ".", "Api", "(", ")", "\n", "run", "=", "api", ".", "run", "(", "f'{os.environ[\"WANDB_ENTITY\"]}/{PROJECT_NAME}/{H.wandb_id}'", ")", "\n", "save_steps", "=", "[", "r", "for", "r", "in", "run", ".", "scan_history", "(", ")", "if", "'last_save'", "in", "r", "]", "\n", "last_save", "=", "save_steps", "[", "-", "1", "]", "\n", "cur_iters", "=", "last_save", "[", "'iteration'", "]", "\n", "cur_epoch", "=", "last_save", "[", "'epoch'", "]", "\n", "", "else", ":", "\n", "        ", "cur_iters", "=", "0", "\n", "cur_epoch", "=", "0", "\n", "\n", "", "setup_save_dirs", "(", "H", ")", "\n", "fresh_weights", "=", "H", ".", "pretrained_load_dir", "is", "None", "and", "not", "H", ".", "resuming", "\n", "H", ".", "load_pretrained", "=", "H", ".", "pretrained_load_dir", "is", "not", "None", "and", "not", "H", ".", "resuming", "\n", "H", ".", "logged_unconditional", "=", "False", "\n", "if", "H", ".", "load_pretrained", ":", "\n", "        ", "vae", ",", "ema_vae", "=", "load_vaes", "(", "H", ",", "logprint", ",", "init_cond_from_uncond", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "vae", ",", "ema_vae", "=", "load_vaes", "(", "H", ",", "logprint", ",", "init_cond_from_uncond", "=", "False", ")", "\n", "\n", "", "if", "H", ".", "train_encoder_decoder", "!=", "\"all\"", ":", "\n", "# Freeze weights of the unconditional parts of the VAE.", "\n", "        ", "for", "name", ",", "param", "in", "vae", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'part_encoder'", "not", "in", "name", "and", "'part_enc'", "not", "in", "name", ":", "\n", "                ", "if", "H", ".", "train_encoder_decoder", "==", "\"\"", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "elif", "H", ".", "train_encoder_decoder", "==", "'slightly'", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "(", "'decoder.out_net.'", "in", "name", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "", "", "", "if", "H", ".", "no_ema", ":", "\n", "        ", "assert", "H", ".", "ema_rate", "==", "0", "\n", "", "set_seed_if_new", "(", "H", ")", "\n", "if", "H", ".", "rank", "==", "0", ":", "\n", "        ", "n_params", "=", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "vae", ".", "parameters", "(", ")", "]", ")", "\n", "n_params_learnable", "=", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "vae", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", ")", "\n", "logprint", "(", "n_params", "=", "f\"{n_params:,}\"", ",", "n_params_learnable", "=", "f'{n_params_learnable:,}'", ")", "\n", "wandb", ".", "log", "(", "{", "\"n_params\"", ":", "n_params", ",", "\n", "\"n_params-learnable\"", ":", "n_params_learnable", "}", ")", "\n", "", "if", "H", ".", "test_eval", ":", "\n", "        ", "run_test_eval", "(", "H", ",", "ema_vae", ",", "data_valid_or_test", ",", "preprocess_fn", ",", "logprint", ")", "\n", "", "else", ":", "\n", "        ", "return_val", "=", "'failed'", "\n", "while", "return_val", "==", "'failed'", ":", "\n", "            ", "return_val", "=", "train_loop", "(", "H", ",", "data_train", ",", "data_valid_or_test", ",", "preprocess_fn", ",", "vae", ",", "ema_vae", ",", "logprint", ",", "\n", "starting_epoch", "=", "cur_epoch", ",", "iterate", "=", "cur_iters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.Xrays.__init__": [[15, 30], ["torchvision.datasets.ImageFolder.__init__", "open().readlines", "line.split", "findings.split.split.split", "torch.tensor", "open", "len", "len"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "csv_path", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "targets", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "csv_path", ",", "'r'", ")", ".", "readlines", "(", ")", ":", "\n", "            ", "image_fname", ",", "findings", ",", "*", "_", "=", "line", ".", "split", "(", "','", ")", "\n", "if", "image_fname", "==", "'Image Index'", ":", "\n", "                ", "continue", "# line is header", "\n", "", "findings", "=", "findings", ".", "split", "(", "'|'", ")", "\n", "# sanity checks ----------------", "\n", "assert", "len", "(", "findings", ")", "!=", "0", "\n", "if", "len", "(", "findings", ")", ">", "1", ":", "\n", "                ", "assert", "'No Finding'", "not", "in", "findings", "\n", "# ------------------------------", "\n", "", "target", "=", "torch", ".", "tensor", "(", "[", "1", "if", "attr", "in", "findings", "else", "0", "for", "attr", "in", "self", ".", "attrs", "]", ")", "\n", "self", ".", "targets", "[", "image_fname", "]", "=", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.Xrays.__getitem__": [[31, 44], ["data.Xrays.loader", "path.split", "data.Xrays.transform", "data.Xrays.target_transform"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.train.loader"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        copy of default, but gets target from somewhere else\n        \"\"\"", "\n", "path", ",", "_", "=", "self", ".", "samples", "[", "index", "]", "\n", "fname", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "target", "=", "self", ".", "targets", "[", "fname", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "return", "sample", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.set_up_data": [[46, 185], ["torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "data.imagenet32", "print", "os.path.join", "data.Xrays", "data.Xrays", "x[].cuda().float", "x[].cuda().float.clone", "x[].cuda().float.add_().mul_", "inp.clone.add_().mul_", "data.imagenet64", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "x[].permute", "inp.clone.mul_().floor_().mul_", "data.ffhq256", "torchvision.Compose", "torch.as_tensor", "torch.as_tensor", "x[].cuda", "x[].cuda().float.add_", "inp.clone.add_", "data.ffhq1024", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "inp.clone.mul_().floor_", "data.xray", "torchvision.Resize", "data.shoes", "inp.clone.mul_", "data.bags", "data.cifar10", "ValueError"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.data.imagenet32", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.imagenet64", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.ffhq256", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.ffhq1024", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.xray", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.shoes", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.bags", "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.cifar10"], ["", "", "def", "set_up_data", "(", "H", ",", "labelled", "=", "False", ",", "custom_transform", "=", "None", ")", ":", "\n", "    ", "if", "H", ".", "data_root", "[", "0", "]", "==", "'$'", ":", "\n", "        ", "H", ".", "data_root", "=", "os", ".", "environ", "[", "H", ".", "data_root", "[", "1", ":", "]", "]", "\n", "", "shift_loss", "=", "-", "127.5", "\n", "scale_loss", "=", "1.", "/", "127.5", "\n", "if", "H", ".", "dataset", "==", "'imagenet32'", ":", "\n", "        ", "trX", ",", "vaX", ",", "teX", "=", "imagenet32", "(", "H", ".", "data_root", ")", "\n", "H", ".", "image_size", "=", "32", "\n", "H", ".", "image_channels", "=", "3", "\n", "shift", "=", "-", "116.2373", "\n", "scale", "=", "1.", "/", "69.37404", "\n", "resize_to", "=", "None", "\n", "", "elif", "H", ".", "dataset", "==", "'imagenet64'", ":", "\n", "        ", "trX", ",", "vaX", ",", "teX", "=", "imagenet64", "(", "H", ".", "data_root", ")", "\n", "H", ".", "image_size", "=", "64", "\n", "H", ".", "image_channels", "=", "3", "\n", "shift", "=", "-", "115.92961967", "\n", "scale", "=", "1.", "/", "69.37404", "\n", "resize_to", "=", "None", "\n", "", "elif", "H", ".", "dataset", "==", "'ffhq_256'", ":", "\n", "        ", "trX", ",", "vaX", ",", "teX", "=", "ffhq256", "(", "H", ".", "data_root", ")", "\n", "H", ".", "image_size", "=", "256", "\n", "H", ".", "image_channels", "=", "3", "\n", "shift", "=", "-", "112.8666757481", "\n", "scale", "=", "1.", "/", "69.84780273", "\n", "resize_to", "=", "None", "\n", "", "elif", "H", ".", "dataset", "==", "'ffhq_1024'", ":", "\n", "        ", "trX", ",", "vaX", ",", "teX", "=", "ffhq1024", "(", "H", ".", "data_root", ")", "\n", "H", ".", "image_size", "=", "1024", "\n", "H", ".", "image_channels", "=", "3", "\n", "shift", "=", "-", "0.4387", "\n", "scale", "=", "1.0", "/", "0.2743", "\n", "shift_loss", "=", "-", "0.5", "\n", "scale_loss", "=", "2.0", "\n", "resize_to", "=", "None", "\n", "", "elif", "H", ".", "dataset", "==", "'xray'", ":", "\n", "        ", "trX", ",", "vaX", ",", "teX", "=", "xray", "(", "H", ".", "data_root", ")", "\n", "H", ".", "image_size", "=", "256", "\n", "H", ".", "image_channels", "=", "3", "\n", "shift", "=", "-", "0.5", "# mean of first 987 images is 0.494", "\n", "scale", "=", "1.0", "/", "0.25", "# standard deviation of first 987 images is 0.2489 for each channel", "\n", "shift_loss", "=", "-", "0.5", "\n", "scale_loss", "=", "2.0", "\n", "resize_to", "=", "None", "\n", "", "elif", "H", ".", "dataset", "in", "[", "'shoes'", ",", "'shoes64'", "]", ":", "\n", "        ", "trX", ",", "vaX", ",", "teX", "=", "shoes", "(", "H", ".", "data_root", ")", "\n", "H", ".", "image_size", "=", "64", "if", "H", ".", "dataset", "==", "'shoes64'", "else", "256", "\n", "H", ".", "image_channels", "=", "3", "\n", "if", "H", ".", "dataset", "==", "'shoes64'", ":", "\n", "            ", "shift", "=", "-", "115.92961967", "/", "256", "# params from imagenet64 so we can use pretrained models", "\n", "scale", "=", "1.", "/", "69.37404", "*", "256", "\n", "", "else", ":", "\n", "            ", "shift", "=", "-", "0.7507", "# -ve mean of first 1000 training B (non-edge) images", "\n", "scale", "=", "1.", "/", "0.3417", "# inverse of std of first 1000 training B images", "\n", "", "shift_loss", "=", "-", "0.5", "\n", "scale_loss", "=", "2.0", "\n", "resize_to", "=", "None", "if", "H", ".", "dataset", "==", "'shoes'", "else", "(", "64", ",", "128", ")", "\n", "", "elif", "H", ".", "dataset", "in", "[", "'bags'", ",", "'bags64'", "]", ":", "\n", "        ", "trX", ",", "vaX", ",", "teX", "=", "bags", "(", "H", ".", "data_root", ")", "\n", "H", ".", "image_size", "=", "64", "if", "H", ".", "dataset", "==", "'bags64'", "else", "256", "\n", "H", ".", "image_channels", "=", "3", "\n", "if", "H", ".", "dataset", "==", "'bags64'", ":", "\n", "            ", "shift", "=", "-", "115.92961967", "/", "256", "# params from imagenet64 so we can use pretrained models", "\n", "scale", "=", "1.", "/", "69.37404", "*", "256", "\n", "", "else", ":", "\n", "            ", "shift", "=", "-", "0.6995", "# -ve mean of first 1000 training B (non-edge) images", "\n", "scale", "=", "1.", "/", "0.3544", "# inverse of std of first 1000 training B images", "\n", "", "shift_loss", "=", "-", "0.5", "\n", "scale_loss", "=", "2.0", "\n", "resize_to", "=", "None", "if", "H", ".", "dataset", "==", "'bags'", "else", "(", "64", ",", "128", ")", "\n", "", "elif", "H", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "(", "trX", ",", "_", ")", ",", "(", "vaX", ",", "_", ")", ",", "(", "teX", ",", "_", ")", "=", "cifar10", "(", "H", ".", "data_root", ",", "one_hot", "=", "False", ")", "\n", "H", ".", "image_size", "=", "32", "\n", "H", ".", "image_channels", "=", "3", "\n", "if", "H", ".", "norm_like", "is", "None", ":", "\n", "            ", "shift", "=", "-", "120.63838", "\n", "scale", "=", "1.", "/", "64.16736", "\n", "", "elif", "H", ".", "norm_like", "==", "'imagenet32_from_imagefolder'", ":", "\n", "            ", "shift", "=", "-", "116.2373", "\n", "scale", "=", "1.", "/", "69.37404", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "\n", "", "resize_to", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'unknown dataset: '", ",", "H", ".", "dataset", ")", "\n", "\n", "", "do_low_bit", "=", "H", ".", "dataset", "in", "[", "'ffhq_256'", "]", "\n", "\n", "if", "H", ".", "test_eval", ":", "\n", "        ", "print", "(", "'DOING TEST'", ")", "\n", "eval_dataset", "=", "teX", "\n", "", "else", ":", "\n", "        ", "eval_dataset", "=", "vaX", "\n", "\n", "", "shift", "=", "torch", ".", "tensor", "(", "[", "shift", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "scale", "=", "torch", ".", "tensor", "(", "[", "scale", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "shift_loss", "=", "torch", ".", "tensor", "(", "[", "shift_loss", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "scale_loss", "=", "torch", ".", "tensor", "(", "[", "scale_loss", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "labelled", ":", "\n", "        ", "assert", "H", ".", "dataset", "==", "'xray'", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "H", ".", "data_root", ",", "'chest-xrays'", ",", "'Data_Entry_2017_v2020.csv'", ")", "\n", "ts", "=", "transforms", ".", "ToTensor", "(", ")", "if", "custom_transform", "is", "None", "else", "custom_transform", "\n", "train_data", "=", "Xrays", "(", "csv_path", ",", "trX", ",", "ts", ")", "\n", "valid_data", "=", "Xrays", "(", "csv_path", ",", "eval_dataset", ",", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "untranspose", "=", "True", "\n", "", "elif", "H", ".", "dataset", "in", "[", "'ffhq_1024'", ",", "'xray'", ",", "'shoes'", ",", "'bags'", ",", "'shoes64'", ",", "'bags64'", "]", ":", "\n", "        ", "transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "if", "resize_to", "is", "not", "None", ":", "\n", "            ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "resize_to", ")", ",", "transform", "]", ")", "\n", "", "train_data", "=", "ImageFolder", "(", "trX", ",", "transform", ")", "\n", "valid_data", "=", "ImageFolder", "(", "eval_dataset", ",", "transform", ")", "\n", "untranspose", "=", "True", "\n", "", "else", ":", "\n", "        ", "train_data", "=", "TensorDataset", "(", "torch", ".", "as_tensor", "(", "trX", ")", ")", "\n", "valid_data", "=", "TensorDataset", "(", "torch", ".", "as_tensor", "(", "eval_dataset", ")", ")", "\n", "untranspose", "=", "False", "\n", "\n", "", "def", "preprocess_func", "(", "x", ")", ":", "\n", "        ", "nonlocal", "shift", "\n", "nonlocal", "scale", "\n", "nonlocal", "shift_loss", "\n", "nonlocal", "scale_loss", "\n", "nonlocal", "do_low_bit", "\n", "nonlocal", "untranspose", "\n", "'takes in a data example and returns the preprocessed input'", "\n", "'as well as the input processed for the loss'", "\n", "if", "untranspose", ":", "\n", "            ", "x", "[", "0", "]", "=", "x", "[", "0", "]", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "inp", "=", "x", "[", "0", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "out", "=", "inp", ".", "clone", "(", ")", "\n", "inp", ".", "add_", "(", "shift", ")", ".", "mul_", "(", "scale", ")", "\n", "if", "do_low_bit", ":", "\n", "# 5 bits of precision", "\n", "            ", "out", ".", "mul_", "(", "1.", "/", "8.", ")", ".", "floor_", "(", ")", ".", "mul_", "(", "8.", ")", "\n", "", "out", ".", "add_", "(", "shift_loss", ")", ".", "mul_", "(", "scale_loss", ")", "\n", "return", "inp", ",", "out", "\n", "\n", "", "return", "H", ",", "train_data", ",", "valid_data", ",", "preprocess_func", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.mkdir_p": [[187, 189], ["os.makedirs"], "function", ["None"], ["", "def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.flatten": [[191, 193], ["None"], "function", ["None"], ["", "def", "flatten", "(", "outer", ")", ":", "\n", "    ", "return", "[", "el", "for", "inner", "in", "outer", "for", "el", "in", "inner", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.unpickle_cifar10": [[195, 201], ["open", "pickle.load", "open.close", "dict", "zip", "dict.values", "k.decode", "dict.keys"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.decode"], ["", "def", "unpickle_cifar10", "(", "file", ")", ":", "\n", "    ", "fo", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "data", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'bytes'", ")", "\n", "fo", ".", "close", "(", ")", "\n", "data", "=", "dict", "(", "zip", "(", "[", "k", ".", "decode", "(", ")", "for", "k", "in", "data", ".", "keys", "(", ")", "]", ",", "data", ".", "values", "(", ")", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.imagenet32": [[203, 211], ["numpy.load", "numpy.random.seed", "numpy.random.permutation", "numpy.load", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "imagenet32", "(", "data_root", ")", ":", "\n", "    ", "trX", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'imagenet32-train.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "tr_va_split_indices", "=", "np", ".", "random", ".", "permutation", "(", "trX", ".", "shape", "[", "0", "]", ")", "\n", "train", "=", "trX", "[", "tr_va_split_indices", "[", ":", "-", "5000", "]", "]", "\n", "valid", "=", "trX", "[", "tr_va_split_indices", "[", "-", "5000", ":", "]", "]", "\n", "test", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'imagenet32-valid.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "return", "train", ",", "valid", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.imagenet64": [[213, 221], ["numpy.load", "numpy.random.seed", "numpy.random.permutation", "numpy.load", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "imagenet64", "(", "data_root", ")", ":", "\n", "    ", "trX", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'imagenet64-train.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "tr_va_split_indices", "=", "np", ".", "random", ".", "permutation", "(", "trX", ".", "shape", "[", "0", "]", ")", "\n", "train", "=", "trX", "[", "tr_va_split_indices", "[", ":", "-", "5000", "]", "]", "\n", "valid", "=", "trX", "[", "tr_va_split_indices", "[", "-", "5000", ":", "]", "]", "\n", "test", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'imagenet64-valid.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "# this is test.", "\n", "return", "train", ",", "valid", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.ffhq1024": [[223, 226], ["os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "ffhq1024", "(", "data_root", ")", ":", "\n", "# we did not significantly tune hyperparameters on ffhq-1024, and so simply evaluate on the test set", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "data_root", ",", "'ffhq1024/train'", ")", ",", "os", ".", "path", ".", "join", "(", "data_root", ",", "'ffhq1024/valid'", ")", ",", "os", ".", "path", ".", "join", "(", "data_root", ",", "'ffhq1024/valid'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.xray": [[227, 230], ["os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "xray", "(", "data_root", ")", ":", "\n", "# we did not significantly tune hyperparameters, and so simply evaluate on the test set", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "data_root", ",", "'chest-xrays/train'", ")", ",", "os", ".", "path", ".", "join", "(", "data_root", ",", "'chest-xrays/test'", ")", ",", "os", ".", "path", ".", "join", "(", "data_root", ",", "'chest-xrays/test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.bags": [[231, 234], ["os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "bags", "(", "data_root", ")", ":", "\n", "# we did not significantly tune hyperparameters, and so simply evaluate on the test set", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "data_root", ",", "'edges2handbags/train'", ")", ",", "os", ".", "path", ".", "join", "(", "data_root", ",", "'edges2handbags/val'", ")", ",", "os", ".", "path", ".", "join", "(", "data_root", ",", "'edges2handbags/val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.shoes": [[235, 238], ["os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "shoes", "(", "data_root", ")", ":", "\n", "# we did not significantly tune hyperparameters, and so simply evaluate on the test set", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "data_root", ",", "'edges2shoes/train'", ")", ",", "os", ".", "path", ".", "join", "(", "data_root", ",", "'edges2shoes/val'", ")", ",", "os", ".", "path", ".", "join", "(", "data_root", ",", "'edges2shoes/val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.ffhq256": [[239, 247], ["numpy.load", "numpy.random.seed", "numpy.random.permutation", "os.path.join"], "function", ["None"], ["", "def", "ffhq256", "(", "data_root", ")", ":", "\n", "    ", "trX", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'ffhq-256.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "np", ".", "random", ".", "seed", "(", "5", ")", "\n", "tr_va_split_indices", "=", "np", ".", "random", ".", "permutation", "(", "trX", ".", "shape", "[", "0", "]", ")", "\n", "train", "=", "trX", "[", "tr_va_split_indices", "[", ":", "-", "7000", "]", "]", "\n", "valid", "=", "trX", "[", "tr_va_split_indices", "[", "-", "7000", ":", "]", "]", "\n", "# we did not significantly tune hyperparameters on ffhq-256, and so simply evaluate on the test set", "\n", "return", "train", ",", "valid", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.data.cifar10": [[249, 268], ["numpy.vstack", "numpy.asarray", "data.unpickle_cifar10", "numpy.asarray", "numpy.asarray", "trX.reshape().transpose.reshape().transpose", "teX.reshape().transpose.reshape().transpose", "sklearn.model_selection.train_test_split", "data.unpickle_cifar10", "data.flatten", "os.path.join", "numpy.reshape", "numpy.reshape", "numpy.reshape", "os.path.join", "range", "trX.reshape().transpose.reshape", "teX.reshape().transpose.reshape", "numpy.eye", "numpy.eye", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.data.unpickle_cifar10", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.unpickle_cifar10", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.flatten"], ["", "def", "cifar10", "(", "data_root", ",", "one_hot", "=", "True", ")", ":", "\n", "    ", "tr_data", "=", "[", "unpickle_cifar10", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'cifar-10-batches-py/'", ",", "'data_batch_%d'", "%", "i", ")", ")", "for", "i", "in", "range", "(", "1", ",", "6", ")", "]", "\n", "trX", "=", "np", ".", "vstack", "(", "data", "[", "'data'", "]", "for", "data", "in", "tr_data", ")", "\n", "trY", "=", "np", ".", "asarray", "(", "flatten", "(", "[", "data", "[", "'labels'", "]", "for", "data", "in", "tr_data", "]", ")", ")", "\n", "te_data", "=", "unpickle_cifar10", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "'cifar-10-batches-py/'", ",", "'test_batch'", ")", ")", "\n", "teX", "=", "np", ".", "asarray", "(", "te_data", "[", "'data'", "]", ")", "\n", "teY", "=", "np", ".", "asarray", "(", "te_data", "[", "'labels'", "]", ")", "\n", "trX", "=", "trX", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "teX", "=", "teX", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "trX", ",", "vaX", ",", "trY", ",", "vaY", "=", "train_test_split", "(", "trX", ",", "trY", ",", "test_size", "=", "5000", ",", "random_state", "=", "11172018", ")", "\n", "if", "one_hot", ":", "\n", "        ", "trY", "=", "np", ".", "eye", "(", "10", ",", "dtype", "=", "np", ".", "float32", ")", "[", "trY", "]", "\n", "vaY", "=", "np", ".", "eye", "(", "10", ",", "dtype", "=", "np", ".", "float32", ")", "[", "vaY", "]", "\n", "teY", "=", "np", ".", "eye", "(", "10", ",", "dtype", "=", "np", ".", "float32", ")", "[", "teY", "]", "\n", "", "else", ":", "\n", "        ", "trY", "=", "np", ".", "reshape", "(", "trY", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "vaY", "=", "np", ".", "reshape", "(", "vaY", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "teY", "=", "np", ".", "reshape", "(", "teY", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "", "return", "(", "trX", ",", "trY", ")", ",", "(", "vaX", ",", "vaY", ")", ",", "(", "teX", ",", "teY", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Block.__init__": [[13, 21], ["torch.nn.Module.__init__", "vae_helpers.get_1x1", "vae_helpers.get_1x1", "vae_helpers.get_3x3", "vae_helpers.get_1x1", "vae_helpers.get_3x3", "vae_helpers.get_1x1"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_1x1", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_1x1", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_3x3", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_1x1", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_3x3", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_1x1"], ["    ", "def", "__init__", "(", "self", ",", "in_width", ",", "middle_width", ",", "out_width", ",", "down_rate", "=", "None", ",", "residual", "=", "False", ",", "use_3x3", "=", "True", ",", "zero_last", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "down_rate", "=", "down_rate", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "c1", "=", "get_1x1", "(", "in_width", ",", "middle_width", ")", "\n", "self", ".", "c2", "=", "get_3x3", "(", "middle_width", ",", "middle_width", ")", "if", "use_3x3", "else", "get_1x1", "(", "middle_width", ",", "middle_width", ")", "\n", "self", ".", "c3", "=", "get_3x3", "(", "middle_width", ",", "middle_width", ")", "if", "use_3x3", "else", "get_1x1", "(", "middle_width", ",", "middle_width", ")", "\n", "self", ".", "c4", "=", "get_1x1", "(", "middle_width", ",", "out_width", ",", "zero_weights", "=", "zero_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Block.forward": [[22, 31], ["vae.Block.c1", "vae.Block.c2", "vae.Block.c3", "vae.Block.c4", "torch.nn.functional.gelu", "torch.nn.functional.gelu", "torch.nn.functional.gelu", "torch.nn.functional.gelu", "torch.nn.functional.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "xhat", "=", "self", ".", "c1", "(", "F", ".", "gelu", "(", "x", ")", ")", "\n", "xhat", "=", "self", ".", "c2", "(", "F", ".", "gelu", "(", "xhat", ")", ")", "\n", "xhat", "=", "self", ".", "c3", "(", "F", ".", "gelu", "(", "xhat", ")", ")", "\n", "xhat", "=", "self", ".", "c4", "(", "F", ".", "gelu", "(", "xhat", ")", ")", "\n", "out", "=", "x", "+", "xhat", "if", "self", ".", "residual", "else", "xhat", "\n", "if", "self", ".", "down_rate", "is", "not", "None", ":", "\n", "            ", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "kernel_size", "=", "self", ".", "down_rate", ",", "stride", "=", "self", ".", "down_rate", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Encoder.build": [[70, 83], ["vae_helpers.get_3x3", "vae.get_width_settings", "vae.parse_layer_string", "len", "torch.nn.ModuleList", "enc_blocks.append", "numpy.sqrt", "vae.Block", "int"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_3x3", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.get_width_settings", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.parse_layer_string"], ["    ", "def", "build", "(", "self", ")", ":", "\n", "        ", "H", "=", "self", ".", "H", "\n", "self", ".", "in_conv", "=", "get_3x3", "(", "H", ".", "image_channels", ",", "H", ".", "width", ")", "\n", "self", ".", "widths", "=", "get_width_settings", "(", "H", ".", "width", ",", "H", ".", "custom_width_str", ")", "\n", "enc_blocks", "=", "[", "]", "\n", "blockstr", "=", "parse_layer_string", "(", "H", ".", "enc_blocks", ")", "\n", "for", "res", ",", "down_rate", "in", "blockstr", ":", "\n", "            ", "use_3x3", "=", "res", ">", "2", "# Don't use 3x3s for 1x1, 2x2 patches", "\n", "enc_blocks", ".", "append", "(", "Block", "(", "self", ".", "widths", "[", "res", "]", ",", "int", "(", "self", ".", "widths", "[", "res", "]", "*", "H", ".", "bottleneck_multiple", ")", ",", "self", ".", "widths", "[", "res", "]", ",", "down_rate", "=", "down_rate", ",", "residual", "=", "True", ",", "use_3x3", "=", "use_3x3", ")", ")", "\n", "", "n_blocks", "=", "len", "(", "blockstr", ")", "\n", "for", "b", "in", "enc_blocks", ":", "\n", "            ", "b", ".", "c4", ".", "weight", ".", "data", "*=", "np", ".", "sqrt", "(", "1", "/", "n_blocks", ")", "\n", "", "self", ".", "enc_blocks", "=", "nn", ".", "ModuleList", "(", "enc_blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Encoder.forward": [[84, 96], ["block.permute().contiguous", "vae.Encoder.in_conv", "block", "block.permute", "vae.pad_channels"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.pad_channels"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "[", "...", ",", "-", "self", ".", "H", ".", "image_size", ":", ",", ":", "]", "# does nothing unless it is edges2shoes or similar", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "self", ".", "in_conv", "(", "x", ")", "\n", "activations", "=", "{", "}", "\n", "activations", "[", "x", ".", "shape", "[", "2", "]", "]", "=", "x", "\n", "for", "block", "in", "self", ".", "enc_blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "res", "=", "x", ".", "shape", "[", "2", "]", "\n", "x", "=", "x", "if", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "widths", "[", "res", "]", "else", "pad_channels", "(", "x", ",", "self", ".", "widths", "[", "res", "]", ")", "\n", "activations", "[", "res", "]", "=", "x", "\n", "", "return", "activations", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.DecBlock.__init__": [[99, 118], ["torch.nn.Module.__init__", "vae.get_width_settings", "int", "vae.Block", "vae.Block", "vae.Block", "vae_helpers.get_1x1", "numpy.sqrt", "vae.Block", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.get_width_settings", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_1x1"], ["    ", "def", "__init__", "(", "self", ",", "H", ",", "res", ",", "mixin", ",", "n_blocks", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base", "=", "res", "\n", "self", ".", "mixin", "=", "mixin", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "widths", "=", "get_width_settings", "(", "H", ".", "width", ",", "H", ".", "custom_width_str", ")", "\n", "width", "=", "self", ".", "widths", "[", "res", "]", "\n", "use_3x3", "=", "res", ">", "2", "\n", "cond_width", "=", "int", "(", "width", "*", "H", ".", "bottleneck_multiple", ")", "\n", "self", ".", "zdim", "=", "H", ".", "zdim", "\n", "self", ".", "enc", "=", "Block", "(", "width", "*", "2", ",", "cond_width", ",", "H", ".", "zdim", "*", "2", ",", "residual", "=", "False", ",", "use_3x3", "=", "use_3x3", ")", "# encoder that takes full image", "\n", "self", ".", "part_enc", "=", "Block", "(", "width", "*", "2", ",", "cond_width", ",", "H", ".", "zdim", "*", "2", ",", "residual", "=", "False", ",", "use_3x3", "=", "use_3x3", ")", "\n", "# still need prior if H is conditional, as it includes part of decoder architecture", "\n", "self", ".", "prior", "=", "Block", "(", "width", ",", "cond_width", ",", "H", ".", "zdim", "*", "2", "+", "width", ",", "\n", "residual", "=", "False", ",", "use_3x3", "=", "use_3x3", ",", "zero_last", "=", "True", ")", "\n", "self", ".", "z_proj", "=", "get_1x1", "(", "H", ".", "zdim", ",", "width", ")", "\n", "self", ".", "z_proj", ".", "weight", ".", "data", "*=", "np", ".", "sqrt", "(", "1", "/", "n_blocks", ")", "\n", "self", ".", "resnet", "=", "Block", "(", "width", ",", "cond_width", ",", "width", ",", "residual", "=", "True", ",", "use_3x3", "=", "use_3x3", ")", "\n", "self", ".", "resnet", ".", "c4", ".", "weight", ".", "data", "*=", "np", ".", "sqrt", "(", "1", "/", "n_blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.DecBlock.z_fn": [[119, 121], ["vae.DecBlock.z_proj"], "methods", ["None"], ["", "def", "z_fn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "z_proj", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.DecBlock.new_sample": [[122, 188], ["vae.DecBlock.prior", "torch.tensor", "vae.DecBlock.part_enc", "vae.DecBlock.enc().chunk", "vae_helpers.gaussian_analytical_kl", "torch.cat", "vae_helpers.draw_gaussian_diag_samples", "vae_helpers.gaussian_analytical_kl", "logs2ent().sum", "logs2ent().sum", "vae.DecBlock.enc", "vae_helpers.draw_gaussian_diag_samples", "logs2ent().sum", "torch.cat", "vae_helpers.draw_gaussian_diag_samples", "Exception", "vae.DecBlock.chunk", "vae_helpers.gaussian_log_prob", "vae_helpers.gaussian_log_prob", "vae_helpers.gaussian_analytical_kl", "numpy.log", "vae.DecBlock.new_sample.logs2ent"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GP.prior", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.gaussian_analytical_kl", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.draw_gaussian_diag_samples", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.gaussian_analytical_kl", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.draw_gaussian_diag_samples", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.draw_gaussian_diag_samples", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.gaussian_log_prob", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.gaussian_log_prob", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.gaussian_analytical_kl"], ["", "def", "new_sample", "(", "self", ",", "x", ",", "sample_from", "=", "None", ",", "part_acts", "=", "None", ",", "full_acts", "=", "None", ",", "t", "=", "None", ",", "lvs", "=", "None", ",", "get_kl", "=", "None", ",", "get_ents", "=", "False", ")", ":", "\n", "        ", "feats", "=", "self", ".", "prior", "(", "x", ")", "\n", "priorm", ",", "priorv", ",", "xpp", "=", "feats", "[", ":", ",", ":", "self", ".", "zdim", ",", "...", "]", ",", "feats", "[", ":", ",", "self", ".", "zdim", ":", "self", ".", "zdim", "*", "2", ",", "...", "]", ",", "feats", "[", ":", ",", "self", ".", "zdim", "*", "2", ":", ",", "...", "]", "\n", "if", "part_acts", "is", "not", "None", ":", "\n", "            ", "part_params", "=", "self", ".", "part_enc", "(", "torch", ".", "cat", "(", "[", "x", ",", "part_acts", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "if", "full_acts", "is", "not", "None", ":", "\n", "            ", "fullm", ",", "fullv", "=", "self", ".", "enc", "(", "torch", ".", "cat", "(", "[", "x", ",", "full_acts", "]", ",", "dim", "=", "1", ")", ")", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "\n", "# sampling", "\n", "", "t", "=", "torch", ".", "tensor", "(", "t", "if", "t", "is", "not", "None", "else", "1", ")", "\n", "if", "sample_from", "==", "'fixed'", ":", "\n", "            ", "z", "=", "lvs", "\n", "", "elif", "sample_from", "==", "'prior'", ":", "\n", "            ", "z", "=", "draw_gaussian_diag_samples", "(", "priorm", ",", "priorv", ",", "t", ")", "\n", "", "elif", "sample_from", "==", "'part'", ":", "\n", "            ", "z", "=", "draw_gaussian_diag_samples", "(", "*", "part_params", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", ",", "t", ")", "\n", "", "elif", "sample_from", "==", "'full'", ":", "\n", "            ", "z", "=", "draw_gaussian_diag_samples", "(", "fullm", ",", "fullv", ",", "t", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "f\"Invalid sample_from, {sample_from}.\"", ")", "\n", "\n", "", "if", "get_kl", "==", "'full-prior'", ":", "\n", "            ", "kl", "=", "gaussian_analytical_kl", "(", "fullm", ",", "fullv", ",", "priorm", ",", "priorv", ")", "\n", "", "elif", "get_kl", "==", "'full-part'", ":", "\n", "            ", "kl", "=", "gaussian_analytical_kl", "(", "fullm", ",", "fullv", ",", "*", "part_params", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", ")", "\n", "", "elif", "get_kl", "==", "'noisy-full-part'", ":", "\n", "            ", "assert", "sample_from", "==", "'full'", "\n", "kl", "=", "gaussian_log_prob", "(", "z", ",", "fullm", ",", "fullv", ")", "-", "gaussian_log_prob", "(", "z", ",", "*", "part_params", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", ")", "\n", "", "elif", "get_kl", "==", "'prior-part'", ":", "\n", "            ", "kl", "=", "gaussian_analytical_kl", "(", "priorm", ",", "priorv", ",", "*", "part_params", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", ")", "\n", "", "elif", "get_kl", "==", "'part-prior'", ":", "\n", "            ", "kl", "=", "gaussian_analytical_kl", "(", "*", "part_params", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", ",", "priorm", ",", "priorv", ")", "\n", "", "elif", "get_kl", "==", "'nll-part'", ":", "\n", "# return -ve log likelihood of the part encoder's distribution", "\n", "            ", "m", ",", "v", "=", "part_params", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "H", ".", "clamp_std", "is", "not", "None", ":", "\n", "                ", "v", "=", "dclamp", "(", "v", ",", "min", "=", "self", ".", "H", ".", "clamp_std", ")", "\n", "", "ll", "=", "gaussian_log_prob", "(", "z", ",", "m", ",", "v", ")", "\n", "kl", "=", "-", "ll", "\n", "", "elif", "get_kl", "==", "'nll-prior'", ":", "\n", "            ", "ll", "=", "gaussian_log_prob", "(", "z", ",", "priorm", ",", "priorv", ")", "\n", "kl", "=", "-", "ll", "\n", "", "elif", "get_kl", "==", "'nll-full'", ":", "\n", "            ", "ll", "=", "gaussian_log_prob", "(", "z", ",", "fullm", ",", "fullv", ")", "\n", "kl", "=", "-", "ll", "\n", "", "else", ":", "\n", "            ", "assert", "get_kl", "is", "None", ",", "f'Unrecognised kl, {get_kl}.'", "\n", "\n", "# Skip connection", "\n", "", "x", "=", "x", "+", "xpp", "\n", "\n", "returns_dict", "=", "{", "}", "\n", "if", "get_kl", "is", "not", "None", ":", "\n", "            ", "returns_dict", "[", "'kl'", "]", "=", "kl", "\n", "", "if", "get_ents", ":", "\n", "            ", "def", "logs2ent", "(", "logs", ")", ":", "\n", "                ", "return", "logs", "+", "0.5", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", "*", "np", ".", "e", ")", "\n", "", "if", "part_acts", "is", "None", ":", "\n", "                ", "part_ent", "=", "0.", "\n", "", "else", ":", "\n", "                ", "part_ent", "=", "logs2ent", "(", "list", "(", "part_params", ".", "chunk", "(", "2", ",", "dim", "=", "1", ")", ")", "[", "1", "]", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "", "if", "part_ent", "is", "not", "None", ":", "\n", "                ", "prior_ent", "=", "logs2ent", "(", "priorv", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "full_ent", "=", "logs2ent", "(", "fullv", ")", ".", "sum", "(", "dim", "=", "1", ")", "if", "full_acts", "is", "not", "None", "else", "0.", "\n", "returns_dict", "[", "'ents'", "]", "=", "(", "part_ent", ",", "full_ent", ",", "prior_ent", ")", "#  tuple(logs+0.2*np.log(2*np.pi*np.e) for logs in [partvm, fullvm, priorvm])", "\n", "", "", "return", "z", ",", "x", ",", "returns_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.DecBlock.get_inputs": [[189, 207], ["all", "next", "torch.zeros.repeat", "tuple", "torch.zeros_like", "torch.zeros"], "methods", ["None"], ["", "def", "get_inputs", "(", "self", ",", "xs", ",", "*", "activationses", ")", ":", "\n", "        ", "if", "all", "(", "acts", "is", "None", "for", "acts", "in", "activationses", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "x", "=", "xs", "[", "self", ".", "base", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "x", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "widths", "[", "self", ".", "base", "]", ",", "self", ".", "base", ",", "self", ".", "base", ",", "\n", "device", "=", "xs", "[", "1", "]", ".", "device", ")", "\n", "", "return", "(", "x", ",", ")", "+", "activationses", "\n", "", "actses", "=", "[", "activations", "[", "self", ".", "base", "]", "if", "activations", "is", "not", "None", "else", "None", "\n", "for", "activations", "in", "activationses", "]", "\n", "acts", "=", "next", "(", "acts", "for", "acts", "in", "actses", "if", "acts", "is", "not", "None", ")", "\n", "try", ":", "\n", "            ", "x", "=", "xs", "[", "self", ".", "base", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "x", "=", "torch", ".", "zeros_like", "(", "acts", ")", "\n", "", "if", "acts", ".", "shape", "[", "0", "]", "!=", "x", ".", "shape", "[", "0", "]", ":", "\n", "            ", "x", "=", "x", ".", "repeat", "(", "acts", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "", "return", "(", "x", ",", ")", "+", "tuple", "(", "actses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.DecBlock.forward": [[208, 219], ["vae.DecBlock.get_inputs", "vae.DecBlock.new_sample", "vae.DecBlock.resnet", "vae.DecBlock.z_fn", "z.detach", "torch.nn.functional.interpolate"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.DecBlock.get_inputs", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.DecBlock.new_sample", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.resnet", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.DecBlock.z_fn"], ["", "def", "forward", "(", "self", ",", "xs", ",", "part_activations", "=", "None", ",", "full_activations", "=", "None", ",", "get_latents", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", ",", "part_acts", ",", "full_acts", "=", "self", ".", "get_inputs", "(", "xs", ",", "part_activations", ",", "full_activations", ")", "\n", "if", "self", ".", "mixin", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "+", "F", ".", "interpolate", "(", "xs", "[", "self", ".", "mixin", "]", "[", ":", ",", ":", "x", ".", "shape", "[", "1", "]", ",", "...", "]", ",", "scale_factor", "=", "self", ".", "base", "//", "self", ".", "mixin", ")", "\n", "", "z", ",", "x", ",", "stats", "=", "self", ".", "new_sample", "(", "x", "=", "x", ",", "part_acts", "=", "part_acts", ",", "full_acts", "=", "full_acts", ",", "**", "kwargs", ")", "\n", "x", "=", "x", "+", "self", ".", "z_fn", "(", "z", ")", "\n", "x", "=", "self", ".", "resnet", "(", "x", ")", "\n", "xs", "[", "self", ".", "base", "]", "=", "x", "\n", "if", "get_latents", ":", "\n", "            ", "stats", "[", "'z'", "]", "=", "z", ".", "detach", "(", ")", "\n", "", "return", "xs", ",", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Decoder.build": [[223, 239], ["set", "vae.get_width_settings", "vae.parse_layer_string", "enumerate", "sorted", "torch.nn.ModuleList", "torch.nn.ParameterList", "vae_helpers.DmolNet", "torch.nn.Parameter", "torch.nn.Parameter", "dec_blocks.append", "set.add", "torch.ones", "torch.zeros", "vae.DecBlock", "torch.nn.Parameter", "torch.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.get_width_settings", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.parse_layer_string"], ["    ", "def", "build", "(", "self", ")", ":", "\n", "        ", "H", "=", "self", ".", "H", "\n", "resos", "=", "set", "(", ")", "\n", "dec_blocks", "=", "[", "]", "\n", "self", ".", "widths", "=", "get_width_settings", "(", "H", ".", "width", ",", "H", ".", "custom_width_str", ")", "\n", "blocks", "=", "parse_layer_string", "(", "H", ".", "dec_blocks", ")", "\n", "for", "idx", ",", "(", "res", ",", "mixin", ")", "in", "enumerate", "(", "blocks", ")", ":", "\n", "            ", "dec_blocks", ".", "append", "(", "DecBlock", "(", "H", ",", "res", ",", "mixin", ",", "n_blocks", "=", "len", "(", "blocks", ")", ")", ")", "\n", "resos", ".", "add", "(", "res", ")", "\n", "", "self", ".", "resolutions", "=", "sorted", "(", "resos", ")", "\n", "self", ".", "dec_blocks", "=", "nn", ".", "ModuleList", "(", "dec_blocks", ")", "\n", "self", ".", "bias_xs", "=", "nn", ".", "ParameterList", "(", "[", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "widths", "[", "res", "]", ",", "res", ",", "res", ")", ")", "for", "res", "in", "self", ".", "resolutions", "if", "res", "<=", "H", ".", "no_bias_above", "]", ")", "\n", "\n", "self", ".", "out_net", "=", "DmolNet", "(", "H", ")", "\n", "self", ".", "gain", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ",", "H", ".", "width", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "H", ".", "width", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Decoder.final_fn": [[240, 242], ["None"], "methods", ["None"], ["", "def", "final_fn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "gain", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Decoder.run": [[244, 267], ["enumerate", "vae.Decoder.final_fn", "bias.repeat", "itertools.zip_longest", "block", "stats.append"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Decoder.final_fn"], ["", "def", "run", "(", "self", ",", "sample_from", ",", "get_kl", "=", "None", ",", "part_activations", "=", "None", ",", "\n", "full_activations", "=", "None", ",", "n", "=", "None", ",", "get_latents", "=", "False", ",", "\n", "manual_latents", "=", "(", ")", ",", "t", "=", "None", ",", "get_ents", "=", "False", ")", ":", "\n", "\n", "        ", "xs", "=", "{", "}", "\n", "stats", "=", "[", "]", "\n", "for", "bias", "in", "self", ".", "bias_xs", ":", "\n", "            ", "xs", "[", "bias", ".", "shape", "[", "2", "]", "]", "=", "bias", ".", "repeat", "(", "1", "if", "n", "is", "None", "else", "n", ",", "1", ",", "1", ",", "1", ")", "\n", "", "for", "idx", ",", "(", "lvs", ",", "block", ")", "in", "enumerate", "(", "itertools", ".", "zip_longest", "(", "manual_latents", ",", "self", ".", "dec_blocks", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "temp", "=", "t", "[", "idx", "]", "\n", "", "except", "TypeError", ":", "\n", "                ", "temp", "=", "t", "\n", "\n", "", "xs", ",", "block_stats", "=", "block", "(", "xs", ",", "get_kl", "=", "get_kl", ",", "\n", "part_activations", "=", "part_activations", ",", "\n", "full_activations", "=", "full_activations", ",", "\n", "sample_from", "=", "sample_from", "if", "lvs", "is", "None", "else", "\n", "'fixed'", ",", "get_latents", "=", "get_latents", ",", "t", "=", "temp", ",", "\n", "lvs", "=", "lvs", ",", "get_ents", "=", "get_ents", ")", "\n", "stats", ".", "append", "(", "block_stats", ")", "\n", "", "xs", "[", "self", ".", "H", ".", "image_size", "]", "=", "self", ".", "final_fn", "(", "xs", "[", "self", ".", "H", ".", "image_size", "]", ")", "\n", "return", "xs", "[", "self", ".", "H", ".", "image_size", "]", ",", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Decoder.forward": [[269, 276], ["vae.Decoder.run"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "forward", "(", "self", ",", "part_activations", ",", "full_activations", ",", "\n", "n", "=", "None", ",", "get_latents", "=", "False", ",", "get_ents", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "run", "(", "sample_from", "=", "'full'", ",", "\n", "get_kl", "=", "'noisy-full-part'", "if", "self", ".", "H", ".", "noisy_kl", "else", "'full-part'", ",", "\n", "part_activations", "=", "part_activations", ",", "\n", "full_activations", "=", "full_activations", ",", "n", "=", "None", ",", "\n", "get_latents", "=", "get_latents", ",", "get_ents", "=", "get_ents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Decoder.forward_uncond": [[277, 281], ["vae.Decoder.run"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "forward_uncond", "(", "self", ",", "part_activations", ",", "n", ",", "t", "=", "None", ",", "y", "=", "None", ",", "get_latents", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "run", "(", "sample_from", "=", "'part'", ",", "get_kl", "=", "None", ",", "\n", "part_activations", "=", "part_activations", ",", "n", "=", "n", ",", "t", "=", "t", ",", "\n", "get_latents", "=", "get_latents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Decoder.forward_manual_latents": [[282, 286], ["vae.Decoder.run"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "forward_manual_latents", "(", "self", ",", "part_activations", ",", "n", ",", "latents", ",", "t", "=", "None", ")", ":", "\n", "        ", "output", ",", "stats", "=", "self", ".", "run", "(", "sample_from", "=", "'part'", ",", "part_activations", "=", "part_activations", ",", "\n", "n", "=", "n", ",", "manual_latents", "=", "latents", ",", "t", "=", "t", ",", "get_kl", "=", "None", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.VAE.build": [[289, 292], ["vae.Encoder", "vae.Decoder"], "methods", ["None"], ["    ", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "encoder", "=", "Encoder", "(", "self", ".", "H", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "self", ".", "H", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.VAE.forward": [[293, 309], ["vae.VAE.encode_full_image", "vae.VAE.decoder.run", "vae.VAE.decoder.out_net.nll", "torch.zeros_like", "numpy.prod", "dict", "statdict[].sum", "elbo.mean", "elbo.mean", "vae.VAE.mean", "torch.zeros_like.mean", "len"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.encode_full_image", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DmolNet.nll"], ["", "def", "forward", "(", "self", ",", "full_x", ",", "x_target", ")", ":", "\n", "        ", "full_x", "=", "full_x", "[", "...", ",", "-", "self", ".", "H", ".", "image_size", ":", ",", ":", "]", "# does nothing unless it is edges2shoes or similar", "\n", "x_target", "=", "x_target", "[", "...", ",", "-", "self", ".", "H", ".", "image_size", ":", ",", ":", "]", "# does nothing unless it is edges2shoes or similar", "\n", "full_activations", "=", "self", ".", "encode_full_image", "(", "full_x", ")", "\n", "# px_z, stats = self.decoder.forward(NullTensorDict(full_x.shape), full_activations)", "\n", "px_z", ",", "stats", "=", "self", ".", "decoder", ".", "run", "(", "sample_from", "=", "'full'", ",", "\n", "get_kl", "=", "'noisy-full-prior'", "if", "self", ".", "H", ".", "noisy_kl", "else", "'full-prior'", ",", "\n", "full_activations", "=", "full_activations", ")", "\n", "distortion_per_pixel", "=", "self", ".", "decoder", ".", "out_net", ".", "nll", "(", "px_z", ",", "x_target", ")", "\n", "rate_per_pixel", "=", "torch", ".", "zeros_like", "(", "distortion_per_pixel", ")", "\n", "ndims", "=", "np", ".", "prod", "(", "full_x", ".", "shape", "[", "1", ":", "]", ")", "\n", "for", "statdict", "in", "stats", ":", "\n", "            ", "rate_per_pixel", "+=", "statdict", "[", "'kl'", "]", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "", "rate_per_pixel", "/=", "ndims", "\n", "elbo", "=", "distortion_per_pixel", "+", "rate_per_pixel", "\n", "return", "dict", "(", "elbo", "=", "elbo", ".", "mean", "(", ")", ",", "loss", "=", "elbo", ".", "mean", "(", ")", ",", "distortion", "=", "distortion_per_pixel", ".", "mean", "(", ")", ",", "rate", "=", "rate_per_pixel", ".", "mean", "(", ")", ",", "batch_size", "=", "len", "(", "elbo", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.VAE.encode_full_image": [[310, 312], ["vae.VAE.encoder"], "methods", ["None"], ["", "def", "encode_full_image", "(", "self", ",", "images", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.VAE.forward_get_latents": [[313, 317], ["vae.VAE.encoder.forward", "vae.VAE.decoder.forward", "vae.NullTensorDict"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward"], ["", "def", "forward_get_latents", "(", "self", ",", "full_x", ")", ":", "\n", "        ", "full_activations", "=", "self", ".", "encoder", ".", "forward", "(", "full_x", ")", "\n", "_", ",", "stats", "=", "self", ".", "decoder", ".", "forward", "(", "NullTensorDict", "(", "full_x", ".", "shape", ")", ",", "full_activations", ",", "get_latents", "=", "True", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.VAE.forward_uncond_samples": [[318, 321], ["vae.VAE.decoder.forward_uncond", "vae.VAE.decoder.out_net.sample", "vae.NullTensorDict"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Decoder.forward_uncond", "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample"], ["", "def", "forward_uncond_samples", "(", "self", ",", "n_batch", ",", "t", "=", "None", ")", ":", "\n", "        ", "px_z", ",", "_", "=", "self", ".", "decoder", ".", "forward_uncond", "(", "NullTensorDict", "(", "(", "n_batch", ",", ")", ")", ",", "n_batch", ",", "t", "=", "t", ")", "\n", "return", "self", ".", "decoder", ".", "out_net", ".", "sample", "(", "px_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.VAE.forward_samples_set_latents": [[322, 325], ["vae.VAE.decoder.forward_manual_latents", "vae.VAE.decoder.out_net.sample", "vae.NullTensorDict"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Decoder.forward_manual_latents", "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample"], ["", "def", "forward_samples_set_latents", "(", "self", ",", "n_batch", ",", "latents", ",", "t", "=", "None", ")", ":", "\n", "        ", "px_z", "=", "self", ".", "decoder", ".", "forward_manual_latents", "(", "NullTensorDict", "(", "(", "n_batch", ",", ")", ")", ",", "n_batch", ",", "latents", ",", "t", "=", "t", ")", "\n", "return", "self", ".", "decoder", ".", "out_net", ".", "sample", "(", "px_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.NullTensorDict.__init__": [[328, 330], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ")", ":", "\n", "        ", "self", ".", "shape", "=", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.NullTensorDict.__getitem__": [[331, 333], ["torch.Tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "torch", ".", "Tensor", "(", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.build": [[336, 347], ["vae.Decoder", "vae.ConditionalVAE.H.copy", "vae.Encoder", "vae.Encoder"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.hps.Hyperparams.copy"], ["    ", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "decoder", "=", "Decoder", "(", "self", ".", "H", ")", "\n", "if", "not", "self", ".", "H", ".", "share_encoders", ":", "\n", "            ", "self", ".", "encoder", "=", "Encoder", "(", "self", ".", "H", ")", "\n", "", "H_", "=", "self", ".", "H", ".", "copy", "(", ")", "\n", "if", "self", ".", "H", ".", "conditioning", "==", "'image'", ":", "\n", "            ", "cond_channels", "=", "self", ".", "H", ".", "image_channels", "\n", "", "else", ":", "\n", "            ", "cond_channels", "=", "self", ".", "H", ".", "image_channels", "+", "1", "\n", "", "H_", ".", "image_channels", "=", "cond_channels", "\n", "self", ".", "part_encoder", "=", "Encoder", "(", "H_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.encode_part_image": [[348, 350], ["vae.ConditionalVAE.part_encoder"], "methods", ["None"], ["", "def", "encode_part_image", "(", "self", ",", "part_x", ")", ":", "\n", "        ", "return", "self", ".", "part_encoder", "(", "part_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.encode_full_image": [[351, 357], ["torch.cat", "vae.ConditionalVAE.part_encoder", "vae.ConditionalVAE.encoder", "torch.ones_like"], "methods", ["None"], ["", "def", "encode_full_image", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "H", ".", "share_encoders", ":", "\n", "            ", "images", "=", "torch", ".", "cat", "(", "[", "images", ",", "torch", ".", "ones_like", "(", "images", "[", "...", ",", ":", "1", "]", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "self", ".", "part_encoder", "(", "images", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "encoder", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.kl_q_r2": [[358, 383], ["vae.ConditionalVAE.encode_full_image", "vae.ConditionalVAE.encode_part_image", "vae.ConditionalVAE.decoder.run", "vae.ConditionalVAE.decoder.out_net.nll", "torch.zeros_like", "numpy.prod", "dict", "statdict[].sum", "loss.mean", "elbo.mean", "vae.ConditionalVAE.mean", "torch.zeros_like.mean"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.encode_full_image", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.encode_part_image", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DmolNet.nll"], ["", "", "def", "kl_q_r2", "(", "self", ",", "part_x", ",", "full_x", ",", "x_target", ")", ":", "\n", "\n", "        ", "full_activations", "=", "self", ".", "encode_full_image", "(", "full_x", ")", "\n", "part_activations", "=", "self", ".", "encode_part_image", "(", "part_x", ")", "\n", "\n", "px_z", ",", "stats", "=", "self", ".", "decoder", ".", "run", "(", "sample_from", "=", "'part'", ",", "get_kl", "=", "'part-prior'", ",", "\n", "part_activations", "=", "part_activations", ",", "\n", "full_activations", "=", "full_activations", ")", "\n", "mask", "=", "part_x", "[", "...", ",", "-", "1", "]", "\n", "distortion_per_pixel", "=", "self", ".", "decoder", ".", "out_net", ".", "nll", "(", "px_z", ",", "x_target", ",", "mask", "=", "mask", ")", "\n", "rate_per_pixel", "=", "torch", ".", "zeros_like", "(", "distortion_per_pixel", ")", "\n", "ndims", "=", "np", ".", "prod", "(", "full_x", ".", "shape", "[", "1", ":", "]", ")", "\n", "for", "statdict", "in", "stats", ":", "\n", "            ", "rate_per_pixel", "+=", "statdict", "[", "'kl'", "]", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "", "rate_per_pixel", "/=", "ndims", "\n", "elbo", "=", "distortion_per_pixel", "+", "rate_per_pixel", "\n", "schedule_iters", ",", "start_inv_temp", ",", "final_inv_temp", "=", "self", ".", "H", ".", "likelihood_temp_schedule", "\n", "if", "self", ".", "iterate", "<", "schedule_iters", ":", "\n", "            ", "prop", "=", "self", ".", "iterate", "/", "schedule_iters", "\n", "likelihood_inv_temp", "=", "start_inv_temp", "**", "(", "1", "-", "prop", ")", "*", "final_inv_temp", "**", "prop", "\n", "", "else", ":", "\n", "            ", "likelihood_inv_temp", "=", "final_inv_temp", "\n", "", "loss", "=", "distortion_per_pixel", "*", "likelihood_inv_temp", "+", "rate_per_pixel", "\n", "return", "dict", "(", "loss", "=", "loss", ".", "mean", "(", ")", ",", "elbo", "=", "elbo", ".", "mean", "(", ")", ",", "\n", "distortion", "=", "distortion_per_pixel", ".", "mean", "(", ")", ",", "rate", "=", "rate_per_pixel", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.kl_r1_q": [[384, 408], ["vae.ConditionalVAE.encode_full_image", "vae.ConditionalVAE.encode_part_image", "vae.ConditionalVAE.decoder.forward", "numpy.prod", "enumerate", "dict", "statdict[].sum", "statdict[].sum().mean", "vae.ConditionalVAE.mean", "vae.ConditionalVAE.decoder.out_net.nll", "vae.ConditionalVAE.decoder.out_net.nll", "rate_per_pixel.mean", "elbo.mean", "elbo.mean", "rate_per_pixel.mean", "statdict[].sum"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.encode_full_image", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.encode_part_image", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DmolNet.nll", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DmolNet.nll"], ["", "def", "kl_r1_q", "(", "self", ",", "part_x", ",", "full_x", ",", "x_target", ")", ":", "\n", "\n", "        ", "full_activations", "=", "self", ".", "encode_full_image", "(", "full_x", ")", "\n", "part_activations", "=", "self", ".", "encode_part_image", "(", "part_x", ")", "\n", "px_z", ",", "stats", "=", "self", ".", "decoder", ".", "forward", "(", "part_activations", ",", "full_activations", ")", "\n", "rate_per_pixel", "=", "0", "\n", "ndims", "=", "np", ".", "prod", "(", "full_x", ".", "shape", "[", "1", ":", "]", ")", "\n", "kls", "=", "{", "}", "\n", "for", "i_layer", ",", "statdict", "in", "enumerate", "(", "stats", ")", ":", "\n", "            ", "rate_per_pixel", "+=", "statdict", "[", "'kl'", "]", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "kls", "[", "i_layer", "+", "1", "]", "=", "statdict", "[", "'kl'", "]", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ",", ")", ")", ".", "mean", "(", ")", "\n", "", "rate_per_pixel", "/=", "ndims", "\n", "if", "self", ".", "H", ".", "train_encoder_decoder", ":", "\n", "            ", "if", "self", ".", "H", ".", "mask_distortion", ":", "\n", "                ", "distortion_per_pixel", "=", "self", ".", "decoder", ".", "out_net", ".", "nll", "(", "px_z", ",", "x_target", ",", "mask", "=", "1", "-", "part_x", "[", "...", ",", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "distortion_per_pixel", "=", "self", ".", "decoder", ".", "out_net", ".", "nll", "(", "px_z", ",", "x_target", ")", "\n", "", "elbo", "=", "distortion_per_pixel", "+", "rate_per_pixel", "\n", "logged_distortion", "=", "distortion_per_pixel", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "elbo", "=", "rate_per_pixel", "\n", "logged_distortion", "=", "rate_per_pixel", ".", "mean", "(", ")", "*", "0", "\n", "", "return", "dict", "(", "loss", "=", "elbo", ".", "mean", "(", ")", ",", "elbo", "=", "elbo", ".", "mean", "(", ")", ",", "distortion", "=", "logged_distortion", ",", "\n", "rate", "=", "rate_per_pixel", ".", "mean", "(", ")", ",", "kl1", "=", "kls", "[", "1", "]", ",", "kl2", "=", "kls", "[", "2", "]", ",", "kl3", "=", "kls", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.forward": [[409, 419], ["vae.ConditionalVAE.kl_r1_q", "vae.ConditionalVAE.kl_q_r2", "Exception"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.kl_r1_q", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.kl_q_r2"], ["", "def", "forward", "(", "self", ",", "part_x", "=", "None", ",", "full_x", "=", "None", ",", "x_target", "=", "None", ",", "obj", "=", "'r1_q'", ",", "iterate", "=", "None", ")", ":", "\n", "        ", "full_x", "=", "full_x", "[", "...", ",", "-", "self", ".", "H", ".", "image_size", ":", ",", ":", "]", "# does nothing unless it is edges2shoes or similar", "\n", "x_target", "=", "x_target", "[", "...", ",", "-", "self", ".", "H", ".", "image_size", ":", ",", ":", "]", "# does nothing unless it is edges2shoes or similar", "\n", "self", ".", "iterate", "=", "iterate", "\n", "if", "obj", "==", "'r1_q'", ":", "\n", "            ", "return", "self", ".", "kl_r1_q", "(", "part_x", ",", "full_x", ",", "x_target", ")", "\n", "", "elif", "obj", "==", "'q_r2'", ":", "\n", "            ", "return", "self", ".", "kl_q_r2", "(", "part_x", ",", "full_x", ",", "x_target", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'KL not recognised.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.forward_get_latents": [[420, 426], ["vae.ConditionalVAE.encode_full_image", "vae.ConditionalVAE.encode_part_image", "vae.ConditionalVAE.decoder.forward"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.encode_full_image", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.encode_part_image", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward"], ["", "", "def", "forward_get_latents", "(", "self", ",", "part_x", ",", "full_x", ",", "get_ents", "=", "False", ")", ":", "\n", "        ", "full_activations", "=", "self", ".", "encode_full_image", "(", "full_x", ")", "\n", "part_activations", "=", "self", ".", "encode_part_image", "(", "part_x", ")", "\n", "_", ",", "stats", "=", "self", ".", "decoder", ".", "forward", "(", "part_activations", ",", "full_activations", ",", "\n", "get_latents", "=", "True", ",", "get_ents", "=", "get_ents", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.forward_uncond_samples": [[427, 432], ["vae.ConditionalVAE.encode_part_image", "vae.ConditionalVAE.decoder.forward_uncond", "vae.ConditionalVAE.decoder.out_net.sample"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.encode_part_image", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Decoder.forward_uncond", "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample"], ["", "def", "forward_uncond_samples", "(", "self", ",", "n_batch", ",", "part_x", ",", "t", "=", "None", ")", ":", "\n", "        ", "assert", "n_batch", "==", "part_x", ".", "shape", "[", "0", "]", "\n", "part_activations", "=", "self", ".", "encode_part_image", "(", "part_x", ")", "\n", "px_z", ",", "_", "=", "self", ".", "decoder", ".", "forward_uncond", "(", "part_activations", ",", "n", "=", "None", ",", "t", "=", "t", ")", "\n", "return", "self", ".", "decoder", ".", "out_net", ".", "sample", "(", "px_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.forward_samples_set_latents": [[433, 438], ["vae.ConditionalVAE.encode_part_image", "vae.ConditionalVAE.decoder.forward_manual_latents", "vae.ConditionalVAE.decoder.out_net.sample"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.encode_part_image", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.Decoder.forward_manual_latents", "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample"], ["", "def", "forward_samples_set_latents", "(", "self", ",", "n_batch", ",", "part_x", ",", "latents", ",", "t", "=", "None", ")", ":", "\n", "        ", "assert", "n_batch", "==", "part_x", ".", "shape", "[", "0", "]", "\n", "part_activations", "=", "self", ".", "encode_part_image", "(", "part_x", ")", "\n", "px_z", "=", "self", ".", "decoder", ".", "forward_manual_latents", "(", "part_activations", ",", "n_batch", ",", "latents", ",", "t", "=", "t", ")", "\n", "return", "self", ".", "decoder", ".", "out_net", ".", "sample", "(", "px_z", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.parse_layer_string": [[33, 50], ["s.split", "ss.split", "int", "layers.append", "int", "range", "int", "layers.append", "int", "layers.append", "ss.split", "int", "ss.split"], "function", ["None"], ["", "", "def", "parse_layer_string", "(", "s", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "ss", "in", "s", ".", "split", "(", "','", ")", ":", "\n", "        ", "if", "'x'", "in", "ss", ":", "\n", "            ", "res", ",", "num", "=", "ss", ".", "split", "(", "'x'", ")", "\n", "count", "=", "int", "(", "num", ")", "\n", "layers", "+=", "[", "(", "int", "(", "res", ")", ",", "None", ")", "for", "_", "in", "range", "(", "count", ")", "]", "\n", "", "elif", "'m'", "in", "ss", ":", "\n", "            ", "res", ",", "mixin", "=", "[", "int", "(", "a", ")", "for", "a", "in", "ss", ".", "split", "(", "'m'", ")", "]", "\n", "layers", ".", "append", "(", "(", "res", ",", "mixin", ")", ")", "\n", "", "elif", "'d'", "in", "ss", ":", "\n", "            ", "res", ",", "down_rate", "=", "[", "int", "(", "a", ")", "for", "a", "in", "ss", ".", "split", "(", "'d'", ")", "]", "\n", "layers", ".", "append", "(", "(", "res", ",", "down_rate", ")", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "int", "(", "ss", ")", "\n", "layers", ".", "append", "(", "(", "res", ",", "None", ")", ")", "\n", "", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.pad_channels": [[52, 57], ["torch.zeros"], "function", ["None"], ["", "def", "pad_channels", "(", "t", ",", "width", ")", ":", "\n", "    ", "d1", ",", "d2", ",", "d3", ",", "d4", "=", "t", ".", "shape", "\n", "empty", "=", "torch", ".", "zeros", "(", "d1", ",", "width", ",", "d3", ",", "d4", ",", "device", "=", "t", ".", "device", ")", "\n", "empty", "[", ":", ",", ":", "d2", ",", ":", ",", ":", "]", "=", "t", "\n", "return", "empty", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.get_width_settings": [[59, 67], ["collections.defaultdict", "s.split.split", "ss.split", "int", "int"], "function", ["None"], ["", "def", "get_width_settings", "(", "width", ",", "s", ")", ":", "\n", "    ", "mapping", "=", "defaultdict", "(", "lambda", ":", "width", ")", "\n", "if", "s", ":", "\n", "        ", "s", "=", "s", ".", "split", "(", "','", ")", "\n", "for", "ss", "in", "s", ":", "\n", "            ", "k", ",", "v", "=", "ss", ".", "split", "(", "':'", ")", "\n", "mapping", "[", "int", "(", "k", ")", "]", "=", "int", "(", "v", ")", "\n", "", "", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.Hyperparams.__getattr__": [[26, 31], ["None"], "methods", ["None"], ["    ", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "attr", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.Hyperparams.__setattr__": [[32, 34], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "attr", ",", "value", ")", ":", "\n", "        ", "self", "[", "attr", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.allreduce": [[13, 17], ["utils.mpi_size", "torch.all_reduce", "utils.mpi_size"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_size", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_size"], ["def", "allreduce", "(", "x", ",", "average", ")", ":", "\n", "    ", "if", "mpi_size", "(", ")", ">", "1", ":", "\n", "        ", "dist", ".", "all_reduce", "(", "x", ",", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "", "return", "x", "/", "mpi_size", "(", ")", "if", "average", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.get_cpu_stats_over_ranks": [[19, 23], ["sorted", "allreduce().cpu", "stat_dict.keys", "allreduced[].item", "utils.allreduce", "enumerate", "torch.stack", "torch.stack", "torch.as_tensor().detach().cuda().float", "torch.as_tensor().detach().cuda().float", "torch.as_tensor().detach().cuda", "torch.as_tensor().detach().cuda", "torch.as_tensor().detach", "torch.as_tensor().detach", "torch.as_tensor", "torch.as_tensor"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.utils.allreduce", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda"], ["", "def", "get_cpu_stats_over_ranks", "(", "stat_dict", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "\n", "allreduced", "=", "allreduce", "(", "torch", ".", "stack", "(", "[", "torch", ".", "as_tensor", "(", "stat_dict", "[", "k", "]", ")", ".", "detach", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "for", "k", "in", "keys", "]", ")", ",", "average", "=", "True", ")", ".", "cpu", "(", ")", "\n", "return", "{", "k", ":", "allreduced", "[", "i", "]", ".", "item", "(", ")", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "keys", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.logger": [[36, 73], ["time.ctime", "argdict.update", "print", "utils.mpi_rank", "len", "sorted", "isinstance", "isinstance", "json.dumps.append", "json.dumps", "json.dumps", "json.dumps", "float.tolist", "isinstance", "str", "int", "isinstance", "float"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_rank"], ["", "", "def", "logger", "(", "log_prefix", ")", ":", "\n", "    ", "'Prints the arguments out to stdout, .txt, and .jsonl files'", "\n", "\n", "def", "log", "(", "*", "args", ",", "pprint", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "mpi_rank", "(", ")", "!=", "0", ":", "\n", "            ", "return", "\n", "", "t", "=", "time", ".", "ctime", "(", ")", "\n", "argdict", "=", "{", "'time'", ":", "t", "}", "\n", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "            ", "argdict", "[", "'message'", "]", "=", "' '", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "args", "]", ")", "\n", "", "argdict", ".", "update", "(", "kwargs", ")", "\n", "\n", "txt_str", "=", "[", "]", "\n", "args_iter", "=", "sorted", "(", "argdict", ")", "if", "pprint", "else", "argdict", "\n", "for", "k", "in", "args_iter", ":", "\n", "            ", "val", "=", "argdict", "[", "k", "]", "\n", "if", "isinstance", "(", "val", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "val", "=", "val", ".", "tolist", "(", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "np", ".", "integer", ")", ":", "\n", "                ", "val", "=", "int", "(", "val", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "np", ".", "floating", ")", ":", "\n", "                ", "val", "=", "float", "(", "val", ")", "\n", "", "argdict", "[", "k", "]", "=", "val", "\n", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "val", "=", "f'{val:.5f}'", "\n", "", "txt_str", ".", "append", "(", "f'{k}: {val}'", ")", "\n", "", "txt_str", "=", "', '", ".", "join", "(", "txt_str", ")", "\n", "\n", "if", "pprint", ":", "\n", "            ", "json_str", "=", "json", ".", "dumps", "(", "argdict", ",", "sort_keys", "=", "True", ")", "\n", "txt_str", "=", "json", ".", "dumps", "(", "argdict", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "", "else", ":", "\n", "            ", "json_str", "=", "json", ".", "dumps", "(", "argdict", ")", "\n", "\n", "", "print", "(", "txt_str", ",", "flush", "=", "True", ")", "\n", "\n", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.maybe_download": [[75, 91], ["path.startswith", "os.path.isfile", "subprocess.check_output", "subprocess.check_output", "tempfile.mkstemp"], "function", ["None"], ["", "def", "maybe_download", "(", "path", ",", "filename", "=", "None", ")", ":", "\n", "    ", "'''If a path is a gsutil path, download it and return the local link,\n    otherwise return link'''", "\n", "if", "not", "path", ".", "startswith", "(", "'gs://'", ")", ":", "\n", "        ", "return", "path", "\n", "", "if", "filename", ":", "\n", "        ", "local_dest", "=", "f'/tmp/'", "\n", "out_path", "=", "f'/tmp/{filename}'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "out_path", ")", ":", "\n", "            ", "return", "out_path", "\n", "", "subprocess", ".", "check_output", "(", "[", "'gsutil'", ",", "'-m'", ",", "'cp'", ",", "'-R'", ",", "path", ",", "out_path", "]", ")", "\n", "return", "out_path", "\n", "", "else", ":", "\n", "        ", "local_dest", "=", "tempfile", ".", "mkstemp", "(", ")", "[", "1", "]", "\n", "subprocess", ".", "check_output", "(", "[", "'gsutil'", ",", "'-m'", ",", "'cp'", ",", "path", ",", "local_dest", "]", ")", "\n", "", "return", "local_dest", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.upload_to_gcp": [[93, 99], ["subprocess.call", "subprocess.check_output"], "function", ["None"], ["", "def", "upload_to_gcp", "(", "from_path", ",", "to_path", ",", "is_async", "=", "False", ")", ":", "\n", "    ", "if", "is_async", ":", "\n", "        ", "cmd", "=", "f'bash -exec -c \"gsutil -m rsync -r {from_path} {to_path}\"&'", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ",", "stderr", "=", "subprocess", ".", "DEVNULL", ")", "\n", "", "else", ":", "\n", "        ", "subprocess", ".", "check_output", "(", "[", "'gsutil'", ",", "'-m'", ",", "'rsync'", ",", "from_path", ",", "to_path", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.backup_files": [[101, 109], ["utils.mpi_rank", "print", "utils.upload_to_gcp", "utils.upload_to_gcp"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_rank", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.upload_to_gcp", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.upload_to_gcp"], ["", "", "def", "backup_files", "(", "save_dir", ",", "save_dir_gcp", ",", "path", "=", "None", ")", ":", "\n", "    ", "if", "mpi_rank", "(", ")", "==", "0", ":", "\n", "        ", "if", "not", "path", ":", "\n", "            ", "print", "(", "f'Backing up {save_dir} to {save_dir_gcp}'", ",", "\n", "'Will execute silently in another thread'", ")", "\n", "upload_to_gcp", "(", "save_dir", ",", "save_dir_gcp", ",", "is_async", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "upload_to_gcp", "(", "path", ",", "save_dir_gcp", ",", "is_async", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.tile_images": [[111, 126], ["numpy.ones", "enumerate", "len", "ValueError"], "function", ["None"], ["", "", "", "def", "tile_images", "(", "images", ",", "d1", "=", "4", ",", "d2", "=", "4", ",", "border", "=", "1", ")", ":", "\n", "    ", "id1", ",", "id2", ",", "c", "=", "images", "[", "0", "]", ".", "shape", "\n", "out", "=", "np", ".", "ones", "(", "[", "d1", "*", "id1", "+", "border", "*", "(", "d1", "+", "1", ")", ",", "\n", "d2", "*", "id2", "+", "border", "*", "(", "d2", "+", "1", ")", ",", "\n", "c", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "out", "*=", "255", "\n", "if", "len", "(", "images", ")", "!=", "d1", "*", "d2", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong num of images'", ")", "\n", "", "for", "imgnum", ",", "im", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "num_d1", "=", "imgnum", "//", "d2", "\n", "num_d2", "=", "imgnum", "%", "d2", "\n", "start_d1", "=", "num_d1", "*", "id1", "+", "border", "*", "(", "num_d1", "+", "1", ")", "\n", "start_d2", "=", "num_d2", "*", "id2", "+", "border", "*", "(", "num_d2", "+", "1", ")", "\n", "out", "[", "start_d1", ":", "start_d1", "+", "id1", ",", "start_d2", ":", "start_d2", "+", "id2", ",", ":", "]", "=", "im", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_size": [[128, 133], ["MPI.COMM_WORLD.Get_size"], "function", ["None"], ["", "def", "mpi_size", "(", ")", ":", "\n", "    ", "if", "'NO_MPI'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "return", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_rank": [[134, 139], ["MPI.COMM_WORLD.Get_rank"], "function", ["None"], ["", "", "def", "mpi_rank", "(", ")", ":", "\n", "    ", "if", "'NO_MPI'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "return", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.num_nodes": [[140, 145], ["utils.mpi_size"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_size"], ["", "", "def", "num_nodes", "(", ")", ":", "\n", "    ", "nn", "=", "mpi_size", "(", ")", "\n", "if", "nn", "%", "8", "==", "0", ":", "\n", "        ", "return", "nn", "//", "8", "\n", "", "return", "nn", "//", "8", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.gpus_per_node": [[147, 152], ["utils.mpi_size", "max", "utils.num_nodes"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_size", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.num_nodes"], ["", "def", "gpus_per_node", "(", ")", ":", "\n", "    ", "size", "=", "mpi_size", "(", ")", "\n", "if", "size", ">", "1", ":", "\n", "        ", "return", "max", "(", "size", "//", "num_nodes", "(", ")", ",", "1", ")", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.local_mpi_rank": [[154, 156], ["utils.mpi_rank", "utils.gpus_per_node"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.None.utils.mpi_rank", "home.repos.pwc.inspect_result.plai-group_ipa.None.utils.gpus_per_node"], ["", "def", "local_mpi_rank", "(", ")", ":", "\n", "    ", "return", "mpi_rank", "(", ")", "%", "gpus_per_node", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.baseline_utils.update_args": [[4, 18], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "update_args", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "'--tags'", ",", "type", "=", "str", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--conditioning'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'patches'", ",", "'patches-missing'", ",", "'blank'", ",", "'freeform'", "]", ",", "\n", "default", "=", "'patches'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_patches'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--freeform_hole_range'", ",", "type", "=", "float", ",", "nargs", "=", "2", ",", "default", "=", "[", "0", ",", "1", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'../../'", "if", "\"DATA_ROOT\"", "not", "in", "os", ".", "environ", "else", "os", ".", "environ", "[", "\"DATA_ROOT\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--patch_size_frac'", ",", "type", "=", "float", ",", "default", "=", "0.35", ",", "\n", "help", "=", "\"Patch width as fraction of image width.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_images_visualize'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--num_samples_visualize'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_sample_workers'", ",", "type", "=", "int", ",", "help", "=", "'Parallelise mask sampling.'", ")", "\n", "return", "parser", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.mask_generator.fast_clip": [[10, 21], ["isinstance", "numpy.less", "numpy.greater"], "function", ["None"], ["def", "fast_clip", "(", "ar", ",", "a", ",", "b", ")", ":", "\n", "    ", "if", "isinstance", "(", "ar", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "ar", "[", "np", ".", "less", "(", "ar", ",", "a", ")", "]", "=", "a", "\n", "ar", "[", "np", ".", "greater", "(", "ar", ",", "b", ")", "]", "=", "b", "\n", "return", "ar", "\n", "", "else", ":", "\n", "        ", "if", "ar", "<", "a", ":", "\n", "            ", "return", "a", "\n", "", "if", "ar", ">", "b", ":", "\n", "            ", "return", "b", "\n", "", "return", "ar", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.mask_generator.RandomBrush": [[22, 75], ["PIL.Image.new", "range", "numpy.asarray", "numpy.random.RandomState", "math.sqrt", "np.random.RandomState.randint", "np.random.RandomState.randint", "np.random.RandomState.uniform", "mask_generator.fast_clip", "range", "PIL.ImageDraw.Draw", "int", "ImageDraw.Draw.line", "np.random.RandomState.random", "numpy.flip", "np.random.RandomState.random", "numpy.flip", "numpy.random.randint", "np.random.RandomState.uniform", "np.random.RandomState.uniform", "np.random.RandomState.normal", "numpy.cos", "numpy.sin", "mask_generator.fast_clip", "mask_generator.fast_clip", "vertex.append", "np.random.RandomState.uniform", "ImageDraw.Draw.ellipse", "np.random.RandomState.random", "np.flip.transpose", "np.random.RandomState.random", "np.flip.transpose", "int", "int", "np.random.RandomState.randint", "np.random.RandomState.randint", "int", "int"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.mask_generator.fast_clip", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.mask_generator.fast_clip", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.mask_generator.fast_clip"], ["", "", "def", "RandomBrush", "(", "\n", "max_tries", ",", "\n", "s", ",", "\n", "min_num_vertex", "=", "4", ",", "\n", "max_num_vertex", "=", "18", ",", "\n", "mean_angle", "=", "2", "*", "math", ".", "pi", "/", "5", ",", "\n", "angle_range", "=", "2", "*", "math", ".", "pi", "/", "15", ",", "\n", "min_width", "=", "12", ",", "\n", "max_width", "=", "48", ",", "\n", "rng", "=", "None", ")", ":", "\n", "    ", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "2", "**", "32", "-", "1", ")", ")", "\n", "", "H", ",", "W", "=", "s", ",", "s", "\n", "average_radius", "=", "math", ".", "sqrt", "(", "H", "*", "H", "+", "W", "*", "W", ")", "/", "8", "\n", "mask", "=", "Image", ".", "new", "(", "'L'", ",", "(", "W", ",", "H", ")", ",", "0", ")", "\n", "for", "_", "in", "range", "(", "rng", ".", "randint", "(", "max_tries", ")", ")", ":", "\n", "        ", "num_vertex", "=", "rng", ".", "randint", "(", "min_num_vertex", ",", "max_num_vertex", ")", "\n", "angle_min", "=", "mean_angle", "-", "rng", ".", "uniform", "(", "0", ",", "angle_range", ")", "\n", "angle_max", "=", "mean_angle", "+", "rng", ".", "uniform", "(", "0", ",", "angle_range", ")", "\n", "angles", "=", "rng", ".", "uniform", "(", "angle_min", ",", "angle_max", ",", "size", "=", "num_vertex", ")", "\n", "angles", "[", ":", ":", "2", "]", "=", "2", "*", "math", ".", "pi", "-", "angles", "[", ":", ":", "2", "]", "\n", "\n", "h", ",", "w", "=", "mask", ".", "size", "\n", "vertex", "=", "[", "(", "int", "(", "rng", ".", "randint", "(", "0", ",", "w", ")", ")", ",", "int", "(", "rng", ".", "randint", "(", "0", ",", "h", ")", ")", ")", "]", "\n", "r", "=", "fast_clip", "(", "\n", "rng", ".", "normal", "(", "loc", "=", "average_radius", ",", "scale", "=", "average_radius", "//", "2", ",", "size", "=", "num_vertex", ")", ",", "\n", "0", ",", "2", "*", "average_radius", ")", "\n", "dx", "=", "r", "*", "np", ".", "cos", "(", "angles", ")", "\n", "dy", "=", "r", "*", "np", ".", "sin", "(", "angles", ")", "\n", "for", "i", "in", "range", "(", "num_vertex", ")", ":", "\n", "            ", "new_x", "=", "fast_clip", "(", "vertex", "[", "-", "1", "]", "[", "0", "]", "+", "dx", "[", "i", "]", ",", "0", ",", "w", ")", "\n", "new_y", "=", "fast_clip", "(", "vertex", "[", "-", "1", "]", "[", "1", "]", "+", "dy", "[", "i", "]", ",", "0", ",", "h", ")", "\n", "vertex", ".", "append", "(", "(", "int", "(", "new_x", ")", ",", "int", "(", "new_y", ")", ")", ")", "\n", "\n", "", "draw", "=", "ImageDraw", ".", "Draw", "(", "mask", ")", "\n", "width", "=", "int", "(", "rng", ".", "uniform", "(", "min_width", ",", "max_width", ")", ")", "\n", "draw", ".", "line", "(", "vertex", ",", "fill", "=", "1", ",", "width", "=", "width", ")", "\n", "for", "v", "in", "vertex", ":", "\n", "            ", "draw", ".", "ellipse", "(", "(", "v", "[", "0", "]", "-", "width", "//", "2", ",", "\n", "v", "[", "1", "]", "-", "width", "//", "2", ",", "\n", "v", "[", "0", "]", "+", "width", "//", "2", ",", "\n", "v", "[", "1", "]", "+", "width", "//", "2", ")", ",", "\n", "fill", "=", "1", ")", "\n", "", "if", "rng", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "if", "rng", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "mask", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "", "mask", "=", "np", ".", "asarray", "(", "mask", ",", "np", ".", "uint8", ")", "\n", "if", "rng", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "mask", "=", "np", ".", "flip", "(", "mask", ",", "0", ")", "\n", "", "if", "rng", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "mask", "=", "np", ".", "flip", "(", "mask", ",", "1", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.mask_generator.RandomMask": [[76, 97], ["min", "numpy.random.RandomState", "numpy.ones", "mask_generator.RandomMask.MultiFill"], "function", ["None"], ["", "def", "RandomMask", "(", "s", ",", "hole_range", "=", "[", "0", ",", "1", "]", ",", "rng", "=", "None", ")", ":", "\n", "    ", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "2", "**", "32", "-", "1", ")", ")", "\n", "", "coef", "=", "min", "(", "hole_range", "[", "0", "]", "+", "hole_range", "[", "1", "]", ",", "1.0", ")", "\n", "while", "True", ":", "\n", "        ", "mask", "=", "np", ".", "ones", "(", "(", "s", ",", "s", ")", ",", "np", ".", "uint8", ")", "\n", "def", "Fill", "(", "max_size", ")", ":", "\n", "            ", "w", ",", "h", "=", "rng", ".", "randint", "(", "max_size", ")", ",", "rng", ".", "randint", "(", "max_size", ")", "\n", "ww", ",", "hh", "=", "w", "//", "2", ",", "h", "//", "2", "\n", "x", ",", "y", "=", "rng", ".", "randint", "(", "-", "ww", ",", "s", "-", "w", "+", "ww", ")", ",", "rng", ".", "randint", "(", "-", "hh", ",", "s", "-", "h", "+", "hh", ")", "\n", "mask", "[", "max", "(", "y", ",", "0", ")", ":", "min", "(", "y", "+", "h", ",", "s", ")", ",", "max", "(", "x", ",", "0", ")", ":", "min", "(", "x", "+", "w", ",", "s", ")", "]", "=", "0", "\n", "", "def", "MultiFill", "(", "max_tries", ",", "max_size", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "rng", ".", "randint", "(", "max_tries", ")", ")", ":", "\n", "                ", "Fill", "(", "max_size", ")", "\n", "", "", "MultiFill", "(", "int", "(", "10", "*", "coef", ")", ",", "s", "//", "2", ")", "\n", "MultiFill", "(", "int", "(", "5", "*", "coef", ")", ",", "s", ")", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "1", "-", "RandomBrush", "(", "int", "(", "20", "*", "coef", ")", ",", "s", ",", "rng", "=", "rng", ")", ")", "\n", "hole_ratio", "=", "1", "-", "np", ".", "mean", "(", "mask", ")", "\n", "if", "hole_range", "is", "not", "None", "and", "(", "hole_ratio", "<=", "hole_range", "[", "0", "]", "or", "hole_ratio", ">=", "hole_range", "[", "1", "]", ")", ":", "\n", "            ", "continue", "\n", "", "return", "mask", "[", "np", ".", "newaxis", ",", "...", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.mask_generator.BatchRandomMask": [[98, 100], ["numpy.stack", "mask_generator.RandomMask"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.mask_generator.RandomMask"], ["", "", "def", "BatchRandomMask", "(", "batch_size", ",", "s", ",", "hole_ranges", ")", ":", "\n", "    ", "return", "np", ".", "stack", "(", "[", "RandomMask", "(", "s", ",", "hole_range", "=", "hole_range", ")", "for", "hole_range", "in", "hole_ranges", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.mask_generator.np_mask_generator": [[101, 106], ["iter", "mask_generator.np_mask_generator.random_mask_generator"], "function", ["None"], ["", "def", "np_mask_generator", "(", "s", ",", "hole_range", ")", ":", "\n", "    ", "def", "random_mask_generator", "(", "hole_range", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "RandomMask", "(", "s", ",", "hole_range", "=", "hole_range", ")", "\n", "", "", "return", "iter", "(", "random_mask_generator", "(", "hole_range", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DifferentiableClamp.forward": [[58, 62], ["input.clamp"], "methods", ["None"], ["@", "staticmethod", "\n", "@", "custom_fwd", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "min", ")", ":", "\n", "        ", "return", "input", ".", "clamp", "(", "min", "=", "min", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DifferentiableClamp.backward": [[63, 67], ["grad_output.clone"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone"], ["", "@", "staticmethod", "\n", "@", "custom_bwd", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ".", "clone", "(", ")", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.HModule.__init__": [[219, 223], ["torch.Module.__init__", "__init__.HModule.build"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.None.vae.ConditionalVAE.build"], ["    ", "def", "__init__", "(", "self", ",", "H", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "build", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DmolNet.__init__": [[226, 231], ["torch.Module.__init__", "__init__.get_conv"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_conv"], ["    ", "def", "__init__", "(", "self", ",", "H", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "width", "=", "H", ".", "width", "\n", "self", ".", "out_conv", "=", "get_conv", "(", "H", ".", "width", ",", "H", ".", "num_mixtures", "*", "10", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DmolNet.nll": [[232, 234], ["__init__.discretized_mix_logistic_loss", "__init__.DmolNet.forward"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.discretized_mix_logistic_loss", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward"], ["", "def", "nll", "(", "self", ",", "px_z", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "discretized_mix_logistic_loss", "(", "x", "=", "x", ",", "l", "=", "self", ".", "forward", "(", "px_z", ")", ",", "low_bit", "=", "self", ".", "H", ".", "dataset", "in", "[", "'ffhq_256'", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DmolNet.forward": [[235, 238], ["__init__.DmolNet.out_conv", "__init__.DmolNet.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "px_z", ")", ":", "\n", "        ", "xhat", "=", "self", ".", "out_conv", "(", "px_z", ")", "\n", "return", "xhat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DmolNet.sample": [[239, 245], ["__init__.sample_from_discretized_mix_logistic", "numpy.minimum().astype.detach().cpu().numpy", "numpy.minimum().astype", "__init__.DmolNet.forward", "numpy.minimum().astype.detach().cpu", "numpy.minimum", "numpy.maximum", "numpy.minimum().astype.detach"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_from_discretized_mix_logistic", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward"], ["", "def", "sample", "(", "self", ",", "px_z", ")", ":", "\n", "        ", "im", "=", "sample_from_discretized_mix_logistic", "(", "self", ".", "forward", "(", "px_z", ")", ",", "self", ".", "H", ".", "num_mixtures", ")", "\n", "xhat", "=", "(", "im", "+", "1.0", ")", "*", "127.5", "\n", "xhat", "=", "xhat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "xhat", "=", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "0.0", ",", "xhat", ")", ",", "255.0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "xhat", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.RNG.__init__": [[363, 371], ["__init__.get_random_state", "__init__.set_random_seed", "__init__.set_random_state"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.get_random_state", "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.set_random_seed", "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.set_random_state"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ",", "state", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "state", "=", "get_random_state", "(", ")", "\n", "with", "self", ":", "\n", "            ", "if", "seed", "is", "not", "None", ":", "\n", "                ", "set_random_seed", "(", "seed", ")", "\n", "", "elif", "state", "is", "not", "None", ":", "\n", "                ", "set_random_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.RNG.__enter__": [[372, 375], ["__init__.get_random_state", "__init__.set_random_state"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.get_random_state", "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.set_random_state"], ["", "", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "external_state", "=", "get_random_state", "(", ")", "\n", "set_random_state", "(", "self", ".", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.RNG.__exit__": [[376, 379], ["__init__.get_random_state", "__init__.set_random_state"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.get_random_state", "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.set_random_state"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "state", "=", "get_random_state", "(", ")", "\n", "set_random_state", "(", "self", ".", "external_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.RNG.get_state": [[380, 382], ["None"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.RNG.set_state": [[383, 385], ["None"], "methods", ["None"], ["", "def", "set_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "state", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.rng_decorator.__init__": [[388, 390], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "seed", ")", ":", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.rng_decorator.__call__": [[391, 398], ["__init__.RNG", "f"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "f", ")", ":", "\n", "\n", "        ", "def", "wrapped_f", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "with", "RNG", "(", "self", ".", "seed", ")", ":", "\n", "                ", "return", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "return", "wrapped_f", "", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.dclamp": [[69, 77], ["DifferentiableClamp.apply"], "function", ["None"], ["", "", "def", "dclamp", "(", "input", ",", "min", ")", ":", "\n", "    ", "\"\"\"\n    Like torch.clamp, but with a constant 1-gradient.\n    :param input: The input that is to be clamped.\n    :param min: The minimum value of the output.\n    :param max: The maximum value of the output.\n    \"\"\"", "\n", "return", "DifferentiableClamp", ".", "apply", "(", "input", ",", "min", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.gaussian_log_prob": [[79, 82], ["torch.tensor().log", "torch.tensor().log", "torch.tensor().log", "logsigma.exp", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "gaussian_log_prob", "(", "x", ",", "mu", ",", "logsigma", ")", ":", "\n", "    ", "return", "-", "logsigma", "-", "0.5", "*", "torch", ".", "tensor", "(", "2", "*", "np", ".", "pi", ")", ".", "log", "(", ")", "-", "0.5", "*", "(", "(", "x", "-", "mu", ")", "/", "logsigma", ".", "exp", "(", ")", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.gaussian_analytical_kl": [[84, 87], ["logsigma2.exp", "logsigma1.exp"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "gaussian_analytical_kl", "(", "mu1", ",", "logsigma1", ",", "mu2", ",", "logsigma2", ")", ":", "\n", "    ", "return", "-", "0.5", "+", "logsigma2", "-", "logsigma1", "+", "0.5", "*", "(", "logsigma1", ".", "exp", "(", ")", "**", "2", "+", "(", "mu1", "-", "mu2", ")", "**", "2", ")", "/", "(", "logsigma2", ".", "exp", "(", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.draw_gaussian_diag_samples": [[89, 93], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.empty_like().normal_", "torch.empty_like().normal_", "torch.empty_like().normal_", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "draw_gaussian_diag_samples", "(", "mu", ",", "logsigma", ",", "t", "=", "torch", ".", "tensor", "(", "1.", ")", ")", ":", "\n", "    ", "eps", "=", "torch", ".", "empty_like", "(", "mu", ")", ".", "normal_", "(", "0.", ",", "1.", ")", "\n", "return", "torch", ".", "exp", "(", "logsigma", ")", "*", "eps", "*", "t", "+", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_conv": [[95, 102], ["torch.Conv2d"], "function", ["None"], ["", "def", "get_conv", "(", "in_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", ",", "zero_bias", "=", "True", ",", "zero_weights", "=", "False", ",", "groups", "=", "1", ",", "scaled", "=", "False", ")", ":", "\n", "    ", "c", "=", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "groups", ")", "\n", "if", "zero_bias", ":", "\n", "        ", "c", ".", "bias", ".", "data", "*=", "0.0", "\n", "", "if", "zero_weights", ":", "\n", "        ", "c", ".", "weight", ".", "data", "*=", "0.0", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_3x3": [[104, 106], ["__init__.get_conv"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_conv"], ["", "def", "get_3x3", "(", "in_dim", ",", "out_dim", ",", "zero_bias", "=", "True", ",", "zero_weights", "=", "False", ",", "groups", "=", "1", ",", "scaled", "=", "False", ")", ":", "\n", "    ", "return", "get_conv", "(", "in_dim", ",", "out_dim", ",", "3", ",", "1", ",", "1", ",", "zero_bias", ",", "zero_weights", ",", "groups", "=", "groups", ",", "scaled", "=", "scaled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_1x1": [[108, 110], ["__init__.get_conv"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_conv"], ["", "def", "get_1x1", "(", "in_dim", ",", "out_dim", ",", "zero_bias", "=", "True", ",", "zero_weights", "=", "False", ",", "groups", "=", "1", ",", "scaled", "=", "False", ")", ":", "\n", "    ", "return", "get_conv", "(", "in_dim", ",", "out_dim", ",", "1", ",", "1", ",", "0", ",", "zero_bias", ",", "zero_weights", ",", "groups", "=", "groups", ",", "scaled", "=", "scaled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.log_prob_from_logits": [[112, 117], ["len", "x.max", "torch.log", "torch.log", "torch.log", "torch.exp().sum", "torch.exp().sum", "torch.exp().sum", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "log_prob_from_logits", "(", "x", ")", ":", "\n", "    ", "\"\"\" numerically stable log_softmax implementation that prevents overflow \"\"\"", "\n", "axis", "=", "len", "(", "x", ".", "shape", ")", "-", "1", "\n", "m", "=", "x", ".", "max", "(", "dim", "=", "axis", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "return", "x", "-", "m", "-", "torch", ".", "log", "(", "torch", ".", "exp", "(", "x", "-", "m", ")", ".", "sum", "(", "dim", "=", "axis", ",", "keepdim", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.const_max": [[119, 122], ["torch.max", "torch.max", "torch.max", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "const_max", "(", "t", ",", "constant", ")", ":", "\n", "    ", "other", "=", "torch", ".", "ones_like", "(", "t", ")", "*", "constant", "\n", "return", "torch", ".", "max", "(", "t", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.const_min": [[124, 127], ["torch.min", "torch.min", "torch.min", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "const_min", "(", "t", ",", "constant", ")", ":", "\n", "    ", "other", "=", "torch", ".", "ones_like", "(", "t", ")", "*", "constant", "\n", "return", "torch", ".", "min", "(", "t", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.discretized_mix_logistic_loss": [[129, 191], ["int", "torch.reshape", "torch.reshape", "torch.reshape", "__init__.const_max", "torch.tanh", "torch.tanh", "torch.tanh", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.reshape", "torch.reshape", "torch.reshape", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softplus", "torch.softplus", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where.sum", "__init__.log_prob_from_logits", "numpy.prod", "torch.reshape", "torch.reshape", "torch.reshape", "torch.softplus", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.logsumexp.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "__init__.const_max", "numpy.log", "__init__.const_max", "numpy.log"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.const_max", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.log_prob_from_logits", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.const_max", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.const_max"], ["", "def", "discretized_mix_logistic_loss", "(", "x", ",", "l", ",", "low_bit", "=", "False", ",", "mask", "=", "None", ")", ":", "\n", "    ", "\"\"\" log-likelihood for mixture of discretized logistics, assumes the data has been rescaled to [-1,1] interval \"\"\"", "\n", "# Adapted from https://github.com/openai/pixel-cnn/blob/master/pixel_cnn_pp/nn.py", "\n", "xs", "=", "[", "s", "for", "s", "in", "x", ".", "shape", "]", "# true image (i.e. labels) to regress to, e.g. (B,32,32,3)", "\n", "ls", "=", "[", "s", "for", "s", "in", "l", ".", "shape", "]", "# predicted distribution, e.g. (B,32,32,100)", "\n", "nr_mix", "=", "int", "(", "ls", "[", "-", "1", "]", "/", "10", ")", "# here and below: unpacking the params of the mixture of logistics", "\n", "logit_probs", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "l", "=", "torch", ".", "reshape", "(", "l", "[", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "]", ",", "xs", "+", "[", "nr_mix", "*", "3", "]", ")", "\n", "means", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "log_scales", "=", "const_max", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "2", "*", "nr_mix", "]", ",", "-", "7.", ")", "\n", "coeffs", "=", "torch", ".", "tanh", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "*", "nr_mix", ":", "3", "*", "nr_mix", "]", ")", "\n", "x", "=", "torch", ".", "reshape", "(", "x", ",", "xs", "+", "[", "1", "]", ")", "+", "torch", ".", "zeros", "(", "xs", "+", "[", "nr_mix", "]", ")", ".", "to", "(", "x", ".", "device", ")", "# here and below: getting the means and adjusting them based on preceding sub-pixels", "\n", "m2", "=", "torch", ".", "reshape", "(", "means", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ",", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", "]", ")", "\n", "m3", "=", "torch", ".", "reshape", "(", "means", "[", ":", ",", ":", ",", ":", ",", "2", ",", ":", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "2", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", ",", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", "]", ")", "\n", "means", "=", "torch", ".", "cat", "(", "[", "torch", ".", "reshape", "(", "means", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ",", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", "]", ")", ",", "m2", ",", "m3", "]", ",", "dim", "=", "3", ")", "\n", "centered_x", "=", "x", "-", "means", "\n", "inv_stdv", "=", "torch", ".", "exp", "(", "-", "log_scales", ")", "\n", "if", "low_bit", ":", "\n", "        ", "plus_in", "=", "inv_stdv", "*", "(", "centered_x", "+", "1.", "/", "31.", ")", "\n", "cdf_plus", "=", "torch", ".", "sigmoid", "(", "plus_in", ")", "\n", "min_in", "=", "inv_stdv", "*", "(", "centered_x", "-", "1.", "/", "31.", ")", "\n", "", "else", ":", "\n", "        ", "plus_in", "=", "inv_stdv", "*", "(", "centered_x", "+", "1.", "/", "255.", ")", "\n", "cdf_plus", "=", "torch", ".", "sigmoid", "(", "plus_in", ")", "\n", "min_in", "=", "inv_stdv", "*", "(", "centered_x", "-", "1.", "/", "255.", ")", "\n", "", "cdf_min", "=", "torch", ".", "sigmoid", "(", "min_in", ")", "\n", "log_cdf_plus", "=", "plus_in", "-", "F", ".", "softplus", "(", "plus_in", ")", "# log probability for edge case of 0 (before scaling)", "\n", "log_one_minus_cdf_min", "=", "-", "F", ".", "softplus", "(", "min_in", ")", "# log probability for edge case of 255 (before scaling)", "\n", "cdf_delta", "=", "cdf_plus", "-", "cdf_min", "# probability for all other cases", "\n", "mid_in", "=", "inv_stdv", "*", "centered_x", "\n", "log_pdf_mid", "=", "mid_in", "-", "log_scales", "-", "2.", "*", "F", ".", "softplus", "(", "mid_in", ")", "# log probability in the center of the bin, to be used in extreme cases (not actually used in our code)", "\n", "\n", "# now select the right output: left edge case, right edge case, normal case, extremely low prob case (doesn't actually happen for us)", "\n", "\n", "# this is what we are really doing, but using the robust version below for extreme cases in other applications and to avoid NaN issue with tf.select()", "\n", "# log_probs = tf.select(x < -0.999, log_cdf_plus, tf.select(x > 0.999, log_one_minus_cdf_min, tf.log(cdf_delta)))", "\n", "\n", "# robust version, that still works if probabilities are below 1e-5 (which never happens in our code)", "\n", "# tensorflow backpropagates through tf.select() by multiplying with zero instead of selecting: this requires use to use some ugly tricks to avoid potential NaNs", "\n", "# the 1e-12 in tf.maximum(cdf_delta, 1e-12) is never actually used as output, it's purely there to get around the tf.select() gradient issue", "\n", "# if the probability on a sub-pixel is below 1e-5, we use an approximation based on the assumption that the log-density is constant in the bin of the observed sub-pixel value", "\n", "if", "low_bit", ":", "\n", "        ", "log_probs", "=", "torch", ".", "where", "(", "x", "<", "-", "0.999", ",", "\n", "log_cdf_plus", ",", "\n", "torch", ".", "where", "(", "x", ">", "0.999", ",", "\n", "log_one_minus_cdf_min", ",", "\n", "torch", ".", "where", "(", "cdf_delta", ">", "1e-5", ",", "\n", "torch", ".", "log", "(", "const_max", "(", "cdf_delta", ",", "1e-12", ")", ")", ",", "\n", "log_pdf_mid", "-", "np", ".", "log", "(", "15.5", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "log_probs", "=", "torch", ".", "where", "(", "x", "<", "-", "0.999", ",", "\n", "log_cdf_plus", ",", "\n", "torch", ".", "where", "(", "x", ">", "0.999", ",", "\n", "log_one_minus_cdf_min", ",", "\n", "torch", ".", "where", "(", "cdf_delta", ">", "1e-5", ",", "\n", "torch", ".", "log", "(", "const_max", "(", "cdf_delta", ",", "1e-12", ")", ")", ",", "\n", "log_pdf_mid", "-", "np", ".", "log", "(", "127.5", ")", ")", ")", ")", "\n", "", "log_probs", "=", "log_probs", ".", "sum", "(", "dim", "=", "3", ")", "+", "log_prob_from_logits", "(", "logit_probs", ")", "\n", "mixture_probs", "=", "torch", ".", "logsumexp", "(", "log_probs", ",", "-", "1", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mixture_probs", "=", "mixture_probs", "*", "mask", "\n", "", "return", "-", "1.", "*", "mixture_probs", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "/", "np", ".", "prod", "(", "xs", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_from_discretized_mix_logistic": [[193, 216], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.argmax", "torch.argmax", "torch.argmax", "torch.one_hot().float", "torch.reshape", "torch.reshape", "torch.reshape", "__init__.const_max", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "__init__.const_min", "__init__.const_min", "__init__.const_min", "torch.cat", "torch.cat", "torch.cat", "__init__.const_max", "__init__.const_max", "__init__.const_max", "torch.empty", "torch.empty", "torch.empty", "torch.log", "torch.log", "torch.log", "torch.one_hot", "torch.empty", "torch.empty", "torch.empty", "torch.exp", "torch.exp", "torch.exp", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.tanh", "torch.tanh", "torch.tanh", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.const_max", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.const_min", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.const_min", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.const_min", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.const_max", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.const_max", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.const_max"], ["", "def", "sample_from_discretized_mix_logistic", "(", "l", ",", "nr_mix", ")", ":", "\n", "    ", "ls", "=", "[", "s", "for", "s", "in", "l", ".", "shape", "]", "\n", "xs", "=", "ls", "[", ":", "-", "1", "]", "+", "[", "3", "]", "\n", "# unpack parameters", "\n", "logit_probs", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "l", "=", "torch", ".", "reshape", "(", "l", "[", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "]", ",", "xs", "+", "[", "nr_mix", "*", "3", "]", ")", "\n", "# sample mixture indicator from softmax", "\n", "eps", "=", "torch", ".", "empty", "(", "logit_probs", ".", "shape", ",", "device", "=", "l", ".", "device", ")", ".", "uniform_", "(", "1e-5", ",", "1.", "-", "1e-5", ")", "\n", "amax", "=", "torch", ".", "argmax", "(", "logit_probs", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "eps", ")", ")", ",", "dim", "=", "3", ")", "\n", "sel", "=", "F", ".", "one_hot", "(", "amax", ",", "num_classes", "=", "nr_mix", ")", ".", "float", "(", ")", "\n", "sel", "=", "torch", ".", "reshape", "(", "sel", ",", "xs", "[", ":", "-", "1", "]", "+", "[", "1", ",", "nr_mix", "]", ")", "\n", "# select logistic parameters", "\n", "means", "=", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "*", "sel", ")", ".", "sum", "(", "dim", "=", "4", ")", "\n", "log_scales", "=", "const_max", "(", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "nr_mix", "*", "2", "]", "*", "sel", ")", ".", "sum", "(", "dim", "=", "4", ")", ",", "-", "7.", ")", "\n", "coeffs", "=", "(", "torch", ".", "tanh", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "nr_mix", "*", "2", ":", "nr_mix", "*", "3", "]", ")", "*", "sel", ")", ".", "sum", "(", "dim", "=", "4", ")", "\n", "# sample from logistic & clip to interval", "\n", "# we don't actually round to the nearest 8bit value when sampling", "\n", "u", "=", "torch", ".", "empty", "(", "means", ".", "shape", ",", "device", "=", "means", ".", "device", ")", ".", "uniform_", "(", "1e-5", ",", "1.", "-", "1e-5", ")", "\n", "x", "=", "means", "+", "torch", ".", "exp", "(", "log_scales", ")", "*", "(", "torch", ".", "log", "(", "u", ")", "-", "torch", ".", "log", "(", "1.", "-", "u", ")", ")", "\n", "x0", "=", "const_min", "(", "const_max", "(", "x", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "-", "1.", ")", ",", "1.", ")", "\n", "x1", "=", "const_min", "(", "const_max", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "0", "]", "*", "x0", ",", "-", "1.", ")", ",", "1.", ")", "\n", "x2", "=", "const_min", "(", "const_max", "(", "x", "[", ":", ",", ":", ",", ":", ",", "2", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "1", "]", "*", "x0", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "2", "]", "*", "x1", ",", "-", "1.", ")", ",", "1.", ")", "\n", "return", "torch", ".", "cat", "(", "[", "torch", ".", "reshape", "(", "x0", ",", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "torch", ".", "reshape", "(", "x1", ",", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "torch", ".", "reshape", "(", "x2", ",", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", "]", ",", "dim", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_patches_mask": [[248, 263], ["round", "torch.zeros", "torch.zeros", "torch.zeros", "zip", "torch.randint", "torch.randint", "torch.randint", "range", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "max", "max", "min", "min"], "function", ["None"], ["", "", "def", "sample_patches_mask", "(", "H", ",", "b", ",", "h", ",", "w", ",", "device", ",", "n_patches", "=", "None", ")", ":", "\n", "    ", "if", "n_patches", "is", "None", ":", "\n", "        ", "n_patches", "=", "torch", ".", "randint", "(", "0", ",", "H", ".", "max_patches", "+", "1", ",", "(", "b", ",", ")", ")", "\n", "", "patch_dim", "=", "round", "(", "w", "*", "H", ".", "patch_size_frac", ")", "\n", "masks", "=", "torch", ".", "zeros", "(", "b", ",", "h", ",", "w", ",", "1", ",", "device", "=", "device", ")", "\n", "for", "mask", ",", "n_p", "in", "zip", "(", "masks", ",", "n_patches", ")", ":", "\n", "        ", "for", "p", "in", "range", "(", "n_p", ")", ":", "\n", "            ", "r", "=", "torch", ".", "randint", "(", "-", "patch_dim", "+", "1", ",", "h", ",", "(", ")", ")", "\n", "c", "=", "torch", ".", "randint", "(", "-", "patch_dim", "+", "1", ",", "h", ",", "(", ")", ")", "\n", "r1", "=", "max", "(", "0", ",", "r", ")", "\n", "c1", "=", "max", "(", "0", ",", "c", ")", "\n", "r2", "=", "min", "(", "h", ",", "r", "+", "patch_dim", ")", "\n", "c2", "=", "min", "(", "w", ",", "c", "+", "patch_dim", ")", "\n", "mask", "[", "r1", ":", "r2", ",", "c1", ":", "c2", "]", "=", "1.", "\n", "", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.channel_last_interpolate": [[264, 268], ["torch.nn.functional.interpolate.permute", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate.permute"], "function", ["None"], ["", "def", "channel_last_interpolate", "(", "t", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "t", "=", "t", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "t", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "t", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "t", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_foveal": [[269, 293], ["torch.randint", "torch.randint", "torch.randint", "zip", "torch.cat", "torch.cat", "torch.cat", "__init__.channel_last_interpolate", "torch.zeros", "torch.zeros", "torch.zeros", "round", "enumerate", "emb.append", "__init__.channel_last_interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "range", "round", "max", "min", "max", "min", "int"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.channel_last_interpolate", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.channel_last_interpolate"], ["", "def", "sample_foveal", "(", "H", ",", "images", ")", ":", "\n", "    ", "assert", "'q_r2'", "not", "in", "H", ".", "kls", "\n", "b", ",", "h", ",", "w", ",", "_", "=", "images", ".", "shape", "\n", "n_patches", "=", "torch", ".", "randint", "(", "0", ",", "H", ".", "max_patches", "+", "1", ",", "(", "b", ",", ")", ")", "\n", "centres", "=", "[", "[", "(", "torch", ".", "randint", "(", "h", ",", "(", "1", ",", ")", ")", ",", "torch", ".", "randint", "(", "w", ",", "(", "1", ",", ")", ")", ")", "for", "_", "in", "range", "(", "int", "(", "n_p", ")", ")", "]", "for", "n_p", "in", "n_patches", "]", "\n", "emb", "=", "[", "]", "\n", "for", "down_factor", ",", "size_frac", "in", "zip", "(", "H", ".", "foveal_down_factors", ",", "H", ".", "foveal_size_fracs", ")", ":", "\n", "        ", "blurred_image", "=", "channel_last_interpolate", "(", "\n", "channel_last_interpolate", "(", "images", ",", "scale_factor", "=", "1", "/", "down_factor", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "size", "=", "images", ".", "shape", "[", "1", ":", "-", "1", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "masks", "=", "torch", ".", "zeros", "(", "b", ",", "h", ",", "w", ",", "1", ",", "device", "=", "images", ".", "device", ")", "\n", "width", "=", "round", "(", "w", "*", "size_frac", ")", "\n", "for", "i", ",", "centres_i", "in", "enumerate", "(", "centres", ")", ":", "\n", "            ", "for", "r", ",", "c", "in", "centres_i", ":", "\n", "                ", "patch_dim", "=", "round", "(", "h", "*", "size_frac", ")", "\n", "minus", "=", "width", "//", "2", "\n", "plus", "=", "width", "-", "minus", "\n", "r1", "=", "max", "(", "0", ",", "r", "-", "minus", ")", "\n", "r2", "=", "min", "(", "h", ",", "r", "+", "plus", ")", "\n", "c1", "=", "max", "(", "0", ",", "c", "-", "minus", ")", "\n", "c2", "=", "min", "(", "w", ",", "c", "+", "plus", ")", "\n", "masks", "[", "i", ",", "r1", ":", "r2", ",", "c1", ":", "c2", "]", "=", "1.", "\n", "", "", "emb", ".", "append", "(", "torch", ".", "cat", "(", "[", "blurred_image", "*", "masks", ",", "masks", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "emb", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_part_images": [[294, 336], ["torch.cat", "torch.cat", "torch.cat", "__init__.sample_foveal", "__init__.sample_patches_mask", "__init__.sample_patches_mask", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.tensor().permute().to", "torch.tensor().permute().to", "torch.tensor().permute().to", "hasattr", "multiprocessing.Pool", "numpy.stack", "mask_generator.BatchRandomMask", "mp.Pool.starmap", "torch.tensor().permute", "torch.tensor().permute", "torch.tensor().permute", "int", "torch.tensor", "torch.tensor", "torch.tensor", "c.item", "numpy.random.RandomState", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_foveal", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_patches_mask", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_patches_mask", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.training.mask_generator.BatchRandomMask"], ["", "def", "sample_part_images", "(", "H", ",", "images", ",", "categories", "=", "None", ")", ":", "\n", "    ", "b", ",", "h", ",", "w", ",", "_", "=", "images", ".", "shape", "\n", "\n", "if", "H", ".", "conditioning", "==", "'image'", ":", "\n", "        ", "assert", "H", ".", "dataset", "in", "[", "'shoes'", ",", "'bags'", ",", "'shoes64'", ",", "'bags64'", "]", "\n", "return", "images", "[", "...", ",", ":", "H", ".", "image_size", ",", ":", "]", "\n", "\n", "", "if", "H", ".", "conditioning", "==", "'foveal'", ":", "\n", "        ", "return", "sample_foveal", "(", "H", ",", "images", ")", "\n", "\n", "# sample mask", "\n", "", "if", "H", ".", "conditioning", "==", "'patches'", ":", "\n", "        ", "masks", "=", "sample_patches_mask", "(", "H", ",", "b", ",", "h", ",", "w", ",", "device", "=", "images", ".", "device", ",", "n_patches", "=", "categories", ")", "\n", "", "elif", "H", ".", "conditioning", "==", "'patches-missing'", ":", "\n", "        ", "inv", "=", "sample_patches_mask", "(", "H", ",", "b", ",", "h", ",", "w", ",", "device", "=", "images", ".", "device", ",", "n_patches", "=", "categories", ")", "\n", "masks", "=", "1", "-", "inv", "\n", "", "elif", "H", ".", "conditioning", "==", "'blank'", ":", "\n", "        ", "masks", "=", "torch", ".", "zeros_like", "(", "images", "[", "...", ",", ":", "1", "]", ")", "\n", "", "elif", "H", ".", "conditioning", "==", "'freeform'", ":", "\n", "        ", "hole_range_dict", "=", "{", "0", ":", "[", "0", ",", "0.2", "]", ",", "\n", "1", ":", "[", "0.2", ",", "0.4", "]", ",", "\n", "2", ":", "[", "0.4", ",", "0.6", "]", ",", "\n", "3", ":", "[", "0.6", ",", "0.8", "]", ",", "\n", "4", ":", "[", "0.8", ",", "1.0", "]", ",", "}", "\n", "if", "categories", "is", "None", ":", "\n", "            ", "hole_ranges", "=", "[", "(", "0", ",", "1", ")", ",", "]", "*", "b", "\n", "", "else", ":", "\n", "            ", "hole_ranges", "=", "[", "hole_range_dict", "[", "int", "(", "c", ".", "item", "(", ")", ")", "]", "for", "c", "in", "categories", "]", "\n", "\n", "", "if", "hasattr", "(", "H", ",", "\"mask_sample_workers\"", ")", "and", "H", ".", "mask_sample_workers", "is", "not", "None", ":", "\n", "            ", "p", "=", "mp", ".", "Pool", "(", "H", ".", "mask_sample_workers", ")", "\n", "masks", "=", "np", ".", "stack", "(", "p", ".", "starmap", "(", "RandomMask", ",", "[", "(", "h", ",", "hole_range", ",", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "2", "**", "32", "-", "1", ")", ")", ")", "for", "hole_range", "in", "hole_ranges", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "masks", "=", "BatchRandomMask", "(", "b", ",", "h", ",", "hole_ranges", "=", "hole_ranges", ")", "\n", "\n", "# - old stuff", "\n", "# masks = [torch.tensor(next(gen)).permute(1, 2, 0) for _ in range(b)]", "\n", "# masks = torch.stack(masks, dim=0).to(images.device)", "\n", "", "masks", "=", "torch", ".", "tensor", "(", "masks", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "to", "(", "images", ".", "device", ")", "\n", "\n", "", "emb", "=", "torch", ".", "cat", "(", "[", "images", "*", "masks", ",", "masks", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.set_random_seed": [[340, 345], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", "+", "1", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", "+", "2", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "+", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.get_random_state": [[346, 352], ["random.getstate", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.cuda.get_rng_state_all", "torch.cuda.get_rng_state_all", "torch.cuda.get_rng_state_all", "numpy.random.get_state"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.RNG.get_state"], ["", "def", "get_random_state", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"python\"", ":", "random", ".", "getstate", "(", ")", ",", "\n", "\"torch\"", ":", "torch", ".", "get_rng_state", "(", ")", ",", "\n", "\"cuda\"", ":", "torch", ".", "cuda", ".", "get_rng_state_all", "(", ")", ",", "\n", "\"numpy\"", ":", "np", ".", "random", ".", "get_state", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.set_random_state": [[354, 359], ["random.setstate", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "torch.cuda.set_rng_state_all", "torch.cuda.set_rng_state_all", "torch.cuda.set_rng_state_all", "numpy.random.set_state"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.RNG.set_state"], ["", "def", "set_random_state", "(", "state", ")", ":", "\n", "    ", "random", ".", "setstate", "(", "state", "[", "\"python\"", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "state", "[", "\"torch\"", "]", ")", "\n", "torch", ".", "cuda", ".", "set_rng_state_all", "(", "state", "[", "\"cuda\"", "]", ")", "\n", "np", ".", "random", ".", "set_state", "(", "state", "[", "\"numpy\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.train.MaskDataset.__init__": [[78, 82], ["torch.utils.data.Dataset.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["\n", "", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "stats", ".", "update", "(", "skipped_updates", "=", "skipped_updates", ",", "iter_time", "=", "t1", "-", "t0", ",", "grad_norm", "=", "grad_norm", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.train.MaskDataset.__len__": [[83, 85], ["None"], "methods", ["None"], ["\n", "", "def", "eval_step", "(", "H", ",", "data_input", ",", "target", ",", "ema_vae", ",", "i", "=", "0", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.train.MaskDataset.__getitem__": [[86, 88], ["sample_mask().numpy", "train.sample_mask"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask"], ["        ", "stats", "=", "run_net", "(", "H", ",", "ema_vae", ",", "data_input", ",", "target", ",", "iterate", "=", "np", ".", "inf", ",", "differentiate", "=", "False", ")", "\n", "\n", "", "stats", "=", "get_cpu_stats_over_ranks", "(", "stats", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.train.MaskLoader.__init__": [[97, 104], ["train._infinite_loader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pic.train._infinite_loader"], ["", "else", ":", "\n", "        ", "orig_image", "=", "x", "[", "0", "]", "\n", "", "preprocessed", "=", "preprocess_fn", "(", "x", ")", "[", "0", "]", "\n", "return", "orig_image", ",", "preprocessed", "\n", "\n", "", "def", "loader", "(", "H", ",", "data", ",", "is_train", ",", "epoch", "=", "None", ",", "bs", "=", "None", ")", ":", "\n", "    ", "sampler", "=", "None", "if", "\"NO_MPI\"", "in", "os", ".", "environ", "else", "DistributedSampler", "(", "data", ",", "num_replicas", "=", "H", ".", "mpi_size", ",", "rank", "=", "H", ".", "rank", ")", "\n", "num_workers", "=", "H", ".", "n_workers", "if", "\"NO_MPI\"", "in", "os", ".", "environ", "else", "0", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.train.MaskLoader.get_batch": [[105, 113], ["next", "mask_parts.append", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["if", "is_train", "and", "sampler", "is", "not", "None", ":", "\n", "        ", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "if", "bs", "is", "None", ":", "\n", "        ", "bs", "=", "H", ".", "n_batch", "*", "H", ".", "grad_accumulations", "if", "is_train", "else", "H", ".", "n_batch", "\n", "", "return", "DataLoader", "(", "data", ",", "batch_size", "=", "bs", ",", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "sampler", "=", "sampler", ",", "num_workers", "=", "num_workers", ",", "\n", "shuffle", "=", "(", "sampler", "is", "None", ")", ")", "\n", "\n", "", "def", "train_loop", "(", "H", ",", "data_train", ",", "data_valid", ",", "preprocess_fn", ",", "vae", ",", "ema_vae", ",", "logprint", ",", "\n", "starting_epoch", ",", "iterate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.train.MyDataset.__init__": [[116, 120], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["\n", "viz_batch_original", ",", "viz_batch_processed", "=", "get_sample_for_visualization", "(", "data_valid", ",", "preprocess_fn", ",", "H", ".", "num_images_visualize", ",", "H", ".", "dataset", ")", "\n", "early_evals", "=", "set", "(", "[", "1", "]", "+", "[", "2", "**", "exp", "for", "exp", "in", "range", "(", "3", ",", "14", ")", "]", ")", "\n", "stats", "=", "[", "]", "\n", "iters_since_starting", "=", "0", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.train.MyDataset.__getitem__": [[121, 123], ["train.MyDataset.transform"], "methods", ["None"], ["H", ".", "ema_rate", "=", "torch", ".", "as_tensor", "(", "H", ".", "ema_rate", ")", ".", "cuda", "(", ")", "\n", "for", "epoch", "in", "range", "(", "starting_epoch", ",", "H", ".", "num_epochs", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.train.MyDataset.__len__": [[124, 126], ["len"], "methods", ["None"], ["        ", "for", "epoch_iter", ",", "x", "in", "enumerate", "(", "loader", "(", "H", ",", "data_train", ",", "is_train", "=", "True", ",", "epoch", "=", "epoch", ")", ")", ":", "\n", "            ", "if", "epoch_iter", ">", "0", "and", "H", ".", "rank", "==", "0", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "'iteration'", ":", "iterate", "}", ",", "commit", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.train.log_images": [[38, 61], ["vae_helpers.rng_decorator", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train.sample_mask", "train.apply_mask", "netG", "sample_mask.unsqueeze().expand_as().bool", "torchvision.make_grid().permute().numpy", "torchvision.make_grid().permute().numpy", "torchvision.make_grid().permute().numpy", "viz_batch_processed.clone", "wandb.Image", "wandb.Image", "wandb.Image", "sample_mask.unsqueeze().expand_as", "viz_batch_processed.cpu", "apply_mask.cpu", "inpainted.cpu", "torchvision.make_grid().permute", "torchvision.make_grid().permute", "torchvision.make_grid().permute", "sample_mask.unsqueeze", "torchvision.make_grid", "torchvision.make_grid", "torchvision.make_grid"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask", "home.repos.pwc.inspect_result.plai-group_ipa.ce.train.apply_mask", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone"], ["", "", "else", ":", "\n", "        ", "part_obs", "=", "sample_part_images", "(", "H", ",", "x", ")", "\n", "stats", "=", "vae", ".", "forward", "(", "part_obs", ",", "x", ",", "target", ",", "obj", "=", "H", ".", "kl", ",", "iterate", "=", "iterate", ")", "\n", "if", "differentiate", ":", "\n", "            ", "(", "stats", "[", "'loss'", "]", "/", "H", ".", "grad_accumulations", ")", ".", "backward", "(", ")", "\n", "", "", "return", "stats", "\n", "\n", "\n", "", "def", "enforce_obs", "(", "H", ",", "samples", ",", "part_obs", ",", "orig", "=", "None", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "part_obs", ")", ":", "\n", "        ", "part_obs", "=", "part_obs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "orig", "is", "None", ":", "\n", "        ", "orig", "=", "part_obs", "[", "...", ",", ":", "-", "1", "]", "\n", "", "mask", "=", "part_obs", "[", "...", ",", "-", "1", ":", "]", "\n", "return", "samples", "*", "(", "1", "-", "mask", ")", "+", "orig", "*", "mask", "\n", "\n", "", "def", "training_step", "(", "H", ",", "x", ",", "target", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "iterate", ")", ":", "\n", "    ", "t0", "=", "time", ".", "time", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "x_chunk", ",", "target_chunk", "in", "zip", "(", "torch", ".", "chunk", "(", "x", ",", "chunks", "=", "H", ".", "grad_accumulations", ",", "dim", "=", "0", ")", ",", "\n", "torch", ".", "chunk", "(", "target", ",", "chunks", "=", "H", ".", "grad_accumulations", ",", "dim", "=", "0", ")", ")", ":", "\n", "        ", "stats", "=", "run_net", "(", "H", ",", "vae", ",", "x_chunk", ",", "target_chunk", ",", "iterate", "=", "iterate", ",", "differentiate", "=", "True", ")", "\n", "", "grad_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "vae", ".", "parameters", "(", ")", ",", "H", ".", "grad_clip", ")", ".", "item", "(", ")", "\n", "if", "H", ".", "kl", "==", "'sym'", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.train.sample_mask": [[63, 68], ["x.contiguous", "vae_helpers.sample_part_images", "batch.permute"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_part_images"], ["rate_nans", "=", "0", "\n", "", "else", ":", "\n", "        ", "distortion_nans", "=", "torch", ".", "isnan", "(", "stats", "[", "'distortion'", "]", ")", ".", "sum", "(", ")", "\n", "rate_nans", "=", "torch", ".", "isnan", "(", "stats", "[", "'rate'", "]", ")", ".", "sum", "(", ")", "\n", "", "stats", ".", "update", "(", "\n", "dict", "(", "rate_nans", "=", "0", "if", "rate_nans", "==", "0", "else", "1", ",", "distortion_nans", "=", "0", "if", "distortion_nans", "==", "0", "else", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.train.apply_mask": [[69, 75], ["mask.bool.bool"], "function", ["None"], ["stats", "=", "get_cpu_stats_over_ranks", "(", "stats", ")", "\n", "\n", "skipped_updates", "=", "1", "\n", "# only update if no rank has a nan and if the grad norm is below a specific threshold", "\n", "if", "stats", "[", "'distortion_nans'", "]", "==", "0", "and", "stats", "[", "'rate_nans'", "]", "==", "0", "and", "(", "H", ".", "skip_threshold", "==", "-", "1", "or", "grad_norm", "<", "H", ".", "skip_threshold", ")", ":", "\n", "        ", "optimizer", ".", "step", "(", ")", "\n", "skipped_updates", "=", "0", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.train._infinite_loader": [[90, 94], ["None"], "function", ["None"], ["\n", "\n", "", "def", "get_sample_for_visualization", "(", "data", ",", "preprocess_fn", ",", "num", ",", "dataset", ")", ":", "\n", "    ", "for", "x", "in", "DataLoader", "(", "data", ",", "batch_size", "=", "num", ")", ":", "\n", "        ", "break", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.model._netG.__init__": [[6, 64], ["torch.Module.__init__", "layers.extend", "layers.extend", "layers.extend", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "layers.extend", "layers.extend", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "_netG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ngpu", "=", "opt", ".", "ngpu", "\n", "size", "=", "opt", ".", "img_size", "\n", "\n", "## Encoder ##", "\n", "# input is (nc) x s x s  (s:= opt.img_size)", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "opt", ".", "nc", ",", "opt", ".", "nef", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "size", "//=", "2", "\n", "c_scale", "=", "1", "# scaling in the number of channels", "\n", "# state size: (opt.nef*c_scale) x size x size", "\n", "while", "size", ">", "4", ":", "\n", "            ", "c_scale_next", "=", "c_scale", "*", "2", "if", "size", "<=", "32", "else", "c_scale", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nef", "*", "c_scale", ",", "opt", ".", "nef", "*", "c_scale_next", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nef", "*", "c_scale_next", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "]", ")", "\n", "size", "//=", "2", "\n", "c_scale", "=", "c_scale_next", "\n", "# state size: (opt.nef*c_scale) x size x size", "\n", "", "assert", "size", "==", "4", "\n", "# state size: (opt.nef*c_scale) x 4 x 4", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nef", "*", "c_scale", ",", "opt", ".", "nBottleneck", ",", "4", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nBottleneck", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "]", ")", "\n", "# state size: (opt.nBottleneck) x 1 x 1", "\n", "\n", "## Decoder ##", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nBottleneck", ",", "opt", ".", "ngf", "*", "c_scale", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "ngf", "*", "c_scale", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", "]", ")", "\n", "size", "=", "4", "\n", "# state size: (channels*c_scale) x 4 x 4", "\n", "while", "(", "size", "<", "opt", ".", "img_size", "//", "2", ")", ":", "\n", "            ", "c_scale_next", "=", "c_scale", "//", "2", "if", "c_scale", ">", "1", "else", "c_scale", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "ngf", "*", "c_scale", ",", "opt", ".", "ngf", "*", "c_scale_next", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "ngf", "*", "c_scale_next", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", "]", ")", "\n", "size", "*=", "2", "\n", "c_scale", "=", "c_scale_next", "\n", "# state size: (channels*c_scale) x size x size", "\n", "", "assert", "size", "==", "opt", ".", "img_size", "//", "2", "\n", "assert", "c_scale", "==", "1", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "ngf", ",", "opt", ".", "nc", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", "]", ")", "\n", "# state size: (opt.nc) x opt.img_size x opt.img_size", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.model._netG.forward": [[65, 71], ["isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "model._netG.main", "range"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.model._netlocalD.__init__": [[74, 104], ["torch.Module.__init__", "layers.extend", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "layers.extend", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "_netlocalD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ngpu", "=", "opt", ".", "ngpu", "\n", "size", "=", "opt", ".", "img_size", "\n", "\n", "## Encoder ##", "\n", "# input is (nc) x s x s  (s:= opt.img_size)", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "opt", ".", "nc", ",", "opt", ".", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "size", "//=", "2", "\n", "c_scale", "=", "1", "# scaling in the number of channels", "\n", "# state size: (opt.ndf*c_scale) x size x size", "\n", "while", "size", ">", "4", ":", "\n", "            ", "c_scale_next", "=", "c_scale", "*", "2", "if", "size", "<=", "32", "else", "c_scale", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "ndf", "*", "c_scale", ",", "opt", ".", "ndf", "*", "c_scale_next", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "ndf", "*", "c_scale_next", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "]", ")", "\n", "size", "//=", "2", "\n", "c_scale", "=", "c_scale_next", "\n", "# state size: (opt.ndf*c_scale) x size x size", "\n", "", "assert", "size", "==", "4", "\n", "# state size: (opt.ndf*c_scale) x 4 x 4", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "ndf", "*", "c_scale", ",", "1", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", "]", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.model._netlocalD.forward": [[105, 112], ["model._netlocalD.view", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "model._netlocalD.main", "range"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "\n", "", "return", "output", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.utils.load_image": [[6, 13], ["PIL.Image.open", "img.resize.resize", "img.resize.resize", "int", "int"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize"], ["import", "numpy", "as", "np", "\n", "import", "torch", "\n", "import", "time", "\n", "import", "subprocess", "\n", "import", "torch", ".", "distributed", "as", "dist", "\n", "\n", "\n", "def", "allreduce", "(", "x", ",", "average", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.utils.save_image": [[15, 20], ["data.clone().add().div().mul().clamp().numpy", "Image.fromarray.transpose().astype", "PIL.Image.fromarray", "Image.fromarray.save", "data.clone().add().div().mul().clamp", "Image.fromarray.transpose", "data.clone().add().div().mul", "data.clone().add().div", "data.clone().add", "data.clone"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone"], ["        ", "dist", ".", "all_reduce", "(", "x", ",", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "", "return", "x", "/", "mpi_size", "(", ")", "if", "average", "else", "x", "\n", "\n", "\n", "", "def", "get_cpu_stats_over_ranks", "(", "stat_dict", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.utils.gram_matrix": [[22, 28], ["y.size", "y.view", "y.view.transpose", "y.view.bmm"], "function", ["None"], ["return", "{", "k", ":", "allreduced", "[", "i", "]", ".", "item", "(", ")", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "keys", ")", "}", "\n", "\n", "\n", "", "class", "Hyperparams", "(", "dict", ")", ":", "\n", "    ", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "attr", "]", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ce.utils.normalize_batch": [[30, 45], ["torch.div.data.new", "torch.div.data.new", "torch.div", "torch.autograd.Variable", "torch.div", "torch.div.data.size", "torch.div.data.size", "torch.autograd.Variable"], "function", ["None"], ["            ", "return", "None", "\n", "\n", "", "", "def", "__setattr__", "(", "self", ",", "attr", ",", "value", ")", ":", "\n", "        ", "self", "[", "attr", "]", "=", "value", "\n", "\n", "\n", "", "", "def", "logger", "(", "log_prefix", ")", ":", "\n", "    ", "'Prints the arguments out to stdout, .txt, and .jsonl files'", "\n", "\n", "def", "log", "(", "*", "args", ",", "pprint", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "mpi_rank", "(", ")", "!=", "0", ":", "\n", "            ", "return", "\n", "", "t", "=", "time", ".", "ctime", "(", ")", "\n", "argdict", "=", "{", "'time'", ":", "t", "}", "\n", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "            ", "argdict", "[", "'message'", "]", "=", "' '", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "args", "]", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.__init__": [[14, 24], ["super().__init__", "dataset.Dataset.load_list", "dataset.Dataset.load_list"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.load_list", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.load_list"], ["    ", "def", "__init__", "(", "self", ",", "image_path", ",", "mask_path", ",", "mask_mode", ",", "target_size", ",", "augment", "=", "True", ",", "training", "=", "True", ",", "mask_reverse", "=", "False", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "data", "=", "self", ".", "load_list", "(", "image_path", ")", "\n", "self", ".", "mask_data", "=", "self", ".", "load_list", "(", "mask_path", ")", "\n", "\n", "self", ".", "target_size", "=", "target_size", "\n", "self", ".", "mask_type", "=", "mask_mode", "\n", "self", ".", "mask_reverse", "=", "mask_reverse", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.__len__": [[28, 30], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.__getitem__": [[31, 39], ["dataset.Dataset.load_item", "print", "dataset.Dataset.load_item"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.load_item", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.load_item"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "item", "=", "self", ".", "load_item", "(", "index", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'loading error: '", "+", "self", ".", "data", "[", "index", "]", ")", "\n", "item", "=", "self", ".", "load_item", "(", "0", ")", "\n", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.load_item": [[40, 56], ["imageio.imread", "dataset.Dataset.load_mask", "dataset.Dataset.resize", "dataset.Dataset.resize", "dataset.Dataset.to_tensor", "dataset.Dataset.to_tensor", "numpy.random.binomial", "numpy.random.binomial"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.imread", "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.data_loader.CreateDataset.load_mask", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.to_tensor"], ["", "def", "load_item", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "imread", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "img", "=", "self", ".", "resize", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "resize", "(", "img", ",", "True", ",", "True", ",", "True", ")", "\n", "# load mask", "\n", "", "mask", "=", "self", ".", "load_mask", "(", "img", ",", "index", ")", "\n", "# augment data", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "augment", "and", "np", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ")", ">", "0", ":", "\n", "                ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", "...", "]", "\n", "", "if", "self", ".", "augment", "and", "np", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ")", ">", "0", ":", "\n", "                ", "mask", "=", "mask", "[", ":", ",", ":", ":", "-", "1", ",", "...", "]", "\n", "\n", "", "", "return", "self", ".", "to_tensor", "(", "img", ")", ",", "self", ".", "to_tensor", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.load_mask": [[57, 87], ["random.randint", "imageio.imread", "dataset.Dataset.resize", "dataset.Dataset.resize", "imageio.imread", "dataset.Dataset.resize", "dataset.generate_stroke_mask", "len"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.imread", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.imread", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.generate_stroke_mask"], ["", "def", "load_mask", "(", "self", ",", "img", ",", "index", ")", ":", "\n", "        ", "imgh", ",", "imgw", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "#external mask, random order", "\n", "if", "self", ".", "mask_type", "==", "0", ":", "\n", "            ", "mask_index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "mask_data", ")", "-", "1", ")", "\n", "mask", "=", "imread", "(", "self", ".", "mask_data", "[", "mask_index", "]", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "# threshold due to interpolation", "\n", "mask", "=", "self", ".", "resize", "(", "mask", ",", "False", ")", "\n", "if", "self", ".", "mask_reverse", ":", "\n", "                ", "return", "(", "1", "-", "mask", ")", "*", "255", "\n", "", "else", ":", "\n", "                ", "return", "mask", "*", "255", "\n", "#generate random mask", "\n", "", "", "if", "self", ".", "mask_type", "==", "1", ":", "\n", "            ", "mask", "=", "1", "-", "generate_stroke_mask", "(", "[", "self", ".", "target_size", ",", "self", ".", "target_size", "]", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "mask", "=", "self", ".", "resize", "(", "mask", ",", "False", ")", "\n", "return", "mask", "\n", "\n", "#external mask, fixed order", "\n", "", "if", "self", ".", "mask_type", "==", "2", ":", "\n", "            ", "mask_index", "=", "index", "\n", "mask", "=", "imread", "(", "self", ".", "mask_data", "[", "mask_index", "]", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "# threshold due to interpolation", "\n", "mask", "=", "self", ".", "resize", "(", "mask", ",", "False", ")", "\n", "if", "self", ".", "mask_reverse", ":", "\n", "                ", "return", "(", "1", "-", "mask", ")", "*", "255", "\n", "", "else", ":", "\n", "                ", "return", "mask", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize": [[88, 130], ["numpy.array", "numpy.minimum", "PIL.Image.fromarray().resize", "random.randrange", "random.randrange", "random.randrange", "PIL.Image.fromarray", "random.randrange", "random.randrange", "random.randrange", "random.randrange"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize"], ["", "", "", "def", "resize", "(", "self", ",", "img", ",", "aspect_ratio_kept", "=", "True", ",", "fixed_size", "=", "False", ",", "centerCrop", "=", "False", ")", ":", "\n", "\n", "        ", "if", "aspect_ratio_kept", ":", "\n", "            ", "imgh", ",", "imgw", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "side", "=", "np", ".", "minimum", "(", "imgh", ",", "imgw", ")", "\n", "if", "fixed_size", ":", "\n", "                ", "if", "centerCrop", ":", "\n", "# center crop", "\n", "                    ", "j", "=", "(", "imgh", "-", "side", ")", "//", "2", "\n", "i", "=", "(", "imgw", "-", "side", ")", "//", "2", "\n", "img", "=", "img", "[", "j", ":", "j", "+", "side", ",", "i", ":", "i", "+", "side", ",", "...", "]", "\n", "", "else", ":", "\n", "                    ", "j", "=", "(", "imgh", "-", "side", ")", "\n", "i", "=", "(", "imgw", "-", "side", ")", "\n", "h_start", "=", "0", "\n", "w_start", "=", "0", "\n", "if", "j", "!=", "0", ":", "\n", "                        ", "h_start", "=", "random", ".", "randrange", "(", "0", ",", "j", ")", "\n", "", "if", "i", "!=", "0", ":", "\n", "                        ", "w_start", "=", "random", ".", "randrange", "(", "0", ",", "i", ")", "\n", "", "img", "=", "img", "[", "h_start", ":", "h_start", "+", "side", ",", "w_start", ":", "w_start", "+", "side", ",", "...", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "side", "<=", "self", ".", "target_size", ":", "\n", "                    ", "j", "=", "(", "imgh", "-", "side", ")", "\n", "i", "=", "(", "imgw", "-", "side", ")", "\n", "h_start", "=", "0", "\n", "w_start", "=", "0", "\n", "if", "j", "!=", "0", ":", "\n", "                        ", "h_start", "=", "random", ".", "randrange", "(", "0", ",", "j", ")", "\n", "", "if", "i", "!=", "0", ":", "\n", "                        ", "w_start", "=", "random", ".", "randrange", "(", "0", ",", "i", ")", "\n", "", "img", "=", "img", "[", "h_start", ":", "h_start", "+", "side", ",", "w_start", ":", "w_start", "+", "side", ",", "...", "]", "\n", "", "else", ":", "\n", "                    ", "side", "=", "random", ".", "randrange", "(", "self", ".", "target_size", ",", "side", ")", "\n", "j", "=", "(", "imgh", "-", "side", ")", "\n", "i", "=", "(", "imgw", "-", "side", ")", "\n", "h_start", "=", "random", ".", "randrange", "(", "0", ",", "j", ")", "\n", "w_start", "=", "random", ".", "randrange", "(", "0", ",", "i", ")", "\n", "img", "=", "img", "[", "h_start", ":", "h_start", "+", "side", ",", "w_start", ":", "w_start", "+", "side", ",", "...", "]", "\n", "# img = scipy.misc.imresize(img, [self.target_size, self.target_size])", "\n", "", "", "", "img", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "img", ")", ".", "resize", "(", "size", "=", "(", "self", ".", "target_size", ",", "self", ".", "target_size", ")", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.to_tensor": [[131, 135], ["PIL.Image.fromarray", "torchvision.to_tensor().float", "torchvision.to_tensor"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.to_tensor"], ["", "def", "to_tensor", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img_t", "=", "F", ".", "to_tensor", "(", "img", ")", ".", "float", "(", ")", "\n", "return", "img_t", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.load_list": [[136, 155], ["isinstance", "os.path.isdir", "os.path.isfile", "open", "open.readlines", "path.sort", "file_names.append", "list", "list", "numpy.genfromtxt", "glob.glob", "glob.glob", "open.split"], "methods", ["None"], ["", "def", "load_list", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "isinstance", "(", "path", ",", "str", ")", ":", "\n", "            ", "if", "path", "[", "-", "3", ":", "]", "==", "\"txt\"", ":", "\n", "                ", "line", "=", "open", "(", "path", ",", "\"r\"", ")", "\n", "lines", "=", "line", ".", "readlines", "(", ")", "\n", "file_names", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "                    ", "file_names", ".", "append", "(", "\"../../Dataset/Places2/train/data_256\"", "+", "line", ".", "split", "(", "\" \"", ")", "[", "0", "]", ")", "\n", "", "return", "file_names", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "                ", "path", "=", "list", "(", "glob", ".", "glob", "(", "path", "+", "'/*.jpg'", ")", ")", "+", "list", "(", "glob", ".", "glob", "(", "path", "+", "'/*.png'", ")", ")", "\n", "path", ".", "sort", "(", ")", "\n", "return", "path", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "return", "np", ".", "genfromtxt", "(", "path", ",", "dtype", "=", "np", ".", "str", ",", "encoding", "=", "'utf-8'", ")", "\n", "", "except", ":", "\n", "                    ", "return", "[", "path", "]", "\n", "", "", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.generate_stroke_mask": [[156, 164], ["numpy.zeros", "random.randint", "range", "numpy.minimum", "numpy.concatenate", "dataset.np_free_form_mask"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.np_free_form_mask"], ["", "", "def", "generate_stroke_mask", "(", "im_size", ",", "max_parts", "=", "15", ",", "maxVertex", "=", "25", ",", "maxLength", "=", "100", ",", "maxBrushWidth", "=", "24", ",", "maxAngle", "=", "360", ")", ":", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "(", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "parts", "=", "random", ".", "randint", "(", "1", ",", "max_parts", ")", "\n", "for", "i", "in", "range", "(", "parts", ")", ":", "\n", "        ", "mask", "=", "mask", "+", "np_free_form_mask", "(", "maxVertex", ",", "maxLength", ",", "maxBrushWidth", ",", "maxAngle", ",", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", ")", "\n", "", "mask", "=", "np", ".", "minimum", "(", "mask", ",", "1.0", ")", "\n", "mask", "=", "np", ".", "concatenate", "(", "[", "mask", ",", "mask", ",", "mask", "]", ",", "axis", "=", "2", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.np_free_form_mask": [[165, 187], ["numpy.zeros", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "range", "cv2.circle", "numpy.random.randint", "numpy.random.randint", "numpy.maximum().astype", "numpy.maximum().astype", "cv2.line", "cv2.circle", "numpy.random.randint", "numpy.cos", "numpy.sin", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum"], "function", ["None"], ["", "def", "np_free_form_mask", "(", "maxVertex", ",", "maxLength", ",", "maxBrushWidth", ",", "maxAngle", ",", "h", ",", "w", ")", ":", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "1", ")", ",", "np", ".", "float32", ")", "\n", "numVertex", "=", "np", ".", "random", ".", "randint", "(", "maxVertex", "+", "1", ")", "\n", "startY", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "startX", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "brushWidth", "=", "0", "\n", "for", "i", "in", "range", "(", "numVertex", ")", ":", "\n", "        ", "angle", "=", "np", ".", "random", ".", "randint", "(", "maxAngle", "+", "1", ")", "\n", "angle", "=", "angle", "/", "360.0", "*", "2", "*", "np", ".", "pi", "\n", "if", "i", "%", "2", "==", "0", ":", "\n", "            ", "angle", "=", "2", "*", "np", ".", "pi", "-", "angle", "\n", "", "length", "=", "np", ".", "random", ".", "randint", "(", "maxLength", "+", "1", ")", "\n", "brushWidth", "=", "np", ".", "random", ".", "randint", "(", "10", ",", "maxBrushWidth", "+", "1", ")", "//", "2", "*", "2", "\n", "nextY", "=", "startY", "+", "length", "*", "np", ".", "cos", "(", "angle", ")", "\n", "nextX", "=", "startX", "+", "length", "*", "np", ".", "sin", "(", "angle", ")", "\n", "nextY", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "nextY", ",", "h", "-", "1", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "nextX", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "nextX", ",", "w", "-", "1", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "cv2", ".", "line", "(", "mask", ",", "(", "startY", ",", "startX", ")", ",", "(", "nextY", ",", "nextX", ")", ",", "1", ",", "brushWidth", ")", "\n", "cv2", ".", "circle", "(", "mask", ",", "(", "startY", ",", "startX", ")", ",", "brushWidth", "//", "2", ",", "2", ")", "\n", "startY", ",", "startX", "=", "nextY", ",", "nextX", "\n", "", "cv2", ".", "circle", "(", "mask", ",", "(", "startY", ",", "startX", ")", ",", "brushWidth", "//", "2", ",", "2", ")", "\n", "return", "mask", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.__init__": [[12, 25], ["None"], "methods", ["None"], ["# input is (nc) x s x s  (s:= opt.img_size)", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "opt", ".", "nc", ",", "opt", ".", "nef", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "size", "//=", "2", "\n", "c_scale", "=", "1", "# scaling in the number of channels", "\n", "# state size: (opt.nef*c_scale) x size x size", "\n", "while", "size", ">", "4", ":", "\n", "            ", "c_scale_next", "=", "c_scale", "*", "2", "if", "size", "<=", "32", "else", "c_scale", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nef", "*", "c_scale", ",", "opt", ".", "nef", "*", "c_scale_next", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nef", "*", "c_scale_next", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "]", ")", "\n", "size", "//=", "2", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.initialize_model": [[26, 40], ["modules.RFRNet.RFRNet", "torch.Adam", "torch.Adam", "model.RFRNetModel.G.parameters", "modules.RFRNet.VGG16FeatureExtractor", "load_ckpt", "print", "print"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.utils.io.load_ckpt"], ["c_scale", "=", "c_scale_next", "\n", "# state size: (opt.nef*c_scale) x size x size", "\n", "", "assert", "size", "==", "4", "\n", "# state size: (opt.nef*c_scale) x 4 x 4", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "nef", "*", "c_scale", ",", "opt", ".", "nBottleneck", ",", "4", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "nBottleneck", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "]", ")", "\n", "# state size: (opt.nBottleneck) x 1 x 1", "\n", "\n", "## Decoder ##", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "nBottleneck", ",", "opt", ".", "ngf", "*", "c_scale", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "ngf", "*", "c_scale", ")", ",", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda": [[41, 43], ["model.RFRNetModel.to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to"], ["nn", ".", "ReLU", "(", "True", ")", "\n", "]", ")", "\n", "size", "=", "4", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.to": [[44, 50], ["model.RFRNetModel.G.to", "isinstance", "torch.device", "torch.device", "torch.device", "torch.device", "model.RFRNetModel.lossNet.to"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to"], ["# state size: (channels*c_scale) x 4 x 4", "\n", "while", "(", "size", "<", "opt", ".", "img_size", "//", "2", ")", ":", "\n", "            ", "c_scale_next", "=", "c_scale", "//", "2", "if", "c_scale", ">", "1", "else", "c_scale", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "ngf", "*", "c_scale", ",", "opt", ".", "ngf", "*", "c_scale_next", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "ngf", "*", "c_scale_next", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.train": [[51, 89], ["model.RFRNetModel.G.train", "print", "time.time", "log_images", "range", "torch.Adam", "torch.Adam", "log_images", "os.path.join", "os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "filter", "model.RFRNetModel.__cuda__", "model.RFRNetModel.forward", "model.RFRNetModel.update_parameters", "os.path.dirname", "model.RFRNetModel.G.parameters", "time.time", "print", "wandb.log", "time.time", "model.RFRNetModel.G.state_dict", "model.RFRNetModel.optm_G.state_dict"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.log_images", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.log_images", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.__cuda__", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.update_parameters"], ["]", ")", "\n", "size", "*=", "2", "\n", "c_scale", "=", "c_scale_next", "\n", "# state size: (channels*c_scale) x size x size", "\n", "", "assert", "size", "==", "opt", ".", "img_size", "//", "2", "\n", "assert", "c_scale", "==", "1", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "ConvTranspose2d", "(", "opt", ".", "ngf", ",", "opt", ".", "nc", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", "]", ")", "\n", "# state size: (opt.nc) x opt.img_size x opt.img_size", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "", "return", "output", "\n", "\n", "\n", "", "", "class", "_netlocalD", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "_netlocalD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ngpu", "=", "opt", ".", "ngpu", "\n", "size", "=", "opt", ".", "img_size", "\n", "\n", "## Encoder ##", "\n", "# input is (nc) x s x s  (s:= opt.img_size)", "\n", "layers", "=", "[", "nn", ".", "Conv2d", "(", "opt", ".", "nc", ",", "opt", ".", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "size", "//=", "2", "\n", "c_scale", "=", "1", "# scaling in the number of channels", "\n", "# state size: (opt.ndf*c_scale) x size x size", "\n", "while", "size", ">", "4", ":", "\n", "            ", "c_scale_next", "=", "c_scale", "*", "2", "if", "size", "<=", "32", "else", "c_scale", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "ndf", "*", "c_scale", ",", "opt", ".", "ndf", "*", "c_scale_next", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.test": [[89, 111], ["model.RFRNetModel.G.eval", "model.RFRNetModel.G.parameters", "model.RFRNetModel.__cuda__", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.RFRNetModel.G", "range", "os.path.exists", "os.makedirs", "comp_B.size", "torchvision.utils.make_grid", "torchvision.utils.save_image", "torchvision.utils.make_grid", "torchvision.utils.save_image"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.__cuda__", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.save_image", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.save_image"], ["nn", ".", "Conv2d", "(", "opt", ".", "ndf", "*", "c_scale", ",", "opt", ".", "ndf", "*", "c_scale_next", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "opt", ".", "ndf", "*", "c_scale_next", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "]", ")", "\n", "size", "//=", "2", "\n", "c_scale", "=", "c_scale_next", "\n", "# state size: (opt.ndf*c_scale) x size x size", "\n", "", "assert", "size", "==", "4", "\n", "# state size: (opt.ndf*c_scale) x 4 x 4", "\n", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "opt", ".", "ndf", "*", "c_scale", ",", "1", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", "]", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "\n", "", "return", "output", ".", "view", "(", "-", "1", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.forward": [[112, 120], ["model.RFRNetModel.G", "len"], "methods", ["None"], ["\n", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.update_parameters": [[121, 124], ["model.RFRNetModel.update_G", "model.RFRNetModel.update_D"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.update_G", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.update_D"], []], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.update_G": [[125, 130], ["model.RFRNetModel.optm_G.zero_grad", "model.RFRNetModel.get_g_loss", "model.RFRNetModel.backward", "model.RFRNetModel.optm_G.step"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.get_g_loss", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DifferentiableClamp.backward"], []], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.update_D": [[131, 133], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.get_g_loss": [[134, 158], ["model.RFRNetModel.lossNet", "model.RFRNetModel.lossNet", "model.RFRNetModel.lossNet", "model.RFRNetModel.l1_loss", "model.RFRNetModel.l1_loss", "loss_G.item", "model.RFRNetModel.style_loss", "model.RFRNetModel.style_loss", "model.RFRNetModel.preceptual_loss", "model.RFRNetModel.preceptual_loss", "model.RFRNetModel.detach", "model.RFRNetModel.detach"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.l1_loss", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.l1_loss", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.style_loss", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.style_loss", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.preceptual_loss", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.preceptual_loss"], []], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.l1_loss": [[159, 161], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.style_loss": [[162, 175], ["range", "len", "len", "len", "A_feat.view.view.size", "A_feat.view.view.view", "B_feat.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "A_feat.view.view.size", "A_feat.view.view.size", "B_feat.view.view.size", "B_feat.view.view.size", "A_feat.view.view.transpose", "B_feat.view.view.transpose", "A_feat.view.view.size", "A_feat.view.view.size", "B_feat.view.view.size", "B_feat.view.view.size", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.TV_loss": [[176, 182], ["x.size", "x.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.preceptual_loss": [[183, 191], ["range", "len", "len", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.__cuda__": [[192, 194], ["item.to"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to"], []], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.run.MyDataset.__init__": [[66, 71], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "transform", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.run.MyDataset.__getitem__": [[72, 75], ["run.MyDataset.transform", "sample_mask().squeeze", "run.sample_mask", "run.MyDataset.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", ".", "transform", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "return", "img", ",", "sample_mask", "(", "self", ".", "args", ",", "img", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "# Returns the image and a mask", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.run.MyDataset.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.run.tensor2im": [[22, 30], ["image_tensor[].cpu().float().numpy.astype", "image_tensor.dim", "image_tensor.cpu().float().numpy", "image_tensor[].cpu().float().numpy", "numpy.transpose", "image_tensor.cpu().float", "image_tensor[].cpu().float", "image_tensor.cpu", "image_tensor[].cpu"], "function", ["None"], ["", "def", "tensor2im", "(", "image_tensor", ",", "bytes", "=", "255.0", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "if", "image_tensor", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "image_numpy", "=", "image_tensor", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "", "image_numpy", "=", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "*", "bytes", "\n", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.run.sample_mask": [[32, 39], ["x.repeat.unsqueeze", "x.repeat.repeat", "x.repeat.contiguous", "vae_helpers.sample_part_images", "batch.permute"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_part_images"], ["", "def", "sample_mask", "(", "args", ",", "batch", ")", ":", "\n", "# args shoudld have the following attributes:", "\n", "# conditioning, max_patches, patch_size_frac, and kls (only for foveal conditioning)", "\n", "    ", "x", "=", "sample_part_images", "(", "args", ",", "batch", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "[", "...", ",", "-", "1", "]", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "return", "x", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.run.log_images": [[41, 63], ["vae_helpers.rng_decorator", "torch.no_grad", "model.eval", "run.sample_mask", "range", "wandb.log", "model.train", "model", "inpainted.cpu().numpy", "len", "range", "numpy.concatenate", "to_plot.transpose.transpose", "log_dict.update", "viz_batch_processed[].cpu().numpy", "to_plot.transpose.append", "inpainted.cpu", "numpy.clip", "wandb.Image", "viz_batch_processed[].cpu", "inpaint().squeeze", "run.log_images.inpaint"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.inpaint"], ["", "@", "rng_decorator", "(", "0", ")", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "log_images", "(", "args", ",", "model", ",", "viz_batch_processed", ")", ":", "\n", "    ", "def", "inpaint", "(", "gt_images", ",", "masks", ")", ":", "\n", "        ", "masked_images", "=", "gt_images", "*", "masks", "\n", "recon", ",", "mask", "=", "model", "(", "masked_images", ",", "masks", ",", "rounds", "=", "-", "1", ")", "\n", "inpainted", "=", "recon", "*", "(", "1", "-", "masks", ")", "+", "gt_images", "*", "masks", "\n", "return", "inpainted", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "masks", "=", "sample_mask", "(", "args", ",", "viz_batch_processed", ")", "\n", "log_dict", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "len", "(", "viz_batch_processed", ")", ")", ":", "\n", "        ", "to_plot", "=", "[", "(", "viz_batch_processed", "[", "idx", "]", "*", "masks", "[", "idx", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "viz_batch_processed", "[", "idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "for", "_", "in", "range", "(", "args", ".", "num_samples_visualize", ")", ":", "\n", "            ", "to_plot", ".", "append", "(", "np", ".", "clip", "(", "inpaint", "(", "viz_batch_processed", "[", "idx", "]", ".", "unsqueeze", "(", "0", ")", ",", "masks", "[", "idx", "]", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", ",", "0", ",", "1", ")", ")", "\n", "", "to_plot", "=", "np", ".", "concatenate", "(", "to_plot", ",", "axis", "=", "-", "1", ")", "\n", "to_plot", "=", "to_plot", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "caption", "=", "f\"Sample {idx}\"", "\n", "log_dict", ".", "update", "(", "{", "caption", ":", "wandb", ".", "Image", "(", "to_plot", ",", "caption", "=", "caption", ")", "}", ")", "\n", "", "wandb", ".", "log", "(", "log_dict", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.rfr.run.run": [[80, 131], ["argparse.ArgumentParser", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args", "vae_helpers.baseline_utils.update_args.parse_args", "wandb.init", "model.RFRNetModel", "torchvision.Compose", "run.MyDataset", "run.MyDataset", "viz_batch_processed.to.to", "torchvision.ToTensor", "transforms.Compose.append", "data.cifar10", "next", "model.RFRNetModel.initialize_model", "model.RFRNetModel.cuda", "torch.utils.data.DataLoader", "model.RFRNetModel.test", "model.RFRNetModel.initialize_model", "model.RFRNetModel.cuda", "torch.utils.data.DataLoader", "model.RFRNetModel.train", "torchvision.Resize", "data.ffhq256", "iter", "Dataset", "torch.utils.data.DataLoader", "run.log_images"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.baseline_utils.update_args", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.cifar10", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.initialize_model", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.test", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.initialize_model", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.ffhq256", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.log_images"], ["", "", "def", "run", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "choices", "=", "[", "'cifar10'", ",", "'ffhq256'", "]", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_root'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model_save_path'", ",", "type", "=", "str", ",", "default", "=", "'checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--result_save_path'", ",", "type", "=", "str", ",", "default", "=", "'results'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_size'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_mode'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--num_iters'", ",", "type", "=", "int", ",", "default", "=", "450000", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "\"checkpoint/100000.pth\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--n_threads'", ",", "type", "=", "int", ",", "default", "=", "6", ")", "\n", "parser", ".", "add_argument", "(", "'--finetune'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ")", "\n", "parser", ".", "add_argument", "(", "'--rounds'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "parser", "=", "update_args", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "wandb", ".", "init", "(", "project", "=", "PROJECT_NAME", ",", "entity", "=", "os", ".", "environ", "[", "'WANDB_ENTITY'", "]", ",", "\n", "config", "=", "args", ",", "tags", "=", "args", ".", "tags", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu_id", "\n", "model", "=", "RFRNetModel", "(", ")", "\n", "\n", "transform", "=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "transform", ".", "append", "(", "transforms", ".", "Resize", "(", "256", ")", ")", "\n", "(", "trX", ",", "_", ")", ",", "(", "vaX", ",", "_", ")", ",", "(", "teX", ",", "_", ")", "=", "cifar10", "(", "args", ".", "data_root", ",", "one_hot", "=", "False", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"ffhq256\"", ":", "\n", "        ", "trX", ",", "vaX", ",", "teX", "=", "ffhq256", "(", "args", ".", "data_root", ")", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "transform", ")", "\n", "train_set", "=", "MyDataset", "(", "trX", ",", "transform", ",", "args", ")", "\n", "valid_set", "=", "MyDataset", "(", "vaX", ",", "transform", ",", "args", ")", "\n", "viz_batch_processed", "=", "next", "(", "iter", "(", "DataLoader", "(", "valid_set", ",", "batch_size", "=", "args", ".", "num_images_visualize", ")", ")", ")", "[", "0", "]", "\n", "viz_batch_processed", "=", "viz_batch_processed", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "if", "args", ".", "test", ":", "\n", "        ", "assert", "False", "\n", "model", ".", "initialize_model", "(", "args", ".", "model_path", ",", "False", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "dataloader", "=", "DataLoader", "(", "Dataset", "(", "args", ".", "data_root", ",", "args", ".", "mask_root", ",", "args", ".", "mask_mode", ",", "args", ".", "target_size", ",", "mask_reverse", "=", "True", ",", "training", "=", "False", ")", ")", "\n", "model", ".", "test", "(", "dataloader", ",", "args", ".", "result_save_path", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "initialize_model", "(", "args", ".", "model_path", ",", "True", ",", "lr", "=", "args", ".", "lr", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "#dataloader = DataLoader(Dataset(args.data_root, args.mask_root, args.mask_mode, args.target_size, mask_reverse = True), batch_size = args.batch_size, shuffle = True, num_workers = args.n_threads)", "\n", "dataloader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "n_threads", ")", "\n", "model", ".", "train", "(", "args", ",", "dataloader", ",", "args", ".", "model_save_path", ",", "lambda", "x", ":", "log_images", "(", "args", ",", "x", ",", "viz_batch_processed", ")", ",", "args", ".", "finetune", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.utils.io.get_state_dict_on_cpu": [[5, 11], ["torch.device", "torch.device", "obj.state_dict", "obj.state_dict.keys", "state_dict[].to"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to"], ["def", "get_state_dict_on_cpu", "(", "obj", ")", ":", "\n", "    ", "cpu_device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "state_dict", "=", "obj", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "state_dict", "[", "key", "]", "=", "state_dict", "[", "key", "]", ".", "to", "(", "cpu_device", ")", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.utils.io.save_ckpt": [[13, 21], ["torch.save", "torch.save", "io.get_state_dict_on_cpu", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.utils.io.get_state_dict_on_cpu"], ["", "def", "save_ckpt", "(", "ckpt_name", ",", "models", ",", "optimizers", ",", "n_iter", ")", ":", "\n", "    ", "ckpt_dict", "=", "{", "'n_iter'", ":", "n_iter", "}", "\n", "for", "prefix", ",", "model", "in", "models", ":", "\n", "        ", "ckpt_dict", "[", "prefix", "]", "=", "get_state_dict_on_cpu", "(", "model", ")", "\n", "\n", "", "for", "prefix", ",", "optimizer", "in", "optimizers", ":", "\n", "        ", "ckpt_dict", "[", "prefix", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "ckpt_dict", ",", "ckpt_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.utils.io.load_ckpt": [[23, 32], ["torch.load", "torch.load", "isinstance", "model.load_state_dict", "optimizer.load_state_dict"], "function", ["None"], ["", "def", "load_ckpt", "(", "ckpt_name", ",", "models", ",", "optimizers", "=", "None", ")", ":", "\n", "    ", "ckpt_dict", "=", "torch", ".", "load", "(", "ckpt_name", ")", "\n", "for", "prefix", ",", "model", "in", "models", ":", "\n", "        ", "assert", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt_dict", "[", "prefix", "]", ",", "strict", "=", "False", ")", "\n", "", "if", "optimizers", "is", "not", "None", ":", "\n", "        ", "for", "prefix", ",", "optimizer", "in", "optimizers", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "ckpt_dict", "[", "prefix", "]", ")", "\n", "", "", "return", "ckpt_dict", "[", "'n_iter'", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.partialconv2d.PartialConv2d.__init__": [[15, 38], ["torch.nn.Conv2d.__init__", "kwargs.pop", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "# whether the mask is multi-channel or not", "\n", "        ", "if", "'multi_channel'", "in", "kwargs", ":", "\n", "            ", "self", ".", "multi_channel", "=", "kwargs", "[", "'multi_channel'", "]", "\n", "kwargs", ".", "pop", "(", "'multi_channel'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "multi_channel", "=", "False", "\n", "\n", "", "self", ".", "return_mask", "=", "True", "\n", "\n", "super", "(", "PartialConv2d", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "multi_channel", ":", "\n", "            ", "self", ".", "weight_maskUpdater", "=", "torch", ".", "ones", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "self", ".", "kernel_size", "[", "0", "]", ",", "self", ".", "kernel_size", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight_maskUpdater", "=", "torch", ".", "ones", "(", "1", ",", "1", ",", "self", ".", "kernel_size", "[", "0", "]", ",", "self", ".", "kernel_size", "[", "1", "]", ")", "\n", "\n", "", "self", ".", "slide_winsize", "=", "self", ".", "weight_maskUpdater", ".", "shape", "[", "1", "]", "*", "self", ".", "weight_maskUpdater", ".", "shape", "[", "2", "]", "*", "self", ".", "weight_maskUpdater", ".", "shape", "[", "3", "]", "\n", "\n", "self", ".", "last_size", "=", "(", "None", ",", "None", ")", "\n", "self", ".", "update_mask", "=", "None", "\n", "self", ".", "mask_ratio", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.partialconv2d.PartialConv2d.forward": [[39, 80], ["super().forward", "partialconv2d.PartialConv2d.update_mask.to", "partialconv2d.PartialConv2d.mask_ratio.to", "partialconv2d.PartialConv2d.bias.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.conv2d", "torch.conv2d", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "partialconv2d.PartialConv2d.update_mask.type", "input.type", "partialconv2d.PartialConv2d.mask_ratio.type", "input.type", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "partialconv2d.PartialConv2d.weight_maskUpdater.type", "input.type", "partialconv2d.PartialConv2d.weight_maskUpdater.to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "if", "mask", "is", "not", "None", "or", "self", ".", "last_size", "!=", "(", "input", ".", "data", ".", "shape", "[", "2", "]", ",", "input", ".", "data", ".", "shape", "[", "3", "]", ")", ":", "\n", "            ", "self", ".", "last_size", "=", "(", "input", ".", "data", ".", "shape", "[", "2", "]", ",", "input", ".", "data", ".", "shape", "[", "3", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "self", ".", "weight_maskUpdater", ".", "type", "(", ")", "!=", "input", ".", "type", "(", ")", ":", "\n", "                    ", "self", ".", "weight_maskUpdater", "=", "self", ".", "weight_maskUpdater", ".", "to", "(", "input", ")", "\n", "\n", "", "if", "mask", "is", "None", ":", "\n", "# if mask is not provided, create a mask", "\n", "                    ", "if", "self", ".", "multi_channel", ":", "\n", "                        ", "mask", "=", "torch", ".", "ones", "(", "input", ".", "data", ".", "shape", "[", "0", "]", ",", "input", ".", "data", ".", "shape", "[", "1", "]", ",", "input", ".", "data", ".", "shape", "[", "2", "]", ",", "input", ".", "data", ".", "shape", "[", "3", "]", ")", ".", "to", "(", "input", ")", "\n", "", "else", ":", "\n", "                        ", "mask", "=", "torch", ".", "ones", "(", "1", ",", "1", ",", "input", ".", "data", ".", "shape", "[", "2", "]", ",", "input", ".", "data", ".", "shape", "[", "3", "]", ")", ".", "to", "(", "input", ")", "\n", "\n", "", "", "self", ".", "update_mask", "=", "F", ".", "conv2d", "(", "mask", ",", "self", ".", "weight_maskUpdater", ",", "bias", "=", "None", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "self", ".", "dilation", ",", "groups", "=", "1", ")", "\n", "\n", "self", ".", "mask_ratio", "=", "self", ".", "slide_winsize", "/", "(", "self", ".", "update_mask", "+", "1e-8", ")", "\n", "# self.mask_ratio = torch.max(self.update_mask)/(self.update_mask + 1e-8)", "\n", "self", ".", "update_mask", "=", "torch", ".", "clamp", "(", "self", ".", "update_mask", ",", "0", ",", "1", ")", "\n", "self", ".", "mask_ratio", "=", "torch", ".", "mul", "(", "self", ".", "mask_ratio", ",", "self", ".", "update_mask", ")", "\n", "\n", "", "", "if", "self", ".", "update_mask", ".", "type", "(", ")", "!=", "input", ".", "type", "(", ")", "or", "self", ".", "mask_ratio", ".", "type", "(", ")", "!=", "input", ".", "type", "(", ")", ":", "\n", "            ", "self", ".", "update_mask", ".", "to", "(", "input", ")", "\n", "self", ".", "mask_ratio", ".", "to", "(", "input", ")", "\n", "\n", "", "raw_out", "=", "super", "(", "PartialConv2d", ",", "self", ")", ".", "forward", "(", "torch", ".", "mul", "(", "input", ",", "mask", ")", "if", "mask", "is", "not", "None", "else", "input", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias_view", "=", "self", ".", "bias", ".", "view", "(", "1", ",", "self", ".", "out_channels", ",", "1", ",", "1", ")", "\n", "output", "=", "torch", ".", "mul", "(", "raw_out", "-", "bias_view", ",", "self", ".", "mask_ratio", ")", "+", "bias_view", "\n", "output", "=", "torch", ".", "mul", "(", "output", ",", "self", ".", "update_mask", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "torch", ".", "mul", "(", "raw_out", ",", "self", ".", "mask_ratio", ")", "\n", "\n", "\n", "", "if", "self", ".", "return_mask", ":", "\n", "            ", "return", "output", ",", "self", ".", "update_mask", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet.VGG16FeatureExtractor.__init__": [[9, 20], ["torch.Module.__init__", "torchvision.models.vgg16", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "getattr().parameters", "getattr"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "vgg16", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "enc_1", "=", "nn", ".", "Sequential", "(", "*", "vgg16", ".", "features", "[", ":", "5", "]", ")", "\n", "self", ".", "enc_2", "=", "nn", ".", "Sequential", "(", "*", "vgg16", ".", "features", "[", "5", ":", "10", "]", ")", "\n", "self", ".", "enc_3", "=", "nn", ".", "Sequential", "(", "*", "vgg16", ".", "features", "[", "10", ":", "17", "]", ")", "\n", "\n", "# fix the encoder", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "param", "in", "getattr", "(", "self", ",", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", ")", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet.VGG16FeatureExtractor.forward": [[21, 27], ["range", "getattr", "results.append", "getattr."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "results", "=", "[", "image", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "func", "=", "getattr", "(", "self", ",", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "results", ".", "append", "(", "func", "(", "results", "[", "-", "1", "]", ")", ")", "\n", "", "return", "results", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet.Bottleneck.__init__": [[31, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet.Bottleneck.forward": [[42, 60], ["RFRNet.Bottleneck.conv1", "RFRNet.Bottleneck.bn1", "RFRNet.Bottleneck.relu", "RFRNet.Bottleneck.conv2", "RFRNet.Bottleneck.bn2", "RFRNet.Bottleneck.relu", "RFRNet.Bottleneck.conv3", "RFRNet.Bottleneck.bn3", "RFRNet.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet.RFRModule.__init__": [[62, 104], ["torch.Module.__init__", "range", "range", "modules.Attention.AttentionModule", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "setattr", "setattr", "setattr", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer_size", "=", "6", ",", "in_channel", "=", "64", ")", ":", "\n", "        ", "super", "(", "RFRModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "freeze_enc_bn", "=", "False", "\n", "self", ".", "layer_size", "=", "layer_size", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "name", "=", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", "\n", "out_channel", "=", "in_channel", "*", "2", "\n", "block", "=", "[", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channel", "=", "out_channel", "\n", "setattr", "(", "self", ",", "name", ",", "nn", ".", "Sequential", "(", "*", "block", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "3", ",", "6", ")", ":", "\n", "            ", "name", "=", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", "\n", "block", "=", "[", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "3", ",", "1", ",", "2", ",", "dilation", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "setattr", "(", "self", ",", "name", ",", "nn", ".", "Sequential", "(", "*", "block", ")", ")", "\n", "", "self", ".", "att", "=", "AttentionModule", "(", "512", ")", "\n", "for", "i", "in", "range", "(", "5", ",", "3", ",", "-", "1", ")", ":", "\n", "            ", "name", "=", "'dec_{:d}'", ".", "format", "(", "i", ")", "\n", "block", "=", "[", "nn", ".", "Conv2d", "(", "in_channel", "+", "in_channel", ",", "in_channel", ",", "3", ",", "1", ",", "2", ",", "dilation", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "setattr", "(", "self", ",", "name", ",", "nn", ".", "Sequential", "(", "*", "block", ")", ")", "\n", "\n", "\n", "", "block", "=", "[", "nn", ".", "ConvTranspose2d", "(", "1024", ",", "512", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "self", ".", "dec_3", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n", "block", "=", "[", "nn", ".", "ConvTranspose2d", "(", "768", ",", "256", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "self", ".", "dec_2", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n", "block", "=", "[", "nn", ".", "ConvTranspose2d", "(", "384", ",", "64", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "self", ".", "dec_1", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet.RFRModule.forward": [[105, 127], ["range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr", "getattr", "RFRNet.RFRModule.att"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", ")", ":", "\n", "\n", "        ", "h_dict", "=", "{", "}", "# for the output of enc_N", "\n", "\n", "h_dict", "[", "'h_0'", "]", "=", "input", "\n", "\n", "h_key_prev", "=", "'h_0'", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "layer_size", "+", "1", ")", ":", "\n", "            ", "l_key", "=", "'enc_{:d}'", ".", "format", "(", "i", ")", "\n", "h_key", "=", "'h_{:d}'", ".", "format", "(", "i", ")", "\n", "h_dict", "[", "h_key", "]", "=", "getattr", "(", "self", ",", "l_key", ")", "(", "h_dict", "[", "h_key_prev", "]", ")", "\n", "h_key_prev", "=", "h_key", "\n", "\n", "", "h", "=", "h_dict", "[", "h_key", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "enc_h_key", "=", "'h_{:d}'", ".", "format", "(", "i", ")", "\n", "dec_l_key", "=", "'dec_{:d}'", ".", "format", "(", "i", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h", ",", "h_dict", "[", "enc_h_key", "]", "]", ",", "dim", "=", "1", ")", "\n", "h", "=", "getattr", "(", "self", ",", "dec_l_key", ")", "(", "h", ")", "\n", "if", "i", "==", "3", ":", "\n", "                ", "h", "=", "self", ".", "att", "(", "h", ",", "mask", ")", "\n", "", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet.RFRNet.__init__": [[129, 144], ["torch.Module.__init__", "modules.partialconv2d.PartialConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "modules.partialconv2d.PartialConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "modules.partialconv2d.PartialConv2d", "modules.partialconv2d.PartialConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "RFRNet.RFRModule", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "modules.partialconv2d.PartialConv2d", "RFRNet.Bottleneck", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RFRNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Pconv1", "=", "PartialConv2d", "(", "3", ",", "64", ",", "7", ",", "2", ",", "3", ",", "multi_channel", "=", "True", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "Pconv2", "=", "PartialConv2d", "(", "64", ",", "64", ",", "7", ",", "1", ",", "3", ",", "multi_channel", "=", "True", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn20", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "Pconv21", "=", "PartialConv2d", "(", "64", ",", "64", ",", "7", ",", "1", ",", "3", ",", "multi_channel", "=", "True", ",", "bias", "=", "False", ")", "\n", "self", ".", "Pconv22", "=", "PartialConv2d", "(", "64", ",", "64", ",", "7", ",", "1", ",", "3", ",", "multi_channel", "=", "True", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "RFRModule", "=", "RFRModule", "(", ")", "\n", "self", ".", "Tconv", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "64", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "tail1", "=", "PartialConv2d", "(", "67", ",", "32", ",", "3", ",", "1", ",", "1", ",", "multi_channel", "=", "True", ",", "bias", "=", "False", ")", "\n", "self", ".", "tail2", "=", "Bottleneck", "(", "32", ",", "8", ")", "\n", "self", ".", "out", "=", "nn", ".", "Conv2d", "(", "64", ",", "3", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet.RFRNet.forward": [[145, 189], ["RFRNet.RFRNet.Pconv1", "torch.relu", "torch.relu", "torch.relu", "RFRNet.RFRNet.Pconv2", "torch.relu", "torch.relu", "torch.relu", "RFRNet.RFRNet.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "x3.view.view.view", "RFRNet.RFRNet.Tconv", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "RFRNet.RFRNet.tail1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "RFRNet.RFRNet.tail2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "RFRNet.RFRNet.out", "RFRNet.RFRNet.bn1", "RFRNet.RFRNet.bn20", "RFRNet.RFRNet.view", "m2.view", "RFRNet.RFRNet.Pconv21", "RFRNet.RFRNet.Pconv22", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "RFRNet.RFRNet.RFRModule", "feature_group.append", "mask_group.append", "RFRNet.RFRNet.bn3", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "RFRNet.RFRNet.bn2", "RFRNet.RFRNet.view", "m2.view", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_image", ",", "mask", ",", "rounds", ")", ":", "\n", "        ", "x1", ",", "m1", "=", "self", ".", "Pconv1", "(", "in_image", ",", "mask", ")", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x1", ")", ",", "inplace", "=", "True", ")", "\n", "x1", ",", "m1", "=", "self", ".", "Pconv2", "(", "x1", ",", "m1", ")", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "bn20", "(", "x1", ")", ",", "inplace", "=", "True", ")", "\n", "x2", "=", "x1", "\n", "x2", ",", "m2", "=", "x1", ",", "m1", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "x2", ".", "size", "(", ")", "\n", "feature_group", "=", "[", "x2", ".", "view", "(", "n", ",", "c", ",", "1", ",", "h", ",", "w", ")", "]", "\n", "mask_group", "=", "[", "m2", ".", "view", "(", "n", ",", "c", ",", "1", ",", "h", ",", "w", ")", "]", "\n", "self", ".", "RFRModule", ".", "att", ".", "att", ".", "att_scores_prev", "=", "None", "\n", "self", ".", "RFRModule", ".", "att", ".", "att", ".", "masks_prev", "=", "None", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "6", "or", "(", "rounds", "==", "-", "1", "or", "i", "<", "rounds", ")", ":", "\n", "            ", "if", "torch", ".", "all", "(", "mask_group", "[", "-", "1", "]", "==", "1", ")", "or", "(", "i", ">", "0", "and", "torch", ".", "all", "(", "mask_group", "[", "-", "1", "]", "==", "mask_group", "[", "-", "2", "]", ")", ")", ":", "\n", "# The latest mask is all ones or it is not being updated anymore", "\n", "                ", "break", "\n", "", "x2", ",", "m2", "=", "self", ".", "Pconv21", "(", "x2", ",", "m2", ")", "\n", "x2", ",", "m2", "=", "self", ".", "Pconv22", "(", "x2", ",", "m2", ")", "\n", "x2", "=", "F", ".", "leaky_relu", "(", "self", ".", "bn2", "(", "x2", ")", ",", "inplace", "=", "True", ")", "\n", "x2", "=", "self", ".", "RFRModule", "(", "x2", ",", "m2", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", "\n", "x2", "=", "x2", "*", "m2", "\n", "feature_group", ".", "append", "(", "x2", ".", "view", "(", "n", ",", "c", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "mask_group", ".", "append", "(", "m2", ".", "view", "(", "n", ",", "c", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "i", "+=", "1", "\n", "", "x3", "=", "torch", ".", "cat", "(", "feature_group", ",", "dim", "=", "2", ")", "\n", "m3", "=", "torch", ".", "cat", "(", "mask_group", ",", "dim", "=", "2", ")", "\n", "amp_vec", "=", "m3", ".", "mean", "(", "dim", "=", "2", ")", "\n", "x3", "=", "(", "x3", "*", "m3", ")", ".", "mean", "(", "dim", "=", "2", ")", "/", "(", "amp_vec", "+", "1e-7", ")", "\n", "x3", "=", "x3", ".", "view", "(", "n", ",", "c", ",", "h", ",", "w", ")", "\n", "m3", "=", "m3", "[", ":", ",", ":", ",", "-", "1", ",", ":", ",", ":", "]", "\n", "x4", "=", "self", ".", "Tconv", "(", "x3", ")", "\n", "x4", "=", "F", ".", "leaky_relu", "(", "self", ".", "bn3", "(", "x4", ")", ",", "inplace", "=", "True", ")", "\n", "m4", "=", "F", ".", "interpolate", "(", "m3", ",", "scale_factor", "=", "2", ")", "\n", "x5", "=", "torch", ".", "cat", "(", "[", "in_image", ",", "x4", "]", ",", "dim", "=", "1", ")", "\n", "m5", "=", "torch", ".", "cat", "(", "[", "mask", ",", "m4", "]", ",", "dim", "=", "1", ")", "\n", "x5", ",", "_", "=", "self", ".", "tail1", "(", "x5", ",", "m5", ")", "\n", "x5", "=", "F", ".", "leaky_relu", "(", "x5", ",", "inplace", "=", "True", ")", "\n", "x6", "=", "self", ".", "tail2", "(", "x5", ")", "\n", "x6", "=", "torch", ".", "cat", "(", "[", "x5", ",", "x6", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "out", "(", "x6", ")", "\n", "return", "output", ",", "mask_group", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet.RFRNet.train": [[190, 196], ["super().train", "RFRNet.RFRNet.named_modules", "isinstance", "module.eval"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ",", "finetune", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "if", "finetune", ":", "\n", "            ", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.Attention.KnowledgeConsistentAttention.__init__": [[6, 15], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "patch_size", "=", "3", ",", "propagate_size", "=", "3", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "KnowledgeConsistentAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "propagate_size", "=", "propagate_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "prop_kernels", "=", "None", "\n", "self", ".", "att_scores_prev", "=", "None", "\n", "self", ".", "masks_prev", "=", "None", "\n", "self", ".", "ratio", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.Attention.KnowledgeConsistentAttention.forward": [[16, 49], ["foreground.size", "foreground.clone", "foreground.clone.view", "conv_kernels_all.permute.permute.permute", "range", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.interpolate.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate.size", "foreground.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.softmax", "torch.softmax", "torch.softmax", "att_score.append", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "output_tensor.append", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "foreground.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "Attention.KnowledgeConsistentAttention.prop_kernels.cuda", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.conv2d.size", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda"], ["", "def", "forward", "(", "self", ",", "foreground", ",", "masks", ")", ":", "\n", "        ", "bz", ",", "nc", ",", "h", ",", "w", "=", "foreground", ".", "size", "(", ")", "\n", "if", "masks", ".", "size", "(", "3", ")", "!=", "foreground", ".", "size", "(", "3", ")", ":", "\n", "            ", "masks", "=", "F", ".", "interpolate", "(", "masks", ",", "foreground", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "", "background", "=", "foreground", ".", "clone", "(", ")", "\n", "background", "=", "background", "\n", "conv_kernels_all", "=", "background", ".", "view", "(", "bz", ",", "nc", ",", "w", "*", "h", ",", "1", ",", "1", ")", "\n", "conv_kernels_all", "=", "conv_kernels_all", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", "output_tensor", "=", "[", "]", "\n", "att_score", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bz", ")", ":", "\n", "            ", "feature_map", "=", "foreground", "[", "i", ":", "i", "+", "1", "]", "\n", "conv_kernels", "=", "conv_kernels_all", "[", "i", "]", "+", "0.0000001", "\n", "norm_factor", "=", "torch", ".", "sum", "(", "conv_kernels", "**", "2", ",", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "**", "0.5", "\n", "conv_kernels", "=", "conv_kernels", "/", "norm_factor", "\n", "\n", "conv_result", "=", "F", ".", "conv2d", "(", "feature_map", ",", "conv_kernels", ",", "padding", "=", "self", ".", "patch_size", "//", "2", ")", "\n", "if", "self", ".", "propagate_size", "!=", "1", ":", "\n", "                ", "if", "self", ".", "prop_kernels", "is", "None", ":", "\n", "                    ", "self", ".", "prop_kernels", "=", "torch", ".", "ones", "(", "[", "conv_result", ".", "size", "(", "1", ")", ",", "1", ",", "self", ".", "propagate_size", ",", "self", ".", "propagate_size", "]", ")", "\n", "self", ".", "prop_kernels", ".", "requires_grad", "=", "False", "\n", "self", ".", "prop_kernels", "=", "self", ".", "prop_kernels", ".", "cuda", "(", ")", "\n", "", "conv_result", "=", "F", ".", "avg_pool2d", "(", "conv_result", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "*", "9", "\n", "", "attention_scores", "=", "F", ".", "softmax", "(", "conv_result", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "att_scores_prev", "is", "not", "None", ":", "\n", "                ", "attention_scores", "=", "(", "self", ".", "att_scores_prev", "[", "i", ":", "i", "+", "1", "]", "*", "self", ".", "masks_prev", "[", "i", ":", "i", "+", "1", "]", "+", "attention_scores", "*", "(", "torch", ".", "abs", "(", "self", ".", "ratio", ")", "+", "1e-7", ")", ")", "/", "(", "self", ".", "masks_prev", "[", "i", ":", "i", "+", "1", "]", "+", "(", "torch", ".", "abs", "(", "self", ".", "ratio", ")", "+", "1e-7", ")", ")", "\n", "", "att_score", ".", "append", "(", "attention_scores", ")", "\n", "feature_map", "=", "F", ".", "conv_transpose2d", "(", "attention_scores", ",", "conv_kernels", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "patch_size", "//", "2", ")", "\n", "final_output", "=", "feature_map", "\n", "output_tensor", ".", "append", "(", "final_output", ")", "\n", "", "self", ".", "att_scores_prev", "=", "torch", ".", "cat", "(", "att_score", ",", "dim", "=", "0", ")", ".", "view", "(", "bz", ",", "h", "*", "w", ",", "h", ",", "w", ")", "\n", "self", ".", "masks_prev", "=", "masks", ".", "view", "(", "bz", ",", "1", ",", "h", ",", "w", ")", "\n", "return", "torch", ".", "cat", "(", "output_tensor", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.Attention.AttentionModule.__init__": [[52, 60], ["isinstance", "torch.Module.__init__", "Attention.KnowledgeConsistentAttention", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inchannel", ",", "patch_size_list", "=", "[", "1", "]", ",", "propagate_size_list", "=", "[", "3", "]", ",", "stride_list", "=", "[", "1", "]", ")", ":", "\n", "        ", "assert", "isinstance", "(", "patch_size_list", ",", "list", ")", ",", "\"patch_size should be a list containing scales, or you should use Contextual Attention to initialize your module\"", "\n", "assert", "len", "(", "patch_size_list", ")", "==", "len", "(", "propagate_size_list", ")", "and", "len", "(", "propagate_size_list", ")", "==", "len", "(", "stride_list", ")", ",", "\"the input_lists should have same lengths\"", "\n", "super", "(", "AttentionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "att", "=", "KnowledgeConsistentAttention", "(", "patch_size_list", "[", "0", "]", ",", "propagate_size_list", "[", "0", "]", ",", "stride_list", "[", "0", "]", ")", "\n", "self", ".", "num_of_modules", "=", "len", "(", "patch_size_list", ")", "\n", "self", ".", "combiner", "=", "nn", ".", "Conv2d", "(", "inchannel", "*", "2", ",", "inchannel", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.Attention.AttentionModule.forward": [[61, 66], ["Attention.AttentionModule.att", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Attention.AttentionModule.combiner"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "foreground", ",", "mask", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "att", "(", "foreground", ",", "mask", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "[", "outputs", ",", "foreground", "]", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "self", ".", "combiner", "(", "outputs", ")", "\n", "return", "outputs", "", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet_Smaller_Hole.VGG16FeatureExtractor.__init__": [[9, 20], ["torch.Module.__init__", "torchvision.models.vgg16", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "getattr().parameters", "getattr"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "vgg16", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "enc_1", "=", "nn", ".", "Sequential", "(", "*", "vgg16", ".", "features", "[", ":", "5", "]", ")", "\n", "self", ".", "enc_2", "=", "nn", ".", "Sequential", "(", "*", "vgg16", ".", "features", "[", "5", ":", "10", "]", ")", "\n", "self", ".", "enc_3", "=", "nn", ".", "Sequential", "(", "*", "vgg16", ".", "features", "[", "10", ":", "17", "]", ")", "\n", "\n", "# fix the encoder", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "for", "param", "in", "getattr", "(", "self", ",", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", ")", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet_Smaller_Hole.VGG16FeatureExtractor.forward": [[21, 27], ["range", "getattr", "results.append", "getattr."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "results", "=", "[", "image", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "func", "=", "getattr", "(", "self", ",", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "results", ".", "append", "(", "func", "(", "results", "[", "-", "1", "]", ")", ")", "\n", "", "return", "results", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet_Smaller_Hole.Bottleneck.__init__": [[31, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet_Smaller_Hole.Bottleneck.forward": [[42, 60], ["RFRNet_Smaller_Hole.Bottleneck.conv1", "RFRNet_Smaller_Hole.Bottleneck.bn1", "RFRNet_Smaller_Hole.Bottleneck.relu", "RFRNet_Smaller_Hole.Bottleneck.conv2", "RFRNet_Smaller_Hole.Bottleneck.bn2", "RFRNet_Smaller_Hole.Bottleneck.relu", "RFRNet_Smaller_Hole.Bottleneck.conv3", "RFRNet_Smaller_Hole.Bottleneck.bn3", "RFRNet_Smaller_Hole.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet_Smaller_Hole.RFRModule.__init__": [[62, 104], ["torch.Module.__init__", "range", "range", "modules.Attention.AttentionModule", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "setattr", "setattr", "setattr", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer_size", "=", "6", ",", "in_channel", "=", "64", ")", ":", "\n", "        ", "super", "(", "RFRModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "freeze_enc_bn", "=", "False", "\n", "self", ".", "layer_size", "=", "layer_size", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "name", "=", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", "\n", "out_channel", "=", "in_channel", "*", "2", "\n", "block", "=", "[", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channel", "=", "out_channel", "\n", "setattr", "(", "self", ",", "name", ",", "nn", ".", "Sequential", "(", "*", "block", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "3", ",", "6", ")", ":", "\n", "            ", "name", "=", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", "\n", "block", "=", "[", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "3", ",", "1", ",", "2", ",", "dilation", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "setattr", "(", "self", ",", "name", ",", "nn", ".", "Sequential", "(", "*", "block", ")", ")", "\n", "", "self", ".", "att", "=", "AttentionModule", "(", "512", ")", "\n", "for", "i", "in", "range", "(", "5", ",", "3", ",", "-", "1", ")", ":", "\n", "            ", "name", "=", "'dec_{:d}'", ".", "format", "(", "i", ")", "\n", "block", "=", "[", "nn", ".", "Conv2d", "(", "in_channel", "+", "in_channel", ",", "in_channel", ",", "3", ",", "1", ",", "2", ",", "dilation", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "setattr", "(", "self", ",", "name", ",", "nn", ".", "Sequential", "(", "*", "block", ")", ")", "\n", "\n", "\n", "", "block", "=", "[", "nn", ".", "ConvTranspose2d", "(", "1024", ",", "512", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "self", ".", "dec_3", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n", "block", "=", "[", "nn", ".", "ConvTranspose2d", "(", "768", ",", "256", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "self", ".", "dec_2", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n", "block", "=", "[", "nn", ".", "ConvTranspose2d", "(", "384", ",", "64", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "self", ".", "dec_1", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet_Smaller_Hole.RFRModule.forward": [[105, 127], ["range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr", "getattr", "RFRNet_Smaller_Hole.RFRModule.att"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", ")", ":", "\n", "\n", "        ", "h_dict", "=", "{", "}", "# for the output of enc_N", "\n", "\n", "h_dict", "[", "'h_0'", "]", "=", "input", "\n", "\n", "h_key_prev", "=", "'h_0'", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "layer_size", "+", "1", ")", ":", "\n", "            ", "l_key", "=", "'enc_{:d}'", ".", "format", "(", "i", ")", "\n", "h_key", "=", "'h_{:d}'", ".", "format", "(", "i", ")", "\n", "h_dict", "[", "h_key", "]", "=", "getattr", "(", "self", ",", "l_key", ")", "(", "h_dict", "[", "h_key_prev", "]", ")", "\n", "h_key_prev", "=", "h_key", "\n", "\n", "", "h", "=", "h_dict", "[", "h_key", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "enc_h_key", "=", "'h_{:d}'", ".", "format", "(", "i", ")", "\n", "dec_l_key", "=", "'dec_{:d}'", ".", "format", "(", "i", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "h", ",", "h_dict", "[", "enc_h_key", "]", "]", ",", "dim", "=", "1", ")", "\n", "h", "=", "getattr", "(", "self", ",", "dec_l_key", ")", "(", "h", ")", "\n", "if", "i", "==", "3", ":", "\n", "                ", "h", "=", "self", ".", "att", "(", "h", ",", "mask", ")", "\n", "", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet_Smaller_Hole.RFRNet.__init__": [[129, 144], ["torch.Module.__init__", "modules.partialconv2d.PartialConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "modules.partialconv2d.PartialConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "modules.partialconv2d.PartialConv2d", "modules.partialconv2d.PartialConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "RFRNet_Smaller_Hole.RFRModule", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "modules.partialconv2d.PartialConv2d", "RFRNet_Smaller_Hole.Bottleneck", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "RFRNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Pconv1", "=", "PartialConv2d", "(", "3", ",", "64", ",", "7", ",", "2", ",", "3", ",", "multi_channel", "=", "True", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "Pconv2", "=", "PartialConv2d", "(", "64", ",", "64", ",", "5", ",", "1", ",", "2", ",", "multi_channel", "=", "True", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn20", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "Pconv21", "=", "PartialConv2d", "(", "64", ",", "64", ",", "5", ",", "1", ",", "2", ",", "multi_channel", "=", "True", ",", "bias", "=", "False", ")", "\n", "self", ".", "Pconv22", "=", "PartialConv2d", "(", "64", ",", "64", ",", "5", ",", "1", ",", "2", ",", "multi_channel", "=", "True", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "RFRModule", "=", "RFRModule", "(", ")", "\n", "self", ".", "Tconv", "=", "nn", ".", "ConvTranspose2d", "(", "64", ",", "64", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "tail1", "=", "PartialConv2d", "(", "67", ",", "32", ",", "3", ",", "1", ",", "1", ",", "multi_channel", "=", "True", ",", "bias", "=", "False", ")", "\n", "self", ".", "tail2", "=", "Bottleneck", "(", "32", ",", "8", ")", "\n", "self", ".", "out", "=", "nn", ".", "Conv2d", "(", "64", ",", "3", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet_Smaller_Hole.RFRNet.forward": [[145, 183], ["RFRNet_Smaller_Hole.RFRNet.Pconv1", "torch.relu", "torch.relu", "torch.relu", "RFRNet_Smaller_Hole.RFRNet.Pconv2", "torch.relu", "torch.relu", "torch.relu", "RFRNet_Smaller_Hole.RFRNet.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "x3.view.view.view", "RFRNet_Smaller_Hole.RFRNet.Tconv", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "RFRNet_Smaller_Hole.RFRNet.tail1", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "RFRNet_Smaller_Hole.RFRNet.tail2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "RFRNet_Smaller_Hole.RFRNet.out", "RFRNet_Smaller_Hole.RFRNet.bn1", "RFRNet_Smaller_Hole.RFRNet.bn20", "RFRNet_Smaller_Hole.RFRNet.view", "m2.view", "RFRNet_Smaller_Hole.RFRNet.Pconv21", "RFRNet_Smaller_Hole.RFRNet.Pconv22", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "RFRNet_Smaller_Hole.RFRNet.RFRModule", "feature_group.append", "mask_group.append", "RFRNet_Smaller_Hole.RFRNet.bn3", "RFRNet_Smaller_Hole.RFRNet.bn2", "RFRNet_Smaller_Hole.RFRNet.view", "m2.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_image", ",", "mask", ")", ":", "\n", "        ", "x1", ",", "m1", "=", "self", ".", "Pconv1", "(", "in_image", ",", "mask", ")", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x1", ")", ",", "inplace", "=", "True", ")", "\n", "x1", ",", "m1", "=", "self", ".", "Pconv2", "(", "x1", ",", "m1", ")", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "bn20", "(", "x1", ")", ",", "inplace", "=", "True", ")", "\n", "x2", "=", "x1", "\n", "x2", ",", "m2", "=", "x1", ",", "m1", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "x2", ".", "size", "(", ")", "\n", "feature_group", "=", "[", "x2", ".", "view", "(", "n", ",", "c", ",", "1", ",", "h", ",", "w", ")", "]", "\n", "mask_group", "=", "[", "m2", ".", "view", "(", "n", ",", "c", ",", "1", ",", "h", ",", "w", ")", "]", "\n", "self", ".", "RFRModule", ".", "att", ".", "att", ".", "att_scores_prev", "=", "None", "\n", "self", ".", "RFRModule", ".", "att", ".", "att", ".", "masks_prev", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "x2", ",", "m2", "=", "self", ".", "Pconv21", "(", "x2", ",", "m2", ")", "\n", "x2", ",", "m2", "=", "self", ".", "Pconv22", "(", "x2", ",", "m2", ")", "\n", "x2", "=", "F", ".", "leaky_relu", "(", "self", ".", "bn2", "(", "x2", ")", ",", "inplace", "=", "True", ")", "\n", "x2", "=", "self", ".", "RFRModule", "(", "x2", ",", "m2", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", "\n", "x2", "=", "x2", "*", "m2", "\n", "feature_group", ".", "append", "(", "x2", ".", "view", "(", "n", ",", "c", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "mask_group", ".", "append", "(", "m2", ".", "view", "(", "n", ",", "c", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "", "x3", "=", "torch", ".", "cat", "(", "feature_group", ",", "dim", "=", "2", ")", "\n", "m3", "=", "torch", ".", "cat", "(", "mask_group", ",", "dim", "=", "2", ")", "\n", "amp_vec", "=", "m3", ".", "mean", "(", "dim", "=", "2", ")", "\n", "x3", "=", "(", "x3", "*", "m3", ")", ".", "mean", "(", "dim", "=", "2", ")", "/", "(", "amp_vec", "+", "1e-7", ")", "\n", "x3", "=", "x3", ".", "view", "(", "n", ",", "c", ",", "h", ",", "w", ")", "\n", "m3", "=", "m3", "[", ":", ",", ":", ",", "-", "1", ",", ":", ",", ":", "]", "\n", "x4", "=", "self", ".", "Tconv", "(", "x3", ")", "\n", "x4", "=", "F", ".", "leaky_relu", "(", "self", ".", "bn3", "(", "x4", ")", ",", "inplace", "=", "True", ")", "\n", "m4", "=", "F", ".", "interpolate", "(", "m3", ",", "scale_factor", "=", "2", ")", "\n", "x5", "=", "torch", ".", "cat", "(", "[", "in_image", ",", "x4", "]", ",", "dim", "=", "1", ")", "\n", "m5", "=", "torch", ".", "cat", "(", "[", "mask", ",", "m4", "]", ",", "dim", "=", "1", ")", "\n", "x5", ",", "_", "=", "self", ".", "tail1", "(", "x5", ",", "m5", ")", "\n", "x5", "=", "F", ".", "leaky_relu", "(", "x5", ",", "inplace", "=", "True", ")", "\n", "x6", "=", "self", ".", "tail2", "(", "x5", ")", "\n", "x6", "=", "torch", ".", "cat", "(", "[", "x5", ",", "x6", "]", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "out", "(", "x6", ")", "\n", "return", "output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.RFRNet_Smaller_Hole.RFRNet.train": [[184, 190], ["super().train", "RFRNet_Smaller_Hole.RFRNet.named_modules", "isinstance", "module.eval"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ",", "finetune", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "if", "finetune", ":", "\n", "            ", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.aggregators.mean_pool": [[17, 19], ["torch.mean"], "function", ["None"], ["def", "mean_pool", "(", "items", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "items", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.aggregators.max_pool": [[21, 23], ["torch.max"], "function", ["None"], ["", "def", "max_pool", "(", "items", ")", ":", "\n", "    ", "return", "torch", ".", "max", "(", "items", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.aggregators.sum_pool": [[25, 27], ["torch.sum"], "function", ["None"], ["", "def", "sum_pool", "(", "items", ")", ":", "\n", "    ", "return", "torch", ".", "sum", "(", "items", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.aggregators.logsumexp_pool": [[29, 31], ["torch.logsumexp"], "function", ["None"], ["", "def", "logsumexp_pool", "(", "items", ")", ":", "\n", "    ", "return", "torch", ".", "logsumexp", "(", "items", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.aggregators.get_agg_fn": [[33, 39], ["None"], "function", ["None"], ["", "def", "get_agg_fn", "(", "name", ")", ":", "\n", "    ", "AGG_FN_DICT", "=", "{", "\"mean\"", ":", "mean_pool", ",", "\n", "\"max\"", ":", "max_pool", ",", "\n", "\"sum\"", ":", "sum_pool", ",", "\n", "\"logsumexp\"", ":", "logsumexp_pool", "}", "\n", "return", "AGG_FN_DICT", "[", "name", "]", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.BaseAttender.__init__": [[126, 137], ["abc.ABC.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "kq_size", ",", "value_size", ",", "out_size", ",", "is_normalize", "=", "True", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kq_size", "=", "kq_size", "\n", "self", ".", "value_size", "=", "value_size", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "is_normalize", "=", "is_normalize", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "if", "dropout", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "is_resize", "=", "self", ".", "value_size", "!=", "self", ".", "out_size", "\n", "\n", "if", "self", ".", "is_resize", ":", "\n", "            ", "self", ".", "resizer", "=", "nn", ".", "Linear", "(", "self", ".", "value_size", ",", "self", ".", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.BaseAttender.forward": [[138, 166], ["attention.BaseAttender.score", "attention.BaseAttender.logits_to_attn", "attention.BaseAttender.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "attention.BaseAttender.resizer"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.DistanceAttender.score", "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.BaseAttender.logits_to_attn"], ["", "", "def", "forward", "(", "self", ",", "keys", ",", "queries", ",", "values", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Compute the attention between given key and queries.\n\n        Parameters\n        ----------\n        keys : torch.Tensor, size=[batch_size, n_keys, kq_size]\n        queries : torch.Tensor, size=[batch_size, n_queries, kq_size]\n        values : torch.Tensor, size=[batch_size, n_keys, value_size]\n\n        Return\n        ------\n        context : torch.Tensor, size=[batch_size, n_queries, out_size]\n        \"\"\"", "\n", "logits", "=", "self", ".", "score", "(", "keys", ",", "queries", ",", "**", "kwargs", ")", "\n", "\n", "attn", "=", "self", ".", "logits_to_attn", "(", "logits", ")", "\n", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "\n", "# attn : size=[batch_size, n_queries, n_keys]", "\n", "# values : size=[batch_size, n_keys, value_size]", "\n", "context", "=", "torch", ".", "bmm", "(", "attn", ",", "values", ")", "\n", "\n", "if", "self", ".", "is_resize", ":", "\n", "            ", "context", "=", "self", ".", "resizer", "(", "context", ")", "\n", "\n", "", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.BaseAttender.logits_to_attn": [[167, 174], ["logits.softmax"], "methods", ["None"], ["", "def", "logits_to_attn", "(", "self", ",", "logits", ")", ":", "\n", "        ", "\"\"\"Convert logits to attention.\"\"\"", "\n", "if", "self", ".", "is_normalize", ":", "\n", "            ", "attn", "=", "logits", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "logits", "\n", "", "return", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.BaseAttender.score": [[175, 179], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "score", "(", "keys", ",", "queries", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Score function which returns the logits between keys and queries.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.DotAttender.__init__": [[209, 212], ["attention.BaseAttender.__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "is_scale", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "is_scale", "=", "is_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.DotAttender.score": [[213, 230], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "queries.size", "len", "len", "math.sqrt"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "keys", ",", "queries", ")", ":", "\n", "# b: batch_size, q: n_queries, k: n_keys, d: kq_size", "\n", "# e.g. if keys have 4 dimension it means that different queries will", "\n", "# be associated with different keys", "\n", "        ", "keys_shape", "=", "\"bqkd\"", "if", "len", "(", "keys", ".", "shape", ")", "==", "4", "else", "\"bkd\"", "\n", "queries_shape", "=", "\"bqkd\"", "if", "len", "(", "queries", ".", "shape", ")", "==", "4", "else", "\"bqd\"", "\n", "\n", "# [batch_size, n_queries, kq_size]", "\n", "logits", "=", "torch", ".", "einsum", "(", "\n", "\"{},{}->bqk\"", ".", "format", "(", "keys_shape", ",", "queries_shape", ")", ",", "keys", ",", "queries", "\n", ")", "\n", "\n", "if", "self", ".", "is_scale", ":", "\n", "            ", "kq_size", "=", "queries", ".", "size", "(", "-", "1", ")", "\n", "logits", "=", "logits", "/", "math", ".", "sqrt", "(", "kq_size", ")", "\n", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiplicativeAttender.__init__": [[257, 262], ["attention.BaseAttender.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "attention.DotAttender"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "kq_size", ",", "self", ".", "kq_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "dot", "=", "DotAttender", "(", "*", "args", ",", "is_scale", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiplicativeAttender.score": [[263, 267], ["attention.MultiplicativeAttender.linear", "attention.MultiplicativeAttender.dot.score"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.DistanceAttender.score"], ["", "def", "score", "(", "self", ",", "keys", ",", "queries", ")", ":", "\n", "        ", "transformed_queries", "=", "self", ".", "linear", "(", "queries", ")", "\n", "logits", "=", "self", ".", "dot", ".", "score", "(", "keys", ",", "transformed_queries", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.AdditiveAttender.__init__": [[294, 299], ["attention.BaseAttender.__init__", "utils._mlp"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.modules.utils._mlp"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "mlp", "=", "_mlp", "(", "\n", "[", "self", ".", "kq_size", "*", "2", "]", "+", "[", "self", ".", "kq_size", "]", "+", "[", "1", "]", ",", "activation", "=", "\"tanh\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.AdditiveAttender.score": [[301, 310], ["keys.unsqueeze().expand.unsqueeze().expand.size", "keys.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "queries.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "attention.AdditiveAttender.mlp().squeeze", "keys.unsqueeze().expand.unsqueeze().expand.unsqueeze", "queries.unsqueeze().expand.unsqueeze().expand.unsqueeze", "attention.AdditiveAttender.mlp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "keys", ",", "queries", ")", ":", "\n", "        ", "batch_size", ",", "n_queries", ",", "kq_size", "=", "queries", ".", "shape", "\n", "n_keys", "=", "keys", ".", "size", "(", "1", ")", "\n", "\n", "keys", "=", "keys", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "batch_size", ",", "n_queries", ",", "n_keys", ",", "kq_size", ")", "\n", "queries", "=", "queries", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "batch_size", ",", "n_queries", ",", "n_keys", ",", "kq_size", ")", "\n", "\n", "logits", "=", "self", ".", "mlp", "(", "torch", ".", "cat", "(", "(", "keys", ",", "queries", ")", ",", "dim", "=", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.CosineAttender.__init__": [[317, 320], ["attention.BaseAttender.__init__", "torch.nn.modules.distance.CosineSimilarity", "torch.nn.modules.distance.CosineSimilarity", "torch.nn.modules.distance.CosineSimilarity"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "similarity", "=", "CosineSimilarity", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.CosineAttender.score": [[321, 330], ["queries.view.view.size", "keys.view.view.size", "keys.view.view.view", "queries.view.view.view", "attention.CosineAttender.similarity"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "keys", ",", "queries", ")", ":", "\n", "        ", "batch_size", ",", "n_queries", ",", "kq_size", "=", "queries", ".", "size", "(", ")", "\n", "n_keys", "=", "keys", ".", "size", "(", "1", ")", "\n", "\n", "keys", "=", "keys", ".", "view", "(", "batch_size", ",", "kq_size", ",", "1", ",", "n_keys", ")", "\n", "queries", "=", "queries", ".", "view", "(", "batch_size", ",", "kq_size", ",", "n_queries", ",", "1", ")", "\n", "logits", "=", "self", ".", "similarity", "(", "keys", ",", "queries", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.DistanceAttender.__init__": [[358, 364], ["attention.BaseAttender.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "p", "=", "1", ",", "is_weight", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "is_weight", "=", "is_weight", "\n", "if", "self", ".", "is_weight", ":", "\n", "            ", "self", ".", "weighter", "=", "nn", ".", "Linear", "(", "self", ".", "kq_size", ",", "self", ".", "kq_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.DistanceAttender.score": [[365, 378], ["queries.view.view.size", "keys.view.view.size", "keys.view.view.view", "queries.view.view.view", "attention.DistanceAttender.weighter", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "", "def", "score", "(", "self", ",", "keys", ",", "queries", ")", ":", "\n", "        ", "batch_size", ",", "n_queries", ",", "kq_size", "=", "queries", ".", "size", "(", ")", "\n", "n_keys", "=", "keys", ".", "size", "(", "1", ")", "\n", "\n", "keys", "=", "keys", ".", "view", "(", "batch_size", ",", "1", ",", "n_keys", ",", "kq_size", ")", "\n", "queries", "=", "queries", ".", "view", "(", "batch_size", ",", "n_queries", ",", "1", ",", "kq_size", ")", "\n", "diff", "=", "keys", "-", "queries", "\n", "if", "self", ".", "is_weight", ":", "\n", "            ", "diff", "=", "self", ".", "weighter", "(", "diff", ")", "\n", "\n", "", "logits", "=", "-", "torch", ".", "norm", "(", "diff", ",", "p", "=", "self", ".", "p", ",", "dim", "=", "-", "1", ")", "**", "2", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiheadAttender.__init__": [[414, 450], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "attention.DotAttender", "attention.MultiheadAttender.reset_parameters", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiheadAttender.reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "kq_size", ",", "\n", "value_size", ",", "\n", "out_size", ",", "\n", "n_heads", "=", "8", ",", "\n", "is_post_process", "=", "True", ",", "\n", "dropout", "=", "0", ",", "\n", "is_relative_pos", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_relative_pos", "=", "is_relative_pos", "\n", "# only 3 transforms for scalability but actually as if using n_heads * 3 layers", "\n", "self", ".", "key_transform", "=", "nn", ".", "Linear", "(", "kq_size", ",", "kq_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "query_transform", "=", "nn", ".", "Linear", "(", "\n", "kq_size", ",", "kq_size", ",", "bias", "=", "not", "self", ".", "is_relative_pos", "\n", ")", "\n", "self", ".", "value_transform", "=", "nn", ".", "Linear", "(", "value_size", ",", "value_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "dot", "=", "DotAttender", "(", "\n", "kq_size", ",", "value_size", ",", "out_size", ",", "is_scale", "=", "True", ",", "dropout", "=", "dropout", "\n", ")", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "kq_head_size", "=", "kq_size", "//", "self", ".", "n_heads", "\n", "self", ".", "value_head_size", "=", "kq_size", "//", "self", ".", "n_heads", "\n", "self", ".", "kq_size", "=", "kq_size", "\n", "self", ".", "value_size", "=", "value_size", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "post_processor", "=", "(", "\n", "nn", ".", "Linear", "(", "value_size", ",", "out_size", ")", "\n", "if", "is_post_process", "or", "value_size", "!=", "out_size", "\n", "else", "None", "\n", ")", "\n", "\n", "assert", "kq_size", "%", "n_heads", "==", "0", ",", "\"{} % {} != 0\"", ".", "format", "(", "kq_size", ",", "n_heads", ")", "\n", "assert", "value_size", "%", "n_heads", "==", "0", ",", "\"{} % {} != 0\"", ".", "format", "(", "value_size", ",", "n_heads", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiheadAttender.reset_parameters": [[451, 459], ["math.sqrt", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "math.sqrt", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# change initialization because real output is not kqv_size but head_size", "\n", "# just coded so for convenience and scalability", "\n", "        ", "std", "=", "math", ".", "sqrt", "(", "2.0", "/", "(", "self", ".", "kq_size", "+", "self", ".", "kq_head_size", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "key_transform", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "query_transform", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "2.0", "/", "(", "self", ".", "value_size", "+", "self", ".", "value_head_size", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "value_transform", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiheadAttender.forward": [[460, 509], ["attention.MultiheadAttender.key_transform", "attention.MultiheadAttender.query_transform", "attention.MultiheadAttender.value_transform", "attention.MultiheadAttender._make_multiheaded", "attention.MultiheadAttender._make_multiheaded", "attention.MultiheadAttender.dot", "attention.MultiheadAttender._concatenate_multiheads", "attention.MultiheadAttender.size", "attention.MultiheadAttender._make_multiheaded", "attention.MultiheadAttender.view", "attention.MultiheadAttender._make_multiheaded", "attention.MultiheadAttender.post_processor", "attention.MultiheadAttender.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiheadAttender._make_multiheaded", "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiheadAttender._make_multiheaded", "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiheadAttender._concatenate_multiheads", "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiheadAttender._make_multiheaded", "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiheadAttender._make_multiheaded"], ["", "def", "forward", "(", "self", ",", "keys", ",", "queries", ",", "values", ",", "rel_pos_enc", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Compute the attention between given key and queries.\n\n        Parameters\n        ----------\n        keys: torch.Tensor, size=[batch_size, n_keys, kq_size]\n        queries: torch.Tensor, size=[batch_size, n_queries, kq_size]\n        values: torch.Tensor, size=[batch_size, n_keys, value_size]\n        rel_pos_enc: torch.Tensor, size=[batch_size, n_queries, n_keys, kq_size]\n            Positional encoding with the differences between every key and query.\n\n        Return\n        ------\n        context : torch.Tensor, size=[batch_size, n_queries, out_size]\n        \"\"\"", "\n", "keys", "=", "self", ".", "key_transform", "(", "keys", ")", "\n", "queries", "=", "self", ".", "query_transform", "(", "queries", ")", "\n", "values", "=", "self", ".", "value_transform", "(", "values", ")", "\n", "\n", "# Make multihead. Size = [batch_size * n_heads, {n_keys, n_queries}, head_size]", "\n", "queries", "=", "self", ".", "_make_multiheaded", "(", "queries", ",", "self", ".", "kq_head_size", ")", "\n", "values", "=", "self", ".", "_make_multiheaded", "(", "values", ",", "self", ".", "value_head_size", ")", "\n", "\n", "# keys have to add relative position before splitting head", "\n", "if", "self", ".", "is_relative_pos", ":", "\n", "# when relative position, every query has different associated key", "\n", "            ", "batch_size", ",", "n_keys", ",", "kq_size", "=", "keys", ".", "shape", "\n", "n_queries", "=", "queries", ".", "size", "(", "1", ")", "\n", "keys", "=", "(", "keys", ".", "unsqueeze", "(", "1", ")", "+", "rel_pos_enc", ")", ".", "view", "(", "\n", "batch_size", ",", "n_queries", "*", "n_keys", ",", "kq_size", "\n", ")", "\n", "keys", "=", "self", ".", "_make_multiheaded", "(", "keys", ",", "self", ".", "kq_head_size", ")", "\n", "keys", "=", "keys", ".", "view", "(", "\n", "batch_size", "*", "self", ".", "n_heads", ",", "n_queries", ",", "n_keys", ",", "self", ".", "kq_head_size", "\n", ")", "\n", "", "else", ":", "\n", "            ", "keys", "=", "self", ".", "_make_multiheaded", "(", "keys", ",", "self", ".", "kq_head_size", ")", "\n", "\n", "# Size = [batch_size * n_heads, n_queries, head_size]", "\n", "", "context", "=", "self", ".", "dot", "(", "keys", ",", "queries", ",", "values", ")", "\n", "\n", "# Size = [batch_size, n_queries, value_size]", "\n", "context", "=", "self", ".", "_concatenate_multiheads", "(", "context", ",", "self", ".", "value_head_size", ")", "\n", "\n", "if", "self", ".", "post_processor", "is", "not", "None", ":", "\n", "            ", "context", "=", "self", ".", "post_processor", "(", "context", ")", "\n", "\n", "", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiheadAttender._make_multiheaded": [[510, 520], ["kvq.permute().contiguous().view.permute().contiguous().view.size", "kvq.permute().contiguous().view.permute().contiguous().view.view", "kvq.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "kvq.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "kvq.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["None"], ["", "def", "_make_multiheaded", "(", "self", ",", "kvq", ",", "head_size", ")", ":", "\n", "        ", "\"\"\"Make a key, value, query multiheaded by stacking the heads as new batches.\"\"\"", "\n", "batch_size", "=", "kvq", ".", "size", "(", "0", ")", "\n", "kvq", "=", "kvq", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "n_heads", ",", "head_size", ")", "\n", "kvq", "=", "(", "\n", "kvq", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "batch_size", "*", "self", ".", "n_heads", ",", "-", "1", ",", "head_size", ")", "\n", ")", "\n", "return", "kvq", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.MultiheadAttender._concatenate_multiheads": [[521, 531], ["kvq.permute().contiguous().view.permute().contiguous().view.view", "kvq.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "kvq.permute().contiguous().view.permute().contiguous().view.size", "kvq.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "kvq.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["None"], ["", "def", "_concatenate_multiheads", "(", "self", ",", "kvq", ",", "head_size", ")", ":", "\n", "        ", "\"\"\"Reverts `_make_multiheaded` by concatenating the heads.\"\"\"", "\n", "batch_size", "=", "kvq", ".", "size", "(", "0", ")", "//", "self", ".", "n_heads", "\n", "kvq", "=", "kvq", ".", "view", "(", "self", ".", "n_heads", ",", "batch_size", ",", "-", "1", ",", "head_size", ")", "\n", "kvq", "=", "(", "\n", "kvq", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "n_heads", "*", "head_size", ")", "\n", ")", "\n", "return", "kvq", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.TransformerAttender.__init__": [[558, 566], ["attention.MultiheadAttender.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "utils._mlp"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.modules.utils._mlp"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "is_post_process", "=", "False", ",", "**", "kwargs", ")", "\n", "assert", "self", ".", "kq_size", "==", "self", ".", "out_size", "\n", "self", ".", "layer_norm1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "out_size", ")", "\n", "self", ".", "layer_norm2", "=", "nn", ".", "LayerNorm", "(", "self", ".", "out_size", ")", "\n", "self", ".", "mlp", "=", "_mlp", "(", "\n", "[", "self", ".", "out_size", "]", "+", "[", "self", ".", "out_size", "]", "+", "[", "self", ".", "out_size", "]", ",", "\n", "activation", "=", "\"relu\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.TransformerAttender.forward": [[568, 588], ["attention.MultiheadAttender.forward", "attention.TransformerAttender.layer_norm1", "attention.TransformerAttender.layer_norm2", "attention.TransformerAttender.dot.dropout", "attention.TransformerAttender.mlp"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward"], ["", "def", "forward", "(", "self", ",", "keys", ",", "queries", ",", "values", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Compute the attention between given key and queries.\n\n        Parameters\n        ----------\n        keys: torch.Tensor, size=[batch_size, n_keys, kqv_size]\n        queries: torch.Tensor, size=[batch_size, n_queries, kqv_size]\n        values: torch.Tensor, size=[batch_size, n_keys, kqv_size]\n\n        Return\n        ------\n        context : torch.Tensor, size=[batch_size, n_queries, kqv_size]\n        \"\"\"", "\n", "context", "=", "super", "(", ")", ".", "forward", "(", "keys", ",", "queries", ",", "values", ",", "**", "kwargs", ")", "\n", "# residual connection + layer norm", "\n", "context", "=", "self", ".", "layer_norm1", "(", "context", "+", "queries", ")", "\n", "context", "=", "self", ".", "layer_norm2", "(", "context", "+", "self", ".", "dot", ".", "dropout", "(", "self", ".", "mlp", "(", "context", ")", ")", ")", "\n", "\n", "return", "context", "", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.get_attender": [[30, 101], ["attention.lower.lower", "isinstance", "attention.lower.", "attention.MultiplicativeAttender", "attention.AdditiveAttender", "attention.DotAttender", "attention.CosineAttender", "attention.DistanceAttender", "attention.DistanceAttender", "attention.DistanceAttender", "attention.MultiheadAttender", "attention.TransformerAttender", "ValueError"], "function", ["None"], ["def", "get_attender", "(", "attention", ",", "kq_size", ",", "value_size", ",", "out_size", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Set scorer that matches key and query to compute attention along `dim=1`.\n\n    Parameters\n    ----------\n    attention: callable or {'multiplicative', \"additive\", \"scaledot\", \"multihead\",\n            \"manhattan\", \"euclidean\", \"cosine\", \"transformer\", \"weighted_dist\"}, optional\n        The method to compute the alignment. If not a string (callable) will return\n        it. Else: `\"scaledot\"` mitigates the high dimensional issue of the scaled\n        product by rescaling it [1]. `\"multihead\"` is the same with multiple heads\n        [1]. `\"transformer\"` builds upon `\"multihead\"` by adding layer normalization\n        and skip connction as described in [2]. \"additive\"` is the original attention\n        [3]. `\"multiplicative\"` is  faster and more space efficient [4] but performs\n        a little bit worst for high dimensions. `\"cosine\"` cosine similarity.\n        `\"manhattan\"` `\"euclidean\"` are the negative distances and \"weighted_dist\"\n        is the negative distance with different dimension weights.\n\n    kq_size : int\n        Size of the key and query.\n\n    value_size : int\n        Final size of the value.\n\n    out_size : int\n        Output dimension.\n\n    kwargs :\n        Additional arguments to the attender.\n\n    References\n    ----------\n    [1] Vaswani, Ashish, et al. \"Attention is all you need.\" Advances in neural\n        information processing systems. 2017.\n    [2] Parmar, Niki, et al. \"Image transformer.\" arXiv preprint arXiv:1802.05751\n        (2018).\n    [2] Bahdanau, Dzmitry, Kyunghyun Cho, and Yoshua Bengio. \"Neural machine\n        translation by jointly learning to align and translate.\" arXiv preprint\n        arXiv:1409.0473 (2014).\n    [3] Luong, Minh-Thang, Hieu Pham, and Christopher D. Manning. \"Effective\n        approaches to attention-based neural machine translation.\" arXiv preprint\n        arXiv:1508.04025 (2015).\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "attention", ",", "str", ")", ":", "\n", "        ", "return", "attention", "(", "kq_size", ",", "value_size", ",", "out_size", ",", "**", "kwargs", ")", "\n", "\n", "", "attention", "=", "attention", ".", "lower", "(", ")", "\n", "if", "attention", "==", "\"multiplicative\"", ":", "\n", "        ", "attender", "=", "MultiplicativeAttender", "(", "kq_size", ",", "value_size", ",", "out_size", ",", "**", "kwargs", ")", "\n", "", "elif", "attention", "==", "\"additive\"", ":", "\n", "        ", "attender", "=", "AdditiveAttender", "(", "kq_size", ",", "value_size", ",", "out_size", ",", "**", "kwargs", ")", "\n", "", "elif", "attention", "==", "\"scaledot\"", ":", "\n", "        ", "attender", "=", "DotAttender", "(", "kq_size", ",", "value_size", ",", "out_size", ",", "is_scale", "=", "True", ",", "**", "kwargs", ")", "\n", "", "elif", "attention", "==", "\"cosine\"", ":", "\n", "        ", "attender", "=", "CosineAttender", "(", "kq_size", ",", "value_size", ",", "out_size", ",", "**", "kwargs", ")", "\n", "", "elif", "attention", "==", "\"manhattan\"", ":", "\n", "        ", "attender", "=", "DistanceAttender", "(", "kq_size", ",", "value_size", ",", "out_size", ",", "p", "=", "1", ",", "**", "kwargs", ")", "\n", "", "elif", "attention", "==", "\"euclidean\"", ":", "\n", "        ", "attender", "=", "DistanceAttender", "(", "kq_size", ",", "value_size", ",", "out_size", ",", "p", "=", "2", ",", "**", "kwargs", ")", "\n", "", "elif", "attention", "==", "\"weighted_dist\"", ":", "\n", "        ", "attender", "=", "DistanceAttender", "(", "\n", "kq_size", ",", "value_size", ",", "out_size", ",", "is_weight", "=", "True", ",", "p", "=", "1", ",", "**", "kwargs", "\n", ")", "\n", "", "elif", "attention", "==", "\"multihead\"", ":", "\n", "        ", "attender", "=", "MultiheadAttender", "(", "kq_size", ",", "value_size", ",", "out_size", ",", "**", "kwargs", ")", "\n", "", "elif", "attention", "==", "\"transformer\"", ":", "\n", "        ", "attender", "=", "TransformerAttender", "(", "kq_size", ",", "value_size", ",", "out_size", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown attention method {}\"", ".", "format", "(", "attention", ")", ")", "\n", "\n", "", "return", "attender", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.__init__.StochasticEncoder.__init__": [[36, 53], ["torch.nn.Module.__init__", "aggregators.get_agg_fn", "utils._mlp", "torch.nn.ModuleList", "attention.get_attender", "range"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.modules.aggregators.get_agg_fn", "home.repos.pwc.inspect_result.plai-group_ipa.modules.utils._mlp", "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.get_attender"], ["#             dim=-1)", "\n", "\n", "# def test_approx_gaussian_cross_entropy_scaled_grads():", "\n", "#     for func in [approx_gaussian_cross_entropy,", "\n", "#                  functools.partial(approx_gaussian_cross_entropy_scaled_grads, max_grad=100)]:", "\n", "#         mu1 = nn.Parameter(torch.tensor([[0.5, 0.9], [1., 1.]]), requires_grad=True)", "\n", "#         mu2 = nn.Parameter(torch.tensor([[8.5, 8.9], [1., 0.9]]), requires_grad=True)", "\n", "#         logsigma1 = nn.Parameter(torch.tensor([[0.]]), requires_grad=True)", "\n", "#         logsigma2 = nn.Parameter(torch.tensor([[-0.3, -0.9], [-0.3, -0.9]]), requires_grad=True)", "\n", "#         ce = func(mu1, logsigma1, mu2, logsigma2)", "\n", "#         print(ce.detach().numpy())", "\n", "#         ce.sum().backward()", "\n", "#         print(mu1.grad.numpy(), 0, mu2.grad.numpy(), logsigma2.grad.numpy(), sep='\\n')", "\n", "#         print()", "\n", "\n", "\n", "class", "DifferentiableClamp", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.__init__.StochasticEncoder.forward": [[55, 75], ["x.size", "x.new_zeros", "torch.cat", "__init__.StochasticEncoder.input_projection", "__init__.StochasticEncoder.agg_fn", "attention"], "methods", ["None"], ["\n", "\n", "@", "staticmethod", "\n", "@", "custom_fwd", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "min", ")", ":", "\n", "        ", "return", "input", ".", "clamp", "(", "min", "=", "min", ")", "\n", "\n", "", "@", "staticmethod", "\n", "@", "custom_bwd", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "grad_output", ".", "clone", "(", ")", ",", "None", ",", "None", "\n", "\n", "\n", "", "", "def", "dclamp", "(", "input", ",", "min", ")", ":", "\n", "    ", "\"\"\"\n    Like torch.clamp, but with a constant 1-gradient.\n    :param input: The input that is to be clamped.\n    :param min: The minimum value of the output.\n    :param max: The maximum value of the output.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.__init__.DeterministicEncoder.__init__": [[97, 124], ["torch.nn.Module.__init__", "aggregators.get_agg_fn", "utils._mlp", "torch.nn.ModuleList", "utils._mlp", "utils._mlp", "torch.nn.ModuleList", "attention.get_attender", "range", "attention.get_attender", "range"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.modules.aggregators.get_agg_fn", "home.repos.pwc.inspect_result.plai-group_ipa.modules.utils._mlp", "home.repos.pwc.inspect_result.plai-group_ipa.modules.utils._mlp", "home.repos.pwc.inspect_result.plai-group_ipa.modules.utils._mlp", "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.get_attender", "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.get_attender"], ["if", "zero_bias", ":", "\n", "        ", "c", ".", "bias", ".", "data", "*=", "0.0", "\n", "", "if", "zero_weights", ":", "\n", "        ", "c", ".", "weight", ".", "data", "*=", "0.0", "\n", "", "return", "c", "\n", "\n", "\n", "", "def", "get_3x3", "(", "in_dim", ",", "out_dim", ",", "zero_bias", "=", "True", ",", "zero_weights", "=", "False", ",", "groups", "=", "1", ",", "scaled", "=", "False", ")", ":", "\n", "    ", "return", "get_conv", "(", "in_dim", ",", "out_dim", ",", "3", ",", "1", ",", "1", ",", "zero_bias", ",", "zero_weights", ",", "groups", "=", "groups", ",", "scaled", "=", "scaled", ")", "\n", "\n", "\n", "", "def", "get_1x1", "(", "in_dim", ",", "out_dim", ",", "zero_bias", "=", "True", ",", "zero_weights", "=", "False", ",", "groups", "=", "1", ",", "scaled", "=", "False", ")", ":", "\n", "    ", "return", "get_conv", "(", "in_dim", ",", "out_dim", ",", "1", ",", "1", ",", "0", ",", "zero_bias", ",", "zero_weights", ",", "groups", "=", "groups", ",", "scaled", "=", "scaled", ")", "\n", "\n", "\n", "", "def", "log_prob_from_logits", "(", "x", ")", ":", "\n", "    ", "\"\"\" numerically stable log_softmax implementation that prevents overflow \"\"\"", "\n", "axis", "=", "len", "(", "x", ".", "shape", ")", "-", "1", "\n", "m", "=", "x", ".", "max", "(", "dim", "=", "axis", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "return", "x", "-", "m", "-", "torch", ".", "log", "(", "torch", ".", "exp", "(", "x", "-", "m", ")", ".", "sum", "(", "dim", "=", "axis", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "\n", "", "def", "const_max", "(", "t", ",", "constant", ")", ":", "\n", "    ", "other", "=", "torch", ".", "ones_like", "(", "t", ")", "*", "constant", "\n", "return", "torch", ".", "max", "(", "t", ",", "other", ")", "\n", "\n", "\n", "", "def", "const_min", "(", "t", ",", "constant", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.__init__.DeterministicEncoder.forward": [[126, 153], ["x.size", "x.new_zeros", "torch.cat", "__init__.DeterministicEncoder.input_projection", "attention", "hasattr", "__init__.DeterministicEncoder.target_projection", "__init__.DeterministicEncoder.context_projection", "__init__.DeterministicEncoder.agg_fn", "len", "attention"], "methods", ["None"], ["return", "torch", ".", "min", "(", "t", ",", "other", ")", "\n", "\n", "\n", "", "def", "discretized_mix_logistic_loss", "(", "x", ",", "l", ",", "low_bit", "=", "False", ",", "mask", "=", "None", ")", ":", "\n", "    ", "\"\"\" log-likelihood for mixture of discretized logistics, assumes the data has been rescaled to [-1,1] interval \"\"\"", "\n", "# Adapted from https://github.com/openai/pixel-cnn/blob/master/pixel_cnn_pp/nn.py", "\n", "xs", "=", "[", "s", "for", "s", "in", "x", ".", "shape", "]", "# true image (i.e. labels) to regress to, e.g. (B,32,32,3)", "\n", "ls", "=", "[", "s", "for", "s", "in", "l", ".", "shape", "]", "# predicted distribution, e.g. (B,32,32,100)", "\n", "nr_mix", "=", "int", "(", "ls", "[", "-", "1", "]", "/", "10", ")", "# here and below: unpacking the params of the mixture of logistics", "\n", "logit_probs", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "l", "=", "torch", ".", "reshape", "(", "l", "[", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "]", ",", "xs", "+", "[", "nr_mix", "*", "3", "]", ")", "\n", "means", "=", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "nr_mix", "]", "\n", "log_scales", "=", "const_max", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "nr_mix", ":", "2", "*", "nr_mix", "]", ",", "-", "7.", ")", "\n", "coeffs", "=", "torch", ".", "tanh", "(", "l", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "*", "nr_mix", ":", "3", "*", "nr_mix", "]", ")", "\n", "x", "=", "torch", ".", "reshape", "(", "x", ",", "xs", "+", "[", "1", "]", ")", "+", "torch", ".", "zeros", "(", "xs", "+", "[", "nr_mix", "]", ")", ".", "to", "(", "x", ".", "device", ")", "# here and below: getting the means and adjusting them based on preceding sub-pixels", "\n", "m2", "=", "torch", ".", "reshape", "(", "means", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ",", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", "]", ")", "\n", "m3", "=", "torch", ".", "reshape", "(", "means", "[", ":", ",", ":", ",", ":", ",", "2", ",", ":", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "2", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", ":", ",", "1", ",", ":", "]", ",", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", "]", ")", "\n", "means", "=", "torch", ".", "cat", "(", "[", "torch", ".", "reshape", "(", "means", "[", ":", ",", ":", ",", ":", ",", "0", ",", ":", "]", ",", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "1", ",", "nr_mix", "]", ")", ",", "m2", ",", "m3", "]", ",", "dim", "=", "3", ")", "\n", "centered_x", "=", "x", "-", "means", "\n", "inv_stdv", "=", "torch", ".", "exp", "(", "-", "log_scales", ")", "\n", "if", "low_bit", ":", "\n", "        ", "plus_in", "=", "inv_stdv", "*", "(", "centered_x", "+", "1.", "/", "31.", ")", "\n", "cdf_plus", "=", "torch", ".", "sigmoid", "(", "plus_in", ")", "\n", "min_in", "=", "inv_stdv", "*", "(", "centered_x", "-", "1.", "/", "31.", ")", "\n", "", "else", ":", "\n", "        ", "plus_in", "=", "inv_stdv", "*", "(", "centered_x", "+", "1.", "/", "255.", ")", "\n", "cdf_plus", "=", "torch", ".", "sigmoid", "(", "plus_in", ")", "\n", "min_in", "=", "inv_stdv", "*", "(", "centered_x", "-", "1.", "/", "255.", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.__init__.LatentNormalPosteriorEncoder.__init__": [[169, 179], ["torch.nn.Module.__init__", "utils._mlp", "utils._mlp", "utils._mlp"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.modules.utils._mlp", "home.repos.pwc.inspect_result.plai-group_ipa.modules.utils._mlp", "home.repos.pwc.inspect_result.plai-group_ipa.modules.utils._mlp"], ["# if the probability on a sub-pixel is below 1e-5, we use an approximation based on the assumption that the log-density is constant in the bin of the observed sub-pixel value", "\n", "if", "low_bit", ":", "\n", "        ", "log_probs", "=", "torch", ".", "where", "(", "x", "<", "-", "0.999", ",", "\n", "log_cdf_plus", ",", "\n", "torch", ".", "where", "(", "x", ">", "0.999", ",", "\n", "log_one_minus_cdf_min", ",", "\n", "torch", ".", "where", "(", "cdf_delta", ">", "1e-5", ",", "\n", "torch", ".", "log", "(", "const_max", "(", "cdf_delta", ",", "1e-12", ")", ")", ",", "\n", "log_pdf_mid", "-", "np", ".", "log", "(", "15.5", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "log_probs", "=", "torch", ".", "where", "(", "x", "<", "-", "0.999", ",", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.__init__.LatentNormalPosteriorEncoder.forward": [[180, 191], ["torch.relu", "__init__.LatentNormalPosteriorEncoder.hidden_to_mu", "torch.distributions.Normal", "__init__.LatentNormalPosteriorEncoder.s_to_hidden", "torch.sigmoid", "__init__.LatentNormalPosteriorEncoder.hidden_to_sigma"], "methods", ["None"], ["log_cdf_plus", ",", "\n", "torch", ".", "where", "(", "x", ">", "0.999", ",", "\n", "log_one_minus_cdf_min", ",", "\n", "torch", ".", "where", "(", "cdf_delta", ">", "1e-5", ",", "\n", "torch", ".", "log", "(", "const_max", "(", "cdf_delta", ",", "1e-12", ")", ")", ",", "\n", "log_pdf_mid", "-", "np", ".", "log", "(", "127.5", ")", ")", ")", ")", "\n", "", "log_probs", "=", "log_probs", ".", "sum", "(", "dim", "=", "3", ")", "+", "log_prob_from_logits", "(", "logit_probs", ")", "\n", "mixture_probs", "=", "torch", ".", "logsumexp", "(", "log_probs", ",", "-", "1", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mixture_probs", "=", "mixture_probs", "*", "mask", "\n", "", "return", "-", "1.", "*", "mixture_probs", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "/", "np", ".", "prod", "(", "xs", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.__init__.Decoder.__init__": [[214, 231], ["torch.nn.Module.__init__", "utils._mlp", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.modules.utils._mlp"], ["x2", "=", "const_min", "(", "const_max", "(", "x", "[", ":", ",", ":", ",", ":", ",", "2", "]", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "1", "]", "*", "x0", "+", "coeffs", "[", ":", ",", ":", ",", ":", ",", "2", "]", "*", "x1", ",", "-", "1.", ")", ",", "1.", ")", "\n", "return", "torch", ".", "cat", "(", "[", "torch", ".", "reshape", "(", "x0", ",", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "torch", ".", "reshape", "(", "x1", ",", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", ",", "torch", ".", "reshape", "(", "x2", ",", "xs", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", "]", ",", "dim", "=", "3", ")", "\n", "\n", "\n", "", "class", "HModule", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "H", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "build", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "", "class", "DmolNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "H", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "width", "=", "H", ".", "width", "\n", "self", ".", "out_conv", "=", "get_conv", "(", "H", ".", "width", ",", "H", ".", "num_mixtures", "*", "10", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.__init__.Decoder.forward": [[232, 278], ["x.size", "z.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "x.view", "z.unsqueeze().repeat.unsqueeze().repeat.view", "torch.relu", "__init__.Decoder.hidden_to_mu", "mu.view.view.view", "torch.distributions.Normal", "r.unsqueeze().repeat.unsqueeze().repeat.view", "torch.cat", "torch.cat", "__init__.Decoder.xz_to_hidden", "__init__.Decoder.hidden_to_sigma", "pre_sigma.view.view.view", "z.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "r.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.ones_like", "torch.nn.functional.softplus", "r.unsqueeze().repeat.unsqueeze().repeat.unsqueeze"], "methods", ["None"], ["", "def", "nll", "(", "self", ",", "px_z", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "discretized_mix_logistic_loss", "(", "x", "=", "x", ",", "l", "=", "self", ".", "forward", "(", "px_z", ")", ",", "low_bit", "=", "self", ".", "H", ".", "dataset", "in", "[", "'ffhq_256'", "]", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "px_z", ")", ":", "\n", "        ", "xhat", "=", "self", ".", "out_conv", "(", "px_z", ")", "\n", "return", "xhat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "", "def", "sample", "(", "self", ",", "px_z", ")", ":", "\n", "        ", "im", "=", "sample_from_discretized_mix_logistic", "(", "self", ".", "forward", "(", "px_z", ")", ",", "self", ".", "H", ".", "num_mixtures", ")", "\n", "xhat", "=", "(", "im", "+", "1.0", ")", "*", "127.5", "\n", "xhat", "=", "xhat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "xhat", "=", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "0.0", ",", "xhat", ")", ",", "255.0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "xhat", "\n", "\n", "\n", "# define helper", "\n", "", "", "def", "sample_patches_mask", "(", "H", ",", "b", ",", "h", ",", "w", ",", "device", ",", "n_patches", "=", "None", ")", ":", "\n", "    ", "if", "n_patches", "is", "None", ":", "\n", "        ", "n_patches", "=", "torch", ".", "randint", "(", "0", ",", "H", ".", "max_patches", "+", "1", ",", "(", "b", ",", ")", ")", "\n", "", "patch_dim", "=", "round", "(", "w", "*", "H", ".", "patch_size_frac", ")", "\n", "masks", "=", "torch", ".", "zeros", "(", "b", ",", "h", ",", "w", ",", "1", ",", "device", "=", "device", ")", "\n", "for", "mask", ",", "n_p", "in", "zip", "(", "masks", ",", "n_patches", ")", ":", "\n", "        ", "for", "p", "in", "range", "(", "n_p", ")", ":", "\n", "            ", "r", "=", "torch", ".", "randint", "(", "-", "patch_dim", "+", "1", ",", "h", ",", "(", ")", ")", "\n", "c", "=", "torch", ".", "randint", "(", "-", "patch_dim", "+", "1", ",", "h", ",", "(", ")", ")", "\n", "r1", "=", "max", "(", "0", ",", "r", ")", "\n", "c1", "=", "max", "(", "0", ",", "c", ")", "\n", "r2", "=", "min", "(", "h", ",", "r", "+", "patch_dim", ")", "\n", "c2", "=", "min", "(", "w", ",", "c", "+", "patch_dim", ")", "\n", "mask", "[", "r1", ":", "r2", ",", "c1", ":", "c2", "]", "=", "1.", "\n", "", "", "return", "masks", "\n", "\n", "", "def", "channel_last_interpolate", "(", "t", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "t", "=", "t", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "t", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "t", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "t", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "", "def", "sample_foveal", "(", "H", ",", "images", ")", ":", "\n", "    ", "assert", "'q_r2'", "not", "in", "H", ".", "kls", "\n", "b", ",", "h", ",", "w", ",", "_", "=", "images", ".", "shape", "\n", "n_patches", "=", "torch", ".", "randint", "(", "0", ",", "H", ".", "max_patches", "+", "1", ",", "(", "b", ",", ")", ")", "\n", "centres", "=", "[", "[", "(", "torch", ".", "randint", "(", "h", ",", "(", "1", ",", ")", ")", ",", "torch", ".", "randint", "(", "w", ",", "(", "1", ",", ")", ")", ")", "for", "_", "in", "range", "(", "int", "(", "n_p", ")", ")", "]", "for", "n_p", "in", "n_patches", "]", "\n", "emb", "=", "[", "]", "\n", "for", "down_factor", ",", "size_frac", "in", "zip", "(", "H", ".", "foveal_down_factors", ",", "H", ".", "foveal_size_fracs", ")", ":", "\n", "        ", "blurred_image", "=", "channel_last_interpolate", "(", "\n", "channel_last_interpolate", "(", "images", ",", "scale_factor", "=", "1", "/", "down_factor", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "size", "=", "images", ".", "shape", "[", "1", ":", "-", "1", "]", ",", "mode", "=", "'bilinear'", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.utils.get_activation": [[4, 15], ["torch.nn.ReLU", "torch.nn.ELU", "torch.nn.Sigmoid", "torch.nn.Tanh", "ValueError"], "function", ["None"], ["", "import", "json", "\n", "import", "tempfile", "\n", "import", "numpy", "as", "np", "\n", "import", "torch", "\n", "import", "time", "\n", "import", "subprocess", "\n", "import", "torch", ".", "distributed", "as", "dist", "\n", "\n", "\n", "def", "allreduce", "(", "x", ",", "average", ")", ":", "\n", "    ", "if", "mpi_size", "(", ")", ">", "1", ":", "\n", "        ", "dist", ".", "all_reduce", "(", "x", ",", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.modules.utils._mlp": [[17, 39], ["range", "layers.append", "torch.nn.Sequential", "len", "layers.extend", "torch.nn.Linear", "len", "layers.append", "torch.nn.Linear", "utils.get_activation", "torch.nn.Dropout"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.modules.utils.get_activation"], ["\n", "\n", "", "def", "get_cpu_stats_over_ranks", "(", "stat_dict", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "\n", "allreduced", "=", "allreduce", "(", "torch", ".", "stack", "(", "[", "torch", ".", "as_tensor", "(", "stat_dict", "[", "k", "]", ")", ".", "detach", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "for", "k", "in", "keys", "]", ")", ",", "average", "=", "True", ")", ".", "cpu", "(", ")", "\n", "return", "{", "k", ":", "allreduced", "[", "i", "]", ".", "item", "(", ")", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "keys", ")", "}", "\n", "\n", "\n", "", "class", "Hyperparams", "(", "dict", ")", ":", "\n", "    ", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "attr", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "None", "\n", "\n", "", "", "def", "__setattr__", "(", "self", ",", "attr", ",", "value", ")", ":", "\n", "        ", "self", "[", "attr", "]", "=", "value", "\n", "\n", "\n", "", "", "def", "logger", "(", "log_prefix", ")", ":", "\n", "    ", "'Prints the arguments out to stdout, .txt, and .jsonl files'", "\n", "\n", "def", "log", "(", "*", "args", ",", "pprint", "=", "False", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.test_interface.sample_from_model": [[144, 155], ["sess.run", "numpy.zeros", "range", "sess.run", "range", "feed_dict.update", "sess.run"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["def", "sample_from_model", "(", "sess", ",", "img_np", ",", "mask_np", ")", ":", "\n", "    ", "cond_masked_np", "=", "sess", ".", "run", "(", "cond_masked", ",", "{", "img_ph", ":", "img_np", ",", "mask_ph", ":", "mask_np", "}", ")", "\n", "feed_dict", "=", "{", "h_sample", ":", "cond_masked_np", "}", "\n", "e_gen", "=", "np", ".", "zeros", "(", "(", "1", ",", "args", ".", "image_size", "//", "8", ",", "args", ".", "image_size", "//", "8", ",", "args", ".", "embedding_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "yi", "in", "range", "(", "top_shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "xi", "in", "range", "(", "top_shape", "[", "1", "]", ")", ":", "\n", "            ", "feed_dict", ".", "update", "(", "{", "e_sample", ":", "e_gen", "}", ")", "\n", "new_e_gen_np", "=", "sess", ".", "run", "(", "new_e_gen", ",", "feed_dict", ")", "\n", "e_gen", "[", ":", ",", "yi", ",", "xi", ",", ":", "]", "=", "new_e_gen_np", "[", ":", ",", "yi", ",", "xi", ",", ":", "]", "\n", "", "", "img_gen_np", "=", "sess", ".", "run", "(", "img_gen", ",", "{", "img_ph", ":", "img_np", ",", "mask_ph", ":", "mask_np", ",", "e_sample", ":", "e_gen", "}", ")", "\n", "return", "img_gen_np", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.train_structure_generator.log_images": [[25, 40], ["vae_helpers.rng_decorator", "sample_from_model", "range", "wandb.log", "numpy.concatenate", "log_dict.update", "wandb.Image"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.test.sample_from_model", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update"], ["", "@", "rng_decorator", "(", "0", ")", "\n", "def", "log_images", "(", "sess", ",", "dataset", ")", ":", "\n", "# Generate structure feature maps", "\n", "    ", "gt_np", ",", "masked_np", ",", "recons_gen_np", ",", "recons_gt_np", "=", "sample_from_model", "(", "sess", ",", "dataset", ")", "\n", "log_dict", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "4", ")", ":", "\n", "        ", "gt_i", "=", "(", "(", "gt_np", "[", "idx", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "masked_i", "=", "(", "(", "masked_np", "[", "idx", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "recons_gen_i", "=", "(", "(", "recons_gen_np", "[", "idx", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "recons_gt_i", "=", "(", "(", "recons_gt_np", "[", "idx", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "report_img", "=", "np", ".", "concatenate", "(", "[", "gt_i", ",", "masked_i", ",", "recons_gen_i", ",", "recons_gt_i", "]", ",", "axis", "=", "1", ")", "\n", "caption", "=", "f\"Sample {idx}\"", "\n", "log_dict", ".", "update", "(", "{", "\n", "caption", ":", "wandb", ".", "Image", "(", "report_img", ",", "caption", "=", "caption", ")", "}", ")", "\n", "", "wandb", ".", "log", "(", "log_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.train_texture_generator.log_images": [[24, 44], ["vae_helpers.rng_decorator", "dataset.get_minibatch_val_np", "dataset.get_random_masks_np", "sess.run", "range", "wandb.log", "numpy.concatenate", "log_dict.update", "wandb.Image"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_val_np", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_masks_np", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update"], ["", "@", "rng_decorator", "(", "0", ")", "\n", "def", "log_images", "(", "sess", ",", "dataset", ")", ":", "\n", "    ", "v_im", "=", "dataset", ".", "get_minibatch_val_np", "(", ")", "\n", "msk", "=", "dataset", ".", "get_random_masks_np", "(", "minibatch_size", "=", "1", ")", "\n", "# Inpaint images", "\n", "gt_np", ",", "masked_np", ",", "complete_np", ",", "recons_gt_np", "=", "sess", ".", "run", "(", "[", "valid_images", ",", "batch_incomplete", ",", "batch_complete", ",", "recons_gt", "]", ",", "\n", "{", "valid_images", ":", "v_im", ",", "mask", ":", "msk", "}", ")", "\n", "\n", "\"\"\" Show 4 inpainting images under guidance of ground truth structure feature maps in the training of texture generator.\"\"\"", "\n", "log_dict", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "4", ")", ":", "\n", "        ", "gt_i", "=", "(", "(", "gt_np", "[", "idx", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "masked_i", "=", "(", "(", "masked_np", "[", "idx", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "complete_i", "=", "(", "(", "complete_np", "[", "idx", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "recons_gt_i", "=", "(", "(", "recons_gt_np", "[", "idx", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "report_img", "=", "np", ".", "concatenate", "(", "[", "gt_i", ",", "masked_i", ",", "complete_i", ",", "recons_gt_i", "]", ",", "axis", "=", "1", ")", "\n", "caption", "=", "f\"Sample {idx}\"", "\n", "log_dict", ".", "update", "(", "{", "\n", "caption", ":", "wandb", ".", "Image", "(", "report_img", ",", "caption", "=", "caption", ")", "}", ")", "\n", "", "wandb", ".", "log", "(", "log_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.MaskDataset.__init__": [[21, 25], ["super().__init__", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "img_shape", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "example_batch", "=", "torch", ".", "zeros", "(", "1", ",", "*", "img_shape", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.MaskDataset.__len__": [[26, 28], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "1000", "*", "1000", "*", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.MaskDataset.__getitem__": [[29, 33], ["mask.permute().contiguous().numpy.permute().contiguous().numpy.permute().contiguous().numpy", "data_loader.sample_mask", "mask.permute().contiguous().numpy.permute().contiguous().numpy.permute().contiguous", "mask.permute().contiguous().numpy.permute().contiguous().numpy.permute"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "mask", "=", "sample_mask", "(", "self", ".", "args", ",", "self", ".", "example_batch", ")", "[", "0", "]", "\n", "mask", "=", "mask", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", ".", "numpy", "(", ")", "\n", "return", "1", "-", "mask", "# Masks in this paper are inverted", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.ResizedDataset.__init__": [[42, 46], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "data", "=", "data", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.ResizedDataset.__len__": [[47, 49], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.ResizedDataset.__getitem__": [[50, 57], ["torchvision.transforms.functional.resize", "numpy.transpose", "numpy.transpose", "torchvision.transforms.functional.resize", "numpy.transpose", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "tmp", "=", "self", ".", "data", "[", "idx", "]", "\n", "if", "tmp", ".", "shape", "[", "-", "2", "]", "!=", "self", ".", "size", ":", "\n", "            ", "tmp", "=", "vF", ".", "resize", "(", "np", ".", "transpose", "(", "tmp", ",", "[", "2", ",", "0", ",", "1", "]", ")", ",", "256", ")", "\n", "tmp", "=", "np", ".", "transpose", "(", "tmp", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "", "tmp", "=", "(", "tmp", "/", "127.5", ")", "-", "1", "\n", "return", "vF", ".", "resize", "(", "tmp", ",", "self", ".", "size", ")", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.TransformedDataset.__init__": [[60, 64], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "transform", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.TransformedDataset.__getitem__": [[65, 69], ["data_loader.TransformedDataset.transform", "img.permute().numpy.permute().numpy.permute().numpy", "img.permute().numpy.permute().numpy.permute"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", ".", "transform", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "img", "=", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "return", "img", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.TransformedDataset.__len__": [[70, 72], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.NewDataset.__init__": [[76, 127], ["torchvision.Compose.append", "torchvision.Compose", "data_loader.TransformedDataset", "data_loader.TransformedDataset", "data_loader.MaskDataset", "data_loader.NewDataset._iterator", "data_loader.NewDataset._iterator", "data_loader.infinite_loader", "next", "torchvision.ToTensor", "torchvision.Compose.append", "data.cifar10", "torchvision.Normalize", "dict", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Resize", "data.ffhq256"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset._iterator", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset._iterator", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.infinite_loader", "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.cifar10", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.ffhq256"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "dtype", "=", "'uint8'", "\n", "self", ".", "label_size", "=", "0", "\n", "self", ".", "label_dtype", "=", "'float32'", "\n", "self", ".", "dynamic_range", "=", "[", "0", ",", "255", "]", "\n", "self", ".", "pix2pix", "=", "False", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "args", "=", "args", "\n", "transform", "=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "            ", "transform", ".", "append", "(", "transforms", ".", "Resize", "(", "256", ")", ")", "\n", "(", "trX", ",", "_", ")", ",", "(", "vaX", ",", "_", ")", ",", "_", "=", "cifar10", "(", "args", ".", "data_root", ",", "one_hot", "=", "False", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"ffhq256\"", ":", "\n", "            ", "trX", ",", "vaX", ",", "_", "=", "ffhq256", "(", "args", ".", "data_root", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "", "transform", ".", "append", "(", "transforms", ".", "Normalize", "(", "0.5", ",", "0.5", ")", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform", ")", "\n", "# self.train_set = torch.utils.data.TensorDataset(", "\n", "#     torch.as_tensor(trX))", "\n", "# self.train_set = ResizedDataset(torch.as_tensor(trX), 256)", "\n", "# self.valid_set = ResizedDataset(torch.as_tensor(vaX), 256)", "\n", "self", ".", "train_set", "=", "TransformedDataset", "(", "trX", ",", "transform", ")", "\n", "self", ".", "valid_set", "=", "TransformedDataset", "(", "vaX", ",", "transform", ")", "\n", "mask_dataset", "=", "MaskDataset", "(", "self", ".", "args", ",", "self", ".", "train_set", "[", "0", "]", "[", "0", "]", ".", "shape", ")", "\n", "\n", "if", "self", ".", "args", ".", "num_workers", "is", "None", "or", "self", ".", "args", ".", "num_workers", "==", "0", ":", "\n", "            ", "dataloader_kwargs", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "dataloader_kwargs", "=", "dict", "(", "num_workers", "=", "self", ".", "args", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "4", ")", "\n", "", "self", ".", "train_iterator", "=", "self", ".", "_iterator", "(", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "train_set", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "**", "dataloader_kwargs", ")", ")", "\n", "self", ".", "valid_iterator", "=", "self", ".", "_iterator", "(", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "valid_set", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", ")", "\n", "self", ".", "mask_loader", "=", "infinite_loader", "(", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "mask_dataset", ",", "\n", "batch_size", "=", "4", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "**", "dataloader_kwargs", ")", ")", "\n", "self", ".", "example_batch", "=", "next", "(", "self", ".", "train_iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.NewDataset._iterator": [[128, 132], ["x[].contiguous().numpy", "x[].contiguous"], "methods", ["None"], ["", "def", "_iterator", "(", "self", ",", "dataloader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "x", "in", "dataloader", ":", "\n", "                ", "yield", "x", "[", "0", "]", ".", "contiguous", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.NewDataset.get_minibatch_tf": [[134, 136], ["tensorflow.convert_to_tensor", "data_loader.NewDataset.get_minibatch_np"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_np"], ["", "", "", "def", "get_minibatch_tf", "(", "self", ")", ":", "# => images", "\n", "        ", "return", "tf", ".", "convert_to_tensor", "(", "self", ".", "get_minibatch_np", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.NewDataset.get_minibatch_val_tf": [[137, 139], ["tensorflow.convert_to_tensor", "data_loader.NewDataset.get_minibatch_val_np"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_val_np"], ["", "def", "get_minibatch_val_tf", "(", "self", ")", ":", "# => images", "\n", "        ", "return", "tf", ".", "convert_to_tensor", "(", "self", ".", "get_minibatch_val_np", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.NewDataset.get_minibatch_np": [[141, 144], ["next"], "methods", ["None"], ["", "def", "get_minibatch_np", "(", "self", ")", ":", "# => images", "\n", "        ", "imgs", "=", "next", "(", "self", ".", "train_iterator", ")", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.NewDataset.get_minibatch_val_np": [[145, 148], ["next"], "methods", ["None"], ["", "def", "get_minibatch_val_np", "(", "self", ")", ":", "# => images", "\n", "        ", "imgs", "=", "next", "(", "self", ".", "valid_iterator", ")", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.NewDataset.get_random_masks_tf": [[150, 152], ["tensorflow.convert_to_tensor", "data_loader.NewDataset.get_random_masks_np"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_masks_np"], ["", "def", "get_random_masks_tf", "(", "self", ",", "minibatch_size", "=", "-", "1", ")", ":", "# => images", "\n", "        ", "return", "tf", ".", "convert_to_tensor", "(", "self", ".", "get_random_masks_np", "(", "minibatch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.NewDataset.get_random_masks_np": [[154, 165], ["[].numpy", "next", "mask_parts.append", "len", "torch.cat"], "methods", ["None"], ["", "def", "get_random_masks_np", "(", "self", ",", "minibatch_size", "=", "-", "1", ")", ":", "\n", "        ", "if", "minibatch_size", "==", "-", "1", ":", "\n", "            ", "minibatch_size", "=", "self", ".", "batch_size", "\n", "# This is a hacky way of utilizing pytorch dataloaders to prefetch the masks and get a better run-time.", "\n", "", "b", "=", "0", "\n", "mask_parts", "=", "[", "]", "\n", "while", "b", "<", "minibatch_size", ":", "\n", "            ", "m", "=", "next", "(", "self", ".", "mask_loader", ")", "\n", "mask_parts", ".", "append", "(", "m", ")", "\n", "b", "+=", "len", "(", "m", ")", "\n", "", "return", "torch", ".", "cat", "(", "mask_parts", ",", "dim", "=", "0", ")", "[", ":", "minibatch_size", "]", ".", "numpy", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.sample_mask": [[12, 18], ["x.unsqueeze.unsqueeze", "x.unsqueeze.contiguous", "vae_helpers.sample_part_images"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_part_images"], ["def", "sample_mask", "(", "args", ",", "batch", ")", ":", "\n", "# args shoudld have the following attributes:", "\n", "# conditioning, max_patches, patch_size_frac, and kls (only for foveal conditioning)", "\n", "    ", "x", "=", "sample_part_images", "(", "args", ",", "batch", ")", "[", "...", ",", "-", "1", "]", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.data_loader.infinite_loader": [[35, 39], ["None"], "function", ["None"], ["", "", "def", "infinite_loader", "(", "loader", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "x", "in", "loader", ":", "\n", "            ", "yield", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.train_vqvae.log_images": [[23, 32], ["vae_helpers.rng_decorator", "range", "wandb.log", "log_dict.update", "wandb.Image", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update"], ["", "@", "rng_decorator", "(", "0", ")", "\n", "def", "log_images", "(", "gt", ",", "recons", ")", ":", "\n", "    ", "log_dict", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "5", ")", ":", "\n", "        ", "gt_i", "=", "(", "(", "gt", "[", "idx", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "recons_i", "=", "(", "(", "recons", "[", "idx", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "caption", "=", "f\"Sample {idx}\"", "\n", "log_dict", ".", "update", "(", "{", "caption", ":", "wandb", ".", "Image", "(", "np", ".", "concatenate", "(", "[", "gt_i", ",", "recons_i", "]", ",", "axis", "=", "1", ")", ",", "caption", "=", "caption", ")", "}", ")", "\n", "", "wandb", ".", "log", "(", "log_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.vq_vae.test.sample_from_model": [[168, 179], ["sess.run", "numpy.zeros", "range", "sess.run", "range", "feed_dict.update", "sess.run"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["def", "sample_from_model", "(", "sess", ",", "img_np", ",", "mask_np", ")", ":", "\n", "    ", "cond_masked_np", "=", "sess", ".", "run", "(", "cond_masked", ",", "{", "img_ph", ":", "img_np", ",", "mask_ph", ":", "mask_np", "}", ")", "\n", "feed_dict", "=", "{", "h_sample", ":", "cond_masked_np", "}", "\n", "e_gen", "=", "np", ".", "zeros", "(", "(", "1", ",", "args", ".", "image_size", "//", "8", ",", "args", ".", "image_size", "//", "8", ",", "args", ".", "embedding_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "yi", "in", "range", "(", "top_shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "xi", "in", "range", "(", "top_shape", "[", "1", "]", ")", ":", "\n", "            ", "feed_dict", ".", "update", "(", "{", "e_sample", ":", "e_gen", "}", ")", "\n", "new_e_gen_np", "=", "sess", ".", "run", "(", "new_e_gen", ",", "feed_dict", ")", "\n", "e_gen", "[", ":", ",", "yi", ",", "xi", ",", ":", "]", "=", "new_e_gen_np", "[", ":", ",", "yi", ",", "xi", ",", ":", "]", "\n", "", "", "img_gen_np", "=", "sess", ".", "run", "(", "img_gen", ",", "{", "img_ph", ":", "img_np", ",", "mask_ph", ":", "mask_np", ",", "e_sample", ":", "e_gen", "}", ")", "\n", "return", "img_gen_np", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception_score.get_inception_score": [[13, 48], ["int", "range", "numpy.concatenate", "range", "type", "type", "len", "numpy.max", "numpy.min", "img.astype.astype", "inps.append", "math.ceil", "numpy.concatenate", "sess.run", "np.concatenate.append", "numpy.mean", "range", "IS.append", "MIS.append", "numpy.mean", "numpy.mean", "numpy.expand_dims", "scores1.append", "scores2.append", "numpy.exp", "numpy.exp", "float", "float", "min", "entropy", "numpy.mean", "numpy.mean", "len", "len", "entropy"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["def", "get_inception_score", "(", "images", ",", "sess", ",", "splits", "=", "10", ")", ":", "\n", "    ", "assert", "(", "type", "(", "images", ")", "==", "list", ")", "\n", "assert", "(", "type", "(", "images", "[", "0", "]", ")", "==", "np", ".", "ndarray", ")", "\n", "assert", "(", "len", "(", "images", "[", "0", "]", ".", "shape", ")", "==", "3", ")", "\n", "assert", "(", "np", ".", "max", "(", "images", "[", "0", "]", ")", ">", "10", ")", "\n", "assert", "(", "np", ".", "min", "(", "images", "[", "0", "]", ")", ">=", "0.0", ")", "\n", "inps", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inps", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "bs", "=", "1", "\n", "preds", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "inps", ")", ")", "/", "float", "(", "bs", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "inp", "=", "inps", "[", "(", "i", "*", "bs", ")", ":", "min", "(", "(", "i", "+", "1", ")", "*", "bs", ",", "len", "(", "inps", ")", ")", "]", "\n", "inp", "=", "np", ".", "concatenate", "(", "inp", ",", "0", ")", "\n", "pred", "=", "sess", ".", "run", "(", "softmax", ",", "{", "'IS_Inception_Net/ExpandDims:0'", ":", "inp", "}", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "", "preds", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "IS", "=", "[", "]", "\n", "MIS", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "preds", "[", "k", "*", "(", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "k", "+", "1", ")", "*", "(", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "py", "=", "np", ".", "mean", "(", "part", ",", "axis", "=", "0", ")", "\n", "scores1", "=", "[", "]", "\n", "scores2", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "part", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pyx", "=", "part", "[", "i", ",", ":", "]", "\n", "scores1", ".", "append", "(", "entropy", "(", "pyx", ",", "py", ")", ")", "\n", "scores2", ".", "append", "(", "-", "entropy", "(", "pyx", ")", ")", "\n", "", "IS", ".", "append", "(", "np", ".", "exp", "(", "np", ".", "mean", "(", "scores1", ")", ")", ")", "\n", "MIS", ".", "append", "(", "np", ".", "exp", "(", "np", ".", "mean", "(", "scores2", ")", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "IS", ")", ",", "np", ".", "mean", "(", "MIS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception_score._init_inception": [[50, 88], ["os.path.join", "os.path.exists", "os.makedirs", "DATA_URL.split", "os.path.exists", "six.moves.urllib.request.urlretrieve", "print", "os.stat", "print", "tarfile.open().extractall", "tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "tensorflow.Session", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name.graph.get_operations", "enumerate", "tensorflow.matmul", "tensorflow.nn.softmax", "sys.stdout.write", "sys.stdout.flush", "os.path.join", "f.read", "tensorflow.squeeze", "tarfile.open", "tensorflow.ConfigProto", "o.get_shape", "enumerate", "o.set_shape", "sess.graph.get_operation_by_name", "tensorflow.TensorShape", "new_shape.append", "new_shape.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape"], ["", "def", "_init_inception", "(", ")", ":", "\n", "    ", "global", "softmax", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "MODEL_DIR", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "MODEL_DIR", ")", "\n", "", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "'classify_image_graph_def.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "'IS_Inception_Net'", ")", "\n", "\n", "# Works with an arbitrary minibatch size.", "\n", "", "with", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", ")", "as", "sess", ":", "\n", "        ", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'IS_Inception_Net/pool_3:0'", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "            ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "                ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "                    ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "                        ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                        ", "new_shape", ".", "append", "(", "s", ")", "\n", "", "", "o", ".", "set_shape", "(", "tf", ".", "TensorShape", "(", "new_shape", ")", ")", "\n", "", "", "w", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "\"IS_Inception_Net/softmax/logits/MatMul\"", ")", ".", "inputs", "[", "1", "]", "\n", "logits", "=", "tf", ".", "matmul", "(", "tf", ".", "squeeze", "(", "pool3", ",", "[", "1", ",", "2", "]", ")", ",", "w", ")", "\n", "softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.fid.check_or_download_inception": [[8, 21], ["pathlib.Path", "str", "model_file.exists", "print", "request.urlretrieve", "tarfile.open", "f.extract", "str"], "function", ["None"], ["def", "check_or_download_inception", "(", ")", ":", "\n", "    ", "INCEPTION_URL", "=", "'http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz'", "\n", "inception_path", "=", "'/gdata/inception_model'", "\n", "inception_path", "=", "pathlib", ".", "Path", "(", "inception_path", ")", "\n", "model_file", "=", "inception_path", "/", "'classify_image_graph_def.pb'", "\n", "if", "not", "model_file", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "\"Downloading Inception model\"", ")", "\n", "from", "urllib", "import", "request", "\n", "import", "tarfile", "\n", "fn", ",", "_", "=", "request", ".", "urlretrieve", "(", "INCEPTION_URL", ")", "\n", "with", "tarfile", ".", "open", "(", "fn", ",", "mode", "=", "'r'", ")", "as", "f", ":", "\n", "            ", "f", ".", "extract", "(", "'classify_image_graph_def.pb'", ",", "str", "(", "model_file", ".", "parent", ")", ")", "\n", "", "", "return", "str", "(", "model_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.fid.create_inception_graph": [[22, 29], ["tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "f.read"], "function", ["None"], ["", "def", "create_inception_graph", "(", "pth", ")", ":", "\n", "    ", "\"\"\"Creates a graph from saved GraphDef file.\"\"\"", "\n", "# Creates graph from saved graph_def.pb.", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "pth", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "'FID_Inception_Net'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.fid._get_inception_layer": [[30, 48], ["sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name.graph.get_operations", "enumerate", "o.get_shape", "enumerate", "tensorflow.TensorShape", "new_shape.append", "new_shape.append"], "function", ["None"], ["", "", "def", "_get_inception_layer", "(", "sess", ")", ":", "\n", "    ", "\"\"\"Prepares inception net for batched usage and returns pool_3 layer. \"\"\"", "\n", "layername", "=", "'FID_Inception_Net/pool_3:0'", "\n", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "layername", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "            ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "if", "shape", ".", "_dims", "!=", "[", "]", "and", "(", "shape", ".", "_dims", "is", "not", "None", ")", ":", "\n", "                ", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "                    ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "                        ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                        ", "new_shape", ".", "append", "(", "s", ")", "\n", "", "", "o", ".", "__dict__", "[", "'_shape_val'", "]", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "\n", "", "", "", "return", "pool3", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.fid.get_activations": [[49, 82], ["fid._get_inception_layer", "numpy.empty", "range", "print", "sess.run", "sess.run.reshape", "print", "print"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.metrics.fid._get_inception_layer", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "get_activations", "(", "images", ",", "sess", ",", "batch_size", "=", "50", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n    Params:\n    -- images      : Numpy array of dimension (n_images, hi, wi, 3). The values\n                     must lie between 0 and 256.\n    -- sess        : current session\n    -- batch_size  : the images numpy array is split into batches with batch size\n                     batch_size. A reasonable batch size depends on the disposable hardware.\n    -- verbose    : If set to True and parameter out_step is given, the number of calculated\n                     batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, 2048) that contains the\n       activations of the given tensor when feeding inception with the query tensor.\n    \"\"\"", "\n", "inception_layer", "=", "_get_inception_layer", "(", "sess", ")", "\n", "d0", "=", "images", ".", "shape", "[", "0", "]", "\n", "if", "batch_size", ">", "d0", ":", "\n", "        ", "print", "(", "\"warning: batch size is bigger than the data size. setting batch size to data size\"", ")", "\n", "batch_size", "=", "d0", "\n", "", "n_batches", "=", "d0", "//", "batch_size", "\n", "n_used_imgs", "=", "n_batches", "*", "batch_size", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "n_used_imgs", ",", "2048", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"\\rPropagating batch %d/%d\"", "%", "(", "i", "+", "1", ",", "n_batches", ")", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "batch", "=", "images", "[", "start", ":", "end", "]", "\n", "pred", "=", "sess", ".", "run", "(", "inception_layer", ",", "{", "'FID_Inception_Net/ExpandDims:0'", ":", "batch", "}", ")", "\n", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\" done\"", ")", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.fid.calculate_frechet_distance": [[83, 133], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "warnings.warn", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n\n    Stable version by Dougal J. Sutherland.\n    Params:\n    -- mu1 : Numpy array containing the activations of the pool_3 layer of the\n             inception net ( like returned by the function 'get_predictions')\n             for generated samples.\n    -- mu2   : The sample mean over activations of the pool_3 layer, precalcualted\n               on an representive data set.\n    -- sigma1: The covariance matrix over activations of the pool_3 layer for\n               generated samples.\n    -- sigma2: The covariance matrix over activations of the pool_3 layer,\n               precalcualted on an representive data set.\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "\"Training and test mean vectors have different lengths\"", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "\"Training and test covariances have different dimensions\"", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "\"fid calculation produces singular product; adding %s to diagonal of cov estimates\"", "%", "eps", "\n", "warnings", ".", "warn", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "\"Imaginary component {}\"", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.fid.calculate_activation_statistics": [[134, 154], ["fid.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.get_activations"], ["", "def", "calculate_activation_statistics", "(", "images", ",", "sess", ",", "batch_size", "=", "50", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- images      : Numpy array of dimension (n_images, hi, wi, 3). The values\n                     must lie between 0 and 255.\n    -- sess        : current session\n    -- batch_size  : the images numpy array is split into batches with batch size\n                     batch_size. A reasonable batch size depends on the available hardware.\n    -- verbose     : If set to True and parameter out_step is given, the number of calculated\n                     batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the inception model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the inception model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "images", ",", "sess", ",", "batch_size", ",", "verbose", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.frechet_inception_distance.FID.__init__": [[21, 27], ["metrics.metric_base.MetricBase.__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_images", ",", "minibatch_per_gpu", ",", "ref_train", "=", "False", ",", "ref_samples", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_images", "=", "num_images", "\n", "self", ".", "minibatch_per_gpu", "=", "minibatch_per_gpu", "\n", "self", ".", "ref_train", "=", "ref_train", "\n", "self", ".", "ref_samples", "=", "num_images", "if", "ref_samples", "is", "None", "else", "ref_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.frechet_inception_distance.FID._evaluate": [[28, 79], ["training.misc.load_pkl", "numpy.empty", "frechet_inception_distance.FID._get_cache_file_for_reals", "os.makedirs", "os.path.isfile", "frechet_inception_distance.FID._configure", "range", "range", "numpy.mean", "numpy.cov", "numpy.square().sum", "scipy.linalg.sqrtm", "frechet_inception_distance.FID._report_result", "os.path.dirname", "training.misc.load_pkl", "numpy.empty", "enumerate", "numpy.mean", "numpy.cov", "training.misc.save_pkl", "frechet_inception_distance.FID._report_progress", "min", "numpy.dot", "numpy.trace", "numpy.real", "frechet_inception_distance.FID._iterate_reals", "min", "training.misc.load_pkl.run", "tensorflow.device", "Gs.clone", "training.misc.load_pkl.clone", "tensorflow.random_normal", "frechet_inception_distance.FID._get_minibatch_tf", "dnnlib.convert_images_from_uint8", "frechet_inception_distance.FID._get_random_masks_tf", "Gs.clone.get_output_for", "dnnlib.convert_images_to_uint8", "result_expr.append", "numpy.concatenate", "numpy.square", "misc.load_pkl.clone.get_output_for", "dnnlib.run"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.misc.load_pkl", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_cache_file_for_reals", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._configure", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.load_pkl", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.save_pkl", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._iterate_reals", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_minibatch_tf", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.convert_images_from_uint8", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_random_masks_tf", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.convert_images_to_uint8", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "_evaluate", "(", "self", ",", "Gs", ",", "Gs_kwargs", ",", "num_gpus", ")", ":", "\n", "        ", "minibatch_size", "=", "num_gpus", "*", "self", ".", "minibatch_per_gpu", "\n", "inception", "=", "misc", ".", "load_pkl", "(", "'https://drive.google.com/uc?id=1MzTY44rLToO5APn8TZmfR7_ENSe5aZUn'", ")", "# inception_v3_features.pkl", "\n", "activations", "=", "np", ".", "empty", "(", "[", "self", ".", "num_images", ",", "inception", ".", "output_shape", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Calculate statistics for reals.", "\n", "cache_file", "=", "self", ".", "_get_cache_file_for_reals", "(", "num_images", "=", "self", ".", "ref_samples", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "cache_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", ":", "\n", "            ", "mu_real", ",", "sigma_real", "=", "misc", ".", "load_pkl", "(", "cache_file", ")", "\n", "", "else", ":", "\n", "            ", "real_activations", "=", "np", ".", "empty", "(", "[", "self", ".", "ref_samples", ",", "inception", ".", "output_shape", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "idx", ",", "images", "in", "enumerate", "(", "self", ".", "_iterate_reals", "(", "minibatch_size", "=", "minibatch_size", ",", "is_training", "=", "self", ".", "ref_train", ")", ")", ":", "\n", "                ", "begin", "=", "idx", "*", "minibatch_size", "\n", "end", "=", "min", "(", "begin", "+", "minibatch_size", ",", "self", ".", "ref_samples", ")", "\n", "real_activations", "[", "begin", ":", "end", "]", "=", "inception", ".", "run", "(", "images", "[", ":", "end", "-", "begin", ",", ":", "3", "]", ",", "num_gpus", "=", "num_gpus", ",", "assume_frozen", "=", "True", ")", "\n", "if", "end", "==", "self", ".", "ref_samples", ":", "\n", "                    ", "break", "\n", "", "", "mu_real", "=", "np", ".", "mean", "(", "real_activations", ",", "axis", "=", "0", ")", "\n", "sigma_real", "=", "np", ".", "cov", "(", "real_activations", ",", "rowvar", "=", "False", ")", "\n", "misc", ".", "save_pkl", "(", "(", "mu_real", ",", "sigma_real", ")", ",", "cache_file", ")", "\n", "\n", "# Construct TensorFlow graph.", "\n", "", "self", ".", "_configure", "(", "self", ".", "minibatch_per_gpu", ")", "\n", "result_expr", "=", "[", "]", "\n", "for", "gpu_idx", "in", "range", "(", "num_gpus", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "gpu_idx", ")", ":", "\n", "                ", "Gs_clone", "=", "Gs", ".", "clone", "(", ")", "\n", "inception_clone", "=", "inception", ".", "clone", "(", ")", "\n", "latents", "=", "tf", ".", "random_normal", "(", "[", "self", ".", "minibatch_per_gpu", "]", "+", "Gs_clone", ".", "input_shape", "[", "1", ":", "]", ")", "\n", "reals", ",", "labels", "=", "self", ".", "_get_minibatch_tf", "(", ")", "\n", "reals", "=", "tflib", ".", "convert_images_from_uint8", "(", "reals", ")", "\n", "masks", "=", "self", ".", "_get_random_masks_tf", "(", ")", "\n", "images", "=", "Gs_clone", ".", "get_output_for", "(", "latents", ",", "labels", ",", "reals", ",", "masks", ",", "**", "Gs_kwargs", ")", "\n", "images", "=", "images", "[", ":", ",", ":", "3", "]", "\n", "images", "=", "tflib", ".", "convert_images_to_uint8", "(", "images", ")", "\n", "result_expr", ".", "append", "(", "inception_clone", ".", "get_output_for", "(", "images", ")", ")", "\n", "\n", "# Calculate statistics for fakes.", "\n", "", "", "for", "begin", "in", "range", "(", "0", ",", "self", ".", "num_images", ",", "minibatch_size", ")", ":", "\n", "            ", "self", ".", "_report_progress", "(", "begin", ",", "self", ".", "num_images", ")", "\n", "end", "=", "min", "(", "begin", "+", "minibatch_size", ",", "self", ".", "num_images", ")", "\n", "activations", "[", "begin", ":", "end", "]", "=", "np", ".", "concatenate", "(", "tflib", ".", "run", "(", "result_expr", ")", ",", "axis", "=", "0", ")", "[", ":", "end", "-", "begin", "]", "\n", "", "mu_fake", "=", "np", ".", "mean", "(", "activations", ",", "axis", "=", "0", ")", "\n", "sigma_fake", "=", "np", ".", "cov", "(", "activations", ",", "rowvar", "=", "False", ")", "\n", "\n", "# Calculate FID.", "\n", "m", "=", "np", ".", "square", "(", "mu_fake", "-", "mu_real", ")", ".", "sum", "(", ")", "\n", "s", ",", "_", "=", "scipy", ".", "linalg", ".", "sqrtm", "(", "np", ".", "dot", "(", "sigma_fake", ",", "sigma_real", ")", ",", "disp", "=", "False", ")", "# pylint: disable=no-member", "\n", "dist", "=", "m", "+", "np", ".", "trace", "(", "sigma_fake", "+", "sigma_real", "-", "2", "*", "s", ")", "\n", "self", ".", "_report_result", "(", "np", ".", "real", "(", "dist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase.__init__": [[24, 33], ["metric_base.MetricBase._reset"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._reset"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "_dataset_obj", "=", "None", "\n", "self", ".", "_progress_lo", "=", "None", "\n", "self", ".", "_progress_hi", "=", "None", "\n", "self", ".", "_progress_max", "=", "None", "\n", "self", ".", "_progress_sec", "=", "None", "\n", "self", ".", "_progress_time", "=", "None", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase.close": [[34, 36], ["metric_base.MetricBase._reset"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._reset"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._reset": [[37, 54], ["metric_base.MetricBase._dataset_obj.close", "training.misc.parse_config_for_previous_run", "dict", "run_config[].get"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.parse_config_for_previous_run", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get"], ["", "def", "_reset", "(", "self", ",", "network_pkl", "=", "None", ",", "run_dir", "=", "None", ",", "data_dir", "=", "None", ",", "dataset_args", "=", "None", ",", "mirror_augment", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "_dataset_obj", "is", "not", "None", ":", "\n", "            ", "self", ".", "_dataset_obj", ".", "close", "(", ")", "\n", "\n", "", "self", ".", "_network_pkl", "=", "network_pkl", "\n", "self", ".", "_data_dir", "=", "data_dir", "\n", "self", ".", "_dataset_args", "=", "dataset_args", "\n", "self", ".", "_dataset_obj", "=", "None", "\n", "self", ".", "_mirror_augment", "=", "mirror_augment", "\n", "self", ".", "_eval_time", "=", "0", "\n", "self", ".", "_results", "=", "[", "]", "\n", "\n", "if", "(", "dataset_args", "is", "None", "or", "mirror_augment", "is", "None", ")", "and", "run_dir", "is", "not", "None", ":", "\n", "            ", "run_config", "=", "misc", ".", "parse_config_for_previous_run", "(", "run_dir", ")", "\n", "self", ".", "_dataset_args", "=", "dict", "(", "run_config", "[", "'dataset'", "]", ")", "\n", "self", ".", "_dataset_args", "[", "'shuffle_mb'", "]", "=", "0", "\n", "self", ".", "_mirror_augment", "=", "run_config", "[", "'train'", "]", ".", "get", "(", "'mirror_augment'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase.configure_progress_reports": [[55, 60], ["None"], "methods", ["None"], ["", "", "def", "configure_progress_reports", "(", "self", ",", "plo", ",", "phi", ",", "pmax", ",", "psec", "=", "15", ")", ":", "\n", "        ", "self", ".", "_progress_lo", "=", "plo", "\n", "self", ".", "_progress_hi", "=", "phi", "\n", "self", ".", "_progress_max", "=", "pmax", "\n", "self", ".", "_progress_sec", "=", "psec", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase.run": [[61, 110], ["dict", "metric_base.MetricBase._reset", "tensorflow.Graph().as_default", "dnnlib.create_session().as_default", "dnnlib.create_session().as_default", "metric_base.MetricBase._report_progress", "training.misc.load_pkl", "metric_base.MetricBase._get_dataset_obj", "dnnlib.tflib.Network", "dnnlib.tflib.Network", "dnnlib.tflib.Network", "dnnlib.tflib.Network", "dnnlib.tflib.Network.clone", "dnnlib.tflib.Network.clone", "dnnlib.tflib.Network.clone.copy_vars_from", "print", "time.time", "Gs_kwargs.update", "metric_base.MetricBase._evaluate", "metric_base.MetricBase._report_progress", "tensorflow.Graph", "dnnlib.create_session", "dnnlib.create_session", "range", "time.time", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "print", "metric_base.MetricBase._report_progress", "metric_base.MetricBase._evaluate", "metric_base.MetricBase._report_progress", "zip", "metric_base.MetricBase._report_result", "metric_base.MetricBase._report_result", "os.path.join", "print", "metric_base.MetricBase.get_result_str().strip", "rec.value.append", "numpy.mean", "numpy.std", "dnnlib.util.Logger", "dnnlib.util.Logger", "dnnlib.util.Logger", "dnnlib.util.Logger", "print", "metric_base.MetricBase.get_result_str().strip", "metric_base.MetricBase.get_result_str().strip", "metric_base.MetricBase.get_result_str", "metric_base.MetricBase.get_result_str", "metric_base.MetricBase.get_result_str"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._reset", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.load_pkl", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_dataset_obj", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.copy_vars_from", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception_discriminative_score.IDS._evaluate", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.create_session", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.create_session", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception_discriminative_score.IDS._evaluate", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricGroup.get_result_str", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricGroup.get_result_str", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricGroup.get_result_str"], ["", "def", "run", "(", "self", ",", "network_pkl", ",", "run_dir", "=", "None", ",", "data_dir", "=", "None", ",", "dataset_args", "=", "None", ",", "mirror_augment", "=", "None", ",", "num_gpus", "=", "1", ",", "tf_config", "=", "None", ",", "log_results", "=", "True", ",", "\n", "num_repeats", "=", "1", ",", "Gs_kwargs", "=", "dict", "(", "is_validation", "=", "True", ")", ",", "resume_with_new_nets", "=", "False", ",", "truncations", "=", "[", "None", "]", ")", ":", "\n", "        ", "self", ".", "_reset", "(", "network_pkl", "=", "network_pkl", ",", "run_dir", "=", "run_dir", ",", "data_dir", "=", "data_dir", ",", "dataset_args", "=", "dataset_args", ",", "mirror_augment", "=", "mirror_augment", ")", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ",", "tflib", ".", "create_session", "(", "tf_config", ")", ".", "as_default", "(", ")", ":", "# pylint: disable=not-context-manager", "\n", "            ", "self", ".", "_report_progress", "(", "0", ",", "1", ")", "\n", "_G", ",", "_D", ",", "Gs", "=", "misc", ".", "load_pkl", "(", "self", ".", "_network_pkl", ")", "\n", "\n", "if", "resume_with_new_nets", ":", "\n", "                ", "dataset", "=", "self", ".", "_get_dataset_obj", "(", ")", "\n", "G", "=", "dnnlib", ".", "tflib", ".", "Network", "(", "'G'", ",", "num_channels", "=", "dataset", ".", "shape", "[", "0", "]", ",", "resolution", "=", "dataset", ".", "shape", "[", "1", "]", ",", "label_size", "=", "dataset", ".", "label_size", ",", "\n", "func_name", "=", "'training.co_mod_gan.G_main'", ",", "pix2pix", "=", "dataset", ".", "pix2pix", ")", "\n", "Gs_new", "=", "G", ".", "clone", "(", "'Gs'", ")", "\n", "Gs_new", ".", "copy_vars_from", "(", "Gs", ")", "\n", "Gs", "=", "Gs_new", "\n", "\n", "", "for", "t", "in", "truncations", ":", "\n", "                ", "print", "(", "'truncation={}'", ".", "format", "(", "t", ")", ")", "\n", "self", ".", "_results", "=", "[", "]", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "\n", "Gs_kwargs", ".", "update", "(", "truncation_psi_val", "=", "t", ")", "\n", "self", ".", "_evaluate", "(", "Gs", ",", "Gs_kwargs", "=", "Gs_kwargs", ",", "num_gpus", "=", "num_gpus", ")", "\n", "self", ".", "_report_progress", "(", "1", ",", "1", ")", "\n", "\n", "if", "num_repeats", ">", "1", ":", "\n", "                    ", "records", "=", "[", "dnnlib", ".", "EasyDict", "(", "value", "=", "[", "res", ".", "value", "]", ",", "suffix", "=", "res", ".", "suffix", ",", "fmt", "=", "res", ".", "fmt", ")", "for", "res", "in", "self", ".", "_results", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "num_repeats", ")", ":", "\n", "                        ", "print", "(", "self", ".", "get_result_str", "(", ")", ".", "strip", "(", ")", ")", "\n", "self", ".", "_results", "=", "[", "]", "\n", "self", ".", "_report_progress", "(", "0", ",", "1", ")", "\n", "self", ".", "_evaluate", "(", "Gs", ",", "Gs_kwargs", "=", "Gs_kwargs", ",", "num_gpus", "=", "num_gpus", ")", "\n", "self", ".", "_report_progress", "(", "1", ",", "1", ")", "\n", "for", "rec", ",", "res", "in", "zip", "(", "records", ",", "self", ".", "_results", ")", ":", "\n", "                            ", "rec", ".", "value", ".", "append", "(", "res", ".", "value", ")", "\n", "\n", "", "", "self", ".", "_results", "=", "[", "]", "\n", "for", "rec", "in", "records", ":", "\n", "                        ", "self", ".", "_report_result", "(", "np", ".", "mean", "(", "rec", ".", "value", ")", ",", "rec", ".", "suffix", ",", "rec", ".", "fmt", ")", "\n", "self", ".", "_report_result", "(", "np", ".", "std", "(", "rec", ".", "value", ")", ",", "rec", ".", "suffix", "+", "'-std'", ",", "rec", ".", "fmt", ")", "\n", "\n", "", "", "self", ".", "_eval_time", "=", "time", ".", "time", "(", ")", "-", "time_begin", "# pylint: disable=attribute-defined-outside-init", "\n", "\n", "if", "log_results", ":", "\n", "                    ", "if", "run_dir", "is", "not", "None", ":", "\n", "                        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "run_dir", ",", "'metric-%s.txt'", "%", "self", ".", "name", ")", "\n", "with", "dnnlib", ".", "util", ".", "Logger", "(", "log_file", ",", "'a'", ")", ":", "\n", "                            ", "print", "(", "self", ".", "get_result_str", "(", ")", ".", "strip", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "print", "(", "self", ".", "get_result_str", "(", ")", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase.get_result_str": [[111, 121], ["os.path.splitext", "len", "dnnlib.util.format_time", "dnnlib.util.format_time", "dnnlib.util.format_time", "dnnlib.util.format_time", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.format_time", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.format_time", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.format_time", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.format_time"], ["", "", "", "", "", "def", "get_result_str", "(", "self", ")", ":", "\n", "        ", "network_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "self", ".", "_network_pkl", ")", ")", "[", "0", "]", "\n", "if", "len", "(", "network_name", ")", ">", "29", ":", "\n", "            ", "network_name", "=", "'...'", "+", "network_name", "[", "-", "26", ":", "]", "\n", "", "result_str", "=", "'%-30s'", "%", "network_name", "\n", "result_str", "+=", "' time %-12s'", "%", "dnnlib", ".", "util", ".", "format_time", "(", "self", ".", "_eval_time", ")", "\n", "for", "res", "in", "self", ".", "_results", ":", "\n", "            ", "result_str", "+=", "' '", "+", "self", ".", "name", "+", "res", ".", "suffix", "+", "' '", "\n", "result_str", "+=", "res", ".", "fmt", "%", "res", ".", "value", "\n", "", "return", "result_str", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase.update_autosummaries": [[122, 125], ["dnnlib.autosummary.autosummary", "dnnlib.autosummary.autosummary"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary"], ["", "def", "update_autosummaries", "(", "self", ")", ":", "\n", "        ", "for", "res", "in", "self", ".", "_results", ":", "\n", "            ", "tflib", ".", "autosummary", ".", "autosummary", "(", "'Metrics/'", "+", "self", ".", "name", "+", "res", ".", "suffix", ",", "res", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._evaluate": [[126, 128], ["None"], "methods", ["None"], ["", "", "def", "_evaluate", "(", "self", ",", "Gs", ",", "Gs_kwargs", ",", "num_gpus", ")", ":", "\n", "        ", "raise", "NotImplementedError", "# to be overridden by subclasses", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_result": [[129, 131], ["dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict"], "methods", ["None"], ["", "def", "_report_result", "(", "self", ",", "value", ",", "suffix", "=", "''", ",", "fmt", "=", "'%-10.4f'", ")", ":", "\n", "        ", "self", ".", "_results", "+=", "[", "dnnlib", ".", "EasyDict", "(", "value", "=", "value", ",", "suffix", "=", "suffix", ",", "fmt", "=", "fmt", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_progress": [[132, 141], ["time.time", "dnnlib.RunContext.get().update", "dnnlib.RunContext.get().update", "dnnlib.RunContext.get().update", "dnnlib.RunContext.get().update", "int", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.RunContext.get"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get"], ["", "def", "_report_progress", "(", "self", ",", "pcur", ",", "pmax", ",", "status_str", "=", "''", ")", ":", "\n", "        ", "if", "self", ".", "_progress_lo", "is", "None", "or", "self", ".", "_progress_hi", "is", "None", "or", "self", ".", "_progress_max", "is", "None", ":", "\n", "            ", "return", "\n", "", "t", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "_progress_sec", "is", "not", "None", "and", "self", ".", "_progress_time", "is", "not", "None", "and", "t", "<", "self", ".", "_progress_time", "+", "self", ".", "_progress_sec", ":", "\n", "            ", "return", "\n", "", "self", ".", "_progress_time", "=", "t", "\n", "val", "=", "self", ".", "_progress_lo", "+", "(", "pcur", "/", "pmax", ")", "*", "(", "self", ".", "_progress_hi", "-", "self", ".", "_progress_lo", ")", "\n", "dnnlib", ".", "RunContext", ".", "get", "(", ")", ".", "update", "(", "status_str", ",", "int", "(", "val", ")", ",", "self", ".", "_progress_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_cache_file_for_reals": [[142, 150], ["dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict.update", "dnnlib.EasyDict.update", "dnnlib.EasyDict.update", "dnnlib.EasyDict.update", "hashlib.md5", "os.path.join", "repr().encode", "metric_base.MetricBase._dataset_args.get", "metric_base.MetricBase._dataset_args.get", "os.path.splitext", "os.path.basename", "repr", "hashlib.md5.hexdigest", "sorted", "dnnlib.EasyDict.items", "dnnlib.EasyDict.items"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get"], ["", "def", "_get_cache_file_for_reals", "(", "self", ",", "extension", "=", "'pkl'", ",", "**", "kwargs", ")", ":", "\n", "        ", "all_args", "=", "dnnlib", ".", "EasyDict", "(", "metric_name", "=", "self", ".", "name", ",", "mirror_augment", "=", "self", ".", "_mirror_augment", ")", "\n", "all_args", ".", "update", "(", "self", ".", "_dataset_args", ")", "\n", "all_args", ".", "update", "(", "kwargs", ")", "\n", "md5", "=", "hashlib", ".", "md5", "(", "repr", "(", "sorted", "(", "all_args", ".", "items", "(", ")", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "dataset_name", "=", "self", ".", "_dataset_args", ".", "get", "(", "'tfrecord_dir'", ",", "None", ")", "or", "self", ".", "_dataset_args", ".", "get", "(", "'h5_file'", ",", "None", ")", "\n", "dataset_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "dataset_name", ")", ")", "[", "0", "]", "\n", "return", "os", ".", "path", ".", "join", "(", "'.stylegan2-cache'", ",", "'%s-%s-%s.%s'", "%", "(", "md5", ".", "hexdigest", "(", ")", ",", "self", ".", "name", ",", "dataset_name", ",", "extension", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_dataset_obj": [[151, 155], ["training.dataset.load_dataset"], "methods", ["None"], ["", "def", "_get_dataset_obj", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_dataset_obj", "is", "None", ":", "\n", "            ", "self", ".", "_dataset_obj", "=", "dataset", ".", "load_dataset", "(", "data_dir", "=", "self", ".", "_data_dir", ",", "**", "self", ".", "_dataset_args", ")", "\n", "", "return", "self", ".", "_dataset_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._iterate_reals": [[156, 166], ["metric_base.MetricBase._get_dataset_obj", "metric_base.MetricBase.get_minibatch_np", "metric_base.MetricBase.get_minibatch_val_np", "training.misc.apply_mirror_augment"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_dataset_obj", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_np", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_val_np", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.apply_mirror_augment"], ["", "def", "_iterate_reals", "(", "self", ",", "minibatch_size", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "dataset_obj", "=", "self", ".", "_get_dataset_obj", "(", ")", "\n", "while", "True", ":", "\n", "            ", "if", "is_training", ":", "\n", "                ", "images", ",", "_labels", "=", "dataset_obj", ".", "get_minibatch_np", "(", "minibatch_size", ")", "\n", "", "else", ":", "\n", "                ", "images", ",", "_labels", "=", "dataset_obj", ".", "get_minibatch_val_np", "(", "minibatch_size", ")", "\n", "", "if", "self", ".", "_mirror_augment", ":", "\n", "                ", "images", "=", "misc", ".", "apply_mirror_augment", "(", "images", ")", "\n", "", "yield", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._configure": [[167, 169], ["metric_base.MetricBase._get_dataset_obj().configure", "metric_base.MetricBase._get_dataset_obj"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.configure", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_dataset_obj"], ["", "", "def", "_configure", "(", "self", ",", "minibatch_size", ",", "hole_range", "=", "[", "0", ",", "1", "]", ")", ":", "\n", "        ", "return", "self", ".", "_get_dataset_obj", "(", ")", ".", "configure", "(", "minibatch_size", ",", "hole_range", "=", "hole_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_minibatch_tf": [[170, 172], ["metric_base.MetricBase._get_dataset_obj().get_minibatch_val_tf", "metric_base.MetricBase._get_dataset_obj"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_val_tf", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_dataset_obj"], ["", "def", "_get_minibatch_tf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_dataset_obj", "(", ")", ".", "get_minibatch_val_tf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_random_masks_tf": [[173, 175], ["metric_base.MetricBase._get_dataset_obj().get_random_masks_tf", "metric_base.MetricBase._get_dataset_obj"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_masks_tf", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_dataset_obj"], ["", "def", "_get_random_masks_tf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_dataset_obj", "(", ")", ".", "get_random_masks_tf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_random_labels_tf": [[176, 178], ["metric_base.MetricBase._get_dataset_obj().get_random_labels_tf", "metric_base.MetricBase._get_dataset_obj"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_labels_tf", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_dataset_obj"], ["", "def", "_get_random_labels_tf", "(", "self", ",", "minibatch_size", ")", ":", "\n", "        ", "return", "self", ".", "_get_dataset_obj", "(", ")", ".", "get_random_labels_tf", "(", "minibatch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricGroup.__init__": [[183, 185], ["dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.call_func_by_name"], ["    ", "def", "__init__", "(", "self", ",", "metric_kwarg_list", ")", ":", "\n", "        ", "self", ".", "metrics", "=", "[", "dnnlib", ".", "util", ".", "call_func_by_name", "(", "**", "kwargs", ")", "for", "kwargs", "in", "metric_kwarg_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricGroup.run": [[186, 189], ["metric.run"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "run", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "metric", "in", "self", ".", "metrics", ":", "\n", "            ", "metric", ".", "run", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricGroup.get_result_str": [[190, 192], ["metric.get_result_str"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricGroup.get_result_str"], ["", "", "def", "get_result_str", "(", "self", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "metric", ".", "get_result_str", "(", ")", "for", "metric", "in", "self", ".", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricGroup.update_autosummaries": [[193, 196], ["metric.update_autosummaries"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricGroup.update_autosummaries"], ["", "def", "update_autosummaries", "(", "self", ")", ":", "\n", "        ", "for", "metric", "in", "self", ".", "metrics", ":", "\n", "            ", "metric", ".", "update_autosummaries", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.DummyMetric._evaluate": [[201, 204], ["metric_base.DummyMetric._report_result"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_result"], ["    ", "def", "_evaluate", "(", "self", ",", "Gs", ",", "Gs_kwargs", ",", "num_gpus", ")", ":", "\n", "        ", "_", "=", "Gs", ",", "Gs_kwargs", ",", "num_gpus", "\n", "self", ".", "_report_result", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.learned_perceptual_image_patch_similarity.LPIPS.__init__": [[16, 20], ["metrics.metric_base.MetricBase.__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_pairs", "=", "2000", ",", "minibatch_per_gpu", "=", "8", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_pairs", "=", "num_pairs", "\n", "self", ".", "minibatch_per_gpu", "=", "minibatch_per_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.learned_perceptual_image_patch_similarity.LPIPS._evaluate": [[21, 67], ["tensorflow.GraphDef", "learned_perceptual_image_patch_similarity.LPIPS._configure", "range", "range", "numpy.concatenate", "learned_perceptual_image_patch_similarity.LPIPS._report_result", "learned_perceptual_image_patch_similarity.LPIPS._report_result", "training.misc.open_file_or_url", "tensorflow.GraphDef.ParseFromString", "learned_perceptual_image_patch_similarity.LPIPS._report_progress", "dnnlib.run", "numpy.concatenate.append", "numpy.mean", "numpy.std", "f.read", "tensorflow.device", "Gs.clone", "learned_perceptual_image_patch_similarity.LPIPS._get_minibatch_tf", "dnnlib.convert_images_from_uint8", "learned_perceptual_image_patch_similarity.LPIPS._get_random_masks_tf", "tensorflow.random_normal", "tensorflow.clip_by_value", "tensorflow.random_normal", "tensorflow.clip_by_value", "tensorflow.import_graph_def", "result_expr.append", "numpy.reshape", "Gs.clone.get_output_for", "Gs.clone.get_output_for"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._configure", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.open_file_or_url", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_minibatch_tf", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.convert_images_from_uint8", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_random_masks_tf", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for"], ["", "def", "_evaluate", "(", "self", ",", "Gs", ",", "Gs_kwargs", ",", "num_gpus", ")", ":", "\n", "        ", "minibatch_size", "=", "num_gpus", "*", "self", ".", "minibatch_per_gpu", "\n", "\n", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "with", "misc", ".", "open_file_or_url", "(", "'http://rail.eecs.berkeley.edu/models/lpips/net-lin_alex_v0.1.pb'", ")", "as", "f", ":", "\n", "            ", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "# Construct TensorFlow graph.", "\n", "", "self", ".", "_configure", "(", "self", ".", "minibatch_per_gpu", ")", "\n", "result_expr", "=", "[", "]", "\n", "for", "gpu_idx", "in", "range", "(", "num_gpus", ")", ":", "\n", "            ", "def", "auto_gpu", "(", "opr", ")", ":", "\n", "                ", "if", "opr", ".", "type", "in", "[", "'SparseToDense'", ",", "'Tile'", ",", "'GatherV2'", ",", "'Pack'", "]", ":", "\n", "                    ", "return", "'/cpu:0'", "\n", "", "else", ":", "\n", "                    ", "return", "'/gpu:%d'", "%", "gpu_idx", "\n", "", "", "with", "tf", ".", "device", "(", "auto_gpu", ")", ":", "\n", "                ", "Gs_clone", "=", "Gs", ".", "clone", "(", ")", "\n", "reals", ",", "labels", "=", "self", ".", "_get_minibatch_tf", "(", ")", "\n", "reals", "=", "tflib", ".", "convert_images_from_uint8", "(", "reals", ")", "\n", "masks", "=", "self", ".", "_get_random_masks_tf", "(", ")", "\n", "\n", "latents0", "=", "tf", ".", "random_normal", "(", "[", "self", ".", "minibatch_per_gpu", "]", "+", "Gs_clone", ".", "input_shape", "[", "1", ":", "]", ")", "\n", "fakes0", "=", "Gs_clone", ".", "get_output_for", "(", "latents0", ",", "labels", ",", "reals", ",", "masks", ",", "**", "Gs_kwargs", ")", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "fakes0", "=", "tf", ".", "clip_by_value", "(", "fakes0", ",", "-", "1.0", ",", "1.0", ")", "\n", "\n", "latents1", "=", "tf", ".", "random_normal", "(", "[", "self", ".", "minibatch_per_gpu", "]", "+", "Gs_clone", ".", "input_shape", "[", "1", ":", "]", ")", "\n", "fakes1", "=", "Gs_clone", ".", "get_output_for", "(", "latents1", ",", "labels", ",", "reals", ",", "masks", ",", "**", "Gs_kwargs", ")", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "fakes1", "=", "tf", ".", "clip_by_value", "(", "fakes1", ",", "-", "1.0", ",", "1.0", ")", "\n", "\n", "distance", ",", "=", "tf", ".", "import_graph_def", "(", "\n", "graph_def", ",", "\n", "input_map", "=", "{", "'0:0'", ":", "fakes0", ",", "'1:0'", ":", "fakes1", "}", ",", "\n", "return_elements", "=", "[", "'Reshape_10'", "]", "\n", ")", "\n", "result_expr", ".", "append", "(", "distance", ".", "outputs", ")", "\n", "\n", "# Run metric", "\n", "", "", "results", "=", "[", "]", "\n", "for", "begin", "in", "range", "(", "0", ",", "self", ".", "num_pairs", ",", "minibatch_size", ")", ":", "\n", "            ", "self", ".", "_report_progress", "(", "begin", ",", "self", ".", "num_pairs", ")", "\n", "res", "=", "tflib", ".", "run", "(", "result_expr", ")", "\n", "results", ".", "append", "(", "np", ".", "reshape", "(", "res", ",", "[", "-", "1", "]", ")", ")", "\n", "", "results", "=", "np", ".", "concatenate", "(", "results", ")", "\n", "self", ".", "_report_result", "(", "np", ".", "mean", "(", "results", ")", ")", "\n", "self", ".", "_report_result", "(", "np", ".", "std", "(", "results", ")", ",", "suffix", "=", "'-var'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception_discriminative_score.IDS.__init__": [[22, 27], ["metrics.metric_base.MetricBase.__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_images", ",", "minibatch_per_gpu", ",", "hole_range", "=", "[", "0", ",", "1", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_images", "=", "num_images", "\n", "self", ".", "minibatch_per_gpu", "=", "minibatch_per_gpu", "\n", "self", ".", "hole_range", "=", "hole_range", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception_discriminative_score.IDS._evaluate": [[28, 81], ["training.misc.load_pkl", "numpy.empty", "numpy.empty", "inception_discriminative_score.IDS._configure", "range", "tqdm.tqdm.tqdm", "numpy.mean", "numpy.cov", "numpy.mean", "numpy.cov", "numpy.square().sum", "scipy.linalg.sqrtm", "inception_discriminative_score.IDS._report_result", "sklearn.svm.LinearSVC", "numpy.concatenate", "numpy.array", "sklearn.svm.LinearSVC.fit", "inception_discriminative_score.IDS._report_result", "sklearn.svm.LinearSVC.decision_function", "sklearn.svm.LinearSVC.decision_function", "inception_discriminative_score.IDS._report_result", "range", "inception_discriminative_score.IDS._report_progress", "min", "dnnlib.run", "dnnlib.run", "numpy.dot", "numpy.trace", "numpy.real", "numpy.mean", "tensorflow.device", "Gs.clone", "training.misc.load_pkl.clone", "tensorflow.random_normal", "inception_discriminative_score.IDS._get_minibatch_tf", "dnnlib.convert_images_from_uint8", "dnnlib.convert_images_from_uint8", "inception_discriminative_score.IDS._get_random_masks_tf", "Gs.clone.get_output_for", "dnnlib.convert_images_to_uint8", "dnnlib.convert_images_to_uint8", "dnnlib.convert_images_to_uint8", "dnnlib.convert_images_to_uint8", "real_img_expr.append", "fake_img_expr.append", "real_result_expr.append", "fake_result_expr.append", "numpy.concatenate", "numpy.concatenate", "numpy.square", "sklearn.svm.LinearSVC.score", "misc.load_pkl.clone.get_output_for", "misc.load_pkl.clone.get_output_for"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.misc.load_pkl", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._configure", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_minibatch_tf", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.convert_images_from_uint8", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.convert_images_from_uint8", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricBase._get_random_masks_tf", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.convert_images_to_uint8", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.convert_images_to_uint8", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.convert_images_to_uint8", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.convert_images_to_uint8", "home.repos.pwc.inspect_result.plai-group_ipa.modules.attention.DistanceAttender.score", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for"], ["", "def", "_evaluate", "(", "self", ",", "Gs", ",", "Gs_kwargs", ",", "num_gpus", ")", ":", "\n", "        ", "minibatch_size", "=", "num_gpus", "*", "self", ".", "minibatch_per_gpu", "\n", "inception", "=", "misc", ".", "load_pkl", "(", "'https://drive.google.com/uc?id=1MzTY44rLToO5APn8TZmfR7_ENSe5aZUn'", ")", "# inception_v3_features.pkl", "\n", "real_activations", "=", "np", ".", "empty", "(", "[", "self", ".", "num_images", ",", "inception", ".", "output_shape", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fake_activations", "=", "np", ".", "empty", "(", "[", "self", ".", "num_images", ",", "inception", ".", "output_shape", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Construct TensorFlow graph.", "\n", "self", ".", "_configure", "(", "self", ".", "minibatch_per_gpu", ",", "hole_range", "=", "self", ".", "hole_range", ")", "\n", "real_img_expr", "=", "[", "]", "\n", "fake_img_expr", "=", "[", "]", "\n", "real_result_expr", "=", "[", "]", "\n", "fake_result_expr", "=", "[", "]", "\n", "for", "gpu_idx", "in", "range", "(", "num_gpus", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "gpu_idx", ")", ":", "\n", "                ", "Gs_clone", "=", "Gs", ".", "clone", "(", ")", "\n", "inception_clone", "=", "inception", ".", "clone", "(", ")", "\n", "latents", "=", "tf", ".", "random_normal", "(", "[", "self", ".", "minibatch_per_gpu", "]", "+", "Gs_clone", ".", "input_shape", "[", "1", ":", "]", ")", "\n", "reals", ",", "labels", "=", "self", ".", "_get_minibatch_tf", "(", ")", "\n", "reals_tf", "=", "tflib", ".", "convert_images_from_uint8", "(", "reals", ")", "\n", "masks", "=", "self", ".", "_get_random_masks_tf", "(", ")", "\n", "fakes", "=", "Gs_clone", ".", "get_output_for", "(", "latents", ",", "labels", ",", "reals_tf", ",", "masks", ",", "**", "Gs_kwargs", ")", "\n", "fakes", "=", "tflib", ".", "convert_images_to_uint8", "(", "fakes", "[", ":", ",", ":", "3", "]", ")", "\n", "reals", "=", "tflib", ".", "convert_images_to_uint8", "(", "reals_tf", "[", ":", ",", ":", "3", "]", ")", "\n", "real_img_expr", ".", "append", "(", "reals", ")", "\n", "fake_img_expr", ".", "append", "(", "fakes", ")", "\n", "real_result_expr", ".", "append", "(", "inception_clone", ".", "get_output_for", "(", "reals", ")", ")", "\n", "fake_result_expr", ".", "append", "(", "inception_clone", ".", "get_output_for", "(", "fakes", ")", ")", "\n", "\n", "", "", "for", "begin", "in", "tqdm", "(", "range", "(", "0", ",", "self", ".", "num_images", ",", "minibatch_size", ")", ")", ":", "\n", "            ", "self", ".", "_report_progress", "(", "begin", ",", "self", ".", "num_images", ")", "\n", "end", "=", "min", "(", "begin", "+", "minibatch_size", ",", "self", ".", "num_images", ")", "\n", "real_results", ",", "fake_results", "=", "tflib", ".", "run", "(", "[", "real_result_expr", ",", "fake_result_expr", "]", ")", "\n", "real_activations", "[", "begin", ":", "end", "]", "=", "np", ".", "concatenate", "(", "real_results", ",", "axis", "=", "0", ")", "[", ":", "end", "-", "begin", "]", "\n", "fake_activations", "[", "begin", ":", "end", "]", "=", "np", ".", "concatenate", "(", "fake_results", ",", "axis", "=", "0", ")", "[", ":", "end", "-", "begin", "]", "\n", "\n", "# Calculate FID conviniently.", "\n", "", "mu_real", "=", "np", ".", "mean", "(", "real_activations", ",", "axis", "=", "0", ")", "\n", "sigma_real", "=", "np", ".", "cov", "(", "real_activations", ",", "rowvar", "=", "False", ")", "\n", "mu_fake", "=", "np", ".", "mean", "(", "fake_activations", ",", "axis", "=", "0", ")", "\n", "sigma_fake", "=", "np", ".", "cov", "(", "fake_activations", ",", "rowvar", "=", "False", ")", "\n", "m", "=", "np", ".", "square", "(", "mu_fake", "-", "mu_real", ")", ".", "sum", "(", ")", "\n", "s", ",", "_", "=", "scipy", ".", "linalg", ".", "sqrtm", "(", "np", ".", "dot", "(", "sigma_fake", ",", "sigma_real", ")", ",", "disp", "=", "False", ")", "\n", "dist", "=", "m", "+", "np", ".", "trace", "(", "sigma_fake", "+", "sigma_real", "-", "2", "*", "s", ")", "\n", "self", ".", "_report_result", "(", "np", ".", "real", "(", "dist", ")", ",", "suffix", "=", "'-FID'", ")", "\n", "\n", "svm", "=", "sklearn", ".", "svm", ".", "LinearSVC", "(", "dual", "=", "False", ")", "\n", "svm_inputs", "=", "np", ".", "concatenate", "(", "[", "real_activations", ",", "fake_activations", "]", ")", "\n", "svm_targets", "=", "np", ".", "array", "(", "[", "1", "]", "*", "real_activations", ".", "shape", "[", "0", "]", "+", "[", "0", "]", "*", "fake_activations", ".", "shape", "[", "0", "]", ")", "\n", "svm", ".", "fit", "(", "svm_inputs", ",", "svm_targets", ")", "\n", "self", ".", "_report_result", "(", "1", "-", "svm", ".", "score", "(", "svm_inputs", ",", "svm_targets", ")", ",", "suffix", "=", "'-U'", ")", "\n", "real_outputs", "=", "svm", ".", "decision_function", "(", "real_activations", ")", "\n", "fake_outputs", "=", "svm", ".", "decision_function", "(", "fake_activations", ")", "\n", "self", ".", "_report_result", "(", "np", ".", "mean", "(", "fake_outputs", ">", "real_outputs", ")", ",", "suffix", "=", "'-P'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception.FakeData.__init__": [[20, 26], ["torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ",", "N", "=", "1000", ",", "batch_size", "=", "32", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "number_sampled", "=", "0", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "sample_shape", "=", "torch", ".", "Size", "(", "[", "batch_size", "]", ")", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception.FakeData.__iter__": [[26, 29], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "number_sampled", "=", "0", "\n", "return", "self", "\n", "", "def", "__next__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception.FakeData.__next__": [[29, 36], ["min", "inception.FakeData.p.sample", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "number_sampled", "<", "self", ".", "N", ":", "\n", "            ", "batch_size", "=", "min", "(", "self", ".", "batch_size", ",", "self", ".", "N", "-", "self", ".", "number_sampled", ")", "\n", "self", ".", "number_sampled", "+=", "batch_size", "\n", "return", "self", ".", "p", ".", "sample", "(", "torch", ".", "Size", "(", "[", "batch_size", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception.FakeData.__len__": [[36, 38], ["math.ceil"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "math", ".", "ceil", "(", "self", ".", "N", "/", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception.collate_fn": [[39, 43], ["data.expand"], "function", ["None"], ["", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "# Ensure data has shape (3xHxW)", "\n", "    ", "data", "=", "data", "[", "0", "]", "\n", "return", "data", ".", "expand", "(", "-", "1", ",", "3", ",", "*", "data", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception.inception_score": [[45, 107], ["inception.FakeData", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "inception_v3().type.eval", "torch.nn.Upsample().type", "numpy.empty", "tqdm.tqdm", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.models.inception.inception_v3().type", "inception_v3().type.", "torch.nn.functional.softmax().data.cpu().numpy", "batch.type.type", "inception.inception_score.get_pred"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval"], ["", "def", "inception_score", "(", "generator", ",", "N", "=", "50000", ",", "cuda", "=", "True", ",", "batch_size", "=", "32", ",", "resize", "=", "True", ",", "\n", "splits", "=", "10", ",", "normalize_input", "=", "True", ",", "inception_model", "=", "None", ",", "\n", "entropy_only", "=", "False", ",", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Computes the inception score of the generated images imgs\n    p -- the generator model\n    N -- total number of datapoints to use for the metric\n    cuda -- whether or not to run on GPU\n    batch_size -- batch size for feeding into Inception v3\n    splits -- number of splits\n    \"\"\"", "\n", "assert", "batch_size", ">", "0", "\n", "# Set up dtype", "\n", "if", "cuda", ":", "\n", "        ", "dtype", "=", "torch", ".", "cuda", ".", "FloatTensor", "\n", "", "else", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "print", "(", "\"WARNING: You have a CUDA device, so you should probably set cuda=True\"", ")", "\n", "", "dtype", "=", "torch", ".", "FloatTensor", "\n", "# Set up dataset", "\n", "", "dataset", "=", "FakeData", "(", "generator", ",", "N", ",", "batch_size", ")", "\n", "# Set up dataloader (note we manually handle batch size in the dataset!!)", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "collate_fn", "=", "collate_fn", ",", "\n", "batch_size", "=", "1", ")", "\n", "# Load inception model", "\n", "if", "inception_model", "is", "None", ":", "\n", "        ", "inception_model", "=", "inception_v3", "(", "pretrained", "=", "True", ",", "\n", "transform_input", "=", "False", ")", ".", "type", "(", "dtype", ")", "\n", "", "inception_model", ".", "eval", "(", ")", "\n", "up", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "299", ",", "299", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", ".", "type", "(", "dtype", ")", "\n", "def", "get_pred", "(", "x", ")", ":", "\n", "        ", "if", "normalize_input", ":", "\n", "            ", "x", "=", "x", "*", "2", "-", "1", "\n", "", "if", "resize", ":", "\n", "            ", "x", "=", "up", "(", "x", ")", "\n", "", "x", "=", "inception_model", "(", "x", ")", "\n", "return", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# Get predictions", "\n", "", "preds", "=", "np", ".", "empty", "(", "(", "N", ",", "num_classes", ")", ")", "\n", "end", "=", "0", "\n", "for", "batch", "in", "tqdm", "(", "dataloader", ",", "\n", "total", "=", "len", "(", "dataloader", ")", ",", "\n", "desc", "=", "\"Inception Score\"", ")", ":", "\n", "        ", "batch", "=", "batch", ".", "type", "(", "dtype", ")", "\n", "batch_size_i", "=", "batch", ".", "size", "(", ")", "[", "0", "]", "\n", "start", "=", "end", "\n", "end", "=", "start", "+", "batch_size_i", "\n", "preds", "[", "start", ":", "end", "]", "=", "get_pred", "(", "batch", ")", "\n", "# Now compute the mean kl-div", "\n", "", "split_scores", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "preds", "[", "k", "*", "(", "N", "//", "splits", ")", ":", "(", "k", "+", "1", ")", "*", "(", "N", "//", "splits", ")", ",", ":", "]", "\n", "py", "=", "np", ".", "mean", "(", "part", ",", "axis", "=", "0", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "part", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pyx", "=", "part", "[", "i", ",", ":", "]", "\n", "if", "entropy_only", ":", "\n", "                ", "scores", ".", "append", "(", "entropy", "(", "pyx", ")", ")", "\n", "", "else", ":", "\n", "                ", "scores", ".", "append", "(", "entropy", "(", "pyx", ",", "py", ")", ")", "\n", "", "", "split_scores", ".", "append", "(", "np", ".", "exp", "(", "np", ".", "mean", "(", "scores", ")", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "split_scores", ")", ",", "np", ".", "std", "(", "split_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.metrics.inception.inception_score_mnist": [[109, 164], ["inception.FakeData", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "mnist_classifier.eval", "numpy.empty", "tqdm.tqdm", "range", "torch.cuda.is_available", "torch.cuda.is_available", "mnist_classifier", "torch.nn.functional.softmax().data.cpu().numpy", "batch.type.type", "inception.inception_score.get_pred"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval"], ["", "def", "inception_score_mnist", "(", "generator", ",", "mnist_classifier", ",", "N", "=", "50000", ",", "cuda", "=", "True", ",", "batch_size", "=", "32", ",", "\n", "splits", "=", "10", ",", "entropy_only", "=", "False", ",", "grayscale", "=", "True", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Computes the inception score of the generated images imgs\n    p -- the generator model\n    N -- total number of datapoints to use for the metric\n    cuda -- whether or not to run on GPU\n    batch_size -- batch size for feeding into Inception v3\n    splits -- number of splits\n    \"\"\"", "\n", "assert", "batch_size", ">", "0", "\n", "# Set up dtype", "\n", "if", "cuda", ":", "\n", "        ", "dtype", "=", "torch", ".", "cuda", ".", "FloatTensor", "\n", "", "else", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "print", "(", "\"WARNING: You have a CUDA device, so you should probably set cuda=True\"", ")", "\n", "", "dtype", "=", "torch", ".", "FloatTensor", "\n", "# Set up dataset", "\n", "", "dataset", "=", "FakeData", "(", "generator", ",", "N", ",", "batch_size", ")", "\n", "# Set up dataloader (note we manually handle batch size in the dataset!!)", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "collate_fn", "=", "collate_fn", ",", "\n", "batch_size", "=", "1", ")", "\n", "# Prepare MNIST lcassifier", "\n", "mnist_classifier", ".", "eval", "(", ")", "\n", "def", "get_pred", "(", "x", ")", ":", "\n", "        ", "x", "=", "mnist_classifier", "(", "x", ")", "\n", "return", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# Get predictions", "\n", "", "preds", "=", "np", ".", "empty", "(", "(", "N", ",", "num_classes", ")", ")", "\n", "end", "=", "0", "\n", "for", "batch", "in", "tqdm", "(", "dataloader", ",", "\n", "total", "=", "len", "(", "dataloader", ")", ",", "\n", "desc", "=", "\"Inception Score\"", ")", ":", "\n", "# Convert images to Grayscale by removing 2 of the 3 color channels", "\n", "        ", "if", "grayscale", ":", "\n", "            ", "batch", "=", "batch", "[", ":", ",", ":", "1", "]", "\n", "", "batch", "=", "batch", ".", "type", "(", "dtype", ")", "\n", "batch_size_i", "=", "batch", ".", "size", "(", ")", "[", "0", "]", "\n", "start", "=", "end", "\n", "end", "=", "start", "+", "batch_size_i", "\n", "preds", "[", "start", ":", "end", "]", "=", "get_pred", "(", "batch", ")", "\n", "# Now compute the mean kl-div", "\n", "", "split_scores", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "preds", "[", "k", "*", "(", "N", "//", "splits", ")", ":", "(", "k", "+", "1", ")", "*", "(", "N", "//", "splits", ")", ",", ":", "]", "\n", "py", "=", "np", ".", "mean", "(", "part", ",", "axis", "=", "0", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "part", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pyx", "=", "part", "[", "i", ",", ":", "]", "\n", "if", "entropy_only", ":", "\n", "                ", "scores", ".", "append", "(", "entropy", "(", "pyx", ")", ")", "\n", "", "else", ":", "\n", "                ", "scores", ".", "append", "(", "entropy", "(", "pyx", ",", "py", ")", ")", "\n", "", "", "split_scores", ".", "append", "(", "np", ".", "exp", "(", "np", ".", "mean", "(", "scores", ")", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "split_scores", ")", ",", "np", ".", "std", "(", "split_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.vqvae.vq_encoder_spec": [[6, 66], ["tensorflow.contrib.framework.python.ops.arg_scope", "net.conv2d", "tensorflow.nn.elu", "net.conv2d", "tensorflow.nn.elu", "net.conv2d", "range", "tensorflow.nn.elu", "net.conv2d", "tensorflow.nn.elu", "net.conv2d", "range", "tensorflow.nn.elu", "net.conv2d", "net.vector_quantize", "net.conv2d", "range", "tensorflow.nn.elu", "net.deconv2d", "tensorflow.concat", "net.conv2d", "net.vector_quantize", "net.resnet", "net.resnet", "net.resnet"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.vector_quantize", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.deconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.vector_quantize", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.resnet"], ["def", "vq_encoder_spec", "(", "x", ",", "ema", "=", "None", ",", "nr_channel", "=", "128", ",", "nr_res_block", "=", "2", ",", "nr_res_channel", "=", "64", ",", "embedding_dim", "=", "64", ",", "\n", "num_embeddings", "=", "512", ",", "commitment_cost", "=", "0.25", ",", "decay", "=", "0.99", ",", "is_training", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    Tensor x of shape (N,H,W,3) (e.g. (128,256,256,3))\n    Output:\n    Tensor enc_t of shape (N,H//8,W//8,C) (e.g. (128,32,32,64))\n    Tensor enc_b of shape (N,H//4,W//4,C) (e.g. (128,64,64,64))\n    Tensor quant_t of shape (N,H//8,W//8,C) (e.g. (128,32,32,64))\n    Tensor quant_b of shape (N,H//4,W//4,C) (e.g. (128,64,64,64))\n    Tensor loss of shape (1,) \n    Tensor idx_t of shape (N,H//8,W//8) (e.g. (128,32,32))\n    Tensor idx_b of shape (N,H//4,W//4) (e.g. (128,64,64))\n    Tensor embed_t of shape (C,K) (e.g. (64,512))\n    Tensor embed_b of shape (C,K) (e.g. (64,512))\n    \"\"\"", "\n", "\n", "counters", "=", "{", "}", "\n", "with", "arg_scope", "(", "[", "nn", ".", "conv2d", ",", "nn", ".", "deconv2d", ",", "nn", ".", "vector_quantize", "]", ",", "counters", "=", "counters", ",", "ema", "=", "ema", ")", ":", "\n", "\n", "# Bottom encoder", "\n", "        ", "enc_b", "=", "nn", ".", "conv2d", "(", "x", ",", "nr_channel", "//", "2", ",", "filter_size", "=", "[", "4", ",", "4", "]", ",", "stride", "=", "[", "2", ",", "2", "]", ")", "\n", "enc_b", "=", "tf", ".", "nn", ".", "elu", "(", "enc_b", ")", "\n", "enc_b", "=", "nn", ".", "conv2d", "(", "enc_b", ",", "nr_channel", ",", "filter_size", "=", "[", "4", ",", "4", "]", ",", "stride", "=", "[", "2", ",", "2", "]", ")", "\n", "enc_b", "=", "tf", ".", "nn", ".", "elu", "(", "enc_b", ")", "\n", "enc_b", "=", "nn", ".", "conv2d", "(", "enc_b", ",", "nr_channel", ")", "\n", "for", "rep", "in", "range", "(", "nr_res_block", ")", ":", "\n", "            ", "enc_b", "=", "nn", ".", "resnet", "(", "enc_b", ",", "num_res_channel", "=", "nr_res_channel", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "elu", ")", "\n", "", "enc_b", "=", "tf", ".", "nn", ".", "elu", "(", "enc_b", ")", "\n", "\n", "# Top encoder", "\n", "enc_t", "=", "nn", ".", "conv2d", "(", "enc_b", ",", "nr_channel", "//", "2", ",", "filter_size", "=", "[", "4", ",", "4", "]", ",", "stride", "=", "[", "2", ",", "2", "]", ")", "\n", "enc_t", "=", "tf", ".", "nn", ".", "elu", "(", "enc_t", ")", "\n", "enc_t", "=", "nn", ".", "conv2d", "(", "enc_t", ",", "nr_channel", ")", "\n", "for", "rep", "in", "range", "(", "nr_res_block", ")", ":", "\n", "            ", "enc_t", "=", "nn", ".", "resnet", "(", "enc_t", ",", "num_res_channel", "=", "nr_res_channel", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "elu", ")", "\n", "", "enc_t", "=", "tf", ".", "nn", ".", "elu", "(", "enc_t", ")", "\n", "enc_t", "=", "nn", ".", "conv2d", "(", "enc_t", ",", "embedding_dim", ",", "filter_size", "=", "[", "1", ",", "1", "]", ")", "\n", "\n", "# Vector quantization with top codebook", "\n", "quant_t", ",", "diff_t", ",", "idx_t", ",", "embed_t", "=", "nn", ".", "vector_quantize", "(", "enc_t", ",", "embedding_dim", "=", "embedding_dim", ",", "\n", "num_embeddings", "=", "num_embeddings", ",", "commitment_cost", "=", "commitment_cost", ",", "\n", "decay", "=", "decay", ",", "is_training", "=", "is_training", ")", "\n", "\n", "# Top decoder", "\n", "dec_t", "=", "nn", ".", "conv2d", "(", "quant_t", ",", "nr_channel", ")", "\n", "for", "rep", "in", "range", "(", "nr_res_block", ")", ":", "\n", "            ", "dec_t", "=", "nn", ".", "resnet", "(", "dec_t", ",", "num_res_channel", "=", "nr_res_channel", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "elu", ")", "\n", "", "dec_t", "=", "tf", ".", "nn", ".", "elu", "(", "dec_t", ")", "\n", "dec_t", "=", "nn", ".", "deconv2d", "(", "dec_t", ",", "nr_channel", ",", "filter_size", "=", "[", "4", ",", "4", "]", ",", "stride", "=", "[", "2", ",", "2", "]", ")", "\n", "enc_b", "=", "tf", ".", "concat", "(", "[", "enc_b", ",", "dec_t", "]", ",", "-", "1", ")", "\n", "enc_b", "=", "nn", ".", "conv2d", "(", "enc_b", ",", "embedding_dim", ",", "filter_size", "=", "[", "1", ",", "1", "]", ")", "\n", "\n", "# Vector quantization with bottom codebook", "\n", "quant_b", ",", "diff_b", ",", "idx_b", ",", "embed_b", "=", "nn", ".", "vector_quantize", "(", "enc_b", ",", "embedding_dim", "=", "embedding_dim", ",", "\n", "num_embeddings", "=", "num_embeddings", ",", "commitment_cost", "=", "commitment_cost", ",", "\n", "decay", "=", "decay", ",", "is_training", "=", "is_training", ")", "\n", "\n", "return", "{", "'enc_t'", ":", "enc_t", ",", "'enc_b'", ":", "enc_b", ",", "'quant_t'", ":", "quant_t", ",", "'quant_b'", ":", "quant_b", ",", "'loss'", ":", "diff_t", "+", "diff_b", ",", "\n", "'idx_t'", ":", "idx_t", ",", "'idx_b'", ":", "idx_b", ",", "'embed_t'", ":", "embed_t", ",", "'embed_b'", ":", "embed_b", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.vqvae.vq_decoder_spec": [[67, 91], ["tensorflow.contrib.framework.python.ops.arg_scope", "net.deconv2d", "tensorflow.concat", "net.conv2d", "range", "tensorflow.nn.elu", "net.deconv2d", "tensorflow.nn.elu", "net.deconv2d", "net.resnet"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.deconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.deconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.deconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.resnet"], ["", "", "def", "vq_decoder_spec", "(", "quant_t", ",", "quant_b", ",", "ema", "=", "None", ",", "nr_channel", "=", "128", ",", "nr_res_block", "=", "2", ",", "nr_res_channel", "=", "64", ",", "embedding_dim", "=", "64", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    Tensor quant_t of shape (N,H//8,W//8,C) (e.g. (128,32,32,64))\n    Tensor quant_b of shape (N,H//4,W//4,C) (e.g. (128,64,64,64))\n    Output:\n    Tensor dec_b of shape (N,H,W,3) (e.g. (128,256,256,3))\n    \"\"\"", "\n", "\n", "counters", "=", "{", "}", "\n", "with", "arg_scope", "(", "[", "nn", ".", "conv2d", ",", "nn", ".", "deconv2d", "]", ",", "counters", "=", "counters", ",", "ema", "=", "ema", ")", ":", "\n", "\n", "# Bottom decoder", "\n", "        ", "quant_t", "=", "nn", ".", "deconv2d", "(", "quant_t", ",", "embedding_dim", ",", "filter_size", "=", "[", "4", ",", "4", "]", ",", "stride", "=", "[", "2", ",", "2", "]", ")", "\n", "dec_b", "=", "tf", ".", "concat", "(", "[", "quant_b", ",", "quant_t", "]", ",", "-", "1", ")", "\n", "dec_b", "=", "nn", ".", "conv2d", "(", "dec_b", ",", "nr_channel", ")", "\n", "for", "rep", "in", "range", "(", "nr_res_block", ")", ":", "\n", "            ", "dec_b", "=", "nn", ".", "resnet", "(", "dec_b", ",", "num_res_channel", "=", "nr_res_channel", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "elu", ")", "\n", "", "dec_b", "=", "tf", ".", "nn", ".", "elu", "(", "dec_b", ")", "\n", "dec_b", "=", "nn", ".", "deconv2d", "(", "dec_b", ",", "nr_channel", "//", "2", ",", "filter_size", "=", "[", "4", ",", "4", "]", ",", "stride", "=", "[", "2", ",", "2", "]", ")", "\n", "dec_b", "=", "tf", ".", "nn", ".", "elu", "(", "dec_b", ")", "\n", "dec_b", "=", "nn", ".", "deconv2d", "(", "dec_b", ",", "3", ",", "filter_size", "=", "[", "4", ",", "4", "]", ",", "stride", "=", "[", "2", ",", "2", "]", ")", "\n", "\n", "return", "{", "'dec_b'", ":", "dec_b", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.net.structure_generator.structure_condition_spec": [[6, 52], ["tensorflow.contrib.framework.python.ops.arg_scope", "tensorflow.contrib.framework.python.ops.arg_scope", "tensorflow.concat", "net.wnconv2d", "net.gated_resnet", "net.wnconv2d", "net.gated_resnet", "net.wnconv2d", "net.gated_resnet", "net.wnconv2d", "net.gated_resnet", "net.gated_resnet", "net.gated_resnet", "net.gated_resnet", "net.gated_resnet", "net.gated_resnet", "net.gated_resnet", "net.gated_resnet", "net.gated_resnet", "net.gated_resnet", "tensorflow.ones_like"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.wnconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.wnconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.wnconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.wnconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet"], ["def", "structure_condition_spec", "(", "x", ",", "mask", ",", "ema", "=", "None", ",", "nr_channel", "=", "32", ",", "nr_res_channel", "=", "32", ",", "resnet_nonlinearity", "=", "'concat_elu'", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    Tensor x of shape (N,H,W,3) (e.g. (4,256,256,3))\n    Tensor mask of shape (N,H,W,1) (e.g. (4,256,256,1))\n    Output:\n    Tensor cond of shape (N,H//8,W//8,C') (e.g. (4,32,32,256))\n    \"\"\"", "\n", "\n", "counters", "=", "{", "}", "\n", "with", "arg_scope", "(", "[", "nn", ".", "wnconv2d", "]", ",", "counters", "=", "counters", ",", "ema", "=", "ema", ")", ":", "\n", "\n", "# Parse resnet nonlinearity argument", "\n", "        ", "if", "resnet_nonlinearity", "==", "'concat_elu'", ":", "\n", "            ", "resnet_nonlinearity", "=", "nn", ".", "concat_elu", "\n", "", "elif", "resnet_nonlinearity", "==", "'elu'", ":", "\n", "            ", "resnet_nonlinearity", "=", "tf", ".", "nn", ".", "elu", "\n", "", "elif", "resnet_nonlinearity", "==", "'relu'", ":", "\n", "            ", "resnet_nonlinearity", "=", "tf", ".", "nn", ".", "relu", "\n", "", "else", ":", "\n", "            ", "raise", "(", "'resnet nonlinearity '", "+", "resnet_nonlinearity", "+", "' is not supported'", ")", "\n", "\n", "", "with", "arg_scope", "(", "[", "nn", ".", "gated_resnet", "]", ",", "nonlinearity", "=", "resnet_nonlinearity", ")", ":", "\n", "            ", "ones_x", "=", "tf", ".", "ones_like", "(", "x", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "ones_x", ",", "ones_x", "*", "mask", "]", ",", "3", ")", "\n", "\n", "x", "=", "nn", ".", "wnconv2d", "(", "x", ",", "nr_channel", ",", "filter_size", "=", "[", "5", ",", "5", "]", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ")", "\n", "x", "=", "nn", ".", "wnconv2d", "(", "x", ",", "2", "*", "nr_channel", ",", "filter_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "2", ",", "2", "]", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "2", "*", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ")", "\n", "x", "=", "nn", ".", "wnconv2d", "(", "x", ",", "4", "*", "nr_channel", ",", "filter_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "2", ",", "2", "]", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "4", "*", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ")", "\n", "x", "=", "nn", ".", "wnconv2d", "(", "x", ",", "8", "*", "nr_channel", ",", "filter_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "2", ",", "2", "]", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "8", "*", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "8", "*", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "8", "*", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "8", "*", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ",", "rate", "=", "2", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "8", "*", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ",", "rate", "=", "4", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "8", "*", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ",", "rate", "=", "8", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "8", "*", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ",", "rate", "=", "16", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "8", "*", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "8", "*", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ")", "\n", "x", "=", "nn", ".", "gated_resnet", "(", "x", ",", "num_res_filters", "=", "8", "*", "nr_res_channel", ",", "conv", "=", "nn", ".", "wnconv2d", ")", "\n", "cond", "=", "x", "\n", "\n", "return", "cond", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.structure_generator.structure_pixelcnn_spec": [[53, 97], ["tensorflow.contrib.framework.python.ops.arg_scope", "tensorflow.contrib.framework.python.ops.arg_scope", "net.int_shape", "tensorflow.concat", "net.down_shift", "range", "range", "net.nin", "net.down_shifted_conv2d", "net.down_shift", "net.right_shift", "range", "net.gated_resnet", "net.gated_resnet", "net.out_resnet", "tensorflow.nn.elu", "tensorflow.ones", "net.down_shifted_conv2d", "net.down_right_shifted_conv2d", "net.gated_resnet", "net.gated_resnet"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.down_shift", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.nin", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.down_shifted_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.down_shift", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.right_shift", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.out_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.down_shifted_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.down_right_shifted_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet"], ["", "", "", "def", "structure_pixelcnn_spec", "(", "e", ",", "h", "=", "None", ",", "ema", "=", "None", ",", "dropout_p", "=", "0.", ",", "nr_resnet", "=", "20", ",", "nr_out_resnet", "=", "20", ",", "nr_channel", "=", "128", ",", "nr_res_channel", "=", "128", ",", "nr_attention", "=", "4", ",", "nr_head", "=", "8", ",", "resnet_nonlinearity", "=", "'concat_elu'", ",", "num_embeddings", "=", "512", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    Tensor e of shape (N,H//8,W//8,C) (e.g. (4,32,32,64))\n    Tensor h of shape (N,H//8,W//8,C') (e.g. (4,32,32,256))\n    Output:\n    Tensor e_out of shape (N,H//8,W//8,K) (e.g. (4,32,32,512))\n    \"\"\"", "\n", "\n", "counters", "=", "{", "}", "\n", "with", "arg_scope", "(", "[", "nn", ".", "wnconv2d", ",", "nn", ".", "wndense", "]", ",", "counters", "=", "counters", ",", "ema", "=", "ema", ")", ":", "\n", "\n", "# parse resnet nonlinearity argument", "\n", "        ", "if", "resnet_nonlinearity", "==", "'concat_elu'", ":", "\n", "            ", "resnet_nonlinearity", "=", "nn", ".", "concat_elu", "\n", "", "elif", "resnet_nonlinearity", "==", "'elu'", ":", "\n", "            ", "resnet_nonlinearity", "=", "tf", ".", "nn", ".", "elu", "\n", "", "elif", "resnet_nonlinearity", "==", "'relu'", ":", "\n", "            ", "resnet_nonlinearity", "=", "tf", ".", "nn", ".", "relu", "\n", "", "else", ":", "\n", "            ", "raise", "(", "'resnet nonlinearity '", "+", "resnet_nonlinearity", "+", "' is not supported'", ")", "\n", "\n", "", "with", "arg_scope", "(", "[", "nn", ".", "gated_resnet", "]", ",", "num_res_filters", "=", "nr_res_channel", ",", "nonlinearity", "=", "resnet_nonlinearity", ",", "dropout_p", "=", "dropout_p", ",", "num_head", "=", "nr_head", ",", "h", "=", "h", ")", ":", "\n", "# PixelCNN", "\n", "            ", "es", "=", "nn", ".", "int_shape", "(", "e", ")", "\n", "e_pad", "=", "tf", ".", "concat", "(", "[", "e", ",", "tf", ".", "ones", "(", "es", "[", ":", "-", "1", "]", "+", "[", "1", "]", ")", "]", ",", "3", ")", "# add channel of ones to distinguish image from padding later on", "\n", "u", "=", "nn", ".", "down_shift", "(", "nn", ".", "down_shifted_conv2d", "(", "e_pad", ",", "num_filters", "=", "nr_channel", ",", "filter_size", "=", "[", "2", ",", "3", "]", ")", ")", "# stream for pixels above", "\n", "ul", "=", "nn", ".", "down_shift", "(", "nn", ".", "down_shifted_conv2d", "(", "e_pad", ",", "num_filters", "=", "nr_channel", ",", "filter_size", "=", "[", "1", ",", "3", "]", ")", ")", "+", "nn", ".", "right_shift", "(", "nn", ".", "down_right_shifted_conv2d", "(", "e_pad", ",", "num_filters", "=", "nr_channel", ",", "filter_size", "=", "[", "2", ",", "1", "]", ")", ")", "# stream for up and to the left", "\n", "\n", "for", "attn_rep", "in", "range", "(", "nr_attention", ")", ":", "\n", "                ", "for", "rep", "in", "range", "(", "nr_resnet", "//", "nr_attention", "-", "1", ")", ":", "\n", "                    ", "u", "=", "nn", ".", "gated_resnet", "(", "u", ",", "conv", "=", "nn", ".", "down_shifted_conv2d", ")", "\n", "ul", "=", "nn", ".", "gated_resnet", "(", "ul", ",", "u", ",", "conv", "=", "nn", ".", "down_right_shifted_conv2d", ")", "\n", "\n", "", "u", "=", "nn", ".", "gated_resnet", "(", "u", ",", "conv", "=", "nn", ".", "down_shifted_conv2d", ")", "\n", "ul", "=", "nn", ".", "gated_resnet", "(", "ul", ",", "u", ",", "conv", "=", "nn", ".", "down_right_shifted_conv2d", ",", "causal_attention", "=", "True", ")", "\n", "\n", "", "for", "out_rep", "in", "range", "(", "nr_out_resnet", ")", ":", "\n", "                ", "ul", "=", "nn", ".", "out_resnet", "(", "ul", ",", "conv", "=", "nn", ".", "nin", ")", "\n", "\n", "", "e_out", "=", "nn", ".", "nin", "(", "tf", ".", "nn", ".", "elu", "(", "ul", ")", ",", "num_embeddings", ")", "\n", "\n", "return", "e_out", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.random_bbox": [[11, 38], ["tensorflow.constant", "tensorflow.constant", "tensorflow.random_uniform", "tensorflow.random_uniform"], "function", ["None"], ["def", "random_bbox", "(", "img_height", "=", "256", ",", "img_width", "=", "256", ",", "margins", "=", "0", ",", "mask_size", "=", "128", ",", "random_mask", "=", "True", ")", ":", "\n", "    ", "\"\"\"Generate a random tlhw with configuration.\n\n    Args:\n        img_height: height of image.\n        img_width: width of image.\n        margins: margins of mask and image border.\n        mask_size: size of mask.\n        random_mask: if True, random location. if False, central location.\n\n    Returns:\n        tuple: (top, left, height, width)\n\n    \"\"\"", "\n", "if", "random_mask", "is", "True", ":", "\n", "        ", "maxt", "=", "img_height", "-", "margins", "-", "mask_size", "\n", "maxl", "=", "img_width", "-", "margins", "-", "mask_size", "\n", "t", "=", "tf", ".", "random_uniform", "(", "\n", "[", "]", ",", "minval", "=", "margins", ",", "maxval", "=", "maxt", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "l", "=", "tf", ".", "random_uniform", "(", "\n", "[", "]", ",", "minval", "=", "margins", ",", "maxval", "=", "maxl", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "", "else", ":", "\n", "        ", "t", "=", "(", "img_height", "-", "mask_size", ")", "//", "2", "\n", "l", "=", "(", "img_width", "-", "mask_size", ")", "//", "2", "\n", "", "h", "=", "tf", ".", "constant", "(", "mask_size", ")", "\n", "w", "=", "tf", ".", "constant", "(", "mask_size", ")", "\n", "return", "(", "t", ",", "l", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.bbox2mask": [[39, 67], ["numpy.zeros", "numpy.random.randint", "numpy.random.randint", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.py_func", "tf.py_func.set_shape"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape"], ["", "def", "bbox2mask", "(", "bbox", ",", "img_height", "=", "256", ",", "img_width", "=", "256", ",", "max_delta", "=", "32", ",", "name", "=", "'mask'", ")", ":", "\n", "    ", "\"\"\"Generate mask tensor from bbox.\n\n    Args:\n        bbox: configuration tuple, (top, left, height, width)\n        img_height: height of image.\n        img_width: width of image.\n        max_delta: max delta of masks.\n        name: name of variable scope.\n\n    Returns:\n        tf.Tensor: output with shape [1, H, W, 1]\n\n    \"\"\"", "\n", "def", "npmask", "(", "bbox", ",", "height", ",", "width", ",", "delta", ")", ":", "\n", "        ", "mask", "=", "np", ".", "zeros", "(", "(", "1", ",", "height", ",", "width", ",", "1", ")", ",", "np", ".", "float32", ")", "\n", "h", "=", "np", ".", "random", ".", "randint", "(", "delta", "//", "2", "+", "1", ")", "\n", "w", "=", "np", ".", "random", ".", "randint", "(", "delta", "//", "2", "+", "1", ")", "\n", "mask", "[", ":", ",", "bbox", "[", "0", "]", "+", "h", ":", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", "-", "h", ",", "\n", "bbox", "[", "1", "]", "+", "w", ":", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", "-", "w", ",", ":", "]", "=", "1.", "\n", "return", "mask", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ")", ",", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "        ", "mask", "=", "tf", ".", "py_func", "(", "\n", "npmask", ",", "\n", "[", "bbox", ",", "img_height", ",", "img_width", ",", "max_delta", "]", ",", "\n", "tf", ".", "float32", ",", "stateful", "=", "False", ")", "\n", "mask", ".", "set_shape", "(", "[", "1", "]", "+", "[", "img_height", ",", "img_width", "]", "+", "[", "1", "]", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.brush_stroke_mask": [[68, 131], ["PIL.Image.new", "range", "numpy.asarray", "numpy.reshape", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.py_func", "tf.py_func.set_shape", "math.sqrt", "numpy.random.randint", "numpy.random.randint", "range", "vertex.append", "range", "PIL.ImageDraw.Draw", "int", "ImageDraw.Draw.line", "numpy.random.normal", "tf.py_func.transpose", "numpy.random.normal", "tf.py_func.transpose", "numpy.random.uniform", "numpy.random.uniform", "numpy.clip", "numpy.clip", "numpy.clip", "vertex.append", "numpy.random.uniform", "ImageDraw.Draw.ellipse", "angles.append", "angles.append", "int", "int", "numpy.random.normal", "numpy.random.uniform", "numpy.random.randint", "numpy.random.randint", "int", "int", "numpy.random.uniform", "math.cos", "math.sin"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape"], ["", "def", "brush_stroke_mask", "(", "img_height", "=", "256", ",", "img_width", "=", "256", ",", "name", "=", "'mask'", ")", ":", "\n", "    ", "\"\"\"Generate free form mask tensor.\n\n    Returns:\n        tf.Tensor: output with shape [1, H, W, 1]\n\n    \"\"\"", "\n", "min_num_vertex", "=", "4", "\n", "max_num_vertex", "=", "12", "\n", "mean_angle", "=", "2", "*", "math", ".", "pi", "/", "5", "\n", "angle_range", "=", "2", "*", "math", ".", "pi", "/", "15", "\n", "min_width", "=", "12", "\n", "max_width", "=", "40", "\n", "def", "generate_mask", "(", "H", ",", "W", ")", ":", "\n", "        ", "average_radius", "=", "math", ".", "sqrt", "(", "H", "*", "H", "+", "W", "*", "W", ")", "/", "8", "\n", "mask", "=", "Image", ".", "new", "(", "'L'", ",", "(", "W", ",", "H", ")", ",", "0", ")", "\n", "\n", "for", "_", "in", "range", "(", "np", ".", "random", ".", "randint", "(", "1", ",", "4", ")", ")", ":", "\n", "            ", "num_vertex", "=", "np", ".", "random", ".", "randint", "(", "min_num_vertex", ",", "max_num_vertex", ")", "\n", "angle_min", "=", "mean_angle", "-", "np", ".", "random", ".", "uniform", "(", "0", ",", "angle_range", ")", "\n", "angle_max", "=", "mean_angle", "+", "np", ".", "random", ".", "uniform", "(", "0", ",", "angle_range", ")", "\n", "angles", "=", "[", "]", "\n", "vertex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_vertex", ")", ":", "\n", "                ", "if", "i", "%", "2", "==", "0", ":", "\n", "                    ", "angles", ".", "append", "(", "2", "*", "math", ".", "pi", "-", "np", ".", "random", ".", "uniform", "(", "angle_min", ",", "angle_max", ")", ")", "\n", "", "else", ":", "\n", "                    ", "angles", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "angle_min", ",", "angle_max", ")", ")", "\n", "\n", "", "", "h", ",", "w", "=", "mask", ".", "size", "\n", "vertex", ".", "append", "(", "(", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "w", ")", ")", ",", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "h", ")", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "num_vertex", ")", ":", "\n", "                ", "r", "=", "np", ".", "clip", "(", "\n", "np", ".", "random", ".", "normal", "(", "loc", "=", "average_radius", ",", "scale", "=", "average_radius", "//", "2", ")", ",", "\n", "0", ",", "2", "*", "average_radius", ")", "\n", "new_x", "=", "np", ".", "clip", "(", "vertex", "[", "-", "1", "]", "[", "0", "]", "+", "r", "*", "math", ".", "cos", "(", "angles", "[", "i", "]", ")", ",", "0", ",", "w", ")", "\n", "new_y", "=", "np", ".", "clip", "(", "vertex", "[", "-", "1", "]", "[", "1", "]", "+", "r", "*", "math", ".", "sin", "(", "angles", "[", "i", "]", ")", ",", "0", ",", "h", ")", "\n", "vertex", ".", "append", "(", "(", "int", "(", "new_x", ")", ",", "int", "(", "new_y", ")", ")", ")", "\n", "\n", "", "draw", "=", "ImageDraw", ".", "Draw", "(", "mask", ")", "\n", "width", "=", "int", "(", "np", ".", "random", ".", "uniform", "(", "min_width", ",", "max_width", ")", ")", "\n", "draw", ".", "line", "(", "vertex", ",", "fill", "=", "1", ",", "width", "=", "width", ")", "\n", "for", "v", "in", "vertex", ":", "\n", "                ", "draw", ".", "ellipse", "(", "(", "v", "[", "0", "]", "-", "width", "//", "2", ",", "\n", "v", "[", "1", "]", "-", "width", "//", "2", ",", "\n", "v", "[", "0", "]", "+", "width", "//", "2", ",", "\n", "v", "[", "1", "]", "+", "width", "//", "2", ")", ",", "\n", "fill", "=", "1", ")", "\n", "\n", "", "", "if", "np", ".", "random", ".", "normal", "(", ")", ">", "0", ":", "\n", "            ", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "if", "np", ".", "random", ".", "normal", "(", ")", ">", "0", ":", "\n", "            ", "mask", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "mask", "=", "np", ".", "asarray", "(", "mask", ",", "np", ".", "float32", ")", "\n", "mask", "=", "np", ".", "reshape", "(", "mask", ",", "(", "1", ",", "H", ",", "W", ",", "1", ")", ")", "\n", "return", "mask", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ")", ",", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "        ", "mask", "=", "tf", ".", "py_func", "(", "\n", "generate_mask", ",", "\n", "[", "img_height", ",", "img_width", "]", ",", "\n", "tf", ".", "float32", ",", "stateful", "=", "True", ")", "\n", "mask", ".", "set_shape", "(", "[", "1", "]", "+", "[", "img_height", ",", "img_width", "]", "+", "[", "1", "]", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.vqvae_visual": [[133, 154], ["range", "cv2.imwrite", "numpy.ones", "os.path.join"], "function", ["None"], ["", "def", "vqvae_visual", "(", "gt", ",", "recons", ",", "iter", ",", "size", ",", "save_dir", ")", ":", "\n", "    ", "\"\"\" Show 4 reconstruction images in the training of VQVAE.\"\"\"", "\n", "\n", "# gap between each images", "\n", "gap", "=", "2", "\n", "\n", "# height and width of result image", "\n", "height", "=", "size", "*", "4", "+", "gap", "*", "3", "\n", "width", "=", "size", "*", "2", "+", "gap", "*", "1", "\n", "\n", "result", "=", "255", "*", "np", ".", "ones", "(", "(", "height", ",", "width", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "gt_i", "=", "(", "(", "gt", "[", "i", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "recons_i", "=", "(", "(", "recons", "[", "i", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# fill the images into grid", "\n", "result", "[", "i", "*", "(", "size", "+", "gap", ")", ":", "i", "*", "(", "size", "+", "gap", ")", "+", "size", ",", "0", "*", "(", "size", "+", "gap", ")", ":", "0", "*", "(", "size", "+", "gap", ")", "+", "size", ",", ":", ":", "-", "1", "]", "=", "gt_i", "\n", "result", "[", "i", "*", "(", "size", "+", "gap", ")", ":", "i", "*", "(", "size", "+", "gap", ")", "+", "size", ",", "1", "*", "(", "size", "+", "gap", ")", ":", "1", "*", "(", "size", "+", "gap", ")", "+", "size", ",", ":", ":", "-", "1", "]", "=", "recons_i", "\n", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'vqvae%d.png'", "%", "iter", ")", ",", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.structure_visual": [[157, 182], ["range", "cv2.imwrite", "numpy.ones", "os.path.join"], "function", ["None"], ["", "def", "structure_visual", "(", "gt", ",", "masked", ",", "recons_gen", ",", "recons_gt", ",", "iter", ",", "size", ",", "save_dir", ")", ":", "\n", "    ", "\"\"\" Show 4 generated structure feature maps in the training of structure generator.\"\"\"", "\n", "\n", "# gap between each images", "\n", "gap", "=", "2", "\n", "\n", "# height and width of result image", "\n", "height", "=", "size", "*", "4", "+", "gap", "*", "3", "\n", "width", "=", "size", "*", "4", "+", "gap", "*", "3", "\n", "\n", "result", "=", "255", "*", "np", ".", "ones", "(", "(", "height", ",", "width", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "gt_i", "=", "(", "(", "gt", "[", "i", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "masked_i", "=", "(", "(", "masked", "[", "i", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "recons_gen_i", "=", "(", "(", "recons_gen", "[", "i", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "recons_gt_i", "=", "(", "(", "recons_gt", "[", "i", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# fill the images into grid", "\n", "result", "[", "i", "*", "(", "size", "+", "gap", ")", ":", "i", "*", "(", "size", "+", "gap", ")", "+", "size", ",", "0", "*", "(", "size", "+", "gap", ")", ":", "0", "*", "(", "size", "+", "gap", ")", "+", "size", ",", ":", ":", "-", "1", "]", "=", "gt_i", "\n", "result", "[", "i", "*", "(", "size", "+", "gap", ")", ":", "i", "*", "(", "size", "+", "gap", ")", "+", "size", ",", "1", "*", "(", "size", "+", "gap", ")", ":", "1", "*", "(", "size", "+", "gap", ")", "+", "size", ",", ":", ":", "-", "1", "]", "=", "masked_i", "\n", "result", "[", "i", "*", "(", "size", "+", "gap", ")", ":", "i", "*", "(", "size", "+", "gap", ")", "+", "size", ",", "2", "*", "(", "size", "+", "gap", ")", ":", "2", "*", "(", "size", "+", "gap", ")", "+", "size", ",", ":", ":", "-", "1", "]", "=", "recons_gen_i", "\n", "result", "[", "i", "*", "(", "size", "+", "gap", ")", ":", "i", "*", "(", "size", "+", "gap", ")", "+", "size", ",", "3", "*", "(", "size", "+", "gap", ")", ":", "3", "*", "(", "size", "+", "gap", ")", "+", "size", ",", ":", ":", "-", "1", "]", "=", "recons_gt_i", "\n", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'structure%d.png'", "%", "iter", ")", ",", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.texture_visual": [[183, 208], ["range", "cv2.imwrite", "numpy.ones", "os.path.join"], "function", ["None"], ["", "def", "texture_visual", "(", "gt", ",", "masked", ",", "complete", ",", "recons_gt", ",", "iter", ",", "size", ",", "save_dir", ")", ":", "\n", "    ", "\"\"\" Show 4 inpainting images under guidance of ground truth structure feature maps in the training of texture generator.\"\"\"", "\n", "\n", "# gap between each images", "\n", "gap", "=", "2", "\n", "\n", "# height and width of result image", "\n", "height", "=", "size", "*", "4", "+", "gap", "*", "3", "\n", "width", "=", "size", "*", "4", "+", "gap", "*", "3", "\n", "\n", "result", "=", "255", "*", "np", ".", "ones", "(", "(", "height", ",", "width", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "gt_i", "=", "(", "(", "gt", "[", "i", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "masked_i", "=", "(", "(", "masked", "[", "i", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "complete_i", "=", "(", "(", "complete", "[", "i", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "recons_gt_i", "=", "(", "(", "recons_gt", "[", "i", "]", "+", "1.", ")", "*", "127.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# fill the images into grid", "\n", "result", "[", "i", "*", "(", "size", "+", "gap", ")", ":", "i", "*", "(", "size", "+", "gap", ")", "+", "size", ",", "0", "*", "(", "size", "+", "gap", ")", ":", "0", "*", "(", "size", "+", "gap", ")", "+", "size", ",", ":", ":", "-", "1", "]", "=", "masked_i", "\n", "result", "[", "i", "*", "(", "size", "+", "gap", ")", ":", "i", "*", "(", "size", "+", "gap", ")", "+", "size", ",", "1", "*", "(", "size", "+", "gap", ")", ":", "1", "*", "(", "size", "+", "gap", ")", "+", "size", ",", ":", ":", "-", "1", "]", "=", "recons_gt_i", "\n", "result", "[", "i", "*", "(", "size", "+", "gap", ")", ":", "i", "*", "(", "size", "+", "gap", ")", "+", "size", ",", "2", "*", "(", "size", "+", "gap", ")", ":", "2", "*", "(", "size", "+", "gap", ")", "+", "size", ",", ":", ":", "-", "1", "]", "=", "complete_i", "\n", "result", "[", "i", "*", "(", "size", "+", "gap", ")", ":", "i", "*", "(", "size", "+", "gap", ")", "+", "size", ",", "3", "*", "(", "size", "+", "gap", ")", ":", "3", "*", "(", "size", "+", "gap", ")", "+", "size", ",", ":", ":", "-", "1", "]", "=", "gt_i", "\n", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'texture%d.png'", "%", "iter", ")", ",", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.feature_loss": [[210, 226], ["f.get_shape().as_list", "tensorflow.reshape", "tensorflow.nn.moments", "tensorflow.reshape", "tensorflow.one_hot", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "embed.get_shape().as_list", "tensorflow.reduce_sum", "tensorflow.nn.tanh", "f.get_shape", "tensorflow.reduce_sum", "embed.get_shape", "tensorflow.matmul"], "function", ["None"], ["", "def", "feature_loss", "(", "f", ",", "idx", ",", "embed", ",", "softmax_scale", "=", "10.", ")", ":", "\n", "    ", "fs", "=", "f", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "embedding_dim", "=", "fs", "[", "-", "1", "]", "\n", "num_embeddings", "=", "embed", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "flat_f", "=", "tf", ".", "reshape", "(", "f", ",", "[", "-", "1", ",", "embedding_dim", "]", ")", "\n", "d", "=", "(", "tf", ".", "reduce_sum", "(", "flat_f", "**", "2", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "-", "2", "*", "tf", ".", "matmul", "(", "flat_f", ",", "embed", ")", "\n", "+", "tf", ".", "reduce_sum", "(", "embed", "**", "2", ",", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "d_mean", ",", "d_var", "=", "tf", ".", "nn", ".", "moments", "(", "d", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "d_std", "=", "d_var", "**", "0.5", "\n", "d_score", "=", "-", "1", "*", "tf", ".", "nn", ".", "tanh", "(", "(", "d", "-", "d_mean", ")", "/", "d_std", ")", "\n", "d_score", "=", "tf", ".", "reshape", "(", "d_score", ",", "fs", "[", ":", "-", "1", "]", "+", "[", "-", "1", "]", ")", "\n", "encoding", "=", "tf", ".", "one_hot", "(", "idx", ",", "num_embeddings", ")", "\n", "ce", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "softmax_scale", "*", "d_score", ",", "labels", "=", "encoding", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "ce", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.average_gradients": [[227, 244], ["zip", "tensorflow.stack", "tensorflow.reduce_mean", "average_grads.append"], "function", ["None"], ["", "def", "average_gradients", "(", "tower_grads", ")", ":", "\n", "    ", "average_grads", "=", "[", "]", "\n", "for", "grad_and_vars", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "# Note that each grad_and_vars looks like the following:", "\n", "#   ((grad0_gpu0, var0_gpu0), ... , (grad0_gpuN, var0_gpuN))", "\n", "        ", "grads", "=", "[", "g", "for", "g", ",", "_", "in", "grad_and_vars", "]", "\n", "# Average over the 'tower' dimension.", "\n", "grad", "=", "tf", ".", "stack", "(", "grads", ",", "0", ")", "\n", "grad", "=", "tf", ".", "reduce_mean", "(", "grad", ",", "0", ")", "\n", "\n", "# Keep in mind that the Variables are redundant because they are shared", "\n", "# across towers. So .. we will just return the first tower's pointer to", "\n", "# the Variable.", "\n", "v", "=", "grad_and_vars", "[", "0", "]", "[", "1", "]", "\n", "grad_and_var", "=", "(", "grad", ",", "v", ")", "\n", "average_grads", ".", "append", "(", "grad_and_var", ")", "\n", "", "return", "average_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape": [[245, 247], ["list", "map", "x.get_shape"], "function", ["None"], ["", "def", "int_shape", "(", "x", ")", ":", "\n", "    ", "return", "list", "(", "map", "(", "int", ",", "x", ".", "get_shape", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.hw_flatten": [[248, 250], ["tensorflow.reshape"], "function", ["None"], ["", "def", "hw_flatten", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "reshape", "(", "x", ",", "[", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "x", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.l2_norm": [[251, 254], ["tensorflow.reduce_sum"], "function", ["None"], ["", "def", "l2_norm", "(", "input_x", ",", "epsilon", "=", "1e-12", ")", ":", "\n", "    ", "input_x_norm", "=", "input_x", "/", "(", "tf", ".", "reduce_sum", "(", "input_x", "**", "2", ")", "**", "0.5", "+", "epsilon", ")", "\n", "return", "input_x_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.concat_elu": [[255, 259], ["tensorflow.nn.elu", "len", "tensorflow.concat", "x.get_shape"], "function", ["None"], ["", "def", "concat_elu", "(", "x", ")", ":", "\n", "    ", "\"\"\" like concatenated ReLU (http://arxiv.org/abs/1603.05201), but then with ELU \"\"\"", "\n", "axis", "=", "len", "(", "x", ".", "get_shape", "(", ")", ")", "-", "1", "\n", "return", "tf", ".", "nn", ".", "elu", "(", "tf", ".", "concat", "(", "[", "x", ",", "-", "x", "]", ",", "axis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_var_maybe_avg": [[260, 266], ["tensorflow.get_variable", "ema.average"], "function", ["None"], ["", "def", "get_var_maybe_avg", "(", "var_name", ",", "ema", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" utility for retrieving polyak averaged params \"\"\"", "\n", "v", "=", "tf", ".", "get_variable", "(", "var_name", ",", "**", "kwargs", ")", "\n", "if", "ema", "is", "not", "None", ":", "\n", "        ", "v", "=", "ema", ".", "average", "(", "v", ")", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_name": [[267, 274], ["str"], "function", ["None"], ["", "def", "get_name", "(", "layer_name", ",", "counters", ")", ":", "\n", "    ", "\"\"\" utlity for keeping track of layer names \"\"\"", "\n", "if", "not", "layer_name", "in", "counters", ":", "\n", "        ", "counters", "[", "layer_name", "]", "=", "0", "\n", "", "name", "=", "layer_name", "+", "'_'", "+", "str", "(", "counters", "[", "layer_name", "]", ")", "\n", "counters", "[", "layer_name", "]", "+=", "1", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d": [[276, 298], ["nn.get_name", "nn.int_shape", "math.sqrt", "tensorflow.variable_scope", "nn.get_var_maybe_avg", "nn.get_var_maybe_avg", "tensorflow.nn.bias_add", "tensorflow.nn.conv2d", "nonlinearity", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_name", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_var_maybe_avg", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_var_maybe_avg", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d"], ["", "@", "add_arg_scope", "\n", "def", "conv2d", "(", "x", ",", "num_filters", ",", "filter_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "pad", "=", "'SAME'", ",", "nonlinearity", "=", "None", ",", "counters", "=", "{", "}", ",", "ema", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" convolutional layer \"\"\"", "\n", "name", "=", "get_name", "(", "'conv2d'", ",", "counters", ")", "\n", "xs", "=", "int_shape", "(", "x", ")", "\n", "# See https://arxiv.org/abs/1502.03167v3.", "\n", "input_feature_size", "=", "filter_size", "[", "0", "]", "*", "filter_size", "[", "1", "]", "*", "xs", "[", "3", "]", "\n", "stddev", "=", "1.", "/", "math", ".", "sqrt", "(", "input_feature_size", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "W", "=", "get_var_maybe_avg", "(", "'W'", ",", "ema", ",", "shape", "=", "filter_size", "+", "[", "xs", "[", "3", "]", ",", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "0", ",", "stddev", ")", ",", "trainable", "=", "True", ")", "\n", "b", "=", "get_var_maybe_avg", "(", "'b'", ",", "ema", ",", "shape", "=", "[", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "trainable", "=", "True", ")", "\n", "\n", "# calculate convolutional layer output", "\n", "x", "=", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "W", ",", "[", "1", "]", "+", "stride", "+", "[", "1", "]", ",", "pad", ")", ",", "b", ")", "\n", "\n", "# apply nonlinearity", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "            ", "x", "=", "nonlinearity", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.deconv2d": [[299, 326], ["nn.get_name", "nn.int_shape", "math.sqrt", "tensorflow.variable_scope", "nn.get_var_maybe_avg", "nn.get_var_maybe_avg", "tensorflow.nn.conv2d_transpose", "tensorflow.nn.bias_add", "nonlinearity", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_name", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_var_maybe_avg", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_var_maybe_avg"], ["", "", "@", "add_arg_scope", "\n", "def", "deconv2d", "(", "x", ",", "num_filters", ",", "filter_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "pad", "=", "'SAME'", ",", "nonlinearity", "=", "None", ",", "counters", "=", "{", "}", ",", "ema", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" transposed convolutional layer \"\"\"", "\n", "name", "=", "get_name", "(", "'deconv2d'", ",", "counters", ")", "\n", "xs", "=", "int_shape", "(", "x", ")", "\n", "# See https://arxiv.org/abs/1502.03167v3.", "\n", "input_feature_size", "=", "filter_size", "[", "0", "]", "*", "filter_size", "[", "1", "]", "*", "xs", "[", "3", "]", "\n", "stddev", "=", "1.", "/", "math", ".", "sqrt", "(", "input_feature_size", ")", "\n", "if", "pad", "==", "'SAME'", ":", "\n", "        ", "target_shape", "=", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", "*", "stride", "[", "0", "]", ",", "xs", "[", "2", "]", "*", "stride", "[", "1", "]", ",", "num_filters", "]", "\n", "", "else", ":", "\n", "        ", "target_shape", "=", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", "*", "stride", "[", "0", "]", "+", "filter_size", "[", "0", "]", "-", "1", ",", "xs", "[", "2", "]", "*", "stride", "[", "1", "]", "+", "filter_size", "[", "1", "]", "-", "1", ",", "num_filters", "]", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "W", "=", "get_var_maybe_avg", "(", "'W'", ",", "ema", ",", "shape", "=", "filter_size", "+", "[", "num_filters", ",", "xs", "[", "3", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "0", ",", "stddev", ")", ",", "trainable", "=", "True", ")", "\n", "b", "=", "get_var_maybe_avg", "(", "'b'", ",", "ema", ",", "shape", "=", "[", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "trainable", "=", "True", ")", "\n", "\n", "# calculate convolutional layer output", "\n", "x", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "x", ",", "W", ",", "target_shape", ",", "[", "1", "]", "+", "stride", "+", "[", "1", "]", ",", "padding", "=", "pad", ")", "\n", "x", "=", "tf", ".", "nn", ".", "bias_add", "(", "x", ",", "b", ")", "\n", "\n", "# apply nonlinearity", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "            ", "x", "=", "nonlinearity", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.wndense": [[327, 349], ["nn.get_name", "tensorflow.variable_scope", "nn.get_var_maybe_avg", "nn.get_var_maybe_avg", "nn.get_var_maybe_avg", "tensorflow.matmul", "tensorflow.sqrt", "tensorflow.reshape", "nonlinearity", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.reduce_sum", "tensorflow.reshape", "int", "tensorflow.square", "nonlinearity.get_shape"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_name", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_var_maybe_avg", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_var_maybe_avg", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_var_maybe_avg"], ["", "", "@", "add_arg_scope", "\n", "def", "wndense", "(", "x", ",", "num_units", ",", "nonlinearity", "=", "None", ",", "counters", "=", "{", "}", ",", "ema", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" dense layer (weight norm) \"\"\"", "\n", "name", "=", "get_name", "(", "'wndense'", ",", "counters", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "V", "=", "get_var_maybe_avg", "(", "'V'", ",", "ema", ",", "shape", "=", "[", "int", "(", "x", ".", "get_shape", "(", ")", "[", "1", "]", ")", ",", "num_units", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "0.05", ")", ",", "trainable", "=", "True", ")", "\n", "g", "=", "get_var_maybe_avg", "(", "'g'", ",", "ema", ",", "shape", "=", "[", "num_units", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ",", "trainable", "=", "True", ")", "\n", "b", "=", "get_var_maybe_avg", "(", "'b'", ",", "ema", ",", "shape", "=", "[", "num_units", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "trainable", "=", "True", ")", "\n", "\n", "# use weight normalization (Salimans & Kingma, 2016)", "\n", "x", "=", "tf", ".", "matmul", "(", "x", ",", "V", ")", "\n", "scaler", "=", "g", "/", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "V", ")", ",", "[", "0", "]", ")", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "scaler", ",", "[", "1", ",", "num_units", "]", ")", "*", "x", "+", "tf", ".", "reshape", "(", "b", ",", "[", "1", ",", "num_units", "]", ")", "\n", "\n", "# apply nonlinearity", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "            ", "x", "=", "nonlinearity", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.wnconv2d": [[350, 373], ["nn.get_name", "tensorflow.variable_scope", "nn.get_var_maybe_avg", "nn.get_var_maybe_avg", "nn.get_var_maybe_avg", "tensorflow.nn.bias_add", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.conv2d", "nonlinearity", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "int", "nonlinearity.get_shape"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_name", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_var_maybe_avg", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_var_maybe_avg", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_var_maybe_avg", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d"], ["", "", "@", "add_arg_scope", "\n", "def", "wnconv2d", "(", "x", ",", "num_filters", ",", "filter_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "rate", "=", "1", ",", "pad", "=", "'SAME'", ",", "nonlinearity", "=", "None", ",", "counters", "=", "{", "}", ",", "ema", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" convolutional layer (weight norm) \"\"\"", "\n", "name", "=", "get_name", "(", "'wnconv2d'", ",", "counters", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "V", "=", "get_var_maybe_avg", "(", "'V'", ",", "ema", ",", "shape", "=", "filter_size", "+", "[", "int", "(", "x", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", ",", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "0.05", ")", ",", "trainable", "=", "True", ")", "\n", "g", "=", "get_var_maybe_avg", "(", "'g'", ",", "ema", ",", "shape", "=", "[", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.", ")", ",", "trainable", "=", "True", ")", "\n", "b", "=", "get_var_maybe_avg", "(", "'b'", ",", "ema", ",", "shape", "=", "[", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "trainable", "=", "True", ")", "\n", "\n", "# use weight normalization (Salimans & Kingma, 2016)", "\n", "W", "=", "tf", ".", "reshape", "(", "g", ",", "[", "1", ",", "1", ",", "1", ",", "num_filters", "]", ")", "*", "tf", ".", "nn", ".", "l2_normalize", "(", "V", ",", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "\n", "# calculate convolutional layer output", "\n", "x", "=", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "W", ",", "[", "1", "]", "+", "stride", "+", "[", "1", "]", ",", "pad", ",", "dilations", "=", "[", "1", ",", "rate", ",", "rate", ",", "1", "]", ")", ",", "b", ")", "\n", "\n", "# apply nonlinearity", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "            ", "x", "=", "nonlinearity", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.nin": [[374, 381], ["nn.int_shape", "tensorflow.reshape", "nn.wndense", "tensorflow.reshape", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.wndense"], ["", "", "@", "add_arg_scope", "\n", "def", "nin", "(", "x", ",", "num_units", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" a network in network layer \"\"\"", "\n", "s", "=", "int_shape", "(", "x", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "np", ".", "prod", "(", "s", "[", ":", "-", "1", "]", ")", ",", "s", "[", "-", "1", "]", "]", ")", "\n", "x", "=", "wndense", "(", "x", ",", "num_units", ",", "**", "kwargs", ")", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "s", "[", ":", "-", "1", "]", "+", "[", "num_units", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d": [[382, 409], ["nn.get_name", "nn.int_shape", "math.sqrt", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.bias_add", "tensorflow.split", "tensorflow.nn.sigmoid", "tensorflow.nn.conv2d", "nonlinearity", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer", "int", "nonlinearity.get_shape"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_name", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d"], ["", "@", "add_arg_scope", "\n", "def", "gated_conv2d", "(", "x", ",", "num_filters", ",", "filter_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "rate", "=", "1", ",", "pad", "=", "'SAME'", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "elu", ",", "counters", "=", "{", "}", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" gated convolutional layer \"\"\"", "\n", "name", "=", "get_name", "(", "'gated_conv2d'", ",", "counters", ")", "\n", "xs", "=", "int_shape", "(", "x", ")", "\n", "# See https://arxiv.org/abs/1502.03167v3.", "\n", "input_feature_size", "=", "filter_size", "[", "0", "]", "*", "filter_size", "[", "1", "]", "*", "xs", "[", "3", "]", "\n", "stddev", "=", "1.", "/", "math", ".", "sqrt", "(", "input_feature_size", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "shape", "=", "filter_size", "+", "[", "int", "(", "x", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", ",", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "0", ",", "stddev", ")", ",", "trainable", "=", "True", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "shape", "=", "[", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "trainable", "=", "True", ")", "\n", "\n", "# calculate convolutional layer output", "\n", "x", "=", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "W", ",", "[", "1", "]", "+", "stride", "+", "[", "1", "]", ",", "pad", ",", "dilations", "=", "[", "1", ",", "rate", ",", "rate", ",", "1", "]", ")", ",", "b", ")", "\n", "\n", "x", ",", "y", "=", "tf", ".", "split", "(", "x", ",", "2", ",", "3", ")", "\n", "\n", "# apply nonlinearity", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "            ", "x", "=", "nonlinearity", "(", "x", ")", "\n", "\n", "", "y", "=", "tf", ".", "nn", ".", "sigmoid", "(", "y", ")", "\n", "x", "=", "x", "*", "y", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_deconv2d": [[410, 438], ["nn.get_name", "tensorflow.image.resize_nearest_neighbor", "nn.int_shape", "math.sqrt", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.bias_add", "tensorflow.split", "tensorflow.nn.sigmoid", "tensorflow.nn.conv2d", "nonlinearity", "int", "int", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer", "nonlinearity.get_shape", "nonlinearity.get_shape", "int", "nonlinearity.get_shape"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_name", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d"], ["", "", "@", "add_arg_scope", "\n", "def", "gated_deconv2d", "(", "x", ",", "num_filters", ",", "filter_size", "=", "[", "3", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "pad", "=", "'SAME'", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "elu", ",", "counters", "=", "{", "}", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" upsample and gated convolutional layer \"\"\"", "\n", "name", "=", "get_name", "(", "'gated_deconv2d'", ",", "counters", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize_nearest_neighbor", "(", "x", ",", "[", "2", "*", "int", "(", "x", ".", "get_shape", "(", ")", "[", "1", "]", ")", ",", "2", "*", "int", "(", "x", ".", "get_shape", "(", ")", "[", "2", "]", ")", "]", ",", "align_corners", "=", "True", ")", "\n", "xs", "=", "int_shape", "(", "x", ")", "\n", "# See https://arxiv.org/abs/1502.03167v3.", "\n", "input_feature_size", "=", "filter_size", "[", "0", "]", "*", "filter_size", "[", "1", "]", "*", "xs", "[", "3", "]", "\n", "stddev", "=", "1.", "/", "math", ".", "sqrt", "(", "input_feature_size", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "shape", "=", "filter_size", "+", "[", "int", "(", "x", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", ",", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "0", ",", "stddev", ")", ",", "trainable", "=", "True", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "shape", "=", "[", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "trainable", "=", "True", ")", "\n", "\n", "# calculate convolutional layer output", "\n", "x", "=", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "W", ",", "[", "1", "]", "+", "stride", "+", "[", "1", "]", ",", "pad", ")", ",", "b", ")", "\n", "\n", "x", ",", "y", "=", "tf", ".", "split", "(", "x", ",", "2", ",", "3", ")", "\n", "\n", "# apply nonlinearity", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "            ", "x", "=", "nonlinearity", "(", "x", ")", "\n", "\n", "", "y", "=", "tf", ".", "nn", ".", "sigmoid", "(", "y", ")", "\n", "x", "=", "x", "*", "y", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.snconv2d": [[439, 471], ["nn.get_name", "nn.int_shape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.matmul", "nn.l2_norm", "tensorflow.matmul", "nn.l2_norm", "tensorflow.matmul", "tensorflow.nn.bias_add", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.control_dependencies", "tensorflow.reshape", "tensorflow.nn.conv2d", "nonlinearity", "tensorflow.truncated_normal_initializer", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer", "tf.get_variable.get_shape().as_list", "tf.get_variable.assign", "int", "tf.get_variable.get_shape", "nonlinearity.get_shape"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_name", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.l2_norm", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.l2_norm", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d"], ["", "", "@", "add_arg_scope", "\n", "def", "snconv2d", "(", "x", ",", "num_filters", ",", "filter_size", "=", "[", "5", ",", "5", "]", ",", "stride", "=", "[", "2", ",", "2", "]", ",", "pad", "=", "'SAME'", ",", "nonlinearity", "=", "None", ",", "counters", "=", "{", "}", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" convolutional layer (spectral norm) \"\"\"", "\n", "name", "=", "get_name", "(", "'snconv2d'", ",", "counters", ")", "\n", "xs", "=", "int_shape", "(", "x", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "W", "=", "tf", ".", "get_variable", "(", "'W'", ",", "shape", "=", "filter_size", "+", "[", "int", "(", "x", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", ",", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "0", ",", "0.05", ")", ",", "trainable", "=", "True", ")", "\n", "u", "=", "tf", ".", "get_variable", "(", "'u'", ",", "shape", "=", "[", "1", ",", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", ")", ",", "trainable", "=", "False", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "shape", "=", "[", "num_filters", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.", ")", ",", "trainable", "=", "True", ")", "\n", "\n", "# spectral normalization", "\n", "w_mat", "=", "tf", ".", "reshape", "(", "W", ",", "[", "-", "1", ",", "num_filters", "]", ")", "\n", "v_", "=", "tf", ".", "matmul", "(", "u", ",", "tf", ".", "transpose", "(", "w_mat", ")", ")", "\n", "v_hat", "=", "l2_norm", "(", "v_", ")", "\n", "u_", "=", "tf", ".", "matmul", "(", "v_hat", ",", "w_mat", ")", "\n", "u_hat", "=", "l2_norm", "(", "u_", ")", "\n", "sigma", "=", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "v_hat", ",", "w_mat", ")", ",", "tf", ".", "transpose", "(", "u_hat", ")", ")", "\n", "w_mat", "=", "w_mat", "/", "sigma", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "u", ".", "assign", "(", "u_hat", ")", "]", ")", ":", "\n", "            ", "w_norm", "=", "tf", ".", "reshape", "(", "w_mat", ",", "W", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "# calculate convolutional layer output", "\n", "", "x", "=", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w_norm", ",", "[", "1", "]", "+", "stride", "+", "[", "1", "]", ",", "pad", ")", ",", "b", ")", "\n", "\n", "# apply nonlinearity", "\n", "if", "nonlinearity", "is", "not", "None", ":", "\n", "            ", "x", "=", "nonlinearity", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.vector_quantize": [[473, 526], ["nn.get_name", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.shape", "tensorflow.argmax", "tensorflow.one_hot", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_mean", "tensorflow.control_dependencies", "tf.get_variable.read_value", "tensorflow.control_dependencies", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.control_dependencies", "tensorflow.transpose", "tensorflow.python.training.moving_averages.assign_moving_average", "tensorflow.matmul", "tensorflow.python.training.moving_averages.assign_moving_average", "tensorflow.reduce_sum", "tensorflow.stop_gradient", "tf.get_variable.read_value", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer", "tf.get_variable.initialized_value", "tensorflow.reduce_sum", "tensorflow.shape", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.control_dependencies", "tensorflow.assign", "tensorflow.Assert", "tensorflow.matmul", "tensorflow.stop_gradient", "tensorflow.control_dependencies", "tensorflow.equal"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.get_name"], ["", "", "@", "add_arg_scope", "\n", "def", "vector_quantize", "(", "inputs", ",", "embedding_dim", "=", "64", ",", "num_embeddings", "=", "512", ",", "commitment_cost", "=", "0.25", ",", "decay", "=", "0.99", ",", "epsilon", "=", "1e-5", ",", "is_training", "=", "False", ",", "counters", "=", "{", "}", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" vector quantizer \"\"\"", "\n", "name", "=", "get_name", "(", "'vector_quantize'", ",", "counters", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "# w is a matrix with an embedding in each column. When training, the embedding", "\n", "# is assigned to be the average of all inputs assigned to that embedding.", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "'embedding'", ",", "[", "embedding_dim", ",", "num_embeddings", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", ")", ",", "use_resource", "=", "True", ")", "\n", "ema_cluster_size", "=", "tf", ".", "get_variable", "(", "'ema_cluster_size'", ",", "[", "num_embeddings", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ",", "use_resource", "=", "True", ")", "\n", "ema_w", "=", "tf", ".", "get_variable", "(", "'ema_dw'", ",", "initializer", "=", "w", ".", "initialized_value", "(", ")", ",", "use_resource", "=", "True", ")", "\n", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "inputs", "]", ")", ":", "\n", "            ", "w_value", "=", "w", ".", "read_value", "(", ")", "\n", "", "input_shape", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "tf", ".", "Assert", "(", "tf", ".", "equal", "(", "input_shape", "[", "-", "1", "]", ",", "\n", "embedding_dim", ")", ",", "[", "input_shape", "]", ")", "]", ")", ":", "\n", "            ", "flat_inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "embedding_dim", "]", ")", "\n", "\n", "", "distances", "=", "(", "tf", ".", "reduce_sum", "(", "flat_inputs", "**", "2", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "-", "2", "*", "tf", ".", "matmul", "(", "flat_inputs", ",", "w_value", ")", "\n", "+", "tf", ".", "reduce_sum", "(", "w_value", "**", "2", ",", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "\n", "encoding_indices", "=", "tf", ".", "argmax", "(", "-", "distances", ",", "1", ")", "\n", "encodings", "=", "tf", ".", "one_hot", "(", "encoding_indices", ",", "num_embeddings", ")", "\n", "encoding_indices", "=", "tf", ".", "reshape", "(", "encoding_indices", ",", "tf", ".", "shape", "(", "inputs", ")", "[", ":", "-", "1", "]", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "encoding_indices", "]", ")", ":", "\n", "            ", "w_lookup", "=", "tf", ".", "transpose", "(", "w_value", ",", "[", "1", ",", "0", "]", ")", "\n", "", "quantized", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "w_lookup", ",", "encoding_indices", ",", "validate_indices", "=", "False", ")", "\n", "e_latent_loss", "=", "tf", ".", "reduce_mean", "(", "(", "tf", ".", "stop_gradient", "(", "quantized", ")", "-", "inputs", ")", "**", "2", ")", "\n", "\n", "if", "is_training", ":", "\n", "            ", "updated_ema_cluster_size", "=", "moving_averages", ".", "assign_moving_average", "(", "ema_cluster_size", ",", "\n", "tf", ".", "reduce_sum", "(", "encodings", ",", "0", ")", ",", "decay", ")", "\n", "dw", "=", "tf", ".", "matmul", "(", "flat_inputs", ",", "encodings", ",", "transpose_a", "=", "True", ")", "\n", "updated_ema_w", "=", "moving_averages", ".", "assign_moving_average", "(", "ema_w", ",", "dw", ",", "decay", ")", "\n", "n", "=", "tf", ".", "reduce_sum", "(", "updated_ema_cluster_size", ")", "\n", "updated_ema_cluster_size", "=", "(", "(", "updated_ema_cluster_size", "+", "epsilon", ")", "\n", "/", "(", "n", "+", "num_embeddings", "*", "epsilon", ")", "*", "n", ")", "\n", "\n", "normalised_updated_ema_w", "=", "(", "updated_ema_w", "/", "tf", ".", "reshape", "(", "updated_ema_cluster_size", ",", "[", "1", ",", "-", "1", "]", ")", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "e_latent_loss", "]", ")", ":", "\n", "                ", "update_w", "=", "tf", ".", "assign", "(", "w", ",", "normalised_updated_ema_w", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_w", "]", ")", ":", "\n", "                    ", "loss", "=", "commitment_cost", "*", "e_latent_loss", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "loss", "=", "commitment_cost", "*", "e_latent_loss", "\n", "\n", "", "quantized", "=", "inputs", "+", "tf", ".", "stop_gradient", "(", "quantized", "-", "inputs", ")", "\n", "\n", "return", "quantized", ",", "loss", ",", "encoding_indices", ",", "w", ".", "read_value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.resnet": [[527, 536], ["nn.int_shape", "conv", "conv", "nonlinearity", "nonlinearity"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape"], ["", "", "@", "add_arg_scope", "\n", "def", "resnet", "(", "x", ",", "num_res_channel", "=", "64", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "elu", ",", "conv", "=", "conv2d", ",", "**", "kwargs", ")", ":", "\n", "    ", "xs", "=", "int_shape", "(", "x", ")", "\n", "num_filters", "=", "xs", "[", "-", "1", "]", "\n", "\n", "c1", "=", "conv", "(", "nonlinearity", "(", "x", ")", ",", "num_res_channel", ")", "\n", "c2", "=", "conv", "(", "nonlinearity", "(", "c1", ")", ",", "num_filters", ",", "filter_size", "=", "[", "1", ",", "1", "]", ")", "\n", "\n", "return", "x", "+", "c2", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.cond_resnet": [[537, 548], ["nn.int_shape", "conv", "tensorflow.split", "nonlinearity", "tensorflow.nn.sigmoid"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape"], ["", "@", "add_arg_scope", "\n", "def", "cond_resnet", "(", "x", ",", "nonlinearity", "=", "concat_elu", ",", "conv", "=", "wnconv2d", ",", "rate", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "    ", "xs", "=", "int_shape", "(", "x", ")", "\n", "num_filters", "=", "xs", "[", "-", "1", "]", "\n", "\n", "c1", "=", "conv", "(", "nonlinearity", "(", "x", ")", ",", "num_filters", "*", "2", ",", "rate", "=", "rate", ")", "\n", "\n", "a", ",", "b", "=", "tf", ".", "split", "(", "c1", ",", "2", ",", "3", ")", "\n", "c2", "=", "a", "*", "tf", ".", "nn", ".", "sigmoid", "(", "b", ")", "\n", "\n", "return", "x", "+", "c2", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.out_resnet": [[549, 557], ["nn.int_shape", "conv", "nonlinearity"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape"], ["", "@", "add_arg_scope", "\n", "def", "out_resnet", "(", "x", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "elu", ",", "conv", "=", "nin", ",", "**", "kwargs", ")", ":", "\n", "    ", "xs", "=", "int_shape", "(", "x", ")", "\n", "num_filters", "=", "xs", "[", "-", "1", "]", "\n", "\n", "c1", "=", "conv", "(", "nonlinearity", "(", "x", ")", ",", "num_filters", ")", "\n", "\n", "return", "x", "+", "c1", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_resnet": [[558, 606], ["nn.int_shape", "conv", "nonlinearity", "conv", "tensorflow.split", "nonlinearity", "nn.nin", "nn.nin", "tensorflow.nn.sigmoid", "int", "numpy.zeros", "range", "tensorflow.constant", "tensorflow.expand_dims", "range", "tensorflow.concat", "nn.nin", "tensorflow.nn.dropout", "nonlinearity", "nonlinearity", "numpy.prod", "nn.nin", "nn.nin", "nn.nin", "tensorflow.matmul", "tensorflow.reshape", "multihead_src.append", "tensorflow.matmul", "numpy.sqrt", "tensorflow.reduce_max", "tensorflow.exp", "nn.hw_flatten", "nn.int_shape", "nn.hw_flatten", "nn.hw_flatten", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.nin", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.nin", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.nin", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.nin", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.nin", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.nin", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.hw_flatten", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.hw_flatten", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.hw_flatten"], ["", "@", "add_arg_scope", "\n", "def", "gated_resnet", "(", "x", ",", "a", "=", "None", ",", "h", "=", "None", ",", "num_res_filters", "=", "128", ",", "nonlinearity", "=", "concat_elu", ",", "conv", "=", "wnconv2d", ",", "rate", "=", "1", ",", "dropout_p", "=", "0.", ",", "causal_attention", "=", "False", ",", "num_head", "=", "8", ",", "**", "kwargs", ")", ":", "\n", "    ", "xs", "=", "int_shape", "(", "x", ")", "\n", "num_filters", "=", "xs", "[", "-", "1", "]", "\n", "\n", "c1", "=", "conv", "(", "nonlinearity", "(", "x", ")", ",", "num_res_filters", ",", "rate", "=", "rate", ")", "\n", "if", "a", "is", "not", "None", ":", "# add short-cut connection if auxiliary input 'a' is given", "\n", "        ", "c1", "+=", "nin", "(", "nonlinearity", "(", "a", ")", ",", "num_res_filters", ")", "\n", "", "c1", "=", "nonlinearity", "(", "c1", ")", "\n", "\n", "c2", "=", "conv", "(", "c1", ",", "num_filters", "*", "2", ",", "rate", "=", "1", ")", "\n", "if", "h", "is", "not", "None", ":", "# add condition h if included: conditional generation", "\n", "        ", "c2", "+=", "nin", "(", "nonlinearity", "(", "h", ")", ",", "num_filters", "*", "2", ")", "\n", "\n", "", "a", ",", "b", "=", "tf", ".", "split", "(", "c2", ",", "2", ",", "3", ")", "\n", "c3", "=", "a", "*", "tf", ".", "nn", ".", "sigmoid", "(", "b", ")", "\n", "\n", "if", "causal_attention", ":", "\n", "        ", "canvas_size", "=", "int", "(", "np", ".", "prod", "(", "int_shape", "(", "c3", ")", "[", "1", ":", "-", "1", "]", ")", ")", "\n", "causal_mask", "=", "np", ".", "zeros", "(", "[", "canvas_size", ",", "canvas_size", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "canvas_size", ")", ":", "\n", "            ", "causal_mask", "[", "i", ",", ":", "i", "]", "=", "1.", "\n", "", "causal_mask", "=", "tf", ".", "constant", "(", "causal_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "causal_mask", "=", "tf", ".", "expand_dims", "(", "causal_mask", ",", "axis", "=", "0", ")", "\n", "\n", "multihead_src", "=", "[", "]", "\n", "for", "head_rep", "in", "range", "(", "num_head", ")", ":", "\n", "            ", "query", "=", "nin", "(", "c3", ",", "num_filters", "//", "8", ")", "\n", "key", "=", "nin", "(", "c3", ",", "num_filters", "//", "8", ")", "\n", "value", "=", "nin", "(", "c3", ",", "num_filters", "//", "2", ")", "\n", "\n", "dot", "=", "tf", ".", "matmul", "(", "hw_flatten", "(", "query", ")", ",", "hw_flatten", "(", "key", ")", ",", "transpose_b", "=", "True", ")", "/", "np", ".", "sqrt", "(", "num_filters", "//", "8", ")", "\n", "dot", "=", "dot", "-", "(", "1.", "-", "causal_mask", ")", "*", "1e10", "# masked softmax", "\n", "dot", "=", "dot", "-", "tf", ".", "reduce_max", "(", "dot", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "\n", "causal_exp_dot", "=", "tf", ".", "exp", "(", "dot", ")", "*", "causal_mask", "\n", "causal_probs", "=", "causal_exp_dot", "/", "(", "tf", ".", "reduce_sum", "(", "causal_exp_dot", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "+", "1e-10", ")", "\n", "atten", "=", "tf", ".", "matmul", "(", "causal_probs", ",", "hw_flatten", "(", "value", ")", ")", "\n", "atten", "=", "tf", ".", "reshape", "(", "atten", ",", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "xs", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "multihead_src", ".", "append", "(", "atten", ")", "\n", "\n", "", "multihead", "=", "tf", ".", "concat", "(", "multihead_src", ",", "axis", "=", "-", "1", ")", "\n", "multihead", "=", "nin", "(", "multihead", ",", "num_filters", ")", "\n", "c3", "=", "c3", "+", "multihead", "\n", "\n", "", "if", "dropout_p", ">", "0", ":", "\n", "        ", "c3", "=", "tf", ".", "nn", ".", "dropout", "(", "c3", ",", "keep_prob", "=", "1.", "-", "dropout_p", ")", "\n", "\n", "", "return", "x", "+", "c3", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.attention_transfer": [[609, 674], ["tensorflow.shape", "b1.get_shape().as_list", "tensorflow.extract_image_patches", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.shape", "b2.get_shape().as_list", "tensorflow.extract_image_patches", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.shape", "f.get_shape().as_list", "tensorflow.split", "tensorflow.extract_image_patches", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.reshape", "zip", "tensorflow.concat", "tensorflow.concat", "tensorflow.eye", "tensorflow.ones_like", "tensorflow.nn.conv2d", "tensorflow.reduce_sum", "tensorflow.nn.conv2d", "tensorflow.nn.moments", "tensorflow.reshape", "tensorflow.nn.softmax", "tf.concat.append", "tf.concat.append", "b1.get_shape", "b2.get_shape", "f.get_shape", "tensorflow.square", "tensorflow.square", "tensorflow.nn.tanh", "tensorflow.reshape", "tensorflow.nn.conv2d", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.nn.conv2d", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.nn.conv2d_transpose", "tensorflow.nn.conv2d_transpose", "tensorflow.concat", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d"], ["", "def", "attention_transfer", "(", "f", ",", "b1", ",", "b2", ",", "ksize", "=", "3", ",", "stride", "=", "1", ",", "fuse_k", "=", "3", ",", "softmax_scale", "=", "50.", ",", "fuse", "=", "False", ")", ":", "\n", "# extract patches from background feature maps with rate (1st scale)", "\n", "    ", "bs1", "=", "tf", ".", "shape", "(", "b1", ")", "\n", "int_bs1", "=", "b1", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "w_b1", "=", "tf", ".", "extract_image_patches", "(", "b1", ",", "[", "1", ",", "4", ",", "4", ",", "1", "]", ",", "[", "1", ",", "4", ",", "4", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "w_b1", "=", "tf", ".", "reshape", "(", "w_b1", ",", "[", "int_bs1", "[", "0", "]", ",", "-", "1", ",", "4", ",", "4", ",", "int_bs1", "[", "3", "]", "]", ")", "\n", "w_b1", "=", "tf", ".", "transpose", "(", "w_b1", ",", "[", "0", ",", "2", ",", "3", ",", "4", ",", "1", "]", ")", "# transpose to b*k*k*c*hw", "\n", "# extract patches from background feature maps with rate (2nd scale)", "\n", "bs2", "=", "tf", ".", "shape", "(", "b2", ")", "\n", "int_bs2", "=", "b2", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "w_b2", "=", "tf", ".", "extract_image_patches", "(", "b2", ",", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "w_b2", "=", "tf", ".", "reshape", "(", "w_b2", ",", "[", "int_bs2", "[", "0", "]", ",", "-", "1", ",", "2", ",", "2", ",", "int_bs2", "[", "3", "]", "]", ")", "\n", "w_b2", "=", "tf", ".", "transpose", "(", "w_b2", ",", "[", "0", ",", "2", ",", "3", ",", "4", ",", "1", "]", ")", "# transpose to b*k*k*c*hw", "\n", "# use structure feature maps as foreground for matching and use background feature maps for reconstruction.", "\n", "fs", "=", "tf", ".", "shape", "(", "f", ")", "\n", "int_fs", "=", "f", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "f_groups", "=", "tf", ".", "split", "(", "f", ",", "int_fs", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "w_f", "=", "tf", ".", "extract_image_patches", "(", "f", ",", "[", "1", ",", "ksize", ",", "ksize", ",", "1", "]", ",", "[", "1", ",", "stride", ",", "stride", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "w_f", "=", "tf", ".", "reshape", "(", "w_f", ",", "[", "int_fs", "[", "0", "]", ",", "-", "1", ",", "ksize", ",", "ksize", ",", "int_fs", "[", "3", "]", "]", ")", "\n", "w_f", "=", "tf", ".", "transpose", "(", "w_f", ",", "[", "0", ",", "2", ",", "3", ",", "4", ",", "1", "]", ")", "# transpose to b*k*k*c*hw", "\n", "\n", "w_f_groups", "=", "tf", ".", "split", "(", "w_f", ",", "int_fs", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "w_b1_groups", "=", "tf", ".", "split", "(", "w_b1", ",", "int_bs1", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "w_b2_groups", "=", "tf", ".", "split", "(", "w_b2", ",", "int_bs2", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "y1", "=", "[", "]", "\n", "y2", "=", "[", "]", "\n", "k", "=", "fuse_k", "\n", "scale", "=", "softmax_scale", "\n", "fuse_weight", "=", "tf", ".", "reshape", "(", "tf", ".", "eye", "(", "k", ")", ",", "[", "k", ",", "k", ",", "1", ",", "1", "]", ")", "\n", "for", "xi", ",", "wi", ",", "raw1_wi", ",", "raw2_wi", "in", "zip", "(", "f_groups", ",", "w_f_groups", ",", "w_b1_groups", ",", "w_b2_groups", ")", ":", "\n", "# conv for compare", "\n", "        ", "wi", "=", "wi", "[", "0", "]", "#(k,k,c,hw)", "\n", "onesi", "=", "tf", ".", "ones_like", "(", "wi", ")", "\n", "xxi", "=", "tf", ".", "nn", ".", "conv2d", "(", "tf", ".", "square", "(", "xi", ")", ",", "onesi", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "\"SAME\"", ")", "#(1,h,w,hw)", "\n", "wwi", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "wi", ")", ",", "axis", "=", "[", "0", ",", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "#(1,1,1,hw)", "\n", "xwi", "=", "tf", ".", "nn", ".", "conv2d", "(", "xi", ",", "wi", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "\"SAME\"", ")", "#(1,h,w,hw)", "\n", "di", "=", "xxi", "+", "wwi", "-", "2", "*", "xwi", "\n", "di_mean", ",", "di_var", "=", "tf", ".", "nn", ".", "moments", "(", "di", ",", "3", ",", "keep_dims", "=", "True", ")", "\n", "di_std", "=", "di_var", "**", "0.5", "\n", "yi", "=", "-", "1", "*", "tf", ".", "nn", ".", "tanh", "(", "(", "di", "-", "di_mean", ")", "/", "di_std", ")", "\n", "\n", "# conv implementation for fuse scores to encourage large patches", "\n", "if", "fuse", ":", "\n", "            ", "yi", "=", "tf", ".", "reshape", "(", "yi", ",", "[", "1", ",", "fs", "[", "1", "]", "*", "fs", "[", "2", "]", ",", "fs", "[", "1", "]", "*", "fs", "[", "2", "]", ",", "1", "]", ")", "\n", "yi", "=", "tf", ".", "nn", ".", "conv2d", "(", "yi", ",", "fuse_weight", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "yi", "=", "tf", ".", "reshape", "(", "yi", ",", "[", "1", ",", "fs", "[", "1", "]", ",", "fs", "[", "2", "]", ",", "fs", "[", "1", "]", ",", "fs", "[", "2", "]", "]", ")", "\n", "yi", "=", "tf", ".", "transpose", "(", "yi", ",", "[", "0", ",", "2", ",", "1", ",", "4", ",", "3", "]", ")", "\n", "yi", "=", "tf", ".", "reshape", "(", "yi", ",", "[", "1", ",", "fs", "[", "1", "]", "*", "fs", "[", "2", "]", ",", "fs", "[", "1", "]", "*", "fs", "[", "2", "]", ",", "1", "]", ")", "\n", "yi", "=", "tf", ".", "nn", ".", "conv2d", "(", "yi", ",", "fuse_weight", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "yi", "=", "tf", ".", "reshape", "(", "yi", ",", "[", "1", ",", "fs", "[", "2", "]", ",", "fs", "[", "1", "]", ",", "fs", "[", "2", "]", ",", "fs", "[", "1", "]", "]", ")", "\n", "yi", "=", "tf", ".", "transpose", "(", "yi", ",", "[", "0", ",", "2", ",", "1", ",", "4", ",", "3", "]", ")", "\n", "", "yi", "=", "tf", ".", "reshape", "(", "yi", ",", "[", "1", ",", "fs", "[", "1", "]", ",", "fs", "[", "2", "]", ",", "fs", "[", "1", "]", "*", "fs", "[", "2", "]", "]", ")", "\n", "\n", "# softmax to match", "\n", "yi", "=", "tf", ".", "nn", ".", "softmax", "(", "yi", "*", "scale", ",", "3", ")", "\n", "\n", "wi_center1", "=", "raw1_wi", "[", "0", "]", "\n", "wi_center2", "=", "raw2_wi", "[", "0", "]", "\n", "y1", ".", "append", "(", "tf", ".", "nn", ".", "conv2d_transpose", "(", "yi", ",", "wi_center1", ",", "tf", ".", "concat", "(", "[", "[", "1", "]", ",", "bs1", "[", "1", ":", "]", "]", ",", "axis", "=", "0", ")", ",", "strides", "=", "[", "1", ",", "4", ",", "4", ",", "1", "]", ")", ")", "\n", "y2", ".", "append", "(", "tf", ".", "nn", ".", "conv2d_transpose", "(", "yi", ",", "wi_center2", ",", "tf", ".", "concat", "(", "[", "[", "1", "]", ",", "bs2", "[", "1", ":", "]", "]", ",", "axis", "=", "0", ")", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ")", ")", "\n", "\n", "", "y1", "=", "tf", ".", "concat", "(", "y1", ",", "axis", "=", "0", ")", "\n", "y2", "=", "tf", ".", "concat", "(", "y2", ",", "axis", "=", "0", ")", "\n", "\n", "return", "y1", ",", "y2", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.down_shift": [[676, 679], ["nn.int_shape", "tensorflow.concat", "tensorflow.zeros"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape"], ["", "def", "down_shift", "(", "x", ")", ":", "\n", "    ", "xs", "=", "int_shape", "(", "x", ")", "\n", "return", "tf", ".", "concat", "(", "[", "tf", ".", "zeros", "(", "[", "xs", "[", "0", "]", ",", "1", ",", "xs", "[", "2", "]", ",", "xs", "[", "3", "]", "]", ")", ",", "x", "[", ":", ",", ":", "xs", "[", "1", "]", "-", "1", ",", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.right_shift": [[680, 683], ["nn.int_shape", "tensorflow.concat", "tensorflow.zeros"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.int_shape"], ["", "def", "right_shift", "(", "x", ")", ":", "\n", "    ", "xs", "=", "int_shape", "(", "x", ")", "\n", "return", "tf", ".", "concat", "(", "[", "tf", ".", "zeros", "(", "[", "xs", "[", "0", "]", ",", "xs", "[", "1", "]", ",", "1", ",", "xs", "[", "3", "]", "]", ")", ",", "x", "[", ":", ",", ":", ",", ":", "xs", "[", "2", "]", "-", "1", ",", ":", "]", "]", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.down_shifted_conv2d": [[684, 688], ["tensorflow.pad", "nn.wnconv2d", "int", "int"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.wnconv2d"], ["", "@", "add_arg_scope", "\n", "def", "down_shifted_conv2d", "(", "x", ",", "num_filters", ",", "filter_size", "=", "[", "2", ",", "3", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "**", "kwargs", ")", ":", "\n", "    ", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "filter_size", "[", "0", "]", "-", "1", ",", "0", "]", ",", "[", "int", "(", "(", "filter_size", "[", "1", "]", "-", "1", ")", "/", "2", ")", ",", "int", "(", "(", "filter_size", "[", "1", "]", "-", "1", ")", "/", "2", ")", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "return", "wnconv2d", "(", "x", ",", "num_filters", ",", "filter_size", "=", "filter_size", ",", "pad", "=", "'VALID'", ",", "stride", "=", "stride", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.down_right_shifted_conv2d": [[689, 693], ["tensorflow.pad", "nn.wnconv2d"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.wnconv2d"], ["", "@", "add_arg_scope", "\n", "def", "down_right_shifted_conv2d", "(", "x", ",", "num_filters", ",", "filter_size", "=", "[", "2", ",", "2", "]", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "**", "kwargs", ")", ":", "\n", "    ", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "filter_size", "[", "0", "]", "-", "1", ",", "0", "]", ",", "[", "filter_size", "[", "1", "]", "-", "1", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "return", "wnconv2d", "(", "x", ",", "num_filters", ",", "filter_size", "=", "filter_size", ",", "pad", "=", "'VALID'", ",", "stride", "=", "stride", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.texture_generator.texture_generator_spec": [[6, 57], ["tensorflow.contrib.framework.python.ops.arg_scope", "tensorflow.concat", "net.gated_conv2d", "net.gated_conv2d", "net.gated_conv2d", "net.gated_conv2d", "net.gated_conv2d", "net.gated_conv2d", "net.gated_deconv2d", "tensorflow.concat", "net.gated_conv2d", "net.gated_conv2d", "net.gated_conv2d", "net.gated_conv2d", "net.gated_conv2d", "net.gated_conv2d", "net.attention_transfer", "net.gated_conv2d", "net.gated_conv2d", "tensorflow.concat", "net.gated_conv2d", "net.gated_deconv2d", "tensorflow.concat", "net.gated_conv2d", "net.gated_deconv2d", "net.gated_conv2d", "net.conv2d", "tensorflow.ones_like"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_deconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.attention_transfer", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_deconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_deconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.gated_conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d"], ["def", "texture_generator_spec", "(", "x", ",", "mask", ",", "s", ",", "nr_channel", "=", "64", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    Tensor x of shape (N,H,W,3) (e.g. (8,256,256,3))\n    Tensor mask of shape (N,H,W,1) (e.g. (8,256,256,1))\n    Tensor s of shape (N,H//8,W//8,C) (e.g. (8,32,32,64))\n    Output:\n    Tensor x_out of shape (N,H,W,3) (e.g. (8,256,256,3))\n    \"\"\"", "\n", "\n", "counters", "=", "{", "}", "\n", "with", "arg_scope", "(", "[", "nn", ".", "conv2d", ",", "nn", ".", "gated_conv2d", ",", "nn", ".", "gated_deconv2d", "]", ",", "counters", "=", "counters", ")", ":", "\n", "        ", "ones_x", "=", "tf", ".", "ones_like", "(", "x", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "x_in", "=", "tf", ".", "concat", "(", "[", "x", ",", "ones_x", ",", "ones_x", "*", "mask", "]", ",", "axis", "=", "3", ")", "\n", "\n", "cnum", "=", "nr_channel", "\n", "\n", "# Encoder", "\n", "pl1", "=", "nn", ".", "gated_conv2d", "(", "x_in", ",", "cnum", ",", "[", "5", ",", "5", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "pl1", "=", "nn", ".", "gated_conv2d", "(", "pl1", ",", "cnum", "*", "2", ",", "[", "3", ",", "3", "]", ",", "[", "2", ",", "2", "]", ")", "\n", "pl1", "=", "nn", ".", "gated_conv2d", "(", "pl1", ",", "cnum", "*", "2", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "pl2", "=", "nn", ".", "gated_conv2d", "(", "pl1", ",", "cnum", "*", "4", ",", "[", "3", ",", "3", "]", ",", "[", "2", ",", "2", "]", ")", "\n", "# Upsample structure feature maps (with quantization)", "\n", "x_s", "=", "nn", ".", "gated_conv2d", "(", "s", ",", "cnum", "*", "4", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "x_s", "=", "nn", ".", "gated_conv2d", "(", "x_s", ",", "cnum", "*", "4", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "x_s", "=", "nn", ".", "gated_deconv2d", "(", "x_s", ",", "cnum", "*", "4", ")", "\n", "pl2", "=", "tf", ".", "concat", "(", "[", "pl2", ",", "x_s", "]", ",", "axis", "=", "-", "1", ")", "\n", "pl2", "=", "nn", ".", "gated_conv2d", "(", "pl2", ",", "cnum", "*", "4", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "pl2", "=", "nn", ".", "gated_conv2d", "(", "pl2", ",", "cnum", "*", "4", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "pl2", "=", "nn", ".", "gated_conv2d", "(", "pl2", ",", "cnum", "*", "4", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ",", "rate", "=", "2", ")", "\n", "pl2", "=", "nn", ".", "gated_conv2d", "(", "pl2", ",", "cnum", "*", "4", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ",", "rate", "=", "4", ")", "\n", "pl2", "=", "nn", ".", "gated_conv2d", "(", "pl2", ",", "cnum", "*", "4", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ",", "rate", "=", "8", ")", "\n", "pl2", "=", "nn", ".", "gated_conv2d", "(", "pl2", ",", "cnum", "*", "4", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ",", "rate", "=", "16", ")", "\n", "\n", "# Attention transfer under the guidance of structure feature maps", "\n", "pl1_att", ",", "pl2_att", "=", "nn", ".", "attention_transfer", "(", "s", ",", "pl1", ",", "pl2", ",", "3", ",", "1", ",", "3", ",", "softmax_scale", "=", "50.", ",", "fuse", "=", "True", ")", "\n", "\n", "# Decoder", "\n", "x", "=", "nn", ".", "gated_conv2d", "(", "pl2", ",", "cnum", "*", "4", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "x", "=", "nn", ".", "gated_conv2d", "(", "x", ",", "cnum", "*", "4", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "pl2_att", "]", ",", "axis", "=", "-", "1", ")", "\n", "x", "=", "nn", ".", "gated_conv2d", "(", "x", ",", "cnum", "*", "4", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "x", "=", "nn", ".", "gated_deconv2d", "(", "x", ",", "cnum", "*", "2", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "pl1_att", "]", ",", "axis", "=", "-", "1", ")", "\n", "x", "=", "nn", ".", "gated_conv2d", "(", "x", ",", "cnum", "*", "2", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "x", "=", "nn", ".", "gated_deconv2d", "(", "x", ",", "cnum", ")", "\n", "x", "=", "nn", ".", "gated_conv2d", "(", "x", ",", "cnum", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "x", "=", "nn", ".", "conv2d", "(", "x", ",", "3", ",", "[", "3", ",", "3", "]", ",", "[", "1", ",", "1", "]", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "tanh", ")", "\n", "x_out", "=", "x", "\n", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.net.texture_generator.texture_discriminator_spec": [[58, 78], ["tensorflow.contrib.framework.python.ops.arg_scope", "net.snconv2d", "net.snconv2d", "net.snconv2d", "net.snconv2d", "net.snconv2d", "net.snconv2d", "tensorflow.layers.flatten"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.net.nn.snconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.snconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.snconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.snconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.snconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.snconv2d", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.flatten"], ["", "", "def", "texture_discriminator_spec", "(", "x", ",", "nr_channel", "=", "64", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n    Tensor x of shape (2*N,H,W,4) (e.g. (16,256,256,4))\n    Output:\n    Tensor x_out of shape (2*N,(H/64)*(W/64)*C\") (e.g. (16,4*4*256))\n    \"\"\"", "\n", "counters", "=", "{", "}", "\n", "with", "arg_scope", "(", "[", "nn", ".", "snconv2d", "]", ",", "filter_size", "=", "[", "5", ",", "5", "]", ",", "stride", "=", "[", "2", ",", "2", "]", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "counters", "=", "counters", ")", ":", "\n", "\n", "        ", "cnum", "=", "nr_channel", "\n", "x", "=", "nn", ".", "snconv2d", "(", "x", ",", "cnum", ")", "\n", "x", "=", "nn", ".", "snconv2d", "(", "x", ",", "cnum", "*", "2", ")", "\n", "x", "=", "nn", ".", "snconv2d", "(", "x", ",", "cnum", "*", "4", ")", "\n", "x", "=", "nn", ".", "snconv2d", "(", "x", ",", "cnum", "*", "4", ")", "\n", "x", "=", "nn", ".", "snconv2d", "(", "x", ",", "cnum", "*", "4", ")", "\n", "x", "=", "nn", ".", "snconv2d", "(", "x", ",", "cnum", "*", "4", ")", "\n", "x_out", "=", "tf", ".", "layers", ".", "flatten", "(", "x", ")", "\n", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_metrics.run": [[20, 31], ["dnnlib.init_tf", "dnnlib.EasyDict", "dnnlib.EasyDict", "network_pkls.split", "print", "metrics.metric_base.MetricGroup", "metric_base.MetricGroup.run", "float", "truncation.split"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["def", "run", "(", "network_pkls", ",", "metrics", ",", "dataset", ",", "data_dir", ",", "mirror_augment", ",", "num_repeats", ",", "truncation", ",", "resume_with_new_nets", ")", ":", "\n", "    ", "tflib", ".", "init_tf", "(", ")", "\n", "dataset_args", "=", "dnnlib", ".", "EasyDict", "(", "tfrecord_dir", "=", "dataset", ",", "shuffle_mb", "=", "0", ")", "\n", "num_gpus", "=", "dnnlib", ".", "submit_config", ".", "num_gpus", "\n", "truncations", "=", "[", "float", "(", "t", ")", "for", "t", "in", "truncation", ".", "split", "(", "','", ")", "]", "if", "truncation", "is", "not", "None", "else", "[", "None", "]", "\n", "\n", "for", "network_pkl", "in", "network_pkls", ".", "split", "(", "','", ")", ":", "\n", "        ", "print", "(", "'Evaluating metrics \"%s\" for \"%s\"...'", "%", "(", "','", ".", "join", "(", "metrics", ")", ",", "network_pkl", ")", ")", "\n", "metric_group", "=", "metric_base", ".", "MetricGroup", "(", "[", "metric_defaults", "[", "metric", "]", "for", "metric", "in", "metrics", "]", ")", "\n", "metric_group", ".", "run", "(", "network_pkl", ",", "data_dir", "=", "data_dir", ",", "dataset_args", "=", "dataset_args", ",", "mirror_augment", "=", "mirror_augment", ",", "\n", "num_gpus", "=", "num_gpus", ",", "num_repeats", "=", "num_repeats", ",", "resume_with_new_nets", "=", "resume_with_new_nets", ",", "truncations", "=", "truncations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_metrics._str_to_bool": [[34, 43], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "", "def", "_str_to_bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_metrics.main": [[46, 76], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "vars", "dnnlib.SubmitConfig", "dnnlib.SubmitConfig", "vars.pop", "vars.pop", "dnnlib.submit_run", "dnnlib.submit_run", "os.path.exists", "print", "sys.exit", "x.split"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.submit_run", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.submit_run"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Run CoModGAN metrics.'", ",", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--result-dir'", ",", "help", "=", "'Root directory for run results (default: %(default)s)'", ",", "default", "=", "'results'", ",", "metavar", "=", "'DIR'", ")", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "help", "=", "'Network pickle filename'", ",", "dest", "=", "'network_pkls'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--metrics'", ",", "help", "=", "'Metrics to compute (default: %(default)s)'", ",", "default", "=", "'ids10k'", ",", "type", "=", "lambda", "x", ":", "x", ".", "split", "(", "','", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "'Training dataset'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "help", "=", "'Dataset root directory'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--mirror-augment'", ",", "help", "=", "'Mirror augment (default: %(default)s)'", ",", "default", "=", "False", ",", "type", "=", "_str_to_bool", ",", "metavar", "=", "'BOOL'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-gpus'", ",", "help", "=", "'Number of GPUs to use'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-repeats'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--truncation'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--resume-with-new-nets'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "data_dir", ")", ":", "\n", "        ", "print", "(", "'Error: dataset root directory does not exist.'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "kwargs", "=", "vars", "(", "args", ")", "\n", "sc", "=", "dnnlib", ".", "SubmitConfig", "(", ")", "\n", "sc", ".", "num_gpus", "=", "kwargs", ".", "pop", "(", "'num_gpus'", ")", "\n", "sc", ".", "submit_target", "=", "dnnlib", ".", "SubmitTarget", ".", "LOCAL", "\n", "sc", ".", "local", ".", "do_not_copy_source_files", "=", "True", "\n", "sc", ".", "run_dir_root", "=", "kwargs", ".", "pop", "(", "'result_dir'", ")", "\n", "sc", ".", "run_desc", "=", "'run-metrics'", "\n", "dnnlib", ".", "submit_run", "(", "sc", ",", "'run_metrics.run'", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.__init__": [[23, 64], ["tkinter.Tk.__init__", "tkinter.Canvas", "run_demo.App.canvas.bind", "run_demo.App.canvas.bind", "run_demo.App.canvas.bind", "run_demo.App.canvas.bind", "run_demo.App.canvas.bind", "run_demo.App.canvas.bind", "run_demo.App.canvas.bind", "run_demo.App.canvas.bind", "run_demo.App.canvas.pack", "run_demo.App.canvas.focus_set", "run_demo.App.canvas.create_image", "dnnlib.tflib.init_tf", "training.dataset.load_dataset", "args.checkpoint.split", "run_demo.App.new_image", "run_demo.App.display", "training.misc.load_pkl", "run_demo.App.networks.append", "run_demo.App.truncations.append", "run_demo.App.model_names.append", "ckpt.split", "float", "os.path.basename", "len", "os.path.splitext"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.new_image", "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.display", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.load_pkl"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "state", "=", "-", "1", "\n", "self", ".", "canvas", "=", "tk", ".", "Canvas", "(", "self", ",", "bg", "=", "'gray'", ",", "height", "=", "args", ".", "window_size", ",", "width", "=", "args", ".", "window_size", ")", "\n", "self", ".", "canvas", ".", "bind", "(", "\"<Button-1>\"", ",", "self", ".", "L_press", ")", "\n", "self", ".", "canvas", ".", "bind", "(", "\"<ButtonRelease-1>\"", ",", "self", ".", "L_release", ")", "\n", "self", ".", "canvas", ".", "bind", "(", "\"<B1-Motion>\"", ",", "self", ".", "L_move", ")", "\n", "self", ".", "canvas", ".", "bind", "(", "\"<Button-3>\"", ",", "self", ".", "R_press", ")", "\n", "self", ".", "canvas", ".", "bind", "(", "\"<ButtonRelease-3>\"", ",", "self", ".", "R_release", ")", "\n", "self", ".", "canvas", ".", "bind", "(", "\"<B3-Motion>\"", ",", "self", ".", "R_move", ")", "\n", "self", ".", "canvas", ".", "bind", "(", "\"<Key>\"", ",", "self", ".", "key_down", ")", "\n", "self", ".", "canvas", ".", "bind", "(", "\"<KeyRelease>\"", ",", "self", ".", "key_up", ")", "\n", "self", ".", "canvas", ".", "pack", "(", ")", "\n", "\n", "self", ".", "canvas", ".", "focus_set", "(", ")", "\n", "self", ".", "canvas_image", "=", "self", ".", "canvas", ".", "create_image", "(", "0", ",", "0", ",", "anchor", "=", "'nw'", ")", "\n", "\n", "dnnlib", ".", "tflib", ".", "init_tf", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", ".", "load_dataset", "(", "tfrecord_dir", "=", "args", ".", "data_dir", ",", "verbose", "=", "True", ",", "shuffle_mb", "=", "0", ")", "\n", "\n", "self", ".", "networks", "=", "[", "]", "\n", "self", ".", "truncations", "=", "[", "]", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "for", "ckpt", "in", "args", ".", "checkpoint", ".", "split", "(", "','", ")", ":", "\n", "            ", "if", "':'", "in", "ckpt", ":", "\n", "                ", "ckpt", ",", "truncation", "=", "ckpt", ".", "split", "(", "':'", ")", "\n", "truncation", "=", "float", "(", "truncation", ")", "\n", "", "else", ":", "\n", "                ", "truncation", "=", "None", "\n", "\n", "", "_", ",", "_", ",", "Gs", "=", "misc", ".", "load_pkl", "(", "ckpt", ")", "\n", "\n", "self", ".", "networks", ".", "append", "(", "Gs", ")", "\n", "self", ".", "truncations", ".", "append", "(", "truncation", ")", "\n", "self", ".", "model_names", ".", "append", "(", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "splitext", "(", "ckpt", ")", "[", "0", "]", ")", ")", "\n", "\n", "", "self", ".", "key_list", "=", "[", "'q'", ",", "'w'", ",", "'e'", ",", "'r'", ",", "'t'", ",", "'y'", ",", "'u'", ",", "'i'", ",", "'o'", ",", "'p'", "]", "[", ":", "len", "(", "self", ".", "networks", ")", "]", "\n", "self", ".", "image_id", "=", "-", "1", "\n", "\n", "self", ".", "new_image", "(", ")", "\n", "self", ".", "display", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.generate": [[65, 71], ["numpy.random.randn", "training.misc.adjust_dynamic_range", "run_demo.App.networks[].run", "training.misc.adjust_dynamic_range().clip().astype", "training.misc.adjust_dynamic_range().clip", "training.misc.adjust_dynamic_range"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.misc.adjust_dynamic_range", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.adjust_dynamic_range"], ["", "def", "generate", "(", "self", ",", "idx", "=", "0", ")", ":", "\n", "        ", "self", ".", "cur_idx", "=", "idx", "\n", "latent", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "*", "self", ".", "networks", "[", "idx", "]", ".", "input_shape", "[", "1", ":", "]", ")", "\n", "real", "=", "misc", ".", "adjust_dynamic_range", "(", "self", ".", "real_image", ",", "[", "0", ",", "255", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "fake", "=", "self", ".", "networks", "[", "idx", "]", ".", "run", "(", "latent", ",", "self", ".", "label", ",", "real", ",", "self", ".", "mask", ",", "truncation_psi", "=", "self", ".", "truncations", "[", "idx", "]", ")", "\n", "self", ".", "fake_image", "=", "misc", ".", "adjust_dynamic_range", "(", "fake", ",", "[", "-", "1", ",", "1", "]", ",", "[", "0", ",", "255", "]", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.new_image": [[72, 79], ["run_demo.App.dataset.get_minibatch_val_np", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_val_np"], ["", "def", "new_image", "(", "self", ")", ":", "\n", "        ", "self", ".", "image_id", "+=", "1", "\n", "self", ".", "save_count", "=", "0", "\n", "self", ".", "real_image", ",", "self", ".", "label", "=", "self", ".", "dataset", ".", "get_minibatch_val_np", "(", "1", ")", "\n", "self", ".", "resolution", "=", "self", ".", "real_image", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "mask", "=", "np", ".", "ones", "(", "(", "1", ",", "1", ",", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ",", "np", ".", "uint8", ")", "\n", "self", ".", "mask_history", "=", "[", "self", ".", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.display": [[80, 89], ["numpy.transpose", "cv2.resize", "PIL.ImageTk.PhotoImage", "run_demo.App.canvas.itemconfig", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize"], ["", "def", "display", "(", "self", ",", "state", "=", "0", ")", ":", "\n", "        ", "if", "state", "!=", "self", ".", "state", ":", "\n", "            ", "self", ".", "last_state", "=", "self", ".", "state", "\n", "", "self", ".", "state", "=", "state", "\n", "self", ".", "image", "=", "self", ".", "real_image", "if", "self", ".", "state", "==", "1", "else", "self", ".", "fake_image", "if", "self", ".", "state", "==", "2", "else", "self", ".", "real_image", "*", "self", ".", "mask", "\n", "self", ".", "image_for_display", "=", "np", ".", "transpose", "(", "self", ".", "image", "[", "0", ",", ":", "3", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "self", ".", "image_for_display_resized", "=", "cv2", ".", "resize", "(", "self", ".", "image_for_display", ",", "(", "args", ".", "window_size", ",", "args", ".", "window_size", ")", ")", "\n", "self", ".", "tkimage", "=", "ImageTk", ".", "PhotoImage", "(", "image", "=", "Image", ".", "fromarray", "(", "self", ".", "image_for_display_resized", ")", ")", "\n", "self", ".", "canvas", ".", "itemconfig", "(", "self", ".", "canvas_image", ",", "image", "=", "self", ".", "tkimage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.save_image": [[90, 100], ["os.path.join", "os.path.exists", "os.makedirs", "cv2.imwrite", "cv2.imwrite", "os.path.join", "os.path.basename", "str", "os.path.join", "hashlib.sha1().hexdigest", "numpy.transpose", "hashlib.sha1", "str", "run_demo.App.mask.tostring"], "methods", ["None"], ["", "def", "save_image", "(", "self", ")", ":", "\n", "        ", "folder_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'-'", ".", "join", "(", "[", "os", ".", "path", ".", "basename", "(", "args", ".", "data_dir", ")", ",", "str", "(", "self", ".", "image_id", ")", ",", "hashlib", ".", "sha1", "(", "self", ".", "mask", ".", "tostring", "(", ")", ")", ".", "hexdigest", "(", ")", "[", ":", "6", "]", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder_name", ")", "\n", "self", ".", "save_count", "=", "0", "\n", "for", "img", ",", "name", "in", "[", "[", "self", ".", "real_image", ",", "'real'", "]", ",", "[", "self", ".", "real_image", "*", "self", ".", "mask", ",", "'masked'", "]", "]", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "folder_name", ",", "name", "+", "'.jpg'", ")", ",", "np", ".", "transpose", "(", "img", "[", "0", ",", ":", "3", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "", "", "if", "self", ".", "state", "==", "2", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "folder_name", ",", "'-'", ".", "join", "(", "[", "self", ".", "model_names", "[", "self", ".", "cur_idx", "]", ",", "str", "(", "self", ".", "save_count", ")", "]", ")", "+", "'.jpg'", ")", ",", "self", ".", "image_for_display", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "self", ".", "save_count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.get_pos": [[101, 103], ["int", "int"], "methods", ["None"], ["", "", "def", "get_pos", "(", "self", ",", "event", ")", ":", "\n", "        ", "return", "(", "int", "(", "event", ".", "x", "*", "self", ".", "resolution", "/", "args", ".", "window_size", ")", ",", "int", "(", "event", ".", "y", "*", "self", ".", "resolution", "/", "args", ".", "window_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.L_press": [[104, 106], ["run_demo.App.get_pos"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.get_pos"], ["", "def", "L_press", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "last_pos", "=", "self", ".", "get_pos", "(", "event", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.L_move": [[107, 118], ["run_demo.App.get_pos", "PIL.Image.fromarray", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw.line", "PIL.ImageDraw.Draw.ellipse", "run_demo.App.display", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.get_pos", "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.display"], ["", "def", "L_move", "(", "self", ",", "event", ")", ":", "\n", "        ", "a", "=", "self", ".", "last_pos", "\n", "b", "=", "self", ".", "get_pos", "(", "event", ")", "\n", "width", "=", "30", "\n", "img", "=", "Image", ".", "fromarray", "(", "self", ".", "mask", "[", "0", ",", "0", "]", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "draw", ".", "line", "(", "[", "a", ",", "b", "]", ",", "fill", "=", "0", ",", "width", "=", "width", ")", "\n", "draw", ".", "ellipse", "(", "(", "b", "[", "0", "]", "-", "width", "//", "2", ",", "b", "[", "1", "]", "-", "width", "//", "2", ",", "b", "[", "0", "]", "+", "width", "//", "2", ",", "b", "[", "1", "]", "+", "width", "//", "2", ")", ",", "fill", "=", "0", ")", "\n", "self", ".", "mask", "=", "np", ".", "array", "(", "img", ")", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "...", "]", "\n", "self", ".", "display", "(", ")", "\n", "self", ".", "last_pos", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.L_release": [[119, 122], ["run_demo.App.L_move", "run_demo.App.mask_history.append"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.L_move"], ["", "def", "L_release", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "L_move", "(", "event", ")", "\n", "self", ".", "mask_history", ".", "append", "(", "self", ".", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.R_press": [[123, 125], ["run_demo.App.get_pos"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.get_pos"], ["", "def", "R_press", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "last_pos", "=", "self", ".", "get_pos", "(", "event", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.R_move": [[126, 132], ["run_demo.App.get_pos", "run_demo.App.mask_history[].copy", "run_demo.App.display", "max", "max", "max", "max", "min", "min"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.get_pos", "home.repos.pwc.inspect_result.plai-group_ipa.None.hps.Hyperparams.copy", "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.display"], ["", "def", "R_move", "(", "self", ",", "event", ")", ":", "\n", "        ", "a", "=", "self", ".", "last_pos", "\n", "b", "=", "self", ".", "get_pos", "(", "event", ")", "\n", "self", ".", "mask", "=", "self", ".", "mask_history", "[", "-", "1", "]", ".", "copy", "(", ")", "\n", "self", ".", "mask", "[", "0", ",", "0", ",", "max", "(", "min", "(", "a", "[", "1", "]", ",", "b", "[", "1", "]", ")", ",", "0", ")", ":", "max", "(", "a", "[", "1", "]", ",", "b", "[", "1", "]", ")", ",", "max", "(", "min", "(", "a", "[", "0", "]", ",", "b", "[", "0", "]", ")", ",", "0", ")", ":", "max", "(", "a", "[", "0", "]", ",", "b", "[", "0", "]", ")", "]", "=", "0", "\n", "self", ".", "display", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.R_release": [[133, 136], ["run_demo.App.R_move", "run_demo.App.mask_history.append"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.R_move"], ["", "def", "R_release", "(", "self", ",", "event", ")", ":", "\n", "        ", "self", ".", "R_move", "(", "event", ")", "\n", "self", ".", "mask_history", ".", "append", "(", "self", ".", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.key_down": [[137, 158], ["len", "run_demo.App.mask_history.pop", "run_demo.App.display", "run_demo.App.generate", "run_demo.App.display", "run_demo.App.generate", "run_demo.App.display", "run_demo.App.key_list.index", "run_demo.App.save_image", "run_demo.App.new_image", "run_demo.App.display", "run_demo.App.display", "run_demo.App.display"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.display", "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.generate", "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.display", "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.generate", "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.display", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.save_image", "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.new_image", "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.display", "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.display", "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.display"], ["", "def", "key_down", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "event", ".", "keysym", "==", "'z'", ":", "\n", "            ", "if", "len", "(", "self", ".", "mask_history", ")", ">", "1", ":", "\n", "                ", "self", ".", "mask_history", ".", "pop", "(", ")", "\n", "self", ".", "mask", "=", "self", ".", "mask_history", "[", "-", "1", "]", "\n", "self", ".", "display", "(", ")", "\n", "", "", "elif", "event", ".", "keysym", "==", "'space'", ":", "\n", "            ", "self", ".", "generate", "(", ")", "\n", "self", ".", "display", "(", "2", ")", "\n", "", "elif", "event", ".", "keysym", "in", "self", ".", "key_list", ":", "\n", "            ", "self", ".", "generate", "(", "self", ".", "key_list", ".", "index", "(", "event", ".", "keysym", ")", ")", "\n", "self", ".", "display", "(", "2", ")", "\n", "", "elif", "event", ".", "keysym", "==", "'s'", ":", "\n", "            ", "self", ".", "save_image", "(", ")", "\n", "", "elif", "event", ".", "keysym", "==", "'Return'", ":", "\n", "            ", "self", ".", "new_image", "(", ")", "\n", "self", ".", "display", "(", ")", "\n", "", "elif", "event", ".", "keysym", "==", "'1'", ":", "\n", "            ", "self", ".", "display", "(", "1", ")", "\n", "", "elif", "event", ".", "keysym", "==", "'2'", ":", "\n", "            ", "self", ".", "display", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.key_up": [[159, 162], ["run_demo.App.display"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.App.display"], ["", "", "def", "key_up", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "event", ".", "keysym", "in", "[", "'1'", ",", "'2'", "]", ":", "\n", "            ", "self", ".", "display", "(", "self", ".", "last_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_demo.main": [[163, 166], ["run_demo.App", "App.mainloop"], "function", ["None"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "app", "=", "App", "(", ")", "\n", "app", ".", "mainloop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.NewDataset.__init__": [[56, 72], ["torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "list", "data.cifar10", "torch.as_tensor", "torch.as_tensor", "data.ffhq256", "numpy.transpose", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.cifar10", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.ffhq256"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "            ", "(", "trX", ",", "_", ")", ",", "(", "vaX", ",", "_", ")", ",", "(", "teX", ",", "_", ")", "=", "cifar10", "(", "args", ".", "data_root", ",", "one_hot", "=", "False", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"ffhq256\"", ":", "\n", "            ", "trX", ",", "vaX", ",", "teX", "=", "ffhq256", "(", "args", ".", "data_root", ")", "\n", "\n", "", "self", ".", "batch_size", "=", "None", "\n", "self", ".", "train_set", "=", "TensorDataset", "(", "torch", ".", "as_tensor", "(", "np", ".", "transpose", "(", "trX", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", ")", ")", "\n", "self", ".", "valid_set", "=", "TensorDataset", "(", "torch", ".", "as_tensor", "(", "np", ".", "transpose", "(", "vaX", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", ")", ")", "\n", "self", ".", "train_iterator", "=", "None", "#self._iterator(self.train_loader)", "\n", "self", ".", "valid_iterator", "=", "None", "#self._iterator(self.valid_loader)", "\n", "self", ".", "example_batch", "=", "None", "#next(iter(self.train_loader))", "\n", "\n", "self", ".", "shape", "=", "list", "(", "self", ".", "train_set", "[", "0", "]", "[", "0", "]", ".", "shape", ")", "\n", "self", ".", "resolution", "=", "self", ".", "shape", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.NewDataset._iterator": [[73, 77], ["x[].contiguous().numpy", "x[].contiguous"], "methods", ["None"], ["", "def", "_iterator", "(", "self", ",", "dataloader", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "x", "in", "dataloader", ":", "\n", "                ", "yield", "x", "[", "0", "]", ".", "contiguous", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.NewDataset.close": [[78, 80], ["None"], "methods", ["None"], ["", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.NewDataset.configure": [[82, 99], ["int", "numpy.floor", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "helpers.NewDataset._iterator", "helpers.NewDataset._iterator", "next", "iter"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset._iterator", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset._iterator"], ["", "def", "configure", "(", "self", ",", "minibatch_size", ",", "lod", "=", "0", ",", "hole_range", "=", "[", "0", ",", "1", "]", ")", ":", "\n", "        ", "lod", "=", "int", "(", "np", ".", "floor", "(", "lod", ")", ")", "\n", "assert", "minibatch_size", ">=", "1", "#and lod in self._tf_datasets", "\n", "assert", "lod", "==", "0", "\n", "if", "self", ".", "batch_size", "!=", "minibatch_size", ":", "\n", "            ", "self", ".", "batch_size", "=", "minibatch_size", "\n", "train_loader", "=", "DataLoader", "(", "self", ".", "train_set", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "valid_loader", "=", "DataLoader", "(", "self", ".", "valid_set", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "self", ".", "train_iterator", "=", "self", ".", "_iterator", "(", "train_loader", ")", "\n", "self", ".", "valid_iterator", "=", "self", ".", "_iterator", "(", "valid_loader", ")", "\n", "self", ".", "example_batch", "=", "next", "(", "iter", "(", "train_loader", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.NewDataset.get_minibatch_tf": [[101, 104], ["next", "helpers.NewDataset.get_random_labels_tf"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_labels_tf"], ["", "", "def", "get_minibatch_tf", "(", "self", ")", ":", "# => images, labels", "\n", "        ", "assert", "self", ".", "batch_size", "is", "not", "None", "\n", "return", "next", "(", "self", ".", "train_iterator", ")", ",", "self", ".", "get_random_labels_tf", "(", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.NewDataset.get_minibatch_val_tf": [[105, 108], ["next", "helpers.NewDataset.get_random_labels_tf"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_labels_tf"], ["", "def", "get_minibatch_val_tf", "(", "self", ")", ":", "# => images, labels", "\n", "        ", "assert", "self", ".", "batch_size", "is", "not", "None", "\n", "return", "next", "(", "self", ".", "valid_iterator", ")", ",", "self", ".", "get_random_labels_tf", "(", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.NewDataset.get_minibatch_np": [[110, 113], ["helpers.NewDataset.configure", "helpers.NewDataset.get_minibatch_tf"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.configure", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_tf"], ["", "def", "get_minibatch_np", "(", "self", ",", "minibatch_size", ",", "lod", "=", "0", ")", ":", "# => images, labels", "\n", "        ", "self", ".", "configure", "(", "minibatch_size", ",", "lod", ")", "\n", "return", "self", ".", "get_minibatch_tf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.NewDataset.get_minibatch_val_np": [[114, 117], ["helpers.NewDataset.configure", "helpers.NewDataset.get_minibatch_val_tf"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.configure", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_val_tf"], ["", "def", "get_minibatch_val_np", "(", "self", ",", "minibatch_size", ",", "lod", "=", "0", ")", ":", "# => images, labels", "\n", "        ", "self", ".", "configure", "(", "minibatch_size", ",", "lod", ")", "\n", "return", "self", ".", "get_minibatch_val_tf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.NewDataset.get_random_masks_tf": [[119, 121], ["sample_mask().numpy", "helpers.sample_mask"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask"], ["", "def", "get_random_masks_tf", "(", "self", ")", ":", "# => images, labels", "\n", "        ", "return", "sample_mask", "(", "self", ".", "args", ",", "self", ".", "example_batch", ")", ".", "numpy", "(", ")", "\n", "#tf.convert_to_tensor", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.NewDataset.get_random_labels_tf": [[124, 128], ["numpy.zeros"], "methods", ["None"], ["", "def", "get_random_labels_tf", "(", "self", ",", "minibatch_size", ")", ":", "# => labels", "\n", "# with tf.name_scope('Dataset'):", "\n", "#     return tf.zeros([minibatch_size, 0], self.label_dtype)", "\n", "        ", "return", "np", ".", "zeros", "(", "[", "minibatch_size", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.sample_mask": [[23, 29], ["x.unsqueeze.unsqueeze", "x.unsqueeze.contiguous", "vae_helpers.sample_part_images", "batch.permute"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_part_images"], ["def", "sample_mask", "(", "args", ",", "batch", ")", ":", "\n", "# args shoudld have the following attributes:", "\n", "# conditioning, max_patches, patch_size_frac, and kls (only for foveal conditioning)", "\n", "    ", "x", "=", "sample_part_images", "(", "args", ",", "batch", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "[", "...", ",", "-", "1", "]", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.log_images": [[31, 52], ["vae_helpers.rng_decorator", "model.eval", "helpers.sample_mask", "range", "wandb.log", "model.train", "model", "inpainted.cpu().numpy", "len", "range", "numpy.concatenate", "to_plot.transpose.transpose", "log_dict.update", "viz_batch_processed[].cpu().numpy", "to_plot.transpose.append", "inpainted.cpu", "numpy.clip", "wandb.Image", "viz_batch_processed[].cpu", "inpaint().squeeze", "helpers.log_images.inpaint"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.inpaint"], ["", "@", "rng_decorator", "(", "0", ")", "\n", "def", "log_images", "(", "args", ",", "model", ",", "viz_batch_processed", ")", ":", "\n", "    ", "def", "inpaint", "(", "gt_images", ",", "masks", ")", ":", "\n", "        ", "masked_images", "=", "gt_images", "*", "masks", "\n", "recon", ",", "mask", "=", "model", "(", "masked_images", ",", "masks", ",", "rounds", "=", "-", "1", ")", "\n", "inpainted", "=", "recon", "*", "(", "1", "-", "masks", ")", "+", "gt_images", "*", "masks", "\n", "return", "inpainted", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "masks", "=", "sample_mask", "(", "args", ",", "viz_batch_processed", ")", "\n", "log_dict", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "len", "(", "viz_batch_processed", ")", ")", ":", "\n", "        ", "to_plot", "=", "[", "(", "viz_batch_processed", "[", "idx", "]", "*", "masks", "[", "idx", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "viz_batch_processed", "[", "idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "for", "_", "in", "range", "(", "args", ".", "num_samples_visualize", ")", ":", "\n", "            ", "to_plot", ".", "append", "(", "np", ".", "clip", "(", "inpaint", "(", "viz_batch_processed", "[", "idx", "]", ".", "unsqueeze", "(", "0", ")", ",", "masks", "[", "idx", "]", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", ",", "0", ",", "1", ")", ")", "\n", "", "to_plot", "=", "np", ".", "concatenate", "(", "to_plot", ",", "axis", "=", "-", "1", ")", "\n", "to_plot", "=", "to_plot", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "caption", "=", "f\"Sample {idx}\"", "\n", "log_dict", ".", "update", "(", "{", "caption", ":", "wandb", ".", "Image", "(", "to_plot", ",", "caption", "=", "caption", ")", "}", ")", "\n", "", "wandb", ".", "log", "(", "log_dict", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.load_dataset_new": [[130, 140], ["argparse.Namespace", "helpers.NewDataset"], "function", ["None"], ["", "", "def", "load_dataset_new", "(", "dataset", ",", "data_root", ",", "\n", "conditioning", ",", "\n", "max_patches", ",", "\n", "patch_size_frac", ")", ":", "\n", "    ", "args", "=", "Namespace", "(", "dataset", "=", "dataset", ",", "\n", "data_root", "=", "data_root", ",", "\n", "conditioning", "=", "conditioning", ",", "\n", "max_patches", "=", "max_patches", ",", "\n", "patch_size_frac", "=", "patch_size_frac", ")", "\n", "return", "NewDataset", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers._str_to_bool": [[146, 155], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "_str_to_bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers._parse_comma_sep": [[156, 160], ["s.split", "s.lower"], "function", ["None"], ["", "", "def", "_parse_comma_sep", "(", "s", ")", ":", "\n", "    ", "if", "s", "is", "None", "or", "s", ".", "lower", "(", ")", "==", "'none'", "or", "s", "==", "''", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "s", ".", "split", "(", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.helpers.main": [[170, 206], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "helpers.NewDataset", "helpers.NewDataset.configure", "pdb.set_trace", "print"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.configure"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Train CoModGAN.'", ",", "\n", "epilog", "=", "_examples", ",", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--result-dir'", ",", "help", "=", "'Root directory for run results (default: %(default)s)'", ",", "default", "=", "'results'", ",", "metavar", "=", "'DIR'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "choices", "=", "[", "'cifar10'", ",", "'ffhq256'", "]", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--num-gpus'", ",", "help", "=", "'Number of GPUs (default: %(default)s)'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--total-kimg'", ",", "help", "=", "'Training length in thousands of images (default: %(default)s)'", ",", "metavar", "=", "'KIMG'", ",", "default", "=", "25000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--mirror-augment'", ",", "help", "=", "'Mirror augment (default: %(default)s)'", ",", "default", "=", "False", ",", "metavar", "=", "'BOOL'", ",", "type", "=", "_str_to_bool", ")", "\n", "parser", ".", "add_argument", "(", "'--metrics'", ",", "help", "=", "'Comma-separated list of metrics or \"none\" (default: %(default)s)'", ",", "default", "=", "'ids10k'", ",", "type", "=", "_parse_comma_sep", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--resume-with-new-nets'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-style-mod'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-cond-mod'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "### New arguments", "\n", "parser", ".", "add_argument", "(", "'--tags'", ",", "type", "=", "str", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--conditioning'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'patches'", ",", "'patches-missing'", ",", "'blank'", "]", ",", "default", "=", "'patches'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'../../'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_patches'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--patch_size_frac'", ",", "type", "=", "float", ",", "default", "=", "0.35", ",", "\n", "help", "=", "\"Patch width as fraction of image width.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_images_visualize'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--num_samples_visualize'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--img_size'", ",", "type", "=", "int", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "dataset", "=", "NewDataset", "(", "args", ")", "\n", "dataset", ".", "configure", "(", "minibatch_size", "=", "12", ")", "\n", "\n", "\n", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "print", "(", "\"done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_training.run": [[28, 85], ["dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.SubmitConfig", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict.update", "dnnlib.EasyDict.update", "dnnlib.EasyDict.update", "copy.deepcopy", "dnnlib.submit_run", "os.path.basename", "int", "os.path.basename().replace().split", "os.path.basename().replace", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.submit_run"], ["", "def", "run", "(", "dataset", ",", "data_dir", ",", "result_dir", ",", "num_gpus", ",", "total_kimg", ",", "mirror_augment", ",", "metrics", ",", "resume", ",", "resume_with_new_nets", ",", "disable_style_mod", ",", "disable_cond_mod", ",", "\n", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "args", ".", "image_snapshot_ticks", "=", "50", "\n", "args", ".", "network_snapshot_ticks", "=", "50", "\n", "train", "=", "EasyDict", "(", "run_func_name", "=", "'training.training_loop.training_loop'", ")", "# Options for training loop.", "\n", "G", "=", "EasyDict", "(", "func_name", "=", "'training.co_mod_gan.G_main'", ")", "# Options for generator network.", "\n", "D", "=", "EasyDict", "(", "func_name", "=", "'training.co_mod_gan.D_co_mod_gan'", ")", "# Options for discriminator network.", "\n", "G_opt", "=", "EasyDict", "(", "beta1", "=", "0.0", ",", "beta2", "=", "0.99", ",", "epsilon", "=", "1e-8", ")", "# Options for generator optimizer.", "\n", "D_opt", "=", "EasyDict", "(", "beta1", "=", "0.0", ",", "beta2", "=", "0.99", ",", "epsilon", "=", "1e-8", ")", "# Options for discriminator optimizer.", "\n", "G_loss", "=", "EasyDict", "(", "func_name", "=", "'training.loss.G_masked_logistic_ns_l1'", ")", "# Options for generator loss.", "\n", "D_loss", "=", "EasyDict", "(", "func_name", "=", "'training.loss.D_masked_logistic_r1'", ")", "# Options for discriminator loss.", "\n", "sched", "=", "EasyDict", "(", ")", "# Options for TrainingSchedule.", "\n", "grid", "=", "EasyDict", "(", "size", "=", "'8k'", ",", "layout", "=", "'random'", ")", "# Options for setup_snapshot_image_grid().", "\n", "sc", "=", "dnnlib", ".", "SubmitConfig", "(", ")", "# Options for dnnlib.submit_run().", "\n", "tf_config", "=", "{", "'rnd.np_random_seed'", ":", "args", ".", "seed", "}", "\n", "\n", "train", ".", "args", "=", "args", "\n", "sched", ".", "G_lrate_base", "=", "sched", ".", "D_lrate_base", "=", "0.002", "\n", "sched", ".", "minibatch_size_base", "=", "32", "\n", "if", "args", ".", "batch_gpu", "is", "None", ":", "\n", "        ", "sched", ".", "minibatch_gpu_base", "=", "8", "\n", "sched", ".", "minibatch_gpu_dict", "=", "{", "32", ":", "16", ",", "64", ":", "16", ",", "256", ":", "8", "}", "\n", "", "else", ":", "\n", "        ", "sched", ".", "minibatch_gpu_base", "=", "args", ".", "batch_gpu", "\n", "sched", ".", "minibatch_gpu_dict", "=", "{", "}", "\n", "", "D_loss", ".", "gamma", "=", "10", "\n", "metrics", "=", "[", "metric_defaults", "[", "x", "]", "for", "x", "in", "metrics", "]", "\n", "desc", "=", "'co-mod-gan'", "\n", "\n", "desc", "+=", "'-'", "+", "os", ".", "path", ".", "basename", "(", "dataset", ")", "\n", "dataset_args", "=", "EasyDict", "(", "tfrecord_dir", "=", "f\"tfrecords/{dataset}\"", ")", "\n", "\n", "assert", "num_gpus", "in", "[", "1", ",", "2", ",", "4", ",", "8", "]", "\n", "sc", ".", "num_gpus", "=", "num_gpus", "\n", "desc", "+=", "'-%dgpu'", "%", "num_gpus", "\n", "\n", "if", "resume", "is", "not", "None", ":", "\n", "        ", "resume_kimg", "=", "int", "(", "os", ".", "path", ".", "basename", "(", "resume", ")", ".", "replace", "(", "'.pkl'", ",", "''", ")", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "resume_kimg", "=", "0", "\n", "\n", "", "if", "disable_style_mod", ":", "\n", "        ", "G", ".", "style_mod", "=", "False", "\n", "\n", "", "if", "disable_cond_mod", ":", "\n", "        ", "G", ".", "cond_mod", "=", "False", "\n", "\n", "", "sc", ".", "submit_target", "=", "dnnlib", ".", "SubmitTarget", ".", "LOCAL", "\n", "sc", ".", "local", ".", "do_not_copy_source_files", "=", "True", "\n", "kwargs", "=", "EasyDict", "(", "train", ")", "\n", "kwargs", ".", "update", "(", "G_args", "=", "G", ",", "D_args", "=", "D", ",", "G_opt_args", "=", "G_opt", ",", "D_opt_args", "=", "D_opt", ",", "G_loss_args", "=", "G_loss", ",", "D_loss_args", "=", "D_loss", ")", "\n", "kwargs", ".", "update", "(", "dataset_args", "=", "dataset_args", ",", "sched_args", "=", "sched", ",", "grid_args", "=", "grid", ",", "metric_arg_list", "=", "metrics", ",", "tf_config", "=", "tf_config", ")", "\n", "kwargs", ".", "update", "(", "resume_pkl", "=", "resume", ",", "resume_kimg", "=", "resume_kimg", ",", "resume_with_new_nets", "=", "resume_with_new_nets", ")", "\n", "kwargs", ".", "submit_config", "=", "copy", ".", "deepcopy", "(", "sc", ")", "\n", "kwargs", ".", "submit_config", ".", "run_dir_root", "=", "result_dir", "\n", "kwargs", ".", "submit_config", ".", "run_desc", "=", "desc", "\n", "dnnlib", ".", "submit_run", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_training._str_to_bool": [[88, 97], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "_str_to_bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_training._parse_comma_sep": [[98, 102], ["s.split", "s.lower"], "function", ["None"], ["", "", "def", "_parse_comma_sep", "(", "s", ")", ":", "\n", "    ", "if", "s", "is", "None", "or", "s", ".", "lower", "(", ")", "==", "'none'", "or", "s", "==", "''", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "s", ".", "split", "(", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.co_mod_gan.run_training.main": [[112, 148], ["argparse.ArgumentParser", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args", "vae_helpers.baseline_utils.update_args.parse_args", "wandb.init", "run_training.run", "print", "sys.exit", "wandb.Settings", "vars"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.baseline_utils.update_args", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Train CoModGAN.'", ",", "\n", "epilog", "=", "_examples", ",", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--result_dir'", ",", "help", "=", "'Root directory for run results (default: %(default)s)'", ",", "default", "=", "'results'", ",", "metavar", "=", "'DIR'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "help", "=", "'Dataset root directory'", ",", "required", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "'Training dataset'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--num_gpus'", ",", "help", "=", "'Number of GPUs (default: %(default)s)'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--total_kimg'", ",", "help", "=", "'Training length in thousands of images (default: %(default)s)'", ",", "metavar", "=", "'KIMG'", ",", "default", "=", "25000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--mirror_augment'", ",", "help", "=", "'Mirror augment (default: %(default)s)'", ",", "default", "=", "False", ",", "metavar", "=", "'BOOL'", ",", "type", "=", "_str_to_bool", ")", "\n", "parser", ".", "add_argument", "(", "'--metrics'", ",", "help", "=", "'Comma-separated list of metrics or \"none\" (default: %(default)s)'", ",", "default", "=", "'ids10k'", ",", "type", "=", "_parse_comma_sep", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--resume-with-new-nets'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-style-mod'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-cond-mod'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "### New arguments", "\n", "parser", ".", "add_argument", "(", "'--save_image_grids'", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "help", "=", "\"Number of workers for mask_generator sampler. If not given, the main process will sample the masks. Recommended: 8\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_gpu'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"Batch size for each GPU. By default, it set based on minibatch_gpu_base and minibatch_gpu_dict.\"", ")", "\n", "parser", "=", "update_args", "(", "parser", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "for", "metric", "in", "args", ".", "metrics", ":", "\n", "        ", "if", "metric", "not", "in", "metric_defaults", ":", "\n", "            ", "print", "(", "'Error: unknown metric \\'%s\\''", "%", "metric", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "wandb", ".", "init", "(", "project", "=", "PROJECT_NAME", ",", "entity", "=", "os", ".", "environ", "[", "'WANDB_ENTITY'", "]", ",", "\n", "config", "=", "args", ",", "tags", "=", "args", ".", "tags", ",", "sync_tensorboard", "=", "True", ",", "\n", "settings", "=", "wandb", ".", "Settings", "(", "start_method", "=", "'fork'", ")", ")", "\n", "\n", "run", "(", "args", "=", "args", ",", "**", "vars", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.EasyDict.__getattr__": [[38, 43], ["AttributeError"], "methods", ["None"], ["def", "__getattr__", "(", "self", ",", "name", ":", "str", ")", "->", "Any", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.EasyDict.__setattr__": [[44, 46], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ":", "str", ",", "value", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.EasyDict.__delattr__": [[47, 49], ["None"], "methods", ["None"], ["", "def", "__delattr__", "(", "self", ",", "name", ":", "str", ")", "->", "None", ":", "\n", "        ", "del", "self", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.__init__": [[54, 66], ["open"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "file_name", ":", "str", "=", "None", ",", "file_mode", ":", "str", "=", "\"w\"", ",", "should_flush", ":", "bool", "=", "True", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "\n", "if", "file_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "file_name", ",", "file_mode", ")", "\n", "\n", "", "self", ".", "should_flush", "=", "should_flush", "\n", "self", ".", "stdout", "=", "sys", ".", "stdout", "\n", "self", ".", "stderr", "=", "sys", ".", "stderr", "\n", "\n", "sys", ".", "stdout", "=", "self", "\n", "sys", ".", "stderr", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.__enter__": [[67, 69], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", "->", "\"Logger\"", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.__exit__": [[70, 72], ["util.Logger.close"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ":", "Any", ",", "exc_value", ":", "Any", ",", "traceback", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write": [[73, 85], ["util.Logger.stdout.write", "len", "util.Logger.file.write", "util.Logger.flush"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.flush"], ["", "def", "write", "(", "self", ",", "text", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"Write text to stdout (and a file) and optionally flush.\"\"\"", "\n", "if", "len", "(", "text", ")", "==", "0", ":", "# workaround for a bug in VSCode debugger: sys.stdout.write(''); sys.stdout.flush() => crash", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "text", ")", "\n", "\n", "", "self", ".", "stdout", ".", "write", "(", "text", ")", "\n", "\n", "if", "self", ".", "should_flush", ":", "\n", "            ", "self", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.flush": [[86, 92], ["util.Logger.stdout.flush", "util.Logger.file.flush"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Flush written text to both stdout and a file, if open.\"\"\"", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n", "", "self", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.close": [[93, 105], ["util.Logger.flush", "util.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Flush, close possible files, and remove stdout/stderr mirroring.\"\"\"", "\n", "self", ".", "flush", "(", ")", "\n", "\n", "# if using multiple loggers, prevent closing in wrong order", "\n", "if", "sys", ".", "stdout", "is", "self", ":", "\n", "            ", "sys", ".", "stdout", "=", "self", ".", "stdout", "\n", "", "if", "sys", ".", "stderr", "is", "self", ":", "\n", "            ", "sys", ".", "stderr", "=", "self", ".", "stderr", "\n", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.format_time": [[111, 123], ["int", "numpy.rint"], "function", ["None"], ["", "", "", "def", "format_time", "(", "seconds", ":", "Union", "[", "int", ",", "float", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"Convert the seconds to human readable string with days, hours, minutes and seconds.\"\"\"", "\n", "s", "=", "int", "(", "np", ".", "rint", "(", "seconds", ")", ")", "\n", "\n", "if", "s", "<", "60", ":", "\n", "        ", "return", "\"{0}s\"", ".", "format", "(", "s", ")", "\n", "", "elif", "s", "<", "60", "*", "60", ":", "\n", "        ", "return", "\"{0}m {1:02}s\"", ".", "format", "(", "s", "//", "60", ",", "s", "%", "60", ")", "\n", "", "elif", "s", "<", "24", "*", "60", "*", "60", ":", "\n", "        ", "return", "\"{0}h {1:02}m {2:02}s\"", ".", "format", "(", "s", "//", "(", "60", "*", "60", ")", ",", "(", "s", "//", "60", ")", "%", "60", ",", "s", "%", "60", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"{0}d {1:02}h {2:02}m\"", ".", "format", "(", "s", "//", "(", "24", "*", "60", "*", "60", ")", ",", "(", "s", "//", "(", "60", "*", "60", ")", ")", "%", "24", ",", "(", "s", "//", "60", ")", "%", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.ask_yes_no": [[125, 133], ["print", "distutils.util.strtobool", "input().lower", "input"], "function", ["None"], ["", "", "def", "ask_yes_no", "(", "question", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Ask the user the question until the user inputs a valid answer.\"\"\"", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "\"{0} [y/n]\"", ".", "format", "(", "question", ")", ")", "\n", "return", "strtobool", "(", "input", "(", ")", ".", "lower", "(", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.tuple_product": [[135, 143], ["None"], "function", ["None"], ["", "", "", "def", "tuple_product", "(", "t", ":", "Tuple", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Calculate the product of the tuple elements.\"\"\"", "\n", "result", "=", "1", "\n", "\n", "for", "v", "in", "t", ":", "\n", "        ", "result", "*=", "v", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_dtype_and_ctype": [[159, 180], ["isinstance", "numpy.dtype", "hasattr", "_str_to_ctype.keys", "ctypes.sizeof", "hasattr", "RuntimeError"], "function", ["None"], ["def", "get_dtype_and_ctype", "(", "type_obj", ":", "Any", ")", "->", "Tuple", "[", "np", ".", "dtype", ",", "Any", "]", ":", "\n", "    ", "\"\"\"Given a type name string (or an object having a __name__ attribute), return matching Numpy and ctypes types that have the same size in bytes.\"\"\"", "\n", "type_str", "=", "None", "\n", "\n", "if", "isinstance", "(", "type_obj", ",", "str", ")", ":", "\n", "        ", "type_str", "=", "type_obj", "\n", "", "elif", "hasattr", "(", "type_obj", ",", "\"__name__\"", ")", ":", "\n", "        ", "type_str", "=", "type_obj", ".", "__name__", "\n", "", "elif", "hasattr", "(", "type_obj", ",", "\"name\"", ")", ":", "\n", "        ", "type_str", "=", "type_obj", ".", "name", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Cannot infer type name from input\"", ")", "\n", "\n", "", "assert", "type_str", "in", "_str_to_ctype", ".", "keys", "(", ")", "\n", "\n", "my_dtype", "=", "np", ".", "dtype", "(", "type_str", ")", "\n", "my_ctype", "=", "_str_to_ctype", "[", "type_str", "]", "\n", "\n", "assert", "my_dtype", ".", "itemsize", "==", "ctypes", ".", "sizeof", "(", "my_ctype", ")", "\n", "\n", "return", "my_dtype", ",", "my_ctype", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.is_pickleable": [[182, 189], ["io.BytesIO", "pickle.dump"], "function", ["None"], ["", "def", "is_pickleable", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "io", ".", "BytesIO", "(", ")", "as", "stream", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "stream", ")", "\n", "", "return", "True", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_module_from_obj_name": [[194, 233], ["re.sub", "re.sub", "re.sub.split", "ImportError", "range", "importlib.import_module", "util.get_obj_from_module", "importlib.import_module", "importlib.import_module", "util.get_obj_from_module", "len", "str().startswith", "str", "sys.exc_info"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_obj_from_module", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_obj_from_module"], ["", "", "def", "get_module_from_obj_name", "(", "obj_name", ":", "str", ")", "->", "Tuple", "[", "types", ".", "ModuleType", ",", "str", "]", ":", "\n", "    ", "\"\"\"Searches for the underlying module behind the name to some python object.\n    Returns the module and the object name (original name with module part removed).\"\"\"", "\n", "\n", "# allow convenience shorthands, substitute them by full names", "\n", "obj_name", "=", "re", ".", "sub", "(", "\"^np.\"", ",", "\"numpy.\"", ",", "obj_name", ")", "\n", "obj_name", "=", "re", ".", "sub", "(", "\"^tf.\"", ",", "\"tensorflow.\"", ",", "obj_name", ")", "\n", "\n", "# list alternatives for (module_name, local_obj_name)", "\n", "parts", "=", "obj_name", ".", "split", "(", "\".\"", ")", "\n", "name_pairs", "=", "[", "(", "\".\"", ".", "join", "(", "parts", "[", ":", "i", "]", ")", ",", "\".\"", ".", "join", "(", "parts", "[", "i", ":", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "parts", ")", ",", "0", ",", "-", "1", ")", "]", "\n", "\n", "# try each alternative in turn", "\n", "for", "module_name", ",", "local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "get_obj_from_module", "(", "module", ",", "local_obj_name", ")", "# may raise AttributeError", "\n", "return", "module", ",", "local_obj_name", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "# maybe some of the modules themselves contain errors?", "\n", "", "", "for", "module_name", ",", "_local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "", "except", "ImportError", ":", "\n", "            ", "if", "not", "str", "(", "sys", ".", "exc_info", "(", ")", "[", "1", "]", ")", ".", "startswith", "(", "\"No module named '\"", "+", "module_name", "+", "\"'\"", ")", ":", "\n", "                ", "raise", "\n", "\n", "# maybe the requested attribute is missing?", "\n", "", "", "", "for", "module_name", ",", "local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "get_obj_from_module", "(", "module", ",", "local_obj_name", ")", "# may raise AttributeError", "\n", "", "except", "ImportError", ":", "\n", "            ", "pass", "\n", "\n", "# we are out of luck, but we have no idea why", "\n", "", "", "raise", "ImportError", "(", "obj_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_obj_from_module": [[235, 243], ["obj_name.split", "getattr"], "function", ["None"], ["", "def", "get_obj_from_module", "(", "module", ":", "types", ".", "ModuleType", ",", "obj_name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Traverses the object name and returns the last (rightmost) python object.\"\"\"", "\n", "if", "obj_name", "==", "''", ":", "\n", "        ", "return", "module", "\n", "", "obj", "=", "module", "\n", "for", "part", "in", "obj_name", ".", "split", "(", "\".\"", ")", ":", "\n", "        ", "obj", "=", "getattr", "(", "obj", ",", "part", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_obj_by_name": [[245, 249], ["util.get_module_from_obj_name", "util.get_obj_from_module"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_module_from_obj_name", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_obj_from_module"], ["", "def", "get_obj_by_name", "(", "name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python object with the given name.\"\"\"", "\n", "module", ",", "obj_name", "=", "get_module_from_obj_name", "(", "name", ")", "\n", "return", "get_obj_from_module", "(", "module", ",", "obj_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.call_func_by_name": [[251, 257], ["util.get_obj_by_name", "callable", "get_obj_by_name."], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_obj_by_name"], ["", "def", "call_func_by_name", "(", "*", "args", ",", "func_name", ":", "str", "=", "None", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python object with the given name and calls it as a function.\"\"\"", "\n", "assert", "func_name", "is", "not", "None", "\n", "func_obj", "=", "get_obj_by_name", "(", "func_name", ")", "\n", "assert", "callable", "(", "func_obj", ")", "\n", "return", "func_obj", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_module_dir_by_obj_name": [[259, 263], ["util.get_module_from_obj_name", "os.path.dirname", "inspect.getfile"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_module_from_obj_name"], ["", "def", "get_module_dir_by_obj_name", "(", "obj_name", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Get the directory path of the module containing the given object name.\"\"\"", "\n", "module", ",", "_", "=", "get_module_from_obj_name", "(", "obj_name", ")", "\n", "return", "os", ".", "path", ".", "dirname", "(", "inspect", ".", "getfile", "(", "module", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.is_top_level_function": [[265, 268], ["callable"], "function", ["None"], ["", "def", "is_top_level_function", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a top-level function, i.e., defined at module scope using 'def'.\"\"\"", "\n", "return", "callable", "(", "obj", ")", "and", "obj", ".", "__name__", "in", "sys", ".", "modules", "[", "obj", ".", "__module__", "]", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_top_level_function_name": [[270, 274], ["util.is_top_level_function"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.is_top_level_function"], ["", "def", "get_top_level_function_name", "(", "obj", ":", "Any", ")", "->", "str", ":", "\n", "    ", "\"\"\"Return the fully-qualified name of a top-level function.\"\"\"", "\n", "assert", "is_top_level_function", "(", "obj", ")", "\n", "return", "obj", ".", "__module__", "+", "\".\"", "+", "obj", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.list_dir_recursively_with_ignore": [[279, 310], ["os.path.isdir", "os.path.basename", "os.walk", "os.path.normpath", "zip", "os.path.join", "os.path.relpath", "len", "len", "dirs.remove", "os.path.join", "fnmatch.fnmatch", "fnmatch.fnmatch"], "function", ["None"], ["", "def", "list_dir_recursively_with_ignore", "(", "dir_path", ":", "str", ",", "ignores", ":", "List", "[", "str", "]", "=", "None", ",", "add_base_to_relative", ":", "bool", "=", "False", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "\"\"\"List all files recursively in a given directory while ignoring given file and directory names.\n    Returns list of tuples containing both absolute and relative paths.\"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", "\n", "base_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "dir_path", ")", ")", "\n", "\n", "if", "ignores", "is", "None", ":", "\n", "        ", "ignores", "=", "[", "]", "\n", "\n", "", "result", "=", "[", "]", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "dir_path", ",", "topdown", "=", "True", ")", ":", "\n", "        ", "for", "ignore_", "in", "ignores", ":", "\n", "            ", "dirs_to_remove", "=", "[", "d", "for", "d", "in", "dirs", "if", "fnmatch", ".", "fnmatch", "(", "d", ",", "ignore_", ")", "]", "\n", "\n", "# dirs need to be edited in-place", "\n", "for", "d", "in", "dirs_to_remove", ":", "\n", "                ", "dirs", ".", "remove", "(", "d", ")", "\n", "\n", "", "files", "=", "[", "f", "for", "f", "in", "files", "if", "not", "fnmatch", ".", "fnmatch", "(", "f", ",", "ignore_", ")", "]", "\n", "\n", "", "absolute_paths", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", "for", "f", "in", "files", "]", "\n", "relative_paths", "=", "[", "os", ".", "path", ".", "relpath", "(", "p", ",", "dir_path", ")", "for", "p", "in", "absolute_paths", "]", "\n", "\n", "if", "add_base_to_relative", ":", "\n", "            ", "relative_paths", "=", "[", "os", ".", "path", ".", "join", "(", "base_name", ",", "p", ")", "for", "p", "in", "relative_paths", "]", "\n", "\n", "", "assert", "len", "(", "absolute_paths", ")", "==", "len", "(", "relative_paths", ")", "\n", "result", "+=", "zip", "(", "absolute_paths", ",", "relative_paths", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.copy_files_and_create_dirs": [[312, 323], ["os.path.dirname", "shutil.copyfile", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "copy_files_and_create_dirs", "(", "files", ":", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ")", "->", "None", ":", "\n", "    ", "\"\"\"Takes in a list of tuples of (src, dst) paths and copies files.\n    Will create all necessary directories.\"\"\"", "\n", "for", "file", "in", "files", ":", "\n", "        ", "target_dir_name", "=", "os", ".", "path", ".", "dirname", "(", "file", "[", "1", "]", ")", "\n", "\n", "# will create all intermediate-level directories", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "target_dir_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "target_dir_name", ")", "\n", "\n", "", "shutil", ".", "copyfile", "(", "file", "[", "0", "]", ",", "file", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.is_url": [[328, 344], ["obj.startswith", "requests.compat.urlparse", "requests.compat.urlparse", "isinstance", "requests.compat.urljoin"], "function", ["None"], ["", "", "def", "is_url", "(", "obj", ":", "Any", ",", "allow_file_urls", ":", "bool", "=", "False", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a valid URL string.\"\"\"", "\n", "if", "not", "isinstance", "(", "obj", ",", "str", ")", "or", "not", "\"://\"", "in", "obj", ":", "\n", "        ", "return", "False", "\n", "", "if", "allow_file_urls", "and", "obj", ".", "startswith", "(", "'file:///'", ")", ":", "\n", "        ", "return", "True", "\n", "", "try", ":", "\n", "        ", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "obj", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "requests", ".", "compat", ".", "urljoin", "(", "obj", ",", "\"/\"", ")", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "", "except", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.open_url": [[346, 411], ["util.is_url", "requests.compat.urljoin.startswith", "hashlib.md5().hexdigest", "io.BytesIO", "open", "glob.glob", "requests.Session", "reversed", "re.sub", "os.path.join", "os.path.join", "os.makedirs", "os.replace", "hashlib.md5", "os.path.join", "len", "open", "print", "range", "open", "f.write", "requests.compat.urljoin.encode", "len", "session.get", "res.raise_for_status", "re.search", "len", "IOError", "len", "res.content.decode", "res.headers.get", "print", "print", "res.headers.get", "IOError", "print", "html.unescape", "len", "requests.compat.urljoin", "IOError", "res.content.decode.split", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.is_url", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.decode", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get"], ["", "def", "open_url", "(", "url", ":", "str", ",", "cache_dir", ":", "str", "=", "None", ",", "num_attempts", ":", "int", "=", "10", ",", "verbose", ":", "bool", "=", "True", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Download the given URL and return a binary-mode file object to access the data.\"\"\"", "\n", "assert", "is_url", "(", "url", ",", "allow_file_urls", "=", "True", ")", "\n", "assert", "num_attempts", ">=", "1", "\n", "\n", "# Handle file URLs.", "\n", "if", "url", ".", "startswith", "(", "'file:///'", ")", ":", "\n", "        ", "return", "open", "(", "url", "[", "len", "(", "'file:///'", ")", ":", "]", ",", "\"rb\"", ")", "\n", "\n", "# Lookup from cache.", "\n", "", "url_md5", "=", "hashlib", ".", "md5", "(", "url", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n", "if", "cache_dir", "is", "not", "None", ":", "\n", "        ", "cache_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_*\"", ")", ")", "\n", "if", "len", "(", "cache_files", ")", "==", "1", ":", "\n", "            ", "return", "open", "(", "cache_files", "[", "0", "]", ",", "\"rb\"", ")", "\n", "\n", "# Download.", "\n", "", "", "url_name", "=", "None", "\n", "url_data", "=", "None", "\n", "with", "requests", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Downloading %s ...\"", "%", "url", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "for", "attempts_left", "in", "reversed", "(", "range", "(", "num_attempts", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "with", "session", ".", "get", "(", "url", ")", "as", "res", ":", "\n", "                    ", "res", ".", "raise_for_status", "(", ")", "\n", "if", "len", "(", "res", ".", "content", ")", "==", "0", ":", "\n", "                        ", "raise", "IOError", "(", "\"No data received\"", ")", "\n", "\n", "", "if", "len", "(", "res", ".", "content", ")", "<", "8192", ":", "\n", "                        ", "content_str", "=", "res", ".", "content", ".", "decode", "(", "\"utf-8\"", ")", "\n", "if", "\"download_warning\"", "in", "res", ".", "headers", ".", "get", "(", "\"Set-Cookie\"", ",", "\"\"", ")", ":", "\n", "                            ", "links", "=", "[", "html", ".", "unescape", "(", "link", ")", "for", "link", "in", "content_str", ".", "split", "(", "'\"'", ")", "if", "\"export=download\"", "in", "link", "]", "\n", "if", "len", "(", "links", ")", "==", "1", ":", "\n", "                                ", "url", "=", "requests", ".", "compat", ".", "urljoin", "(", "url", ",", "links", "[", "0", "]", ")", "\n", "raise", "IOError", "(", "\"Google Drive virus checker nag\"", ")", "\n", "", "", "if", "\"Google Drive - Quota exceeded\"", "in", "content_str", ":", "\n", "                            ", "raise", "IOError", "(", "\"Google Drive download quota exceeded -- please try again later\"", ")", "\n", "\n", "", "", "match", "=", "re", ".", "search", "(", "r'filename=\"([^\"]*)\"'", ",", "res", ".", "headers", ".", "get", "(", "\"Content-Disposition\"", ",", "\"\"", ")", ")", "\n", "url_name", "=", "match", "[", "1", "]", "if", "match", "else", "url", "\n", "url_data", "=", "res", ".", "content", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" done\"", ")", "\n", "", "break", "\n", "", "", "except", ":", "\n", "                ", "if", "not", "attempts_left", ":", "\n", "                    ", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" failed\"", ")", "\n", "", "raise", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "\".\"", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Save to cache.", "\n", "", "", "", "", "if", "cache_dir", "is", "not", "None", ":", "\n", "        ", "safe_name", "=", "re", ".", "sub", "(", "r\"[^0-9a-zA-Z-._]\"", ",", "\"_\"", ",", "url_name", ")", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "temp_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "\"tmp_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "+", "\"_\"", "+", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "temp_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "url_data", ")", "\n", "", "os", ".", "replace", "(", "temp_file", ",", "cache_file", ")", "# atomic", "\n", "\n", "# Return data as file object.", "\n", "", "return", "io", ".", "BytesIO", "(", "url_data", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.__init__": [[35, 56], ["time.time", "time.time", "print", "datetime.datetime.now().isoformat", "open", "pprint.pprint", "os.path.join", "datetime.datetime.now"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "submit_config", ":", "submit", ".", "SubmitConfig", ",", "config_module", ":", "types", ".", "ModuleType", "=", "None", ")", ":", "\n", "        ", "global", "_run_context", "\n", "# Only a single RunContext can be alive", "\n", "assert", "_run_context", "is", "None", "\n", "_run_context", "=", "self", "\n", "self", ".", "submit_config", "=", "submit_config", "\n", "self", ".", "should_stop_flag", "=", "False", "\n", "self", ".", "has_closed", "=", "False", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "last_update_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "last_update_interval", "=", "0.0", "\n", "self", ".", "progress_monitor_file_path", "=", "None", "\n", "\n", "# vestigial config_module support just prints a warning", "\n", "if", "config_module", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"RunContext.config_module parameter support has been removed.\"", ")", "\n", "\n", "# write out details about the run to a text file", "\n", "", "self", ".", "run_txt_data", "=", "{", "\"task_name\"", ":", "submit_config", ".", "task_name", ",", "\"host_name\"", ":", "submit_config", ".", "host_name", ",", "\"start_time\"", ":", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", "sep", "=", "\" \"", ")", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "\"run.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "pprint", ".", "pprint", "(", "self", ".", "run_txt_data", ",", "stream", "=", "f", ",", "indent", "=", "4", ",", "width", "=", "200", ",", "compact", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.__enter__": [[57, 59], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", "->", "\"RunContext\"", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.__exit__": [[60, 62], ["run_context.RunContext.close"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ":", "Any", ",", "exc_value", ":", "Any", ",", "traceback", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update": [[63, 73], ["time.time", "os.path.exists", "time.time", "os.path.join"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "loss", ":", "Any", "=", "0", ",", "cur_epoch", ":", "Any", "=", "0", ",", "max_epoch", ":", "Any", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"Do general housekeeping and keep the state of the context up-to-date.\n        Should be called often enough but not in a tight loop.\"\"\"", "\n", "assert", "not", "self", ".", "has_closed", "\n", "\n", "self", ".", "last_update_interval", "=", "time", ".", "time", "(", ")", "-", "self", ".", "last_update_time", "\n", "self", ".", "last_update_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "submit_config", ".", "run_dir", ",", "\"abort.txt\"", ")", ")", ":", "\n", "            ", "self", ".", "should_stop_flag", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.should_stop": [[74, 77], ["None"], "methods", ["None"], ["", "", "def", "should_stop", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Tell whether a stopping condition has been triggered one way or another.\"\"\"", "\n", "return", "self", ".", "should_stop_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get_time_since_start": [[78, 81], ["time.time"], "methods", ["None"], ["", "def", "get_time_since_start", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"How much time has passed since the creation of the context.\"\"\"", "\n", "return", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get_time_since_last_update": [[82, 85], ["time.time"], "methods", ["None"], ["", "def", "get_time_since_last_update", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"How much time has passed since the last call to update.\"\"\"", "\n", "return", "time", ".", "time", "(", ")", "-", "self", ".", "last_update_time", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get_last_update_interval": [[86, 89], ["None"], "methods", ["None"], ["", "def", "get_last_update_interval", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"How much time passed between the previous two calls to update.\"\"\"", "\n", "return", "self", ".", "last_update_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.close": [[90, 104], ["datetime.datetime.now().isoformat", "open", "pprint.pprint", "datetime.datetime.now", "os.path.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Close the context and clean up.\n        Should only be called once.\"\"\"", "\n", "if", "not", "self", ".", "has_closed", ":", "\n", "# update the run.txt with stopping time", "\n", "            ", "self", ".", "run_txt_data", "[", "\"stop_time\"", "]", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", "sep", "=", "\" \"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "submit_config", ".", "run_dir", ",", "\"run.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "pprint", ".", "pprint", "(", "self", ".", "run_txt_data", ",", "stream", "=", "f", ",", "indent", "=", "4", ",", "width", "=", "200", ",", "compact", "=", "False", ")", "\n", "", "self", ".", "has_closed", "=", "True", "\n", "\n", "# detach the global singleton", "\n", "global", "_run_context", "\n", "if", "_run_context", "is", "self", ":", "\n", "                ", "_run_context", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get": [[105, 111], ["run_context.RunContext"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "get", "(", ")", ":", "\n", "        ", "import", "dnnlib", "\n", "if", "_run_context", "is", "not", "None", ":", "\n", "            ", "return", "_run_context", "\n", "", "return", "RunContext", "(", "dnnlib", ".", "submit_config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.PlatformExtras.__init__": [[57, 60], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "data_reader_buffer_size", "=", "1", "<<", "30", "# 1 GB", "\n", "self", ".", "data_reader_process_count", "=", "0", "# single threaded default", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.SubmitConfig.__init__": [[87, 114], ["util.EasyDict.__init__", "internal.local.TargetOptions", "submit.PlatformExtras"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# run (set these)", "\n", "self", ".", "run_dir_root", "=", "\"\"", "# should always be passed through get_path_from_template", "\n", "self", ".", "run_desc", "=", "\"\"", "\n", "self", ".", "run_dir_ignore", "=", "[", "\"__pycache__\"", ",", "\"*.pyproj\"", ",", "\"*.sln\"", ",", "\"*.suo\"", ",", "\".cache\"", ",", "\".idea\"", ",", "\".vs\"", ",", "\".vscode\"", ",", "\"_cudacache\"", "]", "\n", "self", ".", "run_dir_extra_files", "=", "[", "]", "\n", "\n", "# submit (set these)", "\n", "self", ".", "submit_target", "=", "SubmitTarget", ".", "LOCAL", "\n", "self", ".", "num_gpus", "=", "1", "\n", "self", ".", "print_info", "=", "False", "\n", "self", ".", "nvprof", "=", "False", "\n", "self", ".", "local", "=", "internal", ".", "local", ".", "TargetOptions", "(", ")", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "\n", "# (automatically populated)", "\n", "self", ".", "run_id", "=", "None", "\n", "self", ".", "run_name", "=", "None", "\n", "self", ".", "run_dir", "=", "None", "\n", "self", ".", "run_func_name", "=", "None", "\n", "self", ".", "run_func_kwargs", "=", "None", "\n", "self", ".", "user_name", "=", "None", "\n", "self", ".", "task_name", "=", "None", "\n", "self", ".", "host_name", "=", "\"localhost\"", "\n", "self", ".", "platform_extras", "=", "PlatformExtras", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.get_path_from_template": [[116, 136], ["path_template.replace.replace", "submit.get_user_name", "str", "platform.system", "pathlib.PureWindowsPath", "str", "RuntimeError", "platform.system", "RuntimeError", "pathlib.PurePosixPath"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.get_user_name"], ["", "", "def", "get_path_from_template", "(", "path_template", ":", "str", ",", "path_type", ":", "PathType", "=", "PathType", ".", "AUTO", ")", "->", "str", ":", "\n", "    ", "\"\"\"Replace tags in the given path template and return either Windows or Linux formatted path.\"\"\"", "\n", "# automatically select path type depending on running OS", "\n", "if", "path_type", "==", "PathType", ".", "AUTO", ":", "\n", "        ", "if", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ":", "\n", "            ", "path_type", "=", "PathType", ".", "WINDOWS", "\n", "", "elif", "platform", ".", "system", "(", ")", "==", "\"Linux\"", ":", "\n", "            ", "path_type", "=", "PathType", ".", "LINUX", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unknown platform\"", ")", "\n", "\n", "", "", "path_template", "=", "path_template", ".", "replace", "(", "\"<USERNAME>\"", ",", "get_user_name", "(", ")", ")", "\n", "\n", "# return correctly formatted path", "\n", "if", "path_type", "==", "PathType", ".", "WINDOWS", ":", "\n", "        ", "return", "str", "(", "pathlib", ".", "PureWindowsPath", "(", "path_template", ")", ")", "\n", "", "elif", "path_type", "==", "PathType", ".", "LINUX", ":", "\n", "        ", "return", "str", "(", "pathlib", ".", "PurePosixPath", "(", "path_template", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Unknown platform\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.get_template_from_path": [[138, 142], ["path.replace.replace"], "function", ["None"], ["", "", "def", "get_template_from_path", "(", "path", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Convert a normal path back to its template representation.\"\"\"", "\n", "path", "=", "path", ".", "replace", "(", "\"\\\\\"", ",", "\"/\"", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.convert_path": [[144, 149], ["submit.get_template_from_path", "submit.get_path_from_template"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.get_template_from_path", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.get_path_from_template"], ["", "def", "convert_path", "(", "path", ":", "str", ",", "path_type", ":", "PathType", "=", "PathType", ".", "AUTO", ")", "->", "str", ":", "\n", "    ", "\"\"\"Convert a normal path to template and the convert it back to a normal path with given path type.\"\"\"", "\n", "path_template", "=", "get_template_from_path", "(", "path", ")", "\n", "path", "=", "get_path_from_template", "(", "path_template", ",", "path_type", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.set_user_name_override": [[151, 155], ["None"], "function", ["None"], ["", "def", "set_user_name_override", "(", "name", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"Set the global username override value.\"\"\"", "\n", "global", "_user_name_override", "\n", "_user_name_override", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.get_user_name": [[157, 171], ["platform.system", "os.getlogin", "platform.system", "RuntimeError", "pwd.getpwuid", "os.geteuid"], "function", ["None"], ["", "def", "get_user_name", "(", ")", ":", "\n", "    ", "\"\"\"Get the current user name.\"\"\"", "\n", "if", "_user_name_override", "is", "not", "None", ":", "\n", "        ", "return", "_user_name_override", "\n", "", "elif", "platform", ".", "system", "(", ")", "==", "\"Windows\"", ":", "\n", "        ", "return", "os", ".", "getlogin", "(", ")", "\n", "", "elif", "platform", ".", "system", "(", ")", "==", "\"Linux\"", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "pwd", "\n", "return", "pwd", ".", "getpwuid", "(", "os", ".", "geteuid", "(", ")", ")", ".", "pw_name", "\n", "", "except", ":", "\n", "            ", "return", "\"unknown\"", "\n", "", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Unknown platform\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.make_run_dir_path": [[173, 190], ["os.path.join", "os.path.join", "os.getcwd"], "function", ["None"], ["", "", "def", "make_run_dir_path", "(", "*", "paths", ")", ":", "\n", "    ", "\"\"\"Make a path/filename that resides under the current submit run_dir.\n\n    Args:\n        *paths: Path components to be passed to os.path.join\n\n    Returns:\n        A file/dirname rooted at submit_config.run_dir.  If there's no\n        submit_config or run_dir, the base directory is the current\n        working directory.\n\n    E.g., `os.path.join(dnnlib.submit_config.run_dir, \"output.txt\"))`\n    \"\"\"", "\n", "import", "dnnlib", "\n", "if", "(", "dnnlib", ".", "submit_config", "is", "None", ")", "or", "(", "dnnlib", ".", "submit_config", ".", "run_dir", "is", "None", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "*", "paths", ")", "\n", "", "return", "os", ".", "path", ".", "join", "(", "dnnlib", ".", "submit_config", ".", "run_dir", ",", "*", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit._create_run_dir_local": [[192, 209], ["submit.get_path_from_template", "submit._get_next_run_id_local", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.get_path_from_template", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit._get_next_run_id_local"], ["", "def", "_create_run_dir_local", "(", "submit_config", ":", "SubmitConfig", ")", "->", "str", ":", "\n", "    ", "\"\"\"Create a new run dir with increasing ID number at the start.\"\"\"", "\n", "run_dir_root", "=", "get_path_from_template", "(", "submit_config", ".", "run_dir_root", ",", "PathType", ".", "AUTO", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "run_dir_root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "run_dir_root", ")", "\n", "\n", "", "submit_config", ".", "run_id", "=", "_get_next_run_id_local", "(", "run_dir_root", ")", "\n", "submit_config", ".", "run_name", "=", "\"{0:05d}-{1}\"", ".", "format", "(", "submit_config", ".", "run_id", ",", "submit_config", ".", "run_desc", ")", "\n", "run_dir", "=", "os", ".", "path", ".", "join", "(", "run_dir_root", ",", "submit_config", ".", "run_name", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "run_dir", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"The run dir already exists! ({0})\"", ".", "format", "(", "run_dir", ")", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "run_dir", ")", "\n", "\n", "return", "run_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit._get_next_run_id_local": [[211, 225], ["re.compile", "re.compile.match", "os.listdir", "os.path.isdir", "int", "max", "os.path.join", "r.match.group"], "function", ["None"], ["", "def", "_get_next_run_id_local", "(", "run_dir_root", ":", "str", ")", "->", "int", ":", "\n", "    ", "\"\"\"Reads all directory names in a given directory (non-recursive) and returns the next (increasing) run id. Assumes IDs are numbers at the start of the directory names.\"\"\"", "\n", "dir_names", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "run_dir_root", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "run_dir_root", ",", "d", ")", ")", "]", "\n", "r", "=", "re", ".", "compile", "(", "\"^\\\\d+\"", ")", "# match one or more digits at the start of the string", "\n", "run_id", "=", "0", "\n", "\n", "for", "dir_name", "in", "dir_names", ":", "\n", "        ", "m", "=", "r", ".", "match", "(", "dir_name", ")", "\n", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "i", "=", "int", "(", "m", ".", "group", "(", ")", ")", "\n", "run_id", "=", "max", "(", "run_id", ",", "i", "+", "1", ")", "\n", "\n", "", "", "return", "run_id", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit._populate_run_dir": [[227, 253], ["pickle.dump", "util.get_module_dir_by_obj_name", "range", "util.list_dir_recursively_with_ignore", "util.get_module_dir_by_obj_name", "util.list_dir_recursively_with_ignore", "util.copy_files_and_create_dirs", "open", "open", "pprint.pprint", "os.path.dirname", "os.path.join", "os.path.join", "submit_config.run_func_name.count", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_module_dir_by_obj_name", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.list_dir_recursively_with_ignore", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_module_dir_by_obj_name", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.list_dir_recursively_with_ignore", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.copy_files_and_create_dirs"], ["", "def", "_populate_run_dir", "(", "submit_config", ":", "SubmitConfig", ",", "run_dir", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"Copy all necessary files into the run dir. Assumes that the dir exists, is local, and is writable.\"\"\"", "\n", "pickle", ".", "dump", "(", "submit_config", ",", "open", "(", "os", ".", "path", ".", "join", "(", "run_dir", ",", "\"submit_config.pkl\"", ")", ",", "\"wb\"", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "run_dir", ",", "\"submit_config.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "pprint", ".", "pprint", "(", "submit_config", ",", "stream", "=", "f", ",", "indent", "=", "4", ",", "width", "=", "200", ",", "compact", "=", "False", ")", "\n", "\n", "", "if", "(", "submit_config", ".", "submit_target", "==", "SubmitTarget", ".", "LOCAL", ")", "and", "submit_config", ".", "local", ".", "do_not_copy_source_files", ":", "\n", "        ", "return", "\n", "\n", "", "files", "=", "[", "]", "\n", "\n", "run_func_module_dir_path", "=", "util", ".", "get_module_dir_by_obj_name", "(", "submit_config", ".", "run_func_name", ")", "\n", "assert", "'.'", "in", "submit_config", ".", "run_func_name", "\n", "for", "_idx", "in", "range", "(", "submit_config", ".", "run_func_name", ".", "count", "(", "'.'", ")", "-", "1", ")", ":", "\n", "        ", "run_func_module_dir_path", "=", "os", ".", "path", ".", "dirname", "(", "run_func_module_dir_path", ")", "\n", "", "files", "+=", "util", ".", "list_dir_recursively_with_ignore", "(", "run_func_module_dir_path", ",", "ignores", "=", "submit_config", ".", "run_dir_ignore", ",", "add_base_to_relative", "=", "False", ")", "\n", "\n", "dnnlib_module_dir_path", "=", "util", ".", "get_module_dir_by_obj_name", "(", "\"dnnlib\"", ")", "\n", "files", "+=", "util", ".", "list_dir_recursively_with_ignore", "(", "dnnlib_module_dir_path", ",", "ignores", "=", "submit_config", ".", "run_dir_ignore", ",", "add_base_to_relative", "=", "True", ")", "\n", "\n", "files", "+=", "submit_config", ".", "run_dir_extra_files", "\n", "\n", "files", "=", "[", "(", "f", "[", "0", "]", ",", "os", ".", "path", ".", "join", "(", "run_dir", ",", "\"src\"", ",", "f", "[", "1", "]", ")", ")", "for", "f", "in", "files", "]", "\n", "files", "+=", "[", "(", "os", ".", "path", ".", "join", "(", "dnnlib_module_dir_path", ",", "\"submission\"", ",", "\"internal\"", ",", "\"run.py\"", ")", ",", "os", ".", "path", ".", "join", "(", "run_dir", ",", "\"run.py\"", ")", ")", "]", "\n", "\n", "util", ".", "copy_files_and_create_dirs", "(", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.run_wrapper": [[256, 308], ["dnnlib.RunContext.get().close", "util.Logger.close", "util.Logger", "util.Logger", "print", "time.time", "util.get_obj_by_name", "callable", "inspect.signature", "print", "open().close", "sys.exit", "util.get_obj_by_name.", "util.get_obj_by_name.", "dnnlib.RunContext.get", "os.path.join", "util.format_time", "traceback.print_exc", "os.path.join", "os.path.join", "shutil.copyfile", "open", "submit.get_path_from_template", "os.path.join", "time.time"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_obj_by_name", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.format_time", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.get_path_from_template"], ["", "def", "run_wrapper", "(", "submit_config", ":", "SubmitConfig", ")", "->", "None", ":", "\n", "    ", "\"\"\"Wrap the actual run function call for handling logging, exceptions, typing, etc.\"\"\"", "\n", "is_local", "=", "submit_config", ".", "submit_target", "==", "SubmitTarget", ".", "LOCAL", "\n", "\n", "# when running locally, redirect stderr to stdout, log stdout to a file, and force flushing", "\n", "if", "is_local", ":", "\n", "        ", "logger", "=", "util", ".", "Logger", "(", "file_name", "=", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "\"log.txt\"", ")", ",", "file_mode", "=", "\"w\"", ",", "should_flush", "=", "True", ")", "\n", "", "else", ":", "# when running in a cluster, redirect stderr to stdout, and just force flushing (log writing is handled by run.sh)", "\n", "        ", "logger", "=", "util", ".", "Logger", "(", "file_name", "=", "None", ",", "should_flush", "=", "True", ")", "\n", "\n", "", "import", "dnnlib", "\n", "dnnlib", ".", "submit_config", "=", "submit_config", "\n", "\n", "exit_with_errcode", "=", "False", "\n", "try", ":", "\n", "        ", "print", "(", "\"dnnlib: Running {0}() on {1}...\"", ".", "format", "(", "submit_config", ".", "run_func_name", ",", "submit_config", ".", "host_name", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "run_func_obj", "=", "util", ".", "get_obj_by_name", "(", "submit_config", ".", "run_func_name", ")", "\n", "assert", "callable", "(", "run_func_obj", ")", "\n", "sig", "=", "inspect", ".", "signature", "(", "run_func_obj", ")", "\n", "if", "'submit_config'", "in", "sig", ".", "parameters", ":", "\n", "            ", "run_func_obj", "(", "submit_config", "=", "submit_config", ",", "**", "submit_config", ".", "run_func_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "run_func_obj", "(", "**", "submit_config", ".", "run_func_kwargs", ")", "\n", "\n", "", "print", "(", "\"dnnlib: Finished {0}() in {1}.\"", ".", "format", "(", "submit_config", ".", "run_func_name", ",", "util", ".", "format_time", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", "\n", "", "except", ":", "\n", "        ", "if", "is_local", ":", "\n", "            ", "raise", "\n", "", "else", ":", "\n", "            ", "traceback", ".", "print_exc", "(", ")", "\n", "\n", "log_src", "=", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "\"log.txt\"", ")", "\n", "log_dst", "=", "os", ".", "path", ".", "join", "(", "get_path_from_template", "(", "submit_config", ".", "run_dir_root", ")", ",", "\"{0}-error.txt\"", ".", "format", "(", "submit_config", ".", "run_name", ")", ")", "\n", "shutil", ".", "copyfile", "(", "log_src", ",", "log_dst", ")", "\n", "\n", "# Defer sys.exit(1) to happen after we close the logs and create a _finished.txt", "\n", "exit_with_errcode", "=", "True", "\n", "", "", "finally", ":", "\n", "        ", "open", "(", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "\"_finished.txt\"", ")", ",", "\"w\"", ")", ".", "close", "(", ")", "\n", "\n", "", "dnnlib", ".", "RunContext", ".", "get", "(", ")", ".", "close", "(", ")", "\n", "dnnlib", ".", "submit_config", "=", "None", "\n", "logger", ".", "close", "(", ")", "\n", "\n", "# If we hit an error, get out of the script now and signal the error", "\n", "# to whatever process that started this script.", "\n", "if", "exit_with_errcode", ":", "\n", "        ", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "return", "submit_config", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.submit_run": [[310, 344], ["copy.deepcopy", "submit._create_run_dir_local", "internal.local.Target.finalize_submit_config", "submit._populate_run_dir", "internal.local.Target.submit", "internal.local.Target", "RuntimeError", "submit.get_user_name", "re.match", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.submit._create_run_dir_local", "home.repos.pwc.inspect_result.plai-group_ipa.internal.local.Target.finalize_submit_config", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit._populate_run_dir", "home.repos.pwc.inspect_result.plai-group_ipa.internal.local.Target.submit", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.get_user_name"], ["", "def", "submit_run", "(", "submit_config", ":", "SubmitConfig", ",", "run_func_name", ":", "str", ",", "**", "run_func_kwargs", ")", "->", "None", ":", "\n", "    ", "\"\"\"Create a run dir, gather files related to the run, copy files to the run dir, and launch the run in appropriate place.\"\"\"", "\n", "submit_config", "=", "copy", ".", "deepcopy", "(", "submit_config", ")", "\n", "\n", "submit_target", "=", "submit_config", ".", "submit_target", "\n", "farm", "=", "None", "\n", "if", "submit_target", "==", "SubmitTarget", ".", "LOCAL", ":", "\n", "        ", "farm", "=", "internal", ".", "local", ".", "Target", "(", ")", "\n", "", "assert", "farm", "is", "not", "None", "# unknown target", "\n", "\n", "# Disallow submitting jobs with zero num_gpus.", "\n", "if", "(", "submit_config", ".", "num_gpus", "is", "None", ")", "or", "(", "submit_config", ".", "num_gpus", "==", "0", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"submit_config.num_gpus must be set to a non-zero value\"", ")", "\n", "\n", "", "if", "submit_config", ".", "user_name", "is", "None", ":", "\n", "        ", "submit_config", ".", "user_name", "=", "get_user_name", "(", ")", "\n", "\n", "", "submit_config", ".", "run_func_name", "=", "run_func_name", "\n", "submit_config", ".", "run_func_kwargs", "=", "run_func_kwargs", "\n", "\n", "#--------------------------------------------------------------------", "\n", "# Prepare submission by populating the run dir", "\n", "#--------------------------------------------------------------------", "\n", "host_run_dir", "=", "_create_run_dir_local", "(", "submit_config", ")", "\n", "\n", "submit_config", ".", "task_name", "=", "\"{0}-{1:05d}-{2}\"", ".", "format", "(", "submit_config", ".", "user_name", ",", "submit_config", ".", "run_id", ",", "submit_config", ".", "run_desc", ")", "\n", "docker_valid_name_regex", "=", "\"^[a-zA-Z0-9][a-zA-Z0-9_.-]+$\"", "\n", "if", "not", "re", ".", "match", "(", "docker_valid_name_regex", ",", "submit_config", ".", "task_name", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Invalid task name.  Probable reason: unacceptable characters in your submit_config.run_desc.  Task name must be accepted by the following regex: \"", "+", "docker_valid_name_regex", "+", "\", got \"", "+", "submit_config", ".", "task_name", ")", "\n", "\n", "# Farm specific preparations for a submit", "\n", "", "farm", ".", "finalize_submit_config", "(", "submit_config", ",", "host_run_dir", ")", "\n", "_populate_run_dir", "(", "submit_config", ",", "host_run_dir", ")", "\n", "return", "farm", ".", "submit", "(", "submit_config", ",", "host_run_dir", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.internal.local.TargetOptions.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "do_not_copy_source_files", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.internal.local.Target.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.internal.local.Target.finalize_submit_config": [[15, 18], ["print"], "methods", ["None"], ["", "def", "finalize_submit_config", "(", "self", ",", "submit_config", ",", "host_run_dir", ")", ":", "\n", "        ", "print", "(", "'Local submit '", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "submit_config", ".", "run_dir", "=", "host_run_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.internal.local.Target.submit": [[19, 23], ["print", "run_wrapper", "convert_path"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.run_wrapper", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.convert_path"], ["", "def", "submit", "(", "self", ",", "submit_config", ",", "host_run_dir", ")", ":", "\n", "        ", "from", ".", ".", "submit", "import", "run_wrapper", ",", "convert_path", "\n", "print", "(", "'- run_dir: %s'", "%", "convert_path", "(", "submit_config", ".", "run_dir", ")", ",", "flush", "=", "True", ")", "\n", "return", "run_wrapper", "(", "submit_config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.run": [[28, 32], ["tfutil.assert_tf_initialized", "tensorflow.get_default_session().run", "tensorflow.get_default_session"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["def", "run", "(", "*", "args", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Run the specified ops in the default session.\"\"\"", "\n", "assert_tf_initialized", "(", ")", "\n", "return", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression": [[34, 37], ["isinstance"], "function", ["None"], ["", "def", "is_tf_expression", "(", "x", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Check whether the input is a valid Tensorflow expression, i.e., Tensorflow Tensor, Variable, or Operation.\"\"\"", "\n", "return", "isinstance", "(", "x", ",", "(", "tf", ".", "Tensor", ",", "tf", ".", "Variable", ",", "tf", ".", "Operation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.shape_to_list": [[39, 42], ["None"], "function", ["None"], ["", "def", "shape_to_list", "(", "shape", ":", "Iterable", "[", "tf", ".", "Dimension", "]", ")", "->", "List", "[", "Union", "[", "int", ",", "None", "]", "]", ":", "\n", "    ", "\"\"\"Convert a Tensorflow shape to a list of ints. Retained for backwards compatibility -- use TensorShape.as_list() in new code.\"\"\"", "\n", "return", "[", "dim", ".", "value", "for", "dim", "in", "shape", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.flatten": [[44, 48], ["tensorflow.name_scope", "tensorflow.reshape"], "function", ["None"], ["", "def", "flatten", "(", "x", ":", "TfExpressionEx", ")", "->", "TfExpression", ":", "\n", "    ", "\"\"\"Shortcut function for flattening a tensor.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"Flatten\"", ")", ":", "\n", "        ", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.log2": [[50, 54], ["tensorflow.name_scope", "tensorflow.log", "numpy.float32", "numpy.log"], "function", ["None"], ["", "", "def", "log2", "(", "x", ":", "TfExpressionEx", ")", "->", "TfExpression", ":", "\n", "    ", "\"\"\"Logarithm in base 2.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"Log2\"", ")", ":", "\n", "        ", "return", "tf", ".", "log", "(", "x", ")", "*", "np", ".", "float32", "(", "1.0", "/", "np", ".", "log", "(", "2.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.exp2": [[56, 60], ["tensorflow.name_scope", "tensorflow.exp", "numpy.float32", "numpy.log"], "function", ["None"], ["", "", "def", "exp2", "(", "x", ":", "TfExpressionEx", ")", "->", "TfExpression", ":", "\n", "    ", "\"\"\"Exponent in base 2.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"Exp2\"", ")", ":", "\n", "        ", "return", "tf", ".", "exp", "(", "x", "*", "np", ".", "float32", "(", "np", ".", "log", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.lerp": [[62, 66], ["tensorflow.name_scope"], "function", ["None"], ["", "", "def", "lerp", "(", "a", ":", "TfExpressionEx", ",", "b", ":", "TfExpressionEx", ",", "t", ":", "TfExpressionEx", ")", "->", "TfExpressionEx", ":", "\n", "    ", "\"\"\"Linear interpolation.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"Lerp\"", ")", ":", "\n", "        ", "return", "a", "+", "(", "b", "-", "a", ")", "*", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.lerp_clip": [[68, 72], ["tensorflow.name_scope", "tensorflow.clip_by_value"], "function", ["None"], ["", "", "def", "lerp_clip", "(", "a", ":", "TfExpressionEx", ",", "b", ":", "TfExpressionEx", ",", "t", ":", "TfExpressionEx", ")", "->", "TfExpression", ":", "\n", "    ", "\"\"\"Linear interpolation with clip.\"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"LerpClip\"", ")", ":", "\n", "        ", "return", "a", "+", "(", "b", "-", "a", ")", "*", "tf", ".", "clip_by_value", "(", "t", ",", "0.0", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope": [[74, 77], ["tensorflow.name_scope"], "function", ["None"], ["", "", "def", "absolute_name_scope", "(", "scope", ":", "str", ")", "->", "tf", ".", "name_scope", ":", "\n", "    ", "\"\"\"Forcefully enter the specified name scope, ignoring any surrounding scopes.\"\"\"", "\n", "return", "tf", ".", "name_scope", "(", "scope", "+", "\"/\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_variable_scope": [[79, 82], ["tensorflow.variable_scope", "tensorflow.VariableScope"], "function", ["None"], ["", "def", "absolute_variable_scope", "(", "scope", ":", "str", ",", "**", "kwargs", ")", "->", "tf", ".", "variable_scope", ":", "\n", "    ", "\"\"\"Forcefully enter the specified variable scope, ignoring any surrounding scopes.\"\"\"", "\n", "return", "tf", ".", "variable_scope", "(", "tf", ".", "VariableScope", "(", "name", "=", "scope", ",", "**", "kwargs", ")", ",", "auxiliary_name_scope", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil._sanitize_tf_config": [[84, 105], ["dict", "list", "key.split", "dict.update", "len"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update"], ["", "def", "_sanitize_tf_config", "(", "config_dict", ":", "dict", "=", "None", ")", "->", "dict", ":", "\n", "# Defaults.", "\n", "    ", "cfg", "=", "dict", "(", ")", "\n", "cfg", "[", "\"rnd.np_random_seed\"", "]", "=", "None", "# Random seed for NumPy. None = keep as is.", "\n", "cfg", "[", "\"rnd.tf_random_seed\"", "]", "=", "\"auto\"", "# Random seed for TensorFlow. 'auto' = derive from NumPy random state. None = keep as is.", "\n", "cfg", "[", "\"env.TF_CPP_MIN_LOG_LEVEL\"", "]", "=", "\"1\"", "# 0 = Print all available debug info from TensorFlow. 1 = Print warnings and errors, but disable debug info.", "\n", "cfg", "[", "\"graph_options.place_pruned_graph\"", "]", "=", "True", "# False = Check that all ops are available on the designated device. True = Skip the check for ops that are not used.", "\n", "cfg", "[", "\"gpu_options.allow_growth\"", "]", "=", "True", "# False = Allocate all GPU memory at the beginning. True = Allocate only as much GPU memory as needed.", "\n", "\n", "# Remove defaults for environment variables that are already set.", "\n", "for", "key", "in", "list", "(", "cfg", ")", ":", "\n", "        ", "fields", "=", "key", ".", "split", "(", "\".\"", ")", "\n", "if", "fields", "[", "0", "]", "==", "\"env\"", ":", "\n", "            ", "assert", "len", "(", "fields", ")", "==", "2", "\n", "if", "fields", "[", "1", "]", "in", "os", ".", "environ", ":", "\n", "                ", "del", "cfg", "[", "key", "]", "\n", "\n", "# User overrides.", "\n", "", "", "", "if", "config_dict", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "update", "(", "config_dict", ")", "\n", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.init_tf": [[107, 133], ["tfutil._sanitize_tf_config", "_sanitize_tf_config.items", "tfutil.create_session", "tensorflow.get_default_session", "numpy.random.seed", "numpy.random.randint", "tensorflow.set_random_seed", "key.split", "str", "len"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil._sanitize_tf_config", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.create_session", "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.set_random_seed"], ["", "def", "init_tf", "(", "config_dict", ":", "dict", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initialize TensorFlow session using good default settings.\"\"\"", "\n", "# Skip if already initialized.", "\n", "if", "tf", ".", "get_default_session", "(", ")", "is", "not", "None", ":", "\n", "        ", "return", "\n", "\n", "# Setup config dict and random seeds.", "\n", "", "cfg", "=", "_sanitize_tf_config", "(", "config_dict", ")", "\n", "np_random_seed", "=", "cfg", "[", "\"rnd.np_random_seed\"", "]", "\n", "if", "np_random_seed", "is", "not", "None", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "np_random_seed", ")", "\n", "", "tf_random_seed", "=", "cfg", "[", "\"rnd.tf_random_seed\"", "]", "\n", "if", "tf_random_seed", "==", "\"auto\"", ":", "\n", "        ", "tf_random_seed", "=", "np", ".", "random", ".", "randint", "(", "1", "<<", "31", ")", "\n", "", "if", "tf_random_seed", "is", "not", "None", ":", "\n", "        ", "tf", ".", "set_random_seed", "(", "tf_random_seed", ")", "\n", "\n", "# Setup environment variables.", "\n", "", "for", "key", ",", "value", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "fields", "=", "key", ".", "split", "(", "\".\"", ")", "\n", "if", "fields", "[", "0", "]", "==", "\"env\"", ":", "\n", "            ", "assert", "len", "(", "fields", ")", "==", "2", "\n", "os", ".", "environ", "[", "fields", "[", "1", "]", "]", "=", "str", "(", "value", ")", "\n", "\n", "# Create default TensorFlow session.", "\n", "", "", "create_session", "(", "cfg", ",", "force_as_default", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized": [[135, 139], ["tensorflow.get_default_session", "RuntimeError"], "function", ["None"], ["", "def", "assert_tf_initialized", "(", ")", ":", "\n", "    ", "\"\"\"Check that TensorFlow session has been initialized.\"\"\"", "\n", "if", "tf", ".", "get_default_session", "(", ")", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"No default TensorFlow session found. Please call dnnlib.tflib.init_tf().\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.create_session": [[141, 162], ["tfutil._sanitize_tf_config", "tensorflow.ConfigProto", "_sanitize_tf_config.items", "tensorflow.Session", "key.split", "tf.Session.as_default", "tf.Session._default_session.__enter__", "setattr", "getattr"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil._sanitize_tf_config", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.__enter__"], ["", "", "def", "create_session", "(", "config_dict", ":", "dict", "=", "None", ",", "force_as_default", ":", "bool", "=", "False", ")", "->", "tf", ".", "Session", ":", "\n", "    ", "\"\"\"Create tf.Session based on config dict.\"\"\"", "\n", "# Setup TensorFlow config proto.", "\n", "cfg", "=", "_sanitize_tf_config", "(", "config_dict", ")", "\n", "config_proto", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "for", "key", ",", "value", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "fields", "=", "key", ".", "split", "(", "\".\"", ")", "\n", "if", "fields", "[", "0", "]", "not", "in", "[", "\"rnd\"", ",", "\"env\"", "]", ":", "\n", "            ", "obj", "=", "config_proto", "\n", "for", "field", "in", "fields", "[", ":", "-", "1", "]", ":", "\n", "                ", "obj", "=", "getattr", "(", "obj", ",", "field", ")", "\n", "", "setattr", "(", "obj", ",", "fields", "[", "-", "1", "]", ",", "value", ")", "\n", "\n", "# Create session.", "\n", "", "", "session", "=", "tf", ".", "Session", "(", "config", "=", "config_proto", ")", "\n", "if", "force_as_default", ":", "\n", "# pylint: disable=protected-access", "\n", "        ", "session", ".", "_default_session", "=", "session", ".", "as_default", "(", ")", "\n", "session", ".", "_default_session", ".", "enforce_nesting", "=", "False", "\n", "session", ".", "_default_session", ".", "__enter__", "(", ")", "\n", "", "return", "session", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.init_uninitialized_vars": [[164, 192], ["tfutil.assert_tf_initialized", "tfutil.run", "tensorflow.global_variables", "tensorflow.control_dependencies", "tfutil.is_tf_expression", "zip", "tensorflow.get_default_graph().get_tensor_by_name", "tfutil.run", "var.name.replace", "test_vars.append", "tensorflow.get_default_graph", "tfutil.absolute_name_scope", "test_ops.append", "tensorflow.is_variable_initialized", "var.name.split"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope"], ["", "def", "init_uninitialized_vars", "(", "target_vars", ":", "List", "[", "tf", ".", "Variable", "]", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"Initialize all tf.Variables that have not already been initialized.\n\n    Equivalent to the following, but more efficient and does not bloat the tf graph:\n    tf.variables_initializer(tf.report_uninitialized_variables()).run()\n    \"\"\"", "\n", "assert_tf_initialized", "(", ")", "\n", "if", "target_vars", "is", "None", ":", "\n", "        ", "target_vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "\n", "", "test_vars", "=", "[", "]", "\n", "test_ops", "=", "[", "]", "\n", "\n", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "# ignore surrounding control_dependencies", "\n", "        ", "for", "var", "in", "target_vars", ":", "\n", "            ", "assert", "is_tf_expression", "(", "var", ")", "\n", "\n", "try", ":", "\n", "                ", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "var", ".", "name", ".", "replace", "(", "\":0\"", ",", "\"/IsVariableInitialized:0\"", ")", ")", "\n", "", "except", "KeyError", ":", "\n", "# Op does not exist => variable may be uninitialized.", "\n", "                ", "test_vars", ".", "append", "(", "var", ")", "\n", "\n", "with", "absolute_name_scope", "(", "var", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", ")", ":", "\n", "                    ", "test_ops", ".", "append", "(", "tf", ".", "is_variable_initialized", "(", "var", ")", ")", "\n", "\n", "", "", "", "", "init_vars", "=", "[", "var", "for", "var", ",", "inited", "in", "zip", "(", "test_vars", ",", "run", "(", "test_ops", ")", ")", "if", "not", "inited", "]", "\n", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "init_vars", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.set_vars": [[194, 218], ["tfutil.assert_tf_initialized", "var_to_value_dict.items", "tfutil.run", "tfutil.is_tf_expression", "ops.append", "tensorflow.get_default_graph().get_tensor_by_name", "var.name.replace", "tensorflow.get_default_graph", "tfutil.absolute_name_scope", "tensorflow.control_dependencies", "tensorflow.assign", "var.name.split", "tensorflow.placeholder"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope"], ["", "def", "set_vars", "(", "var_to_value_dict", ":", "dict", ")", "->", "None", ":", "\n", "    ", "\"\"\"Set the values of given tf.Variables.\n\n    Equivalent to the following, but more efficient and does not bloat the tf graph:\n    tflib.run([tf.assign(var, value) for var, value in var_to_value_dict.items()]\n    \"\"\"", "\n", "assert_tf_initialized", "(", ")", "\n", "ops", "=", "[", "]", "\n", "feed_dict", "=", "{", "}", "\n", "\n", "for", "var", ",", "value", "in", "var_to_value_dict", ".", "items", "(", ")", ":", "\n", "        ", "assert", "is_tf_expression", "(", "var", ")", "\n", "\n", "try", ":", "\n", "            ", "setter", "=", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "var", ".", "name", ".", "replace", "(", "\":0\"", ",", "\"/setter:0\"", ")", ")", "# look for existing op", "\n", "", "except", "KeyError", ":", "\n", "            ", "with", "absolute_name_scope", "(", "var", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", ")", ":", "\n", "                ", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "# ignore surrounding control_dependencies", "\n", "                    ", "setter", "=", "tf", ".", "assign", "(", "var", ",", "tf", ".", "placeholder", "(", "var", ".", "dtype", ",", "var", ".", "shape", ",", "\"new_value\"", ")", ",", "name", "=", "\"setter\"", ")", "# create new setter", "\n", "\n", "", "", "", "ops", ".", "append", "(", "setter", ")", "\n", "feed_dict", "[", "setter", ".", "op", ".", "inputs", "[", "1", "]", "]", "=", "value", "\n", "\n", "", "run", "(", "ops", ",", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.create_var_with_large_initial_value": [[220, 228], ["tfutil.assert_tf_initialized", "isinstance", "tensorflow.zeros", "tensorflow.Variable", "tfutil.set_vars"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.set_vars"], ["", "def", "create_var_with_large_initial_value", "(", "initial_value", ":", "np", ".", "ndarray", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Create tf.Variable with large initial value without bloating the tf graph.\"\"\"", "\n", "assert_tf_initialized", "(", ")", "\n", "assert", "isinstance", "(", "initial_value", ",", "np", ".", "ndarray", ")", "\n", "zeros", "=", "tf", ".", "zeros", "(", "initial_value", ".", "shape", ",", "initial_value", ".", "dtype", ")", "\n", "var", "=", "tf", ".", "Variable", "(", "zeros", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "set_vars", "(", "{", "var", ":", "initial_value", "}", ")", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.convert_images_from_uint8": [[230, 238], ["tensorflow.cast", "tensorflow.transpose"], "function", ["None"], ["", "def", "convert_images_from_uint8", "(", "images", ",", "drange", "=", "[", "-", "1", ",", "1", "]", ",", "nhwc_to_nchw", "=", "False", ")", ":", "\n", "    ", "\"\"\"Convert a minibatch of images from uint8 to float32 with configurable dynamic range.\n    Can be used as an input transformation for Network.run().\n    \"\"\"", "\n", "images", "=", "tf", ".", "cast", "(", "images", ",", "tf", ".", "float32", ")", "\n", "if", "nhwc_to_nchw", ":", "\n", "        ", "images", "=", "tf", ".", "transpose", "(", "images", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "", "return", "images", "*", "(", "(", "drange", "[", "1", "]", "-", "drange", "[", "0", "]", ")", "/", "255", ")", "+", "drange", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.convert_images_to_uint8": [[240, 253], ["tensorflow.cast", "tensorflow.saturate_cast", "tensorflow.nn.avg_pool", "tensorflow.transpose"], "function", ["None"], ["", "def", "convert_images_to_uint8", "(", "images", ",", "drange", "=", "[", "-", "1", ",", "1", "]", ",", "nchw_to_nhwc", "=", "False", ",", "shrink", "=", "1", ")", ":", "\n", "    ", "\"\"\"Convert a minibatch of images from float32 to uint8 with configurable dynamic range.\n    Can be used as an output transformation for Network.run().\n    \"\"\"", "\n", "images", "=", "tf", ".", "cast", "(", "images", ",", "tf", ".", "float32", ")", "\n", "if", "shrink", ">", "1", ":", "\n", "        ", "ksize", "=", "[", "1", ",", "1", ",", "shrink", ",", "shrink", "]", "\n", "images", "=", "tf", ".", "nn", ".", "avg_pool", "(", "images", ",", "ksize", "=", "ksize", ",", "strides", "=", "ksize", ",", "padding", "=", "\"VALID\"", ",", "data_format", "=", "\"NCHW\"", ")", "\n", "", "if", "nchw_to_nhwc", ":", "\n", "        ", "images", "=", "tf", ".", "transpose", "(", "images", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "scale", "=", "255", "/", "(", "drange", "[", "1", "]", "-", "drange", "[", "0", "]", ")", "\n", "images", "=", "images", "*", "scale", "+", "(", "0.5", "-", "drange", "[", "0", "]", "*", "scale", ")", "\n", "return", "tf", ".", "saturate_cast", "(", "images", ",", "tf", ".", "uint8", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.__init__": [[73, 99], ["tfutil.assert_tf_initialized", "util.is_pickleable", "network.Network._init_fields", "util.EasyDict", "util.is_top_level_function", "util.get_module_from_obj_name", "util.get_obj_from_module", "callable", "_import_module_src.get", "network.Network._init_graph", "network.Network.reset_own_vars", "isinstance", "isinstance", "util.is_top_level_function", "util.get_top_level_function_name", "inspect.getsource"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.is_pickleable", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network._init_fields", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.is_top_level_function", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_module_from_obj_name", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_obj_from_module", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network._init_graph", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.reset_own_vars", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.is_top_level_function", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_top_level_function_name"], ["def", "__init__", "(", "self", ",", "name", ":", "str", "=", "None", ",", "func_name", ":", "Any", "=", "None", ",", "**", "static_kwargs", ")", ":", "\n", "        ", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "assert", "isinstance", "(", "name", ",", "str", ")", "or", "name", "is", "None", "\n", "assert", "func_name", "is", "not", "None", "\n", "assert", "isinstance", "(", "func_name", ",", "str", ")", "or", "util", ".", "is_top_level_function", "(", "func_name", ")", "\n", "assert", "util", ".", "is_pickleable", "(", "static_kwargs", ")", "\n", "\n", "self", ".", "_init_fields", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", "static_kwargs", ")", "\n", "\n", "# Locate the user-specified network build function.", "\n", "if", "util", ".", "is_top_level_function", "(", "func_name", ")", ":", "\n", "            ", "func_name", "=", "util", ".", "get_top_level_function_name", "(", "func_name", ")", "\n", "", "module", ",", "self", ".", "_build_func_name", "=", "util", ".", "get_module_from_obj_name", "(", "func_name", ")", "\n", "self", ".", "_build_func", "=", "util", ".", "get_obj_from_module", "(", "module", ",", "self", ".", "_build_func_name", ")", "\n", "assert", "callable", "(", "self", ".", "_build_func", ")", "\n", "\n", "# Dig up source code for the module containing the build function.", "\n", "self", ".", "_build_module_src", "=", "_import_module_src", ".", "get", "(", "module", ",", "None", ")", "\n", "if", "self", ".", "_build_module_src", "is", "None", ":", "\n", "            ", "self", ".", "_build_module_src", "=", "inspect", ".", "getsource", "(", "module", ")", "\n", "\n", "# Init TensorFlow graph.", "\n", "", "self", ".", "_init_graph", "(", ")", "\n", "self", ".", "reset_own_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network._init_fields": [[100, 124], ["util.EasyDict", "util.EasyDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "dict"], "methods", ["None"], ["", "def", "_init_fields", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "name", "=", "None", "\n", "self", ".", "scope", "=", "None", "\n", "self", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", ")", "\n", "self", ".", "components", "=", "util", ".", "EasyDict", "(", ")", "\n", "self", ".", "num_inputs", "=", "0", "\n", "self", ".", "num_outputs", "=", "0", "\n", "self", ".", "input_shapes", "=", "[", "[", "]", "]", "\n", "self", ".", "output_shapes", "=", "[", "[", "]", "]", "\n", "self", ".", "input_shape", "=", "[", "]", "\n", "self", ".", "output_shape", "=", "[", "]", "\n", "self", ".", "input_templates", "=", "[", "]", "\n", "self", ".", "output_templates", "=", "[", "]", "\n", "self", ".", "input_names", "=", "[", "]", "\n", "self", ".", "output_names", "=", "[", "]", "\n", "self", ".", "own_vars", "=", "OrderedDict", "(", ")", "\n", "self", ".", "vars", "=", "OrderedDict", "(", ")", "\n", "self", ".", "trainables", "=", "OrderedDict", "(", ")", "\n", "self", ".", "var_global_to_local", "=", "OrderedDict", "(", ")", "\n", "\n", "self", ".", "_build_func", "=", "None", "# User-supplied build function that constructs the network.", "\n", "self", ".", "_build_func_name", "=", "None", "# Name of the build function.", "\n", "self", ".", "_build_module_src", "=", "None", "# Full source code of the module containing the build function.", "\n", "self", ".", "_run_cache", "=", "dict", "(", ")", "# Cached graph data for Network.run().", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network._init_graph": [[125, 186], ["inspect.signature().parameters.values", "len", "re.match", "dict", "len", "all", "any", "any", "any", "collections.OrderedDict", "collections.OrderedDict", "network.Network.vars.update", "collections.OrderedDict", "collections.OrderedDict", "tensorflow.name_scope", "tensorflow.get_default_graph().unique_name", "tfutil.absolute_variable_scope", "tfutil.absolute_name_scope", "tfutil.is_tf_expression", "isinstance", "tfutil.is_tf_expression", "list", "ValueError", "ValueError", "ValueError", "len", "len", "ValueError", "t.shape.as_list", "t.shape.as_list", "network.Network.input_names.append", "tensorflow.get_default_graph().get_name_scope", "tensorflow.control_dependencies", "network.Network._build_func", "tfutil.is_tf_expression", "set", "[].split", "inspect.signature", "tensorflow.get_default_graph", "tensorflow.get_variable_scope", "tensorflow.placeholder", "isinstance", "network.Network.components.values", "tensorflow.global_variables", "network.Network.components.values", "comp.vars.items", "network.Network.vars.items", "network.Network.vars.items", "tensorflow.get_default_graph", "var.name[].split", "var.name.split", "network.Network.components.values", "t.name.split", "len"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_variable_scope", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression"], ["", "def", "_init_graph", "(", "self", ")", "->", "None", ":", "\n", "# Collect inputs.", "\n", "        ", "self", ".", "input_names", "=", "[", "]", "\n", "\n", "for", "param", "in", "inspect", ".", "signature", "(", "self", ".", "_build_func", ")", ".", "parameters", ".", "values", "(", ")", ":", "\n", "            ", "if", "param", ".", "kind", "==", "param", ".", "POSITIONAL_OR_KEYWORD", "and", "param", ".", "default", "is", "param", ".", "empty", ":", "\n", "                ", "self", ".", "input_names", ".", "append", "(", "param", ".", "name", ")", "\n", "\n", "", "", "self", ".", "num_inputs", "=", "len", "(", "self", ".", "input_names", ")", "\n", "assert", "self", ".", "num_inputs", ">=", "1", "\n", "\n", "# Choose name and scope.", "\n", "if", "self", ".", "name", "is", "None", ":", "\n", "            ", "self", ".", "name", "=", "self", ".", "_build_func_name", "\n", "", "assert", "re", ".", "match", "(", "\"^[A-Za-z0-9_.\\\\-]*$\"", ",", "self", ".", "name", ")", "\n", "with", "tf", ".", "name_scope", "(", "None", ")", ":", "\n", "            ", "self", ".", "scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "self", ".", "name", ",", "mark_as_used", "=", "True", ")", "\n", "\n", "# Finalize build func kwargs.", "\n", "", "build_kwargs", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "build_kwargs", "[", "\"is_template_graph\"", "]", "=", "True", "\n", "build_kwargs", "[", "\"components\"", "]", "=", "self", ".", "components", "\n", "\n", "# Build template graph.", "\n", "with", "tfutil", ".", "absolute_variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "False", ")", ",", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", ")", ":", "# ignore surrounding scopes", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "==", "self", ".", "scope", "\n", "assert", "tf", ".", "get_default_graph", "(", ")", ".", "get_name_scope", "(", ")", "==", "self", ".", "scope", "\n", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "# ignore surrounding control dependencies", "\n", "                ", "self", ".", "input_templates", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "name", ")", "for", "name", "in", "self", ".", "input_names", "]", "\n", "out_expr", "=", "self", ".", "_build_func", "(", "*", "self", ".", "input_templates", ",", "**", "build_kwargs", ")", "\n", "\n", "# Collect outputs.", "\n", "", "", "assert", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "or", "isinstance", "(", "out_expr", ",", "tuple", ")", "\n", "self", ".", "output_templates", "=", "[", "out_expr", "]", "if", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "else", "list", "(", "out_expr", ")", "\n", "self", ".", "num_outputs", "=", "len", "(", "self", ".", "output_templates", ")", "\n", "assert", "self", ".", "num_outputs", ">=", "1", "\n", "assert", "all", "(", "tfutil", ".", "is_tf_expression", "(", "t", ")", "for", "t", "in", "self", ".", "output_templates", ")", "\n", "\n", "# Perform sanity checks.", "\n", "if", "any", "(", "t", ".", "shape", ".", "ndims", "is", "None", "for", "t", "in", "self", ".", "input_templates", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Network input shapes not defined. Please call x.set_shape() for each input.\"", ")", "\n", "", "if", "any", "(", "t", ".", "shape", ".", "ndims", "is", "None", "for", "t", "in", "self", ".", "output_templates", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Network output shapes not defined. Please call x.set_shape() where applicable.\"", ")", "\n", "", "if", "any", "(", "not", "isinstance", "(", "comp", ",", "Network", ")", "for", "comp", "in", "self", ".", "components", ".", "values", "(", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Components of a Network must be Networks themselves.\"", ")", "\n", "", "if", "len", "(", "self", ".", "components", ")", "!=", "len", "(", "set", "(", "comp", ".", "name", "for", "comp", "in", "self", ".", "components", ".", "values", "(", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Components of a Network must have unique names.\"", ")", "\n", "\n", "# List inputs and outputs.", "\n", "", "self", ".", "input_shapes", "=", "[", "t", ".", "shape", ".", "as_list", "(", ")", "for", "t", "in", "self", ".", "input_templates", "]", "\n", "self", ".", "output_shapes", "=", "[", "t", ".", "shape", ".", "as_list", "(", ")", "for", "t", "in", "self", ".", "output_templates", "]", "\n", "self", ".", "input_shape", "=", "self", ".", "input_shapes", "[", "0", "]", "\n", "self", ".", "output_shape", "=", "self", ".", "output_shapes", "[", "0", "]", "\n", "self", ".", "output_names", "=", "[", "t", ".", "name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\":\"", ")", "[", "0", "]", "for", "t", "in", "self", ".", "output_templates", "]", "\n", "\n", "# List variables.", "\n", "self", ".", "own_vars", "=", "OrderedDict", "(", "(", "var", ".", "name", "[", "len", "(", "self", ".", "scope", ")", "+", "1", ":", "]", ".", "split", "(", "\":\"", ")", "[", "0", "]", ",", "var", ")", "for", "var", "in", "tf", ".", "global_variables", "(", "self", ".", "scope", "+", "\"/\"", ")", ")", "\n", "self", ".", "vars", "=", "OrderedDict", "(", "self", ".", "own_vars", ")", "\n", "self", ".", "vars", ".", "update", "(", "(", "comp", ".", "name", "+", "\"/\"", "+", "name", ",", "var", ")", "for", "comp", "in", "self", ".", "components", ".", "values", "(", ")", "for", "name", ",", "var", "in", "comp", ".", "vars", ".", "items", "(", ")", ")", "\n", "self", ".", "trainables", "=", "OrderedDict", "(", "(", "name", ",", "var", ")", "for", "name", ",", "var", "in", "self", ".", "vars", ".", "items", "(", ")", "if", "var", ".", "trainable", ")", "\n", "self", ".", "var_global_to_local", "=", "OrderedDict", "(", "(", "var", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", ",", "name", ")", "for", "name", ",", "var", "in", "self", ".", "vars", ".", "items", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.reset_own_vars": [[187, 190], ["tfutil.run", "network.Network.own_vars.values"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "reset_own_vars", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Re-initialize all variables of this network, excluding sub-networks.\"\"\"", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "own_vars", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.reset_vars": [[191, 194], ["tfutil.run", "network.Network.vars.values"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "reset_vars", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Re-initialize all variables of this network, including sub-networks.\"\"\"", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "vars", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.reset_trainables": [[195, 198], ["tfutil.run", "network.Network.trainables.values"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "reset_trainables", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Re-initialize all trainable variables of this network, including sub-networks.\"\"\"", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "trainables", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for": [[199, 233], ["dict", "dict.update", "zip", "len", "all", "tfutil.absolute_variable_scope", "tensorflow.name_scope", "zip", "network.Network._build_func", "isinstance", "tfutil.is_tf_expression", "isinstance", "final_inputs.append", "tensorflow.zeros.set_shape", "tfutil.is_tf_expression", "list", "tensorflow.get_variable_scope", "tensorflow.identity", "tensorflow.zeros", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_variable_scope", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression"], ["", "def", "get_output_for", "(", "self", ",", "*", "in_expr", ":", "TfExpression", ",", "return_as_list", ":", "bool", "=", "False", ",", "**", "dynamic_kwargs", ")", "->", "Union", "[", "TfExpression", ",", "List", "[", "TfExpression", "]", "]", ":", "\n", "        ", "\"\"\"Construct TensorFlow expression(s) for the output(s) of this network, given the input expression(s).\"\"\"", "\n", "assert", "len", "(", "in_expr", ")", "==", "self", ".", "num_inputs", "\n", "assert", "not", "all", "(", "expr", "is", "None", "for", "expr", "in", "in_expr", ")", "\n", "\n", "# Finalize build func kwargs.", "\n", "build_kwargs", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "build_kwargs", ".", "update", "(", "dynamic_kwargs", ")", "\n", "build_kwargs", "[", "\"is_template_graph\"", "]", "=", "False", "\n", "build_kwargs", "[", "\"components\"", "]", "=", "self", ".", "components", "\n", "\n", "# Build TensorFlow graph to evaluate the network.", "\n", "with", "tfutil", ".", "absolute_variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "True", ")", ",", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "==", "self", ".", "scope", "\n", "valid_inputs", "=", "[", "expr", "for", "expr", "in", "in_expr", "if", "expr", "is", "not", "None", "]", "\n", "final_inputs", "=", "[", "]", "\n", "for", "expr", ",", "name", ",", "shape", "in", "zip", "(", "in_expr", ",", "self", ".", "input_names", ",", "self", ".", "input_shapes", ")", ":", "\n", "                ", "if", "expr", "is", "not", "None", ":", "\n", "                    ", "expr", "=", "tf", ".", "identity", "(", "expr", ",", "name", "=", "name", ")", "\n", "", "else", ":", "\n", "                    ", "expr", "=", "tf", ".", "zeros", "(", "[", "tf", ".", "shape", "(", "valid_inputs", "[", "0", "]", ")", "[", "0", "]", "]", "+", "shape", "[", "1", ":", "]", ",", "name", "=", "name", ")", "\n", "", "final_inputs", ".", "append", "(", "expr", ")", "\n", "", "out_expr", "=", "self", ".", "_build_func", "(", "*", "final_inputs", ",", "**", "build_kwargs", ")", "\n", "\n", "# Propagate input shapes back to the user-specified expressions.", "\n", "", "for", "expr", ",", "final", "in", "zip", "(", "in_expr", ",", "final_inputs", ")", ":", "\n", "            ", "if", "isinstance", "(", "expr", ",", "tf", ".", "Tensor", ")", ":", "\n", "                ", "expr", ".", "set_shape", "(", "final", ".", "shape", ")", "\n", "\n", "# Express outputs in the desired format.", "\n", "", "", "assert", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "or", "isinstance", "(", "out_expr", ",", "tuple", ")", "\n", "if", "return_as_list", ":", "\n", "            ", "out_expr", "=", "[", "out_expr", "]", "if", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "else", "list", "(", "out_expr", ")", "\n", "", "return", "out_expr", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_var_local_name": [[234, 239], ["tfutil.is_tf_expression", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression"], ["", "def", "get_var_local_name", "(", "self", ",", "var_or_global_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ")", "->", "str", ":", "\n", "        ", "\"\"\"Get the local name of a given variable, without any surrounding name scopes.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "var_or_global_name", ")", "or", "isinstance", "(", "var_or_global_name", ",", "str", ")", "\n", "global_name", "=", "var_or_global_name", "if", "isinstance", "(", "var_or_global_name", ",", "str", ")", "else", "var_or_global_name", ".", "name", "\n", "return", "self", ".", "var_global_to_local", "[", "global_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.find_var": [[240, 244], ["tfutil.is_tf_expression", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression"], ["", "def", "find_var", "(", "self", ",", "var_or_local_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ")", "->", "TfExpression", ":", "\n", "        ", "\"\"\"Find variable by local or global name.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "var_or_local_name", ")", "or", "isinstance", "(", "var_or_local_name", ",", "str", ")", "\n", "return", "self", ".", "vars", "[", "var_or_local_name", "]", "if", "isinstance", "(", "var_or_local_name", ",", "str", ")", "else", "var_or_local_name", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_var": [[245, 249], ["network.Network.find_var().eval", "network.Network.find_var"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.find_var"], ["", "def", "get_var", "(", "self", ",", "var_or_local_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Get the value of a given variable as NumPy array.\n        Note: This method is very inefficient -- prefer to use tflib.run(list_of_vars) whenever possible.\"\"\"", "\n", "return", "self", ".", "find_var", "(", "var_or_local_name", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.set_var": [[250, 254], ["tfutil.set_vars", "network.Network.find_var"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.find_var"], ["", "def", "set_var", "(", "self", ",", "var_or_local_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ",", "new_value", ":", "Union", "[", "int", ",", "float", ",", "np", ".", "ndarray", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Set the value of a given variable based on the given NumPy array.\n        Note: This method is very inefficient -- prefer to use tflib.set_vars() whenever possible.\"\"\"", "\n", "tfutil", ".", "set_vars", "(", "{", "self", ".", "find_var", "(", "var_or_local_name", ")", ":", "new_value", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.__getstate__": [[255, 266], ["dict", "dict", "dict", "list", "zip", "network.Network.own_vars.keys", "tfutil.run", "list", "network.Network.own_vars.values"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "__getstate__", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Pickle export.\"\"\"", "\n", "state", "=", "dict", "(", ")", "\n", "state", "[", "\"version\"", "]", "=", "4", "\n", "state", "[", "\"name\"", "]", "=", "self", ".", "name", "\n", "state", "[", "\"static_kwargs\"", "]", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "state", "[", "\"components\"", "]", "=", "dict", "(", "self", ".", "components", ")", "\n", "state", "[", "\"build_module_src\"", "]", "=", "self", ".", "_build_module_src", "\n", "state", "[", "\"build_func_name\"", "]", "=", "self", ".", "_build_func_name", "\n", "state", "[", "\"variables\"", "]", "=", "list", "(", "zip", "(", "self", ".", "own_vars", ".", "keys", "(", ")", ",", "tfutil", ".", "run", "(", "list", "(", "self", ".", "own_vars", ".", "values", "(", ")", ")", ")", ")", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.__setstate__": [[267, 300], ["tfutil.assert_tf_initialized", "network.Network._init_fields", "util.EasyDict", "util.EasyDict", "types.ModuleType", "exec", "util.get_obj_from_module", "callable", "network.Network._init_graph", "network.Network.reset_own_vars", "tfutil.set_vars", "handler", "handler.get", "uuid.uuid4", "network.Network.find_var"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network._init_fields", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_obj_from_module", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network._init_graph", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.reset_own_vars", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.find_var"], ["", "def", "__setstate__", "(", "self", ",", "state", ":", "dict", ")", "->", "None", ":", "\n", "        ", "\"\"\"Pickle import.\"\"\"", "\n", "# pylint: disable=attribute-defined-outside-init", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "self", ".", "_init_fields", "(", ")", "\n", "\n", "# Execute custom import handlers.", "\n", "for", "handler", "in", "_import_handlers", ":", "\n", "            ", "state", "=", "handler", "(", "state", ")", "\n", "\n", "# Set basic fields.", "\n", "", "assert", "state", "[", "\"version\"", "]", "in", "[", "2", ",", "3", ",", "4", "]", "\n", "self", ".", "name", "=", "state", "[", "\"name\"", "]", "\n", "self", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", "state", "[", "\"static_kwargs\"", "]", ")", "\n", "self", ".", "components", "=", "util", ".", "EasyDict", "(", "state", ".", "get", "(", "\"components\"", ",", "{", "}", ")", ")", "\n", "self", ".", "_build_module_src", "=", "state", "[", "\"build_module_src\"", "]", "\n", "self", ".", "_build_func_name", "=", "state", "[", "\"build_func_name\"", "]", "\n", "\n", "# Create temporary module from the imported source code.", "\n", "module_name", "=", "\"_tflib_network_import_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "module", "=", "types", ".", "ModuleType", "(", "module_name", ")", "\n", "sys", ".", "modules", "[", "module_name", "]", "=", "module", "\n", "_import_module_src", "[", "module", "]", "=", "self", ".", "_build_module_src", "\n", "exec", "(", "self", ".", "_build_module_src", ",", "module", ".", "__dict__", ")", "# pylint: disable=exec-used", "\n", "\n", "# Locate network build function in the temporary module.", "\n", "self", ".", "_build_func", "=", "util", ".", "get_obj_from_module", "(", "module", ",", "self", ".", "_build_func_name", ")", "\n", "assert", "callable", "(", "self", ".", "_build_func", ")", "\n", "\n", "# Init TensorFlow graph.", "\n", "self", ".", "_init_graph", "(", ")", "\n", "self", ".", "reset_own_vars", "(", ")", "\n", "tfutil", ".", "set_vars", "(", "{", "self", ".", "find_var", "(", "name", ")", ":", "value", "for", "name", ",", "value", "in", "state", "[", "\"variables\"", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone": [[301, 315], ["object.__new__", "object.__new__._init_fields", "util.EasyDict", "object.__new__.static_kwargs.update", "object.__new__._init_graph", "object.__new__.copy_vars_from"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network._init_fields", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network._init_graph", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.copy_vars_from"], ["", "def", "clone", "(", "self", ",", "name", ":", "str", "=", "None", ",", "**", "new_static_kwargs", ")", "->", "\"Network\"", ":", "\n", "        ", "\"\"\"Create a clone of this network with its own copy of the variables.\"\"\"", "\n", "# pylint: disable=protected-access", "\n", "net", "=", "object", ".", "__new__", "(", "Network", ")", "\n", "net", ".", "_init_fields", "(", ")", "\n", "net", ".", "name", "=", "name", "if", "name", "is", "not", "None", "else", "self", ".", "name", "\n", "net", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", "self", ".", "static_kwargs", ")", "\n", "net", ".", "static_kwargs", ".", "update", "(", "new_static_kwargs", ")", "\n", "net", ".", "_build_module_src", "=", "self", ".", "_build_module_src", "\n", "net", ".", "_build_func_name", "=", "self", ".", "_build_func_name", "\n", "net", ".", "_build_func", "=", "self", ".", "_build_func", "\n", "net", ".", "_init_graph", "(", ")", "\n", "net", ".", "copy_vars_from", "(", "self", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.copy_own_vars_from": [[316, 320], ["tfutil.set_vars", "tfutil.run", "network.Network.own_vars.keys"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "copy_own_vars_from", "(", "self", ",", "src_net", ":", "\"Network\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"Copy the values of all variables from the given network, excluding sub-networks.\"\"\"", "\n", "names", "=", "[", "name", "for", "name", "in", "self", ".", "own_vars", ".", "keys", "(", ")", "if", "name", "in", "src_net", ".", "own_vars", "]", "\n", "tfutil", ".", "set_vars", "(", "tfutil", ".", "run", "(", "{", "self", ".", "vars", "[", "name", "]", ":", "src_net", ".", "vars", "[", "name", "]", "for", "name", "in", "names", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.copy_vars_from": [[321, 325], ["tfutil.set_vars", "tfutil.run", "network.Network.vars.keys"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "copy_vars_from", "(", "self", ",", "src_net", ":", "\"Network\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"Copy the values of all variables from the given network, including sub-networks.\"\"\"", "\n", "names", "=", "[", "name", "for", "name", "in", "self", ".", "vars", ".", "keys", "(", ")", "if", "name", "in", "src_net", ".", "vars", "]", "\n", "tfutil", ".", "set_vars", "(", "tfutil", ".", "run", "(", "{", "self", ".", "vars", "[", "name", "]", ":", "src_net", ".", "vars", "[", "name", "]", "for", "name", "in", "names", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.copy_trainables_from": [[326, 330], ["tfutil.set_vars", "tfutil.run", "network.Network.trainables.keys"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["", "def", "copy_trainables_from", "(", "self", ",", "src_net", ":", "\"Network\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"Copy the values of all trainable variables from the given network, including sub-networks.\"\"\"", "\n", "names", "=", "[", "name", "for", "name", "in", "self", ".", "trainables", ".", "keys", "(", ")", "if", "name", "in", "src_net", ".", "trainables", "]", "\n", "tfutil", ".", "set_vars", "(", "tfutil", ".", "run", "(", "{", "self", ".", "vars", "[", "name", "]", ":", "src_net", ".", "vars", "[", "name", "]", "for", "name", "in", "names", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.convert": [[331, 340], ["dict", "dict.update", "network.Network", "network.Network.copy_vars_from"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.copy_vars_from"], ["", "def", "convert", "(", "self", ",", "new_func_name", ":", "str", ",", "new_name", ":", "str", "=", "None", ",", "**", "new_static_kwargs", ")", "->", "\"Network\"", ":", "\n", "        ", "\"\"\"Create new network with the given parameters, and copy all variables from this network.\"\"\"", "\n", "if", "new_name", "is", "None", ":", "\n", "            ", "new_name", "=", "self", ".", "name", "\n", "", "static_kwargs", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "static_kwargs", ".", "update", "(", "new_static_kwargs", ")", "\n", "net", "=", "Network", "(", "name", "=", "new_name", ",", "func_name", "=", "new_func_name", ",", "**", "static_kwargs", ")", "\n", "net", ".", "copy_vars_from", "(", "self", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.setup_as_moving_average_of": [[341, 352], ["tfutil.absolute_name_scope", "network.Network.vars.items", "tensorflow.group", "tfutil.lerp", "ops.append", "var.assign"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.lerp"], ["", "def", "setup_as_moving_average_of", "(", "self", ",", "src_net", ":", "\"Network\"", ",", "beta", ":", "TfExpressionEx", "=", "0.99", ",", "beta_nontrainable", ":", "TfExpressionEx", "=", "0.0", ")", "->", "tf", ".", "Operation", ":", "\n", "        ", "\"\"\"Construct a TensorFlow op that updates the variables of this network\n        to be slightly closer to those of the given network.\"\"\"", "\n", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", "+", "\"/_MovingAvg\"", ")", ":", "\n", "            ", "ops", "=", "[", "]", "\n", "for", "name", ",", "var", "in", "self", ".", "vars", ".", "items", "(", ")", ":", "\n", "                ", "if", "name", "in", "src_net", ".", "vars", ":", "\n", "                    ", "cur_beta", "=", "beta", "if", "name", "in", "self", ".", "trainables", "else", "beta_nontrainable", "\n", "new_value", "=", "tfutil", ".", "lerp", "(", "src_net", ".", "vars", "[", "name", "]", ",", "var", ",", "cur_beta", ")", "\n", "ops", ".", "append", "(", "var", ".", "assign", "(", "new_value", ")", ")", "\n", "", "", "return", "tf", ".", "group", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run": [[353, 454], ["network._handle_legacy_output_transforms", "dict", "repr", "range", "len", "all", "util.is_top_level_function", "util.is_top_level_function", "isinstance", "callable", "network.Network.run.unwind_key"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network._handle_legacy_output_transforms", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.is_top_level_function", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.is_top_level_function"], ["", "", "def", "run", "(", "self", ",", "\n", "*", "in_arrays", ":", "Tuple", "[", "Union", "[", "np", ".", "ndarray", ",", "None", "]", ",", "...", "]", ",", "\n", "input_transform", ":", "dict", "=", "None", ",", "\n", "output_transform", ":", "dict", "=", "None", ",", "\n", "return_as_list", ":", "bool", "=", "False", ",", "\n", "print_progress", ":", "bool", "=", "False", ",", "\n", "minibatch_size", ":", "int", "=", "None", ",", "\n", "num_gpus", ":", "int", "=", "1", ",", "\n", "assume_frozen", ":", "bool", "=", "False", ",", "\n", "**", "dynamic_kwargs", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Tuple", "[", "np", ".", "ndarray", ",", "...", "]", ",", "List", "[", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "\"\"\"Run this network for the given NumPy array(s), and return the output(s) as NumPy array(s).\n\n        Args:\n            input_transform:    A dict specifying a custom transformation to be applied to the input tensor(s) before evaluating the network.\n                                The dict must contain a 'func' field that points to a top-level function. The function is called with the input\n                                TensorFlow expression(s) as positional arguments. Any remaining fields of the dict will be passed in as kwargs.\n            output_transform:   A dict specifying a custom transformation to be applied to the output tensor(s) after evaluating the network.\n                                The dict must contain a 'func' field that points to a top-level function. The function is called with the output\n                                TensorFlow expression(s) as positional arguments. Any remaining fields of the dict will be passed in as kwargs.\n            return_as_list:     True = return a list of NumPy arrays, False = return a single NumPy array, or a tuple if there are multiple outputs.\n            print_progress:     Print progress to the console? Useful for very large input arrays.\n            minibatch_size:     Maximum minibatch size to use, None = disable batching.\n            num_gpus:           Number of GPUs to use.\n            assume_frozen:      Improve multi-GPU performance by assuming that the trainable parameters will remain changed between calls.\n            dynamic_kwargs:     Additional keyword arguments to be passed into the network build function.\n        \"\"\"", "\n", "assert", "len", "(", "in_arrays", ")", "==", "self", ".", "num_inputs", "\n", "assert", "not", "all", "(", "arr", "is", "None", "for", "arr", "in", "in_arrays", ")", "\n", "assert", "input_transform", "is", "None", "or", "util", ".", "is_top_level_function", "(", "input_transform", "[", "\"func\"", "]", ")", "\n", "assert", "output_transform", "is", "None", "or", "util", ".", "is_top_level_function", "(", "output_transform", "[", "\"func\"", "]", ")", "\n", "output_transform", ",", "dynamic_kwargs", "=", "_handle_legacy_output_transforms", "(", "output_transform", ",", "dynamic_kwargs", ")", "\n", "num_items", "=", "in_arrays", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "if", "minibatch_size", "is", "None", ":", "\n", "            ", "minibatch_size", "=", "num_items", "\n", "\n", "# Construct unique hash key from all arguments that affect the TensorFlow graph.", "\n", "", "key", "=", "dict", "(", "input_transform", "=", "input_transform", ",", "output_transform", "=", "output_transform", ",", "num_gpus", "=", "num_gpus", ",", "assume_frozen", "=", "assume_frozen", ",", "dynamic_kwargs", "=", "dynamic_kwargs", ")", "\n", "def", "unwind_key", "(", "obj", ")", ":", "\n", "            ", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "                ", "return", "[", "(", "key", ",", "unwind_key", "(", "value", ")", ")", "for", "key", ",", "value", "in", "sorted", "(", "obj", ".", "items", "(", ")", ")", "]", "\n", "", "if", "callable", "(", "obj", ")", ":", "\n", "                ", "return", "util", ".", "get_top_level_function_name", "(", "obj", ")", "\n", "", "return", "obj", "\n", "", "key", "=", "repr", "(", "unwind_key", "(", "key", ")", ")", "\n", "\n", "# Build graph.", "\n", "if", "key", "not", "in", "self", ".", "_run_cache", ":", "\n", "            ", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", "+", "\"/_Run\"", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                    ", "in_expr", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "name", ")", "for", "name", "in", "self", ".", "input_names", "]", "\n", "in_split", "=", "list", "(", "zip", "(", "*", "[", "tf", ".", "split", "(", "x", ",", "num_gpus", ")", "for", "x", "in", "in_expr", "]", ")", ")", "\n", "\n", "", "out_split", "=", "[", "]", "\n", "for", "gpu", "in", "range", "(", "num_gpus", ")", ":", "\n", "                    ", "with", "tf", ".", "device", "(", "\"/gpu:%d\"", "%", "gpu", ")", ":", "\n", "                        ", "net_gpu", "=", "self", ".", "clone", "(", ")", "if", "assume_frozen", "else", "self", "\n", "in_gpu", "=", "in_split", "[", "gpu", "]", "\n", "\n", "if", "input_transform", "is", "not", "None", ":", "\n", "                            ", "in_kwargs", "=", "dict", "(", "input_transform", ")", "\n", "in_gpu", "=", "in_kwargs", ".", "pop", "(", "\"func\"", ")", "(", "*", "in_gpu", ",", "**", "in_kwargs", ")", "\n", "in_gpu", "=", "[", "in_gpu", "]", "if", "tfutil", ".", "is_tf_expression", "(", "in_gpu", ")", "else", "list", "(", "in_gpu", ")", "\n", "\n", "", "assert", "len", "(", "in_gpu", ")", "==", "self", ".", "num_inputs", "\n", "out_gpu", "=", "net_gpu", ".", "get_output_for", "(", "*", "in_gpu", ",", "return_as_list", "=", "True", ",", "**", "dynamic_kwargs", ")", "\n", "\n", "if", "output_transform", "is", "not", "None", ":", "\n", "                            ", "out_kwargs", "=", "dict", "(", "output_transform", ")", "\n", "out_gpu", "=", "out_kwargs", ".", "pop", "(", "\"func\"", ")", "(", "*", "out_gpu", ",", "**", "out_kwargs", ")", "\n", "out_gpu", "=", "[", "out_gpu", "]", "if", "tfutil", ".", "is_tf_expression", "(", "out_gpu", ")", "else", "list", "(", "out_gpu", ")", "\n", "\n", "", "assert", "len", "(", "out_gpu", ")", "==", "self", ".", "num_outputs", "\n", "out_split", ".", "append", "(", "out_gpu", ")", "\n", "\n", "", "", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                    ", "out_expr", "=", "[", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "0", ")", "for", "outputs", "in", "zip", "(", "*", "out_split", ")", "]", "\n", "self", ".", "_run_cache", "[", "key", "]", "=", "in_expr", ",", "out_expr", "\n", "\n", "# Run minibatches.", "\n", "", "", "", "in_expr", ",", "out_expr", "=", "self", ".", "_run_cache", "[", "key", "]", "\n", "out_arrays", "=", "[", "np", ".", "empty", "(", "[", "num_items", "]", "+", "expr", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "]", ",", "expr", ".", "dtype", ".", "name", ")", "for", "expr", "in", "out_expr", "]", "\n", "\n", "for", "mb_begin", "in", "range", "(", "0", ",", "num_items", ",", "minibatch_size", ")", ":", "\n", "            ", "if", "print_progress", ":", "\n", "                ", "print", "(", "\"\\r%d / %d\"", "%", "(", "mb_begin", ",", "num_items", ")", ",", "end", "=", "\"\"", ")", "\n", "\n", "", "mb_end", "=", "min", "(", "mb_begin", "+", "minibatch_size", ",", "num_items", ")", "\n", "mb_num", "=", "mb_end", "-", "mb_begin", "\n", "mb_in", "=", "[", "src", "[", "mb_begin", ":", "mb_end", "]", "if", "src", "is", "not", "None", "else", "np", ".", "zeros", "(", "[", "mb_num", "]", "+", "shape", "[", "1", ":", "]", ")", "for", "src", ",", "shape", "in", "zip", "(", "in_arrays", ",", "self", ".", "input_shapes", ")", "]", "\n", "mb_out", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "out_expr", ",", "dict", "(", "zip", "(", "in_expr", ",", "mb_in", ")", ")", ")", "\n", "\n", "for", "dst", ",", "src", "in", "zip", "(", "out_arrays", ",", "mb_out", ")", ":", "\n", "                ", "dst", "[", "mb_begin", ":", "mb_end", "]", "=", "src", "\n", "\n", "# Done.", "\n", "", "", "if", "print_progress", ":", "\n", "            ", "print", "(", "\"\\r%d / %d\"", "%", "(", "num_items", ",", "num_items", ")", ")", "\n", "\n", "", "if", "not", "return_as_list", ":", "\n", "            ", "out_arrays", "=", "out_arrays", "[", "0", "]", "if", "len", "(", "out_arrays", ")", "==", "1", "else", "tuple", "(", "out_arrays", ")", "\n", "", "return", "out_arrays", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.list_ops": [[455, 462], ["tensorflow.get_default_graph().get_operations", "tensorflow.get_default_graph", "op.name.startswith", "op.name.startswith"], "methods", ["None"], ["", "def", "list_ops", "(", "self", ")", "->", "List", "[", "TfExpression", "]", ":", "\n", "        ", "include_prefix", "=", "self", ".", "scope", "+", "\"/\"", "\n", "exclude_prefix", "=", "include_prefix", "+", "\"_\"", "\n", "ops", "=", "tf", ".", "get_default_graph", "(", ")", ".", "get_operations", "(", ")", "\n", "ops", "=", "[", "op", "for", "op", "in", "ops", "if", "op", ".", "name", ".", "startswith", "(", "include_prefix", ")", "]", "\n", "ops", "=", "[", "op", "for", "op", "in", "ops", "if", "not", "op", ".", "name", ".", "startswith", "(", "exclude_prefix", ")", "]", "\n", "return", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.list_layers": [[463, 505], ["network.Network.list_layers.recurse"], "methods", ["None"], ["", "def", "list_layers", "(", "self", ")", "->", "List", "[", "Tuple", "[", "str", ",", "TfExpression", ",", "List", "[", "TfExpression", "]", "]", "]", ":", "\n", "        ", "\"\"\"Returns a list of (layer_name, output_expr, trainable_vars) tuples corresponding to\n        individual layers of the network. Mainly intended to be used for reporting.\"\"\"", "\n", "layers", "=", "[", "]", "\n", "\n", "def", "recurse", "(", "scope", ",", "parent_ops", ",", "parent_vars", ",", "level", ")", ":", "\n", "# Ignore specific patterns.", "\n", "            ", "if", "any", "(", "p", "in", "scope", "for", "p", "in", "[", "\"/Shape\"", ",", "\"/strided_slice\"", ",", "\"/Cast\"", ",", "\"/concat\"", ",", "\"/Assign\"", "]", ")", ":", "\n", "                ", "return", "\n", "\n", "# Filter ops and vars by scope.", "\n", "", "global_prefix", "=", "scope", "+", "\"/\"", "\n", "local_prefix", "=", "global_prefix", "[", "len", "(", "self", ".", "scope", ")", "+", "1", ":", "]", "\n", "cur_ops", "=", "[", "op", "for", "op", "in", "parent_ops", "if", "op", ".", "name", ".", "startswith", "(", "global_prefix", ")", "or", "op", ".", "name", "==", "global_prefix", "[", ":", "-", "1", "]", "]", "\n", "cur_vars", "=", "[", "(", "name", ",", "var", ")", "for", "name", ",", "var", "in", "parent_vars", "if", "name", ".", "startswith", "(", "local_prefix", ")", "or", "name", "==", "local_prefix", "[", ":", "-", "1", "]", "]", "\n", "if", "not", "cur_ops", "and", "not", "cur_vars", ":", "\n", "                ", "return", "\n", "\n", "# Filter out all ops related to variables.", "\n", "", "for", "var", "in", "[", "op", "for", "op", "in", "cur_ops", "if", "op", ".", "type", ".", "startswith", "(", "\"Variable\"", ")", "]", ":", "\n", "                ", "var_prefix", "=", "var", ".", "name", "+", "\"/\"", "\n", "cur_ops", "=", "[", "op", "for", "op", "in", "cur_ops", "if", "not", "op", ".", "name", ".", "startswith", "(", "var_prefix", ")", "]", "\n", "\n", "# Scope does not contain ops as immediate children => recurse deeper.", "\n", "", "contains_direct_ops", "=", "any", "(", "\"/\"", "not", "in", "op", ".", "name", "[", "len", "(", "global_prefix", ")", ":", "]", "and", "op", ".", "type", "not", "in", "[", "\"Identity\"", ",", "\"Cast\"", ",", "\"Transpose\"", "]", "for", "op", "in", "cur_ops", ")", "\n", "if", "(", "level", "==", "0", "or", "not", "contains_direct_ops", ")", "and", "(", "len", "(", "cur_ops", ")", "+", "len", "(", "cur_vars", ")", ")", ">", "1", ":", "\n", "                ", "visited", "=", "set", "(", ")", "\n", "for", "rel_name", "in", "[", "op", ".", "name", "[", "len", "(", "global_prefix", ")", ":", "]", "for", "op", "in", "cur_ops", "]", "+", "[", "name", "[", "len", "(", "local_prefix", ")", ":", "]", "for", "name", ",", "_var", "in", "cur_vars", "]", ":", "\n", "                    ", "token", "=", "rel_name", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "if", "token", "not", "in", "visited", ":", "\n", "                        ", "recurse", "(", "global_prefix", "+", "token", ",", "cur_ops", ",", "cur_vars", ",", "level", "+", "1", ")", "\n", "visited", ".", "add", "(", "token", ")", "\n", "", "", "return", "\n", "\n", "# Report layer.", "\n", "", "layer_name", "=", "scope", "[", "len", "(", "self", ".", "scope", ")", "+", "1", ":", "]", "\n", "layer_output", "=", "cur_ops", "[", "-", "1", "]", ".", "outputs", "[", "0", "]", "if", "cur_ops", "else", "cur_vars", "[", "-", "1", "]", "[", "1", "]", "\n", "layer_trainables", "=", "[", "var", "for", "_name", ",", "var", "in", "cur_vars", "if", "var", ".", "trainable", "]", "\n", "layers", ".", "append", "(", "(", "layer_name", ",", "layer_output", ",", "layer_trainables", ")", ")", "\n", "\n", "", "recurse", "(", "self", ".", "scope", ",", "self", ".", "list_ops", "(", ")", ",", "list", "(", "self", ".", "vars", ".", "items", "(", ")", ")", ",", "0", ")", "\n", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.print_layers": [[506, 534], ["network.Network.list_layers", "print", "print", "sum", "weights.sort", "max", "print", "str", "str", "zip", "int", "var.name.endswith", "len", "len", "str", "str", "len", "numpy.prod", "len", "len", "var.shape.as_list", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.list_layers"], ["", "def", "print_layers", "(", "self", ",", "title", ":", "str", "=", "None", ",", "hide_layers_with_no_params", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "\"\"\"Print a summary table of the network structure.\"\"\"", "\n", "rows", "=", "[", "[", "title", "if", "title", "is", "not", "None", "else", "self", ".", "name", ",", "\"Params\"", ",", "\"OutputShape\"", ",", "\"WeightShape\"", "]", "]", "\n", "rows", "+=", "[", "[", "\"---\"", "]", "*", "4", "]", "\n", "total_params", "=", "0", "\n", "\n", "for", "layer_name", ",", "layer_output", ",", "layer_trainables", "in", "self", ".", "list_layers", "(", ")", ":", "\n", "            ", "num_params", "=", "sum", "(", "int", "(", "np", ".", "prod", "(", "var", ".", "shape", ".", "as_list", "(", ")", ")", ")", "for", "var", "in", "layer_trainables", ")", "\n", "weights", "=", "[", "var", "for", "var", "in", "layer_trainables", "if", "var", ".", "name", ".", "endswith", "(", "\"/weight:0\"", ")", "]", "\n", "weights", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", ".", "name", ")", ")", "\n", "if", "len", "(", "weights", ")", "==", "0", "and", "len", "(", "layer_trainables", ")", "==", "1", ":", "\n", "                ", "weights", "=", "layer_trainables", "\n", "", "total_params", "+=", "num_params", "\n", "\n", "if", "not", "hide_layers_with_no_params", "or", "num_params", "!=", "0", ":", "\n", "                ", "num_params_str", "=", "str", "(", "num_params", ")", "if", "num_params", ">", "0", "else", "\"-\"", "\n", "output_shape_str", "=", "str", "(", "layer_output", ".", "shape", ")", "\n", "weight_shape_str", "=", "str", "(", "weights", "[", "0", "]", ".", "shape", ")", "if", "len", "(", "weights", ")", ">=", "1", "else", "\"-\"", "\n", "rows", "+=", "[", "[", "layer_name", ",", "num_params_str", ",", "output_shape_str", ",", "weight_shape_str", "]", "]", "\n", "\n", "", "", "rows", "+=", "[", "[", "\"---\"", "]", "*", "4", "]", "\n", "rows", "+=", "[", "[", "\"Total\"", ",", "str", "(", "total_params", ")", ",", "\"\"", ",", "\"\"", "]", "]", "\n", "\n", "widths", "=", "[", "max", "(", "len", "(", "cell", ")", "for", "cell", "in", "column", ")", "for", "column", "in", "zip", "(", "*", "rows", ")", "]", "\n", "print", "(", ")", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "print", "(", "\"  \"", ".", "join", "(", "cell", "+", "\" \"", "*", "(", "width", "-", "len", "(", "cell", ")", ")", "for", "cell", ",", "width", "in", "zip", "(", "row", ",", "widths", ")", ")", ")", "\n", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.setup_weight_histograms": [[535, 549], ["tensorflow.name_scope", "tensorflow.device", "tensorflow.control_dependencies", "network.Network.trainables.items", "tensorflow.summary.histogram", "local_name.split"], "methods", ["None"], ["", "def", "setup_weight_histograms", "(", "self", ",", "title", ":", "str", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"Construct summary ops to include histograms of all trainable parameters in TensorBoard.\"\"\"", "\n", "if", "title", "is", "None", ":", "\n", "            ", "title", "=", "self", ".", "name", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "None", ")", ",", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "            ", "for", "local_name", ",", "var", "in", "self", ".", "trainables", ".", "items", "(", ")", ":", "\n", "                ", "if", "\"/\"", "in", "local_name", ":", "\n", "                    ", "p", "=", "local_name", ".", "split", "(", "\"/\"", ")", "\n", "name", "=", "title", "+", "\"_\"", "+", "p", "[", "-", "1", "]", "+", "\"/\"", "+", "\"_\"", ".", "join", "(", "p", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "name", "=", "title", "+", "\"_toplevel/\"", "+", "local_name", "\n", "\n", "", "tf", ".", "summary", ".", "histogram", "(", "name", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.import_handler": [[29, 33], ["_import_handlers.append"], "function", ["None"], ["def", "import_handler", "(", "handler_func", ")", ":", "\n", "    ", "\"\"\"Function decorator for declaring custom import handlers.\"\"\"", "\n", "_import_handlers", ".", "append", "(", "handler_func", ")", "\n", "return", "handler_func", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network._handle_legacy_output_transforms": [[555, 574], ["dict", "any", "print", "print", "print", "print", "print", "dict.pop"], "function", ["None"], ["def", "_handle_legacy_output_transforms", "(", "output_transform", ",", "dynamic_kwargs", ")", ":", "\n", "    ", "global", "_print_legacy_warning", "\n", "legacy_kwargs", "=", "[", "\"out_mul\"", ",", "\"out_add\"", ",", "\"out_shrink\"", ",", "\"out_dtype\"", "]", "\n", "if", "not", "any", "(", "kwarg", "in", "dynamic_kwargs", "for", "kwarg", "in", "legacy_kwargs", ")", ":", "\n", "        ", "return", "output_transform", ",", "dynamic_kwargs", "\n", "\n", "", "if", "_print_legacy_warning", ":", "\n", "        ", "_print_legacy_warning", "=", "False", "\n", "print", "(", ")", "\n", "print", "(", "\"WARNING: Old-style output transformations in Network.run() are deprecated.\"", ")", "\n", "print", "(", "\"Consider using 'output_transform=dict(func=tflib.convert_images_to_uint8)'\"", ")", "\n", "print", "(", "\"instead of 'out_mul=127.5, out_add=127.5, out_dtype=np.uint8'.\"", ")", "\n", "print", "(", ")", "\n", "", "assert", "output_transform", "is", "None", "\n", "\n", "new_kwargs", "=", "dict", "(", "dynamic_kwargs", ")", "\n", "new_transform", "=", "{", "kwarg", ":", "new_kwargs", ".", "pop", "(", "kwarg", ")", "for", "kwarg", "in", "legacy_kwargs", "if", "kwarg", "in", "dynamic_kwargs", "}", "\n", "new_transform", "[", "\"func\"", "]", "=", "_legacy_output_transform_func", "\n", "return", "new_transform", ",", "new_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network._legacy_output_transform_func": [[575, 591], ["tensorflow.nn.avg_pool", "tensorflow.as_dtype", "tensorflow.saturate_cast", "tensorflow.round"], "function", ["None"], ["", "def", "_legacy_output_transform_func", "(", "*", "expr", ",", "out_mul", "=", "1.0", ",", "out_add", "=", "0.0", ",", "out_shrink", "=", "1", ",", "out_dtype", "=", "None", ")", ":", "\n", "    ", "if", "out_mul", "!=", "1.0", ":", "\n", "        ", "expr", "=", "[", "x", "*", "out_mul", "for", "x", "in", "expr", "]", "\n", "\n", "", "if", "out_add", "!=", "0.0", ":", "\n", "        ", "expr", "=", "[", "x", "+", "out_add", "for", "x", "in", "expr", "]", "\n", "\n", "", "if", "out_shrink", ">", "1", ":", "\n", "        ", "ksize", "=", "[", "1", ",", "1", ",", "out_shrink", ",", "out_shrink", "]", "\n", "expr", "=", "[", "tf", ".", "nn", ".", "avg_pool", "(", "x", ",", "ksize", "=", "ksize", ",", "strides", "=", "ksize", ",", "padding", "=", "\"VALID\"", ",", "data_format", "=", "\"NCHW\"", ")", "for", "x", "in", "expr", "]", "\n", "\n", "", "if", "out_dtype", "is", "not", "None", ":", "\n", "        ", "if", "tf", ".", "as_dtype", "(", "out_dtype", ")", ".", "is_integer", ":", "\n", "            ", "expr", "=", "[", "tf", ".", "round", "(", "x", ")", "for", "x", "in", "expr", "]", "\n", "", "expr", "=", "[", "tf", ".", "saturate_cast", "(", "x", ",", "out_dtype", ")", "for", "x", "in", "expr", "]", "\n", "", "return", "expr", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary._create_var": [[45, 75], ["name.replace", "tensorflow.cast", "tf.reshape.shape.is_fully_defined", "tensorflow.cond", "tensorflow.cond", "numpy.prod", "tensorflow.constant", "tensorflow.reduce_prod", "tensorflow.is_finite", "tfutil.absolute_name_scope", "tensorflow.control_dependencies", "tensorflow.Variable", "tensorflow.is_variable_initialized", "_vars[].append", "tf.reshape.shape.as_list", "tensorflow.cast", "tensorflow.reshape", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.stack", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.assign_add", "tensorflow.assign", "tensorflow.shape", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope"], ["def", "_create_var", "(", "name", ":", "str", ",", "value_expr", ":", "TfExpression", ")", "->", "TfExpression", ":", "\n", "    ", "\"\"\"Internal helper for creating autosummary accumulators.\"\"\"", "\n", "assert", "not", "_finalized", "\n", "name_id", "=", "name", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "v", "=", "tf", ".", "cast", "(", "value_expr", ",", "_dtype", ")", "\n", "\n", "if", "v", ".", "shape", ".", "is_fully_defined", "(", ")", ":", "\n", "        ", "size", "=", "np", ".", "prod", "(", "v", ".", "shape", ".", "as_list", "(", ")", ")", "\n", "size_expr", "=", "tf", ".", "constant", "(", "size", ",", "dtype", "=", "_dtype", ")", "\n", "", "else", ":", "\n", "        ", "size", "=", "None", "\n", "size_expr", "=", "tf", ".", "reduce_prod", "(", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "v", ")", ",", "_dtype", ")", ")", "\n", "\n", "", "if", "size", "==", "1", ":", "\n", "        ", "if", "v", ".", "shape", ".", "ndims", "!=", "0", ":", "\n", "            ", "v", "=", "tf", ".", "reshape", "(", "v", ",", "[", "]", ")", "\n", "", "v", "=", "[", "size_expr", ",", "v", ",", "tf", ".", "square", "(", "v", ")", "]", "\n", "", "else", ":", "\n", "        ", "v", "=", "[", "size_expr", ",", "tf", ".", "reduce_sum", "(", "v", ")", ",", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "v", ")", ")", "]", "\n", "", "v", "=", "tf", ".", "cond", "(", "tf", ".", "is_finite", "(", "v", "[", "1", "]", ")", ",", "lambda", ":", "tf", ".", "stack", "(", "v", ")", ",", "lambda", ":", "tf", ".", "zeros", "(", "3", ",", "dtype", "=", "_dtype", ")", ")", "\n", "\n", "with", "tfutil", ".", "absolute_name_scope", "(", "\"Autosummary/\"", "+", "name_id", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "        ", "var", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "3", ",", "dtype", "=", "_dtype", ")", ",", "trainable", "=", "False", ")", "# [sum(1), sum(x), sum(x**2)]", "\n", "", "update_op", "=", "tf", ".", "cond", "(", "tf", ".", "is_variable_initialized", "(", "var", ")", ",", "lambda", ":", "tf", ".", "assign_add", "(", "var", ",", "v", ")", ",", "lambda", ":", "tf", ".", "assign", "(", "var", ",", "v", ")", ")", "\n", "\n", "if", "name", "in", "_vars", ":", "\n", "        ", "_vars", "[", "name", "]", ".", "append", "(", "var", ")", "\n", "", "else", ":", "\n", "        ", "_vars", "[", "name", "]", "=", "[", "var", "]", "\n", "", "return", "update_op", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary": [[77, 116], ["tfutil.assert_tf_initialized", "name.replace", "tfutil.is_tf_expression", "tensorflow.name_scope", "tensorflow.device", "tensorflow.convert_to_tensor", "tensorflow.cond", "tfutil.is_tf_expression", "tfutil.is_tf_expression", "tfutil.run", "tensorflow.control_dependencies", "tensorflow.identity", "tensorflow.group", "tfutil.absolute_name_scope", "tensorflow.device", "tensorflow.control_dependencies", "tensorflow.placeholder", "autosummary._create_var", "autosummary._create_var"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary._create_var", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary._create_var"], ["", "def", "autosummary", "(", "name", ":", "str", ",", "value", ":", "TfExpressionEx", ",", "passthru", ":", "TfExpressionEx", "=", "None", ",", "condition", ":", "TfExpressionEx", "=", "True", ")", "->", "TfExpressionEx", ":", "\n", "    ", "\"\"\"Create a new autosummary.\n\n    Args:\n        name:     Name to use in TensorBoard\n        value:    TensorFlow expression or python value to track\n        passthru: Optionally return this TF node without modifications but tack an autosummary update side-effect to this node.\n\n    Example use of the passthru mechanism:\n\n    n = autosummary('l2loss', loss, passthru=n)\n\n    This is a shorthand for the following code:\n\n    with tf.control_dependencies([autosummary('l2loss', loss)]):\n        n = tf.identity(n)\n    \"\"\"", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "name_id", "=", "name", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "\n", "if", "tfutil", ".", "is_tf_expression", "(", "value", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"summary_\"", "+", "name_id", ")", ",", "tf", ".", "device", "(", "value", ".", "device", ")", ":", "\n", "            ", "condition", "=", "tf", ".", "convert_to_tensor", "(", "condition", ",", "name", "=", "'condition'", ")", "\n", "update_op", "=", "tf", ".", "cond", "(", "condition", ",", "lambda", ":", "tf", ".", "group", "(", "_create_var", "(", "name", ",", "value", ")", ")", ",", "tf", ".", "no_op", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_op", "]", ")", ":", "\n", "                ", "return", "tf", ".", "identity", "(", "value", "if", "passthru", "is", "None", "else", "passthru", ")", "\n", "\n", "", "", "", "else", ":", "# python scalar or numpy array", "\n", "        ", "assert", "not", "tfutil", ".", "is_tf_expression", "(", "passthru", ")", "\n", "assert", "not", "tfutil", ".", "is_tf_expression", "(", "condition", ")", "\n", "if", "condition", ":", "\n", "            ", "if", "name", "not", "in", "_immediate", ":", "\n", "                ", "with", "tfutil", ".", "absolute_name_scope", "(", "\"Autosummary/\"", "+", "name_id", ")", ",", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                    ", "update_value", "=", "tf", ".", "placeholder", "(", "_dtype", ")", "\n", "update_op", "=", "_create_var", "(", "name", ",", "update_value", ")", "\n", "_immediate", "[", "name", "]", "=", "update_op", ",", "update_value", "\n", "", "", "update_op", ",", "update_value", "=", "_immediate", "[", "name", "]", "\n", "tfutil", ".", "run", "(", "update_op", ",", "{", "update_value", ":", "value", "}", ")", "\n", "", "return", "value", "if", "passthru", "is", "None", "else", "passthru", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.finalize_autosummaries": [[118, 176], ["tfutil.assert_tf_initialized", "tfutil.init_uninitialized_vars", "tensorflow.device", "tensorflow.control_dependencies", "_vars.items", "collections.OrderedDict", "sorted", "collections.OrderedDict.items", "tensorboard.summary.custom_scalar_pb", "name.replace", "_vars.keys", "series_name.split", "[].append", "chart_dict.items", "categories.append", "tensorboard.plugins.custom_scalar.layout_pb2.Layout", "_vars.values", "tfutil.absolute_name_scope", "tensorflow.add_n", "collections.OrderedDict", "tensorboard.plugins.custom_scalar.layout_pb2.MarginChartContent", "charts.append", "tensorboard.plugins.custom_scalar.layout_pb2.Category", "tensorflow.control_dependencies", "len", "len", "series.append", "tensorboard.plugins.custom_scalar.layout_pb2.Chart", "tensorflow.assign", "tensorflow.name_scope", "tensorflow.control_dependencies", "tensorflow.sqrt", "tensorflow.summary.scalar", "tensorboard.plugins.custom_scalar.layout_pb2.MarginChartContent.Series", "tensorflow.zeros", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope"], ["", "", "def", "finalize_autosummaries", "(", ")", "->", "None", ":", "\n", "    ", "\"\"\"Create the necessary ops to include autosummaries in TensorBoard report.\n    Note: This should be done only once per graph.\n    \"\"\"", "\n", "global", "_finalized", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "\n", "if", "_finalized", ":", "\n", "        ", "return", "None", "\n", "\n", "", "_finalized", "=", "True", "\n", "tfutil", ".", "init_uninitialized_vars", "(", "[", "var", "for", "vars_list", "in", "_vars", ".", "values", "(", ")", "for", "var", "in", "vars_list", "]", ")", "\n", "\n", "# Create summary ops.", "\n", "with", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "        ", "for", "name", ",", "vars_list", "in", "_vars", ".", "items", "(", ")", ":", "\n", "            ", "name_id", "=", "name", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "with", "tfutil", ".", "absolute_name_scope", "(", "\"Autosummary/\"", "+", "name_id", ")", ":", "\n", "                ", "moments", "=", "tf", ".", "add_n", "(", "vars_list", ")", "\n", "moments", "/=", "moments", "[", "0", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "moments", "]", ")", ":", "# read before resetting", "\n", "                    ", "reset_ops", "=", "[", "tf", ".", "assign", "(", "var", ",", "tf", ".", "zeros", "(", "3", ",", "dtype", "=", "_dtype", ")", ")", "for", "var", "in", "vars_list", "]", "\n", "with", "tf", ".", "name_scope", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "reset_ops", ")", ":", "# reset before reporting", "\n", "                        ", "mean", "=", "moments", "[", "1", "]", "\n", "std", "=", "tf", ".", "sqrt", "(", "moments", "[", "2", "]", "-", "tf", ".", "square", "(", "moments", "[", "1", "]", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "name", ",", "mean", ")", "\n", "if", "enable_custom_scalars", ":", "\n", "                            ", "tf", ".", "summary", ".", "scalar", "(", "\"xCustomScalars/\"", "+", "name", "+", "\"/margin_lo\"", ",", "mean", "-", "std", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"xCustomScalars/\"", "+", "name", "+", "\"/margin_hi\"", ",", "mean", "+", "std", ")", "\n", "\n", "# Setup layout for custom scalars.", "\n", "", "", "", "", "", "", "layout", "=", "None", "\n", "if", "enable_custom_scalars", ":", "\n", "        ", "cat_dict", "=", "OrderedDict", "(", ")", "\n", "for", "series_name", "in", "sorted", "(", "_vars", ".", "keys", "(", ")", ")", ":", "\n", "            ", "p", "=", "series_name", ".", "split", "(", "\"/\"", ")", "\n", "cat", "=", "p", "[", "0", "]", "if", "len", "(", "p", ")", ">=", "2", "else", "\"\"", "\n", "chart", "=", "\"/\"", ".", "join", "(", "p", "[", "1", ":", "-", "1", "]", ")", "if", "len", "(", "p", ")", ">=", "3", "else", "p", "[", "-", "1", "]", "\n", "if", "cat", "not", "in", "cat_dict", ":", "\n", "                ", "cat_dict", "[", "cat", "]", "=", "OrderedDict", "(", ")", "\n", "", "if", "chart", "not", "in", "cat_dict", "[", "cat", "]", ":", "\n", "                ", "cat_dict", "[", "cat", "]", "[", "chart", "]", "=", "[", "]", "\n", "", "cat_dict", "[", "cat", "]", "[", "chart", "]", ".", "append", "(", "series_name", ")", "\n", "", "categories", "=", "[", "]", "\n", "for", "cat_name", ",", "chart_dict", "in", "cat_dict", ".", "items", "(", ")", ":", "\n", "            ", "charts", "=", "[", "]", "\n", "for", "chart_name", ",", "series_names", "in", "chart_dict", ".", "items", "(", ")", ":", "\n", "                ", "series", "=", "[", "]", "\n", "for", "series_name", "in", "series_names", ":", "\n", "                    ", "series", ".", "append", "(", "layout_pb2", ".", "MarginChartContent", ".", "Series", "(", "\n", "value", "=", "series_name", ",", "\n", "lower", "=", "\"xCustomScalars/\"", "+", "series_name", "+", "\"/margin_lo\"", ",", "\n", "upper", "=", "\"xCustomScalars/\"", "+", "series_name", "+", "\"/margin_hi\"", ")", ")", "\n", "", "margin", "=", "layout_pb2", ".", "MarginChartContent", "(", "series", "=", "series", ")", "\n", "charts", ".", "append", "(", "layout_pb2", ".", "Chart", "(", "title", "=", "chart_name", ",", "margin", "=", "margin", ")", ")", "\n", "", "categories", ".", "append", "(", "layout_pb2", ".", "Category", "(", "title", "=", "cat_name", ",", "chart", "=", "charts", ")", ")", "\n", "", "layout", "=", "summary_lib", ".", "custom_scalar_pb", "(", "layout_pb2", ".", "Layout", "(", "category", "=", "categories", ")", ")", "\n", "", "return", "layout", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.decode": [[179, 191], ["pdb.set_trace", "len", "struct.unpack", "struct.unpack", "struct.unpack"], "function", ["None"], ["def", "decode", "(", "summ_str", ")", ":", "\n", "    ", "idx", "=", "0", "\n", "ret_dict", "=", "{", "}", "\n", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "while", "idx", "<", "len", "(", "summ_str", ")", ":", "\n", "        ", "item_len", "=", "struct", ".", "unpack", "(", "'B'", ",", "summ_str", "[", "idx", "+", "1", "]", ")", "[", "0", "]", "\n", "name_len", "=", "struct", ".", "unpack", "(", "'B'", ",", "summ_str", "[", "idx", "+", "3", "]", ")", "[", "0", "]", "\n", "name", "=", "summ_str", "[", "idx", "+", "4", ":", "idx", "+", "4", "+", "name_len", "]", "\n", "value", "=", "struct", ".", "unpack", "(", "'<f'", ",", "summ_str", "[", "idx", "+", "5", "+", "name_len", ":", "idx", "+", "9", "+", "name_len", "]", ")", "[", "0", "]", "\n", "ret_dict", "[", "name", "]", "=", "value", "\n", "idx", "+=", "item_len", "+", "2", "\n", "", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.save_summaries": [[193, 207], ["tfutil.assert_tf_initialized", "file_writer.add_summary", "autosummary.finalize_autosummaries", "tf.summary.merge_all.eval", "file_writer.add_summary", "tensorflow.device", "tensorflow.control_dependencies", "tensorflow.summary.merge_all"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.finalize_autosummaries", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval"], ["", "def", "save_summaries", "(", "file_writer", ",", "global_step", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call FileWriter.add_summary() with all summaries in the default graph,\n    automatically finalizing and merging them on the first call.\n    \"\"\"", "\n", "global", "_merge_op", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "\n", "if", "_merge_op", "is", "None", ":", "\n", "        ", "layout", "=", "finalize_autosummaries", "(", ")", "\n", "if", "layout", "is", "not", "None", ":", "\n", "            ", "file_writer", ".", "add_summary", "(", "layout", ")", "\n", "", "with", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "            ", "_merge_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "", "", "file_writer", ".", "add_summary", "(", "_merge_op", ".", "eval", "(", ")", ",", "global_step", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops._find_compiler_bindir": [[36, 41], ["os.path.isdir"], "function", ["None"], ["def", "_find_compiler_bindir", "(", ")", ":", "\n", "    ", "for", "compiler_path", "in", "compiler_bindir_search_path", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "compiler_path", ")", ":", "\n", "            ", "return", "compiler_path", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops._get_compute_cap": [[42, 48], ["re.search", "re.search.group", "re.search.group"], "function", ["None"], ["", "def", "_get_compute_cap", "(", "device", ")", ":", "\n", "    ", "caps_str", "=", "device", ".", "physical_device_desc", "\n", "m", "=", "re", ".", "search", "(", "'compute capability: (\\\\d+).(\\\\d+)'", ",", "caps_str", ")", "\n", "major", "=", "m", ".", "group", "(", "1", ")", "\n", "minor", "=", "m", ".", "group", "(", "2", ")", "\n", "return", "(", "major", ",", "minor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops._get_cuda_gpu_arch_string": [[49, 55], ["custom_ops._get_compute_cap", "len", "RuntimeError", "tensorflow.python.client.device_lib.list_local_devices"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops._get_compute_cap"], ["", "def", "_get_cuda_gpu_arch_string", "(", ")", ":", "\n", "    ", "gpus", "=", "[", "x", "for", "x", "in", "device_lib", ".", "list_local_devices", "(", ")", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n", "if", "len", "(", "gpus", ")", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "'No GPU devices found'", ")", "\n", "", "(", "major", ",", "minor", ")", "=", "_get_compute_cap", "(", "gpus", "[", "0", "]", ")", "\n", "return", "'sm_%s%s'", "%", "(", "major", ",", "minor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops._run_cmd": [[56, 62], ["os.popen", "pipe.read", "pipe.close", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close"], ["", "def", "_run_cmd", "(", "cmd", ")", ":", "\n", "    ", "with", "os", ".", "popen", "(", "cmd", ")", "as", "pipe", ":", "\n", "        ", "output", "=", "pipe", ".", "read", "(", ")", "\n", "status", "=", "pipe", ".", "close", "(", ")", "\n", "", "if", "status", "is", "not", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "'NVCC returned an error. See below for full command line and output log:\\n\\n%s\\n\\n%s'", "%", "(", "cmd", ",", "output", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops._prepare_nvcc_cli": [[63, 82], ["custom_ops._find_compiler_bindir", "opts.strip", "tensorflow.sysconfig.get_include", "os.path.join", "os.path.join", "os.path.join", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops._find_compiler_bindir"], ["", "", "def", "_prepare_nvcc_cli", "(", "opts", ")", ":", "\n", "    ", "cmd", "=", "'nvcc '", "+", "opts", ".", "strip", "(", ")", "\n", "cmd", "+=", "' --disable-warnings'", "\n", "include_path", "=", "r'C:\\Program Files\\tensorflow\\include'", "if", "os", ".", "name", "==", "'nt'", "else", "tf", ".", "sysconfig", ".", "get_include", "(", ")", "\n", "cmd", "+=", "' --include-path \"%s\"'", "%", "include_path", "\n", "cmd", "+=", "' --include-path \"%s\"'", "%", "os", ".", "path", ".", "join", "(", "include_path", ",", "'external'", ",", "'protobuf_archive'", ",", "'src'", ")", "\n", "cmd", "+=", "' --include-path \"%s\"'", "%", "os", ".", "path", ".", "join", "(", "include_path", ",", "'external'", ",", "'com_google_absl'", ")", "\n", "cmd", "+=", "' --include-path \"%s\"'", "%", "os", ".", "path", ".", "join", "(", "include_path", ",", "'external'", ",", "'eigen_archive'", ")", "\n", "\n", "compiler_bindir", "=", "_find_compiler_bindir", "(", ")", "\n", "if", "compiler_bindir", "is", "None", ":", "\n", "# Require that _find_compiler_bindir succeeds on Windows.  Allow", "\n", "# nvcc to use whatever is the default on Linux.", "\n", "        ", "if", "os", ".", "name", "==", "'nt'", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Could not find MSVC/GCC/CLANG installation on this computer. Check compiler_bindir_search_path list in \"%s\".'", "%", "__file__", ")", "\n", "", "", "else", ":", "\n", "        ", "cmd", "+=", "' --compiler-bindir \"%s\"'", "%", "compiler_bindir", "\n", "", "cmd", "+=", "' 2>&1'", "\n", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops.get_plugin": [[88, 171], ["os.path.basename", "os.path.splitext", "print", "hashlib.md5", "hashlib.md5.update", "custom_ops._prepare_nvcc_cli", "hashlib.md5.update", "hashlib.md5.update", "hashlib.md5.update", "os.path.join", "tensorflow.load_op_library", "open", "hashlib.md5.update", "custom_ops._get_cuda_gpu_arch_string", "os.path.isfile", "print", "print", "f.read", "print", "tempfile.TemporaryDirectory", "os.path.join", "custom_ops._run_cmd", "os.path.join", "tensorflow.sysconfig.get_lib", "print", "tempfile.TemporaryDirectory", "os.path.join", "custom_ops._run_cmd", "os.makedirs", "os.path.join", "shutil.copyfile", "os.rename", "print", "custom_ops._prepare_nvcc_cli", "open", "hashlib.md5.update", "os.path.join", "hashlib.md5.hexdigest", "ln.replace.replace", "hashlib.md5.update", "ln.replace.startswith", "ln.replace.startswith", "cuda_file.replace", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops._prepare_nvcc_cli", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops._get_cuda_gpu_arch_string", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops._run_cmd", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops._run_cmd", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops._prepare_nvcc_cli", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update"], ["def", "get_plugin", "(", "cuda_file", ")", ":", "\n", "    ", "cuda_file_base", "=", "os", ".", "path", ".", "basename", "(", "cuda_file", ")", "\n", "cuda_file_name", ",", "cuda_file_ext", "=", "os", ".", "path", ".", "splitext", "(", "cuda_file_base", ")", "\n", "\n", "# Already in cache?", "\n", "if", "cuda_file", "in", "_plugin_cache", ":", "\n", "        ", "return", "_plugin_cache", "[", "cuda_file", "]", "\n", "\n", "# Setup plugin.", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "'Setting up TensorFlow plugin \"%s\": '", "%", "cuda_file_base", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "try", ":", "\n", "# Hash CUDA source.", "\n", "        ", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "cuda_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "md5", ".", "update", "(", "f", ".", "read", "(", ")", ")", "\n", "", "md5", ".", "update", "(", "b'\\n'", ")", "\n", "\n", "# Hash headers included by the CUDA code by running it through the preprocessor.", "\n", "if", "not", "do_not_hash_included_headers", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "'Preprocessing... '", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "                ", "tmp_file", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "cuda_file_name", "+", "'_tmp'", "+", "cuda_file_ext", ")", "\n", "_run_cmd", "(", "_prepare_nvcc_cli", "(", "'\"%s\" --preprocess -o \"%s\" --keep --keep-dir \"%s\"'", "%", "(", "cuda_file", ",", "tmp_file", ",", "tmp_dir", ")", ")", ")", "\n", "with", "open", "(", "tmp_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "bad_file_str", "=", "(", "'\"'", "+", "cuda_file", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "+", "'\"'", ")", ".", "encode", "(", "'utf-8'", ")", "# __FILE__ in error check macros", "\n", "good_file_str", "=", "(", "'\"'", "+", "cuda_file_base", "+", "'\"'", ")", ".", "encode", "(", "'utf-8'", ")", "\n", "for", "ln", "in", "f", ":", "\n", "                        ", "if", "not", "ln", ".", "startswith", "(", "b'# '", ")", "and", "not", "ln", ".", "startswith", "(", "b'#line '", ")", ":", "# ignore line number pragmas", "\n", "                            ", "ln", "=", "ln", ".", "replace", "(", "bad_file_str", ",", "good_file_str", ")", "\n", "md5", ".", "update", "(", "ln", ")", "\n", "", "", "md5", ".", "update", "(", "b'\\n'", ")", "\n", "\n", "# Select compiler options.", "\n", "", "", "", "compile_opts", "=", "''", "\n", "if", "os", ".", "name", "==", "'nt'", ":", "\n", "            ", "lib_path", "=", "r'C:\\Program Files\\tensorflow'", "\n", "compile_opts", "+=", "'\"%s\"'", "%", "os", ".", "path", ".", "join", "(", "lib_path", ",", "'python'", ",", "'_pywrap_tensorflow_internal.lib'", ")", "\n", "", "elif", "os", ".", "name", "==", "'posix'", ":", "\n", "            ", "lib_path", "=", "tf", ".", "sysconfig", ".", "get_lib", "(", ")", "\n", "compile_opts", "+=", "'\"%s\"'", "%", "os", ".", "path", ".", "join", "(", "lib_path", ",", "'python'", ",", "'_pywrap_tensorflow_internal.so'", ")", "\n", "compile_opts", "+=", "' --compiler-options \\'-fPIC -D_GLIBCXX_USE_CXX11_ABI=0\\''", "\n", "", "else", ":", "\n", "            ", "assert", "False", "# not Windows or Linux, w00t?", "\n", "", "compile_opts", "+=", "' --gpu-architecture=%s'", "%", "_get_cuda_gpu_arch_string", "(", ")", "\n", "compile_opts", "+=", "' --use_fast_math'", "\n", "nvcc_cmd", "=", "_prepare_nvcc_cli", "(", "compile_opts", ")", "\n", "\n", "# Hash build configuration.", "\n", "md5", ".", "update", "(", "(", "'nvcc_cmd: '", "+", "nvcc_cmd", ")", ".", "encode", "(", "'utf-8'", ")", "+", "b'\\n'", ")", "\n", "md5", ".", "update", "(", "(", "'tf.VERSION: '", "+", "tf", ".", "VERSION", ")", ".", "encode", "(", "'utf-8'", ")", "+", "b'\\n'", ")", "\n", "md5", ".", "update", "(", "(", "'cuda_cache_version_tag: '", "+", "cuda_cache_version_tag", ")", ".", "encode", "(", "'utf-8'", ")", "+", "b'\\n'", ")", "\n", "\n", "# Compile if not already compiled.", "\n", "bin_file_ext", "=", "'.dll'", "if", "os", ".", "name", "==", "'nt'", "else", "'.so'", "\n", "bin_file", "=", "os", ".", "path", ".", "join", "(", "cuda_cache_path", ",", "cuda_file_name", "+", "'_'", "+", "md5", ".", "hexdigest", "(", ")", "+", "bin_file_ext", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "bin_file", ")", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "'Compiling... '", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "                ", "tmp_file", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "cuda_file_name", "+", "'_tmp'", "+", "bin_file_ext", ")", "\n", "_run_cmd", "(", "nvcc_cmd", "+", "' \"%s\" --shared -o \"%s\" --keep --keep-dir \"%s\"'", "%", "(", "cuda_file", ",", "tmp_file", ",", "tmp_dir", ")", ")", "\n", "os", ".", "makedirs", "(", "cuda_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "intermediate_file", "=", "os", ".", "path", ".", "join", "(", "cuda_cache_path", ",", "cuda_file_name", "+", "'_'", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "+", "'_tmp'", "+", "bin_file_ext", ")", "\n", "shutil", ".", "copyfile", "(", "tmp_file", ",", "intermediate_file", ")", "\n", "os", ".", "rename", "(", "intermediate_file", ",", "bin_file", ")", "# atomic", "\n", "\n", "# Load.", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "'Loading... '", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "plugin", "=", "tf", ".", "load_op_library", "(", "bin_file", ")", "\n", "\n", "# Add to cache.", "\n", "_plugin_cache", "[", "cuda_file", "]", "=", "plugin", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'Done.'", ",", "flush", "=", "True", ")", "\n", "", "return", "plugin", "\n", "\n", "", "except", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'Failed!'", ",", "flush", "=", "True", ")", "\n", "", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.__init__": [[40, 83], ["optimizer.Optimizer.name.replace", "tensorflow.get_default_graph().unique_name", "util.get_obj_by_name", "dict", "collections.OrderedDict", "collections.OrderedDict", "callable", "isinstance", "tensorflow.get_default_graph"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.get_obj_by_name"], ["def", "__init__", "(", "self", ",", "\n", "name", ":", "str", "=", "\"Train\"", ",", "# Name string that will appear in TensorFlow graph.", "\n", "tf_optimizer", ":", "str", "=", "\"tf.train.AdamOptimizer\"", ",", "# Underlying optimizer class.", "\n", "learning_rate", ":", "TfExpressionEx", "=", "0.001", ",", "# Learning rate. Can vary over time.", "\n", "minibatch_multiplier", ":", "TfExpressionEx", "=", "None", ",", "# Treat N consecutive minibatches as one by accumulating gradients.", "\n", "share", ":", "\"Optimizer\"", "=", "None", ",", "# Share internal state with a previously created optimizer?", "\n", "use_loss_scaling", ":", "bool", "=", "False", ",", "# Enable dynamic loss scaling for robust mixed-precision training?", "\n", "loss_scaling_init", ":", "float", "=", "64.0", ",", "# Log2 of initial loss scaling factor.", "\n", "loss_scaling_inc", ":", "float", "=", "0.0005", ",", "# Log2 of per-minibatch loss scaling increment when there is no overflow.", "\n", "loss_scaling_dec", ":", "float", "=", "1.0", ",", "# Log2 of per-minibatch loss scaling decrement when there is an overflow.", "\n", "report_mem_usage", ":", "bool", "=", "False", ",", "# Report fine-grained memory usage statistics in TensorBoard?", "\n", "**", "kwargs", ")", ":", "\n", "\n", "# Public fields.", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "minibatch_multiplier", "=", "minibatch_multiplier", "\n", "self", ".", "id", "=", "self", ".", "name", ".", "replace", "(", "\"/\"", ",", "\".\"", ")", "\n", "self", ".", "scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "self", ".", "id", ")", "\n", "self", ".", "optimizer_class", "=", "util", ".", "get_obj_by_name", "(", "tf_optimizer", ")", "\n", "self", ".", "optimizer_kwargs", "=", "dict", "(", "kwargs", ")", "\n", "self", ".", "use_loss_scaling", "=", "use_loss_scaling", "\n", "self", ".", "loss_scaling_init", "=", "loss_scaling_init", "\n", "self", ".", "loss_scaling_inc", "=", "loss_scaling_inc", "\n", "self", ".", "loss_scaling_dec", "=", "loss_scaling_dec", "\n", "\n", "# Private fields.", "\n", "self", ".", "_updates_applied", "=", "False", "\n", "self", ".", "_devices", "=", "OrderedDict", "(", ")", "# device_name => EasyDict()", "\n", "self", ".", "_shared_optimizers", "=", "OrderedDict", "(", ")", "# device_name => optimizer_class", "\n", "self", ".", "_gradient_shapes", "=", "None", "# [shape, ...]", "\n", "self", ".", "_report_mem_usage", "=", "report_mem_usage", "\n", "\n", "# Validate arguments.", "\n", "assert", "callable", "(", "self", ".", "optimizer_class", ")", "\n", "\n", "# Share internal state if requested.", "\n", "if", "share", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "share", ",", "Optimizer", ")", "\n", "assert", "self", ".", "optimizer_class", "is", "share", ".", "optimizer_class", "\n", "assert", "self", ".", "learning_rate", "is", "share", ".", "learning_rate", "\n", "assert", "self", ".", "optimizer_kwargs", "==", "share", ".", "optimizer_kwargs", "\n", "self", ".", "_shared_optimizers", "=", "share", ".", "_shared_optimizers", "# pylint: disable=protected-access", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer._get_device": [[84, 113], ["tfutil.assert_tf_initialized", "util.EasyDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "tfutil.absolute_name_scope", "tensorflow.device", "tensorflow.control_dependencies", "optimizer.Optimizer.optimizer_class", "tensorflow.Variable", "optimizer.Optimizer.scope.replace", "numpy.float32", "len"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope"], ["", "", "def", "_get_device", "(", "self", ",", "device_name", ":", "str", ")", ":", "\n", "        ", "\"\"\"Get internal state for the given TensorFlow device.\"\"\"", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "if", "device_name", "in", "self", ".", "_devices", ":", "\n", "            ", "return", "self", ".", "_devices", "[", "device_name", "]", "\n", "\n", "# Initialize fields.", "\n", "", "device", "=", "util", ".", "EasyDict", "(", ")", "\n", "device", ".", "name", "=", "device_name", "\n", "device", ".", "optimizer", "=", "None", "# Underlying optimizer:     optimizer_class", "\n", "device", ".", "loss_scaling_var", "=", "None", "# Log2 of loss scaling:     tf.Variable", "\n", "device", ".", "grad_raw", "=", "OrderedDict", "(", ")", "# Raw gradients:            var => [grad, ...]", "\n", "device", ".", "grad_clean", "=", "OrderedDict", "(", ")", "# Clean gradients:          var => grad", "\n", "device", ".", "grad_acc_vars", "=", "OrderedDict", "(", ")", "# Accumulation sums:        var => tf.Variable", "\n", "device", ".", "grad_acc_count", "=", "None", "# Accumulation counter:     tf.Variable", "\n", "device", ".", "grad_acc", "=", "OrderedDict", "(", ")", "# Accumulated gradients:    var => grad", "\n", "\n", "# Setup TensorFlow objects.", "\n", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", "+", "\"/Devices\"", ")", ",", "tf", ".", "device", "(", "device_name", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "            ", "if", "device_name", "not", "in", "self", ".", "_shared_optimizers", ":", "\n", "                ", "optimizer_name", "=", "self", ".", "scope", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "+", "\"_opt%d\"", "%", "len", "(", "self", ".", "_shared_optimizers", ")", "\n", "self", ".", "_shared_optimizers", "[", "device_name", "]", "=", "self", ".", "optimizer_class", "(", "name", "=", "optimizer_name", ",", "learning_rate", "=", "self", ".", "learning_rate", ",", "**", "self", ".", "optimizer_kwargs", ")", "\n", "", "device", ".", "optimizer", "=", "self", ".", "_shared_optimizers", "[", "device_name", "]", "\n", "if", "self", ".", "use_loss_scaling", ":", "\n", "                ", "device", ".", "loss_scaling_var", "=", "tf", ".", "Variable", "(", "np", ".", "float32", "(", "self", ".", "loss_scaling_init", ")", ",", "trainable", "=", "False", ",", "name", "=", "\"loss_scaling_var\"", ")", "\n", "\n", "# Register device.", "\n", "", "", "self", ".", "_devices", "[", "device_name", "]", "=", "device", "\n", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.register_gradients": [[114, 155], ["tfutil.assert_tf_initialized", "optimizer.Optimizer._get_device", "isinstance", "all", "all", "list", "isinstance", "len", "len", "tensorflow.name_scope", "tensorflow.device", "tensorflow.control_dependencies", "optimizer.Optimizer.apply_loss_scaling", "optimizer.Optimizer.optimizer.compute_gradients", "optimizer.Optimizer.grad_raw[].append", "list.values", "len", "tfutil.is_tf_expression", "var.shape.as_list", "tensorflow.cast", "var.shape.as_list", "zip", "tensorflow.name_scope", "tensorflow.device", "tensorflow.control_dependencies", "deps.append", "autosummary.autosummary", "tensorflow.contrib.memory_stats.BytesInUse"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer._get_device", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.apply_loss_scaling", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.SimpleAdam.compute_gradients", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary"], ["", "def", "register_gradients", "(", "self", ",", "loss", ":", "TfExpression", ",", "trainable_vars", ":", "Union", "[", "List", ",", "dict", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Register the gradients of the given loss function with respect to the given variables.\n        Intended to be called once per GPU.\"\"\"", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "assert", "not", "self", ".", "_updates_applied", "\n", "device", "=", "self", ".", "_get_device", "(", "loss", ".", "device", ")", "\n", "\n", "# Validate trainables.", "\n", "if", "isinstance", "(", "trainable_vars", ",", "dict", ")", ":", "\n", "            ", "trainable_vars", "=", "list", "(", "trainable_vars", ".", "values", "(", ")", ")", "# allow passing in Network.trainables as vars", "\n", "", "assert", "isinstance", "(", "trainable_vars", ",", "list", ")", "and", "len", "(", "trainable_vars", ")", ">=", "1", "\n", "assert", "all", "(", "tfutil", ".", "is_tf_expression", "(", "expr", ")", "for", "expr", "in", "trainable_vars", "+", "[", "loss", "]", ")", "\n", "# assert all(var.device == device.name for var in trainable_vars)", "\n", "\n", "# Validate shapes.", "\n", "if", "self", ".", "_gradient_shapes", "is", "None", ":", "\n", "            ", "self", ".", "_gradient_shapes", "=", "[", "var", ".", "shape", ".", "as_list", "(", ")", "for", "var", "in", "trainable_vars", "]", "\n", "", "assert", "len", "(", "trainable_vars", ")", "==", "len", "(", "self", ".", "_gradient_shapes", ")", "\n", "assert", "all", "(", "var", ".", "shape", ".", "as_list", "(", ")", "==", "var_shape", "for", "var", ",", "var_shape", "in", "zip", "(", "trainable_vars", ",", "self", ".", "_gradient_shapes", ")", ")", "\n", "\n", "# Report memory usage if requested.", "\n", "deps", "=", "[", "]", "\n", "if", "self", ".", "_report_mem_usage", ":", "\n", "            ", "self", ".", "_report_mem_usage", "=", "False", "\n", "try", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "self", ".", "id", "+", "'_mem'", ")", ",", "tf", ".", "device", "(", "device", ".", "name", ")", ",", "tf", ".", "control_dependencies", "(", "[", "loss", "]", ")", ":", "\n", "                    ", "deps", ".", "append", "(", "autosummary", ".", "autosummary", "(", "self", ".", "id", "+", "\"/mem_usage_gb\"", ",", "tf", ".", "contrib", ".", "memory_stats", ".", "BytesInUse", "(", ")", "/", "2", "**", "30", ")", ")", "\n", "", "", "except", "tf", ".", "errors", ".", "NotFoundError", ":", "\n", "                ", "pass", "\n", "\n", "# Compute gradients.", "\n", "", "", "with", "tf", ".", "name_scope", "(", "self", ".", "id", "+", "\"_grad\"", ")", ",", "tf", ".", "device", "(", "device", ".", "name", ")", ",", "tf", ".", "control_dependencies", "(", "deps", ")", ":", "\n", "            ", "loss", "=", "self", ".", "apply_loss_scaling", "(", "tf", ".", "cast", "(", "loss", ",", "tf", ".", "float32", ")", ")", "\n", "gate", "=", "tf", ".", "train", ".", "Optimizer", ".", "GATE_NONE", "# disable gating to reduce memory usage", "\n", "grad_list", "=", "device", ".", "optimizer", ".", "compute_gradients", "(", "loss", "=", "loss", ",", "var_list", "=", "trainable_vars", ",", "gate_gradients", "=", "gate", ")", "\n", "\n", "# Register gradients.", "\n", "", "for", "grad", ",", "var", "in", "grad_list", ":", "\n", "            ", "if", "var", "not", "in", "device", ".", "grad_raw", ":", "\n", "                ", "device", ".", "grad_raw", "[", "var", "]", "=", "[", "]", "\n", "", "device", ".", "grad_raw", "[", "var", "]", ".", "append", "(", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.apply_updates": [[156, 265], ["tfutil.assert_tf_initialized", "enumerate", "enumerate", "optimizer.Optimizer.reset_optimizer_state", "optimizer.Optimizer._devices.values", "len", "optimizer.Optimizer._devices.values", "tfutil.init_uninitialized_vars", "tfutil.run", "tfutil.absolute_name_scope", "tensorflow.group", "len", "tfutil.absolute_name_scope", "tensorflow.no_op", "tfutil.absolute_name_scope", "tensorflow.device", "device.grad_raw.items", "tfutil.absolute_name_scope", "tensorflow.device", "zip", "tfutil.absolute_name_scope", "tensorflow.device", "tensorflow.reduce_all", "all_ops.append", "tensorflow.constant", "optimizer.Optimizer.undo_loss_scaling", "tensorflow.constant", "collections.OrderedDict", "all_ops.append", "device.grad_clean.items", "tensorflow.stack", "device.optimizer.apply_gradients", "tensorflow.cond", "all_ops.append", "all_ops.append", "all_ops.append", "tensorflow.cast", "len", "tensorflow.zeros", "len", "tensorflow.cast", "all", "nccl_ops.all_sum", "zip", "tensorflow.control_dependencies", "device.grad_clean.keys", "tensorflow.Variable", "tensorflow.assign", "tensorflow.assign", "tensorflow.cast", "tensorflow.cond", "tensorflow.assign_add", "tensorflow.assign_sub", "tensorflow.group", "tensorflow.cond", "len", "autosummary.autosummary", "autosummary.autosummary", "all_ops.append", "optimizer.Optimizer._devices.values", "optimizer.Optimizer._devices.values", "len", "tensorflow.add_n", "len", "device.grad_clean.keys", "len", "optimizer.Optimizer._devices.values", "tensorflow.Variable", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.control_dependencies", "all_ops.append", "tensorflow.cond", "tensorflow.where", "autosummary.autosummary", "list", "optimizer.Optimizer._devices.values", "zip", "tensorflow.zeros", "tensorflow.assign", "tensorflow.assign", "tensorflow.cond", "tensorflow.reduce_all", "tensorflow.cast", "device.grad_acc.items", "device.grad_acc_vars.values", "all_vars[].shape.as_list", "optimizer.Optimizer._devices.values", "tensorflow.zeros", "tensorflow.is_finite", "device.grad_acc.values"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.reset_optimizer_state", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.undo_loss_scaling", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.SimpleAdam.apply_gradients", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary"], ["", "", "def", "apply_updates", "(", "self", ",", "allow_no_op", ":", "bool", "=", "False", ")", "->", "tf", ".", "Operation", ":", "\n", "        ", "\"\"\"Construct training op to update the registered variables based on their gradients.\"\"\"", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "assert", "not", "self", ".", "_updates_applied", "\n", "self", ".", "_updates_applied", "=", "True", "\n", "all_ops", "=", "[", "]", "\n", "\n", "# Check for no-op.", "\n", "if", "allow_no_op", "and", "len", "(", "self", ".", "_devices", ")", "==", "0", ":", "\n", "            ", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", ")", ":", "\n", "                ", "return", "tf", ".", "no_op", "(", "name", "=", "'TrainingOp'", ")", "\n", "\n", "# Clean up gradients.", "\n", "", "", "for", "device_idx", ",", "device", "in", "enumerate", "(", "self", ".", "_devices", ".", "values", "(", ")", ")", ":", "\n", "            ", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", "+", "\"/Clean%d\"", "%", "device_idx", ")", ",", "tf", ".", "device", "(", "device", ".", "name", ")", ":", "\n", "                ", "for", "var", ",", "grad", "in", "device", ".", "grad_raw", ".", "items", "(", ")", ":", "\n", "\n", "# Filter out disconnected gradients and convert to float32.", "\n", "                    ", "grad", "=", "[", "g", "for", "g", "in", "grad", "if", "g", "is", "not", "None", "]", "\n", "grad", "=", "[", "tf", ".", "cast", "(", "g", ",", "tf", ".", "float32", ")", "for", "g", "in", "grad", "]", "\n", "\n", "# Sum within the device.", "\n", "if", "len", "(", "grad", ")", "==", "0", ":", "\n", "                        ", "grad", "=", "tf", ".", "zeros", "(", "var", ".", "shape", ")", "# No gradients => zero.", "\n", "", "elif", "len", "(", "grad", ")", "==", "1", ":", "\n", "                        ", "grad", "=", "grad", "[", "0", "]", "# Single gradient => use as is.", "\n", "", "else", ":", "\n", "                        ", "grad", "=", "tf", ".", "add_n", "(", "grad", ")", "# Multiple gradients => sum.", "\n", "\n", "# Scale as needed.", "\n", "", "scale", "=", "1.0", "/", "len", "(", "device", ".", "grad_raw", "[", "var", "]", ")", "/", "len", "(", "self", ".", "_devices", ")", "\n", "scale", "=", "tf", ".", "constant", "(", "scale", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"scale\"", ")", "\n", "if", "self", ".", "minibatch_multiplier", "is", "not", "None", ":", "\n", "                        ", "scale", "/=", "tf", ".", "cast", "(", "self", ".", "minibatch_multiplier", ",", "tf", ".", "float32", ")", "\n", "", "scale", "=", "self", ".", "undo_loss_scaling", "(", "scale", ")", "\n", "device", ".", "grad_clean", "[", "var", "]", "=", "grad", "*", "scale", "\n", "\n", "# Sum gradients across devices.", "\n", "", "", "", "if", "len", "(", "self", ".", "_devices", ")", ">", "1", ":", "\n", "            ", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", "+", "\"/Broadcast\"", ")", ",", "tf", ".", "device", "(", "None", ")", ":", "\n", "                ", "for", "all_vars", "in", "zip", "(", "*", "[", "device", ".", "grad_clean", ".", "keys", "(", ")", "for", "device", "in", "self", ".", "_devices", ".", "values", "(", ")", "]", ")", ":", "\n", "                    ", "if", "len", "(", "all_vars", ")", ">", "0", "and", "all", "(", "dim", ">", "0", "for", "dim", "in", "all_vars", "[", "0", "]", ".", "shape", ".", "as_list", "(", ")", ")", ":", "# NCCL does not support zero-sized tensors.", "\n", "                        ", "all_grads", "=", "[", "device", ".", "grad_clean", "[", "var", "]", "for", "device", ",", "var", "in", "zip", "(", "self", ".", "_devices", ".", "values", "(", ")", ",", "all_vars", ")", "]", "\n", "all_grads", "=", "nccl_ops", ".", "all_sum", "(", "all_grads", ")", "\n", "for", "device", ",", "var", ",", "grad", "in", "zip", "(", "self", ".", "_devices", ".", "values", "(", ")", ",", "all_vars", ",", "all_grads", ")", ":", "\n", "                            ", "device", ".", "grad_clean", "[", "var", "]", "=", "grad", "\n", "\n", "# Apply updates separately on each device.", "\n", "", "", "", "", "", "for", "device_idx", ",", "device", "in", "enumerate", "(", "self", ".", "_devices", ".", "values", "(", ")", ")", ":", "\n", "            ", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", "+", "\"/Apply%d\"", "%", "device_idx", ")", ",", "tf", ".", "device", "(", "device", ".", "name", ")", ":", "\n", "# pylint: disable=cell-var-from-loop", "\n", "\n", "# Accumulate gradients over time.", "\n", "                ", "if", "self", ".", "minibatch_multiplier", "is", "None", ":", "\n", "                    ", "acc_ok", "=", "tf", ".", "constant", "(", "True", ",", "name", "=", "'acc_ok'", ")", "\n", "device", ".", "grad_acc", "=", "OrderedDict", "(", "device", ".", "grad_clean", ")", "\n", "", "else", ":", "\n", "# Create variables.", "\n", "                    ", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                        ", "for", "var", "in", "device", ".", "grad_clean", ".", "keys", "(", ")", ":", "\n", "                            ", "device", ".", "grad_acc_vars", "[", "var", "]", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "var", ".", "shape", ")", ",", "trainable", "=", "False", ",", "name", "=", "\"grad_acc_var\"", ")", "\n", "", "device", ".", "grad_acc_count", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "]", ")", ",", "trainable", "=", "False", ",", "name", "=", "\"grad_acc_count\"", ")", "\n", "\n", "# Track counter.", "\n", "", "count_cur", "=", "device", ".", "grad_acc_count", "+", "1.0", "\n", "count_inc_op", "=", "lambda", ":", "tf", ".", "assign", "(", "device", ".", "grad_acc_count", ",", "count_cur", ")", "\n", "count_reset_op", "=", "lambda", ":", "tf", ".", "assign", "(", "device", ".", "grad_acc_count", ",", "tf", ".", "zeros", "(", "[", "]", ")", ")", "\n", "acc_ok", "=", "(", "count_cur", ">=", "tf", ".", "cast", "(", "self", ".", "minibatch_multiplier", ",", "tf", ".", "float32", ")", ")", "\n", "all_ops", ".", "append", "(", "tf", ".", "cond", "(", "acc_ok", ",", "count_reset_op", ",", "count_inc_op", ")", ")", "\n", "\n", "# Track gradients.", "\n", "for", "var", ",", "grad", "in", "device", ".", "grad_clean", ".", "items", "(", ")", ":", "\n", "                        ", "acc_var", "=", "device", ".", "grad_acc_vars", "[", "var", "]", "\n", "acc_cur", "=", "acc_var", "+", "grad", "\n", "device", ".", "grad_acc", "[", "var", "]", "=", "acc_cur", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "acc_cur", "]", ")", ":", "\n", "                            ", "acc_inc_op", "=", "lambda", ":", "tf", ".", "assign", "(", "acc_var", ",", "acc_cur", ")", "\n", "acc_reset_op", "=", "lambda", ":", "tf", ".", "assign", "(", "acc_var", ",", "tf", ".", "zeros", "(", "var", ".", "shape", ")", ")", "\n", "all_ops", ".", "append", "(", "tf", ".", "cond", "(", "acc_ok", ",", "acc_reset_op", ",", "acc_inc_op", ")", ")", "\n", "\n", "# No overflow => apply gradients.", "\n", "", "", "", "all_ok", "=", "tf", ".", "reduce_all", "(", "tf", ".", "stack", "(", "[", "acc_ok", "]", "+", "[", "tf", ".", "reduce_all", "(", "tf", ".", "is_finite", "(", "g", ")", ")", "for", "g", "in", "device", ".", "grad_acc", ".", "values", "(", ")", "]", ")", ")", "\n", "apply_op", "=", "lambda", ":", "device", ".", "optimizer", ".", "apply_gradients", "(", "[", "(", "tf", ".", "cast", "(", "grad", ",", "var", ".", "dtype", ")", ",", "var", ")", "for", "var", ",", "grad", "in", "device", ".", "grad_acc", ".", "items", "(", ")", "]", ")", "\n", "all_ops", ".", "append", "(", "tf", ".", "cond", "(", "all_ok", ",", "apply_op", ",", "tf", ".", "no_op", ")", ")", "\n", "\n", "# Adjust loss scaling.", "\n", "if", "self", ".", "use_loss_scaling", ":", "\n", "                    ", "ls_inc_op", "=", "lambda", ":", "tf", ".", "assign_add", "(", "device", ".", "loss_scaling_var", ",", "self", ".", "loss_scaling_inc", ")", "\n", "ls_dec_op", "=", "lambda", ":", "tf", ".", "assign_sub", "(", "device", ".", "loss_scaling_var", ",", "self", ".", "loss_scaling_dec", ")", "\n", "ls_update_op", "=", "lambda", ":", "tf", ".", "group", "(", "tf", ".", "cond", "(", "all_ok", ",", "ls_inc_op", ",", "ls_dec_op", ")", ")", "\n", "all_ops", ".", "append", "(", "tf", ".", "cond", "(", "acc_ok", ",", "ls_update_op", ",", "tf", ".", "no_op", ")", ")", "\n", "\n", "# Last device => report statistics.", "\n", "", "if", "device_idx", "==", "len", "(", "self", ".", "_devices", ")", "-", "1", ":", "\n", "                    ", "all_ops", ".", "append", "(", "autosummary", ".", "autosummary", "(", "self", ".", "id", "+", "\"/learning_rate\"", ",", "self", ".", "learning_rate", ")", ")", "\n", "all_ops", ".", "append", "(", "autosummary", ".", "autosummary", "(", "self", ".", "id", "+", "\"/overflow_frequency\"", ",", "tf", ".", "where", "(", "all_ok", ",", "0", ",", "1", ")", ",", "condition", "=", "acc_ok", ")", ")", "\n", "if", "self", ".", "use_loss_scaling", ":", "\n", "                        ", "all_ops", ".", "append", "(", "autosummary", ".", "autosummary", "(", "self", ".", "id", "+", "\"/loss_scaling_log2\"", ",", "device", ".", "loss_scaling_var", ")", ")", "\n", "\n", "# Initialize variables.", "\n", "", "", "", "", "self", ".", "reset_optimizer_state", "(", ")", "\n", "if", "self", ".", "use_loss_scaling", ":", "\n", "            ", "tfutil", ".", "init_uninitialized_vars", "(", "[", "device", ".", "loss_scaling_var", "for", "device", "in", "self", ".", "_devices", ".", "values", "(", ")", "]", ")", "\n", "", "if", "self", ".", "minibatch_multiplier", "is", "not", "None", ":", "\n", "            ", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "device", "in", "self", ".", "_devices", ".", "values", "(", ")", "for", "var", "in", "list", "(", "device", ".", "grad_acc_vars", ".", "values", "(", ")", ")", "+", "[", "device", ".", "grad_acc_count", "]", "]", ")", "\n", "\n", "# Group everything into a single op.", "\n", "", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", ")", ":", "\n", "            ", "return", "tf", ".", "group", "(", "*", "all_ops", ",", "name", "=", "\"TrainingOp\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.reset_optimizer_state": [[266, 270], ["tfutil.assert_tf_initialized", "tfutil.run", "optimizer.Optimizer._devices.values", "device.optimizer.variables"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.SimpleAdam.variables"], ["", "", "def", "reset_optimizer_state", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Reset internal state of the underlying optimizer.\"\"\"", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "device", "in", "self", ".", "_devices", ".", "values", "(", ")", "for", "var", "in", "device", ".", "optimizer", ".", "variables", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.get_loss_scaling_var": [[271, 274], ["optimizer.Optimizer._get_device"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer._get_device"], ["", "def", "get_loss_scaling_var", "(", "self", ",", "device", ":", "str", ")", "->", "Union", "[", "tf", ".", "Variable", ",", "None", "]", ":", "\n", "        ", "\"\"\"Get or create variable representing log2 of the current dynamic loss scaling factor.\"\"\"", "\n", "return", "self", ".", "_get_device", "(", "device", ")", ".", "loss_scaling_var", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.apply_loss_scaling": [[275, 281], ["tfutil.is_tf_expression", "tfutil.exp2", "optimizer.Optimizer.get_loss_scaling_var"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.exp2", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.get_loss_scaling_var"], ["", "def", "apply_loss_scaling", "(", "self", ",", "value", ":", "TfExpression", ")", "->", "TfExpression", ":", "\n", "        ", "\"\"\"Apply dynamic loss scaling for the given expression.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "value", ")", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "            ", "return", "value", "\n", "", "return", "value", "*", "tfutil", ".", "exp2", "(", "self", ".", "get_loss_scaling_var", "(", "value", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.undo_loss_scaling": [[282, 288], ["tfutil.is_tf_expression", "tfutil.exp2", "optimizer.Optimizer.get_loss_scaling_var"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.exp2", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.get_loss_scaling_var"], ["", "def", "undo_loss_scaling", "(", "self", ",", "value", ":", "TfExpression", ")", "->", "TfExpression", ":", "\n", "        ", "\"\"\"Undo the effect of dynamic loss scaling for the given expression.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "value", ")", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "            ", "return", "value", "\n", "", "return", "value", "*", "tfutil", ".", "exp2", "(", "-", "self", ".", "get_loss_scaling_var", "(", "value", ".", "device", ")", ")", "# pylint: disable=invalid-unary-operand-type", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.SimpleAdam.__init__": [[293, 300], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "\"Adam\"", ",", "learning_rate", "=", "0.001", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "beta1", "=", "beta1", "\n", "self", ".", "beta2", "=", "beta2", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "all_state_vars", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.SimpleAdam.variables": [[301, 303], ["None"], "methods", ["None"], ["", "def", "variables", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "all_state_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.SimpleAdam.compute_gradients": [[304, 307], ["list", "zip", "tensorflow.gradients"], "methods", ["None"], ["", "def", "compute_gradients", "(", "self", ",", "loss", ",", "var_list", ",", "gate_gradients", "=", "tf", ".", "train", ".", "Optimizer", ".", "GATE_NONE", ")", ":", "\n", "        ", "assert", "gate_gradients", "==", "tf", ".", "train", ".", "Optimizer", ".", "GATE_NONE", "\n", "return", "list", "(", "zip", "(", "tf", ".", "gradients", "(", "loss", ",", "var_list", ")", ",", "var_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.SimpleAdam.apply_gradients": [[308, 337], ["tensorflow.name_scope", "tensorflow.group", "tensorflow.control_dependencies", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.assign", "tensorflow.assign", "tensorflow.sqrt", "tensorflow.control_dependencies", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign_sub", "tensorflow.square", "tensorflow.sqrt", "tensorflow.zeros_like", "tensorflow.zeros_like"], "methods", ["None"], ["", "def", "apply_gradients", "(", "self", ",", "grads_and_vars", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "state_vars", "=", "[", "]", "\n", "update_ops", "=", "[", "]", "\n", "\n", "# Adjust learning rate to deal with startup bias.", "\n", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                ", "b1pow_var", "=", "tf", ".", "Variable", "(", "dtype", "=", "tf", ".", "float32", ",", "initial_value", "=", "1", ",", "trainable", "=", "False", ")", "\n", "b2pow_var", "=", "tf", ".", "Variable", "(", "dtype", "=", "tf", ".", "float32", ",", "initial_value", "=", "1", ",", "trainable", "=", "False", ")", "\n", "state_vars", "+=", "[", "b1pow_var", ",", "b2pow_var", "]", "\n", "", "b1pow_new", "=", "b1pow_var", "*", "self", ".", "beta1", "\n", "b2pow_new", "=", "b2pow_var", "*", "self", ".", "beta2", "\n", "update_ops", "+=", "[", "tf", ".", "assign", "(", "b1pow_var", ",", "b1pow_new", ")", ",", "tf", ".", "assign", "(", "b2pow_var", ",", "b2pow_new", ")", "]", "\n", "lr_new", "=", "self", ".", "learning_rate", "*", "tf", ".", "sqrt", "(", "1", "-", "b2pow_new", ")", "/", "(", "1", "-", "b1pow_new", ")", "\n", "\n", "# Construct ops to update each variable.", "\n", "for", "grad", ",", "var", "in", "grads_and_vars", ":", "\n", "                ", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                    ", "m_var", "=", "tf", ".", "Variable", "(", "dtype", "=", "tf", ".", "float32", ",", "initial_value", "=", "tf", ".", "zeros_like", "(", "var", ")", ",", "trainable", "=", "False", ")", "\n", "v_var", "=", "tf", ".", "Variable", "(", "dtype", "=", "tf", ".", "float32", ",", "initial_value", "=", "tf", ".", "zeros_like", "(", "var", ")", ",", "trainable", "=", "False", ")", "\n", "state_vars", "+=", "[", "m_var", ",", "v_var", "]", "\n", "", "m_new", "=", "self", ".", "beta1", "*", "m_var", "+", "(", "1", "-", "self", ".", "beta1", ")", "*", "grad", "\n", "v_new", "=", "self", ".", "beta2", "*", "v_var", "+", "(", "1", "-", "self", ".", "beta2", ")", "*", "tf", ".", "square", "(", "grad", ")", "\n", "var_delta", "=", "lr_new", "*", "m_new", "/", "(", "tf", ".", "sqrt", "(", "v_new", ")", "+", "self", ".", "epsilon", ")", "\n", "update_ops", "+=", "[", "tf", ".", "assign", "(", "m_var", ",", "m_new", ")", ",", "tf", ".", "assign", "(", "v_var", ",", "v_new", ")", ",", "tf", ".", "assign_sub", "(", "var", ",", "var_delta", ")", "]", "\n", "\n", "# Group everything together.", "\n", "", "self", ".", "all_state_vars", "+=", "state_vars", "\n", "return", "tf", ".", "group", "(", "*", "update_ops", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._get_plugin": [[14, 16], ["custom_ops.get_plugin", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops.get_plugin"], ["def", "_get_plugin", "(", ")", ":", "\n", "    ", "return", "custom_ops", ".", "get_plugin", "(", "os", ".", "path", ".", "splitext", "(", "__file__", ")", "[", "0", "]", "+", "'.cu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d.upfirdn_2d": [[19, 63], ["None"], "function", ["None"], ["", "def", "upfirdn_2d", "(", "x", ",", "k", ",", "upx", "=", "1", ",", "upy", "=", "1", ",", "downx", "=", "1", ",", "downy", "=", "1", ",", "padx0", "=", "0", ",", "padx1", "=", "0", ",", "pady0", "=", "0", ",", "pady1", "=", "0", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Pad, upsample, FIR filter, and downsample a batch of 2D images.\n\n    Accepts a batch of 2D images of the shape `[majorDim, inH, inW, minorDim]`\n    and performs the following operations for each image, batched across\n    `majorDim` and `minorDim`:\n\n    1. Pad the image with zeros by the specified number of pixels on each side\n       (`padx0`, `padx1`, `pady0`, `pady1`). Specifying a negative value\n       corresponds to cropping the image.\n\n    2. Upsample the image by inserting the zeros after each pixel (`upx`, `upy`).\n\n    3. Convolve the image with the specified 2D FIR filter (`k`), shrinking the\n       image so that the footprint of all output pixels lies within the input image.\n\n    4. Downsample the image by throwing away pixels (`downx`, `downy`).\n\n    This sequence of operations bears close resemblance to scipy.signal.upfirdn().\n    The fused op is considerably more efficient than performing the same calculation\n    using standard TensorFlow ops. It supports gradients of arbitrary order.\n\n    Args:\n        x:      Input tensor of the shape `[majorDim, inH, inW, minorDim]`.\n        k:      2D FIR filter of the shape `[firH, firW]`.\n        upx:    Integer upsampling factor along the X-axis (default: 1).\n        upy:    Integer upsampling factor along the Y-axis (default: 1).\n        downx:  Integer downsampling factor along the X-axis (default: 1).\n        downy:  Integer downsampling factor along the Y-axis (default: 1).\n        padx0:  Number of pixels to pad on the left side (default: 0).\n        padx1:  Number of pixels to pad on the right side (default: 0).\n        pady0:  Number of pixels to pad on the top side (default: 0).\n        pady1:  Number of pixels to pad on the bottom side (default: 0).\n        impl:   Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the shape `[majorDim, outH, outW, minorDim]`, and same datatype as `x`.\n    \"\"\"", "\n", "\n", "impl_dict", "=", "{", "\n", "'ref'", ":", "_upfirdn_2d_ref", ",", "\n", "'cuda'", ":", "_upfirdn_2d_cuda", ",", "\n", "}", "\n", "return", "impl_dict", "[", "impl", "]", "(", "x", "=", "x", ",", "k", "=", "k", ",", "upx", "=", "upx", ",", "upy", "=", "upy", ",", "downx", "=", "downx", ",", "downy", "=", "downy", ",", "padx0", "=", "padx0", ",", "padx1", "=", "padx1", ",", "pady0", "=", "pady0", ",", "pady1", "=", "pady1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._upfirdn_2d_ref": [[66, 104], ["tensorflow.convert_to_tensor", "numpy.asarray", "upfirdn_2d._shape", "tensorflow.reshape", "tensorflow.pad", "tensorflow.reshape", "tensorflow.pad", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.constant", "tensorflow.transpose", "tensorflow.nn.conv2d", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.transpose", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "max", "max", "max", "max", "max", "max", "max", "max"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d"], ["", "def", "_upfirdn_2d_ref", "(", "x", ",", "k", ",", "upx", ",", "upy", ",", "downx", ",", "downy", ",", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", ")", ":", "\n", "    ", "\"\"\"Slow reference implementation of `upfirdn_2d()` using standard TensorFlow ops.\"\"\"", "\n", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "k", "=", "np", ".", "asarray", "(", "k", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "assert", "x", ".", "shape", ".", "rank", "==", "4", "\n", "inH", "=", "x", ".", "shape", "[", "1", "]", ".", "value", "\n", "inW", "=", "x", ".", "shape", "[", "2", "]", ".", "value", "\n", "minorDim", "=", "_shape", "(", "x", ",", "3", ")", "\n", "kernelH", ",", "kernelW", "=", "k", ".", "shape", "\n", "assert", "inW", ">=", "1", "and", "inH", ">=", "1", "\n", "assert", "kernelW", ">=", "1", "and", "kernelH", ">=", "1", "\n", "assert", "isinstance", "(", "upx", ",", "int", ")", "and", "isinstance", "(", "upy", ",", "int", ")", "\n", "assert", "isinstance", "(", "downx", ",", "int", ")", "and", "isinstance", "(", "downy", ",", "int", ")", "\n", "assert", "isinstance", "(", "padx0", ",", "int", ")", "and", "isinstance", "(", "padx1", ",", "int", ")", "\n", "assert", "isinstance", "(", "pady0", ",", "int", ")", "and", "isinstance", "(", "pady1", ",", "int", ")", "\n", "\n", "# Upsample (insert zeros).", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "inH", ",", "1", ",", "inW", ",", "1", ",", "minorDim", "]", ")", "\n", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "upy", "-", "1", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "upx", "-", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "inH", "*", "upy", ",", "inW", "*", "upx", ",", "minorDim", "]", ")", "\n", "\n", "# Pad (crop if negative).", "\n", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "max", "(", "pady0", ",", "0", ")", ",", "max", "(", "pady1", ",", "0", ")", "]", ",", "[", "max", "(", "padx0", ",", "0", ")", ",", "max", "(", "padx1", ",", "0", ")", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "x", "=", "x", "[", ":", ",", "max", "(", "-", "pady0", ",", "0", ")", ":", "x", ".", "shape", "[", "1", "]", ".", "value", "-", "max", "(", "-", "pady1", ",", "0", ")", ",", "max", "(", "-", "padx0", ",", "0", ")", ":", "x", ".", "shape", "[", "2", "]", ".", "value", "-", "max", "(", "-", "padx1", ",", "0", ")", ",", ":", "]", "\n", "\n", "# Convolve with filter.", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "1", ",", "inH", "*", "upy", "+", "pady0", "+", "pady1", ",", "inW", "*", "upx", "+", "padx0", "+", "padx1", "]", ")", "\n", "w", "=", "tf", ".", "constant", "(", "k", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "x", "=", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "'NHWC'", ")", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "minorDim", ",", "inH", "*", "upy", "+", "pady0", "+", "pady1", "-", "kernelH", "+", "1", ",", "inW", "*", "upx", "+", "padx0", "+", "padx1", "-", "kernelW", "+", "1", "]", ")", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "# Downsample (throw away pixels).", "\n", "return", "x", "[", ":", ",", ":", ":", "downy", ",", ":", ":", "downx", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._upfirdn_2d_cuda": [[107, 143], ["tensorflow.convert_to_tensor", "numpy.asarray", "tf.convert_to_tensor.shape.as_list", "tensorflow.constant", "tensorflow.constant", "upfirdn_2d._upfirdn_2d_cuda.func"], "function", ["None"], ["", "def", "_upfirdn_2d_cuda", "(", "x", ",", "k", ",", "upx", ",", "upy", ",", "downx", ",", "downy", ",", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `upfirdn_2d()` using custom ops.\"\"\"", "\n", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "k", "=", "np", ".", "asarray", "(", "k", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "majorDim", ",", "inH", ",", "inW", ",", "minorDim", "=", "x", ".", "shape", ".", "as_list", "(", ")", "\n", "kernelH", ",", "kernelW", "=", "k", ".", "shape", "\n", "assert", "inW", ">=", "1", "and", "inH", ">=", "1", "\n", "assert", "kernelW", ">=", "1", "and", "kernelH", ">=", "1", "\n", "assert", "isinstance", "(", "upx", ",", "int", ")", "and", "isinstance", "(", "upy", ",", "int", ")", "\n", "assert", "isinstance", "(", "downx", ",", "int", ")", "and", "isinstance", "(", "downy", ",", "int", ")", "\n", "assert", "isinstance", "(", "padx0", ",", "int", ")", "and", "isinstance", "(", "padx1", ",", "int", ")", "\n", "assert", "isinstance", "(", "pady0", ",", "int", ")", "and", "isinstance", "(", "pady1", ",", "int", ")", "\n", "\n", "outW", "=", "(", "inW", "*", "upx", "+", "padx0", "+", "padx1", "-", "kernelW", ")", "//", "downx", "+", "1", "\n", "outH", "=", "(", "inH", "*", "upy", "+", "pady0", "+", "pady1", "-", "kernelH", ")", "//", "downy", "+", "1", "\n", "assert", "outW", ">=", "1", "and", "outH", ">=", "1", "\n", "\n", "kc", "=", "tf", ".", "constant", "(", "k", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "gkc", "=", "tf", ".", "constant", "(", "k", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "gpadx0", "=", "kernelW", "-", "padx0", "-", "1", "\n", "gpady0", "=", "kernelH", "-", "pady0", "-", "1", "\n", "gpadx1", "=", "inW", "*", "upx", "-", "outW", "*", "downx", "+", "padx0", "-", "upx", "+", "1", "\n", "gpady1", "=", "inH", "*", "upy", "-", "outH", "*", "downy", "+", "pady0", "-", "upy", "+", "1", "\n", "\n", "@", "tf", ".", "custom_gradient", "\n", "def", "func", "(", "x", ")", ":", "\n", "        ", "y", "=", "_get_plugin", "(", ")", ".", "up_fir_dn2d", "(", "x", "=", "x", ",", "k", "=", "kc", ",", "upx", "=", "upx", ",", "upy", "=", "upy", ",", "downx", "=", "downx", ",", "downy", "=", "downy", ",", "padx0", "=", "padx0", ",", "padx1", "=", "padx1", ",", "pady0", "=", "pady0", ",", "pady1", "=", "pady1", ")", "\n", "y", ".", "set_shape", "(", "[", "majorDim", ",", "outH", ",", "outW", ",", "minorDim", "]", ")", "\n", "@", "tf", ".", "custom_gradient", "\n", "def", "grad", "(", "dy", ")", ":", "\n", "            ", "dx", "=", "_get_plugin", "(", ")", ".", "up_fir_dn2d", "(", "x", "=", "dy", ",", "k", "=", "gkc", ",", "upx", "=", "downx", ",", "upy", "=", "downy", ",", "downx", "=", "upx", ",", "downy", "=", "upy", ",", "padx0", "=", "gpadx0", ",", "padx1", "=", "gpadx1", ",", "pady0", "=", "gpady0", ",", "pady1", "=", "gpady1", ")", "\n", "dx", ".", "set_shape", "(", "[", "majorDim", ",", "inH", ",", "inW", ",", "minorDim", "]", ")", "\n", "return", "dx", ",", "func", "\n", "", "return", "y", ",", "grad", "\n", "", "return", "func", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d.filter_2d": [[146, 168], ["upfirdn_2d._simple_upfirdn_2d", "upfirdn_2d._setup_kernel"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._simple_upfirdn_2d", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._setup_kernel"], ["", "def", "filter_2d", "(", "x", ",", "k", ",", "gain", "=", "1", ",", "data_format", "=", "'NCHW'", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Filter a batch of 2D images with the given FIR filter.\n\n    Accepts a batch of 2D images of the shape `[N, C, H, W]` or `[N, H, W, C]`\n    and filters each image with the given filter. The filter is normalized so that\n    if the input pixels are constant, they will be scaled by the specified `gain`.\n    Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:            Input tensor of the shape `[N, C, H, W]` or `[N, H, W, C]`.\n        k:            FIR filter of the shape `[firH, firW]` or `[firN]` (separable).\n        gain:         Scaling factor for signal magnitude (default: 1.0).\n        data_format:  `'NCHW'` or `'NHWC'` (default: `'NCHW'`).\n        impl:         Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the same shape and datatype as `x`.\n    \"\"\"", "\n", "\n", "k", "=", "_setup_kernel", "(", "k", ")", "*", "gain", "\n", "p", "=", "k", ".", "shape", "[", "0", "]", "-", "1", "\n", "return", "_simple_upfirdn_2d", "(", "x", ",", "k", ",", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", ",", "pad1", "=", "p", "//", "2", ",", "data_format", "=", "data_format", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d.upsample_2d": [[171, 201], ["upfirdn_2d._simple_upfirdn_2d", "isinstance", "upfirdn_2d._setup_kernel"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._simple_upfirdn_2d", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._setup_kernel"], ["", "def", "upsample_2d", "(", "x", ",", "k", "=", "None", ",", "factor", "=", "2", ",", "gain", "=", "1", ",", "data_format", "=", "'NCHW'", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Upsample a batch of 2D images with the given filter.\n\n    Accepts a batch of 2D images of the shape `[N, C, H, W]` or `[N, H, W, C]`\n    and upsamples each image with the given filter. The filter is normalized so that\n    if the input pixels are constant, they will be scaled by the specified `gain`.\n    Pixels outside the image are assumed to be zero, and the filter is padded with\n    zeros so that its shape is a multiple of the upsampling factor.\n\n    Args:\n        x:            Input tensor of the shape `[N, C, H, W]` or `[N, H, W, C]`.\n        k:            FIR filter of the shape `[firH, firW]` or `[firN]` (separable).\n                      The default is `[1] * factor`, which corresponds to nearest-neighbor\n                      upsampling.\n        factor:       Integer upsampling factor (default: 2).\n        gain:         Scaling factor for signal magnitude (default: 1.0).\n        data_format:  `'NCHW'` or `'NHWC'` (default: `'NCHW'`).\n        impl:         Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the shape `[N, C, H * factor, W * factor]` or\n        `[N, H * factor, W * factor, C]`, and same datatype as `x`.\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "if", "k", "is", "None", ":", "\n", "        ", "k", "=", "[", "1", "]", "*", "factor", "\n", "", "k", "=", "_setup_kernel", "(", "k", ")", "*", "(", "gain", "*", "(", "factor", "**", "2", ")", ")", "\n", "p", "=", "k", ".", "shape", "[", "0", "]", "-", "factor", "\n", "return", "_simple_upfirdn_2d", "(", "x", ",", "k", ",", "up", "=", "factor", ",", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", ",", "pad1", "=", "p", "//", "2", ",", "data_format", "=", "data_format", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d.downsample_2d": [[204, 233], ["upfirdn_2d._simple_upfirdn_2d", "isinstance", "upfirdn_2d._setup_kernel"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._simple_upfirdn_2d", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._setup_kernel"], ["", "def", "downsample_2d", "(", "x", ",", "k", "=", "None", ",", "factor", "=", "2", ",", "gain", "=", "1", ",", "data_format", "=", "'NCHW'", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Downsample a batch of 2D images with the given filter.\n\n    Accepts a batch of 2D images of the shape `[N, C, H, W]` or `[N, H, W, C]`\n    and downsamples each image with the given filter. The filter is normalized so that\n    if the input pixels are constant, they will be scaled by the specified `gain`.\n    Pixels outside the image are assumed to be zero, and the filter is padded with\n    zeros so that its shape is a multiple of the downsampling factor.\n\n    Args:\n        x:            Input tensor of the shape `[N, C, H, W]` or `[N, H, W, C]`.\n        k:            FIR filter of the shape `[firH, firW]` or `[firN]` (separable).\n                      The default is `[1] * factor`, which corresponds to average pooling.\n        factor:       Integer downsampling factor (default: 2).\n        gain:         Scaling factor for signal magnitude (default: 1.0).\n        data_format:  `'NCHW'` or `'NHWC'` (default: `'NCHW'`).\n        impl:         Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the shape `[N, C, H // factor, W // factor]` or\n        `[N, H // factor, W // factor, C]`, and same datatype as `x`.\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "if", "k", "is", "None", ":", "\n", "        ", "k", "=", "[", "1", "]", "*", "factor", "\n", "", "k", "=", "_setup_kernel", "(", "k", ")", "*", "gain", "\n", "p", "=", "k", ".", "shape", "[", "0", "]", "-", "factor", "\n", "return", "_simple_upfirdn_2d", "(", "x", ",", "k", ",", "down", "=", "factor", ",", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", ",", "pad1", "=", "p", "//", "2", ",", "data_format", "=", "data_format", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d.upsample_conv_2d": [[236, 295], ["tensorflow.convert_to_tensor", "upfirdn_2d._shape", "upfirdn_2d._shape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.nn.conv2d_transpose", "upfirdn_2d._simple_upfirdn_2d", "isinstance", "upfirdn_2d._setup_kernel", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._simple_upfirdn_2d", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._setup_kernel", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape"], ["", "def", "upsample_conv_2d", "(", "x", ",", "w", ",", "k", "=", "None", ",", "factor", "=", "2", ",", "gain", "=", "1", ",", "data_format", "=", "'NCHW'", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Fused `upsample_2d()` followed by `tf.nn.conv2d()`.\n\n    Padding is performed only once at the beginning, not between the operations.\n    The fused op is considerably more efficient than performing the same calculation\n    using standard TensorFlow ops. It supports gradients of arbitrary order.\n\n    Args:\n        x:            Input tensor of the shape `[N, C, H, W]` or `[N, H, W, C]`.\n        w:            Weight tensor of the shape `[filterH, filterW, inChannels, outChannels]`.\n                      Grouped convolution can be performed by `inChannels = x.shape[0] // numGroups`.\n        k:            FIR filter of the shape `[firH, firW]` or `[firN]` (separable).\n                      The default is `[1] * factor`, which corresponds to nearest-neighbor\n                      upsampling.\n        factor:       Integer upsampling factor (default: 2).\n        gain:         Scaling factor for signal magnitude (default: 1.0).\n        data_format:  `'NCHW'` or `'NHWC'` (default: `'NCHW'`).\n        impl:         Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the shape `[N, C, H * factor, W * factor]` or\n        `[N, H * factor, W * factor, C]`, and same datatype as `x`.\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "\n", "# Check weight shape.", "\n", "w", "=", "tf", ".", "convert_to_tensor", "(", "w", ")", "\n", "assert", "w", ".", "shape", ".", "rank", "==", "4", "\n", "convH", "=", "w", ".", "shape", "[", "0", "]", ".", "value", "\n", "convW", "=", "w", ".", "shape", "[", "1", "]", ".", "value", "\n", "inC", "=", "_shape", "(", "w", ",", "2", ")", "\n", "outC", "=", "_shape", "(", "w", ",", "3", ")", "\n", "assert", "convW", "==", "convH", "\n", "\n", "# Setup filter kernel.", "\n", "if", "k", "is", "None", ":", "\n", "        ", "k", "=", "[", "1", "]", "*", "factor", "\n", "", "k", "=", "_setup_kernel", "(", "k", ")", "*", "(", "gain", "*", "(", "factor", "**", "2", ")", ")", "\n", "p", "=", "(", "k", ".", "shape", "[", "0", "]", "-", "factor", ")", "-", "(", "convW", "-", "1", ")", "\n", "\n", "# Determine data dimensions.", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "stride", "=", "[", "1", ",", "1", ",", "factor", ",", "factor", "]", "\n", "output_shape", "=", "[", "_shape", "(", "x", ",", "0", ")", ",", "outC", ",", "(", "_shape", "(", "x", ",", "2", ")", "-", "1", ")", "*", "factor", "+", "convH", ",", "(", "_shape", "(", "x", ",", "3", ")", "-", "1", ")", "*", "factor", "+", "convW", "]", "\n", "num_groups", "=", "_shape", "(", "x", ",", "1", ")", "//", "inC", "\n", "", "else", ":", "\n", "        ", "stride", "=", "[", "1", ",", "factor", ",", "factor", ",", "1", "]", "\n", "output_shape", "=", "[", "_shape", "(", "x", ",", "0", ")", ",", "(", "_shape", "(", "x", ",", "1", ")", "-", "1", ")", "*", "factor", "+", "convH", ",", "(", "_shape", "(", "x", ",", "2", ")", "-", "1", ")", "*", "factor", "+", "convW", ",", "outC", "]", "\n", "num_groups", "=", "_shape", "(", "x", ",", "3", ")", "//", "inC", "\n", "\n", "# Transpose weights.", "\n", "", "w", "=", "tf", ".", "reshape", "(", "w", ",", "[", "convH", ",", "convW", ",", "inC", ",", "num_groups", ",", "-", "1", "]", ")", "\n", "w", "=", "tf", ".", "transpose", "(", "w", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ",", "[", "0", ",", "1", ",", "4", ",", "3", ",", "2", "]", ")", "\n", "w", "=", "tf", ".", "reshape", "(", "w", ",", "[", "convH", ",", "convW", ",", "-", "1", ",", "num_groups", "*", "inC", "]", ")", "\n", "\n", "# Execute.", "\n", "x", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "x", ",", "w", ",", "output_shape", "=", "output_shape", ",", "strides", "=", "stride", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "data_format", ")", "\n", "return", "_simple_upfirdn_2d", "(", "x", ",", "k", ",", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", ",", "pad1", "=", "p", "//", "2", "+", "1", ",", "data_format", "=", "data_format", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d.conv_downsample_2d": [[298, 335], ["tensorflow.convert_to_tensor", "tf.convert_to_tensor.shape.as_list", "upfirdn_2d._simple_upfirdn_2d", "tensorflow.nn.conv2d", "isinstance", "upfirdn_2d._setup_kernel"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._simple_upfirdn_2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._setup_kernel"], ["", "def", "conv_downsample_2d", "(", "x", ",", "w", ",", "k", "=", "None", ",", "factor", "=", "2", ",", "gain", "=", "1", ",", "data_format", "=", "'NCHW'", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Fused `tf.nn.conv2d()` followed by `downsample_2d()`.\n\n    Padding is performed only once at the beginning, not between the operations.\n    The fused op is considerably more efficient than performing the same calculation\n    using standard TensorFlow ops. It supports gradients of arbitrary order.\n\n    Args:\n        x:            Input tensor of the shape `[N, C, H, W]` or `[N, H, W, C]`.\n        w:            Weight tensor of the shape `[filterH, filterW, inChannels, outChannels]`.\n                      Grouped convolution can be performed by `inChannels = x.shape[0] // numGroups`.\n        k:            FIR filter of the shape `[firH, firW]` or `[firN]` (separable).\n                      The default is `[1] * factor`, which corresponds to average pooling.\n        factor:       Integer downsampling factor (default: 2).\n        gain:         Scaling factor for signal magnitude (default: 1.0).\n        data_format:  `'NCHW'` or `'NHWC'` (default: `'NCHW'`).\n        impl:         Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the shape `[N, C, H // factor, W // factor]` or\n        `[N, H // factor, W // factor, C]`, and same datatype as `x`.\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "w", "=", "tf", ".", "convert_to_tensor", "(", "w", ")", "\n", "convH", ",", "convW", ",", "_inC", ",", "_outC", "=", "w", ".", "shape", ".", "as_list", "(", ")", "\n", "assert", "convW", "==", "convH", "\n", "if", "k", "is", "None", ":", "\n", "        ", "k", "=", "[", "1", "]", "*", "factor", "\n", "", "k", "=", "_setup_kernel", "(", "k", ")", "*", "gain", "\n", "p", "=", "(", "k", ".", "shape", "[", "0", "]", "-", "factor", ")", "+", "(", "convW", "-", "1", ")", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "s", "=", "[", "1", ",", "1", ",", "factor", ",", "factor", "]", "\n", "", "else", ":", "\n", "        ", "s", "=", "[", "1", ",", "factor", ",", "factor", ",", "1", "]", "\n", "", "x", "=", "_simple_upfirdn_2d", "(", "x", ",", "k", ",", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", ",", "pad1", "=", "p", "//", "2", ",", "data_format", "=", "data_format", ",", "impl", "=", "impl", ")", "\n", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "s", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape": [[339, 345], ["tensorflow.shape"], "function", ["None"], ["", "def", "_shape", "(", "tf_expr", ",", "dim_idx", ")", ":", "\n", "    ", "if", "tf_expr", ".", "shape", ".", "rank", "is", "not", "None", ":", "\n", "        ", "dim", "=", "tf_expr", ".", "shape", "[", "dim_idx", "]", ".", "value", "\n", "if", "dim", "is", "not", "None", ":", "\n", "            ", "return", "dim", "\n", "", "", "return", "tf", ".", "shape", "(", "tf_expr", ")", "[", "dim_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._setup_kernel": [[346, 354], ["numpy.asarray", "numpy.sum", "numpy.outer"], "function", ["None"], ["", "def", "_setup_kernel", "(", "k", ")", ":", "\n", "    ", "k", "=", "np", ".", "asarray", "(", "k", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "k", ".", "ndim", "==", "1", ":", "\n", "        ", "k", "=", "np", ".", "outer", "(", "k", ",", "k", ")", "\n", "", "k", "/=", "np", ".", "sum", "(", "k", ")", "\n", "assert", "k", ".", "ndim", "==", "2", "\n", "assert", "k", ".", "shape", "[", "0", "]", "==", "k", ".", "shape", "[", "1", "]", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._simple_upfirdn_2d": [[355, 365], ["upfirdn_2d.upfirdn_2d", "tensorflow.reshape", "tensorflow.reshape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d.upfirdn_2d", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d._shape"], ["", "def", "_simple_upfirdn_2d", "(", "x", ",", "k", ",", "up", "=", "1", ",", "down", "=", "1", ",", "pad0", "=", "0", ",", "pad1", "=", "0", ",", "data_format", "=", "'NCHW'", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "assert", "data_format", "in", "[", "'NCHW'", ",", "'NHWC'", "]", "\n", "assert", "x", ".", "shape", ".", "rank", "==", "4", "\n", "y", "=", "x", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "-", "1", ",", "_shape", "(", "y", ",", "2", ")", ",", "_shape", "(", "y", ",", "3", ")", ",", "1", "]", ")", "\n", "", "y", "=", "upfirdn_2d", "(", "y", ",", "k", ",", "upx", "=", "up", ",", "upy", "=", "up", ",", "downx", "=", "down", ",", "downy", "=", "down", ",", "padx0", "=", "pad0", ",", "padx1", "=", "pad1", ",", "pady0", "=", "pad0", ",", "pady1", "=", "pad1", ",", "impl", "=", "impl", ")", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "-", "1", ",", "_shape", "(", "x", ",", "1", ")", ",", "_shape", "(", "y", ",", "1", ")", ",", "_shape", "(", "y", ",", "2", ")", "]", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.fused_bias_act._get_plugin": [[15, 17], ["custom_ops.get_plugin", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.custom_ops.get_plugin"], ["def", "_get_plugin", "(", ")", ":", "\n", "    ", "return", "custom_ops", ".", "get_plugin", "(", "os", ".", "path", ".", "splitext", "(", "__file__", ")", "[", "0", "]", "+", "'.cu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.fused_bias_act.fused_bias_act": [[34, 69], ["None"], "function", ["None"], ["def", "fused_bias_act", "(", "x", ",", "b", "=", "None", ",", "axis", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "impl", "=", "'cuda'", ")", ":", "\n", "    ", "r\"\"\"Fused bias and activation function.\n\n    Adds bias `b` to activation tensor `x`, evaluates activation function `act`,\n    and scales the result by `gain`. Each of the steps is optional. In most cases,\n    the fused op is considerably more efficient than performing the same calculation\n    using standard TensorFlow ops. It supports first and second order gradients,\n    but not third order gradients.\n\n    Args:\n        x:      Input activation tensor. Can have any shape, but if `b` is defined, the\n                dimension corresponding to `axis`, as well as the rank, must be known.\n        b:      Bias vector, or `None` to disable. Must be a 1D tensor of the same type\n                as `x`. The shape must be known, and it must match the dimension of `x`\n                corresponding to `axis`.\n        axis:   The dimension in `x` corresponding to the elements of `b`.\n                The value of `axis` is ignored if `b` is not specified.\n        act:    Name of the activation function to evaluate, or `\"linear\"` to disable.\n                Can be e.g. `\"relu\"`, `\"lrelu\"`, `\"tanh\"`, `\"sigmoid\"`, `\"swish\"`, etc.\n                See `activation_funcs` for a full list. `None` is not allowed.\n        alpha:  Shape parameter for the activation function, or `None` to use the default.\n        gain:   Scaling factor for the output tensor, or `None` to use default.\n                See `activation_funcs` for the default scaling of each activation function.\n                If unsure, consider specifying `1.0`.\n        impl:   Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the same shape and datatype as `x`.\n    \"\"\"", "\n", "\n", "impl_dict", "=", "{", "\n", "'ref'", ":", "_fused_bias_act_ref", ",", "\n", "'cuda'", ":", "_fused_bias_act_cuda", ",", "\n", "}", "\n", "return", "impl_dict", "[", "impl", "]", "(", "x", "=", "x", ",", "b", "=", "b", ",", "axis", "=", "axis", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.fused_bias_act._fused_bias_act_ref": [[72, 97], ["tensorflow.convert_to_tensor", "act_spec.func", "tensorflow.convert_to_tensor", "tensorflow.constant", "tensorflow.reshape", "range"], "function", ["None"], ["", "def", "_fused_bias_act_ref", "(", "x", ",", "b", ",", "axis", ",", "act", ",", "alpha", ",", "gain", ")", ":", "\n", "    ", "\"\"\"Slow reference implementation of `fused_bias_act()` using standard TensorFlow ops.\"\"\"", "\n", "\n", "# Validate arguments.", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "b", "=", "tf", ".", "convert_to_tensor", "(", "b", ")", "if", "b", "is", "not", "None", "else", "tf", ".", "constant", "(", "[", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "act_spec", "=", "activation_funcs", "[", "act", "]", "\n", "assert", "b", ".", "shape", ".", "rank", "==", "1", "and", "(", "b", ".", "shape", "[", "0", "]", "==", "0", "or", "b", ".", "shape", "[", "0", "]", "==", "x", ".", "shape", "[", "axis", "]", ")", "\n", "assert", "b", ".", "shape", "[", "0", "]", "==", "0", "or", "0", "<=", "axis", "<", "x", ".", "shape", ".", "rank", "\n", "if", "alpha", "is", "None", ":", "\n", "        ", "alpha", "=", "act_spec", ".", "def_alpha", "\n", "", "if", "gain", "is", "None", ":", "\n", "        ", "gain", "=", "act_spec", ".", "def_gain", "\n", "\n", "# Add bias.", "\n", "", "if", "b", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "        ", "x", "+=", "tf", ".", "reshape", "(", "b", ",", "[", "-", "1", "if", "i", "==", "axis", "else", "1", "for", "i", "in", "range", "(", "x", ".", "shape", ".", "rank", ")", "]", ")", "\n", "\n", "# Evaluate activation function.", "\n", "", "x", "=", "act_spec", ".", "func", "(", "x", ",", "alpha", "=", "alpha", ")", "\n", "\n", "# Scale by gain.", "\n", "if", "gain", "!=", "1", ":", "\n", "        ", "x", "*=", "gain", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.ops.fused_bias_act._fused_bias_act_cuda": [[100, 195], ["tensorflow.convert_to_tensor", "tensorflow.constant", "dict", "fused_bias_act._fused_bias_act_cuda.func_nonzero_2nd_grad"], "function", ["None"], ["", "def", "_fused_bias_act_cuda", "(", "x", ",", "b", ",", "axis", ",", "act", ",", "alpha", ",", "gain", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `fused_bias_act()` using custom ops.\"\"\"", "\n", "\n", "# Validate arguments.", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "empty_tensor", "=", "tf", ".", "constant", "(", "[", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "b", "=", "tf", ".", "convert_to_tensor", "(", "b", ")", "if", "b", "is", "not", "None", "else", "empty_tensor", "\n", "act_spec", "=", "activation_funcs", "[", "act", "]", "\n", "assert", "b", ".", "shape", ".", "rank", "==", "1", "and", "(", "b", ".", "shape", "[", "0", "]", "==", "0", "or", "b", ".", "shape", "[", "0", "]", "==", "x", ".", "shape", "[", "axis", "]", ")", "\n", "assert", "b", ".", "shape", "[", "0", "]", "==", "0", "or", "0", "<=", "axis", "<", "x", ".", "shape", ".", "rank", "\n", "if", "alpha", "is", "None", ":", "\n", "        ", "alpha", "=", "act_spec", ".", "def_alpha", "\n", "", "if", "gain", "is", "None", ":", "\n", "        ", "gain", "=", "act_spec", ".", "def_gain", "\n", "\n", "# Special cases.", "\n", "", "if", "act", "==", "'linear'", "and", "b", "is", "None", "and", "gain", "==", "1.0", ":", "\n", "        ", "return", "x", "\n", "", "if", "act_spec", ".", "cuda_idx", "is", "None", ":", "\n", "        ", "return", "_fused_bias_act_ref", "(", "x", "=", "x", ",", "b", "=", "b", ",", "axis", "=", "axis", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ")", "\n", "\n", "# CUDA kernel.", "\n", "", "cuda_kernel", "=", "_get_plugin", "(", ")", ".", "fused_bias_act", "\n", "cuda_kwargs", "=", "dict", "(", "axis", "=", "axis", ",", "act", "=", "act_spec", ".", "cuda_idx", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ")", "\n", "\n", "# Forward pass: y = func(x, b).", "\n", "def", "func_y", "(", "x", ",", "b", ")", ":", "\n", "        ", "y", "=", "cuda_kernel", "(", "x", "=", "x", ",", "b", "=", "b", ",", "ref", "=", "empty_tensor", ",", "grad", "=", "0", ",", "**", "cuda_kwargs", ")", "\n", "y", ".", "set_shape", "(", "x", ".", "shape", ")", "\n", "return", "y", "\n", "\n", "# Backward pass: dx, db = grad(dy, x, y)", "\n", "", "def", "grad_dx", "(", "dy", ",", "x", ",", "y", ")", ":", "\n", "        ", "ref", "=", "{", "'x'", ":", "x", ",", "'y'", ":", "y", "}", "[", "act_spec", ".", "ref", "]", "\n", "dx", "=", "cuda_kernel", "(", "x", "=", "dy", ",", "b", "=", "empty_tensor", ",", "ref", "=", "ref", ",", "grad", "=", "1", ",", "**", "cuda_kwargs", ")", "\n", "dx", ".", "set_shape", "(", "x", ".", "shape", ")", "\n", "return", "dx", "\n", "", "def", "grad_db", "(", "dx", ")", ":", "\n", "        ", "if", "b", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "return", "empty_tensor", "\n", "", "db", "=", "dx", "\n", "if", "axis", "<", "x", ".", "shape", ".", "rank", "-", "1", ":", "\n", "            ", "db", "=", "tf", ".", "reduce_sum", "(", "db", ",", "list", "(", "range", "(", "axis", "+", "1", ",", "x", ".", "shape", ".", "rank", ")", ")", ")", "\n", "", "if", "axis", ">", "0", ":", "\n", "            ", "db", "=", "tf", ".", "reduce_sum", "(", "db", ",", "list", "(", "range", "(", "axis", ")", ")", ")", "\n", "", "db", ".", "set_shape", "(", "b", ".", "shape", ")", "\n", "return", "db", "\n", "\n", "# Second order gradients: d_dy, d_x = grad2(d_dx, d_db, x, y)", "\n", "", "def", "grad2_d_dy", "(", "d_dx", ",", "d_db", ",", "x", ",", "y", ")", ":", "\n", "        ", "ref", "=", "{", "'x'", ":", "x", ",", "'y'", ":", "y", "}", "[", "act_spec", ".", "ref", "]", "\n", "d_dy", "=", "cuda_kernel", "(", "x", "=", "d_dx", ",", "b", "=", "d_db", ",", "ref", "=", "ref", ",", "grad", "=", "1", ",", "**", "cuda_kwargs", ")", "\n", "d_dy", ".", "set_shape", "(", "x", ".", "shape", ")", "\n", "return", "d_dy", "\n", "", "def", "grad2_d_x", "(", "d_dx", ",", "d_db", ",", "x", ",", "y", ")", ":", "\n", "        ", "ref", "=", "{", "'x'", ":", "x", ",", "'y'", ":", "y", "}", "[", "act_spec", ".", "ref", "]", "\n", "d_x", "=", "cuda_kernel", "(", "x", "=", "d_dx", ",", "b", "=", "d_db", ",", "ref", "=", "ref", ",", "grad", "=", "2", ",", "**", "cuda_kwargs", ")", "\n", "d_x", ".", "set_shape", "(", "x", ".", "shape", ")", "\n", "return", "d_x", "\n", "\n", "# Fast version for piecewise-linear activation funcs.", "\n", "", "@", "tf", ".", "custom_gradient", "\n", "def", "func_zero_2nd_grad", "(", "x", ",", "b", ")", ":", "\n", "        ", "y", "=", "func_y", "(", "x", ",", "b", ")", "\n", "@", "tf", ".", "custom_gradient", "\n", "def", "grad", "(", "dy", ")", ":", "\n", "            ", "dx", "=", "grad_dx", "(", "dy", ",", "x", ",", "y", ")", "\n", "db", "=", "grad_db", "(", "dx", ")", "\n", "def", "grad2", "(", "d_dx", ",", "d_db", ")", ":", "\n", "                ", "d_dy", "=", "grad2_d_dy", "(", "d_dx", ",", "d_db", ",", "x", ",", "y", ")", "\n", "return", "d_dy", "\n", "", "return", "(", "dx", ",", "db", ")", ",", "grad2", "\n", "", "return", "y", ",", "grad", "\n", "\n", "# Slow version for general activation funcs.", "\n", "", "@", "tf", ".", "custom_gradient", "\n", "def", "func_nonzero_2nd_grad", "(", "x", ",", "b", ")", ":", "\n", "        ", "y", "=", "func_y", "(", "x", ",", "b", ")", "\n", "def", "grad_wrap", "(", "dy", ")", ":", "\n", "            ", "@", "tf", ".", "custom_gradient", "\n", "def", "grad_impl", "(", "dy", ",", "x", ")", ":", "\n", "                ", "dx", "=", "grad_dx", "(", "dy", ",", "x", ",", "y", ")", "\n", "db", "=", "grad_db", "(", "dx", ")", "\n", "def", "grad2", "(", "d_dx", ",", "d_db", ")", ":", "\n", "                    ", "d_dy", "=", "grad2_d_dy", "(", "d_dx", ",", "d_db", ",", "x", ",", "y", ")", "\n", "d_x", "=", "grad2_d_x", "(", "d_dx", ",", "d_db", ",", "x", ",", "y", ")", "\n", "return", "d_dy", ",", "d_x", "\n", "", "return", "(", "dx", ",", "db", ")", ",", "grad2", "\n", "", "return", "grad_impl", "(", "dy", ",", "x", ")", "\n", "", "return", "y", ",", "grad_wrap", "\n", "\n", "# Which version to use?", "\n", "", "if", "act_spec", ".", "zero_2nd_grad", ":", "\n", "        ", "return", "func_zero_2nd_grad", "(", "x", ",", "b", ")", "\n", "", "return", "func_nonzero_2nd_grad", "(", "x", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.training_loop.log_images": [[25, 51], ["vae_helpers.rng_decorator", "training.dataset.sample_mask().numpy", "training.misc.adjust_dynamic_range", "range", "wandb.log", "len", "numpy.zeros", "numpy.random.randn", "model.run", "len", "numpy.repeat", "numpy.repeat", "training_loop.log_images.inpaint"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.misc.adjust_dynamic_range", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.inpaint"], ["@", "rng_decorator", "(", "0", ")", "\n", "def", "log_images", "(", "args", ",", "model", ",", "training_set", ",", "viz_batch_processed", ",", "drange_net", ")", ":", "\n", "    ", "def", "inpaint", "(", "reals", ",", "masks", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "reals", ")", "\n", "labels", "=", "labels", "=", "np", ".", "zeros", "(", "[", "batch_size", ",", "0", "]", ")", "\n", "latents", "=", "np", ".", "random", ".", "randn", "(", "batch_size", ",", "*", "model", ".", "input_shape", "[", "1", ":", "]", ")", "\n", "fakes", "=", "model", ".", "run", "(", "latents", ",", "labels", ",", "reals", ",", "masks", ")", "\n", "return", "fakes", "\n", "\n", "", "masks", "=", "dataset", ".", "sample_mask", "(", "args", ",", "\n", "torch", ".", "zeros", "(", "[", "args", ".", "num_images_visualize", "]", "+", "training_set", ".", "shape", ")", ")", ".", "numpy", "(", ")", "\n", "#masks = training_set.get_random_masks_np(args.num_images_visualize)", "\n", "reals", "=", "misc", ".", "adjust_dynamic_range", "(", "viz_batch_processed", ",", "training_set", ".", "dynamic_range", ",", "drange_net", ")", "\n", "log_dict", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "len", "(", "viz_batch_processed", ")", ")", ":", "\n", "        ", "to_plot", "=", "[", "reals", "[", "idx", "]", "*", "masks", "[", "idx", "]", ",", "\n", "reals", "[", "idx", "]", "]", "\n", "reals_repeated", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "reals", "[", "idx", "]", ",", "axis", "=", "0", ")", ",", "args", ".", "num_samples_visualize", ",", "axis", "=", "0", ")", "\n", "masks_repeated", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "masks", "[", "idx", "]", ",", "axis", "=", "0", ")", ",", "args", ".", "num_samples_visualize", ",", "axis", "=", "0", ")", "\n", "fakes", "=", "inpaint", "(", "reals_repeated", ",", "masks_repeated", ")", "\n", "to_plot", ".", "extend", "(", "list", "(", "fakes", ")", ")", "\n", "to_plot", "=", "[", "misc", ".", "convert_to_np_image", "(", "x", ",", "drange", "=", "drange_net", ")", "for", "x", "in", "to_plot", "]", "\n", "to_plot", "=", "np", ".", "concatenate", "(", "to_plot", ",", "axis", "=", "1", ")", "\n", "caption", "=", "f\"Sample {idx}\"", "\n", "log_dict", ".", "update", "(", "{", "caption", ":", "wandb", ".", "Image", "(", "to_plot", ",", "caption", "=", "caption", ")", "}", ")", "\n", "", "wandb", ".", "log", "(", "log_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.training_loop.process_reals": [[56, 77], ["tensorflow.name_scope", "tensorflow.cast", "training.misc.adjust_dynamic_range", "tensorflow.name_scope", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.tile", "tensorflow.reshape", "dnnlib.lerp", "tensorflow.name_scope", "tensorflow.shape", "tensorflow.cast", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape", "tensorflow.name_scope", "tensorflow.where", "tensorflow.reverse", "tensorflow.floor", "tensorflow.floor", "tensorflow.random_uniform", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.misc.adjust_dynamic_range", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.lerp"], ["", "def", "process_reals", "(", "x", ",", "labels", ",", "lod", ",", "mirror_augment", ",", "drange_data", ",", "drange_net", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'DynamicRange'", ")", ":", "\n", "        ", "x", "=", "tf", ".", "cast", "(", "x", ",", "tf", ".", "float32", ")", "\n", "x", "=", "misc", ".", "adjust_dynamic_range", "(", "x", ",", "drange_data", ",", "drange_net", ")", "\n", "", "if", "mirror_augment", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'MirrorAugment'", ")", ":", "\n", "            ", "x", "=", "tf", ".", "where", "(", "tf", ".", "random_uniform", "(", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "]", ")", "<", "0.5", ",", "x", ",", "tf", ".", "reverse", "(", "x", ",", "[", "3", "]", ")", ")", "\n", "", "", "with", "tf", ".", "name_scope", "(", "'FadeLOD'", ")", ":", "# Smooth crossfade between consecutive levels-of-detail.", "\n", "        ", "s", "=", "tf", ".", "shape", "(", "x", ")", "\n", "y", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", "//", "2", ",", "2", ",", "s", "[", "3", "]", "//", "2", ",", "2", "]", ")", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "[", "3", ",", "5", "]", ",", "keepdims", "=", "True", ")", "\n", "y", "=", "tf", ".", "tile", "(", "y", ",", "[", "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "2", "]", ")", "\n", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "\n", "x", "=", "tflib", ".", "lerp", "(", "x", ",", "y", ",", "lod", "-", "tf", ".", "floor", "(", "lod", ")", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'UpscaleLOD'", ")", ":", "# Upscale to match the expected input/output size of the networks.", "\n", "        ", "s", "=", "tf", ".", "shape", "(", "x", ")", "\n", "factor", "=", "tf", ".", "cast", "(", "2", "**", "tf", ".", "floor", "(", "lod", ")", ",", "tf", ".", "int32", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "1", ",", "s", "[", "3", "]", ",", "1", "]", ")", "\n", "x", "=", "tf", ".", "tile", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "factor", ",", "1", ",", "factor", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", "*", "factor", ",", "s", "[", "3", "]", "*", "factor", "]", ")", "\n", "", "return", "x", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.training_loop.training_schedule": [[81, 137], ["dnnlib.EasyDict", "dnnlib.EasyDict", "minibatch_size_dict.get", "minibatch_gpu_dict.get", "G_lrate_dict.get", "D_lrate_dict.get", "tick_kimg_dict.get", "int", "numpy.floor", "max", "min", "numpy.floor", "numpy.log2", "int", "max", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.log2"], ["", "def", "training_schedule", "(", "\n", "cur_nimg", ",", "\n", "training_set", ",", "\n", "lod_initial_resolution", "=", "None", ",", "# Image resolution used at the beginning.", "\n", "lod_training_kimg", "=", "600", ",", "# Thousands of real images to show before doubling the resolution.", "\n", "lod_transition_kimg", "=", "600", ",", "# Thousands of real images to show when fading in new layers.", "\n", "minibatch_size_base", "=", "32", ",", "# Global minibatch size.", "\n", "minibatch_size_dict", "=", "{", "}", ",", "# Resolution-specific overrides.", "\n", "minibatch_gpu_base", "=", "4", ",", "# Number of samples processed at a time by one GPU.", "\n", "minibatch_gpu_dict", "=", "{", "32", ":", "16", ",", "256", ":", "8", "}", ",", "# Resolution-specific overrides.", "\n", "G_lrate_base", "=", "0.002", ",", "# Learning rate for the generator.", "\n", "G_lrate_dict", "=", "{", "}", ",", "# Resolution-specific overrides.", "\n", "D_lrate_base", "=", "0.002", ",", "# Learning rate for the discriminator.", "\n", "D_lrate_dict", "=", "{", "}", ",", "# Resolution-specific overrides.", "\n", "lrate_rampup_kimg", "=", "0", ",", "# Duration of learning rate ramp-up.", "\n", "tick_kimg_base", "=", "8", ",", "# Default interval of progress snapshots.", "\n", "tick_kimg_dict", "=", "{", "}", ")", ":", "# Resolution-specific overrides.", "\n", "# tick_kimg_base          = 4,        # Default interval of progress snapshots.", "\n", "# tick_kimg_dict          = {8:28, 16:24, 32:20, 64:16, 128:12, 256:8, 512:6, 1024:4}): # Resolution-specific overrides.", "\n", "\n", "# Initialize result dict.", "\n", "    ", "s", "=", "dnnlib", ".", "EasyDict", "(", ")", "\n", "s", ".", "kimg", "=", "cur_nimg", "/", "1000.0", "\n", "\n", "# Training phase.", "\n", "phase_dur", "=", "lod_training_kimg", "+", "lod_transition_kimg", "\n", "phase_idx", "=", "int", "(", "np", ".", "floor", "(", "s", ".", "kimg", "/", "phase_dur", ")", ")", "if", "phase_dur", ">", "0", "else", "0", "\n", "phase_kimg", "=", "s", ".", "kimg", "-", "phase_idx", "*", "phase_dur", "\n", "\n", "# Level-of-detail and resolution.", "\n", "if", "lod_initial_resolution", "is", "None", ":", "\n", "        ", "s", ".", "lod", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "s", ".", "lod", "=", "training_set", ".", "resolution_log2", "\n", "s", ".", "lod", "-=", "np", ".", "floor", "(", "np", ".", "log2", "(", "lod_initial_resolution", ")", ")", "\n", "s", ".", "lod", "-=", "phase_idx", "\n", "if", "lod_transition_kimg", ">", "0", ":", "\n", "            ", "s", ".", "lod", "-=", "max", "(", "phase_kimg", "-", "lod_training_kimg", ",", "0.0", ")", "/", "lod_transition_kimg", "\n", "", "s", ".", "lod", "=", "max", "(", "s", ".", "lod", ",", "0.0", ")", "\n", "", "s", ".", "resolution", "=", "2", "**", "(", "training_set", ".", "resolution_log2", "-", "int", "(", "np", ".", "floor", "(", "s", ".", "lod", ")", ")", ")", "\n", "\n", "# Minibatch size.", "\n", "s", ".", "minibatch_size", "=", "minibatch_size_dict", ".", "get", "(", "s", ".", "resolution", ",", "minibatch_size_base", ")", "\n", "s", ".", "minibatch_gpu", "=", "minibatch_gpu_dict", ".", "get", "(", "s", ".", "resolution", ",", "minibatch_gpu_base", ")", "\n", "\n", "# Learning rate.", "\n", "s", ".", "G_lrate", "=", "G_lrate_dict", ".", "get", "(", "s", ".", "resolution", ",", "G_lrate_base", ")", "\n", "s", ".", "D_lrate", "=", "D_lrate_dict", ".", "get", "(", "s", ".", "resolution", ",", "D_lrate_base", ")", "\n", "if", "lrate_rampup_kimg", ">", "0", ":", "\n", "        ", "rampup", "=", "min", "(", "s", ".", "kimg", "/", "lrate_rampup_kimg", ",", "1.0", ")", "\n", "s", ".", "G_lrate", "*=", "rampup", "\n", "s", ".", "D_lrate", "*=", "rampup", "\n", "\n", "# Other parameters.", "\n", "", "s", ".", "tick_kimg", "=", "tick_kimg_dict", ".", "get", "(", "s", ".", "resolution", ",", "tick_kimg_base", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.training_loop.training_loop": [[141, 442], ["dnnlib.init_tf", "training.dataset.NewDataset", "[].numpy", "tflib.Network.print_layers", "tflib.Network.print_layers", "training_loop.training_schedule", "print", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "dict", "dict", "dnnlib.Optimizer", "dnnlib.Optimizer", "dnnlib.Optimizer", "dnnlib.Optimizer", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.split", "tensorflow.split", "tensorflow.split", "range", "tensorflow.group", "tflib.Optimizer.apply_updates", "tflib.Optimizer.apply_updates", "tflib.Optimizer.apply_updates", "tflib.Optimizer.apply_updates", "G.clone.setup_as_moving_average_of", "dnnlib.init_uninitialized_vars", "print", "tensorflow.summary.FileWriter", "metrics.metric_base.MetricGroup", "print", "dnnlib.RunContext.get().update", "dnnlib.RunContext.get().update", "dnnlib.RunContext.get().get_last_update_interval", "dnnlib.RunContext.get().get_last_update_interval", "int", "training.misc.save_pkl", "tf.summary.FileWriter.close", "dataset.NewDataset.close", "training.misc.setup_snapshot_image_grid", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "training.misc.save_image_grid", "training.misc.adjust_dynamic_range", "tensorflow.device", "numpy.random.randn", "G.clone.run", "training.misc.save_image_grid", "tensorflow.device", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "tf.summary.FileWriter.add_graph", "tflib.Network.setup_weight_histograms", "tflib.Network.setup_weight_histograms", "dnnlib.RunContext.get().should_stop", "dnnlib.RunContext.get().should_stop", "training_loop.training_schedule", "dataset.NewDataset.configure", "range", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "print", "dnnlib.Network", "dnnlib.Network", "tflib.Network.clone", "print", "training.misc.load_pkl", "numpy.prod", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "tensorflow.div", "tensorflow.name_scope", "tensorflow.device", "tflib.Optimizer.register_gradients", "tflib.Optimizer.register_gradients", "tensorflow.contrib.memory_stats.MaxBytesInUse", "tensorflow.get_default_graph", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "print", "range", "dnnlib.run", "dnnlib.RunContext.get().get_time_since_last_update", "dnnlib.RunContext.get().get_time_since_last_update", "print", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "wandb.log", "metric_base.MetricGroup.update_autosummaries", "dnnlib.autosummary.save_summaries", "dnnlib.RunContext.get().update", "dnnlib.RunContext.get().update", "next", "tflib.Network.copy_vars_from", "tflib.Network.copy_vars_from", "G.clone.copy_vars_from", "tensorflow.cast", "tflib.Network.clone", "tflib.Network.clone", "tensorflow.name_scope", "training_loop.process_reals", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.control_dependencies", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.constant", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "tflib.Optimizer.reset_optimizer_state", "tflib.Optimizer.reset_optimizer_state", "dataset.NewDataset.get_minibatch_np", "dataset.NewDataset.get_random_masks_np", "dataset.NewDataset.get_minibatch_np", "dataset.NewDataset.get_random_masks_np", "dnnlib.RunContext.get().get_time_since_start", "dnnlib.RunContext.get().get_time_since_start", "training_loop.log_images", "os.path.join", "os.makedirs", "training.misc.save_pkl", "dnnlib.RunContext.get().get_last_update_interval", "dnnlib.RunContext.get().get_last_update_interval", "iter", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.name_scope", "dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name", "tensorflow.name_scope", "dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name", "tflib.Optimizer.register_gradients", "tflib.Optimizer.register_gradients", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.ceil", "dnnlib.run", "dnnlib.run", "dnnlib.run", "dnnlib.run", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "G.clone.run", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "training.misc.save_image_grid", "wandb.log", "os.path.dirname", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "torch.utils.data.DataLoader", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "dnnlib.util.format_time", "dnnlib.util.format_time", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.tflib.autosummary.autosummary", "wandb.Image", "tf.constant.eval"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.print_layers", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.print_layers", "home.repos.pwc.inspect_result.plai-group_ipa.training.training_loop.training_schedule", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.apply_updates", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.apply_updates", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.apply_updates", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.apply_updates", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.setup_as_moving_average_of", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get_last_update_interval", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get_last_update_interval", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.save_pkl", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.setup_snapshot_image_grid", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.save_image_grid", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.adjust_dynamic_range", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.save_image_grid", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.setup_weight_histograms", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.setup_weight_histograms", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.should_stop", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.should_stop", "home.repos.pwc.inspect_result.plai-group_ipa.training.training_loop.training_schedule", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.configure", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.load_pkl", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.register_gradients", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.register_gradients", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get_time_since_last_update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get_time_since_last_update", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.metrics.metric_base.MetricGroup.update_autosummaries", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.save_summaries", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.copy_vars_from", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.copy_vars_from", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.copy_vars_from", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.training.training_loop.process_reals", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.reset_optimizer_state", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.reset_optimizer_state", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_np", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_masks_np", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_np", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_masks_np", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get_time_since_start", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get_time_since_start", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.log_images", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.save_pkl", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get_last_update_interval", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get_last_update_interval", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.register_gradients", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.optimizer.Optimizer.register_gradients", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.plai-group_ipa.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.save_image_grid", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.format_time", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.format_time", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval"], ["", "def", "training_loop", "(", "\n", "args", ",", "\n", "G_args", "=", "{", "}", ",", "# Options for generator network.", "\n", "D_args", "=", "{", "}", ",", "# Options for discriminator network.", "\n", "G_opt_args", "=", "{", "}", ",", "# Options for generator optimizer.", "\n", "D_opt_args", "=", "{", "}", ",", "# Options for discriminator optimizer.", "\n", "G_loss_args", "=", "{", "}", ",", "# Options for generator loss.", "\n", "D_loss_args", "=", "{", "}", ",", "# Options for discriminator loss.", "\n", "dataset_args", "=", "{", "}", ",", "# Options for dataset.load_dataset().", "\n", "sched_args", "=", "{", "}", ",", "# Options for train.TrainingSchedule.", "\n", "grid_args", "=", "{", "}", ",", "# Options for train.setup_snapshot_image_grid().", "\n", "metric_arg_list", "=", "[", "]", ",", "# Options for MetricGroup.", "\n", "tf_config", "=", "{", "}", ",", "# Options for tflib.init_tf().", "\n", "G_smoothing_kimg", "=", "10.0", ",", "# Half-life of the running average of generator weights.", "\n", "minibatch_repeats", "=", "4", ",", "# Number of minibatches to run before adjusting training parameters.", "\n", "lazy_regularization", "=", "True", ",", "# Perform regularization as a separate training step?", "\n", "G_reg_interval", "=", "4", ",", "# How often the perform regularization for G? Ignored if lazy_regularization=False.", "\n", "D_reg_interval", "=", "16", ",", "# How often the perform regularization for D? Ignored if lazy_regularization=False.", "\n", "reset_opt_for_new_lod", "=", "True", ",", "# Reset optimizer internal state (e.g. Adam moments) when new layers are introduced?", "\n", "drange_net", "=", "[", "-", "1", ",", "1", "]", ",", "# Dynamic range used when feeding image data to the networks.", "\n", "network_snapshot_ticks", "=", "50", ",", "# How often to save network snapshots? None = only save 'networks-final.pkl'.", "\n", "save_tf_graph", "=", "False", ",", "# Include full TensorFlow computation graph in the tfevents file?", "\n", "save_weight_histograms", "=", "False", ",", "# Include weight histograms in the tfevents file?", "\n", "resume_pkl", "=", "None", ",", "# Network pickle to resume training from, None = train from scratch.", "\n", "resume_kimg", "=", "0.0", ",", "# Assumed training progress at the beginning. Affects reporting and training schedule.", "\n", "resume_time", "=", "0.0", ",", "# Assumed wallclock time at the beginning. Affects reporting.", "\n", "resume_with_new_nets", "=", "False", ")", ":", "# Construct new networks according to G_args and D_args before resuming training?,", "\n", "    ", "data_dir", "=", "None", "if", "\"data_dir\"", "not", "in", "args", ".", "__dict__", "else", "args", ".", "data_dir", "# Directory to load datasets from.", "\n", "total_kimg", "=", "25000", "if", "\"total_kimg\"", "not", "in", "args", ".", "__dict__", "else", "args", ".", "total_kimg", "# Total length of the training, measured in thousands of real images.", "\n", "mirror_augment", "=", "False", "if", "\"mirror_augment\"", "not", "in", "args", ".", "__dict__", "else", "args", ".", "mirror_augment", "# Enable mirror augment?", "\n", "image_snapshot_ticks", "=", "50", "if", "\"image_snapshot_ticks\"", "not", "in", "args", ".", "__dict__", "else", "args", ".", "image_snapshot_ticks", "# How often to save image snapshots? None = only save 'reals.png' and 'fakes-init.png'.", "\n", "\n", "# Initialize dnnlib and TensorFlow.", "\n", "tflib", ".", "init_tf", "(", "tf_config", ")", "\n", "num_gpus", "=", "dnnlib", ".", "submit_config", ".", "num_gpus", "\n", "\n", "# Load training set.", "\n", "training_set", "=", "dataset", ".", "NewDataset", "(", "args", ")", "\n", "viz_batch_processed", "=", "next", "(", "iter", "(", "DataLoader", "(", "training_set", ".", "valid_set", ",", "\n", "batch_size", "=", "args", ".", "num_images_visualize", ")", ")", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "if", "args", ".", "save_image_grids", ":", "\n", "        ", "grid_size", ",", "grid_reals", ",", "grid_labels", ",", "grid_masks", "=", "misc", ".", "setup_snapshot_image_grid", "(", "training_set", ",", "**", "grid_args", ")", "\n", "img_path", "=", "dnnlib", ".", "make_run_dir_path", "(", "'reals.png'", ")", "\n", "misc", ".", "save_image_grid", "(", "grid_reals", ",", "img_path", ",", "drange", "=", "training_set", ".", "dynamic_range", ",", "grid_size", "=", "grid_size", ",", "pix2pix", "=", "training_set", ".", "pix2pix", ")", "\n", "grid_reals", "=", "misc", ".", "adjust_dynamic_range", "(", "grid_reals", ",", "training_set", ".", "dynamic_range", ",", "drange_net", ")", "\n", "\n", "# Construct or load networks.", "\n", "", "with", "tf", ".", "device", "(", "'/gpu:0'", ")", ":", "\n", "        ", "if", "resume_pkl", "is", "None", "or", "resume_with_new_nets", ":", "\n", "            ", "print", "(", "'Constructing networks...'", ")", "\n", "G", "=", "tflib", ".", "Network", "(", "'G'", ",", "num_channels", "=", "training_set", ".", "shape", "[", "0", "]", ",", "resolution", "=", "training_set", ".", "shape", "[", "1", "]", ",", "label_size", "=", "training_set", ".", "label_size", ",", "\n", "pix2pix", "=", "training_set", ".", "pix2pix", ",", "**", "G_args", ")", "\n", "D", "=", "tflib", ".", "Network", "(", "'D'", ",", "num_channels", "=", "training_set", ".", "shape", "[", "0", "]", ",", "resolution", "=", "training_set", ".", "shape", "[", "1", "]", ",", "label_size", "=", "training_set", ".", "label_size", ",", "\n", "pix2pix", "=", "training_set", ".", "pix2pix", ",", "**", "D_args", ")", "\n", "Gs", "=", "G", ".", "clone", "(", "'Gs'", ")", "\n", "", "if", "resume_pkl", "is", "not", "None", ":", "\n", "            ", "print", "(", "'Loading networks from \"%s\"...'", "%", "resume_pkl", ")", "\n", "rG", ",", "rD", ",", "rGs", "=", "misc", ".", "load_pkl", "(", "resume_pkl", ")", "\n", "if", "resume_with_new_nets", ":", "G", ".", "copy_vars_from", "(", "rG", ")", ";", "D", ".", "copy_vars_from", "(", "rD", ")", ";", "Gs", ".", "copy_vars_from", "(", "rGs", ")", "\n", "else", ":", "G", "=", "rG", ";", "D", "=", "rD", ";", "Gs", "=", "rGs", "\n", "\n", "# Print layers and generate initial image snapshot.", "\n", "", "", "G", ".", "print_layers", "(", ")", ";", "D", ".", "print_layers", "(", ")", "\n", "sched", "=", "training_schedule", "(", "cur_nimg", "=", "total_kimg", "*", "1000", ",", "training_set", "=", "training_set", ",", "**", "sched_args", ")", "\n", "if", "args", ".", "save_image_grids", ":", "\n", "        ", "grid_latents", "=", "np", ".", "random", ".", "randn", "(", "np", ".", "prod", "(", "grid_size", ")", ",", "*", "G", ".", "input_shape", "[", "1", ":", "]", ")", "\n", "grid_fakes", "=", "Gs", ".", "run", "(", "grid_latents", ",", "grid_labels", ",", "grid_reals", ",", "grid_masks", ",", "minibatch_size", "=", "sched", ".", "minibatch_gpu", ")", "\n", "misc", ".", "save_image_grid", "(", "grid_fakes", ",", "dnnlib", ".", "make_run_dir_path", "(", "'fakes_init.png'", ")", ",", "drange", "=", "drange_net", ",", "grid_size", "=", "grid_size", ",", "pix2pix", "=", "training_set", ".", "pix2pix", ")", "\n", "\n", "# Setup training inputs.", "\n", "", "print", "(", "'Building TensorFlow graph...'", ")", "\n", "lod_in", "=", "tf", ".", "convert_to_tensor", "(", "sched", ".", "lod", ")", "\n", "lrate_in", "=", "tf", ".", "convert_to_tensor", "(", "sched", ".", "G_lrate", ")", "\n", "minibatch_size_in", "=", "tf", ".", "convert_to_tensor", "(", "sched", ".", "minibatch_size", ")", "\n", "minibatch_gpu_in", "=", "tf", ".", "convert_to_tensor", "(", "sched", ".", "minibatch_gpu", ")", "\n", "minibatch_multiplier", "=", "minibatch_size_in", "//", "(", "minibatch_gpu_in", "*", "num_gpus", ")", "\n", "Gs_beta", "=", "0.5", "**", "tf", ".", "div", "(", "tf", ".", "cast", "(", "minibatch_size_in", ",", "tf", ".", "float32", ")", ",", "G_smoothing_kimg", "*", "1000.0", ")", "if", "G_smoothing_kimg", ">", "0.0", "else", "0.0", "\n", "\n", "# Setup optimizers.", "\n", "G_opt_args", "=", "dict", "(", "G_opt_args", ")", "\n", "D_opt_args", "=", "dict", "(", "D_opt_args", ")", "\n", "for", "_args", ",", "reg_interval", "in", "[", "(", "G_opt_args", ",", "G_reg_interval", ")", ",", "(", "D_opt_args", ",", "D_reg_interval", ")", "]", ":", "\n", "        ", "_args", "[", "'minibatch_multiplier'", "]", "=", "minibatch_multiplier", "\n", "_args", "[", "'learning_rate'", "]", "=", "lrate_in", "\n", "if", "lazy_regularization", ":", "\n", "            ", "mb_ratio", "=", "reg_interval", "/", "(", "reg_interval", "+", "1", ")", "\n", "_args", "[", "'learning_rate'", "]", "*=", "mb_ratio", "\n", "if", "'beta1'", "in", "_args", ":", "_args", "[", "'beta1'", "]", "**=", "mb_ratio", "\n", "if", "'beta2'", "in", "_args", ":", "_args", "[", "'beta2'", "]", "**=", "mb_ratio", "\n", "", "", "G_opt", "=", "tflib", ".", "Optimizer", "(", "name", "=", "'TrainG'", ",", "**", "G_opt_args", ")", "\n", "D_opt", "=", "tflib", ".", "Optimizer", "(", "name", "=", "'TrainD'", ",", "**", "D_opt_args", ")", "\n", "G_reg_opt", "=", "tflib", ".", "Optimizer", "(", "name", "=", "'RegG'", ",", "share", "=", "G_opt", ",", "**", "G_opt_args", ")", "\n", "D_reg_opt", "=", "tflib", ".", "Optimizer", "(", "name", "=", "'RegD'", ",", "share", "=", "D_opt", ",", "**", "D_opt_args", ")", "\n", "\n", "reals_batch", "=", "tf", ".", "placeholder", "(", "training_set", ".", "dtype", ",", "name", "=", "'reals'", ",", "shape", "=", "[", "None", "]", "+", "training_set", ".", "shape", ")", "\n", "labels_batch", "=", "tf", ".", "placeholder", "(", "training_set", ".", "label_dtype", ",", "name", "=", "'labels'", ",", "shape", "=", "[", "None", "]", "+", "[", "training_set", ".", "label_size", "]", ")", "\n", "masks_batch", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'reals'", ",", "shape", "=", "[", "None", ",", "1", "]", "+", "training_set", ".", "shape", "[", "1", ":", "]", ")", "\n", "reals_gpu_list", "=", "tf", ".", "split", "(", "reals_batch", ",", "num_gpus", ",", "axis", "=", "0", ")", "\n", "labels_gpu_list", "=", "tf", ".", "split", "(", "labels_batch", ",", "num_gpus", ",", "axis", "=", "0", ")", "\n", "masks_gpu_list", "=", "tf", ".", "split", "(", "masks_batch", ",", "num_gpus", ",", "axis", "=", "0", ")", "\n", "\n", "# Build training graph for each GPU.", "\n", "data_fetch_ops", "=", "[", "]", "\n", "for", "gpu", "in", "range", "(", "num_gpus", ")", ":", "\n", "        ", "def", "auto_gpu", "(", "opr", ")", ":", "\n", "            ", "if", "False", ":", "#opr.type in ['ExtractImagePatches', 'SparseSlice']:", "\n", "                ", "return", "'/cpu:0'", "\n", "", "else", ":", "\n", "                ", "return", "'/gpu:%d'", "%", "gpu", "\n", "\n", "", "", "with", "tf", ".", "name_scope", "(", "'GPU%d'", "%", "gpu", ")", ",", "tf", ".", "device", "(", "auto_gpu", ")", ":", "\n", "\n", "# Create GPU-specific shadow copies of G and D.", "\n", "            ", "G_gpu", "=", "G", "if", "gpu", "==", "0", "else", "G", ".", "clone", "(", "G", ".", "name", "+", "'_shadow'", ")", "\n", "D_gpu", "=", "D", "if", "gpu", "==", "0", "else", "D", ".", "clone", "(", "D", ".", "name", "+", "'_shadow'", ")", "\n", "\n", "# Fetch training data via temporary variables.", "\n", "with", "tf", ".", "name_scope", "(", "'DataFetch'", ")", ":", "\n", "#index_range = [gpu * minibatch_gpu_in, (gpu+1) * minibatch_gpu_in]", "\n", "                ", "reals_gpu", "=", "reals_gpu_list", "[", "gpu", "]", "\n", "labels_gpu", "=", "labels_gpu_list", "[", "gpu", "]", "\n", "masks_gpu", "=", "masks_gpu_list", "[", "gpu", "]", "\n", "reals_write", ",", "labels_write", "=", "process_reals", "(", "reals_gpu", ",", "labels_gpu", ",", "lod_in", ",", "mirror_augment", ",", "training_set", ".", "dynamic_range", ",", "drange_net", ")", "\n", "masks_write", "=", "masks_gpu", "\n", "reals_var", "=", "tf", ".", "Variable", "(", "name", "=", "'reals'", ",", "trainable", "=", "False", ",", "initial_value", "=", "tf", ".", "zeros", "(", "[", "minibatch_gpu_in", "]", "+", "training_set", ".", "shape", ")", ")", "\n", "labels_var", "=", "tf", ".", "Variable", "(", "name", "=", "'labels'", ",", "trainable", "=", "False", ",", "initial_value", "=", "tf", ".", "zeros", "(", "[", "minibatch_gpu_in", ",", "training_set", ".", "label_size", "]", ")", ")", "\n", "masks_var", "=", "tf", ".", "Variable", "(", "name", "=", "'masks'", ",", "trainable", "=", "False", ",", "initial_value", "=", "tf", ".", "zeros", "(", "[", "minibatch_gpu_in", ",", "1", "]", "+", "training_set", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "# reals_write = tf.concat([reals_write, reals_var[minibatch_gpu_in:]], axis=0)", "\n", "# labels_write = tf.concat([labels_write, labels_var[minibatch_gpu_in:]], axis=0)", "\n", "# masks_write = tf.concat([masks_write, masks_var[minibatch_gpu_in:]], axis=0)", "\n", "data_fetch_ops", "+=", "[", "tf", ".", "assign", "(", "reals_var", ",", "reals_write", ")", "]", "\n", "data_fetch_ops", "+=", "[", "tf", ".", "assign", "(", "labels_var", ",", "labels_write", ")", "]", "\n", "data_fetch_ops", "+=", "[", "tf", ".", "assign", "(", "masks_var", ",", "masks_write", ")", "]", "\n", "reals_read", "=", "reals_var", "\n", "labels_read", "=", "labels_var", "\n", "masks_read", "=", "masks_var", "\n", "\n", "# Evaluate loss functions.", "\n", "", "lod_assign_ops", "=", "[", "]", "\n", "if", "'lod'", "in", "G_gpu", ".", "vars", ":", "lod_assign_ops", "+=", "[", "tf", ".", "assign", "(", "G_gpu", ".", "vars", "[", "'lod'", "]", ",", "lod_in", ")", "]", "\n", "if", "'lod'", "in", "D_gpu", ".", "vars", ":", "lod_assign_ops", "+=", "[", "tf", ".", "assign", "(", "D_gpu", ".", "vars", "[", "'lod'", "]", ",", "lod_in", ")", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "lod_assign_ops", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "'G_loss'", ")", ":", "\n", "                    ", "G_loss", ",", "G_reg", "=", "dnnlib", ".", "util", ".", "call_func_by_name", "(", "G", "=", "G_gpu", ",", "D", "=", "D_gpu", ",", "opt", "=", "G_opt", ",", "training_set", "=", "training_set", ",", "minibatch_size", "=", "minibatch_gpu_in", ",", "reals", "=", "reals_read", ",", "masks", "=", "masks_read", ",", "**", "G_loss_args", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'D_loss'", ")", ":", "\n", "                    ", "D_loss", ",", "D_reg", "=", "dnnlib", ".", "util", ".", "call_func_by_name", "(", "G", "=", "G_gpu", ",", "D", "=", "D_gpu", ",", "opt", "=", "D_opt", ",", "training_set", "=", "training_set", ",", "minibatch_size", "=", "minibatch_gpu_in", ",", "reals", "=", "reals_read", ",", "labels", "=", "labels_read", ",", "masks", "=", "masks_read", ",", "**", "D_loss_args", ")", "\n", "\n", "# Register gradients.", "\n", "", "", "if", "not", "lazy_regularization", ":", "\n", "                ", "if", "G_reg", "is", "not", "None", ":", "G_loss", "+=", "G_reg", "\n", "if", "D_reg", "is", "not", "None", ":", "D_loss", "+=", "D_reg", "\n", "", "else", ":", "\n", "                ", "if", "G_reg", "is", "not", "None", ":", "G_reg_opt", ".", "register_gradients", "(", "tf", ".", "reduce_mean", "(", "G_reg", "*", "G_reg_interval", ")", ",", "G_gpu", ".", "trainables", ")", "\n", "if", "D_reg", "is", "not", "None", ":", "D_reg_opt", ".", "register_gradients", "(", "tf", ".", "reduce_mean", "(", "D_reg", "*", "D_reg_interval", ")", ",", "D_gpu", ".", "trainables", ")", "\n", "", "G_opt", ".", "register_gradients", "(", "tf", ".", "reduce_mean", "(", "G_loss", ")", ",", "G_gpu", ".", "trainables", ")", "\n", "D_opt", ".", "register_gradients", "(", "tf", ".", "reduce_mean", "(", "D_loss", ")", ",", "D_gpu", ".", "trainables", ")", "\n", "\n", "# Setup training ops.", "\n", "", "", "data_fetch_op", "=", "tf", ".", "group", "(", "*", "data_fetch_ops", ")", "\n", "G_train_op", "=", "G_opt", ".", "apply_updates", "(", ")", "\n", "D_train_op", "=", "D_opt", ".", "apply_updates", "(", ")", "\n", "G_reg_op", "=", "G_reg_opt", ".", "apply_updates", "(", "allow_no_op", "=", "True", ")", "\n", "D_reg_op", "=", "D_reg_opt", ".", "apply_updates", "(", "allow_no_op", "=", "True", ")", "\n", "Gs_update_op", "=", "Gs", ".", "setup_as_moving_average_of", "(", "G", ",", "beta", "=", "Gs_beta", ")", "\n", "\n", "# Finalize graph.", "\n", "with", "tf", ".", "device", "(", "'/gpu:0'", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "peak_gpu_mem_op", "=", "tf", ".", "contrib", ".", "memory_stats", ".", "MaxBytesInUse", "(", ")", "\n", "", "except", "tf", ".", "errors", ".", "NotFoundError", ":", "\n", "            ", "peak_gpu_mem_op", "=", "tf", ".", "constant", "(", "0", ")", "\n", "", "", "tflib", ".", "init_uninitialized_vars", "(", ")", "\n", "\n", "print", "(", "'Initializing logs...'", ")", "\n", "summary_log", "=", "tf", ".", "summary", ".", "FileWriter", "(", "dnnlib", ".", "make_run_dir_path", "(", ")", ")", "\n", "if", "save_tf_graph", ":", "\n", "        ", "summary_log", ".", "add_graph", "(", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "", "if", "save_weight_histograms", ":", "\n", "        ", "G", ".", "setup_weight_histograms", "(", ")", ";", "D", ".", "setup_weight_histograms", "(", ")", "\n", "", "metrics", "=", "metric_base", ".", "MetricGroup", "(", "metric_arg_list", ")", "\n", "\n", "print", "(", "'Training for %d kimg...\\n'", "%", "total_kimg", ")", "\n", "dnnlib", ".", "RunContext", ".", "get", "(", ")", ".", "update", "(", "''", ",", "cur_epoch", "=", "resume_kimg", ",", "max_epoch", "=", "total_kimg", ")", "\n", "maintenance_time", "=", "dnnlib", ".", "RunContext", ".", "get", "(", ")", ".", "get_last_update_interval", "(", ")", "\n", "cur_nimg", "=", "int", "(", "resume_kimg", "*", "1000", ")", "\n", "cur_tick", "=", "-", "1", "\n", "tick_start_nimg", "=", "cur_nimg", "\n", "prev_lod", "=", "-", "1.0", "\n", "running_mb_counter", "=", "0", "\n", "while", "cur_nimg", "<", "total_kimg", "*", "1000", ":", "\n", "        ", "if", "dnnlib", ".", "RunContext", ".", "get", "(", ")", ".", "should_stop", "(", ")", ":", "break", "\n", "\n", "# Choose training parameters and configure training ops.", "\n", "sched", "=", "training_schedule", "(", "cur_nimg", "=", "cur_nimg", ",", "training_set", "=", "training_set", ",", "**", "sched_args", ")", "\n", "assert", "sched", ".", "minibatch_size", "%", "(", "sched", ".", "minibatch_gpu", "*", "num_gpus", ")", "==", "0", "\n", "training_set", ".", "configure", "(", "sched", ".", "minibatch_gpu", "*", "num_gpus", ",", "sched", ".", "lod", ")", "\n", "if", "reset_opt_for_new_lod", ":", "\n", "            ", "if", "np", ".", "floor", "(", "sched", ".", "lod", ")", "!=", "np", ".", "floor", "(", "prev_lod", ")", "or", "np", ".", "ceil", "(", "sched", ".", "lod", ")", "!=", "np", ".", "ceil", "(", "prev_lod", ")", ":", "\n", "                ", "G_opt", ".", "reset_optimizer_state", "(", ")", ";", "D_opt", ".", "reset_optimizer_state", "(", ")", "\n", "", "", "prev_lod", "=", "sched", ".", "lod", "\n", "\n", "if", "cur_nimg", "==", "0", ":", "\n", "#print(rounds)", "\n", "            ", "print", "(", "f\"batch size={sched.minibatch_size}, batch_gpu={sched.minibatch_gpu}, n_gpu={num_gpus}\"", ")", "\n", "# Run training ops.", "\n", "", "feed_dict", "=", "{", "lod_in", ":", "sched", ".", "lod", ",", "lrate_in", ":", "sched", ".", "G_lrate", "}", "\n", "for", "_repeat", "in", "range", "(", "minibatch_repeats", ")", ":", "\n", "            ", "rounds", "=", "range", "(", "0", ",", "sched", ".", "minibatch_size", ",", "sched", ".", "minibatch_gpu", "*", "num_gpus", ")", "\n", "run_G_reg", "=", "(", "lazy_regularization", "and", "running_mb_counter", "%", "G_reg_interval", "==", "0", ")", "\n", "run_D_reg", "=", "(", "lazy_regularization", "and", "running_mb_counter", "%", "D_reg_interval", "==", "0", ")", "\n", "cur_nimg", "+=", "sched", ".", "minibatch_size", "\n", "running_mb_counter", "+=", "1", "\n", "# Slow path with gradient accumulation or fast path without gradient accumulation, depending on \"rounds\".", "\n", "for", "_round", "in", "rounds", ":", "\n", "                ", "reals", ",", "labels", "=", "training_set", ".", "get_minibatch_np", "(", ")", "\n", "masks", "=", "training_set", ".", "get_random_masks_np", "(", ")", "\n", "feed_dict", "=", "{", "lod_in", ":", "sched", ".", "lod", ",", "lrate_in", ":", "sched", ".", "G_lrate", ",", "\n", "reals_batch", ":", "reals", ",", "labels_batch", ":", "labels", ",", "masks_batch", ":", "masks", "}", "\n", "if", "run_G_reg", ":", "\n", "# tflib.run([data_fetch_op, G_train_op, G_reg_op], feed_dict)", "\n", "                    ", "_", ",", "_", ",", "_", ",", "l", "=", "tflib", ".", "run", "(", "[", "data_fetch_op", ",", "G_train_op", ",", "G_reg_op", ",", "G_loss", "]", ",", "feed_dict", ")", "\n", "# print(f\"G_loss: {l}\")", "\n", "", "else", ":", "\n", "# tflib.run([data_fetch_op, G_train_op], feed_dict)", "\n", "                    ", "_", ",", "_", ",", "l", "=", "tflib", ".", "run", "(", "[", "data_fetch_op", ",", "G_train_op", ",", "G_loss", "]", ",", "feed_dict", ")", "\n", "", "", "tflib", ".", "run", "(", "Gs_update_op", ",", "feed_dict", ")", "\n", "for", "_round", "in", "rounds", ":", "\n", "                ", "reals", ",", "labels", "=", "training_set", ".", "get_minibatch_np", "(", ")", "\n", "masks", "=", "training_set", ".", "get_random_masks_np", "(", ")", "\n", "feed_dict", "=", "{", "lod_in", ":", "sched", ".", "lod", ",", "lrate_in", ":", "sched", ".", "G_lrate", ",", "\n", "reals_batch", ":", "reals", ",", "labels_batch", ":", "labels", ",", "masks_batch", ":", "masks", "}", "\n", "if", "run_D_reg", ":", "\n", "# tflib.run([data_fetch_op, D_train_op, D_reg_op], feed_dict)", "\n", "                    ", "_", ",", "_", ",", "_", ",", "l", ",", "l_r", "=", "tflib", ".", "run", "(", "[", "data_fetch_op", ",", "D_train_op", ",", "D_reg_op", ",", "D_loss", ",", "D_reg", "]", ",", "feed_dict", ")", "\n", "# print(f\"D_loss: {l}. D_reg: {l_r}\")", "\n", "", "else", ":", "\n", "# tflib.run([data_fetch_op, D_train_op], feed_dict)", "\n", "                    ", "_", ",", "_", ",", "l", "=", "tflib", ".", "run", "(", "[", "data_fetch_op", ",", "D_train_op", ",", "D_loss", "]", ",", "feed_dict", ")", "\n", "\n", "# Perform maintenance tasks once per tick.", "\n", "", "", "", "done", "=", "(", "cur_nimg", ">=", "total_kimg", "*", "1000", ")", "\n", "if", "cur_tick", "<", "0", "or", "cur_nimg", ">=", "tick_start_nimg", "+", "sched", ".", "tick_kimg", "*", "1000", "or", "done", ":", "\n", "            ", "cur_tick", "+=", "1", "\n", "tick_kimg", "=", "(", "cur_nimg", "-", "tick_start_nimg", ")", "/", "1000.0", "\n", "tick_start_nimg", "=", "cur_nimg", "\n", "tick_time", "=", "dnnlib", ".", "RunContext", ".", "get", "(", ")", ".", "get_time_since_last_update", "(", ")", "\n", "total_time", "=", "dnnlib", ".", "RunContext", ".", "get", "(", ")", ".", "get_time_since_start", "(", ")", "+", "resume_time", "\n", "\n", "# Report progress.", "\n", "print", "(", "'tick %-5d kimg %-8.1f lod %-5.2f minibatch %-4d time %-12s sec/tick %-7.1f sec/kimg %-7.2f maintenance %-6.1f gpumem %.1f'", "%", "(", "\n", "autosummary", "(", "'Progress/tick'", ",", "cur_tick", ")", ",", "\n", "autosummary", "(", "'Progress/kimg'", ",", "cur_nimg", "/", "1000.0", ")", ",", "\n", "autosummary", "(", "'Progress/lod'", ",", "sched", ".", "lod", ")", ",", "\n", "autosummary", "(", "'Progress/minibatch'", ",", "sched", ".", "minibatch_size", ")", ",", "\n", "dnnlib", ".", "util", ".", "format_time", "(", "autosummary", "(", "'Timing/total_sec'", ",", "total_time", ")", ")", ",", "\n", "autosummary", "(", "'Timing/sec_per_tick'", ",", "tick_time", ")", ",", "\n", "autosummary", "(", "'Timing/sec_per_kimg'", ",", "tick_time", "/", "tick_kimg", ")", ",", "\n", "autosummary", "(", "'Timing/maintenance_sec'", ",", "maintenance_time", ")", ",", "\n", "autosummary", "(", "'Resources/peak_gpu_mem_gb'", ",", "peak_gpu_mem_op", ".", "eval", "(", ")", "/", "2", "**", "30", ")", ")", ")", "\n", "autosummary", "(", "'Timing/total_hours'", ",", "total_time", "/", "(", "60.0", "*", "60.0", ")", ")", "\n", "autosummary", "(", "'Timing/total_days'", ",", "total_time", "/", "(", "24.0", "*", "60.0", "*", "60.0", ")", ")", "\n", "#wandb", "\n", "wandb", ".", "log", "(", "{", "\"tick\"", ":", "cur_tick", ",", "\n", "\"kimg\"", ":", "cur_nimg", "/", "1000.0", ",", "\n", "\"lod\"", ":", "sched", ".", "lod", ",", "\n", "\"minibatch\"", ":", "sched", ".", "minibatch_size", ",", "\n", "\"time\"", ":", "total_time", ",", "\n", "\"sec/tick\"", ":", "tick_time", ",", "\n", "\"sec/kimg\"", ":", "tick_time", "/", "tick_kimg", ",", "\n", "\"maintenance\"", ":", "maintenance_time", "}", ")", "\n", "\n", "# Save snapshots.", "\n", "if", "image_snapshot_ticks", "is", "not", "None", "and", "(", "cur_tick", "%", "image_snapshot_ticks", "==", "0", "or", "done", ")", ":", "\n", "                ", "if", "args", ".", "save_image_grids", ":", "\n", "                    ", "grid_fakes", "=", "Gs", ".", "run", "(", "grid_latents", ",", "grid_labels", ",", "grid_reals", ",", "grid_masks", ",", "minibatch_size", "=", "sched", ".", "minibatch_gpu", ")", "\n", "img_path", "=", "dnnlib", ".", "make_run_dir_path", "(", "'fakes%06d.png'", "%", "(", "cur_nimg", "//", "1000", ")", ")", "\n", "misc", ".", "save_image_grid", "(", "grid_fakes", ",", "img_path", ",", "drange", "=", "drange_net", ",", "grid_size", "=", "grid_size", ",", "pix2pix", "=", "training_set", ".", "pix2pix", ")", "\n", "wandb", ".", "log", "(", "{", "\"fakes\"", ":", "wandb", ".", "Image", "(", "img_path", ",", "caption", "=", "\"Fakes\"", ")", "}", ")", "\n", "", "log_images", "(", "args", ",", "model", "=", "Gs", ",", "\n", "training_set", "=", "training_set", ",", "\n", "viz_batch_processed", "=", "viz_batch_processed", ",", "\n", "drange_net", "=", "drange_net", ")", "\n", "", "if", "network_snapshot_ticks", "is", "not", "None", "and", "(", "cur_tick", "%", "network_snapshot_ticks", "==", "0", "or", "done", ")", ":", "\n", "#pkl = dnnlib.make_run_dir_path('network-snapshot-%06d.pkl' % (cur_nimg // 1000))", "\n", "                ", "model_path", "=", "os", ".", "path", ".", "join", "(", "\"checkpoints\"", ",", "wandb", ".", "run", ".", "id", ",", "f'network-snapshot-{cur_nimg // 1000:06d}.pkl'", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "model_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "misc", ".", "save_pkl", "(", "(", "G", ",", "D", ",", "Gs", ")", ",", "model_path", ")", "\n", "#metrics.run(pkl, run_dir=dnnlib.make_run_dir_path(), data_dir=dnnlib.convert_path(data_dir), num_gpus=num_gpus, tf_config=tf_config)", "\n", "\n", "# Update summaries and RunContext.", "\n", "", "metrics", ".", "update_autosummaries", "(", ")", "\n", "tflib", ".", "autosummary", ".", "save_summaries", "(", "summary_log", ",", "cur_nimg", ")", "\n", "dnnlib", ".", "RunContext", ".", "get", "(", ")", ".", "update", "(", "'%.2f'", "%", "sched", ".", "lod", ",", "cur_epoch", "=", "cur_nimg", "//", "1000", ",", "max_epoch", "=", "total_kimg", ")", "\n", "maintenance_time", "=", "dnnlib", ".", "RunContext", ".", "get", "(", ")", ".", "get_last_update_interval", "(", ")", "-", "tick_time", "\n", "\n", "# Save final snapshot.", "\n", "", "", "misc", ".", "save_pkl", "(", "(", "G", ",", "D", ",", "Gs", ")", ",", "dnnlib", ".", "make_run_dir_path", "(", "'network-final.pkl'", ")", ")", "\n", "\n", "# All done.", "\n", "summary_log", ".", "close", "(", ")", "\n", "training_set", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.get_weight": [[20, 35], ["numpy.prod", "tensorflow.initializers.random_normal", "numpy.sqrt", "tensorflow.get_variable"], "function", ["None"], ["def", "get_weight", "(", "shape", ",", "gain", "=", "1", ",", "use_wscale", "=", "True", ",", "lrmul", "=", "1", ",", "weight_var", "=", "'weight'", ")", ":", "\n", "    ", "fan_in", "=", "np", ".", "prod", "(", "shape", "[", ":", "-", "1", "]", ")", "# [kernel, kernel, fmaps_in, fmaps_out] or [in, out]", "\n", "he_std", "=", "gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "# He init", "\n", "\n", "# Equalized learning rate and custom learning rate multiplier.", "\n", "if", "use_wscale", ":", "\n", "        ", "init_std", "=", "1.0", "/", "lrmul", "\n", "runtime_coef", "=", "he_std", "*", "lrmul", "\n", "", "else", ":", "\n", "        ", "init_std", "=", "he_std", "/", "lrmul", "\n", "runtime_coef", "=", "lrmul", "\n", "\n", "# Create variable.", "\n", "", "init", "=", "tf", ".", "initializers", ".", "random_normal", "(", "0", ",", "init_std", ")", "\n", "return", "tf", ".", "get_variable", "(", "weight_var", ",", "shape", "=", "shape", ",", "initializer", "=", "init", ")", "*", "runtime_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.dense_layer": [[39, 45], ["co_mod_gan.get_weight", "tensorflow.cast", "tensorflow.matmul", "len", "tensorflow.reshape", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.get_weight"], ["", "def", "dense_layer", "(", "x", ",", "fmaps", ",", "gain", "=", "1", ",", "use_wscale", "=", "True", ",", "lrmul", "=", "1", ",", "weight_var", "=", "'weight'", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "shape", ")", ">", "2", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "np", ".", "prod", "(", "[", "d", ".", "value", "for", "d", "in", "x", ".", "shape", "[", "1", ":", "]", "]", ")", "]", ")", "\n", "", "w", "=", "get_weight", "(", "[", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "lrmul", "=", "lrmul", ",", "weight_var", "=", "weight_var", ")", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "return", "tf", ".", "matmul", "(", "x", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.conv2d_layer": [[49, 60], ["co_mod_gan.get_weight", "dnnlib.tflib.ops.upfirdn_2d.upsample_conv_2d", "tensorflow.cast", "dnnlib.tflib.ops.upfirdn_2d.conv_downsample_2d", "tensorflow.nn.conv2d", "tensorflow.cast", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.get_weight", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d.upsample_conv_2d", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d.conv_downsample_2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d"], ["", "def", "conv2d_layer", "(", "x", ",", "fmaps", ",", "kernel", ",", "up", "=", "False", ",", "down", "=", "False", ",", "resample_kernel", "=", "None", ",", "gain", "=", "1", ",", "use_wscale", "=", "True", ",", "lrmul", "=", "1", ",", "weight_var", "=", "'weight'", ")", ":", "\n", "    ", "assert", "not", "(", "up", "and", "down", ")", "\n", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "lrmul", "=", "lrmul", ",", "weight_var", "=", "weight_var", ")", "\n", "if", "up", ":", "\n", "        ", "x", "=", "upsample_conv_2d", "(", "x", ",", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", ",", "data_format", "=", "'NCHW'", ",", "k", "=", "resample_kernel", ")", "\n", "", "elif", "down", ":", "\n", "        ", "x", "=", "conv_downsample_2d", "(", "x", ",", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", ",", "data_format", "=", "'NCHW'", ",", "k", "=", "resample_kernel", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", ",", "data_format", "=", "'NCHW'", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.apply_bias_act": [[64, 67], ["dnnlib.tflib.ops.fused_bias_act.fused_bias_act", "tensorflow.get_variable", "tensorflow.cast", "tensorflow.initializers.zeros"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.ops.fused_bias_act.fused_bias_act"], ["", "def", "apply_bias_act", "(", "x", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "lrmul", "=", "1", ",", "bias_var", "=", "'bias'", ")", ":", "\n", "    ", "b", "=", "tf", ".", "get_variable", "(", "bias_var", ",", "shape", "=", "[", "x", ".", "shape", "[", "1", "]", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ")", "*", "lrmul", "\n", "return", "fused_bias_act", "(", "x", ",", "b", "=", "tf", ".", "cast", "(", "b", ",", "x", ".", "dtype", ")", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.naive_upsample_2d": [[71, 77], ["tensorflow.variable_scope", "tf.tile.shape.as_list", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape"], "function", ["None"], ["", "def", "naive_upsample_2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'NaiveUpsample'", ")", ":", "\n", "        ", "_N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", ".", "as_list", "(", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "C", ",", "H", ",", "1", ",", "W", ",", "1", "]", ")", "\n", "x", "=", "tf", ".", "tile", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "factor", ",", "1", ",", "factor", "]", ")", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "C", ",", "H", "*", "factor", ",", "W", "*", "factor", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.naive_downsample_2d": [[78, 83], ["tensorflow.variable_scope", "tf.reshape.shape.as_list", "tensorflow.reshape", "tensorflow.reduce_mean"], "function", ["None"], ["", "", "def", "naive_downsample_2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'NaiveDownsample'", ")", ":", "\n", "        ", "_N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", ".", "as_list", "(", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "C", ",", "H", "//", "factor", ",", "factor", ",", "W", "//", "factor", ",", "factor", "]", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "[", "3", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.modulated_conv2d_layer": [[87, 127], ["co_mod_gan.get_weight", "co_mod_gan.dense_layer", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "dnnlib.tflib.ops.upfirdn_2d.upsample_conv_2d", "tensorflow.reshape", "co_mod_gan.apply_bias_act", "tensorflow.rsqrt", "tensorflow.transpose", "tensorflow.cast", "dnnlib.tflib.ops.upfirdn_2d.conv_downsample_2d", "tensorflow.nn.conv2d", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.get_weight", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.dense_layer", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d.upsample_conv_2d", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.apply_bias_act", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d.conv_downsample_2d", "home.repos.pwc.inspect_result.plai-group_ipa.net.nn.conv2d"], ["", "", "def", "modulated_conv2d_layer", "(", "x", ",", "y", ",", "fmaps", ",", "kernel", ",", "up", "=", "False", ",", "down", "=", "False", ",", "demodulate", "=", "True", ",", "resample_kernel", "=", "None", ",", "gain", "=", "1", ",", "use_wscale", "=", "True", ",", "lrmul", "=", "1", ",", "fused_modconv", "=", "True", ",", "weight_var", "=", "'weight'", ",", "mod_weight_var", "=", "'mod_weight'", ",", "mod_bias_var", "=", "'mod_bias'", ")", ":", "\n", "    ", "assert", "not", "(", "up", "and", "down", ")", "\n", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "\n", "# Get weight.", "\n", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "lrmul", "=", "lrmul", ",", "weight_var", "=", "weight_var", ")", "\n", "ww", "=", "w", "[", "np", ".", "newaxis", "]", "# [BkkIO] Introduce minibatch dimension.", "\n", "\n", "# Modulate.", "\n", "if", "y", "is", "not", "None", ":", "\n", "        ", "s", "=", "dense_layer", "(", "y", ",", "fmaps", "=", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "weight_var", "=", "mod_weight_var", ")", "# [BI] Transform incoming W to style.", "\n", "s", "=", "apply_bias_act", "(", "s", ",", "bias_var", "=", "mod_bias_var", ")", "+", "1", "# [BI] Add bias (initially 1).", "\n", "ww", "*=", "tf", ".", "cast", "(", "s", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", ",", "w", ".", "dtype", ")", "# [BkkIO] Scale input feature maps.", "\n", "\n", "# Demodulate.", "\n", "if", "demodulate", ":", "\n", "            ", "d", "=", "tf", ".", "rsqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "ww", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "1e-8", ")", "# [BO] Scaling factor.", "\n", "ww", "*=", "d", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "# [BkkIO] Scale output feature maps.", "\n", "\n", "# Reshape/scale input.", "\n", "", "", "if", "fused_modconv", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "1", ",", "-", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ")", "# Fused => reshape minibatch to convolution groups.", "\n", "w", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "ww", ",", "[", "1", ",", "2", ",", "3", ",", "0", ",", "4", "]", ")", ",", "[", "ww", ".", "shape", "[", "1", "]", ",", "ww", ".", "shape", "[", "2", "]", ",", "ww", ".", "shape", "[", "3", "]", ",", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "x", "*=", "tf", ".", "cast", "(", "s", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ",", "x", ".", "dtype", ")", "# [BIhw] Not fused => scale input activations.", "\n", "\n", "# Convolution with optional up/downsampling.", "\n", "", "if", "up", ":", "\n", "        ", "x", "=", "upsample_conv_2d", "(", "x", ",", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", ",", "data_format", "=", "'NCHW'", ",", "k", "=", "resample_kernel", ")", "\n", "", "elif", "down", ":", "\n", "        ", "x", "=", "conv_downsample_2d", "(", "x", ",", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", ",", "data_format", "=", "'NCHW'", ",", "k", "=", "resample_kernel", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", ",", "data_format", "=", "'NCHW'", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "# Reshape/scale output.", "\n", "", "if", "fused_modconv", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "fmaps", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ")", "# Fused => reshape convolution groups back to minibatch.", "\n", "", "elif", "demodulate", ":", "\n", "        ", "x", "*=", "tf", ".", "cast", "(", "d", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ",", "x", ".", "dtype", ")", "# [BOhw] Not fused => scale output activations.", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.minibatch_stddev_layer": [[131, 144], ["tensorflow.minimum", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.tile", "tensorflow.concat", "tensorflow.square", "tensorflow.shape"], "function", ["None"], ["", "def", "minibatch_stddev_layer", "(", "x", ",", "group_size", "=", "4", ",", "num_new_features", "=", "1", ")", ":", "\n", "    ", "group_size", "=", "tf", ".", "minimum", "(", "group_size", ",", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ")", "# Minibatch must be divisible by (or smaller than) group_size.", "\n", "s", "=", "x", ".", "shape", "# [NCHW]  Input shape.", "\n", "y", "=", "tf", ".", "reshape", "(", "x", ",", "[", "group_size", ",", "-", "1", ",", "num_new_features", ",", "s", "[", "1", "]", "//", "num_new_features", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "# [GMncHW] Split minibatch into M groups of size G. Split channels into n channel groups c.", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "tf", ".", "float32", ")", "# [GMncHW] Cast to FP32.", "\n", "y", "-=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "# [GMncHW] Subtract mean over group.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "y", ")", ",", "axis", "=", "0", ")", "# [MncHW]  Calc variance over group.", "\n", "y", "=", "tf", ".", "sqrt", "(", "y", "+", "1e-8", ")", "# [MncHW]  Calc stddev over group.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "[", "2", ",", "3", ",", "4", "]", ",", "keepdims", "=", "True", ")", "# [Mn111]  Take average over fmaps and pixels.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "[", "2", "]", ")", "# [Mn11] Split channels into c channel groups", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "x", ".", "dtype", ")", "# [Mn11]  Cast back to original data type.", "\n", "y", "=", "tf", ".", "tile", "(", "y", ",", "[", "group_size", ",", "1", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "# [NnHW]  Replicate over group and pixels.", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "# [NCHW]  Append as new fmap.", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.G_main": [[150, 245], ["dnnlib.EasyDict", "dnnlib.EasyDict", "isinstance", "tensorflow.get_variable", "tensorflow.get_variable", "components.mapping.get_output_for", "tensorflow.cast", "tensorflow.identity", "dnnlib.Network", "dnnlib.Network", "deps.append", "tensorflow.control_dependencies", "components.synthesis.get_output_for", "numpy.float32", "tensorflow.initializers.zeros", "tensorflow.variable_scope", "tensorflow.reduce_mean", "tensorflow.assign", "tensorflow.variable_scope", "tensorflow.random_normal", "components.mapping.get_output_for", "tensorflow.cast", "tensorflow.cond", "tensorflow.where", "tensorflow.variable_scope", "numpy.ones", "dnnlib.lerp", "tensorflow.assign", "dnnlib.is_tf_expression", "dnnlib.is_tf_expression", "dnnlib.lerp", "tensorflow.control_dependencies", "tensorflow.identity", "tensorflow.shape", "numpy.arange", "tensorflow.broadcast_to", "numpy.arange", "tensorflow.where", "globals", "globals", "tensorflow.cast", "tensorflow.random_uniform", "tensorflow.random_uniform", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.lerp", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.lerp"], ["", "def", "G_main", "(", "\n", "latents_in", ",", "# First input: Latent vectors (Z) [minibatch, latent_size].", "\n", "labels_in", ",", "# Second input: Conditioning labels [minibatch, label_size].", "\n", "images_in", ",", "\n", "masks_in", ",", "\n", "truncation_psi", "=", "0.5", ",", "# Style strength multiplier for the truncation trick. None = disable.", "\n", "truncation_cutoff", "=", "None", ",", "# Number of layers for which to apply the truncation trick. None = disable.", "\n", "truncation_psi_val", "=", "None", ",", "# Value for truncation_psi to use during validation.", "\n", "truncation_cutoff_val", "=", "None", ",", "# Value for truncation_cutoff to use during validation.", "\n", "dlatent_avg_beta", "=", "0.995", ",", "# Decay for tracking the moving average of W during training. None = disable.", "\n", "style_mixing_prob", "=", "0.5", ",", "# Probability of mixing styles during training. None = disable.", "\n", "is_training", "=", "False", ",", "# Network is under training? Enables and disables specific features.", "\n", "is_validation", "=", "False", ",", "# Network is under validation? Chooses which value to use for truncation_psi.", "\n", "return_dlatents", "=", "False", ",", "# Return dlatents in addition to the images?", "\n", "is_template_graph", "=", "False", ",", "# True = template graph constructed by the Network class, False = actual evaluation.", "\n", "components", "=", "dnnlib", ".", "EasyDict", "(", ")", ",", "# Container for sub-networks. Retained between calls.", "\n", "mapping_func", "=", "'G_mapping'", ",", "# Build func name for the mapping network.", "\n", "synthesis_func", "=", "'G_synthesis_co_mod_gan'", ",", "# Build func name for the synthesis network.", "\n", "**", "kwargs", ")", ":", "# Arguments for sub-networks (mapping and synthesis).", "\n", "\n", "# Validate arguments.", "\n", "    ", "assert", "not", "is_training", "or", "not", "is_validation", "\n", "assert", "isinstance", "(", "components", ",", "dnnlib", ".", "EasyDict", ")", "\n", "if", "is_validation", ":", "\n", "        ", "truncation_psi", "=", "truncation_psi_val", "\n", "truncation_cutoff", "=", "truncation_cutoff_val", "\n", "", "if", "is_training", ":", "\n", "        ", "truncation_cutoff", "=", "None", "\n", "", "if", "not", "is_training", "or", "(", "dlatent_avg_beta", "is", "not", "None", "and", "not", "tflib", ".", "is_tf_expression", "(", "dlatent_avg_beta", ")", "and", "dlatent_avg_beta", "==", "1", ")", ":", "\n", "        ", "dlatent_avg_beta", "=", "None", "\n", "", "if", "not", "is_training", "or", "(", "style_mixing_prob", "is", "not", "None", "and", "not", "tflib", ".", "is_tf_expression", "(", "style_mixing_prob", ")", "and", "style_mixing_prob", "<=", "0", ")", ":", "\n", "        ", "style_mixing_prob", "=", "None", "\n", "\n", "# Setup components.", "\n", "", "if", "'synthesis'", "not", "in", "components", ":", "\n", "        ", "components", ".", "synthesis", "=", "tflib", ".", "Network", "(", "'G_synthesis'", ",", "func_name", "=", "globals", "(", ")", "[", "synthesis_func", "]", ",", "**", "kwargs", ")", "\n", "", "num_layers", "=", "components", ".", "synthesis", ".", "input_shape", "[", "1", "]", "\n", "dlatent_size", "=", "components", ".", "synthesis", ".", "input_shape", "[", "2", "]", "\n", "if", "'mapping'", "not", "in", "components", ":", "\n", "        ", "components", ".", "mapping", "=", "tflib", ".", "Network", "(", "'G_mapping'", ",", "func_name", "=", "globals", "(", ")", "[", "mapping_func", "]", ",", "dlatent_broadcast", "=", "num_layers", ",", "**", "kwargs", ")", "\n", "\n", "# Setup variables.", "\n", "", "lod_in", "=", "tf", ".", "get_variable", "(", "'lod'", ",", "initializer", "=", "np", ".", "float32", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "dlatent_avg", "=", "tf", ".", "get_variable", "(", "'dlatent_avg'", ",", "shape", "=", "[", "dlatent_size", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "# Evaluate mapping network.", "\n", "dlatents", "=", "components", ".", "mapping", ".", "get_output_for", "(", "latents_in", ",", "labels_in", ",", "is_training", "=", "is_training", ",", "**", "kwargs", ")", "\n", "dlatents", "=", "tf", ".", "cast", "(", "dlatents", ",", "tf", ".", "float32", ")", "\n", "\n", "# Update moving average of W.", "\n", "if", "dlatent_avg_beta", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'DlatentAvg'", ")", ":", "\n", "            ", "batch_avg", "=", "tf", ".", "reduce_mean", "(", "dlatents", "[", ":", ",", "0", "]", ",", "axis", "=", "0", ")", "\n", "update_op", "=", "tf", ".", "assign", "(", "dlatent_avg", ",", "tflib", ".", "lerp", "(", "batch_avg", ",", "dlatent_avg", ",", "dlatent_avg_beta", ")", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_op", "]", ")", ":", "\n", "                ", "dlatents", "=", "tf", ".", "identity", "(", "dlatents", ")", "\n", "\n", "# Perform style mixing regularization.", "\n", "", "", "", "if", "style_mixing_prob", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'StyleMix'", ")", ":", "\n", "            ", "latents2", "=", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "latents_in", ")", ")", "\n", "dlatents2", "=", "components", ".", "mapping", ".", "get_output_for", "(", "latents2", ",", "labels_in", ",", "is_training", "=", "is_training", ",", "**", "kwargs", ")", "\n", "dlatents2", "=", "tf", ".", "cast", "(", "dlatents2", ",", "tf", ".", "float32", ")", "\n", "layer_idx", "=", "np", ".", "arange", "(", "num_layers", ")", "[", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "cur_layers", "=", "num_layers", "-", "tf", ".", "cast", "(", "lod_in", ",", "tf", ".", "int32", ")", "*", "2", "\n", "mixing_cutoff", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "random_uniform", "(", "[", "]", ",", "0.0", ",", "1.0", ")", "<", "style_mixing_prob", ",", "\n", "lambda", ":", "tf", ".", "random_uniform", "(", "[", "]", ",", "1", ",", "cur_layers", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "lambda", ":", "cur_layers", ")", "\n", "dlatents", "=", "tf", ".", "where", "(", "tf", ".", "broadcast_to", "(", "layer_idx", "<", "mixing_cutoff", ",", "tf", ".", "shape", "(", "dlatents", ")", ")", ",", "dlatents", ",", "dlatents2", ")", "\n", "\n", "# Apply truncation trick.", "\n", "", "", "if", "truncation_psi", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Truncation'", ")", ":", "\n", "            ", "layer_idx", "=", "np", ".", "arange", "(", "num_layers", ")", "[", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "layer_psi", "=", "np", ".", "ones", "(", "layer_idx", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "truncation_cutoff", "is", "None", ":", "\n", "                ", "layer_psi", "*=", "truncation_psi", "\n", "", "else", ":", "\n", "                ", "layer_psi", "=", "tf", ".", "where", "(", "layer_idx", "<", "truncation_cutoff", ",", "layer_psi", "*", "truncation_psi", ",", "layer_psi", ")", "\n", "", "dlatents", "=", "tflib", ".", "lerp", "(", "dlatent_avg", ",", "dlatents", ",", "layer_psi", ")", "\n", "\n", "# Evaluate synthesis network.", "\n", "", "", "deps", "=", "[", "]", "\n", "if", "'lod'", "in", "components", ".", "synthesis", ".", "vars", ":", "\n", "        ", "deps", ".", "append", "(", "tf", ".", "assign", "(", "components", ".", "synthesis", ".", "vars", "[", "'lod'", "]", ",", "lod_in", ")", ")", "\n", "", "with", "tf", ".", "control_dependencies", "(", "deps", ")", ":", "\n", "        ", "images_out", "=", "components", ".", "synthesis", ".", "get_output_for", "(", "dlatents", ",", "images_in", ",", "masks_in", ",", "\n", "is_training", "=", "is_training", ",", "force_clean_graph", "=", "is_template_graph", ",", "**", "kwargs", ")", "\n", "\n", "# Return requested outputs.", "\n", "", "images_out", "=", "tf", ".", "identity", "(", "images_out", ",", "name", "=", "'images_out'", ")", "\n", "if", "return_dlatents", ":", "\n", "        ", "return", "images_out", ",", "dlatents", "\n", "", "return", "images_out", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.G_mapping": [[251, 301], ["tf.cast.set_shape", "tf.cast.set_shape", "tensorflow.cast", "tensorflow.cast", "range", "tensorflow.identity", "tensorflow.as_dtype", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.rsqrt", "tensorflow.variable_scope", "co_mod_gan.apply_bias_act", "tensorflow.variable_scope", "tensorflow.tile", "tensorflow.cast", "co_mod_gan.dense_layer", "tensorflow.initializers.random_normal", "tensorflow.reduce_mean", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.apply_bias_act", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.dense_layer"], ["", "def", "G_mapping", "(", "\n", "latents_in", ",", "# First input: Latent vectors (Z) [minibatch, latent_size].", "\n", "labels_in", ",", "# Second input: Conditioning labels [minibatch, label_size].", "\n", "latent_size", "=", "512", ",", "# Latent vector (Z) dimensionality.", "\n", "label_size", "=", "0", ",", "# Label dimensionality, 0 if no labels.", "\n", "dlatent_size", "=", "512", ",", "# Disentangled latent (W) dimensionality.", "\n", "dlatent_broadcast", "=", "None", ",", "# Output disentangled latent (W) as [minibatch, dlatent_size] or [minibatch, dlatent_broadcast, dlatent_size].", "\n", "mapping_layers", "=", "8", ",", "# Number of mapping layers.", "\n", "mapping_fmaps", "=", "512", ",", "# Number of activations in the mapping layers.", "\n", "mapping_lrmul", "=", "0.01", ",", "# Learning rate multiplier for the mapping layers.", "\n", "mapping_nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "normalize_latents", "=", "True", ",", "# Normalize latent vectors (Z) before feeding them to the mapping layers?", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "act", "=", "mapping_nonlinearity", "\n", "\n", "# Inputs.", "\n", "latents_in", ".", "set_shape", "(", "[", "None", ",", "latent_size", "]", ")", "\n", "labels_in", ".", "set_shape", "(", "[", "None", ",", "label_size", "]", ")", "\n", "latents_in", "=", "tf", ".", "cast", "(", "latents_in", ",", "dtype", ")", "\n", "labels_in", "=", "tf", ".", "cast", "(", "labels_in", ",", "dtype", ")", "\n", "x", "=", "latents_in", "\n", "\n", "# Embed labels and concatenate them with latents.", "\n", "if", "label_size", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'LabelConcat'", ")", ":", "\n", "            ", "w", "=", "tf", ".", "get_variable", "(", "'weight'", ",", "shape", "=", "[", "label_size", ",", "latent_size", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", ")", ")", "\n", "y", "=", "tf", ".", "matmul", "(", "labels_in", ",", "tf", ".", "cast", "(", "w", ",", "dtype", ")", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# Normalize latents.", "\n", "", "", "if", "normalize_latents", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Normalize'", ")", ":", "\n", "            ", "x", "*=", "tf", ".", "rsqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "x", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "1e-8", ")", "\n", "\n", "# Mapping layers.", "\n", "", "", "for", "layer_idx", "in", "range", "(", "mapping_layers", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Dense%d'", "%", "layer_idx", ")", ":", "\n", "            ", "fmaps", "=", "dlatent_size", "if", "layer_idx", "==", "mapping_layers", "-", "1", "else", "mapping_fmaps", "\n", "x", "=", "apply_bias_act", "(", "dense_layer", "(", "x", ",", "fmaps", "=", "fmaps", ",", "lrmul", "=", "mapping_lrmul", ")", ",", "act", "=", "act", ",", "lrmul", "=", "mapping_lrmul", ")", "\n", "\n", "# Broadcast.", "\n", "", "", "if", "dlatent_broadcast", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Broadcast'", ")", ":", "\n", "            ", "x", "=", "tf", ".", "tile", "(", "x", "[", ":", ",", "np", ".", "newaxis", "]", ",", "[", "1", ",", "dlatent_broadcast", ",", "1", "]", ")", "\n", "\n", "# Output.", "\n", "", "", "assert", "x", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "return", "tf", ".", "identity", "(", "x", ",", "name", "=", "'dlatents_out'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.G_synthesis_co_mod_gan": [[305, 468], ["int", "tf.cast.set_shape", "tf.cast.set_shape", "tensorflow.cast", "tensorflow.cast", "tf.cast.set_shape", "tensorflow.cast", "range", "range", "range", "tensorflow.identity", "numpy.log2", "numpy.clip", "noise_inputs.append", "tensorflow.split", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.nn.dropout", "co_mod_gan.modulated_conv2d_layer", "co_mod_gan.apply_bias_act", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.concat", "tensorflow.as_dtype", "int", "tensorflow.variable_scope", "co_mod_gan.apply_bias_act", "tensorflow.variable_scope", "co_mod_gan.apply_bias_act", "tensorflow.variable_scope", "co_mod_gan.apply_bias_act", "tensorflow.get_variable", "tensorflow.variable_scope", "co_mod_gan.G_synthesis_co_mod_gan.E_block"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.log2", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.modulated_conv2d_layer", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.apply_bias_act", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.apply_bias_act", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.apply_bias_act", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.apply_bias_act"], ["", "def", "G_synthesis_co_mod_gan", "(", "\n", "dlatents_in", ",", "# Input: Disentangled latents (W) [minibatch, num_layers, dlatent_size].", "\n", "images_in", ",", "\n", "masks_in", ",", "\n", "dlatent_size", "=", "512", ",", "# Disentangled latent (W) dimensionality.", "\n", "num_channels", "=", "3", ",", "# Number of output color channels.", "\n", "resolution", "=", "1024", ",", "# Output resolution.", "\n", "fmap_base", "=", "16", "<<", "10", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_min", "=", "1", ",", "# Minimum number of feature maps in any layer.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "randomize_noise", "=", "True", ",", "# True = randomize noise inputs every time (non-deterministic), False = read noise inputs from variables.", "\n", "architecture", "=", "'skip'", ",", "# Architecture: 'orig', 'skip', 'resnet'.", "\n", "nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "resample_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations. None = no filtering.", "\n", "fused_modconv", "=", "True", ",", "# Implement modulated_conv2d_layer() as a single fused op?", "\n", "is_training", "=", "False", ",", "# Network is under training? Enables and disables specific features.", "\n", "pix2pix", "=", "False", ",", "\n", "dropout_rate", "=", "0.5", ",", "\n", "cond_mod", "=", "True", ",", "\n", "style_mod", "=", "True", ",", "\n", "noise_injection", "=", "True", ",", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "return", "np", ".", "clip", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_min", ",", "fmap_max", ")", "\n", "assert", "architecture", "in", "[", "'orig'", ",", "'skip'", ",", "'resnet'", "]", "\n", "act", "=", "nonlinearity", "\n", "num_layers", "=", "resolution_log2", "*", "2", "-", "2", "\n", "images_out", "=", "None", "\n", "\n", "images_in", ".", "set_shape", "(", "[", "None", ",", "num_channels", ",", "resolution", ",", "resolution", "]", ")", "\n", "masks_in", ".", "set_shape", "(", "[", "None", ",", "1", ",", "resolution", ",", "resolution", "]", ")", "\n", "images_in", "=", "tf", ".", "cast", "(", "images_in", ",", "dtype", ")", "\n", "masks_in", "=", "tf", ".", "cast", "(", "masks_in", ",", "dtype", ")", "\n", "\n", "def", "E_fromrgb", "(", "x", ",", "y", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'FromRGB'", ")", ":", "\n", "            ", "t", "=", "apply_bias_act", "(", "conv2d_layer", "(", "y", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "1", ")", ",", "act", "=", "act", ")", "\n", "return", "t", "if", "x", "is", "None", "else", "x", "+", "t", "\n", "\n", "", "", "def", "E_block", "(", "x", ",", "res", ",", "E_features", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Conv0'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ")", ",", "act", "=", "act", ")", "\n", "", "E_features", "[", "res", "]", "=", "x", "\n", "with", "tf", ".", "variable_scope", "(", "'Conv1_down'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "kernel", "=", "3", ",", "down", "=", "True", ",", "resample_kernel", "=", "resample_kernel", ")", ",", "act", "=", "act", ")", "\n", "", "return", "x", "\n", "\n", "# Primary inputs.", "\n", "", "dlatents_in", ".", "set_shape", "(", "[", "None", ",", "num_layers", ",", "dlatent_size", "]", ")", "\n", "dlatents_in", "=", "tf", ".", "cast", "(", "dlatents_in", ",", "dtype", ")", "\n", "\n", "# Noise inputs.", "\n", "noise_inputs", "=", "[", "]", "\n", "for", "layer_idx", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "        ", "res", "=", "(", "layer_idx", "+", "5", ")", "//", "2", "\n", "shape", "=", "[", "1", ",", "1", ",", "2", "**", "res", ",", "2", "**", "res", "]", "\n", "noise_inputs", ".", "append", "(", "tf", ".", "get_variable", "(", "'noise%d'", "%", "layer_idx", ",", "shape", "=", "shape", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", ")", ",", "trainable", "=", "False", ")", ")", "\n", "\n", "# Main layers.", "\n", "", "E_features", "=", "{", "}", "\n", "x", "=", "None", "\n", "if", "pix2pix", ":", "\n", "        ", "num_channels", "=", "num_channels", "//", "2", "\n", "_", ",", "y", "=", "tf", ".", "split", "(", "images_in", ",", "2", ",", "axis", "=", "1", ")", "\n", "cond", "=", "y", "\n", "", "else", ":", "\n", "        ", "y", "=", "tf", ".", "concat", "(", "[", "masks_in", "-", "0.5", ",", "images_in", "*", "masks_in", "]", ",", "axis", "=", "1", ")", "\n", "", "for", "res", "in", "range", "(", "resolution_log2", ",", "2", ",", "-", "1", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'E_%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "if", "res", "==", "resolution_log2", ":", "\n", "                ", "x", "=", "E_fromrgb", "(", "x", ",", "y", ",", "res", ")", "\n", "", "x", "=", "E_block", "(", "x", ",", "res", ",", "E_features", ")", "\n", "\n", "# Final layers.", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'E_4x4'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "1", ")", ",", "kernel", "=", "3", ")", ",", "act", "=", "act", ")", "\n", "", "E_features", "[", "2", "]", "=", "x", "\n", "with", "tf", ".", "variable_scope", "(", "'Dense0'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "dense_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "1", ")", "*", "2", ")", ",", "act", "=", "act", ")", "\n", "# if is_training:", "\n", "", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "dropout_rate", ")", "\n", "", "x_global", "=", "x", "\n", "\n", "# Single convolution layer with all the bells and whistles.", "\n", "def", "layer", "(", "x", ",", "layer_idx", ",", "fmaps", ",", "kernel", ",", "up", "=", "False", ")", ":", "\n", "        ", "mod_vector", "=", "[", "]", "\n", "if", "style_mod", ":", "\n", "            ", "mod_vector", ".", "append", "(", "dlatents_in", "[", ":", ",", "layer_idx", "]", ")", "\n", "", "if", "cond_mod", ":", "\n", "            ", "mod_vector", ".", "append", "(", "x_global", ")", "\n", "", "x", "=", "modulated_conv2d_layer", "(", "x", ",", "tf", ".", "concat", "(", "mod_vector", ",", "axis", "=", "1", ")", "if", "mod_vector", "else", "None", ",", "\n", "fmaps", "=", "fmaps", ",", "kernel", "=", "kernel", ",", "up", "=", "up", ",", "resample_kernel", "=", "resample_kernel", ",", "fused_modconv", "=", "fused_modconv", ")", "\n", "if", "noise_injection", ":", "\n", "            ", "if", "randomize_noise", ":", "\n", "                ", "noise", "=", "tf", ".", "random_normal", "(", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "else", ":", "\n", "                ", "noise", "=", "tf", ".", "cast", "(", "noise_inputs", "[", "layer_idx", "]", ",", "x", ".", "dtype", ")", "\n", "", "noise_strength", "=", "tf", ".", "get_variable", "(", "'noise_strength'", ",", "shape", "=", "[", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ")", "\n", "x", "+=", "noise", "*", "tf", ".", "cast", "(", "noise_strength", ",", "x", ".", "dtype", ")", "\n", "", "return", "apply_bias_act", "(", "x", ",", "act", "=", "act", ")", "\n", "\n", "# Building blocks for main layers.", "\n", "", "def", "block", "(", "x", ",", "res", ",", "E_features", ")", ":", "# res = 3..resolution_log2", "\n", "        ", "x_skip", "=", "E_features", "[", "res", "]", "\n", "t", "=", "x", "\n", "with", "tf", ".", "variable_scope", "(", "'Conv0_up'", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "layer_idx", "=", "res", "*", "2", "-", "5", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "up", "=", "True", ")", "\n", "", "x", "=", "x", "+", "x_skip", "\n", "with", "tf", ".", "variable_scope", "(", "'Conv1'", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "layer_idx", "=", "res", "*", "2", "-", "4", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ")", "\n", "", "if", "architecture", "==", "'resnet'", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'Skip'", ")", ":", "\n", "                ", "t", "=", "conv2d_layer", "(", "t", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "1", ",", "up", "=", "True", ",", "resample_kernel", "=", "resample_kernel", ")", "\n", "x", "=", "(", "x", "+", "t", ")", "*", "(", "1", "/", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "", "", "return", "x", "\n", "\n", "", "def", "upsample", "(", "y", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Upsample'", ")", ":", "\n", "            ", "return", "upsample_2d", "(", "y", ",", "k", "=", "resample_kernel", ")", "\n", "\n", "", "", "def", "torgb", "(", "x", ",", "y", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "mod_vector", "=", "[", "]", "\n", "if", "style_mod", ":", "\n", "            ", "mod_vector", ".", "append", "(", "dlatents_in", "[", ":", ",", "res", "*", "2", "-", "3", "]", ")", "\n", "", "if", "cond_mod", ":", "\n", "            ", "mod_vector", ".", "append", "(", "x_global", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'ToRGB'", ")", ":", "\n", "            ", "t", "=", "apply_bias_act", "(", "modulated_conv2d_layer", "(", "x", ",", "tf", ".", "concat", "(", "mod_vector", ",", "axis", "=", "1", ")", "if", "mod_vector", "else", "None", ",", "\n", "fmaps", "=", "num_channels", ",", "kernel", "=", "1", ",", "demodulate", "=", "False", ",", "fused_modconv", "=", "fused_modconv", ")", ")", "\n", "return", "t", "if", "y", "is", "None", "else", "y", "+", "t", "\n", "\n", "# Early layers.", "\n", "", "", "y", "=", "None", "\n", "with", "tf", ".", "variable_scope", "(", "'G_4x4'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Dense'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "dense_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "1", ")", "*", "4", "*", "4", ")", ",", "act", "=", "act", ")", "\n", "", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "nf", "(", "1", ")", ",", "4", ",", "4", "]", ")", "\n", "x", "=", "x", "+", "E_features", "[", "2", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "layer_idx", "=", "0", ",", "fmaps", "=", "nf", "(", "1", ")", ",", "kernel", "=", "3", ")", "\n", "", "if", "architecture", "==", "'skip'", ":", "\n", "            ", "y", "=", "torgb", "(", "x", ",", "y", ",", "2", ")", "\n", "\n", "# Main layers.", "\n", "", "", "for", "res", "in", "range", "(", "3", ",", "resolution_log2", "+", "1", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'G_%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ",", "res", ",", "E_features", ")", "\n", "if", "architecture", "==", "'skip'", ":", "\n", "                ", "y", "=", "upsample", "(", "y", ")", "\n", "", "if", "architecture", "==", "'skip'", "or", "res", "==", "resolution_log2", ":", "\n", "                ", "y", "=", "torgb", "(", "x", ",", "y", ",", "res", ")", "\n", "", "", "", "if", "pix2pix", ":", "\n", "        ", "images_out", "=", "tf", ".", "concat", "(", "[", "y", ",", "cond", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "images_out", "=", "y", "*", "(", "1", "-", "masks_in", ")", "+", "images_in", "*", "masks_in", "\n", "\n", "", "assert", "images_out", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "return", "tf", ".", "identity", "(", "images_out", ",", "name", "=", "'images_out'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.D_co_mod_gan": [[472, 564], ["int", "tf.cast.set_shape", "tf.cast.set_shape", "tf.cast.set_shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "range", "tensorflow.identity", "numpy.log2", "numpy.clip", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.variable_scope", "co_mod_gan.apply_bias_act", "tensorflow.as_dtype", "int", "tensorflow.variable_scope", "co_mod_gan.apply_bias_act", "tensorflow.variable_scope", "co_mod_gan.apply_bias_act", "tensorflow.variable_scope", "co_mod_gan.apply_bias_act", "tensorflow.variable_scope", "dnnlib.tflib.ops.upfirdn_2d.downsample_2d", "tensorflow.variable_scope", "co_mod_gan.G_synthesis_co_mod_gan.block"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.log2", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.apply_bias_act", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.apply_bias_act", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.apply_bias_act", "home.repos.pwc.inspect_result.plai-group_ipa.training.co_mod_gan.apply_bias_act", "home.repos.pwc.inspect_result.plai-group_ipa.ops.upfirdn_2d.downsample_2d"], ["", "def", "D_co_mod_gan", "(", "\n", "images_in", ",", "# First input: Images [minibatch, channel, height, width].", "\n", "labels_in", ",", "# Second input: Labels [minibatch, label_size].", "\n", "masks_in", ",", "\n", "num_channels", "=", "3", ",", "# Number of input color channels. Overridden based on dataset.", "\n", "resolution", "=", "1024", ",", "# Input resolution. Overridden based on dataset.", "\n", "label_size", "=", "0", ",", "# Dimensionality of the labels, 0 if no labels. Overridden based on dataset.", "\n", "fmap_base", "=", "16", "<<", "10", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_min", "=", "1", ",", "# Minimum number of feature maps in any layer.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "architecture", "=", "'resnet'", ",", "# Architecture: 'orig', 'skip', 'resnet'.", "\n", "nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "mbstd_group_size", "=", "4", ",", "# Group size for the minibatch standard deviation layer, 0 = disable.", "\n", "mbstd_num_features", "=", "1", ",", "# Number of features for the minibatch standard deviation layer.", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "resample_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations. None = no filtering.", "\n", "pix2pix", "=", "False", ",", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "return", "np", ".", "clip", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_min", ",", "fmap_max", ")", "\n", "assert", "architecture", "in", "[", "'orig'", ",", "'skip'", ",", "'resnet'", "]", "\n", "act", "=", "nonlinearity", "\n", "\n", "images_in", ".", "set_shape", "(", "[", "None", ",", "num_channels", ",", "resolution", ",", "resolution", "]", ")", "\n", "labels_in", ".", "set_shape", "(", "[", "None", ",", "label_size", "]", ")", "\n", "masks_in", ".", "set_shape", "(", "[", "None", ",", "1", ",", "resolution", ",", "resolution", "]", ")", "\n", "images_in", "=", "tf", ".", "cast", "(", "images_in", ",", "dtype", ")", "\n", "labels_in", "=", "tf", ".", "cast", "(", "labels_in", ",", "dtype", ")", "\n", "masks_in", "=", "tf", ".", "cast", "(", "masks_in", ",", "dtype", ")", "\n", "\n", "# Building blocks for main layers.", "\n", "def", "fromrgb", "(", "x", ",", "y", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'FromRGB'", ")", ":", "\n", "            ", "t", "=", "apply_bias_act", "(", "conv2d_layer", "(", "y", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "1", ")", ",", "act", "=", "act", ")", "\n", "return", "t", "if", "x", "is", "None", "else", "x", "+", "t", "\n", "\n", "", "", "def", "block", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "t", "=", "x", "\n", "with", "tf", ".", "variable_scope", "(", "'Conv0'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ")", ",", "act", "=", "act", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv1_down'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "kernel", "=", "3", ",", "down", "=", "True", ",", "resample_kernel", "=", "resample_kernel", ")", ",", "act", "=", "act", ")", "\n", "", "if", "architecture", "==", "'resnet'", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'Skip'", ")", ":", "\n", "                ", "t", "=", "conv2d_layer", "(", "t", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "kernel", "=", "1", ",", "down", "=", "True", ",", "resample_kernel", "=", "resample_kernel", ")", "\n", "x", "=", "(", "x", "+", "t", ")", "*", "(", "1", "/", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "", "", "return", "x", "\n", "\n", "", "def", "downsample", "(", "y", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Downsample'", ")", ":", "\n", "            ", "return", "downsample_2d", "(", "y", ",", "k", "=", "resample_kernel", ")", "\n", "\n", "# Main layers.", "\n", "", "", "x", "=", "None", "\n", "if", "pix2pix", ":", "\n", "        ", "y", "=", "images_in", "\n", "", "else", ":", "\n", "        ", "y", "=", "tf", ".", "concat", "(", "[", "masks_in", "-", "0.5", ",", "images_in", "]", ",", "axis", "=", "1", ")", "\n", "", "for", "res", "in", "range", "(", "resolution_log2", ",", "2", ",", "-", "1", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "if", "architecture", "==", "'skip'", "or", "res", "==", "resolution_log2", ":", "\n", "                ", "x", "=", "fromrgb", "(", "x", ",", "y", ",", "res", ")", "\n", "", "x", "=", "block", "(", "x", ",", "res", ")", "\n", "if", "architecture", "==", "'skip'", ":", "\n", "                ", "y", "=", "downsample", "(", "y", ")", "\n", "\n", "# Final layers.", "\n", "", "", "", "with", "tf", ".", "variable_scope", "(", "'4x4'", ")", ":", "\n", "        ", "if", "architecture", "==", "'skip'", ":", "\n", "            ", "x", "=", "fromrgb", "(", "x", ",", "y", ",", "2", ")", "\n", "", "if", "mbstd_group_size", ">", "1", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'MinibatchStddev'", ")", ":", "\n", "                ", "x", "=", "minibatch_stddev_layer", "(", "x", ",", "mbstd_group_size", ",", "mbstd_num_features", ")", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "1", ")", ",", "kernel", "=", "3", ")", ",", "act", "=", "act", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Dense0'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "dense_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "0", ")", ")", ",", "act", "=", "act", ")", "\n", "\n", "# Output layer with label conditioning from \"Which Training Methods for GANs do actually Converge?\"", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'Output'", ")", ":", "\n", "        ", "x", "=", "apply_bias_act", "(", "dense_layer", "(", "x", ",", "fmaps", "=", "max", "(", "labels_in", ".", "shape", "[", "1", "]", ",", "1", ")", ")", ")", "\n", "if", "labels_in", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "            ", "x", "=", "tf", ".", "reduce_sum", "(", "x", "*", "labels_in", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "", "scores_out", "=", "x", "\n", "\n", "# Output.", "\n", "assert", "scores_out", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "scores_out", "=", "tf", ".", "identity", "(", "scores_out", ",", "name", "=", "'scores_out'", ")", "\n", "return", "scores_out", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.MaskDataset.__init__": [[24, 28], ["torch.utils.data.Dataset.__init__", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["\n", "# in test mode, there's a one-to-one relationship between mask and image", "\n", "# masks are loaded non random", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.MaskDataset.__len__": [[29, 31], ["None"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.MaskDataset.__getitem__": [[32, 34], ["sample_mask().numpy", "dataset.sample_mask"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask"], ["        ", "try", ":", "\n", "            ", "item", "=", "self", ".", "load_item", "(", "index", ")", "\n", "", "except", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.ResizedDataset.__init__": [[43, 47], ["torch.utils.data.TensorDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["            ", "img", "=", "self", ".", "resize", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "resize", "(", "img", ",", "True", ",", "True", ",", "True", ")", "\n", "# load mask", "\n", "", "mask", "=", "self", ".", "load_mask", "(", "img", ",", "index", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.ResizedDataset.__len__": [[48, 50], ["len"], "methods", ["None"], ["# augment data", "\n", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "augment", "and", "np", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ")", ">", "0", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.ResizedDataset.__getitem__": [[51, 54], ["torchvision.transforms.functional.resize"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize"], ["                ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", "...", "]", "\n", "", "if", "self", ".", "augment", "and", "np", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ")", ">", "0", ":", "\n", "                ", "mask", "=", "mask", "[", ":", ",", ":", ":", "-", "1", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.__init__": [[58, 102], ["list", "int", "data.cifar10", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "numpy.log2", "dataset.MaskDataset", "dataset.infinite_loader", "data.ffhq256", "torchvision.Compose", "torchvision.Compose", "torch.as_tensor", "torch.as_tensor", "torch.utils.data.DataLoader", "data.xray", "numpy.transpose", "numpy.transpose", "data.imagenet64", "torchvision.ToTensor", "torchvision.Lambda", "torchvision.ToTensor", "torchvision.Lambda"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.cifar10", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.log2", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.infinite_loader", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.ffhq256", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.xray", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.imagenet64"], ["        ", "imgh", ",", "imgw", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "#external mask, random order", "\n", "if", "self", ".", "mask_type", "==", "0", ":", "\n", "            ", "mask_index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "mask_data", ")", "-", "1", ")", "\n", "mask", "=", "imread", "(", "self", ".", "mask_data", "[", "mask_index", "]", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "# threshold due to interpolation", "\n", "mask", "=", "self", ".", "resize", "(", "mask", ",", "False", ")", "\n", "if", "self", ".", "mask_reverse", ":", "\n", "                ", "return", "(", "1", "-", "mask", ")", "*", "255", "\n", "", "else", ":", "\n", "                ", "return", "mask", "*", "255", "\n", "#generate random mask", "\n", "", "", "if", "self", ".", "mask_type", "==", "1", ":", "\n", "            ", "mask", "=", "1", "-", "generate_stroke_mask", "(", "[", "self", ".", "target_size", ",", "self", ".", "target_size", "]", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "mask", "=", "self", ".", "resize", "(", "mask", ",", "False", ")", "\n", "return", "mask", "\n", "\n", "#external mask, fixed order", "\n", "", "if", "self", ".", "mask_type", "==", "2", ":", "\n", "            ", "mask_index", "=", "index", "\n", "mask", "=", "imread", "(", "self", ".", "mask_data", "[", "mask_index", "]", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "# threshold due to interpolation", "\n", "mask", "=", "self", ".", "resize", "(", "mask", ",", "False", ")", "\n", "if", "self", ".", "mask_reverse", ":", "\n", "                ", "return", "(", "1", "-", "mask", ")", "*", "255", "\n", "", "else", ":", "\n", "                ", "return", "mask", "*", "255", "\n", "\n", "", "", "", "def", "resize", "(", "self", ",", "img", ",", "aspect_ratio_kept", "=", "True", ",", "fixed_size", "=", "False", ",", "centerCrop", "=", "False", ")", ":", "\n", "\n", "        ", "if", "aspect_ratio_kept", ":", "\n", "            ", "imgh", ",", "imgw", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "side", "=", "np", ".", "minimum", "(", "imgh", ",", "imgw", ")", "\n", "if", "fixed_size", ":", "\n", "                ", "if", "centerCrop", ":", "\n", "# center crop", "\n", "                    ", "j", "=", "(", "imgh", "-", "side", ")", "//", "2", "\n", "i", "=", "(", "imgw", "-", "side", ")", "//", "2", "\n", "img", "=", "img", "[", "j", ":", "j", "+", "side", ",", "i", ":", "i", "+", "side", ",", "...", "]", "\n", "", "else", ":", "\n", "                    ", "j", "=", "(", "imgh", "-", "side", ")", "\n", "i", "=", "(", "imgw", "-", "side", ")", "\n", "h_start", "=", "0", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset._iterator": [[103, 107], ["x[].contiguous().numpy", "x[].contiguous"], "methods", ["None"], ["w_start", "=", "0", "\n", "if", "j", "!=", "0", ":", "\n", "                        ", "h_start", "=", "random", ".", "randrange", "(", "0", ",", "j", ")", "\n", "", "if", "i", "!=", "0", ":", "\n", "                        ", "w_start", "=", "random", ".", "randrange", "(", "0", ",", "i", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.close": [[108, 110], ["None"], "methods", ["None"], ["", "img", "=", "img", "[", "h_start", ":", "h_start", "+", "side", ",", "w_start", ":", "w_start", "+", "side", ",", "...", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "side", "<=", "self", ".", "target_size", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.configure": [[112, 131], ["int", "int", "numpy.floor", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.NewDataset._iterator", "dataset.NewDataset._iterator", "next", "iter"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset._iterator", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset._iterator"], ["i", "=", "(", "imgw", "-", "side", ")", "\n", "h_start", "=", "0", "\n", "w_start", "=", "0", "\n", "if", "j", "!=", "0", ":", "\n", "                        ", "h_start", "=", "random", ".", "randrange", "(", "0", ",", "j", ")", "\n", "", "if", "i", "!=", "0", ":", "\n", "                        ", "w_start", "=", "random", ".", "randrange", "(", "0", ",", "i", ")", "\n", "", "img", "=", "img", "[", "h_start", ":", "h_start", "+", "side", ",", "w_start", ":", "w_start", "+", "side", ",", "...", "]", "\n", "", "else", ":", "\n", "                    ", "side", "=", "random", ".", "randrange", "(", "self", ".", "target_size", ",", "side", ")", "\n", "j", "=", "(", "imgh", "-", "side", ")", "\n", "i", "=", "(", "imgw", "-", "side", ")", "\n", "h_start", "=", "random", ".", "randrange", "(", "0", ",", "j", ")", "\n", "w_start", "=", "random", ".", "randrange", "(", "0", ",", "i", ")", "\n", "img", "=", "img", "[", "h_start", ":", "h_start", "+", "side", ",", "w_start", ":", "w_start", "+", "side", ",", "...", "]", "\n", "# img = scipy.misc.imresize(img, [self.target_size, self.target_size])", "\n", "", "", "", "img", "=", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "img", ")", ".", "resize", "(", "size", "=", "(", "self", ".", "target_size", ",", "self", ".", "target_size", ")", ")", ")", "\n", "return", "img", "\n", "\n", "", "def", "to_tensor", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_tf": [[133, 137], ["dataset.NewDataset.get_minibatch_np", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_np"], ["img_t", "=", "F", ".", "to_tensor", "(", "img", ")", ".", "float", "(", ")", "\n", "return", "img_t", "\n", "\n", "", "def", "load_list", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "isinstance", "(", "path", ",", "str", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_val_tf": [[138, 142], ["dataset.NewDataset.get_minibatch_val_np", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_val_np"], ["            ", "if", "path", "[", "-", "3", ":", "]", "==", "\"txt\"", ":", "\n", "                ", "line", "=", "open", "(", "path", ",", "\"r\"", ")", "\n", "lines", "=", "line", ".", "readlines", "(", ")", "\n", "file_names", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_np": [[144, 150], ["dataset.NewDataset.configure", "next", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.configure"], ["", "return", "file_names", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "                ", "path", "=", "list", "(", "glob", ".", "glob", "(", "path", "+", "'/*.jpg'", ")", ")", "+", "list", "(", "glob", ".", "glob", "(", "path", "+", "'/*.png'", ")", ")", "\n", "path", ".", "sort", "(", ")", "\n", "return", "path", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "                ", "try", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_val_np": [[151, 157], ["dataset.NewDataset.configure", "next", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.configure"], ["                    ", "return", "np", ".", "genfromtxt", "(", "path", ",", "dtype", "=", "np", ".", "str", ",", "encoding", "=", "'utf-8'", ")", "\n", "", "except", ":", "\n", "                    ", "return", "[", "path", "]", "\n", "", "", "", "return", "[", "]", "\n", "\n", "", "", "def", "generate_stroke_mask", "(", "im_size", ",", "max_parts", "=", "15", ",", "maxVertex", "=", "25", ",", "maxLength", "=", "100", ",", "maxBrushWidth", "=", "24", ",", "maxAngle", "=", "360", ")", ":", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "(", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_masks_tf": [[159, 161], ["tensorflow.convert_to_tensor", "dataset.NewDataset.get_random_masks_np"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_masks_np"], ["for", "i", "in", "range", "(", "parts", ")", ":", "\n", "        ", "mask", "=", "mask", "+", "np_free_form_mask", "(", "maxVertex", ",", "maxLength", ",", "maxBrushWidth", ",", "maxAngle", ",", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", ")", "\n", "", "mask", "=", "np", ".", "minimum", "(", "mask", ",", "1.0", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_masks_np": [[163, 178], ["dataset.NewDataset.configure", "[].numpy", "sample_mask().numpy", "next", "mask_parts.append", "len", "dataset.sample_mask", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.configure", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask"], ["return", "mask", "\n", "\n", "", "def", "np_free_form_mask", "(", "maxVertex", ",", "maxLength", ",", "maxBrushWidth", ",", "maxAngle", ",", "h", ",", "w", ")", ":", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ",", "1", ")", ",", "np", ".", "float32", ")", "\n", "numVertex", "=", "np", ".", "random", ".", "randint", "(", "maxVertex", "+", "1", ")", "\n", "startY", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "startX", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "brushWidth", "=", "0", "\n", "for", "i", "in", "range", "(", "numVertex", ")", ":", "\n", "        ", "angle", "=", "np", ".", "random", ".", "randint", "(", "maxAngle", "+", "1", ")", "\n", "angle", "=", "angle", "/", "360.0", "*", "2", "*", "np", ".", "pi", "\n", "if", "i", "%", "2", "==", "0", ":", "\n", "            ", "angle", "=", "2", "*", "np", ".", "pi", "-", "angle", "\n", "", "length", "=", "np", ".", "random", ".", "randint", "(", "maxLength", "+", "1", ")", "\n", "brushWidth", "=", "np", ".", "random", ".", "randint", "(", "10", ",", "maxBrushWidth", "+", "1", ")", "//", "2", "*", "2", "\n", "nextY", "=", "startY", "+", "length", "*", "np", ".", "cos", "(", "angle", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_labels_tf": [[181, 187], ["tensorflow.zeros"], "methods", ["None"], ["nextX", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "nextX", ",", "w", "-", "1", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "cv2", ".", "line", "(", "mask", ",", "(", "startY", ",", "startX", ")", ",", "(", "nextY", ",", "nextX", ")", ",", "1", ",", "brushWidth", ")", "\n", "cv2", ".", "circle", "(", "mask", ",", "(", "startY", ",", "startX", ")", ",", "brushWidth", "//", "2", ",", "2", ")", "\n", "startY", ",", "startX", "=", "nextY", ",", "nextX", "\n", "", "cv2", ".", "circle", "(", "mask", ",", "(", "startY", ",", "startX", ")", ",", "brushWidth", "//", "2", ",", "2", ")", "\n", "return", "mask", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.sample_mask": [[15, 21], ["x.unsqueeze.unsqueeze", "x.unsqueeze.contiguous", "vae_helpers.sample_part_images", "batch.permute"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_part_images"], ["        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "data", "=", "self", ".", "load_list", "(", "image_path", ")", "\n", "self", ".", "mask_data", "=", "self", ".", "load_list", "(", "mask_path", ")", "\n", "\n", "self", ".", "target_size", "=", "target_size", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.infinite_loader": [[36, 40], ["None"], "function", ["None"], ["item", "=", "self", ".", "load_item", "(", "0", ")", "\n", "\n", "", "return", "item", "\n", "\n", "", "def", "load_item", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.loss.G_masked_logistic_ns_l1": [[15, 27], ["tensorflow.random_normal", "training_set.get_random_labels_tf", "G.get_output_for", "D.get_output_for", "tensorflow.nn.softplus", "dnnlib.tflib.autosummary.autosummary", "tensorflow.reduce_mean", "dnnlib.tflib.autosummary.autosummary", "tensorflow.abs"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_labels_tf", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary"], ["def", "G_masked_logistic_ns_l1", "(", "G", ",", "D", ",", "opt", ",", "training_set", ",", "minibatch_size", ",", "reals", ",", "masks", ",", "l1_weight", "=", "0", ")", ":", "\n", "    ", "_", "=", "opt", "\n", "latents", "=", "tf", ".", "random_normal", "(", "[", "minibatch_size", "]", "+", "G", ".", "input_shapes", "[", "0", "]", "[", "1", ":", "]", ")", "\n", "labels", "=", "training_set", ".", "get_random_labels_tf", "(", "minibatch_size", ")", "\n", "fake_images_out", "=", "G", ".", "get_output_for", "(", "latents", ",", "labels", ",", "reals", ",", "masks", ",", "is_training", "=", "True", ")", "\n", "fake_scores_out", "=", "D", ".", "get_output_for", "(", "fake_images_out", ",", "labels", ",", "masks", ",", "is_training", "=", "True", ")", "\n", "logistic_loss", "=", "tf", ".", "nn", ".", "softplus", "(", "-", "fake_scores_out", ")", "# -log(sigmoid(fake_scores_out))", "\n", "logistic_loss", "=", "autosummary", "(", "'Loss/logistic_loss'", ",", "logistic_loss", ")", "\n", "l1_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "fake_images_out", "-", "reals", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "l1_loss", "=", "autosummary", "(", "'Loss/l1_loss'", ",", "l1_loss", ")", "\n", "loss", "=", "logistic_loss", "+", "l1_loss", "*", "l1_weight", "\n", "return", "loss", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.loss.D_masked_logistic_r1": [[28, 45], ["tensorflow.random_normal", "G.get_output_for", "D.get_output_for", "D.get_output_for", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "tensorflow.nn.softplus", "tensorflow.nn.softplus", "tensorflow.name_scope", "tensorflow.reduce_sum", "dnnlib.tflib.autosummary.autosummary", "tensorflow.gradients", "tensorflow.square", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.autosummary.autosummary"], ["", "def", "D_masked_logistic_r1", "(", "G", ",", "D", ",", "opt", ",", "training_set", ",", "minibatch_size", ",", "reals", ",", "labels", ",", "masks", ",", "gamma", "=", "10.0", ")", ":", "\n", "    ", "_", "=", "opt", ",", "training_set", "\n", "latents", "=", "tf", ".", "random_normal", "(", "[", "minibatch_size", "]", "+", "G", ".", "input_shapes", "[", "0", "]", "[", "1", ":", "]", ")", "\n", "fake_images_out", "=", "G", ".", "get_output_for", "(", "latents", ",", "labels", ",", "reals", ",", "masks", ",", "is_training", "=", "True", ")", "\n", "real_scores_out", "=", "D", ".", "get_output_for", "(", "reals", ",", "labels", ",", "masks", ",", "is_training", "=", "True", ")", "\n", "fake_scores_out", "=", "D", ".", "get_output_for", "(", "fake_images_out", ",", "labels", ",", "masks", ",", "is_training", "=", "True", ")", "\n", "real_scores_out", "=", "autosummary", "(", "'Loss/scores/real'", ",", "real_scores_out", ")", "\n", "fake_scores_out", "=", "autosummary", "(", "'Loss/scores/fake'", ",", "fake_scores_out", ")", "\n", "loss", "=", "tf", ".", "nn", ".", "softplus", "(", "fake_scores_out", ")", "# -log(1-sigmoid(fake_scores_out))", "\n", "loss", "+=", "tf", ".", "nn", ".", "softplus", "(", "-", "real_scores_out", ")", "# -log(sigmoid(real_scores_out))", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'GradientPenalty'", ")", ":", "\n", "        ", "real_grads", "=", "tf", ".", "gradients", "(", "tf", ".", "reduce_sum", "(", "real_scores_out", ")", ",", "[", "reals", "]", ")", "[", "0", "]", "\n", "gradient_penalty", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "real_grads", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "gradient_penalty", "=", "autosummary", "(", "'Loss/gradient_penalty'", ",", "gradient_penalty", ")", "\n", "reg", "=", "gradient_penalty", "*", "(", "gamma", "*", "0.5", ")", "\n", "", "return", "loss", ",", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.open_file_or_url": [[23, 27], ["dnnlib.util.is_url", "open", "dnnlib.util.open_url"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.is_url", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.open_url"], ["def", "open_file_or_url", "(", "file_or_url", ")", ":", "\n", "    ", "if", "dnnlib", ".", "util", ".", "is_url", "(", "file_or_url", ")", ":", "\n", "        ", "return", "dnnlib", ".", "util", ".", "open_url", "(", "file_or_url", ",", "cache_dir", "=", "'.stylegan2-cache'", ")", "\n", "", "return", "open", "(", "file_or_url", ",", "'rb'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.load_pkl": [[28, 31], ["misc.open_file_or_url", "pickle.load"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.misc.open_file_or_url"], ["", "def", "load_pkl", "(", "file_or_url", ")", ":", "\n", "    ", "with", "open_file_or_url", "(", "file_or_url", ")", "as", "file", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "file", ",", "encoding", "=", "'latin1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.save_pkl": [[32, 35], ["open", "pickle.dump"], "function", ["None"], ["", "", "def", "save_pkl", "(", "obj", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "file", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.adjust_dynamic_range": [[39, 45], ["numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["None"], ["", "", "def", "adjust_dynamic_range", "(", "data", ",", "drange_in", ",", "drange_out", ")", ":", "\n", "    ", "if", "drange_in", "!=", "drange_out", ":", "\n", "        ", "scale", "=", "(", "np", ".", "float32", "(", "drange_out", "[", "1", "]", ")", "-", "np", ".", "float32", "(", "drange_out", "[", "0", "]", ")", ")", "/", "(", "np", ".", "float32", "(", "drange_in", "[", "1", "]", ")", "-", "np", ".", "float32", "(", "drange_in", "[", "0", "]", ")", ")", "\n", "bias", "=", "(", "np", ".", "float32", "(", "drange_out", "[", "0", "]", ")", "-", "np", ".", "float32", "(", "drange_in", "[", "0", "]", ")", "*", "scale", ")", "\n", "data", "=", "data", "*", "scale", "+", "bias", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.create_image_grid": [[46, 64], ["numpy.zeros", "range", "numpy.split", "tuple", "max", "max", "int", "list", "numpy.ceil", "numpy.sqrt"], "function", ["None"], ["", "def", "create_image_grid", "(", "images", ",", "grid_size", "=", "None", ",", "pix2pix", "=", "False", ")", ":", "\n", "    ", "if", "pix2pix", ":", "\n", "        ", "images", ",", "_", "=", "np", ".", "split", "(", "images", ",", "2", ",", "axis", "=", "1", ")", "\n", "", "assert", "images", ".", "ndim", "==", "3", "or", "images", ".", "ndim", "==", "4", "\n", "num", ",", "img_w", ",", "img_h", "=", "images", ".", "shape", "[", "0", "]", ",", "images", ".", "shape", "[", "-", "1", "]", ",", "images", ".", "shape", "[", "-", "2", "]", "\n", "\n", "if", "grid_size", "is", "not", "None", ":", "\n", "        ", "grid_w", ",", "grid_h", "=", "tuple", "(", "grid_size", ")", "\n", "", "else", ":", "\n", "        ", "grid_w", "=", "max", "(", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "num", ")", ")", ")", ",", "1", ")", "\n", "grid_h", "=", "max", "(", "(", "num", "-", "1", ")", "//", "grid_w", "+", "1", ",", "1", ")", "\n", "\n", "", "grid", "=", "np", ".", "zeros", "(", "list", "(", "images", ".", "shape", "[", "1", ":", "-", "2", "]", ")", "+", "[", "grid_h", "*", "img_h", ",", "grid_w", "*", "img_w", "]", ",", "dtype", "=", "images", ".", "dtype", ")", "\n", "for", "idx", "in", "range", "(", "num", ")", ":", "\n", "        ", "x", "=", "(", "idx", "%", "grid_w", ")", "*", "img_w", "\n", "y", "=", "(", "idx", "//", "grid_w", ")", "*", "img_h", "\n", "grid", "[", "...", ",", "y", ":", "y", "+", "img_h", ",", "x", ":", "x", "+", "img_w", "]", "=", "images", "[", "idx", "]", "\n", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.convert_to_pil_image": [[65, 78], ["PIL.Image.fromarray", "PIL.Image.fromarray", "misc.adjust_dynamic_range", "numpy.rint().clip().astype", "image.transpose.transpose", "numpy.rint().clip", "numpy.rint"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.misc.adjust_dynamic_range"], ["", "def", "convert_to_pil_image", "(", "image", ",", "drange", "=", "[", "0", ",", "1", "]", ")", ":", "\n", "    ", "assert", "image", ".", "ndim", "==", "2", "or", "image", ".", "ndim", "==", "3", "\n", "if", "image", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "image", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "image", "=", "image", "[", "0", "]", "# grayscale CHW => HW", "\n", "", "else", ":", "\n", "            ", "image", "=", "image", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "# CHW -> HWC", "\n", "\n", "", "", "if", "drange", "is", "not", "None", ":", "\n", "        ", "image", "=", "adjust_dynamic_range", "(", "image", ",", "drange", ",", "[", "0", ",", "255", "]", ")", "\n", "image", "=", "np", ".", "rint", "(", "image", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "fmt", "=", "'RGB'", "if", "image", ".", "ndim", "==", "3", "else", "'L'", "\n", "return", "PIL", ".", "Image", ".", "fromarray", "(", "image", ",", "fmt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.convert_to_np_image": [[79, 91], ["misc.adjust_dynamic_range", "numpy.rint().clip().astype", "image.transpose.transpose", "numpy.rint().clip", "numpy.rint"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.misc.adjust_dynamic_range"], ["", "def", "convert_to_np_image", "(", "image", ",", "drange", "=", "[", "0", ",", "1", "]", ")", ":", "\n", "    ", "assert", "image", ".", "ndim", "==", "2", "or", "image", ".", "ndim", "==", "3", "\n", "if", "image", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "image", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "image", "=", "image", "[", "0", "]", "# grayscale CHW => HW", "\n", "", "else", ":", "\n", "            ", "image", "=", "image", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "# CHW -> HWC", "\n", "\n", "", "", "if", "drange", "is", "not", "None", ":", "\n", "        ", "image", "=", "adjust_dynamic_range", "(", "image", ",", "drange", ",", "[", "0", ",", "255", "]", ")", "\n", "image", "=", "np", ".", "rint", "(", "image", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.save_image_grid": [[92, 94], ["convert_to_pil_image().save", "misc.convert_to_pil_image", "misc.create_image_grid"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.convert_to_pil_image", "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.create_image_grid"], ["", "def", "save_image_grid", "(", "images", ",", "filename", ",", "drange", "=", "[", "0", ",", "1", "]", ",", "grid_size", "=", "None", ",", "pix2pix", "=", "False", ")", ":", "\n", "    ", "convert_to_pil_image", "(", "create_image_grid", "(", "images", ",", "grid_size", ",", "pix2pix", "=", "pix2pix", ")", ",", "drange", ")", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.apply_mirror_augment": [[95, 100], ["numpy.array", "numpy.random.rand"], "function", ["None"], ["", "def", "apply_mirror_augment", "(", "minibatch", ")", ":", "\n", "    ", "mask", "=", "np", ".", "random", ".", "rand", "(", "minibatch", ".", "shape", "[", "0", "]", ")", "<", "0.5", "\n", "minibatch", "=", "np", ".", "array", "(", "minibatch", ")", "\n", "minibatch", "[", "mask", "]", "=", "minibatch", "[", "mask", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "minibatch", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.parse_config_for_previous_run": [[104, 109], ["pickle.load.get", "dict", "open", "pickle.load", "os.path.join", "pickle.load.get"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get"], ["", "def", "parse_config_for_previous_run", "(", "run_dir", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "run_dir", ",", "'submit_config.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "data", "=", "data", ".", "get", "(", "'run_func_kwargs'", ",", "{", "}", ")", "\n", "return", "dict", "(", "train", "=", "data", ",", "dataset", "=", "data", ".", "get", "(", "'dataset_args'", ",", "{", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.misc.setup_snapshot_image_grid": [[114, 165], ["numpy.zeros", "numpy.zeros", "dict", "training_set.get_random_masks_np", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "training_set.get_minibatch_val_np", "range", "enumerate", "training_set.get_minibatch_val_np", "numpy.argmax", "enumerate", "range", "len", "blocks[].append", "all", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_random_masks_np", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_val_np", "home.repos.pwc.inspect_result.plai-group_ipa.training.dataset.NewDataset.get_minibatch_val_np"], ["", "def", "setup_snapshot_image_grid", "(", "training_set", ",", "\n", "size", "=", "'1080p'", ",", "# '1080p' = to be viewed on 1080p display, '4k' = to be viewed on 4k display.", "\n", "layout", "=", "'random'", ")", ":", "# 'random' = grid contents are selected randomly, 'row_per_class' = each row corresponds to one class label.", "\n", "\n", "# Select size.", "\n", "    ", "gw", "=", "1", ";", "gh", "=", "1", "\n", "if", "size", "==", "'1080p'", ":", "\n", "        ", "gw", "=", "np", ".", "clip", "(", "1920", "//", "training_set", ".", "shape", "[", "2", "]", ",", "3", ",", "32", ")", "\n", "gh", "=", "np", ".", "clip", "(", "1080", "//", "training_set", ".", "shape", "[", "1", "]", ",", "2", ",", "32", ")", "\n", "", "if", "size", "==", "'4k'", ":", "\n", "        ", "gw", "=", "np", ".", "clip", "(", "3840", "//", "training_set", ".", "shape", "[", "2", "]", ",", "7", ",", "32", ")", "\n", "gh", "=", "np", ".", "clip", "(", "2160", "//", "training_set", ".", "shape", "[", "1", "]", ",", "4", ",", "32", ")", "\n", "", "if", "size", "==", "'8k'", ":", "\n", "        ", "gw", "=", "np", ".", "clip", "(", "7680", "//", "training_set", ".", "shape", "[", "2", "]", ",", "7", ",", "32", ")", "\n", "gh", "=", "np", ".", "clip", "(", "4320", "//", "training_set", ".", "shape", "[", "1", "]", ",", "4", ",", "32", ")", "\n", "\n", "# Initialize data arrays.", "\n", "", "reals", "=", "np", ".", "zeros", "(", "[", "gw", "*", "gh", "]", "+", "training_set", ".", "shape", ",", "dtype", "=", "training_set", ".", "dtype", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "[", "gw", "*", "gh", ",", "training_set", ".", "label_size", "]", ",", "dtype", "=", "training_set", ".", "label_dtype", ")", "\n", "\n", "# Random layout.", "\n", "if", "layout", "==", "'random'", ":", "\n", "        ", "reals", "[", ":", "]", ",", "labels", "[", ":", "]", "=", "training_set", ".", "get_minibatch_val_np", "(", "gw", "*", "gh", ")", "\n", "\n", "# Class-conditional layouts.", "\n", "", "class_layouts", "=", "dict", "(", "row_per_class", "=", "[", "gw", ",", "1", "]", ",", "col_per_class", "=", "[", "1", ",", "gh", "]", ",", "class4x4", "=", "[", "4", ",", "4", "]", ")", "\n", "if", "layout", "in", "class_layouts", ":", "\n", "        ", "bw", ",", "bh", "=", "class_layouts", "[", "layout", "]", "\n", "nw", "=", "(", "gw", "-", "1", ")", "//", "bw", "+", "1", "\n", "nh", "=", "(", "gh", "-", "1", ")", "//", "bh", "+", "1", "\n", "blocks", "=", "[", "[", "]", "for", "_i", "in", "range", "(", "nw", "*", "nh", ")", "]", "\n", "for", "_iter", "in", "range", "(", "1000000", ")", ":", "\n", "            ", "real", ",", "label", "=", "training_set", ".", "get_minibatch_val_np", "(", "1", ")", "\n", "idx", "=", "np", ".", "argmax", "(", "label", "[", "0", "]", ")", "\n", "while", "idx", "<", "len", "(", "blocks", ")", "and", "len", "(", "blocks", "[", "idx", "]", ")", ">=", "bw", "*", "bh", ":", "\n", "                ", "idx", "+=", "training_set", ".", "label_size", "\n", "", "if", "idx", "<", "len", "(", "blocks", ")", ":", "\n", "                ", "blocks", "[", "idx", "]", ".", "append", "(", "(", "real", ",", "label", ")", ")", "\n", "if", "all", "(", "len", "(", "block", ")", ">=", "bw", "*", "bh", "for", "block", "in", "blocks", ")", ":", "\n", "                    ", "break", "\n", "", "", "", "for", "i", ",", "block", "in", "enumerate", "(", "blocks", ")", ":", "\n", "            ", "for", "j", ",", "(", "real", ",", "label", ")", "in", "enumerate", "(", "block", ")", ":", "\n", "                ", "x", "=", "(", "i", "%", "nw", ")", "*", "bw", "+", "j", "%", "bw", "\n", "y", "=", "(", "i", "//", "nw", ")", "*", "bh", "+", "j", "//", "bw", "\n", "if", "x", "<", "gw", "and", "y", "<", "gh", ":", "\n", "                    ", "reals", "[", "x", "+", "y", "*", "gw", "]", "=", "real", "[", "0", "]", "\n", "labels", "[", "x", "+", "y", "*", "gw", "]", "=", "label", "[", "0", "]", "\n", "\n", "", "", "", "", "masks", "=", "training_set", ".", "get_random_masks_np", "(", "gw", "*", "gh", ")", "\n", "\n", "return", "(", "gw", ",", "gh", ")", ",", "reals", ",", "labels", ",", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.mask_generator.RandomBrush": [[8, 61], ["PIL.Image.new", "range", "numpy.asarray", "math.sqrt", "numpy.random.randint", "numpy.random.randint", "range", "vertex.append", "range", "PIL.ImageDraw.Draw", "int", "ImageDraw.Draw.line", "numpy.random.random", "numpy.flip", "numpy.random.random", "numpy.flip", "numpy.random.uniform", "numpy.random.uniform", "numpy.clip", "numpy.clip", "numpy.clip", "vertex.append", "numpy.random.uniform", "ImageDraw.Draw.ellipse", "numpy.random.random", "np.flip.transpose", "numpy.random.random", "np.flip.transpose", "angles.append", "angles.append", "int", "int", "numpy.random.normal", "numpy.random.uniform", "numpy.random.randint", "numpy.random.randint", "int", "int", "numpy.random.uniform", "math.cos", "math.sin"], "function", ["None"], ["\n", "\n", "def", "fast_clip", "(", "ar", ",", "a", ",", "b", ")", ":", "\n", "    ", "if", "isinstance", "(", "ar", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "ar", "[", "np", ".", "less", "(", "ar", ",", "a", ")", "]", "=", "a", "\n", "ar", "[", "np", ".", "greater", "(", "ar", ",", "b", ")", "]", "=", "b", "\n", "return", "ar", "\n", "", "else", ":", "\n", "        ", "if", "ar", "<", "a", ":", "\n", "            ", "return", "a", "\n", "", "if", "ar", ">", "b", ":", "\n", "            ", "return", "b", "\n", "", "return", "ar", "\n", "\n", "", "", "def", "RandomBrush", "(", "\n", "max_tries", ",", "\n", "s", ",", "\n", "min_num_vertex", "=", "4", ",", "\n", "max_num_vertex", "=", "18", ",", "\n", "mean_angle", "=", "2", "*", "math", ".", "pi", "/", "5", ",", "\n", "angle_range", "=", "2", "*", "math", ".", "pi", "/", "15", ",", "\n", "min_width", "=", "12", ",", "\n", "max_width", "=", "48", ",", "\n", "rng", "=", "None", ")", ":", "\n", "    ", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "2", "**", "32", "-", "1", ")", ")", "\n", "", "H", ",", "W", "=", "s", ",", "s", "\n", "average_radius", "=", "math", ".", "sqrt", "(", "H", "*", "H", "+", "W", "*", "W", ")", "/", "8", "\n", "mask", "=", "Image", ".", "new", "(", "'L'", ",", "(", "W", ",", "H", ")", ",", "0", ")", "\n", "for", "_", "in", "range", "(", "rng", ".", "randint", "(", "max_tries", ")", ")", ":", "\n", "        ", "num_vertex", "=", "rng", ".", "randint", "(", "min_num_vertex", ",", "max_num_vertex", ")", "\n", "angle_min", "=", "mean_angle", "-", "rng", ".", "uniform", "(", "0", ",", "angle_range", ")", "\n", "angle_max", "=", "mean_angle", "+", "rng", ".", "uniform", "(", "0", ",", "angle_range", ")", "\n", "angles", "=", "rng", ".", "uniform", "(", "angle_min", ",", "angle_max", ",", "size", "=", "num_vertex", ")", "\n", "angles", "[", ":", ":", "2", "]", "=", "2", "*", "math", ".", "pi", "-", "angles", "[", ":", ":", "2", "]", "\n", "\n", "h", ",", "w", "=", "mask", ".", "size", "\n", "vertex", "=", "[", "(", "int", "(", "rng", ".", "randint", "(", "0", ",", "w", ")", ")", ",", "int", "(", "rng", ".", "randint", "(", "0", ",", "h", ")", ")", ")", "]", "\n", "r", "=", "fast_clip", "(", "\n", "rng", ".", "normal", "(", "loc", "=", "average_radius", ",", "scale", "=", "average_radius", "//", "2", ",", "size", "=", "num_vertex", ")", ",", "\n", "0", ",", "2", "*", "average_radius", ")", "\n", "dx", "=", "r", "*", "np", ".", "cos", "(", "angles", ")", "\n", "dy", "=", "r", "*", "np", ".", "sin", "(", "angles", ")", "\n", "for", "i", "in", "range", "(", "num_vertex", ")", ":", "\n", "            ", "new_x", "=", "fast_clip", "(", "vertex", "[", "-", "1", "]", "[", "0", "]", "+", "dx", "[", "i", "]", ",", "0", ",", "w", ")", "\n", "new_y", "=", "fast_clip", "(", "vertex", "[", "-", "1", "]", "[", "1", "]", "+", "dy", "[", "i", "]", ",", "0", ",", "h", ")", "\n", "vertex", ".", "append", "(", "(", "int", "(", "new_x", ")", ",", "int", "(", "new_y", ")", ")", ")", "\n", "\n", "", "draw", "=", "ImageDraw", ".", "Draw", "(", "mask", ")", "\n", "width", "=", "int", "(", "rng", ".", "uniform", "(", "min_width", ",", "max_width", ")", ")", "\n", "draw", ".", "line", "(", "vertex", ",", "fill", "=", "1", ",", "width", "=", "width", ")", "\n", "for", "v", "in", "vertex", ":", "\n", "            ", "draw", ".", "ellipse", "(", "(", "v", "[", "0", "]", "-", "width", "//", "2", ",", "\n", "v", "[", "1", "]", "-", "width", "//", "2", ",", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.mask_generator.RandomMask": [[62, 81], ["min", "numpy.ones", "mask_generator.RandomMask.MultiFill"], "function", ["None"], ["v", "[", "0", "]", "+", "width", "//", "2", ",", "\n", "v", "[", "1", "]", "+", "width", "//", "2", ")", ",", "\n", "fill", "=", "1", ")", "\n", "", "if", "rng", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "if", "rng", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "mask", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "", "mask", "=", "np", ".", "asarray", "(", "mask", ",", "np", ".", "uint8", ")", "\n", "if", "rng", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "mask", "=", "np", ".", "flip", "(", "mask", ",", "0", ")", "\n", "", "if", "rng", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "mask", "=", "np", ".", "flip", "(", "mask", ",", "1", ")", "\n", "", "return", "mask", "\n", "\n", "", "def", "RandomMask", "(", "s", ",", "hole_range", "=", "[", "0", ",", "1", "]", ",", "rng", "=", "None", ")", ":", "\n", "    ", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "np", ".", "random", ".", "randint", "(", "2", "**", "32", "-", "1", ")", ")", "\n", "", "coef", "=", "min", "(", "hole_range", "[", "0", "]", "+", "hole_range", "[", "1", "]", ",", "1.0", ")", "\n", "while", "True", ":", "\n", "        ", "mask", "=", "np", ".", "ones", "(", "(", "s", ",", "s", ")", ",", "np", ".", "uint8", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.mask_generator.BatchRandomMask": [[82, 84], ["numpy.stack", "mask_generator.RandomMask", "range"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.mask_generator.RandomMask"], ["def", "Fill", "(", "max_size", ")", ":", "\n", "            ", "w", ",", "h", "=", "rng", ".", "randint", "(", "max_size", ")", ",", "rng", ".", "randint", "(", "max_size", ")", "\n", "ww", ",", "hh", "=", "w", "//", "2", ",", "h", "//", "2", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.mask_generator.tf_mask_generator": [[85, 90], ["tensorflow.data.Dataset.from_generator", "tensorflow.TensorShape", "mask_generator.RandomMask"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.training.mask_generator.RandomMask"], ["x", ",", "y", "=", "rng", ".", "randint", "(", "-", "ww", ",", "s", "-", "w", "+", "ww", ")", ",", "rng", ".", "randint", "(", "-", "hh", ",", "s", "-", "h", "+", "hh", ")", "\n", "mask", "[", "max", "(", "y", ",", "0", ")", ":", "min", "(", "y", "+", "h", ",", "s", ")", ",", "max", "(", "x", ",", "0", ")", ":", "min", "(", "x", "+", "w", ",", "s", ")", "]", "=", "0", "\n", "", "def", "MultiFill", "(", "max_tries", ",", "max_size", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "rng", ".", "randint", "(", "max_tries", ")", ")", ":", "\n", "                ", "Fill", "(", "max_size", ")", "\n", "", "", "MultiFill", "(", "int", "(", "10", "*", "coef", ")", ",", "s", "//", "2", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.training.mask_generator.np_mask_generator": [[91, 96], ["iter", "mask_generator.tf_mask_generator.random_mask_generator"], "function", ["None"], ["MultiFill", "(", "int", "(", "5", "*", "coef", ")", ",", "s", ")", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "1", "-", "RandomBrush", "(", "int", "(", "20", "*", "coef", ")", ",", "s", ",", "rng", "=", "rng", ")", ")", "\n", "hole_ratio", "=", "1", "-", "np", ".", "mean", "(", "mask", ")", "\n", "if", "hole_range", "is", "not", "None", "and", "(", "hole_ratio", "<=", "hole_range", "[", "0", "]", "or", "hole_ratio", ">=", "hole_range", "[", "1", "]", ")", ":", "\n", "            ", "continue", "\n", "", "return", "mask", "[", "np", ".", "newaxis", ",", "...", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.create_from_images.worker": [[11, 32], ["in_queue.get", "out_queue.put", "in_queue.get.endswith", "in_queue.get.endswith", "numpy.fromfile", "PIL.Image.open", "min", "np.asarray().transpose.crop", "np.asarray().transpose.resize", "numpy.asarray().transpose", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize"], ["def", "worker", "(", "in_queue", ",", "out_queue", ",", "resolution", ",", "compressed", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "fpath", "=", "in_queue", ".", "get", "(", ")", "\n", "if", "compressed", ":", "\n", "            ", "if", "fpath", ".", "endswith", "(", "'.jpg'", ")", "or", "fpath", ".", "endswith", "(", "'.JPG'", ")", ":", "\n", "                ", "img", "=", "np", ".", "fromfile", "(", "fpath", ",", "dtype", "=", "'uint8'", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "img", "=", "PIL", ".", "Image", ".", "open", "(", "fpath", ")", "\n", "", "except", "IOError", ":", "\n", "                ", "img", "=", "None", "\n", "", "else", ":", "\n", "                ", "img_size", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "left", "=", "(", "img", ".", "size", "[", "0", "]", "-", "img_size", ")", "//", "2", "\n", "top", "=", "(", "img", ".", "size", "[", "1", "]", "-", "img_size", ")", "//", "2", "\n", "img", "=", "img", ".", "crop", "(", "(", "left", ",", "top", ",", "left", "+", "img_size", ",", "top", "+", "img_size", ")", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "resolution", ",", "resolution", ")", ",", "PIL", ".", "Image", ".", "BILINEAR", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "", "", "out_queue", ".", "put", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.create_from_images.create_from_images": [[33, 77], ["multiprocessing.Queue", "multiprocessing.Queue", "print", "multiprocessing.Process", "worker_proc.start", "tfrecord_utils.TFRecordExporter", "tfr.set_shape", "range", "print", "os.walk", "tfr.set_num_val_images", "tqdm.tqdm", "tqdm.tqdm", "print", "os.walk", "tqdm.tqdm", "tqdm.tqdm", "print", "flist.extend", "len", "random.shuffle", "mp.Queue.put", "range", "mp.Queue.get", "print", "flist.extend", "random.shuffle", "mp.Queue.put", "range", "mp.Queue.get", "len", "tfr.add_image", "len", "tfr.add_image", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_num_val_images", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.add_image", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.add_image"], ["", "", "def", "create_from_images", "(", "tfrecord_dir", ",", "val_image_dir", ",", "train_image_dir", ",", "resolution", ",", "num_channels", ",", "num_processes", ",", "shuffle", ",", "compressed", ")", ":", "\n", "    ", "in_queue", "=", "mp", ".", "Queue", "(", ")", "\n", "out_queue", "=", "mp", ".", "Queue", "(", "num_processes", "*", "8", ")", "\n", "\n", "worker_procs", "=", "[", "mp", ".", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "in_queue", ",", "out_queue", ",", "resolution", ",", "compressed", ")", ")", "for", "_", "in", "range", "(", "num_processes", ")", "]", "\n", "for", "worker_proc", "in", "worker_procs", ":", "\n", "        ", "worker_proc", ".", "daemon", "=", "True", "\n", "worker_proc", ".", "start", "(", ")", "\n", "\n", "", "print", "(", "'Processes created.'", ")", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "compressed", "=", "compressed", ")", "as", "tfr", ":", "\n", "        ", "tfr", ".", "set_shape", "(", "[", "num_channels", ",", "resolution", ",", "resolution", "]", ")", "\n", "\n", "if", "val_image_dir", ":", "\n", "            ", "print", "(", "'Processing validation images...'", ")", "\n", "flist", "=", "[", "]", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "val_image_dir", ")", ":", "\n", "                ", "print", "(", "root", ")", "\n", "flist", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "for", "fname", "in", "files", "]", ")", "\n", "", "tfr", ".", "set_num_val_images", "(", "len", "(", "flist", ")", ")", "\n", "if", "shuffle", ":", "\n", "                ", "random", ".", "shuffle", "(", "flist", ")", "\n", "", "for", "fpath", "in", "tqdm", "(", "flist", ")", ":", "\n", "                ", "in_queue", ".", "put", "(", "fpath", ",", "block", "=", "False", ")", "\n", "", "for", "_", "in", "tqdm", "(", "range", "(", "len", "(", "flist", ")", ")", ")", ":", "\n", "                ", "img", "=", "out_queue", ".", "get", "(", ")", "\n", "if", "img", "is", "not", "None", ":", "\n", "                    ", "tfr", ".", "add_image", "(", "img", ")", "\n", "\n", "", "", "", "if", "train_image_dir", ":", "\n", "            ", "print", "(", "'Processing training images...'", ")", "\n", "flist", "=", "[", "]", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "train_image_dir", ")", ":", "\n", "                ", "print", "(", "root", ")", "\n", "flist", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "for", "fname", "in", "files", "]", ")", "\n", "", "if", "shuffle", ":", "\n", "                ", "random", ".", "shuffle", "(", "flist", ")", "\n", "", "for", "fpath", "in", "tqdm", "(", "flist", ")", ":", "\n", "                ", "in_queue", ".", "put", "(", "fpath", ",", "block", "=", "False", ")", "\n", "", "for", "_", "in", "tqdm", "(", "range", "(", "len", "(", "flist", ")", ")", ")", ":", "\n", "                ", "img", "=", "out_queue", ".", "get", "(", ")", "\n", "if", "img", "is", "not", "None", ":", "\n", "                    ", "tfr", ".", "add_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.create_from_images.main": [[78, 91], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "create_from_images.create_from_images", "vars"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.create_from_images.create_from_images"], ["", "", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--tfrecord-dir'", ",", "help", "=", "'Output directory of generated TFRecord'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--val-image-dir'", ",", "help", "=", "'Root directory of validation images'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--train-image-dir'", ",", "help", "=", "'Root directory of training images'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--resolution'", ",", "help", "=", "'Target resolution'", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "'--num-channels'", ",", "help", "=", "'Number of channels of images'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "'--num-processes'", ",", "help", "=", "'Number of parallel processes'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--shuffle'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--compressed'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "create_from_images", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.__init__": [[16, 28], ["os.path.join", "os.path.isdir", "os.path.basename", "os.path.isdir", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tfrecord_dir", ",", "compressed", "=", "False", ")", ":", "\n", "        ", "self", ".", "tfrecord_dir", "=", "tfrecord_dir", "\n", "self", ".", "num_val_images", "=", "0", "\n", "self", ".", "tfr_prefix", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tfrecord_dir", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "tfrecord_dir", ")", ")", "\n", "self", ".", "shape", "=", "None", "\n", "self", ".", "resolution_log2", "=", "None", "\n", "self", ".", "tfr_writer", "=", "None", "\n", "self", ".", "compressed", "=", "compressed", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "tfrecord_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "tfrecord_dir", ")", "\n", "", "assert", "os", ".", "path", ".", "isdir", "(", "self", ".", "tfrecord_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close": [[29, 32], ["tfrecord_utils.TFRecordExporter.tfr_writer.close"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "tfr_writer", ".", "close", "(", ")", "\n", "self", ".", "tfr_writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape": [[33, 39], ["int", "tensorflow.python_io.TFRecordOptions", "tensorflow.python_io.TFRecordWriter", "numpy.log2"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.tfutil.log2"], ["", "def", "set_shape", "(", "self", ",", "shape", ")", ":", "\n", "        ", "self", ".", "shape", "=", "shape", "\n", "self", ".", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "shape", "[", "1", "]", ")", ")", "\n", "tfr_opt", "=", "tf", ".", "python_io", ".", "TFRecordOptions", "(", "tf", ".", "python_io", ".", "TFRecordCompressionType", ".", "NONE", ")", "\n", "tfr_file", "=", "self", ".", "tfr_prefix", "+", "'-r%02d.tfrecords'", "%", "self", ".", "resolution_log2", "\n", "self", ".", "tfr_writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "tfr_file", ",", "tfr_opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_num_val_images": [[40, 42], ["None"], "methods", ["None"], ["", "def", "set_num_val_images", "(", "self", ",", "num_val_images", ")", ":", "\n", "        ", "self", ".", "num_val_images", "=", "num_val_images", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.add_image": [[43, 56], ["tensorflow.train.Example", "tfrecord_utils.TFRecordExporter.tfr_writer.write", "tfrecord_utils.TFRecordExporter.set_shape", "numpy.rint().clip().astype", "tensorflow.train.Example.SerializeToString", "list", "list", "tensorflow.train.Features", "numpy.rint().clip", "numpy.rint", "tensorflow.train.Feature", "tensorflow.train.Feature", "tensorflow.train.Feature", "tensorflow.train.Feature", "tensorflow.train.Int64List", "tensorflow.train.BytesList", "tensorflow.train.Int64List", "tensorflow.train.Int64List", "quant.tostring"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.set_shape"], ["", "def", "add_image", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "shape", "is", "None", ":", "\n", "            ", "self", ".", "set_shape", "(", "img", ".", "shape", ")", "\n", "", "if", "not", "self", ".", "compressed", ":", "\n", "            ", "assert", "list", "(", "self", ".", "shape", ")", "==", "list", "(", "img", ".", "shape", ")", "\n", "", "quant", "=", "np", ".", "rint", "(", "img", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "if", "not", "self", ".", "compressed", "else", "img", "\n", "ex", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "{", "\n", "'shape'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "quant", ".", "shape", ")", ")", ",", "\n", "'data'", ":", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "quant", ".", "tostring", "(", ")", "]", ")", ")", ",", "\n", "'compressed'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "self", ".", "compressed", "]", ")", ")", ",", "\n", "'num_val_images'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "self", ".", "num_val_images", "]", ")", ")", ",", "\n", "}", ")", ")", "\n", "self", ".", "tfr_writer", ".", "write", "(", "ex", ".", "SerializeToString", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.__enter__": [[57, 59], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.__exit__": [[60, 62], ["tfrecord_utils.TFRecordExporter.close"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.ScaledTensorDataset.__init__": [[47, 49], ["None"], "methods", ["None"], ["    ", "if", "torch", ".", "is_tensor", "(", "part_obs", ")", ":", "\n", "        ", "part_obs", "=", "part_obs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "orig", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.ScaledTensorDataset.__getitem__": [[50, 52], ["None"], "methods", ["None"], ["        ", "orig", "=", "part_obs", "[", "...", ",", ":", "-", "1", "]", "\n", "", "mask", "=", "part_obs", "[", "...", ",", "-", "1", ":", "]", "\n", "return", "samples", "*", "(", "1", "-", "mask", ")", "+", "orig", "*", "mask", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.ScaledTensorDataset.__len__": [[53, 55], ["len"], "methods", ["None"], ["\n", "", "def", "training_step", "(", "H", ",", "x", ",", "target", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "iterate", ")", ":", "\n", "    ", "t0", "=", "time", ".", "time", "(", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.MyDataset.__init__": [[158, 162], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["wandb", ".", "log", "(", "{", "'reloading_from'", ":", "last_stable_save", "}", ",", "commit", "=", "False", ")", "\n", "", "else", ":", "\n", "                            ", "return", "'failed'", "\n", "", "", "else", ":", "\n", "                        ", "stable_ckpt_dir", "=", "None", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.MyDataset.__getitem__": [[163, 165], ["train.MyDataset.transform"], "methods", ["None"], ["", "if", "'NO_MPI'", "not", "in", "os", ".", "environ", ":", "\n", "                        ", "stable_ckpt_dir", "=", "MPI", ".", "COMM_WORLD", ".", "bcast", "(", "stable_ckpt_dir", ",", "root", "=", "0", ")", "\n", "", "if", "stable_ckpt_dir", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.MyDataset.__len__": [[166, 168], ["len"], "methods", ["None"], ["                        ", "print", "(", "'reloading with stable_ckpt_dir ='", ",", "stable_ckpt_dir", ")", "\n", "reload_ckpt", "(", "H", ",", "stable_ckpt_dir", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "logprint", ")", "\n", "", "", "", "iterate", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.MaskDataset.__init__": [[194, 198], ["torch.utils.data.Dataset.__init__", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["\n", "", "", "if", "H", ".", "rank", "==", "0", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'iteration'", ":", "iterate", "}", ",", "commit", "=", "True", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.MaskDataset.__len__": [[199, 201], ["None"], "methods", ["None"], ["", "", "", "def", "evaluate", "(", "H", ",", "ema_vae", ",", "data_valid", ",", "preprocess_fn", ",", "is_train", "=", "False", ")", ":", "\n", "    ", "stats_valid", "=", "[", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "loader", "(", "H", ",", "data_valid", ",", "is_train", "=", "is_train", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.MaskDataset.__getitem__": [[202, 204], ["sample_mask().numpy", "train.sample_mask"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask"], ["        ", "data_input", ",", "target", "=", "preprocess_fn", "(", "x", ")", "\n", "stats_valid", ".", "append", "(", "eval_step", "(", "H", ",", "data_input", ",", "target", ",", "ema_vae", ",", "i", "=", "i", ")", ")", "\n", "# print(stats_valid[-1]['distortion'])", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.MaskLoader.__init__": [[213, 220], ["train._infinite_loader", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pic.train._infinite_loader"], ["full_activations", "=", "None", ",", "part_activations", "=", "None", ",", "\n", "only_top_level", "=", "False", ",", "n_upper_samples", "=", "1", ",", "\n", "n_lower_samples", "=", "1", ",", "lower_t", "=", "0.1", ")", ":", "\n", "\n", "    ", "zss", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_upper_samples", ")", ":", "\n", "        ", "_", ",", "stats", "=", "ema_vae", ".", "decoder", ".", "run", "(", "sample_from", "=", "first_latents_from", ",", "\n", "full_activations", "=", "full_activations", ",", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.MaskLoader.get_batch": [[221, 229], ["next", "mask_parts.append", "len", "torch.cat"], "methods", ["None"], ["part_activations", "=", "part_activations", ",", "\n", "get_ents", "=", "H", ".", "plot_ent", ",", "get_latents", "=", "True", ")", "\n", "zs", "=", "[", "s", "[", "'z'", "]", ".", "cuda", "(", ")", ".", "clone", "(", ")", "for", "s", "in", "stats", "]", "\n", "zss", ".", "append", "(", "zs", ")", "\n", "", "reconstructions", "=", "[", "viz_batch_original", "[", "...", ",", "-", "H", ".", "image_size", ":", ",", ":", "]", ".", "numpy", "(", ")", "]", "\n", "if", "part_obs", "is", "not", "None", ":", "\n", "        ", "if", "H", ".", "conditioning", "==", "'image'", ":", "\n", "            ", "masked", "=", "[", "]", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.tensor2png": [[22, 26], ["img_tensor.cpu().permute().numpy", "imageio.imwrite", "img_tensor.cpu().permute", "img_tensor.cpu"], "function", ["None"], ["from", "vae_helpers", "import", "RNG", ",", "rng_decorator", "\n", "import", "wandb", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "shutil", "\n", "from", "torch", ".", "nn", ".", "parallel", ".", "distributed", "import", "DistributedDataParallel", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.sample_mask_fid": [[28, 44], ["isinstance", "x.contiguous", "train.sample_mask_fid.f"], "function", ["None"], ["\n", "PROJECT_NAME", "=", "'ipa'", "\n", "\n", "\n", "def", "run_net", "(", "H", ",", "vae", ",", "x", ",", "target", ",", "iterate", ",", "differentiate", ")", ":", "\n", "\n", "    ", "if", "H", ".", "unconditional", ":", "\n", "        ", "stats", "=", "vae", ".", "forward", "(", "x", ",", "target", ")", "\n", "if", "differentiate", ":", "\n", "            ", "(", "stats", "[", "'elbo'", "]", "/", "H", ".", "grad_accumulations", ")", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "part_obs", "=", "sample_part_images", "(", "H", ",", "x", ")", "\n", "stats", "=", "vae", ".", "forward", "(", "part_obs", ",", "x", ",", "target", ",", "obj", "=", "H", ".", "kl", ",", "iterate", "=", "iterate", ")", "\n", "if", "differentiate", ":", "\n", "            ", "(", "stats", "[", "'loss'", "]", "/", "H", ".", "grad_accumulations", ")", ".", "backward", "(", ")", "\n", "", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.fid": [[57, 132], ["torch.no_grad", "train.ScaledTensorDataset", "os.path.join", "os.makedirs", "tempfile.mkdtemp", "range", "os.path.join", "os.path.exists", "os.path.exists", "print", "print", "tqdm.tqdm", "tqdm.tqdm", "calculate_fid_given_paths", "shutil.rmtree", "torch.cuda.is_available", "os.makedirs", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.makedirs", "torch.utils.data.DataLoader", "img_batch.to.to", "os.path.exists", "range", "os.path.join", "calculate_fid_given_paths", "os.listdir", "os.path.exists", "shutil.rmtree", "os.path.join", "print", "os.path.exists", "enumerate", "len", "str", "shutil.move", "str", "train.tensor2png", "range", "train.sample_mask_fid", "mask.to.to", "model.inpaint", "enumerate", "os.path.exists", "int", "os.path.join", "os.path.join", "int", "os.path.join", "os.path.join", "train.tensor2png", "str", "int", "len", "int", "os.listdir"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_fid_given_paths", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_fid_given_paths", "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.tensor2png", "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.sample_mask_fid", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.inpaint", "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.tensor2png"], ["for", "x_chunk", ",", "target_chunk", "in", "zip", "(", "torch", ".", "chunk", "(", "x", ",", "chunks", "=", "H", ".", "grad_accumulations", ",", "dim", "=", "0", ")", ",", "\n", "torch", ".", "chunk", "(", "target", ",", "chunks", "=", "H", ".", "grad_accumulations", ",", "dim", "=", "0", ")", ")", ":", "\n", "        ", "stats", "=", "run_net", "(", "H", ",", "vae", ",", "x_chunk", ",", "target_chunk", ",", "iterate", "=", "iterate", ",", "differentiate", "=", "True", ")", "\n", "", "grad_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "vae", ".", "parameters", "(", ")", ",", "H", ".", "grad_clip", ")", ".", "item", "(", ")", "\n", "if", "H", ".", "kl", "==", "'sym'", ":", "\n", "        ", "distortion_nans", "=", "0", "\n", "rate_nans", "=", "0", "\n", "", "else", ":", "\n", "        ", "distortion_nans", "=", "torch", ".", "isnan", "(", "stats", "[", "'distortion'", "]", ")", ".", "sum", "(", ")", "\n", "rate_nans", "=", "torch", ".", "isnan", "(", "stats", "[", "'rate'", "]", ")", ".", "sum", "(", ")", "\n", "", "stats", ".", "update", "(", "\n", "dict", "(", "rate_nans", "=", "0", "if", "rate_nans", "==", "0", "else", "1", ",", "distortion_nans", "=", "0", "if", "distortion_nans", "==", "0", "else", "1", ")", ")", "\n", "stats", "=", "get_cpu_stats_over_ranks", "(", "stats", ")", "\n", "\n", "skipped_updates", "=", "1", "\n", "# only update if no rank has a nan and if the grad norm is below a specific threshold", "\n", "if", "stats", "[", "'distortion_nans'", "]", "==", "0", "and", "stats", "[", "'rate_nans'", "]", "==", "0", "and", "(", "H", ".", "skip_threshold", "==", "-", "1", "or", "grad_norm", "<", "H", ".", "skip_threshold", ")", ":", "\n", "        ", "optimizer", ".", "step", "(", ")", "\n", "skipped_updates", "=", "0", "\n", "if", "not", "H", ".", "no_ema", ":", "\n", "            ", "update_ema", "(", "vae", ",", "ema_vae", ",", "H", ".", "ema_rate", ")", "\n", "\n", "", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "stats", ".", "update", "(", "skipped_updates", "=", "skipped_updates", ",", "iter_time", "=", "t1", "-", "t0", ",", "grad_norm", "=", "grad_norm", ")", "\n", "return", "stats", "\n", "\n", "\n", "", "def", "eval_step", "(", "H", ",", "data_input", ",", "target", ",", "ema_vae", ",", "i", "=", "0", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "stats", "=", "run_net", "(", "H", ",", "ema_vae", ",", "data_input", ",", "target", ",", "iterate", "=", "np", ".", "inf", ",", "differentiate", "=", "False", ")", "\n", "\n", "", "stats", "=", "get_cpu_stats_over_ranks", "(", "stats", ")", "\n", "return", "stats", "\n", "\n", "\n", "", "def", "get_sample_for_visualization", "(", "data", ",", "preprocess_fn", ",", "num", ",", "dataset", ")", ":", "\n", "    ", "for", "x", "in", "DataLoader", "(", "data", ",", "batch_size", "=", "num", ")", ":", "\n", "        ", "break", "\n", "", "if", "dataset", "in", "[", "'ffhq_1024'", ",", "'xray'", ",", "'shoes'", ",", "'bags'", ",", "'shoes64'", ",", "'bags64'", "]", ":", "\n", "        ", "orig_image", "=", "(", "x", "[", "0", "]", "*", "255.0", ")", ".", "to", "(", "torch", ".", "uint8", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "orig_image", "=", "x", "[", "0", "]", "\n", "", "preprocessed", "=", "preprocess_fn", "(", "x", ")", "[", "0", "]", "\n", "return", "orig_image", ",", "preprocessed", "\n", "\n", "", "def", "loader", "(", "H", ",", "data", ",", "is_train", ",", "epoch", "=", "None", ",", "bs", "=", "None", ")", ":", "\n", "    ", "sampler", "=", "None", "if", "\"NO_MPI\"", "in", "os", ".", "environ", "else", "DistributedSampler", "(", "data", ",", "num_replicas", "=", "H", ".", "mpi_size", ",", "rank", "=", "H", ".", "rank", ")", "\n", "num_workers", "=", "H", ".", "n_workers", "if", "\"NO_MPI\"", "in", "os", ".", "environ", "else", "0", "\n", "if", "is_train", "and", "sampler", "is", "not", "None", ":", "\n", "        ", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "if", "bs", "is", "None", ":", "\n", "        ", "bs", "=", "H", ".", "n_batch", "*", "H", ".", "grad_accumulations", "if", "is_train", "else", "H", ".", "n_batch", "\n", "", "return", "DataLoader", "(", "data", ",", "batch_size", "=", "bs", ",", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "sampler", "=", "sampler", ",", "num_workers", "=", "num_workers", ",", "\n", "shuffle", "=", "(", "sampler", "is", "None", ")", ")", "\n", "\n", "", "def", "train_loop", "(", "H", ",", "data_train", ",", "data_valid", ",", "preprocess_fn", ",", "vae", ",", "ema_vae", ",", "logprint", ",", "\n", "starting_epoch", ",", "iterate", ")", ":", "\n", "    ", "optimizer", ",", "scheduler", "=", "load_opt", "(", "H", ",", "vae", ",", "logprint", ",", "\n", "init_cond_from_uncond", "=", "H", ".", "load_pretrained", ")", "\n", "\n", "viz_batch_original", ",", "viz_batch_processed", "=", "get_sample_for_visualization", "(", "data_valid", ",", "preprocess_fn", ",", "H", ".", "num_images_visualize", ",", "H", ".", "dataset", ")", "\n", "early_evals", "=", "set", "(", "[", "1", "]", "+", "[", "2", "**", "exp", "for", "exp", "in", "range", "(", "3", ",", "14", ")", "]", ")", "\n", "stats", "=", "[", "]", "\n", "iters_since_starting", "=", "0", "\n", "H", ".", "ema_rate", "=", "torch", ".", "as_tensor", "(", "H", ".", "ema_rate", ")", ".", "cuda", "(", ")", "\n", "for", "epoch", "in", "range", "(", "starting_epoch", ",", "H", ".", "num_epochs", ")", ":", "\n", "\n", "        ", "for", "epoch_iter", ",", "x", "in", "enumerate", "(", "loader", "(", "H", ",", "data_train", ",", "is_train", "=", "True", ",", "epoch", "=", "epoch", ")", ")", ":", "\n", "            ", "if", "epoch_iter", ">", "0", "and", "H", ".", "rank", "==", "0", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "'iteration'", ":", "iterate", "}", ",", "commit", "=", "True", ")", "\n", "", "data_input", ",", "target", "=", "preprocess_fn", "(", "x", ")", "\n", "training_stats", "=", "training_step", "(", "H", ",", "data_input", ",", "target", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "iterate", ")", "\n", "stats", ".", "append", "(", "training_stats", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "H", ".", "no_ema", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.log_images": [[134, 149], ["vae_helpers.rng_decorator", "torch.no_grad", "model.eval", "train.sample_mask", "model.set_input", "model.test_viz", "torch.cat", "enumerate", "wandb.log", "model.train", "log_dict.update", "wandb.Image", "util.util.tensor2im"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask", "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.set_input", "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.test_viz", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.tensor2im"], ["\n", "# log losses", "\n", "", "if", "iterate", "%", "H", ".", "iters_per_log", "==", "0", "or", "(", "iters_since_starting", "in", "early_evals", ")", ":", "\n", "                ", "if", "H", ".", "rank", "==", "0", ":", "\n", "                    ", "wandb", ".", "log", "(", "dict", "(", "epoch", "=", "epoch", ",", "**", "accumulate_stats", "(", "stats", ",", "H", ".", "iters_per_log", ")", ")", ",", "commit", "=", "False", ")", "\n", "", "", "if", "iterate", "%", "10000", "==", "0", "or", "(", "iters_since_starting", "in", "early_evals", ")", ":", "\n", "                ", "logprint", "(", "model", "=", "H", ".", "desc", ",", "type", "=", "'train_loss'", ",", "lr", "=", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "epoch", "=", "epoch", ",", "step", "=", "iterate", ",", "**", "accumulate_stats", "(", "stats", ",", "H", ".", "iters_per_log", ")", ")", "\n", "\n", "# log images", "\n", "", "if", "iterate", "%", "H", ".", "iters_per_images", "==", "0", "or", "(", "iters_since_starting", "in", "early_evals", "and", "H", ".", "dataset", "!=", "'ffhq_1024'", ")", "and", "H", ".", "rank", "==", "0", ":", "\n", "                ", "log_images", "(", "H", ",", "ema_vae", ",", "viz_batch_original", ",", "viz_batch_processed", ")", "\n", "\n", "# check if we need to reload whenever logging", "\n", "", "if", "iterate", "%", "H", ".", "iters_per_log", "==", "0", ":", "\n", "                ", "_", ",", "failed", "=", "is_stable_is_failed", "(", "stats", ",", "H", ".", "iters_per_log", ")", "\n", "if", "failed", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.get_dataset": [[170, 184], ["torchvision.Compose", "torchvision.ToTensor", "T.Compose.append", "data.cifar10", "train.MyDataset", "torchvision.Resize", "data.ffhq256", "T.Compose.append", "data.imagenet64", "ValueError", "torchvision.Resize"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.cifar10", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.ffhq256", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.imagenet64"], ["if", "iterate", "%", "H", ".", "iters_per_save", "==", "0", "and", "H", ".", "rank", "==", "0", ":", "\n", "                ", "if", "np", ".", "isfinite", "(", "stats", "[", "-", "1", "]", "[", "'loss'", "]", ")", ":", "\n", "                    ", "logprint", "(", "model", "=", "H", ".", "desc", ",", "type", "=", "'train_loss'", ",", "epoch", "=", "epoch", ",", "step", "=", "iterate", ",", "**", "accumulate_stats", "(", "stats", ",", "H", ".", "iters_per_log", ")", ")", "\n", "fp", "=", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "'latest'", ")", "\n", "logprint", "(", "f'Saving model@ {iterate} to {fp}'", ")", "\n", "save_model", "(", "fp", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "H", ",", "create_dir", "=", "False", ")", "\n", "", "save_model", "(", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "f'iter-{iterate}'", ")", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "H", ",", "create_dir", "=", "True", ")", "\n", "wandb", ".", "log", "(", "dict", "(", "epoch", "=", "epoch", ",", "last_save", "=", "iterate", ")", ",", "commit", "=", "False", ")", "\n", "stable", ",", "_", "=", "is_stable_is_failed", "(", "stats", ",", "H", ".", "iters_per_log", ")", "\n", "print", "(", "'saving'", ",", "iterate", ")", "\n", "if", "stable", ":", "\n", "                    ", "wandb", ".", "log", "(", "dict", "(", "epoch", "=", "epoch", ",", "last_stable_save", "=", "iterate", ")", ",", "commit", "=", "False", ")", "\n", "print", "(", "'and it stable'", ",", ")", "\n", "\n", "", "", "if", "H", ".", "num_iters", "is", "not", "None", "and", "iterate", ">=", "H", ".", "num_iters", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train.sample_mask": [[186, 191], ["x.unsqueeze().expand().contiguous", "vae_helpers.sample_part_images", "batch.permute", "x.unsqueeze().expand", "x.unsqueeze"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_part_images"], ["break", "\n", "\n", "", "", "if", "epoch", "%", "H", ".", "epochs_per_eval", "==", "0", ":", "\n", "            ", "valid_stats", "=", "evaluate", "(", "H", ",", "ema_vae", ",", "data_valid", ",", "preprocess_fn", ")", "\n", "logprint", "(", "model", "=", "H", ".", "desc", ",", "type", "=", "'eval_loss'", ",", "epoch", "=", "epoch", ",", "step", "=", "iterate", ",", "**", "valid_stats", ")", "\n", "if", "H", ".", "rank", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pic.train._infinite_loader": [[206, 210], ["None"], "function", ["None"], ["finites", "=", "np", ".", "array", "(", "vals", ")", "[", "np", ".", "isfinite", "(", "vals", ")", "]", "\n", "stats", "=", "dict", "(", "n_batches", "=", "len", "(", "vals", ")", ",", "filtered_loss", "=", "np", ".", "mean", "(", "finites", ")", ",", "**", "{", "k", ":", "np", ".", "mean", "(", "[", "a", "[", "k", "]", "for", "a", "in", "stats_valid", "]", ")", "for", "k", "in", "stats_valid", "[", "-", "1", "]", "}", ")", "\n", "return", "stats", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.data_loader.CreateDataset.__init__": [[10, 17], ["image_folder.make_dataset", "data_loader.get_transform", "image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dataloader.image_folder.make_dataset", "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.data_loader.get_transform", "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.image_folder.make_dataset"], ["\n", "\n", "def", "sample_mask", "(", "args", ",", "batch", ")", ":", "\n", "# args shoudld have the following attributes:", "\n", "# conditioning, max_patches, patch_size_frac, and kls (only for foveal conditioning)", "\n", "    ", "x", "=", "sample_part_images", "(", "args", ",", "batch", ")", "[", "...", ",", "-", "1", "]", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x", ".", "contiguous", "(", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.data_loader.CreateDataset.__getitem__": [[18, 24], ["data_loader.CreateDataset.load_img", "data_loader.CreateDataset.load_mask"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dataloader.data_loader.CreateDataset.load_img", "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.data_loader.CreateDataset.load_mask"], ["\n", "\n", "", "class", "MaskDataset", "(", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "img_shape", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "example_batch", "=", "torch", ".", "zeros", "(", "1", ",", "*", "img_shape", ")", "\n", "self", ".", "args", "=", "args", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.data_loader.CreateDataset.__len__": [[25, 27], ["None"], "methods", ["None"], ["\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "1000", "*", "1000", "*", "1000", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.data_loader.CreateDataset.name": [[28, 30], ["None"], "methods", ["None"], ["\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "mask", "=", "sample_mask", "(", "self", ".", "args", ",", "self", ".", "example_batch", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.data_loader.CreateDataset.load_img": [[31, 38], ["PIL.Image.open().convert", "data_loader.CreateDataset.transform", "PIL.Image.open().convert.close", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.convert", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close"], ["mask", "=", "mask", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", ".", "numpy", "(", ")", "\n", "return", "1", "-", "mask", "# Masks in this paper are inverted", "\n", "\n", "\n", "", "", "def", "infinite_loader", "(", "loader", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "x", "in", "loader", ":", "\n", "            ", "yield", "x", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.data_loader.CreateDataset.load_mask": [[39, 75], ["random.randint", "util.task.center_mask", "util.task.random_regular_mask", "util.task.random_irregular_mask", "PIL.Image.open().convert", "torchvision.Compose", "PIL.Image.open().convert.close", "len", "random.randint", "PIL.Image.open", "torchvision.RandomHorizontalFlip", "torchvision.RandomRotation", "torchvision.CenterCrop", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Compose."], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.util.task.center_mask", "home.repos.pwc.inspect_result.plai-group_ipa.util.task.random_regular_mask", "home.repos.pwc.inspect_result.plai-group_ipa.util.task.random_irregular_mask", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.convert", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close"], ["\n", "\n", "", "", "", "class", "ResizedDataset", "(", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "data", "=", "data", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "tmp", "=", "self", ".", "data", "[", "idx", "]", "\n", "if", "tmp", ".", "shape", "[", "-", "2", "]", "!=", "self", ".", "size", ":", "\n", "            ", "tmp", "=", "vF", ".", "resize", "(", "np", ".", "transpose", "(", "tmp", ",", "[", "2", ",", "0", ",", "1", "]", ")", ",", "256", ")", "\n", "tmp", "=", "np", ".", "transpose", "(", "tmp", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "", "tmp", "=", "(", "tmp", "/", "127.5", ")", "-", "1", "\n", "return", "vF", ".", "resize", "(", "tmp", ",", "self", ".", "size", ")", ",", "0", "\n", "\n", "\n", "", "", "class", "TransformedDataset", "(", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data", ",", "transform", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", ".", "transform", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "img", "=", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", "\n", "return", "img", ",", "0", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n", "\n", "", "", "class", "NewDataset", ":", "\n", "# Image pixel values are in [-1, 1]", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.data_loader.dataloader": [[77, 82], ["data_loader.CreateDataset", "torch.DataLoader", "int"], "function", ["None"], ["        ", "self", ".", "dtype", "=", "'uint8'", "\n", "self", ".", "label_size", "=", "0", "\n", "self", ".", "label_dtype", "=", "'float32'", "\n", "self", ".", "dynamic_range", "=", "[", "0", ",", "255", "]", "\n", "self", ".", "pix2pix", "=", "False", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.data_loader.get_transform": [[84, 107], ["torchvision.Compose", "transform_list.append", "torchvision.ToTensor", "transform_list.append", "transform_list.append", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.Resize", "torchvision.Resize", "torchvision.RandomCrop", "transform_list.append", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.RandomRotation", "torchvision.RandomCrop"], "function", ["None"], ["transform", "=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "            ", "transform", ".", "append", "(", "transforms", ".", "Resize", "(", "256", ")", ")", "\n", "(", "trX", ",", "_", ")", ",", "(", "vaX", ",", "_", ")", ",", "_", "=", "cifar10", "(", "args", ".", "data_root", ",", "one_hot", "=", "False", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"ffhq256\"", ":", "\n", "            ", "trX", ",", "vaX", ",", "_", "=", "ffhq256", "(", "args", ".", "data_root", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "", "transform", ".", "append", "(", "transforms", ".", "Normalize", "(", "0.5", ",", "0.5", ")", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform", ")", "\n", "# self.train_set = torch.utils.data.TensorDataset(", "\n", "#     torch.as_tensor(trX))", "\n", "# self.train_set = ResizedDataset(torch.as_tensor(trX), 256)", "\n", "# self.valid_set = ResizedDataset(torch.as_tensor(vaX), 256)", "\n", "self", ".", "train_set", "=", "TransformedDataset", "(", "trX", ",", "transform", ")", "\n", "self", ".", "valid_set", "=", "TransformedDataset", "(", "vaX", ",", "transform", ")", "\n", "mask_dataset", "=", "MaskDataset", "(", "self", ".", "args", ",", "self", ".", "train_set", "[", "0", "]", "[", "0", "]", ".", "shape", ")", "\n", "\n", "if", "self", ".", "args", ".", "num_workers", "is", "None", "or", "self", ".", "args", ".", "num_workers", "==", "0", ":", "\n", "            ", "dataloader_kwargs", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "dataloader_kwargs", "=", "dict", "(", "num_workers", "=", "self", ".", "args", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "4", ")", "\n", "", "self", ".", "train_iterator", "=", "self", ".", "_iterator", "(", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.image_folder.is_image_file": [[10, 12], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.image_folder.make_dataset": [[14, 21], ["path_files.find", "image_folder.make_dataset_txt", "image_folder.make_dataset_dir"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataloader.image_folder.make_dataset_txt", "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.image_folder.make_dataset_dir"], ["", "def", "make_dataset", "(", "path_files", ")", ":", "\n", "    ", "if", "path_files", ".", "find", "(", "'.txt'", ")", "!=", "-", "1", ":", "\n", "        ", "paths", ",", "size", "=", "make_dataset_txt", "(", "path_files", ")", "\n", "", "else", ":", "\n", "        ", "paths", ",", "size", "=", "make_dataset_dir", "(", "path_files", ")", "\n", "\n", "", "return", "paths", ",", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.image_folder.make_dataset_txt": [[23, 38], ["open", "f.readlines", "path.strip.strip", "img_paths.append", "len"], "function", ["None"], ["", "def", "make_dataset_txt", "(", "files", ")", ":", "\n", "    ", "\"\"\"\n    :param path_files: the path of txt file that store the image paths\n    :return: image paths and sizes\n    \"\"\"", "\n", "img_paths", "=", "[", "]", "\n", "\n", "with", "open", "(", "files", ")", "as", "f", ":", "\n", "        ", "paths", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "for", "path", "in", "paths", ":", "\n", "        ", "path", "=", "path", ".", "strip", "(", ")", "\n", "img_paths", ".", "append", "(", "path", ")", "\n", "\n", "", "return", "img_paths", ",", "len", "(", "img_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.dataloader.image_folder.make_dataset_dir": [[40, 56], ["os.path.isdir", "os.path.isdir", "os.walk", "os.walk", "sorted", "len", "image_folder.is_image_file", "os.path.join", "os.path.join", "img_paths.append"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataloader.image_folder.is_image_file"], ["", "def", "make_dataset_dir", "(", "dir", ")", ":", "\n", "    ", "\"\"\"\n    :param dir: directory paths that store the image\n    :return: image paths and sizes\n    \"\"\"", "\n", "img_paths", "=", "[", "]", "\n", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "os", ".", "walk", "(", "dir", ")", ":", "\n", "        ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "img_paths", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "return", "img_paths", ",", "len", "(", "img_paths", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.evaluations.inception_score_tf.get_inception_score": [[38, 70], ["type", "type", "len", "img.astype.astype", "inps.append", "tensorflow.Session", "int", "range", "numpy.concatenate", "range", "numpy.expand_dims", "math.ceil", "numpy.concatenate", "sess.run", "np.concatenate.append", "numpy.mean", "scores.append", "numpy.mean", "numpy.std", "numpy.sum", "numpy.exp", "float", "float", "min", "numpy.log", "numpy.log", "len", "len", "numpy.expand_dims", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.run"], ["def", "get_inception_score", "(", "images", ",", "splits", "=", "10", ")", ":", "\n", "  ", "assert", "(", "type", "(", "images", ")", "==", "list", ")", "\n", "assert", "(", "type", "(", "images", "[", "0", "]", ")", "==", "np", ".", "ndarray", ")", "\n", "assert", "(", "len", "(", "images", "[", "0", "]", ".", "shape", ")", "==", "3", ")", "\n", "#assert(np.max(images[0]) > 10) # EDIT: commented out", "\n", "#assert(np.min(images[0]) >= 0.0)", "\n", "inps", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inps", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "bs", "=", "100", "\n", "# config = tf.ConfigProto(allow_soft_placement=True, device_count={'gpu': 3})", "\n", "# # config.gpu_options.per_process_gpu_memory_fraction = 0.1", "\n", "# config.gpu_options.allow_growth = True", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "preds", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "inps", ")", ")", "/", "float", "(", "bs", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "#sys.stdout.write(\".\") # EDIT: commented out", "\n", "#sys.stdout.flush()", "\n", "        ", "inp", "=", "inps", "[", "(", "i", "*", "bs", ")", ":", "min", "(", "(", "i", "+", "1", ")", "*", "bs", ",", "len", "(", "inps", ")", ")", "]", "\n", "inp", "=", "np", ".", "concatenate", "(", "inp", ",", "0", ")", "\n", "pred", "=", "sess", ".", "run", "(", "softmax", ",", "{", "'ExpandDims:0'", ":", "inp", "}", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "", "preds", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "      ", "part", "=", "preds", "[", "(", "i", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.evaluations.inception_score_tf._init_inception": [[72, 118], ["os.path.join", "tarfile.open().extractall", "os.path.exists", "os.makedirs", "DATA_URL.split", "os.path.exists", "six.moves.urllib.request.urlretrieve", "print", "os.stat", "print", "tensorflow.gfile.FastGFile", "range", "tensorflow.Session", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name.graph.get_operations", "enumerate", "tensorflow.matmul", "tensorflow.nn.softmax", "sys.stdout.write", "sys.stdout.flush", "tarfile.open", "os.path.join", "tensorflow.squeeze", "tensorflow.device", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "o.get_shape", "enumerate", "sess.graph.get_operation_by_name", "f.read", "tensorflow.TensorShape", "new_shape.append", "new_shape.append", "tensorflow.TensorShape", "float", "float"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.flush"], ["", "", "def", "_init_inception", "(", ")", ":", "\n", "  ", "global", "softmax", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_DIR", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "MODEL_DIR", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "    ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "      ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "\n", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "MODEL_DIR", ")", "# EDIT: increased indent", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "'classify_image_graph_def.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "          ", "with", "tf", ".", "device", "(", "\"/gpu:%d\"", "%", "i", ")", ":", "\n", "                ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "# Works with an arbitrary minibatch size.", "\n", "# config = tf.ConfigProto(allow_soft_placement=True, device_count={'gpu': 3})", "\n", "# # config.gpu_options.per_process_gpu_memory_fraction = 0.1", "\n", "# config.gpu_options.allow_growth = True", "\n", "", "", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'pool_3:0'", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "            ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "                ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "                    ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "new_shape", ".", "append", "(", "s", ")", "\n", "", "", "try", ":", "\n", "                ", "o", ".", "_shape", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "o", ".", "_shape_val", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "# EDIT: added for compatibility with tensorflow 1.6.0", "\n", "", "", "", "w", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "\"softmax/logits/MatMul\"", ")", ".", "inputs", "[", "1", "]", "\n", "logits", "=", "tf", ".", "matmul", "(", "tf", ".", "squeeze", "(", "pool3", ",", "[", "1", ",", "2", "]", ")", ",", "w", ")", "\n", "softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.evaluations.fid_score_torch.get_activations": [[54, 110], ["model.eval", "numpy.empty", "range", "print", "torch.from_numpy().type", "torch.autograd.Variable", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy().reshape", "print", "print", "batch.cuda.cuda", "model", "torch.nn.functional.adaptive_avg_pool2d", "torch.from_numpy", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy", "torch.nn.functional.adaptive_avg_pool2d.cpu"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda"], ["def", "get_activations", "(", "images", ",", "model", ",", "batch_size", "=", "64", ",", "dims", "=", "2048", ",", "\n", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n    Params:\n    -- images      : Numpy array of dimension (n_images, 3, hi, wi). The values\n                     must lie between 0 and 1.\n    -- model       : Instance of inception model\n    -- batch_size  : the images numpy array is split into batches with\n                     batch size batch_size. A reasonable batch size depends\n                     on the hardware.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the number\n                     of calculated batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "d0", "=", "images", ".", "shape", "[", "0", "]", "\n", "if", "batch_size", ">", "d0", ":", "\n", "        ", "print", "(", "(", "'Warning: batch size is bigger than the data size. '", "\n", "'Setting batch size to data size'", ")", ")", "\n", "batch_size", "=", "d0", "\n", "\n", "", "n_batches", "=", "d0", "//", "batch_size", "\n", "n_used_imgs", "=", "n_batches", "*", "batch_size", "\n", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "n_used_imgs", ",", "dims", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'\\rPropagating batch %d/%d'", "%", "(", "i", "+", "1", ",", "n_batches", ")", ",", "\n", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "images", "[", "start", ":", "end", "]", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "batch", "=", "Variable", "(", "batch", ",", "volatile", "=", "True", ")", "\n", "if", "cuda", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "\n", "", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "if", "pred", ".", "shape", "[", "2", "]", "!=", "1", "or", "pred", ".", "shape", "[", "3", "]", "!=", "1", ":", "\n", "            ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "' done'", ")", "\n", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.evaluations.fid_score_torch.calculate_frechet_distance": [[112, 164], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n    Stable version by Dougal J. Sutherland.\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representive data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representive data set.\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "\n", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.evaluations.fid_score_torch.calculate_activation_statistics": [[166, 190], ["fid_score_torch.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.get_activations"], ["", "def", "calculate_activation_statistics", "(", "images", ",", "model", ",", "batch_size", "=", "64", ",", "\n", "dims", "=", "2048", ",", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- images      : Numpy array of dimension (n_images, 3, hi, wi). The values\n                     must lie between 0 and 1.\n    -- model       : Instance of inception model\n    -- batch_size  : The images numpy array is split into batches with\n                     batch size batch_size. A reasonable batch size\n                     depends on the hardware.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the\n                     number of calculated batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the inception model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the inception model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "images", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ",", "verbose", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.evaluations.fid_score_torch._compute_statistics_of_path": [[192, 213], ["pathlib.Path.endswith", "numpy.load", "np.load.close", "pathlib.Path", "numpy.array", "imgs.transpose.transpose", "fid_score_torch.calculate_activation_statistics", "list", "list", "pathlib.Path.glob", "pathlib.Path.glob", "scipy.misc.imread().astype", "scipy.misc.imread", "str"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_activation_statistics", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.imread"], ["", "def", "_compute_statistics_of_path", "(", "path", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", ":", "\n", "    ", "if", "path", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "files", "=", "list", "(", "path", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "path", ".", "glob", "(", "'*.png'", ")", ")", "\n", "\n", "imgs", "=", "np", ".", "array", "(", "[", "imread", "(", "str", "(", "fn", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "for", "fn", "in", "files", "]", ")", "\n", "\n", "# Bring images to shape (B, 3, H, W)", "\n", "imgs", "=", "imgs", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "\n", "# Rescale images to be between 0 and 1", "\n", "imgs", "/=", "255", "\n", "\n", "m", ",", "s", "=", "calculate_activation_statistics", "(", "imgs", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "\n", "", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.evaluations.fid_score_torch.calculate_fid_given_paths": [[215, 234], ["inception.InceptionV3", "fid_score_torch._compute_statistics_of_path", "fid_score_torch._compute_statistics_of_path", "fid_score_torch.calculate_frechet_distance", "inception.InceptionV3.cuda", "os.path.exists", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score._compute_statistics_of_path", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score._compute_statistics_of_path", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_frechet_distance", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda"], ["", "def", "calculate_fid_given_paths", "(", "paths", ",", "batch_size", ",", "cuda", ",", "dims", ")", ":", "\n", "    ", "\"\"\"Calculates the FID of two paths\"\"\"", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid path: %s'", "%", "p", ")", "\n", "\n", "", "", "block_idx", "=", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "\n", "model", "=", "InceptionV3", "(", "[", "block_idx", "]", ")", "\n", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "m1", ",", "s1", "=", "_compute_statistics_of_path", "(", "paths", "[", "0", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "m2", ",", "s2", "=", "_compute_statistics_of_path", "(", "paths", "[", "1", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.evaluations.inception_score_torch.get_inception_score": [[23, 71], ["torchvision.models.inception.inception_v3", "torch.nn.Upsample", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.models.inception.inception_v3.eval", "numpy.zeros", "int", "range", "range", "torchvision.models.inception.inception_v3.cuda", "nn.Upsample.cuda", "torchvision.models.inception.inception_v3.", "torch.nn.functional.softmax().data.cpu().numpy", "math.ceil", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "inception_score_torch.get_inception_score.get_pred"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda"], ["def", "get_inception_score", "(", "imgs", ",", "batch_size", "=", "32", ",", "resize", "=", "True", ",", "splits", "=", "10", ")", ":", "\n", "    ", "\"\"\"Computes the inception score of the generated images imgs\n    imgs -- Torch dataset of (3xHxW) numpy images normalized in the range [-1, 1]\n    cuda -- whether or not to run on GPU\n    batch_size -- batch size for feeding into Inception v3\n    splits -- number of splits\n    \"\"\"", "\n", "N", "=", "imgs", ".", "shape", "[", "0", "]", "\n", "\n", "assert", "batch_size", ">", "0", "\n", "assert", "N", ">", "batch_size", "\n", "\n", "# Load inception model", "\n", "inception_model", "=", "inception_v3", "(", "pretrained", "=", "True", ",", "transform_input", "=", "True", ")", "\n", "up", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "299", ",", "299", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "inception_model", ".", "cuda", "(", "0", ")", "\n", "up", ".", "cuda", "(", "0", ")", "\n", "", "inception_model", ".", "eval", "(", ")", "\n", "\n", "def", "get_pred", "(", "x", ")", ":", "\n", "        ", "if", "resize", ":", "\n", "            ", "x", "=", "up", "(", "x", ")", "\n", "", "x", "=", "inception_model", "(", "x", ")", "\n", "return", "F", ".", "softmax", "(", "x", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# Get predictions", "\n", "", "preds", "=", "np", ".", "zeros", "(", "(", "N", ",", "1000", ")", ")", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "N", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "batch", "=", "torch", ".", "from_numpy", "(", "imgs", "[", "i", "*", "batch_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", ",", "N", ")", "]", ")", "\n", "batchv", "=", "Variable", "(", "batch", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "batchv", "=", "batchv", ".", "cuda", "(", "0", ")", "\n", "\n", "", "preds", "[", "i", "*", "batch_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", ",", "N", ")", "]", "=", "get_pred", "(", "batchv", ")", "\n", "\n", "# Now compute the mean kl-div", "\n", "", "scores", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "preds", "[", "(", "i", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.ResEncoder.__init__": [[51, 78], ["nn.Module.__init__", "base_function.get_norm_layer", "base_function.get_nonlinearity_layer", "base_function.ResBlockEncoderOptimized", "range", "range", "base_function.ResBlock", "base_function.ResBlock", "min", "base_function.ResBlock", "setattr", "base_function.ResBlock", "setattr", "str", "str"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.get_norm_layer", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.get_nonlinearity_layer"], ["\n", "\n", "def", "__init__", "(", "self", ",", "name", ":", "str", "=", "None", ",", "func_name", ":", "Any", "=", "None", ",", "**", "static_kwargs", ")", ":", "\n", "        ", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "assert", "isinstance", "(", "name", ",", "str", ")", "or", "name", "is", "None", "\n", "assert", "func_name", "is", "not", "None", "\n", "assert", "isinstance", "(", "func_name", ",", "str", ")", "or", "util", ".", "is_top_level_function", "(", "func_name", ")", "\n", "assert", "util", ".", "is_pickleable", "(", "static_kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.ResEncoder.forward": [[79, 108], ["network.ResEncoder.block0", "range", "type", "type", "torch.cat", "getattr", "getattr.", "feature.append", "type", "type", "network.ResEncoder.two_paths", "network.ResEncoder.one_path", "str"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.network.ResEncoder.two_paths", "home.repos.pwc.inspect_result.plai-group_ipa.model.network.ResEncoder.one_path"], ["\n", "self", ".", "_init_fields", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", "static_kwargs", ")", "\n", "\n", "# Locate the user-specified network build function.", "\n", "if", "util", ".", "is_top_level_function", "(", "func_name", ")", ":", "\n", "            ", "func_name", "=", "util", ".", "get_top_level_function_name", "(", "func_name", ")", "\n", "", "module", ",", "self", ".", "_build_func_name", "=", "util", ".", "get_module_from_obj_name", "(", "func_name", ")", "\n", "self", ".", "_build_func", "=", "util", ".", "get_obj_from_module", "(", "module", ",", "self", ".", "_build_func_name", ")", "\n", "assert", "callable", "(", "self", ".", "_build_func", ")", "\n", "\n", "# Dig up source code for the module containing the build function.", "\n", "self", ".", "_build_module_src", "=", "_import_module_src", ".", "get", "(", "module", ",", "None", ")", "\n", "if", "self", ".", "_build_module_src", "is", "None", ":", "\n", "            ", "self", ".", "_build_module_src", "=", "inspect", ".", "getsource", "(", "module", ")", "\n", "\n", "# Init TensorFlow graph.", "\n", "", "self", ".", "_init_graph", "(", ")", "\n", "self", ".", "reset_own_vars", "(", ")", "\n", "\n", "", "def", "_init_fields", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "name", "=", "None", "\n", "self", ".", "scope", "=", "None", "\n", "self", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", ")", "\n", "self", ".", "components", "=", "util", ".", "EasyDict", "(", ")", "\n", "self", ".", "num_inputs", "=", "0", "\n", "self", ".", "num_outputs", "=", "0", "\n", "self", ".", "input_shapes", "=", "[", "[", "]", "]", "\n", "self", ".", "output_shapes", "=", "[", "[", "]", "]", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.ResEncoder.one_path": [[109, 125], ["range", "network.ResEncoder.prior", "torch.split", "distribution.append", "getattr", "getattr.", "torch.softplus", "str"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GP.prior"], ["self", ".", "input_shape", "=", "[", "]", "\n", "self", ".", "output_shape", "=", "[", "]", "\n", "self", ".", "input_templates", "=", "[", "]", "\n", "self", ".", "output_templates", "=", "[", "]", "\n", "self", ".", "input_names", "=", "[", "]", "\n", "self", ".", "output_names", "=", "[", "]", "\n", "self", ".", "own_vars", "=", "OrderedDict", "(", ")", "\n", "self", ".", "vars", "=", "OrderedDict", "(", ")", "\n", "self", ".", "trainables", "=", "OrderedDict", "(", ")", "\n", "self", ".", "var_global_to_local", "=", "OrderedDict", "(", ")", "\n", "\n", "self", ".", "_build_func", "=", "None", "# User-supplied build function that constructs the network.", "\n", "self", ".", "_build_func_name", "=", "None", "# Name of the build function.", "\n", "self", ".", "_build_module_src", "=", "None", "# Full source code of the module containing the build function.", "\n", "self", ".", "_run_cache", "=", "dict", "(", ")", "# Cached graph data for Network.run().", "\n", "\n", "", "def", "_init_graph", "(", "self", ")", "->", "None", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.ResEncoder.two_paths": [[126, 138], ["f_in.chunk", "network.ResEncoder.posterior", "torch.split", "network.ResEncoder.one_path", "distributions.append", "torch.softplus"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GP.posterior", "home.repos.pwc.inspect_result.plai-group_ipa.model.network.ResEncoder.one_path"], ["# Collect inputs.", "\n", "        ", "self", ".", "input_names", "=", "[", "]", "\n", "\n", "for", "param", "in", "inspect", ".", "signature", "(", "self", ".", "_build_func", ")", ".", "parameters", ".", "values", "(", ")", ":", "\n", "            ", "if", "param", ".", "kind", "==", "param", ".", "POSITIONAL_OR_KEYWORD", "and", "param", ".", "default", "is", "param", ".", "empty", ":", "\n", "                ", "self", ".", "input_names", ".", "append", "(", "param", ".", "name", ")", "\n", "\n", "", "", "self", ".", "num_inputs", "=", "len", "(", "self", ".", "input_names", ")", "\n", "assert", "self", ".", "num_inputs", ">=", "1", "\n", "\n", "# Choose name and scope.", "\n", "if", "self", ".", "name", "is", "None", ":", "\n", "            ", "self", ".", "name", "=", "self", ".", "_build_func_name", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.ResGenerator.__init__": [[153, 192], ["nn.Module.__init__", "base_function.get_norm_layer", "base_function.get_nonlinearity_layer", "min", "base_function.ResBlock", "range", "range", "base_function.ResBlock", "setattr", "min", "setattr", "base_function.ResBlockDecoder", "base_function.ResBlockDecoder", "base_function.Output", "setattr", "base_function.Auto_Attn", "setattr", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.get_norm_layer", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.get_nonlinearity_layer"], ["                ", "self", ".", "input_templates", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "name", ")", "for", "name", "in", "self", ".", "input_names", "]", "\n", "out_expr", "=", "self", ".", "_build_func", "(", "*", "self", ".", "input_templates", ",", "**", "build_kwargs", ")", "\n", "\n", "# Collect outputs.", "\n", "", "", "assert", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "or", "isinstance", "(", "out_expr", ",", "tuple", ")", "\n", "self", ".", "output_templates", "=", "[", "out_expr", "]", "if", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "else", "list", "(", "out_expr", ")", "\n", "self", ".", "num_outputs", "=", "len", "(", "self", ".", "output_templates", ")", "\n", "assert", "self", ".", "num_outputs", ">=", "1", "\n", "assert", "all", "(", "tfutil", ".", "is_tf_expression", "(", "t", ")", "for", "t", "in", "self", ".", "output_templates", ")", "\n", "\n", "# Perform sanity checks.", "\n", "if", "any", "(", "t", ".", "shape", ".", "ndims", "is", "None", "for", "t", "in", "self", ".", "input_templates", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Network input shapes not defined. Please call x.set_shape() for each input.\"", ")", "\n", "", "if", "any", "(", "t", ".", "shape", ".", "ndims", "is", "None", "for", "t", "in", "self", ".", "output_templates", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Network output shapes not defined. Please call x.set_shape() where applicable.\"", ")", "\n", "", "if", "any", "(", "not", "isinstance", "(", "comp", ",", "Network", ")", "for", "comp", "in", "self", ".", "components", ".", "values", "(", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Components of a Network must be Networks themselves.\"", ")", "\n", "", "if", "len", "(", "self", ".", "components", ")", "!=", "len", "(", "set", "(", "comp", ".", "name", "for", "comp", "in", "self", ".", "components", ".", "values", "(", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Components of a Network must have unique names.\"", ")", "\n", "\n", "# List inputs and outputs.", "\n", "", "self", ".", "input_shapes", "=", "[", "t", ".", "shape", ".", "as_list", "(", ")", "for", "t", "in", "self", ".", "input_templates", "]", "\n", "self", ".", "output_shapes", "=", "[", "t", ".", "shape", ".", "as_list", "(", ")", "for", "t", "in", "self", ".", "output_templates", "]", "\n", "self", ".", "input_shape", "=", "self", ".", "input_shapes", "[", "0", "]", "\n", "self", ".", "output_shape", "=", "self", ".", "output_shapes", "[", "0", "]", "\n", "self", ".", "output_names", "=", "[", "t", ".", "name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\":\"", ")", "[", "0", "]", "for", "t", "in", "self", ".", "output_templates", "]", "\n", "\n", "# List variables.", "\n", "self", ".", "own_vars", "=", "OrderedDict", "(", "(", "var", ".", "name", "[", "len", "(", "self", ".", "scope", ")", "+", "1", ":", "]", ".", "split", "(", "\":\"", ")", "[", "0", "]", ",", "var", ")", "for", "var", "in", "tf", ".", "global_variables", "(", "self", ".", "scope", "+", "\"/\"", ")", ")", "\n", "self", ".", "vars", "=", "OrderedDict", "(", "self", ".", "own_vars", ")", "\n", "self", ".", "vars", ".", "update", "(", "(", "comp", ".", "name", "+", "\"/\"", "+", "name", ",", "var", ")", "for", "comp", "in", "self", ".", "components", ".", "values", "(", ")", "for", "name", ",", "var", "in", "comp", ".", "vars", ".", "items", "(", ")", ")", "\n", "self", ".", "trainables", "=", "OrderedDict", "(", "(", "name", ",", "var", ")", "for", "name", ",", "var", "in", "self", ".", "vars", ".", "items", "(", ")", "if", "var", ".", "trainable", ")", "\n", "self", ".", "var_global_to_local", "=", "OrderedDict", "(", "(", "var", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", ",", "name", ")", "for", "name", ",", "var", "in", "self", ".", "vars", ".", "items", "(", ")", ")", "\n", "\n", "", "def", "reset_own_vars", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Re-initialize all variables of this network, excluding sub-networks.\"\"\"", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "own_vars", ".", "values", "(", ")", "]", ")", "\n", "\n", "", "def", "reset_vars", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Re-initialize all variables of this network, including sub-networks.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.ResGenerator.forward": [[193, 225], ["network.ResGenerator.generator", "range", "range", "getattr", "getattr.", "getattr", "getattr.", "getattr", "getattr.", "getattr", "getattr.", "results.append", "torch.cat", "str", "str", "str", "str"], "methods", ["None"], ["tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "vars", ".", "values", "(", ")", "]", ")", "\n", "\n", "", "def", "reset_trainables", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Re-initialize all trainable variables of this network, including sub-networks.\"\"\"", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "trainables", ".", "values", "(", ")", "]", ")", "\n", "\n", "", "def", "get_output_for", "(", "self", ",", "*", "in_expr", ":", "TfExpression", ",", "return_as_list", ":", "bool", "=", "False", ",", "**", "dynamic_kwargs", ")", "->", "Union", "[", "TfExpression", ",", "List", "[", "TfExpression", "]", "]", ":", "\n", "        ", "\"\"\"Construct TensorFlow expression(s) for the output(s) of this network, given the input expression(s).\"\"\"", "\n", "assert", "len", "(", "in_expr", ")", "==", "self", ".", "num_inputs", "\n", "assert", "not", "all", "(", "expr", "is", "None", "for", "expr", "in", "in_expr", ")", "\n", "\n", "# Finalize build func kwargs.", "\n", "build_kwargs", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "build_kwargs", ".", "update", "(", "dynamic_kwargs", ")", "\n", "build_kwargs", "[", "\"is_template_graph\"", "]", "=", "False", "\n", "build_kwargs", "[", "\"components\"", "]", "=", "self", ".", "components", "\n", "\n", "# Build TensorFlow graph to evaluate the network.", "\n", "with", "tfutil", ".", "absolute_variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "True", ")", ",", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "==", "self", ".", "scope", "\n", "valid_inputs", "=", "[", "expr", "for", "expr", "in", "in_expr", "if", "expr", "is", "not", "None", "]", "\n", "final_inputs", "=", "[", "]", "\n", "for", "expr", ",", "name", ",", "shape", "in", "zip", "(", "in_expr", ",", "self", ".", "input_names", ",", "self", ".", "input_shapes", ")", ":", "\n", "                ", "if", "expr", "is", "not", "None", ":", "\n", "                    ", "expr", "=", "tf", ".", "identity", "(", "expr", ",", "name", "=", "name", ")", "\n", "", "else", ":", "\n", "                    ", "expr", "=", "tf", ".", "zeros", "(", "[", "tf", ".", "shape", "(", "valid_inputs", "[", "0", "]", ")", "[", "0", "]", "]", "+", "shape", "[", "1", ":", "]", ",", "name", "=", "name", ")", "\n", "", "final_inputs", ".", "append", "(", "expr", ")", "\n", "", "out_expr", "=", "self", ".", "_build_func", "(", "*", "final_inputs", ",", "**", "build_kwargs", ")", "\n", "\n", "# Propagate input shapes back to the user-specified expressions.", "\n", "", "for", "expr", ",", "final", "in", "zip", "(", "in_expr", ",", "final_inputs", ")", ":", "\n", "            ", "if", "isinstance", "(", "expr", ",", "tf", ".", "Tensor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.ResDiscriminator.__init__": [[237, 264], ["nn.Module.__init__", "base_function.get_norm_layer", "base_function.get_nonlinearity_layer", "base_function.ResBlockEncoderOptimized", "range", "base_function.ResBlock", "external_function.SpectralNorm", "min", "base_function.ResBlock", "setattr", "nn.Conv2d", "base_function.Auto_Attn", "setattr", "str", "str"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.get_norm_layer", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.get_nonlinearity_layer"], ["global_name", "=", "var_or_global_name", "if", "isinstance", "(", "var_or_global_name", ",", "str", ")", "else", "var_or_global_name", ".", "name", "\n", "return", "self", ".", "var_global_to_local", "[", "global_name", "]", "\n", "\n", "", "def", "find_var", "(", "self", ",", "var_or_local_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ")", "->", "TfExpression", ":", "\n", "        ", "\"\"\"Find variable by local or global name.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "var_or_local_name", ")", "or", "isinstance", "(", "var_or_local_name", ",", "str", ")", "\n", "return", "self", ".", "vars", "[", "var_or_local_name", "]", "if", "isinstance", "(", "var_or_local_name", ",", "str", ")", "else", "var_or_local_name", "\n", "\n", "", "def", "get_var", "(", "self", ",", "var_or_local_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Get the value of a given variable as NumPy array.\n        Note: This method is very inefficient -- prefer to use tflib.run(list_of_vars) whenever possible.\"\"\"", "\n", "return", "self", ".", "find_var", "(", "var_or_local_name", ")", ".", "eval", "(", ")", "\n", "\n", "", "def", "set_var", "(", "self", ",", "var_or_local_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ",", "new_value", ":", "Union", "[", "int", ",", "float", ",", "np", ".", "ndarray", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Set the value of a given variable based on the given NumPy array.\n        Note: This method is very inefficient -- prefer to use tflib.set_vars() whenever possible.\"\"\"", "\n", "tfutil", ".", "set_vars", "(", "{", "self", ".", "find_var", "(", "var_or_local_name", ")", ":", "new_value", "}", ")", "\n", "\n", "", "def", "__getstate__", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Pickle export.\"\"\"", "\n", "state", "=", "dict", "(", ")", "\n", "state", "[", "\"version\"", "]", "=", "4", "\n", "state", "[", "\"name\"", "]", "=", "self", ".", "name", "\n", "state", "[", "\"static_kwargs\"", "]", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "state", "[", "\"components\"", "]", "=", "dict", "(", "self", ".", "components", ")", "\n", "state", "[", "\"build_module_src\"", "]", "=", "self", ".", "_build_module_src", "\n", "state", "[", "\"build_func_name\"", "]", "=", "self", ".", "_build_func_name", "\n", "state", "[", "\"variables\"", "]", "=", "list", "(", "zip", "(", "self", ".", "own_vars", ".", "keys", "(", ")", ",", "tfutil", ".", "run", "(", "list", "(", "self", ".", "own_vars", ".", "values", "(", ")", ")", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.ResDiscriminator.forward": [[265, 276], ["network.ResDiscriminator.block0", "range", "network.ResDiscriminator.block1", "network.ResDiscriminator.conv", "getattr", "getattr.", "network.ResDiscriminator.nonlinearity", "getattr", "getattr.", "str", "str"], "methods", ["None"], ["return", "state", "\n", "\n", "", "def", "__setstate__", "(", "self", ",", "state", ":", "dict", ")", "->", "None", ":", "\n", "        ", "\"\"\"Pickle import.\"\"\"", "\n", "# pylint: disable=attribute-defined-outside-init", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "self", ".", "_init_fields", "(", ")", "\n", "\n", "# Execute custom import handlers.", "\n", "for", "handler", "in", "_import_handlers", ":", "\n", "            ", "state", "=", "handler", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.PatchDiscriminator.__init__": [[291, 323], ["nn.Module.__init__", "base_function.get_norm_layer", "base_function.get_nonlinearity_layer", "range", "min", "nn.Sequential", "base_function.coord_conv", "min", "base_function.coord_conv", "base_function.coord_conv", "base_function.coord_conv"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.get_norm_layer", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.get_nonlinearity_layer", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.coord_conv", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.coord_conv", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.coord_conv", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.coord_conv"], ["\n", "# Locate network build function in the temporary module.", "\n", "self", ".", "_build_func", "=", "util", ".", "get_obj_from_module", "(", "module", ",", "self", ".", "_build_func_name", ")", "\n", "assert", "callable", "(", "self", ".", "_build_func", ")", "\n", "\n", "# Init TensorFlow graph.", "\n", "self", ".", "_init_graph", "(", ")", "\n", "self", ".", "reset_own_vars", "(", ")", "\n", "tfutil", ".", "set_vars", "(", "{", "self", ".", "find_var", "(", "name", ")", ":", "value", "for", "name", ",", "value", "in", "state", "[", "\"variables\"", "]", "}", ")", "\n", "\n", "", "def", "clone", "(", "self", ",", "name", ":", "str", "=", "None", ",", "**", "new_static_kwargs", ")", "->", "\"Network\"", ":", "\n", "        ", "\"\"\"Create a clone of this network with its own copy of the variables.\"\"\"", "\n", "# pylint: disable=protected-access", "\n", "net", "=", "object", ".", "__new__", "(", "Network", ")", "\n", "net", ".", "_init_fields", "(", ")", "\n", "net", ".", "name", "=", "name", "if", "name", "is", "not", "None", "else", "self", ".", "name", "\n", "net", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", "self", ".", "static_kwargs", ")", "\n", "net", ".", "static_kwargs", ".", "update", "(", "new_static_kwargs", ")", "\n", "net", ".", "_build_module_src", "=", "self", ".", "_build_module_src", "\n", "net", ".", "_build_func_name", "=", "self", ".", "_build_func_name", "\n", "net", ".", "_build_func", "=", "self", ".", "_build_func", "\n", "net", ".", "_init_graph", "(", ")", "\n", "net", ".", "copy_vars_from", "(", "self", ")", "\n", "return", "net", "\n", "\n", "", "def", "copy_own_vars_from", "(", "self", ",", "src_net", ":", "\"Network\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"Copy the values of all variables from the given network, excluding sub-networks.\"\"\"", "\n", "names", "=", "[", "name", "for", "name", "in", "self", ".", "own_vars", ".", "keys", "(", ")", "if", "name", "in", "src_net", ".", "own_vars", "]", "\n", "tfutil", ".", "set_vars", "(", "tfutil", ".", "run", "(", "{", "self", ".", "vars", "[", "name", "]", ":", "src_net", ".", "vars", "[", "name", "]", "for", "name", "in", "names", "}", ")", ")", "\n", "\n", "", "def", "copy_vars_from", "(", "self", ",", "src_net", ":", "\"Network\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"Copy the values of all variables from the given network, including sub-networks.\"\"\"", "\n", "names", "=", "[", "name", "for", "name", "in", "self", ".", "vars", ".", "keys", "(", ")", "if", "name", "in", "src_net", ".", "vars", "]", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.PatchDiscriminator.forward": [[324, 327], ["network.PatchDiscriminator.model"], "methods", ["None"], ["tfutil", ".", "set_vars", "(", "tfutil", ".", "run", "(", "{", "self", ".", "vars", "[", "name", "]", ":", "src_net", ".", "vars", "[", "name", "]", "for", "name", "in", "names", "}", ")", ")", "\n", "\n", "", "def", "copy_trainables_from", "(", "self", ",", "src_net", ":", "\"Network\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"Copy the values of all trainable variables from the given network, including sub-networks.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.define_e": [[9, 15], ["network.ResEncoder", "base_function.init_net"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.init_net"], ["import", "types", "\n", "import", "inspect", "\n", "import", "re", "\n", "import", "uuid", "\n", "import", "sys", "\n", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.define_g": [[17, 23], ["network.ResGenerator", "base_function.init_net"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.init_net"], ["from", "collections", "import", "OrderedDict", "\n", "from", "typing", "import", "Any", ",", "List", ",", "Tuple", ",", "Union", "\n", "\n", "from", ".", "import", "tfutil", "\n", "from", ".", ".", "import", "util", "\n", "\n", "from", ".", "tfutil", "import", "TfExpression", ",", "TfExpressionEx", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.network.define_d": [[25, 34], ["base_function.init_net", "network.ResDiscriminator", "network.PatchDiscriminator"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.init_net"], ["_import_handlers", "=", "[", "]", "# Custom import handlers for dealing with legacy data in pickle import.", "\n", "_import_module_src", "=", "dict", "(", ")", "# Source code for temporary modules created during pickle import.", "\n", "\n", "\n", "def", "import_handler", "(", "handler_func", ")", ":", "\n", "    ", "\"\"\"Function decorator for declaring custom import handlers.\"\"\"", "\n", "_import_handlers", ".", "append", "(", "handler_func", ")", "\n", "return", "handler_func", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.AddCoords.__init__": [[142, 145], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "with_r", "=", "False", ")", ":", "\n", "        ", "super", "(", "AddCoords", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_r", "=", "with_r", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.AddCoords.forward": [[146, 169], ["x.size", "torch.arange().repeat().type_as", "torch.arange().repeat().type_as", "torch.arange().repeat().type_as", "torch.arange().repeat().type_as", "torch.arange().repeat().permute().type_as", "torch.arange().repeat().permute().type_as", "torch.arange().repeat().permute().type_as", "torch.arange().repeat().permute().type_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().repeat().type_as.float", "torch.arange().repeat().type_as.float", "torch.arange().repeat().permute().type_as.float", "torch.arange().repeat().permute().type_as.float", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat().permute", "torch.arange().repeat().permute", "torch.arange().repeat().permute", "torch.arange().repeat().permute", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: shape (batch, channel, x_dim, y_dim)\n        :return: shape (batch, channel+2, x_dim, y_dim)\n        \"\"\"", "\n", "B", ",", "_", ",", "x_dim", ",", "y_dim", "=", "x", ".", "size", "(", ")", "\n", "\n", "# coord calculate", "\n", "xx_channel", "=", "torch", ".", "arange", "(", "x_dim", ")", ".", "repeat", "(", "B", ",", "1", ",", "y_dim", ",", "1", ")", ".", "type_as", "(", "x", ")", "\n", "yy_cahnnel", "=", "torch", ".", "arange", "(", "y_dim", ")", ".", "repeat", "(", "B", ",", "1", ",", "x_dim", ",", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "type_as", "(", "x", ")", "\n", "# normalization", "\n", "xx_channel", "=", "xx_channel", ".", "float", "(", ")", "/", "(", "x_dim", "-", "1", ")", "\n", "yy_cahnnel", "=", "yy_cahnnel", ".", "float", "(", ")", "/", "(", "y_dim", "-", "1", ")", "\n", "xx_channel", "=", "xx_channel", "*", "2", "-", "1", "\n", "yy_cahnnel", "=", "yy_cahnnel", "*", "2", "-", "1", "\n", "\n", "ret", "=", "torch", ".", "cat", "(", "[", "x", ",", "xx_channel", ",", "yy_cahnnel", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "with_r", ":", "\n", "            ", "rr", "=", "torch", ".", "sqrt", "(", "xx_channel", "**", "2", "+", "yy_cahnnel", "**", "2", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "[", "ret", ",", "rr", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.CoordConv.__init__": [[175, 182], ["torch.Module.__init__", "base_function.AddCoords", "base_function.spectral_norm", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.spectral_norm"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "with_r", "=", "False", ",", "use_spect", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CoordConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "addcoords", "=", "AddCoords", "(", "with_r", "=", "with_r", ")", "\n", "input_nc", "=", "input_nc", "+", "2", "\n", "if", "with_r", ":", "\n", "            ", "input_nc", "=", "input_nc", "+", "1", "\n", "", "self", ".", "conv", "=", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "**", "kwargs", ")", ",", "use_spect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.CoordConv.forward": [[183, 188], ["base_function.CoordConv.addcoords", "base_function.CoordConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ret", "=", "self", ".", "addcoords", "(", "x", ")", "\n", "ret", "=", "self", ".", "conv", "(", "ret", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.ResBlock.__init__": [[194, 223], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "base_function.coord_conv", "base_function.coord_conv", "base_function.coord_conv", "torch.Sequential", "torch.Sequential", "type", "type", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.PixelShuffle", "torch.PixelShuffle", "norm_layer", "norm_layer", "torch.AvgPool2d", "torch.AvgPool2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.coord_conv", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.coord_conv", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.coord_conv"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "hidden_nc", "=", "None", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "sample_type", "=", "'none'", ",", "use_spect", "=", "False", ",", "use_coord", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "hidden_nc", "=", "output_nc", "if", "hidden_nc", "is", "None", "else", "hidden_nc", "\n", "self", ".", "sample", "=", "True", "\n", "if", "sample_type", "==", "'none'", ":", "\n", "            ", "self", ".", "sample", "=", "False", "\n", "", "elif", "sample_type", "==", "'up'", ":", "\n", "            ", "output_nc", "=", "output_nc", "*", "4", "\n", "self", ".", "pool", "=", "nn", ".", "PixelShuffle", "(", "upscale_factor", "=", "2", ")", "\n", "", "elif", "sample_type", "==", "'down'", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'sample type [%s] is not found'", "%", "sample_type", ")", "\n", "\n", "", "kwargs", "=", "{", "'kernel_size'", ":", "3", ",", "'stride'", ":", "1", ",", "'padding'", ":", "1", "}", "\n", "kwargs_short", "=", "{", "'kernel_size'", ":", "1", ",", "'stride'", ":", "1", ",", "'padding'", ":", "0", "}", "\n", "\n", "self", ".", "conv1", "=", "coord_conv", "(", "input_nc", ",", "hidden_nc", ",", "use_spect", ",", "use_coord", ",", "**", "kwargs", ")", "\n", "self", ".", "conv2", "=", "coord_conv", "(", "hidden_nc", ",", "output_nc", ",", "use_spect", ",", "use_coord", ",", "**", "kwargs", ")", "\n", "self", ".", "bypass", "=", "coord_conv", "(", "input_nc", ",", "output_nc", ",", "use_spect", ",", "use_coord", ",", "**", "kwargs_short", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "type", "(", "None", ")", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "nonlinearity", ",", "self", ".", "conv1", ",", "nonlinearity", ",", "self", ".", "conv2", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "input_nc", ")", ",", "nonlinearity", ",", "self", ".", "conv1", ",", "norm_layer", "(", "hidden_nc", ")", ",", "nonlinearity", ",", "self", ".", "conv2", ",", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "self", ".", "bypass", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.ResBlock.forward": [[224, 231], ["base_function.ResBlock.pool", "base_function.ResBlock.pool", "base_function.ResBlock.model", "base_function.ResBlock.shortcut", "base_function.ResBlock.model", "base_function.ResBlock.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "sample", ":", "\n", "            ", "out", "=", "self", ".", "pool", "(", "self", ".", "model", "(", "x", ")", ")", "+", "self", ".", "pool", "(", "self", ".", "shortcut", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "model", "(", "x", ")", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.ResBlockEncoderOptimized.__init__": [[237, 253], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "base_function.coord_conv", "base_function.coord_conv", "base_function.coord_conv", "torch.Sequential", "torch.Sequential", "type", "type", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "norm_layer", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.coord_conv", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.coord_conv", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.coord_conv"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "LeakyReLU", "(", ")", ",", "use_spect", "=", "False", ",", "use_coord", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResBlockEncoderOptimized", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "kwargs", "=", "{", "'kernel_size'", ":", "3", ",", "'stride'", ":", "1", ",", "'padding'", ":", "1", "}", "\n", "kwargs_short", "=", "{", "'kernel_size'", ":", "1", ",", "'stride'", ":", "1", ",", "'padding'", ":", "0", "}", "\n", "\n", "self", ".", "conv1", "=", "coord_conv", "(", "input_nc", ",", "output_nc", ",", "use_spect", ",", "use_coord", ",", "**", "kwargs", ")", "\n", "self", ".", "conv2", "=", "coord_conv", "(", "output_nc", ",", "output_nc", ",", "use_spect", ",", "use_coord", ",", "**", "kwargs", ")", "\n", "self", ".", "bypass", "=", "coord_conv", "(", "input_nc", ",", "output_nc", ",", "use_spect", ",", "use_coord", ",", "**", "kwargs_short", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "type", "(", "None", ")", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "nonlinearity", ",", "self", ".", "conv2", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "norm_layer", "(", "output_nc", ")", ",", "nonlinearity", ",", "self", ".", "conv2", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "self", ".", "bypass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.ResBlockEncoderOptimized.forward": [[254, 258], ["base_function.ResBlockEncoderOptimized.model", "base_function.ResBlockEncoderOptimized.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "model", "(", "x", ")", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.ResBlockDecoder.__init__": [[264, 280], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "base_function.spectral_norm", "base_function.spectral_norm", "base_function.spectral_norm", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "type", "type", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "norm_layer", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.spectral_norm", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.spectral_norm", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.spectral_norm"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "hidden_nc", "=", "None", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "use_spect", "=", "False", ",", "use_coord", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResBlockDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "hidden_nc", "=", "output_nc", "if", "hidden_nc", "is", "None", "else", "hidden_nc", "\n", "\n", "self", ".", "conv1", "=", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "input_nc", ",", "hidden_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "use_spect", ")", "\n", "self", ".", "conv2", "=", "spectral_norm", "(", "nn", ".", "ConvTranspose2d", "(", "hidden_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "use_spect", ")", "\n", "self", ".", "bypass", "=", "spectral_norm", "(", "nn", ".", "ConvTranspose2d", "(", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "use_spect", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "type", "(", "None", ")", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "nonlinearity", ",", "self", ".", "conv1", ",", "nonlinearity", ",", "self", ".", "conv2", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "input_nc", ")", ",", "nonlinearity", ",", "self", ".", "conv1", ",", "norm_layer", "(", "hidden_nc", ")", ",", "nonlinearity", ",", "self", ".", "conv2", ",", ")", "\n", "\n", "", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "self", ".", "bypass", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.ResBlockDecoder.forward": [[281, 285], ["base_function.ResBlockDecoder.model", "base_function.ResBlockDecoder.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "model", "(", "x", ")", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.Output.__init__": [[291, 303], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "base_function.coord_conv", "type", "type", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Tanh", "torch.Tanh", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Tanh", "torch.Tanh", "int", "int"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.coord_conv"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "nonlinearity", "=", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "use_spect", "=", "False", ",", "use_coord", "=", "False", ")", ":", "\n", "        ", "super", "(", "Output", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "kwargs", "=", "{", "'kernel_size'", ":", "kernel_size", ",", "'padding'", ":", "0", ",", "'bias'", ":", "True", "}", "\n", "\n", "self", ".", "conv1", "=", "coord_conv", "(", "input_nc", ",", "output_nc", ",", "use_spect", ",", "use_coord", ",", "**", "kwargs", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "type", "(", "None", ")", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "nonlinearity", ",", "nn", ".", "ReflectionPad2d", "(", "int", "(", "kernel_size", "/", "2", ")", ")", ",", "self", ".", "conv1", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "norm_layer", "(", "input_nc", ")", ",", "nonlinearity", ",", "nn", ".", "ReflectionPad2d", "(", "int", "(", "kernel_size", "/", "2", ")", ")", ",", "self", ".", "conv1", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.Output.forward": [[304, 308], ["base_function.Output.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "model", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.Auto_Attn.__init__": [[313, 324], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "base_function.ResBlock", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "Auto_Attn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_nc", "=", "input_nc", "\n", "\n", "self", ".", "query_conv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "input_nc", "//", "4", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "self", ".", "model", "=", "ResBlock", "(", "int", "(", "input_nc", "*", "2", ")", ",", "input_nc", ",", "input_nc", ",", "norm_layer", "=", "norm_layer", ",", "use_spect", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.Auto_Attn.forward": [[325, 353], ["x.size", "base_function.Auto_Attn.query_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "base_function.Auto_Attn.softmax", "x.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "base_function.Auto_Attn.view", "base_function.Auto_Attn.permute", "base_function.Auto_Attn.permute", "type", "type", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "base_function.Auto_Attn.model", "base_function.Auto_Attn.query_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "pre.view", "base_function.Auto_Attn.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "pre", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        inputs :\n            x : input feature maps( B X C X W X H)\n        returns :\n            out : self attention value + input feature\n            attention: B X N X N (N is Width*Height)\n        \"\"\"", "\n", "B", ",", "C", ",", "W", ",", "H", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "self", ".", "query_conv", "(", "x", ")", ".", "view", "(", "B", ",", "-", "1", ",", "W", "*", "H", ")", "# B X (N)X C", "\n", "proj_key", "=", "proj_query", "# B X C x (N)", "\n", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "proj_key", ")", "# transpose check", "\n", "attention", "=", "self", ".", "softmax", "(", "energy", ")", "# BX (N) X (N)", "\n", "proj_value", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "W", "*", "H", ")", "# B X C X N", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "proj_value", ",", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "B", ",", "C", ",", "W", ",", "H", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "\n", "if", "type", "(", "pre", ")", "!=", "type", "(", "None", ")", ":", "\n", "# using long distance attention layer to copy information from valid regions", "\n", "            ", "context_flow", "=", "torch", ".", "bmm", "(", "pre", ".", "view", "(", "B", ",", "-", "1", ",", "W", "*", "H", ")", ",", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "view", "(", "B", ",", "-", "1", ",", "W", ",", "H", ")", "\n", "context_flow", "=", "self", ".", "alpha", "*", "(", "1", "-", "mask", ")", "*", "context_flow", "+", "(", "mask", ")", "*", "pre", "\n", "out", "=", "self", ".", "model", "(", "torch", ".", "cat", "(", "[", "out", ",", "context_flow", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "return", "out", ",", "attention", "\n", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.init_weights": [[13, 36], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "\"\"\"Get different initial method for the network weights\"\"\"", "\n", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.get_norm_layer": [[38, 49], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "def", "get_norm_layer", "(", "norm_type", "=", "'batch'", ")", ":", "\n", "    ", "\"\"\"Get the normalization layer for the networks\"\"\"", "\n", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.get_nonlinearity_layer": [[51, 64], ["torch.ReLU", "torch.SELU", "torch.LeakyReLU", "torch.PReLU", "NotImplementedError"], "function", ["None"], ["", "def", "get_nonlinearity_layer", "(", "activation_type", "=", "'PReLU'", ")", ":", "\n", "    ", "\"\"\"Get the activation layer for the networks\"\"\"", "\n", "if", "activation_type", "==", "'ReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "activation_type", "==", "'SELU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "SELU", "(", ")", "\n", "", "elif", "activation_type", "==", "'LeakyReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "", "elif", "activation_type", "==", "'PReLU'", ":", "\n", "        ", "nonlinearity_layer", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'activation layer [%s] is not found'", "%", "activation_type", ")", "\n", "", "return", "nonlinearity_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.get_scheduler": [[66, 80], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ExponentialLR", "NotImplementedError", "max", "float"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "\"\"\"Get the training learning rate for different epoch\"\"\"", "\n", "if", "opt", ".", "lr_policy", "==", "'lambda'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "1", "+", "1", "+", "opt", ".", "iter_count", "-", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'exponent'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "gamma", "=", "0.95", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.print_network": [[82, 89], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "\"\"\"print the network\"\"\"", "\n", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'total number of parameters: %.3f M'", "%", "(", "num_params", "/", "1e6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.init_net": [[91, 101], ["base_function.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.init_weights", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "activation", "=", "'relu'", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"print the network structure and initial the network\"\"\"", "\n", "#print_network(net)", "\n", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "cuda", "(", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "\n", "", "init_weights", "(", "net", ",", "init_type", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function._freeze": [[103, 109], ["module.parameters"], "function", ["None"], ["", "def", "_freeze", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"freeze the network for forward process\"\"\"", "\n", "for", "module", "in", "args", ":", "\n", "        ", "if", "module", ":", "\n", "            ", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function._unfreeze": [[111, 117], ["module.parameters"], "function", ["None"], ["", "", "", "", "def", "_unfreeze", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\" unfreeze the network for parameter update\"\"\"", "\n", "for", "module", "in", "args", ":", "\n", "        ", "if", "module", ":", "\n", "            ", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.spectral_norm": [[119, 125], ["external_function.SpectralNorm"], "function", ["None"], ["", "", "", "", "def", "spectral_norm", "(", "module", ",", "use_spect", "=", "True", ")", ":", "\n", "    ", "\"\"\"use spectral normal layer to stable the training process\"\"\"", "\n", "if", "use_spect", ":", "\n", "        ", "return", "SpectralNorm", "(", "module", ")", "\n", "", "else", ":", "\n", "        ", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.coord_conv": [[127, 133], ["base_function.CoordConv", "base_function.spectral_norm", "torch.Conv2d"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.spectral_norm"], ["", "", "def", "coord_conv", "(", "input_nc", ",", "output_nc", ",", "use_spect", "=", "False", ",", "use_coord", "=", "False", ",", "with_r", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"use coord convolution layer to add position information\"\"\"", "\n", "if", "use_coord", ":", "\n", "        ", "return", "CoordConv", "(", "input_nc", ",", "output_nc", ",", "with_r", ",", "use_spect", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "return", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "input_nc", ",", "output_nc", ",", "**", "kwargs", ")", ",", "use_spect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.SpectralNorm.__init__": [[22, 29], ["torch.nn.Module.__init__", "external_function.SpectralNorm._made_params", "external_function.SpectralNorm._make_params"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.SpectralNorm._made_params", "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.SpectralNorm._make_params"], ["def", "__init__", "(", "self", ",", "module", ",", "name", "=", "'weight'", ",", "power_iterations", "=", "1", ")", ":", "\n", "        ", "super", "(", "SpectralNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "power_iterations", "=", "power_iterations", "\n", "if", "not", "self", ".", "_made_params", "(", ")", ":", "\n", "            ", "self", ".", "_make_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.SpectralNorm._update_u_v": [[30, 42], ["getattr", "getattr", "getattr", "range", "getattr.dot", "setattr", "external_function.l2normalize", "external_function.l2normalize", "getattr.view().mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "getattr.dot.expand_as", "torch.t", "torch.t", "torch.t", "torch.t", "getattr.view", "getattr.view", "getattr.view"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.l2normalize", "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.l2normalize"], ["", "", "def", "_update_u_v", "(", "self", ")", ":", "\n", "        ", "u", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_u\"", ")", "\n", "v", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_v\"", ")", "\n", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_bar\"", ")", "\n", "\n", "height", "=", "w", ".", "data", ".", "shape", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "power_iterations", ")", ":", "\n", "            ", "v", ".", "data", "=", "l2normalize", "(", "torch", ".", "mv", "(", "torch", ".", "t", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ")", ",", "u", ".", "data", ")", ")", "\n", "u", ".", "data", "=", "l2normalize", "(", "torch", ".", "mv", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ",", "v", ".", "data", ")", ")", "\n", "\n", "", "sigma", "=", "u", ".", "dot", "(", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "mv", "(", "v", ")", ")", "\n", "setattr", "(", "self", ".", "module", ",", "self", ".", "name", ",", "w", "/", "sigma", ".", "expand_as", "(", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.SpectralNorm._made_params": [[43, 51], ["getattr", "getattr", "getattr"], "methods", ["None"], ["", "def", "_made_params", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "u", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_u\"", ")", "\n", "v", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_v\"", ")", "\n", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", "+", "\"_bar\"", ")", "\n", "return", "True", "\n", "", "except", "AttributeError", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.SpectralNorm._make_params": [[52, 69], ["getattr", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "external_function.l2normalize", "external_function.l2normalize", "torch.nn.Parameter", "torch.nn.Parameter", "external_function.SpectralNorm.module.register_parameter", "external_function.SpectralNorm.module.register_parameter", "external_function.SpectralNorm.module.register_parameter", "getattr.data.new().normal_", "getattr.data.new().normal_", "getattr.view", "getattr.data.new", "getattr.data.new"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.l2normalize", "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.l2normalize"], ["", "", "def", "_make_params", "(", "self", ")", ":", "\n", "        ", "w", "=", "getattr", "(", "self", ".", "module", ",", "self", ".", "name", ")", "\n", "\n", "height", "=", "w", ".", "data", ".", "shape", "[", "0", "]", "\n", "width", "=", "w", ".", "view", "(", "height", ",", "-", "1", ")", ".", "data", ".", "shape", "[", "1", "]", "\n", "\n", "u", "=", "Parameter", "(", "w", ".", "data", ".", "new", "(", "height", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "v", "=", "Parameter", "(", "w", ".", "data", ".", "new", "(", "width", ")", ".", "normal_", "(", "0", ",", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "u", ".", "data", "=", "l2normalize", "(", "u", ".", "data", ")", "\n", "v", ".", "data", "=", "l2normalize", "(", "v", ".", "data", ")", "\n", "w_bar", "=", "Parameter", "(", "w", ".", "data", ")", "\n", "\n", "del", "self", ".", "module", ".", "_parameters", "[", "self", ".", "name", "]", "\n", "\n", "self", ".", "module", ".", "register_parameter", "(", "self", ".", "name", "+", "\"_u\"", ",", "u", ")", "\n", "self", ".", "module", ".", "register_parameter", "(", "self", ".", "name", "+", "\"_v\"", ",", "v", ")", "\n", "self", ".", "module", ".", "register_parameter", "(", "self", ".", "name", "+", "\"_bar\"", ",", "w_bar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.SpectralNorm.forward": [[70, 73], ["external_function.SpectralNorm._update_u_v", "external_function.SpectralNorm.module.forward"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.SpectralNorm._update_u_v", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "_update_u_v", "(", ")", "\n", "return", "self", ".", "module", ".", "forward", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.GANLoss.__init__": [[86, 109], ["torch.nn.Module.__init__", "external_function.GANLoss.register_buffer", "external_function.GANLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.ReLU", "torch.nn.ReLU", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "gan_mode", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "\"\"\" Initialize the GANLoss class.\n        Parameters:\n            gan_mode (str) - - the type of GAN objective. It currently supports vanilla, lsgan, and wgangp.\n            target_real_label (bool) - - label for a real image\n            target_fake_label (bool) - - label of a fake image\n        Note: Do not use sigmoid as the last layer of Discriminator.\n        LSGAN needs no sigmoid. vanilla GANs will handle it with BCEWithLogitsLoss.\n        \"\"\"", "\n", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "if", "gan_mode", "==", "'lsgan'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "gan_mode", "==", "'vanilla'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "elif", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "gan_mode", "==", "'wgangp'", ":", "\n", "            ", "self", ".", "loss", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'gan mode %s not implemented'", "%", "gan_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.GANLoss.__call__": [[110, 132], ["external_function.GANLoss.loss", "external_function.GANLoss.loss().mean", "prediction.mean", "prediction.mean", "external_function.GANLoss.loss"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "prediction", ",", "target_is_real", ",", "is_disc", "=", "False", ")", ":", "\n", "        ", "\"\"\"Calculate loss given Discriminator's output and grount truth labels.\n        Parameters:\n            prediction (tensor) - - tpyically the prediction output from a discriminator\n            target_is_real (bool) - - if the ground truth label is for real images or fake images\n        Returns:\n            the calculated loss.\n        \"\"\"", "\n", "if", "self", ".", "gan_mode", "in", "[", "'lsgan'", ",", "'vanilla'", "]", ":", "\n", "            ", "labels", "=", "(", "self", ".", "real_label", "if", "target_is_real", "else", "self", ".", "fake_label", ")", ".", "expand_as", "(", "prediction", ")", ".", "type_as", "(", "prediction", ")", "\n", "loss", "=", "self", ".", "loss", "(", "prediction", ",", "labels", ")", "\n", "", "elif", "self", ".", "gan_mode", "in", "[", "'hinge'", ",", "'wgangp'", "]", ":", "\n", "            ", "if", "is_disc", ":", "\n", "                ", "if", "target_is_real", ":", "\n", "                    ", "prediction", "=", "-", "prediction", "\n", "", "if", "self", ".", "gan_mode", "==", "'hinge'", ":", "\n", "                    ", "loss", "=", "self", ".", "loss", "(", "1", "+", "prediction", ")", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'wgangp'", ":", "\n", "                    ", "loss", "=", "prediction", ".", "mean", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", "=", "-", "prediction", ".", "mean", "(", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.Normalization.__init__": [[201, 205], ["torch.nn.Module.__init__", "mean.view", "std.view"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "super", "(", "Normalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "mean", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "std", "=", "std", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.Normalization.forward": [[206, 208], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "(", "input", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.get_features.__init__": [[211, 221], ["torch.nn.Module.__init__", "copy.deepcopy", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cnn", ")", ":", "\n", "        ", "super", "(", "get_features", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "vgg", "=", "copy", ".", "deepcopy", "(", "cnn", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "vgg", "[", "0", "]", ",", "vgg", "[", "1", "]", ",", "vgg", "[", "2", "]", ",", "vgg", "[", "3", "]", ",", "vgg", "[", "4", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "vgg", "[", "5", "]", ",", "vgg", "[", "6", "]", ",", "vgg", "[", "7", "]", ",", "vgg", "[", "8", "]", ",", "vgg", "[", "9", "]", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "vgg", "[", "10", "]", ",", "vgg", "[", "11", "]", ",", "vgg", "[", "12", "]", ",", "vgg", "[", "13", "]", ",", "vgg", "[", "14", "]", ",", "vgg", "[", "15", "]", ",", "vgg", "[", "16", "]", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "vgg", "[", "17", "]", ",", "vgg", "[", "18", "]", ",", "vgg", "[", "19", "]", ",", "vgg", "[", "20", "]", ",", "vgg", "[", "21", "]", ",", "vgg", "[", "22", "]", ",", "vgg", "[", "23", "]", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "vgg", "[", "24", "]", ",", "vgg", "[", "25", "]", ",", "vgg", "[", "26", "]", ",", "vgg", "[", "27", "]", ",", "vgg", "[", "28", "]", ",", "vgg", "[", "29", "]", ",", "vgg", "[", "30", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.get_features.forward": [[222, 230], ["external_function.img_crop", "range", "getattr", "getattr.", "output.append", "str"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.img_crop"], ["", "def", "forward", "(", "self", ",", "input", ",", "layers", ")", ":", "\n", "        ", "input", "=", "img_crop", "(", "input", ")", "\n", "output", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "layers", ")", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "'conv'", "+", "str", "(", "i", ")", ")", "\n", "input", "=", "layer", "(", "input", ")", "\n", "output", ".", "append", "(", "input", ")", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.l2normalize": [[12, 14], ["v.norm"], "function", ["None"], ["def", "l2normalize", "(", "v", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "return", "v", "/", "(", "v", ".", "norm", "(", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.cal_gradient_penalty": [[134, 167], ["interpolatesv.requires_grad_", "netD", "torch.autograd.grad", "torch.autograd.grad", "gradients[].view", "real_data.size", "torch.ones().type_as", "torch.ones().type_as", "torch.rand", "torch.rand", "alpha.type_as.expand().contiguous().view", "alpha.type_as.type_as", "NotImplementedError", "torch.ones", "torch.ones", "alpha.type_as.expand().contiguous", "netD.size", "alpha.type_as.expand", "real_data.nelement"], "function", ["None"], ["", "", "def", "cal_gradient_penalty", "(", "netD", ",", "real_data", ",", "fake_data", ",", "type", "=", "'mixed'", ",", "constant", "=", "1.0", ",", "lambda_gp", "=", "10.0", ")", ":", "\n", "    ", "\"\"\"Calculate the gradient penalty loss, used in WGAN-GP paper https://arxiv.org/abs/1704.00028\n    Arguments:\n        netD (network)              -- discriminator network\n        real_data (tensor array)    -- real images\n        fake_data (tensor array)    -- generated images from the generator\n        type (str)                  -- if we mix real and fake data or not [real | fake | mixed].\n        constant (float)            -- the constant used in formula ( | |gradient||_2 - constant)^2\n        lambda_gp (float)           -- weight for this loss\n    Returns the gradient penalty loss\n    \"\"\"", "\n", "if", "lambda_gp", ">", "0.0", ":", "\n", "        ", "if", "type", "==", "'real'", ":", "# either use real images, fake images, or a linear interpolation of two.", "\n", "            ", "interpolatesv", "=", "real_data", "\n", "", "elif", "type", "==", "'fake'", ":", "\n", "            ", "interpolatesv", "=", "fake_data", "\n", "", "elif", "type", "==", "'mixed'", ":", "\n", "            ", "alpha", "=", "torch", ".", "rand", "(", "real_data", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "real_data", ".", "shape", "[", "0", "]", ",", "real_data", ".", "nelement", "(", ")", "//", "real_data", ".", "shape", "[", "0", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "*", "real_data", ".", "shape", ")", "\n", "alpha", "=", "alpha", ".", "type_as", "(", "real_data", ")", "\n", "interpolatesv", "=", "alpha", "*", "real_data", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_data", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'{} not implemented'", ".", "format", "(", "type", ")", ")", "\n", "", "interpolatesv", ".", "requires_grad_", "(", "True", ")", "\n", "disc_interpolates", "=", "netD", "(", "interpolatesv", ")", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolatesv", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "type_as", "(", "real_data", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "\n", "gradients", "=", "gradients", "[", "0", "]", ".", "view", "(", "real_data", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flat the data", "\n", "gradient_penalty", "=", "(", "(", "(", "gradients", "+", "1e-16", ")", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "constant", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "lambda_gp", "# added eps", "\n", "return", "gradient_penalty", ",", "gradients", "\n", "", "else", ":", "\n", "        ", "return", "0.0", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.ContentLoss": [[174, 178], ["target.detach.detach", "torch.l1_loss"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.l1_loss"], ["", "", "def", "ContentLoss", "(", "input", ",", "target", ")", ":", "\n", "    ", "target", "=", "target", ".", "detach", "(", ")", "\n", "loss", "=", "F", ".", "l1_loss", "(", "input", ",", "target", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.GramMatrix": [[180, 186], ["input.size", "input.view", "torch.transpose", "torch.transpose", "torch.bmm().div", "torch.bmm().div", "torch.bmm", "torch.bmm"], "function", ["None"], ["", "def", "GramMatrix", "(", "input", ")", ":", "\n", "    ", "s", "=", "input", ".", "size", "(", ")", "\n", "features", "=", "input", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", "*", "s", "[", "3", "]", ")", "\n", "features_t", "=", "torch", ".", "transpose", "(", "features", ",", "1", ",", "2", ")", "\n", "G", "=", "torch", ".", "bmm", "(", "features", ",", "features_t", ")", ".", "div", "(", "s", "[", "1", "]", "*", "s", "[", "2", "]", "*", "s", "[", "3", "]", ")", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.StyleLoss": [[188, 193], ["GramMatrix().detach", "external_function.GramMatrix", "torch.l1_loss", "external_function.GramMatrix"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.GramMatrix", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.l1_loss", "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.GramMatrix"], ["", "def", "StyleLoss", "(", "input", ",", "target", ")", ":", "\n", "    ", "target", "=", "GramMatrix", "(", "target", ")", ".", "detach", "(", ")", "\n", "input", "=", "GramMatrix", "(", "input", ")", "\n", "loss", "=", "F", ".", "l1_loss", "(", "input", ",", "target", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.img_crop": [[195, 198], ["torch.upsample"], "function", ["None"], ["", "def", "img_crop", "(", "input", ",", "size", "=", "224", ")", ":", "\n", "    ", "input_cropped", "=", "F", ".", "upsample", "(", "input", ",", "size", "=", "(", "size", ",", "size", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "input_cropped", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.__init__.find_model_using_name": [[7, 21], ["importlib.import_module", "importlib.import_module.__dict__.items", "print", "exit", "issubclass", "name.lower", "model_name.lower"], "function", ["None"], ["from", ".", "mask_generator", "import", "np_mask_generator", ",", "RandomMask", ",", "BatchRandomMask", "\n", "import", "multiprocessing", "as", "mp", "\n", "import", "random", "\n", "\n", "# def approx_gaussian_cross_entropy(mu1, logsigma1, mu2, logsigma2):", "\n", "#     \"\"\" returns E_{p1} [ -log p2 ]", "\n", "#         approximated with a zeroth order (first order terms are zero)", "\n", "#         Taylor expansion", "\n", "#         - accurate if sigma1 is small compared to (mu1-mu2)", "\n", "#         - logsigmas are elementwise stds assuming independence between all variables", "\n", "#     \"\"\"", "\n", "#     k = mu1.shape[-1]", "\n", "#     return logsigma2 + 0.5 * k*np.log(2*np.pi) + 0.5 * (mu1-mu2)**2 * (-2*logsigma2).exp()", "\n", "\n", "# def approx_gaussian_cross_entropy_scaled_grads(mu1, logsigma1, mu2, logsigma2, max_grad):", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.__init__.get_option_setter": [[23, 27], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.__init__.find_model_using_name"], ["#     grad_logsigma1 = 0. * grad_logsigma2", "\n", "#     grad_mu1 = (mu1-mu2) * (-2*logsigma2).exp()", "\n", "#     grad_mu2 = -grad_mu1", "\n", "#     grad_all = torch.stack([grad_mu1, grad_mu2, grad_logsigma1, grad_logsigma2], dim=-1)", "\n", "#     grad_norm = torch.norm(grad_all, dim=-1)", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.__init__.create_model": [[29, 37], ["model", "print", "type"], "function", ["None"], ["#     ce = approx_gaussian_cross_entropy(mu1, logsigma1, mu2, logsigma2)", "\n", "#     return ce.detach() + \\", "\n", "#         torch.sum(", "\n", "#             (scaling*grad_mu1).detach()* (mu1 - mu1.detach()) +", "\n", "#             (scaling*grad_mu2).detach()* (mu2 - mu2.detach()) +", "\n", "#             (scaling*grad_logsigma1).detach()* (logsigma1 - logsigma1.detach()) +", "\n", "#             (scaling*grad_logsigma2).detach()* (logsigma2 - logsigma2.detach()),", "\n", "#             dim=-1)", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.__init__": [[9, 21], ["os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "self", ".", "loss_names", "=", "[", "]", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "self", ".", "visual_names", "=", "[", "]", "\n", "self", ".", "value_names", "=", "[", "]", "\n", "self", ".", "image_paths", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "schedulers", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.name": [[22, 24], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.modify_options": [[25, 29], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "\"\"\"Add new options and rewrite default values for existing options\"\"\"", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.set_input": [[30, 33], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.setup": [[34, 41], ["base_model.BaseModel.load_networks", "base_function.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_function.get_scheduler"], ["", "def", "setup", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Load networks, create schedulers\"\"\"", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "opt", ".", "lr_policy", "!=", "'none'", ":", "\n", "                ", "self", ".", "schedulers", "=", "[", "base_function", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", "for", "optimizer", "in", "self", ".", "optimizers", "]", "\n", "", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "self", ".", "load_networks", "(", "opt", ".", "which_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval": [[42, 48], ["isinstance", "getattr", "getattr.eval"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make models eval mode during test time\"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net_'", "+", "name", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to": [[49, 55], ["isinstance", "getattr", "getattr.to"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to"], ["", "", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net_'", "+", "name", ")", "\n", "net", ".", "to", "(", "device", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train": [[56, 62], ["isinstance", "getattr", "getattr.train"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make models eval mode during test time\"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net_'", "+", "name", ")", "\n", "net", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.get_image_paths": [[63, 66], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return image paths that are used to load current data\"\"\"", "\n", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.update_learning_rate": [[67, 73], ["print", "scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update learning rate\"\"\"", "\n", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'learning rate=%.7f'", "%", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.get_current_errors": [[74, 81], ["collections.OrderedDict", "isinstance", "getattr().item", "getattr"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return training loss\"\"\"", "\n", "errors_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "errors_ret", "[", "name", "]", "=", "getattr", "(", "self", ",", "'loss_'", "+", "name", ")", ".", "item", "(", ")", "\n", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.get_current_visuals": [[82, 96], ["collections.OrderedDict", "isinstance", "getattr", "isinstance", "util.util.util.tensor2im", "util.util.util.tensor2im"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.util.util.tensor2im", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return visualization images\"\"\"", "\n", "visual_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "visual_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "value", "=", "getattr", "(", "self", ",", "name", ")", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "# visual multi-scale ouputs", "\n", "# for i in range(len(value)):", "\n", "#     visual_ret[name + str(i)] = util.tensor2im(value[i].data)", "\n", "                    ", "visual_ret", "[", "name", "]", "=", "util", ".", "tensor2im", "(", "value", "[", "-", "1", "]", ".", "data", ")", "\n", "", "else", ":", "\n", "                    ", "visual_ret", "[", "name", "]", "=", "util", ".", "tensor2im", "(", "value", ".", "data", ")", "\n", "", "", "", "return", "visual_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.get_current_dis": [[97, 107], ["collections.OrderedDict", "getattr", "range", "enumerate", "isinstance", "util.util.util.tensor2array", "str"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.util.util.tensor2array"], ["", "def", "get_current_dis", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the distribution of encoder features\"\"\"", "\n", "dis_ret", "=", "OrderedDict", "(", ")", "\n", "value", "=", "getattr", "(", "self", ",", "'distribution'", ")", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "            ", "for", "j", ",", "name", "in", "enumerate", "(", "self", ".", "value_names", ")", ":", "\n", "                ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                    ", "dis_ret", "[", "name", "+", "str", "(", "i", ")", "]", "=", "util", ".", "tensor2array", "(", "value", "[", "i", "]", "[", "j", "]", ".", "data", ")", "\n", "\n", "", "", "", "return", "dis_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.save_networks": [[109, 126], ["os.path.join", "torch.save", "isinstance", "x.state_dict", "x.state_dict", "getattr", "getattr.state_dict"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save"], ["", "def", "save_networks", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "\"\"\"Save all the networks to the disk\"\"\"", "\n", "save_filename", "=", "'%s.pth'", "%", "(", "which_epoch", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "checkpoint", "=", "{", "\"epoch\"", ":", "which_epoch", "}", "\n", "nets", "=", "{", "}", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "#optimizers", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net_'", "+", "name", ")", "\n", "nets", "[", "name", "]", "=", "net", ".", "state_dict", "(", ")", "\n", "", "", "checkpoint", "[", "\"nets\"", "]", "=", "nets", "\n", "checkpoint", "[", "\"optimizers\"", "]", "=", "[", "x", ".", "state_dict", "(", ")", "for", "x", "in", "self", ".", "optimizers", "]", "\n", "checkpoint", "[", "\"schedulers\"", "]", "=", "[", "x", ".", "state_dict", "(", ")", "for", "x", "in", "self", ".", "schedulers", "]", "\n", "checkpoint", "[", "\"opt\"", "]", "=", "self", ".", "opt", ".", "__dict__", "\n", "torch", ".", "save", "(", "checkpoint", ",", "save_path", ")", "\n", "return", "save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.load_networks": [[129, 167], ["os.path.join", "torch.load", "zip", "zip", "isinstance", "optimizer.load_state", "scheduler.load_state", "getattr", "getattr.load_state_dict", "torch.cuda.is_available", "getattr.cuda", "getattr.eval", "getattr.state_dict", "len", "getattr.load_state_dict", "print", "print", "set", "pretrained_dict.items", "getattr.state_dict.items", "print", "getattr.load_state_dict", "pretrained_dict.items", "sorted", "v.size", "model_dict[].size", "set.add", "v.size", "pretrained_dict[].size", "k.split"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval"], ["", "def", "load_networks", "(", "self", ",", "which_epoch", ")", ":", "\n", "        ", "\"\"\"Load all the networks from the disk\"\"\"", "\n", "filename", "=", "'%s.pth'", "%", "(", "which_epoch", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "filename", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net_'", "+", "name", ")", "\n", "pretrained_dict", "=", "checkpoint", "[", "\"nets\"", "]", "[", "name", "]", "\n", "try", ":", "\n", "                    ", "net", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "", "except", ":", "\n", "                    ", "model_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "try", ":", "\n", "                        ", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "net", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "print", "(", "'Pretrained network %s has excessive layers; Only loading layers that are used'", "%", "name", ")", "\n", "", "except", ":", "\n", "                        ", "print", "(", "'Pretrained network %s has fewer layers; The following are not initialized:'", "%", "name", ")", "\n", "not_initialized", "=", "set", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                            ", "if", "v", ".", "size", "(", ")", "==", "model_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                                ", "model_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "                            ", "if", "k", "not", "in", "pretrained_dict", "or", "v", ".", "size", "(", ")", "!=", "pretrained_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                                ", "not_initialized", ".", "add", "(", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "", "print", "(", "sorted", "(", "not_initialized", ")", ")", "\n", "net", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "net", ".", "cuda", "(", ")", "\n", "", "if", "not", "self", ".", "isTrain", ":", "\n", "                    ", "net", ".", "eval", "(", ")", "\n", "", "", "", "for", "optimizer", ",", "state_dict", "in", "zip", "(", "self", ".", "optimizers", ",", "checkpoint", "[", "\"optimizers\"", "]", ")", ":", "\n", "            ", "optimizer", ".", "load_state", "(", ")", "\n", "", "for", "scheduler", ",", "state_dict", "in", "zip", "(", "self", ".", "schedulers", ",", "checkpoint", "[", "\"schedulers\"", "]", ")", ":", "\n", "            ", "scheduler", ".", "load_state", "(", ")", "\n", "scheduler", ".", "last_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.save_results": [[168, 187], ["base_model.BaseModel.get_image_paths", "range", "save_data.size", "print", "ntpath.basename", "util.util.util.mkdir", "os.path.join", "util.util.util.tensor2im", "util.util.util.save_image", "os.path.splitext", "type", "type", "str"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.get_image_paths", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.mkdir", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.tensor2im", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.save_image"], ["", "", "def", "save_results", "(", "self", ",", "save_data", ",", "score", "=", "None", ",", "data_name", "=", "'none'", ")", ":", "\n", "        ", "\"\"\"Save the training or testing results to disk\"\"\"", "\n", "img_paths", "=", "self", ".", "get_image_paths", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "save_data", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "print", "(", "'process image ...... %s'", "%", "img_paths", "[", "i", "]", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "img_paths", "[", "i", "]", ")", "# get image path", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "if", "type", "(", "score", ")", "==", "type", "(", "None", ")", ":", "\n", "                ", "img_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "data_name", ")", "\n", "", "else", ":", "\n", "# d_score = score[i].mean()", "\n", "# img_name = '%s_%s_%s.png' % (name, data_name, str(round(d_score.item(), 3)))", "\n", "                ", "img_name", "=", "'%s_%s_%s.png'", "%", "(", "name", ",", "data_name", ",", "str", "(", "score", ")", ")", "\n", "# save predicted image with discriminator score", "\n", "", "util", ".", "mkdir", "(", "self", ".", "opt", ".", "results_dir", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "results_dir", ",", "img_name", ")", "\n", "img_numpy", "=", "util", ".", "tensor2im", "(", "save_data", "[", "i", "]", ".", "data", ")", "\n", "util", ".", "save_image", "(", "img_numpy", ",", "img_path", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.name": [[10, 12], ["None"], "methods", ["None"], ["def", "name", "(", "self", ")", ":", "\n", "        ", "return", "\"Pluralistic Image Completion\"", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.modify_options": [[13, 24], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"Add new options and rewrite default values for existing options\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--output_scale'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# of number of the output scale'", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--train_paths'", ",", "type", "=", "str", ",", "default", "=", "'two'", ",", "help", "=", "'training strategies with one path or two paths'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_rec'", ",", "type", "=", "float", ",", "default", "=", "20.0", ",", "help", "=", "'weight for image reconstruction loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_kl'", ",", "type", "=", "float", ",", "default", "=", "20.0", ",", "help", "=", "'weight for kl divergence loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_g'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for generation loss'", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.__init__": [[25, 59], ["base_model.BaseModel.__init__", "network.define_e", "network.define_g", "network.define_d", "network.define_d", "pluralistic_model.Pluralistic.setup", "external_function.GANLoss", "torch.nn.L1Loss", "torch.nn.MSELoss", "torch.optim.Adam", "torch.optim.Adam", "pluralistic_model.Pluralistic.optimizers.append", "pluralistic_model.Pluralistic.optimizers.append", "itertools.chain", "itertools.chain", "filter", "filter", "filter", "filter", "pluralistic_model.Pluralistic.net_G.parameters", "pluralistic_model.Pluralistic.net_E.parameters", "pluralistic_model.Pluralistic.net_D.parameters", "pluralistic_model.Pluralistic.net_D_rec.parameters"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.model.network.define_e", "home.repos.pwc.inspect_result.plai-group_ipa.model.network.define_g", "home.repos.pwc.inspect_result.plai-group_ipa.model.network.define_d", "home.repos.pwc.inspect_result.plai-group_ipa.model.network.define_d", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.setup"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initial the pluralistic model\"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "\n", "self", ".", "loss_names", "=", "[", "'kl_rec'", ",", "'kl_g'", ",", "'app_rec'", ",", "'app_g'", ",", "'ad_g'", ",", "'img_d'", ",", "'ad_rec'", ",", "'img_d_rec'", "]", "\n", "self", ".", "visual_names", "=", "[", "'img_m'", ",", "'img_c'", ",", "'img_truth'", ",", "'img_out'", ",", "'img_g'", ",", "'img_rec'", "]", "\n", "self", ".", "value_names", "=", "[", "'u_m'", ",", "'sigma_m'", ",", "'u_post'", ",", "'sigma_post'", ",", "'u_prior'", ",", "'sigma_prior'", "]", "\n", "self", ".", "model_names", "=", "[", "'E'", ",", "'G'", ",", "'D'", ",", "'D_rec'", "]", "\n", "self", ".", "distribution", "=", "[", "]", "\n", "\n", "# define the inpainting model", "\n", "self", ".", "net_E", "=", "network", ".", "define_e", "(", "ngf", "=", "32", ",", "z_nc", "=", "128", ",", "img_f", "=", "128", ",", "layers", "=", "5", ",", "norm", "=", "'none'", ",", "activation", "=", "'LeakyReLU'", ",", "\n", "init_type", "=", "'orthogonal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "net_G", "=", "network", ".", "define_g", "(", "ngf", "=", "32", ",", "z_nc", "=", "128", ",", "img_f", "=", "128", ",", "L", "=", "0", ",", "layers", "=", "5", ",", "output_scale", "=", "opt", ".", "output_scale", ",", "\n", "norm", "=", "'instance'", ",", "activation", "=", "'LeakyReLU'", ",", "init_type", "=", "'orthogonal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "# define the discriminator model", "\n", "self", ".", "net_D", "=", "network", ".", "define_d", "(", "ndf", "=", "32", ",", "img_f", "=", "128", ",", "layers", "=", "5", ",", "model_type", "=", "'ResDis'", ",", "init_type", "=", "'orthogonal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "self", ".", "net_D_rec", "=", "network", ".", "define_d", "(", "ndf", "=", "32", ",", "img_f", "=", "128", ",", "layers", "=", "5", ",", "model_type", "=", "'ResDis'", ",", "init_type", "=", "'orthogonal'", ",", "gpu_ids", "=", "opt", ".", "gpu_ids", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "# define the loss functions", "\n", "            ", "self", ".", "GANloss", "=", "external_function", ".", "GANLoss", "(", "opt", ".", "gan_mode", ")", "\n", "self", ".", "L1loss", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "L2loss", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "# define the optimizer", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "net_G", ".", "parameters", "(", ")", ")", ",", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "net_E", ".", "parameters", "(", ")", ")", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.0", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "net_D", ".", "parameters", "(", ")", ")", ",", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "net_D_rec", ".", "parameters", "(", ")", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.0", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "# load the pretrained model and schedulers", "\n", "", "self", ".", "setup", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.set_input": [[60, 79], ["util.task.scale_pyramid", "util.task.scale_pyramid", "len", "pluralistic_model.Pluralistic.img.cuda", "pluralistic_model.Pluralistic.mask.cuda"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.util.task.scale_pyramid", "home.repos.pwc.inspect_result.plai-group_ipa.util.task.scale_pyramid", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda"], ["", "def", "set_input", "(", "self", ",", "input", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the data loader and perform necessary pre-process steps\"\"\"", "\n", "self", ".", "input", "=", "input", "\n", "#self.image_paths = self.input['img_path']", "\n", "self", ".", "img", "=", "input", "[", "'img'", "]", "\n", "self", ".", "mask", "=", "input", "[", "'mask'", "]", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "self", ".", "img", "=", "self", ".", "img", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ",", "non_blocking", "=", "True", ")", "\n", "self", ".", "mask", "=", "self", ".", "mask", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# get I_m and I_c for image with mask and complement regions for training", "\n", "", "self", ".", "img_truth", "=", "self", ".", "img", "*", "2", "-", "1", "\n", "self", ".", "img_m", "=", "self", ".", "mask", "*", "self", ".", "img_truth", "\n", "self", ".", "img_c", "=", "(", "1", "-", "self", ".", "mask", ")", "*", "self", ".", "img_truth", "\n", "\n", "# get multiple scales image ground truth and mask for training", "\n", "self", ".", "scale_img", "=", "task", ".", "scale_pyramid", "(", "self", ".", "img_truth", ",", "self", ".", "opt", ".", "output_scale", ")", "\n", "self", ".", "scale_mask", "=", "task", ".", "scale_pyramid", "(", "self", ".", "mask", ",", "self", ".", "opt", ".", "output_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.test": [[80, 98], ["pluralistic_model.Pluralistic.save_results", "pluralistic_model.Pluralistic.save_results", "pluralistic_model.Pluralistic.net_E", "torch.distributions.Normal", "util.task.scale_img", "range", "torch.distributions.Normal.sample", "pluralistic_model.Pluralistic.net_G", "pluralistic_model.Pluralistic.net_D", "pluralistic_model.Pluralistic.save_results", "f[].size", "f[].size", "pluralistic_model.Pluralistic.img_g[].detach", "util.task.scale_img.chunk"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.save_results", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.save_results", "home.repos.pwc.inspect_result.plai-group_ipa.util.task.scale_img", "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.save_results"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Forward function used in test time\"\"\"", "\n", "# save the groundtruth and masked image", "\n", "self", ".", "save_results", "(", "self", ".", "img_truth", ",", "data_name", "=", "'truth'", ")", "\n", "self", ".", "save_results", "(", "self", ".", "img_m", ",", "data_name", "=", "'mask'", ")", "\n", "\n", "# encoder process", "\n", "distribution", ",", "f", "=", "self", ".", "net_E", "(", "self", ".", "img_m", ")", "\n", "q_distribution", "=", "torch", ".", "distributions", ".", "Normal", "(", "distribution", "[", "-", "1", "]", "[", "0", "]", ",", "distribution", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "scale_mask", "=", "task", ".", "scale_img", "(", "self", ".", "mask", ",", "size", "=", "[", "f", "[", "2", "]", ".", "size", "(", "2", ")", ",", "f", "[", "2", "]", ".", "size", "(", "3", ")", "]", ")", "\n", "\n", "# decoder process", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "nsampling", ")", ":", "\n", "            ", "z", "=", "q_distribution", ".", "sample", "(", ")", "\n", "self", ".", "img_g", ",", "attn", "=", "self", ".", "net_G", "(", "z", ",", "f_m", "=", "f", "[", "-", "1", "]", ",", "f_e", "=", "f", "[", "2", "]", ",", "mask", "=", "scale_mask", ".", "chunk", "(", "3", ",", "dim", "=", "1", ")", "[", "0", "]", ")", "\n", "self", ".", "img_out", "=", "(", "1", "-", "self", ".", "mask", ")", "*", "self", ".", "img_g", "[", "-", "1", "]", ".", "detach", "(", ")", "+", "self", ".", "mask", "*", "self", ".", "img_m", "\n", "self", ".", "score", "=", "self", ".", "net_D", "(", "self", ".", "img_out", ")", "\n", "self", ".", "save_results", "(", "self", ".", "img_out", ",", "i", ",", "data_name", "=", "'out'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.get_distribution": [[99, 126], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.kl_divergence", "pluralistic_model.Pluralistic.distribution.append", "torch.zeros_like", "p_mu.detach", "p_sigma.detach", "torch.distributions.kl_divergence", "torch.mean", "torch.ones_like", "torch.distributions.kl_divergence", "torch.zeros_like", "pluralistic_model.Pluralistic.mask.view", "torch.ones_like", "pluralistic_model.Pluralistic.mask.size"], "methods", ["None"], ["", "", "def", "get_distribution", "(", "self", ",", "distributions", ")", ":", "\n", "        ", "\"\"\"Calculate encoder distribution for img_m, img_c\"\"\"", "\n", "# get distribution", "\n", "sum_valid", "=", "(", "torch", ".", "mean", "(", "self", ".", "mask", ".", "view", "(", "self", ".", "mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "dim", "=", "1", ")", "-", "1e-5", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "m_sigma", "=", "1", "/", "(", "1", "+", "(", "(", "sum_valid", "-", "0.8", ")", "*", "8", ")", ".", "exp_", "(", ")", ")", "\n", "p_distribution", ",", "q_distribution", ",", "kl_rec", ",", "kl_g", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "self", ".", "distribution", "=", "[", "]", "\n", "for", "distribution", "in", "distributions", ":", "\n", "            ", "p_mu", ",", "p_sigma", ",", "q_mu", ",", "q_sigma", "=", "distribution", "\n", "# the assumption distribution for different mask regions", "\n", "m_distribution", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "p_mu", ")", ",", "m_sigma", "*", "torch", ".", "ones_like", "(", "p_sigma", ")", ")", "\n", "# m_distribution = torch.distributions.Normal(torch.zeros_like(p_mu), torch.ones_like(p_sigma))", "\n", "# the post distribution from mask regions", "\n", "p_distribution", "=", "torch", ".", "distributions", ".", "Normal", "(", "p_mu", ",", "p_sigma", ")", "\n", "p_distribution_fix", "=", "torch", ".", "distributions", ".", "Normal", "(", "p_mu", ".", "detach", "(", ")", ",", "p_sigma", ".", "detach", "(", ")", ")", "\n", "# the prior distribution from valid region", "\n", "q_distribution", "=", "torch", ".", "distributions", ".", "Normal", "(", "q_mu", ",", "q_sigma", ")", "\n", "\n", "# kl divergence", "\n", "kl_rec", "+=", "torch", ".", "distributions", ".", "kl_divergence", "(", "m_distribution", ",", "p_distribution", ")", "\n", "if", "self", ".", "opt", ".", "train_paths", "==", "\"one\"", ":", "\n", "                ", "kl_g", "+=", "torch", ".", "distributions", ".", "kl_divergence", "(", "m_distribution", ",", "q_distribution", ")", "\n", "", "elif", "self", ".", "opt", ".", "train_paths", "==", "\"two\"", ":", "\n", "                ", "kl_g", "+=", "torch", ".", "distributions", ".", "kl_divergence", "(", "p_distribution_fix", ",", "q_distribution", ")", "\n", "", "self", ".", "distribution", ".", "append", "(", "[", "torch", ".", "zeros_like", "(", "p_mu", ")", ",", "m_sigma", "*", "torch", ".", "ones_like", "(", "p_sigma", ")", ",", "p_mu", ",", "p_sigma", ",", "q_mu", ",", "q_sigma", "]", ")", "\n", "\n", "", "return", "p_distribution", ",", "q_distribution", ",", "kl_rec", ",", "kl_g", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.get_G_inputs": [[127, 137], ["torch.cat", "torch.cat", "util.task.scale_img", "torch.cat", "p_distribution.rsample", "q_distribution.rsample", "torch.cat", "f[].chunk", "f[].chunk", "f[].chunk", "f[].chunk", "torch.cat.size", "torch.cat.size", "util.task.scale_img.chunk", "util.task.scale_img.chunk"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.util.task.scale_img"], ["", "def", "get_G_inputs", "(", "self", ",", "p_distribution", ",", "q_distribution", ",", "f", ")", ":", "\n", "        ", "\"\"\"Process the encoder feature and distributions for generation network\"\"\"", "\n", "f_m", "=", "torch", ".", "cat", "(", "[", "f", "[", "-", "1", "]", ".", "chunk", "(", "2", ")", "[", "0", "]", ",", "f", "[", "-", "1", "]", ".", "chunk", "(", "2", ")", "[", "0", "]", "]", ",", "dim", "=", "0", ")", "\n", "f_e", "=", "torch", ".", "cat", "(", "[", "f", "[", "2", "]", ".", "chunk", "(", "2", ")", "[", "0", "]", ",", "f", "[", "2", "]", ".", "chunk", "(", "2", ")", "[", "0", "]", "]", ",", "dim", "=", "0", ")", "\n", "scale_mask", "=", "task", ".", "scale_img", "(", "self", ".", "mask", ",", "size", "=", "[", "f_e", ".", "size", "(", "2", ")", ",", "f_e", ".", "size", "(", "3", ")", "]", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "scale_mask", ".", "chunk", "(", "3", ",", "dim", "=", "1", ")", "[", "0", "]", ",", "scale_mask", ".", "chunk", "(", "3", ",", "dim", "=", "1", ")", "[", "0", "]", "]", ",", "dim", "=", "0", ")", "\n", "z_p", "=", "p_distribution", ".", "rsample", "(", ")", "\n", "z_q", "=", "q_distribution", ".", "rsample", "(", ")", "\n", "z", "=", "torch", ".", "cat", "(", "[", "z_p", ",", "z_q", "]", ",", "dim", "=", "0", ")", "\n", "return", "z", ",", "f_m", ",", "f_e", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.test_viz": [[138, 153], ["pluralistic_model.Pluralistic.net_E", "torch.distributions.Normal", "util.task.scale_img", "range", "torch.distributions.Normal.sample", "pluralistic_model.Pluralistic.net_G", "pluralistic_model.Pluralistic.net_D", "sample_imgs.append", "f[].size", "f[].size", "pluralistic_model.Pluralistic.img_g[].detach", "util.task.scale_img.chunk"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.util.task.scale_img", "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample"], ["", "def", "test_viz", "(", "self", ",", "n", ")", ":", "\n", "        ", "\"\"\"Forward function used in test time\"\"\"", "\n", "# encoder process", "\n", "distribution", ",", "f", "=", "self", ".", "net_E", "(", "self", ".", "img_m", ")", "\n", "q_distribution", "=", "torch", ".", "distributions", ".", "Normal", "(", "distribution", "[", "-", "1", "]", "[", "0", "]", ",", "distribution", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "scale_mask", "=", "task", ".", "scale_img", "(", "self", ".", "mask", ",", "size", "=", "[", "f", "[", "2", "]", ".", "size", "(", "2", ")", ",", "f", "[", "2", "]", ".", "size", "(", "3", ")", "]", ")", "\n", "# decoder process", "\n", "sample_imgs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "z", "=", "q_distribution", ".", "sample", "(", ")", "\n", "self", ".", "img_g", ",", "attn", "=", "self", ".", "net_G", "(", "z", ",", "f_m", "=", "f", "[", "-", "1", "]", ",", "f_e", "=", "f", "[", "2", "]", ",", "mask", "=", "scale_mask", ".", "chunk", "(", "3", ",", "dim", "=", "1", ")", "[", "0", "]", ")", "\n", "self", ".", "img_out", "=", "(", "1", "-", "self", ".", "mask", ")", "*", "self", ".", "img_g", "[", "-", "1", "]", ".", "detach", "(", ")", "+", "self", ".", "mask", "*", "self", ".", "img_m", "\n", "self", ".", "score", "=", "self", ".", "net_D", "(", "self", ".", "img_out", ")", "\n", "sample_imgs", ".", "append", "(", "self", ".", "img_out", ")", "\n", "", "return", "[", "self", ".", "img_m", ",", "self", ".", "img_truth", ",", "self", ".", "img_g", "[", "-", "1", "]", "]", "+", "sample_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.forward": [[154, 170], ["pluralistic_model.Pluralistic.net_E", "pluralistic_model.Pluralistic.get_distribution", "pluralistic_model.Pluralistic.get_G_inputs", "pluralistic_model.Pluralistic.net_G", "result.chunk", "pluralistic_model.Pluralistic.img_rec.append", "pluralistic_model.Pluralistic.img_g.append", "pluralistic_model.Pluralistic.img_g[].detach"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.get_distribution", "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.get_G_inputs"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward processing to get the inputs\"\"\"", "\n", "# encoder process", "\n", "distributions", ",", "f", "=", "self", ".", "net_E", "(", "self", ".", "img_m", ",", "self", ".", "img_c", ")", "\n", "p_distribution", ",", "q_distribution", ",", "self", ".", "kl_rec", ",", "self", ".", "kl_g", "=", "self", ".", "get_distribution", "(", "distributions", ")", "\n", "\n", "# decoder process", "\n", "z", ",", "f_m", ",", "f_e", ",", "mask", "=", "self", ".", "get_G_inputs", "(", "p_distribution", ",", "q_distribution", ",", "f", ")", "\n", "results", ",", "attn", "=", "self", ".", "net_G", "(", "z", ",", "f_m", ",", "f_e", ",", "mask", ")", "\n", "self", ".", "img_rec", "=", "[", "]", "\n", "self", ".", "img_g", "=", "[", "]", "\n", "for", "result", "in", "results", ":", "\n", "            ", "img_rec", ",", "img_g", "=", "result", ".", "chunk", "(", "2", ")", "\n", "self", ".", "img_rec", ".", "append", "(", "img_rec", ")", "\n", "self", ".", "img_g", ".", "append", "(", "img_g", ")", "\n", "", "self", ".", "img_out", "=", "(", "1", "-", "self", ".", "mask", ")", "*", "self", ".", "img_g", "[", "-", "1", "]", ".", "detach", "(", ")", "+", "self", ".", "mask", "*", "self", ".", "img_truth", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.backward_D_basic": [[171, 189], ["netD", "pluralistic_model.Pluralistic.GANloss", "netD", "pluralistic_model.Pluralistic.GANloss", "D_loss.backward", "fake.detach", "external_function.cal_gradient_penalty", "fake.detach"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DifferentiableClamp.backward", "home.repos.pwc.inspect_result.plai-group_ipa.model.external_function.cal_gradient_penalty"], ["", "def", "backward_D_basic", "(", "self", ",", "netD", ",", "real", ",", "fake", ")", ":", "\n", "        ", "\"\"\"Calculate GAN loss for the discriminator\"\"\"", "\n", "# Real", "\n", "D_real", "=", "netD", "(", "real", ")", "\n", "D_real_loss", "=", "self", ".", "GANloss", "(", "D_real", ",", "True", ",", "True", ")", "\n", "# fake", "\n", "D_fake", "=", "netD", "(", "fake", ".", "detach", "(", ")", ")", "\n", "D_fake_loss", "=", "self", ".", "GANloss", "(", "D_fake", ",", "False", ",", "True", ")", "\n", "# loss for discriminator", "\n", "D_loss", "=", "(", "D_real_loss", "+", "D_fake_loss", ")", "*", "0.5", "\n", "# gradient penalty for wgan-gp", "\n", "if", "self", ".", "opt", ".", "gan_mode", "==", "'wgangp'", ":", "\n", "            ", "gradient_penalty", ",", "gradients", "=", "external_function", ".", "cal_gradient_penalty", "(", "netD", ",", "real", ",", "fake", ".", "detach", "(", ")", ")", "\n", "D_loss", "+=", "gradient_penalty", "\n", "\n", "", "D_loss", ".", "backward", "(", ")", "\n", "\n", "return", "D_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.backward_D": [[190, 195], ["base_function._unfreeze", "pluralistic_model.Pluralistic.backward_D_basic", "pluralistic_model.Pluralistic.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_function._unfreeze", "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.backward_D_basic", "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.backward_D_basic"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate the GAN loss for the discriminators\"\"\"", "\n", "base_function", ".", "_unfreeze", "(", "self", ".", "net_D", ",", "self", ".", "net_D_rec", ")", "\n", "self", ".", "loss_img_d", "=", "self", ".", "backward_D_basic", "(", "self", ".", "net_D", ",", "self", ".", "img_truth", ",", "self", ".", "img_g", "[", "-", "1", "]", ")", "\n", "self", ".", "loss_img_d_rec", "=", "self", ".", "backward_D_basic", "(", "self", ".", "net_D_rec", ",", "self", ".", "img_truth", ",", "self", ".", "img_rec", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.backward_G": [[196, 238], ["base_function._freeze", "pluralistic_model.Pluralistic.net_D", "pluralistic_model.Pluralistic.net_D_rec", "pluralistic_model.Pluralistic.net_D_rec", "enumerate", "total_loss.backward", "pluralistic_model.Pluralistic.GANloss", "pluralistic_model.Pluralistic.L2loss", "zip", "pluralistic_model.Pluralistic.L1loss", "pluralistic_model.Pluralistic.kl_rec.mean", "pluralistic_model.Pluralistic.kl_g.mean", "pluralistic_model.Pluralistic.L1loss", "getattr", "pluralistic_model.Pluralistic.L1loss"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_function._freeze", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DifferentiableClamp.backward"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate training loss for the generator\"\"\"", "\n", "\n", "# encoder kl loss", "\n", "self", ".", "loss_kl_rec", "=", "self", ".", "kl_rec", ".", "mean", "(", ")", "*", "self", ".", "opt", ".", "lambda_kl", "*", "self", ".", "opt", ".", "output_scale", "\n", "self", ".", "loss_kl_g", "=", "self", ".", "kl_g", ".", "mean", "(", ")", "*", "self", ".", "opt", ".", "lambda_kl", "*", "self", ".", "opt", ".", "output_scale", "\n", "\n", "# generator adversarial loss", "\n", "base_function", ".", "_freeze", "(", "self", ".", "net_D", ",", "self", ".", "net_D_rec", ")", "\n", "# g loss fake", "\n", "D_fake", "=", "self", ".", "net_D", "(", "self", ".", "img_g", "[", "-", "1", "]", ")", "\n", "self", ".", "loss_ad_g", "=", "self", ".", "GANloss", "(", "D_fake", ",", "True", ",", "False", ")", "*", "self", ".", "opt", ".", "lambda_g", "\n", "\n", "# rec loss fake", "\n", "D_fake", "=", "self", ".", "net_D_rec", "(", "self", ".", "img_rec", "[", "-", "1", "]", ")", "\n", "D_real", "=", "self", ".", "net_D_rec", "(", "self", ".", "img_truth", ")", "\n", "self", ".", "loss_ad_rec", "=", "self", ".", "L2loss", "(", "D_fake", ",", "D_real", ")", "*", "self", ".", "opt", ".", "lambda_g", "\n", "\n", "# calculate l1 loss ofr multi-scale outputs", "\n", "loss_app_rec", ",", "loss_app_g", "=", "0", ",", "0", "\n", "for", "i", ",", "(", "img_rec_i", ",", "img_fake_i", ",", "img_real_i", ",", "mask_i", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "img_rec", ",", "self", ".", "img_g", ",", "self", ".", "scale_img", ",", "self", ".", "scale_mask", ")", ")", ":", "\n", "            ", "loss_app_rec", "+=", "self", ".", "L1loss", "(", "img_rec_i", ",", "img_real_i", ")", "\n", "if", "self", ".", "opt", ".", "train_paths", "==", "\"one\"", ":", "\n", "                ", "loss_app_g", "+=", "self", ".", "L1loss", "(", "img_fake_i", ",", "img_real_i", ")", "\n", "", "elif", "self", ".", "opt", ".", "train_paths", "==", "\"two\"", ":", "\n", "                ", "loss_app_g", "+=", "self", ".", "L1loss", "(", "img_fake_i", "*", "mask_i", ",", "img_real_i", "*", "mask_i", ")", "\n", "", "", "self", ".", "loss_app_rec", "=", "loss_app_rec", "*", "self", ".", "opt", ".", "lambda_rec", "\n", "self", ".", "loss_app_g", "=", "loss_app_g", "*", "self", ".", "opt", ".", "lambda_rec", "\n", "\n", "# if one path during the training, just calculate the loss for generation path", "\n", "if", "self", ".", "opt", ".", "train_paths", "==", "\"one\"", ":", "\n", "            ", "self", ".", "loss_app_rec", "=", "self", ".", "loss_app_rec", "*", "0", "\n", "self", ".", "loss_ad_rec", "=", "self", ".", "loss_ad_rec", "*", "0", "\n", "self", ".", "loss_kl_rec", "=", "self", ".", "loss_kl_rec", "*", "0", "\n", "\n", "", "total_loss", "=", "0", "\n", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "name", "!=", "'img_d'", "and", "name", "!=", "'img_d_rec'", ":", "\n", "                ", "total_loss", "+=", "getattr", "(", "self", ",", "\"loss_\"", "+", "name", ")", "\n", "\n", "", "", "total_loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.optimize_parameters": [[239, 251], ["pluralistic_model.Pluralistic.forward", "pluralistic_model.Pluralistic.optimizer_D.zero_grad", "pluralistic_model.Pluralistic.backward_D", "pluralistic_model.Pluralistic.optimizer_D.step", "pluralistic_model.Pluralistic.optimizer_G.zero_grad", "pluralistic_model.Pluralistic.backward_G", "pluralistic_model.Pluralistic.optimizer_G.step"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.backward_D", "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.backward_G"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"update network weights\"\"\"", "\n", "# compute the image completion results", "\n", "self", ".", "forward", "(", ")", "\n", "# optimize the discrinimator network parameters", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "# optimize the completion network parameters", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.model.pluralistic_model.Pluralistic.num_parameters": [[252, 259], ["isinstance", "getattr", "sum", "p.numel", "getattr.parameters"], "methods", ["None"], ["", "def", "num_parameters", "(", "self", ")", ":", "\n", "        ", "res", "=", "0", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net_'", "+", "name", ")", "\n", "res", "+=", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "net", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.__init__": [[7, 21], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "reflesh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "# print(self.img_dir)", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "reflesh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"reflesh\"", ",", "content", "=", "str", "(", "reflesh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.get_image_dir": [[22, 24], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.add_header": [[25, 28], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.add_table": [[29, 32], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.add_images": [[33, 44], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "width", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save": [[45, 50], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.visualizer.Visualizer.__init__": [[10, 30], ["os.path.join", "visdom.Visdom", "os.path.join", "os.path.join", "print", "util.mkdirs", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.util.util.mkdirs", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# self.opt = opt", "\n", "        ", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "if", "self", ".", "display_id", ">", "0", ":", "\n", "            ", "import", "visdom", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "port", "=", "opt", ".", "display_port", ")", "\n", "self", ".", "display_single_pane_ncols", "=", "opt", ".", "display_single_pane_ncols", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.visualizer.Visualizer.display_current_results": [[32, 94], ["visuals.items", "html.HTML", "range", "html.HTML.save", "int", "visuals.items", "visualizer.Visualizer.vis.images", "visualizer.Visualizer.vis.text", "visuals.items", "os.path.join", "util.save_image", "html.HTML.add_header", "visuals.items", "html.HTML.add_images", "numpy.ceil", "images.append", "numpy.ones_like", "images.append", "visualizer.Visualizer.vis.image", "ims.append", "txts.append", "links.append", "next", "image_numpy.transpose", "image_numpy.transpose", "dict", "dict", "image_numpy.transpose", "iter", "len", "dict", "visuals.values", "visuals.items"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.save_image", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.add_header", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.add_images"], ["", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "display_id", ">", "0", ":", "# show images in the browser", "\n", "            ", "if", "self", ".", "display_single_pane_ncols", ">", "0", ":", "\n", "                ", "h", ",", "w", "=", "next", "(", "iter", "(", "visuals", ".", "values", "(", ")", ")", ")", ".", "shape", "[", ":", "2", "]", "\n", "table_css", "=", "\"\"\"<style>\n    table {border-collapse: separate; border-spacing:4px; white-space:nowrap; text-align:center}\n    table td {width: %dpx; height: %dpx; padding: 4px; outline: 4px solid black}\n</style>\"\"\"", "%", "(", "w", ",", "h", ")", "\n", "ncols", "=", "self", ".", "display_single_pane_ncols", "\n", "title", "=", "self", ".", "name", "\n", "label_html", "=", "''", "\n", "label_html_row", "=", "''", "\n", "nrows", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "visuals", ".", "items", "(", ")", ")", "/", "ncols", ")", ")", "\n", "images", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "label_html_row", "+=", "'<td>%s</td>'", "%", "label", "\n", "images", ".", "append", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "\n", "idx", "+=", "1", "\n", "if", "idx", "%", "ncols", "==", "0", ":", "\n", "                        ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "label_html_row", "=", "''", "\n", "", "", "white_image", "=", "np", ".", "ones_like", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "*", "255", "\n", "while", "idx", "%", "ncols", "!=", "0", ":", "\n", "                    ", "images", ".", "append", "(", "white_image", ")", "\n", "label_html_row", "+=", "'<td></td>'", "\n", "idx", "+=", "1", "\n", "", "if", "label_html_row", "!=", "''", ":", "\n", "                    ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "# pane col = image row", "\n", "", "self", ".", "vis", ".", "images", "(", "images", ",", "nrow", "=", "ncols", ",", "win", "=", "self", ".", "display_id", "+", "1", ",", "\n", "padding", "=", "2", ",", "opts", "=", "dict", "(", "title", "=", "title", "+", "' images'", ")", ")", "\n", "label_html", "=", "'<table>%s</table>'", "%", "label_html", "\n", "self", ".", "vis", ".", "text", "(", "table_css", "+", "label_html", ",", "win", "=", "self", ".", "display_id", "+", "2", ",", "\n", "opts", "=", "dict", "(", "title", "=", "title", "+", "' labels'", ")", ")", "\n", "", "else", ":", "\n", "                ", "idx", "=", "1", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "#image_numpy = np.flipud(image_numpy)", "\n", "                    ", "self", ".", "vis", ".", "image", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ",", "opts", "=", "dict", "(", "title", "=", "label", ")", ",", "\n", "win", "=", "self", ".", "display_id", "+", "idx", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.png'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "# update website", "\n", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "reflesh", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "img_path", "=", "'epoch%.3d_%s.png'", "%", "(", "n", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.visualizer.Visualizer.plot_current_errors": [[96, 109], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.vis.line", "hasattr", "list", "numpy.stack", "numpy.array", "errors.keys", "len", "numpy.array"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "iters", ",", "errors", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "iters", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "'title'", ":", "self", ".", "name", "+", "' loss over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'iterations'", ",", "\n", "'ylabel'", ":", "'loss'", "}", ",", "\n", "win", "=", "self", ".", "display_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.visualizer.Visualizer.plot_current_score": [[110, 124], ["visualizer.Visualizer.plot_score[].append", "visualizer.Visualizer.plot_score[].append", "visualizer.Visualizer.vis.line", "hasattr", "list", "numpy.stack", "numpy.array", "scores.keys", "len", "numpy.array"], "methods", ["None"], ["", "def", "plot_current_score", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "scores", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_score'", ")", ":", "\n", "            ", "self", ".", "plot_score", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "scores", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_score", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_score", "[", "'Y'", "]", ".", "append", "(", "[", "scores", "[", "k", "]", "for", "k", "in", "self", ".", "plot_score", "[", "'legend'", "]", "]", ")", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_score", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_score", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_score", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' Inception Score over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_score", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'score'", "}", ",", "\n", "win", "=", "self", ".", "display_id", "+", "29", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.visualizer.Visualizer.plot_current_distribution": [[127, 134], ["list", "numpy.array().swapaxes", "visualizer.Visualizer.vis.boxplot", "distribution.keys", "numpy.array", "dict", "list", "distribution.values"], "methods", ["None"], ["", "def", "plot_current_distribution", "(", "self", ",", "distribution", ")", ":", "\n", "        ", "name", "=", "list", "(", "distribution", ".", "keys", "(", ")", ")", "\n", "value", "=", "np", ".", "array", "(", "list", "(", "distribution", ".", "values", "(", ")", ")", ")", ".", "swapaxes", "(", "1", ",", "0", ")", "\n", "self", ".", "vis", ".", "boxplot", "(", "\n", "X", "=", "value", ",", "\n", "opts", "=", "dict", "(", "legend", "=", "name", ")", ",", "\n", "win", "=", "self", ".", "display_id", "+", "30", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.visualizer.Visualizer.print_current_errors": [[137, 145], ["errors.items", "print", "open", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write"], ["", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "            ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.visualizer.Visualizer.save_images": [[147, 166], ["webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.add_header", "home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.add_images", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.save_image"], ["", "", "def", "save_images", "(", "self", ",", "webpage", ",", "visuals", ",", "image_path", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "image_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.util.task.random_regular_mask": [[14, 28], ["torch.ones_like", "torch.ones_like", "img.size", "random.randint", "range", "random.randint", "random.randint", "int", "int", "random.randint", "random.randint", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "random_regular_mask", "(", "img", ")", ":", "\n", "    ", "\"\"\"Generates a random regular hole\"\"\"", "\n", "mask", "=", "torch", ".", "ones_like", "(", "img", ")", "\n", "s", "=", "img", ".", "size", "(", ")", "\n", "N_mask", "=", "random", ".", "randint", "(", "1", ",", "5", ")", "\n", "limx", "=", "s", "[", "1", "]", "-", "s", "[", "1", "]", "/", "(", "N_mask", "+", "1", ")", "\n", "limy", "=", "s", "[", "2", "]", "-", "s", "[", "2", "]", "/", "(", "N_mask", "+", "1", ")", "\n", "for", "_", "in", "range", "(", "N_mask", ")", ":", "\n", "        ", "x", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "limx", ")", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "limy", ")", ")", "\n", "range_x", "=", "x", "+", "random", ".", "randint", "(", "int", "(", "s", "[", "1", "]", "/", "(", "N_mask", "+", "7", ")", ")", ",", "int", "(", "s", "[", "1", "]", "-", "x", ")", ")", "\n", "range_y", "=", "y", "+", "random", ".", "randint", "(", "int", "(", "s", "[", "2", "]", "/", "(", "N_mask", "+", "7", ")", ")", ",", "int", "(", "s", "[", "2", "]", "-", "y", ")", ")", "\n", "mask", "[", ":", ",", "int", "(", "x", ")", ":", "int", "(", "range_x", ")", ",", "int", "(", "y", ")", ":", "int", "(", "range_y", ")", "]", "=", "0", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.task.center_mask": [[30, 41], ["torch.ones_like", "torch.ones_like", "img.size", "int", "int", "int", "int"], "function", ["None"], ["", "def", "center_mask", "(", "img", ")", ":", "\n", "    ", "\"\"\"Generates a center hole with 1/4*W and 1/4*H\"\"\"", "\n", "mask", "=", "torch", ".", "ones_like", "(", "img", ")", "\n", "size", "=", "img", ".", "size", "(", ")", "\n", "x", "=", "int", "(", "size", "[", "1", "]", "/", "4", ")", "\n", "y", "=", "int", "(", "size", "[", "2", "]", "/", "4", ")", "\n", "range_x", "=", "int", "(", "size", "[", "1", "]", "*", "3", "/", "4", ")", "\n", "range_y", "=", "int", "(", "size", "[", "2", "]", "*", "3", "/", "4", ")", "\n", "mask", "[", ":", ",", "x", ":", "range_x", ",", "y", ":", "range_y", "]", "=", "0", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.task.random_irregular_mask": [[43, 87], ["torchvision.Compose", "torch.ones_like", "torch.ones_like", "Image.fromarray.size", "numpy.zeros", "random.randint", "range", "Image.fromarray.reshape", "PIL.Image.fromarray", "transforms.Compose.", "range", "Exception", "random.random", "torchvision.ToTensor", "random.randint", "cv2.line", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "cv2.circle", "random.randint", "random.randint", "random.randint", "cv2.ellipse", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint"], "function", ["None"], ["", "def", "random_irregular_mask", "(", "img", ")", ":", "\n", "    ", "\"\"\"Generates a random irregular mask with lines, circles and elipses\"\"\"", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "mask", "=", "torch", ".", "ones_like", "(", "img", ")", "\n", "size", "=", "img", ".", "size", "(", ")", "\n", "img", "=", "np", ".", "zeros", "(", "(", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "1", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "# Set size scale", "\n", "max_width", "=", "20", "\n", "if", "size", "[", "1", "]", "<", "64", "or", "size", "[", "2", "]", "<", "64", ":", "\n", "        ", "raise", "Exception", "(", "\"Width and Height of mask must be at least 64!\"", ")", "\n", "\n", "", "number", "=", "random", ".", "randint", "(", "16", ",", "64", ")", "\n", "for", "_", "in", "range", "(", "number", ")", ":", "\n", "        ", "model", "=", "random", ".", "random", "(", ")", "\n", "if", "model", "<", "0.6", ":", "\n", "# Draw random lines", "\n", "            ", "x1", ",", "x2", "=", "randint", "(", "1", ",", "size", "[", "1", "]", ")", ",", "randint", "(", "1", ",", "size", "[", "1", "]", ")", "\n", "y1", ",", "y2", "=", "randint", "(", "1", ",", "size", "[", "2", "]", ")", ",", "randint", "(", "1", ",", "size", "[", "2", "]", ")", "\n", "thickness", "=", "randint", "(", "4", ",", "max_width", ")", "\n", "cv2", ".", "line", "(", "img", ",", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ",", "(", "1", ",", "1", ",", "1", ")", ",", "thickness", ")", "\n", "\n", "", "elif", "model", ">", "0.6", "and", "model", "<", "0.8", ":", "\n", "# Draw random circles", "\n", "            ", "x1", ",", "y1", "=", "randint", "(", "1", ",", "size", "[", "1", "]", ")", ",", "randint", "(", "1", ",", "size", "[", "2", "]", ")", "\n", "radius", "=", "randint", "(", "4", ",", "max_width", ")", "\n", "cv2", ".", "circle", "(", "img", ",", "(", "x1", ",", "y1", ")", ",", "radius", ",", "(", "1", ",", "1", ",", "1", ")", ",", "-", "1", ")", "\n", "\n", "", "elif", "model", ">", "0.8", ":", "\n", "# Draw random ellipses", "\n", "            ", "x1", ",", "y1", "=", "randint", "(", "1", ",", "size", "[", "1", "]", ")", ",", "randint", "(", "1", ",", "size", "[", "2", "]", ")", "\n", "s1", ",", "s2", "=", "randint", "(", "1", ",", "size", "[", "1", "]", ")", ",", "randint", "(", "1", ",", "size", "[", "2", "]", ")", "\n", "a1", ",", "a2", ",", "a3", "=", "randint", "(", "3", ",", "180", ")", ",", "randint", "(", "3", ",", "180", ")", ",", "randint", "(", "3", ",", "180", ")", "\n", "thickness", "=", "randint", "(", "4", ",", "max_width", ")", "\n", "cv2", ".", "ellipse", "(", "img", ",", "(", "x1", ",", "y1", ")", ",", "(", "s1", ",", "s2", ")", ",", "a1", ",", "a2", ",", "a3", ",", "(", "1", ",", "1", ",", "1", ")", ",", "thickness", ")", "\n", "\n", "", "", "img", "=", "img", ".", "reshape", "(", "size", "[", "2", "]", ",", "size", "[", "1", "]", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", "*", "255", ")", "\n", "\n", "img_mask", "=", "transform", "(", "img", ")", "\n", "for", "j", "in", "range", "(", "size", "[", "0", "]", ")", ":", "\n", "        ", "mask", "[", "j", ",", ":", ",", ":", "]", "=", "img_mask", "<", "1", "\n", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.task.scale_img": [[93, 96], ["torch.interpolate"], "function", ["None"], ["", "def", "scale_img", "(", "img", ",", "size", ")", ":", "\n", "    ", "scaled_img", "=", "F", ".", "interpolate", "(", "img", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "scaled_img", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.task.scale_pyramid": [[98, 115], ["img.size", "range", "scaled_imgs.reverse", "task.scale_img", "scaled_imgs.append"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.util.task.scale_img"], ["", "def", "scale_pyramid", "(", "img", ",", "num_scales", ")", ":", "\n", "    ", "scaled_imgs", "=", "[", "img", "]", "\n", "\n", "s", "=", "img", ".", "size", "(", ")", "\n", "\n", "h", "=", "s", "[", "2", "]", "\n", "w", "=", "s", "[", "3", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "num_scales", ")", ":", "\n", "        ", "ratio", "=", "2", "**", "i", "\n", "nh", "=", "h", "//", "ratio", "\n", "nw", "=", "w", "//", "ratio", "\n", "scaled_img", "=", "scale_img", "(", "img", ",", "size", "=", "[", "nh", ",", "nw", "]", ")", "\n", "scaled_imgs", ".", "append", "(", "scaled_img", ")", "\n", "\n", "", "scaled_imgs", ".", "reverse", "(", ")", "\n", "return", "scaled_imgs", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.util.util.tensor2im": [[9, 17], ["image_tensor[].cpu().float().numpy.astype", "image_tensor.dim", "image_tensor.cpu().float().numpy", "image_tensor[].cpu().float().numpy", "image_tensor.cpu().float", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor.cpu", "image_tensor[].cpu"], "function", ["None"], ["import", "ctypes", "\n", "import", "fnmatch", "\n", "import", "importlib", "\n", "import", "inspect", "\n", "import", "numpy", "as", "np", "\n", "import", "os", "\n", "import", "shutil", "\n", "import", "sys", "\n", "import", "types", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.util.tensor2array": [[20, 26], ["value_tensor.dim", "value_tensor.view().cpu().float().numpy", "value_tensor[].view().cpu().float().numpy", "value_tensor.view().cpu().float", "value_tensor[].view().cpu().float", "value_tensor.view().cpu", "value_tensor[].view().cpu", "value_tensor.view", "value_tensor[].view"], "function", ["None"], ["import", "re", "\n", "import", "requests", "\n", "import", "html", "\n", "import", "hashlib", "\n", "import", "glob", "\n", "import", "uuid", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.util.save_image": [[28, 33], ["imageio.imwrite", "image_numpy.reshape.reshape"], "function", ["None"], ["from", "typing", "import", "Any", ",", "List", ",", "Tuple", ",", "Union", "\n", "\n", "\n", "# Util classes", "\n", "# ------------------------------------------------------------------------------------------", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.util.mkdirs": [[35, 41], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.util.util.mkdir", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.mkdir"], ["class", "EasyDict", "(", "dict", ")", ":", "\n", "    ", "\"\"\"Convenience class that behaves like a dict but allows access with the attribute syntax.\"\"\"", "\n", "\n", "def", "__getattr__", "(", "self", ",", "name", ":", "str", ")", "->", "Any", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "except", "KeyError", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.util.mkdir": [[43, 46], ["os.path.exists", "os.makedirs"], "function", ["None"], ["\n", "", "", "def", "__setattr__", "(", "self", ",", "name", ":", "str", ",", "value", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.util.evaluation.compute_errors": [[21, 40], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.abs", "numpy.roll", "numpy.roll", "numpy.sqrt", "math.log10", "math.sqrt"], "function", ["None"], ["def", "compute_errors", "(", "gt", ",", "pre", ")", ":", "\n", "\n", "# l1 loss", "\n", "    ", "l1", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gt", "-", "pre", ")", ")", "\n", "\n", "# PSNR", "\n", "mse", "=", "np", ".", "mean", "(", "(", "gt", "-", "pre", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "PSNR", "=", "100", "\n", "", "else", ":", "\n", "        ", "PSNR", "=", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n", "# TV", "\n", "", "gx", "=", "pre", "-", "np", ".", "roll", "(", "pre", ",", "-", "1", ",", "axis", "=", "1", ")", "\n", "gy", "=", "pre", "-", "np", ".", "roll", "(", "pre", ",", "-", "1", ",", "axis", "=", "0", ")", "\n", "grad_norm2", "=", "gx", "**", "2", "+", "gy", "**", "2", "\n", "TV", "=", "np", ".", "mean", "(", "np", ".", "sqrt", "(", "grad_norm2", ")", ")", "\n", "\n", "return", "l1", ",", "PSNR", ",", "TV", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_window.Ui_Form.setupUi": [[12, 138], ["Form.setObjectName", "Form.resize", "PyQt5.QtWidgets.QLabel", "ui_window.Ui_Form.label.setGeometry", "PyQt5.QtGui.QFont", "PyQt5.QtGui.QFont.setPointSize", "PyQt5.QtGui.QFont.setBold", "PyQt5.QtGui.QFont.setUnderline", "PyQt5.QtGui.QFont.setWeight", "ui_window.Ui_Form.label.setFont", "ui_window.Ui_Form.label.setAlignment", "ui_window.Ui_Form.label.setObjectName", "PyQt5.QtWidgets.QGraphicsView", "ui_window.Ui_Form.graphicsView_2.setGeometry", "ui_window.Ui_Form.graphicsView_2.setObjectName", "PyQt5.QtWidgets.QLabel", "ui_window.Ui_Form.label_4.setGeometry", "ui_window.Ui_Form.label_4.setObjectName", "PyQt5.QtWidgets.QWidget", "ui_window.Ui_Form.layoutWidget.setGeometry", "ui_window.Ui_Form.layoutWidget.setObjectName", "PyQt5.QtWidgets.QVBoxLayout", "ui_window.Ui_Form.verticalLayout.setContentsMargins", "ui_window.Ui_Form.verticalLayout.setObjectName", "PyQt5.QtWidgets.QPushButton", "ui_window.Ui_Form.pushButton.setObjectName", "ui_window.Ui_Form.verticalLayout.addWidget", "PyQt5.QtWidgets.QPushButton", "ui_window.Ui_Form.pushButton_2.setObjectName", "ui_window.Ui_Form.verticalLayout.addWidget", "PyQt5.QtWidgets.QPushButton", "ui_window.Ui_Form.pushButton_3.setObjectName", "ui_window.Ui_Form.verticalLayout.addWidget", "PyQt5.QtWidgets.QPushButton", "ui_window.Ui_Form.pushButton_4.setObjectName", "ui_window.Ui_Form.verticalLayout.addWidget", "PyQt5.QtWidgets.QWidget", "ui_window.Ui_Form.layoutWidget1.setGeometry", "ui_window.Ui_Form.layoutWidget1.setObjectName", "PyQt5.QtWidgets.QHBoxLayout", "ui_window.Ui_Form.horizontalLayout.setContentsMargins", "ui_window.Ui_Form.horizontalLayout.setObjectName", "PyQt5.QtWidgets.QLabel", "ui_window.Ui_Form.label_3.setObjectName", "ui_window.Ui_Form.horizontalLayout.addWidget", "PyQt5.QtWidgets.QComboBox", "PyQt5.QtWidgets.QSizePolicy", "PyQt5.QtWidgets.QSizePolicy.setHorizontalStretch", "PyQt5.QtWidgets.QSizePolicy.setVerticalStretch", "PyQt5.QtWidgets.QSizePolicy.setHeightForWidth", "ui_window.Ui_Form.comboBox.setSizePolicy", "ui_window.Ui_Form.comboBox.setObjectName", "ui_window.Ui_Form.comboBox.addItem", "ui_window.Ui_Form.comboBox.addItem", "ui_window.Ui_Form.comboBox.addItem", "ui_window.Ui_Form.comboBox.addItem", "ui_window.Ui_Form.comboBox.addItem", "ui_window.Ui_Form.comboBox.addItem", "ui_window.Ui_Form.comboBox.addItem", "ui_window.Ui_Form.comboBox.addItem", "ui_window.Ui_Form.comboBox.addItem", "ui_window.Ui_Form.horizontalLayout.addWidget", "PyQt5.QtWidgets.QWidget", "ui_window.Ui_Form.layoutWidget2.setGeometry", "ui_window.Ui_Form.layoutWidget2.setObjectName", "PyQt5.QtWidgets.QHBoxLayout", "ui_window.Ui_Form.horizontalLayout_2.setContentsMargins", "ui_window.Ui_Form.horizontalLayout_2.setObjectName", "PyQt5.QtWidgets.QLabel", "ui_window.Ui_Form.label_2.setAlignment", "ui_window.Ui_Form.label_2.setObjectName", "ui_window.Ui_Form.horizontalLayout_2.addWidget", "PyQt5.QtWidgets.QSpinBox", "ui_window.Ui_Form.spinBox.setMinimum", "ui_window.Ui_Form.spinBox.setMaximum", "ui_window.Ui_Form.spinBox.setSingleStep", "ui_window.Ui_Form.spinBox.setProperty", "ui_window.Ui_Form.spinBox.setObjectName", "ui_window.Ui_Form.horizontalLayout_2.addWidget", "PyQt5.QtWidgets.QStackedWidget", "ui_window.Ui_Form.stackedWidget.setGeometry", "ui_window.Ui_Form.stackedWidget.setObjectName", "PyQt5.QtWidgets.QWidget", "ui_window.Ui_Form.page_3.setObjectName", "ui_window.Ui_Form.stackedWidget.addWidget", "PyQt5.QtWidgets.QWidget", "ui_window.Ui_Form.page_4.setObjectName", "ui_window.Ui_Form.stackedWidget.addWidget", "PyQt5.QtWidgets.QGroupBox", "ui_window.Ui_Form.groupBox.setGeometry", "ui_window.Ui_Form.groupBox.setTitle", "ui_window.Ui_Form.groupBox.setObjectName", "PyQt5.QtWidgets.QRadioButton", "ui_window.Ui_Form.radioButton.setGeometry", "ui_window.Ui_Form.radioButton.setObjectName", "PyQt5.QtWidgets.QRadioButton", "ui_window.Ui_Form.radioButton_2.setGeometry", "ui_window.Ui_Form.radioButton_2.setObjectName", "PyQt5.QtWidgets.QPushButton", "ui_window.Ui_Form.pushButton_5.setGeometry", "ui_window.Ui_Form.pushButton_5.setObjectName", "PyQt5.QtWidgets.QPushButton", "ui_window.Ui_Form.pushButton_6.setGeometry", "ui_window.Ui_Form.pushButton_6.setObjectName", "PyQt5.QtWidgets.QWidget", "ui_window.Ui_Form.formLayoutWidget.setGeometry", "ui_window.Ui_Form.formLayoutWidget.setObjectName", "PyQt5.QtWidgets.QFormLayout", "ui_window.Ui_Form.formLayout.setContentsMargins", "ui_window.Ui_Form.formLayout.setObjectName", "PyQt5.QtWidgets.QLabel", "ui_window.Ui_Form.label_5.setObjectName", "ui_window.Ui_Form.formLayout.setWidget", "PyQt5.QtWidgets.QLabel", "ui_window.Ui_Form.label_6.setText", "ui_window.Ui_Form.label_6.setScaledContents", "ui_window.Ui_Form.label_6.setObjectName", "ui_window.Ui_Form.formLayout.setWidget", "PyQt5.QtWidgets.QSplitter", "ui_window.Ui_Form.splitter.setGeometry", "ui_window.Ui_Form.splitter.setOrientation", "ui_window.Ui_Form.splitter.setObjectName", "ui_window.Ui_Form.retranslateUi", "PyQt5.QtCore.QMetaObject.connectSlotsByName", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "ui_window.Ui_Form.comboBox.sizePolicy().hasHeightForWidth", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QRect", "ui_window.Ui_Form.comboBox.sizePolicy"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.rfr.dataset.Dataset.resize", "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_window.Ui_Form.retranslateUi"], ["    ", "def", "setupUi", "(", "self", ",", "Form", ")", ":", "\n", "        ", "Form", ".", "setObjectName", "(", "\"Form\"", ")", "\n", "Form", ".", "resize", "(", "940", ",", "560", ")", "\n", "self", ".", "label", "=", "QtWidgets", ".", "QLabel", "(", "Form", ")", "\n", "self", ".", "label", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "190", ",", "20", ",", "500", ",", "40", ")", ")", "\n", "font", "=", "QtGui", ".", "QFont", "(", ")", "\n", "font", ".", "setPointSize", "(", "18", ")", "\n", "font", ".", "setBold", "(", "True", ")", "\n", "font", ".", "setUnderline", "(", "False", ")", "\n", "font", ".", "setWeight", "(", "75", ")", "\n", "self", ".", "label", ".", "setFont", "(", "font", ")", "\n", "self", ".", "label", ".", "setAlignment", "(", "QtCore", ".", "Qt", ".", "AlignCenter", ")", "\n", "self", ".", "label", ".", "setObjectName", "(", "\"label\"", ")", "\n", "self", ".", "graphicsView_2", "=", "QtWidgets", ".", "QGraphicsView", "(", "Form", ")", "\n", "self", ".", "graphicsView_2", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "590", ",", "200", ",", "320", ",", "320", ")", ")", "\n", "self", ".", "graphicsView_2", ".", "setObjectName", "(", "\"graphicsView_2\"", ")", "\n", "self", ".", "label_4", "=", "QtWidgets", ".", "QLabel", "(", "Form", ")", "\n", "self", ".", "label_4", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "220", ",", "170", ",", "67", ",", "17", ")", ")", "\n", "self", ".", "label_4", ".", "setObjectName", "(", "\"label_4\"", ")", "\n", "self", ".", "layoutWidget", "=", "QtWidgets", ".", "QWidget", "(", "Form", ")", "\n", "self", ".", "layoutWidget", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "70", ",", "240", ",", "111", ",", "291", ")", ")", "\n", "self", ".", "layoutWidget", ".", "setObjectName", "(", "\"layoutWidget\"", ")", "\n", "self", ".", "verticalLayout", "=", "QtWidgets", ".", "QVBoxLayout", "(", "self", ".", "layoutWidget", ")", "\n", "self", ".", "verticalLayout", ".", "setContentsMargins", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "verticalLayout", ".", "setObjectName", "(", "\"verticalLayout\"", ")", "\n", "self", ".", "pushButton", "=", "QtWidgets", ".", "QPushButton", "(", "self", ".", "layoutWidget", ")", "\n", "self", ".", "pushButton", ".", "setObjectName", "(", "\"pushButton\"", ")", "\n", "self", ".", "verticalLayout", ".", "addWidget", "(", "self", ".", "pushButton", ")", "\n", "self", ".", "pushButton_2", "=", "QtWidgets", ".", "QPushButton", "(", "self", ".", "layoutWidget", ")", "\n", "self", ".", "pushButton_2", ".", "setObjectName", "(", "\"pushButton_2\"", ")", "\n", "self", ".", "verticalLayout", ".", "addWidget", "(", "self", ".", "pushButton_2", ")", "\n", "self", ".", "pushButton_3", "=", "QtWidgets", ".", "QPushButton", "(", "self", ".", "layoutWidget", ")", "\n", "self", ".", "pushButton_3", ".", "setObjectName", "(", "\"pushButton_3\"", ")", "\n", "self", ".", "verticalLayout", ".", "addWidget", "(", "self", ".", "pushButton_3", ")", "\n", "self", ".", "pushButton_4", "=", "QtWidgets", ".", "QPushButton", "(", "self", ".", "layoutWidget", ")", "\n", "self", ".", "pushButton_4", ".", "setObjectName", "(", "\"pushButton_4\"", ")", "\n", "self", ".", "verticalLayout", ".", "addWidget", "(", "self", ".", "pushButton_4", ")", "\n", "self", ".", "layoutWidget1", "=", "QtWidgets", ".", "QWidget", "(", "Form", ")", "\n", "self", ".", "layoutWidget1", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "400", ",", "100", ",", "229", ",", "31", ")", ")", "\n", "self", ".", "layoutWidget1", ".", "setObjectName", "(", "\"layoutWidget1\"", ")", "\n", "self", ".", "horizontalLayout", "=", "QtWidgets", ".", "QHBoxLayout", "(", "self", ".", "layoutWidget1", ")", "\n", "self", ".", "horizontalLayout", ".", "setContentsMargins", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "horizontalLayout", ".", "setObjectName", "(", "\"horizontalLayout\"", ")", "\n", "self", ".", "label_3", "=", "QtWidgets", ".", "QLabel", "(", "self", ".", "layoutWidget1", ")", "\n", "self", ".", "label_3", ".", "setObjectName", "(", "\"label_3\"", ")", "\n", "self", ".", "horizontalLayout", ".", "addWidget", "(", "self", ".", "label_3", ")", "\n", "self", ".", "comboBox", "=", "QtWidgets", ".", "QComboBox", "(", "self", ".", "layoutWidget1", ")", "\n", "sizePolicy", "=", "QtWidgets", ".", "QSizePolicy", "(", "QtWidgets", ".", "QSizePolicy", ".", "Preferred", ",", "QtWidgets", ".", "QSizePolicy", ".", "Preferred", ")", "\n", "sizePolicy", ".", "setHorizontalStretch", "(", "0", ")", "\n", "sizePolicy", ".", "setVerticalStretch", "(", "0", ")", "\n", "sizePolicy", ".", "setHeightForWidth", "(", "self", ".", "comboBox", ".", "sizePolicy", "(", ")", ".", "hasHeightForWidth", "(", ")", ")", "\n", "self", ".", "comboBox", ".", "setSizePolicy", "(", "sizePolicy", ")", "\n", "self", ".", "comboBox", ".", "setObjectName", "(", "\"comboBox\"", ")", "\n", "self", ".", "comboBox", ".", "addItem", "(", "\"\"", ")", "\n", "self", ".", "comboBox", ".", "addItem", "(", "\"\"", ")", "\n", "self", ".", "comboBox", ".", "addItem", "(", "\"\"", ")", "\n", "self", ".", "comboBox", ".", "addItem", "(", "\"\"", ")", "\n", "self", ".", "comboBox", ".", "addItem", "(", "\"\"", ")", "\n", "self", ".", "comboBox", ".", "addItem", "(", "\"\"", ")", "\n", "self", ".", "comboBox", ".", "addItem", "(", "\"\"", ")", "\n", "self", ".", "comboBox", ".", "addItem", "(", "\"\"", ")", "\n", "self", ".", "comboBox", ".", "addItem", "(", "\"\"", ")", "\n", "self", ".", "horizontalLayout", ".", "addWidget", "(", "self", ".", "comboBox", ")", "\n", "self", ".", "layoutWidget2", "=", "QtWidgets", ".", "QWidget", "(", "Form", ")", "\n", "self", ".", "layoutWidget2", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "60", ",", "100", ",", "151", ",", "31", ")", ")", "\n", "self", ".", "layoutWidget2", ".", "setObjectName", "(", "\"layoutWidget2\"", ")", "\n", "self", ".", "horizontalLayout_2", "=", "QtWidgets", ".", "QHBoxLayout", "(", "self", ".", "layoutWidget2", ")", "\n", "self", ".", "horizontalLayout_2", ".", "setContentsMargins", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "horizontalLayout_2", ".", "setObjectName", "(", "\"horizontalLayout_2\"", ")", "\n", "self", ".", "label_2", "=", "QtWidgets", ".", "QLabel", "(", "self", ".", "layoutWidget2", ")", "\n", "self", ".", "label_2", ".", "setAlignment", "(", "QtCore", ".", "Qt", ".", "AlignCenter", ")", "\n", "self", ".", "label_2", ".", "setObjectName", "(", "\"label_2\"", ")", "\n", "self", ".", "horizontalLayout_2", ".", "addWidget", "(", "self", ".", "label_2", ")", "\n", "self", ".", "spinBox", "=", "QtWidgets", ".", "QSpinBox", "(", "self", ".", "layoutWidget2", ")", "\n", "self", ".", "spinBox", ".", "setMinimum", "(", "3", ")", "\n", "self", ".", "spinBox", ".", "setMaximum", "(", "40", ")", "\n", "self", ".", "spinBox", ".", "setSingleStep", "(", "2", ")", "\n", "self", ".", "spinBox", ".", "setProperty", "(", "\"value\"", ",", "3", ")", "\n", "self", ".", "spinBox", ".", "setObjectName", "(", "\"spinBox\"", ")", "\n", "self", ".", "horizontalLayout_2", ".", "addWidget", "(", "self", ".", "spinBox", ")", "\n", "self", ".", "stackedWidget", "=", "QtWidgets", ".", "QStackedWidget", "(", "Form", ")", "\n", "self", ".", "stackedWidget", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "220", ",", "200", ",", "320", ",", "320", ")", ")", "\n", "self", ".", "stackedWidget", ".", "setObjectName", "(", "\"stackedWidget\"", ")", "\n", "self", ".", "page_3", "=", "QtWidgets", ".", "QWidget", "(", ")", "\n", "self", ".", "page_3", ".", "setObjectName", "(", "\"page_3\"", ")", "\n", "self", ".", "stackedWidget", ".", "addWidget", "(", "self", ".", "page_3", ")", "\n", "self", ".", "page_4", "=", "QtWidgets", ".", "QWidget", "(", ")", "\n", "self", ".", "page_4", ".", "setObjectName", "(", "\"page_4\"", ")", "\n", "self", ".", "stackedWidget", ".", "addWidget", "(", "self", ".", "page_4", ")", "\n", "self", ".", "groupBox", "=", "QtWidgets", ".", "QGroupBox", "(", "Form", ")", "\n", "self", ".", "groupBox", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "70", ",", "150", ",", "111", ",", "80", ")", ")", "\n", "self", ".", "groupBox", ".", "setTitle", "(", "\"\"", ")", "\n", "self", ".", "groupBox", ".", "setObjectName", "(", "\"groupBox\"", ")", "\n", "self", ".", "radioButton", "=", "QtWidgets", ".", "QRadioButton", "(", "self", ".", "groupBox", ")", "\n", "self", ".", "radioButton", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "10", ",", "20", ",", "91", ",", "20", ")", ")", "\n", "self", ".", "radioButton", ".", "setObjectName", "(", "\"radioButton\"", ")", "\n", "self", ".", "radioButton_2", "=", "QtWidgets", ".", "QRadioButton", "(", "self", ".", "groupBox", ")", "\n", "self", ".", "radioButton_2", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "10", ",", "50", ",", "91", ",", "20", ")", ")", "\n", "self", ".", "radioButton_2", ".", "setObjectName", "(", "\"radioButton_2\"", ")", "\n", "self", ".", "pushButton_5", "=", "QtWidgets", ".", "QPushButton", "(", "Form", ")", "\n", "self", ".", "pushButton_5", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "70", ",", "140", ",", "109", ",", "22", ")", ")", "\n", "self", ".", "pushButton_5", ".", "setObjectName", "(", "\"pushButton_5\"", ")", "\n", "self", ".", "pushButton_6", "=", "QtWidgets", ".", "QPushButton", "(", "Form", ")", "\n", "self", ".", "pushButton_6", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "590", ",", "170", ",", "131", ",", "25", ")", ")", "\n", "self", ".", "pushButton_6", ".", "setObjectName", "(", "\"pushButton_6\"", ")", "\n", "self", ".", "formLayoutWidget", "=", "QtWidgets", ".", "QWidget", "(", "Form", ")", "\n", "self", ".", "formLayoutWidget", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "790", ",", "170", ",", "121", ",", "21", ")", ")", "\n", "self", ".", "formLayoutWidget", ".", "setObjectName", "(", "\"formLayoutWidget\"", ")", "\n", "self", ".", "formLayout", "=", "QtWidgets", ".", "QFormLayout", "(", "self", ".", "formLayoutWidget", ")", "\n", "self", ".", "formLayout", ".", "setContentsMargins", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "formLayout", ".", "setObjectName", "(", "\"formLayout\"", ")", "\n", "self", ".", "label_5", "=", "QtWidgets", ".", "QLabel", "(", "self", ".", "formLayoutWidget", ")", "\n", "self", ".", "label_5", ".", "setObjectName", "(", "\"label_5\"", ")", "\n", "self", ".", "formLayout", ".", "setWidget", "(", "0", ",", "QtWidgets", ".", "QFormLayout", ".", "LabelRole", ",", "self", ".", "label_5", ")", "\n", "self", ".", "label_6", "=", "QtWidgets", ".", "QLabel", "(", "self", ".", "formLayoutWidget", ")", "\n", "self", ".", "label_6", ".", "setText", "(", "\"\"", ")", "\n", "self", ".", "label_6", ".", "setScaledContents", "(", "True", ")", "\n", "self", ".", "label_6", ".", "setObjectName", "(", "\"label_6\"", ")", "\n", "self", ".", "formLayout", ".", "setWidget", "(", "0", ",", "QtWidgets", ".", "QFormLayout", ".", "FieldRole", ",", "self", ".", "label_6", ")", "\n", "self", ".", "splitter", "=", "QtWidgets", ".", "QSplitter", "(", "Form", ")", "\n", "self", ".", "splitter", ".", "setGeometry", "(", "QtCore", ".", "QRect", "(", "770", ",", "170", ",", "134", ",", "17", ")", ")", "\n", "self", ".", "splitter", ".", "setOrientation", "(", "QtCore", ".", "Qt", ".", "Horizontal", ")", "\n", "self", ".", "splitter", ".", "setObjectName", "(", "\"splitter\"", ")", "\n", "\n", "self", ".", "retranslateUi", "(", "Form", ")", "\n", "QtCore", ".", "QMetaObject", ".", "connectSlotsByName", "(", "Form", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_window.Ui_Form.retranslateUi": [[139, 164], ["Form.setWindowTitle", "ui_window.Ui_Form.label.setText", "ui_window.Ui_Form.label_4.setText", "ui_window.Ui_Form.pushButton.setText", "ui_window.Ui_Form.pushButton_2.setText", "ui_window.Ui_Form.pushButton_3.setText", "ui_window.Ui_Form.pushButton_4.setText", "ui_window.Ui_Form.label_3.setText", "ui_window.Ui_Form.comboBox.setItemText", "ui_window.Ui_Form.comboBox.setItemText", "ui_window.Ui_Form.comboBox.setItemText", "ui_window.Ui_Form.comboBox.setItemText", "ui_window.Ui_Form.comboBox.setItemText", "ui_window.Ui_Form.comboBox.setItemText", "ui_window.Ui_Form.comboBox.setItemText", "ui_window.Ui_Form.comboBox.setItemText", "ui_window.Ui_Form.comboBox.setItemText", "ui_window.Ui_Form.label_2.setText", "ui_window.Ui_Form.radioButton.setText", "ui_window.Ui_Form.radioButton_2.setText", "ui_window.Ui_Form.pushButton_5.setText", "ui_window.Ui_Form.pushButton_6.setText", "ui_window.Ui_Form.label_5.setText", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate", "_translate"], "methods", ["None"], ["", "def", "retranslateUi", "(", "self", ",", "Form", ")", ":", "\n", "        ", "_translate", "=", "QtCore", ".", "QCoreApplication", ".", "translate", "\n", "Form", ".", "setWindowTitle", "(", "_translate", "(", "\"Form\"", ",", "\" \"", ")", ")", "\n", "self", ".", "label", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"Pluralistic Image Completion\"", ")", ")", "\n", "self", ".", "label_4", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"Input:\"", ")", ")", "\n", "self", ".", "pushButton", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"load\"", ")", ")", "\n", "self", ".", "pushButton_2", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"random\"", ")", ")", "\n", "self", ".", "pushButton_3", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"fill\"", ")", ")", "\n", "self", ".", "pushButton_4", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"save\"", ")", ")", "\n", "self", ".", "label_3", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"Options:\"", ")", ")", "\n", "self", ".", "comboBox", ".", "setItemText", "(", "0", ",", "_translate", "(", "\"Form\"", ",", "\"None\"", ")", ")", "\n", "self", ".", "comboBox", ".", "setItemText", "(", "1", ",", "_translate", "(", "\"Form\"", ",", "\"CelebA-HQ-center\"", ")", ")", "\n", "self", ".", "comboBox", ".", "setItemText", "(", "2", ",", "_translate", "(", "\"Form\"", ",", "\"Paris-center\"", ")", ")", "\n", "self", ".", "comboBox", ".", "setItemText", "(", "3", ",", "_translate", "(", "\"Form\"", ",", "\"ImageNet-center\"", ")", ")", "\n", "self", ".", "comboBox", ".", "setItemText", "(", "4", ",", "_translate", "(", "\"Form\"", ",", "\"Places2-center\"", ")", ")", "\n", "self", ".", "comboBox", ".", "setItemText", "(", "5", ",", "_translate", "(", "\"Form\"", ",", "\"CelebA-HQ-random\"", ")", ")", "\n", "self", ".", "comboBox", ".", "setItemText", "(", "6", ",", "_translate", "(", "\"Form\"", ",", "\"Paris-random\"", ")", ")", "\n", "self", ".", "comboBox", ".", "setItemText", "(", "7", ",", "_translate", "(", "\"Form\"", ",", "\"ImageNet-random\"", ")", ")", "\n", "self", ".", "comboBox", ".", "setItemText", "(", "8", ",", "_translate", "(", "\"Form\"", ",", "\"Places2-random\"", ")", ")", "\n", "self", ".", "label_2", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"Bush Width:\"", ")", ")", "\n", "self", ".", "radioButton", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"free-form\"", ")", ")", "\n", "self", ".", "radioButton_2", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"rectangle\"", ")", ")", "\n", "self", ".", "pushButton_5", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"draw/clear\"", ")", ")", "\n", "self", ".", "pushButton_6", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"Original/Output\"", ")", ")", "\n", "self", ".", "label_5", ".", "setText", "(", "_translate", "(", "\"Form\"", ",", "\"<html><head/><body><p>Score:</p></body></html>\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.colour3.__init__": [[5, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nR", "=", "0", ",", "nG", "=", "0", ",", "nB", "=", "0", ")", ":", "\n", "        ", "self", ".", "R", "=", "nR", "\n", "self", ".", "G", "=", "nG", "\n", "self", ".", "B", "=", "nB", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.point.__init__": [[12, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nX", "=", "0", ",", "nY", "=", "0", ")", ":", "\n", "        ", "self", ".", "X", "=", "nX", "\n", "self", ".", "Y", "=", "nY", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.point.Set": [[16, 19], ["None"], "methods", ["None"], ["", "def", "Set", "(", "self", ",", "nX", ",", "nY", ")", ":", "\n", "        ", "self", ".", "X", "=", "nX", "\n", "self", ".", "Y", "=", "nY", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shape.__init__": [[22, 27], ["ui_draw.point", "ui_draw.colour3"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "location", "=", "point", "(", "0", ",", "0", ")", ",", "width", "=", "1", ",", "color", "=", "colour3", "(", "255", ",", "255", ",", "255", ")", ",", "number", "=", "0", ")", ":", "\n", "        ", "self", ".", "Location", "=", "location", "\n", "self", ".", "Width", "=", "width", "\n", "self", ".", "Color", "=", "color", "\n", "self", ".", "ShapeNumber", "=", "number", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.__init__": [[30, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "shapes", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.NumberOfShapes": [[33, 35], ["len"], "methods", ["None"], ["", "def", "NumberOfShapes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "shapes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.NewShape": [[36, 39], ["ui_draw.point", "ui_draw.colour3", "ui_draw.shape", "ui_draw.shapes.shapes.append"], "methods", ["None"], ["", "def", "NewShape", "(", "self", ",", "location", "=", "point", "(", "0", ",", "0", ")", ",", "width", "=", "1", ",", "color", "=", "colour3", "(", "255", ",", "255", ",", "255", ")", ",", "number", "=", "0", ")", ":", "\n", "        ", "Sh", "=", "shape", "(", "location", ",", "width", ",", "color", ",", "number", ")", "\n", "self", ".", "shapes", ".", "append", "(", "Sh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.GetShape": [[40, 42], ["None"], "methods", ["None"], ["", "def", "GetShape", "(", "self", ",", "Index", ")", ":", "\n", "        ", "return", "self", ".", "shapes", "[", "Index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.RemoveShape": [[47, 65], ["len", "range", "abs", "abs", "len"], "methods", ["None"], ["", "def", "RemoveShape", "(", "self", ",", "L", ",", "threshold", ")", ":", "\n", "# do while so we can change the size of the list and it wont come back to bite me in the ass!!", "\n", "        ", "i", "=", "0", "\n", "while", "True", ":", "\n", "            ", "if", "(", "i", "==", "len", "(", "self", ".", "shapes", ")", ")", ":", "\n", "                ", "break", "\n", "# Finds if a point is within a certain distance of the point to remove.", "\n", "", "if", "(", "(", "abs", "(", "L", ".", "X", "-", "self", ".", "shapes", "[", "i", "]", ".", "Location", ".", "X", ")", "<", "threshold", ")", "and", "(", "\n", "abs", "(", "L", ".", "Y", "-", "self", ".", "shapes", "[", "i", "]", ".", "Location", ".", "Y", ")", "<", "threshold", ")", ")", ":", "\n", "# removes all data for that number", "\n", "                ", "del", "self", ".", "shapes", "[", "i", "]", "\n", "# goes through the rest of the data and adds an extra", "\n", "# 1 to defined them as a seprate shape and shuffles on the effect.", "\n", "for", "n", "in", "range", "(", "len", "(", "self", ".", "shapes", ")", "-", "i", ")", ":", "\n", "                    ", "self", ".", "shapes", "[", "n", "+", "i", "]", ".", "ShapeNumber", "+=", "1", "\n", "# Go back a step so we dont miss a point.", "\n", "", "i", "-=", "1", "\n", "", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.painter.__init__": [[68, 93], ["PyQt5.QtWidgets.QWidget.__init__", "ui_draw.painter.setPalette", "ui_draw.painter.setAutoFillBackground", "ui_draw.painter.setMaximumSize", "PyQt5.QtGui.QImage", "ui_draw.painter.map.fill", "ui_draw.point", "ui_draw.point", "ui_draw.shapes", "ui_draw.shapes", "ui_draw.colour3", "PyQt5.QtGui.QPalette"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "parent", ",", "image", "=", "None", ")", ":", "\n", "        ", "super", "(", "painter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ParentLink", "=", "parent", "\n", "self", ".", "setPalette", "(", "QtGui", ".", "QPalette", "(", "QtCore", ".", "Qt", ".", "white", ")", ")", "\n", "self", ".", "setAutoFillBackground", "(", "True", ")", "\n", "self", ".", "setMaximumSize", "(", "self", ".", "ParentLink", ".", "opt", ".", "loadSize", "[", "0", "]", ",", "self", ".", "ParentLink", ".", "opt", ".", "loadSize", "[", "1", "]", ")", "\n", "self", ".", "map", "=", "QtGui", ".", "QImage", "(", "self", ".", "ParentLink", ".", "opt", ".", "loadSize", "[", "0", "]", ",", "self", ".", "ParentLink", ".", "opt", ".", "loadSize", "[", "1", "]", ",", "QtGui", ".", "QImage", ".", "Format_RGB32", ")", "\n", "self", ".", "map", ".", "fill", "(", "QtCore", ".", "Qt", ".", "black", ")", "\n", "self", ".", "image", "=", "image", "\n", "self", ".", "shape", "=", "self", ".", "ParentLink", ".", "shape", "\n", "self", ".", "CurrentWidth", "=", "self", ".", "ParentLink", ".", "CurrentWidth", "\n", "self", ".", "MouseLoc", "=", "point", "(", "0", ",", "0", ")", "\n", "self", ".", "LastPos", "=", "point", "(", "0", ",", "0", ")", "\n", "self", ".", "Brush", "=", "False", "\n", "self", ".", "DrawingShapes_free", "=", "shapes", "(", ")", "\n", "self", ".", "DrawingShapes_rec", "=", "shapes", "(", ")", "\n", "self", ".", "IsPainting", "=", "False", "\n", "self", ".", "IsEraseing", "=", "False", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "self", ".", "CurrentColor", "=", "colour3", "(", "255", ",", "255", ",", "255", ")", "\n", "\n", "self", ".", "ShapeNum", "=", "0", "\n", "self", ".", "IsMouseing", "=", "False", "\n", "self", ".", "PaintPanel", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.painter.mousePressEvent": [[95, 108], ["ui_draw.painter.DrawingShapes_rec.NewShape", "ui_draw.painter.DrawingShapes_rec.NewShape", "ui_draw.point", "ui_draw.point", "ui_draw.point", "event.x", "event.y", "event.x", "event.y"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.NewShape", "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.NewShape"], ["", "def", "mousePressEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "self", ".", "Brush", ":", "\n", "            ", "self", ".", "IsPainting", "=", "True", "\n", "self", ".", "ShapeNum", "+=", "1", "\n", "if", "self", ".", "shape", "==", "'rectangle'", ":", "\n", "                ", "self", ".", "DrawingShapes_rec", ".", "NewShape", "(", "point", "(", "event", ".", "x", "(", ")", ",", "event", ".", "y", "(", ")", ")", ",", "self", ".", "CurrentWidth", ",", "self", ".", "CurrentColor", ",", "\n", "self", ".", "ShapeNum", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "LastPos", "=", "point", "(", "0", ",", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "IsEraseing", "=", "True", "\n", "", "if", "self", ".", "shape", "==", "'rectangle'", ":", "\n", "            ", "self", ".", "DrawingShapes_rec", ".", "NewShape", "(", "point", "(", "event", ".", "x", "(", ")", ",", "event", ".", "y", "(", ")", ")", ",", "self", ".", "CurrentWidth", ",", "self", ".", "CurrentColor", ",", "self", ".", "ShapeNum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.painter.mouseMoveEvent": [[110, 125], ["ui_draw.point", "ui_draw.painter.repaint", "ui_draw.point", "ui_draw.painter.repaint", "event.x", "event.y", "ui_draw.point", "event.x", "event.y", "ui_draw.painter.DrawingShapes_free.RemoveShape", "event.x", "event.y", "ui_draw.painter.DrawingShapes_free.NewShape", "ui_draw.painter.DrawingShapes_rec.RemoveShape"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.RemoveShape", "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.NewShape", "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.RemoveShape"], ["", "", "def", "mouseMoveEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "self", ".", "IsPainting", ":", "\n", "            ", "self", ".", "MouseLoc", "=", "point", "(", "event", ".", "x", "(", ")", ",", "event", ".", "y", "(", ")", ")", "\n", "if", "self", ".", "LastPos", ".", "X", "!=", "self", ".", "MouseLoc", ".", "X", "or", "self", ".", "LastPos", ".", "Y", "!=", "self", ".", "MouseLoc", ".", "Y", ":", "\n", "                ", "self", ".", "LastPos", "=", "point", "(", "event", ".", "x", "(", ")", ",", "event", ".", "y", "(", ")", ")", "\n", "if", "self", ".", "shape", "==", "'line'", ":", "\n", "                    ", "self", ".", "DrawingShapes_free", ".", "NewShape", "(", "self", ".", "LastPos", ",", "self", ".", "CurrentWidth", ",", "self", ".", "CurrentColor", ",", "self", ".", "ShapeNum", ")", "\n", "", "", "self", ".", "repaint", "(", ")", "\n", "", "if", "self", ".", "IsEraseing", ":", "\n", "            ", "self", ".", "MouseLoc", "=", "point", "(", "event", ".", "x", "(", ")", ",", "event", ".", "y", "(", ")", ")", "\n", "if", "self", ".", "shape", "==", "'line'", ":", "\n", "                ", "self", ".", "DrawingShapes_free", ".", "RemoveShape", "(", "self", ".", "MouseLoc", ",", "10", ")", "\n", "", "elif", "self", ".", "shape", "==", "'rectangle'", ":", "\n", "                ", "self", ".", "DrawingShapes_rec", ".", "RemoveShape", "(", "self", ".", "MouseLoc", ",", "10", ")", "\n", "", "self", ".", "repaint", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.painter.mouseReleaseEvent": [[127, 136], ["ui_draw.painter.repaint", "ui_draw.painter.DrawingShapes_rec.NewShape", "ui_draw.painter.repaint", "ui_draw.point", "event.x", "event.y"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.NewShape"], ["", "", "def", "mouseReleaseEvent", "(", "self", ",", "event", ")", ":", "\n", "# if self.IsPainting:", "\n", "#     self.IsPainting = False", "\n", "        ", "if", "self", ".", "IsEraseing", ":", "\n", "            ", "self", ".", "IsEraseing", "=", "False", "\n", "self", ".", "repaint", "(", ")", "\n", "", "elif", "self", ".", "shape", "==", "'rectangle'", ":", "\n", "            ", "self", ".", "DrawingShapes_rec", ".", "NewShape", "(", "point", "(", "event", ".", "x", "(", ")", ",", "event", ".", "y", "(", ")", ")", ",", "self", ".", "CurrentWidth", ",", "self", ".", "CurrentColor", ",", "self", ".", "ShapeNum", ")", "\n", "self", ".", "repaint", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.painter.paintEvent": [[137, 148], ["PyQt5.QtGui.QPainter", "PyQt5.QtGui.QPainter.begin", "PyQt5.QtGui.QPainter.end", "PyQt5.QtGui.QPainter.drawImage", "ui_draw.painter.drawLines", "ui_draw.painter.drawRectangle"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.painter.drawLines", "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.painter.drawRectangle"], ["", "", "def", "paintEvent", "(", "self", ",", "event", ")", ":", "\n", "        ", "painter", "=", "QtGui", ".", "QPainter", "(", ")", "\n", "painter", ".", "begin", "(", "self", ")", "\n", "if", "self", ".", "image", "!=", "None", ":", "\n", "            ", "painter", ".", "drawImage", "(", "0", ",", "0", ",", "self", ".", "image", ")", "\n", "", "if", "self", ".", "shape", "==", "'line'", ":", "\n", "            ", "self", ".", "drawLines", "(", "painter", ")", "\n", "", "if", "self", ".", "shape", "==", "'rectangle'", ":", "\n", "            ", "self", ".", "drawRectangle", "(", "painter", ")", "\n", "", "painter", ".", "end", "(", ")", "\n", "self", ".", "iteration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.painter.saveDraw": [[149, 157], ["PyQt5.QtGui.QPainter", "PyQt5.QtGui.QPainter.begin", "PyQt5.QtGui.QPainter.end", "ui_draw.painter.drawLines", "ui_draw.painter.drawRectangle"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.painter.drawLines", "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.painter.drawRectangle"], ["", "def", "saveDraw", "(", "self", ")", ":", "\n", "        ", "painter", "=", "QtGui", ".", "QPainter", "(", ")", "\n", "painter", ".", "begin", "(", "self", ".", "map", ")", "\n", "if", "self", ".", "shape", "==", "'line'", ":", "\n", "            ", "self", ".", "drawLines", "(", "painter", ")", "\n", "", "if", "self", ".", "shape", "==", "'rectangle'", ":", "\n", "            ", "self", ".", "drawRectangle", "(", "painter", ")", "\n", "", "painter", ".", "end", "(", ")", "\n", "#self.map.save('./test.png')", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.painter.drawLines": [[160, 172], ["painter.setRenderHint", "range", "ui_draw.painter.DrawingShapes_free.GetShape", "ui_draw.painter.DrawingShapes_free.GetShape", "ui_draw.painter.DrawingShapes_free.NumberOfShapes", "PyQt5.QtGui.QPen", "painter.setPen", "painter.drawLine", "PyQt5.QtGui.QColor"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.GetShape", "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.GetShape", "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.NumberOfShapes"], ["", "def", "drawLines", "(", "self", ",", "painter", ")", ":", "\n", "        ", "painter", ".", "setRenderHint", "(", "QtGui", ".", "QPainter", ".", "Antialiasing", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "DrawingShapes_free", ".", "NumberOfShapes", "(", ")", "-", "1", ")", ":", "\n", "\n", "            ", "T", "=", "self", ".", "DrawingShapes_free", ".", "GetShape", "(", "i", ")", "\n", "T1", "=", "self", ".", "DrawingShapes_free", ".", "GetShape", "(", "i", "+", "1", ")", "\n", "\n", "if", "T", ".", "ShapeNumber", "==", "T1", ".", "ShapeNumber", ":", "\n", "                ", "pen", "=", "QtGui", ".", "QPen", "(", "QtGui", ".", "QColor", "(", "T", ".", "Color", ".", "R", ",", "T", ".", "Color", ".", "G", ",", "T", ".", "Color", ".", "B", ")", ",", "T", ".", "Width", "/", "2", ",", "QtCore", ".", "Qt", ".", "SolidLine", ")", "\n", "painter", ".", "setPen", "(", "pen", ")", "\n", "painter", ".", "drawLine", "(", "T", ".", "Location", ".", "X", ",", "T", ".", "Location", ".", "Y", ",", "T1", ".", "Location", ".", "X", ",", "T1", ".", "Location", ".", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.painter.drawRectangle": [[173, 187], ["painter.setRenderHint", "range", "ui_draw.painter.DrawingShapes_rec.GetShape", "ui_draw.painter.DrawingShapes_rec.GetShape", "ui_draw.painter.DrawingShapes_rec.NumberOfShapes", "PyQt5.QtGui.QPen", "painter.setPen", "painter.setBrush", "painter.drawRects", "PyQt5.QtGui.QColor", "PyQt5.QtGui.QColor", "PyQt5.QtCore.QRect", "PyQt5.QtCore.QPoint", "PyQt5.QtCore.QPoint"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.GetShape", "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.GetShape", "home.repos.pwc.inspect_result.plai-group_ipa.gui.ui_draw.shapes.NumberOfShapes"], ["", "", "", "def", "drawRectangle", "(", "self", ",", "painter", ")", ":", "\n", "        ", "painter", ".", "setRenderHint", "(", "QtGui", ".", "QPainter", ".", "Antialiasing", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "DrawingShapes_rec", ".", "NumberOfShapes", "(", ")", "-", "1", ")", ":", "\n", "\n", "            ", "T", "=", "self", ".", "DrawingShapes_rec", ".", "GetShape", "(", "i", ")", "\n", "T1", "=", "self", ".", "DrawingShapes_rec", ".", "GetShape", "(", "i", "+", "1", ")", "\n", "\n", "if", "T", ".", "ShapeNumber", "==", "T1", ".", "ShapeNumber", ":", "\n", "                ", "pen", "=", "QtGui", ".", "QPen", "(", "QtGui", ".", "QColor", "(", "T", ".", "Color", ".", "R", ",", "T", ".", "Color", ".", "G", ",", "T", ".", "Color", ".", "B", ")", ",", "T", ".", "Width", "/", "2", ",", "QtCore", ".", "Qt", ".", "SolidLine", ")", "\n", "painter", ".", "setPen", "(", "pen", ")", "\n", "painter", ".", "setBrush", "(", "QtGui", ".", "QColor", "(", "T", ".", "Color", ".", "R", ",", "T", ".", "Color", ".", "G", ",", "T", ".", "Color", ".", "B", ")", ")", "\n", "painter", ".", "drawRects", "(", "QtCore", ".", "QRect", "(", "QtCore", ".", "QPoint", "(", "T", ".", "Location", ".", "X", ",", "T", ".", "Location", ".", "Y", ")", ",", "\n", "QtCore", ".", "QPoint", "(", "T1", ".", "Location", ".", "X", ",", "T1", ".", "Location", ".", "Y", ")", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.options.test_options.TestOptions.initialize": [[5, 18], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "float"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of the test examples'", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here'", ")", "\n", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'how many test images to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test'", ")", "\n", "parser", ".", "add_argument", "(", "'--nsampling'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'ramplimg # times for each images'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_number'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'choice # reasonable results based on the discriminator score'", ")", "\n", "\n", "self", ".", "isTrain", "=", "False", "\n", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.options.train_options.TrainOptions.initialize": [[5, 35], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "\n", "# training epoch", "\n", "parser", ".", "add_argument", "(", "'--iter_count'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the starting epoch count'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "2000000", ",", "help", "=", "'# of iter with initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'# of iter with initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'# of iter to decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "\n", "# learning rate and loss weight", "\n", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'none'", ",", "help", "=", "'learning rate policy[lambda|step|plateau|none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'lsgan'", ",", "choices", "=", "[", "'wgan-gp'", ",", "'hinge'", ",", "'lsgan'", "]", ")", "\n", "\n", "# display the results", "\n", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_iters_freq'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results'", ")", "\n", "\n", "# Additional parameters", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "\"Number of workers for mask_generator sampler. If not given, the main process will sample the masks. Recommended: 8\"", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.options.base_options.BaseOptions.__init__": [[11, 14], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.options.base_options.BaseOptions.initialize": [[15, 51], ["vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args.add_argument", "vae_helpers.baseline_utils.update_args"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.baseline_utils.update_args"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "# base define", "\n", "        ", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "'name of the experiment.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'pluralistic'", ",", "help", "=", "'name of the model type. [pluralistic]'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_type'", ",", "type", "=", "int", ",", "default", "=", "[", "1", ",", "2", "]", ",", "\n", "help", "=", "'mask type, 0: center mask, 1:random regular mask, '", "\n", "'2: random irregular mask. 3: external irregular mask. [0],[1,2],[1,2,3]'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are save here'", ")", "\n", "parser", ".", "add_argument", "(", "'--which_iter'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which iterations to load'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0, 1, 2 use -1 for CPU'", ")", "\n", "\n", "# data pattern define", "\n", "parser", ".", "add_argument", "(", "'--img_file'", ",", "type", "=", "str", ",", "default", "=", "'/data/dataset/train'", ",", "help", "=", "'training and testing dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_file'", ",", "type", "=", "str", ",", "default", "=", "'none'", ",", "help", "=", "'load test mask'", ")", "\n", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "[", "266", ",", "266", "]", ",", "help", "=", "'scale images to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "[", "256", ",", "256", "]", ",", "help", "=", "'then crop to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'resize_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop|crop|]'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the image for data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_rotation'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not rotation for data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_augment'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not augment the image for data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_shuffle'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images serial'", ")", "\n", "\n", "# display parameter define", "\n", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'display window size'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_id'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'display id of the web'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'visidom port of the web display'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_single_pane_ncols'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'if positive, display all images in a single visidom web panel'", ")", "\n", "\n", "# Additional parameters", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'cifar10'", ",", "'ffhq256'", ",", "'imagenet64'", "]", ",", "required", "=", "True", ")", "\n", "parser", "=", "update_args", "(", "parser", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.options.base_options.BaseOptions.gather_options": [[52, 67], ["base_options.BaseOptions.parse_known_args", "model.get_option_setter", "model.get_option_setter.", "base_options.BaseOptions.parse_args", "base_options.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.__init__.get_option_setter", "home.repos.pwc.inspect_result.plai-group_ipa.options.base_options.BaseOptions.initialize"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add additional model-specific options\"\"\"", "\n", "\n", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "self", ".", "initialize", "(", "self", ".", "parser", ")", "\n", "\n", "# get basic options", "\n", "", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# modify the options for different models", "\n", "model_option_set", "=", "model", ".", "get_option_setter", "(", "opt", ".", "model", ")", "\n", "parser", "=", "model_option_set", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.options.base_options.BaseOptions.parse": [[68, 89], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "len", "int", "torch.cuda.set_device", "base_options.BaseOptions.gpu_ids.append"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.plai-group_ipa.options.base_options.BaseOptions.print_options"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Parse the options\"\"\"", "\n", "\n", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "\n", "\n", "self", ".", "print_options", "(", "opt", ")", "\n", "\n", "# set gpu ids", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "opt", "=", "opt", "\n", "\n", "return", "self", ".", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.options.base_options.BaseOptions.print_options": [[90, 98], ["print", "sorted", "print", "vars().items", "print", "vars", "str", "str"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "print_options", "(", "opt", ")", ":", "\n", "        ", "\"\"\"print and save options\"\"\"", "\n", "\n", "print", "(", "'--------------Options--------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'----------------End----------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.options.base_options.BaseOptions.save_options": [[99, 113], ["os.path.join", "util.util.util.mkdirs", "os.path.join", "os.path.join", "open", "opt_file.write", "sorted", "opt_file.write", "vars().items", "opt_file.write", "vars", "str", "str"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.util.util.mkdirs", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.plai-group_ipa.dnnlib.util.Logger.write"], ["", "@", "staticmethod", "\n", "def", "save_options", "(", "opt", ")", ":", "\n", "# save to the disk", "\n", "        ", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "if", "opt", ".", "isTrain", ":", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'train_opt.txt'", ")", "\n", "", "else", ":", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'test_opt.txt'", ")", "\n", "", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "'--------------Options--------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "                ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'----------------End----------------\\n'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.MNISTResNet.__init__": [[40, 45], ["torchvision.models.resnet.ResNet.__init__", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MNISTResNet", ",", "self", ")", ".", "__init__", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "10", ")", "# Based on ResNet18", "\n", "# super(MNISTResNet, self).__init__(BasicBlock, [3, 4, 6, 3], num_classes=10) # Based on ResNet34", "\n", "# super(MNISTResNet, self).__init__(Bottleneck, [3, 4, 6, 3], num_classes=10) # Based on ResNet50", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.__init__": [[56, 58], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sampler", ")", ":", "\n", "        ", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample": [[59, 61], ["test_scores.Generator.sampler"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "shape", ")", ":", "\n", "        ", "return", "self", ".", "sampler", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.resnet34": [[47, 53], ["torchvision.models.resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet34", "(", "num_classes", ")", ":", "# CelebA classifier", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "block", "=", "BasicBlock", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.get_generator": [[63, 97], ["test_scores.Generator", "torch.no_grad", "torch.ones_like", "img.unsqueeze().to", "mask.unsqueeze().to", "torch.ones_like.unsqueeze().to", "utils.img_mask_to_np_input", "isinstance", "torch.Size.numel", "img.unsqueeze", "mask.unsqueeze", "torch.ones_like.unsqueeze", "torch.Size", "torch.no_grad", "model", "utils.xy_to_img", "torch.clamp", "torch.clamp.view", "img.unsqueeze().to.expand", "mask.unsqueeze().to.expand", "target_mask.unsqueeze().to.expand", "x_target.expand", "img.size", "utils.to_rgb", "utils.to_rgb"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.xy_to_img", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.to_rgb", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.to_rgb"], ["", "", "def", "get_generator", "(", "model", ",", "img", ",", "mask", ")", ":", "\n", "    ", "\"\"\"\n    img (torch.Tensor): with shape CxWxH\n    \n    mask (torch.Tensor): with shape CxWxH\n    \n    Returns\n    -------\n    A Generator object that, when its sample function is called, generates\n    conditional images\n    \"\"\"", "\n", "_", ",", "width", ",", "height", "=", "img", ".", "shape", "\n", "# Create the list of context masks", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "target_mask", "=", "torch", ".", "ones_like", "(", "mask", ")", "# All the pixels", "\n", "# Add a batch dimension to tensors and move to GPU", "\n", "img_batch", "=", "img", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "context_batch", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "target_batch", "=", "target_mask", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "x_target", ",", "_", "=", "utils", ".", "img_mask_to_np_input", "(", "img_batch", ",", "target_batch", ")", "\n", "def", "sampler", "(", "shape", ")", ":", "\n", "            ", "if", "isinstance", "(", "shape", ",", "int", ")", ":", "\n", "                ", "shape", "=", "torch", ".", "Size", "(", "[", "shape", "]", ")", "\n", "", "n", "=", "shape", ".", "numel", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "py", "=", "model", "(", "img_batch", ".", "expand", "(", "n", ",", "*", "img_batch", ".", "shape", "[", "1", ":", "]", ")", ",", "\n", "context_batch", ".", "expand", "(", "n", ",", "*", "context_batch", ".", "shape", "[", "1", ":", "]", ")", ",", "\n", "target_batch", ".", "expand", "(", "n", ",", "*", "target_batch", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "img_rec_flat", "=", "utils", ".", "xy_to_img", "(", "x_target", ".", "expand", "(", "n", ",", "*", "x_target", ".", "shape", "[", "1", ":", "]", ")", ",", "\n", "py", ".", "mean", ",", "img", ".", "size", "(", ")", ")", "\n", "img_rec_flat", "=", "torch", ".", "clamp", "(", "to_rgb", "(", "to_rgb", "(", "img_rec_flat", ")", ")", ",", "0", ",", "1", ")", "\n", "res", "=", "img_rec_flat", ".", "view", "(", "*", "shape", ",", "*", "img_rec_flat", ".", "shape", "[", "1", ":", "]", ")", "\n", "return", "res", "\n", "", "", "", "return", "Generator", "(", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.MyDataset.__init__": [[99, 103], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["", "preprocessed", "=", "preprocess_fn", "(", "x", ")", "[", "0", "]", "\n", "return", "orig_image", ",", "preprocessed", "\n", "\n", "", "def", "loader", "(", "H", ",", "data", ",", "is_train", ",", "epoch", "=", "None", ",", "bs", "=", "None", ")", ":", "\n", "    ", "sampler", "=", "None", "if", "\"NO_MPI\"", "in", "os", ".", "environ", "else", "DistributedSampler", "(", "data", ",", "num_replicas", "=", "H", ".", "mpi_size", ",", "rank", "=", "H", ".", "rank", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.MyDataset.__getitem__": [[104, 106], ["train.MyDataset.transform"], "methods", ["None"], ["num_workers", "=", "H", ".", "n_workers", "if", "\"NO_MPI\"", "in", "os", ".", "environ", "else", "0", "\n", "if", "is_train", "and", "sampler", "is", "not", "None", ":", "\n", "        ", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.MyDataset.__len__": [[107, 109], ["len"], "methods", ["None"], ["", "if", "bs", "is", "None", ":", "\n", "        ", "bs", "=", "H", ".", "n_batch", "*", "H", ".", "grad_accumulations", "if", "is_train", "else", "H", ".", "n_batch", "\n", "", "return", "DataLoader", "(", "data", ",", "batch_size", "=", "bs", ",", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ",", "sampler", "=", "sampler", ",", "num_workers", "=", "num_workers", ",", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.NeuralProcessTrainer.__init__": [[155, 164], ["hasattr"], "methods", ["None"], ["if", "'last_stable_save'", "in", "run", ".", "summary", ":", "\n", "                            ", "last_stable_save", "=", "run", ".", "summary", "[", "'last_stable_save'", "]", "\n", "stable_ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "f'iter-{last_stable_save}'", ")", "\n", "wandb", ".", "log", "(", "{", "'reloading_from'", ":", "last_stable_save", "}", ",", "commit", "=", "False", ")", "\n", "", "else", ":", "\n", "                            ", "return", "'failed'", "\n", "", "", "else", ":", "\n", "                        ", "stable_ckpt_dir", "=", "None", "\n", "", "if", "'NO_MPI'", "not", "in", "os", ".", "environ", ":", "\n", "                        ", "stable_ckpt_dir", "=", "MPI", ".", "COMM_WORLD", ".", "bcast", "(", "stable_ckpt_dir", ",", "root", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.NeuralProcessTrainer.train_step": [[165, 176], ["x_context.to.to.to", "y_context.to.to.to", "x_target.to.to.to", "y_target.to.to.to", "train.NeuralProcessTrainer.model", "train.NeuralProcessTrainer.loss_fn"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to"], ["", "if", "stable_ckpt_dir", "is", "not", "None", ":", "\n", "                        ", "print", "(", "'reloading with stable_ckpt_dir ='", ",", "stable_ckpt_dir", ")", "\n", "reload_ckpt", "(", "H", ",", "stable_ckpt_dir", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "logprint", ")", "\n", "", "", "", "iterate", "+=", "1", "\n", "iters_since_starting", "+=", "1", "\n", "if", "iterate", "%", "H", ".", "iters_per_save", "==", "0", "and", "H", ".", "rank", "==", "0", ":", "\n", "                ", "if", "np", ".", "isfinite", "(", "stats", "[", "-", "1", "]", "[", "'loss'", "]", ")", ":", "\n", "                    ", "logprint", "(", "model", "=", "H", ".", "desc", ",", "type", "=", "'train_loss'", ",", "epoch", "=", "epoch", ",", "step", "=", "iterate", ",", "**", "accumulate_stats", "(", "stats", ",", "H", ".", "iters_per_log", ")", ")", "\n", "fp", "=", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "'latest'", ")", "\n", "logprint", "(", "f'Saving model@ {iterate} to {fp}'", ")", "\n", "save_model", "(", "fp", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "H", ",", "create_dir", "=", "False", ")", "\n", "", "save_model", "(", "os", ".", "path", ".", "join", "(", "H", ".", "save_dir", ",", "f'iter-{iterate}'", ")", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "H", ",", "create_dir", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.NeuralProcessTrainer.train_epoch": [[177, 203], ["enumerate", "tqdm.tqdm.tqdm", "train.NeuralProcessTrainer.optimizer.zero_grad", "train.NeuralProcessTrainer.train_step", "train.NeuralProcessTrainer.backward", "train.NeuralProcessTrainer.optimizer.step", "train.NeuralProcessTrainer.item", "len", "wandb.log", "train.NeuralProcessTrainer.item"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.train.NeuralProcessTrainer.train_step", "home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.DifferentiableClamp.backward"], ["wandb", ".", "log", "(", "dict", "(", "epoch", "=", "epoch", ",", "last_save", "=", "iterate", ")", ",", "commit", "=", "False", ")", "\n", "stable", ",", "_", "=", "is_stable_is_failed", "(", "stats", ",", "H", ".", "iters_per_log", ")", "\n", "print", "(", "'saving'", ",", "iterate", ")", "\n", "if", "stable", ":", "\n", "                    ", "wandb", ".", "log", "(", "dict", "(", "epoch", "=", "epoch", ",", "last_stable_save", "=", "iterate", ")", ",", "commit", "=", "False", ")", "\n", "print", "(", "'and it stable'", ",", ")", "\n", "\n", "", "", "if", "H", ".", "num_iters", "is", "not", "None", "and", "iterate", ">=", "H", ".", "num_iters", ":", "\n", "                ", "assert", "H", ".", "num_epochs", "==", "1", "\n", "break", "\n", "\n", "", "", "if", "epoch", "%", "H", ".", "epochs_per_eval", "==", "0", ":", "\n", "            ", "valid_stats", "=", "evaluate", "(", "H", ",", "ema_vae", ",", "data_valid", ",", "preprocess_fn", ")", "\n", "logprint", "(", "model", "=", "H", ".", "desc", ",", "type", "=", "'eval_loss'", ",", "epoch", "=", "epoch", ",", "step", "=", "iterate", ",", "**", "valid_stats", ")", "\n", "if", "H", ".", "rank", "==", "0", ":", "\n", "                ", "valid_stats", "=", "{", "f'valid-{k}'", ":", "v", "for", "k", ",", "v", "in", "valid_stats", ".", "items", "(", ")", "}", "\n", "wandb", ".", "log", "(", "valid_stats", ",", "commit", "=", "False", ")", "\n", "\n", "", "", "if", "H", ".", "rank", "==", "0", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'iteration'", ":", "iterate", "}", ",", "commit", "=", "True", ")", "\n", "\n", "\n", "", "", "", "def", "evaluate", "(", "H", ",", "ema_vae", ",", "data_valid", ",", "preprocess_fn", ",", "is_train", "=", "False", ")", ":", "\n", "    ", "stats_valid", "=", "[", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "loader", "(", "H", ",", "data_valid", ",", "is_train", "=", "is_train", ")", ")", ":", "\n", "        ", "data_input", ",", "target", "=", "preprocess_fn", "(", "x", ")", "\n", "stats_valid", ".", "append", "(", "eval_step", "(", "H", ",", "data_input", ",", "target", ",", "ema_vae", ",", "i", "=", "i", ")", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask": [[35, 40], ["[].bool", "[].bool.contiguous", "vae_helpers.sample_part_images", "batch.permute"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.sample_part_images"], ["        ", "stats", "=", "vae", ".", "forward", "(", "x", ",", "target", ")", "\n", "if", "differentiate", ":", "\n", "            ", "(", "stats", "[", "'elbo'", "]", "/", "H", ".", "grad_accumulations", ")", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "part_obs", "=", "sample_part_images", "(", "H", ",", "x", ")", "\n", "stats", "=", "vae", ".", "forward", "(", "part_obs", ",", "x", ",", "target", ",", "obj", "=", "H", ".", "kl", ",", "iterate", "=", "iterate", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.log_images": [[42, 61], ["vae_helpers.rng_decorator", "torch.no_grad", "model.eval", "train.sample_mask", "range", "wandb.log", "model.train", "len", "range", "numpy.concatenate", "to_plot.transpose.transpose", "log_dict.update", "utils.to_rgb", "utils.to_rgb", "viz_batch_processed[].unsqueeze().to", "context_mask[].unsqueeze().to", "to_plot.transpose.append", "utils.to_rgb().squeeze().cpu().numpy", "wandb.Image", "context_mask[].unsqueeze", "viz_batch_processed[].unsqueeze", "context_mask[].unsqueeze", "utils.to_rgb().squeeze().cpu", "utils.to_rgb().squeeze", "utils.to_rgb", "model.inpaint_img"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.to_rgb", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.to_rgb", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.to_rgb", "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcessImg.inpaint_img"], ["            ", "(", "stats", "[", "'loss'", "]", "/", "H", ".", "grad_accumulations", ")", ".", "backward", "(", ")", "\n", "", "", "return", "stats", "\n", "\n", "\n", "", "def", "enforce_obs", "(", "H", ",", "samples", ",", "part_obs", ",", "orig", "=", "None", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "part_obs", ")", ":", "\n", "        ", "part_obs", "=", "part_obs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "orig", "is", "None", ":", "\n", "        ", "orig", "=", "part_obs", "[", "...", ",", ":", "-", "1", "]", "\n", "", "mask", "=", "part_obs", "[", "...", ",", "-", "1", ":", "]", "\n", "return", "samples", "*", "(", "1", "-", "mask", ")", "+", "orig", "*", "mask", "\n", "\n", "", "def", "training_step", "(", "H", ",", "x", ",", "target", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "iterate", ")", ":", "\n", "    ", "t0", "=", "time", ".", "time", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "x_chunk", ",", "target_chunk", "in", "zip", "(", "torch", ".", "chunk", "(", "x", ",", "chunks", "=", "H", ".", "grad_accumulations", ",", "dim", "=", "0", ")", ",", "\n", "torch", ".", "chunk", "(", "target", ",", "chunks", "=", "H", ".", "grad_accumulations", ",", "dim", "=", "0", ")", ")", ":", "\n", "        ", "stats", "=", "run_net", "(", "H", ",", "vae", ",", "x_chunk", ",", "target_chunk", ",", "iterate", "=", "iterate", ",", "differentiate", "=", "True", ")", "\n", "", "grad_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "vae", ".", "parameters", "(", ")", ",", "H", ".", "grad_clip", ")", ".", "item", "(", ")", "\n", "if", "H", ".", "kl", "==", "'sym'", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.collate_fn_pathces": [[63, 96], ["list", "torch.stack", "train.sample_mask", "utils.img_mask_to_np_input", "utils.img_mask_to_np_input", "zip", "context_mask.expand.view", "torch.nonzero().view", "torch.zeros_like", "context_mask.expand.scatter_", "max", "torch.nonzero().view", "torch.clone", "torch.ones_like.scatter_", "context_mask.expand.reshape", "torch.ones_like.reshape", "context_mask.expand.expand", "torch.ones_like.expand", "context_mask.expand.expand", "torch.ones_like", "context_mask.expand.numel", "len", "len", "len", "torch.nonzero", "context_mask.expand.sum", "torch.nonzero", "torch.randperm", "torch.randperm", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.train.sample_mask", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone"], ["rate_nans", "=", "0", "\n", "", "else", ":", "\n", "        ", "distortion_nans", "=", "torch", ".", "isnan", "(", "stats", "[", "'distortion'", "]", ")", ".", "sum", "(", ")", "\n", "rate_nans", "=", "torch", ".", "isnan", "(", "stats", "[", "'rate'", "]", ")", ".", "sum", "(", ")", "\n", "", "stats", ".", "update", "(", "\n", "dict", "(", "rate_nans", "=", "0", "if", "rate_nans", "==", "0", "else", "1", ",", "distortion_nans", "=", "0", "if", "distortion_nans", "==", "0", "else", "1", ")", ")", "\n", "stats", "=", "get_cpu_stats_over_ranks", "(", "stats", ")", "\n", "\n", "skipped_updates", "=", "1", "\n", "# only update if no rank has a nan and if the grad norm is below a specific threshold", "\n", "if", "stats", "[", "'distortion_nans'", "]", "==", "0", "and", "stats", "[", "'rate_nans'", "]", "==", "0", "and", "(", "H", ".", "skip_threshold", "==", "-", "1", "or", "grad_norm", "<", "H", ".", "skip_threshold", ")", ":", "\n", "        ", "optimizer", ".", "step", "(", ")", "\n", "skipped_updates", "=", "0", "\n", "if", "not", "H", ".", "no_ema", ":", "\n", "            ", "update_ema", "(", "vae", ",", "ema_vae", ",", "H", ".", "ema_rate", ")", "\n", "\n", "", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "stats", ".", "update", "(", "skipped_updates", "=", "skipped_updates", ",", "iter_time", "=", "t1", "-", "t0", ",", "grad_norm", "=", "grad_norm", ")", "\n", "return", "stats", "\n", "\n", "\n", "", "def", "eval_step", "(", "H", ",", "data_input", ",", "target", ",", "ema_vae", ",", "i", "=", "0", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "stats", "=", "run_net", "(", "H", ",", "ema_vae", ",", "data_input", ",", "target", ",", "iterate", "=", "np", ".", "inf", ",", "differentiate", "=", "False", ")", "\n", "\n", "", "stats", "=", "get_cpu_stats_over_ranks", "(", "stats", ")", "\n", "return", "stats", "\n", "\n", "\n", "", "def", "get_sample_for_visualization", "(", "data", ",", "preprocess_fn", ",", "num", ",", "dataset", ")", ":", "\n", "    ", "for", "x", "in", "DataLoader", "(", "data", ",", "batch_size", "=", "num", ")", ":", "\n", "        ", "break", "\n", "", "if", "dataset", "in", "[", "'ffhq_1024'", ",", "'xray'", ",", "'shoes'", ",", "'bags'", ",", "'shoes64'", ",", "'bags64'", "]", ":", "\n", "        ", "orig_image", "=", "(", "x", "[", "0", "]", "*", "255.0", ")", ".", "to", "(", "torch", ".", "uint8", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.get_dataset": [[111, 122], ["torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "data.cifar10", "train.MyDataset", "T.Compose.append", "data.ffhq256", "ValueError", "torchvision.transforms.Resize"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.cifar10", "home.repos.pwc.inspect_result.plai-group_ipa.None.data.ffhq256"], ["\n", "", "def", "train_loop", "(", "H", ",", "data_train", ",", "data_valid", ",", "preprocess_fn", ",", "vae", ",", "ema_vae", ",", "logprint", ",", "\n", "starting_epoch", ",", "iterate", ")", ":", "\n", "    ", "optimizer", ",", "scheduler", "=", "load_opt", "(", "H", ",", "vae", ",", "logprint", ",", "\n", "init_cond_from_uncond", "=", "H", ".", "load_pretrained", ")", "\n", "\n", "viz_batch_original", ",", "viz_batch_processed", "=", "get_sample_for_visualization", "(", "data_valid", ",", "preprocess_fn", ",", "H", ".", "num_images_visualize", ",", "H", ".", "dataset", ")", "\n", "early_evals", "=", "set", "(", "[", "1", "]", "+", "[", "2", "**", "exp", "for", "exp", "in", "range", "(", "3", ",", "14", ")", "]", ")", "\n", "stats", "=", "[", "]", "\n", "iters_since_starting", "=", "0", "\n", "H", ".", "ema_rate", "=", "torch", ".", "as_tensor", "(", "H", ".", "ema_rate", ")", ".", "cuda", "(", ")", "\n", "for", "epoch", "in", "range", "(", "starting_epoch", ",", "H", ".", "num_epochs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.loss_np": [[124, 131], ["p_y_pred.log_prob().mean().sum", "torch.distributions.kl.kl_divergence().mean().sum", "p_y_pred.log_prob().mean", "torch.distributions.kl.kl_divergence().mean", "p_y_pred.log_prob", "torch.distributions.kl.kl_divergence"], "function", ["None"], ["        ", "for", "epoch_iter", ",", "x", "in", "enumerate", "(", "loader", "(", "H", ",", "data_train", ",", "is_train", "=", "True", ",", "epoch", "=", "epoch", ")", ")", ":", "\n", "            ", "if", "epoch_iter", ">", "0", "and", "H", ".", "rank", "==", "0", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "'iteration'", ":", "iterate", "}", ",", "commit", "=", "True", ")", "\n", "", "data_input", ",", "target", "=", "preprocess_fn", "(", "x", ")", "\n", "training_stats", "=", "training_step", "(", "H", ",", "data_input", ",", "target", ",", "vae", ",", "ema_vae", ",", "optimizer", ",", "iterate", ")", "\n", "stats", ".", "append", "(", "training_stats", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.main": [[205, 268], ["functools.partial", "train.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "neural_process.model_dispatcher_args().to", "print", "wandb.log", "torch.optim.Adam", "train.NeuralProcessTrainer", "checkpoints_dir.mkdir", "float", "train.log_images", "tqdm.tqdm", "next", "model_dispatcher_args().to.parameters", "pathlib.Path", "range", "time.time", "NeuralProcessTrainer.train_epoch", "neural_process.save_model", "wandb.log", "iter", "neural_process.model_dispatcher_args", "model_dispatcher_args().to.num_parameters", "time.time", "shutil.copy2", "model_dispatcher_args().to.eval", "train.log_images", "test.quantitative", "wandb.log", "model_dispatcher_args().to.train", "torch.utils.data.DataLoader", "model_dispatcher_args().to.num_parameters", "args.get_dict", "shutil.copy2"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.train.get_dataset", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.util.util.mkdir", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.log_images", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.NeuralProcessTrainer.train_epoch", "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.save_model", "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.model_dispatcher_args", "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.num_parameters", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.anp.train.log_images", "home.repos.pwc.inspect_result.plai-group_ipa.anp.test.quantitative", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train", "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.num_parameters"], ["", "vals", "=", "[", "a", "[", "'loss'", "]", "for", "a", "in", "stats_valid", "]", "\n", "finites", "=", "np", ".", "array", "(", "vals", ")", "[", "np", ".", "isfinite", "(", "vals", ")", "]", "\n", "stats", "=", "dict", "(", "n_batches", "=", "len", "(", "vals", ")", ",", "filtered_loss", "=", "np", ".", "mean", "(", "finites", ")", ",", "**", "{", "k", ":", "np", ".", "mean", "(", "[", "a", "[", "k", "]", "for", "a", "in", "stats_valid", "]", ")", "for", "k", "in", "stats_valid", "[", "-", "1", "]", "}", ")", "\n", "return", "stats", "\n", "\n", "\n", "", "def", "log_reconstructions", "(", "H", ",", "ema_vae", ",", "first_latents_from", ",", "last_latents_from", ",", "\n", "viz_batch_original", ",", "caption", ",", "part_obs", "=", "None", ",", "\n", "full_activations", "=", "None", ",", "part_activations", "=", "None", ",", "\n", "only_top_level", "=", "False", ",", "n_upper_samples", "=", "1", ",", "\n", "n_lower_samples", "=", "1", ",", "lower_t", "=", "0.1", ")", ":", "\n", "\n", "    ", "zss", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_upper_samples", ")", ":", "\n", "        ", "_", ",", "stats", "=", "ema_vae", ".", "decoder", ".", "run", "(", "sample_from", "=", "first_latents_from", ",", "\n", "full_activations", "=", "full_activations", ",", "\n", "part_activations", "=", "part_activations", ",", "\n", "get_ents", "=", "H", ".", "plot_ent", ",", "get_latents", "=", "True", ")", "\n", "zs", "=", "[", "s", "[", "'z'", "]", ".", "cuda", "(", ")", ".", "clone", "(", ")", "for", "s", "in", "stats", "]", "\n", "zss", ".", "append", "(", "zs", ")", "\n", "", "reconstructions", "=", "[", "viz_batch_original", "[", "...", ",", "-", "H", ".", "image_size", ":", ",", ":", "]", ".", "numpy", "(", ")", "]", "\n", "if", "part_obs", "is", "not", "None", ":", "\n", "        ", "if", "H", ".", "conditioning", "==", "'image'", ":", "\n", "            ", "masked", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "masked", "=", "[", "enforce_obs", "(", "H", ",", "viz_batch_original", ".", "numpy", "(", ")", "*", "0.", ",", "part_obs", ")", "]", "\n", "", "reconstructions", ".", "extend", "(", "masked", ")", "\n", "", "if", "only_top_level", ":", "\n", "        ", "lv_points", "=", "np", ".", "array", "(", "[", "int", "(", "only_top_level", ")", ",", "]", ")", "\n", "", "else", ":", "\n", "        ", "lv_points", "=", "np", ".", "floor", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "H", ".", "num_variables_visualize", "+", "2", ")", "*", "len", "(", "zs", ")", ")", ".", "astype", "(", "int", ")", "[", "1", ":", "-", "1", "]", "\n", "", "lv_points", "=", "np", ".", "tile", "(", "np", ".", "repeat", "(", "lv_points", ",", "n_lower_samples", ")", ",", "n_upper_samples", ")", "\n", "upper_indices", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "n_upper_samples", ")", ",", "(", "1", "if", "only_top_level", "else", "H", ".", "num_variables_visualize", ")", "*", "n_lower_samples", ")", "\n", "\n", "for", "i", ",", "level", "in", "zip", "(", "upper_indices", ",", "lv_points", ")", ":", "\n", "        ", "px_z", ",", "_", "=", "ema_vae", ".", "decoder", ".", "run", "(", "sample_from", "=", "last_latents_from", ",", "\n", "full_activations", "=", "full_activations", ",", "\n", "part_activations", "=", "part_activations", ",", "\n", "manual_latents", "=", "zss", "[", "i", "]", "[", ":", "level", "]", ",", "t", "=", "lower_t", ")", "\n", "reconstructions", ".", "append", "(", "ema_vae", ".", "decoder", ".", "out_net", ".", "sample", "(", "px_z", ")", ")", "\n", "", "reconstructions", "=", "np", ".", "array", "(", "reconstructions", ")", "\n", "for", "col", "in", "range", "(", "min", "(", "H", ".", "num_reconstructions_visualize", ",", "reconstructions", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "recon", "=", "reconstructions", "[", ":", ",", "col", "]", "\n", "combined", "=", "np", ".", "concatenate", "(", "list", "(", "recon", ")", ",", "axis", "=", "1", ")", "\n", "name", "=", "f'{caption} {col}'", "\n", "wandb", ".", "log", "(", "{", "name", ":", "wandb", ".", "Image", "(", "combined", ",", "caption", "=", "name", ")", "}", ",", "commit", "=", "False", ")", "\n", "\n", "", "return", "stats", "\n", "\n", "", "@", "rng_decorator", "(", "0", ")", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "log_images", "(", "H", ",", "ema_vae", ",", "viz_batch_original", ",", "viz_batch_processed", ")", ":", "\n", "    ", "if", "H", ".", "rank", "!=", "0", ":", "\n", "        ", "return", "\n", "\n", "", "full_activations", "=", "ema_vae", ".", "encode_full_image", "(", "viz_batch_processed", ")", "\n", "if", "H", ".", "conditional", ":", "\n", "        ", "with", "RNG", "(", "H", ".", "viz_seed", ")", ":", "\n", "            ", "viz_batch_masked", "=", "sample_part_images", "(", "H", ",", "viz_batch_processed", ")", "\n", "", "with", "RNG", "(", "H", ".", "viz_seed", ")", ":", "\n", "            ", "unnormed_masked", "=", "sample_part_images", "(", "H", ",", "viz_batch_original", ".", "float", "(", ")", ")", "\n", "", "part_activations", "=", "ema_vae", ".", "part_encoder", "(", "viz_batch_masked", ")", "\n", "", "else", ":", "\n", "        ", "part_activations", "=", "None", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.test.quantitative": [[6, 96], ["model.eval", "model.train", "results.update", "torch.no_grad", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std", "numpy.arange", "x_context.to.to", "y_context.to.to", "x_target.to.to", "y_target.to.to", "torch.cat", "nll_list.append", "l2_list.append", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std", "numpy.append", "len", "x_context.to.unsqueeze().repeat().reshape", "y_context.to.unsqueeze().repeat().reshape", "x_target.to.unsqueeze().repeat().reshape", "y_target.to.unsqueeze().repeat().reshape", "model.forward_test", "model.forward_test.log_prob", "p_y_pred.log_prob.view", "log_prob.sum.sum", "log_prob_parts.append", "l2_parts.append", "log_prob.sum.size", "torch.mean().item", "torch.sqrt().mean", "target_mask.sum", "utils.img_mask_to_np_input", "utils.img_mask_to_np_input", "x_context.to.to", "y_context.to.to", "x_target.to.to", "y_target.to.to", "torch.cat", "unobserved_nll_list.append", "unobserved_l2_list.append", "x_context.to.unsqueeze().repeat", "y_context.to.unsqueeze().repeat", "x_target.to.unsqueeze().repeat", "y_target.to.unsqueeze().repeat", "list", "torch.mean", "x_context.to.unsqueeze().repeat().reshape", "y_context.to.unsqueeze().repeat().reshape", "x_target.to.unsqueeze().repeat().reshape", "y_target.to.unsqueeze().repeat().reshape", "model.forward_test", "model.forward_test.log_prob", "p_y_pred.log_prob.view", "log_prob.sum.sum", "log_prob_parts.append", "l2_parts.append", "log_prob.sum.size", "torch.mean().item", "torch.sqrt", "range", "torch.cat", "torch.sqrt().mean", "x_context.to.unsqueeze", "y_context.to.unsqueeze", "x_target.to.unsqueeze", "y_target.to.unsqueeze", "x_context.to.unsqueeze().repeat", "y_context.to.unsqueeze().repeat", "x_target.to.unsqueeze().repeat", "y_target.to.unsqueeze().repeat", "list", "torch.mean", "torch.sqrt", "range", "torch.cat", "log_prob.sum.logsumexp", "numpy.log", "x_context.to.unsqueeze", "y_context.to.unsqueeze", "x_target.to.unsqueeze", "y_target.to.unsqueeze", "log_prob.sum.logsumexp", "numpy.log"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train", "home.repos.pwc.inspect_result.plai-group_ipa.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.forward_test", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.forward_test"], ["import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "\n", "from", "net", ".", "vqvae", "import", "vq_encoder_spec", ",", "vq_decoder_spec", "\n", "from", "net", ".", "structure_generator", "import", "structure_condition_spec", ",", "structure_pixelcnn_spec", "\n", "from", "net", ".", "texture_generator", "import", "texture_generator_spec", ",", "texture_discriminator_spec", "\n", "import", "net", ".", "nn", "as", "nn", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# Data", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'/gdata/vqvae-inpainting'", ",", "\n", "help", "=", "'checkpoints are saved here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'celebahq'", ",", "\n", "help", "=", "'dataset of the experiment.'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_flist'", ",", "type", "=", "str", ",", "default", "=", "'/gdata/test_set/celeba-hq.flist'", ",", "\n", "help", "=", "'file list of images to be completed.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_flist'", ",", "type", "=", "str", ",", "default", "=", "'/gdata/test_set/mask.flist'", ",", "\n", "help", "=", "'file list of masks. 255 indicates missing region.'", ")", "\n", "parser", ".", "add_argument", "(", "'--full_model_dir'", ",", "type", "=", "str", ",", "default", "=", "'model_logs/'", ",", "\n", "help", "=", "'full model is given here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_num'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of images for test.'", ")", "\n", "\n", "# Architecture", "\n", "parser", ".", "add_argument", "(", "'--image_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'provide square images of this size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_channel_vq'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'number of channels in VQVAE.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_res_block_vq'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'number of residual blocks in VQVAE.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_res_channel_vq'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'number of channels in the residual block in VQVAE.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_channel_s'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'number of channels in structure pixelcnn.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_res_channel_s'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'number of channels in the residual block in structure pixelcnn.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_resnet_s'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'number of residual blocks in structure pixelcnn.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_resnet_out_s'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'number of output residual blocks in structure pixelcnn.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_attention_s'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'number of attention blocks in structure pixelcnn.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_head_s'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'number of attention heads in attention blocks.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_channel_cond_s'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'number of channels in structure condition network.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_res_channel_cond_s'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'number of channels in the residual block of structure condition network.'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnet_nonlinearity'", ",", "type", "=", "str", ",", "default", "=", "'concat_elu'", ",", "\n", "help", "=", "'nonlinearity in structure generator. One of \"concat_elu\", \"elu\", \"relu\". '", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_channel_gen_t'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'number of channels in texture generator.'", ")", "\n", "parser", ".", "add_argument", "(", "'--nr_channel_dis_t'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'number of channels in texture discriminator.'", ")", "\n", "\n", "# Vector quantizer", "\n", "parser", ".", "add_argument", "(", "'--embedding_dim'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'number of the dimensions of embeddings in vector quantizer.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_embeddings'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "\n", "help", "=", "'number of embeddings in vector quantizer.'", ")", "\n", "parser", ".", "add_argument", "(", "'--commitment_cost'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "\n", "help", "=", "'weight of commitment loss in vector quantizer.'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "\n", "help", "=", "'decay of EMA updates in vector quantizer.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "    ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# -----------------------------------------------------------------------------", "\n", "# Create save folder", "\n", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "checkpoints_dir", ")", "is", "False", ":", "\n", "    ", "os", ".", "mkdir", "(", "args", ".", "checkpoints_dir", ")", "\n", "\n", "", "args", ".", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoints_dir", ",", "'result'", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "checkpoints_dir", ")", "is", "False", ":", "\n", "    ", "os", ".", "mkdir", "(", "args", ".", "checkpoints_dir", ")", "\n", "\n", "", "folder_name", "=", "time", ".", "strftime", "(", "'%Y%m%d-%H%M%S'", ")", "\n", "folder_name", "+=", "'_'", "+", "args", ".", "dataset", "+", "'_Full'", "\n", "folder_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoints_dir", ",", "folder_name", ")", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "folder_path", ")", "is", "False", ":", "\n", "    ", "os", ".", "mkdir", "(", "folder_path", ")", "\n", "\n", "# Test data list", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.__init__": [[33, 64], ["torch.nn.Module.__init__", "modules.StochasticEncoder", "modules.LatentNormalPosteriorEncoder", "modules.Decoder", "modules.DeterministicEncoder"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "x_dim", ",", "y_dim", ",", "s_dim", ",", "z_dim", ",", "h_dim", ",", "likelihood_std", ",", "pooling", ",", "\n", "self_attentions", ",", "cross_attentions", ",", "deterministic_path", ",", "\n", "posterior_std_bias", "=", "0.1", ",", "likelihood_std_bias", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "x_dim", "=", "x_dim", "\n", "self", ".", "y_dim", "=", "y_dim", "\n", "self", ".", "s_dim", "=", "s_dim", "\n", "self", ".", "r_dim", "=", "s_dim", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "pooling", "=", "pooling", "\n", "\n", "modules", ".", "POSTERIOR_STD_BIAS", "=", "posterior_std_bias", "\n", "modules", ".", "LIKELIHOOD_STD_BIAS", "=", "likelihood_std_bias", "\n", "\n", "# Initialize networks", "\n", "## Encoders", "\n", "self", ".", "stochastic_encoder", "=", "StochasticEncoder", "(", "self", ".", "x_dim", ",", "self", ".", "y_dim", ",", "self", ".", "h_dim", ",", "self", ".", "s_dim", ",", "\n", "self_attentions", "=", "self_attentions", ",", "pooling", "=", "self", ".", "pooling", ")", "\n", "if", "deterministic_path", "==", "True", ":", "\n", "            ", "self", ".", "deterministic_encoder", "=", "DeterministicEncoder", "(", "self", ".", "x_dim", ",", "self", ".", "y_dim", ",", "self", ".", "h_dim", ",", "self", ".", "s_dim", ",", "\n", "self_attentions", "=", "self_attentions", ",", "\n", "cross_attentions", "=", "cross_attentions", ",", "\n", "pooling", "=", "self", ".", "pooling", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "deterministic_encoder", "=", "lambda", "*", "args", ",", "**", "kwargs", ":", "None", "\n", "## Latent-specific networks", "\n", "", "self", ".", "s_to_q", "=", "LatentNormalPosteriorEncoder", "(", "s_dim", ",", "z_dim", ")", "\n", "## Decoder", "\n", "self", ".", "decoder", "=", "Decoder", "(", "self", ".", "x_dim", ",", "self", ".", "z_dim", ",", "self", ".", "r_dim", ",", "self", ".", "h_dim", ",", "self", ".", "y_dim", ",", "\n", "likelihood_std", ",", "deterministic_path", "=", "deterministic_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.latent_posterior": [[65, 73], ["neural_process.NeuralProcess.stochastic_encoder", "neural_process.NeuralProcess.s_to_q"], "methods", ["None"], ["", "def", "latent_posterior", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"Given a set of I/O pairs x, y returns the variational posterior\n        of the latent variable z.\n        q(z|x,y)\n        \"\"\"", "\n", "embedding", "=", "self", ".", "stochastic_encoder", "(", "x", ",", "y", ")", "\n", "q", "=", "self", ".", "s_to_q", "(", "embedding", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.forward": [[74, 107], ["neural_process.NeuralProcess.latent_posterior", "neural_process.NeuralProcess.latent_posterior", "neural_process.NeuralProcess.deterministic_encoder", "neural_process.NeuralProcess.rsample", "neural_process.NeuralProcess.decoder"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.latent_posterior", "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.latent_posterior"], ["", "def", "forward", "(", "self", ",", "x_context", ",", "y_context", ",", "x_target", ",", "y_target", ")", ":", "\n", "        ", "\"\"\"\n        Given context pairs (x_context, y_context) and target points x_target,\n        computes and return the loss for neural processes.\n\n        Parameters\n        ----------\n        x_context : torch.Tensor\n            Shape (batch_size, num_context, x_dim). Note that x_context is a\n            subset of x_target.\n\n        y_context : torch.Tensor\n            Shape (batch_size, num_context, y_dim)\n\n        x_target : torch.Tensor\n            Shape (batch_size, num_target, x_dim)\n\n        y_target : torch.Tensor or None\n            Shape (batch_size, num_target, y_dim).\n        \"\"\"", "\n", "assert", "self", ".", "training", "==", "True", "\n", "# Encode target and context (context needs to be encoded to", "\n", "# calculate kl term)", "\n", "# Latent path", "\n", "q_target", "=", "self", ".", "latent_posterior", "(", "x_target", ",", "y_target", ")", "\n", "q_context", "=", "self", ".", "latent_posterior", "(", "x_context", ",", "y_context", ")", "\n", "# Deterministic path", "\n", "r", "=", "self", ".", "deterministic_encoder", "(", "x_context", ",", "y_context", ",", "x_target", ")", "\n", "# Sample from encoded distribution using reparameterization trick", "\n", "z_sample", "=", "q_target", ".", "rsample", "(", ")", "\n", "# Get parameters of output distribution", "\n", "p_y_pred", "=", "self", ".", "decoder", "(", "x_target", ",", "z_sample", ",", "r", ")", "\n", "return", "q_context", ",", "q_target", ",", "p_y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.forward_test": [[108, 135], ["neural_process.NeuralProcess.latent_posterior", "neural_process.NeuralProcess.rsample", "neural_process.NeuralProcess.deterministic_encoder", "neural_process.NeuralProcess.decoder"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.latent_posterior"], ["", "def", "forward_test", "(", "self", ",", "x_context", ",", "y_context", ",", "x_target", ")", ":", "\n", "        ", "\"\"\"\n        Given context pairs (x_context, y_context) and target points x_target,\n        returns a distribution over target points y_target.\n\n        Parameters\n        ----------\n        x_context : torch.Tensor\n            Shape (batch_size, num_context, x_dim). Note that x_context is a\n            subset of x_target.\n\n        y_context : torch.Tensor\n            Shape (batch_size, num_context, y_dim)\n\n        x_target : torch.Tensor\n            Shape (batch_size, num_target, x_dim)\n        \"\"\"", "\n", "assert", "self", ".", "training", "==", "False", "\n", "# Infer the variational posterior distribution", "\n", "q_context", "=", "self", ".", "latent_posterior", "(", "x_context", ",", "y_context", ")", "\n", "# Sample from distribution based on context", "\n", "z_sample", "=", "q_context", ".", "rsample", "(", ")", "\n", "# Deterministc path", "\n", "r", "=", "self", ".", "deterministic_encoder", "(", "x_context", ",", "y_context", ",", "x_target", ")", "\n", "# Predict target points based on context and the latent variable", "\n", "p_y_pred", "=", "self", ".", "decoder", "(", "x_target", ",", "z_sample", ",", "r", ")", "\n", "return", "p_y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.num_parameters": [[136, 138], ["sum", "p.numel", "neural_process.NeuralProcess.parameters"], "methods", ["None"], ["", "def", "num_parameters", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcessImg.__init__": [[158, 171], ["neural_process.NeuralProcess.__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "args", ".", "img_size", "\n", "self", ".", "num_channels", ",", "self", ".", "height", ",", "self", ".", "width", "=", "self", ".", "img_size", "\n", "super", "(", ")", ".", "__init__", "(", "x_dim", "=", "2", ",", "y_dim", "=", "self", ".", "num_channels", ",", "\n", "s_dim", "=", "args", ".", "s_dim", ",", "z_dim", "=", "args", ".", "z_dim", ",", "\n", "h_dim", "=", "args", ".", "h_dim", ",", "\n", "likelihood_std", "=", "args", ".", "likelihood_std", ",", "\n", "pooling", "=", "args", ".", "pooling", ",", "\n", "self_attentions", "=", "args", ".", "self_attentions", ",", "\n", "cross_attentions", "=", "args", ".", "cross_attentions", ",", "\n", "deterministic_path", "=", "args", ".", "deterministic_path", ",", "\n", "posterior_std_bias", "=", "args", ".", "posterior_std_bias", ",", "\n", "likelihood_std_bias", "=", "args", ".", "likelihood_std_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcessImg.inpaint_img": [[172, 203], ["torch.no_grad", "neural_process.NeuralProcessImg.eval", "mask_batch.bool", "utils.img_mask_to_np_input", "utils.img_mask_to_np_input", "neural_process.NeuralProcessImg.forward_test", "utils.xy_to_img", "torch.clamp", "torch.ones_like", "neural_process.NeuralProcessImg.loc.detach", "mask_batch.bool.unsqueeze().expand", "neural_process.NeuralProcessImg.train", "mask_batch.bool.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input", "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.forward_test", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.xy_to_img", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.train"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "inpaint_img", "(", "self", ",", "img_batch", ",", "mask_batch", ",", "enforce_obs", "=", "False", ")", ":", "\n", "## For inpainting, use Neural Process in prediction mode", "\n", "        ", "was_training", "=", "self", ".", "training", "\n", "self", ".", "eval", "(", ")", "\n", "## Prepare the context mask", "\n", "context_batch", "=", "mask_batch", ".", "bool", "(", ")", "# Convert the mask type to boolean", "\n", "## Prepare the target mask", "\n", "if", "enforce_obs", ":", "\n", "            ", "target_batch", "=", "~", "context_batch", "# All pixels which are not in context", "\n", "target_batch", "[", ":", ",", "0", ",", "0", "]", "=", "1", "# Makes sure that the target mask is not all zeros, to avoid errors", "\n", "", "else", ":", "\n", "            ", "target_batch", "=", "torch", ".", "ones_like", "(", "context_batch", ")", "\n", "## Forward-pass", "\n", "", "x_context", ",", "y_context", "=", "img_mask_to_np_input", "(", "img_batch", ",", "context_batch", ")", "\n", "x_target", ",", "y_target", "=", "img_mask_to_np_input", "(", "img_batch", ",", "target_batch", ")", "\n", "p_y_pred", "=", "self", ".", "forward_test", "(", "x_context", ",", "y_context", ",", "x_target", ")", "\n", "## Use the mean (i.e. loc) parameter of normal distribution as predictions", "\n", "## for y_target", "\n", "img_rec", "=", "xy_to_img", "(", "x_target", ",", "p_y_pred", ".", "loc", ".", "detach", "(", ")", ",", "img_batch", ".", "shape", "[", "1", ":", "]", ")", "\n", "## Add context points back to image", "\n", "if", "enforce_obs", ":", "\n", "            ", "context_batch_expanded", "=", "context_batch", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "img_rec", ".", "shape", ")", "\n", "inpainted", "=", "img_rec", "+", "context_batch_expanded", "*", "img_batch", "\n", "", "else", ":", "\n", "            ", "inpainted", "=", "img_rec", "\n", "", "inpainted", "=", "torch", ".", "clamp", "(", "inpainted", ",", "0", ",", "1", ")", "\n", "## Reset model to mode it was in before inpainting", "\n", "if", "was_training", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "", "return", "inpainted", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcessImg.encode_img": [[204, 212], ["torch.no_grad", "mask_batch.bool", "utils.img_mask_to_np_input", "neural_process.NeuralProcessImg.stochastic_encoder"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "encode_img", "(", "self", ",", "img_batch", ",", "mask_batch", ")", ":", "\n", "        ", "assert", "self", ".", "neural_process", ".", "decode", ".", "deterministic_path", "==", "False", "\n", "## Prepare the context mask", "\n", "context_batch", "=", "mask_batch", ".", "bool", "(", ")", "# Convert the mask type to boolean", "\n", "x_context", ",", "y_context", "=", "img_mask_to_np_input", "(", "img_batch", ",", "context_batch", ")", "\n", "s_context", "=", "self", ".", "stochastic_encoder", "(", "x", ",", "y", ")", "\n", "return", "s_context", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcessImg.posterior_img": [[213, 221], ["torch.no_grad", "mask_batch.bool", "utils.img_mask_to_np_input", "neural_process.NeuralProcessImg.latent_posterior"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input", "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcess.latent_posterior"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "posterior_img", "(", "self", ",", "img_batch", ",", "mask_batch", ")", ":", "\n", "        ", "assert", "self", ".", "decoder", ".", "deterministic_path", "==", "False", "\n", "## Prepare the context mask", "\n", "context_batch", "=", "mask_batch", ".", "bool", "(", ")", "# Convert the mask type to boolean", "\n", "x_context", ",", "y_context", "=", "img_mask_to_np_input", "(", "img_batch", ",", "context_batch", ")", "\n", "q_context", "=", "self", ".", "latent_posterior", "(", "x_context", ",", "y_context", ")", "\n", "return", "q_context", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.NeuralProcessImg.decode_img": [[222, 232], ["torch.no_grad", "mask_batch.bool", "neural_process.NeuralProcessImg.decoder", "utils.img_mask_to_np_input", "neural_process.NeuralProcessImg.loc.detach().cpu", "utils.xy_to_img", "z_batch.new_zeros", "x_target.cpu", "torch.Size", "len", "neural_process.NeuralProcessImg.loc.detach"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.xy_to_img"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "decode_img", "(", "self", ",", "z_batch", ",", "mask_batch", ")", ":", "\n", "        ", "assert", "self", ".", "neural_process", ".", "decode", ".", "deterministic_path", "==", "False", "\n", "## Prepare the target mask", "\n", "target_batch", "=", "mask_batch", ".", "bool", "(", ")", "# Convert the mask type to boolean", "\n", "p_y_pred", "=", "self", ".", "decoder", "(", "target_batch", ",", "z_batch", ",", "None", ")", "\n", "x_target", ",", "_", "=", "img_mask_to_np_input", "(", "z_batch", ".", "new_zeros", "(", "len", "(", "mask_batch", ")", ",", "*", "self", ".", "img_size", ")", ",", "target_batch", ")", "\n", "pred", "=", "p_y_pred", ".", "loc", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "img_rec", "=", "xy_to_img", "(", "x_target", ".", "cpu", "(", ")", ",", "pred", ",", "torch", ".", "Size", "(", "self", ".", "img_size", ")", ")", "\n", "return", "img_rec", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.model_dispatcher_args": [[234, 248], ["args.dataset.startswith", "neural_process.NeuralProcess", "neural_process.NeuralProcessImg"], "function", ["None"], ["", "", "def", "model_dispatcher_args", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset", ".", "startswith", "(", "\"gp-\"", ")", ":", "\n", "        ", "return", "NeuralProcess", "(", "x_dim", "=", "1", ",", "y_dim", "=", "1", ",", "\n", "s_dim", "=", "args", ".", "s_dim", ",", "z_dim", "=", "args", ".", "z_dim", ",", "\n", "h_dim", "=", "args", ".", "h_dim", ",", "\n", "likelihood_std", "=", "args", ".", "likelihood_std", ",", "\n", "pooling", "=", "args", ".", "pooling", ",", "\n", "self_attentions", "=", "args", ".", "self_attentions", ",", "\n", "cross_attentions", "=", "args", ".", "cross_attentions", ",", "\n", "deterministic_path", "=", "args", ".", "deterministic_path", ",", "\n", "posterior_std_bias", "=", "args", ".", "posterior_std_bias", ",", "\n", "likelihood_std_bias", "=", "args", ".", "likelihood_std_bias", ")", "\n", "", "else", ":", "\n", "        ", "return", "NeuralProcessImg", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.model_dispatcher": [[250, 262], ["torch.load", "neural_process.model_dispatcher_args", "model_dispatcher_args.load_state_dict", "argparse.Namespace"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.model_dispatcher_args"], ["", "", "def", "model_dispatcher", "(", "path", ")", ":", "\n", "    ", "\"\"\"Given path to a saved model, will instantiate a model and\n    load its weights from the file.\n    Args:\n        path (str): Path to the saved model\n    \"\"\"", "\n", "data", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "config", "=", "data", "[", "\"config\"", "]", "\n", "state_dict", "=", "data", "[", "\"state_dict\"", "]", "\n", "model", "=", "model_dispatcher_args", "(", "Namespace", "(", "**", "config", ")", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.neural_process.save_model": [[264, 269], ["torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.util.html.HTML.save"], ["", "def", "save_model", "(", "model", ",", "path", ",", "config", ",", "epoch", ")", ":", "\n", "    ", "torch", ".", "save", "(", "{", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"config\"", ":", "config", ",", "\n", "\"epoch\"", ":", "epoch", "}", ",", "\n", "path", ")", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.context_target_split": [[9, 39], ["numpy.random.choice"], "function", ["None"], ["import", "subprocess", "\n", "import", "torch", ".", "distributed", "as", "dist", "\n", "\n", "\n", "def", "allreduce", "(", "x", ",", "average", ")", ":", "\n", "    ", "if", "mpi_size", "(", ")", ">", "1", ":", "\n", "        ", "dist", ".", "all_reduce", "(", "x", ",", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "", "return", "x", "/", "mpi_size", "(", ")", "if", "average", "else", "x", "\n", "\n", "\n", "", "def", "get_cpu_stats_over_ranks", "(", "stat_dict", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "\n", "allreduced", "=", "allreduce", "(", "torch", ".", "stack", "(", "[", "torch", ".", "as_tensor", "(", "stat_dict", "[", "k", "]", ")", ".", "detach", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "for", "k", "in", "keys", "]", ")", ",", "average", "=", "True", ")", ".", "cpu", "(", ")", "\n", "return", "{", "k", ":", "allreduced", "[", "i", "]", ".", "item", "(", ")", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "keys", ")", "}", "\n", "\n", "\n", "", "class", "Hyperparams", "(", "dict", ")", ":", "\n", "    ", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "attr", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "None", "\n", "\n", "", "", "def", "__setattr__", "(", "self", ",", "attr", ",", "value", ")", ":", "\n", "        ", "self", "[", "attr", "]", "=", "value", "\n", "\n", "\n", "", "", "def", "logger", "(", "log_prefix", ")", ":", "\n", "    ", "'Prints the arguments out to stdout, .txt, and .jsonl files'", "\n", "\n", "def", "log", "(", "*", "args", ",", "pprint", "=", "False", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input": [[41, 92], ["mask.sum", "torch.all", "img.size", "mask.unsqueeze().expand", "torch.nonzero().size", "torch.nonzero", "nonzero_idx[].view().float", "img[].view", "y.permute.permute", "list", "mask.unsqueeze", "torch.nonzero", "nonzero_idx[].view", "range", "float", "float"], "function", ["None"], ["            ", "return", "\n", "", "t", "=", "time", ".", "ctime", "(", ")", "\n", "argdict", "=", "{", "'time'", ":", "t", "}", "\n", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "            ", "argdict", "[", "'message'", "]", "=", "' '", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "args", "]", ")", "\n", "", "argdict", ".", "update", "(", "kwargs", ")", "\n", "\n", "txt_str", "=", "[", "]", "\n", "args_iter", "=", "sorted", "(", "argdict", ")", "if", "pprint", "else", "argdict", "\n", "for", "k", "in", "args_iter", ":", "\n", "            ", "val", "=", "argdict", "[", "k", "]", "\n", "if", "isinstance", "(", "val", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "val", "=", "val", ".", "tolist", "(", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "np", ".", "integer", ")", ":", "\n", "                ", "val", "=", "int", "(", "val", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "np", ".", "floating", ")", ":", "\n", "                ", "val", "=", "float", "(", "val", ")", "\n", "", "argdict", "[", "k", "]", "=", "val", "\n", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "val", "=", "f'{val:.5f}'", "\n", "", "txt_str", ".", "append", "(", "f'{k}: {val}'", ")", "\n", "", "txt_str", "=", "', '", ".", "join", "(", "txt_str", ")", "\n", "\n", "if", "pprint", ":", "\n", "            ", "json_str", "=", "json", ".", "dumps", "(", "argdict", ",", "sort_keys", "=", "True", ")", "\n", "txt_str", "=", "json", ".", "dumps", "(", "argdict", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "", "else", ":", "\n", "            ", "json_str", "=", "json", ".", "dumps", "(", "argdict", ")", "\n", "\n", "", "print", "(", "txt_str", ",", "flush", "=", "True", ")", "\n", "\n", "", "return", "log", "\n", "\n", "\n", "", "def", "maybe_download", "(", "path", ",", "filename", "=", "None", ")", ":", "\n", "    ", "'''If a path is a gsutil path, download it and return the local link,\n    otherwise return link'''", "\n", "if", "not", "path", ".", "startswith", "(", "'gs://'", ")", ":", "\n", "        ", "return", "path", "\n", "", "if", "filename", ":", "\n", "        ", "local_dest", "=", "f'/tmp/'", "\n", "out_path", "=", "f'/tmp/{filename}'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "out_path", ")", ":", "\n", "            ", "return", "out_path", "\n", "", "subprocess", ".", "check_output", "(", "[", "'gsutil'", ",", "'-m'", ",", "'cp'", ",", "'-R'", ",", "path", ",", "out_path", "]", ")", "\n", "return", "out_path", "\n", "", "else", ":", "\n", "        ", "local_dest", "=", "tempfile", ".", "mkstemp", "(", ")", "[", "1", "]", "\n", "subprocess", ".", "check_output", "(", "[", "'gsutil'", ",", "'-m'", ",", "'cp'", ",", "path", ",", "local_dest", "]", ")", "\n", "", "return", "local_dest", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.random_context_target_mask": [[94, 131], ["rng.choice", "torch.tensor", "torch.zeros().bool", "torch.zeros().bool", "context_mask.reshape.scatter_", "target_mask.reshape.scatter_", "context_mask.reshape.reshape", "target_mask.reshape.reshape", "range", "torch.zeros", "torch.zeros"], "function", ["None"], ["    ", "if", "is_async", ":", "\n", "        ", "cmd", "=", "f'bash -exec -c \"gsutil -m rsync -r {from_path} {to_path}\"&'", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ",", "stderr", "=", "subprocess", ".", "DEVNULL", ")", "\n", "", "else", ":", "\n", "        ", "subprocess", ".", "check_output", "(", "[", "'gsutil'", ",", "'-m'", ",", "'rsync'", ",", "from_path", ",", "to_path", "]", ")", "\n", "\n", "\n", "", "", "def", "backup_files", "(", "save_dir", ",", "save_dir_gcp", ",", "path", "=", "None", ")", ":", "\n", "    ", "if", "mpi_rank", "(", ")", "==", "0", ":", "\n", "        ", "if", "not", "path", ":", "\n", "            ", "print", "(", "f'Backing up {save_dir} to {save_dir_gcp}'", ",", "\n", "'Will execute silently in another thread'", ")", "\n", "upload_to_gcp", "(", "save_dir", ",", "save_dir_gcp", ",", "is_async", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "upload_to_gcp", "(", "path", ",", "save_dir_gcp", ",", "is_async", "=", "True", ")", "\n", "\n", "\n", "", "", "", "def", "tile_images", "(", "images", ",", "d1", "=", "4", ",", "d2", "=", "4", ",", "border", "=", "1", ")", ":", "\n", "    ", "id1", ",", "id2", ",", "c", "=", "images", "[", "0", "]", ".", "shape", "\n", "out", "=", "np", ".", "ones", "(", "[", "d1", "*", "id1", "+", "border", "*", "(", "d1", "+", "1", ")", ",", "\n", "d2", "*", "id2", "+", "border", "*", "(", "d2", "+", "1", ")", ",", "\n", "c", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "out", "*=", "255", "\n", "if", "len", "(", "images", ")", "!=", "d1", "*", "d2", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong num of images'", ")", "\n", "", "for", "imgnum", ",", "im", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "num_d1", "=", "imgnum", "//", "d2", "\n", "num_d2", "=", "imgnum", "%", "d2", "\n", "start_d1", "=", "num_d1", "*", "id1", "+", "border", "*", "(", "num_d1", "+", "1", ")", "\n", "start_d2", "=", "num_d2", "*", "id2", "+", "border", "*", "(", "num_d2", "+", "1", ")", "\n", "out", "[", "start_d1", ":", "start_d1", "+", "id1", ",", "start_d2", ":", "start_d2", "+", "id2", ",", ":", "]", "=", "im", "\n", "", "return", "out", "\n", "\n", "\n", "", "def", "mpi_size", "(", ")", ":", "\n", "    ", "if", "'NO_MPI'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "return", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.batch_context_target_mask": [[133, 172], ["utils.random_context_target_mask", "context_mask.repeat", "target_mask.repeat", "context_mask.reshape", "target_mask.reshape", "torch.zeros().bool", "torch.zeros().bool", "range", "utils.random_context_target_mask", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.random_context_target_mask", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.random_context_target_mask"], ["\n", "", "", "def", "mpi_rank", "(", ")", ":", "\n", "    ", "if", "'NO_MPI'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "return", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n", "", "", "def", "num_nodes", "(", ")", ":", "\n", "    ", "nn", "=", "mpi_size", "(", ")", "\n", "if", "nn", "%", "8", "==", "0", ":", "\n", "        ", "return", "nn", "//", "8", "\n", "", "return", "nn", "//", "8", "+", "1", "\n", "\n", "\n", "", "def", "gpus_per_node", "(", ")", ":", "\n", "    ", "size", "=", "mpi_size", "(", ")", "\n", "if", "size", ">", "1", ":", "\n", "        ", "return", "max", "(", "size", "//", "num_nodes", "(", ")", ",", "1", ")", "\n", "", "return", "1", "\n", "\n", "\n", "", "def", "local_mpi_rank", "(", ")", ":", "\n", "    ", "return", "mpi_rank", "(", ")", "%", "gpus_per_node", "(", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.xy_to_img": [[174, 206], ["x.long.size", "x.long.long", "y.permute.permute", "y.permute.new_zeros", "meas.unsqueeze().repeat.unsqueeze().repeat", "img.reshape.scatter_", "img.reshape.reshape", "float", "float", "meas.unsqueeze().repeat.unsqueeze"], "function", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.inpaint": [[208, 248], ["torch.ones_like", "img.unsqueeze().to", "context_mask.unsqueeze().to", "torch.ones_like.unsqueeze().to", "model", "utils.img_mask_to_np_input", "utils.xy_to_img", "context_mask.unsqueeze().repeat", "x_target.cpu", "model.loc.detach().cpu", "img.size", "xy_to_img.size", "img.unsqueeze", "context_mask.unsqueeze", "torch.ones_like.unsqueeze", "context_mask.unsqueeze", "model.loc.detach"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.to", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.xy_to_img"], []], "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.to_rgb": [[250, 265], ["list", "img.expand", "img.size", "img.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.create_masked_img": [[270, 294], ["numpy.transpose", "img.size", "torch.Size", "img.new_zeros", "torch.ones_like", "utils.to_rgb", "img.expand"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.to_rgb"], []], "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.tensor2img": [[295, 297], ["to_rgb().permute().cpu().numpy", "to_rgb().permute().cpu", "to_rgb().permute", "utils.to_rgb"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.to_rgb"], []], "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.spiral": [[299, 321], ["range", "numpy.array", "l.append", "range", "l.append", "range", "l.append", "list", "l.append", "list", "l.append", "reversed", "reversed", "range", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.list2mask": [[323, 329], ["img.new_zeros().bool", "img.new_zeros", "list", "zip"], "function", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GP.__init__": [[33, 58], ["gpytorch.likelihoods.GaussianLikelihood", "super().__init__", "gpytorch.means.ConstantMean", "torch.nn.Parameter", "gp.GP.initialize_kernel", "gpytorch.kernels.ScaleKernel", "gp.GP.eval", "gp.GP.requires_grad_", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GP.initialize_kernel", "home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval"], ["    ", "def", "__init__", "(", "self", ",", "kernel_args", ",", "noise", "=", "0.001", ",", "mean", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        noise: \\sigma^2 parameter\n        y(x) = f(x) + \\epsilon  where  \\epsilon ~ N(0, \\sigma^2)\n        K(x_1, x_2) = lengthscale \\exp{-1/(2*lengthscale^2) (x_1-x_2)^2}\n        \"\"\"", "\n", "self", ".", "_noise", "=", "noise", "\n", "self", ".", "_kernel_args", "=", "kernel_args", "\n", "self", ".", "_mean", "=", "mean", "\n", "# Likelihood", "\n", "likelihood", "=", "gpytorch", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "likelihood", ".", "noise", "=", "self", ".", "_noise", "\n", "super", "(", ")", ".", "__init__", "(", "train_inputs", "=", "None", ",", "\n", "train_targets", "=", "None", ",", "\n", "likelihood", "=", "likelihood", ")", "\n", "# Mean", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ConstantMean", "(", ")", "\n", "self", ".", "mean_module", ".", "constant", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "mean", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "# Kernel", "\n", "base_kernel", "=", "self", ".", "initialize_kernel", "(", "kernel_args", ")", "\n", "self", ".", "kernel_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "base_kernel", ")", "\n", "self", ".", "kernel_module", ".", "outputscale", "=", "kernel_args", ".", "outputscale", "\n", "# Put the model in eval mode and fix the parameters", "\n", "self", ".", "eval", "(", ")", "\n", "self", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GP.initialize_kernel": [[59, 84], ["gpytorch.kernels.RBFKernel", "gpytorch.kernels.CosineKernel", "gpytorch.kernels.MaternKernel", "gpytorch.kernels.LinearKernel", "gpytorch.kernels.PolynomialKernel"], "methods", ["None"], ["", "def", "initialize_kernel", "(", "self", ",", "kernel_args", ")", ":", "\n", "        ", "if", "kernel_args", ".", "type", "==", "\"rbf\"", ":", "\n", "            ", "kernel", "=", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", ")", "\n", "kernel", ".", "lengthscale", "=", "kernel_args", ".", "lengthscale", "\n", "# Higher lengthscale: Smoother functions", "\n", "", "elif", "kernel_args", ".", "type", "==", "\"cosine\"", ":", "\n", "            ", "kernel", "=", "gpytorch", ".", "kernels", ".", "CosineKernel", "(", ")", "\n", "kernel", ".", "period_length", "=", "kernel_args", ".", "period_length", "\n", "", "elif", "kernel_args", ".", "type", "==", "\"matern\"", ":", "\n", "            ", "assert", "kernel_args", ".", "nu", "in", "[", "0.5", ",", "1.5", ",", "2.5", "]", ",", "\"MaternKernel's nu is expecte to be in [0.5, 1.5, 2.5]\"", "\n", "kernel", "=", "gpytorch", ".", "kernels", ".", "MaternKernel", "(", "nu", "=", "kernel_args", ".", "nu", ")", "\n", "kernel", ".", "lengthscale", "=", "kernel_args", ".", "lengthscale", "\n", "# Higher lengthscale: Smoother functions", "\n", "# Higher nu: Smoother functions", "\n", "", "elif", "kernel_args", ".", "type", "==", "\"linear\"", ":", "\n", "            ", "kernel", "=", "gpytorch", ".", "kernels", ".", "LinearKernel", "(", ")", "\n", "kernel", ".", "variance", "=", "kernel_args", ".", "variance", "\n", "# Variance: controls variance of slope of functions", "\n", "", "elif", "kernel_args", ".", "type", "==", "\"poly\"", ":", "\n", "            ", "kernel", "=", "gpytorch", ".", "kernels", ".", "PolynomialKernel", "(", "power", "=", "kernel_args", ".", "power", ")", "\n", "kernel", ".", "offset", "=", "kernel_args", ".", "offset", "\n", "# Lower offset -> Smoother functions", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GP.forward": [[85, 89], ["gp.GP.mean_module", "gp.GP.kernel_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "kernel_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GP.prior_manual": [[90, 96], ["torch.no_grad", "gp.GP.kernel_module().add_jitter", "cov.evaluate.evaluate.evaluate", "gpytorch.distributions.MultivariateNormal", "gp.GP.kernel_module", "torch.ones", "len"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.None.train.evaluate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "prior_manual", "(", "self", ",", "x", ")", ":", "\n", "        ", "cov", "=", "self", ".", "kernel_module", "(", "x", ")", ".", "add_jitter", "(", "self", ".", "likelihood", ".", "noise", ")", "\n", "cov", "=", "cov", ".", "evaluate", "(", ")", "\n", "prior", "=", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "torch", ".", "ones", "(", "len", "(", "x", ")", ")", "*", "self", ".", "mean_module", ".", "constant", ",", "cov", ")", "\n", "return", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GP.prior": [[97, 102], ["torch.no_grad", "gpytorch.settings.prior_mode", "gp.GP.likelihood", "gp.GP."], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "prior", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "gpytorch", ".", "settings", ".", "prior_mode", "(", "state", "=", "True", ")", ":", "\n", "            ", "prior", "=", "self", ".", "likelihood", "(", "self", "(", "x", ")", ")", "\n", "", "return", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GP.posterior": [[103, 108], ["torch.no_grad", "gp.GP.set_train_data", "gp.GP.likelihood", "gp.GP."], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "posterior", "(", "self", ",", "x_target", ",", "x_context", ",", "y_context", ")", ":", "\n", "        ", "self", ".", "set_train_data", "(", "x_context", ",", "y_context", ",", "strict", "=", "False", ")", "\n", "posterior", "=", "self", ".", "likelihood", "(", "self", "(", "x_target", ")", ")", "\n", "return", "posterior", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GPDataloader.__init__": [[111, 119], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "batch_size", ",", "num_context_range", ",", "num_extra_target_range", ",", "xrange", "=", "[", "-", "1", ",", "1", "]", ",", "dataset_size", "=", "1024", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "#kernel_args, noise=0.001, mean=0", "\n", "self", ".", "dataset_size", "=", "dataset_size", "\n", "self", ".", "xrange", "=", "xrange", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_context_range", "=", "num_context_range", "\n", "self", ".", "num_extra_target_range", "=", "num_extra_target_range", "\n", "self", ".", "_cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GPDataloader.__iter__": [[120, 123], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_cnt", "=", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GPDataloader.__next__": [[124, 130], ["gp.GPDataloader.get_batch"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GPDataloader.get_batch"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_cnt", "+", "self", ".", "batch_size", "<=", "self", ".", "dataset_size", ":", "\n", "            ", "self", ".", "_cnt", "+=", "self", ".", "batch_size", "\n", "return", "self", ".", "get_batch", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GPDataloader.get_batch": [[131, 145], ["numpy.random.randint", "numpy.random.randint", "gp.GPDataloader.sample_x", "torch.stack", "x_batch.unsqueeze.unsqueeze.unsqueeze", "y_batch.unsqueeze.unsqueeze.unsqueeze", "x_batch[].clone", "y_batch[].clone", "gp.GPDataloader.model.prior().sample", "gp.GPDataloader.model.prior"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GPDataloader.sample_x", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.tflib.network.Network.clone", "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample", "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GP.prior"], ["", "", "def", "get_batch", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "batch_size", "\n", "num_context", "=", "np", ".", "random", ".", "randint", "(", "*", "self", ".", "num_context_range", ")", "\n", "num_extra_target", "=", "np", ".", "random", ".", "randint", "(", "*", "self", ".", "num_extra_target_range", ")", "\n", "x_batch", "=", "self", ".", "sample_x", "(", "batch_size", "=", "batch_size", ",", "n", "=", "num_context", "+", "num_extra_target", ")", "\n", "# TODO: batched sampling", "\n", "y_batch", "=", "torch", ".", "stack", "(", "[", "self", ".", "model", ".", "prior", "(", "x", ")", ".", "sample", "(", ")", "for", "x", "in", "x_batch", "]", ",", "dim", "=", "0", ")", "\n", "x_batch", "=", "x_batch", ".", "unsqueeze", "(", "-", "1", ")", "\n", "y_batch", "=", "y_batch", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x_context", "=", "x_batch", "[", ":", ",", ":", "num_context", "]", ".", "clone", "(", ")", "\n", "y_context", "=", "y_batch", "[", ":", ",", ":", "num_context", "]", ".", "clone", "(", ")", "\n", "x_target", "=", "x_batch", "\n", "y_target", "=", "y_batch", "\n", "return", "(", "x_context", ",", "y_context", ",", "x_target", ",", "y_target", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GPDataloader.sample_x": [[146, 148], ["torch.rand"], "methods", ["None"], ["", "def", "sample_x", "(", "self", ",", "n", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "return", "torch", ".", "rand", "(", "batch_size", ",", "n", ")", "*", "(", "self", ".", "xrange", "[", "1", "]", "-", "self", ".", "xrange", "[", "0", "]", ")", "+", "self", ".", "xrange", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.GPDataloader.__len__": [[149, 151], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset_size", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.set_random_seed": [[9, 14], ["random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed"], "function", ["None"], ["def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", "+", "1", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", "+", "2", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "+", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.get_random_state": [[16, 22], ["random.getstate", "torch.get_rng_state", "torch.cuda.get_rng_state_all", "numpy.random.get_state"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.RNG.get_state"], ["", "def", "get_random_state", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"python\"", ":", "random", ".", "getstate", "(", ")", ",", "\n", "\"torch\"", ":", "torch", ".", "get_rng_state", "(", ")", ",", "\n", "\"cuda\"", ":", "torch", ".", "cuda", ".", "get_rng_state_all", "(", ")", ",", "\n", "\"numpy\"", ":", "np", ".", "random", ".", "get_state", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.set_random_state": [[24, 29], ["random.setstate", "torch.set_rng_state", "torch.cuda.set_rng_state_all", "numpy.random.set_state"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.vae_helpers.__init__.RNG.set_state"], ["", "def", "set_random_state", "(", "state", ")", ":", "\n", "    ", "random", ".", "setstate", "(", "state", "[", "\"python\"", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "state", "[", "\"torch\"", "]", ")", "\n", "torch", ".", "cuda", ".", "set_rng_state_all", "(", "state", "[", "\"cuda\"", "]", ")", "\n", "np", ".", "random", ".", "set_state", "(", "state", "[", "\"numpy\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.gp.test": [[152, 158], ["Namespace", "gp.GP", "gp.GPDataloader"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "from", "argparse", "import", "Namespace", "\n", "kernel_args", "=", "Namespace", "(", "type", "=", "\"rbf\"", ",", "lengthscale", "=", "0.2", ",", "outputscale", "=", "1", ")", "\n", "model", "=", "GP", "(", "kernel_args", "=", "kernel_args", ")", "\n", "loader", "=", "GPDataloader", "(", "model", ",", "batch_size", "=", "10", ",", "num_context_range", "=", "[", "1", ",", "10", "]", ",", "num_extra_target_range", "=", "[", "0", ",", "10", "]", ")", "\n", "return", "loader", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.SineData.__init__": [[61, 84], ["range", "torch.linspace().unsqueeze", "image.SineData.data.append", "torch.sin", "numpy.random.rand", "numpy.random.rand", "torch.linspace"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "amplitude_range", "=", "(", "-", "1.", ",", "1.", ")", ",", "shift_range", "=", "(", "-", ".5", ",", ".5", ")", ",", "\n", "num_samples", "=", "1000", ",", "num_points", "=", "100", ")", ":", "\n", "        ", "self", ".", "amplitude_range", "=", "amplitude_range", "\n", "self", ".", "shift_range", "=", "shift_range", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "x_dim", "=", "1", "# x and y dim are fixed for this dataset.", "\n", "self", ".", "y_dim", "=", "1", "\n", "\n", "# Generate data", "\n", "self", ".", "data", "=", "[", "]", "\n", "a_min", ",", "a_max", "=", "amplitude_range", "\n", "b_min", ",", "b_max", "=", "shift_range", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "# Sample random amplitude", "\n", "            ", "a", "=", "(", "a_max", "-", "a_min", ")", "*", "np", ".", "random", ".", "rand", "(", ")", "+", "a_min", "\n", "# Sample random shift", "\n", "b", "=", "(", "b_max", "-", "b_min", ")", "*", "np", ".", "random", ".", "rand", "(", ")", "+", "b_min", "\n", "# Shape (num_points, x_dim)", "\n", "x", "=", "torch", ".", "linspace", "(", "-", "pi", ",", "pi", ",", "num_points", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# Shape (num_points, y_dim)", "\n", "y", "=", "a", "*", "torch", ".", "sin", "(", "x", "-", "b", ")", "\n", "self", ".", "data", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.SineData.__getitem__": [[85, 87], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.SineData.__len__": [[88, 90], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.ToyDataset.__init__": [[194, 201], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "img_size", "=", "32", ",", "categories", "=", "10", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "categories", "<=", "img_size", "\n", "self", ".", "categories", "=", "categories", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "noisy", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.ToyDataset.__getitem__": [[202, 212], ["torch.zeros", "torch.clamp", "torch.randn"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "n", "=", "index", "%", "self", ".", "categories", "\n", "color_channel", "=", "(", "index", "//", "self", ".", "categories", ")", "%", "3", "\n", "ret", "=", "torch", ".", "zeros", "(", "3", ",", "self", ".", "img_size", ",", "self", ".", "img_size", ")", "\n", "colored_size", "=", "(", "self", ".", "img_size", "//", "self", ".", "categories", ")", "*", "n", "\n", "ret", "[", "color_channel", ",", ":", "colored_size", ",", ":", "colored_size", "]", "=", "1", "\n", "if", "self", ".", "noisy", ":", "\n", "            ", "ret", "+=", "torch", ".", "randn", "(", "ret", ".", "shape", ")", "*", "0.05", "\n", "ret", "=", "torch", ".", "clamp", "(", "ret", ",", "0", ",", "1", ")", "\n", "", "return", "ret", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.ToyDataset.__len__": [[213, 215], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.ToyMNIST.__init__": [[242, 245], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n", "=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.ToyMNIST._segment_on": [[246, 262], ["None"], "methods", ["None"], ["", "def", "_segment_on", "(", "self", ",", "segment", ",", "tensor", ")", ":", "\n", "        ", "if", "segment", "==", "\"A\"", ":", "\n", "            ", "tensor", "[", "0", ",", "1", ":", "4", "]", "=", "1", "\n", "", "elif", "segment", "==", "\"B\"", ":", "\n", "            ", "tensor", "[", "0", ":", "3", ",", "3", "]", "=", "1", "\n", "", "elif", "segment", "==", "\"C\"", ":", "\n", "            ", "tensor", "[", "3", ":", "6", ",", "3", "]", "=", "1", "\n", "", "elif", "segment", "==", "\"D\"", ":", "\n", "            ", "tensor", "[", "4", ",", "1", ":", "4", "]", "=", "1", "\n", "", "elif", "segment", "==", "\"E\"", ":", "\n", "            ", "tensor", "[", "3", ":", "6", ",", "1", "]", "=", "1", "\n", "", "elif", "segment", "==", "\"F\"", ":", "\n", "            ", "tensor", "[", "0", ":", "3", ",", "1", "]", "=", "1", "\n", "", "elif", "segment", "==", "\"G\"", ":", "\n", "            ", "tensor", "[", "2", ",", "1", ":", "4", "]", "=", "1", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.ToyMNIST.__getitem__": [[263, 281], ["torch.zeros", "len", "image.ToyMNIST._segment_on", "image.ToyMNIST.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.ToyMNIST._segment_on"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", ">=", "len", "(", "self", ")", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "idx", "=", "idx", "%", "10", "\n", "item", "=", "torch", ".", "zeros", "(", "5", ",", "5", ")", "\n", "segments", "=", "{", "0", ":", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", ",", "\"D\"", ",", "\"E\"", ",", "\"F\"", "]", ",", "\n", "1", ":", "[", "\"B\"", ",", "\"C\"", "]", ",", "\n", "2", ":", "[", "\"A\"", ",", "\"B\"", ",", "\"G\"", ",", "\"E\"", ",", "\"D\"", "]", ",", "\n", "3", ":", "[", "\"A\"", ",", "\"B\"", ",", "\"G\"", ",", "\"C\"", ",", "\"D\"", "]", ",", "\n", "4", ":", "[", "\"F\"", ",", "\"G\"", ",", "\"B\"", ",", "\"C\"", "]", ",", "\n", "5", ":", "[", "\"A\"", ",", "\"F\"", ",", "\"G\"", ",", "\"C\"", ",", "\"D\"", "]", ",", "\n", "6", ":", "[", "\"A\"", ",", "\"F\"", ",", "\"G\"", ",", "\"C\"", ",", "\"D\"", ",", "\"E\"", "]", ",", "\n", "7", ":", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", "]", ",", "\n", "8", ":", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", ",", "\"D\"", ",", "\"E\"", ",", "\"F\"", ",", "\"G\"", "]", ",", "\n", "9", ":", "[", "\"A\"", ",", "\"B\"", ",", "\"C\"", ",", "\"D\"", ",", "\"F\"", ",", "\"G\"", "]", "}", "\n", "for", "segment", "in", "segments", "[", "idx", "]", ":", "\n", "            ", "item", "=", "self", ".", "_segment_on", "(", "segment", ",", "item", ")", "\n", "", "return", "item", ".", "unsqueeze", "(", "0", ")", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.ToyMNIST.__len__": [[282, 284], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.collate_fn": [[16, 38], ["list", "torch.stack", "len", "rng.randint", "rng.randint", "utils.batch_context_target_mask", "utils.img_mask_to_np_input", "utils.img_mask_to_np_input", "zip", "numpy.random.RandomState", "rng.randint"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.batch_context_target_mask", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input", "home.repos.pwc.inspect_result.plai-group_ipa.anp.utils.img_mask_to_np_input"], ["def", "collate_fn", "(", "batch", ",", "num_context_range", ",", "num_extra_target_range", ",", "img_size", ",", "rng_state", "=", "None", ")", ":", "\n", "    ", "images", ",", "labels", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "images", "=", "torch", ".", "stack", "(", "images", ")", "\n", "#labels = torch.tensor(labels)", "\n", "batch_size", "=", "len", "(", "images", ")", "\n", "rng", "=", "RNG", "if", "rng_state", "is", "None", "else", "np", ".", "random", ".", "RandomState", "(", "rng_state", ")", "\n", "\n", "# Sample number of context and target points", "\n", "num_context", "=", "rng", ".", "randint", "(", "*", "num_context_range", ")", "\n", "num_extra_target", "=", "rng", ".", "randint", "(", "*", "num_extra_target_range", ")", "\n", "while", "num_context", "==", "0", "and", "num_extra_target", "==", "0", ":", "\n", "        ", "num_extra_target", "=", "rng", ".", "randint", "(", "*", "num_extra_target_range", ")", "\n", "\n", "", "context_mask", ",", "target_mask", "=", "batch_context_target_mask", "(", "img_size", ",", "\n", "num_context", ",", "num_extra_target", ",", "\n", "batch_size", ",", "\n", "rng", "=", "rng", ")", "\n", "x_context", ",", "y_context", "=", "img_mask_to_np_input", "(", "images", ",", "context_mask", ")", "\n", "x_target", ",", "y_target", "=", "img_mask_to_np_input", "(", "images", ",", "target_mask", ")", "\n", "# Returns two respresentations of the data: x-y pairs and image-masks.", "\n", "return", "(", "x_context", ",", "y_context", ",", "x_target", ",", "y_target", ")", ",", "(", "images", ",", "context_mask", ",", "target_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.mnist": [[92, 114], ["os.path.join", "trans.append", "torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "mnist", "(", "size", ",", "path_to_data", "=", "os", ".", "path", ".", "join", "(", "DATA_ROOT", ",", "\"mnist\"", ")", ",", "split", "=", "\"train\"", ")", ":", "\n", "    ", "\"\"\"MNIST dataset.\n\n    Parameters\n    ----------\n    size : int\n        Size (height and width) of each image. Default is 28 for no resizing.\n\n    path_to_data : string\n        Path to MNIST data files.\n    \"\"\"", "\n", "assert", "split", "in", "[", "\"train\"", ",", "\"test\"", ",", "\"valid\"", "]", "\n", "trans", "=", "[", "transforms", ".", "Resize", "(", "size", ")", "]", "\n", "trans", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "all_transforms", "=", "transforms", ".", "Compose", "(", "trans", ")", "\n", "\n", "dataset", "=", "datasets", ".", "MNIST", "(", "path_to_data", ",", "\n", "train", "=", "True", "if", "split", "==", "\"train\"", "else", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "all_transforms", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.celeba": [[116, 143], ["os.path.join", "torchvision.transforms.Compose", "torchvision.datasets.CelebA", "torchvision.transforms.CenterCrop", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "celeba", "(", "size", ",", "path_to_data", "=", "os", ".", "path", ".", "join", "(", "DATA_ROOT", ",", "\"celeba\"", ")", ",", "split", "=", "\"train\"", ",", "crop", "=", "128", ",", "target_type", "=", "\"identity\"", ")", ":", "\n", "    ", "\"\"\"CelebA dataset.\n\n    Parameters\n    ----------\n    size : int\n        Size (height and width) of each image.\n\n    crop : int\n        Size of center crop. This crop happens *before* the resizing.\n\n    path_to_data : string\n        Path to CelebA data files.\n    \"\"\"", "\n", "assert", "split", "in", "[", "\"train\"", ",", "\"test\"", ",", "\"valid\"", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "crop", ")", ",", "\n", "transforms", ".", "Resize", "(", "size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "dataset", "=", "datasets", ".", "CelebA", "(", "path_to_data", ",", "\n", "transform", "=", "transform", ",", "\n", "split", "=", "split", ",", "\n", "target_type", "=", "target_type", ",", "\n", "download", "=", "True", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.fashion_mnist": [[145, 167], ["os.path.join", "trans.append", "torchvision.transforms.Compose", "torchvision.datasets.FashionMNIST", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "fashion_mnist", "(", "size", ",", "path_to_data", "=", "os", ".", "path", ".", "join", "(", "DATA_ROOT", ",", "\"fashion_mnist\"", ")", ",", "split", "=", "\"train\"", ")", ":", "\n", "    ", "\"\"\"FashionMNIST dataset.\n\n    Parameters\n    ----------\n    size : int\n        Size (height and width) of each image. Default is 28 for no resizing.\n\n    path_to_data : string\n        Path to FashionMNIST data files.\n    \"\"\"", "\n", "assert", "split", "in", "[", "\"train\"", ",", "\"test\"", ",", "\"valid\"", "]", "\n", "trans", "=", "[", "transforms", ".", "Resize", "(", "size", ")", "]", "\n", "trans", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "all_transforms", "=", "transforms", ".", "Compose", "(", "trans", ")", "\n", "\n", "dataset", "=", "datasets", ".", "FashionMNIST", "(", "path_to_data", ",", "\n", "train", "=", "True", "if", "split", "==", "\"train\"", "else", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "all_transforms", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.cifar10": [[169, 191], ["os.path.join", "trans.append", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "cifar10", "(", "size", ",", "path_to_data", "=", "os", ".", "path", ".", "join", "(", "DATA_ROOT", ",", "\"cifar10\"", ")", ",", "split", "=", "\"train\"", ")", ":", "\n", "    ", "\"\"\"FashionMNIST dataset.\n\n    Parameters\n    ----------\n    size : int\n        Size (height and width) of each image. Default is 28 for no resizing.\n\n    path_to_data : string\n        Path to FashionMNIST data files.\n    \"\"\"", "\n", "assert", "split", "in", "[", "\"train\"", ",", "\"test\"", ",", "\"valid\"", "]", "\n", "trans", "=", "[", "transforms", ".", "Resize", "(", "size", ")", "]", "\n", "trans", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "all_transforms", "=", "transforms", ".", "Compose", "(", "trans", ")", "\n", "\n", "dataset", "=", "datasets", ".", "CIFAR10", "(", "path_to_data", ",", "\n", "train", "=", "True", "if", "split", "==", "\"train\"", "else", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "all_transforms", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.toy": [[217, 227], ["image.ToyDataset"], "function", ["None"], ["", "", "def", "toy", "(", "size", "=", "32", ",", "path_to_data", "=", "None", ",", "split", "=", "\"train\"", ")", ":", "\n", "    ", "categories", "=", "10", "\n", "if", "split", "==", "\"train\"", ":", "\n", "        ", "n", "=", "100000", "\n", "", "elif", "split", "==", "\"valid\"", ":", "\n", "        ", "n", "=", "categories", "*", "3", "*", "10", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "        ", "n", "=", "10000", "\n", "", "dataset", "=", "ToyDataset", "(", "n", "=", "n", ",", "img_size", "=", "size", ",", "categories", "=", "categories", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.toy_tiny": [[229, 239], ["image.ToyDataset"], "function", ["None"], ["", "def", "toy_tiny", "(", "size", "=", "32", ",", "path_to_data", "=", "None", ",", "split", "=", "\"train\"", ")", ":", "\n", "    ", "categories", "=", "size", "\n", "if", "split", "==", "\"train\"", ":", "\n", "        ", "n", "=", "100000", "\n", "", "elif", "split", "==", "\"valid\"", ":", "\n", "        ", "n", "=", "categories", "*", "3", "*", "10", "\n", "", "elif", "split", "==", "\"test\"", ":", "\n", "        ", "n", "=", "10000", "\n", "", "dataset", "=", "ToyDataset", "(", "n", "=", "n", ",", "img_size", "=", "size", ",", "categories", "=", "categories", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.toy_mnist": [[286, 290], ["image.ToyMNIST"], "function", ["None"], ["", "", "def", "toy_mnist", "(", "size", "=", "5", ",", "path_to_data", "=", "None", ",", "split", "=", "\"train\"", ")", ":", "\n", "    ", "n", "=", "10000", "if", "split", "==", "\"train\"", "else", "10", "\n", "dataset", "=", "ToyMNIST", "(", "n", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.data_handlers.image.get_dataloaders": [[301, 317], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset_func"], "function", ["None"], ["def", "get_dataloaders", "(", "dataset", ",", "batch_size", ",", "size", "=", "32", ",", "num_workers", "=", "4", ",", "collate_fn", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "dataset", "in", "DATASET_DICT", "\n", "dataset_func", "=", "DATASET_DICT", "[", "dataset", "]", "\n", "train_set", ",", "test_set", ",", "valid_set", "=", "[", "dataset_func", "(", "size", "=", "size", ",", "split", "=", "split", ",", "**", "kwargs", ")", "for", "split", "in", "[", "\"train\"", ",", "\"test\"", ",", "\"valid\"", "]", "]", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "valid_loader", "=", "DataLoader", "(", "valid_set", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", ",", "valid_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.InceptionV3.__init__": [[31, 128], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "_inception_v3.InceptionV3.blocks.append", "_inception_v3.InceptionV3.parameters", "inception.fid_inception_v3", "inception._inception_v3", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "_inception_v3.InceptionV3.blocks.append", "_inception_v3.InceptionV3.blocks.append", "_inception_v3.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.fid_inception_v3", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception._inception_v3"], ["            ", "batch_size", "=", "min", "(", "self", ".", "batch_size", ",", "self", ".", "N", "-", "self", ".", "number_sampled", ")", "\n", "self", ".", "number_sampled", "+=", "batch_size", "\n", "return", "self", ".", "p", ".", "sample", "(", "torch", ".", "Size", "(", "[", "batch_size", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "math", ".", "ceil", "(", "self", ".", "N", "/", "self", ".", "batch_size", ")", "\n", "\n", "", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "# Ensure data has shape (3xHxW)", "\n", "    ", "data", "=", "data", "[", "0", "]", "\n", "return", "data", ".", "expand", "(", "-", "1", ",", "3", ",", "*", "data", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "\n", "", "def", "inception_score", "(", "generator", ",", "N", "=", "50000", ",", "cuda", "=", "True", ",", "batch_size", "=", "32", ",", "resize", "=", "True", ",", "\n", "splits", "=", "10", ",", "normalize_input", "=", "True", ",", "inception_model", "=", "None", ",", "\n", "entropy_only", "=", "False", ",", "num_classes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Computes the inception score of the generated images imgs\n    p -- the generator model\n    N -- total number of datapoints to use for the metric\n    cuda -- whether or not to run on GPU\n    batch_size -- batch size for feeding into Inception v3\n    splits -- number of splits\n    \"\"\"", "\n", "assert", "batch_size", ">", "0", "\n", "# Set up dtype", "\n", "if", "cuda", ":", "\n", "        ", "dtype", "=", "torch", ".", "cuda", ".", "FloatTensor", "\n", "", "else", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "print", "(", "\"WARNING: You have a CUDA device, so you should probably set cuda=True\"", ")", "\n", "", "dtype", "=", "torch", ".", "FloatTensor", "\n", "# Set up dataset", "\n", "", "dataset", "=", "FakeData", "(", "generator", ",", "N", ",", "batch_size", ")", "\n", "# Set up dataloader (note we manually handle batch size in the dataset!!)", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "collate_fn", "=", "collate_fn", ",", "\n", "batch_size", "=", "1", ")", "\n", "# Load inception model", "\n", "if", "inception_model", "is", "None", ":", "\n", "        ", "inception_model", "=", "inception_v3", "(", "pretrained", "=", "True", ",", "\n", "transform_input", "=", "False", ")", ".", "type", "(", "dtype", ")", "\n", "", "inception_model", ".", "eval", "(", ")", "\n", "up", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "299", ",", "299", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", ".", "type", "(", "dtype", ")", "\n", "def", "get_pred", "(", "x", ")", ":", "\n", "        ", "if", "normalize_input", ":", "\n", "            ", "x", "=", "x", "*", "2", "-", "1", "\n", "", "if", "resize", ":", "\n", "            ", "x", "=", "up", "(", "x", ")", "\n", "", "x", "=", "inception_model", "(", "x", ")", "\n", "return", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# Get predictions", "\n", "", "preds", "=", "np", ".", "empty", "(", "(", "N", ",", "num_classes", ")", ")", "\n", "end", "=", "0", "\n", "for", "batch", "in", "tqdm", "(", "dataloader", ",", "\n", "total", "=", "len", "(", "dataloader", ")", ",", "\n", "desc", "=", "\"Inception Score\"", ")", ":", "\n", "        ", "batch", "=", "batch", ".", "type", "(", "dtype", ")", "\n", "batch_size_i", "=", "batch", ".", "size", "(", ")", "[", "0", "]", "\n", "start", "=", "end", "\n", "end", "=", "start", "+", "batch_size_i", "\n", "preds", "[", "start", ":", "end", "]", "=", "get_pred", "(", "batch", ")", "\n", "# Now compute the mean kl-div", "\n", "", "split_scores", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "preds", "[", "k", "*", "(", "N", "//", "splits", ")", ":", "(", "k", "+", "1", ")", "*", "(", "N", "//", "splits", ")", ",", ":", "]", "\n", "py", "=", "np", ".", "mean", "(", "part", ",", "axis", "=", "0", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "part", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pyx", "=", "part", "[", "i", ",", ":", "]", "\n", "if", "entropy_only", ":", "\n", "                ", "scores", ".", "append", "(", "entropy", "(", "pyx", ")", ")", "\n", "", "else", ":", "\n", "                ", "scores", ".", "append", "(", "entropy", "(", "pyx", ",", "py", ")", ")", "\n", "", "", "split_scores", ".", "append", "(", "np", ".", "exp", "(", "np", ".", "mean", "(", "scores", ")", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "split_scores", ")", ",", "np", ".", "std", "(", "split_scores", ")", "\n", "\n", "\n", "", "def", "inception_score_mnist", "(", "generator", ",", "mnist_classifier", ",", "N", "=", "50000", ",", "cuda", "=", "True", ",", "batch_size", "=", "32", ",", "\n", "splits", "=", "10", ",", "entropy_only", "=", "False", ",", "grayscale", "=", "True", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Computes the inception score of the generated images imgs\n    p -- the generator model\n    N -- total number of datapoints to use for the metric\n    cuda -- whether or not to run on GPU\n    batch_size -- batch size for feeding into Inception v3\n    splits -- number of splits\n    \"\"\"", "\n", "assert", "batch_size", ">", "0", "\n", "# Set up dtype", "\n", "if", "cuda", ":", "\n", "        ", "dtype", "=", "torch", ".", "cuda", ".", "FloatTensor", "\n", "", "else", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "print", "(", "\"WARNING: You have a CUDA device, so you should probably set cuda=True\"", ")", "\n", "", "dtype", "=", "torch", ".", "FloatTensor", "\n", "# Set up dataset", "\n", "", "dataset", "=", "FakeData", "(", "generator", ",", "N", ",", "batch_size", ")", "\n", "# Set up dataloader (note we manually handle batch size in the dataset!!)", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.InceptionV3.forward": [[129, 164], ["enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block", "outp.append"], "methods", ["None"], ["dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "collate_fn", "=", "collate_fn", ",", "\n", "batch_size", "=", "1", ")", "\n", "# Prepare MNIST lcassifier", "\n", "mnist_classifier", ".", "eval", "(", ")", "\n", "def", "get_pred", "(", "x", ")", ":", "\n", "        ", "x", "=", "mnist_classifier", "(", "x", ")", "\n", "return", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# Get predictions", "\n", "", "preds", "=", "np", ".", "empty", "(", "(", "N", ",", "num_classes", ")", ")", "\n", "end", "=", "0", "\n", "for", "batch", "in", "tqdm", "(", "dataloader", ",", "\n", "total", "=", "len", "(", "dataloader", ")", ",", "\n", "desc", "=", "\"Inception Score\"", ")", ":", "\n", "# Convert images to Grayscale by removing 2 of the 3 color channels", "\n", "        ", "if", "grayscale", ":", "\n", "            ", "batch", "=", "batch", "[", ":", ",", ":", "1", "]", "\n", "", "batch", "=", "batch", ".", "type", "(", "dtype", ")", "\n", "batch_size_i", "=", "batch", ".", "size", "(", ")", "[", "0", "]", "\n", "start", "=", "end", "\n", "end", "=", "start", "+", "batch_size_i", "\n", "preds", "[", "start", ":", "end", "]", "=", "get_pred", "(", "batch", ")", "\n", "# Now compute the mean kl-div", "\n", "", "split_scores", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "preds", "[", "k", "*", "(", "N", "//", "splits", ")", ":", "(", "k", "+", "1", ")", "*", "(", "N", "//", "splits", ")", ",", ":", "]", "\n", "py", "=", "np", ".", "mean", "(", "part", ",", "axis", "=", "0", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "part", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "pyx", "=", "part", "[", "i", ",", ":", "]", "\n", "if", "entropy_only", ":", "\n", "                ", "scores", ".", "append", "(", "entropy", "(", "pyx", ")", ")", "\n", "", "else", ":", "\n", "                ", "scores", ".", "append", "(", "entropy", "(", "pyx", ",", "py", ")", ")", "\n", "", "", "split_scores", ".", "append", "(", "np", ".", "exp", "(", "np", ".", "mean", "(", "scores", ")", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "split_scores", ")", ",", "np", ".", "std", "(", "split_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionA.__init__": [[213, 215], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], []], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionA.forward": [[216, 234], ["inception.FIDInceptionA.branch1x1", "inception.FIDInceptionA.branch5x5_1", "inception.FIDInceptionA.branch5x5_2", "inception.FIDInceptionA.branch3x3dbl_1", "inception.FIDInceptionA.branch3x3dbl_2", "inception.FIDInceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionC.__init__": [[238, 240], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], []], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionC.forward": [[241, 262], ["inception.FIDInceptionC.branch1x1", "inception.FIDInceptionC.branch7x7_1", "inception.FIDInceptionC.branch7x7_2", "inception.FIDInceptionC.branch7x7_3", "inception.FIDInceptionC.branch7x7dbl_1", "inception.FIDInceptionC.branch7x7dbl_2", "inception.FIDInceptionC.branch7x7dbl_3", "inception.FIDInceptionC.branch7x7dbl_4", "inception.FIDInceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_1.__init__": [[266, 268], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], []], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_1.forward": [[269, 295], ["inception.FIDInceptionE_1.branch1x1", "inception.FIDInceptionE_1.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3dbl_1", "inception.FIDInceptionE_1.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionE_1.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3_2a", "inception.FIDInceptionE_1.branch3x3_2b", "inception.FIDInceptionE_1.branch3x3dbl_3a", "inception.FIDInceptionE_1.branch3x3dbl_3b"], "methods", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.__init__": [[299, 301], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__"], []], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.FIDInceptionE_2.forward": [[302, 329], ["inception.FIDInceptionE_2.branch1x1", "inception.FIDInceptionE_2.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3dbl_1", "inception.FIDInceptionE_2.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception.FIDInceptionE_2.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3_2a", "inception.FIDInceptionE_2.branch3x3_2b", "inception.FIDInceptionE_2.branch3x3dbl_3a", "inception.FIDInceptionE_2.branch3x3dbl_3b"], "methods", ["None"], []], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception._inception_v3": [[166, 182], ["torchvision.models.inception_v3", "tuple", "map", "torchvision.__version__.split"], "function", ["None"], ["", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "from", "torch", ".", "distributions", "import", "Normal", "\n", "class", "Test_Generator", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "LATENT_DIM", "=", "4", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ff", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "LATENT_DIM", ",", "4", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "LATENT_DIM", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "self", ".", "std", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "LATENT_DIM", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "self", ".", "_style_sampler", "=", "Normal", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "", "def", "sample", "(", "self", ",", "batch_shape", "=", "torch", ".", "Size", "(", "[", "1", "]", ")", ")", ":", "\n", "            ", "styles", "=", "self", ".", "_style_sampler", ".", "sample", "(", "batch_shape", ")", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception.fid_inception_v3": [[184, 209], ["inception._inception_v3", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionE_1", "inception.FIDInceptionE_2", "load_state_dict_from_url", "_inception_v3.load_state_dict"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.inception._inception_v3"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "return", "F", ".", "sigmoid", "(", "self", ".", "ff", "(", "x", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "4", ",", "4", ")", ")", "\n", "", "", "print", "(", "\"Calculating Inception Score...\"", ")", "\n", "print", "(", "inception_score", "(", "Test_Generator", "(", ")", ",", "N", "=", "int", "(", "5e4", ")", ",", "cuda", "=", "True", ",", "\n", "batch_size", "=", "32", ",", "resize", "=", "True", ",", "splits", "=", "10", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__": [[81, 88], ["torch.Size"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "generator", ",", "N", "=", "1000", ",", "batch_size", "=", "32", ")", ":", "\n", "\n", "        ", "self", ".", "generator", "=", "generator", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "number_sampled", "=", "0", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "sample_shape", "=", "torch", ".", "Size", "(", "[", "batch_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__iter__": [[89, 93], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "number_sampled", "=", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__next__": [[94, 102], ["min", "fid_score.FakeData.generator.sample", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "number_sampled", "<", "self", ".", "N", ":", "\n", "            ", "batch_size", "=", "min", "(", "self", ".", "batch_size", ",", "self", ".", "N", "-", "self", ".", "number_sampled", ")", "\n", "self", ".", "number_sampled", "+=", "batch_size", "\n", "return", "self", ".", "generator", ".", "sample", "(", "torch", ".", "Size", "(", "[", "batch_size", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__len__": [[103, 105], ["math.ceil"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "math", ".", "ceil", "(", "self", ".", "N", "/", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.collate_fn": [[107, 111], ["data.expand"], "function", ["None"], ["", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "    ", "data", "=", "data", "[", "0", "]", "\n", "# Ensure data has shape (3xHxW)", "\n", "return", "data", ".", "expand", "(", "-", "1", ",", "3", ",", "*", "data", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.collate_fn_real_data": [[113, 118], ["zip", "torch.stack", "torch.stack.expand"], "function", ["None"], ["", "def", "collate_fn_real_data", "(", "data", ")", ":", "\n", "    ", "data", ",", "target", "=", "zip", "(", "*", "data", ")", "\n", "data", "=", "torch", ".", "stack", "(", "data", ")", "\n", "# Ensure data has shape (3xHxW)", "\n", "return", "data", ".", "expand", "(", "-", "1", ",", "3", ",", "*", "data", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.imread": [[120, 125], ["numpy.asarray", "PIL.Image.open"], "function", ["None"], ["", "def", "imread", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Loads an image file into a (height, width, 3) uint8 ndarray.\n    \"\"\"", "\n", "return", "np", ".", "asarray", "(", "Image", ".", "open", "(", "filename", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "[", "...", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.get_activations": [[127, 180], ["model.eval", "numpy.empty", "tqdm", "len", "print", "len", "range", "numpy.array", "images.transpose.transpose", "torch.from_numpy().type", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy().reshape", "len", "len", "batch.cuda.cuda", "model", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d.size", "imread().astype", "torch.from_numpy", "torch.nn.functional.adaptive_avg_pool2d.size", "torch.nn.functional.adaptive_avg_pool2d.size", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy", "fid_score.imread", "str", "torch.nn.functional.adaptive_avg_pool2d.cpu"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.imread"], ["", "def", "get_activations", "(", "files", ",", "model", ",", "batch_size", "=", "50", ",", "dims", "=", "2048", ",", "cuda", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : Batch size of images for the model to process at once.\n                     Make sure that the number of samples is a multiple of\n                     the batch size, otherwise some samples are ignored. This\n                     behavior is retained to match the original FID score\n                     implementation.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "batch_size", ">", "len", "(", "files", ")", ":", "\n", "        ", "print", "(", "(", "'Warning: batch size is bigger than the data size. '", "\n", "'Setting batch size to data size'", ")", ")", "\n", "batch_size", "=", "len", "(", "files", ")", "\n", "\n", "", "pred_arr", "=", "np", ".", "empty", "(", "(", "len", "(", "files", ")", ",", "dims", ")", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "0", ",", "len", "(", "files", ")", ",", "batch_size", ")", ")", ":", "\n", "        ", "start", "=", "i", "\n", "end", "=", "i", "+", "batch_size", "\n", "\n", "images", "=", "np", ".", "array", "(", "[", "imread", "(", "str", "(", "f", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "f", "in", "files", "[", "start", ":", "end", "]", "]", ")", "\n", "\n", "# Reshape to (n_images, 3, height, width)", "\n", "images", "=", "images", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "images", "/=", "255", "\n", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "images", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "if", "cuda", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "\n", "", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "if", "pred", ".", "size", "(", "2", ")", "!=", "1", "or", "pred", ".", "size", "(", "3", ")", "!=", "1", ":", "\n", "            ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "pred", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.get_activations_dataloader": [[182, 222], ["model.eval", "numpy.empty", "tqdm", "batch.cuda.size", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy().reshape", "len", "type", "batch.cuda.cuda", "model", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d.size", "torch.nn.functional.adaptive_avg_pool2d.size", "torch.nn.functional.adaptive_avg_pool2d.size", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy", "torch.nn.functional.adaptive_avg_pool2d.cpu"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.model.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda"], ["", "def", "get_activations_dataloader", "(", "dataloader", ",", "model", ",", "N", ",", "dims", "=", "2048", ",", "cuda", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n\n    Params:\n    -- dataloader  : Dataloader from which to get activations\n    -- model       : Instance of inception model\n    -- N           : Number of samples to use for the estimate\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "N", ",", "dims", ")", ")", "\n", "end", "=", "0", "\n", "for", "batch", "in", "tqdm", "(", "dataloader", ",", "\n", "total", "=", "len", "(", "dataloader", ")", ",", "\n", "desc", "=", "\"Fid Score\"", ")", ":", "\n", "        ", "batch_size", "=", "batch", ".", "size", "(", "0", ")", "\n", "\n", "if", "type", "(", "batch", ")", "==", "tuple", ":", "\n", "            ", "batch", "=", "batch", "[", "0", "]", "\n", "\n", "", "if", "cuda", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "\n", "", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "\n", "start", "=", "end", "\n", "end", "=", "start", "+", "batch_size", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "if", "pred", ".", "size", "(", "2", ")", "!=", "1", "or", "pred", ".", "size", "(", "3", ")", "!=", "1", ":", "\n", "            ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "pred", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_frechet_distance": [[224, 279], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n\n    Stable version by Dougal J. Sutherland.\n\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representative data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representative data set.\n\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "\n", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_activation_statistics": [[281, 303], ["fid_score.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.get_activations"], ["", "def", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", "=", "50", ",", "dims", "=", "2048", ",", "\n", "cuda", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : The images numpy array is split into batches with\n                     batch size batch_size. A reasonable batch size\n                     depends on the hardware.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the inception model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the inception model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "files", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_activation_statistics_dataloader": [[305, 324], ["fid_score.get_activations_dataloader", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.get_activations_dataloader"], ["", "def", "calculate_activation_statistics_dataloader", "(", "dataloader", ",", "model", ",", "N", ",", "dims", "=", "2048", ",", "\n", "cuda", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- dataloader  : Dataloader from which to calculate statistics\n    -- model       : Instance of inception model\n    -- N           : Number of samples to use for the estimate\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the inception model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the inception model.\n    \"\"\"", "\n", "act", "=", "get_activations_dataloader", "(", "dataloader", ",", "model", ",", "N", ",", "dims", ",", "cuda", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score._compute_statistics_of_path": [[326, 338], ["pathlib.Path.endswith", "numpy.load", "np.load.close", "pathlib.Path", "fid_score.calculate_activation_statistics", "list", "list", "pathlib.Path.glob", "pathlib.Path.glob"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.dataset_tools.tfrecord_utils.TFRecordExporter.close", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_activation_statistics"], ["", "def", "_compute_statistics_of_path", "(", "path", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", ":", "\n", "    ", "if", "path", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "files", "=", "list", "(", "path", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "path", ".", "glob", "(", "'*.png'", ")", ")", "\n", "m", ",", "s", "=", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "\n", "", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_fid_given_paths": [[340, 362], ["fid_score._compute_statistics_of_path", "fid_score._compute_statistics_of_path", "fid_score.calculate_frechet_distance", "inception.InceptionV3", "inception.InceptionV3.cuda", "os.path.exists", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score._compute_statistics_of_path", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score._compute_statistics_of_path", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_frechet_distance", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda"], ["", "def", "calculate_fid_given_paths", "(", "paths", ",", "batch_size", ",", "cuda", ",", "dims", ",", "inception_model", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculates the FID of two paths\"\"\"", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid path: %s'", "%", "p", ")", "\n", "\n", "", "", "if", "inception_model", "is", "None", ":", "\n", "        ", "block_idx", "=", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "model", "=", "InceptionV3", "(", "[", "block_idx", "]", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "inception_model", "\n", "\n", "", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "m1", ",", "s1", "=", "_compute_statistics_of_path", "(", "paths", "[", "0", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "m2", ",", "s2", "=", "_compute_statistics_of_path", "(", "paths", "[", "1", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_fid_no_paths": [[364, 409], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "fid_score.calculate_activation_statistics_dataloader", "numpy.load", "fid_score.calculate_frechet_distance", "inception.InceptionV3", "inception.InceptionV3.cuda", "fid_score.FakeData", "type", "os.path.exists", "fid_score.calculate_activation_statistics_dataloader", "numpy.savez", "min", "len"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_activation_statistics_dataloader", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_frechet_distance", "home.repos.pwc.inspect_result.plai-group_ipa.rfr.model.RFRNetModel.cuda", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_activation_statistics_dataloader"], ["", "def", "calculate_fid_no_paths", "(", "generator", ",", "dataset", ",", "batch_size", ",", "cuda", ",", "dims", ",", "N", ",", "\n", "normalize_input", "=", "True", ",", "inception_model", "=", "None", ",", "\n", "num_workers", "=", "0", ")", ":", "\n", "\n", "\n", "    ", "if", "inception_model", "is", "None", ":", "\n", "        ", "block_idx", "=", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "model", "=", "InceptionV3", "(", "[", "block_idx", "]", ",", "normalize_input", "=", "normalize_input", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "inception_model", "\n", "", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "# Set up dataloader for generator", "\n", "# (note we manually handle batch size in the dataset!!)", "\n", "", "dataloader_gen", "=", "DataLoader", "(", "FakeData", "(", "generator", ",", "N", ",", "\n", "min", "(", "batch_size", ",", "N", ")", ")", ",", "\n", "collate_fn", "=", "collate_fn", ",", "batch_size", "=", "1", ")", "\n", "\n", "# Set up dataloader for dataset", "\n", "# (note we do not manually handle batch size here!)", "\n", "dataloader_gt", "=", "DataLoader", "(", "dataset", ",", "collate_fn", "=", "collate_fn_real_data", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ")", "\n", "\n", "m1", ",", "s1", "=", "calculate_activation_statistics_dataloader", "(", "dataloader_gen", ",", "model", ",", "\n", "N", ",", "dims", ",", "cuda", ")", "\n", "\n", "# check if we have saved m2 and s2", "\n", "dataset_type", "=", "type", "(", "dataset", ")", ".", "__name__", "\n", "# dataset_hash = zlib.adler32(repr(dataset).encode('utf-8'))", "\n", "fname", "=", "f\"./{dataset_type}_moments.npz\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", ":", "\n", "        ", "m2", ",", "s2", "=", "calculate_activation_statistics_dataloader", "(", "dataloader_gt", ",", "\n", "model", ",", "\n", "len", "(", "dataset", ")", ",", "\n", "dims", ",", "cuda", ")", "\n", "np", ".", "savez", "(", "fname", ",", "m2", "=", "m2", ",", "s2", "=", "s2", ")", "\n", "", "npz", "=", "np", ".", "load", "(", "fname", ")", "\n", "m2", "=", "npz", "[", "'m2'", "]", "\n", "s2", "=", "npz", "[", "'s2'", "]", "\n", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.main": [[411, 461], ["parser.parse_args", "print", "fid_score.calculate_fid_given_paths", "transforms.Compose", "torch_dataset.MNIST", "fid_score.calculate_fid_no_paths", "Test_Generator", "len", "super().__init__", "nn.Sequential", "nn.Parameter", "nn.Parameter", "Normal", "torch.Size", "fid_score.._style_sampler.sample", "fid_score..", "F.sigmoid", "transforms.ToTensor", "nn.Linear", "nn.ReLU", "torch.zeros", "torch.ones", "fid_score..ff().view", "x.size", "fid_score..ff"], "function", ["home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_fid_given_paths", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.calculate_fid_no_paths", "home.repos.pwc.inspect_result.plai-group_ipa.pytorch_fid.fid_score.FakeData.__init__", "home.repos.pwc.inspect_result.plai-group_ipa.anp.test_scores.Generator.sample"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "\n", "paths", "=", "args", ".", "path", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", "cuda", "=", "args", ".", "gpu", "!=", "''", "\n", "dims", "=", "args", ".", "dims", "\n", "\n", "if", "''", "not", "in", "paths", ":", "\n", "        ", "fid_value", "=", "calculate_fid_given_paths", "(", "paths", ",", "batch_size", ",", "cuda", ",", "dims", ")", "\n", "", "else", ":", "\n", "        ", "import", "torch", ".", "nn", "as", "nn", "\n", "from", "torch", ".", "nn", "import", "functional", "as", "F", "\n", "from", "torch", ".", "distributions", "import", "Normal", "\n", "from", "torchvision", "import", "datasets", "as", "torch_dataset", ",", "transforms", "\n", "\n", "class", "Test_Generator", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "            ", "LATENT_DIM", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "                ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ff", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "LATENT_DIM", ",", "4", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "LATENT_DIM", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "self", ".", "std", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "LATENT_DIM", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "self", ".", "_style_sampler", "=", "Normal", "(", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "\n", "", "def", "sample", "(", "self", ",", "batch_shape", "=", "torch", ".", "Size", "(", "[", "1", "]", ")", ")", ":", "\n", "                ", "styles", "=", "self", ".", "_style_sampler", ".", "sample", "(", "batch_shape", ")", "\n", "return", "self", "(", "styles", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "                ", "return", "F", ".", "sigmoid", "(", "self", ".", "ff", "(", "x", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "4", ",", "4", ")", ")", "\n", "\n", "", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "test_dataset", "=", "torch_dataset", ".", "MNIST", "(", "'.'", ",", "download", "=", "True", ",", "train", "=", "False", ",", "\n", "transform", "=", "transform", ")", "\n", "fid_value", "=", "calculate_fid_no_paths", "(", "Test_Generator", "(", ")", ",", "test_dataset", ",", "\n", "batch_size", ",", "cuda", ",", "dims", ",", "\n", "len", "(", "test_dataset", ")", ")", "\n", "\n", "", "print", "(", "'FID: '", ",", "fid_value", ")", "\n", "\n"]]}