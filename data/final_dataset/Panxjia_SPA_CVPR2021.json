{"home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.restore.restore": [[7, 54], ["os.path.isfile", "os.path.join", "os.listdir", "print", "torch.load", "print", "print", "sys.exit", "len", "os.listdir.sort", "os.path.join", "model.load_state_dict", "print", "print", "print", "os.path.isfile", "x.endswith", "optimizer.load_state_dict", "restore._model_load_v6", "restore._model_load", "os.path.join", "os.path.getmtime", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.restore._model_load_v6", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.restore._model_load"], ["def", "restore", "(", "args", ",", "model", ",", "optimizer", ",", "istrain", "=", "True", ",", "including_opt", "=", "False", ")", ":", "\n", "    ", "if", "args", ".", "restore_from", "!=", "''", "and", "(", "'.pth'", "in", "args", ".", "restore_from", ")", ":", "\n", "        ", "snapshot", "=", "os", ".", "path", ".", "join", "(", "args", ".", "snapshot_dir", ",", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "        ", "restore_dir", "=", "args", ".", "snapshot_dir", "\n", "filelist", "=", "os", ".", "listdir", "(", "restore_dir", ")", "\n", "filelist", "=", "[", "x", "for", "x", "in", "filelist", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "restore_dir", ",", "x", ")", ")", "and", "x", ".", "endswith", "(", "'.pth.tar'", ")", "]", "\n", "if", "len", "(", "filelist", ")", ">", "0", ":", "\n", "            ", "filelist", ".", "sort", "(", "key", "=", "lambda", "fn", ":", "os", ".", "path", ".", "getmtime", "(", "os", ".", "path", ".", "join", "(", "restore_dir", ",", "fn", ")", ")", ",", "reverse", "=", "True", ")", "\n", "snapshot", "=", "os", ".", "path", ".", "join", "(", "restore_dir", ",", "filelist", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "snapshot", "=", "''", "\n", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "snapshot", ")", ":", "\n", "        ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "snapshot", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "snapshot", ")", "\n", "try", ":", "\n", "            ", "if", "istrain", ":", "\n", "                ", "args", ".", "current_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "args", ".", "global_counter", "=", "checkpoint", "[", "'global_counter'", "]", "+", "1", "\n", "if", "including_opt", ":", "\n", "                    ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "", "", "if", "'module.SPG_A3_1b.0.weight'", "in", "checkpoint", "[", "'state_dict'", "]", ":", "\n", "                ", "checkpoint", "[", "'state_dict'", "]", "[", "'module.cls_fc6.0.weight'", "]", "=", "checkpoint", "[", "'state_dict'", "]", "[", "'module.SPG_A3_1b.0.weight'", "]", "\n", "checkpoint", "[", "'state_dict'", "]", "[", "'module.cls_fc6.0.bias'", "]", "=", "checkpoint", "[", "'state_dict'", "]", "[", "'module.SPG_A3_1b.0.bias'", "]", "\n", "checkpoint", "[", "'state_dict'", "]", "[", "'module.cls_fc7.0.weight'", "]", "=", "checkpoint", "[", "'state_dict'", "]", "[", "'module.SPG_A3_2b.0.weight'", "]", "\n", "checkpoint", "[", "'state_dict'", "]", "[", "'module.cls_fc7.0.bias'", "]", "=", "checkpoint", "[", "'state_dict'", "]", "[", "'module.SPG_A3_2b.0.bias'", "]", "\n", "checkpoint", "[", "'state_dict'", "]", "[", "'module.cls_fc8.weight'", "]", "=", "checkpoint", "[", "'state_dict'", "]", "[", "'module.SPG_A4.weight'", "]", "\n", "checkpoint", "[", "'state_dict'", "]", "[", "'module.cls_fc8.bias'", "]", "=", "checkpoint", "[", "'state_dict'", "]", "[", "'module.SPG_A4.bias'", "]", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "snapshot", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "print", "(", "\"KeyError\"", ")", "\n", "if", "args", ".", "arch", "==", "'vgg_v5_7'", "or", "args", ".", "arch", "==", "'vgg_v7'", "or", "args", ".", "arch", "==", "'vgg_v10'", ":", "\n", "                ", "_model_load_v6", "(", "model", ",", "checkpoint", ")", "\n", "# elif args.arch=='vgg_v2':", "\n", "#     _model_load_v2(model, checkpoint)", "\n", "", "else", ":", "\n", "                ", "_model_load", "(", "model", ",", "checkpoint", ")", "\n", "", "", "except", "KeyError", ":", "\n", "            ", "print", "(", "\"Loading pre-trained values failed.\"", ")", "\n", "raise", "\n", "", "print", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "snapshot", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "snapshot", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.restore._model_load": [[57, 72], ["model.state_dict", "[].startswith", "print", "print", "model.state_dict.update", "model.load_state_dict", "pretrained_dict.items", "model.state_dict.keys", "pretrained_dict.items", "model.state_dict.keys", "model.state_dict.keys", "pretrained_dict.keys"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update"], ["", "", "def", "_model_load", "(", "model", ",", "pretrained_dict", ")", ":", "\n", "    ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "# model_dict_keys = [v.replace('module.', '') for v in model_dict.keys() if v.startswith('module.')]", "\n", "if", "model_dict", ".", "keys", "(", ")", "[", "0", "]", ".", "startswith", "(", "'module.'", ")", ":", "\n", "        ", "pretrained_dict", "=", "{", "'module.'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "}", "\n", "\n", "# print pretrained_dict.keys()", "\n", "# print model.state_dict().keys()", "\n", "", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "print", "(", "\"Weights cannot be loaded:\"", ")", "\n", "print", "(", "[", "k", "for", "k", "in", "model_dict", ".", "keys", "(", ")", "if", "k", "not", "in", "pretrained_dict", ".", "keys", "(", ")", "]", ")", "\n", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.restore._model_load_v6": [[74, 102], ["model.state_dict", "[].startswith", "print", "print", "restore._model_load_v6.update_coord_dict"], "function", ["None"], ["", "def", "_model_load_v6", "(", "model", ",", "pretrained_dict", ")", ":", "\n", "    ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "# model_dict_keys = [v.replace('module.', '') for v in model_dict.keys() if v.startswith('module.')]", "\n", "if", "model_dict", ".", "keys", "(", ")", "[", "0", "]", ".", "startswith", "(", "'module.'", ")", ":", "\n", "        ", "pretrained_dict", "=", "{", "'module.'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "}", "\n", "\n", "", "feature2_pred_w", "=", "{", "'module.fc5_seg.%d.weight'", "%", "(", "i", ")", ":", "'module.features.%d.weight'", "%", "(", "i", "+", "24", ")", "for", "i", "in", "range", "(", "0", ",", "5", ",", "2", ")", "}", "\n", "feature2_pred_b", "=", "{", "'module.fc5_seg.%d.bias'", "%", "(", "i", ")", ":", "'module.features.%d.bias'", "%", "(", "i", "+", "24", ")", "for", "i", "in", "range", "(", "0", ",", "5", ",", "2", ")", "}", "\n", "# feature_erase_pred_w = {'module.fc5_seg.%d.weight'%(i):'module.features.%d.weight'%(i+24) for i in range(0,5,2)}", "\n", "# feature_erase_pred_b = {'module.fc5_seg.%d.bias'%(i):'module.features.%d.bias'%(i+24) for i in range(0,5,2)}", "\n", "\n", "common_pred", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "print", "(", "\"Weights cannot be loaded:\"", ")", "\n", "print", "(", "[", "k", "for", "k", "in", "model_dict", ".", "keys", "(", ")", "if", "\n", "k", "not", "in", "common_pred", ".", "keys", "(", ")", "+", "feature2_pred_w", ".", "keys", "(", ")", "+", "feature2_pred_b", ".", "keys", "(", ")", "]", ")", "\n", "\n", "def", "update_coord_dict", "(", "d", ")", ":", "\n", "        ", "for", "k", "in", "d", ".", "keys", "(", ")", ":", "\n", "            ", "model_dict", "[", "k", "]", "=", "pretrained_dict", "[", "d", "[", "k", "]", "]", "\n", "\n", "", "", "update_coord_dict", "(", "feature2_pred_w", ")", "\n", "update_coord_dict", "(", "feature2_pred_b", ")", "\n", "# update_coord_dict(feature_erase_pred_w)", "\n", "# update_coord_dict(feature_erase_pred_b)", "\n", "\n", "model_dict", ".", "update", "(", "common_pred", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.restore._model_load_v2": [[104, 132], ["model.state_dict", "[].startswith", "print", "print", "restore._model_load_v6.update_coord_dict"], "function", ["None"], ["", "def", "_model_load_v2", "(", "model", ",", "pretrained_dict", ")", ":", "\n", "    ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "# model_dict_keys = [v.replace('module.', '') for v in model_dict.keys() if v.startswith('module.')]", "\n", "if", "model_dict", ".", "keys", "(", ")", "[", "0", "]", ".", "startswith", "(", "'module.'", ")", ":", "\n", "        ", "pretrained_dict", "=", "{", "'module.'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "}", "\n", "\n", "", "fc5_cls_w", "=", "{", "'module.fc5_cls.%d.weight'", "%", "(", "i", ")", ":", "'module.features.%d.weight'", "%", "(", "i", "+", "24", ")", "for", "i", "in", "range", "(", "0", ",", "5", ",", "2", ")", "}", "\n", "fc5_cls_b", "=", "{", "'module.fc5_cls.%d.bias'", "%", "(", "i", ")", ":", "'module.features.%d.bias'", "%", "(", "i", "+", "24", ")", "for", "i", "in", "range", "(", "0", ",", "5", ",", "2", ")", "}", "\n", "fc5_seg_w", "=", "{", "'module.fc5_seg.%d.weight'", "%", "(", "i", ")", ":", "'module.features.%d.weight'", "%", "(", "i", "+", "24", ")", "for", "i", "in", "range", "(", "0", ",", "5", ",", "2", ")", "}", "\n", "fc5_seg_b", "=", "{", "'module.fc5_seg.%d.bias'", "%", "(", "i", ")", ":", "'module.features.%d.bias'", "%", "(", "i", "+", "24", ")", "for", "i", "in", "range", "(", "0", ",", "5", ",", "2", ")", "}", "\n", "\n", "common_pred", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "print", "(", "\"Weights cannot be loaded:\"", ")", "\n", "print", "(", "[", "k", "for", "k", "in", "model_dict", ".", "keys", "(", ")", "if", "k", "not", "in", "common_pred", ".", "keys", "(", ")", "+", "fc5_cls_w", ".", "keys", "(", ")", "+", "\n", "fc5_cls_b", ".", "keys", "(", ")", "+", "fc5_seg_w", ".", "keys", "(", ")", "+", "fc5_seg_b", ".", "keys", "(", ")", "]", ")", "\n", "\n", "def", "update_coord_dict", "(", "d", ")", ":", "\n", "        ", "for", "k", "in", "d", ".", "keys", "(", ")", ":", "\n", "            ", "model_dict", "[", "k", "]", "=", "pretrained_dict", "[", "d", "[", "k", "]", "]", "\n", "\n", "", "", "update_coord_dict", "(", "fc5_cls_w", ")", "\n", "update_coord_dict", "(", "fc5_cls_b", ")", "\n", "update_coord_dict", "(", "fc5_seg_w", ")", "\n", "update_coord_dict", "(", "fc5_seg_b", ")", "\n", "\n", "model_dict", ".", "update", "(", "common_pred", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_box.get_bbox": [[17, 44], ["cv2.threshold", "binary.astype.astype", "cv2.distanceTransform", "binary.astype.astype", "cv2.threshold", "cv2.findContours", "cv2.boundingRect", "min", "min", "min", "min", "bboxes.append", "max", "max", "max", "max"], "function", ["None"], ["def", "get_bbox", "(", "img", ",", "g_ths", ")", ":", "\n", "    ", "'''\n    :param img: single channel heatmap, np.ndarray\n    :param g_ths: list of binarization threshold, [th_1, th_2, ..., th_n]\n    :return: bboxes [N, (x, y, w, h)]\n    '''", "\n", "H", ",", "W", "=", "img", ".", "shape", "\n", "bboxes", "=", "[", "]", "\n", "for", "th", "in", "g_ths", ":", "\n", "        ", "_", ",", "binary", "=", "cv2", ".", "threshold", "(", "img", ",", "th", ",", "255", ",", "cv2", ".", "THRESH_BINARY", ")", "\n", "binary", "=", "binary", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# Distance Transform", "\n", "binary", "=", "cv2", ".", "distanceTransform", "(", "binary", ",", "cv2", ".", "DIST_L2", ",", "5", ")", "\n", "binary", "[", "binary", ">", "255.0", "]", "=", "255.0", "\n", "binary", "=", "binary", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "_", ",", "binary", "=", "cv2", ".", "threshold", "(", "binary", ",", "3", ",", "255", ",", "cv2", ".", "THRESH_BINARY", ")", "\n", "contours", ",", "hie", "=", "cv2", ".", "findContours", "(", "binary", ",", "cv2", ".", "RETR_CCOMP", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "for", "contour", "in", "contours", ":", "\n", "            ", "bbox", "=", "cv2", ".", "boundingRect", "(", "contour", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "bbox", "\n", "x", "=", "min", "(", "max", "(", "x", ",", "0", ")", ",", "W", "-", "5", ")", "\n", "y", "=", "min", "(", "max", "(", "y", ",", "0", ")", ",", "H", "-", "5", ")", "\n", "w", "=", "min", "(", "max", "(", "w", ",", "0", ")", ",", "W", "-", "x", "-", "5", ")", "\n", "h", "=", "min", "(", "max", "(", "h", ",", "0", ")", ",", "H", "-", "y", "-", "5", ")", "\n", "bboxes", ".", "append", "(", "[", "x", ",", "y", ",", "w", ",", "h", "]", ")", "\n", "\n", "", "", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_box.big_overlap": [[45, 58], ["max", "max", "max", "min", "max", "min", "max"], "function", ["None"], ["", "def", "big_overlap", "(", "bbox1", ",", "bbox2", ")", ":", "\n", "    ", "'''\n    :param bbox1: [x1, y1, w1, h1]\n    :param bbox2: [x2, y2, w2, h2]\n    :return: bool, whether overlap > max(area(bbox1), area(bbox2)) * 0.5\n    '''", "\n", "x1", ",", "y1", ",", "w1", ",", "h1", "=", "bbox1", "\n", "x2", ",", "y2", ",", "w2", ",", "h2", "=", "bbox2", "\n", "t", "=", "max", "(", "w1", "*", "h1", ",", "w2", "*", "h2", ")", "*", "0.5", "\n", "x_overlap", "=", "max", "(", "0", ",", "min", "(", "x1", "+", "w1", ",", "x2", "+", "w2", ")", "-", "max", "(", "x1", ",", "x2", ")", ")", "\n", "y_overlap", "=", "max", "(", "0", ",", "min", "(", "y1", "+", "h1", ",", "y2", "+", "h2", ")", "-", "max", "(", "y1", ",", "y2", ")", ")", "\n", "overlap", "=", "x_overlap", "*", "y_overlap", "\n", "return", "overlap", ">", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_box.merge_bbox": [[59, 81], ["sorted", "range", "range", "len", "range", "len", "len", "get_box.big_overlap", "bboxes_nms.append", "not_keep.append"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_box.big_overlap"], ["", "def", "merge_bbox", "(", "bboxes", ")", ":", "\n", "    ", "'''\n    :param bboxes: [N, (x, y, w, h)]\n    :return: [M, (x, y, w, h)], output of nms\n    '''", "\n", "bboxes", "=", "sorted", "(", "bboxes", ",", "key", "=", "lambda", "s", ":", "s", "[", "2", "]", "*", "s", "[", "3", "]", ",", "reverse", "=", "True", ")", "\n", "# print(bboxes)", "\n", "not_keep", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "        ", "if", "i", "in", "not_keep", ":", "\n", "            ", "continue", "\n", "", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "bboxes", ")", ")", ":", "\n", "            ", "if", "j", "in", "not_keep", ":", "\n", "                ", "continue", "\n", "", "if", "big_overlap", "(", "bboxes", "[", "i", "]", ",", "bboxes", "[", "j", "]", ")", ":", "\n", "                ", "not_keep", ".", "append", "(", "j", ")", "\n", "\n", "", "", "", "bboxes_nms", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "        ", "if", "i", "not", "in", "not_keep", ":", "\n", "            ", "bboxes_nms", ".", "append", "(", "bboxes", "[", "i", "]", ")", "\n", "", "", "return", "bboxes_nms", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_box.show_bboxes": [[82, 102], ["cv2.putText", "cv2.imwrite", "numpy.ones", "cv2.rectangle"], "function", ["None"], ["", "def", "show_bboxes", "(", "image", ",", "bboxes", ")", ":", "\n", "    ", "\"\"\"\n    :param image: colorful or grey image\n    :param bboxes: [[x,y,w,h], ...]\n    :return:\n    \"\"\"", "\n", "h", ",", "w", "=", "image", ".", "shape", "\n", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "]", "=", "image", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'bboxes results'", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "for", "cls_box", "in", "bboxes", ":", "\n", "        ", "x_0", "=", "cls_box", "[", "0", "]", "\n", "x_1", "=", "cls_box", "[", "0", "]", "+", "cls_box", "[", "2", "]", "\n", "y_0", "=", "cls_box", "[", "1", "]", "\n", "y_1", "=", "cls_box", "[", "1", "]", "+", "cls_box", "[", "3", "]", "\n", "cv2", ".", "rectangle", "(", "draw_im", ",", "(", "x_0", ",", "y_0", ")", ",", "(", "x_1", ",", "y_1", ")", ",", "color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "thickness", "=", "2", ")", "\n", "\n", "", "cv2", ".", "imwrite", "(", "'detect_results.jpg'", ",", "draw_im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.get_topk_boxes": [[7, 53], ["max", "cv2.imread", "numpy.shape", "vistools.norm_atten_map", "cv2.resize", "maxk_maps.append", "numpy.argsort", "cv2.resize.copy", "scipy.ndimage.label", "range", "maxk_boxes.append", "localization.extract_bbox_from_map", "localization.extract_bbox_from_map", "maxk_boxes.append", "KeyError"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.extract_bbox_from_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.extract_bbox_from_map"], ["def", "get_topk_boxes", "(", "logits", ",", "cam_map", ",", "im_file", ",", "input_size", ",", "crop_size", ",", "topk", "=", "(", "1", ",", ")", ",", "threshold", "=", "0.2", ",", "mode", "=", "'union'", ",", "gt", "=", "None", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "maxk_cls", "=", "np", ".", "argsort", "(", "logits", ")", "[", ":", ":", "-", "1", "]", "[", ":", "maxk", "]", "\n", "\n", "# get original image size and scale", "\n", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "\n", "maxk_boxes", "=", "[", "]", "\n", "maxk_maps", "=", "[", "]", "\n", "for", "cls", "in", "maxk_cls", ":", "\n", "        ", "if", "gt", ":", "\n", "            ", "cls", "=", "gt", "\n", "", "cam_map_", "=", "cam_map", "[", "0", ",", "cls", ",", ":", ",", ":", "]", "\n", "cam_map_", "=", "norm_atten_map", "(", "cam_map_", ")", "# normalize cam map", "\n", "cam_map_cls", "=", "cv2", ".", "resize", "(", "cam_map_", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "maxk_maps", ".", "append", "(", "cam_map_cls", ".", "copy", "(", ")", ")", "\n", "\n", "# segment the foreground", "\n", "fg_map", "=", "cam_map_cls", ">=", "threshold", "\n", "\n", "if", "mode", "==", "'max'", ":", "\n", "            ", "objects", ",", "count", "=", "label", "(", "fg_map", ")", "\n", "max_area", "=", "0", "\n", "max_box", "=", "None", "\n", "for", "idx", "in", "range", "(", "1", ",", "count", "+", "1", ")", ":", "\n", "                ", "obj", "=", "(", "objects", "==", "idx", ")", "\n", "box", "=", "extract_bbox_from_map", "(", "obj", ")", "\n", "area", "=", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", "+", "1", ")", "*", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", "+", "1", ")", "\n", "if", "area", ">", "max_area", ":", "\n", "                    ", "max_area", "=", "area", "\n", "max_box", "=", "box", "\n", "", "", "if", "max_box", "is", "None", ":", "\n", "                ", "max_box", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "", "max_box", "=", "(", "cls", ",", ")", "+", "max_box", "\n", "maxk_boxes", ".", "append", "(", "max_box", ")", "\n", "", "elif", "mode", "==", "'union'", ":", "\n", "            ", "box", "=", "extract_bbox_from_map", "(", "fg_map", ")", "\n", "maxk_boxes", ".", "append", "(", "(", "cls", ",", ")", "+", "box", ")", "\n", "# maxk_boxes.append((cls, int(box[0] / scale), int(box[1] / scale), int(box[2] / scale), int(box[3] / scale)))", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'invalid mode! Please set the mode in [\\'max\\', \\'union\\']'", ")", "\n", "\n", "", "", "result", "=", "[", "maxk_boxes", "[", ":", "k", "]", "for", "k", "in", "topk", "]", "\n", "\n", "return", "result", ",", "maxk_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.get_topk_boxes_hier": [[54, 149], ["logits3.data.cpu().numpy.data.cpu().numpy", "max", "cv2.imread", "numpy.shape", "range", "logits2.data.cpu().numpy.data.cpu().numpy", "logits1.data.cpu().numpy.data.cpu().numpy", "cam_map_0.data.cpu().numpy.data.cpu().numpy", "cam_map_1.data.cpu().numpy.data.cpu().numpy", "cam_map_2.data.cpu().numpy.data.cpu().numpy", "cam_map.data.cpu().numpy.data.cpu().numpy", "parent_map.data.cpu().numpy.data.cpu().numpy", "root_map.data.cpu().numpy.data.cpu().numpy", "cv2.resize", "maxk_maps.append", "logits3.data.cpu().numpy.data.cpu", "numpy.argsort", "cv2.resize.copy", "scipy.ndimage.label", "range", "maxk_boxes.append", "logits2.data.cpu().numpy.data.cpu", "logits1.data.cpu().numpy.data.cpu", "cam_map_0.data.cpu().numpy.data.cpu", "cam_map_1.data.cpu().numpy.data.cpu", "cam_map_2.data.cpu().numpy.data.cpu", "cam_map.data.cpu().numpy.data.cpu", "parent_map.data.cpu().numpy.data.cpu", "root_map.data.cpu().numpy.data.cpu", "numpy.argsort", "numpy.argsort", "vistools.norm_atten_map", "vistools.norm_atten_map", "vistools.norm_atten_map", "vistools.norm_atten_map", "vistools.norm_atten_map", "localization.extract_bbox_from_map", "localization.extract_bbox_from_map", "maxk_boxes.append", "KeyError"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.extract_bbox_from_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.extract_bbox_from_map"], ["", "def", "get_topk_boxes_hier", "(", "logits", ",", "cam_map", ",", "im_file", ",", "gt_label", ",", "topk", "=", "(", "1", ",", ")", ",", "threshold", "=", "0.2", ",", "mode", "=", "'union'", ")", ":", "\n", "    ", "logits", "=", "logits", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cam_map", "=", "cam_map", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "species_cls", "=", "np", ".", "argsort", "(", "logits", ")", "[", ":", ":", "-", "1", "]", "[", ":", "maxk", "]", "\n", "\n", "# get original image size and scale", "\n", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "\n", "maxk_boxes", "=", "[", "]", "\n", "maxk_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "maxk", ")", ":", "\n", "        ", "cam_map_", "=", "cam_map", "[", "0", ",", "species_cls", "[", "i", "]", ",", ":", ",", ":", "]", "\n", "cam_map_", "=", "norm_atten_map", "(", "cam_map_", ")", "# normalize cam map", "\n", "cam_map_cls", "=", "cv2", ".", "resize", "(", "cam_map_", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "maxk_maps", ".", "append", "(", "cam_map_cls", ".", "copy", "(", ")", ")", "\n", "# segment the foreground", "\n", "fg_map", "=", "cam_map_cls", ">=", "threshold", "\n", "\n", "if", "mode", "==", "'max'", ":", "\n", "            ", "objects", ",", "count", "=", "label", "(", "fg_map", ")", "\n", "max_area", "=", "0", "\n", "max_box", "=", "None", "\n", "for", "idx", "in", "range", "(", "1", ",", "count", "+", "1", ")", ":", "\n", "                ", "obj", "=", "(", "objects", "==", "idx", ")", "\n", "box", "=", "extract_bbox_from_map", "(", "obj", ")", "\n", "area", "=", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", "+", "1", ")", "*", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", "+", "1", ")", "\n", "if", "area", ">", "max_area", ":", "\n", "                    ", "max_area", "=", "area", "\n", "max_box", "=", "box", "\n", "", "", "if", "max_box", "is", "None", ":", "\n", "                ", "max_box", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "", "max_box", "=", "(", "species_cls", "[", "i", "]", ",", ")", "+", "max_box", "\n", "maxk_boxes", ".", "append", "(", "max_box", ")", "\n", "", "elif", "mode", "==", "'union'", ":", "\n", "            ", "box", "=", "extract_bbox_from_map", "(", "fg_map", ")", "\n", "maxk_boxes", ".", "append", "(", "(", "species_cls", "[", "i", "]", ",", ")", "+", "box", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'invalid mode! Please set the mode in [\\'max\\', \\'union\\']'", ")", "\n", "\n", "", "", "result", "=", "[", "maxk_boxes", "[", ":", "k", "]", "for", "k", "in", "topk", "]", "\n", "# gt_known", "\n", "gt_known_boxes", "=", "[", "]", "\n", "gt_known_maps", "=", "[", "]", "\n", "cam_map_", "=", "cam_map", "[", "0", ",", "int", "(", "gt_label", "[", "0", "]", ")", ",", ":", ",", ":", "]", "\n", "cam_map_", "=", "norm_atten_map", "(", "cam_map_", ")", "# normalize cam map", "\n", "cam_map_gt_known", "=", "cv2", ".", "resize", "(", "cam_map_", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "gt_known_maps", ".", "append", "(", "cam_map_gt_known", ".", "copy", "(", ")", ")", "\n", "# segment the foreground", "\n", "fg_map", "=", "cam_map_gt_known", ">=", "threshold", "\n", "\n", "if", "mode", "==", "'max'", ":", "\n", "        ", "objects", ",", "count", "=", "label", "(", "fg_map", ")", "\n", "max_area", "=", "0", "\n", "max_box", "=", "None", "\n", "for", "idx", "in", "range", "(", "1", ",", "count", "+", "1", ")", ":", "\n", "            ", "obj", "=", "(", "objects", "==", "idx", ")", "\n", "box", "=", "extract_bbox_from_map", "(", "obj", ")", "\n", "area", "=", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", "+", "1", ")", "*", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", "+", "1", ")", "\n", "if", "area", ">", "max_area", ":", "\n", "                ", "max_area", "=", "area", "\n", "max_box", "=", "box", "\n", "", "", "if", "max_box", "is", "None", ":", "\n", "            ", "max_box", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "", "max_box", "=", "(", "int", "(", "gt_label", "[", "0", "]", ")", ",", ")", "+", "max_box", "\n", "gt_known_boxes", ".", "append", "(", "max_box", ")", "\n", "", "elif", "mode", "==", "'union'", ":", "\n", "        ", "box", "=", "extract_bbox_from_map", "(", "fg_map", ")", "\n", "gt_known_boxes", ".", "append", "(", "(", "int", "(", "gt_label", "[", "0", "]", ")", ",", ")", "+", "box", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'invalid mode! Please set the mode in [\\'max\\', \\'union\\']'", ")", "\n", "\n", "", "return", "result", ",", "maxk_maps", ",", "gt_known_boxes", ",", "gt_known_maps", "\n", "\n", "", "def", "get_topk_boxes_hier_scg", "(", "logits", ",", "top_cams", ",", "sc_maps", ",", "im_file", ",", "topk", "=", "(", "1", ",", ")", ",", "gt_labels", "=", "None", ",", "threshold", "=", "0.2", ",", "\n", "mode", "=", "'union'", ",", "fg_th", "=", "0.1", ",", "bg_th", "=", "0.05", ",", "sc_maps_fo", "=", "None", ")", ":", "\n", "    ", "logits", "=", "logits", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "species_cls", "=", "np", ".", "argsort", "(", "logits", ")", "[", ":", ":", "-", "1", "]", "[", ":", "maxk", "]", "\n", "if", "isinstance", "(", "sc_maps", ",", "tuple", ")", "or", "isinstance", "(", "sc_maps", ",", "list", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "sc_maps", "=", "[", "sc_maps", "]", "\n", "", "if", "sc_maps_fo", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "sc_maps_fo", ",", "tuple", ")", "or", "isinstance", "(", "sc_maps_fo", ",", "list", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "sc_maps_fo", "=", "[", "sc_maps_fo", "]", "\n", "# get original image size and scale", "\n", "", "", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "maxk_boxes", "=", "[", "]", "\n", "maxk_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "maxk", ")", ":", "\n", "        ", "sc_map_cls", "=", "0", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.get_topk_boxes_hier_scg": [[129, 227], ["logits.data.cpu().numpy.data.cpu().numpy", "max", "cv2.imread", "numpy.shape", "range", "isinstance", "isinstance", "enumerate", "maxk_maps.append", "logits.data.cpu().numpy.data.cpu", "numpy.argsort", "isinstance", "isinstance", "sc_map.squeeze().data.cpu().numpy.squeeze().data.cpu().numpy", "cv2.resize", "cv2.resize.reshape", "numpy.arange().astype", "cv2.resize", "numpy.maximum", "np.maximum.copy", "scipy.ndimage.label", "range", "maxk_boxes.append", "int", "int", "numpy.sum().reshape", "sc_map_fo.squeeze().data.cpu().numpy.squeeze().data.cpu().numpy", "numpy.sum().reshape", "localization.extract_bbox_from_map", "localization.extract_bbox_from_map", "KeyError", "sc_map.squeeze().data.cpu().numpy.squeeze().data.cpu", "numpy.sqrt", "numpy.sqrt", "numpy.arange", "numpy.min", "numpy.min", "numpy.min", "maxk_boxes.append", "maxk_boxes.append", "numpy.max", "numpy.min", "numpy.sum", "numpy.min", "sc_map_fo.squeeze().data.cpu().numpy.squeeze().data.cpu", "numpy.max", "numpy.min", "numpy.sum", "numpy.min", "numpy.max", "numpy.min", "int", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "sc_map.squeeze().data.cpu().numpy.squeeze", "int", "sc_map_fo.squeeze().data.cpu().numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.extract_bbox_from_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.extract_bbox_from_map"], ["", "def", "get_topk_boxes_hier_scg", "(", "logits", ",", "top_cams", ",", "sc_maps", ",", "im_file", ",", "topk", "=", "(", "1", ",", ")", ",", "gt_labels", "=", "None", ",", "threshold", "=", "0.2", ",", "\n", "mode", "=", "'union'", ",", "fg_th", "=", "0.1", ",", "bg_th", "=", "0.05", ",", "sc_maps_fo", "=", "None", ")", ":", "\n", "    ", "logits", "=", "logits", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "species_cls", "=", "np", ".", "argsort", "(", "logits", ")", "[", ":", ":", "-", "1", "]", "[", ":", "maxk", "]", "\n", "if", "isinstance", "(", "sc_maps", ",", "tuple", ")", "or", "isinstance", "(", "sc_maps", ",", "list", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "sc_maps", "=", "[", "sc_maps", "]", "\n", "", "if", "sc_maps_fo", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "sc_maps_fo", ",", "tuple", ")", "or", "isinstance", "(", "sc_maps_fo", ",", "list", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "sc_maps_fo", "=", "[", "sc_maps_fo", "]", "\n", "# get original image size and scale", "\n", "", "", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "maxk_boxes", "=", "[", "]", "\n", "maxk_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "maxk", ")", ":", "\n", "        ", "sc_map_cls", "=", "0", "\n", "for", "j", ",", "sc_map", "in", "enumerate", "(", "sc_maps", ")", ":", "\n", "            ", "cam_map_cls", "=", "top_cams", "[", "i", "]", "\n", "sc_map", "=", "sc_map", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "wh_sc", "=", "sc_map", ".", "shape", "[", "0", "]", "\n", "h_sc", ",", "w_sc", "=", "int", "(", "np", ".", "sqrt", "(", "wh_sc", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "wh_sc", ")", ")", "\n", "cam_map_cls", "=", "cv2", ".", "resize", "(", "cam_map_cls", ",", "dsize", "=", "(", "w_sc", ",", "h_sc", ")", ")", "\n", "cam_map_cls_vector", "=", "cam_map_cls", ".", "reshape", "(", "-", "1", ")", "\n", "#positive", "\n", "cam_map_cls_id", "=", "np", ".", "arange", "(", "wh_sc", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "cam_map_cls_th_ind_pos", "=", "cam_map_cls_id", "[", "cam_map_cls_vector", ">=", "fg_th", "]", "\n", "sc_map_sel_pos", "=", "sc_map", "[", ":", ",", "cam_map_cls_th_ind_pos", "]", "\n", "sc_map_sel_pos", "=", "(", "sc_map_sel_pos", "-", "np", ".", "min", "(", "sc_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "sc_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "min", "(", "sc_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-10", ")", "\n", "# cam_map_cls_val_pos = cam_map_cls_vector[cam_map_cls_th_ind_pos].reshape(1,-1)", "\n", "# aff_map_sel_pos = np.sum(aff_map_sel_pos * cam_map_cls_val_pos, axis=1).reshape(h_aff, w_aff)", "\n", "if", "sc_map_sel_pos", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "                ", "sc_map_sel_pos", "=", "np", ".", "sum", "(", "sc_map_sel_pos", ",", "axis", "=", "1", ")", ".", "reshape", "(", "h_sc", ",", "w_sc", ")", "\n", "sc_map_sel_pos", "=", "(", "sc_map_sel_pos", "-", "np", ".", "min", "(", "sc_map_sel_pos", ")", ")", "/", "(", "np", ".", "max", "(", "sc_map_sel_pos", ")", "-", "np", ".", "min", "(", "sc_map_sel_pos", ")", "+", "1e-10", ")", "\n", "", "else", ":", "\n", "                ", "sc_map_sel_pos", "=", "0", "\n", "#negtive", "\n", "", "cam_map_cls_th_ind_neg", "=", "cam_map_cls_id", "[", "cam_map_cls_vector", "<=", "bg_th", "]", "\n", "if", "sc_maps_fo", "is", "not", "None", ":", "\n", "                ", "sc_map_fo", "=", "sc_maps_fo", "[", "j", "]", "\n", "sc_map_fo", "=", "sc_map_fo", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sc_map_sel_neg", "=", "sc_map_fo", "[", ":", ",", "cam_map_cls_th_ind_neg", "]", "\n", "", "else", ":", "\n", "                ", "sc_map_sel_neg", "=", "sc_map", "[", ":", ",", "cam_map_cls_th_ind_neg", "]", "\n", "", "sc_map_sel_neg", "=", "(", "sc_map_sel_neg", "-", "np", ".", "min", "(", "sc_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "sc_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "min", "(", "sc_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-10", ")", "\n", "# cam_map_cls_val_neg = cam_map_cls_vector[cam_map_cls_th_ind_neg].reshape(1, -1)", "\n", "# aff_map_sel_neg = np.sum(aff_map_sel_neg * (1-cam_map_cls_val_neg), axis=1).reshape(h_aff, w_aff)", "\n", "if", "sc_map_sel_neg", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "                ", "sc_map_sel_neg", "=", "np", ".", "sum", "(", "sc_map_sel_neg", ",", "axis", "=", "1", ")", ".", "reshape", "(", "h_sc", ",", "w_sc", ")", "\n", "sc_map_sel_neg", "=", "(", "sc_map_sel_neg", "-", "np", ".", "min", "(", "sc_map_sel_neg", ")", ")", "/", "(", "np", ".", "max", "(", "sc_map_sel_neg", ")", "-", "np", ".", "min", "(", "sc_map_sel_neg", ")", "+", "1e-10", ")", "\n", "", "else", ":", "\n", "                ", "sc_map_sel_neg", "=", "0", "\n", "", "sc_map_cls_i", "=", "sc_map_sel_pos", "-", "sc_map_sel_neg", "\n", "# aff_map_cls_i = aff_map_sel_pos", "\n", "sc_map_cls_i", "=", "sc_map_cls_i", "*", "(", "sc_map_cls_i", ">=", "0", ")", "\n", "sc_map_cls_i", "=", "(", "sc_map_cls_i", "-", "np", ".", "min", "(", "sc_map_cls_i", ")", ")", "/", "(", "np", ".", "max", "(", "sc_map_cls_i", ")", "-", "np", ".", "min", "(", "sc_map_cls_i", ")", "+", "1e-10", ")", "\n", "sc_map_cls_i", "=", "cv2", ".", "resize", "(", "sc_map_cls_i", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "sc_map_cls", "=", "np", ".", "maximum", "(", "sc_map_cls", ",", "sc_map_cls_i", ")", "\n", "# aff_map_cls = (aff_map_cls - np.min(aff_map_cls)) / (np.max(aff_map_cls) + 1e-10)", "\n", "", "maxk_maps", ".", "append", "(", "sc_map_cls", ".", "copy", "(", ")", ")", "\n", "# segment the foreground", "\n", "fg_map", "=", "sc_map_cls", ">=", "threshold", "\n", "\n", "if", "mode", "==", "'max'", ":", "\n", "            ", "objects", ",", "count", "=", "label", "(", "fg_map", ")", "\n", "max_area", "=", "0", "\n", "max_box", "=", "None", "\n", "for", "idx", "in", "range", "(", "1", ",", "count", "+", "1", ")", ":", "\n", "                ", "obj", "=", "(", "objects", "==", "idx", ")", "\n", "box", "=", "extract_bbox_from_map", "(", "obj", ")", "\n", "area", "=", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", "+", "1", ")", "*", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", "+", "1", ")", "\n", "if", "area", ">", "max_area", ":", "\n", "                    ", "max_area", "=", "area", "\n", "max_box", "=", "box", "\n", "", "", "if", "max_box", "is", "None", ":", "\n", "                ", "max_box", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "                ", "max_box", "=", "(", "int", "(", "gt_labels", "[", "0", "]", ")", ",", ")", "+", "max_box", "\n", "", "else", ":", "\n", "                ", "max_box", "=", "(", "species_cls", "[", "i", "]", ",", ")", "+", "max_box", "\n", "", "maxk_boxes", ".", "append", "(", "max_box", ")", "\n", "", "elif", "mode", "==", "'union'", ":", "\n", "            ", "box", "=", "extract_bbox_from_map", "(", "fg_map", ")", "\n", "if", "gt_labels", "is", "not", "None", ":", "\n", "                ", "maxk_boxes", ".", "append", "(", "(", "int", "(", "gt_labels", "[", "0", "]", ")", ",", ")", "+", "box", ")", "\n", "", "else", ":", "\n", "                ", "maxk_boxes", ".", "append", "(", "(", "species_cls", "[", "i", "]", ",", ")", "+", "box", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'invalid mode! Please set the mode in [\\'max\\', \\'union\\']'", ")", "\n", "\n", "", "", "result", "=", "[", "maxk_boxes", "[", ":", "k", "]", "for", "k", "in", "topk", "]", "\n", "return", "result", ",", "maxk_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.get_masks": [[233, 258], ["max", "cv2.imread", "numpy.shape", "range", "cam_map_cls.append", "maxk_maps.append", "numpy.argsort", "numpy.argsort", "numpy.argsort", "numpy.array().copy", "numpy.array"], "function", ["None"], ["\n", "# get original image size and scale", "\n", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "\n", "\n", "maxk_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "        ", "cam_map_", "=", "cam_map", "[", "0", ",", "species_cls", "[", "i", "]", ",", ":", ",", ":", "]", "\n", "parent_map_", "=", "parent_map", "[", "0", ",", "parent_cls", "[", "i", "]", ",", ":", ",", ":", "]", "\n", "root_map_", "=", "root_map", "[", "0", ",", "root_cls", "[", "i", "]", ",", ":", ",", ":", "]", "\n", "\n", "cam_map_cls", "=", "[", "cam_map_", ",", "parent_map_", ",", "root_map_", "]", "\n", "cam_map_", "=", "(", "cam_map_", "+", "parent_map_", "+", "root_map_", ")", "/", "3", "\n", "# cam_map_ = norm_atten_map(cam_map_)  # normalize cam map", "\n", "cam_map_cls", ".", "append", "(", "cam_map_", ")", "\n", "maxk_maps", ".", "append", "(", "np", ".", "array", "(", "cam_map_cls", ")", ".", "copy", "(", ")", ")", "\n", "\n", "\n", "", "return", "maxk_maps", "\n", "\n", "", "def", "extract_bbox_from_map", "(", "boolen_map", ")", ":", "\n", "    ", "assert", "boolen_map", ".", "ndim", "==", "2", ",", "'Invalid input shape'", "\n", "rows", "=", "np", ".", "any", "(", "boolen_map", ",", "axis", "=", "1", ")", "\n", "cols", "=", "np", ".", "any", "(", "boolen_map", ",", "axis", "=", "0", ")", "\n", "if", "rows", ".", "max", "(", ")", "==", "False", "or", "cols", ".", "max", "(", ")", "==", "False", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.extract_bbox_from_map": [[259, 268], ["numpy.any", "numpy.any", "np.any.max", "np.any.max", "numpy.where", "numpy.where"], "function", ["None"], ["        ", "return", "0", ",", "0", ",", "0", ",", "0", "\n", "", "ymin", ",", "ymax", "=", "np", ".", "where", "(", "rows", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "xmin", ",", "xmax", "=", "np", ".", "where", "(", "cols", ")", "[", "0", "]", "[", "[", "0", ",", "-", "1", "]", "]", "\n", "return", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "\n", "", ""]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset.__init__": [[10, 36], ["mydataset.dataset.read_labeled_image_list"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset_with_mask.read_labeled_image_list"], ["def", "__init__", "(", "self", ",", "\n", "datalist_file", ",", "\n", "root_dir", ",", "transform", "=", "None", ",", "\n", "with_path", "=", "False", ",", "\n", "onehot_label", "=", "False", ",", "\n", "num_classes", "=", "20", ",", "\n", "blur", "=", "None", ",", "\n", "dataset", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            csv_file (string): Path to the csv file with annotations.\n            root_dir (string): Directory with all the images.\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n        \"\"\"", "\n", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "with_path", "=", "with_path", "\n", "self", ".", "datalist_file", "=", "datalist_file", "\n", "self", ".", "image_list", ",", "self", ".", "label_list", "=", "self", ".", "read_labeled_image_list", "(", "self", ".", "root_dir", ",", "self", ".", "datalist_file", ",", "dataset", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "onehot_label", "=", "onehot_label", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "blur", "=", "blur", "\n", "self", ".", "trainFlag", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset.__len__": [[37, 39], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset.__getitem__": [[40, 63], ["os.path.exists", "PIL.Image.open().convert", "numpy.asarray", "mydataset.dataset.blur.augment_image", "PIL.Image.fromarray", "mydataset.dataset.save_img", "mydataset.dataset.transform", "numpy.zeros", "mydataset.dataset.label_list[].astype", "PIL.Image.open", "mydataset.dataset.label_list[].astype"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset.save_img"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_name", "=", "self", ".", "image_list", "[", "idx", "]", "\n", "assert", "os", ".", "path", ".", "exists", "(", "img_name", ")", ",", "'file {} not exits'", ".", "format", "(", "img_name", ")", "\n", "image", "=", "Image", ".", "open", "(", "img_name", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "blur", "is", "not", "None", ":", "\n", "            ", "img", "=", "np", ".", "asarray", "(", "image", ")", "\n", "image", "=", "self", ".", "blur", ".", "augment_image", "(", "img", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "self", ".", "save_img", "(", "image", ",", "img_name", ")", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "onehot_label", ":", "\n", "            ", "gt_label", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_label", "[", "self", ".", "label_list", "[", "idx", "]", ".", "astype", "(", "int", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "gt_label", "=", "self", ".", "label_list", "[", "idx", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "if", "self", ".", "with_path", ":", "\n", "            ", "return", "img_name", ",", "image", ",", "gt_label", "\n", "", "else", ":", "\n", "            ", "return", "image", ",", "gt_label", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset.save_img": [[64, 68], ["os.path.join", "image.save", "img_path.split"], "methods", ["None"], ["", "", "def", "save_img", "(", "self", ",", "image", ",", "img_path", ",", "save_dir", "=", "'./'", ")", ":", "\n", "        ", "img_name", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "img_name", ")", "\n", "image", ".", "save", "(", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset.read_labeled_image_list": [[69, 104], ["open", "img_name_list.append", "img_labels.append", "line.strip().split.strip().split.strip().split", "os.path.join", "numpy.asarray", "len", "line.strip().split.strip().split.strip().split", "int", "line.strip().split.strip().split.strip().split", "map", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip().split", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip", "print"], "methods", ["None"], ["", "def", "read_labeled_image_list", "(", "self", ",", "data_dir", ",", "data_list", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"\n        Reads txt file containing paths to images and ground truth masks.\n\n        Args:\n          data_dir: path to the directory with images and masks.\n          data_list: path to the file with lines of the form '/path/to/image /path/to/mask'.\n\n        Returns:\n          Two lists with all file names for images and masks, respectively.\n        \"\"\"", "\n", "f", "=", "open", "(", "data_list", ",", "'r'", ")", "\n", "img_name_list", "=", "[", "]", "\n", "img_labels", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "            ", "if", "';'", "in", "line", ":", "\n", "                ", "image", ",", "labels", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "';'", ")", "\n", "", "else", ":", "\n", "                ", "if", "len", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "==", "2", ":", "\n", "                    ", "image", ",", "labels", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "'.'", "not", "in", "image", ":", "\n", "                        ", "if", "dataset", "==", "'cub'", ":", "\n", "                            ", "image", "+=", "'.jpg'", "\n", "", "elif", "dataset", "==", "'ilsvrc'", ":", "\n", "                            ", "image", "+=", "'.JPEG'", "\n", "", "else", ":", "\n", "                            ", "print", "(", "'Wrong dataset.'", ")", "\n", "", "", "labels", "=", "int", "(", "labels", ")", "\n", "", "else", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "image", "=", "line", "[", "0", "]", "\n", "labels", "=", "map", "(", "int", ",", "line", "[", "1", ":", "]", ")", "\n", "", "", "img_name_list", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "image", ")", ")", "\n", "img_labels", ".", "append", "(", "np", ".", "asarray", "(", "labels", ")", ")", "\n", "", "return", "img_name_list", ",", "img_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.DataSetILSVRC.__init__": [[106, 128], ["mydataset.DataSetILSVRC.read_labeled_image_list"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset_with_mask.read_labeled_image_list"], ["    ", "def", "__init__", "(", "self", ",", "\n", "datalist", ",", "\n", "root_dir", ",", "transform", "=", "None", ",", "\n", "with_path", "=", "False", ",", "\n", "onehot_label", "=", "False", ",", "\n", "num_classes", "=", "1000", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            csv_file (string): Path to the csv file with annotations.\n            root_dir (string): Directory with all the images.\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n        \"\"\"", "\n", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "with_path", "=", "with_path", "\n", "self", ".", "datalist_file", "=", "datalist", "\n", "self", ".", "image_list", ",", "self", ".", "label_list", "=", "self", ".", "read_labeled_image_list", "(", "self", ".", "root_dir", ",", "self", ".", "datalist_file", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "onehot_label", "=", "onehot_label", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.DataSetILSVRC.__len__": [[129, 131], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.DataSetILSVRC.__getitem__": [[132, 146], ["os.path.exists", "PIL.Image.open().convert", "mydataset.DataSetILSVRC.label_list[].astype", "mydataset.DataSetILSVRC.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_name", "=", "self", ".", "image_list", "[", "idx", "]", "\n", "assert", "os", ".", "path", ".", "exists", "(", "img_name", ")", ",", "'file {} not exits'", ".", "format", "(", "img_name", ")", "\n", "image", "=", "Image", ".", "open", "(", "img_name", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "gt_label", "=", "self", ".", "label_list", "[", "idx", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "with_path", ":", "\n", "            ", "return", "img_name", ",", "image", ",", "gt_label", "\n", "", "else", ":", "\n", "            ", "return", "image", ",", "gt_label", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.DataSetILSVRC.read_labeled_image_list": [[148, 178], ["open", "img_name_list.append", "img_labels.append", "line.strip().split.strip().split.strip().split", "os.path.join", "numpy.asarray", "len", "line.strip().split.strip().split.strip().split", "int", "line.strip().split.strip().split.strip().split", "map", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip().split", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip"], "methods", ["None"], ["", "", "def", "read_labeled_image_list", "(", "self", ",", "data_dir", ",", "data_list", ")", ":", "\n", "        ", "\"\"\"\n        Reads txt file containing paths to images and ground truth masks.\n\n        Args:\n          data_dir: path to the directory with images and masks.\n          data_list: path to the file with lines of the form '/path/to/image /path/to/mask'.\n\n        Returns:\n          Two lists with all file names for images and masks, respectively.\n        \"\"\"", "\n", "f", "=", "open", "(", "data_list", ",", "'r'", ")", "\n", "img_name_list", "=", "[", "]", "\n", "img_labels", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "            ", "if", "';'", "in", "line", ":", "\n", "                ", "image", ",", "labels", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "';'", ")", "\n", "", "else", ":", "\n", "                ", "if", "len", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "==", "2", ":", "\n", "                    ", "image", ",", "labels", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "'.'", "not", "in", "image", ":", "\n", "                        ", "image", "+=", "'.JPEG'", "\n", "", "labels", "=", "int", "(", "labels", ")", "\n", "", "else", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "image", "=", "line", "[", "0", "]", "\n", "labels", "=", "map", "(", "int", ",", "line", "[", "1", ":", "]", ")", "\n", "", "", "img_name_list", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "image", ")", ")", "\n", "img_labels", ".", "append", "(", "np", ".", "asarray", "(", "labels", ")", ")", "\n", "", "return", "img_name_list", ",", "img_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset_with_mask.__init__": [[191, 206], ["mydataset.dataset_with_mask.read_labeled_image_list"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset_with_mask.read_labeled_image_list"], ["def", "__init__", "(", "self", ",", "datalist_file", ",", "root_dir", ",", "mask_dir", ",", "transform", "=", "None", ",", "with_path", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            csv_file (string): Path to the csv file with annotations.\n            root_dir (string): Directory with all the images.\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n        \"\"\"", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "mask_dir", "=", "mask_dir", "\n", "self", ".", "with_path", "=", "with_path", "\n", "self", ".", "datalist_file", "=", "datalist_file", "\n", "self", ".", "image_list", ",", "self", ".", "label_list", "=", "self", ".", "read_labeled_image_list", "(", "self", ".", "root_dir", ",", "self", ".", "datalist_file", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset_with_mask.__len__": [[207, 209], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset_with_mask.__getitem__": [[210, 227], ["os.path.join", "PIL.Image.open().convert", "os.path.join", "cv2.imread", "mydataset.dataset_with_mask.transform", "PIL.Image.open", "mydataset.get_name_id"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.get_name_id"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "image_list", "[", "idx", "]", ")", "\n", "image", "=", "Image", ".", "open", "(", "img_name", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "mask_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "mask_dir", ",", "get_name_id", "(", "self", ".", "image_list", "[", "idx", "]", ")", "+", "'.png'", ")", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_name", ")", "\n", "mask", "[", "mask", "==", "0", "]", "=", "255", "\n", "mask", "=", "mask", "-", "1", "\n", "mask", "[", "mask", "==", "254", "]", "=", "255", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "with_path", ":", "\n", "            ", "return", "img_name", ",", "image", ",", "mask", ",", "self", ".", "label_list", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "image", ",", "mask", ",", "self", ".", "label_list", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.dataset_with_mask.read_labeled_image_list": [[228, 258], ["open", "img_name_list.append", "img_labels.append", "numpy.array", "line.strip().split.strip().split.strip().split", "os.path.join", "len", "line.strip().split.strip().split.strip().split", "int", "line.strip().split.strip().split.strip().split", "map", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip().split", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip", "line.strip().split.strip().split.strip"], "methods", ["None"], ["", "", "def", "read_labeled_image_list", "(", "self", ",", "data_dir", ",", "data_list", ")", ":", "\n", "        ", "\"\"\"\n        Reads txt file containing paths to images and ground truth masks.\n\n        Args:\n          data_dir: path to the directory with images and masks.\n          data_list: path to the file with lines of the form '/path/to/image /path/to/mask'.\n\n        Returns:\n          Two lists with all file names for images and masks, respectively.\n        \"\"\"", "\n", "f", "=", "open", "(", "data_list", ",", "'r'", ")", "\n", "img_name_list", "=", "[", "]", "\n", "img_labels", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "            ", "if", "';'", "in", "line", ":", "\n", "                ", "image", ",", "labels", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "';'", ")", "\n", "", "else", ":", "\n", "                ", "if", "len", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "==", "2", ":", "\n", "                    ", "image", ",", "labels", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "'.'", "not", "in", "image", ":", "\n", "                        ", "image", "+=", "'.jpg'", "\n", "", "labels", "=", "int", "(", "labels", ")", "\n", "", "else", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "image", "=", "line", "[", "0", "]", "\n", "labels", "=", "map", "(", "int", ",", "line", "[", "1", ":", "]", ")", "\n", "", "", "img_name_list", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "image", ")", ")", "\n", "img_labels", ".", "append", "(", "labels", ")", "\n", "", "return", "img_name_list", ",", "np", ".", "array", "(", "img_labels", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.mydataset.get_name_id": [[183, 187], ["name_path.strip().split", "name_id.strip().split", "name_path.strip", "name_id.strip"], "function", ["None"], ["", "", "def", "get_name_id", "(", "name_path", ")", ":", "\n", "    ", "name_id", "=", "name_path", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "name_id", "=", "name_id", ".", "strip", "(", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "return", "name_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.segmentation.mask_retrieval": [[4, 70], ["class_response_maps.squeeze().cpu().numpy.squeeze().cpu().numpy", "peak_list.cpu().numpy.cpu().numpy", "peak_response_maps.cpu().numpy.cpu().numpy", "retrieval_cfg.get", "retrieval_cfg.get", "retrieval_cfg.get", "retrieval_cfg.get", "retrieval_cfg.get", "retrieval_cfg.get", "range", "sorted", "len", "isinstance", "imresize", "range", "instance_nms", "dict", "class_response_maps.squeeze().cpu().numpy.squeeze().cpu", "peak_list.cpu().numpy.cpu", "peak_response_maps.cpu().numpy.cpu", "isinstance", "min", "imresize", "cv2.morphologyEx().astype", "imresize.astype", "raw_mask.astype.sum", "instance_nms.append", "sorted", "TypeError", "len", "proposals[].astype", "class_response_maps.squeeze().cpu().numpy.squeeze", "cv2.morphologyEx", "imresize.mean", "numpy.ones", "peak_response_map[].sum", "bg_response[].sum", "peak_response_map[].sum"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.get", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.get", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.get", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.get", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.get", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.get"], ["def", "mask_retrieval", "(", "class_response_maps", ",", "peak_list", ",", "peak_response_maps", ",", "retrieval_cfg", ")", ":", "\n", "# cast tensors to numpy array", "\n", "        ", "class_response_maps", "=", "class_response_maps", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "peak_list", "=", "peak_list", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "peak_response_maps", "=", "peak_response_maps", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "img_height", ",", "img_width", "=", "peak_response_maps", ".", "shape", "[", "1", "]", ",", "peak_response_maps", ".", "shape", "[", "2", "]", "\n", "img_area", "=", "img_height", "*", "img_width", "\n", "\n", "# parse configuration", "\n", "proposals", "=", "retrieval_cfg", "[", "'proposals'", "]", "# segment proposals off-the-shelf", "\n", "contour_width", "=", "retrieval_cfg", ".", "get", "(", "'contour_width'", ",", "5", ")", "# proposal contour width", "\n", "proposal_size_limit", "=", "retrieval_cfg", ".", "get", "(", "'proposal_size_limit'", ",", "(", "0.00002", ",", "0.85", ")", ")", "# limit range of proposal size", "\n", "proposal_count", "=", "retrieval_cfg", ".", "get", "(", "'proposal_count'", ",", "100", ")", "# selected number of proposals", "\n", "nms_threshold", "=", "retrieval_cfg", ".", "get", "(", "'nms_threshold'", ",", "0.3", ")", "# nms threshold", "\n", "merge_peak_response", "=", "retrieval_cfg", ".", "get", "(", "'merge_peak_response'", ",", "True", ")", "# merge peak response during nms", "\n", "param", "=", "retrieval_cfg", ".", "get", "(", "'param'", ",", "None", ")", "# metric free parameters", "\n", "\n", "# process each peak", "\n", "instance_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "peak_response_maps", ")", ")", ":", "\n", "            ", "class_idx", "=", "peak_list", "[", "i", ",", "1", "]", "\n", "\n", "# extract hyper-params", "\n", "if", "isinstance", "(", "param", ",", "tuple", ")", ":", "\n", "# shared param", "\n", "                ", "bg_threshold_factor", ",", "penalty_factor", ",", "balance_factor", "=", "param", "\n", "", "elif", "isinstance", "(", "param", ",", "list", ")", ":", "\n", "# independent params between classes", "\n", "                ", "bg_threshold_factor", ",", "penalty_factor", ",", "balance_factor", "=", "param", "[", "class_idx", "]", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "'Invalid hyper-params \"%s\".'", "%", "param", ")", "\n", "\n", "", "class_response", "=", "imresize", "(", "class_response_maps", "[", "class_idx", "]", ",", "(", "img_height", ",", "img_width", ")", ",", "interp", "=", "'bicubic'", ")", "\n", "bg_response", "=", "(", "class_response", "<", "bg_threshold_factor", "*", "class_response", ".", "mean", "(", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "peak_response_map", "=", "peak_response_maps", "[", "i", "]", "\n", "\n", "# select proposal", "\n", "max_val", "=", "-", "np", ".", "inf", "\n", "instance_mask", "=", "None", "\n", "\n", "for", "j", "in", "range", "(", "min", "(", "proposal_count", ",", "len", "(", "proposals", ")", ")", ")", ":", "\n", "                ", "raw_mask", "=", "imresize", "(", "proposals", "[", "j", "]", ".", "astype", "(", "int", ")", ",", "peak_response_map", ".", "shape", ",", "interp", "=", "'nearest'", ")", "\n", "# get contour of the proposal", "\n", "contour_mask", "=", "cv2", ".", "morphologyEx", "(", "raw_mask", ",", "cv2", ".", "MORPH_GRADIENT", ",", "np", ".", "ones", "(", "(", "contour_width", ",", "contour_width", ")", ",", "np", ".", "uint8", ")", ")", ".", "astype", "(", "bool", ")", "\n", "mask", "=", "raw_mask", ".", "astype", "(", "bool", ")", "\n", "# metric", "\n", "mask_area", "=", "mask", ".", "sum", "(", ")", "\n", "if", "(", "mask_area", ">=", "proposal_size_limit", "[", "1", "]", "*", "img_area", ")", "or", "(", "mask_area", "<", "proposal_size_limit", "[", "0", "]", "*", "img_area", ")", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "val", "=", "balance_factor", "*", "peak_response_map", "[", "mask", "]", ".", "sum", "(", ")", "+", "peak_response_map", "[", "contour_mask", "]", ".", "sum", "(", ")", "-", "penalty_factor", "*", "bg_response", "[", "mask", "]", ".", "sum", "(", ")", "\n", "if", "val", ">", "max_val", ":", "\n", "                        ", "max_val", "=", "val", "\n", "instance_mask", "=", "mask", "\n", "\n", "", "", "", "if", "instance_mask", "is", "not", "None", ":", "\n", "                ", "instance_list", ".", "append", "(", "(", "max_val", ",", "class_idx", ",", "instance_mask", ",", "peak_response_map", ")", ")", "\n", "\n", "", "", "instance_list", "=", "sorted", "(", "instance_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "if", "nms_threshold", "is", "not", "None", ":", "\n", "            ", "instance_list", "=", "instance_nms", "(", "sorted", "(", "instance_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", ",", "nms_threshold", ",", "merge_peak_response", ")", "\n", "", "return", "[", "dict", "(", "category", "=", "v", "[", "1", "]", ",", "mask", "=", "v", "[", "2", "]", ",", "prm", "=", "v", "[", "3", "]", ")", "for", "v", "in", "instance_list", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.get_topk_boxes_hier_sim": [[150, 229], ["logits.data.cpu().numpy.data.cpu().numpy", "max", "cv2.imread", "numpy.shape", "range", "isinstance", "isinstance", "print", "maxk_maps.append", "logits.data.cpu().numpy.data.cpu", "numpy.argsort", "aff_map.squeeze().data.cpu().numpy.squeeze().data.cpu().numpy", "cv2.resize", "cv2.resize.reshape", "numpy.arange().astype", "cam_map_cls_vector[].reshape", "cam_map_cls_vector[].reshape", "cv2.resize", "numpy.maximum", "np.maximum.copy", "scipy.ndimage.label", "range", "maxk_boxes.append", "int", "int", "numpy.sum().reshape", "numpy.sum().reshape", "localization.extract_bbox_from_map", "localization.extract_bbox_from_map", "maxk_boxes.append", "KeyError", "aff_map.squeeze().data.cpu().numpy.squeeze().data.cpu", "numpy.sqrt", "numpy.sqrt", "numpy.arange", "numpy.min", "numpy.min", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.min", "numpy.sum", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.sum", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "aff_map.squeeze().data.cpu().numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.extract_bbox_from_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.extract_bbox_from_map"], ["for", "j", ",", "sc_map", "in", "enumerate", "(", "sc_maps", ")", ":", "\n", "            ", "cam_map_cls", "=", "top_cams", "[", "i", "]", "\n", "sc_map", "=", "sc_map", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "wh_sc", "=", "sc_map", ".", "shape", "[", "0", "]", "\n", "h_sc", ",", "w_sc", "=", "int", "(", "np", ".", "sqrt", "(", "wh_sc", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "wh_sc", ")", ")", "\n", "cam_map_cls", "=", "cv2", ".", "resize", "(", "cam_map_cls", ",", "dsize", "=", "(", "w_sc", ",", "h_sc", ")", ")", "\n", "cam_map_cls_vector", "=", "cam_map_cls", ".", "reshape", "(", "-", "1", ")", "\n", "#positive", "\n", "cam_map_cls_id", "=", "np", ".", "arange", "(", "wh_sc", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "cam_map_cls_th_ind_pos", "=", "cam_map_cls_id", "[", "cam_map_cls_vector", ">=", "fg_th", "]", "\n", "sc_map_sel_pos", "=", "sc_map", "[", ":", ",", "cam_map_cls_th_ind_pos", "]", "\n", "sc_map_sel_pos", "=", "(", "sc_map_sel_pos", "-", "np", ".", "min", "(", "sc_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "sc_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "min", "(", "sc_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-10", ")", "\n", "# cam_map_cls_val_pos = cam_map_cls_vector[cam_map_cls_th_ind_pos].reshape(1,-1)", "\n", "# aff_map_sel_pos = np.sum(aff_map_sel_pos * cam_map_cls_val_pos, axis=1).reshape(h_aff, w_aff)", "\n", "if", "sc_map_sel_pos", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "                ", "sc_map_sel_pos", "=", "np", ".", "sum", "(", "sc_map_sel_pos", ",", "axis", "=", "1", ")", ".", "reshape", "(", "h_sc", ",", "w_sc", ")", "\n", "sc_map_sel_pos", "=", "(", "sc_map_sel_pos", "-", "np", ".", "min", "(", "sc_map_sel_pos", ")", ")", "/", "(", "np", ".", "max", "(", "sc_map_sel_pos", ")", "-", "np", ".", "min", "(", "sc_map_sel_pos", ")", "+", "1e-10", ")", "\n", "", "else", ":", "\n", "                ", "sc_map_sel_pos", "=", "0", "\n", "#negtive", "\n", "", "cam_map_cls_th_ind_neg", "=", "cam_map_cls_id", "[", "cam_map_cls_vector", "<=", "bg_th", "]", "\n", "if", "sc_maps_fo", "is", "not", "None", ":", "\n", "                ", "sc_map_fo", "=", "sc_maps_fo", "[", "j", "]", "\n", "sc_map_fo", "=", "sc_map_fo", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sc_map_sel_neg", "=", "sc_map_fo", "[", ":", ",", "cam_map_cls_th_ind_neg", "]", "\n", "", "else", ":", "\n", "                ", "sc_map_sel_neg", "=", "sc_map", "[", ":", ",", "cam_map_cls_th_ind_neg", "]", "\n", "", "sc_map_sel_neg", "=", "(", "sc_map_sel_neg", "-", "np", ".", "min", "(", "sc_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "sc_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "min", "(", "sc_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-10", ")", "\n", "# cam_map_cls_val_neg = cam_map_cls_vector[cam_map_cls_th_ind_neg].reshape(1, -1)", "\n", "# aff_map_sel_neg = np.sum(aff_map_sel_neg * (1-cam_map_cls_val_neg), axis=1).reshape(h_aff, w_aff)", "\n", "if", "sc_map_sel_neg", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "                ", "sc_map_sel_neg", "=", "np", ".", "sum", "(", "sc_map_sel_neg", ",", "axis", "=", "1", ")", ".", "reshape", "(", "h_sc", ",", "w_sc", ")", "\n", "sc_map_sel_neg", "=", "(", "sc_map_sel_neg", "-", "np", ".", "min", "(", "sc_map_sel_neg", ")", ")", "/", "(", "np", ".", "max", "(", "sc_map_sel_neg", ")", "-", "np", ".", "min", "(", "sc_map_sel_neg", ")", "+", "1e-10", ")", "\n", "", "else", ":", "\n", "                ", "sc_map_sel_neg", "=", "0", "\n", "", "sc_map_cls_i", "=", "sc_map_sel_pos", "-", "sc_map_sel_neg", "\n", "# aff_map_cls_i = aff_map_sel_pos", "\n", "sc_map_cls_i", "=", "sc_map_cls_i", "*", "(", "sc_map_cls_i", ">=", "0", ")", "\n", "sc_map_cls_i", "=", "(", "sc_map_cls_i", "-", "np", ".", "min", "(", "sc_map_cls_i", ")", ")", "/", "(", "np", ".", "max", "(", "sc_map_cls_i", ")", "-", "np", ".", "min", "(", "sc_map_cls_i", ")", "+", "1e-10", ")", "\n", "sc_map_cls_i", "=", "cv2", ".", "resize", "(", "sc_map_cls_i", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "sc_map_cls", "=", "np", ".", "maximum", "(", "sc_map_cls", ",", "sc_map_cls_i", ")", "\n", "# aff_map_cls = (aff_map_cls - np.min(aff_map_cls)) / (np.max(aff_map_cls) + 1e-10)", "\n", "", "maxk_maps", ".", "append", "(", "sc_map_cls", ".", "copy", "(", ")", ")", "\n", "# segment the foreground", "\n", "fg_map", "=", "sc_map_cls", ">=", "threshold", "\n", "\n", "if", "mode", "==", "'max'", ":", "\n", "            ", "objects", ",", "count", "=", "label", "(", "fg_map", ")", "\n", "max_area", "=", "0", "\n", "max_box", "=", "None", "\n", "for", "idx", "in", "range", "(", "1", ",", "count", "+", "1", ")", ":", "\n", "                ", "obj", "=", "(", "objects", "==", "idx", ")", "\n", "box", "=", "extract_bbox_from_map", "(", "obj", ")", "\n", "area", "=", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", "+", "1", ")", "*", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", "+", "1", ")", "\n", "if", "area", ">", "max_area", ":", "\n", "                    ", "max_area", "=", "area", "\n", "max_box", "=", "box", "\n", "", "", "if", "max_box", "is", "None", ":", "\n", "                ", "max_box", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "                ", "max_box", "=", "(", "int", "(", "gt_labels", "[", "0", "]", ")", ",", ")", "+", "max_box", "\n", "", "else", ":", "\n", "                ", "max_box", "=", "(", "species_cls", "[", "i", "]", ",", ")", "+", "max_box", "\n", "", "maxk_boxes", ".", "append", "(", "max_box", ")", "\n", "", "elif", "mode", "==", "'union'", ":", "\n", "            ", "box", "=", "extract_bbox_from_map", "(", "fg_map", ")", "\n", "if", "gt_labels", "is", "not", "None", ":", "\n", "                ", "maxk_boxes", ".", "append", "(", "(", "int", "(", "gt_labels", "[", "0", "]", ")", ",", ")", "+", "box", ")", "\n", "", "else", ":", "\n", "                ", "maxk_boxes", ".", "append", "(", "(", "species_cls", "[", "i", "]", ",", ")", "+", "box", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'invalid mode! Please set the mode in [\\'max\\', \\'union\\']'", ")", "\n", "\n", "", "", "result", "=", "[", "maxk_boxes", "[", ":", "k", "]", "for", "k", "in", "topk", "]", "\n", "return", "result", ",", "maxk_maps", "\n", "\n", "", "def", "get_masks", "(", "logits3", ",", "logits2", ",", "logits1", ",", "cam_map", ",", "parent_map", ",", "root_map", ",", "im_file", ",", "input_size", ",", "crop_size", ",", "topk", "=", "(", "1", ",", ")", ",", "threshold", "=", "0.2", ",", "mode", "=", "'union'", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.accuracy": [[6, 26], ["max", "target.size", "scores.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"\n    Compute the top k accuracy of classification results.\n    :param target: the ground truth label\n    :param topk: tuple or list of the expected k values.\n    :return: A list of the accuracy values. The list has the same lenght with para: topk\n    \"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "scores", "=", "logits", "\n", "\n", "_", ",", "pred", "=", "scores", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.get_badcase_detail": [[27, 66], ["evaluate.cal_iou", "evaluate.cal_iou", "len", "range", "int", "evaluate.cal_iou", "iogs.append", "sum", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.cal_iou", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.cal_iou", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.cal_iou"], ["", "def", "get_badcase_detail", "(", "top1_bbox", ",", "gt_bboxes", ",", "gt_label", ",", "max_iou", ",", "max_gt_id", ")", ":", "\n", "    ", "cls_wrong", "=", "0", "\n", "multi_instances", "=", "0", "\n", "region_part", "=", "0", "\n", "region_more", "=", "0", "\n", "region_wrong", "=", "0", "\n", "\n", "pred_cls", "=", "top1_bbox", "[", "0", "]", "\n", "pred_bbox", "=", "top1_bbox", "[", "1", ":", "]", "\n", "\n", "if", "not", "int", "(", "pred_cls", ")", "==", "gt_label", ":", "\n", "        ", "cls_wrong", "=", "1", "\n", "return", "cls_wrong", ",", "multi_instances", ",", "region_part", ",", "region_more", ",", "region_wrong", "\n", "\n", "", "if", "max_iou", ">", "0.5", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "# multi_instances error", "\n", "", "gt_box_cnt", "=", "len", "(", "gt_bboxes", ")", "//", "4", "\n", "if", "gt_box_cnt", ">", "1", ":", "\n", "        ", "iogs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gt_box_cnt", ")", ":", "\n", "            ", "gt_box", "=", "gt_bboxes", "[", "i", "*", "4", ":", "(", "i", "+", "1", ")", "*", "4", "]", "\n", "iog", "=", "cal_iou", "(", "pred_bbox", ",", "gt_box", ",", "method", "=", "'iog'", ")", "\n", "iogs", ".", "append", "(", "iog", ")", "\n", "", "if", "sum", "(", "np", ".", "array", "(", "iogs", ")", ">", "0.3", ")", ">", "1", ":", "\n", "            ", "multi_instances", "=", "1", "\n", "return", "cls_wrong", ",", "multi_instances", ",", "region_part", ",", "region_more", ",", "region_wrong", "\n", "# region part error", "\n", "", "", "iog", "=", "cal_iou", "(", "pred_bbox", ",", "gt_bboxes", "[", "max_gt_id", "*", "4", ":", "(", "max_gt_id", "+", "1", ")", "*", "4", "]", ",", "method", "=", "'iog'", ")", "\n", "iob", "=", "cal_iou", "(", "pred_bbox", ",", "gt_bboxes", "[", "max_gt_id", "*", "4", ":", "(", "max_gt_id", "+", "1", ")", "*", "4", "]", ",", "method", "=", "'iob'", ")", "\n", "if", "iob", ">", "0.5", ":", "\n", "        ", "region_part", "=", "1", "\n", "return", "cls_wrong", ",", "multi_instances", ",", "region_part", ",", "region_more", ",", "region_wrong", "\n", "", "if", "iog", ">=", "0.7", ":", "\n", "        ", "region_more", "=", "1", "\n", "return", "cls_wrong", ",", "multi_instances", ",", "region_part", ",", "region_more", ",", "region_wrong", "\n", "", "region_wrong", "=", "1", "\n", "return", "cls_wrong", ",", "multi_instances", ",", "region_part", ",", "region_more", ",", "region_wrong", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.locerr": [[69, 94], ["len", "len", "len", "topk_rslt.append", "range", "float", "evaluate.cal_iou", "len", "evaluate.get_badcase_detail"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.cal_iou", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.get_badcase_detail"], ["", "def", "locerr", "(", "topk_boxes", ",", "gt_labels", ",", "gt_boxes", ",", "topk", "=", "(", "1", ",", ")", ",", "iou_th", "=", "0.5", ")", ":", "\n", "    ", "assert", "len", "(", "topk_boxes", ")", "==", "len", "(", "topk", ")", "\n", "gt_label", "=", "gt_labels", "[", "0", "]", "\n", "gt_boxes", "=", "gt_boxes", "\n", "gt_box_cnt", "=", "len", "(", "gt_boxes", ")", "//", "4", "\n", "topk_rslt", "=", "[", "]", "\n", "for", "topk_box", "in", "topk_boxes", ":", "\n", "        ", "err", "=", "1", "\n", "for", "cls_box", "in", "topk_box", ":", "\n", "            ", "max_iou", "=", "0", "\n", "max_gt_id", "=", "0", "\n", "for", "i", "in", "range", "(", "gt_box_cnt", ")", ":", "\n", "                ", "gt_box", "=", "gt_boxes", "[", "i", "*", "4", ":", "(", "i", "+", "1", ")", "*", "4", "]", "\n", "iou_i", "=", "cal_iou", "(", "cls_box", "[", "1", ":", "]", ",", "gt_box", ")", "\n", "if", "iou_i", ">", "max_iou", ":", "\n", "                    ", "max_iou", "=", "iou_i", "\n", "max_gt_id", "=", "i", "\n", "", "", "if", "len", "(", "topk_box", ")", "==", "1", ":", "\n", "                ", "wrong_details", "=", "get_badcase_detail", "(", "cls_box", ",", "gt_boxes", ",", "gt_labels", ",", "max_iou", ",", "max_gt_id", ")", "\n", "", "if", "cls_box", "[", "0", "]", "==", "gt_label", "and", "max_iou", ">", "iou_th", ":", "\n", "                ", "err", "=", "0", "\n", "break", "\n", "", "", "topk_rslt", ".", "append", "(", "float", "(", "err", "*", "100.0", ")", ")", "\n", "\n", "", "return", "topk_rslt", ",", "wrong_details", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.colocerr": [[95, 110], ["len", "len", "topk_rslt.append", "float", "evaluate.cal_iou"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.cal_iou"], ["", "def", "colocerr", "(", "topk_boxes", ",", "gt_labels", ",", "gt_boxes", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "assert", "len", "(", "topk_boxes", ")", "==", "len", "(", "topk", ")", "\n", "gt_label", "=", "gt_labels", "[", "0", "]", "\n", "gt_box", "=", "gt_boxes", "\n", "\n", "topk_rslt", "=", "[", "]", "\n", "for", "topk_box", "in", "topk_boxes", ":", "\n", "        ", "err", "=", "1", "\n", "for", "cls_box", "in", "topk_box", ":", "\n", "            ", "if", "cal_iou", "(", "cls_box", "[", "1", ":", "]", ",", "gt_box", ")", ">", "0.5", ":", "\n", "                ", "err", "=", "0", "\n", "break", "\n", "", "", "topk_rslt", ".", "append", "(", "float", "(", "err", "*", "100.0", ")", ")", "\n", "\n", "", "return", "topk_rslt", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.colIoU": [[111, 123], ["evaluate.cal_iou", "len", "len"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.cal_iou"], ["", "def", "colIoU", "(", "topk_boxes", ",", "gt_labels", ",", "gt_boxes", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "assert", "len", "(", "topk_boxes", ")", "==", "len", "(", "topk", ")", "\n", "gt_label", "=", "gt_labels", "[", "0", "]", "\n", "gt_box", "=", "gt_boxes", "\n", "\n", "topk_rslt", "=", "[", "]", "\n", "Iou", "=", "cal_iou", "(", "topk_boxes", "[", "0", "]", "[", "0", "]", "[", "1", ":", "]", ",", "gt_box", ")", "\n", "\n", "if", "topk_boxes", "[", "0", "]", "[", "0", "]", "[", "0", "]", "!=", "gt_label", ":", "\n", "        ", "Iou", "=", "2", "\n", "\n", "", "return", "Iou", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.get_locerr_array": [[124, 131], ["len", "numpy.zeros", "range", "evaluate.cal_iou"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.cal_iou"], ["", "def", "get_locerr_array", "(", "pred_boxes", ",", "gt_boxes", ")", ":", "\n", "    ", "num_imgs", "=", "len", "(", "gt_boxes", ")", "\n", "iou_val", "=", "np", ".", "zeros", "(", "(", "num_imgs", ",", "5", ")", ")", "\n", "for", "k", "in", "range", "(", "5", ")", ":", "\n", "        ", "pred_box", "=", "pred_boxes", "[", ":", ",", "4", "*", "k", ":", "4", "*", "k", "+", "4", "]", "\n", "iou_val", "[", ":", ",", "k", "]", "=", "cal_iou", "(", "pred_box", ",", "gt_boxes", ")", "\n", "", "return", "iou_val", "<", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.cal_iou": [[133, 163], ["numpy.asarray", "numpy.asarray", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.maximum"], "function", ["None"], ["", "def", "cal_iou", "(", "box1", ",", "box2", ",", "method", "=", "'iou'", ")", ":", "\n", "    ", "\"\"\"\n    support:\n    1. box1 and box2 are the same shape: [N, 4]\n    2.\n    :param box1:\n    :param box2:\n    :return:\n    \"\"\"", "\n", "box1", "=", "np", ".", "asarray", "(", "box1", ",", "dtype", "=", "float", ")", "\n", "box2", "=", "np", ".", "asarray", "(", "box2", ",", "dtype", "=", "float", ")", "\n", "if", "box1", ".", "ndim", "==", "1", ":", "\n", "        ", "box1", "=", "box1", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "if", "box2", ".", "ndim", "==", "1", ":", "\n", "        ", "box2", "=", "box2", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "iw", "=", "np", ".", "minimum", "(", "box1", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "2", "]", ")", "-", "np", ".", "maximum", "(", "box1", "[", ":", ",", "0", "]", ",", "box2", "[", ":", ",", "0", "]", ")", "+", "1", "\n", "ih", "=", "np", ".", "minimum", "(", "box1", "[", ":", ",", "3", "]", ",", "box2", "[", ":", ",", "3", "]", ")", "-", "np", ".", "maximum", "(", "box1", "[", ":", ",", "1", "]", ",", "box2", "[", ":", ",", "1", "]", ")", "+", "1", "\n", "\n", "i_area", "=", "np", ".", "maximum", "(", "iw", ",", "0.0", ")", "*", "np", ".", "maximum", "(", "ih", ",", "0.0", ")", "\n", "box1_area", "=", "(", "box1", "[", ":", ",", "2", "]", "-", "box1", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "box1", "[", ":", ",", "3", "]", "-", "box1", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "box2_area", "=", "(", "box2", "[", ":", ",", "2", "]", "-", "box2", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "box2", "[", ":", ",", "3", "]", "-", "box2", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "\n", "if", "method", "==", "'iog'", ":", "\n", "        ", "iou_val", "=", "i_area", "/", "(", "box2_area", ")", "\n", "", "elif", "method", "==", "'iob'", ":", "\n", "        ", "iou_val", "=", "i_area", "/", "(", "box1_area", ")", "\n", "", "else", ":", "\n", "        ", "iou_val", "=", "i_area", "/", "(", "box1_area", "+", "box2_area", "-", "i_area", ")", "\n", "", "return", "iou_val", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.get_mAP": [[167, 177], ["range", "map", "numpy.array", "numpy.shape", "sklearn.metrics.average_precision_score", "map.append", "map"], "function", ["None"], ["def", "get_mAP", "(", "gt_labels", ",", "pred_scores", ")", ":", "\n", "    ", "n_classes", "=", "np", ".", "shape", "(", "gt_labels", ")", "[", "1", "]", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_classes", ")", ":", "\n", "        ", "res", "=", "metrics", ".", "average_precision_score", "(", "gt_labels", "[", ":", ",", "i", "]", ",", "pred_scores", "[", ":", ",", "i", "]", ")", "\n", "results", ".", "append", "(", "res", ")", "\n", "\n", "", "results", "=", "map", "(", "lambda", "x", ":", "'%.3f'", "%", "(", "x", ")", ",", "results", ")", "\n", "cls_map", "=", "np", ".", "array", "(", "map", "(", "float", ",", "results", ")", ")", "\n", "return", "cls_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.get_AUC": [[179, 182], ["sklearn.metrics.roc_auc_score"], "function", ["None"], ["", "def", "get_AUC", "(", "gt_labels", ",", "pred_scores", ")", ":", "\n", "    ", "res", "=", "metrics", ".", "roc_auc_score", "(", "gt_labels", ",", "pred_scores", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate._to_numpy": [[184, 193], ["torch.squeeze", "torch.is_tensor", "v.cpu().data.numpy.cpu", "v.cpu().data.numpy.numpy", "isinstance", "v.cpu().data.numpy.cpu().data.numpy", "v.cpu().data.numpy.cpu"], "function", ["None"], ["", "def", "_to_numpy", "(", "v", ")", ":", "\n", "    ", "v", "=", "torch", ".", "squeeze", "(", "v", ")", "\n", "if", "torch", ".", "is_tensor", "(", "v", ")", ":", "\n", "        ", "v", "=", "v", ".", "cpu", "(", ")", "\n", "v", "=", "v", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "torch", ".", "autograd", ".", "Variable", ")", ":", "\n", "        ", "v", "=", "v", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.get_iou": [[195, 231], ["evaluate._to_numpy", "evaluate._to_numpy", "gt.astype.astype", "pred.astype.astype", "numpy.zeros", "range", "numpy.where", "set", "numpy.where", "set", "set.intersection", "set.union", "len", "numpy.sum", "float", "zip", "zip", "len", "numpy.unique().tolist", "len", "numpy.unique", "x[].tolist", "x[].tolist", "x[].tolist", "x[].tolist", "float", "float", "numpy.unique", "len", "len", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate._to_numpy", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate._to_numpy"], ["", "def", "get_iou", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "'''\n    IoU which is averaged by images\n    :param pred:\n    :param gt:\n    :return:\n    '''", "\n", "pred", "=", "_to_numpy", "(", "pred", ")", "\n", "gt", "=", "_to_numpy", "(", "gt", ")", "\n", "pred", "[", "gt", "==", "255", "]", "=", "255", "\n", "\n", "assert", "pred", ".", "shape", "==", "gt", ".", "shape", "\n", "\n", "gt", "=", "gt", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pred", "=", "pred", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# max_label = int(args['--NoLabels']) - 1  # labels from 0,1, ... 20(for VOC)", "\n", "count", "=", "np", ".", "zeros", "(", "(", "20", "+", "1", ",", ")", ")", "\n", "for", "j", "in", "range", "(", "20", "+", "1", ")", ":", "\n", "        ", "x", "=", "np", ".", "where", "(", "pred", "==", "j", ")", "\n", "p_idx_j", "=", "set", "(", "zip", "(", "x", "[", "0", "]", ".", "tolist", "(", ")", ",", "x", "[", "1", "]", ".", "tolist", "(", ")", ")", ")", "\n", "x", "=", "np", ".", "where", "(", "gt", "==", "j", ")", "\n", "GT_idx_j", "=", "set", "(", "zip", "(", "x", "[", "0", "]", ".", "tolist", "(", ")", ",", "x", "[", "1", "]", ".", "tolist", "(", ")", ")", ")", "\n", "# pdb.set_trace()", "\n", "n_jj", "=", "set", ".", "intersection", "(", "p_idx_j", ",", "GT_idx_j", ")", "\n", "u_jj", "=", "set", ".", "union", "(", "p_idx_j", ",", "GT_idx_j", ")", "\n", "\n", "if", "len", "(", "GT_idx_j", ")", "!=", "0", ":", "\n", "            ", "count", "[", "j", "]", "=", "float", "(", "len", "(", "n_jj", ")", ")", "/", "float", "(", "len", "(", "u_jj", ")", ")", "\n", "\n", "", "", "result_class", "=", "count", "\n", "unique_classes", "=", "len", "(", "np", ".", "unique", "(", "gt", ")", ")", "-", "1", "if", "255", "in", "np", ".", "unique", "(", "gt", ")", ".", "tolist", "(", ")", "else", "len", "(", "np", ".", "unique", "(", "gt", ")", ")", "\n", "# unique_classes = len(np.unique(gt))", "\n", "Aiou", "=", "np", ".", "sum", "(", "result_class", "[", ":", "]", ")", "/", "float", "(", "unique_classes", ")", "\n", "\n", "return", "Aiou", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.fast_hist": [[233, 238], ["evaluate._to_numpy", "evaluate._to_numpy", "numpy.bincount().reshape", "numpy.bincount", "pred[].astype"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate._to_numpy", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate._to_numpy"], ["", "def", "fast_hist", "(", "pred", ",", "gt", ",", "n", "=", "21", ")", ":", "\n", "    ", "pred", "=", "_to_numpy", "(", "pred", ")", "\n", "gt", "=", "_to_numpy", "(", "gt", ")", "\n", "k", "=", "(", "gt", ">=", "0", ")", "&", "(", "gt", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "pred", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "gt", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.get_voc_iou": [[240, 243], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "get_voc_iou", "(", "hist", ")", ":", "\n", "    ", "miou", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "return", "miou", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scg_map.norm_atten_map": [[10, 15], ["numpy.min", "numpy.max"], "function", ["None"], ["def", "norm_atten_map", "(", "attention_map", ")", ":", "\n", "    ", "min_val", "=", "np", ".", "min", "(", "attention_map", ")", "\n", "max_val", "=", "np", ".", "max", "(", "attention_map", ")", "\n", "atten_norm", "=", "(", "attention_map", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", "+", "1e-10", ")", "\n", "return", "atten_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scg_map.get_topk_boxes_hier": [[16, 30], ["logits.squeeze().data.cpu().numpy.squeeze().data.cpu().numpy", "feat_map.data.cpu().numpy.data.cpu().numpy", "max", "range", "get_scg_map.norm_atten_map", "maxk_maps.append", "logits.squeeze().data.cpu().numpy.squeeze().data.cpu", "feat_map.data.cpu().numpy.data.cpu", "numpy.argsort", "norm_atten_map.copy", "logits.squeeze().data.cpu().numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map"], ["", "def", "get_topk_boxes_hier", "(", "logits", ",", "feat_map", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "logits", "=", "logits", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "feat_map", "=", "feat_map", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "\n", "species_cls", "=", "np", ".", "argsort", "(", "logits", ")", "[", ":", ":", "-", "1", "]", "[", ":", "maxk", "]", "\n", "\n", "maxk_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "maxk", ")", ":", "\n", "        ", "feat_map_i", "=", "feat_map", "[", "0", ",", "species_cls", "[", "i", "]", ",", ":", ",", ":", "]", "\n", "cam_map_i", "=", "norm_atten_map", "(", "feat_map_i", ")", "# normalize cam map", "\n", "maxk_maps", ".", "append", "(", "cam_map_i", ".", "copy", "(", ")", ")", "\n", "", "return", "maxk_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scg_map.get_topk_boxes_hier_sim": [[31, 84], ["range", "range", "isinstance", "isinstance", "len", "len", "maxk_maps.append", "cleaned_hsc_maps.append", "aff_map.squeeze().data.cpu().numpy.squeeze().data.cpu().numpy", "cv2.resize", "cv2.resize.reshape", "numpy.arange().astype", "cam_map_cls_vector[].reshape", "cam_map_cls_vector[].reshape", "numpy.maximum", "np.maximum.copy", "int", "int", "numpy.sum().reshape", "numpy.sum().reshape", "aff_map.squeeze().data.cpu().numpy.squeeze().data.cpu", "numpy.sqrt", "numpy.sqrt", "numpy.arange", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.min", "numpy.sum", "numpy.min", "numpy.max", "numpy.min", "numpy.sum", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "aff_map.squeeze().data.cpu().numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["", "def", "get_topk_boxes_hier_sim", "(", "top_cams", ",", "hsc_maps", ",", "fg_th", "=", "0.1", ",", "bg_th", "=", "0.05", ")", ":", "\n", "    ", "if", "isinstance", "(", "hsc_maps", ",", "tuple", ")", "or", "isinstance", "(", "hsc_maps", ",", "list", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "hsc_maps", "=", "[", "hsc_maps", "]", "\n", "", "cleaned_hsc_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "hsc_maps", ")", ")", ":", "\n", "        ", "if", "hsc_maps", "[", "i", "]", "is", "not", "None", ":", "\n", "            ", "cleaned_hsc_maps", ".", "append", "(", "hsc_maps", "[", "i", "]", ")", "\n", "\n", "", "", "maxk_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "top_cams", ")", ")", ":", "\n", "        ", "aff_map_cls", "=", "0", "\n", "for", "aff_map", "in", "cleaned_hsc_maps", ":", "\n", "            ", "cam_map_cls", "=", "top_cams", "[", "i", "]", "\n", "aff_map", "=", "aff_map", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "wh_aff", "=", "aff_map", ".", "shape", "[", "0", "]", "\n", "h_aff", ",", "w_aff", "=", "int", "(", "np", ".", "sqrt", "(", "wh_aff", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "wh_aff", ")", ")", "\n", "cam_map_cls", "=", "cv2", ".", "resize", "(", "cam_map_cls", ",", "dsize", "=", "(", "w_aff", ",", "h_aff", ")", ")", "\n", "cam_map_cls_vector", "=", "cam_map_cls", ".", "reshape", "(", "-", "1", ")", "\n", "#positive", "\n", "cam_map_cls_id", "=", "np", ".", "arange", "(", "wh_aff", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "cam_map_cls_th_ind_pos", "=", "cam_map_cls_id", "[", "cam_map_cls_vector", ">=", "fg_th", "]", "\n", "aff_map_sel_pos", "=", "aff_map", "[", ":", ",", "cam_map_cls_th_ind_pos", "]", "\n", "aff_map_sel_pos", "=", "(", "aff_map_sel_pos", "-", "np", ".", "min", "(", "aff_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "aff_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "min", "(", "aff_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-10", ")", "\n", "cam_map_cls_val_pos", "=", "cam_map_cls_vector", "[", "cam_map_cls_th_ind_pos", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "# aff_map_sel_pos = np.sum(aff_map_sel_pos * cam_map_cls_val_pos, axis=1).reshape(h_aff, w_aff)", "\n", "if", "aff_map_sel_pos", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "                ", "aff_map_sel_pos", "=", "np", ".", "sum", "(", "aff_map_sel_pos", ",", "axis", "=", "1", ")", ".", "reshape", "(", "h_aff", ",", "w_aff", ")", "\n", "aff_map_sel_pos", "=", "(", "aff_map_sel_pos", "-", "np", ".", "min", "(", "aff_map_sel_pos", ")", ")", "/", "(", "np", ".", "max", "(", "aff_map_sel_pos", ")", "-", "np", ".", "min", "(", "aff_map_sel_pos", ")", "+", "1e-10", ")", "\n", "", "else", ":", "\n", "                ", "aff_map_sel_pos", "=", "0", "\n", "#negtive", "\n", "", "cam_map_cls_th_ind_neg", "=", "cam_map_cls_id", "[", "cam_map_cls_vector", "<=", "bg_th", "]", "\n", "aff_map_sel_neg", "=", "aff_map", "[", ":", ",", "cam_map_cls_th_ind_neg", "]", "\n", "aff_map_sel_neg", "=", "(", "aff_map_sel_neg", "-", "np", ".", "min", "(", "aff_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "aff_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "min", "(", "aff_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-10", ")", "\n", "cam_map_cls_val_neg", "=", "cam_map_cls_vector", "[", "cam_map_cls_th_ind_neg", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "# aff_map_sel_neg = np.sum(aff_map_sel_neg * (1-cam_map_cls_val_neg), axis=1).reshape(h_aff, w_aff)", "\n", "if", "aff_map_sel_neg", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "                ", "aff_map_sel_neg", "=", "np", ".", "sum", "(", "aff_map_sel_neg", ",", "axis", "=", "1", ")", ".", "reshape", "(", "h_aff", ",", "w_aff", ")", "\n", "aff_map_sel_neg", "=", "(", "aff_map_sel_neg", "-", "np", ".", "min", "(", "aff_map_sel_neg", ")", ")", "/", "(", "np", ".", "max", "(", "aff_map_sel_neg", ")", "-", "np", ".", "min", "(", "aff_map_sel_neg", ")", "+", "1e-10", ")", "\n", "", "else", ":", "\n", "                ", "aff_map_sel_neg", "=", "0", "\n", "", "aff_map_cls_i", "=", "aff_map_sel_pos", "-", "aff_map_sel_neg", "\n", "# aff_map_cls_i = aff_map_sel_pos", "\n", "aff_map_cls_i", "=", "aff_map_cls_i", "*", "(", "aff_map_cls_i", ">=", "0", ")", "\n", "aff_map_cls_i", "=", "(", "aff_map_cls_i", "-", "np", ".", "min", "(", "aff_map_cls_i", ")", ")", "/", "(", "np", ".", "max", "(", "aff_map_cls_i", ")", "-", "np", ".", "min", "(", "aff_map_cls_i", ")", "+", "1e-10", ")", "\n", "aff_map_cls", "=", "np", ".", "maximum", "(", "aff_map_cls", ",", "aff_map_cls_i", ")", "\n", "# aff_map_cls = (aff_map_cls - np.min(aff_map_cls)) / (np.max(aff_map_cls) + 1e-10)", "\n", "", "maxk_maps", ".", "append", "(", "aff_map_cls", ".", "copy", "(", ")", ")", "\n", "", "return", "maxk_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scg_map.get_scm_map": [[87, 97], ["get_scg_map.get_topk_boxes_hier", "get_scg_map.get_topk_boxes_hier_sim", "cv2.imread", "numpy.shape", "range", "len", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.get_topk_boxes_hier", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.get_topk_boxes_hier_sim", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["", "def", "get_scm_map", "(", "logits", ",", "feat_maps", ",", "hsc_maps", ",", "topk", "=", "(", "1", ",", "5", ")", ",", "fg_th", "=", "0.1", ",", "bg_th", "=", "0.05", ",", "im_file", "=", "None", ")", ":", "\n", "    ", "cam_maps", "=", "get_topk_boxes_hier", "(", "logits", ",", "feat_maps", ",", "topk", "=", "topk", ")", "\n", "scm_maps", "=", "get_topk_boxes_hier_sim", "(", "cam_maps", ",", "hsc_maps", ",", "fg_th", "=", "fg_th", ",", "bg_th", "=", "bg_th", ")", "\n", "if", "im_file", "is", "None", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "scm_maps", ")", ")", ":", "\n", "            ", "resized_scm_map_i", "=", "cv2", ".", "resize", "(", "scm_maps", "[", "i", "]", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "scm_maps", "[", "i", "]", "=", "resized_scm_map_i", "\n", "", "", "return", "scm_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.extract_xml.parse_xml": [[14, 40], ["os.listdir", "os.listdir", "sorted", "range", "len", "os.join", "xml.etree.ElementTree.parse", "ET.parse.getroot", "anno_line.append", "tree.getroot.findall", "annotations.append", "open", "obj.find", "anno_line.append", "anno_line.append", "anno_line.append", "anno_line.append", "os.join", "sb.write", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.opts.parse"], ["def", "parse_xml", "(", "xml_dir", ",", "bbox_file", ",", "save_dir", ")", ":", "\n", "    ", "xml_files", "=", "os", ".", "listdir", "(", "xml_dir", ")", "\n", "annotations", "=", "[", "]", "\n", "xml_files", "=", "sorted", "(", "xml_files", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "xml_files", ")", ")", ":", "\n", "        ", "anno_line", "=", "[", "]", "\n", "xml_file", "=", "osp", ".", "join", "(", "xml_dir", ",", "xml_files", "[", "i", "]", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_file", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "filename", "=", "xml_files", "[", "i", "]", "\n", "anno_line", ".", "append", "(", "filename", ")", "\n", "for", "obj", "in", "root", ".", "findall", "(", "'object'", ")", ":", "\n", "            ", "bndbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "xmin", "=", "bndbox", ".", "find", "(", "'xmin'", ")", ".", "text", "\n", "ymin", "=", "bndbox", ".", "find", "(", "'ymin'", ")", ".", "text", "\n", "xmax", "=", "bndbox", ".", "find", "(", "'xmax'", ")", ".", "text", "\n", "ymax", "=", "bndbox", ".", "find", "(", "'ymax'", ")", ".", "text", "\n", "anno_line", ".", "append", "(", "xmin", ")", "\n", "anno_line", ".", "append", "(", "ymin", ")", "\n", "anno_line", ".", "append", "(", "xmax", ")", "\n", "anno_line", ".", "append", "(", "ymax", ")", "\n", "", "annotations", ".", "append", "(", "anno_line", ")", "\n", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "save_dir", ",", "bbox_file", ")", ",", "'w'", ")", "as", "sb", ":", "\n", "        ", "for", "anno", "in", "annotations", ":", "\n", "            ", "sb", ".", "write", "(", "' '", ".", "join", "(", "anno", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AverageMeter.__init__": [[6, 8], ["meters.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AverageMeter.reset": [[9, 14], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "-", "1", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AverageMeter.update": [[15, 21], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "val", "is", "not", "None", ":", "\n", "            ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.MoveAverageMeter.__init__": [[23, 29], ["meters.MoveAverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset"], ["    ", "def", "__init__", "(", "self", ",", "cls_number", ",", "dim", ",", "old", "=", "0.9", ",", "new", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "old", "=", "old", "\n", "self", ".", "new", "=", "new", "\n", "self", ".", "cls", "=", "cls_number", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.MoveAverageMeter.reset": [[30, 32], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "avg", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.MoveAverageMeter.update": [[33, 45], ["torch.zeros().type_as", "torch.unique", "torch.unique", "torch.mean", "torch.zeros", "torch.mean"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "gt_label", ")", ":", "\n", "        ", "if", "self", ".", "avg", "is", "None", ":", "\n", "            ", "self", ".", "avg", "=", "torch", ".", "zeros", "(", "self", ".", "cls", ",", "self", ".", "dim", ")", ".", "type_as", "(", "val", ")", "\n", "cls_ids", "=", "torch", ".", "unique", "(", "gt_label", ")", "\n", "for", "cls_i", "in", "cls_ids", ":", "\n", "                ", "inds", "=", "gt_label", "==", "cls_i", "\n", "self", ".", "avg", "[", "cls_i", ",", ":", "]", "=", "torch", ".", "mean", "(", "val", "[", "inds", ",", "cls_i", ",", ":", "]", ",", "dim", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "cls_ids", "=", "torch", ".", "unique", "(", "gt_label", ")", "\n", "for", "cls_i", "in", "cls_ids", ":", "\n", "                ", "inds", "=", "gt_label", "==", "cls_i", "\n", "self", ".", "avg", "[", "cls_i", ",", ":", "]", "=", "self", ".", "old", "*", "self", ".", "avg", "[", "cls_i", ",", ":", "]", "+", "self", ".", "new", "*", "torch", ".", "mean", "(", "val", "[", "inds", ",", "cls_i", ",", ":", "]", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.__init__": [[47, 50], ["meters.AveragePrecisionMetric.reset"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset": [[51, 54], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_pos", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "self", ".", "all_cls", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update": [[55, 64], ["preds.asnumpy", "labels.asnumpy", "numpy.stack", "meters.AveragePrecisionMetric.all_cls.append", "numpy.sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "labels", ",", "preds", ")", ":", "\n", "        ", "pred_scores", "=", "preds", ".", "asnumpy", "(", ")", "\n", "label_vecs", "=", "labels", ".", "asnumpy", "(", ")", "\n", "# pred_probs = np.where(pred_scores > 0, 1 / (1 + np.exp(-pred_scores)),", "\n", "#                       np.exp(pred_scores) / (1 + np.exp(pred_scores)))  # more numerical stable", "\n", "scores_tflag", "=", "np", ".", "stack", "(", "[", "pred_scores", ",", "label_vecs", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "self", ".", "all_cls", ".", "append", "(", "scores_tflag", ")", "\n", "self", ".", "num_pos", "+=", "np", ".", "sum", "(", "label_vecs", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.get": [[65, 78], ["numpy.zeros", "numpy.concatenate", "range", "numpy.zeros.mean", "numpy.cumsum", "numpy.cumsum", "meters.voc_ap", "numpy.argsort", "float", "numpy.maximum", "numpy.finfo"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.voc_ap"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "ap", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "all_cls", "=", "np", ".", "concatenate", "(", "self", ".", "all_cls", ",", "axis", "=", "0", ")", "\n", "for", "c", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "all_cls_c", "=", "all_cls", "[", ":", ",", "c", ",", ":", "]", "\n", "arg_sort", "=", "np", ".", "argsort", "(", "all_cls_c", "[", ":", ",", "0", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "all_cls_c", "=", "all_cls_c", "[", "arg_sort", "]", "\n", "num_tp", "=", "np", ".", "cumsum", "(", "all_cls_c", "[", ":", ",", "1", "]", ")", "\n", "num_fp", "=", "np", ".", "cumsum", "(", "1", "-", "all_cls_c", "[", ":", ",", "1", "]", ")", "\n", "rec", "=", "num_tp", "/", "float", "(", "self", ".", "num_pos", "[", "c", "]", ")", "\n", "prec", "=", "num_tp", "/", "np", ".", "maximum", "(", "num_tp", "+", "num_fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "[", "c", "]", "=", "voc_ap", "(", "rec", ",", "prec", ")", "\n", "", "return", "ap", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.ious": [[80, 91], ["np.repeat.astype", "np.tile.astype", "len", "numpy.tile", "numpy.repeat", "numpy.prod", "bi.clip", "len", "numpy.minimum", "numpy.maximum"], "function", ["None"], ["", "", "def", "ious", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "pred", "=", "pred", ".", "astype", "(", "float", ")", "\n", "gt", "=", "gt", ".", "astype", "(", "float", ")", "\n", "\n", "numObj", "=", "len", "(", "gt", ")", "\n", "gt", "=", "np", ".", "tile", "(", "gt", ",", "[", "len", "(", "pred", ")", ",", "1", "]", ")", "\n", "pred", "=", "np", ".", "repeat", "(", "pred", ",", "numObj", ",", "axis", "=", "0", ")", "\n", "bi", "=", "np", ".", "minimum", "(", "pred", "[", ":", ",", "2", ":", "]", ",", "gt", "[", ":", ",", "2", ":", "]", ")", "-", "np", ".", "maximum", "(", "pred", "[", ":", ",", ":", "2", "]", ",", "gt", "[", ":", ",", ":", "2", "]", ")", "+", "1", "\n", "area_bi", "=", "np", ".", "prod", "(", "bi", ".", "clip", "(", "0", ")", ",", "axis", "=", "1", ")", "\n", "area_bu", "=", "(", "gt", "[", ":", ",", "2", "]", "-", "gt", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "gt", "[", ":", ",", "3", "]", "-", "gt", "[", ":", ",", "1", "]", "+", "1", ")", "+", "(", "pred", "[", ":", ",", "2", "]", "-", "pred", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "pred", "[", ":", ",", "3", "]", "-", "pred", "[", ":", ",", "1", "]", "+", "1", ")", "-", "area_bi", "\n", "return", "area_bi", "/", "area_bu", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.corloc": [[93, 109], ["enumerate", "class_corloc.append", "sum", "len", "len", "float", "len", "max", "meters.ious"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.ious"], ["", "def", "corloc", "(", "pred_boxes", ",", "ground_truth", ")", ":", "\n", "    ", "class_corloc", "=", "[", "]", "\n", "gt_bboxes", "=", "ground_truth", "[", "'gt_bboxes'", "]", "\n", "for", "c", ",", "cls", "in", "enumerate", "(", "ground_truth", "[", "'class_names'", "]", ")", ":", "\n", "        ", "cls_pred_boxes", "=", "pred_boxes", "[", "pred_boxes", "[", ":", ",", "1", "]", "==", "c", ",", ":", "]", "\n", "cls_gt_bboxes", "=", "gt_bboxes", "[", "gt_bboxes", "[", ":", ",", "1", "]", "==", "c", ",", ":", "]", "\n", "cls_inds", "=", "(", "ground_truth", "[", "'gt_labels'", "]", "[", ":", ",", "c", "]", "==", "1", ")", ".", "nonzero", "(", ")", "\n", "cor", "=", "0", "\n", "for", "cidx", "in", "cls_inds", "[", "0", "]", ":", "\n", "            ", "pred", "=", "cls_pred_boxes", "[", "cls_pred_boxes", "[", ":", ",", "0", "]", "==", "cidx", ",", "2", ":", "6", "]", "\n", "if", "len", "(", "pred", ")", ">", "0", ":", "\n", "                ", "gt", "=", "cls_gt_bboxes", "[", "cls_gt_bboxes", "[", ":", ",", "0", "]", "==", "cidx", ",", "2", ":", "]", "\n", "if", "max", "(", "ious", "(", "pred", ",", "gt", ")", ")", ">=", "0.5", ":", "\n", "                    ", "cor", "+=", "1", "\n", "", "", "", "class_corloc", ".", "append", "(", "float", "(", "cor", ")", "/", "len", "(", "cls_inds", "[", "0", "]", ")", ")", "\n", "", "return", "sum", "(", "class_corloc", ")", "/", "len", "(", "class_corloc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.voc_ap": [[111, 143], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    average precision calculations\n    [precision integrated to recall]\n    :param rec: recall\n    :param prec: precision\n    :param use_07_metric: 2007 metric is 11-recall-point based AP\n    :return: average precision\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "+=", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# append sentinel values at both ends", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute precision integration ladder", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# look for recall value changes", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# sum (\\delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.visualize.make_dot": [[6, 56], ["dict", "graphviz.Digraph", "set", "visualize.make_dot.add_nodes"], "function", ["None"], ["def", "make_dot", "(", "var", ",", "params", "=", "None", ")", ":", "\n", "    ", "\"\"\" Produces Graphviz representation of PyTorch autograd graph\n\n    Blue nodes are the Variables that require grad, orange are Tensors\n    saved for backward in torch.autograd.Function\n\n    Args:\n        var: output Variable\n        params: dict of (name, Variable) to add names to node that\n            require grad (TODO: make optional)\n    \"\"\"", "\n", "if", "params", "is", "not", "None", ":", "\n", "        ", "assert", "isinstance", "(", "params", ".", "values", "(", ")", "[", "0", "]", ",", "Variable", ")", "\n", "param_map", "=", "{", "id", "(", "v", ")", ":", "k", "for", "k", ",", "v", "in", "params", ".", "items", "(", ")", "}", "\n", "\n", "", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "\n", "shape", "=", "'box'", ",", "\n", "align", "=", "'left'", ",", "\n", "fontsize", "=", "'12'", ",", "\n", "ranksep", "=", "'0.1'", ",", "\n", "height", "=", "'0.2'", ")", "\n", "dot", "=", "Digraph", "(", "node_attr", "=", "node_attr", ",", "graph_attr", "=", "dict", "(", "size", "=", "\"12,12\"", ")", ")", "\n", "seen", "=", "set", "(", ")", "\n", "\n", "def", "size_to_str", "(", "size", ")", ":", "\n", "        ", "return", "'('", "+", "(", "', '", ")", ".", "join", "(", "[", "'%d'", "%", "v", "for", "v", "in", "size", "]", ")", "+", "')'", "\n", "\n", "", "def", "add_nodes", "(", "var", ")", ":", "\n", "        ", "if", "var", "not", "in", "seen", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "var", ")", ":", "\n", "                ", "dot", ".", "node", "(", "str", "(", "id", "(", "var", ")", ")", ",", "size_to_str", "(", "var", ".", "size", "(", ")", ")", ",", "fillcolor", "=", "'orange'", ")", "\n", "", "elif", "hasattr", "(", "var", ",", "'variable'", ")", ":", "\n", "                ", "u", "=", "var", ".", "variable", "\n", "name", "=", "param_map", "[", "id", "(", "u", ")", "]", "if", "params", "is", "not", "None", "else", "''", "\n", "node_name", "=", "'%s\\n %s'", "%", "(", "name", ",", "size_to_str", "(", "u", ".", "size", "(", ")", ")", ")", "\n", "dot", ".", "node", "(", "str", "(", "id", "(", "var", ")", ")", ",", "node_name", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "", "else", ":", "\n", "                ", "dot", ".", "node", "(", "str", "(", "id", "(", "var", ")", ")", ",", "str", "(", "type", "(", "var", ")", ".", "__name__", ")", ")", "\n", "", "seen", ".", "add", "(", "var", ")", "\n", "if", "hasattr", "(", "var", ",", "'next_functions'", ")", ":", "\n", "                ", "for", "u", "in", "var", ".", "next_functions", ":", "\n", "                    ", "if", "u", "[", "0", "]", "is", "not", "None", ":", "\n", "                        ", "dot", ".", "edge", "(", "str", "(", "id", "(", "u", "[", "0", "]", ")", ")", ",", "str", "(", "id", "(", "var", ")", ")", ")", "\n", "add_nodes", "(", "u", "[", "0", "]", ")", "\n", "", "", "", "if", "hasattr", "(", "var", ",", "'saved_tensors'", ")", ":", "\n", "                ", "for", "t", "in", "var", ".", "saved_tensors", ":", "\n", "                    ", "dot", ".", "edge", "(", "str", "(", "id", "(", "t", ")", ")", ",", "str", "(", "id", "(", "var", ")", ")", ")", "\n", "add_nodes", "(", "t", ")", "\n", "", "", "", "", "add_nodes", "(", "var", ".", "grad_fn", ")", "\n", "return", "dot", "", "", ""]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.__init__": [[521, 531], ["vistools.SAVE_ATTEN._get_idx2cate_dict", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN._get_idx2cate_dict"], ["\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "save_dir", ")", "\n", "\n", "", "", "def", "save_top_5_pred_labels", "(", "self", ",", "preds", ",", "org_paths", ",", "global_step", ")", ":", "\n", "        ", "img_num", "=", "np", ".", "shape", "(", "preds", ")", "[", "0", "]", "\n", "for", "idx", "in", "range", "(", "img_num", ")", ":", "\n", "            ", "img_name", "=", "org_paths", "[", "idx", "]", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "'.JPEG'", "in", "img_name", ":", "\n", "                ", "img_id", "=", "img_name", "[", ":", "-", "5", "]", "\n", "", "elif", "'.png'", "in", "img_name", "or", "'.jpg'", "in", "img_name", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.save_top_5_pred_labels": [[532, 548], ["range", "numpy.shape", "numpy.shape", "os.path.join", "org_paths[].strip().split", "os.path.exists", "os.remove", "open", "f.write", "org_paths[].strip", "map"], "methods", ["None"], ["                ", "img_id", "=", "img_name", "[", ":", "-", "4", "]", "\n", "\n", "", "out", "=", "img_id", "+", "' '", "+", "' '", ".", "join", "(", "map", "(", "str", ",", "preds", "[", "idx", ",", ":", "]", ")", ")", "+", "'\\n'", "\n", "out_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'pred_labels.txt'", ")", "\n", "\n", "if", "global_step", "==", "0", "and", "idx", "==", "0", "and", "os", ".", "path", ".", "exists", "(", "out_file", ")", ":", "\n", "                ", "os", ".", "remove", "(", "out_file", ")", "\n", "", "with", "open", "(", "out_file", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "out", ")", "\n", "\n", "", "", "", "def", "save_masked_img_batch", "(", "self", ",", "path_batch", ",", "atten_batch", ",", "label_batch", ")", ":", "\n", "\n", "# img_num = np.shape(atten_batch)[0]", "\n", "        ", "img_num", "=", "atten_batch", ".", "size", "(", ")", "[", "0", "]", "\n", "# fid = open('imagenet_val_shape.txt', 'a')", "\n", "# print(np.shape(img_batch), np.shape(label_batch), np.shape(org_size_batch), np.shape(atten_batch))", "\n", "for", "idx", "in", "range", "(", "img_num", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.save_masked_img_batch": [[549, 561], ["range", "atten_batch.size", "atten.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "int", "vistools.SAVE_ATTEN._save_masked_img", "atten.cpu().data.numpy.cpu().data.numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN._save_masked_img"], ["            ", "atten", "=", "atten_batch", "[", "idx", "]", "\n", "atten", "=", "atten", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "label", "=", "label_batch", "[", "idx", "]", "\n", "label", "=", "int", "(", "label", ")", "\n", "self", ".", "_save_masked_img", "(", "path_batch", "[", "idx", "]", ",", "atten", ",", "label", ")", "\n", "\n", "", "", "def", "_get_idx2cate_dict", "(", "self", ",", "datasetname", "=", "None", ")", ":", "\n", "        ", "if", "datasetname", "not", "in", "idx2catename", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "'The given %s dataset category names are not available. The supported are: %s'", "%", "(", "str", "(", "datasetname", ")", ",", "','", ".", "join", "(", "idx2catename", ".", "keys", "(", ")", ")", ")", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "{", "idx", ":", "cate_name", "for", "idx", ",", "cate_name", "in", "enumerate", "(", "idx2catename", "[", "datasetname", "]", ")", "}", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN._get_idx2cate_dict": [[562, 569], ["idx2catename.keys", "print", "enumerate", "str", "idx2catename.keys"], "methods", ["None"], ["\n", "", "", "def", "_save_masked_img", "(", "self", ",", "img_path", ",", "atten", ",", "label", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN._save_masked_img": [[570, 605], ["cv2.imread", "numpy.shape", "numpy.shape", "print", "cv2.resize", "cv2.applyColorMap", "cv2.addWeighted", "os.path.join", "cv2.imwrite", "os.path.isfile", "numpy.shape", "numpy.shape", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "cv2.resize.astype", "cv2.addWeighted.astype", "cv2.applyColorMap.astype", "img_path.strip().split", "img_id.strip().split", "img_path.strip", "img_id.strip"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "img_path", ")", ":", "\n", "            ", "raise", "'Image not exist:%s'", "%", "(", "img_path", ")", "\n", "", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "org_size", "=", "np", ".", "shape", "(", "img", ")", "\n", "w", "=", "org_size", "[", "0", "]", "\n", "h", "=", "org_size", "[", "1", "]", "\n", "\n", "attention_map", "=", "atten", "[", "label", ",", ":", ",", ":", "]", "\n", "atten_norm", "=", "attention_map", "\n", "print", "(", "np", ".", "shape", "(", "attention_map", ")", ",", "'Max:'", ",", "np", ".", "max", "(", "attention_map", ")", ",", "'Min:'", ",", "np", ".", "min", "(", "attention_map", ")", ")", "\n", "# min_val = np.min(attention_map)", "\n", "# max_val = np.max(attention_map)", "\n", "# atten_norm = (attention_map - min_val)/(max_val - min_val)", "\n", "atten_norm", "=", "cv2", ".", "resize", "(", "atten_norm", ",", "dsize", "=", "(", "h", ",", "w", ")", ")", "\n", "atten_norm", "=", "atten_norm", "*", "255", "\n", "heat_map", "=", "cv2", ".", "applyColorMap", "(", "atten_norm", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "img", "=", "cv2", ".", "addWeighted", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ",", "0.5", ",", "heat_map", ".", "astype", "(", "np", ".", "uint8", ")", ",", "0.5", ",", "0", ")", "\n", "\n", "img_id", "=", "img_path", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "img_id", "=", "img_id", ".", "strip", "(", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "img_id", "+", "'.png'", ")", "\n", "cv2", ".", "imwrite", "(", "save_dir", ",", "img", ")", "\n", "\n", "", "def", "get_img_id", "(", "self", ",", "path", ")", ":", "\n", "        ", "img_id", "=", "path", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "return", "img_id", ".", "strip", "(", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "", "def", "save_top_5_atten_maps", "(", "self", ",", "atten_fuse_batch", ",", "top_indices_batch", ",", "org_paths", ",", "topk", "=", "5", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.get_img_id": [[606, 609], ["path.strip().split", "img_id.strip().split", "path.strip", "img_id.strip"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.save_top_5_atten_maps": [[610, 635], ["range", "numpy.shape", "numpy.shape", "cv2.imread", "range", "[].split", "cv2.resize", "os.path.join", "os.path.join", "cv2.imwrite", "os.path.exists", "os.makedirs", "org_paths[].strip().split", "org_paths[].strip"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["\n", "img_num", "=", "np", ".", "shape", "(", "atten_fuse_batch", ")", "[", "0", "]", "\n", "for", "idx", "in", "range", "(", "img_num", ")", ":", "\n", "            ", "img_id", "=", "org_paths", "[", "idx", "]", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "im", "=", "cv2", ".", "imread", "(", "org_paths", "[", "idx", "]", ")", "\n", "img_shape", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "for", "k", "in", "range", "(", "topk", ")", ":", "\n", "                ", "atten_pos", "=", "top_indices_batch", "[", "idx", ",", "k", "]", "\n", "atten_map", "=", "atten_fuse_batch", "[", "idx", ",", "atten_pos", ",", ":", ",", ":", "]", "\n", "# heat_map = cv2.resize(atten_map, dsize=(224, 224))", "\n", "heat_map", "=", "cv2", ".", "resize", "(", "atten_map", ",", "dsize", "=", "(", "img_shape", "[", "1", "]", ",", "img_shape", "[", "0", "]", ")", ")", "\n", "heat_map", "=", "heat_map", "*", "255", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'heat_maps'", ",", "'top%d'", "%", "(", "k", "+", "1", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "img_id", "+", "'.png'", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "heat_map", ")", "\n", "\n", "# def save_heatmap_segmentation(self, img_path, atten, gt_label, save_dir=None, size=(224,224), maskedimg=False):", "\n", "#     assert np.ndim(atten) == 4", "\n", "#", "\n", "#     labels_idx = np.where(gt_label[0]==1)[0] if np.ndim(gt_label)==2 else np.where(gt_label==1)[0]", "\n", "#", "\n", "#     if save_dir is None:", "\n", "#         save_dir = self.save_dir", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.normalize_map": [[666, 672], ["numpy.min", "numpy.min", "numpy.max", "numpy.max"], "methods", ["None"], ["", "def", "_add_msk2img", "(", "self", ",", "img", ",", "msk", ",", "isnorm", "=", "True", ")", ":", "\n", "        ", "if", "np", ".", "ndim", "(", "img", ")", "==", "3", ":", "\n", "            ", "assert", "np", ".", "shape", "(", "img", ")", "[", "0", ":", "2", "]", "==", "np", ".", "shape", "(", "msk", ")", "\n", "", "else", ":", "\n", "            ", "assert", "np", ".", "shape", "(", "img", ")", "==", "np", ".", "shape", "(", "msk", ")", "\n", "\n", "", "if", "isnorm", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN._add_msk2img": [[673, 688], ["cv2.applyColorMap", "cv2.addWeighted", "numpy.ndim", "numpy.ndim", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "atten_norm.astype", "img.astype", "cv2.applyColorMap.astype", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape"], "methods", ["None"], ["            ", "min_val", "=", "np", ".", "min", "(", "msk", ")", "\n", "max_val", "=", "np", ".", "max", "(", "msk", ")", "\n", "atten_norm", "=", "(", "msk", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", ")", "\n", "", "atten_norm", "=", "atten_norm", "*", "255", "\n", "heat_map", "=", "cv2", ".", "applyColorMap", "(", "atten_norm", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "w_img", "=", "cv2", ".", "addWeighted", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ",", "0.5", ",", "heat_map", ".", "astype", "(", "np", ".", "uint8", ")", ",", "0.5", ",", "0", ")", "\n", "\n", "return", "w_img", "\n", "\n", "", "def", "_draw_text", "(", "self", ",", "pic", ",", "txt", ",", "pos", "=", "'topleft'", ")", ":", "\n", "        ", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "# multiple line", "\n", "txt", "=", "txt", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "stat_y", "=", "30", "\n", "for", "t", "in", "txt", ":", "\n", "            ", "pic", "=", "cv2", ".", "putText", "(", "pic", ",", "t", ",", "(", "10", ",", "stat_y", ")", ",", "font", ",", "0.8", ",", "(", "255", ",", "255", ",", "255", ")", ",", "2", ",", "cv2", ".", "LINE_AA", ")", "\n", "stat_y", "+=", "30", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN._draw_text": [[689, 698], ["txt.strip().split.strip().split.strip().split", "cv2.putText", "txt.strip().split.strip().split.strip"], "methods", ["None"], ["\n", "", "return", "pic", "\n", "\n", "", "def", "_mark_score_on_picture", "(", "self", ",", "pic", ",", "score_vec", ",", "label_idx", ")", ":", "\n", "        ", "score", "=", "score_vec", "[", "label_idx", "]", "\n", "txt", "=", "'%.3f'", "%", "(", "score", ")", "\n", "pic", "=", "self", ".", "_draw_text", "(", "pic", ",", "txt", ",", "pos", "=", "'topleft'", ")", "\n", "return", "pic", "\n", "\n", "", "def", "get_heatmap_idxes", "(", "self", ",", "gt_label", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN._mark_score_on_picture": [[699, 704], ["vistools.SAVE_ATTEN._draw_text"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN._draw_text"], ["\n", "        ", "labels_idx", "=", "[", "]", "\n", "if", "np", ".", "ndim", "(", "gt_label", ")", "==", "1", ":", "\n", "            ", "labels_idx", "=", "np", ".", "expand_dims", "(", "gt_label", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "", "elif", "np", ".", "ndim", "(", "gt_label", ")", "==", "2", ":", "\n", "            ", "for", "row", "in", "gt_label", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.get_heatmap_idxes": [[705, 718], ["numpy.ndim", "numpy.ndim", "numpy.expand_dims().astype", "numpy.expand_dims().astype", "numpy.ndim", "numpy.ndim", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims().astype.append", "idxes.tolist", "numpy.ndim", "numpy.ndim", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "methods", ["None"], ["                ", "idxes", "=", "np", ".", "where", "(", "row", "[", "0", "]", "==", "1", ")", "[", "0", "]", "if", "np", ".", "ndim", "(", "row", ")", "==", "2", "else", "np", ".", "where", "(", "row", "==", "1", ")", "[", "0", "]", "\n", "labels_idx", ".", "append", "(", "idxes", ".", "tolist", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "labels_idx", "=", "None", "\n", "\n", "", "return", "labels_idx", "\n", "\n", "", "def", "get_map_k", "(", "self", ",", "atten", ",", "k", ",", "size", "=", "(", "224", ",", "224", ")", ")", ":", "\n", "        ", "atten_map_k", "=", "atten", "[", "k", ",", ":", ",", ":", "]", "\n", "# print np.max(atten_map_k), np.min(atten_map_k)", "\n", "atten_map_k", "=", "cv2", ".", "resize", "(", "atten_map_k", ",", "dsize", "=", "size", ")", "\n", "return", "atten_map_k", "\n", "\n", "", "def", "read_img", "(", "self", ",", "img_path", ",", "size", "=", "(", "224", ",", "224", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.get_map_k": [[719, 724], ["cv2.resize"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["        ", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "if", "img", "is", "None", ":", "\n", "            ", "print", "(", "\"Image does not exist. %s\"", "%", "(", "img_path", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "if", "size", "==", "(", "0", ",", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.read_img": [[725, 736], ["cv2.imread", "print", "exit", "cv2.resize", "numpy.shape", "numpy.shape"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["            ", "size", "=", "np", ".", "shape", "(", "img", ")", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "size", ")", "\n", "", "return", "img", ",", "size", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "def", "get_masked_img", "(", "self", ",", "img_path", ",", "atten", ",", "gt_label", ",", "\n", "size", "=", "(", "224", ",", "224", ")", ",", "maps_in_dir", "=", "False", ",", "save_dir", "=", "None", ",", "only_map", "=", "False", ")", ":", "\n", "\n", "        ", "assert", "np", ".", "ndim", "(", "atten", ")", "==", "4", "\n", "\n", "save_dir", "=", "save_dir", "if", "save_dir", "is", "not", "None", "else", "self", ".", "save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.get_masked_img": [[737, 769], ["numpy.ndim", "numpy.ndim", "isinstance", "isinstance", "len", "vistools.SAVE_ATTEN.get_heatmap_idxes", "range", "vistools.SAVE_ATTEN.read_img", "img_path[].split", "img_name.strip().split", "os.path.join", "os.mkdir", "vistools.SAVE_ATTEN.get_map_k", "vistools.SAVE_ATTEN._add_msk2img", "str", "cv2.imwrite", "cv2.imwrite", "img_name.strip", "os.path.join", "os.path.join", "vistools.SAVE_ATTEN.normalize_map"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.get_heatmap_idxes", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.read_img", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.get_map_k", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN._add_msk2img", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.normalize_map"], ["if", "isinstance", "(", "img_path", ",", "list", ")", "or", "isinstance", "(", "img_path", ",", "tuple", ")", ":", "\n", "            ", "batch_size", "=", "len", "(", "img_path", ")", "\n", "label_indexes", "=", "self", ".", "get_heatmap_idxes", "(", "gt_label", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "img", ",", "size", "=", "self", ".", "read_img", "(", "img_path", "[", "i", "]", ",", "size", ")", "\n", "img_name", "=", "img_path", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "img_name", "=", "img_name", ".", "strip", "(", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "maps_in_dir", ":", "\n", "                    ", "img_save_dir", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "img_name", ")", "\n", "os", ".", "mkdir", "(", "img_save_dir", ")", "\n", "\n", "", "for", "k", "in", "label_indexes", "[", "i", "]", ":", "\n", "                    ", "atten_map_k", "=", "self", ".", "get_map_k", "(", "atten", "[", "i", "]", ",", "k", ",", "size", ")", "\n", "msked_img", "=", "self", ".", "_add_msk2img", "(", "img", ",", "atten_map_k", ")", "\n", "\n", "suffix", "=", "str", "(", "k", "+", "1", ")", "\n", "if", "only_map", ":", "\n", "                        ", "save_img", "=", "(", "self", ".", "normalize_map", "(", "atten_map_k", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "", "else", ":", "\n", "                        ", "save_img", "=", "msked_img", "\n", "\n", "", "if", "maps_in_dir", ":", "\n", "                        ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "img_save_dir", ",", "suffix", "+", "'.png'", ")", ",", "save_img", ")", "\n", "", "else", ":", "\n", "                        ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "img_name", "+", "'_'", "+", "suffix", "+", "'.png'", ")", ",", "save_img", ")", "\n", "\n", "#     if score_vec is not None and labels_idx is not None:", "\n", "#         msked_img = self._mark_score_on_picture(msked_img, score_vec, labels_idx[k])", "\n", "#     if labels_idx is not None:", "\n", "#         suffix = self.idx2cate.get(labels_idx[k], k)", "\n", "\n", "# def get_masked_img_ml(self, img_path, atten, save_dir=None, size=(224,224),", "\n", "#                       gt_label=None, score_vec=None):", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.SAVE_ATTEN.get_atten_map": [[867, 896], ["isinstance", "isinstance", "len", "range", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "cv2.resize", "img_name.replace.replace.replace", "cv2.imwrite", "img_path[].split", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["\n", "\n", "if", "save_dir", "is", "not", "None", ":", "\n", "            ", "self", ".", "save_dir", "=", "save_dir", "\n", "", "if", "isinstance", "(", "img_path", ",", "list", ")", "or", "isinstance", "(", "img_path", ",", "tuple", ")", ":", "\n", "            ", "batch_size", "=", "len", "(", "img_path", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "atten_norm", "=", "atten", "[", "i", "]", "\n", "min_val", "=", "np", ".", "min", "(", "atten_norm", ")", "\n", "max_val", "=", "np", ".", "max", "(", "atten_norm", ")", "\n", "atten_norm", "=", "(", "atten_norm", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", ")", "\n", "# print np.max(atten_norm), np.min(atten_norm)", "\n", "h", ",", "w", "=", "size", "\n", "\n", "atten_norm", "=", "cv2", ".", "resize", "(", "atten_norm", ",", "dsize", "=", "(", "h", ",", "w", ")", ")", "\n", "# atten_norm = cv2.resize(atten_norm, dsize=(w,h))", "\n", "atten_norm", "=", "atten_norm", "*", "255", "\n", "\n", "img_name", "=", "img_path", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "img_name", "=", "img_name", ".", "replace", "(", "'jpg'", ",", "'png'", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "img_name", ")", ",", "atten_norm", ")", "\n", "\n", "\n", "###############################################################################", "\n", "########  copy from save_mask.py", "\n", "", "", "", "", "from", "PIL", "import", "Image", "\n", "import", "numpy", "as", "np", "\n", "\n", "# Colour map.", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_im_heatmap_box": [[24, 78], ["cv2.imread", "numpy.shape", "cv2.putText", "zip", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "save_name.replace.replace", "cv2.imwrite", "numpy.ones", "numpy.ones", "draw_hm.copy", "numpy.asarray", "range", "draw_im.copy", "cv2.resize", "cv2.applyColorMap", "cv2.putText", "np.concatenate.append", "np.concatenate.append", "os.path.exists", "os.makedirs", "os.path.join", "len", "cv2.rectangle", "numpy.ones", "numpy.uint8", "numpy.asarray", "range", "draw_im.copy", "draw_hm.copy", "im_file.split", "len", "str", "int", "int", "str", "vistools.cal_iou"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.cal_iou"], ["def", "save_im_heatmap_box", "(", "im_file", ",", "top_maps", ",", "topk_boxes", ",", "save_dir", ",", "gt_label", "=", "None", ",", "gt_box", "=", "None", ",", "\n", "epoch", "=", "100", ",", "threshold", "=", "-", "1", ",", "suffix", "=", "''", ")", ":", "\n", "    ", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "\n", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_hm", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "cam_to_save", "=", "[", "draw_hm", ".", "copy", "(", ")", "]", "\n", "draw_im", "[", ":", "h", ",", ":", ",", ":", "]", "=", "im", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'original image: {}'", ".", "format", "(", "threshold", ")", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "im_to_save", "=", "[", "draw_im", ".", "copy", "(", ")", "]", "\n", "for", "cls_box", ",", "cam_map_cls", "in", "zip", "(", "topk_boxes", ",", "top_maps", ")", ":", "\n", "        ", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", ",", ":", "]", "=", "im", "\n", "cam_map_cls", "=", "cv2", ".", "resize", "(", "cam_map_cls", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "cam_map_cls", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "\n", "draw_im", "[", ":", "h", ",", ":", ",", ":", "]", "=", "heatmap", "*", "0.7", "+", "draw_im", "[", ":", "h", ",", ":", ",", ":", "]", "*", "0.3", "\n", "draw_hm", "[", ":", "h", ",", ":", ",", ":", "]", "=", "heatmap", "\n", "\n", "# cv2.rectangle(draw_im, (cls_box[1], cls_box[2]), (cls_box[3], cls_box[4]), color=(255, 0, 0), thickness=2)", "\n", "if", "gt_box", "is", "not", "None", ":", "\n", "            ", "box_cnt", "=", "len", "(", "gt_box", ")", "//", "4", "\n", "gt_box", "=", "np", ".", "asarray", "(", "gt_box", ",", "int", ")", "\n", "loc_flag", "=", "False", "\n", "for", "i", "in", "range", "(", "box_cnt", ")", ":", "\n", "                ", "gt_bbox", "=", "gt_box", "[", "i", "*", "4", ":", "(", "i", "+", "1", ")", "*", "4", "]", "\n", "# cv2.rectangle(draw_im, (gt_bbox[0], gt_bbox[1]), (gt_bbox[2], gt_bbox[3]), color=(0, 0, 255), thickness=2)", "\n", "loc_flag", "=", "loc_flag", "or", "(", "cal_iou", "(", "cls_box", "[", "1", ":", "]", ",", "gt_bbox", ")", ">", "0.5", ")", "\n", "", "loc_str", "=", "'LOC_TRUE'", "if", "loc_flag", "else", "'LOC_FALSE'", "\n", "", "if", "gt_label", "is", "not", "None", ":", "\n", "            ", "cls_str", "=", "'CLS_TRUE'", "if", "int", "(", "cls_box", "[", "0", "]", ")", "==", "int", "(", "gt_label", ")", "else", "'CLS_FALSE'", "\n", "", "else", ":", "\n", "            ", "cls_str", "=", "'classified as {}'", ".", "format", "(", "cls_box", "[", "0", "]", ")", "\n", "", "cv2", ".", "putText", "(", "draw_im", ",", "cls_str", "+", "'|{}'", ".", "format", "(", "loc_str", ")", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "fontScale", "=", "0.5", ")", "\n", "im_to_save", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "cam_to_save", ".", "append", "(", "draw_hm", ".", "copy", "(", ")", ")", "\n", "", "im_to_save", "=", "np", ".", "concatenate", "(", "im_to_save", ",", "axis", "=", "1", ")", "\n", "cam_to_save", "=", "np", ".", "concatenate", "(", "cam_to_save", ",", "axis", "=", "1", ")", "\n", "im_to_save", "=", "np", ".", "concatenate", "(", "(", "im_to_save", ",", "cam_to_save", ")", ",", "axis", "=", "0", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "save_name", "=", "str", "(", "gt_label", "[", "0", "]", ")", "+", "'_'", "+", "str", "(", "epoch", ")", "+", "'_'", "+", "im_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "save_name", "=", "save_name", ".", "replace", "(", "'.'", ",", "'th-{}_{}.'", ".", "format", "(", "threshold", ",", "suffix", ")", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_name", ")", ",", "im_to_save", ")", "\n", "\n", "", "def", "save_sim_heatmap_box", "(", "im_file", ",", "top_maps", ",", "save_dir", ",", "gt_label", "=", "None", ",", "sim_map", "=", "None", ",", "\n", "epoch", "=", "100", ",", "threshold", "=", "-", "1", ",", "suffix", "=", "''", ",", "fg_th", "=", "0.1", ",", "bg_th", "=", "0.05", ")", ":", "\n", "    ", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "\n", "# draw_im = 255 * np.ones((h + 15, w, 3), np.uint8)", "\n", "# draw_hm = 255 * np.ones((h + 15, w, 3), np.uint8)", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_sim_heatmap_box": [[79, 170], ["cv2.imread", "numpy.shape", "numpy.concatenate", "save_name.replace.replace", "cv2.imwrite", "isinstance", "isinstance", "cv2.putText", "sim_map_i.squeeze().data.cpu().numpy.squeeze().data.cpu().numpy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "os.path.exists", "os.makedirs", "os.path.join", "numpy.ones", "numpy.ones", "draw_hm.copy", "draw_hm.copy", "draw_hm.copy", "draw_im.copy", "int", "int", "cv2.resize", "cv2.resize.reshape", "numpy.arange().astype", "cam_map_cls_vector[].reshape", "numpy.sum().reshape", "cam_map_cls_vector[].reshape", "numpy.sum().reshape", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.applyColorMap", "cv2.applyColorMap", "cv2.applyColorMap", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "im_file.split", "sim_map_i.squeeze().data.cpu().numpy.squeeze().data.cpu", "numpy.sqrt", "numpy.sqrt", "numpy.ones", "numpy.uint8", "numpy.uint8", "numpy.uint8", "draw_im.copy", "draw_hm.copy", "draw_hm.copy", "draw_hm.copy", "str", "numpy.arange", "numpy.min", "numpy.sum", "numpy.min", "numpy.min", "numpy.sum", "numpy.min", "numpy.min", "str", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "sim_map_i.squeeze().data.cpu().numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["# draw_im[:h, :, :] = im", "\n", "# cv2.putText(draw_im, 'original image: {}'.format(threshold), (0, h + 12), color=(0, 0, 0), fontFace=cv2.FONT_HERSHEY_COMPLEX,", "\n", "#             fontScale=0.5)", "\n", "final_to_save", "=", "[", "]", "\n", "if", "isinstance", "(", "sim_map", ",", "tuple", ")", "or", "isinstance", "(", "sim_map", ",", "list", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "sim_map", "=", "[", "sim_map", "]", "\n", "", "for", "sim_map_i", "in", "sim_map", ":", "\n", "        ", "if", "sim_map_i", "is", "None", ":", "\n", "            ", "continue", "\n", "", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_hm", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", ",", ":", "]", "=", "im", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'original image: {}'", ".", "format", "(", "threshold", ")", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "sim_map_i", "=", "sim_map_i", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cam_to_save", "=", "[", "draw_hm", ".", "copy", "(", ")", "]", "\n", "cam_pos_to_save", "=", "[", "draw_hm", ".", "copy", "(", ")", "]", "\n", "cam_neg_to_save", "=", "[", "draw_hm", ".", "copy", "(", ")", "]", "\n", "im_to_save", "=", "[", "draw_im", ".", "copy", "(", ")", "]", "\n", "wh_sim", "=", "sim_map_i", ".", "shape", "[", "0", "]", "\n", "h_sim", ",", "w_sim", "=", "int", "(", "np", ".", "sqrt", "(", "wh_sim", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "wh_sim", ")", ")", "\n", "for", "cam_map_cls", "in", "top_maps", ":", "\n", "            ", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", ",", ":", "]", "=", "im", "\n", "cam_map_cls", "=", "cv2", ".", "resize", "(", "cam_map_cls", ",", "dsize", "=", "(", "w_sim", ",", "h_sim", ")", ")", "\n", "cam_map_cls_vector", "=", "cam_map_cls", ".", "reshape", "(", "-", "1", ")", "\n", "#positive", "\n", "cam_map_cls_id", "=", "np", ".", "arange", "(", "wh_sim", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "cam_map_cls_th_ind_pos", "=", "cam_map_cls_id", "[", "cam_map_cls_vector", ">", "fg_th", "]", "\n", "sim_map_sel_pos", "=", "sim_map_i", "[", ":", ",", "cam_map_cls_th_ind_pos", "]", "\n", "sim_map_sel_pos", "=", "(", "sim_map_sel_pos", "-", "np", ".", "min", "(", "sim_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "sim_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "min", "(", "sim_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-10", ")", "\n", "cam_map_cls_val_pos", "=", "cam_map_cls_vector", "[", "cam_map_cls_th_ind_pos", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "# sim_map_sel_pos = np.sum(sim_map_sel_pos * cam_map_cls_val_pos, axis=1).reshape(h_sim, w_sim)", "\n", "sim_map_sel_pos", "=", "np", ".", "sum", "(", "sim_map_sel_pos", ",", "axis", "=", "1", ")", ".", "reshape", "(", "h_sim", ",", "w_sim", ")", "\n", "sim_map_sel_pos", "=", "(", "sim_map_sel_pos", "-", "np", ".", "min", "(", "sim_map_sel_pos", ")", ")", "/", "(", "np", ".", "max", "(", "sim_map_sel_pos", ")", "-", "np", ".", "min", "(", "sim_map_sel_pos", ")", "+", "1e-10", ")", "\n", "\n", "#negtive", "\n", "cam_map_cls_th_ind_neg", "=", "cam_map_cls_id", "[", "cam_map_cls_vector", "<", "bg_th", "]", "\n", "sim_map_sel_neg", "=", "sim_map_i", "[", ":", ",", "cam_map_cls_th_ind_neg", "]", "\n", "sim_map_sel_neg", "=", "(", "sim_map_sel_neg", "-", "np", ".", "min", "(", "sim_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "sim_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "min", "(", "sim_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-10", ")", "\n", "cam_map_cls_val_neg", "=", "cam_map_cls_vector", "[", "cam_map_cls_th_ind_neg", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "# sim_map_sel_neg = np.sum(sim_map_sel_neg * (1-cam_map_cls_val_neg), axis=1).reshape(h_sim, w_sim)", "\n", "sim_map_sel_neg", "=", "np", ".", "sum", "(", "sim_map_sel_neg", ",", "axis", "=", "1", ")", ".", "reshape", "(", "h_sim", ",", "w_sim", ")", "\n", "sim_map_sel_neg", "=", "(", "sim_map_sel_neg", "-", "np", ".", "min", "(", "sim_map_sel_neg", ")", ")", "/", "(", "np", ".", "max", "(", "sim_map_sel_neg", ")", "-", "np", ".", "min", "(", "sim_map_sel_neg", ")", "+", "1e-10", ")", "\n", "\n", "#", "\n", "sim_map_sel", "=", "sim_map_sel_pos", "-", "sim_map_sel_neg", "\n", "# sim_map_sel = sim_map_sel_pos", "\n", "sim_map_sel", "=", "sim_map_sel", "*", "(", "sim_map_sel", ">", "0", ")", "\n", "sim_map_sel", "=", "(", "sim_map_sel", "-", "np", ".", "min", "(", "sim_map_sel", ")", ")", "/", "(", "np", ".", "max", "(", "sim_map_sel", ")", "-", "np", ".", "min", "(", "sim_map_sel", ")", "+", "1e-10", ")", "\n", "sim_map_sel", "=", "cv2", ".", "resize", "(", "sim_map_sel", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "sim_map_sel_pos", "=", "cv2", ".", "resize", "(", "sim_map_sel_pos", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "sim_map_sel_neg", "=", "cv2", ".", "resize", "(", "sim_map_sel_neg", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "sim_map_sel", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heatmap_pos", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "sim_map_sel_pos", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heatmap_neg", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "sim_map_sel_neg", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "draw_im", "[", ":", "h", ",", ":", ",", ":", "]", "=", "heatmap", "*", "0.7", "+", "draw_im", "[", ":", "h", ",", ":", ",", ":", "]", "*", "0.3", "\n", "draw_hm", "[", ":", "h", ",", ":", ",", ":", "]", "=", "heatmap", "\n", "\n", "im_to_save", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "cam_to_save", ".", "append", "(", "draw_hm", ".", "copy", "(", ")", ")", "\n", "draw_hm", "[", ":", "h", ",", ":", ",", ":", "]", "=", "heatmap_pos", "\n", "cam_pos_to_save", ".", "append", "(", "draw_hm", ".", "copy", "(", ")", ")", "\n", "draw_hm", "[", ":", "h", ",", ":", ",", ":", "]", "=", "heatmap_neg", "\n", "cam_neg_to_save", ".", "append", "(", "draw_hm", ".", "copy", "(", ")", ")", "\n", "", "im_to_save", "=", "np", ".", "concatenate", "(", "im_to_save", ",", "axis", "=", "1", ")", "\n", "cam_to_save", "=", "np", ".", "concatenate", "(", "cam_to_save", ",", "axis", "=", "1", ")", "\n", "cam_pos_to_save", "=", "np", ".", "concatenate", "(", "cam_pos_to_save", ",", "axis", "=", "1", ")", "\n", "cam_neg_to_save", "=", "np", ".", "concatenate", "(", "cam_neg_to_save", ",", "axis", "=", "1", ")", "\n", "final_to_save", ".", "append", "(", "im_to_save", ")", "\n", "final_to_save", ".", "append", "(", "cam_to_save", ")", "\n", "final_to_save", ".", "append", "(", "cam_pos_to_save", ")", "\n", "final_to_save", ".", "append", "(", "cam_neg_to_save", ")", "\n", "", "final_to_save", "=", "np", ".", "concatenate", "(", "final_to_save", ",", "axis", "=", "0", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "save_name", "=", "str", "(", "gt_label", "[", "0", "]", ")", "+", "'_'", "+", "str", "(", "epoch", ")", "+", "'_'", "+", "im_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "save_name", "=", "save_name", ".", "replace", "(", "'.'", ",", "'th-{}_{}.'", ".", "format", "(", "threshold", ",", "suffix", ")", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_name", ")", ",", "final_to_save", ")", "\n", "\n", "", "def", "save_im_sim", "(", "im_file", ",", "aff_maps", ",", "save_dir", ",", "suffix", "=", "''", ",", "gt_label", "=", "None", ",", "epoch", "=", "100", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "aff_maps", ",", "tuple", ")", "or", "isinstance", "(", "aff_maps", ",", "list", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "aff_maps", "=", "[", "aff_maps", "]", "\n", "", "break_flag", "=", "True", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_im_sim": [[171, 243], ["cv2.imread", "numpy.shape", "range", "numpy.concatenate", "cv2.putText", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "save_name.replace.replace", "cv2.imwrite", "isinstance", "isinstance", "numpy.ones", "len", "np.concatenate.copy", "draw_im.copy", "enumerate", "numpy.concatenate", "np.concatenate.append", "np.concatenate.append", "os.path.exists", "os.makedirs", "os.path.join", "np.concatenate.append", "numpy.ones", "aff_i.squeeze().data.cpu().numpy.squeeze().data.cpu().numpy", "aff_i[].reshape", "cv2.resize", "cv2.applyColorMap", "cv2.line", "cv2.line", "cv2.putText", "np.concatenate.append", "draw_im.copy", "np.concatenate.copy", "im_file.split", "numpy.ones", "int", "int", "int", "int", "numpy.uint8", "str", "numpy.ones", "aff_i.squeeze().data.cpu().numpy.squeeze().data.cpu", "numpy.sqrt", "numpy.sqrt", "numpy.min", "str", "numpy.max", "numpy.min", "aff_i.squeeze().data.cpu().numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["for", "aff_i", "in", "aff_maps", ":", "\n", "        ", "if", "aff_i", "is", "not", "None", ":", "\n", "            ", "break_flag", "=", "False", "\n", "break", "\n", "", "", "if", "break_flag", ":", "\n", "        ", "return", "\n", "\n", "", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "draw_aff", "=", "[", "]", "\n", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "aff_maps", ")", ")", ":", "\n", "        ", "if", "aff_maps", "[", "i", "]", "is", "not", "None", ":", "\n", "            ", "draw_aff", ".", "append", "(", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", ")", "\n", "", "", "draw_aff", "=", "np", ".", "concatenate", "(", "draw_aff", ",", "axis", "=", "0", ")", "\n", "aff_to_save", "=", "[", "draw_aff", ".", "copy", "(", ")", "]", "\n", "draw_im", "[", ":", "h", ",", ":", ",", ":", "]", "=", "im", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'original image'", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "im_to_save", "=", "[", "draw_im", ".", "copy", "(", ")", "]", "\n", "points", "=", "[", "[", "h", "//", "4", ",", "w", "//", "4", "]", ",", "[", "h", "//", "4", "*", "3", ",", "w", "//", "4", "*", "3", "]", ",", "[", "h", "//", "2", ",", "w", "//", "2", "]", ",", "[", "h", "//", "4", "*", "3", ",", "w", "//", "4", "]", ",", "[", "h", "//", "4", ",", "w", "//", "4", "*", "3", "]", "]", "\n", "for", "point", "in", "points", ":", "\n", "        ", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", ",", ":", "]", "=", "im", "\n", "draw_aff_j", "=", "[", "]", "\n", "for", "i", ",", "aff_i", "in", "enumerate", "(", "aff_maps", ")", ":", "\n", "            ", "if", "aff_i", "is", "None", ":", "\n", "                ", "continue", "\n", "", "aff_i", "=", "aff_i", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "draw_aff_ij", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "h_w_aff", "=", "aff_i", ".", "shape", "[", "0", "]", "\n", "h_aff", ",", "w_aff", "=", "int", "(", "np", ".", "sqrt", "(", "h_w_aff", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "h_w_aff", ")", ")", "\n", "h_aff_i", ",", "w_aff_i", "=", "int", "(", "point", "[", "0", "]", "*", "h_aff", "/", "h", ")", ",", "int", "(", "point", "[", "1", "]", "*", "w_aff", "/", "w", ")", "\n", "aff_map_i", "=", "aff_i", "[", ":", ",", "h_aff_i", "*", "w_aff", "+", "w_aff_i", "]", ".", "reshape", "(", "h_aff", ",", "w_aff", ")", "\n", "aff_map_i", "=", "(", "aff_map_i", "-", "np", ".", "min", "(", "aff_map_i", ")", ")", "/", "(", "np", ".", "max", "(", "aff_map_i", ")", "-", "np", ".", "min", "(", "aff_map_i", ")", "+", "1e-10", ")", "\n", "aff_map_i", "=", "cv2", ".", "resize", "(", "aff_map_i", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "aff_map_i", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "aff_map_i", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "\n", "ptStart_h", "=", "(", "point", "[", "1", "]", "-", "5", ",", "point", "[", "0", "]", ")", "\n", "ptEnd_h", "=", "(", "point", "[", "1", "]", "+", "5", ",", "point", "[", "0", "]", ")", "\n", "point_color", "=", "(", "0", ",", "255", ",", "0", ")", "# BGR", "\n", "thickness", "=", "2", "\n", "lineType", "=", "4", "\n", "cv2", ".", "line", "(", "draw_im", ",", "ptStart_h", ",", "ptEnd_h", ",", "point_color", ",", "thickness", ",", "lineType", ")", "\n", "\n", "ptStart_v", "=", "(", "point", "[", "1", "]", ",", "point", "[", "0", "]", "-", "5", ")", "\n", "ptEnd_v", "=", "(", "point", "[", "1", "]", ",", "point", "[", "0", "]", "+", "5", ")", "\n", "cv2", ".", "line", "(", "draw_im", ",", "ptStart_v", ",", "ptEnd_v", ",", "point_color", ",", "thickness", ",", "lineType", ")", "\n", "\n", "draw_aff_ij", "[", ":", "h", ",", ":", ",", ":", "]", "=", "aff_map_i", "\n", "cv2", ".", "putText", "(", "draw_aff_ij", ",", "'{} layer'", ".", "format", "(", "i", "+", "2", ")", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "fontScale", "=", "0.5", ")", "\n", "draw_aff_j", ".", "append", "(", "draw_aff_ij", ")", "\n", "", "draw_aff_j", "=", "np", ".", "concatenate", "(", "draw_aff_j", ",", "axis", "=", "0", ")", "\n", "im_to_save", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "aff_to_save", ".", "append", "(", "draw_aff_j", ".", "copy", "(", ")", ")", "\n", "\n", "", "im_to_save", "=", "np", ".", "concatenate", "(", "im_to_save", ",", "axis", "=", "1", ")", "\n", "aff_to_save", "=", "np", ".", "concatenate", "(", "aff_to_save", ",", "axis", "=", "1", ")", "\n", "im_to_save", "=", "np", ".", "concatenate", "(", "(", "im_to_save", ",", "aff_to_save", ")", ",", "axis", "=", "0", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "save_name", "=", "str", "(", "gt_label", "[", "0", "]", ")", "+", "'_'", "+", "str", "(", "epoch", ")", "+", "'_'", "+", "im_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "save_name", "=", "save_name", ".", "replace", "(", "'.'", ",", "'_sim_{}.'", ".", "format", "(", "suffix", ")", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_name", ")", ",", "im_to_save", ")", "\n", "\n", "", "def", "cal_iou", "(", "box1", ",", "box2", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.cal_iou": [[244, 270], ["numpy.asarray", "numpy.asarray", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.maximum"], "function", ["None"], ["\n", "box1", "=", "np", ".", "asarray", "(", "box1", ",", "dtype", "=", "float", ")", "\n", "box2", "=", "np", ".", "asarray", "(", "box2", ",", "dtype", "=", "float", ")", "\n", "if", "box1", ".", "ndim", "==", "1", ":", "\n", "        ", "box1", "=", "box1", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "if", "box2", ".", "ndim", "==", "1", ":", "\n", "        ", "box2", "=", "box2", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "iw", "=", "np", ".", "minimum", "(", "box1", "[", ":", ",", "2", "]", ",", "box2", "[", ":", ",", "2", "]", ")", "-", "np", ".", "maximum", "(", "box1", "[", ":", ",", "0", "]", ",", "box2", "[", ":", ",", "0", "]", ")", "+", "1", "\n", "ih", "=", "np", ".", "minimum", "(", "box1", "[", ":", ",", "3", "]", ",", "box2", "[", ":", ",", "3", "]", ")", "-", "np", ".", "maximum", "(", "box1", "[", ":", ",", "1", "]", ",", "box2", "[", ":", ",", "1", "]", ")", "+", "1", "\n", "\n", "i_area", "=", "np", ".", "maximum", "(", "iw", ",", "0.0", ")", "*", "np", ".", "maximum", "(", "ih", ",", "0.0", ")", "\n", "box1_area", "=", "(", "box1", "[", ":", ",", "2", "]", "-", "box1", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "box1", "[", ":", ",", "3", "]", "-", "box1", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "box2_area", "=", "(", "box2", "[", ":", ",", "2", "]", "-", "box2", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "box2", "[", ":", ",", "3", "]", "-", "box2", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "\n", "iou_val", "=", "i_area", "/", "(", "box1_area", "+", "box2_area", "-", "i_area", ")", "\n", "\n", "return", "iou_val", "\n", "\n", "", "def", "vis_feature", "(", "feat", ",", "img_path", ",", "vis_path", ",", "col", "=", "4", ",", "row", "=", "4", ",", "layer", "=", "'feat3'", ")", ":", "\n", "## normalize feature", "\n", "    ", "feat", "=", "feat", "[", "0", ",", "...", "]", "\n", "c", ",", "fh", ",", "fw", "=", "feat", ".", "size", "(", ")", "\n", "feat", "=", "feat", ".", "view", "(", "c", ",", "-", "1", ")", "\n", "min_val", ",", "_", "=", "torch", ".", "min", "(", "feat", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "max_val", ",", "_", "=", "torch", ".", "max", "(", "feat", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.vis_feature": [[271, 318], ["feat.view.size", "feat.view.view", "torch.min", "torch.max", "norm_feat.data.cpu().numpy.view().contiguous().permute", "norm_feat.data.cpu().numpy.data.cpu().numpy", "cv2.imread", "numpy.shape", "cv2.resize", "range", "numpy.concatenate", "os.path.join", "save_name.replace.replace", "cv2.imwrite", "norm_feat.data.cpu().numpy.view().contiguous", "norm_feat.data.cpu().numpy.data.cpu", "cv2.putText", "range", "numpy.concatenate", "np.concatenate.append", "os.path.exists", "os.makedirs", "os.path.join", "numpy.ones", "draw_im.copy", "cv2.applyColorMap", "np.concatenate.append", "img_path.split", "norm_feat.data.cpu().numpy.view", "numpy.ones", "numpy.uint8", "draw_im.copy"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["norm_feat", "=", "(", "feat", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", "+", "1e-10", ")", "\n", "norm_feat", "=", "norm_feat", ".", "view", "(", "c", ",", "fh", ",", "fw", ")", ".", "contiguous", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "norm_feat", "=", "norm_feat", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "im", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "resized_feat", "=", "cv2", ".", "resize", "(", "norm_feat", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "# draw images", "\n", "feat_ind", "=", "0", "\n", "fig_id", "=", "0", "\n", "\n", "while", "feat_ind", "<", "20", ":", "\n", "        ", "im_to_save", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "row", ")", ":", "\n", "            ", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", "+", "5", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "im", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'original image'", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "im_to_save_row", "=", "[", "draw_im", ".", "copy", "(", ")", "]", "\n", "for", "j", "in", "range", "(", "col", ")", ":", "\n", "                ", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", "+", "5", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "im", "\n", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "resized_feat", "[", ":", ",", ":", ",", "feat_ind", "]", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "heatmap", "*", "1.", "+", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "*", "0.0", "\n", "\n", "im_to_save_row", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "feat_ind", "+=", "1", "\n", "", "im_to_save_row", "=", "np", ".", "concatenate", "(", "im_to_save_row", ",", "axis", "=", "1", ")", "\n", "im_to_save", ".", "append", "(", "im_to_save_row", ")", "\n", "", "im_to_save", "=", "np", ".", "concatenate", "(", "im_to_save", ",", "axis", "=", "0", ")", "\n", "vis_path", "=", "os", ".", "path", ".", "join", "(", "vis_path", ",", "'vis_feat'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "vis_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "vis_path", ")", "\n", "", "save_name", "=", "'vgg_'", "+", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "save_name", "=", "save_name", ".", "replace", "(", "'.'", ",", "'_{}_{}.'", ".", "format", "(", "layer", ",", "fig_id", ")", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "vis_path", ",", "save_name", ")", ",", "im_to_save", ")", "\n", "fig_id", "+=", "1", "\n", "\n", "", "", "def", "vis_var", "(", "feat", ",", "cls_logits", ",", "img_path", ",", "vis_path", ",", "net", "=", "'vgg_fpn_l3'", ")", ":", "\n", "\n", "    ", "cls_logits", "=", "cls_logits", ".", "squeeze", "(", ")", "\n", "\n", "norm_var_no_white", "=", "norm_tensor", "(", "feat", ")", "\n", "norm_var_no_white", "=", "1", "-", "norm_var_no_white", "\n", "norm_var_no_white", "[", "norm_var_no_white", "<", "0.05", "]", "=", "0", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.vis_var": [[319, 425], ["cls_logits.squeeze.squeeze", "vistools.norm_tensor", "vistools.norm_atten_map", "vistools.norm_tensor", "vistools.norm_atten_map", "vistools.whitening_tensor", "vistools.whitening_tensor", "vistools.norm_tensor", "vistools.norm_atten_map", "vistools.norm_tensor", "vistools.norm_atten_map", "cv2.imread", "numpy.shape", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.resize", "cv2.putText", "cv2.applyColorMap", "cv2.putText", "np.concatenate.append", "np.concatenate.append", "cv2.applyColorMap", "cv2.putText", "np.concatenate.append", "cv2.applyColorMap", "cv2.putText", "np.concatenate.append", "cv2.applyColorMap", "cv2.putText", "np.concatenate.append", "cv2.applyColorMap", "cv2.putText", "np.concatenate.append", "cv2.applyColorMap", "cv2.putText", "np.concatenate.append", "numpy.concatenate", "os.path.join", "cv2.imwrite", "numpy.ones", "draw_im.copy", "numpy.ones", "numpy.uint8", "draw_im.copy", "draw_im.copy", "numpy.ones", "numpy.uint8", "draw_im.copy", "numpy.ones", "numpy.uint8", "draw_im.copy", "numpy.ones", "numpy.uint8", "draw_im.copy", "numpy.ones", "numpy.uint8", "draw_im.copy", "numpy.ones", "numpy.uint8", "draw_im.copy", "os.path.exists", "os.makedirs", "os.path.join", "img_path.split"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.norm_tensor", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.norm_tensor", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.whitening_tensor", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.whitening_tensor", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.norm_tensor", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.norm_tensor", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["norm_var_no_white", "=", "norm_atten_map", "(", "norm_var_no_white", ")", "\n", "# norm_var_no_white = (norm_var_no_white < 0.4).astype(norm_var_no_white.dtype)", "\n", "norm_cls_no_white", "=", "norm_tensor", "(", "cls_logits", ")", "\n", "norm_cls_no_white", "[", "norm_cls_no_white", "<", "0.2", "]", "=", "0", "\n", "norm_cls_no_white", "=", "norm_atten_map", "(", "norm_cls_no_white", ")", "\n", "\n", "# norm_cls_no_white = (norm_cls_no_white>0.7).astype(norm_cls_no_white.dtype)", "\n", "\n", "white_feat", "=", "whitening_tensor", "(", "feat", ")", "\n", "white_cls_logits", "=", "whitening_tensor", "(", "cls_logits", ")", "\n", "norm_var", "=", "norm_tensor", "(", "white_feat", ")", "\n", "norm_var", "[", "norm_var", "<", "0.8", "]", "=", "0", "\n", "norm_var", "=", "norm_atten_map", "(", "norm_var", ")", "\n", "# norm_var = (norm_var<0.4).astype(norm_var.dtype)", "\n", "norm_cls", "=", "norm_tensor", "(", "white_cls_logits", ")", "\n", "norm_cls", "=", "1", "-", "norm_cls", "\n", "norm_cls", "[", "norm_cls", "<", "0.8", "]", "=", "0", "\n", "norm_cls", "=", "norm_atten_map", "(", "norm_cls", ")", "\n", "# norm_cls = (norm_cls>0.2).astype(norm_cls.dtype)", "\n", "\n", "im", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "resized_var_no_white", "=", "cv2", ".", "resize", "(", "norm_var_no_white", ",", "(", "w", ",", "h", ")", ")", "\n", "resized_cls_no_white", "=", "cv2", ".", "resize", "(", "norm_cls_no_white", ",", "(", "w", ",", "h", ")", ")", "\n", "resized_var", "=", "cv2", ".", "resize", "(", "norm_var", ",", "(", "w", ",", "h", ")", ")", "\n", "resized_cls", "=", "cv2", ".", "resize", "(", "norm_cls", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", "+", "5", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "im", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'original image'", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "im_to_save", "=", "[", "draw_im", ".", "copy", "(", ")", "]", "\n", "\n", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", "+", "5", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "im", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "resized_var_no_white", ")", ",", "cv2", ".", "COLORMAP_BONE", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "heatmap", "*", "1.0", "+", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "*", "0", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'var_nw'", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "im_to_save", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "im_to_save", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "\n", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", "+", "5", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "im", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "resized_cls_no_white", ")", ",", "cv2", ".", "COLORMAP_BONE", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "heatmap", "*", "1.", "+", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "*", "0", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'cls_nw'", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "im_to_save", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "\n", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", "+", "5", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "im", "\n", "resized_var_cls_no_white", "=", "(", "resized_var_no_white", "+", "resized_cls_no_white", ")", "*", "0.5", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "resized_var_cls_no_white", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "heatmap", "*", "0.5", "+", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "*", "0.5", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'var_cls_nw'", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "im_to_save", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "\n", "\n", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", "+", "5", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "im", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "resized_var", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "heatmap", "*", "1.", "+", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "*", "0", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'var'", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "im_to_save", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "\n", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", "+", "5", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "im", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "resized_cls", ")", ",", "cv2", ".", "COLORMAP_BONE", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "heatmap", "*", "1", "+", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "*", "0", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'cls'", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "im_to_save", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "\n", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "h", "+", "15", ",", "w", "+", "5", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "im", "\n", "resized_var_cls", "=", "(", "resized_var", "+", "resized_cls", ")", "*", "0.5", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "resized_var_cls", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "=", "heatmap", "*", "0.5", "+", "draw_im", "[", ":", "h", ",", ":", "w", ",", ":", "]", "*", "0.5", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'var_cls'", ",", "(", "0", ",", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "im_to_save", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "\n", "im_to_save", "=", "np", ".", "concatenate", "(", "im_to_save", ",", "axis", "=", "1", ")", "\n", "\n", "vis_path", "=", "os", ".", "path", ".", "join", "(", "vis_path", ",", "'vis_var/{}'", ".", "format", "(", "net", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "vis_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "vis_path", ")", "\n", "", "save_name", "=", "'vgg_'", "+", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "vis_path", ",", "save_name", ")", ",", "im_to_save", ")", "\n", "\n", "", "def", "norm_tensor", "(", "feat", ")", ":", "\n", "    ", "min_val", "=", "torch", ".", "min", "(", "feat", ")", "\n", "max_val", "=", "torch", ".", "max", "(", "feat", ")", "\n", "norm_feat", "=", "(", "feat", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", "+", "1e-20", ")", "\n", "norm_feat", "=", "norm_feat", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "norm_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.norm_tensor": [[426, 432], ["torch.min", "torch.max", "norm_feat.data.cpu().numpy.data.cpu().numpy", "norm_feat.data.cpu().numpy.data.cpu"], "function", ["None"], ["", "def", "whitening_tensor", "(", "feat", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "mean", "(", "feat", ")", "\n", "var", "=", "torch", ".", "std", "(", "feat", ")", "\n", "norm_feat", "=", "(", "feat", "-", "mean", ")", "/", "(", "var", "+", "1e-15", ")", "\n", "return", "norm_feat", "\n", "\n", "", "def", "norm_atten_map", "(", "attention_map", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.whitening_tensor": [[433, 438], ["torch.mean", "torch.std"], "function", ["None"], ["    ", "min_val", "=", "np", ".", "min", "(", "attention_map", ")", "\n", "max_val", "=", "np", ".", "max", "(", "attention_map", ")", "\n", "atten_norm", "=", "(", "attention_map", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", "+", "1e-10", ")", "\n", "return", "atten_norm", "\n", "\n", "", "def", "save_im_gcam_ggrads", "(", "im_file", ",", "grads", ",", "save_dir", ",", "layers", "=", "None", ",", "topk", "=", "5", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.norm_atten_map": [[948, 953], ["numpy.min", "numpy.max"], "function", ["None"], ["\n", "", "def", "add_colormap2img", "(", "img", ",", "atten_norm", ")", ":", "\n", "    ", "heat_map", "=", "cv2", ".", "applycolormap", "(", "atten_norm", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "colormap_jet", ")", "\n", "img", "=", "cv2", ".", "addweighted", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ",", "0.5", ",", "heat_map", ".", "astype", "(", "np", ".", "uint8", ")", ",", "0.5", ",", "0", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_im_gcam_ggrads": [[445, 518], ["cv2.imread", "numpy.shape", "range", "range", "np.concatenate.append", "numpy.concatenate", "[].replace", "cv2.imwrite", "numpy.ones", "cv2.putText", "draw_im.copy", "range", "np.concatenate.append", "numpy.ones", "cv2.applyColorMap", "cv2.applyColorMap", "cv2.putText", "cv2.putText", "draw_im.copy", "os.path.exists", "os.makedirs", "os.path.join", "numpy.ones", "[].data.cpu().numpy", "[].data.cpu().numpy", "vistools.norm_atten_map", "vistools.norm_atten_map", "cv2.resize", "cv2.resize", "cv2.applyColorMap", "cv2.applyColorMap", "cv2.putText", "cv2.putText", "draw_im.copy", "numpy.uint8", "numpy.uint8", "numpy.uint8", "numpy.uint8", "numpy.maximum", "numpy.maximum", "im_file.split", "[].data.cpu", "[].data.cpu", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["draw_im", "[", "start", ":", "start", "+", "h", ",", ":", ",", ":", "]", "=", "im", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'original image'", ",", "(", "0", ",", "start", "+", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "", "im_to_save", "=", "[", "draw_im", ".", "copy", "(", ")", "]", "\n", "\n", "gcam_com", "=", "{", "}", "\n", "ggrad_com", "=", "{", "}", "\n", "for", "layer", "in", "layers", ":", "\n", "        ", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "int", "(", "topk", ")", "*", "2", "*", "(", "h", "+", "15", ")", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "topk", ")", ":", "\n", "            ", "gcam", "=", "grads", "[", "'gcam_{}'", ".", "format", "(", "layer", ")", "]", "[", "0", ",", "i", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ggrad", "=", "grads", "[", "'g2_{}'", ".", "format", "(", "layer", ")", "]", "[", "0", ",", "i", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gcam", "=", "norm_atten_map", "(", "gcam", ")", "\n", "ggrad", "=", "norm_atten_map", "(", "ggrad", ")", "\n", "gcam", "=", "cv2", ".", "resize", "(", "gcam", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "ggrad", "=", "cv2", ".", "resize", "(", "ggrad", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "gcam_rgb", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "gcam", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "ggrad_rgb", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "ggrad", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "start", "=", "i", "*", "2", "*", "(", "h", "+", "15", ")", "\n", "draw_im", "[", "start", ":", "start", "+", "h", "]", "=", "gcam_rgb", "*", "0.7", "+", "im", "*", "0.3", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'gcam: {}'", ".", "format", "(", "layer", ")", ",", "(", "0", ",", "start", "+", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "draw_im", "[", "start", "+", "h", "+", "15", ":", "start", "+", "2", "*", "h", "+", "15", "]", "=", "ggrad_rgb", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'ggrads: {}'", ".", "format", "(", "layer", ")", ",", "(", "0", ",", "start", "+", "2", "*", "h", "+", "15", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "if", "'gcam_top_{}'", ".", "format", "(", "i", ")", "not", "in", "gcam_com", ":", "\n", "                ", "gcam_com", "[", "'gcam_top_{}'", ".", "format", "(", "i", ")", "]", "=", "gcam", "\n", "", "else", ":", "\n", "                ", "gcam_com", "[", "'gcam_top_{}'", ".", "format", "(", "i", ")", "]", "=", "np", ".", "maximum", "(", "gcam_com", "[", "'gcam_top_{}'", ".", "format", "(", "i", ")", "]", ",", "gcam", ")", "\n", "", "if", "'ggrad_top_{}'", ".", "format", "(", "i", ")", "not", "in", "ggrad_com", ":", "\n", "                ", "ggrad_com", "[", "'ggrad_top_{}'", ".", "format", "(", "i", ")", "]", "=", "ggrad", "\n", "", "else", ":", "\n", "# ggrad_com['ggrad_top_{}'.format(i)] += ggrad", "\n", "                ", "ggrad_com", "[", "'ggrad_top_{}'", ".", "format", "(", "i", ")", "]", "=", "np", ".", "maximum", "(", "ggrad_com", "[", "'ggrad_top_{}'", ".", "format", "(", "i", ")", "]", ",", "ggrad", ")", "\n", "", "", "im_to_save", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "\n", "\n", "", "draw_im", "=", "255", "*", "np", ".", "ones", "(", "(", "int", "(", "topk", ")", "*", "2", "*", "(", "h", "+", "15", ")", ",", "w", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "for", "i", "in", "range", "(", "topk", ")", ":", "\n", "        ", "gcam_com_i", "=", "gcam_com", "[", "'gcam_top_{}'", ".", "format", "(", "i", ")", "]", "\n", "ggrad_com_i", "=", "ggrad_com", "[", "'ggrad_top_{}'", ".", "format", "(", "i", ")", "]", "\n", "# gcam_com_i = norm_atten_map(gcam_com_i)", "\n", "gcam_rgb_com", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "gcam_com_i", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "\n", "# ggrad_com_i = norm_atten_map(ggrad_com_i)", "\n", "ggrad_rgb_com", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "255", "*", "ggrad_com_i", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "start", "=", "i", "*", "2", "*", "(", "h", "+", "15", ")", "\n", "draw_im", "[", "start", ":", "start", "+", "h", "]", "=", "gcam_rgb_com", "*", "0.7", "+", "im", "*", "0.3", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'gcam_com'", ",", "(", "0", ",", "start", "+", "h", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "draw_im", "[", "start", "+", "h", "+", "15", ":", "start", "+", "2", "*", "h", "+", "15", "]", "=", "ggrad_rgb_com", "\n", "cv2", ".", "putText", "(", "draw_im", ",", "'ggrads_com'", ",", "(", "0", ",", "start", "+", "2", "*", "h", "+", "15", "+", "12", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_COMPLEX", ",", "\n", "fontScale", "=", "0.5", ")", "\n", "", "im_to_save", ".", "append", "(", "draw_im", ".", "copy", "(", ")", ")", "\n", "\n", "im_to_save", "=", "np", ".", "concatenate", "(", "im_to_save", ",", "axis", "=", "1", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "save_name", "=", "im_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'.'", ",", "'_gcam_ggrads.'", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "save_name", ")", ",", "im_to_save", ")", "\n", "\n", "\n", "", "class", "SAVE_ATTEN", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "save_dir", "=", "'save_bins'", ",", "dataset", "=", "None", ")", ":", "\n", "# type: (object, object) -> object", "\n", "        ", "self", ".", "save_dir", "=", "save_dir", "\n", "if", "dataset", "is", "not", "None", ":", "\n", "            ", "self", ".", "idx2cate", "=", "self", ".", "_get_idx2cate_dict", "(", "datasetname", "=", "dataset", ")", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.decode_labels": [[916, 934], ["PIL.Image.new", "Image.new.load", "enumerate", "numpy.array", "enumerate", "len", "len"], "function", ["None"], ["\n", "img", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "len", "(", "mask", "[", "0", "]", ")", ",", "len", "(", "mask", ")", ")", ")", "\n", "pixels", "=", "img", ".", "load", "(", ")", "\n", "for", "j_", ",", "j", "in", "enumerate", "(", "mask", ")", ":", "\n", "        ", "for", "k_", ",", "k", "in", "enumerate", "(", "j", ")", ":", "\n", "            ", "if", "k", "<", "21", ":", "\n", "                ", "pixels", "[", "k_", ",", "j_", "]", "=", "label_colours", "[", "k", "]", "\n", "", "if", "k", "==", "255", ":", "\n", "                ", "pixels", "[", "k_", ",", "j_", "]", "=", "(", "255", ",", "255", ",", "255", ")", "\n", "", "", "", "return", "np", ".", "array", "(", "img", ")", "\n", "\n", "\n", "#####################################################################", "\n", "######### copy from save_det_heatmap.py", "\n", "", "idx2catename", "=", "{", "\n", "'voc20'", ":", "[", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "'cow'", ",", "'diningtable'", ",", "\n", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", "]", "}", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.get_imgId": [[944, 946], ["[].strip().split", "[].strip", "path_str.strip().split", "path_str.strip"], "function", ["None"], ["atten_norm", "=", "(", "attention_map", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", "+", "1e-10", ")", "\n", "return", "atten_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.add_colormap2img": [[956, 960], ["cv2.applycolormap", "cv2.addweighted", "atten_norm.astype", "cv2.addweighted.astype", "cv2.applycolormap.astype"], "function", ["None"], ["    ", "atten", "=", "np", ".", "squeeze", "(", "atten", ")", "\n", "for", "cls_idx", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "cat_dir", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "idx2catename", "[", "'voc20'", "]", "[", "cls_idx", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cat_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "cat_dir", ")", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_atten": [[962, 980], ["numpy.squeeze", "range", "os.path.join", "cv2.imread", "numpy.shape", "cv2.resize", "vistools.norm_atten_map", "os.path.join", "cv2.imwrite", "os.path.exists", "os.makedirs", "vistools.get_imgId"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.get_imgId"], ["# read rgb image", "\n", "img", "=", "cv2", ".", "imread", "(", "imgpath", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "img", ")", "\n", "\n", "# reshape image", "\n", "cat_map", "=", "cv2", ".", "resize", "(", "cat_map", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "cat_map", "=", "norm_atten_map", "(", "cat_map", ")", "\n", "\n", "# save heatmap", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "cat_dir", ",", "get_imgId", "(", "imgpath", ")", "+", "'.png'", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "cat_map", ")", "\n", "# cv2.imwrite(save_path, add_colormap2img(img, cat_map))", "\n", "\n", "\n", "", "", "def", "save_cls_scores", "(", "img_path", ",", "scores", ",", "base_dir", "=", "'../save_bins/'", ")", ":", "\n", "    ", "scores", "=", "np", ".", "squeeze", "(", "scores", ")", ".", "tolist", "(", ")", "\n", "score_str", "=", "map", "(", "lambda", "x", ":", "'%.4f'", "%", "(", "x", ")", ",", "scores", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'scores.txt'", ")", ",", "'a'", ")", "as", "fw", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_cls_scores": [[983, 990], ["numpy.squeeze().tolist", "map", "open", "fw.write", "numpy.squeeze", "os.path.join", "vistools.get_imgId"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.get_imgId"], ["", "", ""]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.loader.data_loader": [[12, 76], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "int", "int", "int", "int", "str", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "mydataset.dataset", "torch.utils.data.DataLoader", "mydataset.dataset", "mydataset.dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.TenCrop", "torchvision.transforms.Lambda", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torch.stack", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor"], "function", ["None"], ["def", "data_loader", "(", "args", ",", "test_path", "=", "False", ",", "train", "=", "True", ")", ":", "\n", "\n", "    ", "mean_vals", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std_vals", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "input_size", "=", "(", "int", "(", "args", ".", "input_size", ")", ",", "int", "(", "args", ".", "input_size", ")", ")", "\n", "crop_size", "=", "(", "int", "(", "args", ".", "crop_size", ")", ",", "int", "(", "args", ".", "crop_size", ")", ")", "\n", "\n", "\n", "# transformation for training set", "\n", "tsfm_train", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "input_size", ")", ",", "# 256", "\n", "transforms", ".", "RandomCrop", "(", "crop_size", ")", ",", "# 224", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean_vals", ",", "std_vals", ")", "]", ")", "\n", "\n", "\n", "# transformation for test cls set", "\n", "if", "args", ".", "tencrop", "==", "'True'", ":", "\n", "        ", "func_transforms", "=", "[", "transforms", ".", "Resize", "(", "input_size", ")", ",", "\n", "transforms", ".", "TenCrop", "(", "crop_size", ")", ",", "\n", "transforms", ".", "Lambda", "(", "\n", "lambda", "crops", ":", "torch", ".", "stack", "(", "\n", "[", "transforms", ".", "Normalize", "(", "mean_vals", ",", "std_vals", ")", "(", "transforms", ".", "ToTensor", "(", ")", "(", "crop", ")", ")", "for", "crop", "in", "crops", "]", ")", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "func_transforms", "=", "[", "transforms", ".", "Resize", "(", "crop_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean_vals", ",", "std_vals", ")", ",", "]", "\n", "", "tsfm_clstest", "=", "transforms", ".", "Compose", "(", "func_transforms", ")", "\n", "\n", "# transformation for test loc set", "\n", "tsfm_loctest", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "crop_size", ")", ",", "# 224", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean_vals", ",", "std_vals", ")", "]", ")", "\n", "\n", "GLOBAL_WORKER_ID", "=", "None", "\n", "def", "_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "global", "GLOBAL_WORKER_ID", "\n", "GLOBAL_WORKER_ID", "=", "worker_id", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "args", ".", "seed", "+", "worker_id", ")", "\n", "random", ".", "seed", "(", "10", "+", "worker_id", ")", "\n", "np", ".", "random", ".", "seed", "(", "10", "+", "worker_id", ")", "\n", "torch", ".", "manual_seed", "(", "10", "+", "worker_id", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "10", "+", "worker_id", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "10", "+", "worker_id", ")", "\n", "\n", "# training and test dataset & dataloader", "\n", "", "if", "train", ":", "\n", "        ", "img_train", "=", "DataSet", "(", "args", ".", "train_list", ",", "root_dir", "=", "args", ".", "img_dir", ",", "transform", "=", "tsfm_train", ",", "with_path", "=", "True", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "train_loader", "=", "DataLoader", "(", "img_train", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "_init_fn", ")", "\n", "return", "train_loader", "\n", "", "else", ":", "\n", "        ", "img_clstest", "=", "DataSet", "(", "args", ".", "test_list", ",", "root_dir", "=", "args", ".", "img_dir", ",", "transform", "=", "tsfm_clstest", ",", "with_path", "=", "test_path", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "img_loctest", "=", "DataSet", "(", "args", ".", "test_list", ",", "root_dir", "=", "args", ".", "img_dir", ",", "transform", "=", "tsfm_loctest", ",", "with_path", "=", "test_path", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "valcls_loader", "=", "DataLoader", "(", "img_clstest", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "valloc_loader", "=", "DataLoader", "(", "img_loctest", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "return", "valcls_loader", ",", "valloc_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.loader.data_loader_imagenet": [[77, 145], ["torchvision.transforms.Compose", "glob.glob", "ImageTFRecordDataSet", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "glob.glob", "ImageTFRecordDataSet", "torch.utils.data.DataLoader", "ImageTFRecordDataSet", "torch.utils.data.DataLoader", "int", "int", "int", "int", "str", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "len", "print", "torchvision.transforms.Resize", "torchvision.transforms.RandomRotation", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.TenCrop", "torchvision.transforms.Lambda", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torch.stack", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "data_loader_imagenet", "(", "args", ",", "test_path", "=", "False", ")", ":", "\n", "\n", "    ", "mean_vals", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std_vals", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "input_size", "=", "(", "int", "(", "args", ".", "input_size", ")", ",", "int", "(", "args", ".", "input_size", ")", ")", "\n", "crop_size", "=", "(", "int", "(", "args", ".", "crop_size", ")", ",", "int", "(", "args", ".", "crop_size", ")", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "10", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "crop_size", ",", "scale", "=", "(", "0.08", ",", "1.25", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean_vals", ",", "std", "=", "std_vals", ")", ",", "\n", "]", ")", "\n", "\n", "train_records", "=", "glob", ".", "glob", "(", "args", ".", "data_dir", "+", "'/train_*.tfrecord'", ")", "\n", "train_dataset", "=", "ImageTFRecordDataSet", "(", "train_records", ",", "transform", ")", "\n", "\n", "GLOBAL_WORKER_ID", "=", "None", "\n", "def", "_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "global", "GLOBAL_WORKER_ID", "\n", "GLOBAL_WORKER_ID", "=", "worker_id", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "args", ".", "seed", "+", "worker_id", ")", "\n", "random", ".", "seed", "(", "10", "+", "worker_id", ")", "\n", "np", ".", "random", ".", "seed", "(", "10", "+", "worker_id", ")", "\n", "torch", ".", "manual_seed", "(", "10", "+", "worker_id", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "10", "+", "worker_id", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "10", "+", "worker_id", ")", "\n", "\n", "", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "worker_init_fn", "=", "_init_fn", ")", "\n", "\n", "\n", "# transformation for test cls set", "\n", "if", "args", ".", "tencrop", "==", "'True'", ":", "\n", "        ", "func_transforms", "=", "[", "transforms", ".", "Resize", "(", "input_size", ")", ",", "\n", "transforms", ".", "TenCrop", "(", "crop_size", ")", ",", "\n", "transforms", ".", "Lambda", "(", "\n", "lambda", "crops", ":", "torch", ".", "stack", "(", "\n", "[", "transforms", ".", "Normalize", "(", "mean_vals", ",", "std_vals", ")", "(", "transforms", ".", "ToTensor", "(", ")", "(", "crop", ")", ")", "for", "crop", "in", "crops", "]", ")", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "func_transforms", "=", "[", "transforms", ".", "Resize", "(", "crop_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean_vals", ",", "std_vals", ")", ",", "]", "\n", "", "tsfm_clstest", "=", "transforms", ".", "Compose", "(", "func_transforms", ")", "\n", "\n", "# transformation for test loc set", "\n", "tsfm_loctest", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "crop_size", ")", ",", "# 224", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean_vals", ",", "std_vals", ")", "]", ")", "\n", "\n", "val_records", "=", "glob", ".", "glob", "(", "args", ".", "data_dir", "+", "'/val_*.tfrecord'", ")", "\n", "if", "len", "(", "val_records", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"no val_records found in:{}\"", ".", "format", "(", "args", ".", "data", ")", ")", "\n", "\n", "", "clsval_dataset", "=", "ImageTFRecordDataSet", "(", "val_records", ",", "tsfm_clstest", ")", "\n", "valcls_loader", "=", "DataLoader", "(", "clsval_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", ")", "\n", "\n", "locval_dataset", "=", "ImageTFRecordDataSet", "(", "val_records", ",", "tsfm_loctest", ")", "\n", "\n", "valloc_loader", "=", "DataLoader", "(", "locval_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "valcls_loader", ",", "valloc_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.tfrecord_torch_loader.TFRecordDataSet.__init__": [[54, 70], ["threading.local", "zip", "tfrecord_torch_loader.tfrecord2idx", "len", "print", "tfrecord_torch_loader.TFRecordDataSet.idxs.append", "f.replace", "open", "line.split", "idx.append", "len"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.tfrecord_torch_loader.tfrecord2idx"], ["    ", "def", "__init__", "(", "self", ",", "tfrecords", ")", ":", "\n", "\n", "        ", "tfindexs", "=", "[", "tfrecord2idx", "(", "f", ",", "f", ".", "replace", "(", "'.tfrecord'", ",", "'.idx'", ")", ")", "for", "f", "in", "tfrecords", "]", "\n", "self", ".", "idxs", "=", "[", "]", "\n", "self", ".", "thread_local", "=", "local", "(", ")", "\n", "self", ".", "thread_local", ".", "cache", "=", "{", "}", "\n", "self", ".", "samples", "=", "0", "\n", "for", "index", ",", "tffile", "in", "zip", "(", "tfindexs", ",", "tfrecords", ")", ":", "\n", "            ", "idx", "=", "[", "]", "\n", "with", "open", "(", "index", ")", "as", "idxf", ":", "\n", "                ", "for", "line", "in", "idxf", ":", "\n", "                    ", "offset", ",", "_", "=", "line", ".", "split", "(", "' '", ")", "\n", "idx", ".", "append", "(", "offset", ")", "\n", "", "", "self", ".", "samples", "+=", "len", "(", "idx", ")", "\n", "print", "(", "\"load %s, samples:%s\"", "%", "(", "tffile", ",", "len", "(", "idx", ")", ")", ")", "\n", "self", ".", "idxs", ".", "append", "(", "(", "idx", ",", "tffile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.tfrecord_torch_loader.TFRecordDataSet.__len__": [[72, 74], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.tfrecord_torch_loader.TFRecordDataSet.parser": [[75, 77], ["NotImplementedError"], "methods", ["None"], ["", "def", "parser", "(", "self", ",", "feature_list", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Must Implement parser\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.tfrecord_torch_loader.TFRecordDataSet.get_record": [[78, 98], ["f.seek", "f.read", "f.read", "yt_example_pb2.Example", "yt_example_pb2.Example.ParseFromString", "sorted", "tfrecord_torch_loader.TFRecordDataSet.parser", "tuple", "struct.unpack", "len", "print", "yt_example_pb2.Example.features.feature.items", "len"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.tfrecord_torch_loader.ImageTFRecordDataSet.parser"], ["", "def", "get_record", "(", "self", ",", "f", ",", "offset", ")", ":", "\n", "        ", "f", ".", "seek", "(", "offset", ")", "\n", "\n", "# length,crc", "\n", "byte_len_crc", "=", "f", ".", "read", "(", "12", ")", "\n", "proto_len", "=", "struct", ".", "unpack", "(", "'Q'", ",", "byte_len_crc", "[", ":", "8", "]", ")", "[", "0", "]", "\n", "# proto,crc", "\n", "pb_data", "=", "f", ".", "read", "(", "proto_len", ")", "\n", "if", "len", "(", "pb_data", ")", "<", "proto_len", ":", "\n", "            ", "print", "(", "\"read pb_data err,proto_len:%s pb_data len:%s\"", "%", "(", "proto_len", ",", "len", "(", "pb_data", ")", ")", ")", "\n", "return", "None", "\n", "\n", "", "example", "=", "yt_example_pb2", ".", "Example", "(", ")", "\n", "example", ".", "ParseFromString", "(", "pb_data", ")", "\n", "#keep key value in order", "\n", "feature", "=", "sorted", "(", "example", ".", "features", ".", "feature", ".", "items", "(", ")", ")", "\n", "\n", "record", "=", "self", ".", "parser", "(", "feature", ")", "\n", "#print(record)", "\n", "return", "tuple", "(", "record", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.tfrecord_torch_loader.TFRecordDataSet.__getitem__": [[99, 114], ["print", "tfrecord_torch_loader.TFRecordDataSet.thread_local.cache.get", "int", "tfrecord_torch_loader.TFRecordDataSet.get_record", "len", "len", "open"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.get", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.tfrecord_torch_loader.TFRecordDataSet.get_record"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "for", "idx", ",", "tffile", "in", "self", ".", "idxs", ":", "\n", "            ", "if", "index", ">=", "len", "(", "idx", ")", ":", "\n", "                ", "index", "-=", "len", "(", "idx", ")", "\n", "continue", "\n", "# every thread keep a f instace ", "\n", "", "f", "=", "self", ".", "thread_local", ".", "cache", ".", "get", "(", "tffile", ",", "None", ")", "\n", "if", "f", "is", "None", ":", "\n", "                ", "f", "=", "open", "(", "tffile", ",", "'rb'", ")", "\n", "self", ".", "thread_local", ".", "cache", "[", "tffile", "]", "=", "f", "\n", "\n", "", "offset", "=", "int", "(", "idx", "[", "index", "]", ")", "\n", "return", "self", ".", "get_record", "(", "f", ",", "offset", ")", "\n", "\n", "", "print", "(", "\"bad index,\"", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.tfrecord_torch_loader.ImageTFRecordDataSet.__init__": [[116, 119], ["tfrecord_torch_loader.TFRecordDataSet.__init__"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.opts.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tfrecords", ",", "transforms", ")", ":", "\n", "        ", "super", "(", "ImageTFRecordDataSet", ",", "self", ")", ".", "__init__", "(", "tfrecords", ")", "\n", "self", ".", "transforms", "=", "transforms", "\n", "", "def", "parser", "(", "self", ",", "feature_list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.tfrecord_torch_loader.ImageTFRecordDataSet.parser": [[119, 146], ["PIL.Image.open", "tfrecord_torch_loader.ImageTFRecordDataSet.convert", "tfrecord_torch_loader.ImageTFRecordDataSet.transforms", "io.BytesIO"], "methods", ["None"], ["", "def", "parser", "(", "self", ",", "feature_list", ")", ":", "\n", "        ", "'''\n        feature_list = [(key, feature), (key, feature)]\n        key is your label.txt col name\n        feature is oneof bytes_list, int64_list, float_list\n        '''", "\n", "for", "key", ",", "feature", "in", "feature_list", ":", "\n", "\n", "#for image file col", "\n", "            ", "if", "key", "==", "'image'", ":", "\n", "                ", "image_raw", "=", "feature", ".", "bytes_list", ".", "value", "[", "0", "]", "\n", "image", "=", "Image", ".", "open", "(", "BytesIO", "(", "image_raw", ")", ")", "\n", "image", "=", "image", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "self", ".", "transforms", "(", "image", ")", "\n", "\n", "#for int col", "\n", "", "if", "key", "==", "'label'", ":", "\n", "                ", "label", "=", "feature", ".", "int64_list", ".", "value", "[", "0", "]", "\n", "#for float col", "\n", "#if key == 'float_col':", "\n", "#   value = feature.float_list.value[0]", "\n", "\n", "# for other str cols", "\n", "# if key == 'label_file':", "\n", "#    contont = feature.bytes_list.value[0]", "\n", "#    #paser the content to value", "\n", "", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.tfrecord_torch_loader.tfrecord2idx": [[21, 52], ["os.access", "logging.info", "open", "logging.error", "os.remove", "open", "f.tell", "f.read", "f.read", "idx.write", "len", "len", "logging.error", "struct.unpack", "len", "logging.error", "str", "f.tell", "len", "f.tell", "str", "f.tell"], "function", ["None"], ["def", "tfrecord2idx", "(", "tfrecord", ",", "idxfile", ")", ":", "\n", "    ", "'''\n    refer :  https://github.com/NVIDIA/DALI/blob/master/tools/tfrecord2idx\n    '''", "\n", "if", "os", ".", "access", "(", "idxfile", ",", "os", ".", "R_OK", ")", ":", "\n", "        ", "return", "idxfile", "\n", "", "samples", "=", "0", "\n", "with", "open", "(", "tfrecord", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "open", "(", "idxfile", ",", "'w'", ")", "as", "idx", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "current", "=", "f", ".", "tell", "(", ")", "\n", "byte_len_crc", "=", "f", ".", "read", "(", "12", ")", "\n", "# eof ", "\n", "if", "len", "(", "byte_len_crc", ")", "==", "0", ":", "\n", "                    ", "break", "\n", "", "if", "len", "(", "byte_len_crc", ")", "!=", "12", ":", "\n", "                    ", "logging", ".", "error", "(", "\"read byte_len_crc failed, file:%s, num:%d pos:%s byte_len_crc:%s\"", "%", "(", "tfrecord", ",", "samples", ",", "f", ".", "tell", "(", ")", ",", "len", "(", "byte_len_crc", ")", ")", ")", "\n", "break", "\n", "", "proto_len", "=", "struct", ".", "unpack", "(", "'L'", ",", "byte_len_crc", "[", ":", "8", "]", ")", "[", "0", "]", "\n", "buffer", "=", "f", ".", "read", "(", "proto_len", "+", "4", ")", "\n", "if", "len", "(", "buffer", ")", "!=", "proto_len", "+", "4", ":", "\n", "                    ", "logging", ".", "error", "(", "\"read proto_len failed, file:%s, num:%d pos:%s proto_len:%s\"", "%", "(", "tfrecord", ",", "samples", ",", "f", ".", "tell", "(", ")", ",", "proto_len", ")", ")", "\n", "break", "\n", "", "idx", ".", "write", "(", "str", "(", "current", ")", "+", "' '", "+", "str", "(", "f", ".", "tell", "(", ")", "-", "current", ")", "+", "'\\n'", ")", "\n", "samples", "+=", "1", "\n", "", "", "", "if", "samples", "==", "0", ":", "\n", "        ", "logging", ".", "error", "(", "\"no idx found,  file:%s\"", "%", "tfrecord", ")", "\n", "os", ".", "remove", "(", "idxfile", ")", "\n", "return", "None", "\n", "", "logging", ".", "info", "(", "\"idx generate done, samples:%s file:%s\"", "%", "(", "samples", ",", "idxfile", ")", ")", "\n", "return", "idxfile", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map": [[10, 15], ["numpy.min", "numpy.max"], "function", ["None"], ["def", "norm_atten_map", "(", "attention_map", ")", ":", "\n", "    ", "min_val", "=", "np", ".", "min", "(", "attention_map", ")", "\n", "max_val", "=", "np", ".", "max", "(", "attention_map", ")", "\n", "atten_norm", "=", "(", "attention_map", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", "+", "1e-10", ")", "\n", "return", "atten_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.get_topk_boxes_hier": [[16, 30], ["logits.squeeze().data.cpu().numpy.squeeze().data.cpu().numpy", "feat_map.data.cpu().numpy.data.cpu().numpy", "max", "range", "get_scm_map.norm_atten_map", "maxk_maps.append", "logits.squeeze().data.cpu().numpy.squeeze().data.cpu", "feat_map.data.cpu().numpy.data.cpu", "numpy.argsort", "norm_atten_map.copy", "logits.squeeze().data.cpu().numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.norm_atten_map"], ["", "def", "get_topk_boxes_hier", "(", "logits", ",", "feat_map", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "logits", "=", "logits", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "feat_map", "=", "feat_map", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "\n", "species_cls", "=", "np", ".", "argsort", "(", "logits", ")", "[", ":", ":", "-", "1", "]", "[", ":", "maxk", "]", "\n", "\n", "maxk_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "maxk", ")", ":", "\n", "        ", "feat_map_i", "=", "feat_map", "[", "0", ",", "species_cls", "[", "i", "]", ",", ":", ",", ":", "]", "\n", "cam_map_i", "=", "norm_atten_map", "(", "feat_map_i", ")", "# normalize cam map", "\n", "maxk_maps", ".", "append", "(", "cam_map_i", ".", "copy", "(", ")", ")", "\n", "", "return", "maxk_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.get_topk_boxes_hier_sim": [[31, 84], ["range", "range", "isinstance", "isinstance", "len", "len", "maxk_maps.append", "cleaned_hsc_maps.append", "aff_map.squeeze().data.cpu().numpy.squeeze().data.cpu().numpy", "cv2.resize", "cv2.resize.reshape", "numpy.arange().astype", "cam_map_cls_vector[].reshape", "cam_map_cls_vector[].reshape", "numpy.maximum", "np.maximum.copy", "int", "int", "numpy.sum().reshape", "numpy.sum().reshape", "aff_map.squeeze().data.cpu().numpy.squeeze().data.cpu", "numpy.sqrt", "numpy.sqrt", "numpy.arange", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.min", "numpy.sum", "numpy.min", "numpy.max", "numpy.min", "numpy.sum", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "aff_map.squeeze().data.cpu().numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["", "def", "get_topk_boxes_hier_sim", "(", "top_cams", ",", "hsc_maps", ",", "fg_th", "=", "0.1", ",", "bg_th", "=", "0.05", ")", ":", "\n", "    ", "if", "isinstance", "(", "hsc_maps", ",", "tuple", ")", "or", "isinstance", "(", "hsc_maps", ",", "list", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "hsc_maps", "=", "[", "hsc_maps", "]", "\n", "", "cleaned_hsc_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "hsc_maps", ")", ")", ":", "\n", "        ", "if", "hsc_maps", "[", "i", "]", "is", "not", "None", ":", "\n", "            ", "cleaned_hsc_maps", ".", "append", "(", "hsc_maps", "[", "i", "]", ")", "\n", "\n", "", "", "maxk_maps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "top_cams", ")", ")", ":", "\n", "        ", "aff_map_cls", "=", "0", "\n", "for", "aff_map", "in", "cleaned_hsc_maps", ":", "\n", "            ", "cam_map_cls", "=", "top_cams", "[", "i", "]", "\n", "aff_map", "=", "aff_map", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "wh_aff", "=", "aff_map", ".", "shape", "[", "0", "]", "\n", "h_aff", ",", "w_aff", "=", "int", "(", "np", ".", "sqrt", "(", "wh_aff", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "wh_aff", ")", ")", "\n", "cam_map_cls", "=", "cv2", ".", "resize", "(", "cam_map_cls", ",", "dsize", "=", "(", "w_aff", ",", "h_aff", ")", ")", "\n", "cam_map_cls_vector", "=", "cam_map_cls", ".", "reshape", "(", "-", "1", ")", "\n", "#positive", "\n", "cam_map_cls_id", "=", "np", ".", "arange", "(", "wh_aff", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "cam_map_cls_th_ind_pos", "=", "cam_map_cls_id", "[", "cam_map_cls_vector", ">=", "fg_th", "]", "\n", "aff_map_sel_pos", "=", "aff_map", "[", ":", ",", "cam_map_cls_th_ind_pos", "]", "\n", "aff_map_sel_pos", "=", "(", "aff_map_sel_pos", "-", "np", ".", "min", "(", "aff_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "aff_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "min", "(", "aff_map_sel_pos", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-10", ")", "\n", "cam_map_cls_val_pos", "=", "cam_map_cls_vector", "[", "cam_map_cls_th_ind_pos", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "# aff_map_sel_pos = np.sum(aff_map_sel_pos * cam_map_cls_val_pos, axis=1).reshape(h_aff, w_aff)", "\n", "if", "aff_map_sel_pos", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "                ", "aff_map_sel_pos", "=", "np", ".", "sum", "(", "aff_map_sel_pos", ",", "axis", "=", "1", ")", ".", "reshape", "(", "h_aff", ",", "w_aff", ")", "\n", "aff_map_sel_pos", "=", "(", "aff_map_sel_pos", "-", "np", ".", "min", "(", "aff_map_sel_pos", ")", ")", "/", "(", "np", ".", "max", "(", "aff_map_sel_pos", ")", "-", "np", ".", "min", "(", "aff_map_sel_pos", ")", "+", "1e-10", ")", "\n", "", "else", ":", "\n", "                ", "aff_map_sel_pos", "=", "0", "\n", "#negtive", "\n", "", "cam_map_cls_th_ind_neg", "=", "cam_map_cls_id", "[", "cam_map_cls_vector", "<=", "bg_th", "]", "\n", "aff_map_sel_neg", "=", "aff_map", "[", ":", ",", "cam_map_cls_th_ind_neg", "]", "\n", "aff_map_sel_neg", "=", "(", "aff_map_sel_neg", "-", "np", ".", "min", "(", "aff_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "aff_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "min", "(", "aff_map_sel_neg", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "+", "1e-10", ")", "\n", "cam_map_cls_val_neg", "=", "cam_map_cls_vector", "[", "cam_map_cls_th_ind_neg", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "# aff_map_sel_neg = np.sum(aff_map_sel_neg * (1-cam_map_cls_val_neg), axis=1).reshape(h_aff, w_aff)", "\n", "if", "aff_map_sel_neg", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "                ", "aff_map_sel_neg", "=", "np", ".", "sum", "(", "aff_map_sel_neg", ",", "axis", "=", "1", ")", ".", "reshape", "(", "h_aff", ",", "w_aff", ")", "\n", "aff_map_sel_neg", "=", "(", "aff_map_sel_neg", "-", "np", ".", "min", "(", "aff_map_sel_neg", ")", ")", "/", "(", "np", ".", "max", "(", "aff_map_sel_neg", ")", "-", "np", ".", "min", "(", "aff_map_sel_neg", ")", "+", "1e-10", ")", "\n", "", "else", ":", "\n", "                ", "aff_map_sel_neg", "=", "0", "\n", "", "aff_map_cls_i", "=", "aff_map_sel_pos", "-", "aff_map_sel_neg", "\n", "# aff_map_cls_i = aff_map_sel_pos", "\n", "aff_map_cls_i", "=", "aff_map_cls_i", "*", "(", "aff_map_cls_i", ">=", "0", ")", "\n", "aff_map_cls_i", "=", "(", "aff_map_cls_i", "-", "np", ".", "min", "(", "aff_map_cls_i", ")", ")", "/", "(", "np", ".", "max", "(", "aff_map_cls_i", ")", "-", "np", ".", "min", "(", "aff_map_cls_i", ")", "+", "1e-10", ")", "\n", "aff_map_cls", "=", "np", ".", "maximum", "(", "aff_map_cls", ",", "aff_map_cls_i", ")", "\n", "# aff_map_cls = (aff_map_cls - np.min(aff_map_cls)) / (np.max(aff_map_cls) + 1e-10)", "\n", "", "maxk_maps", ".", "append", "(", "aff_map_cls", ".", "copy", "(", ")", ")", "\n", "", "return", "maxk_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.get_scm_map": [[87, 97], ["get_scm_map.get_topk_boxes_hier", "get_scm_map.get_topk_boxes_hier_sim", "cv2.imread", "numpy.shape", "range", "len", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.get_topk_boxes_hier", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.get_topk_boxes_hier_sim", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["", "def", "get_scm_map", "(", "logits", ",", "feat_maps", ",", "hsc_maps", ",", "topk", "=", "(", "1", ",", "5", ")", ",", "fg_th", "=", "0.1", ",", "bg_th", "=", "0.05", ",", "im_file", "=", "None", ")", ":", "\n", "    ", "cam_maps", "=", "get_topk_boxes_hier", "(", "logits", ",", "feat_maps", ",", "topk", "=", "topk", ")", "\n", "scm_maps", "=", "get_topk_boxes_hier_sim", "(", "cam_maps", ",", "hsc_maps", ",", "fg_th", "=", "fg_th", ",", "bg_th", "=", "bg_th", ")", "\n", "if", "im_file", "is", "None", ":", "\n", "        ", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "scm_maps", ")", ")", ":", "\n", "            ", "resized_scm_map_i", "=", "cv2", ".", "resize", "(", "scm_maps", "[", "i", "]", ",", "dsize", "=", "(", "w", ",", "h", ")", ")", "\n", "scm_maps", "[", "i", "]", "=", "resized_scm_map_i", "\n", "", "", "return", "scm_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.list_factory.cub": [[6, 41], ["numpy.unique", "open", "f.readlines", "numpy.asarray", "open", "f.readlines", "numpy.asarray", "open", "f.readlines", "open", "f.readlines", "numpy.array", "int", "int", "open", "open", "x.strip().split", "SPLIT_SET_TEMPLATE.format", "numpy.where", "f.write", "SPLIT_SET_BOX_TEMPLATE.format", "numpy.where", "f.write", "x.strip().split", "x.strip().split", "x.strip", "x.strip", "x.strip"], "function", ["None"], ["def", "cub", "(", ")", ":", "\n", "    ", "IMAGE_LIST_FILE", "=", "'../data/CUB_200_2011/images.txt'", "\n", "IMAGE_LABEL_FILE", "=", "'../data/CUB_200_2011/image_class_labels.txt'", "\n", "BOX_FILE", "=", "'../data/CUB_200_2011/bounding_boxes.txt'", "\n", "SPLIT_FILE", "=", "'../data/CUB_200_2011/train_test_split.txt'", "\n", "SPLIT_SET_TEMPLATE", "=", "'../data/CUB_200_2011/split_{}.txt'", "\n", "SPLIT_SET_BOX_TEMPLATE", "=", "'../data/CUB_200_2011/split_{}_box.txt'", "\n", "\n", "with", "open", "(", "IMAGE_LIST_FILE", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "image_names", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "-", "1", "]", "for", "x", "in", "lines", "]", "\n", "image_names", "=", "np", ".", "asarray", "(", "image_names", ")", "\n", "\n", "", "with", "open", "(", "IMAGE_LABEL_FILE", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "img_labels", "=", "[", "int", "(", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "-", "1", "]", ")", "for", "x", "in", "lines", "]", "\n", "img_labels", "=", "np", ".", "asarray", "(", "img_labels", ")", "\n", "\n", "", "with", "open", "(", "BOX_FILE", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "all_box", "=", "[", "x", "for", "x", "in", "lines", "]", "\n", "\n", "", "with", "open", "(", "SPLIT_FILE", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "split_idx", "=", "[", "int", "(", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "-", "1", "]", ")", "for", "x", "in", "lines", "]", "\n", "split_idx", "=", "np", ".", "array", "(", "split_idx", ")", "\n", "\n", "", "for", "i", "in", "np", ".", "unique", "(", "split_idx", ")", ":", "\n", "        ", "with", "open", "(", "SPLIT_SET_TEMPLATE", ".", "format", "(", "i", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "img_idx", "in", "np", ".", "where", "(", "split_idx", "==", "i", ")", "[", "0", "]", ":", "\n", "                ", "f", ".", "write", "(", "'{} {}\\n'", ".", "format", "(", "image_names", "[", "img_idx", "]", ",", "img_labels", "[", "img_idx", "]", "-", "1", ")", ")", "\n", "\n", "", "", "with", "open", "(", "SPLIT_SET_BOX_TEMPLATE", ".", "format", "(", "i", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "img_idx", "in", "np", ".", "where", "(", "split_idx", "==", "i", ")", "[", "0", "]", ":", "\n", "                ", "f", ".", "write", "(", "all_box", "[", "img_idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.list_factory.generate_voc_listfile": [[43, 86], ["open", "f.readlines", "open", "zip", "IMAGE_FILE_NAME.format", "xml.parse", "ET.parse.findall", "len", "numpy.zeros", "dict", "enumerate", "gt_labels.append", "f.write", "x.strip", "ANNOTATION_FILE_NAME.format", "zip", "numpy.unique", "x.strip", "range", "int", "len", "obj.find().text.lower().strip", "obj.find", "obj.find().text.lower", "obj.find"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.opts.parse"], ["", "", "", "", "def", "generate_voc_listfile", "(", "set_file", ",", "list_file", ")", ":", "\n", "    ", "classes", "=", "[", "'__background__'", ",", "# always index 0", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "\n", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "\n", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", "]", "\n", "\n", "IMAGE_FILE_NAME", "=", "'JPEGImages/{}.jpg'", "\n", "ANNOTATION_FILE_NAME", "=", "'../data/voc2012/Annotations/{}.xml'", "\n", "\n", "with", "open", "(", "set_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "train_list_filenmae", "=", "[", "IMAGE_FILE_NAME", ".", "format", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "lines", "]", "\n", "\n", "# get gt_labels", "\n", "gt_labels", "=", "[", "]", "\n", "for", "x", "in", "lines", ":", "\n", "            ", "tree", "=", "ET", ".", "parse", "(", "ANNOTATION_FILE_NAME", ".", "format", "(", "x", ".", "strip", "(", ")", ")", ")", "\n", "\n", "objs", "=", "tree", ".", "findall", "(", "'object'", ")", "\n", "\n", "# filter difficult example", "\n", "non_diff_objs", "=", "[", "obj", "for", "obj", "in", "objs", "if", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "==", "0", "]", "\n", "objs", "=", "non_diff_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "num_objs", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "class_to_index", "=", "dict", "(", "zip", "(", "classes", ",", "range", "(", "len", "(", "classes", ")", ")", ")", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "                ", "cls", "=", "class_to_index", "[", "obj", ".", "find", "(", "'name'", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "-", "1", "\n", "", "gt_labels", ".", "append", "(", "np", ".", "unique", "(", "gt_classes", ")", ")", "\n", "\n", "", "", "with", "open", "(", "list_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "img_name", ",", "labels", "in", "zip", "(", "train_list_filenmae", ",", "gt_labels", ")", ":", "\n", "            ", "line_str", "=", "img_name", "\n", "for", "lbl", "in", "labels", ":", "\n", "                ", "line_str", "+=", "' {}'", ".", "format", "(", "lbl", ")", "\n", "", "line_str", "+=", "'\\n'", "\n", "f", ".", "write", "(", "line_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.list_factory.voc": [[88, 100], ["list_factory.generate_voc_listfile", "list_factory.generate_voc_listfile", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.list_factory.generate_voc_listfile", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.list_factory.generate_voc_listfile"], ["", "", "", "def", "voc", "(", ")", ":", "\n", "    ", "TRAINSET_FILE", "=", "'../data/voc2012/ImageSets/Main/train.txt'", "\n", "VALSET_FILE", "=", "'../data/voc2012/ImageSets/Main/val.txt'", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'../data/voc2012/list'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'../data/voc2012/list'", ")", "\n", "\n", "", "TRAIN_LIST_FILE", "=", "'../data/voc2012/list/train_list.txt'", "\n", "VAL_LIST_FILE", "=", "'../data/voc2012/list/val_list.txt'", "\n", "\n", "generate_voc_listfile", "(", "TRAINSET_FILE", ",", "TRAIN_LIST_FILE", ")", "\n", "generate_voc_listfile", "(", "VALSET_FILE", ",", "VAL_LIST_FILE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Compose.__init__": [[37, 39], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Compose.__call__": [[40, 44], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", "=", "t", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.ToTensor.__call__": [[53, 62], ["functional.to_tensor"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.to_tensor"], ["def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pic (PIL Image or numpy.ndarray): Image to be converted to tensor.\n\n        Returns:\n            Tensor: Converted image.\n        \"\"\"", "\n", "return", "F", ".", "to_tensor", "(", "pic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.ToPILImage.__init__": [[80, 82], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mode", "=", "None", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.ToPILImage.__call__": [[83, 93], ["functional.to_pil_image"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.to_pil_image"], ["", "def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pic (Tensor or numpy.ndarray): Image to be converted to PIL Image.\n\n        Returns:\n            PIL Image: Image converted to PIL Image.\n\n        \"\"\"", "\n", "return", "F", ".", "to_pil_image", "(", "pic", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Normalize.__init__": [[106, 109], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Normalize.__call__": [[110, 119], ["functional.normalize"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.normalize"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n\n        Returns:\n            Tensor: Normalized Tensor image.\n        \"\"\"", "\n", "return", "F", ".", "normalize", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Resize.__init__": [[134, 138], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "assert", "isinstance", "(", "size", ",", "int", ")", "or", "(", "isinstance", "(", "size", ",", "collections", ".", "Iterable", ")", "and", "len", "(", "size", ")", "==", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Resize.__call__": [[139, 148], ["functional.resize"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be scaled.\n\n        Returns:\n            PIL Image: Rescaled image.\n        \"\"\"", "\n", "return", "F", ".", "resize", "(", "img", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Scale.__init__": [[154, 158], ["warnings.warn", "transforms.Resize.__init__"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.opts.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"The use of the transforms.Scale transform is deprecated, \"", "+", "\n", "\"please use transforms.Resize instead.\"", ")", "\n", "super", "(", "Scale", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.CenterCrop.__init__": [[169, 174], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.CenterCrop.__call__": [[175, 184], ["functional.center_crop"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.center_crop"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be cropped.\n\n        Returns:\n            PIL Image: Cropped image.\n        \"\"\"", "\n", "return", "F", ".", "center_crop", "(", "img", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Pad.__init__": [[199, 208], ["isinstance", "isinstance", "isinstance", "ValueError", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "padding", ",", "fill", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "padding", ",", "(", "numbers", ".", "Number", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "fill", ",", "(", "numbers", ".", "Number", ",", "str", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "padding", ",", "collections", ".", "Sequence", ")", "and", "len", "(", "padding", ")", "not", "in", "[", "2", ",", "4", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Padding must be an int or a 2, or 4 element tuple, not a \"", "+", "\n", "\"{} element tuple\"", ".", "format", "(", "len", "(", "padding", ")", ")", ")", "\n", "\n", "", "self", ".", "padding", "=", "padding", "\n", "self", ".", "fill", "=", "fill", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Pad.__call__": [[209, 218], ["functional.pad"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.pad"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be padded.\n\n        Returns:\n            PIL Image: Padded image.\n        \"\"\"", "\n", "return", "F", ".", "pad", "(", "img", ",", "self", ".", "padding", ",", "self", ".", "fill", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Lambda.__init__": [[227, 230], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "assert", "isinstance", "(", "lambd", ",", "types", ".", "LambdaType", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Lambda.__call__": [[231, 233], ["transforms.Lambda.lambd"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomCrop.__init__": [[248, 254], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomCrop.get_params": [[255, 274], ["random.randint", "random.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "output_size", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``crop`` for a random crop.\n\n        Args:\n            img (PIL Image): Image to be cropped.\n            output_size (tuple): Expected output size of the crop.\n\n        Returns:\n            tuple: params (i, j, h, w) to be passed to ``crop`` for random crop.\n        \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "output_size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "0", ",", "0", ",", "h", ",", "w", "\n", "\n", "", "i", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomCrop.__call__": [[275, 289], ["transforms.RandomCrop.get_params", "functional.crop", "functional.pad"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomRotation.get_params", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.crop", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.pad"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be cropped.\n\n        Returns:\n            PIL Image: Cropped image.\n        \"\"\"", "\n", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "F", ".", "pad", "(", "img", ",", "self", ".", "padding", ")", "\n", "\n", "", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "size", ")", "\n", "\n", "return", "F", ".", "crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomHorizontalFlip.__call__": [[294, 305], ["random.random", "functional.hflip"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.hflip"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be flipped.\n\n        Returns:\n            PIL Image: Randomly flipped image.\n        \"\"\"", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "F", ".", "hflip", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomVerticalFlip.__call__": [[310, 321], ["random.random", "functional.vflip"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.vflip"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be flipped.\n\n        Returns:\n            PIL Image: Randomly flipped image.\n        \"\"\"", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "F", ".", "vflip", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomResizedCrop.__init__": [[338, 343], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomResizedCrop.get_params": [[344, 378], ["range", "min", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "scale", ",", "ratio", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``crop`` for a random sized crop.\n\n        Args:\n            img (PIL Image): Image to be cropped.\n            scale (tuple): range of size of the origin size cropped\n            ratio (tuple): range of aspect ratio of the origin aspect ratio cropped\n\n        Returns:\n            tuple: params (i, j, h, w) to be passed to ``crop`` for a random\n                sized crop.\n        \"\"\"", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "*", "scale", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "*", "ratio", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "i", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "return", "i", ",", "j", ",", "h", ",", "w", "\n", "\n", "# Fallback", "\n", "", "", "w", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "i", "=", "(", "img", ".", "size", "[", "1", "]", "-", "w", ")", "//", "2", "\n", "j", "=", "(", "img", ".", "size", "[", "0", "]", "-", "w", ")", "//", "2", "\n", "return", "i", ",", "j", ",", "w", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomResizedCrop.__call__": [[379, 389], ["transforms.RandomResizedCrop.get_params", "functional.resized_crop"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomRotation.get_params", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resized_crop"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be flipped.\n\n        Returns:\n            PIL Image: Randomly cropped and resize image.\n        \"\"\"", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "return", "F", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomSizedCrop.__init__": [[395, 399], ["warnings.warn", "transforms.RandomResizedCrop.__init__"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.opts.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"The use of the transforms.RandomSizedCrop transform is deprecated, \"", "+", "\n", "\"please use transforms.RandomResizedCrop instead.\"", ")", "\n", "super", "(", "RandomSizedCrop", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.FiveCrop.__init__": [[425, 432], ["isinstance", "int", "int", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "size", ")", "==", "2", ",", "\"Please provide only two dimensions (h, w) for size.\"", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.FiveCrop.__call__": [[433, 435], ["functional.five_crop"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.five_crop"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "F", ".", "five_crop", "(", "img", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.TenCrop.__init__": [[464, 472], ["isinstance", "int", "int", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "vertical_flip", "=", "False", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "size", ")", "==", "2", ",", "\"Please provide only two dimensions (h, w) for size.\"", "\n", "self", ".", "size", "=", "size", "\n", "", "self", ".", "vertical_flip", "=", "vertical_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.TenCrop.__call__": [[473, 475], ["functional.ten_crop"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.ten_crop"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "F", ".", "ten_crop", "(", "img", ",", "self", ".", "size", ",", "self", ".", "vertical_flip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.LinearTransformation.__init__": [[494, 499], ["transformation_matrix.size", "transformation_matrix.size", "ValueError", "transformation_matrix.size"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transformation_matrix", ")", ":", "\n", "        ", "if", "transformation_matrix", ".", "size", "(", "0", ")", "!=", "transformation_matrix", ".", "size", "(", "1", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"transformation_matrix should be square. Got \"", "+", "\n", "\"[{} x {}] rectangular matrix.\"", ".", "format", "(", "*", "transformation_matrix", ".", "size", "(", ")", ")", ")", "\n", "", "self", ".", "transformation_matrix", "=", "transformation_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.LinearTransformation.__call__": [[500, 516], ["torch.mm.view.view", "torch.mm", "torch.mm.view", "transforms.LinearTransformation.transformation_matrix.size", "ValueError", "torch.mm.view.size", "torch.mm.view.size", "torch.mm.view.size", "torch.mm.view.size", "transforms.LinearTransformation.transformation_matrix.size", "torch.mm.view.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be whitened.\n\n        Returns:\n            Tensor: Transformed image.\n        \"\"\"", "\n", "if", "tensor", ".", "size", "(", "0", ")", "*", "tensor", ".", "size", "(", "1", ")", "*", "tensor", ".", "size", "(", "2", ")", "!=", "self", ".", "transformation_matrix", ".", "size", "(", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"tensor and transformation matrix have incompatible shape.\"", "+", "\n", "\"[{} x {} x {}] != \"", ".", "format", "(", "*", "tensor", ".", "size", "(", ")", ")", "+", "\n", "\"{}\"", ".", "format", "(", "self", ".", "transformation_matrix", ".", "size", "(", "0", ")", ")", ")", "\n", "", "flat_tensor", "=", "tensor", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "transformed_tensor", "=", "torch", ".", "mm", "(", "flat_tensor", ",", "self", ".", "transformation_matrix", ")", "\n", "tensor", "=", "transformed_tensor", ".", "view", "(", "tensor", ".", "size", "(", ")", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.ColorJitter.__init__": [[531, 536], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ":", "\n", "        ", "self", ".", "brightness", "=", "brightness", "\n", "self", ".", "contrast", "=", "contrast", "\n", "self", ".", "saturation", "=", "saturation", "\n", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.ColorJitter.get_params": [[537, 568], ["numpy.random.shuffle", "transforms.Compose", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "max", "transforms.Lambda", "max", "transforms.Lambda", "max", "transforms.Lambda", "transforms.Lambda", "functional.adjust_brightness", "functional.adjust_contrast", "functional.adjust_saturation", "functional.adjust_hue"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.adjust_brightness", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.adjust_contrast", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.adjust_saturation", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.adjust_hue"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "        ", "\"\"\"Get a randomized transform to be applied on image.\n\n        Arguments are same as that of __init__.\n\n        Returns:\n            Transform which randomly adjusts brightness, contrast and\n            saturation in a random order.\n        \"\"\"", "\n", "transforms", "=", "[", "]", "\n", "if", "brightness", ">", "0", ":", "\n", "            ", "brightness_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "brightness", ")", ",", "1", "+", "brightness", ")", "\n", "transforms", ".", "append", "(", "Lambda", "(", "lambda", "img", ":", "F", ".", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ")", ")", "\n", "\n", "", "if", "contrast", ">", "0", ":", "\n", "            ", "contrast_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "contrast", ")", ",", "1", "+", "contrast", ")", "\n", "transforms", ".", "append", "(", "Lambda", "(", "lambda", "img", ":", "F", ".", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ")", ")", "\n", "\n", "", "if", "saturation", ">", "0", ":", "\n", "            ", "saturation_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "saturation", ")", ",", "1", "+", "saturation", ")", "\n", "transforms", ".", "append", "(", "Lambda", "(", "lambda", "img", ":", "F", ".", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ")", ")", "\n", "\n", "", "if", "hue", ">", "0", ":", "\n", "            ", "hue_factor", "=", "np", ".", "random", ".", "uniform", "(", "-", "hue", ",", "hue", ")", "\n", "transforms", ".", "append", "(", "Lambda", "(", "lambda", "img", ":", "F", ".", "adjust_hue", "(", "img", ",", "hue_factor", ")", ")", ")", "\n", "\n", "", "np", ".", "random", ".", "shuffle", "(", "transforms", ")", "\n", "transform", "=", "Compose", "(", "transforms", ")", "\n", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.ColorJitter.__call__": [[569, 580], ["transforms.ColorJitter.get_params", "transforms.ColorJitter."], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomRotation.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Input image.\n\n        Returns:\n            PIL Image: Color jittered image.\n        \"\"\"", "\n", "transform", "=", "self", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "\n", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "return", "transform", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomRotation.__init__": [[602, 615], ["isinstance", "ValueError", "len", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "degrees", ",", "resample", "=", "False", ",", "expand", "=", "False", ",", "center", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "degrees", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "degrees", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If degrees is a single number, it must be positive.\"", ")", "\n", "", "self", ".", "degrees", "=", "(", "-", "degrees", ",", "degrees", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "degrees", ")", "!=", "2", ":", "\n", "                ", "raise", "ValueError", "(", "\"If degrees is a sequence, it must be of len 2.\"", ")", "\n", "", "self", ".", "degrees", "=", "degrees", "\n", "\n", "", "self", ".", "resample", "=", "resample", "\n", "self", ".", "expand", "=", "expand", "\n", "self", ".", "center", "=", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomRotation.get_params": [[616, 626], ["numpy.random.uniform"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "degrees", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``rotate`` for a random rotation.\n\n        Returns:\n            sequence: params to be passed to ``rotate`` for random rotation.\n        \"\"\"", "\n", "angle", "=", "np", ".", "random", ".", "uniform", "(", "degrees", "[", "0", "]", ",", "degrees", "[", "1", "]", ")", "\n", "\n", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomRotation.__call__": [[627, 638], ["transforms.RandomRotation.get_params", "functional.rotate"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomRotation.get_params", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.rotate"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n            img (PIL Image): Image to be rotated.\n\n        Returns:\n            PIL Image: Rotated image.\n        \"\"\"", "\n", "\n", "angle", "=", "self", ".", "get_params", "(", "self", ".", "degrees", ")", "\n", "\n", "return", "F", ".", "rotate", "(", "img", ",", "angle", ",", "self", ".", "resample", ",", "self", ".", "expand", ",", "self", ".", "center", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Grayscale.__init__": [[653, 655], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_output_channels", "=", "1", ")", ":", "\n", "        ", "self", ".", "num_output_channels", "=", "num_output_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.Grayscale.__call__": [[656, 665], ["functional.to_grayscale"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.to_grayscale"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be converted to grayscale.\n\n        Returns:\n            PIL Image: Randomly grayscaled image.\n        \"\"\"", "\n", "return", "F", ".", "to_grayscale", "(", "img", ",", "num_output_channels", "=", "self", ".", "num_output_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomGrayscale.__init__": [[681, 683], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.transforms.RandomGrayscale.__call__": [[684, 696], ["random.random", "functional.to_grayscale"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.to_grayscale"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be converted to grayscale.\n\n        Returns:\n            PIL Image: Randomly grayscaled image.\n        \"\"\"", "\n", "num_output_channels", "=", "1", "if", "img", ".", "mode", "==", "'L'", "else", "3", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "F", ".", "to_grayscale", "(", "img", ",", "num_output_channels", "=", "num_output_channels", ")", "\n", "", "return", "img", "", "", "", ""]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image": [[17, 22], ["isinstance", "isinstance"], "function", ["None"], ["def", "_is_pil_image", "(", "img", ")", ":", "\n", "    ", "if", "accimage", "is", "not", "None", ":", "\n", "        ", "return", "isinstance", "(", "img", ",", "(", "Image", ".", "Image", ",", "accimage", ".", "Image", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_tensor_image": [[24, 26], ["torch.is_tensor", "img.ndimension"], "function", ["None"], ["", "", "def", "_is_tensor_image", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "is_tensor", "(", "img", ")", "and", "img", ".", "ndimension", "(", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_numpy_image": [[28, 30], ["isinstance"], "function", ["None"], ["", "def", "_is_numpy_image", "(", "img", ")", ":", "\n", "    ", "return", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", "and", "(", "img", ".", "ndim", "in", "{", "2", ",", "3", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.to_tensor": [[32, 79], ["isinstance", "torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "TypeError", "torch.from_numpy", "torch.ByteTensor.float().div", "isinstance", "numpy.zeros", "pic.copyto", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor.float().div", "functional._is_pil_image", "functional._is_numpy_image", "pic.transpose", "numpy.array", "torch.from_numpy", "torch.ByteTensor", "len", "torch.ByteTensor.transpose().transpose", "type", "torch.ByteTensor.float", "numpy.array", "torch.ByteStorage.from_buffer", "torch.ByteTensor.float", "pic.tobytes", "torch.ByteTensor.transpose"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_numpy_image"], ["", "def", "to_tensor", "(", "pic", ")", ":", "\n", "    ", "\"\"\"Convert a ``PIL Image`` or ``numpy.ndarray`` to tensor.\n\n    See ``ToTensor`` for more details.\n\n    Args:\n        pic (PIL Image or numpy.ndarray): Image to be converted to tensor.\n\n    Returns:\n        Tensor: Converted image.\n    \"\"\"", "\n", "if", "not", "(", "_is_pil_image", "(", "pic", ")", "or", "_is_numpy_image", "(", "pic", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'pic should be PIL Image or ndarray. Got {}'", ".", "format", "(", "type", "(", "pic", ")", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "# backward compatibility", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "\n", "", "if", "accimage", "is", "not", "None", "and", "isinstance", "(", "pic", ",", "accimage", ".", "Image", ")", ":", "\n", "        ", "nppic", "=", "np", ".", "zeros", "(", "[", "pic", ".", "channels", ",", "pic", ".", "height", ",", "pic", ".", "width", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pic", ".", "copyto", "(", "nppic", ")", "\n", "return", "torch", ".", "from_numpy", "(", "nppic", ")", "\n", "\n", "# handle PIL Image", "\n", "", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "        ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "        ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "        ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "        ", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.to_pil_image": [[81, 142], ["isinstance", "torch.is_tensor", "PIL.Image.fromarray", "TypeError", "pic.mul().byte.mul().byte", "numpy.transpose", "isinstance", "TypeError", "TypeError", "functional._is_numpy_image", "functional._is_tensor_image", "pic.mul().byte.numpy", "ValueError", "type", "pic.mul().byte.mul", "ValueError", "ValueError", "type"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_numpy_image", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_tensor_image"], ["", "", "def", "to_pil_image", "(", "pic", ",", "mode", "=", "None", ")", ":", "\n", "    ", "\"\"\"Convert a tensor or an ndarray to PIL Image.\n\n    See :class:`~torchvision.transforms.ToPIlImage` for more details.\n\n    Args:\n        pic (Tensor or numpy.ndarray): Image to be converted to PIL Image.\n        mode (`PIL.Image mode`_): color space and pixel depth of input data (optional).\n\n    .. _PIL.Image mode: http://pillow.readthedocs.io/en/3.4.x/handbook/concepts.html#modes\n\n    Returns:\n        PIL Image: Image converted to PIL Image.\n    \"\"\"", "\n", "if", "not", "(", "_is_numpy_image", "(", "pic", ")", "or", "_is_tensor_image", "(", "pic", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'pic should be Tensor or ndarray. Got {}.'", ".", "format", "(", "type", "(", "pic", ")", ")", ")", "\n", "\n", "", "npimg", "=", "pic", "\n", "if", "isinstance", "(", "pic", ",", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "pic", "=", "pic", ".", "mul", "(", "255", ")", ".", "byte", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "pic", ")", ":", "\n", "        ", "npimg", "=", "np", ".", "transpose", "(", "pic", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "npimg", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'Input pic must be a torch.Tensor or NumPy ndarray, '", "+", "\n", "'not {}'", ".", "format", "(", "type", "(", "npimg", ")", ")", ")", "\n", "\n", "", "if", "npimg", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "expected_mode", "=", "None", "\n", "npimg", "=", "npimg", "[", ":", ",", ":", ",", "0", "]", "\n", "if", "npimg", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "            ", "expected_mode", "=", "'L'", "\n", "", "if", "npimg", ".", "dtype", "==", "np", ".", "int16", ":", "\n", "            ", "expected_mode", "=", "'I;16'", "\n", "", "if", "npimg", ".", "dtype", "==", "np", ".", "int32", ":", "\n", "            ", "expected_mode", "=", "'I'", "\n", "", "elif", "npimg", ".", "dtype", "==", "np", ".", "float32", ":", "\n", "            ", "expected_mode", "=", "'F'", "\n", "", "if", "mode", "is", "not", "None", "and", "mode", "!=", "expected_mode", ":", "\n", "            ", "raise", "ValueError", "(", "\"Incorrect mode ({}) supplied for input type {}. Should be {}\"", "\n", ".", "format", "(", "mode", ",", "np", ".", "dtype", ",", "expected_mode", ")", ")", "\n", "", "mode", "=", "expected_mode", "\n", "\n", "", "elif", "npimg", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "        ", "permitted_4_channel_modes", "=", "[", "'RGBA'", ",", "'CMYK'", "]", "\n", "if", "mode", "is", "not", "None", "and", "mode", "not", "in", "permitted_4_channel_modes", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only modes {} are supported for 4D inputs\"", ".", "format", "(", "permitted_4_channel_modes", ")", ")", "\n", "\n", "", "if", "mode", "is", "None", "and", "npimg", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "            ", "mode", "=", "'RGBA'", "\n", "", "", "else", ":", "\n", "        ", "permitted_3_channel_modes", "=", "[", "'RGB'", ",", "'YCbCr'", ",", "'HSV'", "]", "\n", "if", "mode", "is", "not", "None", "and", "mode", "not", "in", "permitted_3_channel_modes", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only modes {} are supported for 3D inputs\"", ".", "format", "(", "permitted_3_channel_modes", ")", ")", "\n", "", "if", "mode", "is", "None", "and", "npimg", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "            ", "mode", "=", "'RGB'", "\n", "\n", "", "", "if", "mode", "is", "None", ":", "\n", "        ", "raise", "TypeError", "(", "'Input type {} is not supported'", ".", "format", "(", "npimg", ".", "dtype", ")", ")", "\n", "\n", "", "return", "Image", ".", "fromarray", "(", "npimg", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.normalize": [[144, 163], ["zip", "functional._is_tensor_image", "TypeError", "t.sub_().div_", "t.sub_"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_tensor_image"], ["", "def", "normalize", "(", "tensor", ",", "mean", ",", "std", ")", ":", "\n", "    ", "\"\"\"Normalize a tensor image with mean and standard deviation.\n\n    See ``Normalize`` for more details.\n\n    Args:\n        tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        mean (sequence): Sequence of means for each channel.\n        std (sequence): Sequence of standard deviations for each channely.\n\n    Returns:\n        Tensor: Normalized Tensor image.\n    \"\"\"", "\n", "if", "not", "_is_tensor_image", "(", "tensor", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'tensor is not a torch image.'", ")", "\n", "# TODO: make efficient", "\n", "", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "mean", ",", "std", ")", ":", "\n", "        ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize": [[165, 200], ["isinstance", "functional._is_pil_image", "TypeError", "TypeError", "img.resize", "isinstance", "int", "img.resize", "int", "img.resize", "type", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["", "def", "resize", "(", "img", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "    ", "\"\"\"Resize the input PIL Image to the given size.\n\n    Args:\n        img (PIL Image): Image to be resized.\n        size (sequence or int): Desired output size. If size is a sequence like\n            (h, w), the output size will be matched to this. If size is an int,\n            the smaller edge of the image will be matched to this number maintaing\n            the aspect ratio. i.e, if height > width, then image will be rescaled to\n            (size * height / width, size)\n        interpolation (int, optional): Desired interpolation. Default is\n            ``PIL.Image.BILINEAR``\n\n    Returns:\n        PIL Image: Resized image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "", "if", "not", "(", "isinstance", "(", "size", ",", "int", ")", "or", "(", "isinstance", "(", "size", ",", "collections", ".", "Iterable", ")", "and", "len", "(", "size", ")", "==", "2", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'Got inappropriate size arg: {}'", ".", "format", "(", "size", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "size", ")", ":", "\n", "            ", "return", "img", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ow", "=", "size", "\n", "oh", "=", "int", "(", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "interpolation", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "size", "\n", "ow", "=", "int", "(", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "interpolation", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "img", ".", "resize", "(", "size", "[", ":", ":", "-", "1", "]", ",", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.scale": [[202, 206], ["warnings.warn", "functional.resize"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["", "", "def", "scale", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "warnings", ".", "warn", "(", "\"The use of the transforms.Scale transform is deprecated, \"", "+", "\n", "\"please use transforms.Resize instead.\"", ")", "\n", "return", "resize", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.pad": [[208, 237], ["PIL.ImageOps.expand", "functional._is_pil_image", "TypeError", "isinstance", "TypeError", "isinstance", "TypeError", "isinstance", "ValueError", "len", "type", "len"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image"], ["", "def", "pad", "(", "img", ",", "padding", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\"Pad the given PIL Image on all sides with the given \"pad\" value.\n\n    Args:\n        img (PIL Image): Image to be padded.\n        padding (int or tuple): Padding on each border. If a single int is provided this\n            is used to pad all borders. If tuple of length 2 is provided this is the padding\n            on left/right and top/bottom respectively. If a tuple of length 4 is provided\n            this is the padding for the left, top, right and bottom borders\n            respectively.\n        fill: Pixel fill value. Default is 0. If a tuple of\n            length 3, it is used to fill R, G, B channels respectively.\n\n    Returns:\n        PIL Image: Padded image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "padding", ",", "(", "numbers", ".", "Number", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'Got inappropriate padding arg'", ")", "\n", "", "if", "not", "isinstance", "(", "fill", ",", "(", "numbers", ".", "Number", ",", "str", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'Got inappropriate fill arg'", ")", "\n", "\n", "", "if", "isinstance", "(", "padding", ",", "collections", ".", "Sequence", ")", "and", "len", "(", "padding", ")", "not", "in", "[", "2", ",", "4", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"Padding must be an int or a 2, or 4 element tuple, not a \"", "+", "\n", "\"{} element tuple\"", ".", "format", "(", "len", "(", "padding", ")", ")", ")", "\n", "\n", "", "return", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "padding", ",", "fill", "=", "fill", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.crop": [[239, 256], ["img.crop", "functional._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.crop", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image"], ["", "def", "crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ")", ":", "\n", "    ", "\"\"\"Crop the given PIL Image.\n\n    Args:\n        img (PIL Image): Image to be cropped.\n        i: Upper pixel coordinate.\n        j: Left pixel coordinate.\n        h: Height of the cropped image.\n        w: Width of the cropped image.\n\n    Returns:\n        PIL Image: Cropped image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "return", "img", ".", "crop", "(", "(", "j", ",", "i", ",", "j", "+", "w", ",", "i", "+", "h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.center_crop": [[258, 266], ["isinstance", "int", "int", "functional.crop", "round", "round", "int", "int"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.crop"], ["", "def", "center_crop", "(", "img", ",", "output_size", ")", ":", "\n", "    ", "if", "isinstance", "(", "output_size", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "output_size", "=", "(", "int", "(", "output_size", ")", ",", "int", "(", "output_size", ")", ")", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "output_size", "\n", "i", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "j", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "return", "crop", "(", "img", ",", "i", ",", "j", ",", "th", ",", "tw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resized_crop": [[268, 289], ["functional._is_pil_image", "functional.crop", "functional.resize"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.crop", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.resize"], ["", "def", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "    ", "\"\"\"Crop the given PIL Image and resize it to desired size.\n\n    Notably used in RandomResizedCrop.\n\n    Args:\n        img (PIL Image): Image to be cropped.\n        i: Upper pixel coordinate.\n        j: Left pixel coordinate.\n        h: Height of the cropped image.\n        w: Width of the cropped image.\n        size (sequence or int): Desired output size. Same semantics as ``scale``.\n        interpolation (int, optional): Desired interpolation. Default is\n            ``PIL.Image.BILINEAR``.\n    Returns:\n        PIL Image: Cropped image.\n    \"\"\"", "\n", "assert", "_is_pil_image", "(", "img", ")", ",", "'img should be PIL Image'", "\n", "img", "=", "crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "img", "=", "resize", "(", "img", ",", "size", ",", "interpolation", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.hflip": [[291, 304], ["img.transpose", "functional._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image"], ["", "def", "hflip", "(", "img", ")", ":", "\n", "    ", "\"\"\"Horizontally flip the given PIL Image.\n\n    Args:\n        img (PIL Image): Image to be flipped.\n\n    Returns:\n        PIL Image:  Horizontall flipped image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.vflip": [[306, 319], ["img.transpose", "functional._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image"], ["", "def", "vflip", "(", "img", ")", ":", "\n", "    ", "\"\"\"Vertically flip the given PIL Image.\n\n    Args:\n        img (PIL Image): Image to be flipped.\n\n    Returns:\n        PIL Image:  Vertically flipped image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.five_crop": [[321, 352], ["isinstance", "img.crop", "img.crop", "img.crop", "img.crop", "functional.center_crop", "ValueError", "int", "int", "len"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.crop", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.crop", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.crop", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.crop", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.center_crop"], ["", "def", "five_crop", "(", "img", ",", "size", ")", ":", "\n", "    ", "\"\"\"Crop the given PIL Image into four corners and the central crop.\n\n    .. Note::\n        This transform returns a tuple of images and there may be a\n        mismatch in the number of inputs and targets your ``Dataset`` returns.\n\n    Args:\n       size (sequence or int): Desired output size of the crop. If size is an\n           int instead of sequence like (h, w), a square crop (size, size) is\n           made.\n    Returns:\n        tuple: tuple (tl, tr, bl, br, center) corresponding top left,\n            top right, bottom left, bottom right and center crop.\n    \"\"\"", "\n", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "size", ")", "==", "2", ",", "\"Please provide only two dimensions (h, w) for size.\"", "\n", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "crop_h", ",", "crop_w", "=", "size", "\n", "if", "crop_w", ">", "w", "or", "crop_h", ">", "h", ":", "\n", "        ", "raise", "ValueError", "(", "\"Requested crop size {} is bigger than input size {}\"", ".", "format", "(", "size", ",", "\n", "(", "h", ",", "w", ")", ")", ")", "\n", "", "tl", "=", "img", ".", "crop", "(", "(", "0", ",", "0", ",", "crop_w", ",", "crop_h", ")", ")", "\n", "tr", "=", "img", ".", "crop", "(", "(", "w", "-", "crop_w", ",", "0", ",", "w", ",", "crop_h", ")", ")", "\n", "bl", "=", "img", ".", "crop", "(", "(", "0", ",", "h", "-", "crop_h", ",", "crop_w", ",", "h", ")", ")", "\n", "br", "=", "img", ".", "crop", "(", "(", "w", "-", "crop_w", ",", "h", "-", "crop_h", ",", "w", ",", "h", ")", ")", "\n", "center", "=", "center_crop", "(", "img", ",", "(", "crop_h", ",", "crop_w", ")", ")", "\n", "return", "(", "tl", ",", "tr", ",", "bl", ",", "br", ",", "center", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.ten_crop": [[354, 388], ["isinstance", "functional.five_crop", "functional.five_crop", "functional.vflip", "functional.hflip", "int", "int", "len"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.five_crop", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.five_crop", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.vflip", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.hflip"], ["", "def", "ten_crop", "(", "img", ",", "size", ",", "vertical_flip", "=", "False", ")", ":", "\n", "    ", "\"\"\"Crop the given PIL Image into four corners and the central crop plus the\n       flipped version of these (horizontal flipping is used by default).\n\n    .. Note::\n        This transform returns a tuple of images and there may be a\n        mismatch in the number of inputs and targets your ``Dataset`` returns.\n\n       Args:\n           size (sequence or int): Desired output size of the crop. If size is an\n               int instead of sequence like (h, w), a square crop (size, size) is\n               made.\n           vertical_flip (bool): Use vertical flipping instead of horizontal\n\n        Returns:\n            tuple: tuple (tl, tr, bl, br, center, tl_flip, tr_flip, bl_flip,\n                br_flip, center_flip) corresponding top left, top right,\n                bottom left, bottom right and center crop and same for the\n                flipped image.\n    \"\"\"", "\n", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "size", ")", "==", "2", ",", "\"Please provide only two dimensions (h, w) for size.\"", "\n", "\n", "", "first_five", "=", "five_crop", "(", "img", ",", "size", ")", "\n", "\n", "if", "vertical_flip", ":", "\n", "        ", "img", "=", "vflip", "(", "img", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "hflip", "(", "img", ")", "\n", "\n", "", "second_five", "=", "five_crop", "(", "img", ",", "size", ")", "\n", "return", "first_five", "+", "second_five", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.adjust_brightness": [[390, 408], ["PIL.ImageEnhance.Brightness", "ImageEnhance.Brightness.enhance", "functional._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image"], ["", "def", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ":", "\n", "    ", "\"\"\"Adjust brightness of an Image.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        brightness_factor (float):  How much to adjust the brightness. Can be\n            any non negative number. 0 gives a black image, 1 gives the\n            original image while 2 increases the brightness by a factor of 2.\n\n    Returns:\n        PIL Image: Brightness adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Brightness", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "brightness_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.adjust_contrast": [[410, 428], ["PIL.ImageEnhance.Contrast", "ImageEnhance.Contrast.enhance", "functional._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image"], ["", "def", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ":", "\n", "    ", "\"\"\"Adjust contrast of an Image.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        contrast_factor (float): How much to adjust the contrast. Can be any\n            non negative number. 0 gives a solid gray image, 1 gives the\n            original image while 2 increases the contrast by a factor of 2.\n\n    Returns:\n        PIL Image: Contrast adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Contrast", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "contrast_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.adjust_saturation": [[430, 448], ["PIL.ImageEnhance.Color", "ImageEnhance.Color.enhance", "functional._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image"], ["", "def", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ":", "\n", "    ", "\"\"\"Adjust color saturation of an image.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        saturation_factor (float):  How much to adjust the saturation. 0 will\n            give a black and white image, 1 will give the original image while\n            2 will enhance the saturation by a factor of 2.\n\n    Returns:\n        PIL Image: Saturation adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Color", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "saturation_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.adjust_hue": [[450, 493], ["Image.merge().convert.convert().split", "numpy.array", "PIL.Image.fromarray", "PIL.Image.merge().convert", "ValueError", "functional._is_pil_image", "TypeError", "numpy.errstate", "numpy.uint8", "Image.merge().convert.convert", "PIL.Image.merge", "type"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image"], ["", "def", "adjust_hue", "(", "img", ",", "hue_factor", ")", ":", "\n", "    ", "\"\"\"Adjust hue of an image.\n\n    The image hue is adjusted by converting the image to HSV and\n    cyclically shifting the intensities in the hue channel (H).\n    The image is then converted back to original image mode.\n\n    `hue_factor` is the amount of shift in H channel and must be in the\n    interval `[-0.5, 0.5]`.\n\n    See https://en.wikipedia.org/wiki/Hue for more details on Hue.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        hue_factor (float):  How much to shift the hue channel. Should be in\n            [-0.5, 0.5]. 0.5 and -0.5 give complete reversal of hue channel in\n            HSV space in positive and negative direction respectively.\n            0 means no shift. Therefore, both -0.5 and 0.5 will give an image\n            with complementary colors while 0 gives the original image.\n\n    Returns:\n        PIL Image: Hue adjusted image.\n    \"\"\"", "\n", "if", "not", "(", "-", "0.5", "<=", "hue_factor", "<=", "0.5", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'hue_factor is not in [-0.5, 0.5].'", ".", "format", "(", "hue_factor", ")", ")", "\n", "\n", "", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "input_mode", "=", "img", ".", "mode", "\n", "if", "input_mode", "in", "{", "'L'", ",", "'1'", ",", "'I'", ",", "'F'", "}", ":", "\n", "        ", "return", "img", "\n", "\n", "", "h", ",", "s", ",", "v", "=", "img", ".", "convert", "(", "'HSV'", ")", ".", "split", "(", ")", "\n", "\n", "np_h", "=", "np", ".", "array", "(", "h", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# uint8 addition take cares of rotation across boundaries", "\n", "with", "np", ".", "errstate", "(", "over", "=", "'ignore'", ")", ":", "\n", "        ", "np_h", "+=", "np", ".", "uint8", "(", "hue_factor", "*", "255", ")", "\n", "", "h", "=", "Image", ".", "fromarray", "(", "np_h", ",", "'L'", ")", "\n", "\n", "img", "=", "Image", ".", "merge", "(", "'HSV'", ",", "(", "h", ",", "s", ",", "v", ")", ")", ".", "convert", "(", "input_mode", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.adjust_gamma": [[495, 527], ["Image.fromarray().convert.convert", "numpy.array", "numpy.uint8", "PIL.Image.fromarray().convert", "functional._is_pil_image", "TypeError", "ValueError", "numpy.clip", "PIL.Image.fromarray", "type"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image"], ["", "def", "adjust_gamma", "(", "img", ",", "gamma", ",", "gain", "=", "1", ")", ":", "\n", "    ", "\"\"\"Perform gamma correction on an image.\n\n    Also known as Power Law Transform. Intensities in RGB mode are adjusted\n    based on the following equation:\n\n        I_out = 255 * gain * ((I_in / 255) ** gamma)\n\n    See https://en.wikipedia.org/wiki/Gamma_correction for more details.\n\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        gamma (float): Non negative real number. gamma larger than 1 make the\n            shadows darker, while gamma smaller than 1 make dark regions\n            lighter.\n        gain (float): The constant multiplier.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "if", "gamma", "<", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'Gamma should be a non-negative real number'", ")", "\n", "\n", "", "input_mode", "=", "img", ".", "mode", "\n", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "np_img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "np_img", "=", "255", "*", "gain", "*", "(", "(", "np_img", "/", "255", ")", "**", "gamma", ")", "\n", "np_img", "=", "np", ".", "uint8", "(", "np", ".", "clip", "(", "np_img", ",", "0", ",", "255", ")", ")", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "np_img", ",", "'RGB'", ")", ".", "convert", "(", "input_mode", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.rotate": [[529, 553], ["img.rotate", "functional._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.rotate", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image"], ["", "def", "rotate", "(", "img", ",", "angle", ",", "resample", "=", "False", ",", "expand", "=", "False", ",", "center", "=", "None", ")", ":", "\n", "    ", "\"\"\"Rotate the image by angle and then (optionally) translate it by (n_columns, n_rows)\n\n\n    Args:\n        img (PIL Image): PIL Image to be rotated.\n        angle ({float, int}): In degrees degrees counter clockwise order.\n        resample ({PIL.Image.NEAREST, PIL.Image.BILINEAR, PIL.Image.BICUBIC}, optional):\n            An optional resampling filter.\n            See http://pillow.readthedocs.io/en/3.4.x/handbook/concepts.html#filters\n            If omitted, or if the image has mode \"1\" or \"P\", it is set to PIL.Image.NEAREST.\n        expand (bool, optional): Optional expansion flag.\n            If true, expands the output image to make it large enough to hold the entire rotated image.\n            If false or omitted, make the output image the same size as the input image.\n            Note that the expand flag assumes rotation around the center and no translation.\n        center (2-tuple, optional): Optional center of rotation.\n            Origin is the upper left corner.\n            Default is the center of the image.\n    \"\"\"", "\n", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "return", "img", ".", "rotate", "(", "angle", ",", "resample", ",", "expand", ",", "center", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional.to_grayscale": [[555, 580], ["functional._is_pil_image", "TypeError", "Image.fromarray.convert", "Image.fromarray.convert", "numpy.array", "numpy.dstack", "PIL.Image.fromarray", "ValueError", "type"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.transforms.functional._is_pil_image"], ["", "def", "to_grayscale", "(", "img", ",", "num_output_channels", "=", "1", ")", ":", "\n", "    ", "\"\"\"Convert image to grayscale version of image.\n\n    Args:\n        img (PIL Image): Image to be converted to grayscale.\n\n    Returns:\n        PIL Image:  Grayscale version of the image.\n                    if num_output_channels == 1 : returned image is single channel\n                    if num_output_channels == 3 : returned image is 3 channel with r == g == b\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "if", "num_output_channels", "==", "1", ":", "\n", "        ", "img", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "", "elif", "num_output_channels", "==", "3", ":", "\n", "        ", "img", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "np_img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "np_img", "=", "np", ".", "dstack", "(", "[", "np_img", ",", "np_img", ",", "np_img", "]", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "np_img", ",", "'RGB'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'num_output_channels should be either 1 or 3'", ")", "\n", "\n", "", "return", "img", "", "", ""]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg.VGG.__init__": [[32, 40], ["torch.Module.__init__", "vgg.VGG.classifier", "vgg.VGG._initialize_weights", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.opts.__init__", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg.VGG.classifier", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "[", ":", "-", "1", "]", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "cls", "=", "self", ".", "classifier", "(", "512", ",", "num_classes", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n", "self", ".", "loss_cross_entropy", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg.VGG.classifier": [[41, 50], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "classifier", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "# nn.Dropout(0.5),", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "# fc6", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# nn.Dropout(0.5),", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "# fc6", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "# fc8", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg.VGG._initialize_weights": [[52, 64], ["vgg.VGG.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg.VGG.forward": [[66, 73], ["vgg.VGG.features", "vgg.VGG.cls", "vgg.VGG.size", "vgg.VGG.view"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "label", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "self", ".", "cls", "(", "x", ")", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "self", ".", "cam_map", "=", "out", ".", "view", "(", "batch_size", ",", "self", ".", "num_classes", ",", "14", ",", "14", ")", "\n", "\n", "return", "self", ".", "cam_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg.VGG.get_loss": [[74, 82], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "vgg.VGG.loss_cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "gt_labels.long"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "cam_map", ",", "gt_labels", ")", ":", "\n", "        ", "logits0", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "cam_map", ",", "dim", "=", "2", ")", ",", "dim", "=", "2", ")", "\n", "loss_cls", "=", "self", ".", "loss_cross_entropy", "(", "logits0", ",", "gt_labels", ".", "long", "(", ")", ")", "\n", "\n", "\n", "loss_val", "=", "loss_cls", "\n", "\n", "return", "loss_val", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg.VGG.get_cam_maps": [[84, 86], ["None"], "methods", ["None"], ["", "def", "get_cam_maps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cam_map", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg.make_layers": [[87, 105], ["zip", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "def", "make_layers", "(", "cfg", ",", "dilation", "=", "None", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", ",", "d", "in", "zip", "(", "cfg", ",", "dilation", ")", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "]", "\n", "", "elif", "v", "==", "'N'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "]", "\n", "", "elif", "v", "==", "'L'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "d", ",", "dilation", "=", "d", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg.model": [[121, 149], ["vgg.VGG", "vgg.make_layers", "VGG.state_dict", "torch.load_url", "print", "model_zoo.load_url.keys", "model.state_dict.keys", "model.state_dict.update", "VGG.load_state_dict", "print", "print", "model_zoo.load_url.items"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.make_layers", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update"], ["def", "model", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n\n    'D': [64, 64, 'M', 128, 128, 'M', 256, 256, 256, 'M', 512, 512, 512, 'M', 512, 512, 512, 'M'],\n    \"\"\"", "\n", "model", "=", "VGG", "(", "make_layers", "(", "cfg", "[", "'O'", "]", ",", "dilation", "=", "dilation", "[", "'D1'", "]", ")", ",", "**", "kwargs", ")", "\n", "# print(model)", "\n", "if", "pretrained", ":", "\n", "        ", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg16'", "]", ")", "\n", "# print(pretrained_dict)", "\n", "print", "(", "'load pretrained model from {}'", ".", "format", "(", "model_urls", "[", "'vgg16'", "]", ")", ")", "\n", "for", "k", "in", "pretrained_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "model_dict", ":", "\n", "                ", "print", "(", "'Key {} is removed from vgg16'", ".", "format", "(", "k", ")", ")", "\n", "", "", "for", "k", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "pretrained_dict", ":", "\n", "                ", "print", "(", "'Key {} is new added for DA Net'", ".", "format", "(", "k", ")", ")", "\n", "# 1. filter out unnecessary keys", "\n", "", "", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "# 3. load the new state dict", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.__init__": [[28, 55], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vgg_spa.VGG._initialize_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.opts.__init__", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "1000", ",", "cnvs", "=", "(", "10", ",", "17", ",", "24", ")", ",", "args", "=", "None", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Sequential", "(", "*", "features", "[", ":", "cnvs", "[", "0", "]", "]", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "cnvs", "[", "0", "]", ":", "cnvs", "[", "1", "]", "]", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "cnvs", "[", "1", "]", ":", "cnvs", "[", "2", "]", "]", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "*", "features", "[", "cnvs", "[", "2", "]", ":", "-", "1", "]", ")", "\n", "self", ".", "conv5_add", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fmp", "=", "features", "[", "-", "1", "]", "# final max pooling", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "cls", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "# fc6", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "# fc7", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n", "# loss function", "\n", "self", ".", "loss_cross_entropy", "=", "F", ".", "cross_entropy", "\n", "self", ".", "loss_bce", "=", "F", ".", "binary_cross_entropy_with_logits", "\n", "self", ".", "nll_loss", "=", "F", ".", "nll_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG._initialize_weights": [[56, 68], ["vgg_spa.VGG.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.forward": [[71, 107], ["vgg_spa.VGG.conv1_2", "vgg_spa.VGG.conv3", "vgg_spa.VGG.conv4", "vgg_spa.VGG.conv5", "vgg_spa.VGG.cls", "vgg_spa.VGG.hsc", "vgg_spa.VGG.hsc", "vgg_spa.VGG.hsc", "vgg_spa.VGG.hsc"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.hsc", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.hsc", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.hsc", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.hsc"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "scg_flag", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1_2", "(", "x", ")", "\n", "sc_2", "=", "None", "\n", "sc_2_so", "=", "None", "\n", "if", "scg_flag", "and", "'2'", "in", "self", ".", "args", ".", "scg_blocks", ":", "\n", "            ", "sc_2", ",", "sc_2_so", "=", "self", ".", "hsc", "(", "x", ",", "fo_th", "=", "self", ".", "args", ".", "scg_fosc_th", ",", "\n", "so_th", "=", "self", ".", "args", ".", "scg_sosc_th", ",", "\n", "order", "=", "self", ".", "args", ".", "scg_order", ")", "\n", "", "feat_3", "=", "self", ".", "conv3", "(", "x", ")", "\n", "sc_3", "=", "None", "\n", "sc_3_so", "=", "None", "\n", "if", "scg_flag", "and", "'3'", "in", "self", ".", "args", ".", "scg_blocks", ":", "\n", "            ", "sc_3", ",", "sc_3_so", "=", "self", ".", "hsc", "(", "feat_3", ",", "fo_th", "=", "self", ".", "args", ".", "scg_fosc_th", ",", "\n", "so_th", "=", "self", ".", "args", ".", "scg_sosc_th", ",", "\n", "order", "=", "self", ".", "args", ".", "scg_order", ")", "\n", "", "feat_4", "=", "self", ".", "conv4", "(", "feat_3", ")", "\n", "self", ".", "feat4", "=", "feat_4", "\n", "sc_4", "=", "None", "\n", "sc_4_so", "=", "None", "\n", "if", "scg_flag", "and", "'4'", "in", "self", ".", "args", ".", "scg_blocks", ":", "\n", "            ", "sc_4", ",", "sc_4_so", "=", "self", ".", "hsc", "(", "feat_4", ",", "fo_th", "=", "self", ".", "args", ".", "scg_fosc_th", ",", "\n", "so_th", "=", "self", ".", "args", ".", "scg_sosc_th", ",", "\n", "order", "=", "self", ".", "args", ".", "scg_order", ")", "\n", "\n", "", "feat_5", "=", "self", ".", "conv5", "(", "feat_4", ")", "\n", "self", ".", "feat5", "=", "feat_5", "\n", "sc_5", "=", "None", "\n", "sc_5_so", "=", "None", "\n", "if", "scg_flag", "and", "'5'", "in", "self", ".", "args", ".", "scg_blocks", ":", "\n", "            ", "sc_5", ",", "sc_5_so", "=", "self", ".", "hsc", "(", "feat_5", ",", "fo_th", "=", "self", ".", "args", ".", "scg_fosc_th", ",", "\n", "so_th", "=", "self", ".", "args", ".", "scg_sosc_th", ",", "\n", "order", "=", "self", ".", "args", ".", "scg_order", ")", "\n", "", "cls_map", "=", "self", ".", "cls", "(", "feat_5", ")", "\n", "self", ".", "cls_map", "=", "cls_map", "\n", "\n", "return", "cls_map", ",", "(", "sc_2", ",", "sc_3", ",", "sc_4", ",", "sc_5", ")", ",", "(", "sc_2_so", ",", "sc_3_so", ",", "sc_4_so", ",", "sc_5_so", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.hsc": [[109, 143], ["f_phi.permute().contiguous().view.permute().contiguous().view.size", "f_phi.permute().contiguous().view.permute().contiguous().view.size", "f_phi.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.clone", "torch.relu.clone", "range", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "f_phi.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "f_phi_normed.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "f_phi.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["None"], ["", "def", "hsc", "(", "self", ",", "f_phi", ",", "fo_th", "=", "0.1", ",", "so_th", "=", "0.1", ",", "order", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        Calculate affinity matrix and update feature.\n        :param feat:\n        :param f_phi:\n        :param fo_th:\n        :param so_weight:\n        :return:\n        \"\"\"", "\n", "n", ",", "c_nl", ",", "h", ",", "w", "=", "f_phi", ".", "size", "(", ")", "\n", "c_nl", "=", "f_phi", ".", "size", "(", "1", ")", "\n", "f_phi", "=", "f_phi", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n", ",", "-", "1", ",", "c_nl", ")", "\n", "f_phi_normed", "=", "f_phi", "/", "(", "torch", ".", "norm", "(", "f_phi", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-10", ")", "\n", "\n", "# first order", "\n", "non_local_cos", "=", "F", ".", "relu", "(", "torch", ".", "matmul", "(", "f_phi_normed", ",", "f_phi_normed", ".", "transpose", "(", "1", ",", "2", ")", ")", ")", "\n", "non_local_cos", "[", "non_local_cos", "<", "fo_th", "]", "=", "0", "\n", "non_local_cos_fo", "=", "non_local_cos", ".", "clone", "(", ")", "\n", "non_local_cos_fo", "=", "non_local_cos_fo", "/", "(", "torch", ".", "sum", "(", "non_local_cos_fo", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-5", ")", "\n", "\n", "# high order", "\n", "base_th", "=", "1.", "/", "(", "h", "*", "w", ")", "\n", "non_local_cos", "[", ":", ",", "torch", ".", "arange", "(", "h", "*", "w", ")", ",", "torch", ".", "arange", "(", "w", "*", "h", ")", "]", "=", "0", "\n", "non_local_cos", "=", "non_local_cos", "/", "(", "torch", ".", "sum", "(", "non_local_cos", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-5", ")", "\n", "non_local_cos_ho", "=", "non_local_cos", ".", "clone", "(", ")", "\n", "so_th", "=", "base_th", "*", "so_th", "\n", "for", "_", "in", "range", "(", "order", "-", "1", ")", ":", "\n", "            ", "non_local_cos_ho", "=", "torch", ".", "matmul", "(", "non_local_cos_ho", ",", "non_local_cos", ")", "\n", "# non_local_cos_ho[:, torch.arange(h * w), torch.arange(w * h)] = 0", "\n", "non_local_cos_ho", "=", "non_local_cos_ho", "/", "(", "torch", ".", "sum", "(", "non_local_cos_ho", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-10", ")", "\n", "# non_local_cos_ho = non_local_cos_ho - torch.min(non_local_cos_ho, dim=1, keepdim=True)[0]", "\n", "#non_local_cos_ho = non_local_cos_ho / (torch.max(non_local_cos_ho, dim=1, keepdim=True)[0] + 1e-10)", "\n", "", "non_local_cos_ho", "[", "non_local_cos_ho", "<", "so_th", "]", "=", "0", "\n", "return", "non_local_cos_fo", ",", "non_local_cos_ho", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.get_loss": [[145, 157], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "vgg_spa.VGG.loss_cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "gt_child_label.long", "vgg_spa.VGG.get_ra_loss", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.get_ra_loss"], ["", "def", "get_loss", "(", "self", ",", "logits", ",", "gt_child_label", ",", "epoch", "=", "0", ",", "ram_start", "=", "10", ")", ":", "\n", "        ", "cls_logits", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "logits", ",", "dim", "=", "2", ")", ",", "dim", "=", "2", ")", "\n", "loss", "=", "0", "\n", "loss", "+=", "self", ".", "loss_cross_entropy", "(", "cls_logits", ",", "gt_child_label", ".", "long", "(", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "ram", "and", "epoch", ">=", "ram_start", ":", "\n", "            ", "ra_loss", "=", "self", ".", "get_ra_loss", "(", "logits", ",", "gt_child_label", ",", "self", ".", "args", ".", "ram_th_bg", ",", "self", ".", "args", ".", "ram_bg_fg_gap", ")", "\n", "loss", "+=", "self", ".", "args", ".", "ra_loss_weight", "*", "ra_loss", "\n", "", "else", ":", "\n", "            ", "ra_loss", "=", "torch", ".", "zeros_like", "(", "loss", ")", "\n", "\n", "", "return", "loss", ",", "ra_loss", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.get_ra_loss": [[158, 171], ["logits.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "torch.var", "vgg_spa.VGG.normalize_feat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "label.long"], "methods", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.normalize_feat"], ["", "def", "get_ra_loss", "(", "self", ",", "logits", ",", "label", ",", "th_bg", "=", "0.3", ",", "bg_fg_gap", "=", "0.0", ")", ":", "\n", "        ", "n", ",", "_", ",", "_", ",", "_", "=", "logits", ".", "size", "(", ")", "\n", "cls_logits", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "var_logits", "=", "torch", ".", "var", "(", "cls_logits", ",", "dim", "=", "1", ")", "\n", "norm_var_logits", "=", "self", ".", "normalize_feat", "(", "var_logits", ")", "\n", "\n", "bg_mask", "=", "(", "norm_var_logits", "<", "th_bg", ")", ".", "float", "(", ")", "\n", "fg_mask", "=", "(", "norm_var_logits", ">", "(", "th_bg", "+", "bg_fg_gap", ")", ")", ".", "float", "(", ")", "\n", "cls_map", "=", "logits", "[", "torch", ".", "arange", "(", "n", ")", ",", "label", ".", "long", "(", ")", ",", "...", "]", "\n", "cls_map", "=", "torch", ".", "sigmoid", "(", "cls_map", ")", "\n", "\n", "ra_loss", "=", "torch", ".", "mean", "(", "cls_map", "*", "bg_mask", "+", "(", "1", "-", "cls_map", ")", "*", "fg_mask", ")", "\n", "return", "ra_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.normalize_feat": [[172, 181], ["feat.view.view.size", "feat.view.view.view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "norm_feat.view.view.view"], "methods", ["None"], ["", "def", "normalize_feat", "(", "self", ",", "feat", ")", ":", "\n", "        ", "n", ",", "fh", ",", "fw", "=", "feat", ".", "size", "(", ")", "\n", "feat", "=", "feat", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "min_val", ",", "_", "=", "torch", ".", "min", "(", "feat", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "max_val", ",", "_", "=", "torch", ".", "max", "(", "feat", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "norm_feat", "=", "(", "feat", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", "+", "1e-15", ")", "\n", "norm_feat", "=", "norm_feat", ".", "view", "(", "n", ",", "fh", ",", "fw", ")", "\n", "\n", "return", "norm_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.get_cls_maps": [[182, 184], ["torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "get_cls_maps", "(", "self", ")", ":", "\n", "        ", "return", "F", ".", "relu", "(", "self", ".", "cls_map", ")", "\n", "", "def", "get_loc_maps", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.get_loc_maps": [[184, 186], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "get_loc_maps", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "sigmoid", "(", "self", ".", "loc_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.make_layers": [[188, 208], ["zip", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "def", "make_layers", "(", "cfg", ",", "dilation", "=", "None", ",", "batch_norm", "=", "False", ",", "instance_norm", "=", "False", ",", "inl", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", ",", "d", "in", "zip", "(", "cfg", ",", "dilation", ")", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "]", "\n", "", "elif", "v", "==", "'N'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "]", "\n", "", "elif", "v", "==", "'L'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "d", ",", "dilation", "=", "d", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "elif", "instance_norm", "and", "v", "<", "256", "and", "v", ">", "64", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "InstanceNorm2d", "(", "v", ",", "affine", "=", "inl", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.model": [[227, 277], ["vgg_spa.make_layers", "numpy.cumsum", "vgg_spa.VGG", "dict", "VGG.state_dict", "os.path.join", "os.path.isfile", "model_zoo.load_url.keys", "print", "model.state_dict.keys", "model.state_dict.update", "VGG.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "print", "torch.load_url", "print", "range", "range", "range", "range", "range", "range", "range", "range", "model_zoo.load_url.items", "print", "print", "model_zoo.load_url.items", "dict.keys"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.make_layers", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update"], ["def", "model", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"VGG 16-layer model (configuration \"D\")\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n\n    'D': [64, 64, 'M', 128, 128, 'M', 256, 256, 256, 'M', 512, 512, 512, 'M', 512, 512, 512, 'M'],\n    \"\"\"", "\n", "\n", "layers", "=", "make_layers", "(", "cfg", "[", "'O'", "]", ",", "dilation", "=", "dilation", "[", "'D1'", "]", ")", "\n", "cnv", "=", "np", ".", "cumsum", "(", "cnvs", "[", "'O'", "]", ")", "\n", "model", "=", "VGG", "(", "layers", ",", "cnvs", "=", "cnv", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pre2local_keymap", "=", "[", "(", "'features.{}.weight'", ".", "format", "(", "i", ")", ",", "'conv1_2.{}.weight'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "pre2local_keymap", "+=", "[", "(", "'features.{}.bias'", ".", "format", "(", "i", ")", ",", "'conv1_2.{}.bias'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "pre2local_keymap", "+=", "[", "(", "'features.{}.weight'", ".", "format", "(", "i", "+", "10", ")", ",", "'conv3.{}.weight'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "pre2local_keymap", "+=", "[", "(", "'features.{}.bias'", ".", "format", "(", "i", "+", "10", ")", ",", "'conv3.{}.bias'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "pre2local_keymap", "+=", "[", "(", "'features.{}.weight'", ".", "format", "(", "i", "+", "17", ")", ",", "'conv4.{}.weight'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "pre2local_keymap", "+=", "[", "(", "'features.{}.bias'", ".", "format", "(", "i", "+", "17", ")", ",", "'conv4.{}.bias'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "pre2local_keymap", "+=", "[", "(", "'features.{}.weight'", ".", "format", "(", "i", "+", "24", ")", ",", "'conv5.{}.weight'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "pre2local_keymap", "+=", "[", "(", "'features.{}.bias'", ".", "format", "(", "i", "+", "24", ")", ",", "'conv5.{}.bias'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "7", ")", "]", "\n", "pre2local_keymap", "=", "dict", "(", "pre2local_keymap", ")", "\n", "\n", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_file", "=", "os", ".", "path", ".", "join", "(", "kwargs", "[", "'args'", "]", ".", "pretrained_model_dir", ",", "kwargs", "[", "'args'", "]", ".", "pretrained_model", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pretrained_file", ")", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained_file", ")", "\n", "print", "(", "'load pretrained model from {}'", ".", "format", "(", "pretrained_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'vgg16'", "]", ")", "\n", "print", "(", "'load pretrained model from {}'", ".", "format", "(", "model_urls", "[", "'vgg16'", "]", ")", ")", "\n", "# 0. replace the key", "\n", "", "pretrained_dict", "=", "{", "pre2local_keymap", "[", "k", "]", "if", "k", "in", "pre2local_keymap", ".", "keys", "(", ")", "else", "k", ":", "v", "for", "k", ",", "v", "in", "\n", "pretrained_dict", ".", "items", "(", ")", "}", "\n", "# *. show the loading information", "\n", "for", "k", "in", "pretrained_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "model_dict", ":", "\n", "                ", "print", "(", "'Key {} is removed from vgg16'", ".", "format", "(", "k", ")", ")", "\n", "", "", "print", "(", "' '", ")", "\n", "for", "k", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "pretrained_dict", ":", "\n", "                ", "print", "(", "'Key {} is new added for DA Net'", ".", "format", "(", "k", ")", ")", "\n", "# 1. filter out unnecessary keys", "\n", "", "", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "# 3. load the new state dict", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.val_cam.get_arguments": [[37, 69], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'DA'", ")", "\n", "parser", ".", "add_argument", "(", "\"--root_dir\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_dir\"", ",", "type", "=", "str", ",", "default", "=", "IMG_DIR", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_list\"", ",", "type", "=", "str", ",", "default", "=", "train_list", ")", "\n", "parser", ".", "add_argument", "(", "\"--cos_alpha\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_root_list\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_parent_list\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_list\"", ",", "type", "=", "str", ",", "default", "=", "test_list", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_box\"", ",", "type", "=", "str", ",", "default", "=", "testbox_list", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--input_size\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--crop_size\"", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "default", "=", "'cub'", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_classes\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "\"--arch\"", ",", "type", "=", "str", ",", "default", "=", "'vgg'", ")", "\n", "parser", ".", "add_argument", "(", "\"--threshold\"", ",", "type", "=", "str", ",", "default", "=", "'0.05,0.1,0.15,0.2,0.25,0.3'", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "LR", ")", "\n", "parser", ".", "add_argument", "(", "\"--decay_points\"", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "\n", "parser", ".", "add_argument", "(", "\"--epoch\"", ",", "type", "=", "int", ",", "default", "=", "EPOCH", ")", "\n", "parser", ".", "add_argument", "(", "\"--tencrop\"", ",", "type", "=", "str", ",", "default", "=", "'True'", ")", "\n", "parser", ".", "add_argument", "(", "\"--onehot\"", ",", "type", "=", "str", ",", "default", "=", "'False'", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_gpu\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_workers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--disp_interval\"", ",", "type", "=", "int", ",", "default", "=", "DISP_INTERVAL", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot_dir\"", ",", "type", "=", "str", ",", "default", "=", "SNAPSHOT_DIR", ")", "\n", "parser", ".", "add_argument", "(", "\"--resume\"", ",", "type", "=", "str", ",", "default", "=", "'True'", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore_from\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "\"--global_counter\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--current_epoch\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.val_cam.get_model": [[71, 80], ["eval().model", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.cuda", "range", "utils.restore.restore", "eval"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.model", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.restore.restore"], ["", "def", "get_model", "(", "args", ")", ":", "\n", "    ", "model", "=", "eval", "(", "args", ".", "arch", ")", ".", "model", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "range", "(", "args", ".", "num_gpu", ")", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "resume", "==", "'True'", ":", "\n", "        ", "restore", "(", "args", ",", "model", ",", "None", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.val_cam.val": [[82, 187], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "val_cam.get_model", "get_model.eval", "utils.loader.data_loader", "tqdm.tqdm", "numpy.concatenate", "print", "print", "map", "list", "open", "len", "len", "len", "len", "numpy.random.seed", "numpy.arange", "numpy.random.shuffle", "get_model.", "torch.softmax", "np.concatenate.append", "utils.evaluate.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "args.threshold.split", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "tqdm.tqdm", "print", "print", "print", "list", "len", "img.view.size", "img.view.view", "label_in.repeat", "label_in.repeat.view", "img.view.cuda", "label_input.view.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "logits0.view().mean.view().mean", "logits0.view().mean.cpu().data.numpy", "label_in.long", "prec1_1[].numpy", "prec5_1[].numpy", "enumerate", "get_model.", "get_model.module.get_cam_maps", "cam_map.cpu().data.numpy.cpu().data.numpy", "utils.localization.get_topk_boxes", "utils.evaluate.locerr", "utils.AverageMeter.update", "utils.AverageMeter.update", "map", "f.readlines", "logits0.view().mean.cpu", "img.view.size", "img.view.size", "img.view.cuda", "label_input.view.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "label_input.view.cpu().data.long().numpy", "logits0.view().mean.view", "img.view.size", "img.view.size", "utils.vistools.save_im_heatmap_box", "x.strip().split", "logits0.view().mean.cpu", "cam_map.cpu().data.numpy.cpu", "label_input.view.cpu().data.long", "label_input.view.cpu().data.long().numpy", "x.strip", "label_input.view.cpu", "label_input.view.cpu().data.long", "label_input.view.cpu"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.get_model", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.loader.data_loader", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.accuracy", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg.VGG.get_cam_maps", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.get_topk_boxes", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.locerr", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_im_heatmap_box"], ["", "def", "val", "(", "args", ")", ":", "\n", "\n", "    ", "with", "open", "(", "args", ".", "test_box", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "gt_boxes", "=", "[", "list", "(", "map", "(", "float", ",", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "2", ":", "]", ")", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "gt_boxes", "=", "[", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "0", "]", "+", "box", "[", "2", "]", "-", "1", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", "-", "1", ")", "for", "box", "in", "gt_boxes", "]", "\n", "\n", "# meters", "\n", "top1_clsacc", "=", "AverageMeter", "(", ")", "\n", "top1_locerr", "=", "AverageMeter", "(", ")", "\n", "top5_clsacc", "=", "AverageMeter", "(", ")", "\n", "top5_locerr", "=", "AverageMeter", "(", ")", "\n", "top1_clsacc", ".", "reset", "(", ")", "\n", "top1_locerr", ".", "reset", "(", ")", "\n", "top5_clsacc", ".", "reset", "(", ")", "\n", "top5_locerr", ".", "reset", "(", ")", "\n", "\n", "# get model", "\n", "model", "=", "get_model", "(", "args", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# get data", "\n", "_", ",", "valcls_loader", ",", "valloc_loader", "=", "data_loader", "(", "args", ",", "test_path", "=", "True", ")", "\n", "assert", "len", "(", "valcls_loader", ")", "==", "len", "(", "valloc_loader", ")", ",", "'Error! Different size for two dataset: loc({}), cls({})'", ".", "format", "(", "len", "(", "valloc_loader", ")", ",", "len", "(", "valcls_loader", ")", ")", "\n", "\n", "# testing", "\n", "VISLOC", "=", "True", "\n", "if", "VISLOC", ":", "\n", "# show_idxs = np.arange(20)", "\n", "        ", "np", ".", "random", ".", "seed", "(", "2333", ")", "\n", "show_idxs", "=", "np", ".", "arange", "(", "len", "(", "valcls_loader", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "show_idxs", ")", "\n", "show_idxs", "=", "show_idxs", "[", ":", "20", "]", "\n", "\n", "# evaluation classification task", "\n", "", "pred_prob", "=", "[", "]", "\n", "for", "dat", "in", "tqdm", "(", "valcls_loader", ")", ":", "\n", "# parse data", "\n", "        ", "img_path", ",", "img", ",", "label_in", "=", "dat", "\n", "if", "args", ".", "tencrop", "==", "'True'", ":", "\n", "            ", "bs", ",", "ncrops", ",", "c", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "\n", "img", "=", "img", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "label_input", "=", "label_in", ".", "repeat", "(", "10", ",", "1", ")", "\n", "label", "=", "label_input", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "label_in", "\n", "\n", "# forward pass", "\n", "", "img", ",", "label", "=", "img", ".", "cuda", "(", ")", ",", "label", ".", "cuda", "(", ")", "\n", "img_var", ",", "label_var", "=", "Variable", "(", "img", ")", ",", "Variable", "(", "label", ")", "\n", "logits", "=", "model", "(", "img_var", ")", "\n", "\n", "# get classification prob", "\n", "logits0", "=", "logits", "\n", "logits0", "=", "F", ".", "softmax", "(", "logits0", ",", "dim", "=", "1", ")", "\n", "if", "args", ".", "tencrop", "==", "'True'", ":", "\n", "            ", "logits0", "=", "logits0", ".", "view", "(", "1", ",", "ncrops", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "", "pred_prob", ".", "append", "(", "logits0", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "\n", "# update result record", "\n", "prec1_1", ",", "prec5_1", "=", "evaluate", ".", "accuracy", "(", "logits0", ".", "cpu", "(", ")", ".", "data", ",", "label_in", ".", "long", "(", ")", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1_clsacc", ".", "update", "(", "prec1_1", "[", "0", "]", ".", "numpy", "(", ")", ",", "img", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "top5_clsacc", ".", "update", "(", "prec5_1", "[", "0", "]", ".", "numpy", "(", ")", ",", "img", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "", "pred_prob", "=", "np", ".", "concatenate", "(", "pred_prob", ",", "axis", "=", "0", ")", "\n", "# with open('pred_prob.pkl', 'w') as f:", "\n", "#     cPickle.dump(pred_prob, f)", "\n", "print", "(", "'== cls err'", ")", "\n", "print", "(", "'Top1: {:.2f} Top5: {:.2f}\\n'", ".", "format", "(", "100.0", "-", "top1_clsacc", ".", "avg", ",", "100.0", "-", "top5_clsacc", ".", "avg", ")", ")", "\n", "\n", "# with open('pred_prob.pkl', 'r') as f:", "\n", "#     pred_prob = cPickle.load(f)", "\n", "# evaluation localization task", "\n", "thresholds", "=", "map", "(", "float", ",", "args", ".", "threshold", ".", "split", "(", "','", ")", ")", "\n", "thresholds", "=", "list", "(", "thresholds", ")", "\n", "for", "th", "in", "thresholds", ":", "\n", "        ", "top1_locerr", ".", "reset", "(", ")", "\n", "top5_locerr", ".", "reset", "(", ")", "\n", "for", "idx", ",", "dat", "in", "tqdm", "(", "enumerate", "(", "valloc_loader", ")", ")", ":", "\n", "# parse data", "\n", "            ", "img_path", ",", "img", ",", "label", "=", "dat", "\n", "\n", "# forward pass", "\n", "img", ",", "label", "=", "img", ".", "cuda", "(", ")", ",", "label", ".", "cuda", "(", ")", "\n", "img_var", ",", "label_var", "=", "Variable", "(", "img", ")", ",", "Variable", "(", "label", ")", "\n", "logits", "=", "model", "(", "img_var", ")", "\n", "\n", "# get localization boxes", "\n", "cam_map", "=", "model", ".", "module", ".", "get_cam_maps", "(", ")", "# not normalized", "\n", "cam_map", "=", "cam_map", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "top_boxes", ",", "top_maps", "=", "get_topk_boxes", "(", "pred_prob", "[", "idx", ",", ":", "]", ",", "cam_map", ",", "img_path", "[", "0", "]", ",", "args", ".", "input_size", ",", "\n", "args", ".", "crop_size", ",", "topk", "=", "(", "1", ",", "5", ")", ",", "threshold", "=", "th", ",", "mode", "=", "'union'", ")", "\n", "top1_box", ",", "top5_boxes", "=", "top_boxes", "\n", "\n", "# update result record", "\n", "locerr_1", ",", "locerr_5", "=", "evaluate", ".", "locerr", "(", "(", "top1_box", ",", "top5_boxes", ")", ",", "label", ".", "cpu", "(", ")", ".", "data", ".", "long", "(", ")", ".", "numpy", "(", ")", ",", "gt_boxes", "[", "idx", "]", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1_locerr", ".", "update", "(", "locerr_1", ",", "img", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "top5_locerr", ".", "update", "(", "locerr_5", ",", "img", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "if", "VISLOC", ":", "\n", "                ", "if", "idx", "in", "show_idxs", ":", "\n", "                    ", "save_im_heatmap_box", "(", "img_path", "[", "0", "]", ",", "top_maps", ",", "top5_boxes", ",", "'../figs/'", ",", "gt_label", "=", "label", ".", "cpu", "(", ")", ".", "data", ".", "long", "(", ")", ".", "numpy", "(", ")", ",", "\n", "gt_box", "=", "gt_boxes", "[", "idx", "]", ")", "\n", "", "", "", "print", "(", "'=========== threshold: {} ==========='", ".", "format", "(", "th", ")", ")", "\n", "print", "(", "'== loc err'", ")", "\n", "print", "(", "'Top1: {:.2f} Top5: {:.2f}\\n'", ".", "format", "(", "top1_locerr", ".", "avg", ",", "top5_locerr", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.val_spa.opts.__init__": [[30, 82], ["argparse.ArgumentParser", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument", "val_spa.opts.parser.add_argument"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'CVPR2021-SPA'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--root_dir\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--img_dir\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--test_list\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--test_box\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--input_size\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--crop_size\"", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "default", "=", "'imagenet'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--num_classes\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--arch\"", ",", "type", "=", "str", ",", "default", "=", "'vgg_v0'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--threshold\"", ",", "type", "=", "str", ",", "default", "=", "'0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "LR", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--decay_points\"", ",", "type", "=", "str", ",", "default", "=", "'none'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--epoch\"", ",", "type", "=", "int", ",", "default", "=", "EPOCH", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--tencrop\"", ",", "type", "=", "str", ",", "default", "=", "'True'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--onehot\"", ",", "type", "=", "str", ",", "default", "=", "'False'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--gpus\"", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'-1 for cpu, split gpu id by comma'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--num_workers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--disp_interval\"", ",", "type", "=", "int", ",", "default", "=", "DISP_INTERVAL", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--snapshot_dir\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--resume\"", ",", "type", "=", "str", ",", "default", "=", "'True'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--restore_from\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--global_counter\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--current_epoch\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "'store_true'", ",", "help", "=", "'.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--debug_detail\"", ",", "action", "=", "'store_true'", ",", "help", "=", "'.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vis_feat\"", ",", "action", "=", "'store_true'", ",", "help", "=", "'.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vis_var\"", ",", "action", "=", "'store_true'", ",", "help", "=", "'.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--debug_dir\"", ",", "type", "=", "str", ",", "default", "=", "'../debug'", ",", "help", "=", "'save visualization results.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vis_dir\"", ",", "type", "=", "str", ",", "default", "=", "'../vis_dir'", ",", "help", "=", "'save visualization results.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--scg\"", ",", "action", "=", "'store_true'", ",", "help", "=", "'switch on the self-correlation generating module.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--scg_blocks\"", ",", "type", "=", "str", ",", "default", "=", "'2,3,4,5'", ",", "help", "=", "'2 for feat2, etc.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--scg_com\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'switch on using both first-order and high-order self-correlation.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--scg_fo\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'switch on using first-order self-correlation only.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--scg_fosc_th\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'the suppress threshold for first-order self-correlation.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--scg_sosc_th\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'the suppress threshold for second-order self-correlation.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--scg_order\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'the order of similarity of HSC.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--scg_so_weight\"", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'the weight for second order affinity matrix.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--scg_fg_th\"", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'the threshold for the object in scg module.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--scg_bg_th\"", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'the threshold for the background in scg module.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--iou_th\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'the threshold for iou.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.val_spa.opts.parse": [[83, 90], ["val_spa.opts.parser.parse_args", "list", "list", "map", "map", "val_spa.opts.gpus.split", "val_spa.opts.threshold.split", "range", "len"], "methods", ["None"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "gpus_str", "=", "opt", ".", "gpus", "\n", "opt", ".", "gpus", "=", "list", "(", "map", "(", "int", ",", "opt", ".", "gpus", ".", "split", "(", "','", ")", ")", ")", "\n", "opt", ".", "gpus", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "gpus", ")", ")", "]", "if", "opt", ".", "gpus", "[", "0", "]", ">=", "0", "else", "[", "-", "1", "]", "\n", "opt", ".", "threshold", "=", "list", "(", "map", "(", "float", ",", "opt", ".", "threshold", ".", "split", "(", "','", ")", ")", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.val_spa.get_model": [[91, 101], ["eval().model", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.cuda", "utils.restore.restore", "eval"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.model", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.restore.restore"], ["", "", "def", "get_model", "(", "args", ")", ":", "\n", "    ", "model", "=", "eval", "(", "args", ".", "arch", ")", ".", "model", "(", "num_classes", "=", "args", ".", "num_classes", ",", "args", "=", "args", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "args", ".", "gpus", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "resume", "==", "'True'", ":", "\n", "        ", "restore", "(", "args", ",", "model", ",", "None", ",", "istrain", "=", "False", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.val_spa.eval_loc": [[102, 115], ["utils.localization.get_topk_boxes_hier", "utils.evaluate.locerr", "utils.evaluate.locerr", "label.data.long().numpy", "label.data.long().numpy", "label.data.long", "label.data.long"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.get_scm_map.get_topk_boxes_hier", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.locerr", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.locerr"], ["", "def", "eval_loc", "(", "cls_logits", ",", "cls_map", ",", "img_path", ",", "label", ",", "gt_boxes", ",", "topk", "=", "(", "1", ",", "5", ")", ",", "threshold", "=", "None", ",", "mode", "=", "'union'", ",", "iou_th", "=", "0.5", ")", ":", "\n", "    ", "top_boxes", ",", "top_maps", ",", "gt_known_box", ",", "gt_known_map", "=", "get_topk_boxes_hier", "(", "cls_logits", "[", "0", "]", ",", "cls_map", ",", "img_path", ",", "\n", "label", ",", "topk", "=", "topk", ",", "threshold", "=", "threshold", ",", "\n", "mode", "=", "mode", ")", "\n", "top1_box", ",", "top5_boxes", "=", "top_boxes", "\n", "\n", "# update result record", "\n", "(", "locerr_1", ",", "locerr_5", ")", ",", "top1_wrong_detail", "=", "evaluate", ".", "locerr", "(", "(", "top1_box", ",", "top5_boxes", ")", ",", "label", ".", "data", ".", "long", "(", ")", ".", "numpy", "(", ")", ",", "gt_boxes", ",", "\n", "topk", "=", "(", "1", ",", "5", ")", ",", "iou_th", "=", "iou_th", ")", "\n", "locerr_gt_known", ",", "_", "=", "evaluate", ".", "locerr", "(", "(", "gt_known_box", ",", ")", ",", "label", ".", "data", ".", "long", "(", ")", ".", "numpy", "(", ")", ",", "gt_boxes", ",", "topk", "=", "(", "1", ",", ")", ",", "iou_th", "=", "iou_th", ")", "\n", "\n", "\n", "return", "locerr_1", ",", "locerr_5", ",", "locerr_gt_known", "[", "0", "]", ",", "top_maps", ",", "top5_boxes", ",", "gt_known_map", ",", "top1_wrong_detail", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.val_spa.eval_loc_scg": [[116, 135], ["utils.localization.get_topk_boxes_hier_scg", "utils.evaluate.locerr", "utils.localization.get_topk_boxes_hier_scg", "utils.evaluate.locerr", "label.data.long().numpy", "label.data.long().numpy", "label.data.long", "label.data.long"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.get_topk_boxes_hier_scg", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.locerr", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.localization.get_topk_boxes_hier_scg", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.locerr"], ["", "def", "eval_loc_scg", "(", "cls_logits", ",", "top_cams", ",", "gt_known_cams", ",", "aff_maps", ",", "img_path", ",", "label", ",", "gt_boxes", ",", "\n", "topk", "=", "(", "1", ",", "5", ")", ",", "threshold", "=", "None", ",", "mode", "=", "'union'", ",", "fg_th", "=", "0.1", ",", "bg_th", "=", "0.01", ",", "iou_th", "=", "0.5", ",", "sc_maps_fo", "=", "None", ")", ":", "\n", "    ", "top_boxes", ",", "top_maps", "=", "get_topk_boxes_hier_scg", "(", "cls_logits", "[", "0", "]", ",", "top_cams", ",", "aff_maps", ",", "img_path", ",", "topk", "=", "topk", ",", "\n", "threshold", "=", "threshold", ",", "mode", "=", "mode", ",", "fg_th", "=", "fg_th", ",", "bg_th", "=", "bg_th", ",", "\n", "sc_maps_fo", "=", "sc_maps_fo", ")", "\n", "top1_box", ",", "top5_boxes", "=", "top_boxes", "\n", "\n", "# update result record", "\n", "(", "locerr_1", ",", "locerr_5", ")", ",", "top1_wrong_detail", "=", "evaluate", ".", "locerr", "(", "(", "top1_box", ",", "top5_boxes", ")", ",", "label", ".", "data", ".", "long", "(", ")", ".", "numpy", "(", ")", ",", "gt_boxes", ",", "\n", "topk", "=", "(", "1", ",", "5", ")", ",", "iou_th", "=", "iou_th", ")", "\n", "\n", "gt_known_boxes", ",", "gt_known_maps", "=", "get_topk_boxes_hier_scg", "(", "cls_logits", "[", "0", "]", ",", "gt_known_cams", ",", "aff_maps", ",", "img_path", ",", "topk", "=", "(", "1", ",", ")", ",", "\n", "threshold", "=", "threshold", ",", "mode", "=", "mode", ",", "gt_labels", "=", "label", ",", "fg_th", "=", "fg_th", ",", "\n", "bg_th", "=", "bg_th", ",", "sc_maps_fo", "=", "sc_maps_fo", ")", "\n", "\n", "# update result record", "\n", "locerr_gt_known", ",", "_", "=", "evaluate", ".", "locerr", "(", "gt_known_boxes", ",", "label", ".", "data", ".", "long", "(", ")", ".", "numpy", "(", ")", ",", "gt_boxes", ",", "topk", "=", "(", "1", ",", ")", ",", "iou_th", "=", "iou_th", ")", "\n", "\n", "return", "locerr_1", ",", "locerr_5", ",", "locerr_gt_known", "[", "0", "]", ",", "top_maps", ",", "top5_boxes", ",", "top1_wrong_detail", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.val_spa.val": [[140, 419], ["print", "print", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "val_spa.get_model", "get_model.eval", "utils.loader.data_loader", "tqdm.tqdm", "print", "print", "os.path.join", "json.dumps", "os.path.exists", "os.mkdir", "utils.AverageMeter", "loc_err[].reset", "utils.AverageMeter", "loc_err[].reset", "utils.AverageMeter", "loc_err[].reset", "len", "len", "len", "len", "numpy.random.seed", "numpy.arange", "numpy.random.shuffle", "enumerate", "img.view.to", "print", "print", "print", "print", "print", "print", "args.debug_dir.split", "open", "fw.write", "fw.write", "vars", "open", "f.readlines", "print", "utils.AverageMeter", "loc_err[].reset", "utils.AverageMeter", "loc_err[].reset", "utils.AverageMeter", "loc_err[].reset", "utils.AverageMeter", "loc_err[].reset", "len", "zip", "img.view.size", "img.view.view", "torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "get_model.", "torch.mean", "torch.mean", "torch.softmax", "utils.evaluate.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "torch.no_grad", "torch.no_grad", "get_model.", "torch.relu", "val_spa.eval_loc", "loc_err[].update", "loc_err[].update", "loc_err[].update", "loc_err[].update", "loc_err[].update", "loc_err[].update", "loc_err[].update", "loc_err[].update", "loc_err[].update", "print", "print", "print", "fw.write", "fw.write", "fw.write", "fw.write", "fw.write", "fw.write", "x.strip().split.strip().split", "open", "utils.AverageMeter", "loc_err[].reset", "get_model.", "utils.vistools.vis_feature", "utils.vistools.vis_feature", "utils.vistools.vis_feature", "get_model.", "torch.softmax", "torch.var().squeeze", "torch.var().squeeze", "utils.vistools.vis_var", "torch.mean", "torch.mean", "cls_logits.view().mean.view().mean", "label_in.long", "prec1_1[].numpy", "prec5_1[].numpy", "utils.vistools.save_im_heatmap_box", "val_spa.eval_loc_scg", "loc_err[].update", "loc_err[].update", "loc_err[].update", "loc_err[].update", "loc_err[].update", "loc_err[].update", "loc_err[].update", "loc_err[].update", "loc_err[].update", "fw.write", "fw.write", "fw.write", "gt_boxes.append", "img_name.append", "print", "list", "cls_logits.view().mean.cpu", "img.view.size", "img.view.size", "img_loc.size", "img_loc.size", "img_loc.size", "img_loc.size", "img_loc.size", "img_loc.size", "img_loc.size", "img_loc.size", "img_loc.size", "os.path.join", "zip", "utils.vistools.save_im_heatmap_box", "utils.vistools.save_im_sim", "utils.vistools.save_im_sim", "utils.vistools.save_im_sim", "utils.vistools.save_sim_heatmap_box", "x.strip().split.strip", "len", "list", "os.path.join", "map", "f.readlines", "torch.var", "torch.var", "cls_logits.view().mean.view", "label.data.long().numpy", "img_loc.size", "img_loc.size", "img_loc.size", "img_loc.size", "img_loc.size", "img_loc.size", "img_loc.size", "img_loc.size", "img_loc.size", "os.path.join", "map", "x[].replace", "label.long", "torch.max", "torch.max", "sc_maps.append", "label.data.long().numpy", "label.data.long().numpy", "label.data.long().numpy", "label.data.long().numpy", "label.data.long().numpy", "x.strip().split.strip().split", "label.data.long", "torch.sum", "torch.sum", "label.data.long", "label.data.long", "label.data.long", "label.data.long", "label.data.long", "x.strip().split.strip"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.get_model", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.loader.data_loader", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.accuracy", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.val_spa.eval_loc", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.vis_feature", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.vis_feature", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.vis_feature", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.vis_var", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_im_heatmap_box", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.val_spa.eval_loc_scg", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_im_heatmap_box", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_im_sim", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_im_sim", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_im_sim", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.vistools.save_sim_heatmap_box"], ["", "def", "val", "(", "args", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpus_str", "\n", "\n", "print", "(", "'Running parameters:\\n'", ")", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "args", ")", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "snapshot_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "snapshot_dir", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'ilsvrc'", ":", "\n", "        ", "gt_boxes", "=", "[", "]", "\n", "img_name", "=", "[", "]", "\n", "with", "open", "(", "args", ".", "test_box", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "x", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "x", "=", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "x", "[", "1", ":", "]", ")", "%", "4", "==", "0", ":", "\n", "                    ", "gt_boxes", ".", "append", "(", "list", "(", "map", "(", "float", ",", "x", "[", "1", ":", "]", ")", ")", ")", "\n", "img_name", ".", "append", "(", "os", ".", "path", ".", "join", "(", "args", ".", "img_dir", ",", "x", "[", "0", "]", ".", "replace", "(", "'.xml'", ",", "'.JPEG'", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'Wrong gt bboxes.'", ")", "\n", "", "", "", "", "elif", "args", ".", "dataset", "==", "'cub'", ":", "\n", "        ", "with", "open", "(", "args", ".", "test_box", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "gt_boxes", "=", "[", "list", "(", "map", "(", "float", ",", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "2", ":", "]", ")", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "gt_boxes", "=", "[", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "0", "]", "+", "box", "[", "2", "]", "-", "1", ",", "box", "[", "1", "]", "+", "box", "[", "3", "]", "-", "1", ")", "for", "box", "in", "gt_boxes", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Wrong dataset.'", ")", "\n", "# meters", "\n", "", "top1_clsacc", "=", "AverageMeter", "(", ")", "\n", "top5_clsacc", "=", "AverageMeter", "(", ")", "\n", "top1_clsacc", ".", "reset", "(", ")", "\n", "top5_clsacc", ".", "reset", "(", ")", "\n", "\n", "loc_err", "=", "{", "}", "\n", "for", "th", "in", "args", ".", "threshold", ":", "\n", "        ", "loc_err", "[", "'top1_locerr_{}'", ".", "format", "(", "th", ")", "]", "=", "AverageMeter", "(", ")", "\n", "loc_err", "[", "'top1_locerr_{}'", ".", "format", "(", "th", ")", "]", ".", "reset", "(", ")", "\n", "loc_err", "[", "'top5_locerr_{}'", ".", "format", "(", "th", ")", "]", "=", "AverageMeter", "(", ")", "\n", "loc_err", "[", "'top5_locerr_{}'", ".", "format", "(", "th", ")", "]", ".", "reset", "(", ")", "\n", "loc_err", "[", "'gt_known_locerr_{}'", ".", "format", "(", "th", ")", "]", "=", "AverageMeter", "(", ")", "\n", "loc_err", "[", "'gt_known_locerr_{}'", ".", "format", "(", "th", ")", "]", ".", "reset", "(", ")", "\n", "for", "err", "in", "[", "'right'", ",", "'cls_wrong'", ",", "'mins_wrong'", ",", "'part_wrong'", ",", "'more_wrong'", ",", "'other'", "]", ":", "\n", "            ", "loc_err", "[", "'top1_locerr_{}_{}'", ".", "format", "(", "err", ",", "th", ")", "]", "=", "AverageMeter", "(", ")", "\n", "loc_err", "[", "'top1_locerr_{}_{}'", ".", "format", "(", "err", ",", "th", ")", "]", ".", "reset", "(", ")", "\n", "", "if", "args", ".", "scg", ":", "\n", "            ", "loc_err", "[", "'top1_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", "=", "AverageMeter", "(", ")", "\n", "loc_err", "[", "'top1_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", ".", "reset", "(", ")", "\n", "loc_err", "[", "'top5_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", "=", "AverageMeter", "(", ")", "\n", "loc_err", "[", "'top5_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", ".", "reset", "(", ")", "\n", "loc_err", "[", "'gt_known_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", "=", "AverageMeter", "(", ")", "\n", "loc_err", "[", "'gt_known_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", ".", "reset", "(", ")", "\n", "for", "err", "in", "[", "'right'", ",", "'cls_wrong'", ",", "'mins_wrong'", ",", "'part_wrong'", ",", "'more_wrong'", ",", "'other'", "]", ":", "\n", "                ", "loc_err", "[", "'top1_locerr_scg_{}_{}'", ".", "format", "(", "err", ",", "th", ")", "]", "=", "AverageMeter", "(", ")", "\n", "loc_err", "[", "'top1_locerr_scg_{}_{}'", ".", "format", "(", "err", ",", "th", ")", "]", ".", "reset", "(", ")", "\n", "# get model", "\n", "", "", "", "model", "=", "get_model", "(", "args", ")", "\n", "model", ".", "eval", "(", ")", "\n", "# get data", "\n", "valcls_loader", ",", "valloc_loader", "=", "data_loader", "(", "args", ",", "test_path", "=", "True", ",", "train", "=", "False", ")", "\n", "assert", "len", "(", "valcls_loader", ")", "==", "len", "(", "valloc_loader", ")", ",", "'Error! Different size for two dataset: loc({}), cls({})'", ".", "format", "(", "len", "(", "valloc_loader", ")", ",", "len", "(", "valcls_loader", ")", ")", "\n", "\n", "# testing", "\n", "if", "args", ".", "debug", ":", "\n", "# show_idxs = np.arange(20)", "\n", "        ", "np", ".", "random", ".", "seed", "(", "2333", ")", "\n", "show_idxs", "=", "np", ".", "arange", "(", "len", "(", "valcls_loader", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "show_idxs", ")", "\n", "show_idxs", "=", "show_idxs", "[", ":", "]", "\n", "\n", "# evaluation classification task", "\n", "\n", "", "for", "idx", ",", "(", "dat_cls", ",", "dat_loc", ")", "in", "tqdm", "(", "enumerate", "(", "zip", "(", "valcls_loader", ",", "valloc_loader", ")", ")", ")", ":", "\n", "# parse data", "\n", "        ", "img_path", ",", "img", ",", "label_in", "=", "dat_cls", "\n", "if", "args", ".", "tencrop", "==", "'True'", ":", "\n", "            ", "bs", ",", "ncrops", ",", "c", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "\n", "img", "=", "img", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "# forward pass", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "if", "args", ".", "gpus", "[", "0", "]", ">=", "0", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "img", "=", "img", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "if", "args", ".", "vis_feat", ":", "\n", "            ", "if", "idx", "in", "show_idxs", ":", "\n", "                ", "_", ",", "img_loc", ",", "label", "=", "dat_loc", "\n", "_", "=", "model", "(", "img_loc", ")", "\n", "vis_feature", "(", "model", ".", "module", ".", "feat4", ",", "img_path", "[", "0", "]", ",", "args", ".", "vis_dir", ",", "layer", "=", "'feat4'", ")", "\n", "vis_feature", "(", "model", ".", "module", ".", "feat5", ",", "img_path", "[", "0", "]", ",", "args", ".", "vis_dir", ",", "layer", "=", "'feat5'", ")", "\n", "vis_feature", "(", "model", ".", "module", ".", "cls_map", ",", "img_path", "[", "0", "]", ",", "args", ".", "vis_dir", ",", "layer", "=", "'cls_map'", ")", "\n", "", "continue", "\n", "", "if", "args", ".", "vis_var", ":", "\n", "            ", "if", "idx", "in", "show_idxs", ":", "\n", "                ", "_", ",", "img_loc", ",", "label", "=", "dat_loc", "\n", "logits", ",", "_", ",", "_", ",", "_", ",", "_", "=", "model", "(", "img_loc", ")", "\n", "cls_logits", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "var_logits", "=", "torch", ".", "var", "(", "cls_logits", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "logits_cls", "=", "logits", "[", "0", ",", "label", ".", "long", "(", ")", ",", "...", "]", "\n", "vis_var", "(", "var_logits", ",", "logits_cls", ",", "img_path", "[", "0", "]", ",", "args", ".", "vis_dir", ",", "net", "=", "'vgg_s10_loc_.4_.7_fpn_l4_var_cls'", ")", "\n", "", "continue", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ")", "\n", "cls_logits", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "logits", ",", "dim", "=", "2", ")", ",", "dim", "=", "2", ")", "\n", "cls_logits", "=", "F", ".", "softmax", "(", "cls_logits", ",", "dim", "=", "1", ")", "\n", "if", "args", ".", "tencrop", "==", "'True'", ":", "\n", "                ", "cls_logits", "=", "cls_logits", ".", "view", "(", "1", ",", "ncrops", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n", "", "prec1_1", ",", "prec5_1", "=", "evaluate", ".", "accuracy", "(", "cls_logits", ".", "cpu", "(", ")", ".", "data", ",", "label_in", ".", "long", "(", ")", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1_clsacc", ".", "update", "(", "prec1_1", "[", "0", "]", ".", "numpy", "(", ")", ",", "img", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "top5_clsacc", ".", "update", "(", "prec5_1", "[", "0", "]", ".", "numpy", "(", ")", ",", "img", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "\n", "\n", "", "_", ",", "img_loc", ",", "label", "=", "dat_loc", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", ",", "sc_maps_fo", ",", "sc_maps_so", "=", "model", "(", "img_loc", ",", "scg_flag", "=", "args", ".", "scg", ")", "\n", "loc_map", "=", "F", ".", "relu", "(", "logits", ")", "\n", "\n", "", "for", "th", "in", "args", ".", "threshold", ":", "\n", "            ", "locerr_1", ",", "locerr_5", ",", "gt_known_locerr", ",", "top_maps", ",", "top5_boxes", ",", "gt_known_maps", ",", "top1_wrong_detail", "=", "eval_loc", "(", "cls_logits", ",", "loc_map", ",", "img_path", "[", "0", "]", ",", "label", ",", "gt_boxes", "[", "idx", "]", ",", "topk", "=", "(", "1", ",", "5", ")", ",", "threshold", "=", "th", ",", "\n", "mode", "=", "'union'", ",", "iou_th", "=", "args", ".", "iou_th", ")", "\n", "loc_err", "[", "'top1_locerr_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "locerr_1", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'top5_locerr_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "locerr_5", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'gt_known_locerr_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "gt_known_locerr", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "cls_wrong", ",", "multi_instances", ",", "region_part", ",", "region_more", ",", "region_wrong", "=", "top1_wrong_detail", "\n", "right", "=", "1", "-", "(", "cls_wrong", "+", "multi_instances", "+", "region_part", "+", "region_more", "+", "region_wrong", ")", "\n", "loc_err", "[", "'top1_locerr_right_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "right", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'top1_locerr_cls_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "cls_wrong", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'top1_locerr_mins_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "multi_instances", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'top1_locerr_part_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "region_part", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'top1_locerr_more_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "region_more", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'top1_locerr_other_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "region_wrong", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "if", "args", ".", "debug", "and", "idx", "in", "show_idxs", "and", "(", "th", "==", "args", ".", "threshold", "[", "0", "]", ")", ":", "\n", "                ", "top1_wrong_detail_dir", "=", "'cls_{}-mins_{}-rpart_{}-rmore_{}-rwrong_{}'", ".", "format", "(", "cls_wrong", ",", "\n", "multi_instances", ",", "\n", "region_part", ",", "\n", "region_more", ",", "\n", "region_wrong", ")", "\n", "debug_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "debug_dir", ",", "top1_wrong_detail_dir", ")", "if", "args", ".", "debug_detail", "else", "args", ".", "debug_dir", "\n", "save_im_heatmap_box", "(", "img_path", "[", "0", "]", ",", "top_maps", ",", "top5_boxes", ",", "debug_dir", ",", "\n", "gt_label", "=", "label", ".", "data", ".", "long", "(", ")", ".", "numpy", "(", ")", ",", "gt_box", "=", "gt_boxes", "[", "idx", "]", ",", "\n", "epoch", "=", "args", ".", "current_epoch", ",", "threshold", "=", "th", ")", "\n", "\n", "", "if", "args", ".", "scg", ":", "\n", "                ", "sc_maps", "=", "[", "]", "\n", "if", "args", ".", "scg_com", ":", "\n", "                    ", "for", "sc_map_fo_i", ",", "sc_map_so_i", "in", "zip", "(", "sc_maps_fo", ",", "sc_maps_so", ")", ":", "\n", "                        ", "if", "(", "sc_map_fo_i", "is", "not", "None", ")", "and", "(", "sc_map_so_i", "is", "not", "None", ")", ":", "\n", "                            ", "sc_map_i", "=", "torch", ".", "max", "(", "sc_map_fo_i", ",", "args", ".", "scg_so_weight", "*", "sc_map_so_i", ")", "\n", "sc_map_i", "=", "sc_map_i", "/", "(", "torch", ".", "sum", "(", "sc_map_i", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-10", ")", "\n", "sc_maps", ".", "append", "(", "sc_map_i", ")", "\n", "", "", "", "elif", "args", ".", "scg_fo", ":", "\n", "                    ", "sc_maps", "=", "sc_maps_fo", "\n", "", "else", ":", "\n", "                    ", "sc_maps", "=", "sc_maps_so", "\n", "", "locerr_1_scg", ",", "locerr_5_scg", ",", "gt_known_locerr_scg", ",", "top_maps_scg", ",", "top5_boxes_scg", ",", "top1_wrong_detail_scg", "=", "eval_loc_scg", "(", "cls_logits", ",", "top_maps", ",", "gt_known_maps", ",", "sc_maps", "[", "-", "1", "]", "+", "sc_maps", "[", "-", "2", "]", ",", "img_path", "[", "0", "]", ",", "label", ",", "\n", "gt_boxes", "[", "idx", "]", ",", "topk", "=", "(", "1", ",", "5", ")", ",", "threshold", "=", "th", ",", "mode", "=", "'union'", ",", "\n", "fg_th", "=", "args", ".", "scg_fg_th", ",", "bg_th", "=", "args", ".", "scg_bg_th", ",", "iou_th", "=", "args", ".", "iou_th", ",", "\n", "sc_maps_fo", "=", "None", ")", "\n", "loc_err", "[", "'top1_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "locerr_1_scg", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'top5_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "locerr_5_scg", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'gt_known_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "gt_known_locerr_scg", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "cls_wrong_scg", ",", "multi_instances_scg", ",", "region_part_scg", ",", "region_more_scg", ",", "region_wrong_scg", "=", "top1_wrong_detail_scg", "\n", "right_scg", "=", "1", "-", "(", "cls_wrong_scg", "+", "multi_instances_scg", "+", "region_part_scg", "+", "region_more_scg", "+", "region_wrong_scg", ")", "\n", "loc_err", "[", "'top1_locerr_scg_right_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "right_scg", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'top1_locerr_scg_cls_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "cls_wrong_scg", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'top1_locerr_scg_mins_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "multi_instances_scg", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'top1_locerr_scg_part_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "region_part_scg", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'top1_locerr_scg_more_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "region_more_scg", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "loc_err", "[", "'top1_locerr_scg_other_{}'", ".", "format", "(", "th", ")", "]", ".", "update", "(", "region_wrong_scg", ",", "img_loc", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "if", "args", ".", "debug", "and", "idx", "in", "show_idxs", "and", "(", "th", "==", "args", ".", "threshold", "[", "0", "]", ")", ":", "\n", "                    ", "top1_wrong_detail_dir", "=", "'cls_{}-mins_{}-rpart_{}-rmore_{}-rwrong_{}_scg'", ".", "format", "(", "cls_wrong_scg", ",", "\n", "multi_instances_scg", ",", "\n", "region_part_scg", ",", "\n", "region_more_scg", ",", "\n", "region_wrong_scg", ")", "\n", "debug_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "debug_dir", ",", "\n", "top1_wrong_detail_dir", ")", "if", "args", ".", "debug_detail", "else", "args", ".", "debug_dir", "\n", "save_im_heatmap_box", "(", "img_path", "[", "0", "]", ",", "top_maps_scg", ",", "top5_boxes_scg", ",", "debug_dir", ",", "\n", "gt_label", "=", "label", ".", "data", ".", "long", "(", ")", ".", "numpy", "(", ")", ",", "gt_box", "=", "gt_boxes", "[", "idx", "]", ",", "\n", "epoch", "=", "args", ".", "current_epoch", ",", "threshold", "=", "th", ",", "suffix", "=", "'scg'", ")", "\n", "\n", "save_im_sim", "(", "img_path", "[", "0", "]", ",", "sc_maps_fo", ",", "debug_dir", ",", "gt_label", "=", "label", ".", "data", ".", "long", "(", ")", ".", "numpy", "(", ")", ",", "\n", "epoch", "=", "args", ".", "current_epoch", ",", "suffix", "=", "'fo'", ")", "\n", "save_im_sim", "(", "img_path", "[", "0", "]", ",", "sc_maps_so", ",", "debug_dir", ",", "gt_label", "=", "label", ".", "data", ".", "long", "(", ")", ".", "numpy", "(", ")", ",", "\n", "epoch", "=", "args", ".", "current_epoch", ",", "suffix", "=", "'so'", ")", "\n", "save_im_sim", "(", "img_path", "[", "0", "]", ",", "sc_maps_fo", "[", "-", "2", "]", "+", "sc_maps_fo", "[", "-", "1", "]", ",", "debug_dir", ",", "gt_label", "=", "label", ".", "data", ".", "long", "(", ")", ".", "numpy", "(", ")", ",", "\n", "epoch", "=", "args", ".", "current_epoch", ",", "suffix", "=", "'fo_45'", ")", "\n", "# save_im_sim(img_path[0], aff_maps_so[-2] + aff_maps_so[-1], debug_dir,", "\n", "#             gt_label=label.data.long().numpy(),", "\n", "#             epoch=args.current_epoch, suffix='so_45')", "\n", "# # save_im_sim(img_path[0], aff_maps, debug_dir, gt_label=label.data.long().numpy(),", "\n", "# #             epoch=args.current_epoch, suffix='com')", "\n", "save_sim_heatmap_box", "(", "img_path", "[", "0", "]", ",", "top_maps", ",", "debug_dir", ",", "gt_label", "=", "label", ".", "data", ".", "long", "(", ")", ".", "numpy", "(", ")", ",", "\n", "sim_map", "=", "sc_maps_fo", "[", "-", "2", "]", "+", "sc_maps_fo", "[", "-", "1", "]", ",", "epoch", "=", "args", ".", "current_epoch", ",", "threshold", "=", "th", ",", "\n", "suffix", "=", "'aff_fo_f45_cam'", ",", "fg_th", "=", "args", ".", "scg_fg_th", ",", "bg_th", "=", "args", ".", "scg_bg_th", ")", "\n", "# save_sim_heatmap_box(img_path[0], top_maps, debug_dir, gt_label=label.data.long().numpy(),", "\n", "#                      sim_map=aff_maps_so[-2] + aff_maps_so[-1], epoch=args.current_epoch, threshold=th,", "\n", "#                      suffix='aff_so_f5_cam', fg_th=args.scg_fg_th, bg_th=args.scg_bg_th)", "\n", "# save_sim_heatmap_box(img_path[0], df_top_maps, debug_dir, gt_label=label.data.long().numpy(),", "\n", "#                      sim_map=aff_maps_so[-2], epoch=args.current_epoch, threshold=th,", "\n", "#                      suffix='aff_so_f4_cam',fg_th=args.nl_fg_th, bg_th=args.nl_bg_th)", "\n", "# save_sim_heatmap_box(img_path[0], df_top_maps, debug_dir, gt_label=label.data.long().numpy(),", "\n", "#                      sim_map=aff_maps_so[-1], epoch=args.current_epoch, threshold=th,", "\n", "#                      suffix='aff_so_f5_cam', fg_th=args.nl_fg_th, bg_th=args.nl_bg_th)", "\n", "# save_sim_heatmap_box(img_path[0], df_top_maps, debug_dir, gt_label=label.data.long().numpy(),", "\n", "#                      sim_map=aff_maps[-2:],", "\n", "#                      epoch=args.current_epoch, threshold=th, suffix='aff_com_cam',fg_th=args.nl_fg_th, bg_th=args.nl_bg_th)", "\n", "\n", "\n", "", "", "", "", "print", "(", "'== cls err'", ")", "\n", "print", "(", "'Top1: {:.2f} Top5: {:.2f}\\n'", ".", "format", "(", "100.0", "-", "top1_clsacc", ".", "avg", ",", "100.0", "-", "top5_clsacc", ".", "avg", ")", ")", "\n", "for", "th", "in", "args", ".", "threshold", ":", "\n", "        ", "print", "(", "'=========== threshold: {} ==========='", ".", "format", "(", "th", ")", ")", "\n", "print", "(", "'== loc err'", ")", "\n", "print", "(", "'CAM-Top1: {:.2f} Top5: {:.2f}\\n'", ".", "format", "(", "loc_err", "[", "'top1_locerr_{}'", ".", "format", "(", "th", ")", "]", ".", "avg", ",", "\n", "loc_err", "[", "'top5_locerr_{}'", ".", "format", "(", "th", ")", "]", ".", "avg", ")", ")", "\n", "print", "(", "'CAM-Top1_err: {} {} {} {} {} {}\\n'", ".", "format", "(", "loc_err", "[", "'top1_locerr_right_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "'top1_locerr_cls_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "'top1_locerr_mins_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "'top1_locerr_part_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "'top1_locerr_more_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "'top1_locerr_other_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ")", ")", "\n", "if", "args", ".", "scg", ":", "\n", "            ", "print", "(", "'SCG-Top1: {:.2f} Top5: {:.2f}\\n'", ".", "format", "(", "loc_err", "[", "'top1_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", ".", "avg", ",", "\n", "loc_err", "[", "'top5_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", ".", "avg", ")", ")", "\n", "print", "(", "'SCG-Top1_err: {} {} {} {} {} {}\\n'", ".", "format", "(", "loc_err", "[", "'top1_locerr_scg_right_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "\n", "'top1_locerr_scg_cls_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "\n", "'top1_locerr_scg_mins_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "\n", "'top1_locerr_scg_part_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "\n", "'top1_locerr_scg_more_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "'top1_locerr_scg_other_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ")", ")", "\n", "", "print", "(", "'== Gt-Known loc err'", ")", "\n", "print", "(", "'CAM-Top1: {:.2f} \\n'", ".", "format", "(", "loc_err", "[", "'gt_known_locerr_{}'", ".", "format", "(", "th", ")", "]", ".", "avg", ")", ")", "\n", "if", "args", ".", "scg", ":", "\n", "            ", "print", "(", "'SCG-Top1: {:.2f} \\n'", ".", "format", "(", "loc_err", "[", "'gt_known_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", ".", "avg", ")", ")", "\n", "\n", "", "", "setting", "=", "args", ".", "debug_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "results_log_name", "=", "'{}_results.log'", ".", "format", "(", "setting", ")", "\n", "result_log", "=", "os", ".", "path", ".", "join", "(", "args", ".", "snapshot_dir", ",", "results_log_name", ")", "\n", "with", "open", "(", "result_log", ",", "'a'", ")", "as", "fw", ":", "\n", "        ", "fw", ".", "write", "(", "'== cls err '", ")", "\n", "fw", ".", "write", "(", "'Top1: {:.2f} Top5: {:.2f}\\n'", ".", "format", "(", "100.0", "-", "top1_clsacc", ".", "avg", ",", "100.0", "-", "top5_clsacc", ".", "avg", ")", ")", "\n", "for", "th", "in", "args", ".", "threshold", ":", "\n", "            ", "fw", ".", "write", "(", "'=========== threshold: {} ===========\\n'", ".", "format", "(", "th", ")", ")", "\n", "fw", ".", "write", "(", "'== loc err '", ")", "\n", "fw", ".", "write", "(", "'CAM-Top1: {:.2f} Top5: {:.2f}\\n'", ".", "format", "(", "loc_err", "[", "'top1_locerr_{}'", ".", "format", "(", "th", ")", "]", ".", "avg", ",", "\n", "loc_err", "[", "'top5_locerr_{}'", ".", "format", "(", "th", ")", "]", ".", "avg", ")", ")", "\n", "fw", ".", "write", "(", "'CAM-Top1_err: {} {} {} {} {} {}\\n'", ".", "format", "(", "loc_err", "[", "'top1_locerr_right_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "'top1_locerr_cls_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "'top1_locerr_mins_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "'top1_locerr_part_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "'top1_locerr_more_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "'top1_locerr_other_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ")", ")", "\n", "if", "args", ".", "scg", ":", "\n", "                ", "fw", ".", "write", "(", "'SCG-Top1: {:.2f} Top5: {:.2f}\\n'", ".", "format", "(", "loc_err", "[", "'top1_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", ".", "avg", ",", "\n", "loc_err", "[", "'top5_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", ".", "avg", ")", ")", "\n", "fw", ".", "write", "(", "'SCG-Top1_err: {} {} {} {} {} {}\\n'", ".", "format", "(", "loc_err", "[", "'top1_locerr_scg_right_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "\n", "'top1_locerr_scg_cls_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "\n", "'top1_locerr_scg_mins_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "\n", "'top1_locerr_scg_part_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "\n", "'top1_locerr_scg_more_wrong_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ",", "\n", "loc_err", "[", "'top1_locerr_scg_other_{}'", ".", "format", "(", "th", ")", "]", ".", "sum", ")", ")", "\n", "", "fw", ".", "write", "(", "'== Gt-Known loc err '", ")", "\n", "fw", ".", "write", "(", "'CAM-Top1: {:.2f} \\n'", ".", "format", "(", "loc_err", "[", "'top1_locerr_{}'", ".", "format", "(", "th", ")", "]", ".", "avg", ")", ")", "\n", "if", "args", ".", "scg", ":", "\n", "                ", "fw", ".", "write", "(", "'SCG-Top1: {:.2f} \\n'", ".", "format", "(", "loc_err", "[", "'gt_known_locerr_scg_{}'", ".", "format", "(", "th", ")", "]", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.opts.__init__": [[38, 77], ["argparse.ArgumentParser", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument", "train_cam_spa.opts.parser.add_argument"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'SPA'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--root_dir\"", ",", "type", "=", "str", ",", "default", "=", "ROOT_DIR", ",", "\n", "help", "=", "'Root dir for the project'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--img_dir\"", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Directory of training images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vis_name\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--train_list\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "30", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--input_size\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--crop_size\"", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "default", "=", "'cub'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--num_classes\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--arch\"", ",", "type", "=", "str", ",", "default", "=", "'vgg_DA'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "LR", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--diff_lr\"", ",", "type", "=", "str", ",", "default", "=", "'True'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--decay_points\"", ",", "type", "=", "str", ",", "default", "=", "'80'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--epoch\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--gpus\"", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'-1 for cpu, split gpu id by comma'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--num_workers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--disp_interval\"", ",", "type", "=", "int", ",", "default", "=", "DISP_INTERVAL", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--snapshot_dir\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--log_dir\"", ",", "type", "=", "str", ",", "default", "=", "'../log'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--resume\"", ",", "type", "=", "str", ",", "default", "=", "'False'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--tencrop\"", ",", "type", "=", "str", ",", "default", "=", "'False'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--onehot\"", ",", "type", "=", "str", ",", "default", "=", "'False'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--restore_from\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--global_counter\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--current_epoch\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--mixp\"", ",", "action", "=", "'store_true'", ",", "help", "=", "'turn on amp training.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pretrained_model_dir\"", ",", "type", "=", "str", ",", "default", "=", "'../pretrained_models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pretrained_model\"", ",", "type", "=", "str", ",", "default", "=", "'vgg16.pth'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "'seed for initializing training. '", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--ram\"", ",", "action", "=", "'store_true'", ",", "help", "=", "'switch on restricted activation module.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--ra_loss_weight\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'loss weight for the ra loss.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--ram_start\"", ",", "type", "=", "float", ",", "default", "=", "10", ",", "help", "=", "'the start epoch to introduce ra loss.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--ram_th_bg\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'the variance threshold for back ground.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--ram_bg_fg_gap\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'the gap between background and object in ram.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.opts.parse": [[78, 84], ["train_cam_spa.opts.parser.parse_args", "list", "map", "train_cam_spa.opts.gpus.split", "range", "len"], "methods", ["None"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "gpus_str", "=", "opt", ".", "gpus", "\n", "opt", ".", "gpus", "=", "list", "(", "map", "(", "int", ",", "opt", ".", "gpus", ".", "split", "(", "','", ")", ")", ")", "\n", "opt", ".", "gpus", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "opt", ".", "gpus", ")", ")", "]", "if", "opt", ".", "gpus", "[", "0", "]", ">=", "0", "else", "[", "-", "1", "]", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.save_checkpoint": [[85, 90], ["os.path.join", "torch.save", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "args", ",", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "savepath", "=", "os", ".", "path", ".", "join", "(", "args", ".", "snapshot_dir", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "savepath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "savepath", ",", "os", ".", "path", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.get_model": [[91, 130], ["eval().model", "torch.nn.DataParallel.to", "print", "torch.nn.DataParallel.named_parameters", "torch.optim.SGD", "torch.nn.DataParallel", "torch.nn.DataParallel", "any", "utils.restore.restore", "eval", "print", "added_weight_list.append", "weight_list.append", "added_bias_list.append", "bias_list.append"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.model", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.restore.restore"], ["", "", "def", "get_model", "(", "args", ")", ":", "\n", "# amp.register_float_function(torch, 'sigmoid')", "\n", "    ", "model", "=", "eval", "(", "args", ".", "arch", ")", ".", "model", "(", "pretrained", "=", "True", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "\n", "args", "=", "args", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "lr", "=", "args", ".", "lr", "\n", "added_layers", "=", "[", "'cls'", ",", "'fpn'", ",", "'fc'", ",", "'classifier'", "]", "if", "args", ".", "diff_lr", "==", "'True'", "else", "[", "]", "\n", "weight_list", "=", "[", "]", "\n", "bias_list", "=", "[", "]", "\n", "added_weight_list", "=", "[", "]", "\n", "added_bias_list", "=", "[", "]", "\n", "print", "(", "'\\n following parameters will be assigned 10x learning rate:'", ")", "\n", "for", "name", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "any", "(", "[", "x", "in", "name", "for", "x", "in", "added_layers", "]", ")", ":", "\n", "            ", "print", "(", "name", ")", "\n", "if", "'weight'", "in", "name", ":", "\n", "                ", "added_weight_list", ".", "append", "(", "value", ")", "\n", "", "elif", "'bias'", "in", "name", ":", "\n", "                ", "added_bias_list", ".", "append", "(", "value", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "'weight'", "in", "name", ":", "\n", "                ", "weight_list", ".", "append", "(", "value", ")", "\n", "", "elif", "'bias'", "in", "name", ":", "\n", "                ", "bias_list", ".", "append", "(", "value", ")", "\n", "\n", "", "", "", "optimizer", "=", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "weight_list", ",", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "bias_list", ",", "'lr'", ":", "lr", "*", "2", "}", ",", "\n", "{", "'params'", ":", "added_weight_list", ",", "'lr'", ":", "lr", "*", "10", "}", ",", "\n", "{", "'params'", ":", "added_bias_list", ",", "'lr'", ":", "lr", "*", "20", "}", "]", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0005", ",", "nesterov", "=", "True", ")", "\n", "# if args.mixp:", "\n", "# model, optimizer = amp.initialize(model, optimizer, opt_level='O1')", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "args", ".", "gpus", ")", "\n", "if", "args", ".", "resume", "==", "'True'", ":", "\n", "        ", "restore", "(", "args", ",", "model", ",", "optimizer", ",", "including_opt", "=", "False", ")", "\n", "", "return", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.train": [[132, 287], ["print", "print", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "train_cam_spa.get_model", "model.train", "utils.loader.data_loader", "tensorboardX.SummaryWriter", "time.time", "print", "numpy.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "warnings.warn", "json.dumps", "os.path.exists", "os.makedirs", "open", "json.dumps", "fw.write", "utils.AverageMeter", "open", "fw.write", "torch.device", "torch.device", "torch.device", "torch.device", "os.path.exists", "os.makedirs", "len", "model.train", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "my_optim.reduce_lr", "len", "enumerate", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "utils.AverageMeter.reset", "vars", "os.path.join", "vars", "os.path.join", "utils.AverageMeter.reset", "model", "model.module.get_loss", "tensorboardX.SummaryWriter.add_scalar", "optimizer.zero_grad", "loss_val.backward", "optimizer.step", "torch.mean", "torch.mean", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "train_cam_spa.save_checkpoint", "open", "fw.write", "utils.AverageMeter.reset", "open", "img.to", "label.to", "torch.mean", "torch.mean", "utils.evaluate.accuracy", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "print", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "os.path.join", "os.path.join", "fw.write", "label.long", "img.size", "time.time", "str", "str", "len", "model.state_dict", "optimizer.state_dict", "img.size", "img.size", "img.size", "datetime.timedelta", "datetime.timedelta", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.get_model", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.train", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.loader.data_loader", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.train", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.my_optim.reduce_lr", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.model", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.vgg.vgg_spa.VGG.get_loss", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.train_cam_spa.save_checkpoint", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.reset", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.evaluate.accuracy", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update", "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.utils.meters.AveragePrecisionMetric.update"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpus_str", "\n", "\n", "# for reproducibility", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "", "else", ":", "\n", "        ", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "print", "(", "'Running parameters:\\n'", ")", "\n", "print", "(", "json", ".", "dumps", "(", "vars", "(", "args", ")", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "snapshot_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "snapshot_dir", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'train_record.csv'", ")", ",", "'a'", ")", "as", "fw", ":", "\n", "        ", "config", "=", "json", ".", "dumps", "(", "vars", "(", "args", ")", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", "\n", "fw", ".", "write", "(", "config", ")", "\n", "\n", "", "log_head", "=", "'#epoch \\t loss \\t pred@1 \\t pred@5'", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "if", "args", ".", "ram", ":", "\n", "        ", "losses_ra", "=", "AverageMeter", "(", ")", "\n", "log_head", "+=", "'loss_ra \\t '", "\n", "", "log_head", "+=", "'\\n'", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'train_record.csv'", ")", ",", "'a'", ")", "as", "fw", ":", "\n", "        ", "fw", ".", "write", "(", "log_head", ")", "\n", "", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "args", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "if", "args", ".", "gpus", "[", "0", "]", ">=", "0", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "model", ",", "optimizer", "=", "get_model", "(", "args", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "train_loader", "=", "data_loader", "(", "args", ")", "\n", "\n", "# construct writer", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "log_dir", ")", "\n", "", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "log_dir", ")", "\n", "\n", "total_epoch", "=", "args", ".", "epoch", "\n", "global_counter", "=", "args", ".", "global_counter", "\n", "current_epoch", "=", "args", ".", "current_epoch", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "max_iter", "=", "total_epoch", "*", "len", "(", "train_loader", ")", "\n", "print", "(", "'Max iter:'", ",", "max_iter", ")", "\n", "while", "current_epoch", "<", "total_epoch", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "losses", ".", "reset", "(", ")", "\n", "if", "args", ".", "ram", ":", "\n", "            ", "losses_ra", ".", "reset", "(", ")", "\n", "\n", "", "top1", ".", "reset", "(", ")", "\n", "top5", ".", "reset", "(", ")", "\n", "batch_time", ".", "reset", "(", ")", "\n", "res", "=", "my_optim", ".", "reduce_lr", "(", "args", ",", "optimizer", ",", "current_epoch", ")", "\n", "\n", "if", "res", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'train_record.csv'", ")", ",", "'a'", ")", "as", "fw", ":", "\n", "                ", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "out_str", "=", "'Epoch:%d, %f\\n'", "%", "(", "current_epoch", ",", "g", "[", "'lr'", "]", ")", "\n", "fw", ".", "write", "(", "out_str", ")", "\n", "\n", "", "", "", "steps_per_epoch", "=", "len", "(", "train_loader", ")", "\n", "for", "idx", ",", "dat", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "img_path", ",", "img", ",", "label", "=", "dat", "\n", "global_counter", "+=", "1", "\n", "img", ",", "label", "=", "img", ".", "to", "(", "args", ".", "device", ")", ",", "label", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "logits", ",", "_", ",", "_", "=", "model", "(", "img", ")", "\n", "\n", "loss_val", ",", "loss_ra", "=", "model", ".", "module", ".", "get_loss", "(", "logits", ",", "label", ",", "epoch", "=", "current_epoch", ",", "ram_start", "=", "args", ".", "ram_start", ")", "\n", "\n", "# write into tensorboard", "\n", "writer", ".", "add_scalar", "(", "'loss_val'", ",", "loss_val", ",", "global_counter", ")", "\n", "\n", "# network parameter update", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# if args.mixp:", "\n", "#     with amp.scale_loss(loss_val, optimizer) as scaled_loss:", "\n", "#         scaled_loss.backward()", "\n", "# else:", "\n", "loss_val", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "logits", "=", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "logits", ",", "dim", "=", "2", ")", ",", "dim", "=", "2", ")", "\n", "if", "not", "args", ".", "onehot", "==", "'True'", ":", "\n", "                ", "prec1", ",", "prec5", "=", "evaluate", ".", "accuracy", "(", "logits", ".", "data", ",", "label", ".", "long", "(", ")", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "prec1", "[", "0", "]", ",", "img", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "top5", ".", "update", "(", "prec5", "[", "0", "]", ",", "img", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "", "losses", ".", "update", "(", "loss_val", ".", "data", ",", "img", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "if", "args", ".", "ram", ":", "\n", "                ", "losses_ra", ".", "update", "(", "loss_ra", ".", "data", ",", "img", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "global_counter", "%", "args", ".", "disp_interval", "==", "0", ":", "\n", "# Calculate ETA", "\n", "                ", "eta_seconds", "=", "(", "(", "total_epoch", "-", "current_epoch", ")", "*", "steps_per_epoch", "+", "\n", "(", "steps_per_epoch", "-", "idx", ")", ")", "*", "batch_time", ".", "avg", "\n", "eta_str", "=", "\"{:0>8}\"", ".", "format", "(", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", ")", "\n", "eta_seconds_epoch", "=", "steps_per_epoch", "*", "batch_time", ".", "avg", "\n", "eta_str_epoch", "=", "\"{:0>8}\"", ".", "format", "(", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds_epoch", ")", ")", ")", ")", "\n", "log_output", "=", "'Epoch: [{0}][{1}/{2}] \\t '", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t '", "'ETA {eta_str}({eta_str_epoch})\\t '", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t '", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t '", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})\\t'", ".", "format", "(", "current_epoch", ",", "\n", "global_counter", "%", "len", "(", "train_loader", ")", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "eta_str", "=", "eta_str", ",", "eta_str_epoch", "=", "eta_str_epoch", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "if", "args", ".", "ram", ":", "\n", "                    ", "log_output", "+=", "'Loss_ra {loss_ra.val:.4f} ({loss_ra.avg:.4f})\\t'", ".", "format", "(", "loss_ra", "=", "losses_ra", ")", "\n", "", "print", "(", "log_output", ")", "\n", "writer", ".", "add_scalar", "(", "'top1'", ",", "top1", ".", "avg", ",", "global_counter", ")", "\n", "writer", ".", "add_scalar", "(", "'top5'", ",", "top5", ".", "avg", ",", "global_counter", ")", "\n", "\n", "\n", "", "", "current_epoch", "+=", "1", "\n", "if", "current_epoch", "%", "10", "==", "0", ":", "\n", "            ", "save_checkpoint", "(", "args", ",", "\n", "{", "\n", "'epoch'", ":", "current_epoch", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'global_counter'", ":", "global_counter", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", "\n", "}", ",", "is_best", "=", "False", ",", "\n", "filename", "=", "'%s_epoch_%d.pth.tar'", "\n", "%", "(", "args", ".", "dataset", ",", "current_epoch", ")", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'train_record.csv'", ")", ",", "'a'", ")", "as", "fw", ":", "\n", "            ", "log_output", "=", "'{} \\t {:.4f} \\t {:.3f} \\t {:.3f} \\t'", ".", "format", "(", "current_epoch", ",", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "if", "args", ".", "ram", ":", "\n", "                ", "log_output", "+=", "'{:.4f}'", ".", "format", "(", "losses_ra", ".", "avg", ")", "\n", "", "log_output", "+=", "'\\n'", "\n", "fw", ".", "write", "(", "log_output", ")", "\n", "\n", "", "losses", ".", "reset", "(", ")", "\n", "if", "args", ".", "ram", ":", "\n", "            ", "losses_ra", ".", "reset", "(", ")", "\n", "", "top1", ".", "reset", "(", ")", "\n", "top5", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.my_optim.get_finetune_optimizer": [[5, 32], ["model.named_parameters", "torch.SGD", "any", "print", "last_weight_list.append", "weight_list.append", "last_bias_list.append", "bias_list.append"], "function", ["None"], ["def", "get_finetune_optimizer", "(", "args", ",", "model", ")", ":", "\n", "    ", "lr", "=", "args", ".", "lr", "\n", "added_layers", "=", "[", "'fc6'", ",", "'fc7_1'", ",", "'classier_1'", ",", "'branchB'", ",", "'side3'", ",", "'side4'", ",", "'side_all'", "]", "if", "args", ".", "diff_lr", "==", "'True'", "else", "[", "]", "\n", "weight_list", "=", "[", "]", "\n", "bias_list", "=", "[", "]", "\n", "last_weight_list", "=", "[", "]", "\n", "last_bias_list", "=", "[", "]", "\n", "for", "name", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "any", "(", "[", "x", "in", "name", "for", "x", "in", "added_layers", "]", ")", ":", "\n", "            ", "print", "(", "name", ")", "\n", "if", "'weight'", "in", "name", ":", "\n", "                ", "last_weight_list", ".", "append", "(", "value", ")", "\n", "", "elif", "'bias'", "in", "name", ":", "\n", "                ", "last_bias_list", ".", "append", "(", "value", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "'weight'", "in", "name", ":", "\n", "                ", "weight_list", ".", "append", "(", "value", ")", "\n", "", "elif", "'bias'", "in", "name", ":", "\n", "                ", "bias_list", ".", "append", "(", "value", ")", "\n", "\n", "", "", "", "opt", "=", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "weight_list", ",", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "bias_list", ",", "'lr'", ":", "lr", "*", "2", "}", ",", "\n", "{", "'params'", ":", "last_weight_list", ",", "'lr'", ":", "lr", "*", "10", "}", ",", "\n", "{", "'params'", ":", "last_bias_list", ",", "'lr'", ":", "lr", "*", "20", "}", "]", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0005", ")", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.my_optim.lr_poly": [[34, 36], ["float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", "=", "0.9", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.my_optim.reduce_lr_poly": [[38, 42], ["my_optim.lr_poly"], "function", ["home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.my_optim.lr_poly"], ["", "def", "reduce_lr_poly", "(", "args", ",", "optimizer", ",", "global_iter", ",", "max_iter", ")", ":", "\n", "    ", "base_lr", "=", "args", ".", "lr", "\n", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "g", "[", "'lr'", "]", "=", "lr_poly", "(", "base_lr", "=", "base_lr", ",", "iter", "=", "global_iter", ",", "max_iter", "=", "max_iter", ",", "power", "=", "0.9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.my_optim.get_optimizer": [[44, 53], ["torch.SGD", "model.named_parameters"], "function", ["None"], ["", "", "def", "get_optimizer", "(", "args", ",", "model", ")", ":", "\n", "    ", "lr", "=", "args", ".", "lr", "\n", "# opt = optim.SGD(params=model.parameters(), lr=lr, momentum=0.9, weight_decay=0.0001)", "\n", "opt", "=", "optim", ".", "SGD", "(", "params", "=", "[", "para", "for", "name", ",", "para", "in", "model", ".", "named_parameters", "(", ")", "if", "'features'", "not", "in", "name", "]", ",", "lr", "=", "lr", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0001", ")", "\n", "# lambda1 = lambda epoch: 0.1 if epoch in [85, 125, 165] else 1.0", "\n", "# scheduler = LambdaLR(opt, lr_lambda=lambda1)", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.my_optim.get_adam": [[55, 61], ["torch.Adam", "model.parameters"], "function", ["None"], ["", "def", "get_adam", "(", "args", ",", "model", ")", ":", "\n", "    ", "lr", "=", "args", ".", "lr", "\n", "opt", "=", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "0.0005", ")", "\n", "# opt = optim.Adam(params=model.parameters(), lr =lr)", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.my_optim.reduce_lr": [[63, 82], ["args.decay_points.strip().split", "map", "args.decay_points.strip", "print", "int", "x.strip"], "function", ["None"], ["", "def", "reduce_lr", "(", "args", ",", "optimizer", ",", "epoch", ",", "factor", "=", "0.1", ")", ":", "\n", "# if 'coco' in args.dataset:", "\n", "#     change_points = [1,2,3,4,5]", "\n", "# elif 'imagenet' in args.dataset:", "\n", "#     change_points = [1,2,3,4,5,6,7,8,9,10,11,12]", "\n", "# else:", "\n", "#     change_points = None", "\n", "\n", "    ", "values", "=", "args", ".", "decay_points", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "try", ":", "\n", "        ", "change_points", "=", "map", "(", "lambda", "x", ":", "int", "(", "x", ".", "strip", "(", ")", ")", ",", "values", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "change_points", "=", "None", "\n", "\n", "", "if", "change_points", "is", "not", "None", "and", "epoch", "in", "change_points", ":", "\n", "        ", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "g", "[", "'lr'", "]", "=", "g", "[", "'lr'", "]", "*", "factor", "\n", "print", "(", "epoch", ",", "g", "[", "'lr'", "]", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Panxjia_SPA_CVPR2021.exper.my_optim.adjust_lr": [[85, 112], ["numpy.array", "numpy.sum"], "function", ["None"], ["", "", "def", "adjust_lr", "(", "args", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "if", "'cifar'", "in", "args", ".", "dataset", ":", "\n", "        ", "change_points", "=", "[", "80", ",", "120", ",", "160", "]", "\n", "", "elif", "'indoor'", "in", "args", ".", "dataset", ":", "\n", "        ", "change_points", "=", "[", "60", ",", "80", ",", "100", "]", "\n", "", "elif", "'dog'", "in", "args", ".", "dataset", ":", "\n", "        ", "change_points", "=", "[", "60", ",", "80", ",", "100", "]", "\n", "", "elif", "'voc'", "in", "args", ".", "dataset", ":", "\n", "        ", "change_points", "=", "[", "30", ",", "40", "]", "\n", "", "else", ":", "\n", "        ", "change_points", "=", "None", "\n", "# else:", "\n", "\n", "# if epoch in change_points:", "\n", "#     lr = args.lr * 0.1**(change_points.index(epoch)+1)", "\n", "# else:", "\n", "#     lr = args.lr", "\n", "\n", "", "if", "change_points", "is", "not", "None", ":", "\n", "        ", "change_points", "=", "np", ".", "array", "(", "change_points", ")", "\n", "pos", "=", "np", ".", "sum", "(", "epoch", ">", "change_points", ")", "\n", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "pos", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", ""]]}