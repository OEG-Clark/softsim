{"home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.pytorch_dataset_CAR.CARDataset.__init__": [[18, 75], ["torch.utils.data.Dataset.__init__", "torchvision.Compose", "torchvision.Compose", "utils_CAR.attributes_path", "utils_CAR.CARInstances.load", "utils_CAR.TaxonomyCoDec", "utils_CAR.CARInstances", "utils_CAR.cs_path", "utils_CAR.cs_path", "pytorch_dataset_CAR.CARDataset.augmentations.append", "pytorch_dataset_CAR.CARDataset.augmentations_mask.append", "pytorch_dataset_CAR.CARDataset.augmentations.append", "pytorch_dataset_CAR.CARDataset.augmentations_mask.append", "pytorch_dataset_CAR.CARDataset.augmentations.append", "pytorch_dataset_CAR.CARDataset.augmentations_mask.append", "torchvision.ToTensor", "torchvision.ToTensor", "pytorch_dataset_CAR.CARDataset.augmentations.append", "torchvision.ToTensor", "torchvision.ToTensor", "len", "eliminated.append", "torchvision.Resize", "torchvision.Resize", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.TaxonomyCoDec.__init__", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.attributes_path", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.load", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.cs_path", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.cs_path", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append"], ["def", "__init__", "(", "\n", "self", ",", "\n", "configs", ":", "CARDatasetConfig", ",", "\n", "mode", ":", "t", ".", "Literal", "[", "\"train\"", ",", "\"test\"", ",", "\"val\"", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", "CARDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "mode", "in", "[", "\n", "\"train\"", ",", "\n", "\"val\"", ",", "\n", "\"test\"", ",", "\n", "]", ",", "f\"mode = {mode} should be either 'train', 'val' or 'test'\"", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "keep_square", "=", "configs", ".", "keep_square", "\n", "self", ".", "path", "=", "configs", ".", "path", "if", "configs", ".", "path", "else", "cs_path", "(", ")", "\n", "if", "self", ".", "path", "!=", "cs_path", "(", ")", ":", "\n", "            ", "os", ".", "environ", "[", "\"CITYSCAPES_DATASET\"", "]", "=", "self", ".", "path", "\n", "\n", "", "self", ".", "augmentations", "=", "[", "]", "\n", "self", ".", "augmentations_mask", "=", "[", "]", "\n", "if", "configs", ".", "augmentations", "is", "not", "None", ":", "\n", "            ", "if", "configs", ".", "augmentations", ".", "resize", "is", "not", "None", ":", "\n", "                ", "self", ".", "augmentations", ".", "append", "(", "\n", "T", ".", "Resize", "(", "size", "=", "(", "configs", ".", "augmentations", ".", "resize", ",", "configs", ".", "augmentations", ".", "resize", ")", ")", "\n", ")", "\n", "self", ".", "augmentations_mask", ".", "append", "(", "\n", "T", ".", "Resize", "(", "size", "=", "(", "configs", ".", "augmentations", ".", "resize", ",", "configs", ".", "augmentations", ".", "resize", ")", ")", "\n", ")", "\n", "", "self", ".", "augmentations", ".", "append", "(", "T", ".", "ToTensor", "(", ")", ")", "\n", "self", ".", "augmentations_mask", ".", "append", "(", "T", ".", "ToTensor", "(", ")", ")", "\n", "if", "configs", ".", "augmentations", ".", "normalize", ":", "\n", "                ", "self", ".", "augmentations", ".", "append", "(", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "augmentations", ".", "append", "(", "T", ".", "ToTensor", "(", ")", ")", "\n", "self", ".", "augmentations_mask", ".", "append", "(", "T", ".", "ToTensor", "(", ")", ")", "\n", "\n", "", "self", ".", "augmentations", "=", "T", ".", "Compose", "(", "self", ".", "augmentations", ")", "\n", "self", ".", "augmentations_mask", "=", "T", ".", "Compose", "(", "self", ".", "augmentations_mask", ")", "\n", "\n", "car_json_path", "=", "attributes_path", "(", "f\"{mode}.json\"", ")", "\n", "self", ".", "car_data", "=", "CARInstances", ".", "load", "(", "car_json_path", ")", "\n", "self", ".", "codec", "=", "TaxonomyCoDec", "(", ")", "\n", "\n", "# eliminating samples without attributes", "\n", "eliminated", "=", "[", "]", "\n", "for", "cat", "in", "TAXONOMY", ":", "\n", "            ", "if", "len", "(", "cat", ".", "attributes", ")", "==", "0", ":", "# doesn't have attributes", "\n", "                ", "eliminated", ".", "append", "(", "cat", ".", "name", ")", "\n", "", "", "eliminated", "=", "{", "\"category_name\"", ":", "eliminated", "}", "\n", "self", ".", "car_data", "=", "CARInstances", "(", "\n", "sample", "for", "sample", "in", "self", ".", "car_data", "if", "sample", ".", "category", "not", "in", "eliminated", "[", "\"category_name\"", "]", "\n", ")", "\n", "\n", "if", "configs", ".", "n_samples", ":", "\n", "            ", "self", ".", "car_data", "=", "self", ".", "car_data", "[", ":", "configs", ".", "n_samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.pytorch_dataset_CAR.CARDataset.__getitem__": [[76, 120], ["range", "torch.tensor", "pytorch_dataset_CAR.CARDataset.codec.encode", "utils_CAR.images_crop", "pytorch_dataset_CAR.CARDataset.augmentations", "pytorch_dataset_CAR.CARDataset.augmentations_mask", "pytorch_dataset_CAR.CARDataset.augmentations", "pytorch_dataset_CAR.CARDataset.augmentations_mask", "dataclasses_CAR.ModelInputItem", "torch.from_numpy().to", "print", "print", "torch.tensor", "torch.Tensor", "torch.tensor", "torch.from_numpy", "sample.instances_matrix"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.TaxonomyCoDec.encode", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.images_crop", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.instances_matrix"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", "->", "ModelInputItem", ":", "\n", "        ", "for", "trial", "in", "range", "(", "10", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "sample", "=", "self", ".", "car_data", "[", "idx", "]", "\n", "instance_id", "=", "torch", ".", "tensor", "(", "sample", ".", "instance_id", ")", "\n", "image", "=", "sample", ".", "image_nocache", "\n", "cls_name", "=", "sample", ".", "category", "\n", "cls_id", ",", "attr_vector", "=", "self", ".", "codec", ".", "encode", "(", "sample", ",", "return_vector", "=", "True", ")", "\n", "mask", "=", "sample", ".", "binary_mask", "\n", "cropped_image", ",", "cropped_mask", "=", "images_crop", "(", "\n", "images", "=", "[", "image", ",", "mask", "]", ",", "\n", "bbox", "=", "sample", ".", "polygon_annotations", ".", "bbox", ",", "\n", "keep_square", "=", "self", ".", "keep_square", ",", "\n", ")", "\n", "\n", "image", "=", "self", ".", "augmentations", "(", "image", ")", "\n", "mask", "=", "self", ".", "augmentations_mask", "(", "mask", ")", "\n", "cropped_image", "=", "self", ".", "augmentations", "(", "cropped_image", ")", "\n", "cropped_mask", "=", "self", ".", "augmentations_mask", "(", "cropped_mask", ")", "\n", "output", "=", "ModelInputItem", "(", "\n", "image", "=", "image", ",", "\n", "mask", "=", "mask", ",", "\n", "cropped_image", "=", "cropped_image", ",", "\n", "cropped_mask", "=", "cropped_mask", ",", "\n", "category_id", "=", "torch", ".", "tensor", "(", "cls_id", ")", ",", "\n", "category_name", "=", "cls_name", ",", "\n", "attributes_label", "=", "torch", ".", "Tensor", "(", "attr_vector", ")", ",", "\n", "id", "=", "torch", ".", "tensor", "(", "idx", ")", ",", "\n", "instance_id", "=", "instance_id", ",", "\n", ")", "\n", "if", "self", ".", "configs", ".", "scale", ":", "\n", "                    ", "output", ".", "instances_tensor", "=", "torch", ".", "from_numpy", "(", "\n", "sample", ".", "instances_matrix", "(", "self", ".", "configs", ".", "scale", ")", "\n", ")", ".", "to", "(", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "return", "output", "\n", "\n", "", "except", "Exception", "as", "err", ":", "\n", "                ", "print", "(", "f\"idx is {idx}\"", ")", "\n", "print", "(", "f\"Error is {err}\"", ")", "\n", "if", "trial", "<", "9", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "raise", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.pytorch_dataset_CAR.CARDataset.__len__": [[121, 123], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "car_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.pytorch_dataset_CAR.CARDataset.collate_fn": [[124, 127], ["dataclasses_CAR.ModelInputItems.collate"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItems.collate"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "batch", ":", "t", ".", "List", "[", "ModelInputItem", "]", ")", "->", "ModelInputItems", ":", "\n", "        ", "return", "ModelInputItems", ".", "collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.pytorch_dataset_CAR.CARDataset.n_categories": [[128, 131], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_categories", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "codec", ".", "n_categories", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.pytorch_dataset_CAR.CARDataset.n_attributes": [[132, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_attributes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "codec", ".", "n_attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.CARDatasetConfig.__hash__": [[25, 27], ["hash", "hash"], "methods", ["None"], ["def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "(", "hash", "(", "item", ")", "for", "item", "in", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.CARDatasetConfig.Model": [[28, 36], ["CARDataset"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "Model", "(", "\n", "configs", ":", "\"CARDatasetConfig\"", ",", "\n", "mode", ":", "str", ",", "\n", ")", ":", "\n", "        ", "from", "pytorch_dataset_CAR", "import", "CARDataset", "\n", "\n", "return", "CARDataset", "(", "configs", "=", "configs", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItem.__post_init__": [[51, 72], ["len", "len", "len", "len"], "methods", ["None"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "assert", "(", "\n", "len", "(", "self", ".", "cropped_mask", ".", "shape", ")", "==", "len", "(", "self", ".", "cropped_image", ".", "shape", ")", "==", "3", "\n", ")", ",", "f\"The cropped image and mask should be a 3D Tensor, got {self.cropped_image.shape} and {self.cropped_mask.shape}\"", "\n", "assert", "(", "\n", "self", ".", "image", ".", "shape", "[", "-", "2", ":", "]", "==", "self", ".", "mask", ".", "shape", "[", "-", "2", ":", "]", "\n", ")", ",", "f\"The size of the mask ({self.mask.shape}) and image ({self.image.shape}) should be equal\"", "\n", "assert", "self", ".", "mask", ".", "shape", "[", "0", "]", "==", "1", "\n", "assert", "self", ".", "image", ".", "shape", "[", "0", "]", "==", "3", "\n", "assert", "(", "\n", "self", ".", "cropped_image", ".", "shape", "[", "-", "2", ":", "]", "==", "self", ".", "cropped_mask", ".", "shape", "[", "-", "2", ":", "]", "\n", ")", ",", "f\"The size of the cropped mask ({self.cropped_mask.shape}) and cropped image ({self.cropped_image.shape}) should be equal\"", "\n", "assert", "(", "\n", "self", ".", "cropped_mask", ".", "shape", "[", "0", "]", "==", "1", "\n", ")", ",", "f\"The size of the channels of the mask should be 1, got {self.cropped_mask.shape}\"", "\n", "assert", "(", "\n", "len", "(", "self", ".", "attributes_label", ".", "shape", ")", "==", "1", "\n", ")", ",", "f\"the attributes label should be a single dimensional tensor, got {self.attributes_label.shape}\"", "\n", "if", "self", ".", "instances_tensor", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "instances_tensor", ".", "shape", "[", "0", "]", "==", "6", ",", "self", ".", "instances_tensor", ".", "shape", "\n", "assert", "len", "(", "self", ".", "instances_tensor", ".", "shape", ")", "==", "3", ",", "self", ".", "instances_tensor", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItem.to_device": [[73, 87], ["dataclasses_CAR.ModelInputItem", "dataclasses_CAR.ModelInputItem.image.to", "dataclasses_CAR.ModelInputItem.mask.to", "dataclasses_CAR.ModelInputItem.cropped_image.to", "dataclasses_CAR.ModelInputItem.cropped_mask.to", "dataclasses_CAR.ModelInputItem.category_id.to", "dataclasses_CAR.ModelInputItem.attributes_label.to", "dataclasses_CAR.ModelInputItem.id.to", "dataclasses_CAR.ModelInputItem.instance_id.to", "dataclasses_CAR.ModelInputItem.instances_tensor.to"], "methods", ["None"], ["", "", "def", "to_device", "(", "self", ",", "device", ":", "torch", ".", "device", ")", ":", "\n", "        ", "return", "ModelInputItem", "(", "\n", "image", "=", "self", ".", "image", ".", "to", "(", "device", ")", ",", "\n", "mask", "=", "self", ".", "mask", ".", "to", "(", "device", ")", ",", "\n", "category_name", "=", "self", ".", "category_name", ",", "\n", "cropped_image", "=", "self", ".", "cropped_image", ".", "to", "(", "device", ")", ",", "\n", "cropped_mask", "=", "self", ".", "cropped_mask", ".", "to", "(", "device", ")", ",", "\n", "category_id", "=", "self", ".", "category_id", ".", "to", "(", "device", ")", ",", "\n", "attributes_label", "=", "self", ".", "attributes_label", ".", "to", "(", "device", ")", ",", "\n", "id", "=", "self", ".", "id", ".", "to", "(", "device", ")", ",", "\n", "instance_id", "=", "self", ".", "instance_id", ".", "to", "(", "device", ")", ",", "\n", "instances_tensor", "=", "self", ".", "instances_tensor", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "instances_tensor", "is", "not", "None", "\n", "else", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItem.show": [[89, 91], ["torchvision.transforms.ToPILImage"], "methods", ["None"], ["", "def", "show", "(", "self", ")", "->", "None", ":", "\n", "        ", "ToPILImage", "(", ")", "(", "self", ".", "image", ")", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItems.__post_init__": [[106, 153], ["dataclasses_CAR.ModelInputItems.category_ids.to", "set", "len", "len", "len", "len", "len", "len", "len", "len", "assertion_list.append", "len", "int"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "assert", "(", "\n", "len", "(", "self", ".", "cropped_masks", ".", "shape", ")", "==", "len", "(", "self", ".", "cropped_images", ".", "shape", ")", "==", "4", "\n", ")", ",", "f\"The cropped image and mask should be a 4D Tensor, got {self.cropped_images.shape} and {self.cropped_masks.shape}\"", "\n", "assert", "(", "\n", "len", "(", "self", ".", "images", ".", "shape", ")", "==", "len", "(", "self", ".", "masks", ".", "shape", ")", "==", "4", "\n", ")", ",", "f\"The image and mask should be a 4D Tensor, got {self.images.shape} and {self.masks.shape}\"", "\n", "assert", "(", "\n", "self", ".", "images", ".", "shape", "[", "0", "]", "==", "self", ".", "masks", ".", "shape", "[", "0", "]", "\n", ")", ",", "f\"The batch size is inconsistent, got {self.images.shape} and {self.masks.shape}\"", "\n", "assert", "(", "\n", "self", ".", "images", ".", "shape", "[", "-", "2", ":", "]", "==", "self", ".", "masks", ".", "shape", "[", "-", "2", ":", "]", "\n", ")", ",", "f\"Image and mask H&W inconsistency, got {self.images.shape} and {self.masks.shape}\"", "\n", "# assert len(self.images) == len(", "\n", "#     self.masks", "\n", "# ), f\"The number of images and masks should match, got {len(self.images)} and {len(self.masks)}\"", "\n", "# for image, mask in zip(self.images, self.masks):", "\n", "#     assert (", "\n", "#         mask.size == image.size", "\n", "#     ), f\"The size of the mask ({mask.size}) and image ({image.size}) should be equal\"", "\n", "assert", "(", "\n", "self", ".", "cropped_images", ".", "shape", "[", "-", "2", ":", "]", "==", "self", ".", "cropped_masks", ".", "shape", "[", "-", "2", ":", "]", "\n", ")", ",", "f\"The size of the cropped mask ({self.cropped_masks.shape}) and cropped image ({self.cropped_images.shape}) should be equal\"", "\n", "assert", "(", "\n", "self", ".", "cropped_masks", ".", "shape", "[", "1", "]", "==", "1", "\n", ")", ",", "f\"The size of the channels of the mask should be 1, got {self.cropped_masks.shape}\"", "\n", "if", "self", ".", "instances_tensor", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "instances_tensor", ".", "shape", "[", "1", "]", "==", "6", ",", "self", ".", "instances_tensor", ".", "shape", "\n", "assert", "len", "(", "self", ".", "instances_tensor", ".", "shape", ")", "==", "4", ",", "self", ".", "instances_tensor", ".", "shape", "\n", "", "self", ".", "category_ids", "=", "self", ".", "category_ids", ".", "to", "(", "dtype", "=", "torch", ".", "int64", ")", "\n", "assertion_list", "=", "[", "\n", "len", "(", "self", ".", "attributes_labels", ")", ",", "\n", "len", "(", "self", ".", "category_names", ")", ",", "\n", "len", "(", "self", ".", "images", ")", ",", "\n", "len", "(", "self", ".", "masks", ")", ",", "\n", "self", ".", "cropped_masks", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "cropped_images", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "category_ids", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "attributes_labels", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "ids", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "instance_ids", ".", "shape", "[", "0", "]", ",", "\n", "]", "\n", "if", "self", ".", "instances_tensor", "is", "not", "None", ":", "\n", "            ", "assertion_list", ".", "append", "(", "self", ".", "instances_tensor", ".", "shape", "[", "0", "]", ")", "\n", "", "assert", "set", "(", "\n", "int", "(", "x", ")", "for", "x", "in", "assertion_list", "\n", ")", ",", "\"The batch size should be the same over all elements of the batch\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItems.collate": [[154, 173], ["dataclasses_CAR.ModelInputItems", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate", "(", "model_input_items", ":", "t", ".", "Sequence", "[", "ModelInputItem", "]", ")", "->", "\"ModelInputItems\"", ":", "\n", "        ", "return", "ModelInputItems", "(", "\n", "images", "=", "torch", ".", "stack", "(", "[", "item", ".", "image", "for", "item", "in", "model_input_items", "]", ",", "dim", "=", "0", ")", ",", "\n", "masks", "=", "torch", ".", "stack", "(", "[", "item", ".", "mask", "for", "item", "in", "model_input_items", "]", ",", "dim", "=", "0", ")", ",", "\n", "cropped_images", "=", "torch", ".", "stack", "(", "[", "item", ".", "cropped_image", "for", "item", "in", "model_input_items", "]", ",", "dim", "=", "0", ")", ",", "\n", "cropped_masks", "=", "torch", ".", "stack", "(", "[", "item", ".", "cropped_mask", "for", "item", "in", "model_input_items", "]", ",", "dim", "=", "0", ")", ",", "\n", "category_ids", "=", "torch", ".", "stack", "(", "[", "item", ".", "category_id", "for", "item", "in", "model_input_items", "]", ",", "dim", "=", "0", ")", ",", "\n", "category_names", "=", "[", "item", ".", "category_name", "for", "item", "in", "model_input_items", "]", ",", "\n", "attributes_labels", "=", "torch", ".", "stack", "(", "\n", "[", "item", ".", "attributes_label", "for", "item", "in", "model_input_items", "]", ",", "dim", "=", "0", "\n", ")", ",", "\n", "ids", "=", "torch", ".", "stack", "(", "[", "item", ".", "id", "for", "item", "in", "model_input_items", "]", ",", "dim", "=", "0", ")", ",", "\n", "instance_ids", "=", "torch", ".", "stack", "(", "[", "item", ".", "instance_id", "for", "item", "in", "model_input_items", "]", ",", "dim", "=", "0", ")", ",", "\n", "instances_tensor", "=", "torch", ".", "stack", "(", "\n", "[", "item", ".", "instances_tensor", "for", "item", "in", "model_input_items", "]", ",", "dim", "=", "0", "\n", ")", "\n", "if", "model_input_items", "[", "0", "]", ".", "instances_tensor", "is", "not", "None", "\n", "else", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItems.__len__": [[175, 177], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItems.__getitem__": [[178, 192], ["dataclasses_CAR.ModelInputItem"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", "->", "ModelInputItem", ":", "\n", "        ", "return", "ModelInputItem", "(", "\n", "image", "=", "self", ".", "images", "[", "idx", "]", ",", "\n", "mask", "=", "self", ".", "masks", "[", "idx", "]", ",", "\n", "cropped_image", "=", "self", ".", "cropped_images", "[", "idx", "]", ",", "\n", "cropped_mask", "=", "self", ".", "cropped_masks", "[", "idx", "]", ",", "\n", "category_id", "=", "self", ".", "category_ids", "[", "idx", "]", ",", "\n", "category_name", "=", "self", ".", "category_names", "[", "idx", "]", ",", "\n", "attributes_label", "=", "self", ".", "attributes_labels", "[", "idx", "]", ",", "\n", "id", "=", "self", ".", "ids", "[", "idx", "]", ",", "\n", "instance_id", "=", "self", ".", "instance_ids", "[", "idx", "]", ",", "\n", "instances_tensor", "=", "self", ".", "instances_tensor", "[", "idx", "]", "\n", "if", "self", ".", "instances_tensor", "is", "not", "None", "\n", "else", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItems.__iter__": [[194, 197], ["range", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", "->", "ModelInputItem", ":", "\n", "        ", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "self", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItems.to_device": [[198, 212], ["dataclasses_CAR.ModelInputItems", "dataclasses_CAR.ModelInputItems.images.to", "dataclasses_CAR.ModelInputItems.masks.to", "dataclasses_CAR.ModelInputItems.cropped_images.to", "dataclasses_CAR.ModelInputItems.cropped_masks.to", "dataclasses_CAR.ModelInputItems.category_ids.to", "dataclasses_CAR.ModelInputItems.attributes_labels.to", "dataclasses_CAR.ModelInputItems.ids.to", "dataclasses_CAR.ModelInputItems.instance_ids.to", "dataclasses_CAR.ModelInputItems.instances_tensor.to"], "methods", ["None"], ["", "", "def", "to_device", "(", "self", ",", "device", ":", "torch", ".", "device", ")", ":", "\n", "        ", "return", "ModelInputItems", "(", "\n", "images", "=", "self", ".", "images", ".", "to", "(", "device", ")", ",", "\n", "masks", "=", "self", ".", "masks", ".", "to", "(", "device", ")", ",", "\n", "category_names", "=", "self", ".", "category_names", ",", "\n", "cropped_images", "=", "self", ".", "cropped_images", ".", "to", "(", "device", ")", ",", "\n", "cropped_masks", "=", "self", ".", "cropped_masks", ".", "to", "(", "device", ")", ",", "\n", "category_ids", "=", "self", ".", "category_ids", ".", "to", "(", "device", ")", ",", "\n", "attributes_labels", "=", "self", ".", "attributes_labels", ".", "to", "(", "device", ")", ",", "\n", "ids", "=", "self", ".", "ids", ".", "to", "(", "device", ")", ",", "\n", "instance_ids", "=", "self", ".", "instance_ids", ".", "to", "(", "device", ")", ",", "\n", "instances_tensor", "=", "self", ".", "instances_tensor", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "instances_tensor", "is", "not", "None", "\n", "else", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItems.classes_set": [[214, 217], ["set", "dataclasses_CAR.ModelInputItems.category_ids.cpu().tolist", "dataclasses_CAR.ModelInputItems.category_ids.cpu"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes_set", "(", "self", ")", "->", "t", ".", "Set", ":", "\n", "        ", "return", "set", "(", "self", ".", "category_ids", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItems.from_single_class": [[218, 221], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "from_single_class", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "len", "(", "self", ".", "classes_set", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItems.single_category_id": [[222, 226], ["dataclasses_CAR.ModelInputItems.classes_set.pop"], "methods", ["None"], ["", "@", "property", "\n", "def", "single_category_id", "(", "self", ")", "->", "int", ":", "\n", "        ", "assert", "self", ".", "from_single_class", "\n", "return", "self", ".", "classes_set", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.dataclasses_CAR.ModelInputItems.single_category_name": [[227, 231], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "single_category_name", "(", "self", ")", "->", "str", ":", "\n", "        ", "assert", "self", ".", "from_single_class", "\n", "return", "self", ".", "category_names", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.download_CAR.main": [[12, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.makedirs", "os.chdir", "wget.download", "print", "zipfile.ZipFile", "zipfile.ZipFile.namelist", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.remove", "print", "utils_CAR.attributes_path", "utils_CAR.attributes_path", "os.path.join", "utils_CAR.attributes_path"], "function", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.attributes_path", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.attributes_path", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.attributes_path"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--url_path\"", ",", "required", "=", "True", ",", "help", "=", "\"URL address to fetch attributes from\"", ")", "\n", "# parser.add_argument(\"--cities\", default=None, help=\"Cities to be downloaded\")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# download_cities = (", "\n", "#     [city.replace(\" \", \"\") for city in args.cities.slplit(\",\")] if args.cities else cities", "\n", "# )", "\n", "os", ".", "makedirs", "(", "attributes_path", "(", ")", ",", "exist_ok", "=", "True", ")", "\n", "# for city in tqdm(download_cities):", "\n", "#     os.chdir(attributes_path())", "\n", "#     file_url = args.url_path + \"/\" + city + \".json\"", "\n", "#     wget.download(file_url)", "\n", "os", ".", "chdir", "(", "attributes_path", "(", ")", ")", "\n", "file_name", "=", "wget", ".", "download", "(", "args", ".", "url_path", ")", "\n", "print", "(", "\n", "\"\\n\"", "\n", "\"The zip file is successfully installed to:\\n\"", "\n", "f\"{os.path.join(attributes_path(), file_name)}\\n\"", "\n", "\"Extracting ... \\n\"", "\n", ")", "\n", "\n", "# Extract files", "\n", "zip", "=", "zipfile", ".", "ZipFile", "(", "file_name", ")", "\n", "files", "=", "zip", ".", "namelist", "(", ")", "\n", "zip", ".", "extractall", "(", ")", "\n", "zip", ".", "close", "(", ")", "\n", "# Delete zip file", "\n", "os", ".", "remove", "(", "file_name", ")", "\n", "print", "(", "f\"Extraction Completed.\\n {', '.join(files)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.ChoicesTaxonomy.__iter__": [[18, 21], ["None"], "methods", ["None"], ["def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "v", "in", "self", ".", "values", ":", "\n", "            ", "yield", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.NumericalTaxonomy.to_dict": [[29, 34], ["None"], "methods", ["None"], ["def", "to_dict", "(", "self", ")", "->", "t", ".", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "return", "{", "\n", "\"min\"", ":", "self", ".", "min", ",", "\n", "\"max\"", ":", "self", ".", "max", ",", "\n", "\"step\"", ":", "self", ".", "step", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.NumericalTaxonomy.__iter__": [[36, 39], ["range", "str"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n_steps", ")", ":", "\n", "            ", "yield", "str", "(", "self", ".", "min", "+", "i", "*", "self", ".", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.NumericalTaxonomy.n_steps": [[40, 43], ["int"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "n_steps", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "int", "(", "(", "self", ".", "max", "-", "self", ".", "min", ")", "/", "self", ".", "step", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.ConditionTaxonomy.to_dict": [[51, 57], ["None"], "methods", ["None"], ["def", "to_dict", "(", "self", ")", "->", "t", ".", "Dict", "[", "str", ",", "t", ".", "Union", "[", "str", ",", "t", ".", "Sequence", "[", "str", "]", "]", "]", ":", "\n", "        ", "return", "{", "\n", "\"choices\"", ":", "self", ".", "values", ",", "\n", "\"condition\"", ":", "{", "\n", "\"taxonomy\"", ":", "self", ".", "taxonomy", ",", "\n", "\"choices\"", ":", "self", ".", "choices", ".", "values", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.ConditionTaxonomy.__iter__": [[60, 63], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "v", "in", "self", ".", "values", ":", "\n", "            ", "yield", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.type": [[73, 83], ["isinstance", "isinstance", "isinstance", "ValueError", "taxonomy_CAR.AttributeTaxonomy.type"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.type"], ["@", "property", "\n", "def", "type", "(", "self", ")", "->", "AttributeTypeTaxonomy", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "value", ",", "ChoicesTaxonomy", ")", ":", "\n", "            ", "return", "AttributeTypeTaxonomy", ".", "category", "\n", "", "elif", "isinstance", "(", "self", ".", "value", ",", "NumericalTaxonomy", ")", ":", "\n", "            ", "return", "AttributeTypeTaxonomy", ".", "number", "\n", "", "elif", "isinstance", "(", "self", ".", "value", ",", "ConditionTaxonomy", ")", ":", "\n", "            ", "return", "AttributeTypeTaxonomy", ".", "condition", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"value attribute has unknown type {type(self.value)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.__post_init__": [[84, 91], ["taxonomy_CAR.AttributeTaxonomy.value.values.append"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append"], ["", "", "def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "description", "!=", "\"\"", "\n", "if", "(", "\n", "self", ".", "type", "is", "AttributeTypeTaxonomy", ".", "condition", "\n", "or", "self", ".", "type", "is", "AttributeTypeTaxonomy", ".", "category", "\n", ")", ":", "\n", "            ", "self", ".", "value", ".", "values", ".", "append", "(", "\"Unclear\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.to_dict": [[92, 101], ["taxonomy_CAR.AttributeTaxonomy.category_to_dict", "taxonomy_CAR.AttributeTaxonomy.number_to_dict", "taxonomy_CAR.AttributeTaxonomy.condition_to_dict", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.category_to_dict", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.number_to_dict", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.condition_to_dict"], ["", "", "def", "to_dict", "(", "self", ")", "->", "t", ".", "Dict", "[", "str", ",", "t", ".", "Dict", "[", "str", ",", "t", ".", "Any", "]", "]", ":", "\n", "        ", "if", "self", ".", "type", "==", "AttributeTypeTaxonomy", ".", "category", ":", "\n", "            ", "return", "self", ".", "category_to_dict", "(", ")", "\n", "", "elif", "self", ".", "type", "==", "AttributeTypeTaxonomy", ".", "number", ":", "\n", "            ", "return", "self", ".", "number_to_dict", "(", ")", "\n", "", "elif", "self", ".", "type", "==", "AttributeTypeTaxonomy", ".", "condition", ":", "\n", "            ", "return", "self", ".", "condition_to_dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"This type is not supported {self.type}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.category_to_dict": [[102, 111], ["None"], "methods", ["None"], ["", "", "def", "category_to_dict", "(", "\n", "self", ",", "\n", ")", "->", "t", ".", "Dict", "[", "str", ",", "t", ".", "Dict", "[", "str", ",", "t", ".", "Union", "[", "str", ",", "t", ".", "Sequence", "[", "str", "]", "]", "]", "]", ":", "\n", "        ", "return", "{", "\n", "self", ".", "name", ":", "{", "\n", "\"type\"", ":", "self", ".", "type", ".", "value", ",", "\n", "\"description\"", ":", "self", ".", "description", ",", "\n", "\"choices\"", ":", "self", ".", "value", ".", "values", ",", "\n", "\"allow_multiple\"", ":", "self", ".", "allow_multiple", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.number_to_dict": [[114, 122], ["None"], "methods", ["None"], ["", "def", "number_to_dict", "(", "self", ")", "->", "t", ".", "Dict", "[", "str", ",", "t", ".", "Dict", "[", "str", ",", "t", ".", "Union", "[", "str", ",", "t", ".", "Sequence", "[", "str", "]", "]", "]", "]", ":", "\n", "        ", "return", "{", "\n", "self", ".", "name", ":", "{", "\n", "\"type\"", ":", "self", ".", "type", ".", "value", ",", "\n", "\"description\"", ":", "self", ".", "description", ",", "\n", "\"min\"", ":", "self", ".", "value", ".", "min", ",", "\n", "\"max\"", ":", "self", ".", "value", ".", "max", ",", "\n", "\"step\"", ":", "self", ".", "value", ".", "step", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.condition_to_dict": [[125, 135], ["output_dict.update", "taxonomy_CAR.AttributeTaxonomy.value.to_dict"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.to_dict"], ["", "def", "condition_to_dict", "(", "\n", "self", ",", "\n", ")", "->", "t", ".", "Dict", "[", "str", ",", "t", ".", "Dict", "[", "str", ",", "t", ".", "Union", "[", "str", ",", "t", ".", "Sequence", "[", "str", "]", "]", "]", "]", ":", "\n", "        ", "output_dict", "=", "{", "\n", "\"type\"", ":", "\"category\"", ",", "\n", "\"description\"", ":", "self", ".", "description", ",", "\n", "\"allow_multiple\"", ":", "self", ".", "allow_multiple", ",", "\n", "}", "\n", "output_dict", ".", "update", "(", "self", ".", "value", ".", "to_dict", "(", ")", ")", "\n", "return", "{", "self", ".", "name", ":", "output_dict", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.n_values": [[136, 142], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_values", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "(", "\n", "self", ".", "value", ".", "n_steps", "\n", "if", "self", ".", "type", "is", "AttributeTypeTaxonomy", ".", "number", "\n", "else", "len", "(", "self", ".", "value", ".", "values", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.value_to_index": [[144, 155], ["math.floor", "isinstance", "taxonomy_CAR.AttributeTaxonomy.type"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.type"], ["", "def", "value_to_index", "(", "self", ",", "value", ":", "t", ".", "Union", "[", "float", ",", "str", "]", ")", "->", "int", ":", "\n", "        ", "if", "self", ".", "type", "is", "AttributeTypeTaxonomy", ".", "number", ":", "\n", "            ", "if", "not", "isinstance", "(", "value", ",", "float", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "value", "=", "float", "(", "value", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "value", "=", "float", "(", "value", ".", "split", "(", "\" to \"", ")", "[", "0", "]", ")", "\n", "", "", "return", "math", ".", "floor", "(", "(", "value", "-", "self", ".", "value", ".", "min", ")", "/", "self", ".", "value", ".", "step", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "value", ",", "str", ")", ",", "type", "(", "value", ")", "\n", "return", "self", ".", "value", ".", "values", ".", "index", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.index_to_value": [[156, 161], ["None"], "methods", ["None"], ["", "", "def", "index_to_value", "(", "self", ",", "index", ":", "int", ")", "->", "str", ":", "\n", "        ", "if", "self", ".", "type", "is", "AttributeTypeTaxonomy", ".", "number", ":", "\n", "            ", "return", "f\"{self.value.min + index * self.value.step} to {self.value.min + (index + 1) * self.value.step}\"", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "value", ".", "values", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.__init__": [[166, 171], ["taxonomy_CAR.AttributesList._items.update", "taxonomy_CAR.AttributesList.has"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.has"], ["def", "__init__", "(", "self", ",", "items", ":", "t", ".", "Sequence", "[", "AttributeTaxonomy", "]", ")", ":", "\n", "        ", "self", ".", "_items", "=", "{", "}", "\n", "for", "item", "in", "items", ":", "\n", "            ", "assert", "not", "self", ".", "has", "(", "item", ")", "\n", "self", ".", "_items", ".", "update", "(", "{", "item", ".", "name", ":", "item", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.has": [[172, 176], ["isinstance", "taxonomy_CAR.AttributesList._items.keys"], "methods", ["None"], ["", "", "def", "has", "(", "self", ",", "attribute", ":", "t", ".", "Union", "[", "AttributeTaxonomy", ",", "str", "]", ")", "->", "bool", ":", "\n", "        ", "if", "isinstance", "(", "attribute", ",", "AttributeTaxonomy", ")", ":", "\n", "            ", "attribute", "=", "attribute", ".", "name", "\n", "", "return", "attribute", "in", "self", ".", "_items", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.__repr__": [[177, 179], ["taxonomy_CAR.AttributesList._items.keys"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"AttributesList[{', '.join(self._items.keys())}]\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append": [[180, 183], ["taxonomy_CAR.AttributesList._items.update", "taxonomy_CAR.AttributesList.has"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.has"], ["", "def", "append", "(", "self", ",", "item", ":", "AttributeTaxonomy", ")", "->", "t", ".", "NoReturn", ":", "\n", "        ", "assert", "not", "self", ".", "has", "(", "item", ")", "\n", "self", ".", "_items", ".", "update", "(", "{", "item", ".", "name", ":", "item", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.__iter__": [[184, 187], ["taxonomy_CAR.AttributesList._items.values"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", "->", "AttributeTaxonomy", ":", "\n", "        ", "for", "item", "in", "self", ".", "_items", ".", "values", "(", ")", ":", "\n", "            ", "yield", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.__getitem__": [[188, 193], ["isinstance", "isinstance", "next", "enumerate", "taxonomy_CAR.AttributesList._items.values"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ":", "t", ".", "Union", "[", "str", ",", "int", "]", ")", "->", "AttributeTaxonomy", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "            ", "return", "self", ".", "_items", "[", "item", "]", "\n", "", "elif", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "return", "next", "(", "value", "for", "i", ",", "value", "in", "enumerate", "(", "self", ".", "_items", ".", "values", "(", ")", ")", "if", "i", "==", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.__len__": [[194, 196], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.n_combinations": [[197, 201], ["math.prod"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_combinations", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Calculates the number of possible combinations of the attributes\"\"\"", "\n", "return", "math", ".", "prod", "(", "attribute", ".", "n_values", "for", "attribute", "in", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.vector_length": [[202, 206], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "vector_length", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Calculates the length of a vector that can be used to represent the attributes\"\"\"", "\n", "return", "sum", "(", "attribute", ".", "n_values", "for", "attribute", "in", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CategoryTaxonomy.__post_init__": [[215, 217], ["None"], "methods", ["None"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "description", "!=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CategoryTaxonomy.to_dict": [[218, 223], ["attribute.to_dict"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.to_dict"], ["", "def", "to_dict", "(", "self", ")", "->", "t", ".", "Dict", "[", "str", ",", "t", ".", "Any", "]", ":", "\n", "        ", "return", "{", "\n", "self", ".", "name", ":", "{", "\n", "\"description\"", ":", "self", ".", "description", ",", "\n", "\"attributes\"", ":", "[", "attribute", ".", "to_dict", "(", ")", "for", "attribute", "in", "self", ".", "attributes", "]", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.to_dict": [[233, 237], ["thing.to_dict", "stuff.to_dict"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.to_dict", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.to_dict"], ["def", "to_dict", "(", "self", ")", "->", "t", ".", "Dict", "[", "str", ",", "t", ".", "Any", "]", ":", "\n", "        ", "return", "{", "\n", "\"things\"", ":", "[", "thing", ".", "to_dict", "(", ")", "for", "thing", "in", "self", ".", "things", "]", ",", "\n", "\"stuff\"", ":", "[", "stuff", ".", "to_dict", "(", ")", "for", "stuff", "in", "self", ".", "stuff", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.__iter__": [[239, 244], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", "->", "CategoryTaxonomy", ":", "\n", "        ", "for", "thing", "in", "self", ".", "things", ":", "\n", "            ", "yield", "thing", "\n", "", "for", "stuff", "in", "self", ".", "stuff", ":", "\n", "            ", "yield", "stuff", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.__getitem__": [[245, 250], ["len", "len"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ":", "int", ")", ":", "\n", "        ", "if", "item", "<", "len", "(", "self", ".", "things", ")", ":", "\n", "            ", "return", "self", ".", "things", "[", "item", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "stuff", "[", "item", "-", "len", "(", "self", ".", "things", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.is_sane": [[251, 275], ["isinstance", "isinstance", "isinstance"], "methods", ["None"], ["", "", "def", "is_sane", "(", "self", ")", "->", "bool", ":", "\n", "        ", "for", "category", "in", "self", ":", "\n", "            ", "for", "attribute", "in", "category", ".", "attributes", ":", "\n", "                ", "if", "(", "\n", "(", "\n", "attribute", ".", "type", "is", "AttributeTypeTaxonomy", ".", "category", "\n", "and", "not", "isinstance", "(", "attribute", ".", "value", ",", "ChoicesTaxonomy", ")", "\n", ")", "\n", "or", "(", "\n", "attribute", ".", "type", "is", "AttributeTypeTaxonomy", ".", "number", "\n", "and", "not", "isinstance", "(", "attribute", ".", "value", ",", "NumericalTaxonomy", ")", "\n", ")", "\n", "or", "(", "\n", "attribute", ".", "type", "is", "AttributeTypeTaxonomy", ".", "condition", "\n", "and", "not", "isinstance", "(", "attribute", ".", "value", ",", "ConditionTaxonomy", ")", "\n", ")", "\n", ")", ":", "\n", "                    ", "return", "False", "\n", "", "if", "attribute", ".", "type", "is", "AttributeTypeTaxonomy", ".", "condition", ":", "\n", "                    ", "dependent_attribute_name", "=", "attribute", ".", "value", ".", "taxonomy", "\n", "dependent_attribute_values", "=", "attribute", ".", "value", ".", "choices", ".", "values", "\n", "for", "value", "in", "dependent_attribute_values", ":", "\n", "                        ", "assert", "value", "in", "category", ".", "attributes", "[", "dependent_attribute_name", "]", ".", "value", ".", "values", "\n", "", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.load": [[276, 719], ["taxonomy_CAR.CompleteTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.CategoryTaxonomy", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributesList", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.AttributeTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.NumericalTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ConditionTaxonomy", "taxonomy_CAR.ConditionTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ConditionTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy", "taxonomy_CAR.ChoicesTaxonomy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load", "(", ")", "->", "\"CompleteTaxonomy\"", ":", "\n", "        ", "return", "CompleteTaxonomy", "(", "\n", "things", "=", "[", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Mid-to-Large Vehicle\"", ",", "\n", "description", "=", "\"This category contains all possible medium to large vehicles, which basically include all vehicles with 4 wheels. It does not include bicycles, motorcycles and any other small or portable vehicles.\"", ",", "\n", "attributes", "=", "AttributesList", "(", "\n", "[", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Vehicle Visibility\"", ",", "\n", "description", "=", "\"How much of the vehicle is visible?\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"0% to 20% is visible\"", ",", "\n", "\"21% to 40% is visible\"", ",", "\n", "\"41% to 60% is visible\"", ",", "\n", "\"60% to 80% is visible\"", ",", "\n", "\"81% to 100% is visible\"", ",", "\n", "]", ",", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Vehicle Form\"", ",", "\n", "description", "=", "\"Vehicle Form Factor; On Rails includes Trams or Trains\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"Sedan\"", ",", "\n", "\"Hatchback\"", ",", "\n", "\"SUV\"", ",", "\n", "\"Sport\"", ",", "\n", "\"Van\"", ",", "\n", "\"Pickup\"", ",", "\n", "\"Truck\"", ",", "\n", "\"Trailer\"", ",", "\n", "\"Bus\"", ",", "\n", "\"School Bus\"", ",", "\n", "\"On Rails\"", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Is the vehicle towing or being towed\"", ",", "\n", "description", "=", "\"Is it towing something? or is it being towed?\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Towing\"", ",", "\"Being Towed\"", ",", "\"Neither\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Vehicle Type\"", ",", "\n", "description", "=", "\"What is this vehicle used for?\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"Police\"", ",", "\n", "\"Ambulance\"", ",", "\n", "\"Fire\"", ",", "\n", "\"Construction\"", ",", "\n", "\"Other\"", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Vehicle Light Status\"", ",", "\n", "description", "=", "\"whether the vehicle's lights are on or off.\"", "\n", "\"If the vehicle is a school bus then the emergency option implies that the stop sign is on.\"", "\n", "\"Emergency indicate any special type of lights that the vehicle has, for example ambulances, police cars ... etc\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"On\"", ",", "\"Off\"", ",", "\"Emergency\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Vehicle Status\"", ",", "\n", "description", "=", "\"whether the vehicle is parked, stopped in the road or moving\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Moving\"", ",", "\"Stopped\"", ",", "\"Parked\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Vehicle Direction\"", ",", "\n", "description", "=", "\"which part of the vehicle is facing the camera (if it is facing the camera with some angle, pick the one that closely agrees)\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\"Front\"", ",", "\"Back\"", ",", "\"Left Side\"", ",", "\"Right Side\"", "]", "\n", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Small Vehicle\"", ",", "\n", "description", "=", "\"It includes the remaining small or portable vehicles such as bicycles, motorcycles, scooters, ... etc.\"", ",", "\n", "attributes", "=", "AttributesList", "(", "\n", "[", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Vehicle Type\"", ",", "\n", "description", "=", "'What is the type of the vehicle? \"Other\" may include things such as scooters.'", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"Bicycle\"", ",", "\n", "\"Motorcycle\"", ",", "\n", "\"Float Drivable Surface\"", ",", "\n", "\"Other\"", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Vehicle Status\"", ",", "\n", "description", "=", "\"whether the vehicle is parked, stopped in the road or moving\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Moving\"", ",", "\"Stopped\"", ",", "\"Parked\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Vehicle Has Rider\"", ",", "\n", "description", "=", "\"whether there is a rider or not\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Yes\"", ",", "\"No\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Vehicle Direction\"", ",", "\n", "description", "=", "\"which part of the vehicle is facing the camera (if it is facing the camera with some angle, pick the one that closely agrees)\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\"Front\"", ",", "\"Back\"", ",", "\"Left Side\"", ",", "\"Right Side\"", "]", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Vehicle Has Sidecar\"", ",", "\n", "description", "=", "\"Has the Vehicle a Sidecar? some vehicles such as motorcycles may have sidecars. This can be used for bicycles as well with an additional cart or something else.\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Yes\"", ",", "\"No\"", "]", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Pedestrian\"", ",", "\n", "description", "=", "\"A human object in the image\"", ",", "\n", "attributes", "=", "AttributesList", "(", "\n", "[", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Visibility\"", ",", "\n", "description", "=", "\"How much of the pedestrian is visible?\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"0% to 20% is visible\"", ",", "\n", "\"21% to 40% is visible\"", ",", "\n", "\"41% to 60% is visible\"", ",", "\n", "\"60% to 80% is visible\"", ",", "\n", "\"81% to 100% is visible\"", ",", "\n", "]", ",", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Age\"", ",", "\n", "description", "=", "\"Age of the pedestrian\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Adult\"", ",", "\"Child\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Pedestrian Type\"", ",", "\n", "description", "=", "\"Is the pedestrian either a police officer / construction worker or neither of them\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"Police Officer\"", ",", "\n", "\"Construction Worker\"", ",", "\n", "\"Neither\"", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Activity\"", ",", "\n", "description", "=", "\"The posture of the person\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"Sitting\"", ",", "\n", "\"Lying Down\"", ",", "\n", "\"Standing\"", ",", "\n", "\"Walking\"", ",", "\n", "\"Running\"", ",", "\n", "\"Riding\"", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Is Using Vehicle\"", ",", "\n", "description", "=", "\"Is pedestrian using a vehicle? whether the pedestrian is using a bicycle, motorcycle, scooter, wheelchair or something else\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Yes\"", ",", "\"No\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Is Pushing Or Dragging\"", ",", "\n", "description", "=", "\"whether the pedestrian is pushing something in front of him/her or pulling something behind.\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Yes\"", ",", "\"No\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Is Carrying\"", ",", "\n", "description", "=", "\"whether the pedestrian is carrying anything (a child, a backpack).\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Yes\"", ",", "\"No\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Is Hearing Impaired\"", ",", "\n", "description", "=", "\"Is pedestrian hearing impaired? not necessarily due to a disability, but could be due to wearing headphones or any item that may prevent the pedestrian from hearing the surrounding environment.\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Yes\"", ",", "\"No\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Is Blind\"", ",", "\n", "description", "=", "\"Is pedestrian blind? may not be clear to you, choose the best of what you believe\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Yes\"", ",", "\"No\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Is Disabled\"", ",", "\n", "description", "=", "\"Is pedestrian disabled? any kind of disability except for being blind or hair impaired. Please do NOT use unclear unless it looks like there is a disability that is not clear to you. Otherwise, probably it will be No.\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Yes\"", ",", "\"No\"", "]", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Traffic Light\"", ",", "\n", "description", "=", "\"contains the whole traffic light object not just the lights\"", ",", "\n", "attributes", "=", "AttributesList", "(", "\n", "[", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Traffic Light Type\"", ",", "\n", "description", "=", "\"What kind of traffic light\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"Circle Lamp\"", ",", "\n", "\"Forward Arrow (should be an actual arrow pointing forward, not a circle lamp)\"", ",", "\n", "\"Right Arrow\"", ",", "\n", "\"Left Arrow\"", ",", "\n", "\"U-Turn\"", ",", "\n", "\"Pedestrian\"", ",", "\n", "\"Unknown\"", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Traffic Light Status\"", ",", "\n", "description", "=", "\"Traffic light color? for some traffic lights such as pedestrian Green would represent pedestrians can cross and Red for no. Black means it is neither working nor functioning\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Green\"", ",", "\"Yellow\"", ",", "\"Red\"", ",", "\"Black\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Flashing Traffic Light\"", ",", "\n", "description", "=", "\"Flashing traffic light? whether the traffic lights are flashing or not. May not be clear, choose what you believe is correct.\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Yes\"", ",", "\"No\"", "]", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Traffic Sign\"", ",", "\n", "description", "=", "\"contains the main body of the traffic sign\"", ",", "\n", "attributes", "=", "AttributesList", "(", "\n", "[", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Is Electronic\"", ",", "\n", "description", "=", "\"is it a fixed sign or an electronic one that can change later\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Electronic\"", ",", "\"Fixed\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Traffic Sign Type\"", ",", "\n", "description", "=", "\"Traffic sign type\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"Stop\"", ",", "\n", "\"Speed Limit\"", ",", "\n", "\"Construction\"", ",", "\n", "\"Caution\"", ",", "\n", "\"No Stopping\"", ",", "\n", "\"No Parking\"", ",", "\n", "\"No Turn Right\"", ",", "\n", "\"No Turn Left\"", ",", "\n", "\"Wrong Way\"", ",", "\n", "\"Do Not Enter\"", ",", "\n", "\"One Way\"", ",", "\n", "\"Barrier\"", ",", "\n", "\"Advertisement or Informative\"", ",", "\n", "\"Other\"", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Speed Limit Value\"", ",", "\n", "description", "=", "\"Speed Limit Value? In case of a speed limit sign, what's the max value for speed? set only when the traffic sign is a speed limit, otherwise set to any value\"", ",", "\n", "# type=AttributeTypeTaxonomy.condition,", "\n", "value", "=", "NumericalTaxonomy", "(", "\n", "min", "=", "5", ",", "\n", "max", "=", "400", ",", "\n", "step", "=", "5", ",", "\n", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Road Lane\"", ",", "\n", "description", "=", "\"Just the lanes of the road\"", ",", "\n", "attributes", "=", "AttributesList", "(", "\n", "[", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Road Lane Type\"", ",", "\n", "description", "=", "\"what kind of lanes?\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Solid\"", ",", "\"Broken\"", ",", "\"Other\"", "]", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Road Lane Color\"", ",", "\n", "description", "=", "\"The color of the lane\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"White\"", ",", "\"Yellow\"", "]", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "]", ",", "\n", "stuff", "=", "[", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Sky\"", ",", "\n", "description", "=", "\"The sky including clouds/sun\"", ",", "\n", "attributes", "=", "AttributesList", "(", "[", "]", ")", ",", "\n", ")", ",", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Sidewalk\"", ",", "\n", "description", "=", "\"sidewalk excluding the road\"", ",", "\n", "attributes", "=", "AttributesList", "(", "[", "]", ")", ",", "\n", ")", ",", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Construction\"", ",", "\n", "description", "=", "\"any kind of human made objects\"", ",", "\n", "attributes", "=", "AttributesList", "(", "\n", "[", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Construction Type\"", ",", "\n", "description", "=", "\"what kind of construction\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"Building\"", ",", "\n", "\"Wall\"", ",", "\n", "\"Fence\"", ",", "\n", "\"Bridge\"", ",", "\n", "\"Tunnel\"", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Vegetation\"", ",", "\n", "description", "=", "\"vegetation above the level of the ground that may prohibit a vehicle from going in its direction\"", ",", "\n", "attributes", "=", "AttributesList", "(", "\n", "[", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Vegetation Type\"", ",", "\n", "description", "=", "\"type of the vegetation\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"Trees\"", ",", "\n", "\"Hedges\"", ",", "\n", "\"Small Bushes\"", ",", "\n", "\"All other Kinds Of Vertical Vegetation\"", ",", "\n", "\"Other\"", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Movable Object\"", ",", "\n", "description", "=", "\"any thing that may move later in time\"", ",", "\n", "attributes", "=", "AttributesList", "(", "\n", "[", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Movable Object Type\"", ",", "\n", "description", "=", "\"the type of the movable object\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"Traffic Cones\"", ",", "\n", "\"Debris\"", ",", "\n", "\"Barriers\"", ",", "\n", "\"Push-able or Pull-able\"", ",", "\n", "\"Animal\"", ",", "\n", "\"Umbrella\"", ",", "\n", "\"Other\"", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Is Animal On Ground\"", ",", "\n", "description", "=", "\"Is Animal on ground? either on ground or otherwise flying or being carried by someone.\"", ",", "\n", "value", "=", "ConditionTaxonomy", "(", "\n", "values", "=", "[", "\"On Ground\"", ",", "\"No\"", "]", ",", "\n", "taxonomy", "=", "\"Movable Object Type\"", ",", "\n", "choices", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Animal\"", "]", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Is Animal Moving by Itself\"", ",", "\n", "description", "=", "\"Is the animal moving by itself? if being carried set to No\"", ",", "\n", "value", "=", "ConditionTaxonomy", "(", "\n", "values", "=", "[", "\"Yes\"", ",", "\"No\"", "]", ",", "\n", "taxonomy", "=", "\"Movable Object Type\"", ",", "\n", "choices", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Animal\"", "]", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Static Object\"", ",", "\n", "description", "=", "\"any objects that probably will be there for a long time\"", ",", "\n", "attributes", "=", "AttributesList", "(", "\n", "[", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Static Object Type\"", ",", "\n", "description", "=", "\"the type of the static object\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"Bicycle Rack\"", ",", "\n", "\"Pole\"", ",", "\n", "\"Rail Track\"", ",", "\n", "\"Trash (or anything that holds trash)\"", ",", "\n", "\"Fence or Barrier\"", ",", "\n", "\"Guard Rail\"", ",", "\n", "\"Other\"", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "CategoryTaxonomy", "(", "\n", "name", "=", "\"Ground\"", ",", "\n", "description", "=", "\"any ground object such as road and parking spots\"", ",", "\n", "attributes", "=", "AttributesList", "(", "\n", "[", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Ground Type\"", ",", "\n", "description", "=", "\"the type of the ground? Terrain includes grass, soil and sand.\"", ",", "\n", "value", "=", "ChoicesTaxonomy", "(", "\n", "values", "=", "[", "\n", "\"Terrain\"", ",", "\n", "\"Road\"", ",", "\n", "\"Pedestrian Sidewalk\"", ",", "\n", "\"Curb\"", ",", "\n", "\"Parking Lots and Driveways\"", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "AttributeTaxonomy", "(", "\n", "name", "=", "\"Terrain Type\"", ",", "\n", "description", "=", "\"Terrain Type? what type of terrain it is. Set only when the type is terrain, otherwise it doesn't matter\"", ",", "\n", "value", "=", "ConditionTaxonomy", "(", "\n", "values", "=", "[", "\"Grass\"", ",", "\"Soil\"", ",", "\"Sand\"", ",", "\"Other\"", "]", ",", "\n", "taxonomy", "=", "\"Ground Type\"", ",", "\n", "choices", "=", "ChoicesTaxonomy", "(", "values", "=", "[", "\"Terrain\"", "]", ")", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.fetch": [[727, 756], ["copy.deepcopy", "len", "NotImplementedError", "output.meta.update", "output.meta.update", "len", "len", "len", "output.meta.update", "ValueError", "len"], "methods", ["None"], ["", "def", "fetch", "(", "self", ",", "**", "kwargs", ")", "->", "t", ".", "Union", "[", "\"CategoryTaxonomy\"", ",", "\"AttributeTaxonomy\"", "]", ":", "\n", "        ", "assert", "len", "(", "kwargs", ")", ">", "0", ",", "kwargs", "\n", "taxonomy", "=", "copy", ".", "deepcopy", "(", "self", ")", "\n", "if", "\"category\"", "in", "kwargs", ":", "\n", "            ", "category", "=", "kwargs", "[", "\"category\"", "]", "\n", "things", "=", "[", "cat", "for", "cat", "in", "taxonomy", ".", "things", "if", "cat", ".", "name", "==", "category", "]", "\n", "stuff", "=", "[", "cat", "for", "cat", "in", "taxonomy", ".", "stuff", "if", "cat", ".", "name", "==", "category", "]", "\n", "if", "len", "(", "things", ")", "==", "1", "and", "len", "(", "stuff", ")", "!=", "1", ":", "\n", "                ", "output", "=", "things", "[", "0", "]", "\n", "output", ".", "meta", ".", "update", "(", "{", "\"Is Thing\"", ":", "True", "}", ")", "\n", "", "elif", "len", "(", "stuff", ")", "==", "1", ":", "\n", "                ", "output", "=", "stuff", "[", "0", "]", "\n", "output", ".", "meta", ".", "update", "(", "{", "\"Is Thing\"", ":", "False", "}", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "f\"{category} doesn't exist in things nor stuff\"", ")", "\n", "\n", "", "if", "\"attribute\"", "in", "kwargs", ":", "\n", "                ", "attribute", "=", "kwargs", "[", "\"attribute\"", "]", "\n", "attrs", "=", "[", "attr", "for", "attr", "in", "output", ".", "attributes", "if", "attr", ".", "name", "==", "attribute", "]", "\n", "assert", "(", "\n", "len", "(", "attrs", ")", "==", "1", "\n", ")", ",", "f\"{output.attributes} doesn't have {attribute} of {category}\"", "\n", "is_thing", "=", "output", ".", "meta", "[", "\"Is Thing\"", "]", "\n", "output", "=", "attrs", "[", "0", "]", "\n", "output", ".", "meta", ".", "update", "(", "{", "\"Is Thing\"", ":", "is_thing", ",", "\"category\"", ":", "category", "}", ")", "\n", "\n", "", "return", "output", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.__len__": [[757, 759], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "things", ")", "+", "len", "(", "self", ".", "stuff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CsTranslator.__init__": [[802, 805], ["taxonomy_CAR.CsTranslator.is_sane"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CsTranslator.is_sane"], ["def", "__init__", "(", "self", ",", "sanity_check", ":", "bool", "=", "True", ")", ":", "\n", "        ", "if", "sanity_check", ":", "\n", "            ", "self", ".", "is_sane", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CsTranslator.is_sane": [[806, 811], ["taxonomy_CAR.CompleteTaxonomy.load", "taxonomy_CAR.CompleteTaxonomy.load", "taxonomy_CAR.CsTranslator._cs2ours.items", "taxonomy_CAR.CompleteTaxonomy.load"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.load", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.load", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.load"], ["", "", "def", "is_sane", "(", "self", ")", ":", "\n", "        ", "ours", "=", "CompleteTaxonomy", ".", "load", "(", ")", "\n", "assert", "ours", ".", "is_sane", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "_cs2ours", ".", "items", "(", ")", ":", "\n", "            ", "ours", ".", "fetch", "(", "category", "=", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CsTranslator.Cs2Ours": [[812, 817], ["None"], "methods", ["None"], ["", "", "def", "Cs2Ours", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "_cs2ours", "[", "name", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "\"unknown\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CsTranslator.Ours2Cs": [[818, 821], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "Ours2Cs", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "# TODO: implement this one as well, it may requires changing the structure as the mapping is many to one not one to one so far", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.__post_init__": [[137, 139], ["None"], "methods", ["None"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "is_consistent", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.__repr__": [[140, 142], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"CARUniqueID({self.id})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.construct": [[143, 157], ["utils_CAR.CARUniqueID", "image_path.startswith", "image_path.replace", "label_path.startswith", "label_path.replace", "utils_CAR.cs_path", "utils_CAR.cs_path", "utils_CAR.cs_path", "utils_CAR.cs_path"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.cs_path", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.cs_path", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.cs_path", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.cs_path"], ["", "@", "staticmethod", "\n", "def", "construct", "(", "\n", "image_path", ":", "str", ",", "label_path", ":", "str", ",", "object_id", ":", "t", ".", "Union", "[", "int", ",", "str", "]", ",", "delimiter", ":", "str", "=", "\"::\"", "\n", ")", "->", "\"CARUniqueID\"", ":", "\n", "        ", "image_path", "=", "(", "\n", "image_path", ".", "replace", "(", "cs_path", "(", ")", ",", "\"\"", ")", "if", "image_path", ".", "startswith", "(", "cs_path", "(", ")", ")", "else", "image_path", "\n", ")", "\n", "label_path", "=", "(", "\n", "label_path", ".", "replace", "(", "cs_path", "(", ")", ",", "\"\"", ")", "if", "label_path", ".", "startswith", "(", "cs_path", "(", ")", ")", "else", "label_path", "\n", ")", "\n", "idx", "=", "CARUniqueID", "(", "\n", "id", "=", "f\"{image_path}{delimiter}{label_path}{delimiter}{object_id}\"", ",", "delimiter", "=", "delimiter", "\n", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.decompose": [[158, 162], ["utils_CAR.CARUniqueID.id.split", "len", "int"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.split"], ["", "def", "decompose", "(", "self", ")", "->", "t", ".", "Mapping", "[", "str", ",", "t", ".", "Union", "[", "str", ",", "int", "]", "]", ":", "\n", "        ", "vals", "=", "self", ".", "id", ".", "split", "(", "self", ".", "delimiter", ")", "\n", "assert", "len", "(", "vals", ")", "==", "3", "\n", "return", "{", "\"image_path\"", ":", "vals", "[", "0", "]", ",", "\"label_path\"", ":", "vals", "[", "1", "]", ",", "\"object_id\"", ":", "int", "(", "vals", "[", "2", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.image_path": [[163, 166], ["utils_CAR.CARUniqueID.id.split"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.split"], ["", "@", "property", "\n", "def", "image_path", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "id", ".", "split", "(", "self", ".", "delimiter", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.label_path": [[167, 170], ["utils_CAR.CARUniqueID.id.split"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.split"], ["", "@", "property", "\n", "def", "label_path", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "id", ".", "split", "(", "self", ".", "delimiter", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.object_id": [[171, 174], ["int", "utils_CAR.CARUniqueID.id.split"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.split"], ["", "@", "property", "\n", "def", "object_id", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "int", "(", "self", ".", "id", ".", "split", "(", "self", ".", "delimiter", ")", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.is_consistent": [[175, 186], ["utils_CAR.CARUniqueID.image_path.split", "utils_CAR.CARUniqueID.label_path.split", "all", "image_path[].split", "label_path[].split"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.split", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.split", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.split", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.split"], ["", "@", "property", "\n", "def", "is_consistent", "(", "self", ")", "->", "bool", ":", "\n", "        ", "image_path", "=", "self", ".", "image_path", ".", "split", "(", "\"/\"", ")", "\n", "label_path", "=", "self", ".", "label_path", ".", "split", "(", "\"/\"", ")", "\n", "image_prefix", "=", "\"_\"", ".", "join", "(", "image_path", "[", "3", "]", ".", "split", "(", "\"_\"", ")", "[", ":", "-", "1", "]", ")", "\n", "label_prefix", "=", "\"_\"", ".", "join", "(", "label_path", "[", "3", "]", ".", "split", "(", "\"_\"", ")", "[", ":", "-", "2", "]", ")", "\n", "return", "all", "(", "\n", "[", "\n", "image_path", "[", "1", "]", "==", "label_path", "[", "1", "]", ",", "# same split (train, val or test)", "\n", "image_path", "[", "2", "]", "==", "label_path", "[", "2", "]", ",", "# same city", "\n", "image_prefix", "==", "label_prefix", ",", "# same prefix of the image/json name", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.city": [[189, 192], ["utils_CAR.CARUniqueID.image_path.split"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.split"], ["", "@", "property", "\n", "def", "city", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "image_path", ".", "split", "(", "\"/\"", ")", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.split": [[193, 196], ["utils_CAR.CARUniqueID.image_path.split"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.split"], ["", "@", "property", "\n", "def", "split", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "image_path", ".", "split", "(", "\"/\"", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.gt_type": [[197, 200], ["utils_CAR.CARUniqueID.label_path.split"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.split"], ["", "@", "property", "\n", "def", "gt_type", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "label_path", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.__eq__": [[201, 206], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ":", "\"CARUniqueID\"", ")", "->", "bool", ":", "\n", "        ", "return", "(", "\n", "(", "self", ".", "image_path", "==", "other", ".", "image_path", ")", "\n", "and", "(", "self", ".", "label_path", "==", "other", ".", "label_path", ")", "\n", "and", "(", "self", ".", "object_id", "==", "other", ".", "object_id", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPoint.__init__": [[213, 230], ["isinstance", "isinstance", "isinstance", "kwargs.keys", "value.keys", "isinstance", "set", "set", "kwargs.keys", "value.keys", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "\"value\"", "in", "kwargs", ":", "\n", "            ", "assert", "\"x\"", "not", "in", "kwargs", "and", "\"y\"", "not", "in", "kwargs", "\n", "value", "=", "kwargs", "[", "\"value\"", "]", "\n", "if", "isinstance", "(", "value", ",", "t", ".", "Mapping", ")", ":", "\n", "                ", "assert", "set", "(", "value", ".", "keys", "(", ")", ")", "==", "{", "\"x\"", ",", "\"y\"", "}", ",", "value", ".", "keys", "(", ")", "\n", "self", ".", "x", "=", "value", "[", "\"x\"", "]", "\n", "self", ".", "y", "=", "value", "[", "\"y\"", "]", "\n", "", "elif", "isinstance", "(", "value", ",", "t", ".", "Sequence", ")", ":", "\n", "                ", "assert", "len", "(", "value", ")", "==", "2", ",", "value", "\n", "self", ".", "x", ",", "self", ".", "y", "=", "value", "\n", "", "", "else", ":", "\n", "            ", "assert", "set", "(", "kwargs", ".", "keys", "(", ")", ")", "==", "{", "\"x\"", ",", "\"y\"", "}", ",", "kwargs", ".", "keys", "(", ")", "\n", "self", ".", "x", "=", "kwargs", "[", "\"x\"", "]", "\n", "self", ".", "y", "=", "kwargs", "[", "\"y\"", "]", "\n", "", "assert", "isinstance", "(", "self", ".", "x", ",", "int", ")", "\n", "assert", "isinstance", "(", "self", ".", "y", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPoint.__repr__": [[231, 233], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"CARPoint(x={self.x}, y={self.y})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPoint.json": [[234, 237], ["json.dumps"], "methods", ["None"], ["", "@", "property", "\n", "def", "json", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ".", "as_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPoint.from_json": [[238, 241], ["utils_CAR.CARPoint", "json.loads"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "from_json", "(", "text", ":", "str", ")", "->", "\"CARPoint\"", ":", "\n", "        ", "return", "CARPoint", "(", "value", "=", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPoint.as_dict": [[242, 245], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "as_dict", "(", "self", ")", "->", "t", ".", "Dict", "[", "str", ",", "int", "]", ":", "\n", "        ", "return", "{", "\"x\"", ":", "self", ".", "x", ",", "\"y\"", ":", "self", ".", "y", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPoint.as_tuple": [[246, 249], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "as_tuple", "(", "self", ")", "->", "t", ".", "Tuple", "[", "int", ",", "int", "]", ":", "\n", "        ", "return", "self", ".", "x", ",", "self", ".", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.BBox.__init__": [[257, 273], ["set", "kwargs.keys"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "possible_options", "=", "[", "\n", "{", "\"left\"", ",", "\"upper\"", ",", "\"right\"", ",", "\"lower\"", "}", ",", "\n", "{", "\"left\"", ",", "\"upper\"", ",", "\"width\"", ",", "\"height\"", "}", ",", "\n", "]", "\n", "assert", "set", "(", "kwargs", ".", "keys", "(", ")", ")", "in", "possible_options", "\n", "self", ".", "left", "=", "kwargs", "[", "\"left\"", "]", "\n", "self", ".", "upper", "=", "kwargs", "[", "\"upper\"", "]", "\n", "if", "\"lower\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "lower", "=", "kwargs", "[", "\"lower\"", "]", "\n", "", "if", "\"right\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "right", "=", "kwargs", "[", "\"right\"", "]", "\n", "", "if", "\"height\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "lower", "=", "self", ".", "upper", "+", "kwargs", "[", "\"height\"", "]", "-", "1", "\n", "", "if", "\"width\"", "in", "kwargs", ":", "\n", "            ", "self", ".", "right", "=", "self", ".", "left", "+", "kwargs", "[", "\"width\"", "]", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.BBox.from_polygon": [[274, 280], ["isinstance", "tuple", "utils_CAR.BBox", "zip", "min", "max", "min", "max"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "from_polygon", "(", "polygon", ":", "t", ".", "Union", "[", "\"CARPolygon\"", ",", "t", ".", "Sequence", "[", "t", ".", "Tuple", "[", "int", ",", "int", "]", "]", "]", ")", "->", "\"BBox\"", ":", "\n", "        ", "if", "isinstance", "(", "polygon", ",", "CARPolygon", ")", ":", "\n", "            ", "polygon", "=", "polygon", ".", "as_list", "\n", "", "x_vals", ",", "y_vals", "=", "tuple", "(", "zip", "(", "*", "polygon", ")", ")", "\n", "return", "BBox", "(", "upper", "=", "min", "(", "y_vals", ")", ",", "lower", "=", "max", "(", "y_vals", ")", ",", "left", "=", "min", "(", "x_vals", ")", ",", "right", "=", "max", "(", "x_vals", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.BBox.width": [[281, 284], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "width", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "right", "-", "self", ".", "left", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.BBox.height": [[285, 288], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "height", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lower", "-", "self", ".", "upper", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.BBox.as_pil": [[289, 292], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "as_pil", "(", "self", ")", "->", "t", ".", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", ":", "\n", "        ", "return", "self", ".", "left", ",", "self", ".", "upper", ",", "self", ".", "right", ",", "self", ".", "lower", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.BBox.left_upper_width_height": [[293, 296], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "left_upper_width_height", "(", "self", ")", "->", "t", ".", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", ":", "\n", "        ", "return", "self", ".", "left", ",", "self", ".", "upper", ",", "self", ".", "width", ",", "self", ".", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.__init__": [[301, 307], ["isinstance", "utils_CAR.CARPoint"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "points", ":", "t", ".", "Sequence", "[", "t", ".", "Union", "[", "t", ".", "Mapping", "[", "str", ",", "int", "]", ",", "t", ".", "Tuple", "[", "int", ",", "int", "]", ",", "CARPoint", "]", "]", "\n", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "points", "[", "0", "]", ",", "CARPoint", ")", ":", "\n", "            ", "points", "=", "[", "CARPoint", "(", "value", "=", "point", ")", "for", "point", "in", "points", "]", "\n", "", "self", ".", "points", "=", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.__len__": [[308, 310], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.__repr__": [[311, 313], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"CARPolygon({', '.join(str((p.x, p.y)) for p in self.points)})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.__getitem__": [[314, 319], ["isinstance", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.type"], ["", "def", "__getitem__", "(", "self", ",", "item", ":", "int", ")", "->", "CARPoint", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "return", "self", ".", "points", "[", "item", "]", "\n", "", "else", ":", "\n", "            ", "TypeError", "(", "f\"{item} has type {type(item)} which is not supported\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.__iter__": [[320, 323], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", "->", "CARPoint", ":", "\n", "        ", "for", "p", "in", "self", ".", "points", ":", "\n", "            ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.json": [[324, 327], ["json.dumps"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "json", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ".", "as_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.from_json": [[328, 332], ["json.loads", "utils_CAR.CARPolygon", "utils_CAR.CARPoint.from_json"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.from_json"], ["", "@", "staticmethod", "\n", "def", "from_json", "(", "text", ")", "->", "\"CARPolygon\"", ":", "\n", "        ", "data", "=", "json", ".", "loads", "(", "text", ")", "\n", "return", "CARPolygon", "(", "points", "=", "[", "CARPoint", ".", "from_json", "(", "d", ")", "for", "d", "in", "data", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.as_dict": [[333, 336], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "as_dict", "(", "self", ")", "->", "t", ".", "Sequence", "[", "t", ".", "Dict", "[", "str", ",", "int", "]", "]", ":", "\n", "        ", "return", "[", "p", ".", "as_dict", "for", "p", "in", "self", ".", "points", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.as_list": [[337, 340], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "as_list", "(", "self", ")", "->", "t", ".", "List", "[", "t", ".", "Tuple", "[", "int", ",", "int", "]", "]", ":", "\n", "        ", "return", "[", "p", ".", "as_tuple", "for", "p", "in", "self", ".", "points", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.generate_mask": [[341, 346], ["PIL.new", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw.polygon"], "methods", ["None"], ["", "def", "generate_mask", "(", "self", ",", "H", ",", "W", ")", "->", "Image", ":", "\n", "        ", "mask", "=", "Pil", ".", "new", "(", "\"1\"", ",", "(", "W", ",", "H", ")", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "mask", ")", "\n", "draw", ".", "polygon", "(", "self", ".", "as_list", ",", "fill", "=", "True", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.draw_over": [[347, 357], ["image.copy", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw.polygon"], "methods", ["None"], ["", "def", "draw_over", "(", "\n", "self", ",", "\n", "image", ":", "Image", ",", "\n", "outline", ":", "t", ".", "Union", "[", "bool", ",", "t", ".", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", "]", "=", "True", ",", "\n", "fill", ":", "t", ".", "Union", "[", "bool", ",", "t", ".", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", "]", "=", "False", ",", "\n", ")", "->", "Image", ":", "\n", "        ", "annotated", "=", "image", ".", "copy", "(", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "annotated", ",", "\"RGBA\"", ")", "\n", "draw", ".", "polygon", "(", "self", ".", "as_list", ",", "outline", "=", "outline", ",", "fill", "=", "fill", ")", "\n", "return", "annotated", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.bbox": [[358, 361], ["utils_CAR.BBox.from_polygon"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.BBox.from_polygon"], ["", "@", "property", "\n", "def", "bbox", "(", "self", ")", "->", "BBox", ":", "\n", "        ", "return", "BBox", ".", "from_polygon", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.__init__": [[371, 402], ["utils_CAR.CARInstance.is_valid_types", "isinstance", "utils_CAR.CARUniqueID", "utils_CAR.CARPolygon", "isinstance", "utils_CAR.CARPolygon", "open", "json.load", "attributes.items", "utils_CAR.cs_path", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.is_valid_types", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.load", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.cs_path"], ["def", "__init__", "(", "\n", "self", ",", "\n", "unique_id", ":", "t", ".", "Union", "[", "CARUniqueID", ",", "str", "]", ",", "\n", "category", ":", "str", ",", "\n", "polygon_annotations", ":", "t", ".", "Optional", "[", "\n", "t", ".", "Union", "[", "CARPolygon", ",", "t", ".", "Sequence", "[", "t", ".", "Union", "[", "t", ".", "Mapping", "[", "str", ",", "int", "]", ",", "CARPoint", "]", "]", "]", "\n", "]", ",", "\n", "attributes", ":", "t", ".", "Optional", "[", "t", ".", "Dict", "[", "str", ",", "t", ".", "Union", "[", "str", ",", "t", ".", "Sequence", "[", "str", "]", "]", "]", "]", ",", "\n", "_meta", ":", "t", ".", "Optional", "[", "t", ".", "Mapping", "[", "str", ",", "t", ".", "Any", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "unique_id", "=", "unique_id", "if", "isinstance", "(", "unique_id", ",", "CARUniqueID", ")", "else", "CARUniqueID", "(", "unique_id", ")", "\n", "self", ".", "category", "=", "category", "\n", "self", ".", "attributes", "=", "(", "\n", "{", "k", ":", "v", "[", "0", "]", "if", "isinstance", "(", "v", ",", "list", ")", "and", "len", "(", "v", ")", "==", "1", "else", "v", "for", "k", ",", "v", "in", "attributes", ".", "items", "(", ")", "}", "\n", "if", "attributes", "\n", "else", "None", "\n", ")", "\n", "self", ".", "_meta", "=", "_meta", "\n", "if", "polygon_annotations", ":", "\n", "            ", "self", ".", "polygon_annotations", "=", "(", "\n", "polygon_annotations", "\n", "if", "isinstance", "(", "polygon_annotations", ",", "CARPolygon", ")", "\n", "else", "CARPolygon", "(", "polygon_annotations", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "cs_path", "(", "self", ".", "unique_id", ".", "label_path", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "polygon_annotations", "=", "CARPolygon", "(", "\n", "points", "=", "data", "[", "\"objects\"", "]", "[", "self", ".", "unique_id", ".", "object_id", "]", "[", "\"polygon\"", "]", "\n", ")", "\n", "", "assert", "self", ".", "is_valid_types", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.is_valid_types": [[403, 416], ["isinstance", "type", "isinstance", "type", "isinstance", "isinstance", "utils_CAR.CARInstance.attributes.items", "isinstance", "isinstance", "type", "isinstance", "utils_CAR.CARInstance.attributes.update"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.type", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.type", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.type"], ["", "def", "is_valid_types", "(", "self", ")", "->", "bool", ":", "\n", "        ", "assert", "isinstance", "(", "self", ".", "unique_id", ",", "CARUniqueID", ")", ",", "type", "(", "self", ".", "unique_id", ")", "\n", "assert", "isinstance", "(", "self", ".", "category", ",", "str", ")", ",", "type", "(", "self", ".", "category", ")", "\n", "assert", "isinstance", "(", "self", ".", "polygon_annotations", ",", "CARPolygon", ")", ",", "self", ".", "polygon_annotations", "\n", "if", "self", ".", "attributes", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "attributes", ",", "t", ".", "Mapping", ")", ",", "self", ".", "attributes", "\n", "for", "k", ",", "v", "in", "self", ".", "attributes", ".", "items", "(", ")", ":", "\n", "                ", "assert", "isinstance", "(", "k", ",", "str", ")", ",", "type", "(", "k", ")", "\n", "if", "not", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                    ", "self", ".", "attributes", ".", "update", "(", "{", "k", ":", "\"Unclear\"", "}", ")", "\n", "", "", "", "if", "self", ".", "_meta", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "_meta", ",", "t", ".", "Mapping", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.__repr__": [[417, 420], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "f'CARInstance(unique_id=\"{self.unique_id.id}\", category=\"{self.category}\", '", "\n", "f\"polygon_annotations={self.polygon_annotations}, attributes={self.attributes})\"", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.json": [[423, 426], ["json.dumps"], "methods", ["None"], ["", "@", "property", "\n", "def", "json", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ".", "as_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.from_json": [[427, 432], ["json.loads", "utils_CAR.CARInstance", "utils_CAR.CARPolygon.from_json"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.from_json"], ["", "@", "staticmethod", "\n", "def", "from_json", "(", "text", ":", "str", ")", "->", "\"CARInstance\"", ":", "\n", "        ", "data", "=", "json", ".", "loads", "(", "text", ")", "\n", "data", "[", "\"polygon_annotations\"", "]", "=", "CARPolygon", ".", "from_json", "(", "data", "[", "\"polygon_annotations\"", "]", ")", ".", "points", "\n", "return", "CARInstance", "(", "**", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.from_task": [[433, 443], ["utils_CAR.CARInstance", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "from_task", "(", "task", ":", "Task", ")", "->", "\"CARInstance\"", ":", "\n", "        ", "assert", "task", ".", "status", "==", "TaskStatus", ".", "Completed", ".", "value", ",", "task", ".", "status", "\n", "assert", "len", "(", "task", ".", "params", "[", "\"layers\"", "]", "[", "\"polygons\"", "]", ")", "==", "1", ",", "task", ".", "params", "[", "\"layers\"", "]", "[", "\"polygons\"", "]", "\n", "return", "CARInstance", "(", "\n", "unique_id", "=", "task", ".", "metadata", "[", "\"unique_id\"", "]", ",", "\n", "category", "=", "task", ".", "params", "[", "\"layers\"", "]", "[", "\"polygons\"", "]", "[", "0", "]", "[", "\"label\"", "]", ",", "\n", "polygon_annotations", "=", "task", ".", "params", "[", "\"layers\"", "]", "[", "\"polygons\"", "]", "[", "0", "]", "[", "\"vertices\"", "]", ",", "\n", "attributes", "=", "task", ".", "response", "[", "\"taxonomies\"", "]", ",", "\n", "_meta", "=", "{", "\"task\"", ":", "task", ".", "_json", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.save": [[445, 449], ["os.makedirs", "os.path.dirname", "open", "json.dump"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "path", ":", "str", ",", "file_opts", ":", "str", "=", "\"w\"", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "path", ",", "file_opts", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "json", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.load": [[450, 455], ["utils_CAR.CARInstance.from_json", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.from_json", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.load"], ["", "", "@", "staticmethod", "\n", "def", "load", "(", "path", ":", "str", ")", "->", "\"CARInstance\"", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "CARInstance", ".", "from_json", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.as_dict": [[456, 467], ["out.update"], "methods", ["None"], ["", "@", "property", "\n", "def", "as_dict", "(", "self", ")", "->", "t", ".", "Dict", "[", "str", ",", "t", ".", "Any", "]", ":", "\n", "        ", "out", "=", "{", "\n", "\"unique_id\"", ":", "self", ".", "unique_id", ".", "id", ",", "\n", "\"polygon_annotations\"", ":", "self", ".", "polygon_annotations", ".", "as_dict", ",", "\n", "\"attributes\"", ":", "self", ".", "attributes", ",", "\n", "\"category\"", ":", "self", ".", "category", ",", "\n", "}", "\n", "if", "self", ".", "_meta", ":", "\n", "            ", "out", ".", "update", "(", "{", "\"_meta\"", ":", "self", ".", "_meta", "}", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.from_dict": [[468, 471], ["utils_CAR.CARInstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "from_dict", "(", "dct", ")", "->", "\"CARInstance\"", ":", "\n", "        ", "return", "CARInstance", "(", "**", "dct", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.generate_annotations": [[472, 506], ["utils_CAR.CARInstance.polygon_annotations.draw_over", "sum", "PIL.new", "PIL.new.paste", "PIL.ImageDraw.Draw", "textwrap.wrap", "PIL.ImageFont.truetype", "annotated.crop.crop.crop", "tuple", "str", "PIL.ImageDraw.Draw.text", "map", "PIL.ImageFont.truetype.getsize", "PIL.ImageFont.truetype.getsize", "textwrap.wrap", "zip", "str", "int"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.draw_over"], ["", "def", "generate_annotations", "(", "\n", "self", ",", "\n", "font_fill", ":", "t", ".", "Union", "[", "bool", ",", "t", ".", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", "]", "=", "True", ",", "\n", "outline", ":", "t", ".", "Union", "[", "bool", ",", "t", ".", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", "]", "=", "True", ",", "\n", "fill", ":", "t", ".", "Union", "[", "bool", ",", "t", ".", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", "]", "=", "False", ",", "\n", "font", ":", "ImageFont", ".", "FreeTypeFont", "=", "None", ",", "\n", "crop", ":", "bool", "=", "False", ",", "\n", ")", "->", "Image", ":", "\n", "        ", "if", "not", "font", ":", "\n", "            ", "font", "=", "ImageFont", ".", "truetype", "(", "\n", "\"Pillow/Tests/fonts/FreeMono.ttf\"", ",", "\n", "60", ",", "\n", ")", "\n", "\n", "", "annotated", "=", "self", ".", "polygon_annotations", ".", "draw_over", "(", "\n", "self", ".", "image_nocache", ",", "outline", "=", "outline", ",", "fill", "=", "fill", "\n", ")", "\n", "\n", "if", "crop", ":", "\n", "            ", "annotated", "=", "annotated", ".", "crop", "(", "self", ".", "polygon_annotations", ".", "bbox", ".", "as_pil", ")", "\n", "\n", "", "W", ",", "H", "=", "annotated", ".", "size", "\n", "required_offset", "=", "sum", "(", "\n", "font", ".", "getsize", "(", "line", ")", "[", "1", "]", "for", "line", "in", "textwrap", ".", "wrap", "(", "str", "(", "self", ".", "attributes", ")", ",", "width", "=", "W", ")", "\n", ")", "\n", "new_size", "=", "W", ",", "H", "+", "required_offset", "\n", "layer", "=", "Pil", ".", "new", "(", "\"RGB\"", ",", "new_size", ",", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "layer", ".", "paste", "(", "annotated", ",", "tuple", "(", "map", "(", "lambda", "x", ":", "int", "(", "(", "x", "[", "0", "]", "-", "x", "[", "1", "]", ")", "/", "2", ")", ",", "zip", "(", "new_size", ",", "(", "W", ",", "H", ")", ")", ")", ")", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "annotated", ",", "\"RGBA\"", ")", "\n", "offset", "=", "H", "\n", "for", "line", "in", "textwrap", ".", "wrap", "(", "str", "(", "self", ".", "attributes", ")", ",", "width", "=", "W", ")", ":", "\n", "            ", "draw", ".", "text", "(", "(", "0", ",", "H", "+", "offset", ")", ",", "line", ",", "fill", "=", "font_fill", ",", "font", "=", "font", ")", "\n", "offset", "+=", "font", ".", "getsize", "(", "line", ")", "[", "1", "]", "\n", "", "return", "annotated", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.instance_id": [[507, 510], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "instance_id", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "unique_id", ".", "object_id", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.image_path": [[511, 514], ["os.path.join", "utils_CAR.cs_path"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.cs_path"], ["", "@", "property", "\n", "def", "image_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "cs_path", "(", ")", ",", "self", ".", "unique_id", ".", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.label_path": [[515, 518], ["os.path.join", "utils_CAR.cs_path"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.cs_path"], ["", "@", "property", "\n", "def", "label_path", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "cs_path", "(", ")", ",", "self", ".", "unique_id", ".", "label_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.image": [[519, 526], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image", "(", "self", ")", "->", "Image", ":", "\n", "        ", "if", "self", ".", "_image", ":", "\n", "            ", "return", "self", ".", "_image", "\n", "", "else", ":", "\n", "            ", "self", ".", "_image", "=", "self", ".", "image_nocache", "\n", "return", "self", ".", "_image", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.image_nocache": [[527, 533], ["PIL.open().convert", "PIL.open"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "image_nocache", "(", "self", ")", "->", "Image", ":", "\n", "        ", "if", "self", ".", "_image", ":", "\n", "            ", "return", "self", ".", "_image", "\n", "", "else", ":", "\n", "            ", "return", "Pil", ".", "open", "(", "self", ".", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.image_size": [[534, 537], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "image_size", "(", "self", ")", "->", "Image", ".", "size", ":", "\n", "        ", "return", "self", ".", "image_nocache", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.binary_mask": [[538, 542], ["utils_CAR.CARInstance.polygon_annotations.generate_mask"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARPolygon.generate_mask"], ["", "@", "property", "\n", "def", "binary_mask", "(", "self", ")", "->", "Image", ":", "\n", "        ", "W", ",", "H", "=", "self", ".", "image_size", "\n", "return", "self", ".", "polygon_annotations", ".", "generate_mask", "(", "H", "=", "H", ",", "W", "=", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.mask_pixel_count": [[543, 546], ["numpy.asarray"], "methods", ["None"], ["", "@", "property", "\n", "def", "mask_pixel_count", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "(", "np", ".", "asarray", "(", "self", ".", "binary_mask", ")", "==", "1", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.instances_same_image": [[547, 566], ["utils_CAR.cs_path", "utils_CAR.CARInstances", "open", "utils_CAR.CARInstance", "json.load", "enumerate", "utils_CAR.CARUniqueID.construct", "taxonomy_CAR.CSMap", "utils_CAR.CARPoint"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.cs_path", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.load", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARUniqueID.construct"], ["", "@", "property", "\n", "def", "instances_same_image", "(", "self", ")", "->", "\"CARInstances\"", ":", "\n", "        ", "label_path", "=", "cs_path", "(", "self", ".", "unique_id", ".", "label_path", ")", "\n", "with", "open", "(", "label_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "objects", "=", "json", ".", "load", "(", "f", ")", "[", "\"objects\"", "]", "\n", "", "instances", "=", "[", "\n", "CARInstance", "(", "\n", "unique_id", "=", "CARUniqueID", ".", "construct", "(", "\n", "image_path", "=", "self", ".", "unique_id", ".", "image_path", ",", "\n", "label_path", "=", "self", ".", "unique_id", ".", "label_path", ",", "\n", "object_id", "=", "i", ",", "\n", ")", ",", "\n", "category", "=", "CSMap", "(", "obj", "[", "\"label\"", "]", ")", ",", "\n", "polygon_annotations", "=", "[", "CARPoint", "(", "x", "=", "p", "[", "0", "]", ",", "y", "=", "p", "[", "1", "]", ")", "for", "p", "in", "obj", "[", "\"polygon\"", "]", "]", ",", "\n", "attributes", "=", "None", ",", "\n", ")", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "objects", ")", "\n", "]", "\n", "return", "CARInstances", "(", "instances", "=", "instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.instances_matrix": [[567, 613], ["numpy.zeros", "numpy.all", "numpy.all", "numpy.all", "numpy.all", "numpy.all", "min", "min", "numpy.bitwise_or", "numpy.bitwise_and", "numpy.bitwise_and", "numpy.bitwise_or", "numpy.bitwise_or", "min", "min", "min", "min", "max", "min", "max", "min", "utils_CAR.TaxonomyCoDec.encode", "int", "int", "utils_CAR.TaxonomyCoDec"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.TaxonomyCoDec.encode"], ["", "def", "instances_matrix", "(", "self", ",", "scale", ":", "int", ")", "->", "npt", ".", "ArrayLike", ":", "\n", "        ", "\"\"\"returns 6 channels array [confidence, center_x, center_y, width, height, label]\"\"\"", "\n", "assert", "self", ".", "instances_same_image", "\n", "output", "=", "np", ".", "zeros", "(", "[", "6", ",", "scale", ",", "scale", "]", ")", "\n", "for", "instance", "in", "self", ".", "instances_same_image", ":", "\n", "            ", "left", ",", "upper", ",", "width", ",", "height", "=", "(", "\n", "scale", "*", "value", "for", "value", "in", "instance", ".", "polygon_annotations", ".", "bbox", ".", "left_upper_width_height", "\n", ")", "\n", "width", "=", "min", "(", "width", ",", "scale", ")", "\n", "height", "=", "min", "(", "height", ",", "scale", ")", "\n", "x", ",", "y", "=", "min", "(", "left", "+", "width", "/", "2", ",", "scale", ")", ",", "min", "(", "upper", "+", "height", "/", "2", ",", "scale", ")", "\n", "ix", ",", "iy", "=", "min", "(", "int", "(", "x", ")", ",", "scale", "-", "1", ")", ",", "min", "(", "int", "(", "y", ")", ",", "scale", "-", "1", ")", "\n", "if", "output", "[", "0", ",", "iy", ",", "ix", "]", "==", "1", ":", "\n", "# if we already marked this cell for an instance, compare between them and take the one with the highest area overlap", "\n", "                ", "current_x", ",", "current_y", "=", "output", "[", "1", ",", "iy", ",", "ix", "]", ",", "output", "[", "2", ",", "iy", ",", "ix", "]", "\n", "current_width", ",", "current_height", "=", "output", "[", "3", ",", "iy", ",", "ix", "]", ",", "output", "[", "4", ",", "iy", ",", "ix", "]", "\n", "left_overlap_current", "=", "(", "current_x", "-", "current_width", "/", "2", ")", ".", "clip", "(", "min", "=", "0", ")", "\n", "right_overlap_current", "=", "(", "current_x", "+", "current_width", "/", "2", ")", ".", "clip", "(", "max", "=", "1", ")", "\n", "upper_overlap_current", "=", "(", "current_y", "-", "current_height", "/", "2", ")", ".", "clip", "(", "min", "=", "0", ")", "\n", "lower_overlap_current", "=", "(", "current_y", "+", "current_height", "/", "2", ")", ".", "clip", "(", "max", "=", "1", ")", "\n", "left_overlap_new", "=", "max", "(", "x", "-", "ix", "-", "width", "/", "2", ",", "0", ")", "\n", "right_overlap_new", "=", "min", "(", "x", "-", "ix", "+", "width", "/", "2", ",", "1", ")", "\n", "upper_overlap_new", "=", "max", "(", "y", "-", "iy", "-", "height", "/", "2", ",", "0", ")", "\n", "lower_overlap_new", "=", "min", "(", "y", "-", "iy", "+", "height", "/", "2", ",", "1", ")", "\n", "area_current", "=", "(", "right_overlap_current", "-", "left_overlap_current", ")", "*", "(", "\n", "lower_overlap_current", "-", "upper_overlap_current", "\n", ")", "\n", "area_new", "=", "(", "right_overlap_new", "-", "left_overlap_new", ")", "*", "(", "\n", "lower_overlap_new", "-", "upper_overlap_new", "\n", ")", "\n", "if", "area_new", "<", "area_current", ":", "# do not overwrite", "\n", "                    ", "continue", "\n", "", "", "output", "[", "0", ",", "iy", ",", "ix", "]", "=", "1", "# Confidence Score", "\n", "output", "[", "1", ",", "iy", ",", "ix", "]", "=", "x", "-", "ix", "# relative center x to that cell", "\n", "output", "[", "2", ",", "iy", ",", "ix", "]", "=", "y", "-", "iy", "# relative center y to that cell", "\n", "output", "[", "3", ",", "iy", ",", "ix", "]", "=", "width", "# relative width", "\n", "output", "[", "4", ",", "iy", ",", "ix", "]", "=", "height", "# relative height", "\n", "output", "[", "5", ",", "iy", ",", "ix", "]", "=", "TaxonomyCoDec", "(", ")", ".", "encode", "(", "instance", "=", "(", "instance", ".", "category", ",", "None", ")", ")", "[", "\n", "0", "\n", "]", "# Category ID", "\n", "", "assert", "np", ".", "all", "(", "np", ".", "bitwise_or", "(", "output", "[", "0", "]", "==", "0", ",", "output", "[", "0", "]", "==", "1", ")", ")", ",", "output", "[", "0", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "bitwise_and", "(", "0", "<=", "output", "[", "1", "]", ",", "output", "[", "1", "]", "<=", "1", ")", ")", ",", "output", "[", "1", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "bitwise_and", "(", "0", "<=", "output", "[", "2", "]", ",", "output", "[", "2", "]", "<=", "1", ")", ")", ",", "output", "[", "2", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "bitwise_or", "(", "output", "[", "0", "]", "==", "0", ",", "output", "[", "3", "]", ">", "0", ")", ")", ",", "output", "[", "3", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "bitwise_or", "(", "output", "[", "0", "]", "==", "0", ",", "output", "[", "4", "]", ">", "0", ")", ")", ",", "output", "[", "4", "]", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.attributes_vectorized": [[614, 618], ["utils_CAR.TaxonomyCoDec", "utils_CAR.TaxonomyCoDec.encode"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.TaxonomyCoDec.encode"], ["", "@", "property", "\n", "def", "attributes_vectorized", "(", "self", ")", ":", "\n", "        ", "codec", "=", "TaxonomyCoDec", "(", ")", "\n", "return", "codec", ".", "encode", "(", "self", ",", "return_vector", "=", "True", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.__add__": [[619, 626], ["isinstance", "utils_CAR.CARInstances", "isinstance", "utils_CAR.CARInstances"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", "->", "\"CARInstances\"", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "CARInstance", ")", ":", "\n", "            ", "return", "CARInstances", "(", "instances", "=", "[", "self", ",", "other", "]", ")", "\n", "", "elif", "isinstance", "(", "other", ",", "CARInstances", ")", ":", "\n", "            ", "return", "CARInstances", "(", "instances", "=", "[", "self", ",", "*", "other", ".", "instances", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.__radd__": [[627, 636], ["isinstance", "utils_CAR.CARInstances", "isinstance", "utils_CAR.CARInstances"], "methods", ["None"], ["", "", "def", "__radd__", "(", "self", ",", "other", ")", "->", "t", ".", "Union", "[", "\"CARInstance\"", ",", "\"CARInstances\"", "]", ":", "\n", "        ", "if", "other", "==", "0", ":", "\n", "            ", "return", "self", "\n", "", "if", "isinstance", "(", "other", ",", "CARInstance", ")", ":", "\n", "            ", "return", "CARInstances", "(", "instances", "=", "[", "self", ",", "other", "]", ")", "\n", "", "elif", "isinstance", "(", "other", ",", "CARInstances", ")", ":", "\n", "            ", "return", "CARInstances", "(", "instances", "=", "[", "self", ",", "*", "other", ".", "instances", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.__eq__": [[637, 639], ["None"], "methods", ["None"], ["", "", "def", "__eq__", "(", "self", ",", "other", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "unique_id", "==", "other", ".", "unique_id", "and", "self", ".", "attributes", "==", "self", ".", "attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.__init__": [[644, 646], ["list"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "instances", ":", "t", ".", "Optional", "[", "t", ".", "Iterable", "[", "CARInstance", "]", "]", "=", "None", ")", ":", "\n", "        ", "self", ".", "instances", "=", "list", "(", "instances", ")", "if", "instances", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.__iter__": [[647, 650], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", "->", "CARInstance", ":", "\n", "        ", "for", "instance", "in", "self", ".", "instances", ":", "\n", "            ", "yield", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.__getitem__": [[651, 658], ["isinstance", "isinstance", "utils_CAR.CARInstances", "TypeError", "type", "range", "item.indices", "len"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.type"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ":", "t", ".", "Union", "[", "int", ",", "slice", "]", ")", "->", "t", ".", "Union", "[", "CARInstance", ",", "\"CARInstances\"", "]", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "return", "self", ".", "instances", "[", "item", "]", "\n", "", "elif", "isinstance", "(", "item", ",", "slice", ")", ":", "\n", "            ", "return", "CARInstances", "(", "instances", "=", "[", "self", "[", "idx", "]", "for", "idx", "in", "range", "(", "*", "item", ".", "indices", "(", "len", "(", "self", ")", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "f\"{item} with {type(item)} is invalid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.__len__": [[659, 661], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.__repr__": [[662, 671], ["len", "len", "[].replace", "os.path.splitext", "os.path.basename"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "s", "=", "[", "\n", "f'{os.path.splitext(os.path.basename(instance.unique_id.label_path))[0].replace(\"_polygons\", \"\")}::{instance.unique_id.object_id}'", "\n", "for", "instance", "in", "self", "\n", "]", "\n", "if", "len", "(", "s", ")", ">", "8", ":", "\n", "            ", "s", "=", "s", "[", ":", "3", "]", "+", "[", "\"...\"", "]", "+", "s", "[", "-", "3", ":", "]", "\n", "", "s", "=", "\", \"", ".", "join", "(", "s", ")", "\n", "return", "f\"CARInstances[{len(self)}]({s})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.get_instances": [[672, 677], ["isinstance", "isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_instances", "(", "other", ":", "t", ".", "Union", "[", "CARInstance", ",", "\"CARInstances\"", ",", "t", ".", "Sequence", "[", "CARInstance", "]", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "CARInstance", ")", ":", "\n", "            ", "other", "=", "[", "other", "]", "\n", "", "return", "other", ".", "instances", "if", "isinstance", "(", "other", ",", "CARInstances", ")", "else", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.__add__": [[678, 682], ["utils_CAR.CARInstances", "utils_CAR.CARInstances.get_instances"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.get_instances"], ["", "def", "__add__", "(", "\n", "self", ",", "other", ":", "t", ".", "Union", "[", "CARInstance", ",", "\"CARInstances\"", ",", "t", ".", "Sequence", "[", "CARInstance", "]", "]", "\n", ")", "->", "\"CARInstances\"", ":", "\n", "        ", "return", "CARInstances", "(", "instances", "=", "self", ".", "instances", "+", "self", ".", "get_instances", "(", "other", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.__radd__": [[683, 690], ["utils_CAR.CARInstances.instances.extend", "utils_CAR.CARInstances.get_instances"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.get_instances"], ["", "def", "__radd__", "(", "\n", "self", ",", "other", ":", "t", ".", "Union", "[", "CARInstance", ",", "\"CARInstances\"", ",", "t", ".", "Sequence", "[", "CARInstance", "]", "]", "\n", ")", "->", "\"CARInstances\"", ":", "\n", "        ", "if", "not", "other", ":", "\n", "            ", "return", "self", "\n", "", "self", ".", "instances", ".", "extend", "(", "self", ".", "get_instances", "(", "other", ")", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.__eq__": [[691, 698], ["len", "len", "all", "zip"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", "->", "bool", ":", "\n", "        ", "if", "len", "(", "self", ")", "==", "len", "(", "other", ")", ":", "\n", "            ", "return", "all", "(", "\n", "self_instance", "==", "other_instance", "\n", "for", "self_instance", ",", "other_instance", "in", "zip", "(", "self", ".", "instances", ",", "other", ".", "instances", ")", "\n", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.from_json": [[699, 703], ["utils_CAR.CARInstances", "utils_CAR.CARInstance.from_dict"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstance.from_dict"], ["", "@", "staticmethod", "\n", "def", "from_json", "(", "text", ":", "str", ")", "->", "\"CARInstances\"", ":", "\n", "        ", "instances", "=", "[", "CARInstance", ".", "from_dict", "(", "d", ")", "for", "d", "in", "text", "]", "\n", "return", "CARInstances", "(", "instances", "=", "instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.json": [[704, 707], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "json", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"[\\n\"", "+", "\",\\n\"", ".", "join", "(", "[", "instance", ".", "json", "for", "instance", "in", "self", "]", ")", "+", "\"\\n]\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.load": [[708, 713], ["utils_CAR.CARInstances.from_json", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.from_json", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.load"], ["", "@", "staticmethod", "\n", "def", "load", "(", "path", ":", "str", ")", "->", "\"CARInstances\"", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "CARInstances", ".", "from_json", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.save": [[714, 717], ["open", "f.write"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "path", ":", "str", ")", "->", "t", ".", "NoReturn", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "self", ".", "json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.images_paths": [[718, 720], ["set"], "methods", ["None"], ["", "", "def", "images_paths", "(", "self", ")", "->", "t", ".", "Set", "[", "str", "]", ":", "\n", "        ", "return", "set", "(", "[", "instance", ".", "image_path", "for", "instance", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.filter": [[721, 738], ["isinstance", "utils_CAR.CARInstances", "attribute.items"], "methods", ["None"], ["", "def", "filter", "(", "\n", "self", ",", "\n", "category", ":", "t", ".", "Union", "[", "str", ",", "t", ".", "Collection", "[", "str", "]", "]", ",", "\n", "attribute", ":", "t", ".", "Optional", "[", "t", ".", "Mapping", "[", "str", ",", "str", "]", "]", "=", "None", ",", "\n", ")", "->", "\"CARInstances\"", ":", "\n", "        ", "if", "isinstance", "(", "category", ",", "str", ")", ":", "\n", "            ", "category", "=", "[", "category", "]", "\n", "", "instances", "=", "(", "instance", "for", "instance", "in", "self", "if", "instance", ".", "category", "in", "category", ")", "\n", "\n", "if", "attribute", ":", "\n", "            ", "for", "name", ",", "value", "in", "attribute", ".", "items", "(", ")", ":", "\n", "                ", "instances", "=", "(", "instance", "for", "instance", "in", "instances", "if", "name", "in", "instance", ".", "attributes", ")", "\n", "instances", "=", "(", "\n", "instance", "for", "instance", "in", "instances", "if", "instance", ".", "attributes", "[", "name", "]", "==", "value", "\n", ")", "\n", "\n", "", "", "return", "CARInstances", "(", "instances", "=", "instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.shuffle": [[739, 745], ["random.shuffle", "utils_CAR.CARInstances", "random.sample", "len"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.shuffle"], ["", "def", "shuffle", "(", "self", ",", "in_place", ":", "bool", "=", "False", ")", "->", "\"CARInstances\"", ":", "\n", "        ", "if", "in_place", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "instances", ")", "\n", "return", "self", "\n", "", "else", ":", "\n", "            ", "return", "CARInstances", "(", "random", ".", "sample", "(", "self", ".", "instances", ",", "len", "(", "self", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.CARInstances.split_by_images": [[746, 754], ["utils_CAR.CARInstances"], "methods", ["None"], ["", "", "def", "split_by_images", "(", "self", ")", "->", "t", ".", "Dict", "[", "str", ",", "\"CARInstances\"", "]", ":", "\n", "        ", "images_paths", "=", "{", "}", "\n", "for", "instance", "in", "self", ".", "instances", ":", "\n", "            ", "if", "instance", ".", "image_path", "in", "images_paths", ":", "\n", "                ", "images_paths", "[", "instance", ".", "image_path", "]", "+=", "instance", "\n", "", "else", ":", "\n", "                ", "images_paths", "[", "instance", ".", "image_path", "]", "=", "CARInstances", "(", "[", "]", ")", "\n", "", "", "return", "images_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.TaxonomyCoDec.__init__": [[762, 777], ["utils_CAR.TaxonomyCoDec.categories_map.append", "utils_CAR.TaxonomyCoDec.attributes_vector_lengths.update"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "categories_map", "=", "[", "category", ".", "name", "for", "category", "in", "TAXONOMY", "]", "\n", "self", ".", "attributes_vector_lengths", "=", "{", "\n", "category", ".", "name", ":", "category", ".", "attributes", ".", "vector_length", "for", "category", "in", "TAXONOMY", "\n", "}", "\n", "self", ".", "attributes_combinations", "=", "{", "\n", "category", ".", "name", ":", "category", ".", "attributes", ".", "n_combinations", "for", "category", "in", "TAXONOMY", "\n", "}", "\n", "self", ".", "categories_map", ".", "append", "(", "\"unknown\"", ")", "\n", "self", ".", "attributes_vector_lengths", ".", "update", "(", "{", "\"unknown\"", ":", "0", "}", ")", "\n", "self", ".", "attributes_set", "=", "[", "\n", "f\"{category.name}::{attribute.name}::{value}\"", "\n", "for", "category", "in", "TAXONOMY", "\n", "for", "attribute", "in", "category", ".", "attributes", "\n", "for", "value", "in", "attribute", ".", "value", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.TaxonomyCoDec.n_categories": [[779, 782], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_categories", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "categories_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.TaxonomyCoDec.n_attributes": [[783, 786], ["sum", "utils_CAR.TaxonomyCoDec.category_length"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.TaxonomyCoDec.category_length"], ["", "@", "property", "\n", "def", "n_attributes", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "sum", "(", "self", ".", "category_length", "(", "category", ")", "for", "category", "in", "self", ".", "categories_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.TaxonomyCoDec.category_length": [[787, 791], ["isinstance", "utils_CAR.TaxonomyCoDec.decode"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.TaxonomyCoDec.decode"], ["", "def", "category_length", "(", "self", ",", "category", ":", "t", ".", "Union", "[", "str", ",", "int", "]", ")", "->", "int", ":", "\n", "        ", "if", "isinstance", "(", "category", ",", "int", ")", ":", "\n", "            ", "category", "=", "self", ".", "decode", "(", "category", ",", "attributes", "=", "None", ")", "\n", "", "return", "self", ".", "attributes_vector_lengths", "[", "category", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.TaxonomyCoDec.encode": [[792, 831], ["isinstance", "utils_CAR.TaxonomyCoDec.categories_map.index", "EncodedTuple", "attributes.items", "attributes.items", "instance.attributes.items", "taxonomy_CAR.TAXONOMY.fetch", "taxonomy_CAR.TAXONOMY.fetch.value_to_index", "taxonomy_CAR.TAXONOMY.fetch", "taxonomy_CAR.TAXONOMY.fetch.value_to_index", "range"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.fetch", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.value_to_index", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.fetch", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.value_to_index"], ["", "def", "encode", "(", "\n", "self", ",", "\n", "instance", ":", "t", ".", "Union", "[", "CARInstance", ",", "t", ".", "Tuple", "[", "str", ",", "t", ".", "Optional", "[", "t", ".", "Mapping", "[", "str", ",", "str", "]", "]", "]", "]", ",", "\n", "return_vector", ":", "bool", "=", "False", ",", "\n", ")", "->", "EncodedTuple", ":", "\n", "        ", "if", "isinstance", "(", "instance", ",", "CARInstance", ")", ":", "\n", "            ", "category_name", "=", "instance", ".", "category", "\n", "attributes", "=", "{", "\n", "attr_name", ":", "attr_val", "for", "attr_name", ",", "attr_val", "in", "instance", ".", "attributes", ".", "items", "(", ")", "\n", "}", "\n", "", "else", ":", "\n", "            ", "category_name", "=", "instance", "[", "0", "]", "\n", "attributes", "=", "instance", "[", "1", "]", "\n", "", "category_idx", "=", "self", ".", "categories_map", ".", "index", "(", "category_name", ")", "\n", "\n", "if", "attributes", ":", "\n", "            ", "if", "return_vector", ":", "\n", "                ", "attribute_level", "=", "0", "\n", "attributes_index", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "attributes_vector_lengths", "[", "category_name", "]", ")", "]", "\n", "for", "attribute_name", ",", "attribute_value", "in", "attributes", ".", "items", "(", ")", ":", "\n", "                    ", "attribute_taxonomy", "=", "TAXONOMY", ".", "fetch", "(", "\n", "category", "=", "category_name", ",", "attribute", "=", "attribute_name", "\n", ")", "\n", "attribute_idx", "=", "attribute_taxonomy", ".", "value_to_index", "(", "attribute_value", ")", "\n", "attributes_index", "[", "attribute_idx", "+", "attribute_level", "]", "=", "1", "\n", "attribute_level", "+=", "attribute_taxonomy", ".", "n_values", "\n", "", "", "else", ":", "\n", "                ", "attributes_index", "=", "0", "\n", "attributes_level", "=", "1", "\n", "for", "attribute_name", ",", "attribute_value", "in", "attributes", ".", "items", "(", ")", ":", "\n", "                    ", "attribute_taxonomy", "=", "TAXONOMY", ".", "fetch", "(", "\n", "category", "=", "category_name", ",", "attribute", "=", "attribute_name", "\n", ")", "\n", "attribute_idx", "=", "attribute_taxonomy", ".", "value_to_index", "(", "attribute_value", ")", "\n", "attributes_index", "+=", "attributes_level", "*", "attribute_idx", "\n", "attributes_level", "*=", "attribute_taxonomy", ".", "n_values", "\n", "", "", "", "else", ":", "\n", "            ", "attributes_index", "=", "None", "\n", "", "return", "EncodedTuple", "(", "Category", "=", "category_idx", ",", "Attributes", "=", "attributes_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.TaxonomyCoDec.decode": [[832, 865], ["type", "type", "isinstance", "reversed", "isinstance", "taxonomy_CAR.TAXONOMY.fetch", "int", "mapping.update", "reversed", "int", "taxonomy_CAR.TAXONOMY.fetch", "mapping.update", "attribute.index_to_value", "len", "len", "enumerate", "attribute.index_to_value"], "methods", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.type", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.type", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.fetch", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.CompleteTaxonomy.fetch", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.index_to_value", "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributeTaxonomy.index_to_value"], ["", "def", "decode", "(", "\n", "self", ",", "category", ":", "type", "(", "EncodedTuple", ".", "Category", ")", ",", "attributes", ":", "type", "(", "EncodedTuple", ".", "Attributes", ")", "\n", ")", "->", "t", ".", "Tuple", "[", "str", ",", "t", ".", "Optional", "[", "t", ".", "Dict", "[", "str", ",", "str", "]", "]", "]", ":", "\n", "        ", "category", "=", "self", ".", "categories_map", "[", "category", "]", "\n", "mapping", "=", "{", "}", "\n", "if", "attributes", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "attributes", ",", "int", ")", ":", "\n", "                ", "attributes_tax", "=", "TAXONOMY", ".", "fetch", "(", "category", "=", "category", ")", ".", "attributes", "\n", "attributes_level", "=", "attributes_tax", ".", "n_combinations", "\n", "for", "attribute", "in", "reversed", "(", "attributes_tax", ")", ":", "\n", "                    ", "attributes_level", "=", "attributes_level", "/", "attribute", ".", "n_values", "\n", "assert", "attributes_level", "==", "int", "(", "attributes_level", ")", "\n", "attribute_idx", "=", "int", "(", "attributes", "/", "attributes_level", ")", "\n", "attributes", "-=", "attribute_idx", "*", "attributes_level", "\n", "mapping", ".", "update", "(", "{", "attribute", ".", "name", ":", "attribute", ".", "index_to_value", "(", "attribute_idx", ")", "}", ")", "\n", "", "assert", "attributes_level", "==", "1", "\n", "", "elif", "isinstance", "(", "attributes", ",", "t", ".", "Collection", ")", ":", "\n", "                ", "attributes_tax", "=", "TAXONOMY", ".", "fetch", "(", "category", "=", "category", ")", ".", "attributes", "\n", "attributes_level", "=", "attributes_tax", ".", "vector_length", "\n", "for", "attribute", "in", "reversed", "(", "attributes_tax", ")", ":", "\n", "                    ", "attributes_level", "-=", "attribute", ".", "n_values", "\n", "attribute_idx", "=", "[", "\n", "i", "for", "i", ",", "v", "in", "enumerate", "(", "attributes", "[", "attributes_level", ":", "]", ")", "if", "v", "==", "1", "\n", "]", "\n", "assert", "len", "(", "attribute_idx", ")", "==", "1", ",", "attributes", "[", "attributes_level", ":", "]", "\n", "mapping", ".", "update", "(", "{", "attribute", ".", "name", ":", "attribute", ".", "index_to_value", "(", "attribute_idx", "[", "0", "]", ")", "}", ")", "\n", "attributes", "=", "attributes", "[", ":", "attributes_level", "]", "\n", "", "assert", "attributes_level", "==", "0", "and", "len", "(", "attributes", ")", "==", "0", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "return", "(", "\n", "category", ",", "\n", "mapping", "if", "mapping", "is", "not", "None", "else", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.cs_path": [[55, 61], ["os.path.join"], "function", ["None"], ["def", "cs_path", "(", "rel_path", ":", "t", ".", "Optional", "[", "str", "]", "=", "None", ")", "->", "str", ":", "\n", "    ", "assert", "\"CITYSCAPES_DATASET\"", "in", "os", ".", "environ", "\n", "path", "=", "os", ".", "environ", "[", "\"CITYSCAPES_DATASET\"", "]", "\n", "if", "rel_path", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "rel_path", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.attributes_path": [[63, 67], ["utils_CAR.cs_path"], "function", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.cs_path"], ["", "def", "attributes_path", "(", "rel_path", ":", "t", ".", "Optional", "[", "str", "]", "=", "None", ")", "->", "str", ":", "\n", "    ", "rel_path", "=", "rel_path", "if", "rel_path", "else", "\"\"", "\n", "rel_path", "=", "\"attributes/\"", "+", "rel_path", "\n", "return", "cs_path", "(", "rel_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.utils_CAR.images_crop": [[69, 130], ["isinstance", "max", "math.floor", "math.floor", "math.ceil", "math.ceil", "min", "min", "cropped.append", "min", "warnings.warn", "min", "min", "image.crop", "ValueError", "min", "min"], "function", ["home.repos.pwc.inspect_result.kareem-metwaly_car-api.None.taxonomy_CAR.AttributesList.append"], ["", "def", "images_crop", "(", "\n", "images", ":", "t", ".", "Sequence", "[", "Image", "]", ",", "\n", "bbox", ":", "t", ".", "Union", "[", "t", ".", "Tuple", "[", "float", ",", "float", ",", "float", ",", "float", "]", ",", "\"BBox\"", "]", ",", "\n", "keep_square", ":", "bool", ",", "\n", ")", "->", "t", ".", "List", "[", "Image", "]", ":", "\n", "    ", "\"\"\"\n    Crops the images using the bounding box information. It crops a square with length depending on the longer dimension (width or height).\n    Args:\n        images (t.Sequence[Image]): list of images to be cropped with bbox info, they should have the same size\n        bbox (t.Union[t.Tuple[float, float, float, float], \"BBox\"]): bbox information (left, upper, width, height)\n        keep_square (bool = False): used to try to preserve the cropped_image to be squared. If not set, the cropped image might be distorted when it's resized and fed to the CNN\n    Returns:\n        t.Tuple[Image, Image]: the cropped square image and its binary mask\n    \"\"\"", "\n", "if", "isinstance", "(", "bbox", ",", "BBox", ")", ":", "\n", "        ", "left", ",", "upper", ",", "width", ",", "height", "=", "bbox", ".", "left_upper_width_height", "\n", "", "else", ":", "\n", "        ", "left", ",", "upper", ",", "width", ",", "height", "=", "bbox", "\n", "", "left", ",", "upper", "=", "math", ".", "floor", "(", "left", ")", ",", "math", ".", "floor", "(", "upper", ")", "\n", "width", ",", "height", "=", "math", ".", "ceil", "(", "width", ")", ",", "math", ".", "ceil", "(", "height", ")", "\n", "# create a square around the instance with side length", "\n", "length", "=", "max", "(", "width", ",", "height", ")", "\n", "image_width", ",", "image_height", "=", "images", "[", "0", "]", ".", "size", "\n", "\n", "if", "keep_square", ":", "\n", "# TODO: deal with images where we can't keep aspect ratio (currently, we resize - destroying aspect ratio)", "\n", "        ", "if", "length", ">", "min", "(", "image_width", ",", "image_height", ")", ":", "\n", "            ", "is_square", "=", "False", "\n", "warnings", ".", "warn", "(", "\"messing with aspect ratio\"", ")", "\n", "if", "height", ">", "width", ":", "\n", "                ", "left", "=", "0", "\n", "right", "=", "image_width", "-", "1", "\n", "lower", "=", "min", "(", "upper", "+", "height", ",", "image_height", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "upper", "=", "0", "\n", "lower", "=", "image_height", "-", "1", "\n", "right", "=", "min", "(", "left", "+", "width", ",", "image_width", "-", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "is_square", "=", "True", "\n", "lower", "=", "min", "(", "upper", "+", "length", ",", "image_height", "-", "1", ")", "\n", "right", "=", "min", "(", "left", "+", "length", ",", "image_width", "-", "1", ")", "\n", "# the cropped region may not yet be square so we update upper and left just in case", "\n", "upper", "=", "lower", "-", "length", "\n", "left", "=", "right", "-", "length", "\n", "", "", "else", ":", "\n", "        ", "is_square", "=", "False", "\n", "lower", "=", "min", "(", "upper", "+", "height", ",", "image_height", ")", "\n", "right", "=", "min", "(", "left", "+", "width", ",", "image_width", ")", "\n", "\n", "", "cropped", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "        ", "assert", "image", ".", "size", "==", "(", "\n", "image_width", ",", "\n", "image_height", ",", "\n", ")", ",", "f\"{image.size} != {image_width, image_height}\"", "\n", "cropped", ".", "append", "(", "image", ".", "crop", "(", "(", "left", ",", "upper", ",", "right", ",", "lower", ")", ")", ")", "\n", "h", ",", "w", "=", "cropped", "[", "-", "1", "]", ".", "size", "\n", "if", "h", "!=", "w", "and", "is_square", ":", "\n", "            ", "raise", "ValueError", "(", "f\"output cropped image should be square, {h} & {w}\"", ")", "\n", "\n", "", "", "return", "cropped", "\n", "\n"]]}