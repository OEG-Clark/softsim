{"home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.test_enhance_single_unalign.detect_and_align_faces": [[18, 47], ["face_detector", "numpy.load", "len", "isinstance", "lmk_predictor", "range", "numpy.array", "skimage.transform.SimilarityTransform", "trans.SimilarityTransform.estimate", "skimage.transform.warp", "aligned_faces.append", "tform_params.append", "print", "np.array.append", "rec.width", "rec.height", "lmk_predictor.part", "lmk_predictor.part"], "function", ["None"], ["def", "detect_and_align_faces", "(", "img", ",", "face_detector", ",", "lmk_predictor", ",", "template_path", ",", "template_scale", "=", "2", ",", "size_threshold", "=", "999", ")", ":", "\n", "    ", "align_out_size", "=", "(", "512", ",", "512", ")", "\n", "ref_points", "=", "np", ".", "load", "(", "template_path", ")", "/", "template_scale", "\n", "\n", "# Detect landmark points", "\n", "face_dets", "=", "face_detector", "(", "img", ",", "1", ")", "\n", "assert", "len", "(", "face_dets", ")", ">", "0", ",", "'No faces detected'", "\n", "\n", "aligned_faces", "=", "[", "]", "\n", "tform_params", "=", "[", "]", "\n", "for", "det", "in", "face_dets", ":", "\n", "        ", "if", "isinstance", "(", "face_detector", ",", "dlib", ".", "cnn_face_detection_model_v1", ")", ":", "\n", "            ", "rec", "=", "det", ".", "rect", "# for cnn detector", "\n", "", "else", ":", "\n", "            ", "rec", "=", "det", "\n", "", "if", "rec", ".", "width", "(", ")", ">", "size_threshold", "or", "rec", ".", "height", "(", ")", ">", "size_threshold", ":", "\n", "            ", "print", "(", "'Face is too large'", ")", "\n", "break", "\n", "", "landmark_points", "=", "lmk_predictor", "(", "img", ",", "rec", ")", "\n", "single_points", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "single_points", ".", "append", "(", "[", "landmark_points", ".", "part", "(", "i", ")", ".", "x", ",", "landmark_points", ".", "part", "(", "i", ")", ".", "y", "]", ")", "\n", "", "single_points", "=", "np", ".", "array", "(", "single_points", ")", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "single_points", ",", "ref_points", ")", "\n", "tmp_face", "=", "trans", ".", "warp", "(", "img", ",", "tform", ".", "inverse", ",", "output_shape", "=", "align_out_size", ",", "order", "=", "3", ")", "\n", "aligned_faces", ".", "append", "(", "tmp_face", "*", "255", ")", "\n", "tform_params", ".", "append", "(", "tform", ")", "\n", "", "return", "[", "aligned_faces", ",", "tform_params", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.test_enhance_single_unalign.def_models": [[49, 54], ["models.create_model", "models.create_model.load_pretrain_model", "models.create_model.netG.to"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.__init__.create_model", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet_model.SPARNetModel.load_pretrain_model"], ["", "def", "def_models", "(", "opt", ")", ":", "\n", "    ", "model", "=", "create_model", "(", "opt", ")", "\n", "model", ".", "load_pretrain_model", "(", ")", "\n", "model", ".", "netG", ".", "to", "(", "opt", ".", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.test_enhance_single_unalign.enhance_faces": [[56, 66], ["tqdm.tqdm", "hq_faces.append", "torch.no_grad", "lq_tensor.unsqueeze().float().to.unsqueeze().float().to", "model.netG", "utils.utils.tensor_to_img", "lq_tensor.unsqueeze().float().to.unsqueeze().float", "torch.tensor", "lq_face.transpose", "lq_tensor.unsqueeze().float().to.unsqueeze"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.tensor_to_img"], ["", "def", "enhance_faces", "(", "LQ_faces", ",", "model", ")", ":", "\n", "    ", "hq_faces", "=", "[", "]", "\n", "lq_parse_maps", "=", "[", "]", "\n", "for", "lq_face", "in", "tqdm", "(", "LQ_faces", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "lq_tensor", "=", "torch", ".", "tensor", "(", "lq_face", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "/", "255.", "*", "2", "-", "1", "\n", "lq_tensor", "=", "lq_tensor", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ".", "to", "(", "model", ".", "device", ")", "\n", "output_SR", "=", "model", ".", "netG", "(", "lq_tensor", ")", "\n", "", "hq_faces", ".", "append", "(", "utils", ".", "tensor_to_img", "(", "output_SR", ",", "normal", "=", "True", ")", ")", "\n", "", "return", "hq_faces", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.test_enhance_single_unalign.past_faces_back": [[68, 81], ["cv2.resize", "tqdm.tqdm", "cv2.resize.astype", "zip", "cv2.blur", "int", "int", "len", "skimage.transform.warp", "cv2.blur.astype", "int", "int"], "function", ["None"], ["", "def", "past_faces_back", "(", "img", ",", "hq_faces", ",", "tform_params", ",", "upscale", "=", "1", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "int", "(", "w", "*", "upscale", ")", ",", "int", "(", "h", "*", "upscale", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "for", "hq_img", ",", "tform", "in", "tqdm", "(", "zip", "(", "hq_faces", ",", "tform_params", ")", ",", "total", "=", "len", "(", "hq_faces", ")", ")", ":", "\n", "        ", "tform", ".", "params", "[", "0", ":", "2", ",", "0", ":", "2", "]", "/=", "upscale", "\n", "back_img", "=", "trans", ".", "warp", "(", "hq_img", "/", "255.", ",", "tform", ",", "output_shape", "=", "[", "int", "(", "h", "*", "upscale", ")", ",", "int", "(", "w", "*", "upscale", ")", "]", ",", "order", "=", "3", ")", "*", "255", "\n", "\n", "# blur mask to avoid border artifacts", "\n", "mask", "=", "(", "back_img", "==", "0", ")", "\n", "mask", "=", "cv2", ".", "blur", "(", "mask", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "5", ",", "5", ")", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", "\n", "img", "=", "img", "*", "mask", "+", "(", "1", "-", "mask", ")", "*", "back_img", "\n", "", "return", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.test_enhance_single_unalign.save_imgs": [[83, 87], ["enumerate", "os.path.join", "skimage.io.imsave", "img.astype"], "function", ["None"], ["", "def", "save_imgs", "(", "img_list", ",", "save_dir", ")", ":", "\n", "    ", "for", "idx", ",", "img", "in", "enumerate", "(", "img_list", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{:03d}.jpg'", ".", "format", "(", "idx", ")", ")", "\n", "io", ".", "imsave", "(", "save_path", ",", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.psnr_ssim.rgb2y_matlab": [[6, 20], ["Y.astype", "numpy.array", "numpy.matmul", "numpy.np.float", "numpy.np.float"], "function", ["None"], ["def", "rgb2y_matlab", "(", "x", ")", ":", "\n", "    ", "\"\"\"Convert RGB image to illumination Y in Ycbcr space in matlab way.\n    -------------\n    # Args\n        - Input: x, byte RGB image, value range [0, 255]\n        - Ouput: byte gray image, value range [16, 235] \n\n    # Shape\n        - Input: (H, W, C)\n        - Output: (H, W) \n    \"\"\"", "\n", "K", "=", "np", ".", "array", "(", "[", "65.481", ",", "128.553", ",", "24.966", "]", ")", "/", "255.0", "\n", "Y", "=", "16", "+", "np", ".", "matmul", "(", "x", ",", "K", ")", "\n", "return", "Y", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.psnr_ssim.PSNR": [[22, 36], ["rgb2y_matlab.astype", "rgb2y_matlab.astype", "numpy.mean", "psnr_ssim.rgb2y_matlab", "psnr_ssim.rgb2y_matlab", "numpy.square", "numpy.log10"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.psnr_ssim.rgb2y_matlab", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.psnr_ssim.rgb2y_matlab"], ["", "def", "PSNR", "(", "im1", ",", "im2", ",", "use_y_channel", "=", "True", ")", ":", "\n", "    ", "\"\"\"Calculate PSNR score between im1 and im2\n    --------------\n    # Args\n        - im1, im2: input byte RGB image, value range [0, 255]\n        - use_y_channel: if convert im1 and im2 to illumination channel first\n    \"\"\"", "\n", "if", "use_y_channel", ":", "\n", "        ", "im1", "=", "rgb2y_matlab", "(", "im1", ")", "\n", "im2", "=", "rgb2y_matlab", "(", "im2", ")", "\n", "", "im1", "=", "im1", ".", "astype", "(", "np", ".", "float", ")", "\n", "im2", "=", "im2", ".", "astype", "(", "np", ".", "float", ")", "\n", "mse", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "im1", "-", "im2", ")", ")", "\n", "return", "10", "*", "np", ".", "log10", "(", "255", "**", "2", "/", "mse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.psnr_ssim.SSIM": [[38, 51], ["psnr_ssim.rgb2y_matlab", "psnr_ssim.rgb2y_matlab", "skimage.measure.compare_ssim"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.psnr_ssim.rgb2y_matlab", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.psnr_ssim.rgb2y_matlab"], ["", "def", "SSIM", "(", "gt_img", ",", "noise_img", ")", ":", "\n", "    ", "\"\"\"Calculate SSIM score between im1 and im2 in Y space\n    -------------\n    # Args\n        - gt_img: ground truth image, byte RGB image\n        - noise_img: image with noise, byte RGB image\n    \"\"\"", "\n", "gt_img", "=", "rgb2y_matlab", "(", "gt_img", ")", "\n", "noise_img", "=", "rgb2y_matlab", "(", "noise_img", ")", "\n", "\n", "ssim_score", "=", "compare_ssim", "(", "gt_img", ",", "noise_img", ",", "gaussian_weights", "=", "True", ",", "\n", "sigma", "=", "1.5", ",", "use_sample_covariance", "=", "False", ")", "\n", "return", "ssim_score", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.psnr_ssim.psnr_ssim_dir": [[52, 67], ["sorted", "sorted", "zip", "PIL.Image.open", "PIL.Image.open", "numpy.array", "numpy.array", "psnr_ssim.PSNR", "psnr_ssim.SSIM", "os.path.join", "os.path.join", "len", "len", "sorted", "sorted", "os.listdir", "os.listdir"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.psnr_ssim.PSNR", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.None.psnr_ssim.SSIM"], ["", "def", "psnr_ssim_dir", "(", "gt_dir", ",", "test_dir", ")", ":", "\n", "    ", "gt_img_list", "=", "sorted", "(", "[", "x", "for", "x", "in", "sorted", "(", "os", ".", "listdir", "(", "gt_dir", ")", ")", "]", ")", "\n", "test_img_list", "=", "sorted", "(", "[", "x", "for", "x", "in", "sorted", "(", "os", ".", "listdir", "(", "test_dir", ")", ")", "]", ")", "\n", "#  assert gt_img_list == test_img_list, 'Test image names are different from gt images.' ", "\n", "\n", "psnr_score", "=", "0", "\n", "ssim_score", "=", "0", "\n", "for", "gt_name", ",", "test_name", "in", "zip", "(", "gt_img_list", ",", "test_img_list", ")", ":", "\n", "        ", "gt_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "gt_dir", ",", "gt_name", ")", ")", "\n", "test_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "test_dir", ",", "test_name", ")", ")", "\n", "gt_img", "=", "np", ".", "array", "(", "gt_img", ")", "\n", "test_img", "=", "np", ".", "array", "(", "test_img", ")", "\n", "psnr_score", "+=", "PSNR", "(", "gt_img", ",", "test_img", ")", "\n", "ssim_score", "+=", "SSIM", "(", "gt_img", ",", "test_img", ")", "\n", "", "return", "psnr_score", "/", "len", "(", "gt_img_list", ")", ",", "ssim_score", "/", "len", "(", "gt_img_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.timer.Timer.__init__": [[6, 9], ["timer.Timer.reset_timer", "time.time"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.timer.Timer.reset_timer"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_timer", "(", ")", "\n", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.timer.Timer.reset_timer": [[10, 13], ["time.time", "collections.OrderedDict"], "methods", ["None"], ["", "def", "reset_timer", "(", "self", ")", ":", "\n", "        ", "self", ".", "before", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "timer", "=", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.timer.Timer.update_time": [[14, 17], ["time.time", "time.time"], "methods", ["None"], ["", "def", "update_time", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "timer", "[", "key", "]", "=", "time", ".", "time", "(", ")", "-", "self", ".", "before", "\n", "self", ".", "before", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.timer.Timer.to_string": [[18, 31], ["sum", "timer.Timer.timer.values", "datetime.datetime.now", "datetime.timedelta", "datetime.timedelta", "round", "round", "timer.Timer.timer.keys", "timer.Timer.timer.keys", "time.time", "timer.Timer.timer.values"], "methods", ["None"], ["", "def", "to_string", "(", "self", ",", "iters_left", ",", "short", "=", "False", ")", ":", "\n", "        ", "iter_total", "=", "sum", "(", "self", ".", "timer", ".", "values", "(", ")", ")", "\n", "msg", "=", "\"{:%Y-%m-%d %H:%M:%S}\\tElapse: {}\\tTimeLeft: {}\\t\"", ".", "format", "(", "\n", "datetime", ".", "datetime", ".", "now", "(", ")", ",", "\n", "datetime", ".", "timedelta", "(", "seconds", "=", "round", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start", ")", ")", ",", "\n", "datetime", ".", "timedelta", "(", "seconds", "=", "round", "(", "iter_total", "*", "iters_left", ")", ")", "\n", ")", "\n", "if", "short", ":", "\n", "            ", "msg", "+=", "'{}: {:.2f}s'", ".", "format", "(", "'|'", ".", "join", "(", "self", ".", "timer", ".", "keys", "(", ")", ")", ",", "iter_total", ")", "\n", "", "else", ":", "\n", "            ", "msg", "+=", "'\\tIterTotal: {:.2f}s\\t{}: {}  '", ".", "format", "(", "iter_total", ",", "\n", "'|'", ".", "join", "(", "self", ".", "timer", ".", "keys", "(", ")", ")", ",", "' '", ".", "join", "(", "'{:.2f}s'", ".", "format", "(", "x", ")", "for", "x", "in", "self", ".", "timer", ".", "values", "(", ")", ")", ")", "\n", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.__init__": [[11, 33], ["os.path.join", "collections.OrderedDict", "logger.Logger.set_mode", "os.listdir", "logger.Logger.mk_log_file", "tensorboardX.SummaryWriter", "datetime.datetime.datetime.now().strftime", "os.path.join", "os.path.join", "shutil.move", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.set_mode", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.mk_log_file"], ["    ", "def", "__init__", "(", "self", ",", "opts", ")", ":", "\n", "        ", "time_stamp", "=", "'_{}'", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d_%H:%M'", ")", ")", "\n", "self", ".", "opts", "=", "opts", "\n", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "log_dir", ",", "opts", ".", "name", "+", "time_stamp", ")", "\n", "self", ".", "phase_keys", "=", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "self", ".", "iter_log", "=", "[", "]", "\n", "self", ".", "epoch_log", "=", "OrderedDict", "(", ")", "\n", "self", ".", "set_mode", "(", "opts", ".", "phase", ")", "\n", "\n", "# check if exist previous log belong to the same experiment name ", "\n", "exist_log", "=", "None", "\n", "for", "log_name", "in", "os", ".", "listdir", "(", "opts", ".", "log_dir", ")", ":", "\n", "            ", "if", "opts", ".", "name", "in", "log_name", ":", "\n", "                ", "exist_log", "=", "log_name", "\n", "", "", "if", "exist_log", "is", "not", "None", ":", "\n", "            ", "old_dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "log_dir", ",", "exist_log", ")", "\n", "archive_dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "log_archive", ",", "exist_log", ")", "\n", "shutil", ".", "move", "(", "old_dir", ",", "archive_dir", ")", "\n", "\n", "", "self", ".", "mk_log_file", "(", ")", "\n", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.mk_log_file": [[34, 39], ["utils.mkdirs", "collections.OrderedDict", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.mkdirs"], ["", "def", "mk_log_file", "(", "self", ")", ":", "\n", "        ", "mkdirs", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "txt_files", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "self", ".", "phase_keys", ":", "\n", "            ", "self", ".", "txt_files", "[", "i", "]", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "'log_{}'", ".", "format", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.set_mode": [[40, 43], ["None"], "methods", ["None"], ["", "", "def", "set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "epoch_log", "[", "mode", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.set_current_iter": [[44, 46], ["None"], "methods", ["None"], ["", "def", "set_current_iter", "(", "self", ",", "cur_iter", ")", ":", "\n", "        ", "self", ".", "cur_iter", "=", "cur_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.record_losses": [[47, 55], ["logger.Logger.iter_log.append", "items.items", "k.lower", "logger.Logger.writer.add_scalar"], "methods", ["None"], ["", "def", "record_losses", "(", "self", ",", "items", ")", ":", "\n", "        ", "\"\"\"\n        iteration log: [iter][{key: value}]\n        \"\"\"", "\n", "self", ".", "iter_log", ".", "append", "(", "items", ")", "\n", "for", "k", ",", "v", "in", "items", ".", "items", "(", ")", ":", "\n", "            ", "if", "'loss'", "in", "k", ".", "lower", "(", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "'loss/{}'", ".", "format", "(", "k", ")", ",", "v", ",", "self", ".", "cur_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.record_scalar": [[56, 62], ["items.keys", "logger.Logger.writer.add_scalar"], "methods", ["None"], ["", "", "", "def", "record_scalar", "(", "self", ",", "items", ")", ":", "\n", "        ", "\"\"\"\n        Add scalar records. item, {key: value}\n        \"\"\"", "\n", "for", "i", "in", "items", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "'{}'", ".", "format", "(", "i", ")", ",", "items", "[", "i", "]", ",", "self", ".", "cur_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.record_image": [[63, 65], ["logger.Logger.writer.add_image"], "methods", ["None"], ["", "", "def", "record_image", "(", "self", ",", "visual_img", ",", "tag", "=", "'ckpt_image'", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_image", "(", "tag", ",", "visual_img", ",", "self", ".", "cur_iter", ",", "dataformats", "=", "'HWC'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.record_images": [[66, 74], ["min", "range", "numpy.vstack().astype", "logger.Logger.writer.add_image", "numpy.vstack().astype.append", "numpy.hstack", "numpy.vstack"], "methods", ["None"], ["", "def", "record_images", "(", "self", ",", "visuals", ",", "nrow", "=", "6", ",", "tag", "=", "'ckpt_image'", ")", ":", "\n", "        ", "imgs", "=", "[", "]", "\n", "nrow", "=", "min", "(", "nrow", ",", "visuals", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "nrow", ")", ":", "\n", "            ", "tmp_imgs", "=", "[", "x", "[", "i", "]", "for", "x", "in", "visuals", "]", "\n", "imgs", ".", "append", "(", "np", ".", "hstack", "(", "tmp_imgs", ")", ")", "\n", "", "imgs", "=", "np", ".", "vstack", "(", "imgs", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "tag", ",", "imgs", ",", "self", ".", "cur_iter", ",", "dataformats", "=", "'HWC'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.record_text": [[75, 77], ["logger.Logger.writer.add_text"], "methods", ["None"], ["", "def", "record_text", "(", "self", ",", "tag", ",", "text", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_text", "(", "tag", ",", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.printIterSummary": [[78, 86], ["logger.Logger.iter_log[].items", "print", "timer.to_string", "open", "f.write"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.timer.Timer.to_string"], ["", "def", "printIterSummary", "(", "self", ",", "epoch", ",", "cur_iters", ",", "total_it", ",", "timer", ")", ":", "\n", "        ", "msg", "=", "'{}\\nIter: [{}]{:03d}/{:03d}\\t\\t'", ".", "format", "(", "\n", "timer", ".", "to_string", "(", "total_it", "-", "cur_iters", ")", ",", "epoch", ",", "cur_iters", ",", "total_it", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "iter_log", "[", "-", "1", "]", ".", "items", "(", ")", ":", "\n", "            ", "msg", "+=", "'{}: {:.6f}\\t'", ".", "format", "(", "k", ",", "v", ")", "\n", "", "print", "(", "msg", "+", "'\\n'", ")", "\n", "with", "open", "(", "self", ".", "txt_files", "[", "self", ".", "mode", "]", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "msg", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.close": [[87, 90], ["logger.Logger.writer.export_scalars_to_json", "logger.Logger.writer.close", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.logger.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", ".", "export_scalars_to_json", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "'all_scalars.json'", ")", ")", "\n", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.img_to_tensor": [[10, 23], ["PIL.Image.open().convert", "numpy.array", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to.float", "cv2.resize", "PIL.Image.open", "torch.from_numpy().unsqueeze", "torch.from_numpy", "cv.resize.transpose"], "function", ["None"], ["def", "img_to_tensor", "(", "img_path", ",", "device", ",", "size", "=", "None", ",", "mode", "=", "'rgb'", ")", ":", "\n", "    ", "\"\"\"\n    Read image from img_path, and convert to (C, H, W) tensor in range [-1, 1]\n    \"\"\"", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "if", "mode", "==", "'bgr'", ":", "\n", "        ", "img", "=", "img", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "", "if", "size", ":", "\n", "        ", "img", "=", "cv", ".", "resize", "(", "img", ",", "size", ")", "\n", "", "img", "=", "img", "/", "255", "*", "2", "-", "1", "\n", "img_tensor", "=", "torch", ".", "from_numpy", "(", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "return", "img_tensor", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.tensor_to_img": [[25, 40], ["tensor.squeeze().data.cpu().numpy", "img_array.clip.transpose", "img_array.clip.astype", "cv2.resize", "img_array.clip.clip", "skimage.io.imsave", "tensor.squeeze().data.cpu", "img_array.clip.max", "tensor.squeeze"], "function", ["None"], ["", "def", "tensor_to_img", "(", "tensor", ",", "save_path", "=", "None", ",", "size", "=", "None", ",", "mode", "=", "'rgb'", ",", "normal", "=", "False", ")", ":", "\n", "    ", "img_array", "=", "tensor", ".", "squeeze", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img_array", "=", "img_array", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "size", "is", "not", "None", ":", "\n", "        ", "img_array", "=", "cv", ".", "resize", "(", "img_array", ",", "size", ",", "interpolation", "=", "cv", ".", "INTER_LINEAR", ")", "\n", "", "if", "normal", ":", "\n", "#  img_array = (img_array - img_array.min()) / (img_array.max() - img_array.min())", "\n", "        ", "img_array", "=", "(", "img_array", "+", "1.", ")", "/", "2.", "*", "255.", "\n", "img_array", "=", "img_array", ".", "clip", "(", "0", ",", "255", ")", "\n", "", "if", "save_path", ":", "\n", "        ", "if", "img_array", ".", "max", "(", ")", "<=", "1", ":", "\n", "            ", "img_array", "=", "(", "img_array", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "io", ".", "imsave", "(", "save_path", ",", "img_array", ")", "\n", "\n", "", "return", "img_array", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.tensor_to_numpy": [[42, 44], ["tensor.data.cpu().numpy", "tensor.data.cpu"], "function", ["None"], ["", "def", "tensor_to_numpy", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.batch_numpy_to_image": [[46, 63], ["isinstance", "numpy.clip", "numpy.transpose", "range", "numpy.array", "out_imgs.append", "cv2.resize"], "function", ["None"], ["", "def", "batch_numpy_to_image", "(", "array", ",", "size", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Input: numpy array (B, C, H, W) in [-1, 1]\n    \"\"\"", "\n", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "        ", "size", "=", "(", "size", ",", "size", ")", "\n", "\n", "", "out_imgs", "=", "[", "]", "\n", "array", "=", "np", ".", "clip", "(", "(", "array", "+", "1", ")", "/", "2", "*", "255", ",", "0", ",", "255", ")", "\n", "array", "=", "np", ".", "transpose", "(", "array", ",", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "array", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "size", "is", "not", "None", ":", "\n", "            ", "tmp_array", "=", "cv", ".", "resize", "(", "array", "[", "i", "]", ",", "size", ")", "\n", "", "else", ":", "\n", "            ", "tmp_array", "=", "array", "[", "i", "]", "\n", "", "out_imgs", ".", "append", "(", "tmp_array", ")", "\n", "", "return", "np", ".", "array", "(", "out_imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.batch_tensor_to_img": [[65, 73], ["utils.tensor_to_numpy", "utils.batch_numpy_to_image"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.tensor_to_numpy", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.batch_numpy_to_image"], ["", "def", "batch_tensor_to_img", "(", "tensor", ",", "size", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Input: (B, C, H, W) \n    Return: RGB image, [0, 255]\n    \"\"\"", "\n", "arrays", "=", "tensor_to_numpy", "(", "tensor", ")", "\n", "out_imgs", "=", "batch_numpy_to_image", "(", "arrays", ",", "size", ")", "\n", "return", "out_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.mkdirs": [[75, 83], ["isinstance", "isinstance", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "paths", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.get_gpu_memory_map": [[85, 108], ["subprocess.check_output().decode", "numpy.array", "dict", "sorted", "range", "zip", "sorted", "subprocess.check_output", "int", "len", "range", "subprocess.check_output().decode.strip().split", "int", "len", "os.environ[].split", "subprocess.check_output().decode.strip"], "function", ["None"], ["", "", "", "def", "get_gpu_memory_map", "(", ")", ":", "\n", "    ", "\"\"\"Get the current gpu usage within visible cuda devices.\n\n    Returns\n    -------\n    Memory Map: dict\n        Keys are device ids as integers.\n        Values are memory usage as integers in MB.\n    Device Ids: gpu ids sorted in descending order according to the available memory.\n    \"\"\"", "\n", "result", "=", "subprocess", ".", "check_output", "(", "\n", "[", "\n", "'nvidia-smi'", ",", "'--query-gpu=memory.used'", ",", "\n", "'--format=csv,nounits,noheader'", "\n", "]", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "# Convert lines into a dictionary", "\n", "gpu_memory", "=", "np", ".", "array", "(", "[", "int", "(", "x", ")", "for", "x", "in", "result", ".", "strip", "(", ")", ".", "split", "(", "'\\n'", ")", "]", ")", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "        ", "visible_devices", "=", "sorted", "(", "[", "int", "(", "x", ")", "for", "x", "in", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "','", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "visible_devices", "=", "range", "(", "len", "(", "gpu_memory", ")", ")", "\n", "", "gpu_memory_map", "=", "dict", "(", "zip", "(", "range", "(", "len", "(", "visible_devices", ")", ")", ",", "gpu_memory", "[", "visible_devices", "]", ")", ")", "\n", "return", "gpu_memory_map", ",", "sorted", "(", "gpu_memory_map", ",", "key", "=", "gpu_memory_map", ".", "get", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnethd_model.SPARNetHDModel.modify_commandline_options": [[14, 21], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "if", "is_train", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--lambda_pcp'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for vgg perceptual loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_pix'", ",", "type", "=", "float", ",", "default", "=", "100.0", ",", "help", "=", "'weight for pixel loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_fm'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for sr'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_g'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for sr'", ")", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnethd_model.SPARNetHDModel.__init__": [[22, 52], ["base_model.BaseModel.__init__", "models.sparnet.SPARNet", "models.networks.define_network", "copy.deepcopy", "models.networks.MultiScaleDiscriminator", "models.networks.define_network", "models.loss.PCPFeat", "models.networks.define_network", "models.loss.FMLoss().to", "models.loss.GANLoss().to", "models.loss.PCPLoss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "sparnethd_model.SPARNetHDModel.netG.parameters", "sparnethd_model.SPARNetHDModel.netD.parameters", "models.loss.FMLoss", "models.loss.GANLoss"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.define_network", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.define_network", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.define_network"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "\n", "self", ".", "netG", "=", "SPARNet", "(", "min_ch", "=", "32", ",", "max_ch", "=", "512", ",", "in_size", "=", "512", ",", "out_size", "=", "512", ",", "min_feat_size", "=", "32", ",", "\n", "res_depth", "=", "opt", ".", "res_depth", ",", "norm_type", "=", "opt", ".", "Gnorm", ",", "att_name", "=", "opt", ".", "att_name", ",", "bottleneck_size", "=", "opt", ".", "bottleneck_size", ")", "\n", "self", ".", "netG", "=", "networks", ".", "define_network", "(", "opt", ",", "self", ".", "netG", ",", "use_norm", "=", "'spectral_norm'", ")", "\n", "\n", "self", ".", "netH", "=", "copy", ".", "deepcopy", "(", "self", ".", "netG", ")", "\n", "\n", "self", ".", "model_names", "=", "[", "'G'", ",", "'D'", ",", "'H'", "]", "\n", "self", ".", "load_model_names", "=", "[", "'G'", ",", "'H'", "]", "\n", "self", ".", "loss_names", "=", "[", "'Pix'", ",", "'PCP'", ",", "'G'", ",", "'FM'", ",", "'D'", "]", "# Generator loss, fm loss, parsing loss, discriminator loss", "\n", "self", ".", "visual_names", "=", "[", "'img_LR'", ",", "'img_SR'", ",", "'img_HR'", "]", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "load_model_names", "=", "[", "'G'", ",", "'D'", ",", "'H'", "]", "\n", "\n", "self", ".", "netD", "=", "networks", ".", "MultiScaleDiscriminator", "(", "3", ",", "n_layers", "=", "opt", ".", "n_layers_D", ",", "norm_type", "=", "opt", ".", "Dnorm", ",", "num_D", "=", "opt", ".", "num_D", ")", "\n", "self", ".", "netD", "=", "networks", ".", "define_network", "(", "opt", ",", "self", ".", "netD", ",", "use_norm", "=", "'spectral_norm'", ")", "\n", "self", ".", "vgg19", "=", "loss", ".", "PCPFeat", "(", "'./pretrain_models/vgg19-dcbb9e9d.pth'", ",", "'vgg'", ")", "\n", "self", ".", "vgg19", "=", "networks", ".", "define_network", "(", "opt", ",", "self", ".", "vgg19", ",", "isTrain", "=", "False", ",", "init_network", "=", "False", ")", "\n", "\n", "self", ".", "criterionFM", "=", "loss", ".", "FMLoss", "(", ")", ".", "to", "(", "opt", ".", "data_device", ")", "\n", "self", ".", "criterionGAN", "=", "loss", ".", "GANLoss", "(", "opt", ".", "gan_mode", ")", ".", "to", "(", "opt", ".", "data_device", ")", "\n", "self", ".", "criterionPCP", "=", "loss", ".", "PCPLoss", "(", "opt", ")", "\n", "self", ".", "criterionL1", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "self", ".", "optimizer_G", "=", "optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "g_lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.99", ")", ")", "\n", "self", ".", "optimizer_D", "=", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "d_lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.99", ")", ")", "\n", "self", ".", "optimizers", "=", "[", "self", ".", "optimizer_G", ",", "self", ".", "optimizer_D", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnethd_model.SPARNetHDModel.load_pretrain_model": [[53, 57], ["print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "sparnethd_model.SPARNetHDModel.netG.module.load_state_dict"], "methods", ["None"], ["", "", "def", "load_pretrain_model", "(", "self", ",", ")", ":", "\n", "        ", "print", "(", "'Loading pretrained model'", ",", "self", ".", "opt", ".", "pretrain_model_path", ")", "\n", "weight", "=", "torch", ".", "load", "(", "self", ".", "opt", ".", "pretrain_model_path", ")", "\n", "self", ".", "netG", ".", "module", ".", "load_state_dict", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnethd_model.SPARNetHDModel.set_input": [[58, 62], ["input[].to", "input[].to"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ",", "cur_iters", "=", "None", ")", ":", "\n", "        ", "self", ".", "cur_iters", "=", "cur_iters", "\n", "self", ".", "img_LR", "=", "input", "[", "'LR'", "]", ".", "to", "(", "self", ".", "opt", ".", "data_device", ")", "\n", "self", ".", "img_HR", "=", "input", "[", "'HR'", "]", ".", "to", "(", "self", ".", "opt", ".", "data_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnethd_model.SPARNetHDModel.forward": [[63, 76], ["sparnethd_model.SPARNetHDModel.netG", "sparnethd_model.SPARNetHDModel.netD", "sparnethd_model.SPARNetHDModel.netD", "sparnethd_model.SPARNetHDModel.netD", "sparnethd_model.SPARNetHDModel.vgg19", "sparnethd_model.SPARNetHDModel.vgg19", "sparnethd_model.SPARNetHDModel.img_SR.detach", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sparnethd_model.SPARNetHDModel.accumulate", "sparnethd_model.SPARNetHDModel.netH"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.accumulate"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "img_SR", "=", "self", ".", "netG", "(", "self", ".", "img_LR", ")", "\n", "\n", "self", ".", "real_D_results", "=", "self", ".", "netD", "(", "self", ".", "img_HR", ",", "return_feat", "=", "True", ")", "\n", "self", ".", "fake_D_results", "=", "self", ".", "netD", "(", "self", ".", "img_SR", ".", "detach", "(", ")", ",", "return_feat", "=", "False", ")", "\n", "self", ".", "fake_G_results", "=", "self", ".", "netD", "(", "self", ".", "img_SR", ",", "return_feat", "=", "True", ")", "\n", "\n", "self", ".", "fake_vgg_feat", "=", "self", ".", "vgg19", "(", "self", ".", "img_SR", ")", "\n", "self", ".", "real_vgg_feat", "=", "self", ".", "vgg19", "(", "self", ".", "img_HR", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "accumulate", "(", "self", ".", "netH", ",", "self", ".", "netG", ")", "\n", "self", ".", "ema_img_SR", "=", "self", ".", "netH", "(", "self", ".", "img_LR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnethd_model.SPARNetHDModel.backward_G": [[77, 97], ["range", "range", "models.loss.backward", "sparnethd_model.SPARNetHDModel.criterionL1", "sparnethd_model.SPARNetHDModel.criterionPCP", "sparnethd_model.SPARNetHDModel.criterionFM", "sparnethd_model.SPARNetHDModel.criterionGAN"], "methods", ["None"], ["", "", "def", "backward_G", "(", "self", ")", ":", "\n", "# Pix loss", "\n", "        ", "self", ".", "loss_Pix", "=", "self", ".", "criterionL1", "(", "self", ".", "img_SR", ",", "self", ".", "img_HR", ")", "*", "self", ".", "opt", ".", "lambda_pix", "\n", "# perceptual loss", "\n", "self", ".", "loss_PCP", "=", "self", ".", "criterionPCP", "(", "self", ".", "fake_vgg_feat", ",", "self", ".", "real_vgg_feat", ")", "*", "self", ".", "opt", ".", "lambda_pcp", "\n", "\n", "# Feature matching loss", "\n", "tmp_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "            ", "tmp_loss", "=", "tmp_loss", "+", "self", ".", "criterionFM", "(", "self", ".", "fake_G_results", "[", "i", "]", "[", "1", "]", ",", "self", ".", "real_D_results", "[", "i", "]", "[", "1", "]", ")", "\n", "", "self", ".", "loss_FM", "=", "tmp_loss", "*", "self", ".", "opt", ".", "lambda_fm", "/", "self", ".", "opt", ".", "num_D", "\n", "\n", "# Generator loss", "\n", "tmp_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "            ", "tmp_loss", "=", "tmp_loss", "+", "self", ".", "criterionGAN", "(", "self", ".", "fake_G_results", "[", "i", "]", "[", "0", "]", ",", "True", ",", "for_discriminator", "=", "False", ")", "\n", "", "self", ".", "loss_G", "=", "tmp_loss", "*", "self", ".", "opt", ".", "lambda_g", "/", "self", ".", "opt", ".", "num_D", "\n", "\n", "loss", "=", "self", ".", "loss_Pix", "+", "self", ".", "loss_PCP", "+", "self", ".", "loss_FM", "+", "self", ".", "loss_G", "\n", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnethd_model.SPARNetHDModel.backward_D": [[98, 105], ["range", "sparnethd_model.SPARNetHDModel.loss_D.backward", "sparnethd_model.SPARNetHDModel.criterionGAN", "sparnethd_model.SPARNetHDModel.criterionGAN"], "methods", ["None"], ["", "def", "backward_D", "(", "self", ",", ")", ":", "\n", "\n", "        ", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_D", ")", ":", "\n", "            ", "loss", "+=", "0.5", "*", "(", "self", ".", "criterionGAN", "(", "self", ".", "fake_D_results", "[", "i", "]", ",", "False", ")", "+", "self", ".", "criterionGAN", "(", "self", ".", "real_D_results", "[", "i", "]", "[", "0", "]", ",", "True", ")", ")", "\n", "", "self", ".", "loss_D", "=", "loss", "/", "self", ".", "opt", ".", "num_D", "\n", "self", ".", "loss_D", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnethd_model.SPARNetHDModel.optimize_parameters": [[106, 116], ["sparnethd_model.SPARNetHDModel.optimizer_G.zero_grad", "sparnethd_model.SPARNetHDModel.backward_G", "sparnethd_model.SPARNetHDModel.optimizer_G.step", "sparnethd_model.SPARNetHDModel.optimizer_D.zero_grad", "sparnethd_model.SPARNetHDModel.backward_D", "sparnethd_model.SPARNetHDModel.optimizer_D.step"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet_model.SPARNetModel.backward_G", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnethd_model.SPARNetHDModel.backward_D"], ["", "def", "optimize_parameters", "(", "self", ",", ")", ":", "\n", "# ---- Update G ------------", "\n", "        ", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "# ---- Update D ------------", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnethd_model.SPARNetHDModel.get_current_visuals": [[117, 126], ["out.append", "out.append", "out.append", "out.append", "utils.utils.utils.tensor_to_numpy", "utils.utils.utils.tensor_to_numpy", "utils.utils.utils.tensor_to_numpy", "utils.utils.utils.tensor_to_numpy", "utils.utils.utils.batch_numpy_to_image"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.tensor_to_numpy", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.tensor_to_numpy", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.tensor_to_numpy", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.tensor_to_numpy", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.batch_numpy_to_image"], ["", "def", "get_current_visuals", "(", "self", ",", "size", "=", "512", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "out", ".", "append", "(", "utils", ".", "tensor_to_numpy", "(", "self", ".", "img_LR", ")", ")", "\n", "out", ".", "append", "(", "utils", ".", "tensor_to_numpy", "(", "self", ".", "img_SR", ")", ")", "\n", "out", ".", "append", "(", "utils", ".", "tensor_to_numpy", "(", "self", ".", "ema_img_SR", ")", ")", "\n", "out", ".", "append", "(", "utils", ".", "tensor_to_numpy", "(", "self", ".", "img_HR", ")", ")", "\n", "visual_imgs", "=", "[", "utils", ".", "batch_numpy_to_image", "(", "x", ",", "size", ")", "for", "x", "in", "out", "]", "\n", "\n", "return", "visual_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.MultiScaleDiscriminator.__init__": [[114, 125], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "networks.NLayerDiscriminator", "networks.MultiScaleDiscriminator.D_pool.append", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_ch", ",", "base_ch", "=", "64", ",", "n_layers", "=", "4", ",", "norm_type", "=", "'none'", ",", "relu_type", "=", "'LeakyReLU'", ",", "num_D", "=", "4", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "D_pool", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_D", ")", ":", "\n", "            ", "netD", "=", "NLayerDiscriminator", "(", "input_ch", ",", "base_ch", ",", "depth", "=", "n_layers", ",", "norm_type", "=", "norm_type", ",", "relu_type", "=", "relu_type", ")", "\n", "self", ".", "D_pool", ".", "append", "(", "netD", ")", "\n", "\n", "", "def", "downsample", "(", "x", ")", ":", "\n", "            ", "return", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "0.5", ",", "mode", "=", "'bicubic'", ",", "align_corners", "=", "False", ")", "\n", "", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.MultiScaleDiscriminator.forward": [[126, 133], ["netd", "results.append", "networks.MultiScaleDiscriminator.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "return_feat", "=", "False", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "netd", "in", "self", ".", "D_pool", ":", "\n", "            ", "output", "=", "netd", "(", "input", ",", "return_feat", ")", "\n", "results", ".", "append", "(", "output", ")", "\n", "input", "=", "self", ".", "downsample", "(", "input", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.NLayerDiscriminator.__init__": [[136, 156], ["torch.nn.Module.__init__", "networks.NLayerDiscriminator.model.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "ConvLayer", "ConvLayer", "min", "min", "networks.NLayerDiscriminator.model.append", "ConvLayer"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_ch", "=", "3", ",", "\n", "base_ch", "=", "64", ",", "\n", "max_ch", "=", "512", ",", "\n", "depth", "=", "4", ",", "\n", "norm_type", "=", "'none'", ",", "\n", "relu_type", "=", "'LeakyReLU'", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "nargs", "=", "{", "'norm_type'", ":", "norm_type", ",", "'relu_type'", ":", "relu_type", "}", "\n", "\n", "self", ".", "model", "=", "[", "]", "\n", "self", ".", "model", ".", "append", "(", "ConvLayer", "(", "input_ch", ",", "base_ch", ",", "norm_type", "=", "'none'", ",", "relu_type", "=", "relu_type", ")", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "cin", "=", "min", "(", "base_ch", "*", "2", "**", "(", "i", ")", ",", "max_ch", ")", "\n", "cout", "=", "min", "(", "base_ch", "*", "2", "**", "(", "i", "+", "1", ")", ",", "max_ch", ")", "\n", "self", ".", "model", ".", "append", "(", "ConvLayer", "(", "cin", ",", "cout", ",", "scale", "=", "'down'", ",", "**", "nargs", ")", ")", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "self", ".", "score_out", "=", "ConvLayer", "(", "cout", ",", "1", ",", "use_pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.NLayerDiscriminator.forward": [[157, 167], ["enumerate", "networks.NLayerDiscriminator.score_out", "m", "ret_feats.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_feat", "=", "False", ")", ":", "\n", "        ", "ret_feats", "=", "[", "]", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "self", ".", "model", ")", ":", "\n", "            ", "x", "=", "m", "(", "x", ")", "\n", "ret_feats", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "score_out", "(", "x", ")", "\n", "if", "return_feat", ":", "\n", "            ", "return", "x", ",", "ret_feats", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.apply_norm": [[9, 18], ["net.modules", "isinstance", "weight_norm_type.lower", "torch.spectral_norm", "weight_norm_type.lower", "torch.weight_norm"], "function", ["None"], ["def", "apply_norm", "(", "net", ",", "weight_norm_type", ")", ":", "\n", "    ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "if", "weight_norm_type", ".", "lower", "(", ")", "==", "'spectral_norm'", ":", "\n", "                ", "tutils", ".", "spectral_norm", "(", "m", ")", "\n", "", "elif", "weight_norm_type", ".", "lower", "(", ")", "==", "'weight_norm'", ":", "\n", "                ", "tutils", ".", "weight_norm", "(", "m", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.init_weights": [[20, 54], ["isinstance", "print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "", "", "", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ")", ":", "\n", "    ", "\"\"\"Initialize network weights.\n    Parameters:\n        net (network)   -- network to be initialized\n        init_type (str) -- the name of an initialization method: normal | xavier | kaiming | orthogonal\n        init_gain (float)    -- scaling factor for normal, xavier and orthogonal.\n    We use 'normal' in the original pix2pix and CycleGAN paper. But xavier and kaiming might\n    work better for some applications. Feel free to try yourself.\n    \"\"\"", "\n", "def", "init_func", "(", "m", ")", ":", "# define the initialization function", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "# BatchNorm Layer's weight is not a matrix; only normal distribution applies.", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "init_gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "if", "isinstance", "(", "net", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "network_name", "=", "net", ".", "module", ".", "__class__", ".", "__name__", "\n", "", "else", ":", "\n", "        ", "network_name", "=", "net", ".", "__class__", ".", "__name__", "\n", "\n", "", "print", "(", "'initialize network %s with %s'", "%", "(", "network_name", ",", "init_type", ")", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "# apply the initialization function <init_func>", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.init_net": [[56, 71], ["networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "\"\"\"Initialize a network: 1. register CPU/GPU device (with multi-GPU support); 2. initialize the network weights\n    Parameters:\n        net (network)      -- the network to be initialized\n        init_type (str)    -- the name of an initialization method: normal | xavier | kaiming | orthogonal\n        gain (float)       -- scaling factor for normal, xavier and orthogonal.\n        gpu_ids (int list) -- which GPUs the network runs on: e.g., 0,1,2\n    Return an initialized network.\n    \"\"\"", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "# multi-GPUs", "\n", "", "init_weights", "(", "net", ",", "init_type", ",", "init_gain", "=", "init_gain", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.get_scheduler": [[73, 98], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "max", "float", "torch.optim.lr_scheduler.CosineAnnealingLR", "NotImplementedError"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "\"\"\"Return a learning rate scheduler\n    Parameters:\n        optimizer          -- the optimizer of the network\n        opt (option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\uff0e\u3000\n                              opt.lr_policy is the name of learning rate policy: linear | step | plateau | cosine\n    For 'linear', we keep the same learning rate for the first <opt.n_epochs> epochs\n    and linearly decay the rate to zero over the next <opt.n_epochs_decay> epochs.\n    For other schedulers (step, plateau, and cosine), we use the default PyTorch schedulers.\n    See https://pytorch.org/docs/stable/optim.html for more details.\n    \"\"\"", "\n", "if", "opt", ".", "lr_policy", "==", "'linear'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "opt", ".", "epoch_count", "-", "opt", ".", "n_epochs", ")", "/", "float", "(", "opt", ".", "n_epochs_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "opt", ".", "n_epochs", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.define_network": [[100, 111], ["networks.apply_norm", "torch.nn.DataParallel.eval", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel", "networks.init_weights"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.apply_norm", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.init_weights"], ["", "def", "define_network", "(", "opt", ",", "net", ",", "isTrain", "=", "True", ",", "use_norm", "=", "'none'", ",", "init_network", "=", "True", ")", ":", "\n", "    ", "apply_norm", "(", "net", ",", "use_norm", ")", "\n", "if", "not", "isTrain", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "opt", ".", "device", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "opt", ".", "gpu_ids", ",", "output_device", "=", "opt", ".", "data_device", ")", "\n", "", "if", "init_network", ":", "\n", "        ", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.NormLayer.__init__": [[14, 31], ["torch.Module.__init__", "norm_type.lower.lower.lower", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.GroupNorm", "torch.GroupNorm", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "normalize_shape", "=", "None", ",", "norm_type", "=", "'bn'", ")", ":", "\n", "        ", "super", "(", "NormLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_type", "=", "norm_type", ".", "lower", "(", ")", "\n", "if", "norm_type", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "", "elif", "norm_type", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "channels", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'gn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "GroupNorm", "(", "32", ",", "channels", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'pixel'", ":", "\n", "            ", "self", ".", "norm", "=", "lambda", "x", ":", "F", ".", "normalize", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "", "elif", "norm_type", "==", "'layer'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "normalize_shape", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "            ", "self", ".", "norm", "=", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "            ", "assert", "1", "==", "0", ",", "'Norm type {} not support.'", ".", "format", "(", "norm_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.NormLayer.forward": [[32, 34], ["blocks.NormLayer.norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.ReluLayer.__init__": [[47, 62], ["torch.Module.__init__", "relu_type.lower.lower.lower", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.PReLU", "torch.PReLU", "torch.SELU", "torch.SELU"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "relu_type", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "ReluLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "relu_type", "=", "relu_type", ".", "lower", "(", ")", "\n", "if", "relu_type", "==", "'relu'", ":", "\n", "            ", "self", ".", "func", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "", "elif", "relu_type", "==", "'leakyrelu'", ":", "\n", "            ", "self", ".", "func", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "relu_type", "==", "'prelu'", ":", "\n", "            ", "self", ".", "func", "=", "nn", ".", "PReLU", "(", "channels", ")", "\n", "", "elif", "relu_type", "==", "'selu'", ":", "\n", "            ", "self", ".", "func", "=", "nn", ".", "SELU", "(", "True", ")", "\n", "", "elif", "relu_type", "==", "'none'", ":", "\n", "            ", "self", ".", "func", "=", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "            ", "assert", "1", "==", "0", ",", "'Relu type {} not support.'", ".", "format", "(", "relu_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.ReluLayer.forward": [[63, 65], ["blocks.ReluLayer.func"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "func", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.ConvLayer.__init__": [[68, 84], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "blocks.ReluLayer", "blocks.NormLayer", "torch.functional.interpolate", "torch.functional.interpolate"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "scale", "=", "'none'", ",", "norm_type", "=", "'none'", ",", "relu_type", "=", "'none'", ",", "use_pad", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_pad", "=", "use_pad", "\n", "\n", "bias", "=", "True", "if", "norm_type", "in", "[", "'pixel'", ",", "'none'", "]", "else", "False", "\n", "stride", "=", "2", "if", "scale", "==", "'down'", "else", "1", "\n", "\n", "self", ".", "scale_func", "=", "lambda", "x", ":", "x", "\n", "if", "scale", "==", "'up'", ":", "\n", "            ", "self", ".", "scale_func", "=", "lambda", "x", ":", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "", "self", ".", "reflection_pad", "=", "nn", ".", "ReflectionPad2d", "(", "kernel_size", "//", "2", ")", "\n", "self", ".", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "relu", "=", "ReluLayer", "(", "out_channels", ",", "relu_type", ")", "\n", "self", ".", "norm", "=", "NormLayer", "(", "out_channels", ",", "norm_type", "=", "norm_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.ConvLayer.forward": [[85, 93], ["blocks.ConvLayer.scale_func", "blocks.ConvLayer.conv2d", "blocks.ConvLayer.norm", "blocks.ConvLayer.relu", "blocks.ConvLayer.reflection_pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "scale_func", "(", "x", ")", "\n", "if", "self", ".", "use_pad", ":", "\n", "            ", "out", "=", "self", ".", "reflection_pad", "(", "out", ")", "\n", "", "out", "=", "self", ".", "conv2d", "(", "out", ")", "\n", "out", "=", "self", ".", "norm", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.ResidualBlock.__init__": [[103, 141], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "blocks.ConvLayer", "blocks.ConvLayer", "blocks.HourGlassBlock", "blocks.ConvLayer", "blocks.NormLayer", "blocks.ReluLayer", "att_name.lower", "att_name.lower", "Exception"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "c_in", ",", "c_out", ",", "relu_type", "=", "'prelu'", ",", "norm_type", "=", "'bn'", ",", "scale", "=", "'none'", ",", "hg_depth", "=", "2", ",", "att_name", "=", "'spar'", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_out", "=", "c_out", "\n", "self", ".", "norm_type", "=", "norm_type", "\n", "self", ".", "relu_type", "=", "relu_type", "\n", "self", ".", "hg_depth", "=", "hg_depth", "\n", "\n", "kwargs", "=", "{", "'norm_type'", ":", "norm_type", ",", "'relu_type'", ":", "relu_type", "}", "\n", "\n", "if", "scale", "==", "'none'", "and", "c_in", "==", "c_out", ":", "\n", "            ", "self", ".", "shortcut_func", "=", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_func", "=", "ConvLayer", "(", "c_in", ",", "c_out", ",", "3", ",", "scale", ")", "\n", "\n", "", "self", ".", "preact_func", "=", "nn", ".", "Sequential", "(", "\n", "NormLayer", "(", "c_in", ",", "norm_type", "=", "self", ".", "norm_type", ")", ",", "\n", "ReluLayer", "(", "c_in", ",", "self", ".", "relu_type", ")", ",", "\n", ")", "\n", "\n", "if", "scale", "==", "'down'", ":", "\n", "            ", "scales", "=", "[", "'none'", ",", "'down'", "]", "\n", "", "elif", "scale", "==", "'up'", ":", "\n", "            ", "scales", "=", "[", "'up'", ",", "'none'", "]", "\n", "", "elif", "scale", "==", "'none'", ":", "\n", "            ", "scales", "=", "[", "'none'", ",", "'none'", "]", "\n", "\n", "", "self", ".", "conv1", "=", "ConvLayer", "(", "c_in", ",", "c_out", ",", "3", ",", "scales", "[", "0", "]", ",", "**", "kwargs", ")", "\n", "self", ".", "conv2", "=", "ConvLayer", "(", "c_out", ",", "c_out", ",", "3", ",", "scales", "[", "1", "]", ",", "norm_type", "=", "norm_type", ",", "relu_type", "=", "'none'", ")", "\n", "\n", "if", "att_name", ".", "lower", "(", ")", "==", "'spar'", ":", "\n", "            ", "c_attn", "=", "1", "\n", "", "elif", "att_name", ".", "lower", "(", ")", "==", "'spar3d'", ":", "\n", "            ", "c_attn", "=", "c_out", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Attention type {} not implemented\"", ".", "format", "(", "att_name", ")", ")", "\n", "\n", "", "self", ".", "att_func", "=", "HourGlassBlock", "(", "self", ".", "hg_depth", ",", "c_out", ",", "c_attn", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.ResidualBlock.forward": [[142, 149], ["blocks.ResidualBlock.shortcut_func", "blocks.ResidualBlock.preact_func", "blocks.ResidualBlock.conv1", "blocks.ResidualBlock.conv2", "blocks.ResidualBlock.att_func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "self", ".", "shortcut_func", "(", "x", ")", "\n", "out", "=", "self", ".", "preact_func", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "identity", "+", "self", ".", "att_func", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.HourGlassBlock.__init__": [[156, 173], ["torch.Module.__init__", "blocks.HourGlassBlock._generate_network", "torch.Sequential", "torch.Sequential", "blocks.ConvLayer", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.HourGlassBlock._generate_network"], ["def", "__init__", "(", "self", ",", "depth", ",", "c_in", ",", "c_out", ",", "\n", "c_mid", "=", "64", ",", "\n", "norm_type", "=", "'bn'", ",", "\n", "relu_type", "=", "'prelu'", ",", "\n", ")", ":", "\n", "        ", "super", "(", "HourGlassBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_mid", "=", "c_mid", "\n", "self", ".", "c_out", "=", "c_out", "\n", "self", ".", "kwargs", "=", "{", "'norm_type'", ":", "norm_type", ",", "'relu_type'", ":", "relu_type", "}", "\n", "\n", "if", "self", ".", "depth", ":", "\n", "            ", "self", ".", "_generate_network", "(", "self", ".", "depth", ")", "\n", "self", ".", "out_block", "=", "nn", ".", "Sequential", "(", "\n", "ConvLayer", "(", "self", ".", "c_mid", ",", "self", ".", "c_out", ",", "norm_type", "=", "'none'", ",", "relu_type", "=", "'none'", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.HourGlassBlock._generate_network": [[175, 189], ["blocks.HourGlassBlock.add_module", "blocks.HourGlassBlock.add_module", "blocks.HourGlassBlock.add_module", "blocks.ConvLayer", "blocks.ConvLayer", "blocks.HourGlassBlock._generate_network", "blocks.HourGlassBlock.add_module", "blocks.ConvLayer", "str", "str", "blocks.ConvLayer", "str", "str"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.HourGlassBlock._generate_network"], ["", "", "def", "_generate_network", "(", "self", ",", "level", ")", ":", "\n", "        ", "if", "level", "==", "self", ".", "depth", ":", "\n", "            ", "c1", ",", "c2", "=", "self", ".", "c_in", ",", "self", ".", "c_mid", "\n", "", "else", ":", "\n", "            ", "c1", ",", "c2", "=", "self", ".", "c_mid", ",", "self", ".", "c_mid", "\n", "\n", "", "self", ".", "add_module", "(", "'b1_'", "+", "str", "(", "level", ")", ",", "ConvLayer", "(", "c1", ",", "c2", ",", "**", "self", ".", "kwargs", ")", ")", "\n", "self", ".", "add_module", "(", "'b2_'", "+", "str", "(", "level", ")", ",", "ConvLayer", "(", "c1", ",", "c2", ",", "scale", "=", "'down'", ",", "**", "self", ".", "kwargs", ")", ")", "\n", "if", "level", ">", "1", ":", "\n", "            ", "self", ".", "_generate_network", "(", "level", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_module", "(", "'b2_plus_'", "+", "str", "(", "level", ")", ",", "ConvLayer", "(", "self", ".", "c_mid", ",", "self", ".", "c_mid", ",", "**", "self", ".", "kwargs", ")", ")", "\n", "\n", "", "self", ".", "add_module", "(", "'b3_'", "+", "str", "(", "level", ")", ",", "ConvLayer", "(", "self", ".", "c_mid", ",", "self", ".", "c_mid", ",", "scale", "=", "'up'", ",", "**", "self", ".", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.HourGlassBlock._forward": [[190, 203], ["blocks.HourGlassBlock._forward", "torch.functional.interpolate", "torch.functional.interpolate", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.HourGlassBlock._forward"], ["", "def", "_forward", "(", "self", ",", "level", ",", "in_x", ")", ":", "\n", "        ", "up1", "=", "self", ".", "_modules", "[", "'b1_'", "+", "str", "(", "level", ")", "]", "(", "in_x", ")", "\n", "low1", "=", "self", ".", "_modules", "[", "'b2_'", "+", "str", "(", "level", ")", "]", "(", "in_x", ")", "\n", "if", "level", ">", "1", ":", "\n", "            ", "low2", "=", "self", ".", "_forward", "(", "level", "-", "1", ",", "low1", ")", "\n", "", "else", ":", "\n", "            ", "low2", "=", "self", ".", "_modules", "[", "'b2_plus_'", "+", "str", "(", "level", ")", "]", "(", "low1", ")", "\n", "\n", "", "up2", "=", "self", ".", "_modules", "[", "'b3_'", "+", "str", "(", "level", ")", "]", "(", "low2", ")", "\n", "if", "up1", ".", "shape", "[", "2", ":", "]", "!=", "up2", ".", "shape", "[", "2", ":", "]", ":", "\n", "            ", "up2", "=", "nn", ".", "functional", ".", "interpolate", "(", "up2", ",", "up1", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "", "return", "up1", "+", "up2", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.HourGlassBlock.forward": [[204, 211], ["blocks.HourGlassBlock._forward", "blocks.HourGlassBlock.out_block"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.blocks.HourGlassBlock._forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "pmask", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "depth", "==", "0", ":", "return", "x", "\n", "input_x", "=", "x", "\n", "x", "=", "self", ".", "_forward", "(", "self", ".", "depth", ",", "x", ")", "\n", "self", ".", "att_map", "=", "self", ".", "out_block", "(", "x", ")", "\n", "x", "=", "input_x", "*", "self", ".", "att_map", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.PCPFeat.__init__": [[12, 25], ["super().__init__", "loss.PCPFeat.model.load_state_dict", "loss.PCPFeat.model.eval", "loss.PCPFeat.model.parameters", "torchvision.models.vgg19", "loss.PCPFeat.build_vgg_layers", "torch.load", "torchvision.models.resnet50", "loss.PCPFeat.build_resnet_layers"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.PCPFeat.build_vgg_layers", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.PCPFeat.build_resnet_layers"], ["def", "__init__", "(", "self", ",", "weight_path", ",", "model", "=", "'vgg'", ")", ":", "\n", "        ", "super", "(", "PCPFeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "model", "==", "'vgg'", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "vgg19", "(", "pretrained", "=", "False", ")", "\n", "self", ".", "build_vgg_layers", "(", ")", "\n", "", "elif", "model", "==", "'resnet'", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "resnet50", "(", "pretrained", "=", "False", ")", "\n", "self", ".", "build_resnet_layers", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "weight_path", ")", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.PCPFeat.build_resnet_layers": [[26, 39], ["torch.nn.Sequential", "torch.nn.ModuleList"], "methods", ["None"], ["", "", "def", "build_resnet_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "layer1", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "self", ".", "model", ".", "conv1", ",", "\n", "self", ".", "model", ".", "bn1", ",", "\n", "self", ".", "model", ".", "relu", ",", "\n", "self", ".", "model", ".", "maxpool", ",", "\n", "self", ".", "model", ".", "layer1", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "model", ".", "layer2", "\n", "self", ".", "layer3", "=", "self", ".", "model", ".", "layer3", "\n", "self", ".", "layer4", "=", "self", ".", "model", ".", "layer4", "\n", "self", ".", "features", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.PCPFeat.build_vgg_layers": [[41, 51], ["range", "torch.nn.ModuleList", "torch.nn.Sequential", "range", "loss.PCPFeat.features.append", "len", "torch.nn.Sequential.add_module", "str"], "methods", ["None"], ["", "def", "build_vgg_layers", "(", "self", ")", ":", "\n", "        ", "vgg_pretrained_features", "=", "self", ".", "model", ".", "features", "\n", "self", ".", "features", "=", "[", "]", "\n", "feature_layers", "=", "[", "0", ",", "3", ",", "8", ",", "17", ",", "26", ",", "35", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "feature_layers", ")", "-", "1", ")", ":", "\n", "            ", "module_layers", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "for", "j", "in", "range", "(", "feature_layers", "[", "i", "]", ",", "feature_layers", "[", "i", "+", "1", "]", ")", ":", "\n", "                ", "module_layers", ".", "add_module", "(", "str", "(", "j", ")", ",", "vgg_pretrained_features", "[", "j", "]", ")", "\n", "", "self", ".", "features", ".", "append", "(", "module_layers", ")", "\n", "", "self", ".", "features", "=", "torch", ".", "nn", ".", "ModuleList", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.PCPFeat.preprocess": [[52, 62], ["torch.Tensor().to", "torch.Tensor().to", "mean.view.view.view", "std.view.view.view", "torch.nn.functional.interpolate", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "mean", "=", "torch", ".", "Tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", ".", "to", "(", "x", ")", "\n", "std", "=", "torch", ".", "Tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ".", "to", "(", "x", ")", "\n", "mean", "=", "mean", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "std", "=", "std", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "x", "=", "(", "x", "-", "mean", ")", "/", "std", "\n", "if", "x", ".", "shape", "[", "3", "]", "<", "224", ":", "\n", "            ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "size", "=", "(", "224", ",", "224", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.PCPFeat.forward": [[63, 71], ["loss.PCPFeat.preprocess", "m", "features.append"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.PCPFeat.preprocess"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "preprocess", "(", "x", ")", "\n", "\n", "features", "=", "[", "]", "\n", "for", "m", "in", "self", ".", "features", ":", "\n", "            ", "x", "=", "m", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.PCPLoss.__init__": [[76, 86], ["super().__init__", "torch.nn.L1Loss"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "self", ",", "\n", "opt", ",", "\n", "layer", "=", "5", ",", "\n", "model", "=", "'vgg'", ",", "\n", ")", ":", "\n", "        ", "super", "(", "PCPLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "crit", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "#  self.weights = [1.0/32, 1.0/16, 1.0/8, 1.0/4, 1.0]", "\n", "self", ".", "weights", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.PCPLoss.forward": [[87, 92], ["zip", "loss.PCPLoss.crit", "yf.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_feats", ",", "y_feats", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "for", "xf", ",", "yf", ",", "w", "in", "zip", "(", "x_feats", ",", "y_feats", ",", "self", ".", "weights", ")", ":", "\n", "            ", "loss", "=", "loss", "+", "self", ".", "crit", "(", "xf", ",", "yf", ".", "detach", "(", ")", ")", "*", "w", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.FMLoss.__init__": [[95, 98], ["torch.nn.Module.__init__", "torch.nn.L1Loss"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "crit", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.FMLoss.forward": [[99, 104], ["zip", "loss.FMLoss.crit", "yf.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_feats", ",", "y_feats", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "for", "xf", ",", "yf", "in", "zip", "(", "x_feats", ",", "y_feats", ")", ":", "\n", "            ", "loss", "=", "loss", "+", "self", ".", "crit", "(", "xf", ",", "yf", ".", "detach", "(", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.GANLoss.__init__": [[107, 132], ["torch.nn.Module.__init__", "loss.GANLoss.register_buffer", "loss.GANLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.nn.MSELoss", "torch.nn.BCEWithLogitsLoss", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gan_mode", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "\"\"\" Initialize the GANLoss class.\n        Parameters:\n            gan_mode (str) - - the type of GAN objective. It currently supports vanilla, lsgan, and wgangp.\n            target_real_label (bool) - - label for a real image\n            target_fake_label (bool) - - label of a fake image\n        Note: Do not use sigmoid as the last layer of Discriminator.\n        LSGAN needs no sigmoid. vanilla GANs will handle it with BCEWithLogitsLoss.\n        \"\"\"", "\n", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "if", "gan_mode", "==", "'lsgan'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "gan_mode", "==", "'vanilla'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "elif", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "pass", "\n", "", "elif", "gan_mode", "in", "[", "'wgangp'", "]", ":", "\n", "            ", "self", ".", "loss", "=", "None", "\n", "", "elif", "gan_mode", "in", "[", "'softwgan'", "]", ":", "\n", "            ", "self", ".", "loss", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'gan mode %s not implemented'", "%", "gan_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.GANLoss.get_target_tensor": [[133, 139], ["target_tensor.expand_as"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "prediction", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "target_tensor", "=", "self", ".", "real_label", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "fake_label", "\n", "", "return", "target_tensor", ".", "expand_as", "(", "prediction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.GANLoss.__call__": [[140, 173], ["F.softplus().mean.GANLoss.get_target_tensor", "F.softplus().mean.GANLoss.loss", "prediction.mean", "prediction.mean", "prediction.mean", "torch.nn.functional.softplus().mean", "torch.nn.functional.softplus().mean", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.functional.softplus", "torch.nn.functional.softplus"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.loss.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "prediction", ",", "target_is_real", ",", "for_discriminator", "=", "True", ")", ":", "\n", "        ", "\"\"\"Calculate loss given Discriminator's output and grount truth labels.\n        Parameters:\n            prediction (tensor) - - tpyically the prediction output from a discriminator\n            target_is_real (bool) - - if the ground truth label is for real images or fake images\n        Returns:\n            the calculated loss.\n        \"\"\"", "\n", "if", "self", ".", "gan_mode", "in", "[", "'lsgan'", ",", "'vanilla'", "]", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "prediction", ",", "target_is_real", ")", "\n", "loss", "=", "self", ".", "loss", "(", "prediction", ",", "target_tensor", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'hinge'", ":", "\n", "            ", "if", "for_discriminator", ":", "\n", "                ", "if", "target_is_real", ":", "\n", "                    ", "loss", "=", "nn", ".", "ReLU", "(", ")", "(", "1", "-", "prediction", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "nn", ".", "ReLU", "(", ")", "(", "1", "+", "prediction", ")", ".", "mean", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "assert", "target_is_real", ",", "\"The generator's hinge loss must be aiming for real\"", "\n", "loss", "=", "-", "prediction", ".", "mean", "(", ")", "\n", "", "return", "loss", "\n", "\n", "", "elif", "self", ".", "gan_mode", "==", "'wgangp'", ":", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "loss", "=", "-", "prediction", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "prediction", ".", "mean", "(", ")", "\n", "", "", "elif", "self", ".", "gan_mode", "==", "'softwgan'", ":", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "loss", "=", "F", ".", "softplus", "(", "-", "prediction", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "F", ".", "softplus", "(", "prediction", ")", ".", "mean", "(", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet.SPARNet.__init__": [[16, 68], ["torch.nn.Module.__init__", "int", "int", "ch_clip", "sparnet.SPARNet.encoder.append", "int", "range", "torch.nn.Sequential", "range", "torch.nn.Sequential", "range", "torch.nn.Sequential", "ConvLayer", "max", "numpy.log2", "numpy.log2", "ConvLayer", "numpy.log2", "sparnet.SPARNet.encoder.append", "ch_clip", "sparnet.SPARNet.res_layers.append", "sparnet.SPARNet.decoder.append", "ch_clip", "min", "int", "ch_clip", "ch_clip", "ResidualBlock", "ResidualBlock", "ch_clip", "ch_clip", "ResidualBlock", "numpy.log2"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "min_ch", "=", "32", ",", "\n", "max_ch", "=", "128", ",", "\n", "in_size", "=", "128", ",", "\n", "out_size", "=", "128", ",", "\n", "min_feat_size", "=", "16", ",", "\n", "res_depth", "=", "10", ",", "\n", "relu_type", "=", "'leakyrelu'", ",", "\n", "norm_type", "=", "'bn'", ",", "\n", "att_name", "=", "'spar'", ",", "\n", "bottleneck_size", "=", "4", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SPARNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nrargs", "=", "{", "'norm_type'", ":", "norm_type", ",", "'relu_type'", ":", "relu_type", "}", "\n", "\n", "ch_clip", "=", "lambda", "x", ":", "max", "(", "min_ch", ",", "min", "(", "x", ",", "max_ch", ")", ")", "\n", "\n", "down_steps", "=", "int", "(", "np", ".", "log2", "(", "in_size", "//", "min_feat_size", ")", ")", "\n", "up_steps", "=", "int", "(", "np", ".", "log2", "(", "out_size", "//", "min_feat_size", ")", ")", "\n", "n_ch", "=", "ch_clip", "(", "max_ch", "//", "int", "(", "np", ".", "log2", "(", "in_size", "//", "min_feat_size", ")", "+", "1", ")", ")", "\n", "\n", "# ------------ define encoder --------------------", "\n", "self", ".", "encoder", "=", "[", "]", "\n", "self", ".", "encoder", ".", "append", "(", "ConvLayer", "(", "3", ",", "n_ch", ",", "3", ",", "1", ")", ")", "\n", "hg_depth", "=", "int", "(", "np", ".", "log2", "(", "64", "/", "bottleneck_size", ")", ")", "\n", "for", "i", "in", "range", "(", "down_steps", ")", ":", "\n", "            ", "cin", ",", "cout", "=", "ch_clip", "(", "n_ch", ")", ",", "ch_clip", "(", "n_ch", "*", "2", ")", "\n", "self", ".", "encoder", ".", "append", "(", "ResidualBlock", "(", "cin", ",", "cout", ",", "scale", "=", "'down'", ",", "hg_depth", "=", "hg_depth", ",", "att_name", "=", "att_name", ",", "**", "nrargs", ")", ")", "\n", "\n", "n_ch", "=", "n_ch", "*", "2", "\n", "hg_depth", "=", "hg_depth", "-", "1", "\n", "", "hg_depth", "=", "hg_depth", "+", "1", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "encoder", ")", "\n", "\n", "# ------------ define residual layers --------------------", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "res_depth", "+", "3", "-", "down_steps", ")", ":", "\n", "            ", "channels", "=", "ch_clip", "(", "n_ch", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "ResidualBlock", "(", "channels", ",", "channels", ",", "hg_depth", "=", "hg_depth", ",", "att_name", "=", "att_name", ",", "**", "nrargs", ")", ")", "\n", "", "self", ".", "res_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "res_layers", ")", "\n", "\n", "# ------------ define decoder --------------------", "\n", "self", ".", "decoder", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "up_steps", ")", ":", "\n", "            ", "hg_depth", "=", "hg_depth", "+", "1", "\n", "cin", ",", "cout", "=", "ch_clip", "(", "n_ch", ")", ",", "ch_clip", "(", "n_ch", "//", "2", ")", "\n", "self", ".", "decoder", ".", "append", "(", "ResidualBlock", "(", "cin", ",", "cout", ",", "scale", "=", "'up'", ",", "hg_depth", "=", "hg_depth", ",", "att_name", "=", "att_name", ",", "**", "nrargs", ")", ")", "\n", "n_ch", "=", "n_ch", "//", "2", "\n", "\n", "", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "decoder", ")", "\n", "self", ".", "out_conv", "=", "ConvLayer", "(", "ch_clip", "(", "n_ch", ")", ",", "3", ",", "3", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet.SPARNet.forward": [[69, 75], ["sparnet.SPARNet.encoder", "sparnet.SPARNet.res_layers", "sparnet.SPARNet.decoder", "sparnet.SPARNet.out_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_img", ")", ":", "\n", "        ", "out", "=", "self", ".", "encoder", "(", "input_img", ")", "\n", "out", "=", "self", ".", "res_layers", "(", "out", ")", "\n", "out", "=", "self", ".", "decoder", "(", "out", ")", "\n", "out_img", "=", "self", ".", "out_conv", "(", "out", ")", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet_model.SPARNetModel.modify_commandline_options": [[13, 17], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--scale_factor'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'upscale factor for sparnet'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_pix'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'weight for pixel loss'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet_model.SPARNetModel.__init__": [[18, 34], ["base_model.BaseModel.__init__", "models.sparnet.SPARNet", "models.networks.define_network", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.Adam", "torch.Adam", "torch.Adam", "sparnet_model.SPARNetModel.netG.parameters"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.define_network"], ["", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "\n", "self", ".", "netG", "=", "SPARNet", "(", "res_depth", "=", "opt", ".", "res_depth", ",", "norm_type", "=", "opt", ".", "Gnorm", ",", "att_name", "=", "opt", ".", "att_name", ",", "bottleneck_size", "=", "opt", ".", "bottleneck_size", ")", "\n", "self", ".", "netG", "=", "networks", ".", "define_network", "(", "opt", ",", "self", ".", "netG", ")", "\n", "\n", "self", ".", "model_names", "=", "[", "'G'", "]", "\n", "self", ".", "load_model_names", "=", "[", "'G'", "]", "\n", "self", ".", "loss_names", "=", "[", "'Pix'", "]", "\n", "self", ".", "visual_names", "=", "[", "'img_LR'", ",", "'img_SR'", ",", "'img_HR'", "]", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "criterionL1", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "self", ".", "optimizer_G", "=", "optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.99", ")", ")", "\n", "self", ".", "optimizers", "=", "[", "self", ".", "optimizer_G", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet_model.SPARNetModel.load_pretrain_model": [[35, 39], ["print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "sparnet_model.SPARNetModel.netG.module.load_state_dict"], "methods", ["None"], ["", "", "def", "load_pretrain_model", "(", "self", ",", ")", ":", "\n", "        ", "print", "(", "'Loading pretrained model'", ",", "self", ".", "opt", ".", "pretrain_model_path", ")", "\n", "weight", "=", "torch", ".", "load", "(", "self", ".", "opt", ".", "pretrain_model_path", ")", "\n", "self", ".", "netG", ".", "module", ".", "load_state_dict", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet_model.SPARNetModel.set_input": [[40, 44], ["input[].to", "input[].to"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ",", "cur_iters", "=", "None", ")", ":", "\n", "        ", "self", ".", "cur_iters", "=", "cur_iters", "\n", "self", ".", "img_LR", "=", "input", "[", "'LR'", "]", ".", "to", "(", "self", ".", "opt", ".", "data_device", ")", "\n", "self", ".", "img_HR", "=", "input", "[", "'HR'", "]", ".", "to", "(", "self", ".", "opt", ".", "data_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet_model.SPARNetModel.forward": [[45, 47], ["sparnet_model.SPARNetModel.netG"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "img_SR", "=", "self", ".", "netG", "(", "self", ".", "img_LR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet_model.SPARNetModel.backward_G": [[48, 52], ["sparnet_model.SPARNetModel.loss_Pix.backward", "sparnet_model.SPARNetModel.criterionL1"], "methods", ["None"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "# Pix loss", "\n", "        ", "self", ".", "loss_Pix", "=", "self", ".", "criterionL1", "(", "self", ".", "img_SR", ",", "self", ".", "img_HR", ")", "*", "self", ".", "opt", ".", "lambda_pix", "\n", "self", ".", "loss_Pix", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet_model.SPARNetModel.optimize_parameters": [[53, 58], ["sparnet_model.SPARNetModel.optimizer_G.zero_grad", "sparnet_model.SPARNetModel.backward_G", "sparnet_model.SPARNetModel.optimizer_G.step"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet_model.SPARNetModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ",", ")", ":", "\n", "# ---- Update G ------------", "\n", "        ", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.sparnet_model.SPARNetModel.get_current_visuals": [[59, 67], ["out.append", "out.append", "out.append", "utils.utils.utils.tensor_to_numpy", "utils.utils.utils.tensor_to_numpy", "utils.utils.utils.tensor_to_numpy", "utils.utils.utils.batch_numpy_to_image"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.tensor_to_numpy", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.tensor_to_numpy", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.tensor_to_numpy", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.batch_numpy_to_image"], ["", "def", "get_current_visuals", "(", "self", ",", "size", "=", "128", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "out", ".", "append", "(", "utils", ".", "tensor_to_numpy", "(", "self", ".", "img_LR", ")", ")", "\n", "out", ".", "append", "(", "utils", ".", "tensor_to_numpy", "(", "self", ".", "img_SR", ")", ")", "\n", "out", ".", "append", "(", "utils", ".", "tensor_to_numpy", "(", "self", ".", "img_HR", ")", ")", "\n", "visual_imgs", "=", "[", "utils", ".", "batch_numpy_to_image", "(", "x", ",", "size", ")", "for", "x", "in", "out", "]", "\n", "\n", "return", "visual_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.__init__.find_model_using_name": [[25, 46], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], ["def", "find_model_using_name", "(", "model_name", ")", ":", "\n", "    ", "\"\"\"Import the module \"models/[model_name]_model.py\".\n\n    In the file, the class called DatasetNameModel() will\n    be instantiated. It has to be a subclass of BaseModel,\n    and it is case-insensitive.\n    \"\"\"", "\n", "model_filename", "=", "\"models.\"", "+", "model_name", "+", "\"_model\"", "\n", "modellib", "=", "importlib", ".", "import_module", "(", "model_filename", ")", "\n", "model", "=", "None", "\n", "target_model_name", "=", "model_name", ".", "replace", "(", "'_'", ",", "''", ")", "+", "'model'", "\n", "for", "name", ",", "cls", "in", "modellib", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "==", "target_model_name", ".", "lower", "(", ")", "and", "issubclass", "(", "cls", ",", "BaseModel", ")", ":", "\n", "            ", "model", "=", "cls", "\n", "\n", "", "", "if", "model", "is", "None", ":", "\n", "        ", "print", "(", "\"In %s.py, there should be a subclass of BaseModel with class name that matches %s in lowercase.\"", "%", "(", "model_filename", ",", "target_model_name", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.__init__.get_option_setter": [[48, 52], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.__init__.find_model_using_name"], ["", "def", "get_option_setter", "(", "model_name", ")", ":", "\n", "    ", "\"\"\"Return the static method <modify_commandline_options> of the model class.\"\"\"", "\n", "model_class", "=", "find_model_using_name", "(", "model_name", ")", "\n", "return", "model_class", ".", "modify_commandline_options", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.__init__.create_model": [[54, 68], ["__init__.find_model_using_name", "find_model_using_name.", "print", "type"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.__init__.find_model_using_name"], ["", "def", "create_model", "(", "opt", ")", ":", "\n", "    ", "\"\"\"Create a model given the option.\n\n    This function warps the class CustomDatasetDataLoader.\n    This is the main interface between this package and 'train.py'/'test.py'\n\n    Example:\n        >>> from models import create_model\n        >>> model = create_model(opt)\n    \"\"\"", "\n", "model", "=", "find_model_using_name", "(", "opt", ".", "model", ")", "\n", "instance", "=", "model", "(", "opt", ")", "\n", "print", "(", "\"model [%s] was created\"", "%", "type", "(", "instance", ")", ".", "__name__", ")", "\n", "return", "instance", "\n", "", ""]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.__init__": [[17, 43], ["os.path.join", "torch.device", "torch.device"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the BaseModel class.\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n\n        When creating your custom class, you need to implement your own initialization.\n        In this fucntion, you should first call <BaseModel.__init__(self, opt)>\n        Then, you need to define four lists:\n            -- self.loss_names (str list):          specify the training losses that you want to plot and save.\n            -- self.model_names (str list):         specify the images that you want to display and save.\n            -- self.visual_names (str list):        define networks used in our training.\n            -- self.optimizers (optimizer list):    define and initialize optimizers. You can define one optimizer for each network. If two networks are updated at the same time, you can use itertools.chain to group them. See cycle_gan_model.py for an example.\n        \"\"\"", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "# save all the checkpoints to save_dir", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "if", "self", ".", "gpu_ids", "else", "torch", ".", "device", "(", "'cpu'", ")", "# get device name: CPU or GPU", "\n", "\n", "self", ".", "loss_names", "=", "[", "]", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "self", ".", "visual_names", "=", "[", "]", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "image_paths", "=", "[", "]", "\n", "self", ".", "metric", "=", "0", "# used for learning rate policy 'plateau'", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.modify_commandline_options": [[44, 56], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "\"\"\"Add new model-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n        \"\"\"", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.set_input": [[57, 65], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Unpack input data from the dataloader and perform necessary pre-processing steps.\n\n        Parameters:\n            input (dict): includes the data itself and its metadata information.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.forward": [[66, 70], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run forward pass; called by both functions <optimize_parameters> and <test>.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.optimize_parameters": [[71, 75], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate losses, gradients, and update network weights; called in every training iteration\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.setup": [[76, 88], ["base_model.BaseModel.print_networks", "base_model.BaseModel.load_networks", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.print_networks", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.networks.get_scheduler"], ["", "def", "setup", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Load and print networks; create schedulers\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "schedulers", "=", "[", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", "for", "optimizer", "in", "self", ".", "optimizers", "]", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "load_suffix", "=", "'iter_%d'", "%", "opt", ".", "load_iter", "if", "opt", ".", "load_iter", ">", "0", "else", "opt", ".", "epoch", "\n", "self", ".", "load_networks", "(", "load_suffix", ")", "\n", "", "self", ".", "print_networks", "(", "opt", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.eval": [[89, 95], ["isinstance", "getattr", "getattr.eval"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make models eval mode during test time\"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.accumulate": [[96, 103], ["model1.state_dict", "model2.state_dict", "model1.state_dict.keys", "model1.load_state_dict"], "methods", ["None"], ["", "", "", "def", "accumulate", "(", "self", ",", "model1", ",", "model2", ",", "decay", "=", "0.999", ")", ":", "\n", "        ", "par1", "=", "model1", ".", "state_dict", "(", ")", "\n", "par2", "=", "model2", ".", "state_dict", "(", ")", "\n", "\n", "for", "k", "in", "par1", ".", "keys", "(", ")", ":", "\n", "            ", "par1", "[", "k", "]", ".", "data", "=", "par1", "[", "k", "]", ".", "data", "*", "decay", "+", "(", "1", "-", "decay", ")", "*", "par2", "[", "k", "]", ".", "data", "\n", "", "model1", ".", "load_state_dict", "(", "par1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.test": [[104, 113], ["torch.no_grad", "base_model.BaseModel.forward", "base_model.BaseModel.compute_visuals"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.compute_visuals"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Forward function used in test time.\n\n        This function wraps <forward> function in no_grad() so we don't save intermediate steps for backprop\n        It also calls <compute_visuals> to produce additional visualization results\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "forward", "(", ")", "\n", "self", ".", "compute_visuals", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.compute_visuals": [[114, 117], ["None"], "methods", ["None"], ["", "", "def", "compute_visuals", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate additional output images for visdom and HTML visualization\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.get_image_paths": [[118, 121], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\" Return image paths that are used to load current data\"\"\"", "\n", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.update_learning_rate": [[122, 132], ["print", "scheduler.step", "scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update learning rates for all the networks; called at the end of every epoch\"\"\"", "\n", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "if", "self", ".", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "                ", "scheduler", ".", "step", "(", "self", ".", "metric", ")", "\n", "", "else", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'learning rate = %.7f'", "%", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.get_lr": [[133, 138], ["enumerate"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", ")", ":", "\n", "        ", "lrs", "=", "{", "}", "\n", "for", "idx", ",", "p", "in", "enumerate", "(", "self", ".", "optimizers", ")", ":", "\n", "            ", "lrs", "[", "'LR{}'", ".", "format", "(", "idx", ")", "]", "=", "p", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.get_current_visuals": [[139, 146], ["collections.OrderedDict", "isinstance", "getattr"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return visualization images. train.py will display these images with visdom, and save the images to a HTML\"\"\"", "\n", "visual_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "visual_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "visual_ret", "[", "name", "]", "=", "getattr", "(", "self", ",", "name", ")", "\n", "", "", "return", "visual_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.get_current_losses": [[147, 154], ["collections.OrderedDict", "isinstance", "float", "getattr"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return traning losses / errors. train.py will print out these errors on console, and save them to a file\"\"\"", "\n", "errors_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "errors_ret", "[", "'Loss_'", "+", "name", "]", "=", "float", "(", "getattr", "(", "self", ",", "'loss_'", "+", "name", ")", ")", "# float(...) works for both scalar tensor and float number", "\n", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.save_networks": [[155, 179], ["torch.save", "isinstance", "opts.append", "os.path.join", "torch.save", "os.path.join", "getattr", "opt.state_dict", "os.path.join", "torch.cuda.is_available", "torch.save", "getattr.cuda", "torch.save", "len", "getattr.module.cpu().state_dict", "getattr.cpu().state_dict", "getattr.module.cpu", "getattr.cpu"], "methods", ["None"], ["", "def", "save_networks", "(", "self", ",", "epoch", ",", "info", "=", "None", ")", ":", "\n", "        ", "\"\"\"Save all the networks to the disk.\n\n        Parameters:\n            epoch (int) -- current epoch; used in the file name '%s_net_%s.pth' % (epoch, name)\n        \"\"\"", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "module", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "net", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "", "", "", "opts", "=", "[", "]", "\n", "for", "opt", "in", "self", ".", "optimizers", ":", "\n", "            ", "opts", ".", "append", "(", "opt", ".", "state_dict", "(", ")", ")", "\n", "", "torch", ".", "save", "(", "opts", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'%s_opts.pth'", "%", "epoch", ")", ")", "\n", "\n", "if", "info", "is", "not", "None", ":", "\n", "            ", "torch", ".", "save", "(", "info", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'%s.info'", "%", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.__patch_instance_norm_state_dict": [[180, 193], ["len", "base_model.BaseModel.__patch_instance_norm_state_dict", "module.__class__.__name__.startswith", "module.__class__.__name__.startswith", "state_dict.pop", "getattr", "getattr", "state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "def", "__patch_instance_norm_state_dict", "(", "self", ",", "state_dict", ",", "module", ",", "keys", ",", "i", "=", "0", ")", ":", "\n", "        ", "\"\"\"Fix InstanceNorm checkpoints incompatibility (prior to 0.4)\"\"\"", "\n", "key", "=", "keys", "[", "i", "]", "\n", "if", "i", "+", "1", "==", "len", "(", "keys", ")", ":", "# at the end, pointing to a parameter/buffer", "\n", "            ", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'running_mean'", "or", "key", "==", "'running_var'", ")", ":", "\n", "                ", "if", "getattr", "(", "module", ",", "key", ")", "is", "None", ":", "\n", "                    ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'num_batches_tracked'", ")", ":", "\n", "                ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "getattr", "(", "module", ",", "key", ")", ",", "keys", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.load_networks": [[194, 235], ["torch.load", "zip", "os.path.join", "os.path.exists", "os.path.join", "opt.load_state_dict", "isinstance", "torch.load", "torch.load.items", "os.path.join", "getattr", "isinstance", "print", "torch.load", "getattr.state_dict", "getattr.state_dict.update", "getattr.load_state_dict", "setattr", "str", "torch.load.items"], "methods", ["None"], ["", "", "def", "load_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Load all the networks from the disk.\n\n        Parameters:\n            epoch (int) -- current epoch; used in the file name '%s_net_%s.pth' % (epoch, name)\n        \"\"\"", "\n", "# Load optimizers", "\n", "saved_opts", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'%s_opts.pth'", "%", "epoch", ")", ")", "\n", "for", "sopt", ",", "opt", "in", "zip", "(", "saved_opts", ",", "self", ".", "optimizers", ")", ":", "\n", "            ", "opt", ".", "load_state_dict", "(", "sopt", ")", "\n", "\n", "# Load model weights ", "\n", "", "for", "name", "in", "self", ".", "load_model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "load_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net", "=", "net", ".", "module", "\n", "", "print", "(", "'loading the model from %s'", "%", "load_path", ")", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "#  if hasattr(state_dict, '_metadata'):", "\n", "#  del state_dict._metadata", "\n", "\n", "# patch InstanceNorm checkpoints prior to 0.4", "\n", "#  for key in list(state_dict.keys()):  # need to copy keys here because we mutate in loop", "\n", "#  self.__patch_instance_norm_state_dict(state_dict, net, key.split('.'))", "\n", "#  net.load_state_dict(state_dict)", "\n", "#  Load partial weights", "\n", "model_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "net", ".", "load_state_dict", "(", "model_dict", ",", "strict", "=", "False", ")", "\n", "\n", "", "", "info_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'%s.info'", "%", "epoch", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "info_path", ")", ":", "\n", "            ", "info_dict", "=", "torch", ".", "load", "(", "info_path", ")", "\n", "for", "k", ",", "v", "in", "info_dict", ".", "items", "(", ")", ":", "\n", "                ", "setattr", "(", "self", ".", "opt", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.print_networks": [[236, 253], ["print", "print", "isinstance", "getattr", "getattr.parameters", "print", "param.numel", "print"], "methods", ["None"], ["", "", "", "def", "print_networks", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "\"\"\"Print the total number of parameters in the network and (if verbose) network architecture\n\n        Parameters:\n            verbose (bool) -- if verbose: print the network architecture\n        \"\"\"", "\n", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "net", ")", "\n", "", "print", "(", "'[Network %s] Total number of parameters : %.3f M'", "%", "(", "name", ",", "num_params", "/", "1e6", ")", ")", "\n", "", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.models.base_model.BaseModel.set_requires_grad": [[254, 266], ["isinstance", "net.parameters"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Set requies_grad=Fasle for all the networks to avoid unnecessary computations\n        Parameters:\n            nets (network list)   -- a list of networks\n            requires_grad (bool)  -- whether the networks require gradients or not\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.ffhq_dataset.FFHQDataset.__init__": [[16, 27], ["data.base_dataset.BaseDataset.__init__", "ffhq_dataset.FFHQDataset.get_img_names", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.celeba_dataset.CelebADataset.get_img_names"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "self", ".", "img_size", "=", "opt", ".", "load_size", "\n", "self", ".", "shuffle", "=", "True", "if", "opt", ".", "isTrain", "else", "False", "\n", "\n", "self", ".", "img_dir", "=", "opt", ".", "dataroot", "\n", "self", ".", "img_names", "=", "self", ".", "get_img_names", "(", ")", "\n", "\n", "self", ".", "to_tensor", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.ffhq_dataset.FFHQDataset.get_img_names": [[29, 34], ["random.shuffle", "os.listdir"], "methods", ["None"], ["", "def", "get_img_names", "(", "self", ",", ")", ":", "\n", "        ", "img_names", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "self", ".", "img_dir", ")", "]", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "img_names", ")", "\n", "", "return", "img_names", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.ffhq_dataset.FFHQDataset.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ",", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.ffhq_dataset.FFHQDataset.__getitem__": [[38, 52], ["os.path.join", "PIL.Image.open().convert", "random_gray.resize", "ffhq_dataset.random_gray", "numpy.random.randint", "ffhq_dataset.complex_imgaug", "ffhq_dataset.FFHQDataset.to_tensor", "ffhq_dataset.FFHQDataset.to_tensor", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.ffhq_dataset.random_gray", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.ffhq_dataset.complex_imgaug"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "{", "}", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "self", ".", "img_names", "[", "idx", "]", ")", "\n", "\n", "hr_img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "hr_img", "=", "hr_img", ".", "resize", "(", "(", "self", ".", "img_size", ",", "self", ".", "img_size", ")", ")", "\n", "hr_img", "=", "random_gray", "(", "hr_img", ",", "p", "=", "0.3", ")", "\n", "scale_size", "=", "np", ".", "random", ".", "randint", "(", "32", ",", "128", ")", "\n", "lr_img", "=", "complex_imgaug", "(", "hr_img", ",", "self", ".", "img_size", ",", "scale_size", ")", "\n", "\n", "hr_tensor", "=", "self", ".", "to_tensor", "(", "hr_img", ")", "\n", "lr_tensor", "=", "self", ".", "to_tensor", "(", "lr_img", ")", "\n", "\n", "return", "{", "'HR'", ":", "hr_tensor", ",", "'LR'", ":", "lr_tensor", ",", "'HR_paths'", ":", "img_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.ffhq_dataset.complex_imgaug": [[54, 73], ["numpy.array", "imgaug.Sequential", "iaa.Sequential.", "imgaug.Sometimes", "imgaug.Resize", "imgaug.Sometimes", "imgaug.Sometimes", "imgaug.Resize", "imgaug.OneOf", "imgaug.AdditiveGaussianNoise", "imgaug.JpegCompression", "imgaug.GaussianBlur", "imgaug.AverageBlur", "imgaug.MedianBlur", "imgaug.MotionBlur"], "function", ["None"], ["", "", "def", "complex_imgaug", "(", "x", ",", "org_size", ",", "scale_size", ")", ":", "\n", "    ", "\"\"\"input single RGB PIL Image instance\"\"\"", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "x", "=", "x", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "\n", "aug_seq", "=", "iaa", ".", "Sequential", "(", "[", "\n", "iaa", ".", "Sometimes", "(", "0.5", ",", "iaa", ".", "OneOf", "(", "[", "\n", "iaa", ".", "GaussianBlur", "(", "(", "3", ",", "15", ")", ")", ",", "\n", "iaa", ".", "AverageBlur", "(", "k", "=", "(", "3", ",", "15", ")", ")", ",", "\n", "iaa", ".", "MedianBlur", "(", "k", "=", "(", "3", ",", "15", ")", ")", ",", "\n", "iaa", ".", "MotionBlur", "(", "(", "5", ",", "25", ")", ")", "\n", "]", ")", ")", ",", "\n", "iaa", ".", "Resize", "(", "scale_size", ",", "interpolation", "=", "ia", ".", "ALL", ")", ",", "\n", "iaa", ".", "Sometimes", "(", "0.2", ",", "iaa", ".", "AdditiveGaussianNoise", "(", "loc", "=", "0", ",", "scale", "=", "(", "0.0", ",", "0.1", "*", "255", ")", ",", "per_channel", "=", "0.5", ")", ")", ",", "\n", "iaa", ".", "Sometimes", "(", "0.7", ",", "iaa", ".", "JpegCompression", "(", "compression", "=", "(", "10", ",", "65", ")", ")", ")", ",", "\n", "iaa", ".", "Resize", "(", "org_size", ")", ",", "\n", "]", ")", "\n", "\n", "aug_img", "=", "aug_seq", "(", "images", "=", "x", ")", "\n", "return", "aug_img", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.ffhq_dataset.random_gray": [[75, 82], ["numpy.array", "imgaug.Sometimes", "iaa.Sometimes.", "imgaug.Grayscale"], "function", ["None"], ["", "def", "random_gray", "(", "x", ",", "p", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"input single RGB PIL Image instance\"\"\"", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "x", "=", "x", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", "\n", "aug", "=", "iaa", ".", "Sometimes", "(", "p", ",", "iaa", ".", "Grayscale", "(", "alpha", "=", "1.0", ")", ")", "\n", "aug_img", "=", "aug", "(", "images", "=", "x", ")", "\n", "return", "aug_img", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.celeba_dataset.CelebADataset.__init__": [[17, 35], ["data.base_dataset.BaseDataset.__init__", "celeba_dataset.CelebADataset.get_img_names", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.RandomHorizontalFlip", "celeba_dataset.Scale", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.celeba_dataset.CelebADataset.get_img_names"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "\n", "self", ".", "shuffle", "=", "True", "if", "opt", ".", "isTrain", "else", "False", "\n", "self", ".", "lr_size", "=", "opt", ".", "load_size", "//", "opt", ".", "scale_factor", "\n", "self", ".", "hr_size", "=", "opt", ".", "load_size", "\n", "\n", "self", ".", "img_dir", "=", "opt", ".", "dataroot", "\n", "self", ".", "img_names", "=", "self", ".", "get_img_names", "(", ")", "\n", "\n", "self", ".", "aug", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "Scale", "(", "(", "1.0", ",", "1.3", ")", ",", "opt", ".", "load_size", ")", "\n", "]", ")", "\n", "\n", "self", ".", "to_tensor", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.celeba_dataset.CelebADataset.get_img_names": [[37, 42], ["random.shuffle", "os.listdir"], "methods", ["None"], ["", "def", "get_img_names", "(", "self", ",", ")", ":", "\n", "        ", "img_names", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "self", ".", "img_dir", ")", "]", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "img_names", ")", "\n", "", "return", "img_names", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.celeba_dataset.CelebADataset.__len__": [[43, 45], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ",", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.celeba_dataset.CelebADataset.__getitem__": [[46, 60], ["os.path.join", "PIL.Image.open().convert", "celeba_dataset.CelebADataset.aug", "celeba_dataset.CelebADataset.resize", "celeba_dataset.CelebADataset.resize.resize", "celeba_dataset.CelebADataset.to_tensor", "celeba_dataset.CelebADataset.to_tensor", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "self", ".", "img_names", "[", "idx", "]", ")", "\n", "\n", "hr_img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "hr_img", "=", "self", ".", "aug", "(", "hr_img", ")", "\n", "\n", "# downsample and upsample to get the LR image", "\n", "lr_img", "=", "hr_img", ".", "resize", "(", "(", "self", ".", "lr_size", ",", "self", ".", "lr_size", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "lr_img_up", "=", "lr_img", ".", "resize", "(", "(", "self", ".", "hr_size", ",", "self", ".", "hr_size", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n", "hr_tensor", "=", "self", ".", "to_tensor", "(", "hr_img", ")", "\n", "lr_tensor", "=", "self", ".", "to_tensor", "(", "lr_img_up", ")", "\n", "\n", "return", "{", "'HR'", ":", "hr_tensor", ",", "'LR'", ":", "lr_tensor", ",", "'HR_paths'", ":", "img_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.celeba_dataset.Scale.__init__": [[69, 76], ["torchvision.transforms.transforms.RandomResizedCrop"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "factor", ",", "size", ")", ":", "\n", "        ", "self", ".", "factor", "=", "factor", "\n", "rc_scale", "=", "(", "2", "-", "factor", "[", "1", "]", ",", "1", ")", "\n", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "self", ".", "rc_scale", "=", "rc_scale", "\n", "self", ".", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", "\n", "self", ".", "resize_crop", "=", "transforms", ".", "RandomResizedCrop", "(", "size", ",", "rc_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.celeba_dataset.Scale.__call__": [[77, 91], ["torchvision.resize", "int", "int", "celeba_dataset.Scale.resize_crop.get_params", "torchvision.resized_crop", "random.random", "torchvision.pad"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "scale_factor", "=", "random", ".", "random", "(", ")", "*", "(", "self", ".", "factor", "[", "1", "]", "-", "self", ".", "factor", "[", "0", "]", ")", "+", "self", ".", "factor", "[", "0", "]", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "sw", ",", "sh", "=", "int", "(", "w", "*", "scale_factor", ")", ",", "int", "(", "h", "*", "scale_factor", ")", "\n", "scaled_img", "=", "tf", ".", "resize", "(", "img", ",", "(", "sh", ",", "sw", ")", ")", "\n", "if", "sw", ">", "w", ":", "\n", "            ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "resize_crop", ".", "get_params", "(", "img", ",", "self", ".", "rc_scale", ",", "self", ".", "ratio", ")", "\n", "scaled_img", "=", "tf", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", "\n", "", "elif", "sw", "<", "w", ":", "\n", "            ", "lp", "=", "(", "w", "-", "sw", ")", "//", "2", "\n", "tp", "=", "(", "h", "-", "sh", ")", "//", "2", "\n", "padding", "=", "(", "lp", ",", "tp", ",", "w", "-", "sw", "-", "lp", ",", "h", "-", "sh", "-", "tp", ")", "\n", "scaled_img", "=", "tf", ".", "pad", "(", "scaled_img", ",", "padding", ")", "\n", "", "return", "scaled_img", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.BaseDataset.__init__": [[25, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the class; save the options in the class\n\n        Parameters:\n            opt (Option class)-- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.BaseDataset.modify_commandline_options": [[34, 46], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "\"\"\"Add new dataset-specific options, and rewrite default values for existing options.\n\n        Parameters:\n            parser          -- original option parser\n            is_train (bool) -- whether training phase or test phase. You can use this flag to add training-specific or test-specific options.\n\n        Returns:\n            the modified parser.\n        \"\"\"", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.BaseDataset.__len__": [[47, 51], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images in the dataset.\"\"\"", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.BaseDataset.__getitem__": [[52, 63], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index - - a random integer for data indexing\n\n        Returns:\n            a dictionary of data with their names. It ususally contains the data itself and its metadata information.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.get_params": [[65, 81], ["random.randint", "random.randint", "numpy.maximum", "numpy.maximum", "random.random"], "function", ["None"], ["", "", "def", "get_params", "(", "opt", ",", "size", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "new_h", "=", "h", "\n", "new_w", "=", "w", "\n", "if", "opt", ".", "preprocess", "==", "'resize_and_crop'", ":", "\n", "        ", "new_h", "=", "new_w", "=", "opt", ".", "load_size", "\n", "", "elif", "opt", ".", "preprocess", "==", "'scale_width_and_crop'", ":", "\n", "        ", "new_w", "=", "opt", ".", "load_size", "\n", "new_h", "=", "opt", ".", "load_size", "*", "h", "//", "w", "\n", "\n", "", "x", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_w", "-", "opt", ".", "crop_size", ")", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "np", ".", "maximum", "(", "0", ",", "new_h", "-", "opt", ".", "crop_size", ")", ")", "\n", "\n", "flip", "=", "random", ".", "random", "(", ")", ">", "0.5", "\n", "\n", "return", "{", "'crop_pos'", ":", "(", "x", ",", "y", ")", ",", "'flip'", ":", "flip", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.get_transform": [[82, 119], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.Resize", "transform_list.append", "transform_list.append", "torchvision.Lambda", "transform_list.append", "torchvision.ToTensor", "torchvision.Lambda", "torchvision.RandomCrop", "transform_list.append", "transform_list.append", "torchvision.RandomHorizontalFlip", "transform_list.append", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Lambda", "torchvision.Lambda", "base_dataset.__make_power_2", "torchvision.Lambda", "base_dataset.__scale_width", "base_dataset.__crop", "base_dataset.__crop", "base_dataset.__flip"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.__make_power_2", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.__crop", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.__crop", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.__flip"], ["", "def", "get_transform", "(", "opt", ",", "params", "=", "None", ",", "grayscale", "=", "False", ",", "method", "=", "Image", ".", "BICUBIC", ",", "convert", "=", "True", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "grayscale", ":", "\n", "#  transform_list.append(transforms.Grayscale(1))", "\n", "        ", "from", "util", "import", "util", "\n", "transform_list", ".", "append", "(", "util", ".", "RGBtoY", ")", "\n", "", "if", "'resize'", "in", "opt", ".", "preprocess", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "load_size", ",", "opt", ".", "load_size", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "method", ")", ")", "\n", "", "elif", "'scale_width'", "in", "opt", ".", "preprocess", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "load_size", ",", "method", ")", ")", ")", "\n", "\n", "", "if", "'crop'", "in", "opt", ".", "preprocess", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "crop_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "'crop_size'", "in", "params", ":", "\n", "                ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__crop", "(", "img", ",", "params", "[", "'crop_pos'", "]", ",", "params", "[", "'crop_size'", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__crop", "(", "img", ",", "params", "[", "'crop_pos'", "]", ",", "opt", ".", "crop_size", ")", ")", ")", "\n", "\n", "", "", "", "if", "opt", ".", "preprocess", "==", "'none'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__make_power_2", "(", "img", ",", "base", "=", "4", ",", "method", "=", "method", ")", ")", ")", "\n", "\n", "", "if", "not", "opt", ".", "no_flip", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "elif", "params", "[", "'flip'", "]", ":", "\n", "            ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "__flip", "(", "img", ",", "params", "[", "'flip'", "]", ")", ")", ")", "\n", "\n", "", "", "if", "convert", ":", "\n", "        ", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", "]", "\n", "if", "grayscale", ":", "\n", "            ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", ")", ",", "(", "0.5", ",", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "transform_list", "+=", "[", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "", "", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.__make_power_2": [[121, 130], ["int", "int", "base_dataset.__print_size_warning", "img.resize", "round", "round"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.__print_size_warning"], ["", "def", "__make_power_2", "(", "img", ",", "base", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "h", "=", "int", "(", "round", "(", "oh", "/", "base", ")", "*", "base", ")", "\n", "w", "=", "int", "(", "round", "(", "ow", "/", "base", ")", "*", "base", ")", "\n", "if", "(", "h", "==", "oh", ")", "and", "(", "w", "==", "ow", ")", ":", "\n", "        ", "return", "img", "\n", "\n", "", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.__scale_width": [[132, 139], ["int", "img.resize"], "function", ["None"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ",", "method", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "if", "(", "ow", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "h", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.__crop": [[141, 148], ["img.crop"], "function", ["None"], ["", "def", "__crop", "(", "img", ",", "pos", ",", "size", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "x1", ",", "y1", "=", "pos", "\n", "tw", "=", "th", "=", "size", "\n", "if", "(", "ow", ">", "tw", "or", "oh", ">", "th", ")", ":", "\n", "        ", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.__flip": [[150, 154], ["img.transpose"], "function", ["None"], ["", "def", "__flip", "(", "img", ",", "flip", ")", ":", "\n", "    ", "if", "flip", ":", "\n", "        ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.__print_size_warning": [[156, 164], ["hasattr", "print"], "function", ["None"], ["", "def", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ":", "\n", "    ", "\"\"\"Print warning information about image size(only print once)\"\"\"", "\n", "if", "not", "hasattr", "(", "__print_size_warning", ",", "'has_printed'", ")", ":", "\n", "        ", "print", "(", "\"The image size needs to be a multiple of 4. \"", "\n", "\"The loaded image size was (%d, %d), so it was adjusted to \"", "\n", "\"(%d, %d). This adjustment will be done to all images \"", "\n", "\"whose sizes are not multiples of 4\"", "%", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ")", "\n", "__print_size_warning", ".", "has_printed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.single_dataset.SingleDataset.__init__": [[9, 19], ["data.base_dataset.BaseDataset.__init__", "sorted", "data.base_dataset.get_transform", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.base_dataset.get_transform", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.image_folder.make_dataset"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize this dataset class.\n\n        Parameters:\n            opt (Option class) -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        \"\"\"", "\n", "BaseDataset", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "self", ".", "A_paths", "=", "sorted", "(", "make_dataset", "(", "opt", ".", "dataroot", ",", "opt", ".", "max_dataset_size", ")", ")", "\n", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ",", "grayscale", "=", "(", "input_nc", "==", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.single_dataset.SingleDataset.__getitem__": [[20, 35], ["PIL.Image.open().convert", "A_img.resize.resize.resize", "single_dataset.SingleDataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return a data point and its metadata information.\n\n        Parameters:\n            index - - a random integer for data indexing\n\n        Returns a dictionary that contains A and A_paths\n            A(tensor) - - an image in one domain\n            A_paths(str) - - the path of the image\n        \"\"\"", "\n", "A_path", "=", "self", ".", "A_paths", "[", "index", "]", "\n", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "A_img", "=", "A_img", ".", "resize", "(", "(", "self", ".", "opt", ".", "load_size", ",", "self", ".", "opt", ".", "load_size", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "A", "=", "self", ".", "transform", "(", "A_img", ")", "\n", "return", "{", "'LR'", ":", "A", ",", "'LR_paths'", ":", "A_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.single_dataset.SingleDataset.__len__": [[36, 39], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the total number of images in the dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "A_paths", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.image_folder.ImageFolder.__init__": [[42, 55], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.image_folder.ImageFolder.__getitem__": [[56, 65], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.image_folder.ImageFolder.__len__": [[66, 68], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.image_folder.is_image_file": [[20, 22], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.image_folder.make_dataset": [[24, 34], ["float", "os.path.isdir", "os.path.isdir", "sorted", "os.walk", "os.walk", "image_folder.is_image_file", "min", "os.path.join", "os.path.join", "images.append", "len"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.image_folder.is_image_file"], ["", "def", "make_dataset", "(", "dir", ",", "max_dataset_size", "=", "float", "(", "\"inf\"", ")", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "", "", "", "return", "images", "[", ":", "min", "(", "max_dataset_size", ",", "len", "(", "images", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.image_folder.default_loader": [[36, 38], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.__init__.CustomDatasetDataLoader.__init__": [[65, 81], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "print", "torch.utils.data.DataLoader", "int", "type"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.__init__.find_dataset_using_name"], ["instance", "=", "model", "(", "opt", ")", "\n", "print", "(", "\"model [%s] was created\"", "%", "type", "(", "instance", ")", ".", "__name__", ")", "\n", "return", "instance", "\n", "", ""]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.__init__.CustomDatasetDataLoader.load_data": [[82, 84], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.__init__.CustomDatasetDataLoader.__len__": [[85, 88], ["min", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.__init__.CustomDatasetDataLoader.__iter__": [[89, 95], ["enumerate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.__init__.find_dataset_using_name": [[18, 39], ["importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "NotImplementedError", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["None"], ["\n", "\n", "import", "importlib", "\n", "from", "models", ".", "base_model", "import", "BaseModel", "\n", "\n", "\n", "def", "find_model_using_name", "(", "model_name", ")", ":", "\n", "    ", "\"\"\"Import the module \"models/[model_name]_model.py\".\n\n    In the file, the class called DatasetNameModel() will\n    be instantiated. It has to be a subclass of BaseModel,\n    and it is case-insensitive.\n    \"\"\"", "\n", "model_filename", "=", "\"models.\"", "+", "model_name", "+", "\"_model\"", "\n", "modellib", "=", "importlib", ".", "import_module", "(", "model_filename", ")", "\n", "model", "=", "None", "\n", "target_model_name", "=", "model_name", ".", "replace", "(", "'_'", ",", "''", ")", "+", "'model'", "\n", "for", "name", ",", "cls", "in", "modellib", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "lower", "(", ")", "==", "target_model_name", ".", "lower", "(", ")", "and", "issubclass", "(", "cls", ",", "BaseModel", ")", ":", "\n", "            ", "model", "=", "cls", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.__init__.get_option_setter": [[41, 45], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.__init__.find_dataset_using_name"], ["", "", "if", "model", "is", "None", ":", "\n", "        ", "print", "(", "\"In %s.py, there should be a subclass of BaseModel with class name that matches %s in lowercase.\"", "%", "(", "model_filename", ",", "target_model_name", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "return", "model", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.__init__.create_dataset": [[47, 60], ["__init__.CustomDatasetDataLoader", "__init__.CustomDatasetDataLoader.load_data"], "function", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.__init__.CustomDatasetDataLoader.load_data"], ["\n", "", "def", "get_option_setter", "(", "model_name", ")", ":", "\n", "    ", "\"\"\"Return the static method <modify_commandline_options> of the model class.\"\"\"", "\n", "model_class", "=", "find_model_using_name", "(", "model_name", ")", "\n", "return", "model_class", ".", "modify_commandline_options", "\n", "\n", "\n", "", "def", "create_model", "(", "opt", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.test_options.TestOptions.initialize": [[10, 28], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.set_defaults", "float", "base_options.BaseOptions.initialize.get_default"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.initialize"], ["def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "# define shared options", "\n", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_img_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'path of single test image.'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_upscale'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'upscale single test image.'", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_as_dir'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'save results in different dir.'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain_model_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'load pretrain model path if specified'", ")", "\n", "# Dropout and Batchnorm has different behavioir during training and test.", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use eval mode during test time.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_test'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'how many test images to run'", ")", "\n", "# rewrite devalue values", "\n", "parser", ".", "set_defaults", "(", "model", "=", "'test'", ")", "\n", "# To avoid cropping, the load_size should be the same as crop_size", "\n", "parser", ".", "set_defaults", "(", "load_size", "=", "parser", ".", "get_default", "(", "'crop_size'", ")", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.train_options.TrainOptions.initialize": [[9, 40], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.initialize"], ["def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "# visdom and HTML visualization parameters", "\n", "parser", ".", "add_argument", "(", "'--visual_freq'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'frequency of show training images in tensorboard'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "# network saving and loading parameters", "\n", "parser", ".", "add_argument", "(", "'--save_iter_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of saving the models'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'save latest freq'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_by_iter'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether saves model by iteration'", ")", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_count'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "# training parameters", "\n", "parser", ".", "add_argument", "(", "'--resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'training resume epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_iter'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'training resume iter'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of epochs with the initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_epochs_decay'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of epochs to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--total_epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'# of epochs to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--g_lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_lr'", ",", "type", "=", "float", ",", "default", "=", "0.0004", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'hinge'", ",", "help", "=", "'the type of GAN objective. [vanilla| lsgan | hinge]. vanilla GAN loss is the cross-entropy objective used in the original GAN paper.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'linear'", ",", "help", "=", "'learning rate policy. [linear | step | plateau | cosine]'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_iters'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'multiply by a gamma every lr_decay_iters iterations'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.__init__": [[19, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the class; indicates the class hasn't been initailized\"\"\"", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.initialize": [[23, 63], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "\"\"\"Define the common options that are used in both training and test.\"\"\"", "\n", "# basic parameters", "\n", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "required", "=", "False", ",", "help", "=", "'path to images (should have subfolders trainA, trainB, valA, valB, etc)'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'experiment_name'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'how many gpus to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "123", ",", "help", "=", "'Random seed for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./check_points'", ",", "help", "=", "'models are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, set to debug mode'", ")", "\n", "# model parameters", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'sparnet'", ",", "help", "=", "'chooses which model to train [parse|enhance]'", ")", "\n", "parser", ".", "add_argument", "(", "'--att_name'", ",", "type", "=", "str", ",", "default", "=", "'spar'", ",", "help", "=", "'attention type [spar|spar3d]'", ")", "\n", "parser", ".", "add_argument", "(", "'--res_depth'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'depth of residual layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--bottleneck_size'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'bottleneck feature size in hourglass block'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels: 3 for RGB and 1 for grayscale'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels: 3 for RGB and 1 for grayscale'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in the last conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in the first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'downsampling layers in discriminator'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'numbers of discriminators'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--Gnorm'", ",", "type", "=", "str", ",", "default", "=", "'bn'", ",", "help", "=", "'generator norm [in | bn | none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--Dnorm'", ",", "type", "=", "str", ",", "default", "=", "'none'", ",", "help", "=", "'discriminator norm [in | bn | none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "help", "=", "'network initialization [normal | xavier | kaiming | orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_gain'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'scaling factor for normal, xavier and orthogonal.'", ")", "\n", "# dataset parameters", "\n", "parser", ".", "add_argument", "(", "'--dataset_name'", ",", "type", "=", "str", ",", "default", "=", "'celeba'", ",", "help", "=", "'dataset name'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_threads'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'scale images to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--preprocess'", ",", "type", "=", "str", ",", "default", "=", "'none'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop | crop | scale_width | scale_width_and_crop | none]'", ")", "\n", "# additional parameters", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_iter'", ",", "type", "=", "int", ",", "default", "=", "'0'", ",", "help", "=", "'which iteration to load? if load_iter > 0, the code will load models by iter_[load_iter]; otherwise, the code will load models by [epoch]'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, print more debugging information'", ")", "\n", "parser", ".", "add_argument", "(", "'--suffix'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'customized suffix: opt.name = opt.name + suffix: e.g., {model}_{netG}_size{load_size}'", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.gather_options": [[64, 91], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "base_options.BaseOptions.parse_known_args", "data.get_option_setter", "data.get_option_setter.", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.initialize"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize our parser with basic options(only once).\n        Add additional model-specific and dataset-specific options.\n        These options are defined in the <modify_commandline_options> function\n        in model and dataset classes.\n        \"\"\"", "\n", "if", "not", "self", ".", "initialized", ":", "# check if it has been initialized", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "# get the basic options", "\n", "", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "# parse again with new defaults", "\n", "\n", "# modify dataset-related parser options", "\n", "dataset_name", "=", "opt", ".", "dataset_name", "\n", "dataset_option_setter", "=", "data", ".", "get_option_setter", "(", "dataset_name", ")", "\n", "parser", "=", "dataset_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "# save and return the parser", "\n", "self", ".", "parser", "=", "parser", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.print_options": [[92, 121], ["sorted", "print", "os.path.join", "utils.utils.utils.mkdirs", "os.path.join", "os.path.join", "utils.utils.utils.mkdirs", "os.path.join", "utils.utils.utils.mkdirs", "vars().items", "base_options.BaseOptions.parser.get_default", "open", "opt_file.write", "opt_file.write", "str", "str", "vars", "str"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.mkdirs", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.mkdirs", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.mkdirs"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Print and save options\n\n        It will print both current options and default values(if different).\n        It will save options into a text file / [checkpoints_dir] / opt.txt\n        \"\"\"", "\n", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n", "# save to the disk", "\n", "opt", ".", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "utils", ".", "mkdirs", "(", "opt", ".", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "expr_dir", ",", "'{}_opt.txt'", ".", "format", "(", "opt", ".", "phase", ")", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "message", ")", "\n", "opt_file", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "opt", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "'log_dir'", ")", "\n", "utils", ".", "mkdirs", "(", "opt", ".", "log_dir", ")", "\n", "opt", ".", "log_archive", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "'log_archive'", ")", "\n", "utils", ".", "mkdirs", "(", "opt", ".", "log_archive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.parse": [[122, 154], ["base_options.BaseOptions.gather_options", "numpy.random.seed", "random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "base_options.BaseOptions.print_options", "torch.cuda.set_device", "torch.device", "torch.device", "torch.device", "isinstance", "utils.utils.utils.get_gpu_memory_map", "base_options.BaseOptions.suffix.format", "vars"], "methods", ["home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.options.base_options.BaseOptions.print_options", "home.repos.pwc.inspect_result.chaofengc_Face-SPARNet.utils.utils.get_gpu_memory_map"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Parse our options, create checkpoints directory suffix, and set up gpu device.\"\"\"", "\n", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "# Find avaliable GPUs automatically", "\n", "if", "opt", ".", "gpus", ">", "0", ":", "\n", "            ", "opt", ".", "gpu_ids", "=", "utils", ".", "get_gpu_memory_map", "(", ")", "[", "1", "]", "[", ":", "opt", ".", "gpus", "]", "\n", "if", "not", "isinstance", "(", "opt", ".", "gpu_ids", ",", "list", ")", ":", "\n", "                ", "opt", ".", "gpu_ids", "=", "[", "opt", ".", "gpu_ids", "]", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "opt", ".", "gpu_ids", "[", "0", "%", "opt", ".", "gpus", "]", ")", ")", "\n", "opt", ".", "data_device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "opt", ".", "gpu_ids", "[", "1", "%", "opt", ".", "gpus", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "opt", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "# set random seed for reproducibility", "\n", "", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "opt", ".", "seed", ")", "\n", "\n", "# process opt.suffix", "\n", "if", "opt", ".", "suffix", ":", "\n", "            ", "suffix", "=", "(", "'_'", "+", "opt", ".", "suffix", ".", "format", "(", "**", "vars", "(", "opt", ")", ")", ")", "if", "opt", ".", "suffix", "!=", "''", "else", "''", "\n", "opt", ".", "name", "=", "opt", ".", "name", "+", "suffix", "\n", "\n", "", "self", ".", "print_options", "(", "opt", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]]}